; ModuleID = 'binary/test.mcsema.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_402e80__rodata_type = type <{ [112 x i8], [7 x i8], [51 x i8], [8 x i8], [84 x i8] }>
%seg_603df0__init_array_type = type <{ i64, i64 }>
%seg_603ff0__got_type = type <{ i64, i64 }>
%seg_604060__bss_type = type <{ [8 x i8], [8 x i8] }>
%polybench_papi_counters_threadid_type = type <{ [8 x i8] }>
%polybench_program_total_flops_type = type <{ [8 x i8] }>
%polybench_c_end_type = type <{ [8 x i8] }>
%polybench_t_end_type = type <{ [8 x i8] }>
%polybench_t_start_type = type <{ [8 x i8] }>
%polybench_c_start_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external local_unnamed_addr global i64, align 32
@seg_402e80__rodata = internal constant %seg_402e80__rodata_type <{ [112 x i8] c"\01\00\02\00\00\00\00\00\00\00\00\00\00\00E@\00\00\00\00\00J\A2@\00\00\00\00\00\00&@\00\00\00\00\00\00$@\00\00\00\00\00\00\08@\00\00\00\00\00\00\00@\00\00\00\00\00\00\F0?\00\00\00\00\00\00\18@\00\00\00\00\00\00\14@\00\00\00\00\00\00\10@\F1h\E3\88\B5\F8\E4>\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [7 x i8] c"%0.6f\0A\00", [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", [8 x i8] c"%0.2lf \00", [84 x i8] c"A[%d][%d][%d] = %lf and B[%d][%d][%d] = %lf differ more than FP_ABSTOLERANCE = %lf\0A\00" }>
@seg_603df0__init_array = internal global %seg_603df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400690_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400660___do_global_dtors_aux to i64) }>
@seg_603ff0__got = internal global %seg_603ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_604060__bss = internal global %seg_604060__bss_type zeroinitializer
@polybench_papi_counters_threadid = local_unnamed_addr global %polybench_papi_counters_threadid_type zeroinitializer
@polybench_program_total_flops = local_unnamed_addr global %polybench_program_total_flops_type zeroinitializer
@polybench_c_end = local_unnamed_addr global %polybench_c_end_type zeroinitializer
@polybench_t_end = local_unnamed_addr global %polybench_t_end_type zeroinitializer
@polybench_t_start = local_unnamed_addr global %polybench_t_start_type zeroinitializer
@polybench_c_start = local_unnamed_addr global %polybench_c_start_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400690_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400660___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402e70___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402e00___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_flush_cache_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_timer_stop_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_alloc_data_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_timer_print_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_timer_start_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_prepare_instruments_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @sub_400f90_init_array_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4005f0_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402bf0_print_array_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400750_rtclock_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4006a0_polybench_flush_cache_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401f10_kernel_fdtd_apml_StrictFP_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400520__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400720_polybench_prepare_instruments_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402a50_check_FP_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4013d0_kernel_fdtd_apml_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400800_xmalloc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #2 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() local_unnamed_addr #3 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exit(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @calloc(i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @posix_memalign(i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @free(i64) #5

; Function Attrs: noinline
define %struct.Memory* @sub_4005e0__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4005e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  %9 = add i64 %6, 8
  store i64 %9, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4006a0_polybench_flush_cache(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4006a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -40
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 32
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #8
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  store i64 8, i64* %RAX, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %39 = add i64 %7, -12
  %40 = add i64 %10, 21
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %39 to i32*
  store i32 4194560, i32* %41, align 4
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -4
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i32*
  %47 = load i32, i32* %46, align 4
  %48 = sext i32 %47 to i64
  store i64 %48, i64* %RDI, align 8, !tbaa !2428
  %49 = add i64 %44, -326
  %50 = add i64 %44, 9
  %51 = load i64, i64* %6, align 8, !tbaa !2428
  %52 = add i64 %51, -8
  %53 = inttoptr i64 %52 to i64*
  store i64 %50, i64* %53, align 8
  store i64 %52, i64* %6, align 8, !tbaa !2428
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %49, i64* %54, align 8, !tbaa !2428
  %55 = tail call fastcc %struct.Memory* @ext_6040b8_calloc(%struct.State* nonnull %0, %struct.Memory* %2)
  %56 = bitcast %union.VectorReg* %3 to i8*
  %57 = load i64, i64* %PC, align 8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %59 = bitcast %union.VectorReg* %3 to i32*
  store i32 0, i32* %59, align 1, !tbaa !2451
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i32*
  store i32 0, i32* %61, align 1, !tbaa !2451
  %62 = bitcast i64* %58 to i32*
  store i32 0, i32* %62, align 1, !tbaa !2451
  %63 = getelementptr inbounds i8, i8* %56, i64 12
  %64 = bitcast i8* %63 to i32*
  store i32 0, i32* %64, align 1, !tbaa !2451
  %65 = load i64, i64* %RBP, align 8
  %66 = add i64 %65, -16
  %67 = load i64, i64* %RAX, align 8
  %68 = add i64 %57, 7
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %66 to i64*
  store i64 %67, i64* %69, align 8
  %70 = load i64, i64* %RBP, align 8
  %71 = add i64 %70, -32
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 5
  store i64 %73, i64* %PC, align 8
  %74 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %75 = load i64, i64* %74, align 1
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = load i64, i64* %RBP, align 8
  %78 = add i64 %77, -20
  %79 = load i64, i64* %PC, align 8
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %78 to i32*
  store i32 0, i32* %81, align 4
  %82 = bitcast %union.VectorReg* %3 to double*
  %83 = bitcast i64* %58 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_4006d2

block_4006de:                                     ; preds = %block_4006d2
  %84 = add i64 %206, 8
  store i64 %84, i64* %PC, align 8
  %85 = load i32, i32* %173, align 4
  %86 = sext i32 %85 to i64
  store i64 %86, i64* %RCX, align 8, !tbaa !2428
  %87 = shl nsw i64 %86, 3
  %88 = add i64 %87, %210
  %89 = add i64 %206, 13
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %88 to double*
  %91 = load double, double* %90, align 8
  store double %91, double* %82, align 1, !tbaa !2452
  store double 0.000000e+00, double* %83, align 1, !tbaa !2452
  %92 = add i64 %170, -32
  %93 = add i64 %206, 18
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %92 to double*
  %95 = load double, double* %94, align 8
  %96 = fadd double %91, %95
  store double %96, double* %82, align 1, !tbaa !2452
  store i64 0, i64* %58, align 1, !tbaa !2452
  %97 = add i64 %206, 23
  store i64 %97, i64* %PC, align 8
  store double %96, double* %94, align 8
  %98 = load i64, i64* %RBP, align 8
  %99 = add i64 %98, -20
  %100 = load i64, i64* %PC, align 8
  %101 = add i64 %100, 3
  store i64 %101, i64* %PC, align 8
  %102 = inttoptr i64 %99 to i32*
  %103 = load i32, i32* %102, align 4
  %104 = add i32 %103, 1
  %105 = zext i32 %104 to i64
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = icmp eq i32 %103, -1
  %107 = icmp eq i32 %104, 0
  %108 = or i1 %106, %107
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %14, align 1, !tbaa !2432
  %110 = and i32 %104, 255
  %111 = tail call i32 @llvm.ctpop.i32(i32 %110) #8
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  store i8 %114, i8* %21, align 1, !tbaa !2446
  %115 = xor i32 %103, %104
  %116 = lshr i32 %115, 4
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  store i8 %118, i8* %26, align 1, !tbaa !2447
  %119 = icmp eq i32 %104, 0
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %29, align 1, !tbaa !2448
  %121 = lshr i32 %104, 31
  %122 = trunc i32 %121 to i8
  store i8 %122, i8* %32, align 1, !tbaa !2449
  %123 = lshr i32 %103, 31
  %124 = xor i32 %121, %123
  %125 = add nuw nsw i32 %124, %121
  %126 = icmp eq i32 %125, 2
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %38, align 1, !tbaa !2450
  %128 = add i64 %100, 9
  store i64 %128, i64* %PC, align 8
  store i32 %104, i32* %102, align 4
  %129 = load i64, i64* %PC, align 8
  %130 = add i64 %129, -44
  store i64 %130, i64* %54, align 8, !tbaa !2428
  br label %block_4006d2

block_400703:                                     ; preds = %block_4006d2
  store i64 %210, i64* %RDI, align 8, !tbaa !2428
  %131 = add i64 %206, -435
  %132 = add i64 %206, 12
  %133 = load i64, i64* %6, align 8, !tbaa !2428
  %134 = add i64 %133, -8
  %135 = inttoptr i64 %134 to i64*
  store i64 %132, i64* %135, align 8
  store i64 %134, i64* %6, align 8, !tbaa !2428
  store i64 %131, i64* %54, align 8, !tbaa !2428
  %136 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %55)
  %137 = load i64, i64* %RSP, align 8
  %138 = load i64, i64* %PC, align 8
  %139 = add i64 %137, 32
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  %140 = icmp ugt i64 %137, -33
  %141 = zext i1 %140 to i8
  store i8 %141, i8* %14, align 1, !tbaa !2432
  %142 = trunc i64 %139 to i32
  %143 = and i32 %142, 255
  %144 = tail call i32 @llvm.ctpop.i32(i32 %143) #8
  %145 = trunc i32 %144 to i8
  %146 = and i8 %145, 1
  %147 = xor i8 %146, 1
  store i8 %147, i8* %21, align 1, !tbaa !2446
  %148 = xor i64 %137, %139
  %149 = lshr i64 %148, 4
  %150 = trunc i64 %149 to i8
  %151 = and i8 %150, 1
  store i8 %151, i8* %26, align 1, !tbaa !2447
  %152 = icmp eq i64 %139, 0
  %153 = zext i1 %152 to i8
  store i8 %153, i8* %29, align 1, !tbaa !2448
  %154 = lshr i64 %139, 63
  %155 = trunc i64 %154 to i8
  store i8 %155, i8* %32, align 1, !tbaa !2449
  %156 = lshr i64 %137, 63
  %157 = xor i64 %154, %156
  %158 = add nuw nsw i64 %157, %154
  %159 = icmp eq i64 %158, 2
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %38, align 1, !tbaa !2450
  %161 = add i64 %138, 5
  store i64 %161, i64* %PC, align 8
  %162 = add i64 %137, 40
  %163 = inttoptr i64 %139 to i64*
  %164 = load i64, i64* %163, align 8
  store i64 %164, i64* %RBP, align 8, !tbaa !2428
  store i64 %162, i64* %6, align 8, !tbaa !2428
  %165 = add i64 %138, 6
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %162 to i64*
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %54, align 8, !tbaa !2428
  %168 = add i64 %137, 48
  store i64 %168, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %136

block_4006d2:                                     ; preds = %block_4006de, %block_4006a0
  %169 = phi i64 [ %130, %block_4006de ], [ %.pre, %block_4006a0 ]
  %170 = load i64, i64* %RBP, align 8
  %171 = add i64 %170, -20
  %172 = add i64 %169, 3
  store i64 %172, i64* %PC, align 8
  %173 = inttoptr i64 %171 to i32*
  %174 = load i32, i32* %173, align 4
  %175 = zext i32 %174 to i64
  store i64 %175, i64* %RAX, align 8, !tbaa !2428
  %176 = add i64 %170, -4
  %177 = add i64 %169, 6
  store i64 %177, i64* %PC, align 8
  %178 = inttoptr i64 %176 to i32*
  %179 = load i32, i32* %178, align 4
  %180 = sub i32 %174, %179
  %181 = icmp ult i32 %174, %179
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %14, align 1, !tbaa !2432
  %183 = and i32 %180, 255
  %184 = tail call i32 @llvm.ctpop.i32(i32 %183) #8
  %185 = trunc i32 %184 to i8
  %186 = and i8 %185, 1
  %187 = xor i8 %186, 1
  store i8 %187, i8* %21, align 1, !tbaa !2446
  %188 = xor i32 %179, %174
  %189 = xor i32 %188, %180
  %190 = lshr i32 %189, 4
  %191 = trunc i32 %190 to i8
  %192 = and i8 %191, 1
  store i8 %192, i8* %26, align 1, !tbaa !2447
  %193 = icmp eq i32 %180, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %29, align 1, !tbaa !2448
  %195 = lshr i32 %180, 31
  %196 = trunc i32 %195 to i8
  store i8 %196, i8* %32, align 1, !tbaa !2449
  %197 = lshr i32 %174, 31
  %198 = lshr i32 %179, 31
  %199 = xor i32 %198, %197
  %200 = xor i32 %195, %197
  %201 = add nuw nsw i32 %200, %199
  %202 = icmp eq i32 %201, 2
  %203 = zext i1 %202 to i8
  store i8 %203, i8* %38, align 1, !tbaa !2450
  %204 = icmp ne i8 %196, 0
  %205 = xor i1 %204, %202
  %.v = select i1 %205, i64 12, i64 49
  %206 = add i64 %169, %.v
  %207 = add i64 %170, -16
  %208 = add i64 %206, 4
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209, align 8
  store i64 %210, i64* %RAX, align 8, !tbaa !2428
  br i1 %205, label %block_4006de, label %block_400703
}

; Function Attrs: noinline
define %struct.Memory* @sub_400660___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400660:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604060__bss_type* @seg_604060__bss to i64), i64 8) to i8*), align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4, align 1, !tbaa !2432
  %5 = zext i8 %3 to i32
  %6 = tail call i32 @llvm.ctpop.i32(i32 %5) #8
  %7 = trunc i32 %6 to i8
  %8 = and i8 %7, 1
  %9 = xor i8 %8, 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9, i8* %10, align 1, !tbaa !2446
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1, !tbaa !2447
  %12 = icmp eq i8 %3, 0
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13, i8* %14, align 1, !tbaa !2448
  %15 = lshr i8 %3, 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15, i8* %16, align 1, !tbaa !2449
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1, !tbaa !2450
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %.v = select i1 %12, i64 9, i64 32
  %19 = add i64 %.v, %1
  store i64 %19, i64* %18, align 8, !tbaa !2428
  br i1 %12, label %block_400669, label %block_400680

block_400680:                                     ; preds = %block_400660
  %20 = add i64 %19, 2
  store i64 %20, i64* %PC, align 8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = inttoptr i64 %22 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %18, align 8, !tbaa !2428
  %25 = add i64 %22, 8
  store i64 %25, i64* %21, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400669:                                     ; preds = %block_400660
  %26 = load i64, i64* %RBP, align 8
  %27 = add i64 %19, 1
  store i64 %27, i64* %PC, align 8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %26, i64* %31, align 8
  %32 = load i64, i64* %PC, align 8
  store i64 %30, i64* %RBP, align 8, !tbaa !2428
  %33 = add i64 %32, -122
  %34 = add i64 %32, 8
  %35 = add i64 %29, -16
  %36 = inttoptr i64 %35 to i64*
  store i64 %34, i64* %36, align 8
  store i64 %35, i64* %28, align 8, !tbaa !2428
  store i64 %33, i64* %18, align 8, !tbaa !2428
  %37 = tail call %struct.Memory* @sub_4005f0_deregister_tm_clones_renamed_(%struct.State* nonnull %0, i64 %33, %struct.Memory* %2)
  %38 = load i64, i64* %PC, align 8
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604060__bss_type* @seg_604060__bss to i64), i64 8) to i8*), align 8
  %39 = add i64 %38, 8
  store i64 %39, i64* %PC, align 8
  %40 = load i64, i64* %28, align 8, !tbaa !2428
  %41 = add i64 %40, 8
  %42 = inttoptr i64 %40 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  store i64 %41, i64* %28, align 8, !tbaa !2428
  %44 = add i64 %38, 9
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %41 to i64*
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %18, align 8, !tbaa !2428
  %47 = add i64 %40, 16
  store i64 %47, i64* %28, align 8, !tbaa !2428
  ret %struct.Memory* %37
}

; Function Attrs: noinline
define %struct.Memory* @sub_400760_polybench_timer_stop(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400760:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, -17
  %11 = add i64 %9, 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %5, align 8, !tbaa !2428
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10, i64* %14, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_400750_rtclock_renamed_(%struct.State* nonnull %0, i64 %10, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %18 = load i64, i64* %17, align 1
  store i64 %18, i64* bitcast (%polybench_t_end_type* @polybench_t_end to i64*), align 8
  %19 = add i64 %16, 10
  store i64 %19, i64* %PC, align 8
  %20 = load i64, i64* %5, align 8, !tbaa !2428
  %21 = add i64 %20, 8
  %22 = inttoptr i64 %20 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %RBP, align 8, !tbaa !2428
  store i64 %21, i64* %5, align 8, !tbaa !2428
  %24 = add i64 %16, 11
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %21 to i64*
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %14, align 8, !tbaa !2428
  %27 = add i64 %20, 16
  store i64 %27, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_400730_polybench_timer_start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400730:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, -17
  %11 = add i64 %9, 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %5, align 8, !tbaa !2428
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10, i64* %14, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_400720_polybench_prepare_instruments_renamed_(%struct.State* nonnull %0, i64 %10, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 23
  %18 = add i64 %16, 5
  %19 = load i64, i64* %5, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %18, i64* %21, align 8
  store i64 %20, i64* %5, align 8, !tbaa !2428
  store i64 %17, i64* %14, align 8, !tbaa !2428
  %22 = tail call %struct.Memory* @sub_400750_rtclock_renamed_(%struct.State* nonnull %0, i64 %17, %struct.Memory* %15)
  %23 = load i64, i64* %PC, align 8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %25 = load i64, i64* %24, align 1
  store i64 %25, i64* bitcast (%polybench_t_start_type* @polybench_t_start to i64*), align 8
  %26 = add i64 %23, 10
  store i64 %26, i64* %PC, align 8
  %27 = load i64, i64* %5, align 8, !tbaa !2428
  %28 = add i64 %27, 8
  %29 = inttoptr i64 %27 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %RBP, align 8, !tbaa !2428
  store i64 %28, i64* %5, align 8, !tbaa !2428
  %31 = add i64 %23, 11
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %28 to i64*
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %14, align 8, !tbaa !2428
  %34 = add i64 %27, 16
  store i64 %34, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %22
}

; Function Attrs: noinline
define %struct.Memory* @sub_400620_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400620:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 6307928, i64* %RSI, align 8, !tbaa !2428
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 6
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %RSI, align 8
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %9, -6307928
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %18 = ashr i64 %11, 3
  %19 = lshr i64 %18, 63
  store i64 %19, i64* %RAX, align 8, !tbaa !2428
  %20 = add nsw i64 %19, %18
  %21 = trunc i64 %20 to i8
  %22 = and i8 %21, 1
  %23 = ashr i64 %20, 1
  store i64 %23, i64* %RSI, align 8, !tbaa !2428
  store i8 %22, i8* %12, align 1, !tbaa !2454
  %24 = trunc i64 %23 to i32
  %25 = and i32 %24, 255
  %26 = tail call i32 @llvm.ctpop.i32(i32 %25) #8
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  store i8 %29, i8* %13, align 1, !tbaa !2454
  store i8 0, i8* %14, align 1, !tbaa !2454
  %30 = icmp eq i64 %23, 0
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %15, align 1, !tbaa !2454
  %32 = lshr i64 %23, 63
  %33 = trunc i64 %32 to i8
  store i8 %33, i8* %16, align 1, !tbaa !2454
  store i8 0, i8* %17, align 1, !tbaa !2454
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %.v = select i1 %30, i64 50, i64 29
  %35 = add i64 %10, %.v
  store i64 %35, i64* %34, align 8, !tbaa !2428
  br i1 %30, label %block_400658, label %block_400643

block_400658:                                     ; preds = %block_400643, %block_400620
  %36 = phi i64 [ %46, %block_400643 ], [ %35, %block_400620 ]
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC, align 8
  %38 = load i64, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %38, 8
  %40 = inttoptr i64 %38 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %RBP, align 8, !tbaa !2428
  store i64 %39, i64* %5, align 8, !tbaa !2428
  %42 = add i64 %36, 2
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %39 to i64*
  %44 = load i64, i64* %43, align 8
  store i64 %44, i64* %34, align 8, !tbaa !2428
  %45 = add i64 %38, 16
  store i64 %45, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400643:                                     ; preds = %block_400620
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %46 = add i64 %35, 21
  store i64 %46, i64* %34, align 8, !tbaa !2428
  br label %block_400658
}

; Function Attrs: noinline
define %struct.Memory* @sub_400750_rtclock(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400750:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  store i64 %8, i64* %6, align 8, !tbaa !2428
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = bitcast %union.VectorReg* %3 to i8*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %13 = bitcast %union.VectorReg* %3 to i32*
  store i32 0, i32* %13, align 1, !tbaa !2451
  %14 = getelementptr inbounds i8, i8* %11, i64 4
  %15 = bitcast i8* %14 to i32*
  store i32 0, i32* %15, align 1, !tbaa !2451
  %16 = bitcast i64* %12 to i32*
  store i32 0, i32* %16, align 1, !tbaa !2451
  %17 = getelementptr inbounds i8, i8* %11, i64 12
  %18 = bitcast i8* %17 to i32*
  store i32 0, i32* %18, align 1, !tbaa !2451
  %19 = add i64 %10, 7
  store i64 %19, i64* %PC, align 8
  %20 = load i64, i64* %9, align 8
  store i64 %20, i64* %RBP, align 8, !tbaa !2428
  store i64 %7, i64* %6, align 8, !tbaa !2428
  %21 = add i64 %10, 8
  store i64 %21, i64* %PC, align 8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %23 = inttoptr i64 %7 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %22, align 8, !tbaa !2428
  %25 = add i64 %7, 8
  store i64 %25, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402e00___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402e00:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13D = bitcast %union.anon* %4 to i32*
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = load i64, i64* %R15, align 8
  %6 = add i64 %1, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %5, i64* %10, align 8
  %11 = load i64, i64* %R14, align 8
  %12 = load i64, i64* %PC, align 8
  %13 = add i64 %12, 2
  store i64 %13, i64* %PC, align 8
  %14 = add i64 %8, -16
  %15 = inttoptr i64 %14 to i64*
  store i64 %11, i64* %15, align 8
  %16 = load i64, i64* %RDX, align 8
  %17 = load i64, i64* %PC, align 8
  store i64 %16, i64* %R15, align 8, !tbaa !2428
  %18 = load i64, i64* %R13, align 8
  %19 = add i64 %17, 5
  store i64 %19, i64* %PC, align 8
  %20 = add i64 %8, -24
  %21 = inttoptr i64 %20 to i64*
  store i64 %18, i64* %21, align 8
  %22 = load i64, i64* %R12, align 8
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 2
  store i64 %24, i64* %PC, align 8
  %25 = add i64 %8, -32
  %26 = inttoptr i64 %25 to i64*
  store i64 %22, i64* %26, align 8
  %27 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %27, 8
  store i64 %29, i64* %PC, align 8
  %30 = add i64 %8, -40
  %31 = inttoptr i64 %30 to i64*
  store i64 %28, i64* %31, align 8
  %32 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %33 = load i64, i64* %RBX, align 8
  %34 = add i64 %32, 8
  store i64 %34, i64* %PC, align 8
  %35 = add i64 %8, -48
  %36 = inttoptr i64 %35 to i64*
  store i64 %33, i64* %36, align 8
  %37 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %38 = load i32, i32* %EDI, align 4
  %39 = zext i32 %38 to i64
  %40 = load i64, i64* %PC, align 8
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = load i64, i64* %RSI, align 8
  store i64 %41, i64* %R14, align 8, !tbaa !2428
  %42 = load i64, i64* %RBP, align 8
  %43 = load i64, i64* %R12, align 8
  %44 = sub i64 %42, %43
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %51 = lshr i64 %44, 2
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = ashr i64 %44, 3
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i8 %53, i8* %45, align 1, !tbaa !2454
  %55 = trunc i64 %54 to i32
  %56 = and i32 %55, 255
  %57 = tail call i32 @llvm.ctpop.i32(i32 %56) #8
  %58 = trunc i32 %57 to i8
  %59 = and i8 %58, 1
  %60 = xor i8 %59, 1
  store i8 %60, i8* %46, align 1, !tbaa !2454
  store i8 0, i8* %47, align 1, !tbaa !2454
  %61 = icmp eq i64 %54, 0
  %62 = zext i1 %61 to i8
  store i8 %62, i8* %48, align 1, !tbaa !2454
  %63 = lshr i64 %54, 63
  %64 = trunc i64 %63 to i8
  store i8 %64, i8* %49, align 1, !tbaa !2454
  store i8 0, i8* %50, align 1, !tbaa !2454
  %65 = add i64 %40, -10491
  %66 = add i64 %40, 22
  %67 = add i64 %8, -64
  %68 = inttoptr i64 %67 to i64*
  store i64 %66, i64* %68, align 8
  store i64 %67, i64* %7, align 8, !tbaa !2428
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %65, i64* %69, align 8, !tbaa !2428
  %70 = tail call %struct.Memory* @sub_400520__init_proc_renamed_(%struct.State* nonnull %0, i64 %65, %struct.Memory* %2)
  %71 = load i64, i64* %RBP, align 8
  %72 = load i64, i64* %PC, align 8
  store i8 0, i8* %45, align 1, !tbaa !2432
  %73 = trunc i64 %71 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #8
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %46, align 1, !tbaa !2446
  %79 = icmp eq i64 %71, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %48, align 1, !tbaa !2448
  %81 = lshr i64 %71, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %49, align 1, !tbaa !2449
  store i8 0, i8* %50, align 1, !tbaa !2450
  store i8 0, i8* %47, align 1, !tbaa !2447
  %.v = select i1 %79, i64 37, i64 5
  %83 = add i64 %72, %.v
  store i64 %83, i64* %69, align 8, !tbaa !2428
  br i1 %79, label %block_402e56, label %block_402e36

block_402e56:                                     ; preds = %block_402e40, %block_402e00
  %84 = phi i64 [ %83, %block_402e00 ], [ %182, %block_402e40 ]
  %MEMORY.0 = phi %struct.Memory* [ %70, %block_402e00 ], [ %152, %block_402e40 ]
  %85 = load i64, i64* %RSP, align 8
  %86 = add i64 %85, 8
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  %87 = icmp ugt i64 %85, -9
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %45, align 1, !tbaa !2432
  %89 = trunc i64 %86 to i32
  %90 = and i32 %89, 255
  %91 = tail call i32 @llvm.ctpop.i32(i32 %90) #8
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  store i8 %94, i8* %46, align 1, !tbaa !2446
  %95 = xor i64 %85, %86
  %96 = lshr i64 %95, 4
  %97 = trunc i64 %96 to i8
  %98 = and i8 %97, 1
  store i8 %98, i8* %47, align 1, !tbaa !2447
  %99 = icmp eq i64 %86, 0
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %48, align 1, !tbaa !2448
  %101 = lshr i64 %86, 63
  %102 = trunc i64 %101 to i8
  store i8 %102, i8* %49, align 1, !tbaa !2449
  %103 = lshr i64 %85, 63
  %104 = xor i64 %101, %103
  %105 = add nuw nsw i64 %104, %101
  %106 = icmp eq i64 %105, 2
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %50, align 1, !tbaa !2450
  %108 = add i64 %84, 5
  store i64 %108, i64* %PC, align 8
  %109 = add i64 %85, 16
  %110 = inttoptr i64 %86 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RBX, align 8, !tbaa !2428
  store i64 %109, i64* %7, align 8, !tbaa !2428
  %112 = add i64 %84, 6
  store i64 %112, i64* %PC, align 8
  %113 = add i64 %85, 24
  %114 = inttoptr i64 %109 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RBP, align 8, !tbaa !2428
  store i64 %113, i64* %7, align 8, !tbaa !2428
  %116 = add i64 %84, 8
  store i64 %116, i64* %PC, align 8
  %117 = add i64 %85, 32
  %118 = inttoptr i64 %113 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %R12, align 8, !tbaa !2428
  store i64 %117, i64* %7, align 8, !tbaa !2428
  %120 = add i64 %84, 10
  store i64 %120, i64* %PC, align 8
  %121 = add i64 %85, 40
  %122 = inttoptr i64 %117 to i64*
  %123 = load i64, i64* %122, align 8
  store i64 %123, i64* %R13, align 8, !tbaa !2428
  store i64 %121, i64* %7, align 8, !tbaa !2428
  %124 = add i64 %84, 12
  store i64 %124, i64* %PC, align 8
  %125 = add i64 %85, 48
  %126 = inttoptr i64 %121 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %R14, align 8, !tbaa !2428
  store i64 %125, i64* %7, align 8, !tbaa !2428
  %128 = add i64 %84, 14
  store i64 %128, i64* %PC, align 8
  %129 = add i64 %85, 56
  %130 = inttoptr i64 %125 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %R15, align 8, !tbaa !2428
  store i64 %129, i64* %7, align 8, !tbaa !2428
  %132 = add i64 %84, 15
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %129 to i64*
  %134 = load i64, i64* %133, align 8
  store i64 %134, i64* %69, align 8, !tbaa !2428
  %135 = add i64 %85, 64
  store i64 %135, i64* %7, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402e36:                                     ; preds = %block_402e00
  store i64 0, i64* %RBX, align 8, !tbaa !2428
  store i8 0, i8* %45, align 1, !tbaa !2432
  store i8 1, i8* %46, align 1, !tbaa !2446
  store i8 1, i8* %48, align 1, !tbaa !2448
  store i8 0, i8* %49, align 1, !tbaa !2449
  store i8 0, i8* %50, align 1, !tbaa !2450
  store i8 0, i8* %47, align 1, !tbaa !2447
  %136 = add i64 %83, 10
  store i64 %136, i64* %PC, align 8
  br label %block_402e40

block_402e40:                                     ; preds = %block_402e40, %block_402e36
  %137 = phi i64 [ 0, %block_402e36 ], [ %155, %block_402e40 ]
  %138 = phi i64 [ %136, %block_402e36 ], [ %182, %block_402e40 ]
  %MEMORY.1 = phi %struct.Memory* [ %70, %block_402e36 ], [ %152, %block_402e40 ]
  %139 = load i64, i64* %R15, align 8
  store i64 %139, i64* %RDX, align 8, !tbaa !2428
  %140 = load i64, i64* %R14, align 8
  store i64 %140, i64* %RSI, align 8, !tbaa !2428
  %141 = load i32, i32* %R13D, align 4
  %142 = zext i32 %141 to i64
  store i64 %142, i64* %RDI, align 8, !tbaa !2428
  %143 = load i64, i64* %R12, align 8
  %144 = shl i64 %137, 3
  %145 = add i64 %144, %143
  %146 = add i64 %138, 13
  store i64 %146, i64* %PC, align 8
  %147 = load i64, i64* %7, align 8, !tbaa !2428
  %148 = add i64 %147, -8
  %149 = inttoptr i64 %148 to i64*
  store i64 %146, i64* %149, align 8
  store i64 %148, i64* %7, align 8, !tbaa !2428
  %150 = inttoptr i64 %145 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %69, align 8, !tbaa !2428
  %152 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %151, %struct.Memory* %MEMORY.1)
  %153 = load i64, i64* %RBX, align 8
  %154 = load i64, i64* %PC, align 8
  %155 = add i64 %153, 1
  store i64 %155, i64* %RBX, align 8, !tbaa !2428
  %156 = lshr i64 %155, 63
  %157 = load i64, i64* %RBP, align 8
  %158 = sub i64 %157, %155
  %159 = icmp ult i64 %157, %155
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %45, align 1, !tbaa !2432
  %161 = trunc i64 %158 to i32
  %162 = and i32 %161, 255
  %163 = tail call i32 @llvm.ctpop.i32(i32 %162) #8
  %164 = trunc i32 %163 to i8
  %165 = and i8 %164, 1
  %166 = xor i8 %165, 1
  store i8 %166, i8* %46, align 1, !tbaa !2446
  %167 = xor i64 %155, %157
  %168 = xor i64 %167, %158
  %169 = lshr i64 %168, 4
  %170 = trunc i64 %169 to i8
  %171 = and i8 %170, 1
  store i8 %171, i8* %47, align 1, !tbaa !2447
  %172 = icmp eq i64 %158, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %48, align 1, !tbaa !2448
  %174 = lshr i64 %158, 63
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %49, align 1, !tbaa !2449
  %176 = lshr i64 %157, 63
  %177 = xor i64 %156, %176
  %178 = xor i64 %174, %176
  %179 = add nuw nsw i64 %178, %177
  %180 = icmp eq i64 %179, 2
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %50, align 1, !tbaa !2450
  %.v1 = select i1 %172, i64 9, i64 -13
  %182 = add i64 %154, %.v1
  store i64 %182, i64* %69, align 8, !tbaa !2428
  br i1 %172, label %block_402e56, label %block_402e40
}

; Function Attrs: noinline
define %struct.Memory* @sub_402a50_check_FP(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402a50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %8 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %11 = load i64, i64* %RBP, align 8
  %12 = add i64 %1, 1
  store i64 %12, i64* %PC, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = load i64, i64* %13, align 8, !tbaa !2428
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %11, i64* %16, align 8
  %17 = load i64, i64* %PC, align 8
  store i64 %15, i64* %RBP, align 8, !tbaa !2428
  %18 = add i64 %14, -120
  store i64 %18, i64* %RSP, align 8, !tbaa !2428
  %19 = icmp ult i64 %15, 112
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %20, i8* %21, align 1, !tbaa !2432
  %22 = trunc i64 %18 to i32
  %23 = and i32 %22, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23) #8
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1, !tbaa !2446
  %29 = xor i64 %15, 16
  %30 = xor i64 %29, %18
  %31 = lshr i64 %30, 4
  %32 = trunc i64 %31 to i8
  %33 = and i8 %32, 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %33, i8* %34, align 1, !tbaa !2447
  %35 = icmp eq i64 %18, 0
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %36, i8* %37, align 1, !tbaa !2448
  %38 = lshr i64 %18, 63
  %39 = trunc i64 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %39, i8* %40, align 1, !tbaa !2449
  %41 = lshr i64 %15, 63
  %42 = xor i64 %38, %41
  %43 = add nuw nsw i64 %42, %41
  %44 = icmp eq i64 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1, !tbaa !2450
  %47 = bitcast [32 x %union.VectorReg]* %9 to i8*
  %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 88) to i64*), align 8
  %49 = bitcast [32 x %union.VectorReg]* %9 to double*
  %50 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %9, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %48, i64* %50, align 1, !tbaa !2452
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %52 = bitcast i64* %51 to double*
  store double 0.000000e+00, double* %52, align 1, !tbaa !2452
  %53 = add i64 %14, -16
  %54 = load i32, i32* %EDI, align 4
  %55 = add i64 %17, 18
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %53 to i32*
  store i32 %54, i32* %56, align 4
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -12
  %59 = load i32, i32* %ESI, align 4
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %58 to i32*
  store i32 %59, i32* %62, align 4
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -16
  %65 = load i32, i32* %EDX, align 4
  %66 = load i64, i64* %PC, align 8
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %64 to i32*
  store i32 %65, i32* %68, align 4
  %69 = load i64, i64* %RBP, align 8
  %70 = add i64 %69, -24
  %71 = load i64, i64* %RCX, align 8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %70 to i64*
  store i64 %71, i64* %74, align 8
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -32
  %77 = load i64, i64* %R8, align 8
  %78 = load i64, i64* %PC, align 8
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %76 to i64*
  store i64 %77, i64* %80, align 8
  %81 = load i64, i64* %RBP, align 8
  %82 = add i64 %81, -56
  %83 = load i64, i64* %PC, align 8
  %84 = add i64 %83, 5
  store i64 %84, i64* %PC, align 8
  %85 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %9, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %86 = load i64, i64* %85, align 1
  %87 = inttoptr i64 %82 to i64*
  store i64 %86, i64* %87, align 8
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -36
  %90 = load i64, i64* %PC, align 8
  %91 = add i64 %90, 7
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %89 to i32*
  store i32 0, i32* %92, align 4
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %94 = bitcast %union.VectorReg* %10 to i8*
  %95 = getelementptr inbounds i8, i8* %94, i64 4
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %97 = getelementptr inbounds i8, i8* %94, i64 12
  %98 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %10, i64 0, i32 0, i32 0, i32 0, i64 0
  %99 = bitcast [32 x %union.VectorReg]* %9 to i32*
  %100 = getelementptr inbounds i8, i8* %47, i64 4
  %101 = bitcast i8* %100 to i32*
  %102 = bitcast i64* %51 to i32*
  %103 = getelementptr inbounds i8, i8* %47, i64 12
  %104 = bitcast i8* %103 to i32*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402a7d

block_402bbe:                                     ; preds = %block_402a95
  %105 = add i64 %564, -36
  %106 = add i64 %602, 8
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %105 to i32*
  %108 = load i32, i32* %107, align 4
  %109 = add i32 %108, 1
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RAX, align 8, !tbaa !2428
  %111 = icmp eq i32 %108, -1
  %112 = icmp eq i32 %109, 0
  %113 = or i1 %111, %112
  %114 = zext i1 %113 to i8
  store i8 %114, i8* %21, align 1, !tbaa !2432
  %115 = and i32 %109, 255
  %116 = tail call i32 @llvm.ctpop.i32(i32 %115) #8
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  %119 = xor i8 %118, 1
  store i8 %119, i8* %28, align 1, !tbaa !2446
  %120 = xor i32 %108, %109
  %121 = lshr i32 %120, 4
  %122 = trunc i32 %121 to i8
  %123 = and i8 %122, 1
  store i8 %123, i8* %34, align 1, !tbaa !2447
  %124 = icmp eq i32 %109, 0
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %37, align 1, !tbaa !2448
  %126 = lshr i32 %109, 31
  %127 = trunc i32 %126 to i8
  store i8 %127, i8* %40, align 1, !tbaa !2449
  %128 = lshr i32 %108, 31
  %129 = xor i32 %126, %128
  %130 = add nuw nsw i32 %129, %126
  %131 = icmp eq i32 %130, 2
  %132 = zext i1 %131 to i8
  store i8 %132, i8* %46, align 1, !tbaa !2450
  %133 = add i64 %602, 14
  store i64 %133, i64* %PC, align 8
  store i32 %109, i32* %107, align 4
  %134 = load i64, i64* %PC, align 8
  %135 = add i64 %134, -335
  store i64 %135, i64* %93, align 8, !tbaa !2428
  br label %block_402a7d

block_402b98:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %136 = load i64, i64* %RBP, align 8
  %137 = add i64 %136, -44
  %138 = add i64 %452, 8
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %137 to i32*
  %140 = load i32, i32* %139, align 4
  %141 = add i32 %140, 1
  %142 = zext i32 %141 to i64
  store i64 %142, i64* %RAX, align 8, !tbaa !2428
  %143 = icmp eq i32 %140, -1
  %144 = icmp eq i32 %141, 0
  %145 = or i1 %143, %144
  %146 = zext i1 %145 to i8
  store i8 %146, i8* %21, align 1, !tbaa !2432
  %147 = and i32 %141, 255
  %148 = tail call i32 @llvm.ctpop.i32(i32 %147) #8
  %149 = trunc i32 %148 to i8
  %150 = and i8 %149, 1
  %151 = xor i8 %150, 1
  store i8 %151, i8* %28, align 1, !tbaa !2446
  %152 = xor i32 %140, %141
  %153 = lshr i32 %152, 4
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  store i8 %155, i8* %34, align 1, !tbaa !2447
  %156 = icmp eq i32 %141, 0
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %37, align 1, !tbaa !2448
  %158 = lshr i32 %141, 31
  %159 = trunc i32 %158 to i8
  store i8 %159, i8* %40, align 1, !tbaa !2449
  %160 = lshr i32 %140, 31
  %161 = xor i32 %158, %160
  %162 = add nuw nsw i32 %161, %158
  %163 = icmp eq i32 %162, 2
  %164 = zext i1 %163 to i8
  store i8 %164, i8* %46, align 1, !tbaa !2450
  %165 = add i64 %452, 14
  store i64 %165, i64* %PC, align 8
  store i32 %141, i32* %139, align 4
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, -249
  store i64 %167, i64* %93, align 8, !tbaa !2428
  br label %block_402aad

block_402bd1:                                     ; preds = %block_402a7d
  %168 = add i64 %172, -4
  %169 = add i64 %210, 7
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %168 to i32*
  store i32 1, i32* %170, align 4
  %.pre10 = load i64, i64* %PC, align 8
  br label %block_402bd8

block_402a7d:                                     ; preds = %block_402bbe, %block_402a50
  %171 = phi i64 [ %.pre, %block_402a50 ], [ %135, %block_402bbe ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402a50 ], [ %MEMORY.3, %block_402bbe ]
  %172 = load i64, i64* %RBP, align 8
  %173 = add i64 %172, -36
  %174 = add i64 %171, 3
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %173 to i32*
  %176 = load i32, i32* %175, align 4
  %177 = zext i32 %176 to i64
  store i64 %177, i64* %RAX, align 8, !tbaa !2428
  %178 = add i64 %172, -8
  %179 = add i64 %171, 6
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %178 to i32*
  %181 = load i32, i32* %180, align 4
  %182 = add i32 %181, 1
  %183 = zext i32 %182 to i64
  store i64 %183, i64* %RCX, align 8, !tbaa !2428
  %184 = lshr i32 %182, 31
  %185 = sub i32 %176, %182
  %186 = icmp ult i32 %176, %182
  %187 = zext i1 %186 to i8
  store i8 %187, i8* %21, align 1, !tbaa !2432
  %188 = and i32 %185, 255
  %189 = tail call i32 @llvm.ctpop.i32(i32 %188) #8
  %190 = trunc i32 %189 to i8
  %191 = and i8 %190, 1
  %192 = xor i8 %191, 1
  store i8 %192, i8* %28, align 1, !tbaa !2446
  %193 = xor i32 %182, %176
  %194 = xor i32 %193, %185
  %195 = lshr i32 %194, 4
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  store i8 %197, i8* %34, align 1, !tbaa !2447
  %198 = icmp eq i32 %185, 0
  %199 = zext i1 %198 to i8
  store i8 %199, i8* %37, align 1, !tbaa !2448
  %200 = lshr i32 %185, 31
  %201 = trunc i32 %200 to i8
  store i8 %201, i8* %40, align 1, !tbaa !2449
  %202 = lshr i32 %176, 31
  %203 = xor i32 %184, %202
  %204 = xor i32 %200, %202
  %205 = add nuw nsw i32 %204, %203
  %206 = icmp eq i32 %205, 2
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %46, align 1, !tbaa !2450
  %208 = icmp ne i8 %201, 0
  %209 = xor i1 %208, %206
  %.v = select i1 %209, i64 17, i64 340
  %210 = add i64 %171, %.v
  store i64 %210, i64* %93, align 8, !tbaa !2428
  br i1 %209, label %block_402a8e, label %block_402bd1

block_402a8e:                                     ; preds = %block_402a7d
  %211 = add i64 %172, -40
  %212 = add i64 %210, 7
  store i64 %212, i64* %PC, align 8
  %213 = inttoptr i64 %211 to i32*
  store i32 0, i32* %213, align 4
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_402a95

block_402abe:                                     ; preds = %block_402aad
  %214 = add i64 %454, -24
  %215 = add i64 %492, 4
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %214 to i64*
  %217 = load i64, i64* %216, align 8
  store i64 %217, i64* %RAX, align 8, !tbaa !2428
  %218 = add i64 %454, -36
  %219 = add i64 %492, 8
  store i64 %219, i64* %PC, align 8
  %220 = inttoptr i64 %218 to i32*
  %221 = load i32, i32* %220, align 4
  %222 = sext i32 %221 to i64
  %223 = mul nsw i64 %222, 33800
  store i64 %223, i64* %RCX, align 8, !tbaa !2428
  %224 = lshr i64 %223, 63
  %225 = add i64 %223, %217
  store i64 %225, i64* %RAX, align 8, !tbaa !2428
  %226 = icmp ult i64 %225, %217
  %227 = icmp ult i64 %225, %223
  %228 = or i1 %226, %227
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %21, align 1, !tbaa !2432
  %230 = trunc i64 %225 to i32
  %231 = and i32 %230, 255
  %232 = tail call i32 @llvm.ctpop.i32(i32 %231) #8
  %233 = trunc i32 %232 to i8
  %234 = and i8 %233, 1
  %235 = xor i8 %234, 1
  store i8 %235, i8* %28, align 1, !tbaa !2446
  %236 = xor i64 %223, %217
  %237 = xor i64 %236, %225
  %238 = lshr i64 %237, 4
  %239 = trunc i64 %238 to i8
  %240 = and i8 %239, 1
  store i8 %240, i8* %34, align 1, !tbaa !2447
  %241 = icmp eq i64 %225, 0
  %242 = zext i1 %241 to i8
  store i8 %242, i8* %37, align 1, !tbaa !2448
  %243 = lshr i64 %225, 63
  %244 = trunc i64 %243 to i8
  store i8 %244, i8* %40, align 1, !tbaa !2449
  %245 = lshr i64 %217, 63
  %246 = xor i64 %243, %245
  %247 = xor i64 %243, %224
  %248 = add nuw nsw i64 %246, %247
  %249 = icmp eq i64 %248, 2
  %250 = zext i1 %249 to i8
  store i8 %250, i8* %46, align 1, !tbaa !2450
  %251 = add i64 %454, -40
  %252 = add i64 %492, 22
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %251 to i32*
  %254 = load i32, i32* %253, align 4
  %255 = sext i32 %254 to i64
  %256 = mul nsw i64 %255, 520
  store i64 %256, i64* %RCX, align 8, !tbaa !2428
  %257 = lshr i64 %256, 63
  %258 = add i64 %256, %225
  store i64 %258, i64* %RAX, align 8, !tbaa !2428
  %259 = icmp ult i64 %258, %225
  %260 = icmp ult i64 %258, %256
  %261 = or i1 %259, %260
  %262 = zext i1 %261 to i8
  store i8 %262, i8* %21, align 1, !tbaa !2432
  %263 = trunc i64 %258 to i32
  %264 = and i32 %263, 255
  %265 = tail call i32 @llvm.ctpop.i32(i32 %264) #8
  %266 = trunc i32 %265 to i8
  %267 = and i8 %266, 1
  %268 = xor i8 %267, 1
  store i8 %268, i8* %28, align 1, !tbaa !2446
  %269 = xor i64 %256, %225
  %270 = xor i64 %269, %258
  %271 = lshr i64 %270, 4
  %272 = trunc i64 %271 to i8
  %273 = and i8 %272, 1
  store i8 %273, i8* %34, align 1, !tbaa !2447
  %274 = icmp eq i64 %258, 0
  %275 = zext i1 %274 to i8
  store i8 %275, i8* %37, align 1, !tbaa !2448
  %276 = lshr i64 %258, 63
  %277 = trunc i64 %276 to i8
  store i8 %277, i8* %40, align 1, !tbaa !2449
  %278 = xor i64 %276, %243
  %279 = xor i64 %276, %257
  %280 = add nuw nsw i64 %278, %279
  %281 = icmp eq i64 %280, 2
  %282 = zext i1 %281 to i8
  store i8 %282, i8* %46, align 1, !tbaa !2450
  %283 = load i64, i64* %RBP, align 8
  %284 = add i64 %283, -44
  %285 = add i64 %492, 36
  store i64 %285, i64* %PC, align 8
  %286 = inttoptr i64 %284 to i32*
  %287 = load i32, i32* %286, align 4
  %288 = sext i32 %287 to i64
  store i64 %288, i64* %RCX, align 8, !tbaa !2428
  %289 = shl nsw i64 %288, 3
  %290 = add i64 %289, %258
  %291 = add i64 %492, 41
  store i64 %291, i64* %PC, align 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292, align 8
  %294 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %9, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %293, i64* %294, align 1, !tbaa !2452
  store double 0.000000e+00, double* %52, align 1, !tbaa !2452
  %295 = add i64 %283, -64
  %296 = add i64 %492, 46
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %295 to i64*
  store i64 %293, i64* %297, align 8
  %298 = load i64, i64* %RBP, align 8
  %299 = add i64 %298, -32
  %300 = load i64, i64* %PC, align 8
  %301 = add i64 %300, 4
  store i64 %301, i64* %PC, align 8
  %302 = inttoptr i64 %299 to i64*
  %303 = load i64, i64* %302, align 8
  store i64 %303, i64* %RAX, align 8, !tbaa !2428
  %304 = add i64 %298, -36
  %305 = add i64 %300, 8
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %304 to i32*
  %307 = load i32, i32* %306, align 4
  %308 = sext i32 %307 to i64
  %309 = mul nsw i64 %308, 33800
  store i64 %309, i64* %RCX, align 8, !tbaa !2428
  %310 = lshr i64 %309, 63
  %311 = add i64 %309, %303
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = icmp ult i64 %311, %303
  %313 = icmp ult i64 %311, %309
  %314 = or i1 %312, %313
  %315 = zext i1 %314 to i8
  store i8 %315, i8* %21, align 1, !tbaa !2432
  %316 = trunc i64 %311 to i32
  %317 = and i32 %316, 255
  %318 = tail call i32 @llvm.ctpop.i32(i32 %317) #8
  %319 = trunc i32 %318 to i8
  %320 = and i8 %319, 1
  %321 = xor i8 %320, 1
  store i8 %321, i8* %28, align 1, !tbaa !2446
  %322 = xor i64 %309, %303
  %323 = xor i64 %322, %311
  %324 = lshr i64 %323, 4
  %325 = trunc i64 %324 to i8
  %326 = and i8 %325, 1
  store i8 %326, i8* %34, align 1, !tbaa !2447
  %327 = icmp eq i64 %311, 0
  %328 = zext i1 %327 to i8
  store i8 %328, i8* %37, align 1, !tbaa !2448
  %329 = lshr i64 %311, 63
  %330 = trunc i64 %329 to i8
  store i8 %330, i8* %40, align 1, !tbaa !2449
  %331 = lshr i64 %303, 63
  %332 = xor i64 %329, %331
  %333 = xor i64 %329, %310
  %334 = add nuw nsw i64 %332, %333
  %335 = icmp eq i64 %334, 2
  %336 = zext i1 %335 to i8
  store i8 %336, i8* %46, align 1, !tbaa !2450
  %337 = add i64 %298, -40
  %338 = add i64 %300, 22
  store i64 %338, i64* %PC, align 8
  %339 = inttoptr i64 %337 to i32*
  %340 = load i32, i32* %339, align 4
  %341 = sext i32 %340 to i64
  %342 = mul nsw i64 %341, 520
  store i64 %342, i64* %RCX, align 8, !tbaa !2428
  %343 = lshr i64 %342, 63
  %344 = add i64 %342, %311
  store i64 %344, i64* %RAX, align 8, !tbaa !2428
  %345 = icmp ult i64 %344, %311
  %346 = icmp ult i64 %344, %342
  %347 = or i1 %345, %346
  %348 = zext i1 %347 to i8
  store i8 %348, i8* %21, align 1, !tbaa !2432
  %349 = trunc i64 %344 to i32
  %350 = and i32 %349, 255
  %351 = tail call i32 @llvm.ctpop.i32(i32 %350) #8
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  %354 = xor i8 %353, 1
  store i8 %354, i8* %28, align 1, !tbaa !2446
  %355 = xor i64 %342, %311
  %356 = xor i64 %355, %344
  %357 = lshr i64 %356, 4
  %358 = trunc i64 %357 to i8
  %359 = and i8 %358, 1
  store i8 %359, i8* %34, align 1, !tbaa !2447
  %360 = icmp eq i64 %344, 0
  %361 = zext i1 %360 to i8
  store i8 %361, i8* %37, align 1, !tbaa !2448
  %362 = lshr i64 %344, 63
  %363 = trunc i64 %362 to i8
  store i8 %363, i8* %40, align 1, !tbaa !2449
  %364 = xor i64 %362, %329
  %365 = xor i64 %362, %343
  %366 = add nuw nsw i64 %364, %365
  %367 = icmp eq i64 %366, 2
  %368 = zext i1 %367 to i8
  store i8 %368, i8* %46, align 1, !tbaa !2450
  %369 = load i64, i64* %RBP, align 8
  %370 = add i64 %369, -44
  %371 = add i64 %300, 36
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %370 to i32*
  %373 = load i32, i32* %372, align 4
  %374 = sext i32 %373 to i64
  store i64 %374, i64* %RCX, align 8, !tbaa !2428
  %375 = shl nsw i64 %374, 3
  %376 = add i64 %375, %344
  %377 = add i64 %300, 41
  store i64 %377, i64* %PC, align 8
  %378 = inttoptr i64 %376 to i64*
  %379 = load i64, i64* %378, align 8
  %380 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %9, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %379, i64* %380, align 1, !tbaa !2452
  store double 0.000000e+00, double* %52, align 1, !tbaa !2452
  %381 = add i64 %369, -72
  %382 = add i64 %300, 46
  store i64 %382, i64* %PC, align 8
  %383 = inttoptr i64 %381 to i64*
  store i64 %379, i64* %383, align 8
  %384 = load i64, i64* %RBP, align 8
  %385 = add i64 %384, -64
  %386 = load i64, i64* %PC, align 8
  %387 = add i64 %386, 5
  store i64 %387, i64* %PC, align 8
  %388 = inttoptr i64 %385 to double*
  %389 = load double, double* %388, align 8
  store double %389, double* %49, align 1, !tbaa !2452
  store double 0.000000e+00, double* %52, align 1, !tbaa !2452
  %390 = add i64 %384, -72
  %391 = add i64 %386, 10
  store i64 %391, i64* %PC, align 8
  %392 = inttoptr i64 %390 to double*
  %393 = load double, double* %392, align 8
  %394 = fsub double %389, %393
  %395 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 96) to i32*), align 16
  %396 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 100) to i32*), align 4
  %397 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 104) to i32*), align 8
  %398 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 108) to i32*), align 4
  %399 = bitcast %union.VectorReg* %10 to i32*
  store i32 %395, i32* %399, align 1, !tbaa !2455
  %400 = bitcast i8* %95 to i32*
  store i32 %396, i32* %400, align 1, !tbaa !2455
  %401 = bitcast i64* %96 to i32*
  store i32 %397, i32* %401, align 1, !tbaa !2455
  %402 = bitcast i8* %97 to i32*
  store i32 %398, i32* %402, align 1, !tbaa !2455
  %403 = bitcast double %394 to i64
  %404 = load i64, i64* %98, align 1
  %405 = and i64 %404, %403
  %406 = trunc i64 %405 to i32
  %407 = lshr i64 %405, 32
  %408 = trunc i64 %407 to i32
  store i32 %406, i32* %99, align 1, !tbaa !2451
  store i32 %408, i32* %101, align 1, !tbaa !2451
  store i32 0, i32* %102, align 1, !tbaa !2451
  store i32 0, i32* %104, align 1, !tbaa !2451
  %409 = add i64 %384, -80
  %410 = add i64 %386, 26
  store i64 %410, i64* %PC, align 8
  %411 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %9, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %412 = load i64, i64* %411, align 1
  %413 = inttoptr i64 %409 to i64*
  store i64 %412, i64* %413, align 8
  %414 = load i64, i64* %RBP, align 8
  %415 = add i64 %414, -80
  %416 = load i64, i64* %PC, align 8
  %417 = add i64 %416, 5
  store i64 %417, i64* %PC, align 8
  %418 = inttoptr i64 %415 to double*
  %419 = load double, double* %418, align 8
  store double %419, double* %49, align 1, !tbaa !2452
  store double 0.000000e+00, double* %52, align 1, !tbaa !2452
  %420 = add i64 %414, -56
  %421 = add i64 %416, 10
  store i64 %421, i64* %PC, align 8
  %422 = inttoptr i64 %420 to double*
  %423 = load double, double* %422, align 8
  %424 = fcmp uno double %419, %423
  br i1 %424, label %425, label %435

; <label>:425:                                    ; preds = %block_402abe
  %426 = fadd double %419, %423
  %427 = bitcast double %426 to i64
  %428 = and i64 %427, 9221120237041090560
  %429 = icmp eq i64 %428, 9218868437227405312
  %430 = and i64 %427, 2251799813685247
  %431 = icmp ne i64 %430, 0
  %432 = and i1 %429, %431
  br i1 %432, label %433, label %441

; <label>:433:                                    ; preds = %425
  %434 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %421, %struct.Memory* %MEMORY.1) #9
  %.pre9 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:435:                                    ; preds = %block_402abe
  %436 = fcmp ogt double %419, %423
  br i1 %436, label %441, label %437

; <label>:437:                                    ; preds = %435
  %438 = fcmp olt double %419, %423
  br i1 %438, label %441, label %439

; <label>:439:                                    ; preds = %437
  %440 = fcmp oeq double %419, %423
  br i1 %440, label %441, label %445

; <label>:441:                                    ; preds = %439, %437, %435, %425
  %442 = phi i8 [ 0, %435 ], [ 0, %437 ], [ 1, %439 ], [ 1, %425 ]
  %443 = phi i8 [ 0, %435 ], [ 0, %437 ], [ 0, %439 ], [ 1, %425 ]
  %444 = phi i8 [ 0, %435 ], [ 1, %437 ], [ 0, %439 ], [ 1, %425 ]
  store i8 %442, i8* %37, align 1, !tbaa !2454
  store i8 %443, i8* %28, align 1, !tbaa !2454
  store i8 %444, i8* %21, align 1, !tbaa !2454
  br label %445

; <label>:445:                                    ; preds = %441, %439
  store i8 0, i8* %46, align 1, !tbaa !2454
  store i8 0, i8* %40, align 1, !tbaa !2454
  store i8 0, i8* %34, align 1, !tbaa !2454
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %445, %433
  %446 = phi i64 [ %.pre9, %433 ], [ %421, %445 ]
  %447 = phi %struct.Memory* [ %434, %433 ], [ %MEMORY.1, %445 ]
  %448 = load i8, i8* %21, align 1, !tbaa !2432
  %449 = load i8, i8* %37, align 1, !tbaa !2448
  %450 = or i8 %449, %448
  %451 = icmp ne i8 %450, 0
  %.v13 = select i1 %451, i64 90, i64 6
  %452 = add i64 %446, %.v13
  store i64 %452, i64* %93, align 8, !tbaa !2428
  br i1 %451, label %block_402b98, label %block_402b44

block_402aad:                                     ; preds = %block_402aa6, %block_402b98
  %453 = phi i64 [ %.pre8, %block_402aa6 ], [ %167, %block_402b98 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_402aa6 ], [ %447, %block_402b98 ]
  %454 = load i64, i64* %RBP, align 8
  %455 = add i64 %454, -44
  %456 = add i64 %453, 3
  store i64 %456, i64* %PC, align 8
  %457 = inttoptr i64 %455 to i32*
  %458 = load i32, i32* %457, align 4
  %459 = zext i32 %458 to i64
  store i64 %459, i64* %RAX, align 8, !tbaa !2428
  %460 = add i64 %454, -12
  %461 = add i64 %453, 6
  store i64 %461, i64* %PC, align 8
  %462 = inttoptr i64 %460 to i32*
  %463 = load i32, i32* %462, align 4
  %464 = add i32 %463, 1
  %465 = zext i32 %464 to i64
  store i64 %465, i64* %RCX, align 8, !tbaa !2428
  %466 = lshr i32 %464, 31
  %467 = sub i32 %458, %464
  %468 = icmp ult i32 %458, %464
  %469 = zext i1 %468 to i8
  store i8 %469, i8* %21, align 1, !tbaa !2432
  %470 = and i32 %467, 255
  %471 = tail call i32 @llvm.ctpop.i32(i32 %470) #8
  %472 = trunc i32 %471 to i8
  %473 = and i8 %472, 1
  %474 = xor i8 %473, 1
  store i8 %474, i8* %28, align 1, !tbaa !2446
  %475 = xor i32 %464, %458
  %476 = xor i32 %475, %467
  %477 = lshr i32 %476, 4
  %478 = trunc i32 %477 to i8
  %479 = and i8 %478, 1
  store i8 %479, i8* %34, align 1, !tbaa !2447
  %480 = icmp eq i32 %467, 0
  %481 = zext i1 %480 to i8
  store i8 %481, i8* %37, align 1, !tbaa !2448
  %482 = lshr i32 %467, 31
  %483 = trunc i32 %482 to i8
  store i8 %483, i8* %40, align 1, !tbaa !2449
  %484 = lshr i32 %458, 31
  %485 = xor i32 %466, %484
  %486 = xor i32 %482, %484
  %487 = add nuw nsw i32 %486, %485
  %488 = icmp eq i32 %487, 2
  %489 = zext i1 %488 to i8
  store i8 %489, i8* %46, align 1, !tbaa !2450
  %490 = icmp ne i8 %483, 0
  %491 = xor i1 %490, %488
  %.v12 = select i1 %491, i64 17, i64 254
  %492 = add i64 %453, %.v12
  store i64 %492, i64* %93, align 8, !tbaa !2428
  br i1 %491, label %block_402abe, label %block_402bab

block_402bab:                                     ; preds = %block_402aad
  %493 = add i64 %454, -40
  %494 = add i64 %492, 8
  store i64 %494, i64* %PC, align 8
  %495 = inttoptr i64 %493 to i32*
  %496 = load i32, i32* %495, align 4
  %497 = add i32 %496, 1
  %498 = zext i32 %497 to i64
  store i64 %498, i64* %RAX, align 8, !tbaa !2428
  %499 = icmp eq i32 %496, -1
  %500 = icmp eq i32 %497, 0
  %501 = or i1 %499, %500
  %502 = zext i1 %501 to i8
  store i8 %502, i8* %21, align 1, !tbaa !2432
  %503 = and i32 %497, 255
  %504 = tail call i32 @llvm.ctpop.i32(i32 %503) #8
  %505 = trunc i32 %504 to i8
  %506 = and i8 %505, 1
  %507 = xor i8 %506, 1
  store i8 %507, i8* %28, align 1, !tbaa !2446
  %508 = xor i32 %496, %497
  %509 = lshr i32 %508, 4
  %510 = trunc i32 %509 to i8
  %511 = and i8 %510, 1
  store i8 %511, i8* %34, align 1, !tbaa !2447
  %512 = icmp eq i32 %497, 0
  %513 = zext i1 %512 to i8
  store i8 %513, i8* %37, align 1, !tbaa !2448
  %514 = lshr i32 %497, 31
  %515 = trunc i32 %514 to i8
  store i8 %515, i8* %40, align 1, !tbaa !2449
  %516 = lshr i32 %496, 31
  %517 = xor i32 %514, %516
  %518 = add nuw nsw i32 %517, %514
  %519 = icmp eq i32 %518, 2
  %520 = zext i1 %519 to i8
  store i8 %520, i8* %46, align 1, !tbaa !2450
  %521 = add i64 %492, 14
  store i64 %521, i64* %PC, align 8
  store i32 %497, i32* %495, align 4
  %522 = load i64, i64* %PC, align 8
  %523 = add i64 %522, -292
  store i64 %523, i64* %93, align 8, !tbaa !2428
  br label %block_402a95

block_402bd8:                                     ; preds = %block_402b44, %block_402bd1
  %524 = phi i64 [ %.pre10, %block_402bd1 ], [ %681, %block_402b44 ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_402bd1 ], [ %668, %block_402b44 ]
  %525 = load i64, i64* %RBP, align 8
  %526 = add i64 %525, -4
  %527 = add i64 %524, 3
  store i64 %527, i64* %PC, align 8
  %528 = inttoptr i64 %526 to i32*
  %529 = load i32, i32* %528, align 4
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RAX, align 8, !tbaa !2428
  %531 = load i64, i64* %RSP, align 8
  %532 = add i64 %531, 112
  store i64 %532, i64* %RSP, align 8, !tbaa !2428
  %533 = icmp ugt i64 %531, -113
  %534 = zext i1 %533 to i8
  store i8 %534, i8* %21, align 1, !tbaa !2432
  %535 = trunc i64 %532 to i32
  %536 = and i32 %535, 255
  %537 = tail call i32 @llvm.ctpop.i32(i32 %536) #8
  %538 = trunc i32 %537 to i8
  %539 = and i8 %538, 1
  %540 = xor i8 %539, 1
  store i8 %540, i8* %28, align 1, !tbaa !2446
  %541 = xor i64 %531, 16
  %542 = xor i64 %541, %532
  %543 = lshr i64 %542, 4
  %544 = trunc i64 %543 to i8
  %545 = and i8 %544, 1
  store i8 %545, i8* %34, align 1, !tbaa !2447
  %546 = icmp eq i64 %532, 0
  %547 = zext i1 %546 to i8
  store i8 %547, i8* %37, align 1, !tbaa !2448
  %548 = lshr i64 %532, 63
  %549 = trunc i64 %548 to i8
  store i8 %549, i8* %40, align 1, !tbaa !2449
  %550 = lshr i64 %531, 63
  %551 = xor i64 %548, %550
  %552 = add nuw nsw i64 %551, %548
  %553 = icmp eq i64 %552, 2
  %554 = zext i1 %553 to i8
  store i8 %554, i8* %46, align 1, !tbaa !2450
  %555 = add i64 %524, 8
  store i64 %555, i64* %PC, align 8
  %556 = add i64 %531, 120
  %557 = inttoptr i64 %532 to i64*
  %558 = load i64, i64* %557, align 8
  store i64 %558, i64* %RBP, align 8, !tbaa !2428
  store i64 %556, i64* %13, align 8, !tbaa !2428
  %559 = add i64 %524, 9
  store i64 %559, i64* %PC, align 8
  %560 = inttoptr i64 %556 to i64*
  %561 = load i64, i64* %560, align 8
  store i64 %561, i64* %93, align 8, !tbaa !2428
  %562 = add i64 %531, 128
  store i64 %562, i64* %13, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_402a95:                                     ; preds = %block_402bab, %block_402a8e
  %563 = phi i64 [ %.pre7, %block_402a8e ], [ %523, %block_402bab ]
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.0, %block_402a8e ], [ %MEMORY.1, %block_402bab ]
  %564 = load i64, i64* %RBP, align 8
  %565 = add i64 %564, -40
  %566 = add i64 %563, 3
  store i64 %566, i64* %PC, align 8
  %567 = inttoptr i64 %565 to i32*
  %568 = load i32, i32* %567, align 4
  %569 = zext i32 %568 to i64
  store i64 %569, i64* %RAX, align 8, !tbaa !2428
  %570 = add i64 %564, -16
  %571 = add i64 %563, 6
  store i64 %571, i64* %PC, align 8
  %572 = inttoptr i64 %570 to i32*
  %573 = load i32, i32* %572, align 4
  %574 = add i32 %573, 1
  %575 = zext i32 %574 to i64
  store i64 %575, i64* %RCX, align 8, !tbaa !2428
  %576 = lshr i32 %574, 31
  %577 = sub i32 %568, %574
  %578 = icmp ult i32 %568, %574
  %579 = zext i1 %578 to i8
  store i8 %579, i8* %21, align 1, !tbaa !2432
  %580 = and i32 %577, 255
  %581 = tail call i32 @llvm.ctpop.i32(i32 %580) #8
  %582 = trunc i32 %581 to i8
  %583 = and i8 %582, 1
  %584 = xor i8 %583, 1
  store i8 %584, i8* %28, align 1, !tbaa !2446
  %585 = xor i32 %574, %568
  %586 = xor i32 %585, %577
  %587 = lshr i32 %586, 4
  %588 = trunc i32 %587 to i8
  %589 = and i8 %588, 1
  store i8 %589, i8* %34, align 1, !tbaa !2447
  %590 = icmp eq i32 %577, 0
  %591 = zext i1 %590 to i8
  store i8 %591, i8* %37, align 1, !tbaa !2448
  %592 = lshr i32 %577, 31
  %593 = trunc i32 %592 to i8
  store i8 %593, i8* %40, align 1, !tbaa !2449
  %594 = lshr i32 %568, 31
  %595 = xor i32 %576, %594
  %596 = xor i32 %592, %594
  %597 = add nuw nsw i32 %596, %595
  %598 = icmp eq i32 %597, 2
  %599 = zext i1 %598 to i8
  store i8 %599, i8* %46, align 1, !tbaa !2450
  %600 = icmp ne i8 %593, 0
  %601 = xor i1 %600, %598
  %.v11 = select i1 %601, i64 17, i64 297
  %602 = add i64 %563, %.v11
  store i64 %602, i64* %93, align 8, !tbaa !2428
  br i1 %601, label %block_402aa6, label %block_402bbe

block_402aa6:                                     ; preds = %block_402a95
  %603 = add i64 %564, -44
  %604 = add i64 %602, 7
  store i64 %604, i64* %PC, align 8
  %605 = inttoptr i64 %603 to i32*
  store i32 0, i32* %605, align 4
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_402aad

block_402b44:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 178), i64* %RSI, align 8, !tbaa !2428
  %606 = load i64, i64* @stderr, align 32
  store i64 %606, i64* %RDI, align 8, !tbaa !2428
  %607 = load i64, i64* %RBP, align 8
  %608 = add i64 %607, -36
  %609 = add i64 %452, 21
  store i64 %609, i64* %PC, align 8
  %610 = inttoptr i64 %608 to i32*
  %611 = load i32, i32* %610, align 4
  %612 = zext i32 %611 to i64
  store i64 %612, i64* %RDX, align 8, !tbaa !2428
  %613 = add i64 %607, -40
  %614 = add i64 %452, 24
  store i64 %614, i64* %PC, align 8
  %615 = inttoptr i64 %613 to i32*
  %616 = load i32, i32* %615, align 4
  %617 = zext i32 %616 to i64
  store i64 %617, i64* %RCX, align 8, !tbaa !2428
  %618 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %619 = add i64 %607, -44
  %620 = add i64 %452, 28
  store i64 %620, i64* %PC, align 8
  %621 = inttoptr i64 %619 to i32*
  %622 = load i32, i32* %621, align 4
  %623 = zext i32 %622 to i64
  store i64 %623, i64* %618, align 8, !tbaa !2428
  %624 = add i64 %607, -64
  %625 = add i64 %452, 33
  store i64 %625, i64* %PC, align 8
  %626 = inttoptr i64 %624 to i64*
  %627 = load i64, i64* %626, align 8
  %628 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %9, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %627, i64* %628, align 1, !tbaa !2452
  store double 0.000000e+00, double* %52, align 1, !tbaa !2452
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %630 = add i64 %452, 37
  store i64 %630, i64* %PC, align 8
  %631 = load i32, i32* %610, align 4
  %632 = zext i32 %631 to i64
  store i64 %632, i64* %629, align 8, !tbaa !2428
  %633 = add i64 %452, 40
  store i64 %633, i64* %PC, align 8
  %634 = load i32, i32* %615, align 4
  %635 = zext i32 %634 to i64
  store i64 %635, i64* %RAX, align 8, !tbaa !2428
  %636 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %637 = add i64 %452, 44
  store i64 %637, i64* %PC, align 8
  %638 = load i32, i32* %621, align 4
  %639 = zext i32 %638 to i64
  store i64 %639, i64* %636, align 8, !tbaa !2428
  %640 = add i64 %607, -72
  %641 = add i64 %452, 49
  store i64 %641, i64* %PC, align 8
  %642 = inttoptr i64 %640 to i64*
  %643 = load i64, i64* %642, align 8
  %644 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %10, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %643, i64* %644, align 1, !tbaa !2452
  %645 = bitcast i64* %96 to double*
  store double 0.000000e+00, double* %645, align 1, !tbaa !2452
  %646 = add i64 %607, -56
  %647 = add i64 %452, 54
  store i64 %647, i64* %PC, align 8
  %648 = inttoptr i64 %646 to i64*
  %649 = load i64, i64* %648, align 8
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 0
  store i64 %649, i64* %650, align 1, !tbaa !2452
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %652 = bitcast i64* %651 to double*
  store double 0.000000e+00, double* %652, align 1, !tbaa !2452
  %653 = bitcast i64* %RSP to i32**
  %654 = load i32*, i32** %653, align 8
  %655 = add i64 %452, 57
  store i64 %655, i64* %PC, align 8
  store i32 %634, i32* %654, align 4
  %656 = load i64, i64* %RSP, align 8
  %657 = add i64 %656, 8
  %658 = load i32, i32* %R10D, align 4
  %659 = load i64, i64* %PC, align 8
  %660 = add i64 %659, 5
  store i64 %660, i64* %PC, align 8
  %661 = inttoptr i64 %657 to i32*
  store i32 %658, i32* %661, align 4
  %662 = load i64, i64* %PC, align 8
  store i8 3, i8* %AL, align 1, !tbaa !2454
  %663 = add i64 %662, -9730
  %664 = add i64 %662, 7
  %665 = load i64, i64* %13, align 8, !tbaa !2428
  %666 = add i64 %665, -8
  %667 = inttoptr i64 %666 to i64*
  store i64 %664, i64* %667, align 8
  store i64 %666, i64* %13, align 8, !tbaa !2428
  store i64 %663, i64* %93, align 8, !tbaa !2428
  %668 = tail call fastcc %struct.Memory* @ext_6040f8_fprintf(%struct.State* nonnull %0, %struct.Memory* %447)
  %669 = load i64, i64* %RBP, align 8
  %670 = add i64 %669, -4
  %671 = load i64, i64* %PC, align 8
  %672 = add i64 %671, 7
  store i64 %672, i64* %PC, align 8
  %673 = inttoptr i64 %670 to i32*
  store i32 0, i32* %673, align 4
  %674 = load i64, i64* %RBP, align 8
  %675 = add i64 %674, -84
  %676 = load i32, i32* %EAX, align 4
  %677 = load i64, i64* %PC, align 8
  %678 = add i64 %677, 3
  store i64 %678, i64* %PC, align 8
  %679 = inttoptr i64 %675 to i32*
  store i32 %676, i32* %679, align 4
  %680 = load i64, i64* %PC, align 8
  %681 = add i64 %680, 69
  store i64 %681, i64* %93, align 8, !tbaa !2428
  br label %block_402bd8
}

; Function Attrs: noinline
define %struct.Memory* @sub_402e74__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402e74:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  %5 = icmp ult i64 %3, 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10 = lshr i64 %4, 63
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %12 = lshr i64 %3, 63
  %13 = xor i64 %10, %12
  %14 = add nuw nsw i64 %13, %12
  %15 = icmp eq i64 %14, 2
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %3, i64* %RSP, align 8, !tbaa !2428
  %18 = zext i1 %5 to i8
  store i8 %18, i8* %6, align 1, !tbaa !2432
  %19 = trunc i64 %3 to i32
  %20 = and i32 %19, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #8
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  store i8 %24, i8* %7, align 1, !tbaa !2446
  %25 = xor i64 %4, %3
  %26 = lshr i64 %25, 4
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 1
  store i8 %28, i8* %8, align 1, !tbaa !2447
  %29 = icmp eq i64 %3, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %9, align 1, !tbaa !2448
  %31 = trunc i64 %12 to i8
  store i8 %31, i8* %11, align 1, !tbaa !2449
  store i8 %16, i8* %17, align 1, !tbaa !2450
  %32 = add i64 %1, 9
  store i64 %32, i64* %PC, align 8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = inttoptr i64 %3 to i64*
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %33, align 8, !tbaa !2428
  %37 = add i64 %3, 8
  store i64 %37, i64* %34, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005f0_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4005f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 6307928, i64* %RAX, align 8, !tbaa !2428
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !2432
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %11, align 1, !tbaa !2446
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12, align 1, !tbaa !2447
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %13, align 1, !tbaa !2448
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %14, align 1, !tbaa !2449
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1, !tbaa !2450
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %17 = add i64 %9, 40
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %8, align 8
  store i64 %18, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %9, 41
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %6 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %16, align 8, !tbaa !2428
  %22 = add i64 %6, 8
  store i64 %22, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400f90_init_array(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400f90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %11 = load i64, i64* %RBP, align 8
  %12 = add i64 %1, 1
  store i64 %12, i64* %PC, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = load i64, i64* %13, align 8, !tbaa !2428
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %11, i64* %16, align 8
  %17 = load i64, i64* %PC, align 8
  store i64 %15, i64* %RBP, align 8, !tbaa !2428
  %18 = load i64, i64* %R15, align 8
  %19 = add i64 %17, 5
  store i64 %19, i64* %PC, align 8
  %20 = add i64 %14, -16
  %21 = inttoptr i64 %20 to i64*
  store i64 %18, i64* %21, align 8
  %22 = load i64, i64* %R14, align 8
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 2
  store i64 %24, i64* %PC, align 8
  %25 = add i64 %14, -24
  %26 = inttoptr i64 %25 to i64*
  store i64 %22, i64* %26, align 8
  %27 = load i64, i64* %R13, align 8
  %28 = load i64, i64* %PC, align 8
  %29 = add i64 %28, 2
  store i64 %29, i64* %PC, align 8
  %30 = add i64 %14, -32
  %31 = inttoptr i64 %30 to i64*
  store i64 %27, i64* %31, align 8
  %32 = load i64, i64* %R12, align 8
  %33 = load i64, i64* %PC, align 8
  %34 = add i64 %33, 2
  store i64 %34, i64* %PC, align 8
  %35 = add i64 %14, -40
  %36 = inttoptr i64 %35 to i64*
  store i64 %32, i64* %36, align 8
  %37 = load i64, i64* %RBX, align 8
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %38, 1
  store i64 %39, i64* %PC, align 8
  %40 = add i64 %14, -48
  %41 = inttoptr i64 %40 to i64*
  store i64 %37, i64* %41, align 8
  %42 = load i64, i64* %RAX, align 8
  %43 = load i64, i64* %PC, align 8
  %44 = add i64 %43, 1
  store i64 %44, i64* %PC, align 8
  %45 = add i64 %14, -56
  %46 = inttoptr i64 %45 to i64*
  store i64 %42, i64* %46, align 8
  store i64 %45, i64* %13, align 8, !tbaa !2428
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, 88
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RAX, align 8, !tbaa !2428
  %53 = add i64 %47, 80
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %R10, align 8, !tbaa !2428
  %57 = add i64 %47, 72
  %58 = add i64 %49, 12
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %57 to i64*
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %R11, align 8, !tbaa !2428
  %61 = add i64 %47, 64
  %62 = add i64 %49, 16
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %61 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %RBX, align 8, !tbaa !2428
  %65 = add i64 %47, 56
  %66 = add i64 %49, 20
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %R14, align 8, !tbaa !2428
  %69 = add i64 %47, 48
  %70 = add i64 %49, 24
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %R15, align 8, !tbaa !2428
  %73 = add i64 %47, 40
  %74 = add i64 %49, 28
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %R12, align 8, !tbaa !2428
  %77 = add i64 %47, 32
  %78 = add i64 %49, 32
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %R13, align 8, !tbaa !2428
  %81 = add i64 %47, -104
  %82 = add i64 %49, 36
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  store i64 %52, i64* %83, align 8
  %84 = load i64, i64* %RBP, align 8
  %85 = add i64 %84, 24
  %86 = load i64, i64* %PC, align 8
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %85 to i64*
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %RAX, align 8, !tbaa !2428
  %90 = add i64 %84, -112
  %91 = add i64 %86, 8
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %90 to i64*
  store i64 %89, i64* %92, align 8
  %93 = load i64, i64* %RBP, align 8
  %94 = add i64 %93, 16
  %95 = load i64, i64* %PC, align 8
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %94 to i64*
  %98 = load i64, i64* %97, align 8
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 8) to i64*), align 8
  %100 = bitcast [32 x %union.VectorReg]* %6 to double*
  %101 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %99, i64* %101, align 1, !tbaa !2452
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %103 = bitcast i64* %102 to double*
  store double 0.000000e+00, double* %103, align 1, !tbaa !2452
  %104 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 16) to i64*), align 16
  %105 = bitcast %union.VectorReg* %7 to double*
  %106 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %104, i64* %106, align 1, !tbaa !2452
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %108 = bitcast i64* %107 to double*
  store double 0.000000e+00, double* %108, align 1, !tbaa !2452
  %109 = add i64 %93, -44
  %110 = load i32, i32* %EDI, align 4
  %111 = add i64 %95, 23
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %109 to i32*
  store i32 %110, i32* %112, align 4
  %113 = load i64, i64* %RBP, align 8
  %114 = add i64 %113, -48
  %115 = load i32, i32* %ESI, align 4
  %116 = load i64, i64* %PC, align 8
  %117 = add i64 %116, 3
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %114 to i32*
  store i32 %115, i32* %118, align 4
  %119 = load i64, i64* %RBP, align 8
  %120 = add i64 %119, -52
  %121 = load i32, i32* %EDX, align 4
  %122 = load i64, i64* %PC, align 8
  %123 = add i64 %122, 3
  store i64 %123, i64* %PC, align 8
  %124 = inttoptr i64 %120 to i32*
  store i32 %121, i32* %124, align 4
  %125 = load i64, i64* %RBP, align 8
  %126 = add i64 %125, -64
  %127 = load i64, i64* %RCX, align 8
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %126 to i64*
  store i64 %127, i64* %130, align 8
  %131 = load i64, i64* %RBP, align 8
  %132 = add i64 %131, -72
  %133 = load i64, i64* %R8, align 8
  %134 = load i64, i64* %PC, align 8
  %135 = add i64 %134, 4
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %132 to i64*
  store i64 %133, i64* %136, align 8
  %137 = load i64, i64* %RBP, align 8
  %138 = add i64 %137, -80
  %139 = load i64, i64* %R9, align 8
  %140 = load i64, i64* %PC, align 8
  %141 = add i64 %140, 4
  store i64 %141, i64* %PC, align 8
  %142 = inttoptr i64 %138 to i64*
  store i64 %139, i64* %142, align 8
  %143 = load i64, i64* %RBP, align 8
  %144 = add i64 %143, -64
  %145 = load i64, i64* %PC, align 8
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %144 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RCX, align 8, !tbaa !2428
  %149 = add i64 %145, 8
  store i64 %149, i64* %PC, align 8
  %150 = bitcast %union.VectorReg* %7 to double*
  %151 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %152 = load i64, i64* %151, align 1
  %153 = inttoptr i64 %148 to i64*
  store i64 %152, i64* %153, align 8
  %154 = load i64, i64* %RBP, align 8
  %155 = add i64 %154, -72
  %156 = load i64, i64* %PC, align 8
  %157 = add i64 %156, 4
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %155 to i64*
  %159 = load i64, i64* %158, align 8
  store i64 %159, i64* %RCX, align 8, !tbaa !2428
  %160 = add i64 %156, 8
  store i64 %160, i64* %PC, align 8
  %161 = bitcast [32 x %union.VectorReg]* %6 to double*
  %162 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %163 = load i64, i64* %162, align 1
  %164 = inttoptr i64 %159 to i64*
  store i64 %163, i64* %164, align 8
  %165 = load i64, i64* %RBP, align 8
  %166 = add i64 %165, -84
  %167 = load i64, i64* %PC, align 8
  %168 = add i64 %167, 7
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %166 to i32*
  store i32 0, i32* %169, align 4
  %170 = load i64, i64* %RBP, align 8
  %171 = add i64 %170, -120
  %172 = load i64, i64* %R13, align 8
  %173 = load i64, i64* %PC, align 8
  %174 = add i64 %173, 4
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %171 to i64*
  store i64 %172, i64* %175, align 8
  %176 = load i64, i64* %RBP, align 8
  %177 = add i64 %176, -128
  %178 = load i64, i64* %R14, align 8
  %179 = load i64, i64* %PC, align 8
  %180 = add i64 %179, 4
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %177 to i64*
  store i64 %178, i64* %181, align 8
  %182 = load i64, i64* %RBP, align 8
  %183 = add i64 %182, -136
  %184 = load i64, i64* %R15, align 8
  %185 = load i64, i64* %PC, align 8
  %186 = add i64 %185, 7
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %183 to i64*
  store i64 %184, i64* %187, align 8
  %188 = load i64, i64* %RBP, align 8
  %189 = add i64 %188, -144
  %190 = load i64, i64* %R12, align 8
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 7
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %189 to i64*
  store i64 %190, i64* %193, align 8
  %194 = load i64, i64* %RBP, align 8
  %195 = add i64 %194, -152
  %196 = load i64, i64* %RBX, align 8
  %197 = load i64, i64* %PC, align 8
  %198 = add i64 %197, 7
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %195 to i64*
  store i64 %196, i64* %199, align 8
  %200 = load i64, i64* %RBP, align 8
  %201 = add i64 %200, -160
  %202 = load i64, i64* %R11, align 8
  %203 = load i64, i64* %PC, align 8
  %204 = add i64 %203, 7
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %201 to i64*
  store i64 %202, i64* %205, align 8
  %206 = load i64, i64* %RBP, align 8
  %207 = add i64 %206, -168
  %208 = load i64, i64* %RAX, align 8
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 7
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %207 to i64*
  store i64 %208, i64* %211, align 8
  %212 = load i64, i64* %RBP, align 8
  %213 = add i64 %212, -176
  %214 = load i64, i64* %R10, align 8
  %215 = load i64, i64* %PC, align 8
  %216 = add i64 %215, 7
  store i64 %216, i64* %PC, align 8
  %217 = inttoptr i64 %213 to i64*
  store i64 %214, i64* %217, align 8
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %225 = bitcast %union.VectorReg* %8 to double*
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %.pre = load i64, i64* %PC, align 8
  br label %block_40103c

block_4010bf:                                     ; preds = %block_4010b3
  %227 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 80) to i64*), align 16
  %228 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %227, i64* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %103, align 1, !tbaa !2452
  %229 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 40) to double*), align 8
  store double %229, double* %105, align 1, !tbaa !2452
  store double 0.000000e+00, double* %108, align 1, !tbaa !2452
  %230 = add i64 %400, 19
  store i64 %230, i64* %PC, align 8
  %231 = load i32, i32* %367, align 4
  %232 = zext i32 %231 to i64
  store i64 %232, i64* %RAX, align 8, !tbaa !2428
  %233 = sitofp i32 %231 to double
  %234 = fadd double %233, %229
  store double %234, double* %225, align 1, !tbaa !2452
  %235 = add i64 %400, 30
  store i64 %235, i64* %PC, align 8
  %236 = load i32, i32* %372, align 4
  %237 = zext i32 %236 to i64
  store i64 %237, i64* %RAX, align 8, !tbaa !2428
  %238 = sitofp i32 %236 to double
  store double %238, double* %105, align 1, !tbaa !2452
  %239 = fdiv double %234, %238
  store double %239, double* %225, align 1, !tbaa !2452
  %240 = add i64 %364, 64
  %241 = add i64 %400, 42
  store i64 %241, i64* %PC, align 8
  %242 = inttoptr i64 %240 to i64*
  %243 = load i64, i64* %242, align 8
  store i64 %243, i64* %RCX, align 8, !tbaa !2428
  %244 = add i64 %400, 46
  store i64 %244, i64* %PC, align 8
  %245 = load i32, i32* %367, align 4
  %246 = sext i32 %245 to i64
  store i64 %246, i64* %RDX, align 8, !tbaa !2428
  %247 = shl nsw i64 %246, 3
  %248 = add i64 %247, %243
  %249 = add i64 %400, 51
  store i64 %249, i64* %PC, align 8
  %250 = inttoptr i64 %248 to double*
  store double %239, double* %250, align 8
  %251 = load i64, i64* %RBP, align 8
  %252 = add i64 %251, -84
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, 3
  store i64 %254, i64* %PC, align 8
  %255 = inttoptr i64 %252 to i32*
  %256 = load i32, i32* %255, align 4
  %257 = zext i32 %256 to i64
  store i64 %257, i64* %RAX, align 8, !tbaa !2428
  %258 = sitofp i32 %256 to double
  %259 = load double, double* %161, align 1
  %260 = fadd double %258, %259
  store double %260, double* %105, align 1, !tbaa !2452
  %261 = add i64 %251, -48
  %262 = add i64 %253, 14
  store i64 %262, i64* %PC, align 8
  %263 = inttoptr i64 %261 to i32*
  %264 = load i32, i32* %263, align 4
  %265 = zext i32 %264 to i64
  store i64 %265, i64* %RAX, align 8, !tbaa !2428
  %266 = sitofp i32 %264 to double
  store double %266, double* %100, align 1, !tbaa !2452
  %267 = fdiv double %260, %266
  store double %267, double* %105, align 1, !tbaa !2452
  %268 = add i64 %251, 72
  %269 = add i64 %253, 26
  store i64 %269, i64* %PC, align 8
  %270 = inttoptr i64 %268 to i64*
  %271 = load i64, i64* %270, align 8
  store i64 %271, i64* %RCX, align 8, !tbaa !2428
  %272 = add i64 %253, 30
  store i64 %272, i64* %PC, align 8
  %273 = load i32, i32* %255, align 4
  %274 = sext i32 %273 to i64
  store i64 %274, i64* %RDX, align 8, !tbaa !2428
  %275 = shl nsw i64 %274, 3
  %276 = add i64 %275, %271
  %277 = add i64 %253, 35
  store i64 %277, i64* %PC, align 8
  %278 = inttoptr i64 %276 to double*
  store double %267, double* %278, align 8
  %279 = load i64, i64* %RBP, align 8
  %280 = add i64 %279, -84
  %281 = load i64, i64* %PC, align 8
  %282 = add i64 %281, 3
  store i64 %282, i64* %PC, align 8
  %283 = inttoptr i64 %280 to i32*
  %284 = load i32, i32* %283, align 4
  %285 = add i32 %284, 1
  %286 = zext i32 %285 to i64
  store i64 %286, i64* %RAX, align 8, !tbaa !2428
  %287 = icmp eq i32 %284, -1
  %288 = icmp eq i32 %285, 0
  %289 = or i1 %287, %288
  %290 = zext i1 %289 to i8
  store i8 %290, i8* %218, align 1, !tbaa !2432
  %291 = and i32 %285, 255
  %292 = tail call i32 @llvm.ctpop.i32(i32 %291) #8
  %293 = trunc i32 %292 to i8
  %294 = and i8 %293, 1
  %295 = xor i8 %294, 1
  store i8 %295, i8* %219, align 1, !tbaa !2446
  %296 = xor i32 %284, %285
  %297 = lshr i32 %296, 4
  %298 = trunc i32 %297 to i8
  %299 = and i8 %298, 1
  store i8 %299, i8* %220, align 1, !tbaa !2447
  %300 = icmp eq i32 %285, 0
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %221, align 1, !tbaa !2448
  %302 = lshr i32 %285, 31
  %303 = trunc i32 %302 to i8
  store i8 %303, i8* %222, align 1, !tbaa !2449
  %304 = lshr i32 %284, 31
  %305 = xor i32 %302, %304
  %306 = add nuw nsw i32 %305, %302
  %307 = icmp eq i32 %306, 2
  %308 = zext i1 %307 to i8
  store i8 %308, i8* %223, align 1, !tbaa !2450
  %309 = add i64 %281, 9
  store i64 %309, i64* %PC, align 8
  store i32 %285, i32* %283, align 4
  %310 = load i64, i64* %PC, align 8
  %311 = add i64 %310, -107
  store i64 %311, i64* %224, align 8, !tbaa !2428
  br label %block_4010b3

block_4013b5:                                     ; preds = %block_4011a1
  %312 = load i64, i64* %RSP, align 8
  %313 = add i64 %312, 8
  store i64 %313, i64* %RSP, align 8, !tbaa !2428
  %314 = icmp ugt i64 %312, -9
  %315 = zext i1 %314 to i8
  store i8 %315, i8* %218, align 1, !tbaa !2432
  %316 = trunc i64 %313 to i32
  %317 = and i32 %316, 255
  %318 = tail call i32 @llvm.ctpop.i32(i32 %317) #8
  %319 = trunc i32 %318 to i8
  %320 = and i8 %319, 1
  %321 = xor i8 %320, 1
  store i8 %321, i8* %219, align 1, !tbaa !2446
  %322 = xor i64 %312, %313
  %323 = lshr i64 %322, 4
  %324 = trunc i64 %323 to i8
  %325 = and i8 %324, 1
  store i8 %325, i8* %220, align 1, !tbaa !2447
  %326 = icmp eq i64 %313, 0
  %327 = zext i1 %326 to i8
  store i8 %327, i8* %221, align 1, !tbaa !2448
  %328 = lshr i64 %313, 63
  %329 = trunc i64 %328 to i8
  store i8 %329, i8* %222, align 1, !tbaa !2449
  %330 = lshr i64 %312, 63
  %331 = xor i64 %328, %330
  %332 = add nuw nsw i64 %331, %328
  %333 = icmp eq i64 %332, 2
  %334 = zext i1 %333 to i8
  store i8 %334, i8* %223, align 1, !tbaa !2450
  %335 = add i64 %1384, 5
  store i64 %335, i64* %PC, align 8
  %336 = add i64 %312, 16
  %337 = inttoptr i64 %313 to i64*
  %338 = load i64, i64* %337, align 8
  store i64 %338, i64* %RBX, align 8, !tbaa !2428
  store i64 %336, i64* %13, align 8, !tbaa !2428
  %339 = add i64 %1384, 7
  store i64 %339, i64* %PC, align 8
  %340 = add i64 %312, 24
  %341 = inttoptr i64 %336 to i64*
  %342 = load i64, i64* %341, align 8
  store i64 %342, i64* %R12, align 8, !tbaa !2428
  store i64 %340, i64* %13, align 8, !tbaa !2428
  %343 = add i64 %1384, 9
  store i64 %343, i64* %PC, align 8
  %344 = add i64 %312, 32
  %345 = inttoptr i64 %340 to i64*
  %346 = load i64, i64* %345, align 8
  store i64 %346, i64* %R13, align 8, !tbaa !2428
  store i64 %344, i64* %13, align 8, !tbaa !2428
  %347 = add i64 %1384, 11
  store i64 %347, i64* %PC, align 8
  %348 = add i64 %312, 40
  %349 = inttoptr i64 %344 to i64*
  %350 = load i64, i64* %349, align 8
  store i64 %350, i64* %R14, align 8, !tbaa !2428
  store i64 %348, i64* %13, align 8, !tbaa !2428
  %351 = add i64 %1384, 13
  store i64 %351, i64* %PC, align 8
  %352 = add i64 %312, 48
  %353 = inttoptr i64 %348 to i64*
  %354 = load i64, i64* %353, align 8
  store i64 %354, i64* %R15, align 8, !tbaa !2428
  store i64 %352, i64* %13, align 8, !tbaa !2428
  %355 = add i64 %1384, 14
  store i64 %355, i64* %PC, align 8
  %356 = add i64 %312, 56
  %357 = inttoptr i64 %352 to i64*
  %358 = load i64, i64* %357, align 8
  store i64 %358, i64* %RBP, align 8, !tbaa !2428
  store i64 %356, i64* %13, align 8, !tbaa !2428
  %359 = add i64 %1384, 15
  store i64 %359, i64* %PC, align 8
  %360 = inttoptr i64 %356 to i64*
  %361 = load i64, i64* %360, align 8
  store i64 %361, i64* %224, align 8, !tbaa !2428
  %362 = add i64 %312, 64
  store i64 %362, i64* %13, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4010b3:                                     ; preds = %block_4010ac, %block_4010bf
  %363 = phi i64 [ %.pre1, %block_4010ac ], [ %311, %block_4010bf ]
  %364 = load i64, i64* %RBP, align 8
  %365 = add i64 %364, -84
  %366 = add i64 %363, 3
  store i64 %366, i64* %PC, align 8
  %367 = inttoptr i64 %365 to i32*
  %368 = load i32, i32* %367, align 4
  %369 = zext i32 %368 to i64
  store i64 %369, i64* %RAX, align 8, !tbaa !2428
  %370 = add i64 %364, -48
  %371 = add i64 %363, 6
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %370 to i32*
  %373 = load i32, i32* %372, align 4
  %374 = sub i32 %368, %373
  %375 = icmp ult i32 %368, %373
  %376 = zext i1 %375 to i8
  store i8 %376, i8* %218, align 1, !tbaa !2432
  %377 = and i32 %374, 255
  %378 = tail call i32 @llvm.ctpop.i32(i32 %377) #8
  %379 = trunc i32 %378 to i8
  %380 = and i8 %379, 1
  %381 = xor i8 %380, 1
  store i8 %381, i8* %219, align 1, !tbaa !2446
  %382 = xor i32 %373, %368
  %383 = xor i32 %382, %374
  %384 = lshr i32 %383, 4
  %385 = trunc i32 %384 to i8
  %386 = and i8 %385, 1
  store i8 %386, i8* %220, align 1, !tbaa !2447
  %387 = icmp eq i32 %374, 0
  %388 = zext i1 %387 to i8
  store i8 %388, i8* %221, align 1, !tbaa !2448
  %389 = lshr i32 %374, 31
  %390 = trunc i32 %389 to i8
  store i8 %390, i8* %222, align 1, !tbaa !2449
  %391 = lshr i32 %368, 31
  %392 = lshr i32 %373, 31
  %393 = xor i32 %392, %391
  %394 = xor i32 %389, %391
  %395 = add nuw nsw i32 %394, %393
  %396 = icmp eq i32 %395, 2
  %397 = zext i1 %396 to i8
  store i8 %397, i8* %223, align 1, !tbaa !2450
  %398 = icmp ne i8 %390, 0
  %399 = xor i1 %398, %396
  %.demorgan6 = or i1 %387, %399
  %.v7 = select i1 %.demorgan6, i64 12, i64 112
  %400 = add i64 %363, %.v7
  store i64 %400, i64* %224, align 8, !tbaa !2428
  br i1 %.demorgan6, label %block_4010bf, label %block_401123

block_401261:                                     ; preds = %block_401255
  %401 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 40) to i64*), align 8
  %402 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %401, i64* %402, align 1, !tbaa !2452
  store double 0.000000e+00, double* %103, align 1, !tbaa !2452
  %403 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 48) to i64*), align 16
  %404 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %403, i64* %404, align 1, !tbaa !2452
  store double 0.000000e+00, double* %108, align 1, !tbaa !2452
  %405 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 56) to double*), align 8
  store double %405, double* %225, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1258, align 1, !tbaa !2452
  %406 = add i64 %1108, -84
  %407 = add i64 %1144, 27
  store i64 %407, i64* %PC, align 8
  %408 = inttoptr i64 %406 to i32*
  %409 = load i32, i32* %408, align 4
  %410 = zext i32 %409 to i64
  store i64 %410, i64* %RAX, align 8, !tbaa !2428
  %411 = sitofp i32 %409 to double
  store double %411, double* %1257, align 1, !tbaa !2452
  %412 = add i64 %1108, -88
  %413 = add i64 %1144, 34
  store i64 %413, i64* %PC, align 8
  %414 = inttoptr i64 %412 to i32*
  %415 = load i32, i32* %414, align 4
  %416 = add i32 %415, 3
  %417 = zext i32 %416 to i64
  store i64 %417, i64* %RAX, align 8, !tbaa !2428
  %418 = icmp ugt i32 %415, -4
  %419 = zext i1 %418 to i8
  store i8 %419, i8* %218, align 1, !tbaa !2432
  %420 = and i32 %416, 255
  %421 = tail call i32 @llvm.ctpop.i32(i32 %420) #8
  %422 = trunc i32 %421 to i8
  %423 = and i8 %422, 1
  %424 = xor i8 %423, 1
  store i8 %424, i8* %219, align 1, !tbaa !2446
  %425 = xor i32 %415, %416
  %426 = lshr i32 %425, 4
  %427 = trunc i32 %426 to i8
  %428 = and i8 %427, 1
  store i8 %428, i8* %220, align 1, !tbaa !2447
  %429 = icmp eq i32 %416, 0
  %430 = zext i1 %429 to i8
  store i8 %430, i8* %221, align 1, !tbaa !2448
  %431 = lshr i32 %416, 31
  %432 = trunc i32 %431 to i8
  store i8 %432, i8* %222, align 1, !tbaa !2449
  %433 = lshr i32 %415, 31
  %434 = xor i32 %431, %433
  %435 = add nuw nsw i32 %434, %431
  %436 = icmp eq i32 %435, 2
  %437 = zext i1 %436 to i8
  store i8 %437, i8* %223, align 1, !tbaa !2450
  %438 = sitofp i32 %416 to double
  store double %438, double* %1259, align 1, !tbaa !2452
  %439 = fmul double %411, %438
  store double %439, double* %1257, align 1, !tbaa !2452
  %440 = add i64 %1144, 48
  store i64 %440, i64* %PC, align 8
  %441 = load i32, i32* %1111, align 4
  %442 = zext i32 %441 to i64
  store i64 %442, i64* %RAX, align 8, !tbaa !2428
  %443 = sitofp i32 %441 to double
  store double %443, double* %1259, align 1, !tbaa !2452
  %444 = fadd double %439, %443
  %445 = fadd double %444, %405
  store double %445, double* %1257, align 1, !tbaa !2452
  %446 = load i64, i64* %RBP, align 8
  %447 = add i64 %446, -48
  %448 = add i64 %1144, 63
  store i64 %448, i64* %PC, align 8
  %449 = inttoptr i64 %447 to i32*
  %450 = load i32, i32* %449, align 4
  %451 = zext i32 %450 to i64
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = sitofp i32 %450 to double
  store double %452, double* %225, align 1, !tbaa !2452
  %453 = fdiv double %445, %452
  store double %453, double* %1257, align 1, !tbaa !2452
  %454 = add i64 %446, 24
  %455 = add i64 %1144, 75
  store i64 %455, i64* %PC, align 8
  %456 = inttoptr i64 %454 to i64*
  %457 = load i64, i64* %456, align 8
  store i64 %457, i64* %RCX, align 8, !tbaa !2428
  %458 = add i64 %446, -84
  %459 = add i64 %1144, 79
  store i64 %459, i64* %PC, align 8
  %460 = inttoptr i64 %458 to i32*
  %461 = load i32, i32* %460, align 4
  %462 = sext i32 %461 to i64
  %463 = mul nsw i64 %462, 33800
  store i64 %463, i64* %RDX, align 8, !tbaa !2428
  %464 = lshr i64 %463, 63
  %465 = add i64 %463, %457
  store i64 %465, i64* %RCX, align 8, !tbaa !2428
  %466 = icmp ult i64 %465, %457
  %467 = icmp ult i64 %465, %463
  %468 = or i1 %466, %467
  %469 = zext i1 %468 to i8
  store i8 %469, i8* %218, align 1, !tbaa !2432
  %470 = trunc i64 %465 to i32
  %471 = and i32 %470, 255
  %472 = tail call i32 @llvm.ctpop.i32(i32 %471) #8
  %473 = trunc i32 %472 to i8
  %474 = and i8 %473, 1
  %475 = xor i8 %474, 1
  store i8 %475, i8* %219, align 1, !tbaa !2446
  %476 = xor i64 %463, %457
  %477 = xor i64 %476, %465
  %478 = lshr i64 %477, 4
  %479 = trunc i64 %478 to i8
  %480 = and i8 %479, 1
  store i8 %480, i8* %220, align 1, !tbaa !2447
  %481 = icmp eq i64 %465, 0
  %482 = zext i1 %481 to i8
  store i8 %482, i8* %221, align 1, !tbaa !2448
  %483 = lshr i64 %465, 63
  %484 = trunc i64 %483 to i8
  store i8 %484, i8* %222, align 1, !tbaa !2449
  %485 = lshr i64 %457, 63
  %486 = xor i64 %483, %485
  %487 = xor i64 %483, %464
  %488 = add nuw nsw i64 %486, %487
  %489 = icmp eq i64 %488, 2
  %490 = zext i1 %489 to i8
  store i8 %490, i8* %223, align 1, !tbaa !2450
  %491 = add i64 %446, -88
  %492 = add i64 %1144, 93
  store i64 %492, i64* %PC, align 8
  %493 = inttoptr i64 %491 to i32*
  %494 = load i32, i32* %493, align 4
  %495 = sext i32 %494 to i64
  %496 = mul nsw i64 %495, 520
  store i64 %496, i64* %RDX, align 8, !tbaa !2428
  %497 = lshr i64 %496, 63
  %498 = add i64 %496, %465
  store i64 %498, i64* %RCX, align 8, !tbaa !2428
  %499 = icmp ult i64 %498, %465
  %500 = icmp ult i64 %498, %496
  %501 = or i1 %499, %500
  %502 = zext i1 %501 to i8
  store i8 %502, i8* %218, align 1, !tbaa !2432
  %503 = trunc i64 %498 to i32
  %504 = and i32 %503, 255
  %505 = tail call i32 @llvm.ctpop.i32(i32 %504) #8
  %506 = trunc i32 %505 to i8
  %507 = and i8 %506, 1
  %508 = xor i8 %507, 1
  store i8 %508, i8* %219, align 1, !tbaa !2446
  %509 = xor i64 %496, %465
  %510 = xor i64 %509, %498
  %511 = lshr i64 %510, 4
  %512 = trunc i64 %511 to i8
  %513 = and i8 %512, 1
  store i8 %513, i8* %220, align 1, !tbaa !2447
  %514 = icmp eq i64 %498, 0
  %515 = zext i1 %514 to i8
  store i8 %515, i8* %221, align 1, !tbaa !2448
  %516 = lshr i64 %498, 63
  %517 = trunc i64 %516 to i8
  store i8 %517, i8* %222, align 1, !tbaa !2449
  %518 = xor i64 %516, %483
  %519 = xor i64 %516, %497
  %520 = add nuw nsw i64 %518, %519
  %521 = icmp eq i64 %520, 2
  %522 = zext i1 %521 to i8
  store i8 %522, i8* %223, align 1, !tbaa !2450
  %523 = load i64, i64* %RBP, align 8
  %524 = add i64 %523, -92
  %525 = add i64 %1144, 107
  store i64 %525, i64* %PC, align 8
  %526 = inttoptr i64 %524 to i32*
  %527 = load i32, i32* %526, align 4
  %528 = sext i32 %527 to i64
  store i64 %528, i64* %RDX, align 8, !tbaa !2428
  %529 = shl nsw i64 %528, 3
  %530 = add i64 %529, %498
  %531 = add i64 %1144, 112
  store i64 %531, i64* %PC, align 8
  %532 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  %533 = load i64, i64* %532, align 1
  %534 = inttoptr i64 %530 to i64*
  store i64 %533, i64* %534, align 8
  %535 = load i64, i64* %RBP, align 8
  %536 = add i64 %535, -84
  %537 = load i64, i64* %PC, align 8
  %538 = add i64 %537, 3
  store i64 %538, i64* %PC, align 8
  %539 = inttoptr i64 %536 to i32*
  %540 = load i32, i32* %539, align 4
  %541 = zext i32 %540 to i64
  store i64 %541, i64* %RAX, align 8, !tbaa !2428
  %542 = sitofp i32 %540 to double
  store double %542, double* %225, align 1, !tbaa !2452
  %543 = add i64 %535, -88
  %544 = add i64 %537, 10
  store i64 %544, i64* %PC, align 8
  %545 = inttoptr i64 %543 to i32*
  %546 = load i32, i32* %545, align 4
  %547 = add i32 %546, 4
  %548 = zext i32 %547 to i64
  store i64 %548, i64* %RAX, align 8, !tbaa !2428
  %549 = icmp ugt i32 %546, -5
  %550 = zext i1 %549 to i8
  store i8 %550, i8* %218, align 1, !tbaa !2432
  %551 = and i32 %547, 255
  %552 = tail call i32 @llvm.ctpop.i32(i32 %551) #8
  %553 = trunc i32 %552 to i8
  %554 = and i8 %553, 1
  %555 = xor i8 %554, 1
  store i8 %555, i8* %219, align 1, !tbaa !2446
  %556 = xor i32 %546, %547
  %557 = lshr i32 %556, 4
  %558 = trunc i32 %557 to i8
  %559 = and i8 %558, 1
  store i8 %559, i8* %220, align 1, !tbaa !2447
  %560 = icmp eq i32 %547, 0
  %561 = zext i1 %560 to i8
  store i8 %561, i8* %221, align 1, !tbaa !2448
  %562 = lshr i32 %547, 31
  %563 = trunc i32 %562 to i8
  store i8 %563, i8* %222, align 1, !tbaa !2449
  %564 = lshr i32 %546, 31
  %565 = xor i32 %562, %564
  %566 = add nuw nsw i32 %565, %562
  %567 = icmp eq i32 %566, 2
  %568 = zext i1 %567 to i8
  store i8 %568, i8* %223, align 1, !tbaa !2450
  %569 = sitofp i32 %547 to double
  store double %569, double* %1257, align 1, !tbaa !2452
  %570 = fmul double %542, %569
  store double %570, double* %225, align 1, !tbaa !2452
  %571 = add i64 %535, -92
  %572 = add i64 %537, 24
  store i64 %572, i64* %PC, align 8
  %573 = inttoptr i64 %571 to i32*
  %574 = load i32, i32* %573, align 4
  %575 = zext i32 %574 to i64
  store i64 %575, i64* %RAX, align 8, !tbaa !2428
  %576 = sitofp i32 %574 to double
  store double %576, double* %1257, align 1, !tbaa !2452
  %577 = fadd double %570, %576
  %578 = load double, double* %150, align 1
  %579 = fadd double %577, %578
  store double %579, double* %225, align 1, !tbaa !2452
  %580 = add i64 %535, -52
  %581 = add i64 %537, 39
  store i64 %581, i64* %PC, align 8
  %582 = inttoptr i64 %580 to i32*
  %583 = load i32, i32* %582, align 4
  %584 = zext i32 %583 to i64
  store i64 %584, i64* %RAX, align 8, !tbaa !2428
  %585 = sitofp i32 %583 to double
  store double %585, double* %105, align 1, !tbaa !2452
  %586 = fdiv double %579, %585
  store double %586, double* %225, align 1, !tbaa !2452
  %587 = load i64, i64* %RBP, align 8
  %588 = add i64 %587, 32
  %589 = add i64 %537, 51
  store i64 %589, i64* %PC, align 8
  %590 = inttoptr i64 %588 to i64*
  %591 = load i64, i64* %590, align 8
  store i64 %591, i64* %RCX, align 8, !tbaa !2428
  %592 = add i64 %587, -84
  %593 = add i64 %537, 55
  store i64 %593, i64* %PC, align 8
  %594 = inttoptr i64 %592 to i32*
  %595 = load i32, i32* %594, align 4
  %596 = sext i32 %595 to i64
  %597 = mul nsw i64 %596, 33800
  store i64 %597, i64* %RDX, align 8, !tbaa !2428
  %598 = lshr i64 %597, 63
  %599 = add i64 %597, %591
  store i64 %599, i64* %RCX, align 8, !tbaa !2428
  %600 = icmp ult i64 %599, %591
  %601 = icmp ult i64 %599, %597
  %602 = or i1 %600, %601
  %603 = zext i1 %602 to i8
  store i8 %603, i8* %218, align 1, !tbaa !2432
  %604 = trunc i64 %599 to i32
  %605 = and i32 %604, 255
  %606 = tail call i32 @llvm.ctpop.i32(i32 %605) #8
  %607 = trunc i32 %606 to i8
  %608 = and i8 %607, 1
  %609 = xor i8 %608, 1
  store i8 %609, i8* %219, align 1, !tbaa !2446
  %610 = xor i64 %597, %591
  %611 = xor i64 %610, %599
  %612 = lshr i64 %611, 4
  %613 = trunc i64 %612 to i8
  %614 = and i8 %613, 1
  store i8 %614, i8* %220, align 1, !tbaa !2447
  %615 = icmp eq i64 %599, 0
  %616 = zext i1 %615 to i8
  store i8 %616, i8* %221, align 1, !tbaa !2448
  %617 = lshr i64 %599, 63
  %618 = trunc i64 %617 to i8
  store i8 %618, i8* %222, align 1, !tbaa !2449
  %619 = lshr i64 %591, 63
  %620 = xor i64 %617, %619
  %621 = xor i64 %617, %598
  %622 = add nuw nsw i64 %620, %621
  %623 = icmp eq i64 %622, 2
  %624 = zext i1 %623 to i8
  store i8 %624, i8* %223, align 1, !tbaa !2450
  %625 = add i64 %587, -88
  %626 = add i64 %537, 69
  store i64 %626, i64* %PC, align 8
  %627 = inttoptr i64 %625 to i32*
  %628 = load i32, i32* %627, align 4
  %629 = sext i32 %628 to i64
  %630 = mul nsw i64 %629, 520
  store i64 %630, i64* %RDX, align 8, !tbaa !2428
  %631 = lshr i64 %630, 63
  %632 = add i64 %630, %599
  store i64 %632, i64* %RCX, align 8, !tbaa !2428
  %633 = icmp ult i64 %632, %599
  %634 = icmp ult i64 %632, %630
  %635 = or i1 %633, %634
  %636 = zext i1 %635 to i8
  store i8 %636, i8* %218, align 1, !tbaa !2432
  %637 = trunc i64 %632 to i32
  %638 = and i32 %637, 255
  %639 = tail call i32 @llvm.ctpop.i32(i32 %638) #8
  %640 = trunc i32 %639 to i8
  %641 = and i8 %640, 1
  %642 = xor i8 %641, 1
  store i8 %642, i8* %219, align 1, !tbaa !2446
  %643 = xor i64 %630, %599
  %644 = xor i64 %643, %632
  %645 = lshr i64 %644, 4
  %646 = trunc i64 %645 to i8
  %647 = and i8 %646, 1
  store i8 %647, i8* %220, align 1, !tbaa !2447
  %648 = icmp eq i64 %632, 0
  %649 = zext i1 %648 to i8
  store i8 %649, i8* %221, align 1, !tbaa !2448
  %650 = lshr i64 %632, 63
  %651 = trunc i64 %650 to i8
  store i8 %651, i8* %222, align 1, !tbaa !2449
  %652 = xor i64 %650, %617
  %653 = xor i64 %650, %631
  %654 = add nuw nsw i64 %652, %653
  %655 = icmp eq i64 %654, 2
  %656 = zext i1 %655 to i8
  store i8 %656, i8* %223, align 1, !tbaa !2450
  %657 = load i64, i64* %RBP, align 8
  %658 = add i64 %657, -92
  %659 = add i64 %537, 83
  store i64 %659, i64* %PC, align 8
  %660 = inttoptr i64 %658 to i32*
  %661 = load i32, i32* %660, align 4
  %662 = sext i32 %661 to i64
  store i64 %662, i64* %RDX, align 8, !tbaa !2428
  %663 = shl nsw i64 %662, 3
  %664 = add i64 %663, %632
  %665 = add i64 %537, 88
  store i64 %665, i64* %PC, align 8
  %666 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %8, i64 0, i32 0, i32 0, i32 0, i64 0
  %667 = load i64, i64* %666, align 1
  %668 = inttoptr i64 %664 to i64*
  store i64 %667, i64* %668, align 8
  %669 = load i64, i64* %RBP, align 8
  %670 = add i64 %669, -84
  %671 = load i64, i64* %PC, align 8
  %672 = add i64 %671, 3
  store i64 %672, i64* %PC, align 8
  %673 = inttoptr i64 %670 to i32*
  %674 = load i32, i32* %673, align 4
  %675 = zext i32 %674 to i64
  store i64 %675, i64* %RAX, align 8, !tbaa !2428
  %676 = sitofp i32 %674 to double
  store double %676, double* %105, align 1, !tbaa !2452
  %677 = add i64 %669, -88
  %678 = add i64 %671, 10
  store i64 %678, i64* %PC, align 8
  %679 = inttoptr i64 %677 to i32*
  %680 = load i32, i32* %679, align 4
  %681 = add i32 %680, 5
  %682 = zext i32 %681 to i64
  store i64 %682, i64* %RAX, align 8, !tbaa !2428
  %683 = icmp ugt i32 %680, -6
  %684 = zext i1 %683 to i8
  store i8 %684, i8* %218, align 1, !tbaa !2432
  %685 = and i32 %681, 255
  %686 = tail call i32 @llvm.ctpop.i32(i32 %685) #8
  %687 = trunc i32 %686 to i8
  %688 = and i8 %687, 1
  %689 = xor i8 %688, 1
  store i8 %689, i8* %219, align 1, !tbaa !2446
  %690 = xor i32 %680, %681
  %691 = lshr i32 %690, 4
  %692 = trunc i32 %691 to i8
  %693 = and i8 %692, 1
  store i8 %693, i8* %220, align 1, !tbaa !2447
  %694 = icmp eq i32 %681, 0
  %695 = zext i1 %694 to i8
  store i8 %695, i8* %221, align 1, !tbaa !2448
  %696 = lshr i32 %681, 31
  %697 = trunc i32 %696 to i8
  store i8 %697, i8* %222, align 1, !tbaa !2449
  %698 = lshr i32 %680, 31
  %699 = xor i32 %696, %698
  %700 = add nuw nsw i32 %699, %696
  %701 = icmp eq i32 %700, 2
  %702 = zext i1 %701 to i8
  store i8 %702, i8* %223, align 1, !tbaa !2450
  %703 = sitofp i32 %681 to double
  store double %703, double* %225, align 1, !tbaa !2452
  %704 = fmul double %676, %703
  store double %704, double* %105, align 1, !tbaa !2452
  %705 = add i64 %669, -92
  %706 = add i64 %671, 24
  store i64 %706, i64* %PC, align 8
  %707 = inttoptr i64 %705 to i32*
  %708 = load i32, i32* %707, align 4
  %709 = zext i32 %708 to i64
  store i64 %709, i64* %RAX, align 8, !tbaa !2428
  %710 = sitofp i32 %708 to double
  store double %710, double* %225, align 1, !tbaa !2452
  %711 = fadd double %704, %710
  %712 = load double, double* %161, align 1
  %713 = fadd double %711, %712
  store double %713, double* %105, align 1, !tbaa !2452
  %714 = add i64 %669, -44
  %715 = add i64 %671, 39
  store i64 %715, i64* %PC, align 8
  %716 = inttoptr i64 %714 to i32*
  %717 = load i32, i32* %716, align 4
  %718 = zext i32 %717 to i64
  store i64 %718, i64* %RAX, align 8, !tbaa !2428
  %719 = sitofp i32 %717 to double
  store double %719, double* %100, align 1, !tbaa !2452
  %720 = fdiv double %713, %719
  store double %720, double* %105, align 1, !tbaa !2452
  %721 = load i64, i64* %RBP, align 8
  %722 = add i64 %721, 40
  %723 = add i64 %671, 51
  store i64 %723, i64* %PC, align 8
  %724 = inttoptr i64 %722 to i64*
  %725 = load i64, i64* %724, align 8
  store i64 %725, i64* %RCX, align 8, !tbaa !2428
  %726 = add i64 %721, -84
  %727 = add i64 %671, 55
  store i64 %727, i64* %PC, align 8
  %728 = inttoptr i64 %726 to i32*
  %729 = load i32, i32* %728, align 4
  %730 = sext i32 %729 to i64
  %731 = mul nsw i64 %730, 33800
  store i64 %731, i64* %RDX, align 8, !tbaa !2428
  %732 = lshr i64 %731, 63
  %733 = add i64 %731, %725
  store i64 %733, i64* %RCX, align 8, !tbaa !2428
  %734 = icmp ult i64 %733, %725
  %735 = icmp ult i64 %733, %731
  %736 = or i1 %734, %735
  %737 = zext i1 %736 to i8
  store i8 %737, i8* %218, align 1, !tbaa !2432
  %738 = trunc i64 %733 to i32
  %739 = and i32 %738, 255
  %740 = tail call i32 @llvm.ctpop.i32(i32 %739) #8
  %741 = trunc i32 %740 to i8
  %742 = and i8 %741, 1
  %743 = xor i8 %742, 1
  store i8 %743, i8* %219, align 1, !tbaa !2446
  %744 = xor i64 %731, %725
  %745 = xor i64 %744, %733
  %746 = lshr i64 %745, 4
  %747 = trunc i64 %746 to i8
  %748 = and i8 %747, 1
  store i8 %748, i8* %220, align 1, !tbaa !2447
  %749 = icmp eq i64 %733, 0
  %750 = zext i1 %749 to i8
  store i8 %750, i8* %221, align 1, !tbaa !2448
  %751 = lshr i64 %733, 63
  %752 = trunc i64 %751 to i8
  store i8 %752, i8* %222, align 1, !tbaa !2449
  %753 = lshr i64 %725, 63
  %754 = xor i64 %751, %753
  %755 = xor i64 %751, %732
  %756 = add nuw nsw i64 %754, %755
  %757 = icmp eq i64 %756, 2
  %758 = zext i1 %757 to i8
  store i8 %758, i8* %223, align 1, !tbaa !2450
  %759 = add i64 %721, -88
  %760 = add i64 %671, 69
  store i64 %760, i64* %PC, align 8
  %761 = inttoptr i64 %759 to i32*
  %762 = load i32, i32* %761, align 4
  %763 = sext i32 %762 to i64
  %764 = mul nsw i64 %763, 520
  store i64 %764, i64* %RDX, align 8, !tbaa !2428
  %765 = lshr i64 %764, 63
  %766 = add i64 %764, %733
  store i64 %766, i64* %RCX, align 8, !tbaa !2428
  %767 = icmp ult i64 %766, %733
  %768 = icmp ult i64 %766, %764
  %769 = or i1 %767, %768
  %770 = zext i1 %769 to i8
  store i8 %770, i8* %218, align 1, !tbaa !2432
  %771 = trunc i64 %766 to i32
  %772 = and i32 %771, 255
  %773 = tail call i32 @llvm.ctpop.i32(i32 %772) #8
  %774 = trunc i32 %773 to i8
  %775 = and i8 %774, 1
  %776 = xor i8 %775, 1
  store i8 %776, i8* %219, align 1, !tbaa !2446
  %777 = xor i64 %764, %733
  %778 = xor i64 %777, %766
  %779 = lshr i64 %778, 4
  %780 = trunc i64 %779 to i8
  %781 = and i8 %780, 1
  store i8 %781, i8* %220, align 1, !tbaa !2447
  %782 = icmp eq i64 %766, 0
  %783 = zext i1 %782 to i8
  store i8 %783, i8* %221, align 1, !tbaa !2448
  %784 = lshr i64 %766, 63
  %785 = trunc i64 %784 to i8
  store i8 %785, i8* %222, align 1, !tbaa !2449
  %786 = xor i64 %784, %751
  %787 = xor i64 %784, %765
  %788 = add nuw nsw i64 %786, %787
  %789 = icmp eq i64 %788, 2
  %790 = zext i1 %789 to i8
  store i8 %790, i8* %223, align 1, !tbaa !2450
  %791 = load i64, i64* %RBP, align 8
  %792 = add i64 %791, -92
  %793 = add i64 %671, 83
  store i64 %793, i64* %PC, align 8
  %794 = inttoptr i64 %792 to i32*
  %795 = load i32, i32* %794, align 4
  %796 = sext i32 %795 to i64
  store i64 %796, i64* %RDX, align 8, !tbaa !2428
  %797 = shl nsw i64 %796, 3
  %798 = add i64 %797, %766
  %799 = add i64 %671, 88
  store i64 %799, i64* %PC, align 8
  %800 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %801 = load i64, i64* %800, align 1
  %802 = inttoptr i64 %798 to i64*
  store i64 %801, i64* %802, align 8
  %803 = load i64, i64* %RBP, align 8
  %804 = add i64 %803, -92
  %805 = load i64, i64* %PC, align 8
  %806 = add i64 %805, 3
  store i64 %806, i64* %PC, align 8
  %807 = inttoptr i64 %804 to i32*
  %808 = load i32, i32* %807, align 4
  %809 = add i32 %808, 1
  %810 = zext i32 %809 to i64
  store i64 %810, i64* %RAX, align 8, !tbaa !2428
  %811 = icmp eq i32 %808, -1
  %812 = icmp eq i32 %809, 0
  %813 = or i1 %811, %812
  %814 = zext i1 %813 to i8
  store i8 %814, i8* %218, align 1, !tbaa !2432
  %815 = and i32 %809, 255
  %816 = tail call i32 @llvm.ctpop.i32(i32 %815) #8
  %817 = trunc i32 %816 to i8
  %818 = and i8 %817, 1
  %819 = xor i8 %818, 1
  store i8 %819, i8* %219, align 1, !tbaa !2446
  %820 = xor i32 %808, %809
  %821 = lshr i32 %820, 4
  %822 = trunc i32 %821 to i8
  %823 = and i8 %822, 1
  store i8 %823, i8* %220, align 1, !tbaa !2447
  %824 = icmp eq i32 %809, 0
  %825 = zext i1 %824 to i8
  store i8 %825, i8* %221, align 1, !tbaa !2448
  %826 = lshr i32 %809, 31
  %827 = trunc i32 %826 to i8
  store i8 %827, i8* %222, align 1, !tbaa !2449
  %828 = lshr i32 %808, 31
  %829 = xor i32 %826, %828
  %830 = add nuw nsw i32 %829, %826
  %831 = icmp eq i32 %830, 2
  %832 = zext i1 %831 to i8
  store i8 %832, i8* %223, align 1, !tbaa !2450
  %833 = add i64 %805, 9
  store i64 %833, i64* %PC, align 8
  store i32 %809, i32* %807, align 4
  %834 = load i64, i64* %PC, align 8
  %835 = add i64 %834, -309
  store i64 %835, i64* %224, align 8, !tbaa !2428
  br label %block_401255

block_4011c0:                                     ; preds = %block_4011b4
  %836 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 24) to i64*), align 8
  %837 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %836, i64* %837, align 1, !tbaa !2452
  store double 0.000000e+00, double* %103, align 1, !tbaa !2452
  %838 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 32) to double*), align 16
  store double %838, double* %105, align 1, !tbaa !2452
  store double 0.000000e+00, double* %108, align 1, !tbaa !2452
  %839 = add i64 %1146, -84
  %840 = add i64 %1182, 19
  store i64 %840, i64* %PC, align 8
  %841 = inttoptr i64 %839 to i32*
  %842 = load i32, i32* %841, align 4
  %843 = zext i32 %842 to i64
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = sitofp i32 %842 to double
  store double %844, double* %225, align 1, !tbaa !2452
  %845 = add i64 %1182, 26
  store i64 %845, i64* %PC, align 8
  %846 = load i32, i32* %1149, align 4
  %847 = add i32 %846, 1
  %848 = zext i32 %847 to i64
  store i64 %848, i64* %RAX, align 8, !tbaa !2428
  %849 = icmp eq i32 %846, -1
  %850 = icmp eq i32 %847, 0
  %851 = or i1 %849, %850
  %852 = zext i1 %851 to i8
  store i8 %852, i8* %218, align 1, !tbaa !2432
  %853 = and i32 %847, 255
  %854 = tail call i32 @llvm.ctpop.i32(i32 %853) #8
  %855 = trunc i32 %854 to i8
  %856 = and i8 %855, 1
  %857 = xor i8 %856, 1
  store i8 %857, i8* %219, align 1, !tbaa !2446
  %858 = xor i32 %846, %847
  %859 = lshr i32 %858, 4
  %860 = trunc i32 %859 to i8
  %861 = and i8 %860, 1
  store i8 %861, i8* %220, align 1, !tbaa !2447
  %862 = icmp eq i32 %847, 0
  %863 = zext i1 %862 to i8
  store i8 %863, i8* %221, align 1, !tbaa !2448
  %864 = lshr i32 %847, 31
  %865 = trunc i32 %864 to i8
  store i8 %865, i8* %222, align 1, !tbaa !2449
  %866 = lshr i32 %846, 31
  %867 = xor i32 %864, %866
  %868 = add nuw nsw i32 %867, %864
  %869 = icmp eq i32 %868, 2
  %870 = zext i1 %869 to i8
  store i8 %870, i8* %223, align 1, !tbaa !2450
  %871 = sitofp i32 %847 to double
  store double %871, double* %1257, align 1, !tbaa !2452
  %872 = fmul double %844, %871
  %873 = fadd double %872, %838
  store double %873, double* %225, align 1, !tbaa !2452
  %874 = add i64 %1182, 44
  store i64 %874, i64* %PC, align 8
  %875 = load i32, i32* %1154, align 4
  %876 = zext i32 %875 to i64
  store i64 %876, i64* %RAX, align 8, !tbaa !2428
  %877 = sitofp i32 %875 to double
  store double %877, double* %105, align 1, !tbaa !2452
  %878 = fdiv double %873, %877
  store double %878, double* %225, align 1, !tbaa !2452
  %879 = add i64 %1146, 16
  %880 = add i64 %1182, 56
  store i64 %880, i64* %PC, align 8
  %881 = inttoptr i64 %879 to i64*
  %882 = load i64, i64* %881, align 8
  store i64 %882, i64* %RCX, align 8, !tbaa !2428
  %883 = add i64 %1182, 60
  store i64 %883, i64* %PC, align 8
  %884 = load i32, i32* %841, align 4
  %885 = sext i32 %884 to i64
  %886 = mul nsw i64 %885, 520
  store i64 %886, i64* %RDX, align 8, !tbaa !2428
  %887 = lshr i64 %886, 63
  %888 = add i64 %886, %882
  store i64 %888, i64* %RCX, align 8, !tbaa !2428
  %889 = icmp ult i64 %888, %882
  %890 = icmp ult i64 %888, %886
  %891 = or i1 %889, %890
  %892 = zext i1 %891 to i8
  store i8 %892, i8* %218, align 1, !tbaa !2432
  %893 = trunc i64 %888 to i32
  %894 = and i32 %893, 255
  %895 = tail call i32 @llvm.ctpop.i32(i32 %894) #8
  %896 = trunc i32 %895 to i8
  %897 = and i8 %896, 1
  %898 = xor i8 %897, 1
  store i8 %898, i8* %219, align 1, !tbaa !2446
  %899 = xor i64 %886, %882
  %900 = xor i64 %899, %888
  %901 = lshr i64 %900, 4
  %902 = trunc i64 %901 to i8
  %903 = and i8 %902, 1
  store i8 %903, i8* %220, align 1, !tbaa !2447
  %904 = icmp eq i64 %888, 0
  %905 = zext i1 %904 to i8
  store i8 %905, i8* %221, align 1, !tbaa !2448
  %906 = lshr i64 %888, 63
  %907 = trunc i64 %906 to i8
  store i8 %907, i8* %222, align 1, !tbaa !2449
  %908 = lshr i64 %882, 63
  %909 = xor i64 %906, %908
  %910 = xor i64 %906, %887
  %911 = add nuw nsw i64 %909, %910
  %912 = icmp eq i64 %911, 2
  %913 = zext i1 %912 to i8
  store i8 %913, i8* %223, align 1, !tbaa !2450
  %914 = load i64, i64* %RBP, align 8
  %915 = add i64 %914, -88
  %916 = add i64 %1182, 74
  store i64 %916, i64* %PC, align 8
  %917 = inttoptr i64 %915 to i32*
  %918 = load i32, i32* %917, align 4
  %919 = sext i32 %918 to i64
  store i64 %919, i64* %RDX, align 8, !tbaa !2428
  %920 = shl nsw i64 %919, 3
  %921 = add i64 %920, %888
  %922 = add i64 %1182, 79
  store i64 %922, i64* %PC, align 8
  %923 = inttoptr i64 %921 to double*
  store double %878, double* %923, align 8
  %924 = load i64, i64* %RBP, align 8
  %925 = add i64 %924, -84
  %926 = load i64, i64* %PC, align 8
  %927 = add i64 %926, 3
  store i64 %927, i64* %PC, align 8
  %928 = inttoptr i64 %925 to i32*
  %929 = load i32, i32* %928, align 4
  %930 = zext i32 %929 to i64
  store i64 %930, i64* %RAX, align 8, !tbaa !2428
  %931 = sitofp i32 %929 to double
  store double %931, double* %105, align 1, !tbaa !2452
  %932 = add i64 %924, -88
  %933 = add i64 %926, 10
  store i64 %933, i64* %PC, align 8
  %934 = inttoptr i64 %932 to i32*
  %935 = load i32, i32* %934, align 4
  %936 = add i32 %935, 2
  %937 = zext i32 %936 to i64
  store i64 %937, i64* %RAX, align 8, !tbaa !2428
  %938 = icmp ugt i32 %935, -3
  %939 = zext i1 %938 to i8
  store i8 %939, i8* %218, align 1, !tbaa !2432
  %940 = and i32 %936, 255
  %941 = tail call i32 @llvm.ctpop.i32(i32 %940) #8
  %942 = trunc i32 %941 to i8
  %943 = and i8 %942, 1
  %944 = xor i8 %943, 1
  store i8 %944, i8* %219, align 1, !tbaa !2446
  %945 = xor i32 %935, %936
  %946 = lshr i32 %945, 4
  %947 = trunc i32 %946 to i8
  %948 = and i8 %947, 1
  store i8 %948, i8* %220, align 1, !tbaa !2447
  %949 = icmp eq i32 %936, 0
  %950 = zext i1 %949 to i8
  store i8 %950, i8* %221, align 1, !tbaa !2448
  %951 = lshr i32 %936, 31
  %952 = trunc i32 %951 to i8
  store i8 %952, i8* %222, align 1, !tbaa !2449
  %953 = lshr i32 %935, 31
  %954 = xor i32 %951, %953
  %955 = add nuw nsw i32 %954, %951
  %956 = icmp eq i32 %955, 2
  %957 = zext i1 %956 to i8
  store i8 %957, i8* %223, align 1, !tbaa !2450
  %958 = sitofp i32 %936 to double
  store double %958, double* %225, align 1, !tbaa !2452
  %959 = fmul double %931, %958
  %960 = load double, double* %161, align 1
  %961 = fadd double %959, %960
  store double %961, double* %105, align 1, !tbaa !2452
  %962 = add i64 %924, -52
  %963 = add i64 %926, 28
  store i64 %963, i64* %PC, align 8
  %964 = inttoptr i64 %962 to i32*
  %965 = load i32, i32* %964, align 4
  %966 = zext i32 %965 to i64
  store i64 %966, i64* %RAX, align 8, !tbaa !2428
  %967 = sitofp i32 %965 to double
  store double %967, double* %100, align 1, !tbaa !2452
  %968 = fdiv double %961, %967
  store double %968, double* %105, align 1, !tbaa !2452
  %969 = add i64 %924, -80
  %970 = add i64 %926, 40
  store i64 %970, i64* %PC, align 8
  %971 = inttoptr i64 %969 to i64*
  %972 = load i64, i64* %971, align 8
  store i64 %972, i64* %RCX, align 8, !tbaa !2428
  %973 = add i64 %926, 44
  store i64 %973, i64* %PC, align 8
  %974 = load i32, i32* %928, align 4
  %975 = sext i32 %974 to i64
  %976 = mul nsw i64 %975, 520
  store i64 %976, i64* %RDX, align 8, !tbaa !2428
  %977 = lshr i64 %976, 63
  %978 = add i64 %976, %972
  store i64 %978, i64* %RCX, align 8, !tbaa !2428
  %979 = icmp ult i64 %978, %972
  %980 = icmp ult i64 %978, %976
  %981 = or i1 %979, %980
  %982 = zext i1 %981 to i8
  store i8 %982, i8* %218, align 1, !tbaa !2432
  %983 = trunc i64 %978 to i32
  %984 = and i32 %983, 255
  %985 = tail call i32 @llvm.ctpop.i32(i32 %984) #8
  %986 = trunc i32 %985 to i8
  %987 = and i8 %986, 1
  %988 = xor i8 %987, 1
  store i8 %988, i8* %219, align 1, !tbaa !2446
  %989 = xor i64 %976, %972
  %990 = xor i64 %989, %978
  %991 = lshr i64 %990, 4
  %992 = trunc i64 %991 to i8
  %993 = and i8 %992, 1
  store i8 %993, i8* %220, align 1, !tbaa !2447
  %994 = icmp eq i64 %978, 0
  %995 = zext i1 %994 to i8
  store i8 %995, i8* %221, align 1, !tbaa !2448
  %996 = lshr i64 %978, 63
  %997 = trunc i64 %996 to i8
  store i8 %997, i8* %222, align 1, !tbaa !2449
  %998 = lshr i64 %972, 63
  %999 = xor i64 %996, %998
  %1000 = xor i64 %996, %977
  %1001 = add nuw nsw i64 %999, %1000
  %1002 = icmp eq i64 %1001, 2
  %1003 = zext i1 %1002 to i8
  store i8 %1003, i8* %223, align 1, !tbaa !2450
  %1004 = load i64, i64* %RBP, align 8
  %1005 = add i64 %1004, -88
  %1006 = add i64 %926, 58
  store i64 %1006, i64* %PC, align 8
  %1007 = inttoptr i64 %1005 to i32*
  %1008 = load i32, i32* %1007, align 4
  %1009 = sext i32 %1008 to i64
  store i64 %1009, i64* %RDX, align 8, !tbaa !2428
  %1010 = shl nsw i64 %1009, 3
  %1011 = add i64 %1010, %978
  %1012 = add i64 %926, 63
  store i64 %1012, i64* %PC, align 8
  %1013 = inttoptr i64 %1011 to double*
  store double %968, double* %1013, align 8
  %1014 = load i64, i64* %RBP, align 8
  %1015 = add i64 %1014, -92
  %1016 = load i64, i64* %PC, align 8
  %1017 = add i64 %1016, 7
  store i64 %1017, i64* %PC, align 8
  %1018 = inttoptr i64 %1015 to i32*
  store i32 0, i32* %1018, align 4
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_401255

block_401136:                                     ; preds = %block_40112a
  %1019 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 64) to i64*), align 16
  %1020 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %1019, i64* %1020, align 1, !tbaa !2452
  store double 0.000000e+00, double* %103, align 1, !tbaa !2452
  %1021 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 72) to double*), align 8
  store double %1021, double* %105, align 1, !tbaa !2452
  store double 0.000000e+00, double* %108, align 1, !tbaa !2452
  %1022 = add i64 %1220, 19
  store i64 %1022, i64* %PC, align 8
  %1023 = load i32, i32* %1187, align 4
  %1024 = zext i32 %1023 to i64
  store i64 %1024, i64* %RAX, align 8, !tbaa !2428
  %1025 = sitofp i32 %1023 to double
  %1026 = fadd double %1025, %1021
  store double %1026, double* %225, align 1, !tbaa !2452
  %1027 = add i64 %1184, -48
  %1028 = add i64 %1220, 30
  store i64 %1028, i64* %PC, align 8
  %1029 = inttoptr i64 %1027 to i32*
  %1030 = load i32, i32* %1029, align 4
  %1031 = zext i32 %1030 to i64
  store i64 %1031, i64* %RAX, align 8, !tbaa !2428
  %1032 = sitofp i32 %1030 to double
  store double %1032, double* %105, align 1, !tbaa !2452
  %1033 = fdiv double %1026, %1032
  store double %1033, double* %225, align 1, !tbaa !2452
  %1034 = add i64 %1184, 80
  %1035 = add i64 %1220, 42
  store i64 %1035, i64* %PC, align 8
  %1036 = inttoptr i64 %1034 to i64*
  %1037 = load i64, i64* %1036, align 8
  store i64 %1037, i64* %RCX, align 8, !tbaa !2428
  %1038 = add i64 %1220, 46
  store i64 %1038, i64* %PC, align 8
  %1039 = load i32, i32* %1187, align 4
  %1040 = sext i32 %1039 to i64
  store i64 %1040, i64* %RDX, align 8, !tbaa !2428
  %1041 = shl nsw i64 %1040, 3
  %1042 = add i64 %1041, %1037
  %1043 = add i64 %1220, 51
  store i64 %1043, i64* %PC, align 8
  %1044 = inttoptr i64 %1042 to double*
  store double %1033, double* %1044, align 8
  %1045 = load i64, i64* %RBP, align 8
  %1046 = add i64 %1045, -84
  %1047 = load i64, i64* %PC, align 8
  %1048 = add i64 %1047, 3
  store i64 %1048, i64* %PC, align 8
  %1049 = inttoptr i64 %1046 to i32*
  %1050 = load i32, i32* %1049, align 4
  %1051 = zext i32 %1050 to i64
  store i64 %1051, i64* %RAX, align 8, !tbaa !2428
  %1052 = sitofp i32 %1050 to double
  %1053 = load double, double* %161, align 1
  %1054 = fadd double %1052, %1053
  store double %1054, double* %105, align 1, !tbaa !2452
  %1055 = add i64 %1045, -48
  %1056 = add i64 %1047, 14
  store i64 %1056, i64* %PC, align 8
  %1057 = inttoptr i64 %1055 to i32*
  %1058 = load i32, i32* %1057, align 4
  %1059 = zext i32 %1058 to i64
  store i64 %1059, i64* %RAX, align 8, !tbaa !2428
  %1060 = sitofp i32 %1058 to double
  store double %1060, double* %100, align 1, !tbaa !2452
  %1061 = fdiv double %1054, %1060
  store double %1061, double* %105, align 1, !tbaa !2452
  %1062 = add i64 %1045, 88
  %1063 = add i64 %1047, 26
  store i64 %1063, i64* %PC, align 8
  %1064 = inttoptr i64 %1062 to i64*
  %1065 = load i64, i64* %1064, align 8
  store i64 %1065, i64* %RCX, align 8, !tbaa !2428
  %1066 = add i64 %1047, 30
  store i64 %1066, i64* %PC, align 8
  %1067 = load i32, i32* %1049, align 4
  %1068 = sext i32 %1067 to i64
  store i64 %1068, i64* %RDX, align 8, !tbaa !2428
  %1069 = shl nsw i64 %1068, 3
  %1070 = add i64 %1069, %1065
  %1071 = add i64 %1047, 35
  store i64 %1071, i64* %PC, align 8
  %1072 = inttoptr i64 %1070 to double*
  store double %1061, double* %1072, align 8
  %1073 = load i64, i64* %RBP, align 8
  %1074 = add i64 %1073, -84
  %1075 = load i64, i64* %PC, align 8
  %1076 = add i64 %1075, 3
  store i64 %1076, i64* %PC, align 8
  %1077 = inttoptr i64 %1074 to i32*
  %1078 = load i32, i32* %1077, align 4
  %1079 = add i32 %1078, 1
  %1080 = zext i32 %1079 to i64
  store i64 %1080, i64* %RAX, align 8, !tbaa !2428
  %1081 = icmp eq i32 %1078, -1
  %1082 = icmp eq i32 %1079, 0
  %1083 = or i1 %1081, %1082
  %1084 = zext i1 %1083 to i8
  store i8 %1084, i8* %218, align 1, !tbaa !2432
  %1085 = and i32 %1079, 255
  %1086 = tail call i32 @llvm.ctpop.i32(i32 %1085) #8
  %1087 = trunc i32 %1086 to i8
  %1088 = and i8 %1087, 1
  %1089 = xor i8 %1088, 1
  store i8 %1089, i8* %219, align 1, !tbaa !2446
  %1090 = xor i32 %1078, %1079
  %1091 = lshr i32 %1090, 4
  %1092 = trunc i32 %1091 to i8
  %1093 = and i8 %1092, 1
  store i8 %1093, i8* %220, align 1, !tbaa !2447
  %1094 = icmp eq i32 %1079, 0
  %1095 = zext i1 %1094 to i8
  store i8 %1095, i8* %221, align 1, !tbaa !2448
  %1096 = lshr i32 %1079, 31
  %1097 = trunc i32 %1096 to i8
  store i8 %1097, i8* %222, align 1, !tbaa !2449
  %1098 = lshr i32 %1078, 31
  %1099 = xor i32 %1096, %1098
  %1100 = add nuw nsw i32 %1099, %1096
  %1101 = icmp eq i32 %1100, 2
  %1102 = zext i1 %1101 to i8
  store i8 %1102, i8* %223, align 1, !tbaa !2450
  %1103 = add i64 %1075, 9
  store i64 %1103, i64* %PC, align 8
  store i32 %1079, i32* %1077, align 4
  %1104 = load i64, i64* %PC, align 8
  %1105 = add i64 %1104, -107
  store i64 %1105, i64* %224, align 8, !tbaa !2428
  br label %block_40112a

block_4010ac:                                     ; preds = %block_40103c
  %1106 = add i64 %1422, 7
  store i64 %1106, i64* %PC, align 8
  store i32 0, i32* %1389, align 4
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_4010b3

block_401255:                                     ; preds = %block_4011c0, %block_401261
  %1107 = phi i64 [ %.pre5, %block_4011c0 ], [ %835, %block_401261 ]
  %1108 = load i64, i64* %RBP, align 8
  %1109 = add i64 %1108, -92
  %1110 = add i64 %1107, 3
  store i64 %1110, i64* %PC, align 8
  %1111 = inttoptr i64 %1109 to i32*
  %1112 = load i32, i32* %1111, align 4
  %1113 = zext i32 %1112 to i64
  store i64 %1113, i64* %RAX, align 8, !tbaa !2428
  %1114 = add i64 %1108, -48
  %1115 = add i64 %1107, 6
  store i64 %1115, i64* %PC, align 8
  %1116 = inttoptr i64 %1114 to i32*
  %1117 = load i32, i32* %1116, align 4
  %1118 = sub i32 %1112, %1117
  %1119 = icmp ult i32 %1112, %1117
  %1120 = zext i1 %1119 to i8
  store i8 %1120, i8* %218, align 1, !tbaa !2432
  %1121 = and i32 %1118, 255
  %1122 = tail call i32 @llvm.ctpop.i32(i32 %1121) #8
  %1123 = trunc i32 %1122 to i8
  %1124 = and i8 %1123, 1
  %1125 = xor i8 %1124, 1
  store i8 %1125, i8* %219, align 1, !tbaa !2446
  %1126 = xor i32 %1117, %1112
  %1127 = xor i32 %1126, %1118
  %1128 = lshr i32 %1127, 4
  %1129 = trunc i32 %1128 to i8
  %1130 = and i8 %1129, 1
  store i8 %1130, i8* %220, align 1, !tbaa !2447
  %1131 = icmp eq i32 %1118, 0
  %1132 = zext i1 %1131 to i8
  store i8 %1132, i8* %221, align 1, !tbaa !2448
  %1133 = lshr i32 %1118, 31
  %1134 = trunc i32 %1133 to i8
  store i8 %1134, i8* %222, align 1, !tbaa !2449
  %1135 = lshr i32 %1112, 31
  %1136 = lshr i32 %1117, 31
  %1137 = xor i32 %1136, %1135
  %1138 = xor i32 %1133, %1135
  %1139 = add nuw nsw i32 %1138, %1137
  %1140 = icmp eq i32 %1139, 2
  %1141 = zext i1 %1140 to i8
  store i8 %1141, i8* %223, align 1, !tbaa !2450
  %1142 = icmp ne i8 %1134, 0
  %1143 = xor i1 %1142, %1140
  %.demorgan14 = or i1 %1131, %1143
  %.v15 = select i1 %.demorgan14, i64 12, i64 314
  %1144 = add i64 %1107, %.v15
  store i64 %1144, i64* %224, align 8, !tbaa !2428
  br i1 %.demorgan14, label %block_401261, label %block_40138f

block_4011b4:                                     ; preds = %block_40138f, %block_4011ad
  %1145 = phi i64 [ %1453, %block_40138f ], [ %.pre4, %block_4011ad ]
  %1146 = load i64, i64* %RBP, align 8
  %1147 = add i64 %1146, -88
  %1148 = add i64 %1145, 3
  store i64 %1148, i64* %PC, align 8
  %1149 = inttoptr i64 %1147 to i32*
  %1150 = load i32, i32* %1149, align 4
  %1151 = zext i32 %1150 to i64
  store i64 %1151, i64* %RAX, align 8, !tbaa !2428
  %1152 = add i64 %1146, -52
  %1153 = add i64 %1145, 6
  store i64 %1153, i64* %PC, align 8
  %1154 = inttoptr i64 %1152 to i32*
  %1155 = load i32, i32* %1154, align 4
  %1156 = sub i32 %1150, %1155
  %1157 = icmp ult i32 %1150, %1155
  %1158 = zext i1 %1157 to i8
  store i8 %1158, i8* %218, align 1, !tbaa !2432
  %1159 = and i32 %1156, 255
  %1160 = tail call i32 @llvm.ctpop.i32(i32 %1159) #8
  %1161 = trunc i32 %1160 to i8
  %1162 = and i8 %1161, 1
  %1163 = xor i8 %1162, 1
  store i8 %1163, i8* %219, align 1, !tbaa !2446
  %1164 = xor i32 %1155, %1150
  %1165 = xor i32 %1164, %1156
  %1166 = lshr i32 %1165, 4
  %1167 = trunc i32 %1166 to i8
  %1168 = and i8 %1167, 1
  store i8 %1168, i8* %220, align 1, !tbaa !2447
  %1169 = icmp eq i32 %1156, 0
  %1170 = zext i1 %1169 to i8
  store i8 %1170, i8* %221, align 1, !tbaa !2448
  %1171 = lshr i32 %1156, 31
  %1172 = trunc i32 %1171 to i8
  store i8 %1172, i8* %222, align 1, !tbaa !2449
  %1173 = lshr i32 %1150, 31
  %1174 = lshr i32 %1155, 31
  %1175 = xor i32 %1174, %1173
  %1176 = xor i32 %1171, %1173
  %1177 = add nuw nsw i32 %1176, %1175
  %1178 = icmp eq i32 %1177, 2
  %1179 = zext i1 %1178 to i8
  store i8 %1179, i8* %223, align 1, !tbaa !2450
  %1180 = icmp ne i8 %1172, 0
  %1181 = xor i1 %1180, %1178
  %.demorgan12 = or i1 %1169, %1181
  %.v13 = select i1 %.demorgan12, i64 12, i64 494
  %1182 = add i64 %1145, %.v13
  store i64 %1182, i64* %224, align 8, !tbaa !2428
  br i1 %.demorgan12, label %block_4011c0, label %block_4013a2

block_40112a:                                     ; preds = %block_401123, %block_401136
  %1183 = phi i64 [ %.pre2, %block_401123 ], [ %1105, %block_401136 ]
  %1184 = load i64, i64* %RBP, align 8
  %1185 = add i64 %1184, -84
  %1186 = add i64 %1183, 3
  store i64 %1186, i64* %PC, align 8
  %1187 = inttoptr i64 %1185 to i32*
  %1188 = load i32, i32* %1187, align 4
  %1189 = zext i32 %1188 to i64
  store i64 %1189, i64* %RAX, align 8, !tbaa !2428
  %1190 = add i64 %1184, -52
  %1191 = add i64 %1183, 6
  store i64 %1191, i64* %PC, align 8
  %1192 = inttoptr i64 %1190 to i32*
  %1193 = load i32, i32* %1192, align 4
  %1194 = sub i32 %1188, %1193
  %1195 = icmp ult i32 %1188, %1193
  %1196 = zext i1 %1195 to i8
  store i8 %1196, i8* %218, align 1, !tbaa !2432
  %1197 = and i32 %1194, 255
  %1198 = tail call i32 @llvm.ctpop.i32(i32 %1197) #8
  %1199 = trunc i32 %1198 to i8
  %1200 = and i8 %1199, 1
  %1201 = xor i8 %1200, 1
  store i8 %1201, i8* %219, align 1, !tbaa !2446
  %1202 = xor i32 %1193, %1188
  %1203 = xor i32 %1202, %1194
  %1204 = lshr i32 %1203, 4
  %1205 = trunc i32 %1204 to i8
  %1206 = and i8 %1205, 1
  store i8 %1206, i8* %220, align 1, !tbaa !2447
  %1207 = icmp eq i32 %1194, 0
  %1208 = zext i1 %1207 to i8
  store i8 %1208, i8* %221, align 1, !tbaa !2448
  %1209 = lshr i32 %1194, 31
  %1210 = trunc i32 %1209 to i8
  store i8 %1210, i8* %222, align 1, !tbaa !2449
  %1211 = lshr i32 %1188, 31
  %1212 = lshr i32 %1193, 31
  %1213 = xor i32 %1212, %1211
  %1214 = xor i32 %1209, %1211
  %1215 = add nuw nsw i32 %1214, %1213
  %1216 = icmp eq i32 %1215, 2
  %1217 = zext i1 %1216 to i8
  store i8 %1217, i8* %223, align 1, !tbaa !2450
  %1218 = icmp ne i8 %1210, 0
  %1219 = xor i1 %1218, %1216
  %.demorgan8 = or i1 %1207, %1219
  %.v9 = select i1 %.demorgan8, i64 12, i64 112
  %1220 = add i64 %1183, %.v9
  store i64 %1220, i64* %224, align 8, !tbaa !2428
  br i1 %.demorgan8, label %block_401136, label %block_40119a

block_4011ad:                                     ; preds = %block_4011a1
  %1221 = add i64 %1348, -88
  %1222 = add i64 %1384, 7
  store i64 %1222, i64* %PC, align 8
  %1223 = inttoptr i64 %1221 to i32*
  store i32 0, i32* %1223, align 4
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_4011b4

block_401123:                                     ; preds = %block_4010b3
  %1224 = add i64 %400, 7
  store i64 %1224, i64* %PC, align 8
  store i32 0, i32* %367, align 4
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_40112a

block_4013a2:                                     ; preds = %block_4011b4
  %1225 = add i64 %1146, -84
  %1226 = add i64 %1182, 8
  store i64 %1226, i64* %PC, align 8
  %1227 = inttoptr i64 %1225 to i32*
  %1228 = load i32, i32* %1227, align 4
  %1229 = add i32 %1228, 1
  %1230 = zext i32 %1229 to i64
  store i64 %1230, i64* %RAX, align 8, !tbaa !2428
  %1231 = icmp eq i32 %1228, -1
  %1232 = icmp eq i32 %1229, 0
  %1233 = or i1 %1231, %1232
  %1234 = zext i1 %1233 to i8
  store i8 %1234, i8* %218, align 1, !tbaa !2432
  %1235 = and i32 %1229, 255
  %1236 = tail call i32 @llvm.ctpop.i32(i32 %1235) #8
  %1237 = trunc i32 %1236 to i8
  %1238 = and i8 %1237, 1
  %1239 = xor i8 %1238, 1
  store i8 %1239, i8* %219, align 1, !tbaa !2446
  %1240 = xor i32 %1228, %1229
  %1241 = lshr i32 %1240, 4
  %1242 = trunc i32 %1241 to i8
  %1243 = and i8 %1242, 1
  store i8 %1243, i8* %220, align 1, !tbaa !2447
  %1244 = icmp eq i32 %1229, 0
  %1245 = zext i1 %1244 to i8
  store i8 %1245, i8* %221, align 1, !tbaa !2448
  %1246 = lshr i32 %1229, 31
  %1247 = trunc i32 %1246 to i8
  store i8 %1247, i8* %222, align 1, !tbaa !2449
  %1248 = lshr i32 %1228, 31
  %1249 = xor i32 %1246, %1248
  %1250 = add nuw nsw i32 %1249, %1246
  %1251 = icmp eq i32 %1250, 2
  %1252 = zext i1 %1251 to i8
  store i8 %1252, i8* %223, align 1, !tbaa !2450
  %1253 = add i64 %1182, 14
  store i64 %1253, i64* %PC, align 8
  store i32 %1229, i32* %1227, align 4
  %1254 = load i64, i64* %PC, align 8
  %1255 = add i64 %1254, -527
  store i64 %1255, i64* %224, align 8, !tbaa !2428
  br label %block_4011a1

block_40119a:                                     ; preds = %block_40112a
  %1256 = add i64 %1220, 7
  store i64 %1256, i64* %PC, align 8
  store i32 0, i32* %1187, align 4
  %1257 = bitcast %union.VectorReg* %9 to double*
  %1258 = bitcast i64* %226 to double*
  %1259 = bitcast %union.VectorReg* %10 to double*
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_4011a1

block_401048:                                     ; preds = %block_40103c
  %1260 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 48) to i64*), align 16
  %1261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %1260, i64* %1261, align 1, !tbaa !2452
  store double 0.000000e+00, double* %103, align 1, !tbaa !2452
  %1262 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 56) to double*), align 8
  store double %1262, double* %105, align 1, !tbaa !2452
  store double 0.000000e+00, double* %108, align 1, !tbaa !2452
  %1263 = add i64 %1422, 19
  store i64 %1263, i64* %PC, align 8
  %1264 = load i32, i32* %1389, align 4
  %1265 = zext i32 %1264 to i64
  store i64 %1265, i64* %RAX, align 8, !tbaa !2428
  %1266 = sitofp i32 %1264 to double
  %1267 = fadd double %1266, %1262
  store double %1267, double* %225, align 1, !tbaa !2452
  %1268 = add i64 %1386, -48
  %1269 = add i64 %1422, 30
  store i64 %1269, i64* %PC, align 8
  %1270 = inttoptr i64 %1268 to i32*
  %1271 = load i32, i32* %1270, align 4
  %1272 = zext i32 %1271 to i64
  store i64 %1272, i64* %RAX, align 8, !tbaa !2428
  %1273 = sitofp i32 %1271 to double
  store double %1273, double* %105, align 1, !tbaa !2452
  %1274 = fdiv double %1267, %1273
  store double %1274, double* %225, align 1, !tbaa !2452
  %1275 = add i64 %1386, 48
  %1276 = add i64 %1422, 42
  store i64 %1276, i64* %PC, align 8
  %1277 = inttoptr i64 %1275 to i64*
  %1278 = load i64, i64* %1277, align 8
  store i64 %1278, i64* %RCX, align 8, !tbaa !2428
  %1279 = add i64 %1422, 46
  store i64 %1279, i64* %PC, align 8
  %1280 = load i32, i32* %1389, align 4
  %1281 = sext i32 %1280 to i64
  store i64 %1281, i64* %RDX, align 8, !tbaa !2428
  %1282 = shl nsw i64 %1281, 3
  %1283 = add i64 %1282, %1278
  %1284 = add i64 %1422, 51
  store i64 %1284, i64* %PC, align 8
  %1285 = inttoptr i64 %1283 to double*
  store double %1274, double* %1285, align 8
  %1286 = load i64, i64* %RBP, align 8
  %1287 = add i64 %1286, -84
  %1288 = load i64, i64* %PC, align 8
  %1289 = add i64 %1288, 3
  store i64 %1289, i64* %PC, align 8
  %1290 = inttoptr i64 %1287 to i32*
  %1291 = load i32, i32* %1290, align 4
  %1292 = zext i32 %1291 to i64
  store i64 %1292, i64* %RAX, align 8, !tbaa !2428
  %1293 = sitofp i32 %1291 to double
  %1294 = load double, double* %161, align 1
  %1295 = fadd double %1293, %1294
  store double %1295, double* %105, align 1, !tbaa !2452
  %1296 = add i64 %1286, -48
  %1297 = add i64 %1288, 14
  store i64 %1297, i64* %PC, align 8
  %1298 = inttoptr i64 %1296 to i32*
  %1299 = load i32, i32* %1298, align 4
  %1300 = zext i32 %1299 to i64
  store i64 %1300, i64* %RAX, align 8, !tbaa !2428
  %1301 = sitofp i32 %1299 to double
  store double %1301, double* %100, align 1, !tbaa !2452
  %1302 = fdiv double %1295, %1301
  store double %1302, double* %105, align 1, !tbaa !2452
  %1303 = add i64 %1286, 56
  %1304 = add i64 %1288, 26
  store i64 %1304, i64* %PC, align 8
  %1305 = inttoptr i64 %1303 to i64*
  %1306 = load i64, i64* %1305, align 8
  store i64 %1306, i64* %RCX, align 8, !tbaa !2428
  %1307 = add i64 %1288, 30
  store i64 %1307, i64* %PC, align 8
  %1308 = load i32, i32* %1290, align 4
  %1309 = sext i32 %1308 to i64
  store i64 %1309, i64* %RDX, align 8, !tbaa !2428
  %1310 = shl nsw i64 %1309, 3
  %1311 = add i64 %1310, %1306
  %1312 = add i64 %1288, 35
  store i64 %1312, i64* %PC, align 8
  %1313 = inttoptr i64 %1311 to double*
  store double %1302, double* %1313, align 8
  %1314 = load i64, i64* %RBP, align 8
  %1315 = add i64 %1314, -84
  %1316 = load i64, i64* %PC, align 8
  %1317 = add i64 %1316, 3
  store i64 %1317, i64* %PC, align 8
  %1318 = inttoptr i64 %1315 to i32*
  %1319 = load i32, i32* %1318, align 4
  %1320 = add i32 %1319, 1
  %1321 = zext i32 %1320 to i64
  store i64 %1321, i64* %RAX, align 8, !tbaa !2428
  %1322 = icmp eq i32 %1319, -1
  %1323 = icmp eq i32 %1320, 0
  %1324 = or i1 %1322, %1323
  %1325 = zext i1 %1324 to i8
  store i8 %1325, i8* %218, align 1, !tbaa !2432
  %1326 = and i32 %1320, 255
  %1327 = tail call i32 @llvm.ctpop.i32(i32 %1326) #8
  %1328 = trunc i32 %1327 to i8
  %1329 = and i8 %1328, 1
  %1330 = xor i8 %1329, 1
  store i8 %1330, i8* %219, align 1, !tbaa !2446
  %1331 = xor i32 %1319, %1320
  %1332 = lshr i32 %1331, 4
  %1333 = trunc i32 %1332 to i8
  %1334 = and i8 %1333, 1
  store i8 %1334, i8* %220, align 1, !tbaa !2447
  %1335 = icmp eq i32 %1320, 0
  %1336 = zext i1 %1335 to i8
  store i8 %1336, i8* %221, align 1, !tbaa !2448
  %1337 = lshr i32 %1320, 31
  %1338 = trunc i32 %1337 to i8
  store i8 %1338, i8* %222, align 1, !tbaa !2449
  %1339 = lshr i32 %1319, 31
  %1340 = xor i32 %1337, %1339
  %1341 = add nuw nsw i32 %1340, %1337
  %1342 = icmp eq i32 %1341, 2
  %1343 = zext i1 %1342 to i8
  store i8 %1343, i8* %223, align 1, !tbaa !2450
  %1344 = add i64 %1316, 9
  store i64 %1344, i64* %PC, align 8
  store i32 %1320, i32* %1318, align 4
  %1345 = load i64, i64* %PC, align 8
  %1346 = add i64 %1345, -107
  store i64 %1346, i64* %224, align 8, !tbaa !2428
  br label %block_40103c

block_4011a1:                                     ; preds = %block_40119a, %block_4013a2
  %1347 = phi i64 [ %.pre3, %block_40119a ], [ %1255, %block_4013a2 ]
  %1348 = load i64, i64* %RBP, align 8
  %1349 = add i64 %1348, -84
  %1350 = add i64 %1347, 3
  store i64 %1350, i64* %PC, align 8
  %1351 = inttoptr i64 %1349 to i32*
  %1352 = load i32, i32* %1351, align 4
  %1353 = zext i32 %1352 to i64
  store i64 %1353, i64* %RAX, align 8, !tbaa !2428
  %1354 = add i64 %1348, -44
  %1355 = add i64 %1347, 6
  store i64 %1355, i64* %PC, align 8
  %1356 = inttoptr i64 %1354 to i32*
  %1357 = load i32, i32* %1356, align 4
  %1358 = sub i32 %1352, %1357
  %1359 = icmp ult i32 %1352, %1357
  %1360 = zext i1 %1359 to i8
  store i8 %1360, i8* %218, align 1, !tbaa !2432
  %1361 = and i32 %1358, 255
  %1362 = tail call i32 @llvm.ctpop.i32(i32 %1361) #8
  %1363 = trunc i32 %1362 to i8
  %1364 = and i8 %1363, 1
  %1365 = xor i8 %1364, 1
  store i8 %1365, i8* %219, align 1, !tbaa !2446
  %1366 = xor i32 %1357, %1352
  %1367 = xor i32 %1366, %1358
  %1368 = lshr i32 %1367, 4
  %1369 = trunc i32 %1368 to i8
  %1370 = and i8 %1369, 1
  store i8 %1370, i8* %220, align 1, !tbaa !2447
  %1371 = icmp eq i32 %1358, 0
  %1372 = zext i1 %1371 to i8
  store i8 %1372, i8* %221, align 1, !tbaa !2448
  %1373 = lshr i32 %1358, 31
  %1374 = trunc i32 %1373 to i8
  store i8 %1374, i8* %222, align 1, !tbaa !2449
  %1375 = lshr i32 %1352, 31
  %1376 = lshr i32 %1357, 31
  %1377 = xor i32 %1376, %1375
  %1378 = xor i32 %1373, %1375
  %1379 = add nuw nsw i32 %1378, %1377
  %1380 = icmp eq i32 %1379, 2
  %1381 = zext i1 %1380 to i8
  store i8 %1381, i8* %223, align 1, !tbaa !2450
  %1382 = icmp ne i8 %1374, 0
  %1383 = xor i1 %1382, %1380
  %.demorgan10 = or i1 %1371, %1383
  %.v11 = select i1 %.demorgan10, i64 12, i64 532
  %1384 = add i64 %1347, %.v11
  store i64 %1384, i64* %224, align 8, !tbaa !2428
  br i1 %.demorgan10, label %block_4011ad, label %block_4013b5

block_40103c:                                     ; preds = %block_401048, %block_400f90
  %1385 = phi i64 [ %1346, %block_401048 ], [ %.pre, %block_400f90 ]
  %1386 = load i64, i64* %RBP, align 8
  %1387 = add i64 %1386, -84
  %1388 = add i64 %1385, 3
  store i64 %1388, i64* %PC, align 8
  %1389 = inttoptr i64 %1387 to i32*
  %1390 = load i32, i32* %1389, align 4
  %1391 = zext i32 %1390 to i64
  store i64 %1391, i64* %RAX, align 8, !tbaa !2428
  %1392 = add i64 %1386, -44
  %1393 = add i64 %1385, 6
  store i64 %1393, i64* %PC, align 8
  %1394 = inttoptr i64 %1392 to i32*
  %1395 = load i32, i32* %1394, align 4
  %1396 = sub i32 %1390, %1395
  %1397 = icmp ult i32 %1390, %1395
  %1398 = zext i1 %1397 to i8
  store i8 %1398, i8* %218, align 1, !tbaa !2432
  %1399 = and i32 %1396, 255
  %1400 = tail call i32 @llvm.ctpop.i32(i32 %1399) #8
  %1401 = trunc i32 %1400 to i8
  %1402 = and i8 %1401, 1
  %1403 = xor i8 %1402, 1
  store i8 %1403, i8* %219, align 1, !tbaa !2446
  %1404 = xor i32 %1395, %1390
  %1405 = xor i32 %1404, %1396
  %1406 = lshr i32 %1405, 4
  %1407 = trunc i32 %1406 to i8
  %1408 = and i8 %1407, 1
  store i8 %1408, i8* %220, align 1, !tbaa !2447
  %1409 = icmp eq i32 %1396, 0
  %1410 = zext i1 %1409 to i8
  store i8 %1410, i8* %221, align 1, !tbaa !2448
  %1411 = lshr i32 %1396, 31
  %1412 = trunc i32 %1411 to i8
  store i8 %1412, i8* %222, align 1, !tbaa !2449
  %1413 = lshr i32 %1390, 31
  %1414 = lshr i32 %1395, 31
  %1415 = xor i32 %1414, %1413
  %1416 = xor i32 %1411, %1413
  %1417 = add nuw nsw i32 %1416, %1415
  %1418 = icmp eq i32 %1417, 2
  %1419 = zext i1 %1418 to i8
  store i8 %1419, i8* %223, align 1, !tbaa !2450
  %1420 = icmp ne i8 %1412, 0
  %1421 = xor i1 %1420, %1418
  %.demorgan = or i1 %1409, %1421
  %.v = select i1 %.demorgan, i64 12, i64 112
  %1422 = add i64 %1385, %.v
  store i64 %1422, i64* %224, align 8, !tbaa !2428
  br i1 %.demorgan, label %block_401048, label %block_4010ac

block_40138f:                                     ; preds = %block_401255
  %1423 = add i64 %1108, -88
  %1424 = add i64 %1144, 8
  store i64 %1424, i64* %PC, align 8
  %1425 = inttoptr i64 %1423 to i32*
  %1426 = load i32, i32* %1425, align 4
  %1427 = add i32 %1426, 1
  %1428 = zext i32 %1427 to i64
  store i64 %1428, i64* %RAX, align 8, !tbaa !2428
  %1429 = icmp eq i32 %1426, -1
  %1430 = icmp eq i32 %1427, 0
  %1431 = or i1 %1429, %1430
  %1432 = zext i1 %1431 to i8
  store i8 %1432, i8* %218, align 1, !tbaa !2432
  %1433 = and i32 %1427, 255
  %1434 = tail call i32 @llvm.ctpop.i32(i32 %1433) #8
  %1435 = trunc i32 %1434 to i8
  %1436 = and i8 %1435, 1
  %1437 = xor i8 %1436, 1
  store i8 %1437, i8* %219, align 1, !tbaa !2446
  %1438 = xor i32 %1426, %1427
  %1439 = lshr i32 %1438, 4
  %1440 = trunc i32 %1439 to i8
  %1441 = and i8 %1440, 1
  store i8 %1441, i8* %220, align 1, !tbaa !2447
  %1442 = icmp eq i32 %1427, 0
  %1443 = zext i1 %1442 to i8
  store i8 %1443, i8* %221, align 1, !tbaa !2448
  %1444 = lshr i32 %1427, 31
  %1445 = trunc i32 %1444 to i8
  store i8 %1445, i8* %222, align 1, !tbaa !2449
  %1446 = lshr i32 %1426, 31
  %1447 = xor i32 %1444, %1446
  %1448 = add nuw nsw i32 %1447, %1444
  %1449 = icmp eq i32 %1448, 2
  %1450 = zext i1 %1449 to i8
  store i8 %1450, i8* %223, align 1, !tbaa !2450
  %1451 = add i64 %1144, 14
  store i64 %1451, i64* %PC, align 8
  store i32 %1427, i32* %1425, align 4
  %1452 = load i64, i64* %PC, align 8
  %1453 = add i64 %1452, -489
  store i64 %1453, i64* %224, align 8, !tbaa !2428
  br label %block_4011b4
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007c0_polybench_alloc_data(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4007c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -40
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 32
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #8
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %7, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %10, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -12
  %45 = load i32, i32* %ESI, align 4
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 3
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i32*
  store i32 %45, i32* %48, align 4
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -24
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -12
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = sext i32 %63 to i64
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %65 = add i64 %58, -24
  %66 = add i64 %60, 9
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = sext i32 %63 to i128
  %70 = and i128 %69, -18446744073709551616
  %71 = sext i64 %68 to i128
  %72 = and i128 %71, -18446744073709551616
  %73 = zext i64 %64 to i128
  %74 = or i128 %70, %73
  %75 = zext i64 %68 to i128
  %76 = or i128 %72, %75
  %77 = mul nsw i128 %76, %74
  %78 = trunc i128 %77 to i64
  store i64 %78, i64* %RDI, align 8, !tbaa !2428
  %79 = sext i64 %78 to i128
  %80 = icmp ne i128 %79, %77
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %14, align 1, !tbaa !2432
  %82 = trunc i128 %77 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #8
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  %88 = lshr i64 %78, 63
  %89 = trunc i64 %88 to i8
  store i8 %89, i8* %32, align 1, !tbaa !2449
  store i8 %81, i8* %38, align 1, !tbaa !2450
  %90 = add i64 %60, 13
  store i64 %90, i64* %PC, align 8
  store i64 %78, i64* %67, align 8
  %91 = load i64, i64* %RBP, align 8
  %92 = add i64 %91, -24
  %93 = load i64, i64* %PC, align 8
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %92 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RDI, align 8, !tbaa !2428
  %97 = add i64 %93, 28
  %98 = add i64 %93, 9
  %99 = load i64, i64* %6, align 8, !tbaa !2428
  %100 = add i64 %99, -8
  %101 = inttoptr i64 %100 to i64*
  store i64 %98, i64* %101, align 8
  store i64 %100, i64* %6, align 8, !tbaa !2428
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %97, i64* %102, align 8, !tbaa !2428
  %103 = tail call %struct.Memory* @sub_400800_xmalloc_renamed_(%struct.State* nonnull %0, i64 %97, %struct.Memory* %2)
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -32
  %106 = load i64, i64* %RAX, align 8
  %107 = load i64, i64* %PC, align 8
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %105 to i64*
  store i64 %106, i64* %109, align 8
  %110 = load i64, i64* %RBP, align 8
  %111 = add i64 %110, -32
  %112 = load i64, i64* %PC, align 8
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RAX, align 8, !tbaa !2428
  %116 = load i64, i64* %RSP, align 8
  %117 = add i64 %116, 32
  store i64 %117, i64* %RSP, align 8, !tbaa !2428
  %118 = icmp ugt i64 %116, -33
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %14, align 1, !tbaa !2432
  %120 = trunc i64 %117 to i32
  %121 = and i32 %120, 255
  %122 = tail call i32 @llvm.ctpop.i32(i32 %121) #8
  %123 = trunc i32 %122 to i8
  %124 = and i8 %123, 1
  %125 = xor i8 %124, 1
  store i8 %125, i8* %21, align 1, !tbaa !2446
  %126 = xor i64 %116, %117
  %127 = lshr i64 %126, 4
  %128 = trunc i64 %127 to i8
  %129 = and i8 %128, 1
  store i8 %129, i8* %26, align 1, !tbaa !2447
  %130 = icmp eq i64 %117, 0
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %29, align 1, !tbaa !2448
  %132 = lshr i64 %117, 63
  %133 = trunc i64 %132 to i8
  store i8 %133, i8* %32, align 1, !tbaa !2449
  %134 = lshr i64 %116, 63
  %135 = xor i64 %132, %134
  %136 = add nuw nsw i64 %135, %132
  %137 = icmp eq i64 %136, 2
  %138 = zext i1 %137 to i8
  store i8 %138, i8* %38, align 1, !tbaa !2450
  %139 = add i64 %112, 9
  store i64 %139, i64* %PC, align 8
  %140 = add i64 %116, 40
  %141 = inttoptr i64 %117 to i64*
  %142 = load i64, i64* %141, align 8
  store i64 %142, i64* %RBP, align 8, !tbaa !2428
  store i64 %140, i64* %6, align 8, !tbaa !2428
  %143 = add i64 %112, 10
  store i64 %143, i64* %PC, align 8
  %144 = inttoptr i64 %140 to i64*
  %145 = load i64, i64* %144, align 8
  store i64 %145, i64* %102, align 8, !tbaa !2428
  %146 = add i64 %116, 48
  store i64 %146, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %103
}

; Function Attrs: noinline
define %struct.Memory* @sub_401f10_kernel_fdtd_apml_StrictFP(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401f10:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %8, i64* %13, align 8
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = load i64, i64* %R15, align 8
  %16 = add i64 %14, 5
  store i64 %16, i64* %PC, align 8
  %17 = add i64 %11, -16
  %18 = inttoptr i64 %17 to i64*
  store i64 %15, i64* %18, align 8
  %19 = load i64, i64* %R14, align 8
  %20 = load i64, i64* %PC, align 8
  %21 = add i64 %20, 2
  store i64 %21, i64* %PC, align 8
  %22 = add i64 %11, -24
  %23 = inttoptr i64 %22 to i64*
  store i64 %19, i64* %23, align 8
  %24 = load i64, i64* %R13, align 8
  %25 = load i64, i64* %PC, align 8
  %26 = add i64 %25, 2
  store i64 %26, i64* %PC, align 8
  %27 = add i64 %11, -32
  %28 = inttoptr i64 %27 to i64*
  store i64 %24, i64* %28, align 8
  %29 = load i64, i64* %R12, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 2
  store i64 %31, i64* %PC, align 8
  %32 = add i64 %11, -40
  %33 = inttoptr i64 %32 to i64*
  store i64 %29, i64* %33, align 8
  %34 = load i64, i64* %RBX, align 8
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = add i64 %11, -48
  %38 = inttoptr i64 %37 to i64*
  store i64 %34, i64* %38, align 8
  %39 = load i64, i64* %PC, align 8
  %40 = add i64 %11, -80
  store i64 %40, i64* %RSP, align 8, !tbaa !2428
  %41 = icmp ult i64 %37, 32
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %42, i8* %43, align 1, !tbaa !2432
  %44 = trunc i64 %40 to i32
  %45 = and i32 %44, 255
  %46 = tail call i32 @llvm.ctpop.i32(i32 %45) #8
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = xor i64 %37, %40
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %40, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %40, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %37, 63
  %63 = xor i64 %59, %62
  %64 = add nuw nsw i64 %63, %62
  %65 = icmp eq i64 %64, 2
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %66, i8* %67, align 1, !tbaa !2450
  %68 = load i64, i64* %RBP, align 8
  %69 = add i64 %68, 96
  %70 = add i64 %39, 8
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %RAX, align 8, !tbaa !2428
  %73 = add i64 %68, 88
  %74 = add i64 %39, 12
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %R10, align 8, !tbaa !2428
  %77 = add i64 %68, 80
  %78 = add i64 %39, 16
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %R11, align 8, !tbaa !2428
  %81 = add i64 %68, 72
  %82 = add i64 %39, 20
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %RBX, align 8, !tbaa !2428
  %85 = add i64 %68, 64
  %86 = add i64 %39, 24
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %R14, align 8, !tbaa !2428
  %89 = add i64 %68, 56
  %90 = add i64 %39, 28
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %89 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %R15, align 8, !tbaa !2428
  %93 = add i64 %68, 48
  %94 = add i64 %39, 32
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %R12, align 8, !tbaa !2428
  %97 = add i64 %68, 40
  %98 = add i64 %39, 36
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %R13, align 8, !tbaa !2428
  %101 = add i64 %68, -120
  %102 = add i64 %39, 40
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %101 to i64*
  store i64 %72, i64* %103, align 8
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, 32
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = add i64 %104, -128
  %111 = add i64 %106, 8
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  store i64 %109, i64* %112, align 8
  %113 = load i64, i64* %RBP, align 8
  %114 = add i64 %113, 24
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, 4
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %114 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %RAX, align 8, !tbaa !2428
  %119 = add i64 %113, -136
  %120 = add i64 %115, 11
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %119 to i64*
  store i64 %118, i64* %121, align 8
  %122 = load i64, i64* %RBP, align 8
  %123 = add i64 %122, 16
  %124 = load i64, i64* %PC, align 8
  %125 = add i64 %124, 4
  store i64 %125, i64* %PC, align 8
  %126 = inttoptr i64 %123 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %RAX, align 8, !tbaa !2428
  %128 = add i64 %122, -44
  %129 = load i32, i32* %EDI, align 4
  %130 = add i64 %124, 7
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %128 to i32*
  store i32 %129, i32* %131, align 4
  %132 = load i64, i64* %RBP, align 8
  %133 = add i64 %132, -48
  %134 = load i32, i32* %ESI, align 4
  %135 = load i64, i64* %PC, align 8
  %136 = add i64 %135, 3
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %133 to i32*
  store i32 %134, i32* %137, align 4
  %138 = load i64, i64* %RBP, align 8
  %139 = add i64 %138, -52
  %140 = load i32, i32* %EDX, align 4
  %141 = load i64, i64* %PC, align 8
  %142 = add i64 %141, 3
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %139 to i32*
  store i32 %140, i32* %143, align 4
  %144 = load i64, i64* %RBP, align 8
  %145 = add i64 %144, -64
  %146 = load i64, i64* %PC, align 8
  %147 = add i64 %146, 5
  store i64 %147, i64* %PC, align 8
  %148 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %149 = load i64, i64* %148, align 1
  %150 = inttoptr i64 %145 to i64*
  store i64 %149, i64* %150, align 8
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -72
  %153 = load i64, i64* %PC, align 8
  %154 = add i64 %153, 5
  store i64 %154, i64* %PC, align 8
  %155 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %156 = load i64, i64* %155, align 1
  %157 = inttoptr i64 %152 to i64*
  store i64 %156, i64* %157, align 8
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -80
  %160 = load i64, i64* %RCX, align 8
  %161 = load i64, i64* %PC, align 8
  %162 = add i64 %161, 4
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %159 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -88
  %166 = load i64, i64* %R8, align 8
  %167 = load i64, i64* %PC, align 8
  %168 = add i64 %167, 4
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %165 to i64*
  store i64 %166, i64* %169, align 8
  %170 = load i64, i64* %RBP, align 8
  %171 = add i64 %170, -96
  %172 = load i64, i64* %R9, align 8
  %173 = load i64, i64* %PC, align 8
  %174 = add i64 %173, 4
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %171 to i64*
  store i64 %172, i64* %175, align 8
  %176 = load i64, i64* %RBP, align 8
  %177 = add i64 %176, -100
  %178 = load i64, i64* %PC, align 8
  %179 = add i64 %178, 7
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %177 to i32*
  store i32 0, i32* %180, align 4
  %181 = load i64, i64* %RBP, align 8
  %182 = add i64 %181, -144
  %183 = load i64, i64* %R13, align 8
  %184 = load i64, i64* %PC, align 8
  %185 = add i64 %184, 7
  store i64 %185, i64* %PC, align 8
  %186 = inttoptr i64 %182 to i64*
  store i64 %183, i64* %186, align 8
  %187 = load i64, i64* %RBP, align 8
  %188 = add i64 %187, -152
  %189 = load i64, i64* %RAX, align 8
  %190 = load i64, i64* %PC, align 8
  %191 = add i64 %190, 7
  store i64 %191, i64* %PC, align 8
  %192 = inttoptr i64 %188 to i64*
  store i64 %189, i64* %192, align 8
  %193 = load i64, i64* %RBP, align 8
  %194 = add i64 %193, -160
  %195 = load i64, i64* %R10, align 8
  %196 = load i64, i64* %PC, align 8
  %197 = add i64 %196, 7
  store i64 %197, i64* %PC, align 8
  %198 = inttoptr i64 %194 to i64*
  store i64 %195, i64* %198, align 8
  %199 = load i64, i64* %RBP, align 8
  %200 = add i64 %199, -168
  %201 = load i64, i64* %R11, align 8
  %202 = load i64, i64* %PC, align 8
  %203 = add i64 %202, 7
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %200 to i64*
  store i64 %201, i64* %204, align 8
  %205 = load i64, i64* %RBP, align 8
  %206 = add i64 %205, -176
  %207 = load i64, i64* %RBX, align 8
  %208 = load i64, i64* %PC, align 8
  %209 = add i64 %208, 7
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %206 to i64*
  store i64 %207, i64* %210, align 8
  %211 = load i64, i64* %RBP, align 8
  %212 = add i64 %211, -184
  %213 = load i64, i64* %R14, align 8
  %214 = load i64, i64* %PC, align 8
  %215 = add i64 %214, 7
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %212 to i64*
  store i64 %213, i64* %216, align 8
  %217 = load i64, i64* %RBP, align 8
  %218 = add i64 %217, -192
  %219 = load i64, i64* %R15, align 8
  %220 = load i64, i64* %PC, align 8
  %221 = add i64 %220, 7
  store i64 %221, i64* %PC, align 8
  %222 = inttoptr i64 %218 to i64*
  store i64 %219, i64* %222, align 8
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -200
  %225 = load i64, i64* %R12, align 8
  %226 = load i64, i64* %PC, align 8
  %227 = add i64 %226, 7
  store i64 %227, i64* %PC, align 8
  %228 = inttoptr i64 %224 to i64*
  store i64 %225, i64* %228, align 8
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %230 = bitcast [32 x %union.VectorReg]* %6 to double*
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %232 = bitcast i64* %231 to double*
  %233 = bitcast %union.VectorReg* %7 to double*
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %235 = bitcast i64* %234 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401fba

block_401fd9:                                     ; preds = %block_401fcd
  %236 = add i64 %329, -108
  %237 = add i64 %365, 7
  store i64 %237, i64* %PC, align 8
  %238 = inttoptr i64 %236 to i32*
  store i32 0, i32* %238, align 4
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_401fe0

block_401fba:                                     ; preds = %block_402a25, %block_401f10
  %239 = phi i64 [ %4736, %block_402a25 ], [ %.pre, %block_401f10 ]
  %240 = load i64, i64* %RBP, align 8
  %241 = add i64 %240, -100
  %242 = add i64 %239, 3
  store i64 %242, i64* %PC, align 8
  %243 = inttoptr i64 %241 to i32*
  %244 = load i32, i32* %243, align 4
  %245 = zext i32 %244 to i64
  store i64 %245, i64* %RAX, align 8, !tbaa !2428
  %246 = add i64 %240, -44
  %247 = add i64 %239, 6
  store i64 %247, i64* %PC, align 8
  %248 = inttoptr i64 %246 to i32*
  %249 = load i32, i32* %248, align 4
  %250 = sub i32 %244, %249
  %251 = icmp ult i32 %244, %249
  %252 = zext i1 %251 to i8
  store i8 %252, i8* %43, align 1, !tbaa !2432
  %253 = and i32 %250, 255
  %254 = tail call i32 @llvm.ctpop.i32(i32 %253) #8
  %255 = trunc i32 %254 to i8
  %256 = and i8 %255, 1
  %257 = xor i8 %256, 1
  store i8 %257, i8* %50, align 1, !tbaa !2446
  %258 = xor i32 %249, %244
  %259 = xor i32 %258, %250
  %260 = lshr i32 %259, 4
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  store i8 %262, i8* %55, align 1, !tbaa !2447
  %263 = icmp eq i32 %250, 0
  %264 = zext i1 %263 to i8
  store i8 %264, i8* %58, align 1, !tbaa !2448
  %265 = lshr i32 %250, 31
  %266 = trunc i32 %265 to i8
  store i8 %266, i8* %61, align 1, !tbaa !2449
  %267 = lshr i32 %244, 31
  %268 = lshr i32 %249, 31
  %269 = xor i32 %268, %267
  %270 = xor i32 %265, %267
  %271 = add nuw nsw i32 %270, %269
  %272 = icmp eq i32 %271, 2
  %273 = zext i1 %272 to i8
  store i8 %273, i8* %67, align 1, !tbaa !2450
  %274 = icmp ne i8 %266, 0
  %275 = xor i1 %274, %272
  %.v = select i1 %275, i64 12, i64 2686
  %276 = add i64 %239, %.v
  store i64 %276, i64* %229, align 8, !tbaa !2428
  br i1 %275, label %block_401fc6, label %block_402a38

block_402a38:                                     ; preds = %block_401fba
  %277 = load i64, i64* %RSP, align 8
  %278 = add i64 %277, 32
  store i64 %278, i64* %RSP, align 8, !tbaa !2428
  %279 = icmp ugt i64 %277, -33
  %280 = zext i1 %279 to i8
  store i8 %280, i8* %43, align 1, !tbaa !2432
  %281 = trunc i64 %278 to i32
  %282 = and i32 %281, 255
  %283 = tail call i32 @llvm.ctpop.i32(i32 %282) #8
  %284 = trunc i32 %283 to i8
  %285 = and i8 %284, 1
  %286 = xor i8 %285, 1
  store i8 %286, i8* %50, align 1, !tbaa !2446
  %287 = xor i64 %277, %278
  %288 = lshr i64 %287, 4
  %289 = trunc i64 %288 to i8
  %290 = and i8 %289, 1
  store i8 %290, i8* %55, align 1, !tbaa !2447
  %291 = icmp eq i64 %278, 0
  %292 = zext i1 %291 to i8
  store i8 %292, i8* %58, align 1, !tbaa !2448
  %293 = lshr i64 %278, 63
  %294 = trunc i64 %293 to i8
  store i8 %294, i8* %61, align 1, !tbaa !2449
  %295 = lshr i64 %277, 63
  %296 = xor i64 %293, %295
  %297 = add nuw nsw i64 %296, %293
  %298 = icmp eq i64 %297, 2
  %299 = zext i1 %298 to i8
  store i8 %299, i8* %67, align 1, !tbaa !2450
  %300 = add i64 %276, 5
  store i64 %300, i64* %PC, align 8
  %301 = add i64 %277, 40
  %302 = inttoptr i64 %278 to i64*
  %303 = load i64, i64* %302, align 8
  store i64 %303, i64* %RBX, align 8, !tbaa !2428
  store i64 %301, i64* %10, align 8, !tbaa !2428
  %304 = add i64 %276, 7
  store i64 %304, i64* %PC, align 8
  %305 = add i64 %277, 48
  %306 = inttoptr i64 %301 to i64*
  %307 = load i64, i64* %306, align 8
  store i64 %307, i64* %R12, align 8, !tbaa !2428
  store i64 %305, i64* %10, align 8, !tbaa !2428
  %308 = add i64 %276, 9
  store i64 %308, i64* %PC, align 8
  %309 = add i64 %277, 56
  %310 = inttoptr i64 %305 to i64*
  %311 = load i64, i64* %310, align 8
  store i64 %311, i64* %R13, align 8, !tbaa !2428
  store i64 %309, i64* %10, align 8, !tbaa !2428
  %312 = add i64 %276, 11
  store i64 %312, i64* %PC, align 8
  %313 = add i64 %277, 64
  %314 = inttoptr i64 %309 to i64*
  %315 = load i64, i64* %314, align 8
  store i64 %315, i64* %R14, align 8, !tbaa !2428
  store i64 %313, i64* %10, align 8, !tbaa !2428
  %316 = add i64 %276, 13
  store i64 %316, i64* %PC, align 8
  %317 = add i64 %277, 72
  %318 = inttoptr i64 %313 to i64*
  %319 = load i64, i64* %318, align 8
  store i64 %319, i64* %R15, align 8, !tbaa !2428
  store i64 %317, i64* %10, align 8, !tbaa !2428
  %320 = add i64 %276, 14
  store i64 %320, i64* %PC, align 8
  %321 = add i64 %277, 80
  %322 = inttoptr i64 %317 to i64*
  %323 = load i64, i64* %322, align 8
  store i64 %323, i64* %RBP, align 8, !tbaa !2428
  store i64 %321, i64* %10, align 8, !tbaa !2428
  %324 = add i64 %276, 15
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %321 to i64*
  %326 = load i64, i64* %325, align 8
  store i64 %326, i64* %229, align 8, !tbaa !2428
  %327 = add i64 %277, 88
  store i64 %327, i64* %10, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_401fcd:                                     ; preds = %block_401fc6, %block_4027ab
  %328 = phi i64 [ %.pre2, %block_401fc6 ], [ %2514, %block_4027ab ]
  %329 = load i64, i64* %RBP, align 8
  %330 = add i64 %329, -104
  %331 = add i64 %328, 3
  store i64 %331, i64* %PC, align 8
  %332 = inttoptr i64 %330 to i32*
  %333 = load i32, i32* %332, align 4
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RAX, align 8, !tbaa !2428
  %335 = add i64 %329, -52
  %336 = add i64 %328, 6
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %335 to i32*
  %338 = load i32, i32* %337, align 4
  %339 = sub i32 %333, %338
  %340 = icmp ult i32 %333, %338
  %341 = zext i1 %340 to i8
  store i8 %341, i8* %43, align 1, !tbaa !2432
  %342 = and i32 %339, 255
  %343 = tail call i32 @llvm.ctpop.i32(i32 %342) #8
  %344 = trunc i32 %343 to i8
  %345 = and i8 %344, 1
  %346 = xor i8 %345, 1
  store i8 %346, i8* %50, align 1, !tbaa !2446
  %347 = xor i32 %338, %333
  %348 = xor i32 %347, %339
  %349 = lshr i32 %348, 4
  %350 = trunc i32 %349 to i8
  %351 = and i8 %350, 1
  store i8 %351, i8* %55, align 1, !tbaa !2447
  %352 = icmp eq i32 %339, 0
  %353 = zext i1 %352 to i8
  store i8 %353, i8* %58, align 1, !tbaa !2448
  %354 = lshr i32 %339, 31
  %355 = trunc i32 %354 to i8
  store i8 %355, i8* %61, align 1, !tbaa !2449
  %356 = lshr i32 %333, 31
  %357 = lshr i32 %338, 31
  %358 = xor i32 %357, %356
  %359 = xor i32 %354, %356
  %360 = add nuw nsw i32 %359, %358
  %361 = icmp eq i32 %360, 2
  %362 = zext i1 %361 to i8
  store i8 %362, i8* %67, align 1, !tbaa !2450
  %363 = icmp ne i8 %355, 0
  %364 = xor i1 %363, %361
  %.v5 = select i1 %364, i64 12, i64 2648
  %365 = add i64 %328, %.v5
  store i64 %365, i64* %229, align 8, !tbaa !2428
  br i1 %364, label %block_401fd9, label %block_402a25

block_402512:                                     ; preds = %block_40251e, %block_40228c
  %366 = phi i64 [ %3590, %block_40251e ], [ %.pre4, %block_40228c ]
  %367 = load i64, i64* %RBP, align 8
  %368 = add i64 %367, -108
  %369 = add i64 %366, 3
  store i64 %369, i64* %PC, align 8
  %370 = inttoptr i64 %368 to i32*
  %371 = load i32, i32* %370, align 4
  %372 = zext i32 %371 to i64
  store i64 %372, i64* %RAX, align 8, !tbaa !2428
  %373 = add i64 %367, -48
  %374 = add i64 %366, 6
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %373 to i32*
  %376 = load i32, i32* %375, align 4
  %377 = sub i32 %371, %376
  %378 = icmp ult i32 %371, %376
  %379 = zext i1 %378 to i8
  store i8 %379, i8* %43, align 1, !tbaa !2432
  %380 = and i32 %377, 255
  %381 = tail call i32 @llvm.ctpop.i32(i32 %380) #8
  %382 = trunc i32 %381 to i8
  %383 = and i8 %382, 1
  %384 = xor i8 %383, 1
  store i8 %384, i8* %50, align 1, !tbaa !2446
  %385 = xor i32 %376, %371
  %386 = xor i32 %385, %377
  %387 = lshr i32 %386, 4
  %388 = trunc i32 %387 to i8
  %389 = and i8 %388, 1
  store i8 %389, i8* %55, align 1, !tbaa !2447
  %390 = icmp eq i32 %377, 0
  %391 = zext i1 %390 to i8
  store i8 %391, i8* %58, align 1, !tbaa !2448
  %392 = lshr i32 %377, 31
  %393 = trunc i32 %392 to i8
  store i8 %393, i8* %61, align 1, !tbaa !2449
  %394 = lshr i32 %371, 31
  %395 = lshr i32 %376, 31
  %396 = xor i32 %395, %394
  %397 = xor i32 %392, %394
  %398 = add nuw nsw i32 %397, %396
  %399 = icmp eq i32 %398, 2
  %400 = zext i1 %399 to i8
  store i8 %400, i8* %67, align 1, !tbaa !2450
  %401 = icmp ne i8 %393, 0
  %402 = xor i1 %401, %399
  %.v7 = select i1 %402, i64 12, i64 665
  %403 = add i64 %366, %.v7
  %404 = add i64 %367, 32
  %405 = add i64 %403, 4
  store i64 %405, i64* %PC, align 8
  %406 = inttoptr i64 %404 to i64*
  %407 = load i64, i64* %406, align 8
  store i64 %407, i64* %RAX, align 8, !tbaa !2428
  %408 = add i64 %367, -100
  %409 = add i64 %403, 8
  store i64 %409, i64* %PC, align 8
  %410 = inttoptr i64 %408 to i32*
  %411 = load i32, i32* %410, align 4
  %412 = sext i32 %411 to i64
  %413 = mul nsw i64 %412, 33800
  store i64 %413, i64* %RCX, align 8, !tbaa !2428
  %414 = lshr i64 %413, 63
  %415 = add i64 %413, %407
  store i64 %415, i64* %RAX, align 8, !tbaa !2428
  %416 = icmp ult i64 %415, %407
  %417 = icmp ult i64 %415, %413
  %418 = or i1 %416, %417
  %419 = zext i1 %418 to i8
  store i8 %419, i8* %43, align 1, !tbaa !2432
  %420 = trunc i64 %415 to i32
  %421 = and i32 %420, 255
  %422 = tail call i32 @llvm.ctpop.i32(i32 %421) #8
  %423 = trunc i32 %422 to i8
  %424 = and i8 %423, 1
  %425 = xor i8 %424, 1
  store i8 %425, i8* %50, align 1, !tbaa !2446
  %426 = xor i64 %413, %407
  %427 = xor i64 %426, %415
  %428 = lshr i64 %427, 4
  %429 = trunc i64 %428 to i8
  %430 = and i8 %429, 1
  store i8 %430, i8* %55, align 1, !tbaa !2447
  %431 = icmp eq i64 %415, 0
  %432 = zext i1 %431 to i8
  store i8 %432, i8* %58, align 1, !tbaa !2448
  %433 = lshr i64 %415, 63
  %434 = trunc i64 %433 to i8
  store i8 %434, i8* %61, align 1, !tbaa !2449
  %435 = lshr i64 %407, 63
  %436 = xor i64 %433, %435
  %437 = xor i64 %433, %414
  %438 = add nuw nsw i64 %436, %437
  %439 = icmp eq i64 %438, 2
  %440 = zext i1 %439 to i8
  store i8 %440, i8* %67, align 1, !tbaa !2450
  %441 = load i64, i64* %RBP, align 8
  %442 = add i64 %441, -52
  %443 = add i64 %403, 22
  store i64 %443, i64* %PC, align 8
  %444 = inttoptr i64 %442 to i32*
  %445 = load i32, i32* %444, align 4
  %446 = sext i32 %445 to i64
  %447 = mul nsw i64 %446, 520
  store i64 %447, i64* %RCX, align 8, !tbaa !2428
  %448 = lshr i64 %447, 63
  %449 = add i64 %403, 32
  store i64 %449, i64* %PC, align 8
  %450 = add i64 %447, %415
  store i64 %450, i64* %RAX, align 8, !tbaa !2428
  %451 = icmp ult i64 %450, %415
  %452 = icmp ult i64 %450, %447
  %453 = or i1 %451, %452
  %454 = zext i1 %453 to i8
  store i8 %454, i8* %43, align 1, !tbaa !2432
  %455 = trunc i64 %450 to i32
  %456 = and i32 %455, 255
  %457 = tail call i32 @llvm.ctpop.i32(i32 %456) #8
  %458 = trunc i32 %457 to i8
  %459 = and i8 %458, 1
  %460 = xor i8 %459, 1
  store i8 %460, i8* %50, align 1, !tbaa !2446
  %461 = xor i64 %447, %415
  %462 = xor i64 %461, %450
  %463 = lshr i64 %462, 4
  %464 = trunc i64 %463 to i8
  %465 = and i8 %464, 1
  store i8 %465, i8* %55, align 1, !tbaa !2447
  %466 = icmp eq i64 %450, 0
  %467 = zext i1 %466 to i8
  store i8 %467, i8* %58, align 1, !tbaa !2448
  %468 = lshr i64 %450, 63
  %469 = trunc i64 %468 to i8
  store i8 %469, i8* %61, align 1, !tbaa !2449
  %470 = xor i64 %468, %433
  %471 = xor i64 %468, %448
  %472 = add nuw nsw i64 %470, %471
  %473 = icmp eq i64 %472, 2
  %474 = zext i1 %473 to i8
  store i8 %474, i8* %67, align 1, !tbaa !2450
  br i1 %402, label %block_40251e, label %block_4027ab

block_40228c:                                     ; preds = %block_401fe0
  %475 = add i64 %4812, -48
  %476 = add i64 %4774, 36
  store i64 %476, i64* %PC, align 8
  %477 = inttoptr i64 %475 to i32*
  %478 = load i32, i32* %477, align 4
  %479 = sext i32 %478 to i64
  store i64 %479, i64* %RCX, align 8, !tbaa !2428
  %480 = shl nsw i64 %479, 3
  %481 = add i64 %480, %4821
  %482 = add i64 %4774, 41
  store i64 %482, i64* %PC, align 8
  %483 = inttoptr i64 %481 to i64*
  %484 = load i64, i64* %483, align 8
  %485 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %484, i64* %485, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %486 = add i64 %4812, 32
  %487 = add i64 %4774, 45
  store i64 %487, i64* %PC, align 8
  %488 = inttoptr i64 %486 to i64*
  %489 = load i64, i64* %488, align 8
  store i64 %489, i64* %RAX, align 8, !tbaa !2428
  %490 = add i64 %4812, -100
  %491 = add i64 %4774, 49
  store i64 %491, i64* %PC, align 8
  %492 = inttoptr i64 %490 to i32*
  %493 = load i32, i32* %492, align 4
  %494 = sext i32 %493 to i64
  %495 = mul nsw i64 %494, 33800
  store i64 %495, i64* %RCX, align 8, !tbaa !2428
  %496 = lshr i64 %495, 63
  %497 = add i64 %495, %489
  store i64 %497, i64* %RAX, align 8, !tbaa !2428
  %498 = icmp ult i64 %497, %489
  %499 = icmp ult i64 %497, %495
  %500 = or i1 %498, %499
  %501 = zext i1 %500 to i8
  store i8 %501, i8* %43, align 1, !tbaa !2432
  %502 = trunc i64 %497 to i32
  %503 = and i32 %502, 255
  %504 = tail call i32 @llvm.ctpop.i32(i32 %503) #8
  %505 = trunc i32 %504 to i8
  %506 = and i8 %505, 1
  %507 = xor i8 %506, 1
  store i8 %507, i8* %50, align 1, !tbaa !2446
  %508 = xor i64 %495, %489
  %509 = xor i64 %508, %497
  %510 = lshr i64 %509, 4
  %511 = trunc i64 %510 to i8
  %512 = and i8 %511, 1
  store i8 %512, i8* %55, align 1, !tbaa !2447
  %513 = icmp eq i64 %497, 0
  %514 = zext i1 %513 to i8
  store i8 %514, i8* %58, align 1, !tbaa !2448
  %515 = lshr i64 %497, 63
  %516 = trunc i64 %515 to i8
  store i8 %516, i8* %61, align 1, !tbaa !2449
  %517 = lshr i64 %489, 63
  %518 = xor i64 %515, %517
  %519 = xor i64 %515, %496
  %520 = add nuw nsw i64 %518, %519
  %521 = icmp eq i64 %520, 2
  %522 = zext i1 %521 to i8
  store i8 %522, i8* %67, align 1, !tbaa !2450
  %523 = add i64 %4774, 62
  store i64 %523, i64* %PC, align 8
  %524 = load i32, i32* %4815, align 4
  %525 = add i32 %524, 1
  %526 = zext i32 %525 to i64
  store i64 %526, i64* %RDX, align 8, !tbaa !2428
  %527 = sext i32 %525 to i64
  %528 = mul nsw i64 %527, 520
  store i64 %528, i64* %RCX, align 8, !tbaa !2428
  %529 = lshr i64 %528, 63
  %530 = load i64, i64* %RAX, align 8
  %531 = add i64 %528, %530
  store i64 %531, i64* %RAX, align 8, !tbaa !2428
  %532 = icmp ult i64 %531, %530
  %533 = icmp ult i64 %531, %528
  %534 = or i1 %532, %533
  %535 = zext i1 %534 to i8
  store i8 %535, i8* %43, align 1, !tbaa !2432
  %536 = trunc i64 %531 to i32
  %537 = and i32 %536, 255
  %538 = tail call i32 @llvm.ctpop.i32(i32 %537) #8
  %539 = trunc i32 %538 to i8
  %540 = and i8 %539, 1
  %541 = xor i8 %540, 1
  store i8 %541, i8* %50, align 1, !tbaa !2446
  %542 = xor i64 %528, %530
  %543 = xor i64 %542, %531
  %544 = lshr i64 %543, 4
  %545 = trunc i64 %544 to i8
  %546 = and i8 %545, 1
  store i8 %546, i8* %55, align 1, !tbaa !2447
  %547 = icmp eq i64 %531, 0
  %548 = zext i1 %547 to i8
  store i8 %548, i8* %58, align 1, !tbaa !2448
  %549 = lshr i64 %531, 63
  %550 = trunc i64 %549 to i8
  store i8 %550, i8* %61, align 1, !tbaa !2449
  %551 = lshr i64 %530, 63
  %552 = xor i64 %549, %551
  %553 = xor i64 %549, %529
  %554 = add nuw nsw i64 %552, %553
  %555 = icmp eq i64 %554, 2
  %556 = zext i1 %555 to i8
  store i8 %556, i8* %67, align 1, !tbaa !2450
  %557 = load i64, i64* %RBP, align 8
  %558 = add i64 %557, -48
  %559 = add i64 %4774, 82
  store i64 %559, i64* %PC, align 8
  %560 = inttoptr i64 %558 to i32*
  %561 = load i32, i32* %560, align 4
  %562 = sext i32 %561 to i64
  store i64 %562, i64* %RCX, align 8, !tbaa !2428
  %563 = shl nsw i64 %562, 3
  %564 = add i64 %563, %531
  %565 = add i64 %4774, 87
  store i64 %565, i64* %PC, align 8
  %566 = load double, double* %230, align 1
  %567 = inttoptr i64 %564 to double*
  %568 = load double, double* %567, align 8
  %569 = fsub double %566, %568
  store double %569, double* %230, align 1, !tbaa !2452
  %570 = add i64 %557, -88
  %571 = add i64 %4774, 91
  store i64 %571, i64* %PC, align 8
  %572 = inttoptr i64 %570 to i64*
  %573 = load i64, i64* %572, align 8
  store i64 %573, i64* %RAX, align 8, !tbaa !2428
  %574 = add i64 %557, -100
  %575 = add i64 %4774, 95
  store i64 %575, i64* %PC, align 8
  %576 = inttoptr i64 %574 to i32*
  %577 = load i32, i32* %576, align 4
  %578 = sext i32 %577 to i64
  %579 = mul nsw i64 %578, 520
  store i64 %579, i64* %RCX, align 8, !tbaa !2428
  %580 = lshr i64 %579, 63
  %581 = add i64 %579, %573
  store i64 %581, i64* %RAX, align 8, !tbaa !2428
  %582 = icmp ult i64 %581, %573
  %583 = icmp ult i64 %581, %579
  %584 = or i1 %582, %583
  %585 = zext i1 %584 to i8
  store i8 %585, i8* %43, align 1, !tbaa !2432
  %586 = trunc i64 %581 to i32
  %587 = and i32 %586, 255
  %588 = tail call i32 @llvm.ctpop.i32(i32 %587) #8
  %589 = trunc i32 %588 to i8
  %590 = and i8 %589, 1
  %591 = xor i8 %590, 1
  store i8 %591, i8* %50, align 1, !tbaa !2446
  %592 = xor i64 %579, %573
  %593 = xor i64 %592, %581
  %594 = lshr i64 %593, 4
  %595 = trunc i64 %594 to i8
  %596 = and i8 %595, 1
  store i8 %596, i8* %55, align 1, !tbaa !2447
  %597 = icmp eq i64 %581, 0
  %598 = zext i1 %597 to i8
  store i8 %598, i8* %58, align 1, !tbaa !2448
  %599 = lshr i64 %581, 63
  %600 = trunc i64 %599 to i8
  store i8 %600, i8* %61, align 1, !tbaa !2449
  %601 = lshr i64 %573, 63
  %602 = xor i64 %599, %601
  %603 = xor i64 %599, %580
  %604 = add nuw nsw i64 %602, %603
  %605 = icmp eq i64 %604, 2
  %606 = zext i1 %605 to i8
  store i8 %606, i8* %67, align 1, !tbaa !2450
  %607 = add i64 %557, -104
  %608 = add i64 %4774, 109
  store i64 %608, i64* %PC, align 8
  %609 = inttoptr i64 %607 to i32*
  %610 = load i32, i32* %609, align 4
  %611 = sext i32 %610 to i64
  store i64 %611, i64* %RCX, align 8, !tbaa !2428
  %612 = shl nsw i64 %611, 3
  %613 = add i64 %612, %581
  %614 = add i64 %4774, 114
  store i64 %614, i64* %PC, align 8
  %615 = inttoptr i64 %613 to double*
  %616 = load double, double* %615, align 8
  %617 = fadd double %569, %616
  store double %617, double* %230, align 1, !tbaa !2452
  %618 = load i64, i64* %RBP, align 8
  %619 = add i64 %618, 40
  %620 = add i64 %4774, 118
  store i64 %620, i64* %PC, align 8
  %621 = inttoptr i64 %619 to i64*
  %622 = load i64, i64* %621, align 8
  store i64 %622, i64* %RAX, align 8, !tbaa !2428
  %623 = add i64 %618, -100
  %624 = add i64 %4774, 122
  store i64 %624, i64* %PC, align 8
  %625 = inttoptr i64 %623 to i32*
  %626 = load i32, i32* %625, align 4
  %627 = sext i32 %626 to i64
  %628 = mul nsw i64 %627, 33800
  store i64 %628, i64* %RCX, align 8, !tbaa !2428
  %629 = lshr i64 %628, 63
  %630 = add i64 %628, %622
  store i64 %630, i64* %RAX, align 8, !tbaa !2428
  %631 = icmp ult i64 %630, %622
  %632 = icmp ult i64 %630, %628
  %633 = or i1 %631, %632
  %634 = zext i1 %633 to i8
  store i8 %634, i8* %43, align 1, !tbaa !2432
  %635 = trunc i64 %630 to i32
  %636 = and i32 %635, 255
  %637 = tail call i32 @llvm.ctpop.i32(i32 %636) #8
  %638 = trunc i32 %637 to i8
  %639 = and i8 %638, 1
  %640 = xor i8 %639, 1
  store i8 %640, i8* %50, align 1, !tbaa !2446
  %641 = xor i64 %628, %622
  %642 = xor i64 %641, %630
  %643 = lshr i64 %642, 4
  %644 = trunc i64 %643 to i8
  %645 = and i8 %644, 1
  store i8 %645, i8* %55, align 1, !tbaa !2447
  %646 = icmp eq i64 %630, 0
  %647 = zext i1 %646 to i8
  store i8 %647, i8* %58, align 1, !tbaa !2448
  %648 = lshr i64 %630, 63
  %649 = trunc i64 %648 to i8
  store i8 %649, i8* %61, align 1, !tbaa !2449
  %650 = lshr i64 %622, 63
  %651 = xor i64 %648, %650
  %652 = xor i64 %648, %629
  %653 = add nuw nsw i64 %651, %652
  %654 = icmp eq i64 %653, 2
  %655 = zext i1 %654 to i8
  store i8 %655, i8* %67, align 1, !tbaa !2450
  %656 = add i64 %618, -104
  %657 = add i64 %4774, 136
  store i64 %657, i64* %PC, align 8
  %658 = inttoptr i64 %656 to i32*
  %659 = load i32, i32* %658, align 4
  %660 = sext i32 %659 to i64
  %661 = mul nsw i64 %660, 520
  store i64 %661, i64* %RCX, align 8, !tbaa !2428
  %662 = lshr i64 %661, 63
  %663 = add i64 %661, %630
  store i64 %663, i64* %RAX, align 8, !tbaa !2428
  %664 = icmp ult i64 %663, %630
  %665 = icmp ult i64 %663, %661
  %666 = or i1 %664, %665
  %667 = zext i1 %666 to i8
  store i8 %667, i8* %43, align 1, !tbaa !2432
  %668 = trunc i64 %663 to i32
  %669 = and i32 %668, 255
  %670 = tail call i32 @llvm.ctpop.i32(i32 %669) #8
  %671 = trunc i32 %670 to i8
  %672 = and i8 %671, 1
  %673 = xor i8 %672, 1
  store i8 %673, i8* %50, align 1, !tbaa !2446
  %674 = xor i64 %661, %630
  %675 = xor i64 %674, %663
  %676 = lshr i64 %675, 4
  %677 = trunc i64 %676 to i8
  %678 = and i8 %677, 1
  store i8 %678, i8* %55, align 1, !tbaa !2447
  %679 = icmp eq i64 %663, 0
  %680 = zext i1 %679 to i8
  store i8 %680, i8* %58, align 1, !tbaa !2448
  %681 = lshr i64 %663, 63
  %682 = trunc i64 %681 to i8
  store i8 %682, i8* %61, align 1, !tbaa !2449
  %683 = xor i64 %681, %648
  %684 = xor i64 %681, %662
  %685 = add nuw nsw i64 %683, %684
  %686 = icmp eq i64 %685, 2
  %687 = zext i1 %686 to i8
  store i8 %687, i8* %67, align 1, !tbaa !2450
  %688 = load i64, i64* %RBP, align 8
  %689 = add i64 %688, -48
  %690 = add i64 %4774, 150
  store i64 %690, i64* %PC, align 8
  %691 = inttoptr i64 %689 to i32*
  %692 = load i32, i32* %691, align 4
  %693 = sext i32 %692 to i64
  store i64 %693, i64* %RCX, align 8, !tbaa !2428
  %694 = shl nsw i64 %693, 3
  %695 = add i64 %694, %663
  %696 = add i64 %4774, 155
  store i64 %696, i64* %PC, align 8
  %697 = load double, double* %230, align 1
  %698 = inttoptr i64 %695 to double*
  %699 = load double, double* %698, align 8
  %700 = fsub double %697, %699
  store double %700, double* %230, align 1, !tbaa !2452
  %701 = add i64 %688, -96
  %702 = add i64 %4774, 159
  store i64 %702, i64* %PC, align 8
  %703 = inttoptr i64 %701 to i64*
  %704 = load i64, i64* %703, align 8
  store i64 %704, i64* %RAX, align 8, !tbaa !2428
  %705 = add i64 %688, -100
  %706 = add i64 %4774, 163
  store i64 %706, i64* %PC, align 8
  %707 = inttoptr i64 %705 to i32*
  %708 = load i32, i32* %707, align 4
  %709 = sext i32 %708 to i64
  %710 = mul nsw i64 %709, 520
  store i64 %710, i64* %RCX, align 8, !tbaa !2428
  %711 = lshr i64 %710, 63
  %712 = add i64 %710, %704
  store i64 %712, i64* %RAX, align 8, !tbaa !2428
  %713 = icmp ult i64 %712, %704
  %714 = icmp ult i64 %712, %710
  %715 = or i1 %713, %714
  %716 = zext i1 %715 to i8
  store i8 %716, i8* %43, align 1, !tbaa !2432
  %717 = trunc i64 %712 to i32
  %718 = and i32 %717, 255
  %719 = tail call i32 @llvm.ctpop.i32(i32 %718) #8
  %720 = trunc i32 %719 to i8
  %721 = and i8 %720, 1
  %722 = xor i8 %721, 1
  store i8 %722, i8* %50, align 1, !tbaa !2446
  %723 = xor i64 %710, %704
  %724 = xor i64 %723, %712
  %725 = lshr i64 %724, 4
  %726 = trunc i64 %725 to i8
  %727 = and i8 %726, 1
  store i8 %727, i8* %55, align 1, !tbaa !2447
  %728 = icmp eq i64 %712, 0
  %729 = zext i1 %728 to i8
  store i8 %729, i8* %58, align 1, !tbaa !2448
  %730 = lshr i64 %712, 63
  %731 = trunc i64 %730 to i8
  store i8 %731, i8* %61, align 1, !tbaa !2449
  %732 = lshr i64 %704, 63
  %733 = xor i64 %730, %732
  %734 = xor i64 %730, %711
  %735 = add nuw nsw i64 %733, %734
  %736 = icmp eq i64 %735, 2
  %737 = zext i1 %736 to i8
  store i8 %737, i8* %67, align 1, !tbaa !2450
  %738 = add i64 %688, -104
  %739 = add i64 %4774, 177
  store i64 %739, i64* %PC, align 8
  %740 = inttoptr i64 %738 to i32*
  %741 = load i32, i32* %740, align 4
  %742 = sext i32 %741 to i64
  store i64 %742, i64* %RCX, align 8, !tbaa !2428
  %743 = shl nsw i64 %742, 3
  %744 = add i64 %743, %712
  %745 = add i64 %4774, 182
  store i64 %745, i64* %PC, align 8
  %746 = inttoptr i64 %744 to double*
  store double %700, double* %746, align 8
  %747 = load i64, i64* %RBP, align 8
  %748 = add i64 %747, 88
  %749 = load i64, i64* %PC, align 8
  %750 = add i64 %749, 4
  store i64 %750, i64* %PC, align 8
  %751 = inttoptr i64 %748 to i64*
  %752 = load i64, i64* %751, align 8
  store i64 %752, i64* %RAX, align 8, !tbaa !2428
  %753 = add i64 %747, -104
  %754 = add i64 %749, 8
  store i64 %754, i64* %PC, align 8
  %755 = inttoptr i64 %753 to i32*
  %756 = load i32, i32* %755, align 4
  %757 = sext i32 %756 to i64
  store i64 %757, i64* %RCX, align 8, !tbaa !2428
  %758 = shl nsw i64 %757, 3
  %759 = add i64 %758, %752
  %760 = add i64 %749, 13
  store i64 %760, i64* %PC, align 8
  %761 = inttoptr i64 %759 to double*
  %762 = load double, double* %761, align 8
  store double %762, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %763 = add i64 %747, 96
  %764 = add i64 %749, 17
  store i64 %764, i64* %PC, align 8
  %765 = inttoptr i64 %763 to i64*
  %766 = load i64, i64* %765, align 8
  store i64 %766, i64* %RAX, align 8, !tbaa !2428
  %767 = add i64 %749, 21
  store i64 %767, i64* %PC, align 8
  %768 = load i32, i32* %755, align 4
  %769 = sext i32 %768 to i64
  store i64 %769, i64* %RCX, align 8, !tbaa !2428
  %770 = shl nsw i64 %769, 3
  %771 = add i64 %770, %766
  %772 = add i64 %749, 26
  store i64 %772, i64* %PC, align 8
  %773 = inttoptr i64 %771 to double*
  %774 = load double, double* %773, align 8
  %775 = fdiv double %762, %774
  store double %775, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %776 = add i64 %747, 24
  %777 = add i64 %749, 30
  store i64 %777, i64* %PC, align 8
  %778 = inttoptr i64 %776 to i64*
  %779 = load i64, i64* %778, align 8
  store i64 %779, i64* %RAX, align 8, !tbaa !2428
  %780 = add i64 %747, -100
  %781 = add i64 %749, 34
  store i64 %781, i64* %PC, align 8
  %782 = inttoptr i64 %780 to i32*
  %783 = load i32, i32* %782, align 4
  %784 = sext i32 %783 to i64
  %785 = mul nsw i64 %784, 33800
  store i64 %785, i64* %RCX, align 8, !tbaa !2428
  %786 = lshr i64 %785, 63
  %787 = add i64 %785, %779
  store i64 %787, i64* %RAX, align 8, !tbaa !2428
  %788 = icmp ult i64 %787, %779
  %789 = icmp ult i64 %787, %785
  %790 = or i1 %788, %789
  %791 = zext i1 %790 to i8
  store i8 %791, i8* %43, align 1, !tbaa !2432
  %792 = trunc i64 %787 to i32
  %793 = and i32 %792, 255
  %794 = tail call i32 @llvm.ctpop.i32(i32 %793) #8
  %795 = trunc i32 %794 to i8
  %796 = and i8 %795, 1
  %797 = xor i8 %796, 1
  store i8 %797, i8* %50, align 1, !tbaa !2446
  %798 = xor i64 %785, %779
  %799 = xor i64 %798, %787
  %800 = lshr i64 %799, 4
  %801 = trunc i64 %800 to i8
  %802 = and i8 %801, 1
  store i8 %802, i8* %55, align 1, !tbaa !2447
  %803 = icmp eq i64 %787, 0
  %804 = zext i1 %803 to i8
  store i8 %804, i8* %58, align 1, !tbaa !2448
  %805 = lshr i64 %787, 63
  %806 = trunc i64 %805 to i8
  store i8 %806, i8* %61, align 1, !tbaa !2449
  %807 = lshr i64 %779, 63
  %808 = xor i64 %805, %807
  %809 = xor i64 %805, %786
  %810 = add nuw nsw i64 %808, %809
  %811 = icmp eq i64 %810, 2
  %812 = zext i1 %811 to i8
  store i8 %812, i8* %67, align 1, !tbaa !2450
  %813 = load i64, i64* %RBP, align 8
  %814 = add i64 %813, -104
  %815 = add i64 %749, 48
  store i64 %815, i64* %PC, align 8
  %816 = inttoptr i64 %814 to i32*
  %817 = load i32, i32* %816, align 4
  %818 = sext i32 %817 to i64
  %819 = mul nsw i64 %818, 520
  store i64 %819, i64* %RCX, align 8, !tbaa !2428
  %820 = lshr i64 %819, 63
  %821 = add i64 %819, %787
  store i64 %821, i64* %RAX, align 8, !tbaa !2428
  %822 = icmp ult i64 %821, %787
  %823 = icmp ult i64 %821, %819
  %824 = or i1 %822, %823
  %825 = zext i1 %824 to i8
  store i8 %825, i8* %43, align 1, !tbaa !2432
  %826 = trunc i64 %821 to i32
  %827 = and i32 %826, 255
  %828 = tail call i32 @llvm.ctpop.i32(i32 %827) #8
  %829 = trunc i32 %828 to i8
  %830 = and i8 %829, 1
  %831 = xor i8 %830, 1
  store i8 %831, i8* %50, align 1, !tbaa !2446
  %832 = xor i64 %819, %787
  %833 = xor i64 %832, %821
  %834 = lshr i64 %833, 4
  %835 = trunc i64 %834 to i8
  %836 = and i8 %835, 1
  store i8 %836, i8* %55, align 1, !tbaa !2447
  %837 = icmp eq i64 %821, 0
  %838 = zext i1 %837 to i8
  store i8 %838, i8* %58, align 1, !tbaa !2448
  %839 = lshr i64 %821, 63
  %840 = trunc i64 %839 to i8
  store i8 %840, i8* %61, align 1, !tbaa !2449
  %841 = xor i64 %839, %805
  %842 = xor i64 %839, %820
  %843 = add nuw nsw i64 %841, %842
  %844 = icmp eq i64 %843, 2
  %845 = zext i1 %844 to i8
  store i8 %845, i8* %67, align 1, !tbaa !2450
  %846 = add i64 %813, -48
  %847 = add i64 %749, 62
  store i64 %847, i64* %PC, align 8
  %848 = inttoptr i64 %846 to i32*
  %849 = load i32, i32* %848, align 4
  %850 = sext i32 %849 to i64
  store i64 %850, i64* %RCX, align 8, !tbaa !2428
  %851 = shl nsw i64 %850, 3
  %852 = add i64 %851, %821
  %853 = add i64 %749, 67
  store i64 %853, i64* %PC, align 8
  %854 = load double, double* %230, align 1
  %855 = inttoptr i64 %852 to double*
  %856 = load double, double* %855, align 8
  %857 = fmul double %854, %856
  store double %857, double* %230, align 1, !tbaa !2452
  %858 = add i64 %813, -72
  %859 = add i64 %749, 72
  store i64 %859, i64* %PC, align 8
  %860 = inttoptr i64 %858 to double*
  %861 = load double, double* %860, align 8
  store double %861, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %862 = add i64 %813, 96
  %863 = add i64 %749, 76
  store i64 %863, i64* %PC, align 8
  %864 = inttoptr i64 %862 to i64*
  %865 = load i64, i64* %864, align 8
  store i64 %865, i64* %RAX, align 8, !tbaa !2428
  %866 = add i64 %749, 80
  store i64 %866, i64* %PC, align 8
  %867 = load i32, i32* %816, align 4
  %868 = sext i32 %867 to i64
  store i64 %868, i64* %RCX, align 8, !tbaa !2428
  %869 = shl nsw i64 %868, 3
  %870 = add i64 %869, %865
  %871 = add i64 %749, 85
  store i64 %871, i64* %PC, align 8
  %872 = inttoptr i64 %870 to double*
  %873 = load double, double* %872, align 8
  %874 = fdiv double %861, %873
  store double %874, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %875 = load i64, i64* %RBP, align 8
  %876 = add i64 %875, -96
  %877 = add i64 %749, 89
  store i64 %877, i64* %PC, align 8
  %878 = inttoptr i64 %876 to i64*
  %879 = load i64, i64* %878, align 8
  store i64 %879, i64* %RAX, align 8, !tbaa !2428
  %880 = add i64 %875, -100
  %881 = add i64 %749, 93
  store i64 %881, i64* %PC, align 8
  %882 = inttoptr i64 %880 to i32*
  %883 = load i32, i32* %882, align 4
  %884 = sext i32 %883 to i64
  %885 = mul nsw i64 %884, 520
  store i64 %885, i64* %RCX, align 8, !tbaa !2428
  %886 = lshr i64 %885, 63
  %887 = add i64 %885, %879
  store i64 %887, i64* %RAX, align 8, !tbaa !2428
  %888 = icmp ult i64 %887, %879
  %889 = icmp ult i64 %887, %885
  %890 = or i1 %888, %889
  %891 = zext i1 %890 to i8
  store i8 %891, i8* %43, align 1, !tbaa !2432
  %892 = trunc i64 %887 to i32
  %893 = and i32 %892, 255
  %894 = tail call i32 @llvm.ctpop.i32(i32 %893) #8
  %895 = trunc i32 %894 to i8
  %896 = and i8 %895, 1
  %897 = xor i8 %896, 1
  store i8 %897, i8* %50, align 1, !tbaa !2446
  %898 = xor i64 %885, %879
  %899 = xor i64 %898, %887
  %900 = lshr i64 %899, 4
  %901 = trunc i64 %900 to i8
  %902 = and i8 %901, 1
  store i8 %902, i8* %55, align 1, !tbaa !2447
  %903 = icmp eq i64 %887, 0
  %904 = zext i1 %903 to i8
  store i8 %904, i8* %58, align 1, !tbaa !2448
  %905 = lshr i64 %887, 63
  %906 = trunc i64 %905 to i8
  store i8 %906, i8* %61, align 1, !tbaa !2449
  %907 = lshr i64 %879, 63
  %908 = xor i64 %905, %907
  %909 = xor i64 %905, %886
  %910 = add nuw nsw i64 %908, %909
  %911 = icmp eq i64 %910, 2
  %912 = zext i1 %911 to i8
  store i8 %912, i8* %67, align 1, !tbaa !2450
  %913 = add i64 %875, -104
  %914 = add i64 %749, 107
  store i64 %914, i64* %PC, align 8
  %915 = inttoptr i64 %913 to i32*
  %916 = load i32, i32* %915, align 4
  %917 = sext i32 %916 to i64
  store i64 %917, i64* %RCX, align 8, !tbaa !2428
  %918 = shl nsw i64 %917, 3
  %919 = add i64 %918, %887
  %920 = add i64 %749, 112
  store i64 %920, i64* %PC, align 8
  %921 = inttoptr i64 %919 to double*
  %922 = load double, double* %921, align 8
  %923 = fmul double %874, %922
  store double %923, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %924 = load double, double* %230, align 1
  %925 = fsub double %924, %923
  store double %925, double* %230, align 1, !tbaa !2452
  %926 = add i64 %875, 16
  %927 = add i64 %749, 120
  store i64 %927, i64* %PC, align 8
  %928 = inttoptr i64 %926 to i64*
  %929 = load i64, i64* %928, align 8
  store i64 %929, i64* %RAX, align 8, !tbaa !2428
  %930 = load i64, i64* %RBP, align 8
  %931 = add i64 %930, -100
  %932 = add i64 %749, 124
  store i64 %932, i64* %PC, align 8
  %933 = inttoptr i64 %931 to i32*
  %934 = load i32, i32* %933, align 4
  %935 = sext i32 %934 to i64
  %936 = mul nsw i64 %935, 520
  store i64 %936, i64* %RCX, align 8, !tbaa !2428
  %937 = lshr i64 %936, 63
  %938 = add i64 %936, %929
  store i64 %938, i64* %RAX, align 8, !tbaa !2428
  %939 = icmp ult i64 %938, %929
  %940 = icmp ult i64 %938, %936
  %941 = or i1 %939, %940
  %942 = zext i1 %941 to i8
  store i8 %942, i8* %43, align 1, !tbaa !2432
  %943 = trunc i64 %938 to i32
  %944 = and i32 %943, 255
  %945 = tail call i32 @llvm.ctpop.i32(i32 %944) #8
  %946 = trunc i32 %945 to i8
  %947 = and i8 %946, 1
  %948 = xor i8 %947, 1
  store i8 %948, i8* %50, align 1, !tbaa !2446
  %949 = xor i64 %936, %929
  %950 = xor i64 %949, %938
  %951 = lshr i64 %950, 4
  %952 = trunc i64 %951 to i8
  %953 = and i8 %952, 1
  store i8 %953, i8* %55, align 1, !tbaa !2447
  %954 = icmp eq i64 %938, 0
  %955 = zext i1 %954 to i8
  store i8 %955, i8* %58, align 1, !tbaa !2448
  %956 = lshr i64 %938, 63
  %957 = trunc i64 %956 to i8
  store i8 %957, i8* %61, align 1, !tbaa !2449
  %958 = lshr i64 %929, 63
  %959 = xor i64 %956, %958
  %960 = xor i64 %956, %937
  %961 = add nuw nsw i64 %959, %960
  %962 = icmp eq i64 %961, 2
  %963 = zext i1 %962 to i8
  store i8 %963, i8* %67, align 1, !tbaa !2450
  %964 = add i64 %930, -104
  %965 = add i64 %749, 138
  store i64 %965, i64* %PC, align 8
  %966 = inttoptr i64 %964 to i32*
  %967 = load i32, i32* %966, align 4
  %968 = sext i32 %967 to i64
  store i64 %968, i64* %RCX, align 8, !tbaa !2428
  %969 = shl nsw i64 %968, 3
  %970 = add i64 %969, %938
  %971 = add i64 %749, 143
  store i64 %971, i64* %PC, align 8
  %972 = inttoptr i64 %970 to double*
  store double %925, double* %972, align 8
  %973 = load i64, i64* %RBP, align 8
  %974 = add i64 %973, 72
  %975 = load i64, i64* %PC, align 8
  %976 = add i64 %975, 4
  store i64 %976, i64* %PC, align 8
  %977 = inttoptr i64 %974 to i64*
  %978 = load i64, i64* %977, align 8
  store i64 %978, i64* %RAX, align 8, !tbaa !2428
  %979 = add i64 %973, -48
  %980 = add i64 %975, 8
  store i64 %980, i64* %PC, align 8
  %981 = inttoptr i64 %979 to i32*
  %982 = load i32, i32* %981, align 4
  %983 = sext i32 %982 to i64
  store i64 %983, i64* %RCX, align 8, !tbaa !2428
  %984 = shl nsw i64 %983, 3
  %985 = add i64 %984, %978
  %986 = add i64 %975, 13
  store i64 %986, i64* %PC, align 8
  %987 = inttoptr i64 %985 to double*
  %988 = load double, double* %987, align 8
  store double %988, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %989 = add i64 %973, 80
  %990 = add i64 %975, 17
  store i64 %990, i64* %PC, align 8
  %991 = inttoptr i64 %989 to i64*
  %992 = load i64, i64* %991, align 8
  store i64 %992, i64* %RAX, align 8, !tbaa !2428
  %993 = add i64 %975, 21
  store i64 %993, i64* %PC, align 8
  %994 = load i32, i32* %981, align 4
  %995 = sext i32 %994 to i64
  store i64 %995, i64* %RCX, align 8, !tbaa !2428
  %996 = shl nsw i64 %995, 3
  %997 = add i64 %996, %992
  %998 = add i64 %975, 26
  store i64 %998, i64* %PC, align 8
  %999 = inttoptr i64 %997 to double*
  %1000 = load double, double* %999, align 8
  %1001 = fdiv double %988, %1000
  store double %1001, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %1002 = add i64 %973, 48
  %1003 = add i64 %975, 30
  store i64 %1003, i64* %PC, align 8
  %1004 = inttoptr i64 %1002 to i64*
  %1005 = load i64, i64* %1004, align 8
  store i64 %1005, i64* %RAX, align 8, !tbaa !2428
  %1006 = add i64 %973, -100
  %1007 = add i64 %975, 34
  store i64 %1007, i64* %PC, align 8
  %1008 = inttoptr i64 %1006 to i32*
  %1009 = load i32, i32* %1008, align 4
  %1010 = sext i32 %1009 to i64
  %1011 = mul nsw i64 %1010, 33800
  store i64 %1011, i64* %RCX, align 8, !tbaa !2428
  %1012 = lshr i64 %1011, 63
  %1013 = add i64 %1011, %1005
  store i64 %1013, i64* %RAX, align 8, !tbaa !2428
  %1014 = icmp ult i64 %1013, %1005
  %1015 = icmp ult i64 %1013, %1011
  %1016 = or i1 %1014, %1015
  %1017 = zext i1 %1016 to i8
  store i8 %1017, i8* %43, align 1, !tbaa !2432
  %1018 = trunc i64 %1013 to i32
  %1019 = and i32 %1018, 255
  %1020 = tail call i32 @llvm.ctpop.i32(i32 %1019) #8
  %1021 = trunc i32 %1020 to i8
  %1022 = and i8 %1021, 1
  %1023 = xor i8 %1022, 1
  store i8 %1023, i8* %50, align 1, !tbaa !2446
  %1024 = xor i64 %1011, %1005
  %1025 = xor i64 %1024, %1013
  %1026 = lshr i64 %1025, 4
  %1027 = trunc i64 %1026 to i8
  %1028 = and i8 %1027, 1
  store i8 %1028, i8* %55, align 1, !tbaa !2447
  %1029 = icmp eq i64 %1013, 0
  %1030 = zext i1 %1029 to i8
  store i8 %1030, i8* %58, align 1, !tbaa !2448
  %1031 = lshr i64 %1013, 63
  %1032 = trunc i64 %1031 to i8
  store i8 %1032, i8* %61, align 1, !tbaa !2449
  %1033 = lshr i64 %1005, 63
  %1034 = xor i64 %1031, %1033
  %1035 = xor i64 %1031, %1012
  %1036 = add nuw nsw i64 %1034, %1035
  %1037 = icmp eq i64 %1036, 2
  %1038 = zext i1 %1037 to i8
  store i8 %1038, i8* %67, align 1, !tbaa !2450
  %1039 = load i64, i64* %RBP, align 8
  %1040 = add i64 %1039, -104
  %1041 = add i64 %975, 48
  store i64 %1041, i64* %PC, align 8
  %1042 = inttoptr i64 %1040 to i32*
  %1043 = load i32, i32* %1042, align 4
  %1044 = sext i32 %1043 to i64
  %1045 = mul nsw i64 %1044, 520
  store i64 %1045, i64* %RCX, align 8, !tbaa !2428
  %1046 = lshr i64 %1045, 63
  %1047 = add i64 %1045, %1013
  store i64 %1047, i64* %RAX, align 8, !tbaa !2428
  %1048 = icmp ult i64 %1047, %1013
  %1049 = icmp ult i64 %1047, %1045
  %1050 = or i1 %1048, %1049
  %1051 = zext i1 %1050 to i8
  store i8 %1051, i8* %43, align 1, !tbaa !2432
  %1052 = trunc i64 %1047 to i32
  %1053 = and i32 %1052, 255
  %1054 = tail call i32 @llvm.ctpop.i32(i32 %1053) #8
  %1055 = trunc i32 %1054 to i8
  %1056 = and i8 %1055, 1
  %1057 = xor i8 %1056, 1
  store i8 %1057, i8* %50, align 1, !tbaa !2446
  %1058 = xor i64 %1045, %1013
  %1059 = xor i64 %1058, %1047
  %1060 = lshr i64 %1059, 4
  %1061 = trunc i64 %1060 to i8
  %1062 = and i8 %1061, 1
  store i8 %1062, i8* %55, align 1, !tbaa !2447
  %1063 = icmp eq i64 %1047, 0
  %1064 = zext i1 %1063 to i8
  store i8 %1064, i8* %58, align 1, !tbaa !2448
  %1065 = lshr i64 %1047, 63
  %1066 = trunc i64 %1065 to i8
  store i8 %1066, i8* %61, align 1, !tbaa !2449
  %1067 = xor i64 %1065, %1031
  %1068 = xor i64 %1065, %1046
  %1069 = add nuw nsw i64 %1067, %1068
  %1070 = icmp eq i64 %1069, 2
  %1071 = zext i1 %1070 to i8
  store i8 %1071, i8* %67, align 1, !tbaa !2450
  %1072 = add i64 %1039, -48
  %1073 = add i64 %975, 62
  store i64 %1073, i64* %PC, align 8
  %1074 = inttoptr i64 %1072 to i32*
  %1075 = load i32, i32* %1074, align 4
  %1076 = sext i32 %1075 to i64
  store i64 %1076, i64* %RCX, align 8, !tbaa !2428
  %1077 = shl nsw i64 %1076, 3
  %1078 = add i64 %1077, %1047
  %1079 = add i64 %975, 67
  store i64 %1079, i64* %PC, align 8
  %1080 = load double, double* %230, align 1
  %1081 = inttoptr i64 %1078 to double*
  %1082 = load double, double* %1081, align 8
  %1083 = fmul double %1080, %1082
  store double %1083, double* %230, align 1, !tbaa !2452
  %1084 = add i64 %1039, -64
  %1085 = add i64 %975, 72
  store i64 %1085, i64* %PC, align 8
  %1086 = inttoptr i64 %1084 to double*
  %1087 = load double, double* %1086, align 8
  store double %1087, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %1088 = add i64 %1039, 64
  %1089 = add i64 %975, 76
  store i64 %1089, i64* %PC, align 8
  %1090 = inttoptr i64 %1088 to i64*
  %1091 = load i64, i64* %1090, align 8
  store i64 %1091, i64* %RAX, align 8, !tbaa !2428
  %1092 = add i64 %1039, -100
  %1093 = add i64 %975, 80
  store i64 %1093, i64* %PC, align 8
  %1094 = inttoptr i64 %1092 to i32*
  %1095 = load i32, i32* %1094, align 4
  %1096 = sext i32 %1095 to i64
  store i64 %1096, i64* %RCX, align 8, !tbaa !2428
  %1097 = shl nsw i64 %1096, 3
  %1098 = add i64 %1097, %1091
  %1099 = add i64 %975, 85
  store i64 %1099, i64* %PC, align 8
  %1100 = inttoptr i64 %1098 to double*
  %1101 = load double, double* %1100, align 8
  %1102 = fmul double %1087, %1101
  store double %1102, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %1103 = load i64, i64* %RBP, align 8
  %1104 = add i64 %1103, 80
  %1105 = add i64 %975, 89
  store i64 %1105, i64* %PC, align 8
  %1106 = inttoptr i64 %1104 to i64*
  %1107 = load i64, i64* %1106, align 8
  store i64 %1107, i64* %RAX, align 8, !tbaa !2428
  %1108 = add i64 %1103, -48
  %1109 = add i64 %975, 93
  store i64 %1109, i64* %PC, align 8
  %1110 = inttoptr i64 %1108 to i32*
  %1111 = load i32, i32* %1110, align 4
  %1112 = sext i32 %1111 to i64
  store i64 %1112, i64* %RCX, align 8, !tbaa !2428
  %1113 = shl nsw i64 %1112, 3
  %1114 = add i64 %1113, %1107
  %1115 = add i64 %975, 98
  store i64 %1115, i64* %PC, align 8
  %1116 = inttoptr i64 %1114 to double*
  %1117 = load double, double* %1116, align 8
  %1118 = fdiv double %1102, %1117
  store double %1118, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %1119 = add i64 %1103, 16
  %1120 = add i64 %975, 102
  store i64 %1120, i64* %PC, align 8
  %1121 = inttoptr i64 %1119 to i64*
  %1122 = load i64, i64* %1121, align 8
  store i64 %1122, i64* %RAX, align 8, !tbaa !2428
  %1123 = add i64 %1103, -100
  %1124 = add i64 %975, 106
  store i64 %1124, i64* %PC, align 8
  %1125 = inttoptr i64 %1123 to i32*
  %1126 = load i32, i32* %1125, align 4
  %1127 = sext i32 %1126 to i64
  %1128 = mul nsw i64 %1127, 520
  store i64 %1128, i64* %RCX, align 8, !tbaa !2428
  %1129 = lshr i64 %1128, 63
  %1130 = add i64 %1128, %1122
  store i64 %1130, i64* %RAX, align 8, !tbaa !2428
  %1131 = icmp ult i64 %1130, %1122
  %1132 = icmp ult i64 %1130, %1128
  %1133 = or i1 %1131, %1132
  %1134 = zext i1 %1133 to i8
  store i8 %1134, i8* %43, align 1, !tbaa !2432
  %1135 = trunc i64 %1130 to i32
  %1136 = and i32 %1135, 255
  %1137 = tail call i32 @llvm.ctpop.i32(i32 %1136) #8
  %1138 = trunc i32 %1137 to i8
  %1139 = and i8 %1138, 1
  %1140 = xor i8 %1139, 1
  store i8 %1140, i8* %50, align 1, !tbaa !2446
  %1141 = xor i64 %1128, %1122
  %1142 = xor i64 %1141, %1130
  %1143 = lshr i64 %1142, 4
  %1144 = trunc i64 %1143 to i8
  %1145 = and i8 %1144, 1
  store i8 %1145, i8* %55, align 1, !tbaa !2447
  %1146 = icmp eq i64 %1130, 0
  %1147 = zext i1 %1146 to i8
  store i8 %1147, i8* %58, align 1, !tbaa !2448
  %1148 = lshr i64 %1130, 63
  %1149 = trunc i64 %1148 to i8
  store i8 %1149, i8* %61, align 1, !tbaa !2449
  %1150 = lshr i64 %1122, 63
  %1151 = xor i64 %1148, %1150
  %1152 = xor i64 %1148, %1129
  %1153 = add nuw nsw i64 %1151, %1152
  %1154 = icmp eq i64 %1153, 2
  %1155 = zext i1 %1154 to i8
  store i8 %1155, i8* %67, align 1, !tbaa !2450
  %1156 = add i64 %1103, -104
  %1157 = add i64 %975, 120
  store i64 %1157, i64* %PC, align 8
  %1158 = inttoptr i64 %1156 to i32*
  %1159 = load i32, i32* %1158, align 4
  %1160 = sext i32 %1159 to i64
  store i64 %1160, i64* %RCX, align 8, !tbaa !2428
  %1161 = shl nsw i64 %1160, 3
  %1162 = add i64 %1161, %1130
  %1163 = add i64 %975, 125
  store i64 %1163, i64* %PC, align 8
  %1164 = inttoptr i64 %1162 to double*
  %1165 = load double, double* %1164, align 8
  %1166 = fmul double %1118, %1165
  store double %1166, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %1167 = load double, double* %230, align 1
  %1168 = fadd double %1167, %1166
  store double %1168, double* %230, align 1, !tbaa !2452
  %1169 = load i64, i64* %RBP, align 8
  %1170 = add i64 %1169, -64
  %1171 = add i64 %975, 134
  store i64 %1171, i64* %PC, align 8
  %1172 = inttoptr i64 %1170 to double*
  %1173 = load double, double* %1172, align 8
  store double %1173, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %1174 = add i64 %1169, 56
  %1175 = add i64 %975, 138
  store i64 %1175, i64* %PC, align 8
  %1176 = inttoptr i64 %1174 to i64*
  %1177 = load i64, i64* %1176, align 8
  store i64 %1177, i64* %RAX, align 8, !tbaa !2428
  %1178 = add i64 %1169, -100
  %1179 = add i64 %975, 142
  store i64 %1179, i64* %PC, align 8
  %1180 = inttoptr i64 %1178 to i32*
  %1181 = load i32, i32* %1180, align 4
  %1182 = sext i32 %1181 to i64
  store i64 %1182, i64* %RCX, align 8, !tbaa !2428
  %1183 = shl nsw i64 %1182, 3
  %1184 = add i64 %1183, %1177
  %1185 = add i64 %975, 147
  store i64 %1185, i64* %PC, align 8
  %1186 = inttoptr i64 %1184 to double*
  %1187 = load double, double* %1186, align 8
  %1188 = fmul double %1173, %1187
  store double %1188, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %1189 = add i64 %1169, 80
  %1190 = add i64 %975, 151
  store i64 %1190, i64* %PC, align 8
  %1191 = inttoptr i64 %1189 to i64*
  %1192 = load i64, i64* %1191, align 8
  store i64 %1192, i64* %RAX, align 8, !tbaa !2428
  %1193 = add i64 %1169, -48
  %1194 = add i64 %975, 155
  store i64 %1194, i64* %PC, align 8
  %1195 = inttoptr i64 %1193 to i32*
  %1196 = load i32, i32* %1195, align 4
  %1197 = sext i32 %1196 to i64
  store i64 %1197, i64* %RCX, align 8, !tbaa !2428
  %1198 = shl nsw i64 %1197, 3
  %1199 = add i64 %1198, %1192
  %1200 = add i64 %975, 160
  store i64 %1200, i64* %PC, align 8
  %1201 = inttoptr i64 %1199 to double*
  %1202 = load double, double* %1201, align 8
  %1203 = fdiv double %1188, %1202
  store double %1203, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %1204 = add i64 %1169, 24
  %1205 = add i64 %975, 164
  store i64 %1205, i64* %PC, align 8
  %1206 = inttoptr i64 %1204 to i64*
  %1207 = load i64, i64* %1206, align 8
  store i64 %1207, i64* %RAX, align 8, !tbaa !2428
  %1208 = add i64 %975, 168
  store i64 %1208, i64* %PC, align 8
  %1209 = load i32, i32* %1180, align 4
  %1210 = sext i32 %1209 to i64
  %1211 = mul nsw i64 %1210, 33800
  store i64 %1211, i64* %RCX, align 8, !tbaa !2428
  %1212 = lshr i64 %1211, 63
  %1213 = add i64 %1211, %1207
  store i64 %1213, i64* %RAX, align 8, !tbaa !2428
  %1214 = icmp ult i64 %1213, %1207
  %1215 = icmp ult i64 %1213, %1211
  %1216 = or i1 %1214, %1215
  %1217 = zext i1 %1216 to i8
  store i8 %1217, i8* %43, align 1, !tbaa !2432
  %1218 = trunc i64 %1213 to i32
  %1219 = and i32 %1218, 255
  %1220 = tail call i32 @llvm.ctpop.i32(i32 %1219) #8
  %1221 = trunc i32 %1220 to i8
  %1222 = and i8 %1221, 1
  %1223 = xor i8 %1222, 1
  store i8 %1223, i8* %50, align 1, !tbaa !2446
  %1224 = xor i64 %1211, %1207
  %1225 = xor i64 %1224, %1213
  %1226 = lshr i64 %1225, 4
  %1227 = trunc i64 %1226 to i8
  %1228 = and i8 %1227, 1
  store i8 %1228, i8* %55, align 1, !tbaa !2447
  %1229 = icmp eq i64 %1213, 0
  %1230 = zext i1 %1229 to i8
  store i8 %1230, i8* %58, align 1, !tbaa !2448
  %1231 = lshr i64 %1213, 63
  %1232 = trunc i64 %1231 to i8
  store i8 %1232, i8* %61, align 1, !tbaa !2449
  %1233 = lshr i64 %1207, 63
  %1234 = xor i64 %1231, %1233
  %1235 = xor i64 %1231, %1212
  %1236 = add nuw nsw i64 %1234, %1235
  %1237 = icmp eq i64 %1236, 2
  %1238 = zext i1 %1237 to i8
  store i8 %1238, i8* %67, align 1, !tbaa !2450
  %1239 = load i64, i64* %RBP, align 8
  %1240 = add i64 %1239, -104
  %1241 = add i64 %975, 182
  store i64 %1241, i64* %PC, align 8
  %1242 = inttoptr i64 %1240 to i32*
  %1243 = load i32, i32* %1242, align 4
  %1244 = sext i32 %1243 to i64
  %1245 = mul nsw i64 %1244, 520
  store i64 %1245, i64* %RCX, align 8, !tbaa !2428
  %1246 = lshr i64 %1245, 63
  %1247 = add i64 %1245, %1213
  store i64 %1247, i64* %RAX, align 8, !tbaa !2428
  %1248 = icmp ult i64 %1247, %1213
  %1249 = icmp ult i64 %1247, %1245
  %1250 = or i1 %1248, %1249
  %1251 = zext i1 %1250 to i8
  store i8 %1251, i8* %43, align 1, !tbaa !2432
  %1252 = trunc i64 %1247 to i32
  %1253 = and i32 %1252, 255
  %1254 = tail call i32 @llvm.ctpop.i32(i32 %1253) #8
  %1255 = trunc i32 %1254 to i8
  %1256 = and i8 %1255, 1
  %1257 = xor i8 %1256, 1
  store i8 %1257, i8* %50, align 1, !tbaa !2446
  %1258 = xor i64 %1245, %1213
  %1259 = xor i64 %1258, %1247
  %1260 = lshr i64 %1259, 4
  %1261 = trunc i64 %1260 to i8
  %1262 = and i8 %1261, 1
  store i8 %1262, i8* %55, align 1, !tbaa !2447
  %1263 = icmp eq i64 %1247, 0
  %1264 = zext i1 %1263 to i8
  store i8 %1264, i8* %58, align 1, !tbaa !2448
  %1265 = lshr i64 %1247, 63
  %1266 = trunc i64 %1265 to i8
  store i8 %1266, i8* %61, align 1, !tbaa !2449
  %1267 = xor i64 %1265, %1231
  %1268 = xor i64 %1265, %1246
  %1269 = add nuw nsw i64 %1267, %1268
  %1270 = icmp eq i64 %1269, 2
  %1271 = zext i1 %1270 to i8
  store i8 %1271, i8* %67, align 1, !tbaa !2450
  %1272 = add i64 %1239, -48
  %1273 = add i64 %975, 196
  store i64 %1273, i64* %PC, align 8
  %1274 = inttoptr i64 %1272 to i32*
  %1275 = load i32, i32* %1274, align 4
  %1276 = sext i32 %1275 to i64
  store i64 %1276, i64* %RCX, align 8, !tbaa !2428
  %1277 = shl nsw i64 %1276, 3
  %1278 = add i64 %1277, %1247
  %1279 = add i64 %975, 201
  store i64 %1279, i64* %PC, align 8
  %1280 = load double, double* %233, align 1
  %1281 = inttoptr i64 %1278 to double*
  %1282 = load double, double* %1281, align 8
  %1283 = fmul double %1280, %1282
  store double %1283, double* %233, align 1, !tbaa !2452
  %1284 = load double, double* %230, align 1
  %1285 = fsub double %1284, %1283
  store double %1285, double* %230, align 1, !tbaa !2452
  %1286 = add i64 %1239, 48
  %1287 = add i64 %975, 209
  store i64 %1287, i64* %PC, align 8
  %1288 = inttoptr i64 %1286 to i64*
  %1289 = load i64, i64* %1288, align 8
  store i64 %1289, i64* %RAX, align 8, !tbaa !2428
  %1290 = add i64 %1239, -100
  %1291 = add i64 %975, 213
  store i64 %1291, i64* %PC, align 8
  %1292 = inttoptr i64 %1290 to i32*
  %1293 = load i32, i32* %1292, align 4
  %1294 = sext i32 %1293 to i64
  %1295 = mul nsw i64 %1294, 33800
  store i64 %1295, i64* %RCX, align 8, !tbaa !2428
  %1296 = lshr i64 %1295, 63
  %1297 = add i64 %1295, %1289
  store i64 %1297, i64* %RAX, align 8, !tbaa !2428
  %1298 = icmp ult i64 %1297, %1289
  %1299 = icmp ult i64 %1297, %1295
  %1300 = or i1 %1298, %1299
  %1301 = zext i1 %1300 to i8
  store i8 %1301, i8* %43, align 1, !tbaa !2432
  %1302 = trunc i64 %1297 to i32
  %1303 = and i32 %1302, 255
  %1304 = tail call i32 @llvm.ctpop.i32(i32 %1303) #8
  %1305 = trunc i32 %1304 to i8
  %1306 = and i8 %1305, 1
  %1307 = xor i8 %1306, 1
  store i8 %1307, i8* %50, align 1, !tbaa !2446
  %1308 = xor i64 %1295, %1289
  %1309 = xor i64 %1308, %1297
  %1310 = lshr i64 %1309, 4
  %1311 = trunc i64 %1310 to i8
  %1312 = and i8 %1311, 1
  store i8 %1312, i8* %55, align 1, !tbaa !2447
  %1313 = icmp eq i64 %1297, 0
  %1314 = zext i1 %1313 to i8
  store i8 %1314, i8* %58, align 1, !tbaa !2448
  %1315 = lshr i64 %1297, 63
  %1316 = trunc i64 %1315 to i8
  store i8 %1316, i8* %61, align 1, !tbaa !2449
  %1317 = lshr i64 %1289, 63
  %1318 = xor i64 %1315, %1317
  %1319 = xor i64 %1315, %1296
  %1320 = add nuw nsw i64 %1318, %1319
  %1321 = icmp eq i64 %1320, 2
  %1322 = zext i1 %1321 to i8
  store i8 %1322, i8* %67, align 1, !tbaa !2450
  %1323 = load i64, i64* %RBP, align 8
  %1324 = add i64 %1323, -104
  %1325 = add i64 %975, 227
  store i64 %1325, i64* %PC, align 8
  %1326 = inttoptr i64 %1324 to i32*
  %1327 = load i32, i32* %1326, align 4
  %1328 = sext i32 %1327 to i64
  %1329 = mul nsw i64 %1328, 520
  store i64 %1329, i64* %RCX, align 8, !tbaa !2428
  %1330 = lshr i64 %1329, 63
  %1331 = add i64 %1329, %1297
  store i64 %1331, i64* %RAX, align 8, !tbaa !2428
  %1332 = icmp ult i64 %1331, %1297
  %1333 = icmp ult i64 %1331, %1329
  %1334 = or i1 %1332, %1333
  %1335 = zext i1 %1334 to i8
  store i8 %1335, i8* %43, align 1, !tbaa !2432
  %1336 = trunc i64 %1331 to i32
  %1337 = and i32 %1336, 255
  %1338 = tail call i32 @llvm.ctpop.i32(i32 %1337) #8
  %1339 = trunc i32 %1338 to i8
  %1340 = and i8 %1339, 1
  %1341 = xor i8 %1340, 1
  store i8 %1341, i8* %50, align 1, !tbaa !2446
  %1342 = xor i64 %1329, %1297
  %1343 = xor i64 %1342, %1331
  %1344 = lshr i64 %1343, 4
  %1345 = trunc i64 %1344 to i8
  %1346 = and i8 %1345, 1
  store i8 %1346, i8* %55, align 1, !tbaa !2447
  %1347 = icmp eq i64 %1331, 0
  %1348 = zext i1 %1347 to i8
  store i8 %1348, i8* %58, align 1, !tbaa !2448
  %1349 = lshr i64 %1331, 63
  %1350 = trunc i64 %1349 to i8
  store i8 %1350, i8* %61, align 1, !tbaa !2449
  %1351 = xor i64 %1349, %1315
  %1352 = xor i64 %1349, %1330
  %1353 = add nuw nsw i64 %1351, %1352
  %1354 = icmp eq i64 %1353, 2
  %1355 = zext i1 %1354 to i8
  store i8 %1355, i8* %67, align 1, !tbaa !2450
  %1356 = add i64 %1323, -48
  %1357 = add i64 %975, 241
  store i64 %1357, i64* %PC, align 8
  %1358 = inttoptr i64 %1356 to i32*
  %1359 = load i32, i32* %1358, align 4
  %1360 = sext i32 %1359 to i64
  store i64 %1360, i64* %RCX, align 8, !tbaa !2428
  %1361 = shl nsw i64 %1360, 3
  %1362 = add i64 %1361, %1331
  %1363 = add i64 %975, 246
  store i64 %1363, i64* %PC, align 8
  %1364 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1365 = load i64, i64* %1364, align 1
  %1366 = inttoptr i64 %1362 to i64*
  store i64 %1365, i64* %1366, align 8
  %1367 = load i64, i64* %RBP, align 8
  %1368 = add i64 %1367, 16
  %1369 = load i64, i64* %PC, align 8
  %1370 = add i64 %1369, 4
  store i64 %1370, i64* %PC, align 8
  %1371 = inttoptr i64 %1368 to i64*
  %1372 = load i64, i64* %1371, align 8
  store i64 %1372, i64* %RAX, align 8, !tbaa !2428
  %1373 = add i64 %1367, -100
  %1374 = add i64 %1369, 8
  store i64 %1374, i64* %PC, align 8
  %1375 = inttoptr i64 %1373 to i32*
  %1376 = load i32, i32* %1375, align 4
  %1377 = sext i32 %1376 to i64
  %1378 = mul nsw i64 %1377, 520
  store i64 %1378, i64* %RCX, align 8, !tbaa !2428
  %1379 = lshr i64 %1378, 63
  %1380 = add i64 %1378, %1372
  store i64 %1380, i64* %RAX, align 8, !tbaa !2428
  %1381 = icmp ult i64 %1380, %1372
  %1382 = icmp ult i64 %1380, %1378
  %1383 = or i1 %1381, %1382
  %1384 = zext i1 %1383 to i8
  store i8 %1384, i8* %43, align 1, !tbaa !2432
  %1385 = trunc i64 %1380 to i32
  %1386 = and i32 %1385, 255
  %1387 = tail call i32 @llvm.ctpop.i32(i32 %1386) #8
  %1388 = trunc i32 %1387 to i8
  %1389 = and i8 %1388, 1
  %1390 = xor i8 %1389, 1
  store i8 %1390, i8* %50, align 1, !tbaa !2446
  %1391 = xor i64 %1378, %1372
  %1392 = xor i64 %1391, %1380
  %1393 = lshr i64 %1392, 4
  %1394 = trunc i64 %1393 to i8
  %1395 = and i8 %1394, 1
  store i8 %1395, i8* %55, align 1, !tbaa !2447
  %1396 = icmp eq i64 %1380, 0
  %1397 = zext i1 %1396 to i8
  store i8 %1397, i8* %58, align 1, !tbaa !2448
  %1398 = lshr i64 %1380, 63
  %1399 = trunc i64 %1398 to i8
  store i8 %1399, i8* %61, align 1, !tbaa !2449
  %1400 = lshr i64 %1372, 63
  %1401 = xor i64 %1398, %1400
  %1402 = xor i64 %1398, %1379
  %1403 = add nuw nsw i64 %1401, %1402
  %1404 = icmp eq i64 %1403, 2
  %1405 = zext i1 %1404 to i8
  store i8 %1405, i8* %67, align 1, !tbaa !2450
  %1406 = add i64 %1367, -104
  %1407 = add i64 %1369, 22
  store i64 %1407, i64* %PC, align 8
  %1408 = inttoptr i64 %1406 to i32*
  %1409 = load i32, i32* %1408, align 4
  %1410 = sext i32 %1409 to i64
  store i64 %1410, i64* %RCX, align 8, !tbaa !2428
  %1411 = shl nsw i64 %1410, 3
  %1412 = add i64 %1411, %1380
  %1413 = add i64 %1369, 27
  store i64 %1413, i64* %PC, align 8
  %1414 = inttoptr i64 %1412 to i64*
  %1415 = load i64, i64* %1414, align 8
  %1416 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %1415, i64* %1416, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %1417 = add i64 %1367, 24
  %1418 = add i64 %1369, 31
  store i64 %1418, i64* %PC, align 8
  %1419 = inttoptr i64 %1417 to i64*
  %1420 = load i64, i64* %1419, align 8
  store i64 %1420, i64* %RAX, align 8, !tbaa !2428
  %1421 = add i64 %1369, 35
  store i64 %1421, i64* %PC, align 8
  %1422 = load i32, i32* %1375, align 4
  %1423 = sext i32 %1422 to i64
  %1424 = mul nsw i64 %1423, 33800
  store i64 %1424, i64* %RCX, align 8, !tbaa !2428
  %1425 = lshr i64 %1424, 63
  %1426 = add i64 %1424, %1420
  store i64 %1426, i64* %RAX, align 8, !tbaa !2428
  %1427 = icmp ult i64 %1426, %1420
  %1428 = icmp ult i64 %1426, %1424
  %1429 = or i1 %1427, %1428
  %1430 = zext i1 %1429 to i8
  store i8 %1430, i8* %43, align 1, !tbaa !2432
  %1431 = trunc i64 %1426 to i32
  %1432 = and i32 %1431, 255
  %1433 = tail call i32 @llvm.ctpop.i32(i32 %1432) #8
  %1434 = trunc i32 %1433 to i8
  %1435 = and i8 %1434, 1
  %1436 = xor i8 %1435, 1
  store i8 %1436, i8* %50, align 1, !tbaa !2446
  %1437 = xor i64 %1424, %1420
  %1438 = xor i64 %1437, %1426
  %1439 = lshr i64 %1438, 4
  %1440 = trunc i64 %1439 to i8
  %1441 = and i8 %1440, 1
  store i8 %1441, i8* %55, align 1, !tbaa !2447
  %1442 = icmp eq i64 %1426, 0
  %1443 = zext i1 %1442 to i8
  store i8 %1443, i8* %58, align 1, !tbaa !2448
  %1444 = lshr i64 %1426, 63
  %1445 = trunc i64 %1444 to i8
  store i8 %1445, i8* %61, align 1, !tbaa !2449
  %1446 = lshr i64 %1420, 63
  %1447 = xor i64 %1444, %1446
  %1448 = xor i64 %1444, %1425
  %1449 = add nuw nsw i64 %1447, %1448
  %1450 = icmp eq i64 %1449, 2
  %1451 = zext i1 %1450 to i8
  store i8 %1451, i8* %67, align 1, !tbaa !2450
  %1452 = load i64, i64* %RBP, align 8
  %1453 = add i64 %1452, -104
  %1454 = add i64 %1369, 49
  store i64 %1454, i64* %PC, align 8
  %1455 = inttoptr i64 %1453 to i32*
  %1456 = load i32, i32* %1455, align 4
  %1457 = sext i32 %1456 to i64
  %1458 = mul nsw i64 %1457, 520
  store i64 %1458, i64* %RCX, align 8, !tbaa !2428
  %1459 = lshr i64 %1458, 63
  %1460 = add i64 %1458, %1426
  store i64 %1460, i64* %RAX, align 8, !tbaa !2428
  %1461 = icmp ult i64 %1460, %1426
  %1462 = icmp ult i64 %1460, %1458
  %1463 = or i1 %1461, %1462
  %1464 = zext i1 %1463 to i8
  store i8 %1464, i8* %43, align 1, !tbaa !2432
  %1465 = trunc i64 %1460 to i32
  %1466 = and i32 %1465, 255
  %1467 = tail call i32 @llvm.ctpop.i32(i32 %1466) #8
  %1468 = trunc i32 %1467 to i8
  %1469 = and i8 %1468, 1
  %1470 = xor i8 %1469, 1
  store i8 %1470, i8* %50, align 1, !tbaa !2446
  %1471 = xor i64 %1458, %1426
  %1472 = xor i64 %1471, %1460
  %1473 = lshr i64 %1472, 4
  %1474 = trunc i64 %1473 to i8
  %1475 = and i8 %1474, 1
  store i8 %1475, i8* %55, align 1, !tbaa !2447
  %1476 = icmp eq i64 %1460, 0
  %1477 = zext i1 %1476 to i8
  store i8 %1477, i8* %58, align 1, !tbaa !2448
  %1478 = lshr i64 %1460, 63
  %1479 = trunc i64 %1478 to i8
  store i8 %1479, i8* %61, align 1, !tbaa !2449
  %1480 = xor i64 %1478, %1444
  %1481 = xor i64 %1478, %1459
  %1482 = add nuw nsw i64 %1480, %1481
  %1483 = icmp eq i64 %1482, 2
  %1484 = zext i1 %1483 to i8
  store i8 %1484, i8* %67, align 1, !tbaa !2450
  %1485 = add i64 %1452, -48
  %1486 = add i64 %1369, 63
  store i64 %1486, i64* %PC, align 8
  %1487 = inttoptr i64 %1485 to i32*
  %1488 = load i32, i32* %1487, align 4
  %1489 = sext i32 %1488 to i64
  store i64 %1489, i64* %RCX, align 8, !tbaa !2428
  %1490 = shl nsw i64 %1489, 3
  %1491 = add i64 %1490, %1460
  %1492 = add i64 %1369, 68
  store i64 %1492, i64* %PC, align 8
  %1493 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1494 = load i64, i64* %1493, align 1
  %1495 = inttoptr i64 %1491 to i64*
  store i64 %1494, i64* %1495, align 8
  %1496 = load i64, i64* %RBP, align 8
  %1497 = add i64 %1496, -108
  %1498 = load i64, i64* %PC, align 8
  %1499 = add i64 %1498, 7
  store i64 %1499, i64* %PC, align 8
  %1500 = inttoptr i64 %1497 to i32*
  store i32 0, i32* %1500, align 4
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_402512

block_4027ab:                                     ; preds = %block_402512
  %1501 = add i64 %441, -48
  %1502 = add i64 %403, 36
  store i64 %1502, i64* %PC, align 8
  %1503 = inttoptr i64 %1501 to i32*
  %1504 = load i32, i32* %1503, align 4
  %1505 = sext i32 %1504 to i64
  store i64 %1505, i64* %RCX, align 8, !tbaa !2428
  %1506 = shl nsw i64 %1505, 3
  %1507 = add i64 %1506, %450
  %1508 = add i64 %403, 41
  store i64 %1508, i64* %PC, align 8
  %1509 = inttoptr i64 %1507 to double*
  %1510 = load double, double* %1509, align 8
  store double %1510, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %1511 = add i64 %441, -80
  %1512 = add i64 %403, 45
  store i64 %1512, i64* %PC, align 8
  %1513 = inttoptr i64 %1511 to i64*
  %1514 = load i64, i64* %1513, align 8
  store i64 %1514, i64* %RAX, align 8, !tbaa !2428
  %1515 = add i64 %441, -100
  %1516 = add i64 %403, 49
  store i64 %1516, i64* %PC, align 8
  %1517 = inttoptr i64 %1515 to i32*
  %1518 = load i32, i32* %1517, align 4
  %1519 = sext i32 %1518 to i64
  %1520 = mul nsw i64 %1519, 520
  store i64 %1520, i64* %RCX, align 8, !tbaa !2428
  %1521 = lshr i64 %1520, 63
  %1522 = add i64 %1520, %1514
  store i64 %1522, i64* %RAX, align 8, !tbaa !2428
  %1523 = icmp ult i64 %1522, %1514
  %1524 = icmp ult i64 %1522, %1520
  %1525 = or i1 %1523, %1524
  %1526 = zext i1 %1525 to i8
  store i8 %1526, i8* %43, align 1, !tbaa !2432
  %1527 = trunc i64 %1522 to i32
  %1528 = and i32 %1527, 255
  %1529 = tail call i32 @llvm.ctpop.i32(i32 %1528) #8
  %1530 = trunc i32 %1529 to i8
  %1531 = and i8 %1530, 1
  %1532 = xor i8 %1531, 1
  store i8 %1532, i8* %50, align 1, !tbaa !2446
  %1533 = xor i64 %1520, %1514
  %1534 = xor i64 %1533, %1522
  %1535 = lshr i64 %1534, 4
  %1536 = trunc i64 %1535 to i8
  %1537 = and i8 %1536, 1
  store i8 %1537, i8* %55, align 1, !tbaa !2447
  %1538 = icmp eq i64 %1522, 0
  %1539 = zext i1 %1538 to i8
  store i8 %1539, i8* %58, align 1, !tbaa !2448
  %1540 = lshr i64 %1522, 63
  %1541 = trunc i64 %1540 to i8
  store i8 %1541, i8* %61, align 1, !tbaa !2449
  %1542 = lshr i64 %1514, 63
  %1543 = xor i64 %1540, %1542
  %1544 = xor i64 %1540, %1521
  %1545 = add nuw nsw i64 %1543, %1544
  %1546 = icmp eq i64 %1545, 2
  %1547 = zext i1 %1546 to i8
  store i8 %1547, i8* %67, align 1, !tbaa !2450
  %1548 = add i64 %403, 63
  store i64 %1548, i64* %PC, align 8
  %1549 = load i32, i32* %1503, align 4
  %1550 = sext i32 %1549 to i64
  store i64 %1550, i64* %RCX, align 8, !tbaa !2428
  %1551 = shl nsw i64 %1550, 3
  %1552 = add i64 %1551, %1522
  %1553 = add i64 %403, 68
  store i64 %1553, i64* %PC, align 8
  %1554 = inttoptr i64 %1552 to double*
  %1555 = load double, double* %1554, align 8
  %1556 = fsub double %1510, %1555
  store double %1556, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %1557 = load i64, i64* %RBP, align 8
  %1558 = add i64 %1557, -88
  %1559 = add i64 %403, 72
  store i64 %1559, i64* %PC, align 8
  %1560 = inttoptr i64 %1558 to i64*
  %1561 = load i64, i64* %1560, align 8
  store i64 %1561, i64* %RAX, align 8, !tbaa !2428
  %1562 = add i64 %1557, -100
  %1563 = add i64 %403, 76
  store i64 %1563, i64* %PC, align 8
  %1564 = inttoptr i64 %1562 to i32*
  %1565 = load i32, i32* %1564, align 4
  %1566 = sext i32 %1565 to i64
  %1567 = mul nsw i64 %1566, 520
  store i64 %1567, i64* %RCX, align 8, !tbaa !2428
  %1568 = lshr i64 %1567, 63
  %1569 = add i64 %1567, %1561
  store i64 %1569, i64* %RAX, align 8, !tbaa !2428
  %1570 = icmp ult i64 %1569, %1561
  %1571 = icmp ult i64 %1569, %1567
  %1572 = or i1 %1570, %1571
  %1573 = zext i1 %1572 to i8
  store i8 %1573, i8* %43, align 1, !tbaa !2432
  %1574 = trunc i64 %1569 to i32
  %1575 = and i32 %1574, 255
  %1576 = tail call i32 @llvm.ctpop.i32(i32 %1575) #8
  %1577 = trunc i32 %1576 to i8
  %1578 = and i8 %1577, 1
  %1579 = xor i8 %1578, 1
  store i8 %1579, i8* %50, align 1, !tbaa !2446
  %1580 = xor i64 %1567, %1561
  %1581 = xor i64 %1580, %1569
  %1582 = lshr i64 %1581, 4
  %1583 = trunc i64 %1582 to i8
  %1584 = and i8 %1583, 1
  store i8 %1584, i8* %55, align 1, !tbaa !2447
  %1585 = icmp eq i64 %1569, 0
  %1586 = zext i1 %1585 to i8
  store i8 %1586, i8* %58, align 1, !tbaa !2448
  %1587 = lshr i64 %1569, 63
  %1588 = trunc i64 %1587 to i8
  store i8 %1588, i8* %61, align 1, !tbaa !2449
  %1589 = lshr i64 %1561, 63
  %1590 = xor i64 %1587, %1589
  %1591 = xor i64 %1587, %1568
  %1592 = add nuw nsw i64 %1590, %1591
  %1593 = icmp eq i64 %1592, 2
  %1594 = zext i1 %1593 to i8
  store i8 %1594, i8* %67, align 1, !tbaa !2450
  %1595 = add i64 %1557, -52
  %1596 = add i64 %403, 90
  store i64 %1596, i64* %PC, align 8
  %1597 = inttoptr i64 %1595 to i32*
  %1598 = load i32, i32* %1597, align 4
  %1599 = sext i32 %1598 to i64
  store i64 %1599, i64* %RCX, align 8, !tbaa !2428
  %1600 = shl nsw i64 %1599, 3
  %1601 = add i64 %1600, %1569
  %1602 = add i64 %403, 95
  store i64 %1602, i64* %PC, align 8
  %1603 = inttoptr i64 %1601 to double*
  %1604 = load double, double* %1603, align 8
  %1605 = fadd double %1556, %1604
  store double %1605, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %1606 = add i64 %1557, 40
  %1607 = add i64 %403, 99
  store i64 %1607, i64* %PC, align 8
  %1608 = inttoptr i64 %1606 to i64*
  %1609 = load i64, i64* %1608, align 8
  store i64 %1609, i64* %RAX, align 8, !tbaa !2428
  %1610 = add i64 %403, 103
  store i64 %1610, i64* %PC, align 8
  %1611 = load i32, i32* %1564, align 4
  %1612 = sext i32 %1611 to i64
  %1613 = mul nsw i64 %1612, 33800
  store i64 %1613, i64* %RCX, align 8, !tbaa !2428
  %1614 = lshr i64 %1613, 63
  %1615 = add i64 %1613, %1609
  store i64 %1615, i64* %RAX, align 8, !tbaa !2428
  %1616 = icmp ult i64 %1615, %1609
  %1617 = icmp ult i64 %1615, %1613
  %1618 = or i1 %1616, %1617
  %1619 = zext i1 %1618 to i8
  store i8 %1619, i8* %43, align 1, !tbaa !2432
  %1620 = trunc i64 %1615 to i32
  %1621 = and i32 %1620, 255
  %1622 = tail call i32 @llvm.ctpop.i32(i32 %1621) #8
  %1623 = trunc i32 %1622 to i8
  %1624 = and i8 %1623, 1
  %1625 = xor i8 %1624, 1
  store i8 %1625, i8* %50, align 1, !tbaa !2446
  %1626 = xor i64 %1613, %1609
  %1627 = xor i64 %1626, %1615
  %1628 = lshr i64 %1627, 4
  %1629 = trunc i64 %1628 to i8
  %1630 = and i8 %1629, 1
  store i8 %1630, i8* %55, align 1, !tbaa !2447
  %1631 = icmp eq i64 %1615, 0
  %1632 = zext i1 %1631 to i8
  store i8 %1632, i8* %58, align 1, !tbaa !2448
  %1633 = lshr i64 %1615, 63
  %1634 = trunc i64 %1633 to i8
  store i8 %1634, i8* %61, align 1, !tbaa !2449
  %1635 = lshr i64 %1609, 63
  %1636 = xor i64 %1633, %1635
  %1637 = xor i64 %1633, %1614
  %1638 = add nuw nsw i64 %1636, %1637
  %1639 = icmp eq i64 %1638, 2
  %1640 = zext i1 %1639 to i8
  store i8 %1640, i8* %67, align 1, !tbaa !2450
  %1641 = load i64, i64* %RBP, align 8
  %1642 = add i64 %1641, -52
  %1643 = add i64 %403, 117
  store i64 %1643, i64* %PC, align 8
  %1644 = inttoptr i64 %1642 to i32*
  %1645 = load i32, i32* %1644, align 4
  %1646 = sext i32 %1645 to i64
  %1647 = mul nsw i64 %1646, 520
  store i64 %1647, i64* %RCX, align 8, !tbaa !2428
  %1648 = lshr i64 %1647, 63
  %1649 = add i64 %1647, %1615
  store i64 %1649, i64* %RAX, align 8, !tbaa !2428
  %1650 = icmp ult i64 %1649, %1615
  %1651 = icmp ult i64 %1649, %1647
  %1652 = or i1 %1650, %1651
  %1653 = zext i1 %1652 to i8
  store i8 %1653, i8* %43, align 1, !tbaa !2432
  %1654 = trunc i64 %1649 to i32
  %1655 = and i32 %1654, 255
  %1656 = tail call i32 @llvm.ctpop.i32(i32 %1655) #8
  %1657 = trunc i32 %1656 to i8
  %1658 = and i8 %1657, 1
  %1659 = xor i8 %1658, 1
  store i8 %1659, i8* %50, align 1, !tbaa !2446
  %1660 = xor i64 %1647, %1615
  %1661 = xor i64 %1660, %1649
  %1662 = lshr i64 %1661, 4
  %1663 = trunc i64 %1662 to i8
  %1664 = and i8 %1663, 1
  store i8 %1664, i8* %55, align 1, !tbaa !2447
  %1665 = icmp eq i64 %1649, 0
  %1666 = zext i1 %1665 to i8
  store i8 %1666, i8* %58, align 1, !tbaa !2448
  %1667 = lshr i64 %1649, 63
  %1668 = trunc i64 %1667 to i8
  store i8 %1668, i8* %61, align 1, !tbaa !2449
  %1669 = xor i64 %1667, %1633
  %1670 = xor i64 %1667, %1648
  %1671 = add nuw nsw i64 %1669, %1670
  %1672 = icmp eq i64 %1671, 2
  %1673 = zext i1 %1672 to i8
  store i8 %1673, i8* %67, align 1, !tbaa !2450
  %1674 = add i64 %1641, -48
  %1675 = add i64 %403, 131
  store i64 %1675, i64* %PC, align 8
  %1676 = inttoptr i64 %1674 to i32*
  %1677 = load i32, i32* %1676, align 4
  %1678 = sext i32 %1677 to i64
  store i64 %1678, i64* %RCX, align 8, !tbaa !2428
  %1679 = shl nsw i64 %1678, 3
  %1680 = add i64 %1679, %1649
  %1681 = add i64 %403, 136
  store i64 %1681, i64* %PC, align 8
  %1682 = load double, double* %230, align 1
  %1683 = inttoptr i64 %1680 to double*
  %1684 = load double, double* %1683, align 8
  %1685 = fsub double %1682, %1684
  store double %1685, double* %230, align 1, !tbaa !2452
  %1686 = add i64 %1641, -96
  %1687 = add i64 %403, 140
  store i64 %1687, i64* %PC, align 8
  %1688 = inttoptr i64 %1686 to i64*
  %1689 = load i64, i64* %1688, align 8
  store i64 %1689, i64* %RAX, align 8, !tbaa !2428
  %1690 = add i64 %1641, -100
  %1691 = add i64 %403, 144
  store i64 %1691, i64* %PC, align 8
  %1692 = inttoptr i64 %1690 to i32*
  %1693 = load i32, i32* %1692, align 4
  %1694 = sext i32 %1693 to i64
  %1695 = mul nsw i64 %1694, 520
  store i64 %1695, i64* %RCX, align 8, !tbaa !2428
  %1696 = lshr i64 %1695, 63
  %1697 = add i64 %1695, %1689
  store i64 %1697, i64* %RAX, align 8, !tbaa !2428
  %1698 = icmp ult i64 %1697, %1689
  %1699 = icmp ult i64 %1697, %1695
  %1700 = or i1 %1698, %1699
  %1701 = zext i1 %1700 to i8
  store i8 %1701, i8* %43, align 1, !tbaa !2432
  %1702 = trunc i64 %1697 to i32
  %1703 = and i32 %1702, 255
  %1704 = tail call i32 @llvm.ctpop.i32(i32 %1703) #8
  %1705 = trunc i32 %1704 to i8
  %1706 = and i8 %1705, 1
  %1707 = xor i8 %1706, 1
  store i8 %1707, i8* %50, align 1, !tbaa !2446
  %1708 = xor i64 %1695, %1689
  %1709 = xor i64 %1708, %1697
  %1710 = lshr i64 %1709, 4
  %1711 = trunc i64 %1710 to i8
  %1712 = and i8 %1711, 1
  store i8 %1712, i8* %55, align 1, !tbaa !2447
  %1713 = icmp eq i64 %1697, 0
  %1714 = zext i1 %1713 to i8
  store i8 %1714, i8* %58, align 1, !tbaa !2448
  %1715 = lshr i64 %1697, 63
  %1716 = trunc i64 %1715 to i8
  store i8 %1716, i8* %61, align 1, !tbaa !2449
  %1717 = lshr i64 %1689, 63
  %1718 = xor i64 %1715, %1717
  %1719 = xor i64 %1715, %1696
  %1720 = add nuw nsw i64 %1718, %1719
  %1721 = icmp eq i64 %1720, 2
  %1722 = zext i1 %1721 to i8
  store i8 %1722, i8* %67, align 1, !tbaa !2450
  %1723 = load i64, i64* %RBP, align 8
  %1724 = add i64 %1723, -104
  %1725 = add i64 %403, 158
  store i64 %1725, i64* %PC, align 8
  %1726 = inttoptr i64 %1724 to i32*
  %1727 = load i32, i32* %1726, align 4
  %1728 = sext i32 %1727 to i64
  store i64 %1728, i64* %RCX, align 8, !tbaa !2428
  %1729 = shl nsw i64 %1728, 3
  %1730 = add i64 %1729, %1697
  %1731 = add i64 %403, 163
  store i64 %1731, i64* %PC, align 8
  %1732 = inttoptr i64 %1730 to double*
  store double %1685, double* %1732, align 8
  %1733 = load i64, i64* %RBP, align 8
  %1734 = add i64 %1733, 88
  %1735 = load i64, i64* %PC, align 8
  %1736 = add i64 %1735, 4
  store i64 %1736, i64* %PC, align 8
  %1737 = inttoptr i64 %1734 to i64*
  %1738 = load i64, i64* %1737, align 8
  store i64 %1738, i64* %RAX, align 8, !tbaa !2428
  %1739 = add i64 %1733, -52
  %1740 = add i64 %1735, 8
  store i64 %1740, i64* %PC, align 8
  %1741 = inttoptr i64 %1739 to i32*
  %1742 = load i32, i32* %1741, align 4
  %1743 = sext i32 %1742 to i64
  store i64 %1743, i64* %RCX, align 8, !tbaa !2428
  %1744 = shl nsw i64 %1743, 3
  %1745 = add i64 %1744, %1738
  %1746 = add i64 %1735, 13
  store i64 %1746, i64* %PC, align 8
  %1747 = inttoptr i64 %1745 to double*
  %1748 = load double, double* %1747, align 8
  store double %1748, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %1749 = add i64 %1733, 96
  %1750 = add i64 %1735, 17
  store i64 %1750, i64* %PC, align 8
  %1751 = inttoptr i64 %1749 to i64*
  %1752 = load i64, i64* %1751, align 8
  store i64 %1752, i64* %RAX, align 8, !tbaa !2428
  %1753 = add i64 %1735, 21
  store i64 %1753, i64* %PC, align 8
  %1754 = load i32, i32* %1741, align 4
  %1755 = sext i32 %1754 to i64
  store i64 %1755, i64* %RCX, align 8, !tbaa !2428
  %1756 = shl nsw i64 %1755, 3
  %1757 = add i64 %1756, %1752
  %1758 = add i64 %1735, 26
  store i64 %1758, i64* %PC, align 8
  %1759 = inttoptr i64 %1757 to double*
  %1760 = load double, double* %1759, align 8
  %1761 = fdiv double %1748, %1760
  store double %1761, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %1762 = add i64 %1733, 24
  %1763 = add i64 %1735, 30
  store i64 %1763, i64* %PC, align 8
  %1764 = inttoptr i64 %1762 to i64*
  %1765 = load i64, i64* %1764, align 8
  store i64 %1765, i64* %RAX, align 8, !tbaa !2428
  %1766 = add i64 %1733, -100
  %1767 = add i64 %1735, 34
  store i64 %1767, i64* %PC, align 8
  %1768 = inttoptr i64 %1766 to i32*
  %1769 = load i32, i32* %1768, align 4
  %1770 = sext i32 %1769 to i64
  %1771 = mul nsw i64 %1770, 33800
  store i64 %1771, i64* %RCX, align 8, !tbaa !2428
  %1772 = lshr i64 %1771, 63
  %1773 = add i64 %1771, %1765
  store i64 %1773, i64* %RAX, align 8, !tbaa !2428
  %1774 = icmp ult i64 %1773, %1765
  %1775 = icmp ult i64 %1773, %1771
  %1776 = or i1 %1774, %1775
  %1777 = zext i1 %1776 to i8
  store i8 %1777, i8* %43, align 1, !tbaa !2432
  %1778 = trunc i64 %1773 to i32
  %1779 = and i32 %1778, 255
  %1780 = tail call i32 @llvm.ctpop.i32(i32 %1779) #8
  %1781 = trunc i32 %1780 to i8
  %1782 = and i8 %1781, 1
  %1783 = xor i8 %1782, 1
  store i8 %1783, i8* %50, align 1, !tbaa !2446
  %1784 = xor i64 %1771, %1765
  %1785 = xor i64 %1784, %1773
  %1786 = lshr i64 %1785, 4
  %1787 = trunc i64 %1786 to i8
  %1788 = and i8 %1787, 1
  store i8 %1788, i8* %55, align 1, !tbaa !2447
  %1789 = icmp eq i64 %1773, 0
  %1790 = zext i1 %1789 to i8
  store i8 %1790, i8* %58, align 1, !tbaa !2448
  %1791 = lshr i64 %1773, 63
  %1792 = trunc i64 %1791 to i8
  store i8 %1792, i8* %61, align 1, !tbaa !2449
  %1793 = lshr i64 %1765, 63
  %1794 = xor i64 %1791, %1793
  %1795 = xor i64 %1791, %1772
  %1796 = add nuw nsw i64 %1794, %1795
  %1797 = icmp eq i64 %1796, 2
  %1798 = zext i1 %1797 to i8
  store i8 %1798, i8* %67, align 1, !tbaa !2450
  %1799 = load i64, i64* %RBP, align 8
  %1800 = add i64 %1799, -52
  %1801 = add i64 %1735, 48
  store i64 %1801, i64* %PC, align 8
  %1802 = inttoptr i64 %1800 to i32*
  %1803 = load i32, i32* %1802, align 4
  %1804 = sext i32 %1803 to i64
  %1805 = mul nsw i64 %1804, 520
  store i64 %1805, i64* %RCX, align 8, !tbaa !2428
  %1806 = lshr i64 %1805, 63
  %1807 = add i64 %1805, %1773
  store i64 %1807, i64* %RAX, align 8, !tbaa !2428
  %1808 = icmp ult i64 %1807, %1773
  %1809 = icmp ult i64 %1807, %1805
  %1810 = or i1 %1808, %1809
  %1811 = zext i1 %1810 to i8
  store i8 %1811, i8* %43, align 1, !tbaa !2432
  %1812 = trunc i64 %1807 to i32
  %1813 = and i32 %1812, 255
  %1814 = tail call i32 @llvm.ctpop.i32(i32 %1813) #8
  %1815 = trunc i32 %1814 to i8
  %1816 = and i8 %1815, 1
  %1817 = xor i8 %1816, 1
  store i8 %1817, i8* %50, align 1, !tbaa !2446
  %1818 = xor i64 %1805, %1773
  %1819 = xor i64 %1818, %1807
  %1820 = lshr i64 %1819, 4
  %1821 = trunc i64 %1820 to i8
  %1822 = and i8 %1821, 1
  store i8 %1822, i8* %55, align 1, !tbaa !2447
  %1823 = icmp eq i64 %1807, 0
  %1824 = zext i1 %1823 to i8
  store i8 %1824, i8* %58, align 1, !tbaa !2448
  %1825 = lshr i64 %1807, 63
  %1826 = trunc i64 %1825 to i8
  store i8 %1826, i8* %61, align 1, !tbaa !2449
  %1827 = xor i64 %1825, %1791
  %1828 = xor i64 %1825, %1806
  %1829 = add nuw nsw i64 %1827, %1828
  %1830 = icmp eq i64 %1829, 2
  %1831 = zext i1 %1830 to i8
  store i8 %1831, i8* %67, align 1, !tbaa !2450
  %1832 = add i64 %1799, -48
  %1833 = add i64 %1735, 62
  store i64 %1833, i64* %PC, align 8
  %1834 = inttoptr i64 %1832 to i32*
  %1835 = load i32, i32* %1834, align 4
  %1836 = sext i32 %1835 to i64
  store i64 %1836, i64* %RCX, align 8, !tbaa !2428
  %1837 = shl nsw i64 %1836, 3
  %1838 = add i64 %1837, %1807
  %1839 = add i64 %1735, 67
  store i64 %1839, i64* %PC, align 8
  %1840 = load double, double* %230, align 1
  %1841 = inttoptr i64 %1838 to double*
  %1842 = load double, double* %1841, align 8
  %1843 = fmul double %1840, %1842
  store double %1843, double* %230, align 1, !tbaa !2452
  %1844 = add i64 %1799, -72
  %1845 = add i64 %1735, 72
  store i64 %1845, i64* %PC, align 8
  %1846 = inttoptr i64 %1844 to double*
  %1847 = load double, double* %1846, align 8
  store double %1847, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %1848 = add i64 %1799, 96
  %1849 = add i64 %1735, 76
  store i64 %1849, i64* %PC, align 8
  %1850 = inttoptr i64 %1848 to i64*
  %1851 = load i64, i64* %1850, align 8
  store i64 %1851, i64* %RAX, align 8, !tbaa !2428
  %1852 = add i64 %1735, 80
  store i64 %1852, i64* %PC, align 8
  %1853 = load i32, i32* %1802, align 4
  %1854 = sext i32 %1853 to i64
  store i64 %1854, i64* %RCX, align 8, !tbaa !2428
  %1855 = shl nsw i64 %1854, 3
  %1856 = add i64 %1855, %1851
  %1857 = add i64 %1735, 85
  store i64 %1857, i64* %PC, align 8
  %1858 = inttoptr i64 %1856 to double*
  %1859 = load double, double* %1858, align 8
  %1860 = fdiv double %1847, %1859
  store double %1860, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %1861 = load i64, i64* %RBP, align 8
  %1862 = add i64 %1861, -96
  %1863 = add i64 %1735, 89
  store i64 %1863, i64* %PC, align 8
  %1864 = inttoptr i64 %1862 to i64*
  %1865 = load i64, i64* %1864, align 8
  store i64 %1865, i64* %RAX, align 8, !tbaa !2428
  %1866 = add i64 %1861, -100
  %1867 = add i64 %1735, 93
  store i64 %1867, i64* %PC, align 8
  %1868 = inttoptr i64 %1866 to i32*
  %1869 = load i32, i32* %1868, align 4
  %1870 = sext i32 %1869 to i64
  %1871 = mul nsw i64 %1870, 520
  store i64 %1871, i64* %RCX, align 8, !tbaa !2428
  %1872 = lshr i64 %1871, 63
  %1873 = add i64 %1871, %1865
  store i64 %1873, i64* %RAX, align 8, !tbaa !2428
  %1874 = icmp ult i64 %1873, %1865
  %1875 = icmp ult i64 %1873, %1871
  %1876 = or i1 %1874, %1875
  %1877 = zext i1 %1876 to i8
  store i8 %1877, i8* %43, align 1, !tbaa !2432
  %1878 = trunc i64 %1873 to i32
  %1879 = and i32 %1878, 255
  %1880 = tail call i32 @llvm.ctpop.i32(i32 %1879) #8
  %1881 = trunc i32 %1880 to i8
  %1882 = and i8 %1881, 1
  %1883 = xor i8 %1882, 1
  store i8 %1883, i8* %50, align 1, !tbaa !2446
  %1884 = xor i64 %1871, %1865
  %1885 = xor i64 %1884, %1873
  %1886 = lshr i64 %1885, 4
  %1887 = trunc i64 %1886 to i8
  %1888 = and i8 %1887, 1
  store i8 %1888, i8* %55, align 1, !tbaa !2447
  %1889 = icmp eq i64 %1873, 0
  %1890 = zext i1 %1889 to i8
  store i8 %1890, i8* %58, align 1, !tbaa !2448
  %1891 = lshr i64 %1873, 63
  %1892 = trunc i64 %1891 to i8
  store i8 %1892, i8* %61, align 1, !tbaa !2449
  %1893 = lshr i64 %1865, 63
  %1894 = xor i64 %1891, %1893
  %1895 = xor i64 %1891, %1872
  %1896 = add nuw nsw i64 %1894, %1895
  %1897 = icmp eq i64 %1896, 2
  %1898 = zext i1 %1897 to i8
  store i8 %1898, i8* %67, align 1, !tbaa !2450
  %1899 = add i64 %1861, -104
  %1900 = add i64 %1735, 107
  store i64 %1900, i64* %PC, align 8
  %1901 = inttoptr i64 %1899 to i32*
  %1902 = load i32, i32* %1901, align 4
  %1903 = sext i32 %1902 to i64
  store i64 %1903, i64* %RCX, align 8, !tbaa !2428
  %1904 = shl nsw i64 %1903, 3
  %1905 = add i64 %1904, %1873
  %1906 = add i64 %1735, 112
  store i64 %1906, i64* %PC, align 8
  %1907 = inttoptr i64 %1905 to double*
  %1908 = load double, double* %1907, align 8
  %1909 = fmul double %1860, %1908
  store double %1909, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %1910 = load double, double* %230, align 1
  %1911 = fsub double %1910, %1909
  store double %1911, double* %230, align 1, !tbaa !2452
  %1912 = add i64 %1861, 16
  %1913 = add i64 %1735, 120
  store i64 %1913, i64* %PC, align 8
  %1914 = inttoptr i64 %1912 to i64*
  %1915 = load i64, i64* %1914, align 8
  store i64 %1915, i64* %RAX, align 8, !tbaa !2428
  %1916 = load i64, i64* %RBP, align 8
  %1917 = add i64 %1916, -100
  %1918 = add i64 %1735, 124
  store i64 %1918, i64* %PC, align 8
  %1919 = inttoptr i64 %1917 to i32*
  %1920 = load i32, i32* %1919, align 4
  %1921 = sext i32 %1920 to i64
  %1922 = mul nsw i64 %1921, 520
  store i64 %1922, i64* %RCX, align 8, !tbaa !2428
  %1923 = lshr i64 %1922, 63
  %1924 = add i64 %1922, %1915
  store i64 %1924, i64* %RAX, align 8, !tbaa !2428
  %1925 = icmp ult i64 %1924, %1915
  %1926 = icmp ult i64 %1924, %1922
  %1927 = or i1 %1925, %1926
  %1928 = zext i1 %1927 to i8
  store i8 %1928, i8* %43, align 1, !tbaa !2432
  %1929 = trunc i64 %1924 to i32
  %1930 = and i32 %1929, 255
  %1931 = tail call i32 @llvm.ctpop.i32(i32 %1930) #8
  %1932 = trunc i32 %1931 to i8
  %1933 = and i8 %1932, 1
  %1934 = xor i8 %1933, 1
  store i8 %1934, i8* %50, align 1, !tbaa !2446
  %1935 = xor i64 %1922, %1915
  %1936 = xor i64 %1935, %1924
  %1937 = lshr i64 %1936, 4
  %1938 = trunc i64 %1937 to i8
  %1939 = and i8 %1938, 1
  store i8 %1939, i8* %55, align 1, !tbaa !2447
  %1940 = icmp eq i64 %1924, 0
  %1941 = zext i1 %1940 to i8
  store i8 %1941, i8* %58, align 1, !tbaa !2448
  %1942 = lshr i64 %1924, 63
  %1943 = trunc i64 %1942 to i8
  store i8 %1943, i8* %61, align 1, !tbaa !2449
  %1944 = lshr i64 %1915, 63
  %1945 = xor i64 %1942, %1944
  %1946 = xor i64 %1942, %1923
  %1947 = add nuw nsw i64 %1945, %1946
  %1948 = icmp eq i64 %1947, 2
  %1949 = zext i1 %1948 to i8
  store i8 %1949, i8* %67, align 1, !tbaa !2450
  %1950 = add i64 %1916, -104
  %1951 = add i64 %1735, 138
  store i64 %1951, i64* %PC, align 8
  %1952 = inttoptr i64 %1950 to i32*
  %1953 = load i32, i32* %1952, align 4
  %1954 = sext i32 %1953 to i64
  store i64 %1954, i64* %RCX, align 8, !tbaa !2428
  %1955 = shl nsw i64 %1954, 3
  %1956 = add i64 %1955, %1924
  %1957 = add i64 %1735, 143
  store i64 %1957, i64* %PC, align 8
  %1958 = inttoptr i64 %1956 to double*
  store double %1911, double* %1958, align 8
  %1959 = load i64, i64* %RBP, align 8
  %1960 = add i64 %1959, 72
  %1961 = load i64, i64* %PC, align 8
  %1962 = add i64 %1961, 4
  store i64 %1962, i64* %PC, align 8
  %1963 = inttoptr i64 %1960 to i64*
  %1964 = load i64, i64* %1963, align 8
  store i64 %1964, i64* %RAX, align 8, !tbaa !2428
  %1965 = add i64 %1959, -48
  %1966 = add i64 %1961, 8
  store i64 %1966, i64* %PC, align 8
  %1967 = inttoptr i64 %1965 to i32*
  %1968 = load i32, i32* %1967, align 4
  %1969 = sext i32 %1968 to i64
  store i64 %1969, i64* %RCX, align 8, !tbaa !2428
  %1970 = shl nsw i64 %1969, 3
  %1971 = add i64 %1970, %1964
  %1972 = add i64 %1961, 13
  store i64 %1972, i64* %PC, align 8
  %1973 = inttoptr i64 %1971 to double*
  %1974 = load double, double* %1973, align 8
  store double %1974, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %1975 = add i64 %1959, 80
  %1976 = add i64 %1961, 17
  store i64 %1976, i64* %PC, align 8
  %1977 = inttoptr i64 %1975 to i64*
  %1978 = load i64, i64* %1977, align 8
  store i64 %1978, i64* %RAX, align 8, !tbaa !2428
  %1979 = add i64 %1961, 21
  store i64 %1979, i64* %PC, align 8
  %1980 = load i32, i32* %1967, align 4
  %1981 = sext i32 %1980 to i64
  store i64 %1981, i64* %RCX, align 8, !tbaa !2428
  %1982 = shl nsw i64 %1981, 3
  %1983 = add i64 %1982, %1978
  %1984 = add i64 %1961, 26
  store i64 %1984, i64* %PC, align 8
  %1985 = inttoptr i64 %1983 to double*
  %1986 = load double, double* %1985, align 8
  %1987 = fdiv double %1974, %1986
  store double %1987, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %1988 = add i64 %1959, 48
  %1989 = add i64 %1961, 30
  store i64 %1989, i64* %PC, align 8
  %1990 = inttoptr i64 %1988 to i64*
  %1991 = load i64, i64* %1990, align 8
  store i64 %1991, i64* %RAX, align 8, !tbaa !2428
  %1992 = add i64 %1959, -100
  %1993 = add i64 %1961, 34
  store i64 %1993, i64* %PC, align 8
  %1994 = inttoptr i64 %1992 to i32*
  %1995 = load i32, i32* %1994, align 4
  %1996 = sext i32 %1995 to i64
  %1997 = mul nsw i64 %1996, 33800
  store i64 %1997, i64* %RCX, align 8, !tbaa !2428
  %1998 = lshr i64 %1997, 63
  %1999 = add i64 %1997, %1991
  store i64 %1999, i64* %RAX, align 8, !tbaa !2428
  %2000 = icmp ult i64 %1999, %1991
  %2001 = icmp ult i64 %1999, %1997
  %2002 = or i1 %2000, %2001
  %2003 = zext i1 %2002 to i8
  store i8 %2003, i8* %43, align 1, !tbaa !2432
  %2004 = trunc i64 %1999 to i32
  %2005 = and i32 %2004, 255
  %2006 = tail call i32 @llvm.ctpop.i32(i32 %2005) #8
  %2007 = trunc i32 %2006 to i8
  %2008 = and i8 %2007, 1
  %2009 = xor i8 %2008, 1
  store i8 %2009, i8* %50, align 1, !tbaa !2446
  %2010 = xor i64 %1997, %1991
  %2011 = xor i64 %2010, %1999
  %2012 = lshr i64 %2011, 4
  %2013 = trunc i64 %2012 to i8
  %2014 = and i8 %2013, 1
  store i8 %2014, i8* %55, align 1, !tbaa !2447
  %2015 = icmp eq i64 %1999, 0
  %2016 = zext i1 %2015 to i8
  store i8 %2016, i8* %58, align 1, !tbaa !2448
  %2017 = lshr i64 %1999, 63
  %2018 = trunc i64 %2017 to i8
  store i8 %2018, i8* %61, align 1, !tbaa !2449
  %2019 = lshr i64 %1991, 63
  %2020 = xor i64 %2017, %2019
  %2021 = xor i64 %2017, %1998
  %2022 = add nuw nsw i64 %2020, %2021
  %2023 = icmp eq i64 %2022, 2
  %2024 = zext i1 %2023 to i8
  store i8 %2024, i8* %67, align 1, !tbaa !2450
  %2025 = load i64, i64* %RBP, align 8
  %2026 = add i64 %2025, -52
  %2027 = add i64 %1961, 48
  store i64 %2027, i64* %PC, align 8
  %2028 = inttoptr i64 %2026 to i32*
  %2029 = load i32, i32* %2028, align 4
  %2030 = sext i32 %2029 to i64
  %2031 = mul nsw i64 %2030, 520
  store i64 %2031, i64* %RCX, align 8, !tbaa !2428
  %2032 = lshr i64 %2031, 63
  %2033 = add i64 %2031, %1999
  store i64 %2033, i64* %RAX, align 8, !tbaa !2428
  %2034 = icmp ult i64 %2033, %1999
  %2035 = icmp ult i64 %2033, %2031
  %2036 = or i1 %2034, %2035
  %2037 = zext i1 %2036 to i8
  store i8 %2037, i8* %43, align 1, !tbaa !2432
  %2038 = trunc i64 %2033 to i32
  %2039 = and i32 %2038, 255
  %2040 = tail call i32 @llvm.ctpop.i32(i32 %2039) #8
  %2041 = trunc i32 %2040 to i8
  %2042 = and i8 %2041, 1
  %2043 = xor i8 %2042, 1
  store i8 %2043, i8* %50, align 1, !tbaa !2446
  %2044 = xor i64 %2031, %1999
  %2045 = xor i64 %2044, %2033
  %2046 = lshr i64 %2045, 4
  %2047 = trunc i64 %2046 to i8
  %2048 = and i8 %2047, 1
  store i8 %2048, i8* %55, align 1, !tbaa !2447
  %2049 = icmp eq i64 %2033, 0
  %2050 = zext i1 %2049 to i8
  store i8 %2050, i8* %58, align 1, !tbaa !2448
  %2051 = lshr i64 %2033, 63
  %2052 = trunc i64 %2051 to i8
  store i8 %2052, i8* %61, align 1, !tbaa !2449
  %2053 = xor i64 %2051, %2017
  %2054 = xor i64 %2051, %2032
  %2055 = add nuw nsw i64 %2053, %2054
  %2056 = icmp eq i64 %2055, 2
  %2057 = zext i1 %2056 to i8
  store i8 %2057, i8* %67, align 1, !tbaa !2450
  %2058 = add i64 %2025, -48
  %2059 = add i64 %1961, 62
  store i64 %2059, i64* %PC, align 8
  %2060 = inttoptr i64 %2058 to i32*
  %2061 = load i32, i32* %2060, align 4
  %2062 = sext i32 %2061 to i64
  store i64 %2062, i64* %RCX, align 8, !tbaa !2428
  %2063 = shl nsw i64 %2062, 3
  %2064 = add i64 %2063, %2033
  %2065 = add i64 %1961, 67
  store i64 %2065, i64* %PC, align 8
  %2066 = load double, double* %230, align 1
  %2067 = inttoptr i64 %2064 to double*
  %2068 = load double, double* %2067, align 8
  %2069 = fmul double %2066, %2068
  store double %2069, double* %230, align 1, !tbaa !2452
  %2070 = add i64 %2025, -64
  %2071 = add i64 %1961, 72
  store i64 %2071, i64* %PC, align 8
  %2072 = inttoptr i64 %2070 to double*
  %2073 = load double, double* %2072, align 8
  store double %2073, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %2074 = add i64 %2025, 64
  %2075 = add i64 %1961, 76
  store i64 %2075, i64* %PC, align 8
  %2076 = inttoptr i64 %2074 to i64*
  %2077 = load i64, i64* %2076, align 8
  store i64 %2077, i64* %RAX, align 8, !tbaa !2428
  %2078 = add i64 %2025, -100
  %2079 = add i64 %1961, 80
  store i64 %2079, i64* %PC, align 8
  %2080 = inttoptr i64 %2078 to i32*
  %2081 = load i32, i32* %2080, align 4
  %2082 = sext i32 %2081 to i64
  store i64 %2082, i64* %RCX, align 8, !tbaa !2428
  %2083 = shl nsw i64 %2082, 3
  %2084 = add i64 %2083, %2077
  %2085 = add i64 %1961, 85
  store i64 %2085, i64* %PC, align 8
  %2086 = inttoptr i64 %2084 to double*
  %2087 = load double, double* %2086, align 8
  %2088 = fmul double %2073, %2087
  store double %2088, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %2089 = load i64, i64* %RBP, align 8
  %2090 = add i64 %2089, 80
  %2091 = add i64 %1961, 89
  store i64 %2091, i64* %PC, align 8
  %2092 = inttoptr i64 %2090 to i64*
  %2093 = load i64, i64* %2092, align 8
  store i64 %2093, i64* %RAX, align 8, !tbaa !2428
  %2094 = add i64 %2089, -48
  %2095 = add i64 %1961, 93
  store i64 %2095, i64* %PC, align 8
  %2096 = inttoptr i64 %2094 to i32*
  %2097 = load i32, i32* %2096, align 4
  %2098 = sext i32 %2097 to i64
  store i64 %2098, i64* %RCX, align 8, !tbaa !2428
  %2099 = shl nsw i64 %2098, 3
  %2100 = add i64 %2099, %2093
  %2101 = add i64 %1961, 98
  store i64 %2101, i64* %PC, align 8
  %2102 = inttoptr i64 %2100 to double*
  %2103 = load double, double* %2102, align 8
  %2104 = fdiv double %2088, %2103
  store double %2104, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %2105 = add i64 %2089, 16
  %2106 = add i64 %1961, 102
  store i64 %2106, i64* %PC, align 8
  %2107 = inttoptr i64 %2105 to i64*
  %2108 = load i64, i64* %2107, align 8
  store i64 %2108, i64* %RAX, align 8, !tbaa !2428
  %2109 = add i64 %2089, -100
  %2110 = add i64 %1961, 106
  store i64 %2110, i64* %PC, align 8
  %2111 = inttoptr i64 %2109 to i32*
  %2112 = load i32, i32* %2111, align 4
  %2113 = sext i32 %2112 to i64
  %2114 = mul nsw i64 %2113, 520
  store i64 %2114, i64* %RCX, align 8, !tbaa !2428
  %2115 = lshr i64 %2114, 63
  %2116 = add i64 %2114, %2108
  store i64 %2116, i64* %RAX, align 8, !tbaa !2428
  %2117 = icmp ult i64 %2116, %2108
  %2118 = icmp ult i64 %2116, %2114
  %2119 = or i1 %2117, %2118
  %2120 = zext i1 %2119 to i8
  store i8 %2120, i8* %43, align 1, !tbaa !2432
  %2121 = trunc i64 %2116 to i32
  %2122 = and i32 %2121, 255
  %2123 = tail call i32 @llvm.ctpop.i32(i32 %2122) #8
  %2124 = trunc i32 %2123 to i8
  %2125 = and i8 %2124, 1
  %2126 = xor i8 %2125, 1
  store i8 %2126, i8* %50, align 1, !tbaa !2446
  %2127 = xor i64 %2114, %2108
  %2128 = xor i64 %2127, %2116
  %2129 = lshr i64 %2128, 4
  %2130 = trunc i64 %2129 to i8
  %2131 = and i8 %2130, 1
  store i8 %2131, i8* %55, align 1, !tbaa !2447
  %2132 = icmp eq i64 %2116, 0
  %2133 = zext i1 %2132 to i8
  store i8 %2133, i8* %58, align 1, !tbaa !2448
  %2134 = lshr i64 %2116, 63
  %2135 = trunc i64 %2134 to i8
  store i8 %2135, i8* %61, align 1, !tbaa !2449
  %2136 = lshr i64 %2108, 63
  %2137 = xor i64 %2134, %2136
  %2138 = xor i64 %2134, %2115
  %2139 = add nuw nsw i64 %2137, %2138
  %2140 = icmp eq i64 %2139, 2
  %2141 = zext i1 %2140 to i8
  store i8 %2141, i8* %67, align 1, !tbaa !2450
  %2142 = add i64 %2089, -104
  %2143 = add i64 %1961, 120
  store i64 %2143, i64* %PC, align 8
  %2144 = inttoptr i64 %2142 to i32*
  %2145 = load i32, i32* %2144, align 4
  %2146 = sext i32 %2145 to i64
  store i64 %2146, i64* %RCX, align 8, !tbaa !2428
  %2147 = shl nsw i64 %2146, 3
  %2148 = add i64 %2147, %2116
  %2149 = add i64 %1961, 125
  store i64 %2149, i64* %PC, align 8
  %2150 = inttoptr i64 %2148 to double*
  %2151 = load double, double* %2150, align 8
  %2152 = fmul double %2104, %2151
  store double %2152, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %2153 = load double, double* %230, align 1
  %2154 = fadd double %2153, %2152
  store double %2154, double* %230, align 1, !tbaa !2452
  %2155 = load i64, i64* %RBP, align 8
  %2156 = add i64 %2155, -64
  %2157 = add i64 %1961, 134
  store i64 %2157, i64* %PC, align 8
  %2158 = inttoptr i64 %2156 to double*
  %2159 = load double, double* %2158, align 8
  store double %2159, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %2160 = add i64 %2155, 56
  %2161 = add i64 %1961, 138
  store i64 %2161, i64* %PC, align 8
  %2162 = inttoptr i64 %2160 to i64*
  %2163 = load i64, i64* %2162, align 8
  store i64 %2163, i64* %RAX, align 8, !tbaa !2428
  %2164 = add i64 %2155, -100
  %2165 = add i64 %1961, 142
  store i64 %2165, i64* %PC, align 8
  %2166 = inttoptr i64 %2164 to i32*
  %2167 = load i32, i32* %2166, align 4
  %2168 = sext i32 %2167 to i64
  store i64 %2168, i64* %RCX, align 8, !tbaa !2428
  %2169 = shl nsw i64 %2168, 3
  %2170 = add i64 %2169, %2163
  %2171 = add i64 %1961, 147
  store i64 %2171, i64* %PC, align 8
  %2172 = inttoptr i64 %2170 to double*
  %2173 = load double, double* %2172, align 8
  %2174 = fmul double %2159, %2173
  store double %2174, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %2175 = add i64 %2155, 80
  %2176 = add i64 %1961, 151
  store i64 %2176, i64* %PC, align 8
  %2177 = inttoptr i64 %2175 to i64*
  %2178 = load i64, i64* %2177, align 8
  store i64 %2178, i64* %RAX, align 8, !tbaa !2428
  %2179 = add i64 %2155, -48
  %2180 = add i64 %1961, 155
  store i64 %2180, i64* %PC, align 8
  %2181 = inttoptr i64 %2179 to i32*
  %2182 = load i32, i32* %2181, align 4
  %2183 = sext i32 %2182 to i64
  store i64 %2183, i64* %RCX, align 8, !tbaa !2428
  %2184 = shl nsw i64 %2183, 3
  %2185 = add i64 %2184, %2178
  %2186 = add i64 %1961, 160
  store i64 %2186, i64* %PC, align 8
  %2187 = inttoptr i64 %2185 to double*
  %2188 = load double, double* %2187, align 8
  %2189 = fdiv double %2174, %2188
  store double %2189, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %2190 = add i64 %2155, 24
  %2191 = add i64 %1961, 164
  store i64 %2191, i64* %PC, align 8
  %2192 = inttoptr i64 %2190 to i64*
  %2193 = load i64, i64* %2192, align 8
  store i64 %2193, i64* %RAX, align 8, !tbaa !2428
  %2194 = add i64 %1961, 168
  store i64 %2194, i64* %PC, align 8
  %2195 = load i32, i32* %2166, align 4
  %2196 = sext i32 %2195 to i64
  %2197 = mul nsw i64 %2196, 33800
  store i64 %2197, i64* %RCX, align 8, !tbaa !2428
  %2198 = lshr i64 %2197, 63
  %2199 = add i64 %2197, %2193
  store i64 %2199, i64* %RAX, align 8, !tbaa !2428
  %2200 = icmp ult i64 %2199, %2193
  %2201 = icmp ult i64 %2199, %2197
  %2202 = or i1 %2200, %2201
  %2203 = zext i1 %2202 to i8
  store i8 %2203, i8* %43, align 1, !tbaa !2432
  %2204 = trunc i64 %2199 to i32
  %2205 = and i32 %2204, 255
  %2206 = tail call i32 @llvm.ctpop.i32(i32 %2205) #8
  %2207 = trunc i32 %2206 to i8
  %2208 = and i8 %2207, 1
  %2209 = xor i8 %2208, 1
  store i8 %2209, i8* %50, align 1, !tbaa !2446
  %2210 = xor i64 %2197, %2193
  %2211 = xor i64 %2210, %2199
  %2212 = lshr i64 %2211, 4
  %2213 = trunc i64 %2212 to i8
  %2214 = and i8 %2213, 1
  store i8 %2214, i8* %55, align 1, !tbaa !2447
  %2215 = icmp eq i64 %2199, 0
  %2216 = zext i1 %2215 to i8
  store i8 %2216, i8* %58, align 1, !tbaa !2448
  %2217 = lshr i64 %2199, 63
  %2218 = trunc i64 %2217 to i8
  store i8 %2218, i8* %61, align 1, !tbaa !2449
  %2219 = lshr i64 %2193, 63
  %2220 = xor i64 %2217, %2219
  %2221 = xor i64 %2217, %2198
  %2222 = add nuw nsw i64 %2220, %2221
  %2223 = icmp eq i64 %2222, 2
  %2224 = zext i1 %2223 to i8
  store i8 %2224, i8* %67, align 1, !tbaa !2450
  %2225 = load i64, i64* %RBP, align 8
  %2226 = add i64 %2225, -52
  %2227 = add i64 %1961, 182
  store i64 %2227, i64* %PC, align 8
  %2228 = inttoptr i64 %2226 to i32*
  %2229 = load i32, i32* %2228, align 4
  %2230 = sext i32 %2229 to i64
  %2231 = mul nsw i64 %2230, 520
  store i64 %2231, i64* %RCX, align 8, !tbaa !2428
  %2232 = lshr i64 %2231, 63
  %2233 = add i64 %2231, %2199
  store i64 %2233, i64* %RAX, align 8, !tbaa !2428
  %2234 = icmp ult i64 %2233, %2199
  %2235 = icmp ult i64 %2233, %2231
  %2236 = or i1 %2234, %2235
  %2237 = zext i1 %2236 to i8
  store i8 %2237, i8* %43, align 1, !tbaa !2432
  %2238 = trunc i64 %2233 to i32
  %2239 = and i32 %2238, 255
  %2240 = tail call i32 @llvm.ctpop.i32(i32 %2239) #8
  %2241 = trunc i32 %2240 to i8
  %2242 = and i8 %2241, 1
  %2243 = xor i8 %2242, 1
  store i8 %2243, i8* %50, align 1, !tbaa !2446
  %2244 = xor i64 %2231, %2199
  %2245 = xor i64 %2244, %2233
  %2246 = lshr i64 %2245, 4
  %2247 = trunc i64 %2246 to i8
  %2248 = and i8 %2247, 1
  store i8 %2248, i8* %55, align 1, !tbaa !2447
  %2249 = icmp eq i64 %2233, 0
  %2250 = zext i1 %2249 to i8
  store i8 %2250, i8* %58, align 1, !tbaa !2448
  %2251 = lshr i64 %2233, 63
  %2252 = trunc i64 %2251 to i8
  store i8 %2252, i8* %61, align 1, !tbaa !2449
  %2253 = xor i64 %2251, %2217
  %2254 = xor i64 %2251, %2232
  %2255 = add nuw nsw i64 %2253, %2254
  %2256 = icmp eq i64 %2255, 2
  %2257 = zext i1 %2256 to i8
  store i8 %2257, i8* %67, align 1, !tbaa !2450
  %2258 = add i64 %2225, -48
  %2259 = add i64 %1961, 196
  store i64 %2259, i64* %PC, align 8
  %2260 = inttoptr i64 %2258 to i32*
  %2261 = load i32, i32* %2260, align 4
  %2262 = sext i32 %2261 to i64
  store i64 %2262, i64* %RCX, align 8, !tbaa !2428
  %2263 = shl nsw i64 %2262, 3
  %2264 = add i64 %2263, %2233
  %2265 = add i64 %1961, 201
  store i64 %2265, i64* %PC, align 8
  %2266 = load double, double* %233, align 1
  %2267 = inttoptr i64 %2264 to double*
  %2268 = load double, double* %2267, align 8
  %2269 = fmul double %2266, %2268
  store double %2269, double* %233, align 1, !tbaa !2452
  %2270 = load double, double* %230, align 1
  %2271 = fsub double %2270, %2269
  store double %2271, double* %230, align 1, !tbaa !2452
  %2272 = add i64 %2225, 48
  %2273 = add i64 %1961, 209
  store i64 %2273, i64* %PC, align 8
  %2274 = inttoptr i64 %2272 to i64*
  %2275 = load i64, i64* %2274, align 8
  store i64 %2275, i64* %RAX, align 8, !tbaa !2428
  %2276 = add i64 %2225, -100
  %2277 = add i64 %1961, 213
  store i64 %2277, i64* %PC, align 8
  %2278 = inttoptr i64 %2276 to i32*
  %2279 = load i32, i32* %2278, align 4
  %2280 = sext i32 %2279 to i64
  %2281 = mul nsw i64 %2280, 33800
  store i64 %2281, i64* %RCX, align 8, !tbaa !2428
  %2282 = lshr i64 %2281, 63
  %2283 = add i64 %2281, %2275
  store i64 %2283, i64* %RAX, align 8, !tbaa !2428
  %2284 = icmp ult i64 %2283, %2275
  %2285 = icmp ult i64 %2283, %2281
  %2286 = or i1 %2284, %2285
  %2287 = zext i1 %2286 to i8
  store i8 %2287, i8* %43, align 1, !tbaa !2432
  %2288 = trunc i64 %2283 to i32
  %2289 = and i32 %2288, 255
  %2290 = tail call i32 @llvm.ctpop.i32(i32 %2289) #8
  %2291 = trunc i32 %2290 to i8
  %2292 = and i8 %2291, 1
  %2293 = xor i8 %2292, 1
  store i8 %2293, i8* %50, align 1, !tbaa !2446
  %2294 = xor i64 %2281, %2275
  %2295 = xor i64 %2294, %2283
  %2296 = lshr i64 %2295, 4
  %2297 = trunc i64 %2296 to i8
  %2298 = and i8 %2297, 1
  store i8 %2298, i8* %55, align 1, !tbaa !2447
  %2299 = icmp eq i64 %2283, 0
  %2300 = zext i1 %2299 to i8
  store i8 %2300, i8* %58, align 1, !tbaa !2448
  %2301 = lshr i64 %2283, 63
  %2302 = trunc i64 %2301 to i8
  store i8 %2302, i8* %61, align 1, !tbaa !2449
  %2303 = lshr i64 %2275, 63
  %2304 = xor i64 %2301, %2303
  %2305 = xor i64 %2301, %2282
  %2306 = add nuw nsw i64 %2304, %2305
  %2307 = icmp eq i64 %2306, 2
  %2308 = zext i1 %2307 to i8
  store i8 %2308, i8* %67, align 1, !tbaa !2450
  %2309 = load i64, i64* %RBP, align 8
  %2310 = add i64 %2309, -52
  %2311 = add i64 %1961, 227
  store i64 %2311, i64* %PC, align 8
  %2312 = inttoptr i64 %2310 to i32*
  %2313 = load i32, i32* %2312, align 4
  %2314 = sext i32 %2313 to i64
  %2315 = mul nsw i64 %2314, 520
  store i64 %2315, i64* %RCX, align 8, !tbaa !2428
  %2316 = lshr i64 %2315, 63
  %2317 = add i64 %2315, %2283
  store i64 %2317, i64* %RAX, align 8, !tbaa !2428
  %2318 = icmp ult i64 %2317, %2283
  %2319 = icmp ult i64 %2317, %2315
  %2320 = or i1 %2318, %2319
  %2321 = zext i1 %2320 to i8
  store i8 %2321, i8* %43, align 1, !tbaa !2432
  %2322 = trunc i64 %2317 to i32
  %2323 = and i32 %2322, 255
  %2324 = tail call i32 @llvm.ctpop.i32(i32 %2323) #8
  %2325 = trunc i32 %2324 to i8
  %2326 = and i8 %2325, 1
  %2327 = xor i8 %2326, 1
  store i8 %2327, i8* %50, align 1, !tbaa !2446
  %2328 = xor i64 %2315, %2283
  %2329 = xor i64 %2328, %2317
  %2330 = lshr i64 %2329, 4
  %2331 = trunc i64 %2330 to i8
  %2332 = and i8 %2331, 1
  store i8 %2332, i8* %55, align 1, !tbaa !2447
  %2333 = icmp eq i64 %2317, 0
  %2334 = zext i1 %2333 to i8
  store i8 %2334, i8* %58, align 1, !tbaa !2448
  %2335 = lshr i64 %2317, 63
  %2336 = trunc i64 %2335 to i8
  store i8 %2336, i8* %61, align 1, !tbaa !2449
  %2337 = xor i64 %2335, %2301
  %2338 = xor i64 %2335, %2316
  %2339 = add nuw nsw i64 %2337, %2338
  %2340 = icmp eq i64 %2339, 2
  %2341 = zext i1 %2340 to i8
  store i8 %2341, i8* %67, align 1, !tbaa !2450
  %2342 = add i64 %2309, -48
  %2343 = add i64 %1961, 241
  store i64 %2343, i64* %PC, align 8
  %2344 = inttoptr i64 %2342 to i32*
  %2345 = load i32, i32* %2344, align 4
  %2346 = sext i32 %2345 to i64
  store i64 %2346, i64* %RCX, align 8, !tbaa !2428
  %2347 = shl nsw i64 %2346, 3
  %2348 = add i64 %2347, %2317
  %2349 = add i64 %1961, 246
  store i64 %2349, i64* %PC, align 8
  %2350 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2351 = load i64, i64* %2350, align 1
  %2352 = inttoptr i64 %2348 to i64*
  store i64 %2351, i64* %2352, align 8
  %2353 = load i64, i64* %RBP, align 8
  %2354 = add i64 %2353, 16
  %2355 = load i64, i64* %PC, align 8
  %2356 = add i64 %2355, 4
  store i64 %2356, i64* %PC, align 8
  %2357 = inttoptr i64 %2354 to i64*
  %2358 = load i64, i64* %2357, align 8
  store i64 %2358, i64* %RAX, align 8, !tbaa !2428
  %2359 = add i64 %2353, -100
  %2360 = add i64 %2355, 8
  store i64 %2360, i64* %PC, align 8
  %2361 = inttoptr i64 %2359 to i32*
  %2362 = load i32, i32* %2361, align 4
  %2363 = sext i32 %2362 to i64
  %2364 = mul nsw i64 %2363, 520
  store i64 %2364, i64* %RCX, align 8, !tbaa !2428
  %2365 = lshr i64 %2364, 63
  %2366 = add i64 %2364, %2358
  store i64 %2366, i64* %RAX, align 8, !tbaa !2428
  %2367 = icmp ult i64 %2366, %2358
  %2368 = icmp ult i64 %2366, %2364
  %2369 = or i1 %2367, %2368
  %2370 = zext i1 %2369 to i8
  store i8 %2370, i8* %43, align 1, !tbaa !2432
  %2371 = trunc i64 %2366 to i32
  %2372 = and i32 %2371, 255
  %2373 = tail call i32 @llvm.ctpop.i32(i32 %2372) #8
  %2374 = trunc i32 %2373 to i8
  %2375 = and i8 %2374, 1
  %2376 = xor i8 %2375, 1
  store i8 %2376, i8* %50, align 1, !tbaa !2446
  %2377 = xor i64 %2364, %2358
  %2378 = xor i64 %2377, %2366
  %2379 = lshr i64 %2378, 4
  %2380 = trunc i64 %2379 to i8
  %2381 = and i8 %2380, 1
  store i8 %2381, i8* %55, align 1, !tbaa !2447
  %2382 = icmp eq i64 %2366, 0
  %2383 = zext i1 %2382 to i8
  store i8 %2383, i8* %58, align 1, !tbaa !2448
  %2384 = lshr i64 %2366, 63
  %2385 = trunc i64 %2384 to i8
  store i8 %2385, i8* %61, align 1, !tbaa !2449
  %2386 = lshr i64 %2358, 63
  %2387 = xor i64 %2384, %2386
  %2388 = xor i64 %2384, %2365
  %2389 = add nuw nsw i64 %2387, %2388
  %2390 = icmp eq i64 %2389, 2
  %2391 = zext i1 %2390 to i8
  store i8 %2391, i8* %67, align 1, !tbaa !2450
  %2392 = add i64 %2353, -104
  %2393 = add i64 %2355, 22
  store i64 %2393, i64* %PC, align 8
  %2394 = inttoptr i64 %2392 to i32*
  %2395 = load i32, i32* %2394, align 4
  %2396 = sext i32 %2395 to i64
  store i64 %2396, i64* %RCX, align 8, !tbaa !2428
  %2397 = shl nsw i64 %2396, 3
  %2398 = add i64 %2397, %2366
  %2399 = add i64 %2355, 27
  store i64 %2399, i64* %PC, align 8
  %2400 = inttoptr i64 %2398 to i64*
  %2401 = load i64, i64* %2400, align 8
  %2402 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %2401, i64* %2402, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %2403 = add i64 %2353, 24
  %2404 = add i64 %2355, 31
  store i64 %2404, i64* %PC, align 8
  %2405 = inttoptr i64 %2403 to i64*
  %2406 = load i64, i64* %2405, align 8
  store i64 %2406, i64* %RAX, align 8, !tbaa !2428
  %2407 = add i64 %2355, 35
  store i64 %2407, i64* %PC, align 8
  %2408 = load i32, i32* %2361, align 4
  %2409 = sext i32 %2408 to i64
  %2410 = mul nsw i64 %2409, 33800
  store i64 %2410, i64* %RCX, align 8, !tbaa !2428
  %2411 = lshr i64 %2410, 63
  %2412 = add i64 %2410, %2406
  store i64 %2412, i64* %RAX, align 8, !tbaa !2428
  %2413 = icmp ult i64 %2412, %2406
  %2414 = icmp ult i64 %2412, %2410
  %2415 = or i1 %2413, %2414
  %2416 = zext i1 %2415 to i8
  store i8 %2416, i8* %43, align 1, !tbaa !2432
  %2417 = trunc i64 %2412 to i32
  %2418 = and i32 %2417, 255
  %2419 = tail call i32 @llvm.ctpop.i32(i32 %2418) #8
  %2420 = trunc i32 %2419 to i8
  %2421 = and i8 %2420, 1
  %2422 = xor i8 %2421, 1
  store i8 %2422, i8* %50, align 1, !tbaa !2446
  %2423 = xor i64 %2410, %2406
  %2424 = xor i64 %2423, %2412
  %2425 = lshr i64 %2424, 4
  %2426 = trunc i64 %2425 to i8
  %2427 = and i8 %2426, 1
  store i8 %2427, i8* %55, align 1, !tbaa !2447
  %2428 = icmp eq i64 %2412, 0
  %2429 = zext i1 %2428 to i8
  store i8 %2429, i8* %58, align 1, !tbaa !2448
  %2430 = lshr i64 %2412, 63
  %2431 = trunc i64 %2430 to i8
  store i8 %2431, i8* %61, align 1, !tbaa !2449
  %2432 = lshr i64 %2406, 63
  %2433 = xor i64 %2430, %2432
  %2434 = xor i64 %2430, %2411
  %2435 = add nuw nsw i64 %2433, %2434
  %2436 = icmp eq i64 %2435, 2
  %2437 = zext i1 %2436 to i8
  store i8 %2437, i8* %67, align 1, !tbaa !2450
  %2438 = load i64, i64* %RBP, align 8
  %2439 = add i64 %2438, -52
  %2440 = add i64 %2355, 49
  store i64 %2440, i64* %PC, align 8
  %2441 = inttoptr i64 %2439 to i32*
  %2442 = load i32, i32* %2441, align 4
  %2443 = sext i32 %2442 to i64
  %2444 = mul nsw i64 %2443, 520
  store i64 %2444, i64* %RCX, align 8, !tbaa !2428
  %2445 = lshr i64 %2444, 63
  %2446 = add i64 %2444, %2412
  store i64 %2446, i64* %RAX, align 8, !tbaa !2428
  %2447 = icmp ult i64 %2446, %2412
  %2448 = icmp ult i64 %2446, %2444
  %2449 = or i1 %2447, %2448
  %2450 = zext i1 %2449 to i8
  store i8 %2450, i8* %43, align 1, !tbaa !2432
  %2451 = trunc i64 %2446 to i32
  %2452 = and i32 %2451, 255
  %2453 = tail call i32 @llvm.ctpop.i32(i32 %2452) #8
  %2454 = trunc i32 %2453 to i8
  %2455 = and i8 %2454, 1
  %2456 = xor i8 %2455, 1
  store i8 %2456, i8* %50, align 1, !tbaa !2446
  %2457 = xor i64 %2444, %2412
  %2458 = xor i64 %2457, %2446
  %2459 = lshr i64 %2458, 4
  %2460 = trunc i64 %2459 to i8
  %2461 = and i8 %2460, 1
  store i8 %2461, i8* %55, align 1, !tbaa !2447
  %2462 = icmp eq i64 %2446, 0
  %2463 = zext i1 %2462 to i8
  store i8 %2463, i8* %58, align 1, !tbaa !2448
  %2464 = lshr i64 %2446, 63
  %2465 = trunc i64 %2464 to i8
  store i8 %2465, i8* %61, align 1, !tbaa !2449
  %2466 = xor i64 %2464, %2430
  %2467 = xor i64 %2464, %2445
  %2468 = add nuw nsw i64 %2466, %2467
  %2469 = icmp eq i64 %2468, 2
  %2470 = zext i1 %2469 to i8
  store i8 %2470, i8* %67, align 1, !tbaa !2450
  %2471 = add i64 %2438, -48
  %2472 = add i64 %2355, 63
  store i64 %2472, i64* %PC, align 8
  %2473 = inttoptr i64 %2471 to i32*
  %2474 = load i32, i32* %2473, align 4
  %2475 = sext i32 %2474 to i64
  store i64 %2475, i64* %RCX, align 8, !tbaa !2428
  %2476 = shl nsw i64 %2475, 3
  %2477 = add i64 %2476, %2446
  %2478 = add i64 %2355, 68
  store i64 %2478, i64* %PC, align 8
  %2479 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2480 = load i64, i64* %2479, align 1
  %2481 = inttoptr i64 %2477 to i64*
  store i64 %2480, i64* %2481, align 8
  %2482 = load i64, i64* %RBP, align 8
  %2483 = add i64 %2482, -104
  %2484 = load i64, i64* %PC, align 8
  %2485 = add i64 %2484, 3
  store i64 %2485, i64* %PC, align 8
  %2486 = inttoptr i64 %2483 to i32*
  %2487 = load i32, i32* %2486, align 4
  %2488 = add i32 %2487, 1
  %2489 = zext i32 %2488 to i64
  store i64 %2489, i64* %RAX, align 8, !tbaa !2428
  %2490 = icmp eq i32 %2487, -1
  %2491 = icmp eq i32 %2488, 0
  %2492 = or i1 %2490, %2491
  %2493 = zext i1 %2492 to i8
  store i8 %2493, i8* %43, align 1, !tbaa !2432
  %2494 = and i32 %2488, 255
  %2495 = tail call i32 @llvm.ctpop.i32(i32 %2494) #8
  %2496 = trunc i32 %2495 to i8
  %2497 = and i8 %2496, 1
  %2498 = xor i8 %2497, 1
  store i8 %2498, i8* %50, align 1, !tbaa !2446
  %2499 = xor i32 %2487, %2488
  %2500 = lshr i32 %2499, 4
  %2501 = trunc i32 %2500 to i8
  %2502 = and i8 %2501, 1
  store i8 %2502, i8* %55, align 1, !tbaa !2447
  %2503 = icmp eq i32 %2488, 0
  %2504 = zext i1 %2503 to i8
  store i8 %2504, i8* %58, align 1, !tbaa !2448
  %2505 = lshr i32 %2488, 31
  %2506 = trunc i32 %2505 to i8
  store i8 %2506, i8* %61, align 1, !tbaa !2449
  %2507 = lshr i32 %2487, 31
  %2508 = xor i32 %2505, %2507
  %2509 = add nuw nsw i32 %2508, %2505
  %2510 = icmp eq i32 %2509, 2
  %2511 = zext i1 %2510 to i8
  store i8 %2511, i8* %67, align 1, !tbaa !2450
  %2512 = add i64 %2484, 9
  store i64 %2512, i64* %PC, align 8
  store i32 %2488, i32* %2486, align 4
  %2513 = load i64, i64* %PC, align 8
  %2514 = add i64 %2513, -2643
  store i64 %2514, i64* %229, align 8, !tbaa !2428
  br label %block_401fcd

block_40251e:                                     ; preds = %block_402512
  %2515 = add i64 %441, -108
  %2516 = add i64 %403, 36
  store i64 %2516, i64* %PC, align 8
  %2517 = inttoptr i64 %2515 to i32*
  %2518 = load i32, i32* %2517, align 4
  %2519 = sext i32 %2518 to i64
  store i64 %2519, i64* %RCX, align 8, !tbaa !2428
  %2520 = shl nsw i64 %2519, 3
  %2521 = add i64 %2520, %450
  %2522 = add i64 %403, 41
  store i64 %2522, i64* %PC, align 8
  %2523 = inttoptr i64 %2521 to double*
  %2524 = load double, double* %2523, align 8
  store double %2524, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %2525 = add i64 %441, -80
  %2526 = add i64 %403, 45
  store i64 %2526, i64* %PC, align 8
  %2527 = inttoptr i64 %2525 to i64*
  %2528 = load i64, i64* %2527, align 8
  store i64 %2528, i64* %RAX, align 8, !tbaa !2428
  %2529 = add i64 %441, -100
  %2530 = add i64 %403, 49
  store i64 %2530, i64* %PC, align 8
  %2531 = inttoptr i64 %2529 to i32*
  %2532 = load i32, i32* %2531, align 4
  %2533 = sext i32 %2532 to i64
  %2534 = mul nsw i64 %2533, 520
  store i64 %2534, i64* %RCX, align 8, !tbaa !2428
  %2535 = lshr i64 %2534, 63
  %2536 = add i64 %2534, %2528
  store i64 %2536, i64* %RAX, align 8, !tbaa !2428
  %2537 = icmp ult i64 %2536, %2528
  %2538 = icmp ult i64 %2536, %2534
  %2539 = or i1 %2537, %2538
  %2540 = zext i1 %2539 to i8
  store i8 %2540, i8* %43, align 1, !tbaa !2432
  %2541 = trunc i64 %2536 to i32
  %2542 = and i32 %2541, 255
  %2543 = tail call i32 @llvm.ctpop.i32(i32 %2542) #8
  %2544 = trunc i32 %2543 to i8
  %2545 = and i8 %2544, 1
  %2546 = xor i8 %2545, 1
  store i8 %2546, i8* %50, align 1, !tbaa !2446
  %2547 = xor i64 %2534, %2528
  %2548 = xor i64 %2547, %2536
  %2549 = lshr i64 %2548, 4
  %2550 = trunc i64 %2549 to i8
  %2551 = and i8 %2550, 1
  store i8 %2551, i8* %55, align 1, !tbaa !2447
  %2552 = icmp eq i64 %2536, 0
  %2553 = zext i1 %2552 to i8
  store i8 %2553, i8* %58, align 1, !tbaa !2448
  %2554 = lshr i64 %2536, 63
  %2555 = trunc i64 %2554 to i8
  store i8 %2555, i8* %61, align 1, !tbaa !2449
  %2556 = lshr i64 %2528, 63
  %2557 = xor i64 %2554, %2556
  %2558 = xor i64 %2554, %2535
  %2559 = add nuw nsw i64 %2557, %2558
  %2560 = icmp eq i64 %2559, 2
  %2561 = zext i1 %2560 to i8
  store i8 %2561, i8* %67, align 1, !tbaa !2450
  %2562 = add i64 %403, 63
  store i64 %2562, i64* %PC, align 8
  %2563 = load i32, i32* %2517, align 4
  %2564 = sext i32 %2563 to i64
  store i64 %2564, i64* %RCX, align 8, !tbaa !2428
  %2565 = shl nsw i64 %2564, 3
  %2566 = add i64 %2565, %2536
  %2567 = add i64 %403, 68
  store i64 %2567, i64* %PC, align 8
  %2568 = inttoptr i64 %2566 to double*
  %2569 = load double, double* %2568, align 8
  %2570 = fsub double %2524, %2569
  store double %2570, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %2571 = load i64, i64* %RBP, align 8
  %2572 = add i64 %2571, 40
  %2573 = add i64 %403, 72
  store i64 %2573, i64* %PC, align 8
  %2574 = inttoptr i64 %2572 to i64*
  %2575 = load i64, i64* %2574, align 8
  store i64 %2575, i64* %RAX, align 8, !tbaa !2428
  %2576 = add i64 %2571, -100
  %2577 = add i64 %403, 76
  store i64 %2577, i64* %PC, align 8
  %2578 = inttoptr i64 %2576 to i32*
  %2579 = load i32, i32* %2578, align 4
  %2580 = sext i32 %2579 to i64
  %2581 = mul nsw i64 %2580, 33800
  store i64 %2581, i64* %RCX, align 8, !tbaa !2428
  %2582 = lshr i64 %2581, 63
  %2583 = add i64 %2581, %2575
  store i64 %2583, i64* %RAX, align 8, !tbaa !2428
  %2584 = icmp ult i64 %2583, %2575
  %2585 = icmp ult i64 %2583, %2581
  %2586 = or i1 %2584, %2585
  %2587 = zext i1 %2586 to i8
  store i8 %2587, i8* %43, align 1, !tbaa !2432
  %2588 = trunc i64 %2583 to i32
  %2589 = and i32 %2588, 255
  %2590 = tail call i32 @llvm.ctpop.i32(i32 %2589) #8
  %2591 = trunc i32 %2590 to i8
  %2592 = and i8 %2591, 1
  %2593 = xor i8 %2592, 1
  store i8 %2593, i8* %50, align 1, !tbaa !2446
  %2594 = xor i64 %2581, %2575
  %2595 = xor i64 %2594, %2583
  %2596 = lshr i64 %2595, 4
  %2597 = trunc i64 %2596 to i8
  %2598 = and i8 %2597, 1
  store i8 %2598, i8* %55, align 1, !tbaa !2447
  %2599 = icmp eq i64 %2583, 0
  %2600 = zext i1 %2599 to i8
  store i8 %2600, i8* %58, align 1, !tbaa !2448
  %2601 = lshr i64 %2583, 63
  %2602 = trunc i64 %2601 to i8
  store i8 %2602, i8* %61, align 1, !tbaa !2449
  %2603 = lshr i64 %2575, 63
  %2604 = xor i64 %2601, %2603
  %2605 = xor i64 %2601, %2582
  %2606 = add nuw nsw i64 %2604, %2605
  %2607 = icmp eq i64 %2606, 2
  %2608 = zext i1 %2607 to i8
  store i8 %2608, i8* %67, align 1, !tbaa !2450
  %2609 = add i64 %2571, -52
  %2610 = add i64 %403, 90
  store i64 %2610, i64* %PC, align 8
  %2611 = inttoptr i64 %2609 to i32*
  %2612 = load i32, i32* %2611, align 4
  %2613 = sext i32 %2612 to i64
  %2614 = mul nsw i64 %2613, 520
  store i64 %2614, i64* %RCX, align 8, !tbaa !2428
  %2615 = lshr i64 %2614, 63
  %2616 = add i64 %2614, %2583
  store i64 %2616, i64* %RAX, align 8, !tbaa !2428
  %2617 = icmp ult i64 %2616, %2583
  %2618 = icmp ult i64 %2616, %2614
  %2619 = or i1 %2617, %2618
  %2620 = zext i1 %2619 to i8
  store i8 %2620, i8* %43, align 1, !tbaa !2432
  %2621 = trunc i64 %2616 to i32
  %2622 = and i32 %2621, 255
  %2623 = tail call i32 @llvm.ctpop.i32(i32 %2622) #8
  %2624 = trunc i32 %2623 to i8
  %2625 = and i8 %2624, 1
  %2626 = xor i8 %2625, 1
  store i8 %2626, i8* %50, align 1, !tbaa !2446
  %2627 = xor i64 %2614, %2583
  %2628 = xor i64 %2627, %2616
  %2629 = lshr i64 %2628, 4
  %2630 = trunc i64 %2629 to i8
  %2631 = and i8 %2630, 1
  store i8 %2631, i8* %55, align 1, !tbaa !2447
  %2632 = icmp eq i64 %2616, 0
  %2633 = zext i1 %2632 to i8
  store i8 %2633, i8* %58, align 1, !tbaa !2448
  %2634 = lshr i64 %2616, 63
  %2635 = trunc i64 %2634 to i8
  store i8 %2635, i8* %61, align 1, !tbaa !2449
  %2636 = xor i64 %2634, %2601
  %2637 = xor i64 %2634, %2615
  %2638 = add nuw nsw i64 %2636, %2637
  %2639 = icmp eq i64 %2638, 2
  %2640 = zext i1 %2639 to i8
  store i8 %2640, i8* %67, align 1, !tbaa !2450
  %2641 = load i64, i64* %RBP, align 8
  %2642 = add i64 %2641, -108
  %2643 = add i64 %403, 103
  store i64 %2643, i64* %PC, align 8
  %2644 = inttoptr i64 %2642 to i32*
  %2645 = load i32, i32* %2644, align 4
  %2646 = add i32 %2645, 1
  %2647 = zext i32 %2646 to i64
  store i64 %2647, i64* %RDX, align 8, !tbaa !2428
  %2648 = icmp eq i32 %2645, -1
  %2649 = icmp eq i32 %2646, 0
  %2650 = or i1 %2648, %2649
  %2651 = zext i1 %2650 to i8
  store i8 %2651, i8* %43, align 1, !tbaa !2432
  %2652 = and i32 %2646, 255
  %2653 = tail call i32 @llvm.ctpop.i32(i32 %2652) #8
  %2654 = trunc i32 %2653 to i8
  %2655 = and i8 %2654, 1
  %2656 = xor i8 %2655, 1
  store i8 %2656, i8* %50, align 1, !tbaa !2446
  %2657 = xor i32 %2645, %2646
  %2658 = lshr i32 %2657, 4
  %2659 = trunc i32 %2658 to i8
  %2660 = and i8 %2659, 1
  store i8 %2660, i8* %55, align 1, !tbaa !2447
  %2661 = icmp eq i32 %2646, 0
  %2662 = zext i1 %2661 to i8
  store i8 %2662, i8* %58, align 1, !tbaa !2448
  %2663 = lshr i32 %2646, 31
  %2664 = trunc i32 %2663 to i8
  store i8 %2664, i8* %61, align 1, !tbaa !2449
  %2665 = lshr i32 %2645, 31
  %2666 = xor i32 %2663, %2665
  %2667 = add nuw nsw i32 %2666, %2663
  %2668 = icmp eq i32 %2667, 2
  %2669 = zext i1 %2668 to i8
  store i8 %2669, i8* %67, align 1, !tbaa !2450
  %2670 = sext i32 %2646 to i64
  store i64 %2670, i64* %RCX, align 8, !tbaa !2428
  %2671 = shl nsw i64 %2670, 3
  %2672 = add i64 %2671, %2616
  %2673 = add i64 %403, 114
  store i64 %2673, i64* %PC, align 8
  %2674 = load double, double* %230, align 1
  %2675 = inttoptr i64 %2672 to double*
  %2676 = load double, double* %2675, align 8
  %2677 = fadd double %2674, %2676
  store double %2677, double* %230, align 1, !tbaa !2452
  %2678 = add i64 %2641, 40
  %2679 = add i64 %403, 118
  store i64 %2679, i64* %PC, align 8
  %2680 = inttoptr i64 %2678 to i64*
  %2681 = load i64, i64* %2680, align 8
  store i64 %2681, i64* %RAX, align 8, !tbaa !2428
  %2682 = add i64 %2641, -100
  %2683 = add i64 %403, 122
  store i64 %2683, i64* %PC, align 8
  %2684 = inttoptr i64 %2682 to i32*
  %2685 = load i32, i32* %2684, align 4
  %2686 = sext i32 %2685 to i64
  %2687 = mul nsw i64 %2686, 33800
  store i64 %2687, i64* %RCX, align 8, !tbaa !2428
  %2688 = lshr i64 %2687, 63
  %2689 = add i64 %2687, %2681
  store i64 %2689, i64* %RAX, align 8, !tbaa !2428
  %2690 = icmp ult i64 %2689, %2681
  %2691 = icmp ult i64 %2689, %2687
  %2692 = or i1 %2690, %2691
  %2693 = zext i1 %2692 to i8
  store i8 %2693, i8* %43, align 1, !tbaa !2432
  %2694 = trunc i64 %2689 to i32
  %2695 = and i32 %2694, 255
  %2696 = tail call i32 @llvm.ctpop.i32(i32 %2695) #8
  %2697 = trunc i32 %2696 to i8
  %2698 = and i8 %2697, 1
  %2699 = xor i8 %2698, 1
  store i8 %2699, i8* %50, align 1, !tbaa !2446
  %2700 = xor i64 %2687, %2681
  %2701 = xor i64 %2700, %2689
  %2702 = lshr i64 %2701, 4
  %2703 = trunc i64 %2702 to i8
  %2704 = and i8 %2703, 1
  store i8 %2704, i8* %55, align 1, !tbaa !2447
  %2705 = icmp eq i64 %2689, 0
  %2706 = zext i1 %2705 to i8
  store i8 %2706, i8* %58, align 1, !tbaa !2448
  %2707 = lshr i64 %2689, 63
  %2708 = trunc i64 %2707 to i8
  store i8 %2708, i8* %61, align 1, !tbaa !2449
  %2709 = lshr i64 %2681, 63
  %2710 = xor i64 %2707, %2709
  %2711 = xor i64 %2707, %2688
  %2712 = add nuw nsw i64 %2710, %2711
  %2713 = icmp eq i64 %2712, 2
  %2714 = zext i1 %2713 to i8
  store i8 %2714, i8* %67, align 1, !tbaa !2450
  %2715 = load i64, i64* %RBP, align 8
  %2716 = add i64 %2715, -52
  %2717 = add i64 %403, 136
  store i64 %2717, i64* %PC, align 8
  %2718 = inttoptr i64 %2716 to i32*
  %2719 = load i32, i32* %2718, align 4
  %2720 = sext i32 %2719 to i64
  %2721 = mul nsw i64 %2720, 520
  store i64 %2721, i64* %RCX, align 8, !tbaa !2428
  %2722 = lshr i64 %2721, 63
  %2723 = add i64 %2721, %2689
  store i64 %2723, i64* %RAX, align 8, !tbaa !2428
  %2724 = icmp ult i64 %2723, %2689
  %2725 = icmp ult i64 %2723, %2721
  %2726 = or i1 %2724, %2725
  %2727 = zext i1 %2726 to i8
  store i8 %2727, i8* %43, align 1, !tbaa !2432
  %2728 = trunc i64 %2723 to i32
  %2729 = and i32 %2728, 255
  %2730 = tail call i32 @llvm.ctpop.i32(i32 %2729) #8
  %2731 = trunc i32 %2730 to i8
  %2732 = and i8 %2731, 1
  %2733 = xor i8 %2732, 1
  store i8 %2733, i8* %50, align 1, !tbaa !2446
  %2734 = xor i64 %2721, %2689
  %2735 = xor i64 %2734, %2723
  %2736 = lshr i64 %2735, 4
  %2737 = trunc i64 %2736 to i8
  %2738 = and i8 %2737, 1
  store i8 %2738, i8* %55, align 1, !tbaa !2447
  %2739 = icmp eq i64 %2723, 0
  %2740 = zext i1 %2739 to i8
  store i8 %2740, i8* %58, align 1, !tbaa !2448
  %2741 = lshr i64 %2723, 63
  %2742 = trunc i64 %2741 to i8
  store i8 %2742, i8* %61, align 1, !tbaa !2449
  %2743 = xor i64 %2741, %2707
  %2744 = xor i64 %2741, %2722
  %2745 = add nuw nsw i64 %2743, %2744
  %2746 = icmp eq i64 %2745, 2
  %2747 = zext i1 %2746 to i8
  store i8 %2747, i8* %67, align 1, !tbaa !2450
  %2748 = add i64 %2715, -108
  %2749 = add i64 %403, 150
  store i64 %2749, i64* %PC, align 8
  %2750 = inttoptr i64 %2748 to i32*
  %2751 = load i32, i32* %2750, align 4
  %2752 = sext i32 %2751 to i64
  store i64 %2752, i64* %RCX, align 8, !tbaa !2428
  %2753 = shl nsw i64 %2752, 3
  %2754 = add i64 %2753, %2723
  %2755 = add i64 %403, 155
  store i64 %2755, i64* %PC, align 8
  %2756 = load double, double* %230, align 1
  %2757 = inttoptr i64 %2754 to double*
  %2758 = load double, double* %2757, align 8
  %2759 = fsub double %2756, %2758
  store double %2759, double* %230, align 1, !tbaa !2452
  %2760 = add i64 %2715, -96
  %2761 = add i64 %403, 159
  store i64 %2761, i64* %PC, align 8
  %2762 = inttoptr i64 %2760 to i64*
  %2763 = load i64, i64* %2762, align 8
  store i64 %2763, i64* %RAX, align 8, !tbaa !2428
  %2764 = add i64 %2715, -100
  %2765 = add i64 %403, 163
  store i64 %2765, i64* %PC, align 8
  %2766 = inttoptr i64 %2764 to i32*
  %2767 = load i32, i32* %2766, align 4
  %2768 = sext i32 %2767 to i64
  %2769 = mul nsw i64 %2768, 520
  store i64 %2769, i64* %RCX, align 8, !tbaa !2428
  %2770 = lshr i64 %2769, 63
  %2771 = add i64 %2769, %2763
  store i64 %2771, i64* %RAX, align 8, !tbaa !2428
  %2772 = icmp ult i64 %2771, %2763
  %2773 = icmp ult i64 %2771, %2769
  %2774 = or i1 %2772, %2773
  %2775 = zext i1 %2774 to i8
  store i8 %2775, i8* %43, align 1, !tbaa !2432
  %2776 = trunc i64 %2771 to i32
  %2777 = and i32 %2776, 255
  %2778 = tail call i32 @llvm.ctpop.i32(i32 %2777) #8
  %2779 = trunc i32 %2778 to i8
  %2780 = and i8 %2779, 1
  %2781 = xor i8 %2780, 1
  store i8 %2781, i8* %50, align 1, !tbaa !2446
  %2782 = xor i64 %2769, %2763
  %2783 = xor i64 %2782, %2771
  %2784 = lshr i64 %2783, 4
  %2785 = trunc i64 %2784 to i8
  %2786 = and i8 %2785, 1
  store i8 %2786, i8* %55, align 1, !tbaa !2447
  %2787 = icmp eq i64 %2771, 0
  %2788 = zext i1 %2787 to i8
  store i8 %2788, i8* %58, align 1, !tbaa !2448
  %2789 = lshr i64 %2771, 63
  %2790 = trunc i64 %2789 to i8
  store i8 %2790, i8* %61, align 1, !tbaa !2449
  %2791 = lshr i64 %2763, 63
  %2792 = xor i64 %2789, %2791
  %2793 = xor i64 %2789, %2770
  %2794 = add nuw nsw i64 %2792, %2793
  %2795 = icmp eq i64 %2794, 2
  %2796 = zext i1 %2795 to i8
  store i8 %2796, i8* %67, align 1, !tbaa !2450
  %2797 = load i64, i64* %RBP, align 8
  %2798 = add i64 %2797, -104
  %2799 = add i64 %403, 177
  store i64 %2799, i64* %PC, align 8
  %2800 = inttoptr i64 %2798 to i32*
  %2801 = load i32, i32* %2800, align 4
  %2802 = sext i32 %2801 to i64
  store i64 %2802, i64* %RCX, align 8, !tbaa !2428
  %2803 = shl nsw i64 %2802, 3
  %2804 = add i64 %2803, %2771
  %2805 = add i64 %403, 182
  store i64 %2805, i64* %PC, align 8
  %2806 = inttoptr i64 %2804 to double*
  store double %2759, double* %2806, align 8
  %2807 = load i64, i64* %RBP, align 8
  %2808 = add i64 %2807, 88
  %2809 = load i64, i64* %PC, align 8
  %2810 = add i64 %2809, 4
  store i64 %2810, i64* %PC, align 8
  %2811 = inttoptr i64 %2808 to i64*
  %2812 = load i64, i64* %2811, align 8
  store i64 %2812, i64* %RAX, align 8, !tbaa !2428
  %2813 = add i64 %2807, -52
  %2814 = add i64 %2809, 8
  store i64 %2814, i64* %PC, align 8
  %2815 = inttoptr i64 %2813 to i32*
  %2816 = load i32, i32* %2815, align 4
  %2817 = sext i32 %2816 to i64
  store i64 %2817, i64* %RCX, align 8, !tbaa !2428
  %2818 = shl nsw i64 %2817, 3
  %2819 = add i64 %2818, %2812
  %2820 = add i64 %2809, 13
  store i64 %2820, i64* %PC, align 8
  %2821 = inttoptr i64 %2819 to double*
  %2822 = load double, double* %2821, align 8
  store double %2822, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %2823 = add i64 %2807, 96
  %2824 = add i64 %2809, 17
  store i64 %2824, i64* %PC, align 8
  %2825 = inttoptr i64 %2823 to i64*
  %2826 = load i64, i64* %2825, align 8
  store i64 %2826, i64* %RAX, align 8, !tbaa !2428
  %2827 = add i64 %2807, -104
  %2828 = add i64 %2809, 21
  store i64 %2828, i64* %PC, align 8
  %2829 = inttoptr i64 %2827 to i32*
  %2830 = load i32, i32* %2829, align 4
  %2831 = sext i32 %2830 to i64
  store i64 %2831, i64* %RCX, align 8, !tbaa !2428
  %2832 = shl nsw i64 %2831, 3
  %2833 = add i64 %2832, %2826
  %2834 = add i64 %2809, 26
  store i64 %2834, i64* %PC, align 8
  %2835 = inttoptr i64 %2833 to double*
  %2836 = load double, double* %2835, align 8
  %2837 = fdiv double %2822, %2836
  store double %2837, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %2838 = add i64 %2807, 24
  %2839 = add i64 %2809, 30
  store i64 %2839, i64* %PC, align 8
  %2840 = inttoptr i64 %2838 to i64*
  %2841 = load i64, i64* %2840, align 8
  store i64 %2841, i64* %RAX, align 8, !tbaa !2428
  %2842 = add i64 %2807, -100
  %2843 = add i64 %2809, 34
  store i64 %2843, i64* %PC, align 8
  %2844 = inttoptr i64 %2842 to i32*
  %2845 = load i32, i32* %2844, align 4
  %2846 = sext i32 %2845 to i64
  %2847 = mul nsw i64 %2846, 33800
  store i64 %2847, i64* %RCX, align 8, !tbaa !2428
  %2848 = lshr i64 %2847, 63
  %2849 = add i64 %2847, %2841
  store i64 %2849, i64* %RAX, align 8, !tbaa !2428
  %2850 = icmp ult i64 %2849, %2841
  %2851 = icmp ult i64 %2849, %2847
  %2852 = or i1 %2850, %2851
  %2853 = zext i1 %2852 to i8
  store i8 %2853, i8* %43, align 1, !tbaa !2432
  %2854 = trunc i64 %2849 to i32
  %2855 = and i32 %2854, 255
  %2856 = tail call i32 @llvm.ctpop.i32(i32 %2855) #8
  %2857 = trunc i32 %2856 to i8
  %2858 = and i8 %2857, 1
  %2859 = xor i8 %2858, 1
  store i8 %2859, i8* %50, align 1, !tbaa !2446
  %2860 = xor i64 %2847, %2841
  %2861 = xor i64 %2860, %2849
  %2862 = lshr i64 %2861, 4
  %2863 = trunc i64 %2862 to i8
  %2864 = and i8 %2863, 1
  store i8 %2864, i8* %55, align 1, !tbaa !2447
  %2865 = icmp eq i64 %2849, 0
  %2866 = zext i1 %2865 to i8
  store i8 %2866, i8* %58, align 1, !tbaa !2448
  %2867 = lshr i64 %2849, 63
  %2868 = trunc i64 %2867 to i8
  store i8 %2868, i8* %61, align 1, !tbaa !2449
  %2869 = lshr i64 %2841, 63
  %2870 = xor i64 %2867, %2869
  %2871 = xor i64 %2867, %2848
  %2872 = add nuw nsw i64 %2870, %2871
  %2873 = icmp eq i64 %2872, 2
  %2874 = zext i1 %2873 to i8
  store i8 %2874, i8* %67, align 1, !tbaa !2450
  %2875 = load i64, i64* %RBP, align 8
  %2876 = add i64 %2875, -104
  %2877 = add i64 %2809, 48
  store i64 %2877, i64* %PC, align 8
  %2878 = inttoptr i64 %2876 to i32*
  %2879 = load i32, i32* %2878, align 4
  %2880 = sext i32 %2879 to i64
  %2881 = mul nsw i64 %2880, 520
  store i64 %2881, i64* %RCX, align 8, !tbaa !2428
  %2882 = lshr i64 %2881, 63
  %2883 = add i64 %2881, %2849
  store i64 %2883, i64* %RAX, align 8, !tbaa !2428
  %2884 = icmp ult i64 %2883, %2849
  %2885 = icmp ult i64 %2883, %2881
  %2886 = or i1 %2884, %2885
  %2887 = zext i1 %2886 to i8
  store i8 %2887, i8* %43, align 1, !tbaa !2432
  %2888 = trunc i64 %2883 to i32
  %2889 = and i32 %2888, 255
  %2890 = tail call i32 @llvm.ctpop.i32(i32 %2889) #8
  %2891 = trunc i32 %2890 to i8
  %2892 = and i8 %2891, 1
  %2893 = xor i8 %2892, 1
  store i8 %2893, i8* %50, align 1, !tbaa !2446
  %2894 = xor i64 %2881, %2849
  %2895 = xor i64 %2894, %2883
  %2896 = lshr i64 %2895, 4
  %2897 = trunc i64 %2896 to i8
  %2898 = and i8 %2897, 1
  store i8 %2898, i8* %55, align 1, !tbaa !2447
  %2899 = icmp eq i64 %2883, 0
  %2900 = zext i1 %2899 to i8
  store i8 %2900, i8* %58, align 1, !tbaa !2448
  %2901 = lshr i64 %2883, 63
  %2902 = trunc i64 %2901 to i8
  store i8 %2902, i8* %61, align 1, !tbaa !2449
  %2903 = xor i64 %2901, %2867
  %2904 = xor i64 %2901, %2882
  %2905 = add nuw nsw i64 %2903, %2904
  %2906 = icmp eq i64 %2905, 2
  %2907 = zext i1 %2906 to i8
  store i8 %2907, i8* %67, align 1, !tbaa !2450
  %2908 = add i64 %2875, -108
  %2909 = add i64 %2809, 62
  store i64 %2909, i64* %PC, align 8
  %2910 = inttoptr i64 %2908 to i32*
  %2911 = load i32, i32* %2910, align 4
  %2912 = sext i32 %2911 to i64
  store i64 %2912, i64* %RCX, align 8, !tbaa !2428
  %2913 = shl nsw i64 %2912, 3
  %2914 = add i64 %2913, %2883
  %2915 = add i64 %2809, 67
  store i64 %2915, i64* %PC, align 8
  %2916 = load double, double* %230, align 1
  %2917 = inttoptr i64 %2914 to double*
  %2918 = load double, double* %2917, align 8
  %2919 = fmul double %2916, %2918
  store double %2919, double* %230, align 1, !tbaa !2452
  %2920 = add i64 %2875, -72
  %2921 = add i64 %2809, 72
  store i64 %2921, i64* %PC, align 8
  %2922 = inttoptr i64 %2920 to double*
  %2923 = load double, double* %2922, align 8
  store double %2923, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %2924 = add i64 %2875, 96
  %2925 = add i64 %2809, 76
  store i64 %2925, i64* %PC, align 8
  %2926 = inttoptr i64 %2924 to i64*
  %2927 = load i64, i64* %2926, align 8
  store i64 %2927, i64* %RAX, align 8, !tbaa !2428
  %2928 = add i64 %2809, 80
  store i64 %2928, i64* %PC, align 8
  %2929 = load i32, i32* %2878, align 4
  %2930 = sext i32 %2929 to i64
  store i64 %2930, i64* %RCX, align 8, !tbaa !2428
  %2931 = shl nsw i64 %2930, 3
  %2932 = add i64 %2931, %2927
  %2933 = add i64 %2809, 85
  store i64 %2933, i64* %PC, align 8
  %2934 = inttoptr i64 %2932 to double*
  %2935 = load double, double* %2934, align 8
  %2936 = fdiv double %2923, %2935
  store double %2936, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %2937 = load i64, i64* %RBP, align 8
  %2938 = add i64 %2937, -96
  %2939 = add i64 %2809, 89
  store i64 %2939, i64* %PC, align 8
  %2940 = inttoptr i64 %2938 to i64*
  %2941 = load i64, i64* %2940, align 8
  store i64 %2941, i64* %RAX, align 8, !tbaa !2428
  %2942 = add i64 %2937, -100
  %2943 = add i64 %2809, 93
  store i64 %2943, i64* %PC, align 8
  %2944 = inttoptr i64 %2942 to i32*
  %2945 = load i32, i32* %2944, align 4
  %2946 = sext i32 %2945 to i64
  %2947 = mul nsw i64 %2946, 520
  store i64 %2947, i64* %RCX, align 8, !tbaa !2428
  %2948 = lshr i64 %2947, 63
  %2949 = add i64 %2947, %2941
  store i64 %2949, i64* %RAX, align 8, !tbaa !2428
  %2950 = icmp ult i64 %2949, %2941
  %2951 = icmp ult i64 %2949, %2947
  %2952 = or i1 %2950, %2951
  %2953 = zext i1 %2952 to i8
  store i8 %2953, i8* %43, align 1, !tbaa !2432
  %2954 = trunc i64 %2949 to i32
  %2955 = and i32 %2954, 255
  %2956 = tail call i32 @llvm.ctpop.i32(i32 %2955) #8
  %2957 = trunc i32 %2956 to i8
  %2958 = and i8 %2957, 1
  %2959 = xor i8 %2958, 1
  store i8 %2959, i8* %50, align 1, !tbaa !2446
  %2960 = xor i64 %2947, %2941
  %2961 = xor i64 %2960, %2949
  %2962 = lshr i64 %2961, 4
  %2963 = trunc i64 %2962 to i8
  %2964 = and i8 %2963, 1
  store i8 %2964, i8* %55, align 1, !tbaa !2447
  %2965 = icmp eq i64 %2949, 0
  %2966 = zext i1 %2965 to i8
  store i8 %2966, i8* %58, align 1, !tbaa !2448
  %2967 = lshr i64 %2949, 63
  %2968 = trunc i64 %2967 to i8
  store i8 %2968, i8* %61, align 1, !tbaa !2449
  %2969 = lshr i64 %2941, 63
  %2970 = xor i64 %2967, %2969
  %2971 = xor i64 %2967, %2948
  %2972 = add nuw nsw i64 %2970, %2971
  %2973 = icmp eq i64 %2972, 2
  %2974 = zext i1 %2973 to i8
  store i8 %2974, i8* %67, align 1, !tbaa !2450
  %2975 = add i64 %2937, -104
  %2976 = add i64 %2809, 107
  store i64 %2976, i64* %PC, align 8
  %2977 = inttoptr i64 %2975 to i32*
  %2978 = load i32, i32* %2977, align 4
  %2979 = sext i32 %2978 to i64
  store i64 %2979, i64* %RCX, align 8, !tbaa !2428
  %2980 = shl nsw i64 %2979, 3
  %2981 = add i64 %2980, %2949
  %2982 = add i64 %2809, 112
  store i64 %2982, i64* %PC, align 8
  %2983 = inttoptr i64 %2981 to double*
  %2984 = load double, double* %2983, align 8
  %2985 = fmul double %2936, %2984
  store double %2985, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %2986 = load double, double* %230, align 1
  %2987 = fsub double %2986, %2985
  store double %2987, double* %230, align 1, !tbaa !2452
  %2988 = add i64 %2937, 16
  %2989 = add i64 %2809, 120
  store i64 %2989, i64* %PC, align 8
  %2990 = inttoptr i64 %2988 to i64*
  %2991 = load i64, i64* %2990, align 8
  store i64 %2991, i64* %RAX, align 8, !tbaa !2428
  %2992 = load i64, i64* %RBP, align 8
  %2993 = add i64 %2992, -100
  %2994 = add i64 %2809, 124
  store i64 %2994, i64* %PC, align 8
  %2995 = inttoptr i64 %2993 to i32*
  %2996 = load i32, i32* %2995, align 4
  %2997 = sext i32 %2996 to i64
  %2998 = mul nsw i64 %2997, 520
  store i64 %2998, i64* %RCX, align 8, !tbaa !2428
  %2999 = lshr i64 %2998, 63
  %3000 = add i64 %2998, %2991
  store i64 %3000, i64* %RAX, align 8, !tbaa !2428
  %3001 = icmp ult i64 %3000, %2991
  %3002 = icmp ult i64 %3000, %2998
  %3003 = or i1 %3001, %3002
  %3004 = zext i1 %3003 to i8
  store i8 %3004, i8* %43, align 1, !tbaa !2432
  %3005 = trunc i64 %3000 to i32
  %3006 = and i32 %3005, 255
  %3007 = tail call i32 @llvm.ctpop.i32(i32 %3006) #8
  %3008 = trunc i32 %3007 to i8
  %3009 = and i8 %3008, 1
  %3010 = xor i8 %3009, 1
  store i8 %3010, i8* %50, align 1, !tbaa !2446
  %3011 = xor i64 %2998, %2991
  %3012 = xor i64 %3011, %3000
  %3013 = lshr i64 %3012, 4
  %3014 = trunc i64 %3013 to i8
  %3015 = and i8 %3014, 1
  store i8 %3015, i8* %55, align 1, !tbaa !2447
  %3016 = icmp eq i64 %3000, 0
  %3017 = zext i1 %3016 to i8
  store i8 %3017, i8* %58, align 1, !tbaa !2448
  %3018 = lshr i64 %3000, 63
  %3019 = trunc i64 %3018 to i8
  store i8 %3019, i8* %61, align 1, !tbaa !2449
  %3020 = lshr i64 %2991, 63
  %3021 = xor i64 %3018, %3020
  %3022 = xor i64 %3018, %2999
  %3023 = add nuw nsw i64 %3021, %3022
  %3024 = icmp eq i64 %3023, 2
  %3025 = zext i1 %3024 to i8
  store i8 %3025, i8* %67, align 1, !tbaa !2450
  %3026 = add i64 %2992, -104
  %3027 = add i64 %2809, 138
  store i64 %3027, i64* %PC, align 8
  %3028 = inttoptr i64 %3026 to i32*
  %3029 = load i32, i32* %3028, align 4
  %3030 = sext i32 %3029 to i64
  store i64 %3030, i64* %RCX, align 8, !tbaa !2428
  %3031 = shl nsw i64 %3030, 3
  %3032 = add i64 %3031, %3000
  %3033 = add i64 %2809, 143
  store i64 %3033, i64* %PC, align 8
  %3034 = inttoptr i64 %3032 to double*
  store double %2987, double* %3034, align 8
  %3035 = load i64, i64* %RBP, align 8
  %3036 = add i64 %3035, 72
  %3037 = load i64, i64* %PC, align 8
  %3038 = add i64 %3037, 4
  store i64 %3038, i64* %PC, align 8
  %3039 = inttoptr i64 %3036 to i64*
  %3040 = load i64, i64* %3039, align 8
  store i64 %3040, i64* %RAX, align 8, !tbaa !2428
  %3041 = add i64 %3035, -108
  %3042 = add i64 %3037, 8
  store i64 %3042, i64* %PC, align 8
  %3043 = inttoptr i64 %3041 to i32*
  %3044 = load i32, i32* %3043, align 4
  %3045 = sext i32 %3044 to i64
  store i64 %3045, i64* %RCX, align 8, !tbaa !2428
  %3046 = shl nsw i64 %3045, 3
  %3047 = add i64 %3046, %3040
  %3048 = add i64 %3037, 13
  store i64 %3048, i64* %PC, align 8
  %3049 = inttoptr i64 %3047 to double*
  %3050 = load double, double* %3049, align 8
  store double %3050, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %3051 = add i64 %3035, 80
  %3052 = add i64 %3037, 17
  store i64 %3052, i64* %PC, align 8
  %3053 = inttoptr i64 %3051 to i64*
  %3054 = load i64, i64* %3053, align 8
  store i64 %3054, i64* %RAX, align 8, !tbaa !2428
  %3055 = add i64 %3037, 21
  store i64 %3055, i64* %PC, align 8
  %3056 = load i32, i32* %3043, align 4
  %3057 = sext i32 %3056 to i64
  store i64 %3057, i64* %RCX, align 8, !tbaa !2428
  %3058 = shl nsw i64 %3057, 3
  %3059 = add i64 %3058, %3054
  %3060 = add i64 %3037, 26
  store i64 %3060, i64* %PC, align 8
  %3061 = inttoptr i64 %3059 to double*
  %3062 = load double, double* %3061, align 8
  %3063 = fdiv double %3050, %3062
  store double %3063, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %3064 = add i64 %3035, 48
  %3065 = add i64 %3037, 30
  store i64 %3065, i64* %PC, align 8
  %3066 = inttoptr i64 %3064 to i64*
  %3067 = load i64, i64* %3066, align 8
  store i64 %3067, i64* %RAX, align 8, !tbaa !2428
  %3068 = add i64 %3035, -100
  %3069 = add i64 %3037, 34
  store i64 %3069, i64* %PC, align 8
  %3070 = inttoptr i64 %3068 to i32*
  %3071 = load i32, i32* %3070, align 4
  %3072 = sext i32 %3071 to i64
  %3073 = mul nsw i64 %3072, 33800
  store i64 %3073, i64* %RCX, align 8, !tbaa !2428
  %3074 = lshr i64 %3073, 63
  %3075 = add i64 %3073, %3067
  store i64 %3075, i64* %RAX, align 8, !tbaa !2428
  %3076 = icmp ult i64 %3075, %3067
  %3077 = icmp ult i64 %3075, %3073
  %3078 = or i1 %3076, %3077
  %3079 = zext i1 %3078 to i8
  store i8 %3079, i8* %43, align 1, !tbaa !2432
  %3080 = trunc i64 %3075 to i32
  %3081 = and i32 %3080, 255
  %3082 = tail call i32 @llvm.ctpop.i32(i32 %3081) #8
  %3083 = trunc i32 %3082 to i8
  %3084 = and i8 %3083, 1
  %3085 = xor i8 %3084, 1
  store i8 %3085, i8* %50, align 1, !tbaa !2446
  %3086 = xor i64 %3073, %3067
  %3087 = xor i64 %3086, %3075
  %3088 = lshr i64 %3087, 4
  %3089 = trunc i64 %3088 to i8
  %3090 = and i8 %3089, 1
  store i8 %3090, i8* %55, align 1, !tbaa !2447
  %3091 = icmp eq i64 %3075, 0
  %3092 = zext i1 %3091 to i8
  store i8 %3092, i8* %58, align 1, !tbaa !2448
  %3093 = lshr i64 %3075, 63
  %3094 = trunc i64 %3093 to i8
  store i8 %3094, i8* %61, align 1, !tbaa !2449
  %3095 = lshr i64 %3067, 63
  %3096 = xor i64 %3093, %3095
  %3097 = xor i64 %3093, %3074
  %3098 = add nuw nsw i64 %3096, %3097
  %3099 = icmp eq i64 %3098, 2
  %3100 = zext i1 %3099 to i8
  store i8 %3100, i8* %67, align 1, !tbaa !2450
  %3101 = load i64, i64* %RBP, align 8
  %3102 = add i64 %3101, -52
  %3103 = add i64 %3037, 48
  store i64 %3103, i64* %PC, align 8
  %3104 = inttoptr i64 %3102 to i32*
  %3105 = load i32, i32* %3104, align 4
  %3106 = sext i32 %3105 to i64
  %3107 = mul nsw i64 %3106, 520
  store i64 %3107, i64* %RCX, align 8, !tbaa !2428
  %3108 = lshr i64 %3107, 63
  %3109 = add i64 %3107, %3075
  store i64 %3109, i64* %RAX, align 8, !tbaa !2428
  %3110 = icmp ult i64 %3109, %3075
  %3111 = icmp ult i64 %3109, %3107
  %3112 = or i1 %3110, %3111
  %3113 = zext i1 %3112 to i8
  store i8 %3113, i8* %43, align 1, !tbaa !2432
  %3114 = trunc i64 %3109 to i32
  %3115 = and i32 %3114, 255
  %3116 = tail call i32 @llvm.ctpop.i32(i32 %3115) #8
  %3117 = trunc i32 %3116 to i8
  %3118 = and i8 %3117, 1
  %3119 = xor i8 %3118, 1
  store i8 %3119, i8* %50, align 1, !tbaa !2446
  %3120 = xor i64 %3107, %3075
  %3121 = xor i64 %3120, %3109
  %3122 = lshr i64 %3121, 4
  %3123 = trunc i64 %3122 to i8
  %3124 = and i8 %3123, 1
  store i8 %3124, i8* %55, align 1, !tbaa !2447
  %3125 = icmp eq i64 %3109, 0
  %3126 = zext i1 %3125 to i8
  store i8 %3126, i8* %58, align 1, !tbaa !2448
  %3127 = lshr i64 %3109, 63
  %3128 = trunc i64 %3127 to i8
  store i8 %3128, i8* %61, align 1, !tbaa !2449
  %3129 = xor i64 %3127, %3093
  %3130 = xor i64 %3127, %3108
  %3131 = add nuw nsw i64 %3129, %3130
  %3132 = icmp eq i64 %3131, 2
  %3133 = zext i1 %3132 to i8
  store i8 %3133, i8* %67, align 1, !tbaa !2450
  %3134 = add i64 %3101, -108
  %3135 = add i64 %3037, 62
  store i64 %3135, i64* %PC, align 8
  %3136 = inttoptr i64 %3134 to i32*
  %3137 = load i32, i32* %3136, align 4
  %3138 = sext i32 %3137 to i64
  store i64 %3138, i64* %RCX, align 8, !tbaa !2428
  %3139 = shl nsw i64 %3138, 3
  %3140 = add i64 %3139, %3109
  %3141 = add i64 %3037, 67
  store i64 %3141, i64* %PC, align 8
  %3142 = load double, double* %230, align 1
  %3143 = inttoptr i64 %3140 to double*
  %3144 = load double, double* %3143, align 8
  %3145 = fmul double %3142, %3144
  store double %3145, double* %230, align 1, !tbaa !2452
  %3146 = add i64 %3101, -64
  %3147 = add i64 %3037, 72
  store i64 %3147, i64* %PC, align 8
  %3148 = inttoptr i64 %3146 to double*
  %3149 = load double, double* %3148, align 8
  store double %3149, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %3150 = add i64 %3101, 64
  %3151 = add i64 %3037, 76
  store i64 %3151, i64* %PC, align 8
  %3152 = inttoptr i64 %3150 to i64*
  %3153 = load i64, i64* %3152, align 8
  store i64 %3153, i64* %RAX, align 8, !tbaa !2428
  %3154 = add i64 %3101, -100
  %3155 = add i64 %3037, 80
  store i64 %3155, i64* %PC, align 8
  %3156 = inttoptr i64 %3154 to i32*
  %3157 = load i32, i32* %3156, align 4
  %3158 = sext i32 %3157 to i64
  store i64 %3158, i64* %RCX, align 8, !tbaa !2428
  %3159 = shl nsw i64 %3158, 3
  %3160 = add i64 %3159, %3153
  %3161 = add i64 %3037, 85
  store i64 %3161, i64* %PC, align 8
  %3162 = inttoptr i64 %3160 to double*
  %3163 = load double, double* %3162, align 8
  %3164 = fmul double %3149, %3163
  store double %3164, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %3165 = load i64, i64* %RBP, align 8
  %3166 = add i64 %3165, 80
  %3167 = add i64 %3037, 89
  store i64 %3167, i64* %PC, align 8
  %3168 = inttoptr i64 %3166 to i64*
  %3169 = load i64, i64* %3168, align 8
  store i64 %3169, i64* %RAX, align 8, !tbaa !2428
  %3170 = add i64 %3165, -108
  %3171 = add i64 %3037, 93
  store i64 %3171, i64* %PC, align 8
  %3172 = inttoptr i64 %3170 to i32*
  %3173 = load i32, i32* %3172, align 4
  %3174 = sext i32 %3173 to i64
  store i64 %3174, i64* %RCX, align 8, !tbaa !2428
  %3175 = shl nsw i64 %3174, 3
  %3176 = add i64 %3175, %3169
  %3177 = add i64 %3037, 98
  store i64 %3177, i64* %PC, align 8
  %3178 = inttoptr i64 %3176 to double*
  %3179 = load double, double* %3178, align 8
  %3180 = fdiv double %3164, %3179
  store double %3180, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %3181 = add i64 %3165, 16
  %3182 = add i64 %3037, 102
  store i64 %3182, i64* %PC, align 8
  %3183 = inttoptr i64 %3181 to i64*
  %3184 = load i64, i64* %3183, align 8
  store i64 %3184, i64* %RAX, align 8, !tbaa !2428
  %3185 = add i64 %3165, -100
  %3186 = add i64 %3037, 106
  store i64 %3186, i64* %PC, align 8
  %3187 = inttoptr i64 %3185 to i32*
  %3188 = load i32, i32* %3187, align 4
  %3189 = sext i32 %3188 to i64
  %3190 = mul nsw i64 %3189, 520
  store i64 %3190, i64* %RCX, align 8, !tbaa !2428
  %3191 = lshr i64 %3190, 63
  %3192 = add i64 %3190, %3184
  store i64 %3192, i64* %RAX, align 8, !tbaa !2428
  %3193 = icmp ult i64 %3192, %3184
  %3194 = icmp ult i64 %3192, %3190
  %3195 = or i1 %3193, %3194
  %3196 = zext i1 %3195 to i8
  store i8 %3196, i8* %43, align 1, !tbaa !2432
  %3197 = trunc i64 %3192 to i32
  %3198 = and i32 %3197, 255
  %3199 = tail call i32 @llvm.ctpop.i32(i32 %3198) #8
  %3200 = trunc i32 %3199 to i8
  %3201 = and i8 %3200, 1
  %3202 = xor i8 %3201, 1
  store i8 %3202, i8* %50, align 1, !tbaa !2446
  %3203 = xor i64 %3190, %3184
  %3204 = xor i64 %3203, %3192
  %3205 = lshr i64 %3204, 4
  %3206 = trunc i64 %3205 to i8
  %3207 = and i8 %3206, 1
  store i8 %3207, i8* %55, align 1, !tbaa !2447
  %3208 = icmp eq i64 %3192, 0
  %3209 = zext i1 %3208 to i8
  store i8 %3209, i8* %58, align 1, !tbaa !2448
  %3210 = lshr i64 %3192, 63
  %3211 = trunc i64 %3210 to i8
  store i8 %3211, i8* %61, align 1, !tbaa !2449
  %3212 = lshr i64 %3184, 63
  %3213 = xor i64 %3210, %3212
  %3214 = xor i64 %3210, %3191
  %3215 = add nuw nsw i64 %3213, %3214
  %3216 = icmp eq i64 %3215, 2
  %3217 = zext i1 %3216 to i8
  store i8 %3217, i8* %67, align 1, !tbaa !2450
  %3218 = add i64 %3165, -104
  %3219 = add i64 %3037, 120
  store i64 %3219, i64* %PC, align 8
  %3220 = inttoptr i64 %3218 to i32*
  %3221 = load i32, i32* %3220, align 4
  %3222 = sext i32 %3221 to i64
  store i64 %3222, i64* %RCX, align 8, !tbaa !2428
  %3223 = shl nsw i64 %3222, 3
  %3224 = add i64 %3223, %3192
  %3225 = add i64 %3037, 125
  store i64 %3225, i64* %PC, align 8
  %3226 = inttoptr i64 %3224 to double*
  %3227 = load double, double* %3226, align 8
  %3228 = fmul double %3180, %3227
  store double %3228, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %3229 = load double, double* %230, align 1
  %3230 = fadd double %3229, %3228
  store double %3230, double* %230, align 1, !tbaa !2452
  %3231 = load i64, i64* %RBP, align 8
  %3232 = add i64 %3231, -64
  %3233 = add i64 %3037, 134
  store i64 %3233, i64* %PC, align 8
  %3234 = inttoptr i64 %3232 to double*
  %3235 = load double, double* %3234, align 8
  store double %3235, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %3236 = add i64 %3231, 56
  %3237 = add i64 %3037, 138
  store i64 %3237, i64* %PC, align 8
  %3238 = inttoptr i64 %3236 to i64*
  %3239 = load i64, i64* %3238, align 8
  store i64 %3239, i64* %RAX, align 8, !tbaa !2428
  %3240 = add i64 %3231, -100
  %3241 = add i64 %3037, 142
  store i64 %3241, i64* %PC, align 8
  %3242 = inttoptr i64 %3240 to i32*
  %3243 = load i32, i32* %3242, align 4
  %3244 = sext i32 %3243 to i64
  store i64 %3244, i64* %RCX, align 8, !tbaa !2428
  %3245 = shl nsw i64 %3244, 3
  %3246 = add i64 %3245, %3239
  %3247 = add i64 %3037, 147
  store i64 %3247, i64* %PC, align 8
  %3248 = inttoptr i64 %3246 to double*
  %3249 = load double, double* %3248, align 8
  %3250 = fmul double %3235, %3249
  store double %3250, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %3251 = add i64 %3231, 80
  %3252 = add i64 %3037, 151
  store i64 %3252, i64* %PC, align 8
  %3253 = inttoptr i64 %3251 to i64*
  %3254 = load i64, i64* %3253, align 8
  store i64 %3254, i64* %RAX, align 8, !tbaa !2428
  %3255 = add i64 %3231, -108
  %3256 = add i64 %3037, 155
  store i64 %3256, i64* %PC, align 8
  %3257 = inttoptr i64 %3255 to i32*
  %3258 = load i32, i32* %3257, align 4
  %3259 = sext i32 %3258 to i64
  store i64 %3259, i64* %RCX, align 8, !tbaa !2428
  %3260 = shl nsw i64 %3259, 3
  %3261 = add i64 %3260, %3254
  %3262 = add i64 %3037, 160
  store i64 %3262, i64* %PC, align 8
  %3263 = inttoptr i64 %3261 to double*
  %3264 = load double, double* %3263, align 8
  %3265 = fdiv double %3250, %3264
  store double %3265, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %3266 = add i64 %3231, 24
  %3267 = add i64 %3037, 164
  store i64 %3267, i64* %PC, align 8
  %3268 = inttoptr i64 %3266 to i64*
  %3269 = load i64, i64* %3268, align 8
  store i64 %3269, i64* %RAX, align 8, !tbaa !2428
  %3270 = add i64 %3037, 168
  store i64 %3270, i64* %PC, align 8
  %3271 = load i32, i32* %3242, align 4
  %3272 = sext i32 %3271 to i64
  %3273 = mul nsw i64 %3272, 33800
  store i64 %3273, i64* %RCX, align 8, !tbaa !2428
  %3274 = lshr i64 %3273, 63
  %3275 = add i64 %3273, %3269
  store i64 %3275, i64* %RAX, align 8, !tbaa !2428
  %3276 = icmp ult i64 %3275, %3269
  %3277 = icmp ult i64 %3275, %3273
  %3278 = or i1 %3276, %3277
  %3279 = zext i1 %3278 to i8
  store i8 %3279, i8* %43, align 1, !tbaa !2432
  %3280 = trunc i64 %3275 to i32
  %3281 = and i32 %3280, 255
  %3282 = tail call i32 @llvm.ctpop.i32(i32 %3281) #8
  %3283 = trunc i32 %3282 to i8
  %3284 = and i8 %3283, 1
  %3285 = xor i8 %3284, 1
  store i8 %3285, i8* %50, align 1, !tbaa !2446
  %3286 = xor i64 %3273, %3269
  %3287 = xor i64 %3286, %3275
  %3288 = lshr i64 %3287, 4
  %3289 = trunc i64 %3288 to i8
  %3290 = and i8 %3289, 1
  store i8 %3290, i8* %55, align 1, !tbaa !2447
  %3291 = icmp eq i64 %3275, 0
  %3292 = zext i1 %3291 to i8
  store i8 %3292, i8* %58, align 1, !tbaa !2448
  %3293 = lshr i64 %3275, 63
  %3294 = trunc i64 %3293 to i8
  store i8 %3294, i8* %61, align 1, !tbaa !2449
  %3295 = lshr i64 %3269, 63
  %3296 = xor i64 %3293, %3295
  %3297 = xor i64 %3293, %3274
  %3298 = add nuw nsw i64 %3296, %3297
  %3299 = icmp eq i64 %3298, 2
  %3300 = zext i1 %3299 to i8
  store i8 %3300, i8* %67, align 1, !tbaa !2450
  %3301 = load i64, i64* %RBP, align 8
  %3302 = add i64 %3301, -52
  %3303 = add i64 %3037, 182
  store i64 %3303, i64* %PC, align 8
  %3304 = inttoptr i64 %3302 to i32*
  %3305 = load i32, i32* %3304, align 4
  %3306 = sext i32 %3305 to i64
  %3307 = mul nsw i64 %3306, 520
  store i64 %3307, i64* %RCX, align 8, !tbaa !2428
  %3308 = lshr i64 %3307, 63
  %3309 = add i64 %3307, %3275
  store i64 %3309, i64* %RAX, align 8, !tbaa !2428
  %3310 = icmp ult i64 %3309, %3275
  %3311 = icmp ult i64 %3309, %3307
  %3312 = or i1 %3310, %3311
  %3313 = zext i1 %3312 to i8
  store i8 %3313, i8* %43, align 1, !tbaa !2432
  %3314 = trunc i64 %3309 to i32
  %3315 = and i32 %3314, 255
  %3316 = tail call i32 @llvm.ctpop.i32(i32 %3315) #8
  %3317 = trunc i32 %3316 to i8
  %3318 = and i8 %3317, 1
  %3319 = xor i8 %3318, 1
  store i8 %3319, i8* %50, align 1, !tbaa !2446
  %3320 = xor i64 %3307, %3275
  %3321 = xor i64 %3320, %3309
  %3322 = lshr i64 %3321, 4
  %3323 = trunc i64 %3322 to i8
  %3324 = and i8 %3323, 1
  store i8 %3324, i8* %55, align 1, !tbaa !2447
  %3325 = icmp eq i64 %3309, 0
  %3326 = zext i1 %3325 to i8
  store i8 %3326, i8* %58, align 1, !tbaa !2448
  %3327 = lshr i64 %3309, 63
  %3328 = trunc i64 %3327 to i8
  store i8 %3328, i8* %61, align 1, !tbaa !2449
  %3329 = xor i64 %3327, %3293
  %3330 = xor i64 %3327, %3308
  %3331 = add nuw nsw i64 %3329, %3330
  %3332 = icmp eq i64 %3331, 2
  %3333 = zext i1 %3332 to i8
  store i8 %3333, i8* %67, align 1, !tbaa !2450
  %3334 = add i64 %3301, -108
  %3335 = add i64 %3037, 196
  store i64 %3335, i64* %PC, align 8
  %3336 = inttoptr i64 %3334 to i32*
  %3337 = load i32, i32* %3336, align 4
  %3338 = sext i32 %3337 to i64
  store i64 %3338, i64* %RCX, align 8, !tbaa !2428
  %3339 = shl nsw i64 %3338, 3
  %3340 = add i64 %3339, %3309
  %3341 = add i64 %3037, 201
  store i64 %3341, i64* %PC, align 8
  %3342 = load double, double* %233, align 1
  %3343 = inttoptr i64 %3340 to double*
  %3344 = load double, double* %3343, align 8
  %3345 = fmul double %3342, %3344
  store double %3345, double* %233, align 1, !tbaa !2452
  %3346 = load double, double* %230, align 1
  %3347 = fsub double %3346, %3345
  store double %3347, double* %230, align 1, !tbaa !2452
  %3348 = add i64 %3301, 48
  %3349 = add i64 %3037, 209
  store i64 %3349, i64* %PC, align 8
  %3350 = inttoptr i64 %3348 to i64*
  %3351 = load i64, i64* %3350, align 8
  store i64 %3351, i64* %RAX, align 8, !tbaa !2428
  %3352 = add i64 %3301, -100
  %3353 = add i64 %3037, 213
  store i64 %3353, i64* %PC, align 8
  %3354 = inttoptr i64 %3352 to i32*
  %3355 = load i32, i32* %3354, align 4
  %3356 = sext i32 %3355 to i64
  %3357 = mul nsw i64 %3356, 33800
  store i64 %3357, i64* %RCX, align 8, !tbaa !2428
  %3358 = lshr i64 %3357, 63
  %3359 = add i64 %3357, %3351
  store i64 %3359, i64* %RAX, align 8, !tbaa !2428
  %3360 = icmp ult i64 %3359, %3351
  %3361 = icmp ult i64 %3359, %3357
  %3362 = or i1 %3360, %3361
  %3363 = zext i1 %3362 to i8
  store i8 %3363, i8* %43, align 1, !tbaa !2432
  %3364 = trunc i64 %3359 to i32
  %3365 = and i32 %3364, 255
  %3366 = tail call i32 @llvm.ctpop.i32(i32 %3365) #8
  %3367 = trunc i32 %3366 to i8
  %3368 = and i8 %3367, 1
  %3369 = xor i8 %3368, 1
  store i8 %3369, i8* %50, align 1, !tbaa !2446
  %3370 = xor i64 %3357, %3351
  %3371 = xor i64 %3370, %3359
  %3372 = lshr i64 %3371, 4
  %3373 = trunc i64 %3372 to i8
  %3374 = and i8 %3373, 1
  store i8 %3374, i8* %55, align 1, !tbaa !2447
  %3375 = icmp eq i64 %3359, 0
  %3376 = zext i1 %3375 to i8
  store i8 %3376, i8* %58, align 1, !tbaa !2448
  %3377 = lshr i64 %3359, 63
  %3378 = trunc i64 %3377 to i8
  store i8 %3378, i8* %61, align 1, !tbaa !2449
  %3379 = lshr i64 %3351, 63
  %3380 = xor i64 %3377, %3379
  %3381 = xor i64 %3377, %3358
  %3382 = add nuw nsw i64 %3380, %3381
  %3383 = icmp eq i64 %3382, 2
  %3384 = zext i1 %3383 to i8
  store i8 %3384, i8* %67, align 1, !tbaa !2450
  %3385 = load i64, i64* %RBP, align 8
  %3386 = add i64 %3385, -52
  %3387 = add i64 %3037, 227
  store i64 %3387, i64* %PC, align 8
  %3388 = inttoptr i64 %3386 to i32*
  %3389 = load i32, i32* %3388, align 4
  %3390 = sext i32 %3389 to i64
  %3391 = mul nsw i64 %3390, 520
  store i64 %3391, i64* %RCX, align 8, !tbaa !2428
  %3392 = lshr i64 %3391, 63
  %3393 = add i64 %3391, %3359
  store i64 %3393, i64* %RAX, align 8, !tbaa !2428
  %3394 = icmp ult i64 %3393, %3359
  %3395 = icmp ult i64 %3393, %3391
  %3396 = or i1 %3394, %3395
  %3397 = zext i1 %3396 to i8
  store i8 %3397, i8* %43, align 1, !tbaa !2432
  %3398 = trunc i64 %3393 to i32
  %3399 = and i32 %3398, 255
  %3400 = tail call i32 @llvm.ctpop.i32(i32 %3399) #8
  %3401 = trunc i32 %3400 to i8
  %3402 = and i8 %3401, 1
  %3403 = xor i8 %3402, 1
  store i8 %3403, i8* %50, align 1, !tbaa !2446
  %3404 = xor i64 %3391, %3359
  %3405 = xor i64 %3404, %3393
  %3406 = lshr i64 %3405, 4
  %3407 = trunc i64 %3406 to i8
  %3408 = and i8 %3407, 1
  store i8 %3408, i8* %55, align 1, !tbaa !2447
  %3409 = icmp eq i64 %3393, 0
  %3410 = zext i1 %3409 to i8
  store i8 %3410, i8* %58, align 1, !tbaa !2448
  %3411 = lshr i64 %3393, 63
  %3412 = trunc i64 %3411 to i8
  store i8 %3412, i8* %61, align 1, !tbaa !2449
  %3413 = xor i64 %3411, %3377
  %3414 = xor i64 %3411, %3392
  %3415 = add nuw nsw i64 %3413, %3414
  %3416 = icmp eq i64 %3415, 2
  %3417 = zext i1 %3416 to i8
  store i8 %3417, i8* %67, align 1, !tbaa !2450
  %3418 = add i64 %3385, -108
  %3419 = add i64 %3037, 241
  store i64 %3419, i64* %PC, align 8
  %3420 = inttoptr i64 %3418 to i32*
  %3421 = load i32, i32* %3420, align 4
  %3422 = sext i32 %3421 to i64
  store i64 %3422, i64* %RCX, align 8, !tbaa !2428
  %3423 = shl nsw i64 %3422, 3
  %3424 = add i64 %3423, %3393
  %3425 = add i64 %3037, 246
  store i64 %3425, i64* %PC, align 8
  %3426 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %3427 = load i64, i64* %3426, align 1
  %3428 = inttoptr i64 %3424 to i64*
  store i64 %3427, i64* %3428, align 8
  %3429 = load i64, i64* %RBP, align 8
  %3430 = add i64 %3429, 16
  %3431 = load i64, i64* %PC, align 8
  %3432 = add i64 %3431, 4
  store i64 %3432, i64* %PC, align 8
  %3433 = inttoptr i64 %3430 to i64*
  %3434 = load i64, i64* %3433, align 8
  store i64 %3434, i64* %RAX, align 8, !tbaa !2428
  %3435 = add i64 %3429, -100
  %3436 = add i64 %3431, 8
  store i64 %3436, i64* %PC, align 8
  %3437 = inttoptr i64 %3435 to i32*
  %3438 = load i32, i32* %3437, align 4
  %3439 = sext i32 %3438 to i64
  %3440 = mul nsw i64 %3439, 520
  store i64 %3440, i64* %RCX, align 8, !tbaa !2428
  %3441 = lshr i64 %3440, 63
  %3442 = add i64 %3440, %3434
  store i64 %3442, i64* %RAX, align 8, !tbaa !2428
  %3443 = icmp ult i64 %3442, %3434
  %3444 = icmp ult i64 %3442, %3440
  %3445 = or i1 %3443, %3444
  %3446 = zext i1 %3445 to i8
  store i8 %3446, i8* %43, align 1, !tbaa !2432
  %3447 = trunc i64 %3442 to i32
  %3448 = and i32 %3447, 255
  %3449 = tail call i32 @llvm.ctpop.i32(i32 %3448) #8
  %3450 = trunc i32 %3449 to i8
  %3451 = and i8 %3450, 1
  %3452 = xor i8 %3451, 1
  store i8 %3452, i8* %50, align 1, !tbaa !2446
  %3453 = xor i64 %3440, %3434
  %3454 = xor i64 %3453, %3442
  %3455 = lshr i64 %3454, 4
  %3456 = trunc i64 %3455 to i8
  %3457 = and i8 %3456, 1
  store i8 %3457, i8* %55, align 1, !tbaa !2447
  %3458 = icmp eq i64 %3442, 0
  %3459 = zext i1 %3458 to i8
  store i8 %3459, i8* %58, align 1, !tbaa !2448
  %3460 = lshr i64 %3442, 63
  %3461 = trunc i64 %3460 to i8
  store i8 %3461, i8* %61, align 1, !tbaa !2449
  %3462 = lshr i64 %3434, 63
  %3463 = xor i64 %3460, %3462
  %3464 = xor i64 %3460, %3441
  %3465 = add nuw nsw i64 %3463, %3464
  %3466 = icmp eq i64 %3465, 2
  %3467 = zext i1 %3466 to i8
  store i8 %3467, i8* %67, align 1, !tbaa !2450
  %3468 = add i64 %3429, -104
  %3469 = add i64 %3431, 22
  store i64 %3469, i64* %PC, align 8
  %3470 = inttoptr i64 %3468 to i32*
  %3471 = load i32, i32* %3470, align 4
  %3472 = sext i32 %3471 to i64
  store i64 %3472, i64* %RCX, align 8, !tbaa !2428
  %3473 = shl nsw i64 %3472, 3
  %3474 = add i64 %3473, %3442
  %3475 = add i64 %3431, 27
  store i64 %3475, i64* %PC, align 8
  %3476 = inttoptr i64 %3474 to i64*
  %3477 = load i64, i64* %3476, align 8
  %3478 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %3477, i64* %3478, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %3479 = add i64 %3429, 24
  %3480 = add i64 %3431, 31
  store i64 %3480, i64* %PC, align 8
  %3481 = inttoptr i64 %3479 to i64*
  %3482 = load i64, i64* %3481, align 8
  store i64 %3482, i64* %RAX, align 8, !tbaa !2428
  %3483 = add i64 %3431, 35
  store i64 %3483, i64* %PC, align 8
  %3484 = load i32, i32* %3437, align 4
  %3485 = sext i32 %3484 to i64
  %3486 = mul nsw i64 %3485, 33800
  store i64 %3486, i64* %RCX, align 8, !tbaa !2428
  %3487 = lshr i64 %3486, 63
  %3488 = add i64 %3486, %3482
  store i64 %3488, i64* %RAX, align 8, !tbaa !2428
  %3489 = icmp ult i64 %3488, %3482
  %3490 = icmp ult i64 %3488, %3486
  %3491 = or i1 %3489, %3490
  %3492 = zext i1 %3491 to i8
  store i8 %3492, i8* %43, align 1, !tbaa !2432
  %3493 = trunc i64 %3488 to i32
  %3494 = and i32 %3493, 255
  %3495 = tail call i32 @llvm.ctpop.i32(i32 %3494) #8
  %3496 = trunc i32 %3495 to i8
  %3497 = and i8 %3496, 1
  %3498 = xor i8 %3497, 1
  store i8 %3498, i8* %50, align 1, !tbaa !2446
  %3499 = xor i64 %3486, %3482
  %3500 = xor i64 %3499, %3488
  %3501 = lshr i64 %3500, 4
  %3502 = trunc i64 %3501 to i8
  %3503 = and i8 %3502, 1
  store i8 %3503, i8* %55, align 1, !tbaa !2447
  %3504 = icmp eq i64 %3488, 0
  %3505 = zext i1 %3504 to i8
  store i8 %3505, i8* %58, align 1, !tbaa !2448
  %3506 = lshr i64 %3488, 63
  %3507 = trunc i64 %3506 to i8
  store i8 %3507, i8* %61, align 1, !tbaa !2449
  %3508 = lshr i64 %3482, 63
  %3509 = xor i64 %3506, %3508
  %3510 = xor i64 %3506, %3487
  %3511 = add nuw nsw i64 %3509, %3510
  %3512 = icmp eq i64 %3511, 2
  %3513 = zext i1 %3512 to i8
  store i8 %3513, i8* %67, align 1, !tbaa !2450
  %3514 = load i64, i64* %RBP, align 8
  %3515 = add i64 %3514, -52
  %3516 = add i64 %3431, 49
  store i64 %3516, i64* %PC, align 8
  %3517 = inttoptr i64 %3515 to i32*
  %3518 = load i32, i32* %3517, align 4
  %3519 = sext i32 %3518 to i64
  %3520 = mul nsw i64 %3519, 520
  store i64 %3520, i64* %RCX, align 8, !tbaa !2428
  %3521 = lshr i64 %3520, 63
  %3522 = add i64 %3520, %3488
  store i64 %3522, i64* %RAX, align 8, !tbaa !2428
  %3523 = icmp ult i64 %3522, %3488
  %3524 = icmp ult i64 %3522, %3520
  %3525 = or i1 %3523, %3524
  %3526 = zext i1 %3525 to i8
  store i8 %3526, i8* %43, align 1, !tbaa !2432
  %3527 = trunc i64 %3522 to i32
  %3528 = and i32 %3527, 255
  %3529 = tail call i32 @llvm.ctpop.i32(i32 %3528) #8
  %3530 = trunc i32 %3529 to i8
  %3531 = and i8 %3530, 1
  %3532 = xor i8 %3531, 1
  store i8 %3532, i8* %50, align 1, !tbaa !2446
  %3533 = xor i64 %3520, %3488
  %3534 = xor i64 %3533, %3522
  %3535 = lshr i64 %3534, 4
  %3536 = trunc i64 %3535 to i8
  %3537 = and i8 %3536, 1
  store i8 %3537, i8* %55, align 1, !tbaa !2447
  %3538 = icmp eq i64 %3522, 0
  %3539 = zext i1 %3538 to i8
  store i8 %3539, i8* %58, align 1, !tbaa !2448
  %3540 = lshr i64 %3522, 63
  %3541 = trunc i64 %3540 to i8
  store i8 %3541, i8* %61, align 1, !tbaa !2449
  %3542 = xor i64 %3540, %3506
  %3543 = xor i64 %3540, %3521
  %3544 = add nuw nsw i64 %3542, %3543
  %3545 = icmp eq i64 %3544, 2
  %3546 = zext i1 %3545 to i8
  store i8 %3546, i8* %67, align 1, !tbaa !2450
  %3547 = add i64 %3514, -108
  %3548 = add i64 %3431, 63
  store i64 %3548, i64* %PC, align 8
  %3549 = inttoptr i64 %3547 to i32*
  %3550 = load i32, i32* %3549, align 4
  %3551 = sext i32 %3550 to i64
  store i64 %3551, i64* %RCX, align 8, !tbaa !2428
  %3552 = shl nsw i64 %3551, 3
  %3553 = add i64 %3552, %3522
  %3554 = add i64 %3431, 68
  store i64 %3554, i64* %PC, align 8
  %3555 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %3556 = load i64, i64* %3555, align 1
  %3557 = inttoptr i64 %3553 to i64*
  store i64 %3556, i64* %3557, align 8
  %3558 = load i64, i64* %RBP, align 8
  %3559 = add i64 %3558, -108
  %3560 = load i64, i64* %PC, align 8
  %3561 = add i64 %3560, 3
  store i64 %3561, i64* %PC, align 8
  %3562 = inttoptr i64 %3559 to i32*
  %3563 = load i32, i32* %3562, align 4
  %3564 = add i32 %3563, 1
  %3565 = zext i32 %3564 to i64
  store i64 %3565, i64* %RAX, align 8, !tbaa !2428
  %3566 = icmp eq i32 %3563, -1
  %3567 = icmp eq i32 %3564, 0
  %3568 = or i1 %3566, %3567
  %3569 = zext i1 %3568 to i8
  store i8 %3569, i8* %43, align 1, !tbaa !2432
  %3570 = and i32 %3564, 255
  %3571 = tail call i32 @llvm.ctpop.i32(i32 %3570) #8
  %3572 = trunc i32 %3571 to i8
  %3573 = and i8 %3572, 1
  %3574 = xor i8 %3573, 1
  store i8 %3574, i8* %50, align 1, !tbaa !2446
  %3575 = xor i32 %3563, %3564
  %3576 = lshr i32 %3575, 4
  %3577 = trunc i32 %3576 to i8
  %3578 = and i8 %3577, 1
  store i8 %3578, i8* %55, align 1, !tbaa !2447
  %3579 = icmp eq i32 %3564, 0
  %3580 = zext i1 %3579 to i8
  store i8 %3580, i8* %58, align 1, !tbaa !2448
  %3581 = lshr i32 %3564, 31
  %3582 = trunc i32 %3581 to i8
  store i8 %3582, i8* %61, align 1, !tbaa !2449
  %3583 = lshr i32 %3563, 31
  %3584 = xor i32 %3581, %3583
  %3585 = add nuw nsw i32 %3584, %3581
  %3586 = icmp eq i32 %3585, 2
  %3587 = zext i1 %3586 to i8
  store i8 %3587, i8* %67, align 1, !tbaa !2450
  %3588 = add i64 %3560, 9
  store i64 %3588, i64* %PC, align 8
  store i32 %3564, i32* %3562, align 4
  %3589 = load i64, i64* %PC, align 8
  %3590 = add i64 %3589, -660
  store i64 %3590, i64* %229, align 8, !tbaa !2428
  br label %block_402512

block_401fec:                                     ; preds = %block_401fe0
  %3591 = add i64 %4812, -108
  %3592 = add i64 %4774, 36
  store i64 %3592, i64* %PC, align 8
  %3593 = inttoptr i64 %3591 to i32*
  %3594 = load i32, i32* %3593, align 4
  %3595 = sext i32 %3594 to i64
  store i64 %3595, i64* %RCX, align 8, !tbaa !2428
  %3596 = shl nsw i64 %3595, 3
  %3597 = add i64 %3596, %4821
  %3598 = add i64 %4774, 41
  store i64 %3598, i64* %PC, align 8
  %3599 = inttoptr i64 %3597 to i64*
  %3600 = load i64, i64* %3599, align 8
  %3601 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %3600, i64* %3601, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %3602 = add i64 %4812, 32
  %3603 = add i64 %4774, 45
  store i64 %3603, i64* %PC, align 8
  %3604 = inttoptr i64 %3602 to i64*
  %3605 = load i64, i64* %3604, align 8
  store i64 %3605, i64* %RAX, align 8, !tbaa !2428
  %3606 = add i64 %4812, -100
  %3607 = add i64 %4774, 49
  store i64 %3607, i64* %PC, align 8
  %3608 = inttoptr i64 %3606 to i32*
  %3609 = load i32, i32* %3608, align 4
  %3610 = sext i32 %3609 to i64
  %3611 = mul nsw i64 %3610, 33800
  store i64 %3611, i64* %RCX, align 8, !tbaa !2428
  %3612 = lshr i64 %3611, 63
  %3613 = add i64 %3611, %3605
  store i64 %3613, i64* %RAX, align 8, !tbaa !2428
  %3614 = icmp ult i64 %3613, %3605
  %3615 = icmp ult i64 %3613, %3611
  %3616 = or i1 %3614, %3615
  %3617 = zext i1 %3616 to i8
  store i8 %3617, i8* %43, align 1, !tbaa !2432
  %3618 = trunc i64 %3613 to i32
  %3619 = and i32 %3618, 255
  %3620 = tail call i32 @llvm.ctpop.i32(i32 %3619) #8
  %3621 = trunc i32 %3620 to i8
  %3622 = and i8 %3621, 1
  %3623 = xor i8 %3622, 1
  store i8 %3623, i8* %50, align 1, !tbaa !2446
  %3624 = xor i64 %3611, %3605
  %3625 = xor i64 %3624, %3613
  %3626 = lshr i64 %3625, 4
  %3627 = trunc i64 %3626 to i8
  %3628 = and i8 %3627, 1
  store i8 %3628, i8* %55, align 1, !tbaa !2447
  %3629 = icmp eq i64 %3613, 0
  %3630 = zext i1 %3629 to i8
  store i8 %3630, i8* %58, align 1, !tbaa !2448
  %3631 = lshr i64 %3613, 63
  %3632 = trunc i64 %3631 to i8
  store i8 %3632, i8* %61, align 1, !tbaa !2449
  %3633 = lshr i64 %3605, 63
  %3634 = xor i64 %3631, %3633
  %3635 = xor i64 %3631, %3612
  %3636 = add nuw nsw i64 %3634, %3635
  %3637 = icmp eq i64 %3636, 2
  %3638 = zext i1 %3637 to i8
  store i8 %3638, i8* %67, align 1, !tbaa !2450
  %3639 = add i64 %4774, 62
  store i64 %3639, i64* %PC, align 8
  %3640 = load i32, i32* %4815, align 4
  %3641 = add i32 %3640, 1
  %3642 = zext i32 %3641 to i64
  store i64 %3642, i64* %RDX, align 8, !tbaa !2428
  %3643 = sext i32 %3641 to i64
  %3644 = mul nsw i64 %3643, 520
  store i64 %3644, i64* %RCX, align 8, !tbaa !2428
  %3645 = lshr i64 %3644, 63
  %3646 = load i64, i64* %RAX, align 8
  %3647 = add i64 %3644, %3646
  store i64 %3647, i64* %RAX, align 8, !tbaa !2428
  %3648 = icmp ult i64 %3647, %3646
  %3649 = icmp ult i64 %3647, %3644
  %3650 = or i1 %3648, %3649
  %3651 = zext i1 %3650 to i8
  store i8 %3651, i8* %43, align 1, !tbaa !2432
  %3652 = trunc i64 %3647 to i32
  %3653 = and i32 %3652, 255
  %3654 = tail call i32 @llvm.ctpop.i32(i32 %3653) #8
  %3655 = trunc i32 %3654 to i8
  %3656 = and i8 %3655, 1
  %3657 = xor i8 %3656, 1
  store i8 %3657, i8* %50, align 1, !tbaa !2446
  %3658 = xor i64 %3644, %3646
  %3659 = xor i64 %3658, %3647
  %3660 = lshr i64 %3659, 4
  %3661 = trunc i64 %3660 to i8
  %3662 = and i8 %3661, 1
  store i8 %3662, i8* %55, align 1, !tbaa !2447
  %3663 = icmp eq i64 %3647, 0
  %3664 = zext i1 %3663 to i8
  store i8 %3664, i8* %58, align 1, !tbaa !2448
  %3665 = lshr i64 %3647, 63
  %3666 = trunc i64 %3665 to i8
  store i8 %3666, i8* %61, align 1, !tbaa !2449
  %3667 = lshr i64 %3646, 63
  %3668 = xor i64 %3665, %3667
  %3669 = xor i64 %3665, %3645
  %3670 = add nuw nsw i64 %3668, %3669
  %3671 = icmp eq i64 %3670, 2
  %3672 = zext i1 %3671 to i8
  store i8 %3672, i8* %67, align 1, !tbaa !2450
  %3673 = load i64, i64* %RBP, align 8
  %3674 = add i64 %3673, -108
  %3675 = add i64 %4774, 82
  store i64 %3675, i64* %PC, align 8
  %3676 = inttoptr i64 %3674 to i32*
  %3677 = load i32, i32* %3676, align 4
  %3678 = sext i32 %3677 to i64
  store i64 %3678, i64* %RCX, align 8, !tbaa !2428
  %3679 = shl nsw i64 %3678, 3
  %3680 = add i64 %3679, %3647
  %3681 = add i64 %4774, 87
  store i64 %3681, i64* %PC, align 8
  %3682 = load double, double* %230, align 1
  %3683 = inttoptr i64 %3680 to double*
  %3684 = load double, double* %3683, align 8
  %3685 = fsub double %3682, %3684
  store double %3685, double* %230, align 1, !tbaa !2452
  %3686 = add i64 %3673, 40
  %3687 = add i64 %4774, 91
  store i64 %3687, i64* %PC, align 8
  %3688 = inttoptr i64 %3686 to i64*
  %3689 = load i64, i64* %3688, align 8
  store i64 %3689, i64* %RAX, align 8, !tbaa !2428
  %3690 = add i64 %3673, -100
  %3691 = add i64 %4774, 95
  store i64 %3691, i64* %PC, align 8
  %3692 = inttoptr i64 %3690 to i32*
  %3693 = load i32, i32* %3692, align 4
  %3694 = sext i32 %3693 to i64
  %3695 = mul nsw i64 %3694, 33800
  store i64 %3695, i64* %RCX, align 8, !tbaa !2428
  %3696 = lshr i64 %3695, 63
  %3697 = add i64 %3695, %3689
  store i64 %3697, i64* %RAX, align 8, !tbaa !2428
  %3698 = icmp ult i64 %3697, %3689
  %3699 = icmp ult i64 %3697, %3695
  %3700 = or i1 %3698, %3699
  %3701 = zext i1 %3700 to i8
  store i8 %3701, i8* %43, align 1, !tbaa !2432
  %3702 = trunc i64 %3697 to i32
  %3703 = and i32 %3702, 255
  %3704 = tail call i32 @llvm.ctpop.i32(i32 %3703) #8
  %3705 = trunc i32 %3704 to i8
  %3706 = and i8 %3705, 1
  %3707 = xor i8 %3706, 1
  store i8 %3707, i8* %50, align 1, !tbaa !2446
  %3708 = xor i64 %3695, %3689
  %3709 = xor i64 %3708, %3697
  %3710 = lshr i64 %3709, 4
  %3711 = trunc i64 %3710 to i8
  %3712 = and i8 %3711, 1
  store i8 %3712, i8* %55, align 1, !tbaa !2447
  %3713 = icmp eq i64 %3697, 0
  %3714 = zext i1 %3713 to i8
  store i8 %3714, i8* %58, align 1, !tbaa !2448
  %3715 = lshr i64 %3697, 63
  %3716 = trunc i64 %3715 to i8
  store i8 %3716, i8* %61, align 1, !tbaa !2449
  %3717 = lshr i64 %3689, 63
  %3718 = xor i64 %3715, %3717
  %3719 = xor i64 %3715, %3696
  %3720 = add nuw nsw i64 %3718, %3719
  %3721 = icmp eq i64 %3720, 2
  %3722 = zext i1 %3721 to i8
  store i8 %3722, i8* %67, align 1, !tbaa !2450
  %3723 = add i64 %3673, -104
  %3724 = add i64 %4774, 109
  store i64 %3724, i64* %PC, align 8
  %3725 = inttoptr i64 %3723 to i32*
  %3726 = load i32, i32* %3725, align 4
  %3727 = sext i32 %3726 to i64
  %3728 = mul nsw i64 %3727, 520
  store i64 %3728, i64* %RCX, align 8, !tbaa !2428
  %3729 = lshr i64 %3728, 63
  %3730 = add i64 %3728, %3697
  store i64 %3730, i64* %RAX, align 8, !tbaa !2428
  %3731 = icmp ult i64 %3730, %3697
  %3732 = icmp ult i64 %3730, %3728
  %3733 = or i1 %3731, %3732
  %3734 = zext i1 %3733 to i8
  store i8 %3734, i8* %43, align 1, !tbaa !2432
  %3735 = trunc i64 %3730 to i32
  %3736 = and i32 %3735, 255
  %3737 = tail call i32 @llvm.ctpop.i32(i32 %3736) #8
  %3738 = trunc i32 %3737 to i8
  %3739 = and i8 %3738, 1
  %3740 = xor i8 %3739, 1
  store i8 %3740, i8* %50, align 1, !tbaa !2446
  %3741 = xor i64 %3728, %3697
  %3742 = xor i64 %3741, %3730
  %3743 = lshr i64 %3742, 4
  %3744 = trunc i64 %3743 to i8
  %3745 = and i8 %3744, 1
  store i8 %3745, i8* %55, align 1, !tbaa !2447
  %3746 = icmp eq i64 %3730, 0
  %3747 = zext i1 %3746 to i8
  store i8 %3747, i8* %58, align 1, !tbaa !2448
  %3748 = lshr i64 %3730, 63
  %3749 = trunc i64 %3748 to i8
  store i8 %3749, i8* %61, align 1, !tbaa !2449
  %3750 = xor i64 %3748, %3715
  %3751 = xor i64 %3748, %3729
  %3752 = add nuw nsw i64 %3750, %3751
  %3753 = icmp eq i64 %3752, 2
  %3754 = zext i1 %3753 to i8
  store i8 %3754, i8* %67, align 1, !tbaa !2450
  %3755 = load i64, i64* %RBP, align 8
  %3756 = add i64 %3755, -108
  %3757 = add i64 %4774, 122
  store i64 %3757, i64* %PC, align 8
  %3758 = inttoptr i64 %3756 to i32*
  %3759 = load i32, i32* %3758, align 4
  %3760 = add i32 %3759, 1
  %3761 = zext i32 %3760 to i64
  store i64 %3761, i64* %RDX, align 8, !tbaa !2428
  %3762 = icmp eq i32 %3759, -1
  %3763 = icmp eq i32 %3760, 0
  %3764 = or i1 %3762, %3763
  %3765 = zext i1 %3764 to i8
  store i8 %3765, i8* %43, align 1, !tbaa !2432
  %3766 = and i32 %3760, 255
  %3767 = tail call i32 @llvm.ctpop.i32(i32 %3766) #8
  %3768 = trunc i32 %3767 to i8
  %3769 = and i8 %3768, 1
  %3770 = xor i8 %3769, 1
  store i8 %3770, i8* %50, align 1, !tbaa !2446
  %3771 = xor i32 %3759, %3760
  %3772 = lshr i32 %3771, 4
  %3773 = trunc i32 %3772 to i8
  %3774 = and i8 %3773, 1
  store i8 %3774, i8* %55, align 1, !tbaa !2447
  %3775 = icmp eq i32 %3760, 0
  %3776 = zext i1 %3775 to i8
  store i8 %3776, i8* %58, align 1, !tbaa !2448
  %3777 = lshr i32 %3760, 31
  %3778 = trunc i32 %3777 to i8
  store i8 %3778, i8* %61, align 1, !tbaa !2449
  %3779 = lshr i32 %3759, 31
  %3780 = xor i32 %3777, %3779
  %3781 = add nuw nsw i32 %3780, %3777
  %3782 = icmp eq i32 %3781, 2
  %3783 = zext i1 %3782 to i8
  store i8 %3783, i8* %67, align 1, !tbaa !2450
  %3784 = sext i32 %3760 to i64
  store i64 %3784, i64* %RCX, align 8, !tbaa !2428
  %3785 = shl nsw i64 %3784, 3
  %3786 = add i64 %3785, %3730
  %3787 = add i64 %4774, 133
  store i64 %3787, i64* %PC, align 8
  %3788 = load double, double* %230, align 1
  %3789 = inttoptr i64 %3786 to double*
  %3790 = load double, double* %3789, align 8
  %3791 = fadd double %3788, %3790
  store double %3791, double* %230, align 1, !tbaa !2452
  %3792 = add i64 %3755, 40
  %3793 = add i64 %4774, 137
  store i64 %3793, i64* %PC, align 8
  %3794 = inttoptr i64 %3792 to i64*
  %3795 = load i64, i64* %3794, align 8
  store i64 %3795, i64* %RAX, align 8, !tbaa !2428
  %3796 = add i64 %3755, -100
  %3797 = add i64 %4774, 141
  store i64 %3797, i64* %PC, align 8
  %3798 = inttoptr i64 %3796 to i32*
  %3799 = load i32, i32* %3798, align 4
  %3800 = sext i32 %3799 to i64
  %3801 = mul nsw i64 %3800, 33800
  store i64 %3801, i64* %RCX, align 8, !tbaa !2428
  %3802 = lshr i64 %3801, 63
  %3803 = add i64 %3801, %3795
  store i64 %3803, i64* %RAX, align 8, !tbaa !2428
  %3804 = icmp ult i64 %3803, %3795
  %3805 = icmp ult i64 %3803, %3801
  %3806 = or i1 %3804, %3805
  %3807 = zext i1 %3806 to i8
  store i8 %3807, i8* %43, align 1, !tbaa !2432
  %3808 = trunc i64 %3803 to i32
  %3809 = and i32 %3808, 255
  %3810 = tail call i32 @llvm.ctpop.i32(i32 %3809) #8
  %3811 = trunc i32 %3810 to i8
  %3812 = and i8 %3811, 1
  %3813 = xor i8 %3812, 1
  store i8 %3813, i8* %50, align 1, !tbaa !2446
  %3814 = xor i64 %3801, %3795
  %3815 = xor i64 %3814, %3803
  %3816 = lshr i64 %3815, 4
  %3817 = trunc i64 %3816 to i8
  %3818 = and i8 %3817, 1
  store i8 %3818, i8* %55, align 1, !tbaa !2447
  %3819 = icmp eq i64 %3803, 0
  %3820 = zext i1 %3819 to i8
  store i8 %3820, i8* %58, align 1, !tbaa !2448
  %3821 = lshr i64 %3803, 63
  %3822 = trunc i64 %3821 to i8
  store i8 %3822, i8* %61, align 1, !tbaa !2449
  %3823 = lshr i64 %3795, 63
  %3824 = xor i64 %3821, %3823
  %3825 = xor i64 %3821, %3802
  %3826 = add nuw nsw i64 %3824, %3825
  %3827 = icmp eq i64 %3826, 2
  %3828 = zext i1 %3827 to i8
  store i8 %3828, i8* %67, align 1, !tbaa !2450
  %3829 = load i64, i64* %RBP, align 8
  %3830 = add i64 %3829, -104
  %3831 = add i64 %4774, 155
  store i64 %3831, i64* %PC, align 8
  %3832 = inttoptr i64 %3830 to i32*
  %3833 = load i32, i32* %3832, align 4
  %3834 = sext i32 %3833 to i64
  %3835 = mul nsw i64 %3834, 520
  store i64 %3835, i64* %RCX, align 8, !tbaa !2428
  %3836 = lshr i64 %3835, 63
  %3837 = add i64 %3835, %3803
  store i64 %3837, i64* %RAX, align 8, !tbaa !2428
  %3838 = icmp ult i64 %3837, %3803
  %3839 = icmp ult i64 %3837, %3835
  %3840 = or i1 %3838, %3839
  %3841 = zext i1 %3840 to i8
  store i8 %3841, i8* %43, align 1, !tbaa !2432
  %3842 = trunc i64 %3837 to i32
  %3843 = and i32 %3842, 255
  %3844 = tail call i32 @llvm.ctpop.i32(i32 %3843) #8
  %3845 = trunc i32 %3844 to i8
  %3846 = and i8 %3845, 1
  %3847 = xor i8 %3846, 1
  store i8 %3847, i8* %50, align 1, !tbaa !2446
  %3848 = xor i64 %3835, %3803
  %3849 = xor i64 %3848, %3837
  %3850 = lshr i64 %3849, 4
  %3851 = trunc i64 %3850 to i8
  %3852 = and i8 %3851, 1
  store i8 %3852, i8* %55, align 1, !tbaa !2447
  %3853 = icmp eq i64 %3837, 0
  %3854 = zext i1 %3853 to i8
  store i8 %3854, i8* %58, align 1, !tbaa !2448
  %3855 = lshr i64 %3837, 63
  %3856 = trunc i64 %3855 to i8
  store i8 %3856, i8* %61, align 1, !tbaa !2449
  %3857 = xor i64 %3855, %3821
  %3858 = xor i64 %3855, %3836
  %3859 = add nuw nsw i64 %3857, %3858
  %3860 = icmp eq i64 %3859, 2
  %3861 = zext i1 %3860 to i8
  store i8 %3861, i8* %67, align 1, !tbaa !2450
  %3862 = add i64 %3829, -108
  %3863 = add i64 %4774, 169
  store i64 %3863, i64* %PC, align 8
  %3864 = inttoptr i64 %3862 to i32*
  %3865 = load i32, i32* %3864, align 4
  %3866 = sext i32 %3865 to i64
  store i64 %3866, i64* %RCX, align 8, !tbaa !2428
  %3867 = shl nsw i64 %3866, 3
  %3868 = add i64 %3867, %3837
  %3869 = add i64 %4774, 174
  store i64 %3869, i64* %PC, align 8
  %3870 = load double, double* %230, align 1
  %3871 = inttoptr i64 %3868 to double*
  %3872 = load double, double* %3871, align 8
  %3873 = fsub double %3870, %3872
  store double %3873, double* %230, align 1, !tbaa !2452
  %3874 = add i64 %3829, -96
  %3875 = add i64 %4774, 178
  store i64 %3875, i64* %PC, align 8
  %3876 = inttoptr i64 %3874 to i64*
  %3877 = load i64, i64* %3876, align 8
  store i64 %3877, i64* %RAX, align 8, !tbaa !2428
  %3878 = add i64 %3829, -100
  %3879 = add i64 %4774, 182
  store i64 %3879, i64* %PC, align 8
  %3880 = inttoptr i64 %3878 to i32*
  %3881 = load i32, i32* %3880, align 4
  %3882 = sext i32 %3881 to i64
  %3883 = mul nsw i64 %3882, 520
  store i64 %3883, i64* %RCX, align 8, !tbaa !2428
  %3884 = lshr i64 %3883, 63
  %3885 = add i64 %3883, %3877
  store i64 %3885, i64* %RAX, align 8, !tbaa !2428
  %3886 = icmp ult i64 %3885, %3877
  %3887 = icmp ult i64 %3885, %3883
  %3888 = or i1 %3886, %3887
  %3889 = zext i1 %3888 to i8
  store i8 %3889, i8* %43, align 1, !tbaa !2432
  %3890 = trunc i64 %3885 to i32
  %3891 = and i32 %3890, 255
  %3892 = tail call i32 @llvm.ctpop.i32(i32 %3891) #8
  %3893 = trunc i32 %3892 to i8
  %3894 = and i8 %3893, 1
  %3895 = xor i8 %3894, 1
  store i8 %3895, i8* %50, align 1, !tbaa !2446
  %3896 = xor i64 %3883, %3877
  %3897 = xor i64 %3896, %3885
  %3898 = lshr i64 %3897, 4
  %3899 = trunc i64 %3898 to i8
  %3900 = and i8 %3899, 1
  store i8 %3900, i8* %55, align 1, !tbaa !2447
  %3901 = icmp eq i64 %3885, 0
  %3902 = zext i1 %3901 to i8
  store i8 %3902, i8* %58, align 1, !tbaa !2448
  %3903 = lshr i64 %3885, 63
  %3904 = trunc i64 %3903 to i8
  store i8 %3904, i8* %61, align 1, !tbaa !2449
  %3905 = lshr i64 %3877, 63
  %3906 = xor i64 %3903, %3905
  %3907 = xor i64 %3903, %3884
  %3908 = add nuw nsw i64 %3906, %3907
  %3909 = icmp eq i64 %3908, 2
  %3910 = zext i1 %3909 to i8
  store i8 %3910, i8* %67, align 1, !tbaa !2450
  %3911 = load i64, i64* %RBP, align 8
  %3912 = add i64 %3911, -104
  %3913 = add i64 %4774, 196
  store i64 %3913, i64* %PC, align 8
  %3914 = inttoptr i64 %3912 to i32*
  %3915 = load i32, i32* %3914, align 4
  %3916 = sext i32 %3915 to i64
  store i64 %3916, i64* %RCX, align 8, !tbaa !2428
  %3917 = shl nsw i64 %3916, 3
  %3918 = add i64 %3917, %3885
  %3919 = add i64 %4774, 201
  store i64 %3919, i64* %PC, align 8
  %3920 = inttoptr i64 %3918 to double*
  store double %3873, double* %3920, align 8
  %3921 = load i64, i64* %RBP, align 8
  %3922 = add i64 %3921, 88
  %3923 = load i64, i64* %PC, align 8
  %3924 = add i64 %3923, 4
  store i64 %3924, i64* %PC, align 8
  %3925 = inttoptr i64 %3922 to i64*
  %3926 = load i64, i64* %3925, align 8
  store i64 %3926, i64* %RAX, align 8, !tbaa !2428
  %3927 = add i64 %3921, -104
  %3928 = add i64 %3923, 8
  store i64 %3928, i64* %PC, align 8
  %3929 = inttoptr i64 %3927 to i32*
  %3930 = load i32, i32* %3929, align 4
  %3931 = sext i32 %3930 to i64
  store i64 %3931, i64* %RCX, align 8, !tbaa !2428
  %3932 = shl nsw i64 %3931, 3
  %3933 = add i64 %3932, %3926
  %3934 = add i64 %3923, 13
  store i64 %3934, i64* %PC, align 8
  %3935 = inttoptr i64 %3933 to double*
  %3936 = load double, double* %3935, align 8
  store double %3936, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %3937 = add i64 %3921, 96
  %3938 = add i64 %3923, 17
  store i64 %3938, i64* %PC, align 8
  %3939 = inttoptr i64 %3937 to i64*
  %3940 = load i64, i64* %3939, align 8
  store i64 %3940, i64* %RAX, align 8, !tbaa !2428
  %3941 = add i64 %3923, 21
  store i64 %3941, i64* %PC, align 8
  %3942 = load i32, i32* %3929, align 4
  %3943 = sext i32 %3942 to i64
  store i64 %3943, i64* %RCX, align 8, !tbaa !2428
  %3944 = shl nsw i64 %3943, 3
  %3945 = add i64 %3944, %3940
  %3946 = add i64 %3923, 26
  store i64 %3946, i64* %PC, align 8
  %3947 = inttoptr i64 %3945 to double*
  %3948 = load double, double* %3947, align 8
  %3949 = fdiv double %3936, %3948
  store double %3949, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %3950 = add i64 %3921, 24
  %3951 = add i64 %3923, 30
  store i64 %3951, i64* %PC, align 8
  %3952 = inttoptr i64 %3950 to i64*
  %3953 = load i64, i64* %3952, align 8
  store i64 %3953, i64* %RAX, align 8, !tbaa !2428
  %3954 = add i64 %3921, -100
  %3955 = add i64 %3923, 34
  store i64 %3955, i64* %PC, align 8
  %3956 = inttoptr i64 %3954 to i32*
  %3957 = load i32, i32* %3956, align 4
  %3958 = sext i32 %3957 to i64
  %3959 = mul nsw i64 %3958, 33800
  store i64 %3959, i64* %RCX, align 8, !tbaa !2428
  %3960 = lshr i64 %3959, 63
  %3961 = add i64 %3959, %3953
  store i64 %3961, i64* %RAX, align 8, !tbaa !2428
  %3962 = icmp ult i64 %3961, %3953
  %3963 = icmp ult i64 %3961, %3959
  %3964 = or i1 %3962, %3963
  %3965 = zext i1 %3964 to i8
  store i8 %3965, i8* %43, align 1, !tbaa !2432
  %3966 = trunc i64 %3961 to i32
  %3967 = and i32 %3966, 255
  %3968 = tail call i32 @llvm.ctpop.i32(i32 %3967) #8
  %3969 = trunc i32 %3968 to i8
  %3970 = and i8 %3969, 1
  %3971 = xor i8 %3970, 1
  store i8 %3971, i8* %50, align 1, !tbaa !2446
  %3972 = xor i64 %3959, %3953
  %3973 = xor i64 %3972, %3961
  %3974 = lshr i64 %3973, 4
  %3975 = trunc i64 %3974 to i8
  %3976 = and i8 %3975, 1
  store i8 %3976, i8* %55, align 1, !tbaa !2447
  %3977 = icmp eq i64 %3961, 0
  %3978 = zext i1 %3977 to i8
  store i8 %3978, i8* %58, align 1, !tbaa !2448
  %3979 = lshr i64 %3961, 63
  %3980 = trunc i64 %3979 to i8
  store i8 %3980, i8* %61, align 1, !tbaa !2449
  %3981 = lshr i64 %3953, 63
  %3982 = xor i64 %3979, %3981
  %3983 = xor i64 %3979, %3960
  %3984 = add nuw nsw i64 %3982, %3983
  %3985 = icmp eq i64 %3984, 2
  %3986 = zext i1 %3985 to i8
  store i8 %3986, i8* %67, align 1, !tbaa !2450
  %3987 = load i64, i64* %RBP, align 8
  %3988 = add i64 %3987, -104
  %3989 = add i64 %3923, 48
  store i64 %3989, i64* %PC, align 8
  %3990 = inttoptr i64 %3988 to i32*
  %3991 = load i32, i32* %3990, align 4
  %3992 = sext i32 %3991 to i64
  %3993 = mul nsw i64 %3992, 520
  store i64 %3993, i64* %RCX, align 8, !tbaa !2428
  %3994 = lshr i64 %3993, 63
  %3995 = add i64 %3993, %3961
  store i64 %3995, i64* %RAX, align 8, !tbaa !2428
  %3996 = icmp ult i64 %3995, %3961
  %3997 = icmp ult i64 %3995, %3993
  %3998 = or i1 %3996, %3997
  %3999 = zext i1 %3998 to i8
  store i8 %3999, i8* %43, align 1, !tbaa !2432
  %4000 = trunc i64 %3995 to i32
  %4001 = and i32 %4000, 255
  %4002 = tail call i32 @llvm.ctpop.i32(i32 %4001) #8
  %4003 = trunc i32 %4002 to i8
  %4004 = and i8 %4003, 1
  %4005 = xor i8 %4004, 1
  store i8 %4005, i8* %50, align 1, !tbaa !2446
  %4006 = xor i64 %3993, %3961
  %4007 = xor i64 %4006, %3995
  %4008 = lshr i64 %4007, 4
  %4009 = trunc i64 %4008 to i8
  %4010 = and i8 %4009, 1
  store i8 %4010, i8* %55, align 1, !tbaa !2447
  %4011 = icmp eq i64 %3995, 0
  %4012 = zext i1 %4011 to i8
  store i8 %4012, i8* %58, align 1, !tbaa !2448
  %4013 = lshr i64 %3995, 63
  %4014 = trunc i64 %4013 to i8
  store i8 %4014, i8* %61, align 1, !tbaa !2449
  %4015 = xor i64 %4013, %3979
  %4016 = xor i64 %4013, %3994
  %4017 = add nuw nsw i64 %4015, %4016
  %4018 = icmp eq i64 %4017, 2
  %4019 = zext i1 %4018 to i8
  store i8 %4019, i8* %67, align 1, !tbaa !2450
  %4020 = add i64 %3987, -108
  %4021 = add i64 %3923, 62
  store i64 %4021, i64* %PC, align 8
  %4022 = inttoptr i64 %4020 to i32*
  %4023 = load i32, i32* %4022, align 4
  %4024 = sext i32 %4023 to i64
  store i64 %4024, i64* %RCX, align 8, !tbaa !2428
  %4025 = shl nsw i64 %4024, 3
  %4026 = add i64 %4025, %3995
  %4027 = add i64 %3923, 67
  store i64 %4027, i64* %PC, align 8
  %4028 = load double, double* %230, align 1
  %4029 = inttoptr i64 %4026 to double*
  %4030 = load double, double* %4029, align 8
  %4031 = fmul double %4028, %4030
  store double %4031, double* %230, align 1, !tbaa !2452
  %4032 = add i64 %3987, -72
  %4033 = add i64 %3923, 72
  store i64 %4033, i64* %PC, align 8
  %4034 = inttoptr i64 %4032 to double*
  %4035 = load double, double* %4034, align 8
  store double %4035, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %4036 = add i64 %3987, 96
  %4037 = add i64 %3923, 76
  store i64 %4037, i64* %PC, align 8
  %4038 = inttoptr i64 %4036 to i64*
  %4039 = load i64, i64* %4038, align 8
  store i64 %4039, i64* %RAX, align 8, !tbaa !2428
  %4040 = add i64 %3923, 80
  store i64 %4040, i64* %PC, align 8
  %4041 = load i32, i32* %3990, align 4
  %4042 = sext i32 %4041 to i64
  store i64 %4042, i64* %RCX, align 8, !tbaa !2428
  %4043 = shl nsw i64 %4042, 3
  %4044 = add i64 %4043, %4039
  %4045 = add i64 %3923, 85
  store i64 %4045, i64* %PC, align 8
  %4046 = inttoptr i64 %4044 to double*
  %4047 = load double, double* %4046, align 8
  %4048 = fdiv double %4035, %4047
  store double %4048, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %4049 = load i64, i64* %RBP, align 8
  %4050 = add i64 %4049, -96
  %4051 = add i64 %3923, 89
  store i64 %4051, i64* %PC, align 8
  %4052 = inttoptr i64 %4050 to i64*
  %4053 = load i64, i64* %4052, align 8
  store i64 %4053, i64* %RAX, align 8, !tbaa !2428
  %4054 = add i64 %4049, -100
  %4055 = add i64 %3923, 93
  store i64 %4055, i64* %PC, align 8
  %4056 = inttoptr i64 %4054 to i32*
  %4057 = load i32, i32* %4056, align 4
  %4058 = sext i32 %4057 to i64
  %4059 = mul nsw i64 %4058, 520
  store i64 %4059, i64* %RCX, align 8, !tbaa !2428
  %4060 = lshr i64 %4059, 63
  %4061 = add i64 %4059, %4053
  store i64 %4061, i64* %RAX, align 8, !tbaa !2428
  %4062 = icmp ult i64 %4061, %4053
  %4063 = icmp ult i64 %4061, %4059
  %4064 = or i1 %4062, %4063
  %4065 = zext i1 %4064 to i8
  store i8 %4065, i8* %43, align 1, !tbaa !2432
  %4066 = trunc i64 %4061 to i32
  %4067 = and i32 %4066, 255
  %4068 = tail call i32 @llvm.ctpop.i32(i32 %4067) #8
  %4069 = trunc i32 %4068 to i8
  %4070 = and i8 %4069, 1
  %4071 = xor i8 %4070, 1
  store i8 %4071, i8* %50, align 1, !tbaa !2446
  %4072 = xor i64 %4059, %4053
  %4073 = xor i64 %4072, %4061
  %4074 = lshr i64 %4073, 4
  %4075 = trunc i64 %4074 to i8
  %4076 = and i8 %4075, 1
  store i8 %4076, i8* %55, align 1, !tbaa !2447
  %4077 = icmp eq i64 %4061, 0
  %4078 = zext i1 %4077 to i8
  store i8 %4078, i8* %58, align 1, !tbaa !2448
  %4079 = lshr i64 %4061, 63
  %4080 = trunc i64 %4079 to i8
  store i8 %4080, i8* %61, align 1, !tbaa !2449
  %4081 = lshr i64 %4053, 63
  %4082 = xor i64 %4079, %4081
  %4083 = xor i64 %4079, %4060
  %4084 = add nuw nsw i64 %4082, %4083
  %4085 = icmp eq i64 %4084, 2
  %4086 = zext i1 %4085 to i8
  store i8 %4086, i8* %67, align 1, !tbaa !2450
  %4087 = add i64 %4049, -104
  %4088 = add i64 %3923, 107
  store i64 %4088, i64* %PC, align 8
  %4089 = inttoptr i64 %4087 to i32*
  %4090 = load i32, i32* %4089, align 4
  %4091 = sext i32 %4090 to i64
  store i64 %4091, i64* %RCX, align 8, !tbaa !2428
  %4092 = shl nsw i64 %4091, 3
  %4093 = add i64 %4092, %4061
  %4094 = add i64 %3923, 112
  store i64 %4094, i64* %PC, align 8
  %4095 = inttoptr i64 %4093 to double*
  %4096 = load double, double* %4095, align 8
  %4097 = fmul double %4048, %4096
  store double %4097, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %4098 = load double, double* %230, align 1
  %4099 = fsub double %4098, %4097
  store double %4099, double* %230, align 1, !tbaa !2452
  %4100 = add i64 %4049, 16
  %4101 = add i64 %3923, 120
  store i64 %4101, i64* %PC, align 8
  %4102 = inttoptr i64 %4100 to i64*
  %4103 = load i64, i64* %4102, align 8
  store i64 %4103, i64* %RAX, align 8, !tbaa !2428
  %4104 = load i64, i64* %RBP, align 8
  %4105 = add i64 %4104, -100
  %4106 = add i64 %3923, 124
  store i64 %4106, i64* %PC, align 8
  %4107 = inttoptr i64 %4105 to i32*
  %4108 = load i32, i32* %4107, align 4
  %4109 = sext i32 %4108 to i64
  %4110 = mul nsw i64 %4109, 520
  store i64 %4110, i64* %RCX, align 8, !tbaa !2428
  %4111 = lshr i64 %4110, 63
  %4112 = add i64 %4110, %4103
  store i64 %4112, i64* %RAX, align 8, !tbaa !2428
  %4113 = icmp ult i64 %4112, %4103
  %4114 = icmp ult i64 %4112, %4110
  %4115 = or i1 %4113, %4114
  %4116 = zext i1 %4115 to i8
  store i8 %4116, i8* %43, align 1, !tbaa !2432
  %4117 = trunc i64 %4112 to i32
  %4118 = and i32 %4117, 255
  %4119 = tail call i32 @llvm.ctpop.i32(i32 %4118) #8
  %4120 = trunc i32 %4119 to i8
  %4121 = and i8 %4120, 1
  %4122 = xor i8 %4121, 1
  store i8 %4122, i8* %50, align 1, !tbaa !2446
  %4123 = xor i64 %4110, %4103
  %4124 = xor i64 %4123, %4112
  %4125 = lshr i64 %4124, 4
  %4126 = trunc i64 %4125 to i8
  %4127 = and i8 %4126, 1
  store i8 %4127, i8* %55, align 1, !tbaa !2447
  %4128 = icmp eq i64 %4112, 0
  %4129 = zext i1 %4128 to i8
  store i8 %4129, i8* %58, align 1, !tbaa !2448
  %4130 = lshr i64 %4112, 63
  %4131 = trunc i64 %4130 to i8
  store i8 %4131, i8* %61, align 1, !tbaa !2449
  %4132 = lshr i64 %4103, 63
  %4133 = xor i64 %4130, %4132
  %4134 = xor i64 %4130, %4111
  %4135 = add nuw nsw i64 %4133, %4134
  %4136 = icmp eq i64 %4135, 2
  %4137 = zext i1 %4136 to i8
  store i8 %4137, i8* %67, align 1, !tbaa !2450
  %4138 = add i64 %4104, -104
  %4139 = add i64 %3923, 138
  store i64 %4139, i64* %PC, align 8
  %4140 = inttoptr i64 %4138 to i32*
  %4141 = load i32, i32* %4140, align 4
  %4142 = sext i32 %4141 to i64
  store i64 %4142, i64* %RCX, align 8, !tbaa !2428
  %4143 = shl nsw i64 %4142, 3
  %4144 = add i64 %4143, %4112
  %4145 = add i64 %3923, 143
  store i64 %4145, i64* %PC, align 8
  %4146 = inttoptr i64 %4144 to double*
  store double %4099, double* %4146, align 8
  %4147 = load i64, i64* %RBP, align 8
  %4148 = add i64 %4147, 72
  %4149 = load i64, i64* %PC, align 8
  %4150 = add i64 %4149, 4
  store i64 %4150, i64* %PC, align 8
  %4151 = inttoptr i64 %4148 to i64*
  %4152 = load i64, i64* %4151, align 8
  store i64 %4152, i64* %RAX, align 8, !tbaa !2428
  %4153 = add i64 %4147, -108
  %4154 = add i64 %4149, 8
  store i64 %4154, i64* %PC, align 8
  %4155 = inttoptr i64 %4153 to i32*
  %4156 = load i32, i32* %4155, align 4
  %4157 = sext i32 %4156 to i64
  store i64 %4157, i64* %RCX, align 8, !tbaa !2428
  %4158 = shl nsw i64 %4157, 3
  %4159 = add i64 %4158, %4152
  %4160 = add i64 %4149, 13
  store i64 %4160, i64* %PC, align 8
  %4161 = inttoptr i64 %4159 to double*
  %4162 = load double, double* %4161, align 8
  store double %4162, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %4163 = add i64 %4147, 80
  %4164 = add i64 %4149, 17
  store i64 %4164, i64* %PC, align 8
  %4165 = inttoptr i64 %4163 to i64*
  %4166 = load i64, i64* %4165, align 8
  store i64 %4166, i64* %RAX, align 8, !tbaa !2428
  %4167 = add i64 %4149, 21
  store i64 %4167, i64* %PC, align 8
  %4168 = load i32, i32* %4155, align 4
  %4169 = sext i32 %4168 to i64
  store i64 %4169, i64* %RCX, align 8, !tbaa !2428
  %4170 = shl nsw i64 %4169, 3
  %4171 = add i64 %4170, %4166
  %4172 = add i64 %4149, 26
  store i64 %4172, i64* %PC, align 8
  %4173 = inttoptr i64 %4171 to double*
  %4174 = load double, double* %4173, align 8
  %4175 = fdiv double %4162, %4174
  store double %4175, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %4176 = add i64 %4147, 48
  %4177 = add i64 %4149, 30
  store i64 %4177, i64* %PC, align 8
  %4178 = inttoptr i64 %4176 to i64*
  %4179 = load i64, i64* %4178, align 8
  store i64 %4179, i64* %RAX, align 8, !tbaa !2428
  %4180 = add i64 %4147, -100
  %4181 = add i64 %4149, 34
  store i64 %4181, i64* %PC, align 8
  %4182 = inttoptr i64 %4180 to i32*
  %4183 = load i32, i32* %4182, align 4
  %4184 = sext i32 %4183 to i64
  %4185 = mul nsw i64 %4184, 33800
  store i64 %4185, i64* %RCX, align 8, !tbaa !2428
  %4186 = lshr i64 %4185, 63
  %4187 = add i64 %4185, %4179
  store i64 %4187, i64* %RAX, align 8, !tbaa !2428
  %4188 = icmp ult i64 %4187, %4179
  %4189 = icmp ult i64 %4187, %4185
  %4190 = or i1 %4188, %4189
  %4191 = zext i1 %4190 to i8
  store i8 %4191, i8* %43, align 1, !tbaa !2432
  %4192 = trunc i64 %4187 to i32
  %4193 = and i32 %4192, 255
  %4194 = tail call i32 @llvm.ctpop.i32(i32 %4193) #8
  %4195 = trunc i32 %4194 to i8
  %4196 = and i8 %4195, 1
  %4197 = xor i8 %4196, 1
  store i8 %4197, i8* %50, align 1, !tbaa !2446
  %4198 = xor i64 %4185, %4179
  %4199 = xor i64 %4198, %4187
  %4200 = lshr i64 %4199, 4
  %4201 = trunc i64 %4200 to i8
  %4202 = and i8 %4201, 1
  store i8 %4202, i8* %55, align 1, !tbaa !2447
  %4203 = icmp eq i64 %4187, 0
  %4204 = zext i1 %4203 to i8
  store i8 %4204, i8* %58, align 1, !tbaa !2448
  %4205 = lshr i64 %4187, 63
  %4206 = trunc i64 %4205 to i8
  store i8 %4206, i8* %61, align 1, !tbaa !2449
  %4207 = lshr i64 %4179, 63
  %4208 = xor i64 %4205, %4207
  %4209 = xor i64 %4205, %4186
  %4210 = add nuw nsw i64 %4208, %4209
  %4211 = icmp eq i64 %4210, 2
  %4212 = zext i1 %4211 to i8
  store i8 %4212, i8* %67, align 1, !tbaa !2450
  %4213 = load i64, i64* %RBP, align 8
  %4214 = add i64 %4213, -104
  %4215 = add i64 %4149, 48
  store i64 %4215, i64* %PC, align 8
  %4216 = inttoptr i64 %4214 to i32*
  %4217 = load i32, i32* %4216, align 4
  %4218 = sext i32 %4217 to i64
  %4219 = mul nsw i64 %4218, 520
  store i64 %4219, i64* %RCX, align 8, !tbaa !2428
  %4220 = lshr i64 %4219, 63
  %4221 = add i64 %4219, %4187
  store i64 %4221, i64* %RAX, align 8, !tbaa !2428
  %4222 = icmp ult i64 %4221, %4187
  %4223 = icmp ult i64 %4221, %4219
  %4224 = or i1 %4222, %4223
  %4225 = zext i1 %4224 to i8
  store i8 %4225, i8* %43, align 1, !tbaa !2432
  %4226 = trunc i64 %4221 to i32
  %4227 = and i32 %4226, 255
  %4228 = tail call i32 @llvm.ctpop.i32(i32 %4227) #8
  %4229 = trunc i32 %4228 to i8
  %4230 = and i8 %4229, 1
  %4231 = xor i8 %4230, 1
  store i8 %4231, i8* %50, align 1, !tbaa !2446
  %4232 = xor i64 %4219, %4187
  %4233 = xor i64 %4232, %4221
  %4234 = lshr i64 %4233, 4
  %4235 = trunc i64 %4234 to i8
  %4236 = and i8 %4235, 1
  store i8 %4236, i8* %55, align 1, !tbaa !2447
  %4237 = icmp eq i64 %4221, 0
  %4238 = zext i1 %4237 to i8
  store i8 %4238, i8* %58, align 1, !tbaa !2448
  %4239 = lshr i64 %4221, 63
  %4240 = trunc i64 %4239 to i8
  store i8 %4240, i8* %61, align 1, !tbaa !2449
  %4241 = xor i64 %4239, %4205
  %4242 = xor i64 %4239, %4220
  %4243 = add nuw nsw i64 %4241, %4242
  %4244 = icmp eq i64 %4243, 2
  %4245 = zext i1 %4244 to i8
  store i8 %4245, i8* %67, align 1, !tbaa !2450
  %4246 = add i64 %4213, -108
  %4247 = add i64 %4149, 62
  store i64 %4247, i64* %PC, align 8
  %4248 = inttoptr i64 %4246 to i32*
  %4249 = load i32, i32* %4248, align 4
  %4250 = sext i32 %4249 to i64
  store i64 %4250, i64* %RCX, align 8, !tbaa !2428
  %4251 = shl nsw i64 %4250, 3
  %4252 = add i64 %4251, %4221
  %4253 = add i64 %4149, 67
  store i64 %4253, i64* %PC, align 8
  %4254 = load double, double* %230, align 1
  %4255 = inttoptr i64 %4252 to double*
  %4256 = load double, double* %4255, align 8
  %4257 = fmul double %4254, %4256
  store double %4257, double* %230, align 1, !tbaa !2452
  %4258 = add i64 %4213, -64
  %4259 = add i64 %4149, 72
  store i64 %4259, i64* %PC, align 8
  %4260 = inttoptr i64 %4258 to double*
  %4261 = load double, double* %4260, align 8
  store double %4261, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %4262 = add i64 %4213, 64
  %4263 = add i64 %4149, 76
  store i64 %4263, i64* %PC, align 8
  %4264 = inttoptr i64 %4262 to i64*
  %4265 = load i64, i64* %4264, align 8
  store i64 %4265, i64* %RAX, align 8, !tbaa !2428
  %4266 = add i64 %4213, -100
  %4267 = add i64 %4149, 80
  store i64 %4267, i64* %PC, align 8
  %4268 = inttoptr i64 %4266 to i32*
  %4269 = load i32, i32* %4268, align 4
  %4270 = sext i32 %4269 to i64
  store i64 %4270, i64* %RCX, align 8, !tbaa !2428
  %4271 = shl nsw i64 %4270, 3
  %4272 = add i64 %4271, %4265
  %4273 = add i64 %4149, 85
  store i64 %4273, i64* %PC, align 8
  %4274 = inttoptr i64 %4272 to double*
  %4275 = load double, double* %4274, align 8
  %4276 = fmul double %4261, %4275
  store double %4276, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %4277 = load i64, i64* %RBP, align 8
  %4278 = add i64 %4277, 80
  %4279 = add i64 %4149, 89
  store i64 %4279, i64* %PC, align 8
  %4280 = inttoptr i64 %4278 to i64*
  %4281 = load i64, i64* %4280, align 8
  store i64 %4281, i64* %RAX, align 8, !tbaa !2428
  %4282 = add i64 %4277, -108
  %4283 = add i64 %4149, 93
  store i64 %4283, i64* %PC, align 8
  %4284 = inttoptr i64 %4282 to i32*
  %4285 = load i32, i32* %4284, align 4
  %4286 = sext i32 %4285 to i64
  store i64 %4286, i64* %RCX, align 8, !tbaa !2428
  %4287 = shl nsw i64 %4286, 3
  %4288 = add i64 %4287, %4281
  %4289 = add i64 %4149, 98
  store i64 %4289, i64* %PC, align 8
  %4290 = inttoptr i64 %4288 to double*
  %4291 = load double, double* %4290, align 8
  %4292 = fdiv double %4276, %4291
  store double %4292, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %4293 = add i64 %4277, 16
  %4294 = add i64 %4149, 102
  store i64 %4294, i64* %PC, align 8
  %4295 = inttoptr i64 %4293 to i64*
  %4296 = load i64, i64* %4295, align 8
  store i64 %4296, i64* %RAX, align 8, !tbaa !2428
  %4297 = add i64 %4277, -100
  %4298 = add i64 %4149, 106
  store i64 %4298, i64* %PC, align 8
  %4299 = inttoptr i64 %4297 to i32*
  %4300 = load i32, i32* %4299, align 4
  %4301 = sext i32 %4300 to i64
  %4302 = mul nsw i64 %4301, 520
  store i64 %4302, i64* %RCX, align 8, !tbaa !2428
  %4303 = lshr i64 %4302, 63
  %4304 = add i64 %4302, %4296
  store i64 %4304, i64* %RAX, align 8, !tbaa !2428
  %4305 = icmp ult i64 %4304, %4296
  %4306 = icmp ult i64 %4304, %4302
  %4307 = or i1 %4305, %4306
  %4308 = zext i1 %4307 to i8
  store i8 %4308, i8* %43, align 1, !tbaa !2432
  %4309 = trunc i64 %4304 to i32
  %4310 = and i32 %4309, 255
  %4311 = tail call i32 @llvm.ctpop.i32(i32 %4310) #8
  %4312 = trunc i32 %4311 to i8
  %4313 = and i8 %4312, 1
  %4314 = xor i8 %4313, 1
  store i8 %4314, i8* %50, align 1, !tbaa !2446
  %4315 = xor i64 %4302, %4296
  %4316 = xor i64 %4315, %4304
  %4317 = lshr i64 %4316, 4
  %4318 = trunc i64 %4317 to i8
  %4319 = and i8 %4318, 1
  store i8 %4319, i8* %55, align 1, !tbaa !2447
  %4320 = icmp eq i64 %4304, 0
  %4321 = zext i1 %4320 to i8
  store i8 %4321, i8* %58, align 1, !tbaa !2448
  %4322 = lshr i64 %4304, 63
  %4323 = trunc i64 %4322 to i8
  store i8 %4323, i8* %61, align 1, !tbaa !2449
  %4324 = lshr i64 %4296, 63
  %4325 = xor i64 %4322, %4324
  %4326 = xor i64 %4322, %4303
  %4327 = add nuw nsw i64 %4325, %4326
  %4328 = icmp eq i64 %4327, 2
  %4329 = zext i1 %4328 to i8
  store i8 %4329, i8* %67, align 1, !tbaa !2450
  %4330 = add i64 %4277, -104
  %4331 = add i64 %4149, 120
  store i64 %4331, i64* %PC, align 8
  %4332 = inttoptr i64 %4330 to i32*
  %4333 = load i32, i32* %4332, align 4
  %4334 = sext i32 %4333 to i64
  store i64 %4334, i64* %RCX, align 8, !tbaa !2428
  %4335 = shl nsw i64 %4334, 3
  %4336 = add i64 %4335, %4304
  %4337 = add i64 %4149, 125
  store i64 %4337, i64* %PC, align 8
  %4338 = inttoptr i64 %4336 to double*
  %4339 = load double, double* %4338, align 8
  %4340 = fmul double %4292, %4339
  store double %4340, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %4341 = load double, double* %230, align 1
  %4342 = fadd double %4341, %4340
  store double %4342, double* %230, align 1, !tbaa !2452
  %4343 = load i64, i64* %RBP, align 8
  %4344 = add i64 %4343, -64
  %4345 = add i64 %4149, 134
  store i64 %4345, i64* %PC, align 8
  %4346 = inttoptr i64 %4344 to double*
  %4347 = load double, double* %4346, align 8
  store double %4347, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %4348 = add i64 %4343, 56
  %4349 = add i64 %4149, 138
  store i64 %4349, i64* %PC, align 8
  %4350 = inttoptr i64 %4348 to i64*
  %4351 = load i64, i64* %4350, align 8
  store i64 %4351, i64* %RAX, align 8, !tbaa !2428
  %4352 = add i64 %4343, -100
  %4353 = add i64 %4149, 142
  store i64 %4353, i64* %PC, align 8
  %4354 = inttoptr i64 %4352 to i32*
  %4355 = load i32, i32* %4354, align 4
  %4356 = sext i32 %4355 to i64
  store i64 %4356, i64* %RCX, align 8, !tbaa !2428
  %4357 = shl nsw i64 %4356, 3
  %4358 = add i64 %4357, %4351
  %4359 = add i64 %4149, 147
  store i64 %4359, i64* %PC, align 8
  %4360 = inttoptr i64 %4358 to double*
  %4361 = load double, double* %4360, align 8
  %4362 = fmul double %4347, %4361
  store double %4362, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %4363 = add i64 %4343, 80
  %4364 = add i64 %4149, 151
  store i64 %4364, i64* %PC, align 8
  %4365 = inttoptr i64 %4363 to i64*
  %4366 = load i64, i64* %4365, align 8
  store i64 %4366, i64* %RAX, align 8, !tbaa !2428
  %4367 = add i64 %4343, -108
  %4368 = add i64 %4149, 155
  store i64 %4368, i64* %PC, align 8
  %4369 = inttoptr i64 %4367 to i32*
  %4370 = load i32, i32* %4369, align 4
  %4371 = sext i32 %4370 to i64
  store i64 %4371, i64* %RCX, align 8, !tbaa !2428
  %4372 = shl nsw i64 %4371, 3
  %4373 = add i64 %4372, %4366
  %4374 = add i64 %4149, 160
  store i64 %4374, i64* %PC, align 8
  %4375 = inttoptr i64 %4373 to double*
  %4376 = load double, double* %4375, align 8
  %4377 = fdiv double %4362, %4376
  store double %4377, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %4378 = add i64 %4343, 24
  %4379 = add i64 %4149, 164
  store i64 %4379, i64* %PC, align 8
  %4380 = inttoptr i64 %4378 to i64*
  %4381 = load i64, i64* %4380, align 8
  store i64 %4381, i64* %RAX, align 8, !tbaa !2428
  %4382 = add i64 %4149, 168
  store i64 %4382, i64* %PC, align 8
  %4383 = load i32, i32* %4354, align 4
  %4384 = sext i32 %4383 to i64
  %4385 = mul nsw i64 %4384, 33800
  store i64 %4385, i64* %RCX, align 8, !tbaa !2428
  %4386 = lshr i64 %4385, 63
  %4387 = add i64 %4385, %4381
  store i64 %4387, i64* %RAX, align 8, !tbaa !2428
  %4388 = icmp ult i64 %4387, %4381
  %4389 = icmp ult i64 %4387, %4385
  %4390 = or i1 %4388, %4389
  %4391 = zext i1 %4390 to i8
  store i8 %4391, i8* %43, align 1, !tbaa !2432
  %4392 = trunc i64 %4387 to i32
  %4393 = and i32 %4392, 255
  %4394 = tail call i32 @llvm.ctpop.i32(i32 %4393) #8
  %4395 = trunc i32 %4394 to i8
  %4396 = and i8 %4395, 1
  %4397 = xor i8 %4396, 1
  store i8 %4397, i8* %50, align 1, !tbaa !2446
  %4398 = xor i64 %4385, %4381
  %4399 = xor i64 %4398, %4387
  %4400 = lshr i64 %4399, 4
  %4401 = trunc i64 %4400 to i8
  %4402 = and i8 %4401, 1
  store i8 %4402, i8* %55, align 1, !tbaa !2447
  %4403 = icmp eq i64 %4387, 0
  %4404 = zext i1 %4403 to i8
  store i8 %4404, i8* %58, align 1, !tbaa !2448
  %4405 = lshr i64 %4387, 63
  %4406 = trunc i64 %4405 to i8
  store i8 %4406, i8* %61, align 1, !tbaa !2449
  %4407 = lshr i64 %4381, 63
  %4408 = xor i64 %4405, %4407
  %4409 = xor i64 %4405, %4386
  %4410 = add nuw nsw i64 %4408, %4409
  %4411 = icmp eq i64 %4410, 2
  %4412 = zext i1 %4411 to i8
  store i8 %4412, i8* %67, align 1, !tbaa !2450
  %4413 = load i64, i64* %RBP, align 8
  %4414 = add i64 %4413, -104
  %4415 = add i64 %4149, 182
  store i64 %4415, i64* %PC, align 8
  %4416 = inttoptr i64 %4414 to i32*
  %4417 = load i32, i32* %4416, align 4
  %4418 = sext i32 %4417 to i64
  %4419 = mul nsw i64 %4418, 520
  store i64 %4419, i64* %RCX, align 8, !tbaa !2428
  %4420 = lshr i64 %4419, 63
  %4421 = add i64 %4419, %4387
  store i64 %4421, i64* %RAX, align 8, !tbaa !2428
  %4422 = icmp ult i64 %4421, %4387
  %4423 = icmp ult i64 %4421, %4419
  %4424 = or i1 %4422, %4423
  %4425 = zext i1 %4424 to i8
  store i8 %4425, i8* %43, align 1, !tbaa !2432
  %4426 = trunc i64 %4421 to i32
  %4427 = and i32 %4426, 255
  %4428 = tail call i32 @llvm.ctpop.i32(i32 %4427) #8
  %4429 = trunc i32 %4428 to i8
  %4430 = and i8 %4429, 1
  %4431 = xor i8 %4430, 1
  store i8 %4431, i8* %50, align 1, !tbaa !2446
  %4432 = xor i64 %4419, %4387
  %4433 = xor i64 %4432, %4421
  %4434 = lshr i64 %4433, 4
  %4435 = trunc i64 %4434 to i8
  %4436 = and i8 %4435, 1
  store i8 %4436, i8* %55, align 1, !tbaa !2447
  %4437 = icmp eq i64 %4421, 0
  %4438 = zext i1 %4437 to i8
  store i8 %4438, i8* %58, align 1, !tbaa !2448
  %4439 = lshr i64 %4421, 63
  %4440 = trunc i64 %4439 to i8
  store i8 %4440, i8* %61, align 1, !tbaa !2449
  %4441 = xor i64 %4439, %4405
  %4442 = xor i64 %4439, %4420
  %4443 = add nuw nsw i64 %4441, %4442
  %4444 = icmp eq i64 %4443, 2
  %4445 = zext i1 %4444 to i8
  store i8 %4445, i8* %67, align 1, !tbaa !2450
  %4446 = add i64 %4413, -108
  %4447 = add i64 %4149, 196
  store i64 %4447, i64* %PC, align 8
  %4448 = inttoptr i64 %4446 to i32*
  %4449 = load i32, i32* %4448, align 4
  %4450 = sext i32 %4449 to i64
  store i64 %4450, i64* %RCX, align 8, !tbaa !2428
  %4451 = shl nsw i64 %4450, 3
  %4452 = add i64 %4451, %4421
  %4453 = add i64 %4149, 201
  store i64 %4453, i64* %PC, align 8
  %4454 = load double, double* %233, align 1
  %4455 = inttoptr i64 %4452 to double*
  %4456 = load double, double* %4455, align 8
  %4457 = fmul double %4454, %4456
  store double %4457, double* %233, align 1, !tbaa !2452
  %4458 = load double, double* %230, align 1
  %4459 = fsub double %4458, %4457
  store double %4459, double* %230, align 1, !tbaa !2452
  %4460 = add i64 %4413, 48
  %4461 = add i64 %4149, 209
  store i64 %4461, i64* %PC, align 8
  %4462 = inttoptr i64 %4460 to i64*
  %4463 = load i64, i64* %4462, align 8
  store i64 %4463, i64* %RAX, align 8, !tbaa !2428
  %4464 = add i64 %4413, -100
  %4465 = add i64 %4149, 213
  store i64 %4465, i64* %PC, align 8
  %4466 = inttoptr i64 %4464 to i32*
  %4467 = load i32, i32* %4466, align 4
  %4468 = sext i32 %4467 to i64
  %4469 = mul nsw i64 %4468, 33800
  store i64 %4469, i64* %RCX, align 8, !tbaa !2428
  %4470 = lshr i64 %4469, 63
  %4471 = add i64 %4469, %4463
  store i64 %4471, i64* %RAX, align 8, !tbaa !2428
  %4472 = icmp ult i64 %4471, %4463
  %4473 = icmp ult i64 %4471, %4469
  %4474 = or i1 %4472, %4473
  %4475 = zext i1 %4474 to i8
  store i8 %4475, i8* %43, align 1, !tbaa !2432
  %4476 = trunc i64 %4471 to i32
  %4477 = and i32 %4476, 255
  %4478 = tail call i32 @llvm.ctpop.i32(i32 %4477) #8
  %4479 = trunc i32 %4478 to i8
  %4480 = and i8 %4479, 1
  %4481 = xor i8 %4480, 1
  store i8 %4481, i8* %50, align 1, !tbaa !2446
  %4482 = xor i64 %4469, %4463
  %4483 = xor i64 %4482, %4471
  %4484 = lshr i64 %4483, 4
  %4485 = trunc i64 %4484 to i8
  %4486 = and i8 %4485, 1
  store i8 %4486, i8* %55, align 1, !tbaa !2447
  %4487 = icmp eq i64 %4471, 0
  %4488 = zext i1 %4487 to i8
  store i8 %4488, i8* %58, align 1, !tbaa !2448
  %4489 = lshr i64 %4471, 63
  %4490 = trunc i64 %4489 to i8
  store i8 %4490, i8* %61, align 1, !tbaa !2449
  %4491 = lshr i64 %4463, 63
  %4492 = xor i64 %4489, %4491
  %4493 = xor i64 %4489, %4470
  %4494 = add nuw nsw i64 %4492, %4493
  %4495 = icmp eq i64 %4494, 2
  %4496 = zext i1 %4495 to i8
  store i8 %4496, i8* %67, align 1, !tbaa !2450
  %4497 = load i64, i64* %RBP, align 8
  %4498 = add i64 %4497, -104
  %4499 = add i64 %4149, 227
  store i64 %4499, i64* %PC, align 8
  %4500 = inttoptr i64 %4498 to i32*
  %4501 = load i32, i32* %4500, align 4
  %4502 = sext i32 %4501 to i64
  %4503 = mul nsw i64 %4502, 520
  store i64 %4503, i64* %RCX, align 8, !tbaa !2428
  %4504 = lshr i64 %4503, 63
  %4505 = add i64 %4503, %4471
  store i64 %4505, i64* %RAX, align 8, !tbaa !2428
  %4506 = icmp ult i64 %4505, %4471
  %4507 = icmp ult i64 %4505, %4503
  %4508 = or i1 %4506, %4507
  %4509 = zext i1 %4508 to i8
  store i8 %4509, i8* %43, align 1, !tbaa !2432
  %4510 = trunc i64 %4505 to i32
  %4511 = and i32 %4510, 255
  %4512 = tail call i32 @llvm.ctpop.i32(i32 %4511) #8
  %4513 = trunc i32 %4512 to i8
  %4514 = and i8 %4513, 1
  %4515 = xor i8 %4514, 1
  store i8 %4515, i8* %50, align 1, !tbaa !2446
  %4516 = xor i64 %4503, %4471
  %4517 = xor i64 %4516, %4505
  %4518 = lshr i64 %4517, 4
  %4519 = trunc i64 %4518 to i8
  %4520 = and i8 %4519, 1
  store i8 %4520, i8* %55, align 1, !tbaa !2447
  %4521 = icmp eq i64 %4505, 0
  %4522 = zext i1 %4521 to i8
  store i8 %4522, i8* %58, align 1, !tbaa !2448
  %4523 = lshr i64 %4505, 63
  %4524 = trunc i64 %4523 to i8
  store i8 %4524, i8* %61, align 1, !tbaa !2449
  %4525 = xor i64 %4523, %4489
  %4526 = xor i64 %4523, %4504
  %4527 = add nuw nsw i64 %4525, %4526
  %4528 = icmp eq i64 %4527, 2
  %4529 = zext i1 %4528 to i8
  store i8 %4529, i8* %67, align 1, !tbaa !2450
  %4530 = add i64 %4497, -108
  %4531 = add i64 %4149, 241
  store i64 %4531, i64* %PC, align 8
  %4532 = inttoptr i64 %4530 to i32*
  %4533 = load i32, i32* %4532, align 4
  %4534 = sext i32 %4533 to i64
  store i64 %4534, i64* %RCX, align 8, !tbaa !2428
  %4535 = shl nsw i64 %4534, 3
  %4536 = add i64 %4535, %4505
  %4537 = add i64 %4149, 246
  store i64 %4537, i64* %PC, align 8
  %4538 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %4539 = load i64, i64* %4538, align 1
  %4540 = inttoptr i64 %4536 to i64*
  store i64 %4539, i64* %4540, align 8
  %4541 = load i64, i64* %RBP, align 8
  %4542 = add i64 %4541, 16
  %4543 = load i64, i64* %PC, align 8
  %4544 = add i64 %4543, 4
  store i64 %4544, i64* %PC, align 8
  %4545 = inttoptr i64 %4542 to i64*
  %4546 = load i64, i64* %4545, align 8
  store i64 %4546, i64* %RAX, align 8, !tbaa !2428
  %4547 = add i64 %4541, -100
  %4548 = add i64 %4543, 8
  store i64 %4548, i64* %PC, align 8
  %4549 = inttoptr i64 %4547 to i32*
  %4550 = load i32, i32* %4549, align 4
  %4551 = sext i32 %4550 to i64
  %4552 = mul nsw i64 %4551, 520
  store i64 %4552, i64* %RCX, align 8, !tbaa !2428
  %4553 = lshr i64 %4552, 63
  %4554 = add i64 %4552, %4546
  store i64 %4554, i64* %RAX, align 8, !tbaa !2428
  %4555 = icmp ult i64 %4554, %4546
  %4556 = icmp ult i64 %4554, %4552
  %4557 = or i1 %4555, %4556
  %4558 = zext i1 %4557 to i8
  store i8 %4558, i8* %43, align 1, !tbaa !2432
  %4559 = trunc i64 %4554 to i32
  %4560 = and i32 %4559, 255
  %4561 = tail call i32 @llvm.ctpop.i32(i32 %4560) #8
  %4562 = trunc i32 %4561 to i8
  %4563 = and i8 %4562, 1
  %4564 = xor i8 %4563, 1
  store i8 %4564, i8* %50, align 1, !tbaa !2446
  %4565 = xor i64 %4552, %4546
  %4566 = xor i64 %4565, %4554
  %4567 = lshr i64 %4566, 4
  %4568 = trunc i64 %4567 to i8
  %4569 = and i8 %4568, 1
  store i8 %4569, i8* %55, align 1, !tbaa !2447
  %4570 = icmp eq i64 %4554, 0
  %4571 = zext i1 %4570 to i8
  store i8 %4571, i8* %58, align 1, !tbaa !2448
  %4572 = lshr i64 %4554, 63
  %4573 = trunc i64 %4572 to i8
  store i8 %4573, i8* %61, align 1, !tbaa !2449
  %4574 = lshr i64 %4546, 63
  %4575 = xor i64 %4572, %4574
  %4576 = xor i64 %4572, %4553
  %4577 = add nuw nsw i64 %4575, %4576
  %4578 = icmp eq i64 %4577, 2
  %4579 = zext i1 %4578 to i8
  store i8 %4579, i8* %67, align 1, !tbaa !2450
  %4580 = add i64 %4541, -104
  %4581 = add i64 %4543, 22
  store i64 %4581, i64* %PC, align 8
  %4582 = inttoptr i64 %4580 to i32*
  %4583 = load i32, i32* %4582, align 4
  %4584 = sext i32 %4583 to i64
  store i64 %4584, i64* %RCX, align 8, !tbaa !2428
  %4585 = shl nsw i64 %4584, 3
  %4586 = add i64 %4585, %4554
  %4587 = add i64 %4543, 27
  store i64 %4587, i64* %PC, align 8
  %4588 = inttoptr i64 %4586 to i64*
  %4589 = load i64, i64* %4588, align 8
  %4590 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %4589, i64* %4590, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %4591 = add i64 %4541, 24
  %4592 = add i64 %4543, 31
  store i64 %4592, i64* %PC, align 8
  %4593 = inttoptr i64 %4591 to i64*
  %4594 = load i64, i64* %4593, align 8
  store i64 %4594, i64* %RAX, align 8, !tbaa !2428
  %4595 = add i64 %4543, 35
  store i64 %4595, i64* %PC, align 8
  %4596 = load i32, i32* %4549, align 4
  %4597 = sext i32 %4596 to i64
  %4598 = mul nsw i64 %4597, 33800
  store i64 %4598, i64* %RCX, align 8, !tbaa !2428
  %4599 = lshr i64 %4598, 63
  %4600 = add i64 %4598, %4594
  store i64 %4600, i64* %RAX, align 8, !tbaa !2428
  %4601 = icmp ult i64 %4600, %4594
  %4602 = icmp ult i64 %4600, %4598
  %4603 = or i1 %4601, %4602
  %4604 = zext i1 %4603 to i8
  store i8 %4604, i8* %43, align 1, !tbaa !2432
  %4605 = trunc i64 %4600 to i32
  %4606 = and i32 %4605, 255
  %4607 = tail call i32 @llvm.ctpop.i32(i32 %4606) #8
  %4608 = trunc i32 %4607 to i8
  %4609 = and i8 %4608, 1
  %4610 = xor i8 %4609, 1
  store i8 %4610, i8* %50, align 1, !tbaa !2446
  %4611 = xor i64 %4598, %4594
  %4612 = xor i64 %4611, %4600
  %4613 = lshr i64 %4612, 4
  %4614 = trunc i64 %4613 to i8
  %4615 = and i8 %4614, 1
  store i8 %4615, i8* %55, align 1, !tbaa !2447
  %4616 = icmp eq i64 %4600, 0
  %4617 = zext i1 %4616 to i8
  store i8 %4617, i8* %58, align 1, !tbaa !2448
  %4618 = lshr i64 %4600, 63
  %4619 = trunc i64 %4618 to i8
  store i8 %4619, i8* %61, align 1, !tbaa !2449
  %4620 = lshr i64 %4594, 63
  %4621 = xor i64 %4618, %4620
  %4622 = xor i64 %4618, %4599
  %4623 = add nuw nsw i64 %4621, %4622
  %4624 = icmp eq i64 %4623, 2
  %4625 = zext i1 %4624 to i8
  store i8 %4625, i8* %67, align 1, !tbaa !2450
  %4626 = load i64, i64* %RBP, align 8
  %4627 = add i64 %4626, -104
  %4628 = add i64 %4543, 49
  store i64 %4628, i64* %PC, align 8
  %4629 = inttoptr i64 %4627 to i32*
  %4630 = load i32, i32* %4629, align 4
  %4631 = sext i32 %4630 to i64
  %4632 = mul nsw i64 %4631, 520
  store i64 %4632, i64* %RCX, align 8, !tbaa !2428
  %4633 = lshr i64 %4632, 63
  %4634 = add i64 %4632, %4600
  store i64 %4634, i64* %RAX, align 8, !tbaa !2428
  %4635 = icmp ult i64 %4634, %4600
  %4636 = icmp ult i64 %4634, %4632
  %4637 = or i1 %4635, %4636
  %4638 = zext i1 %4637 to i8
  store i8 %4638, i8* %43, align 1, !tbaa !2432
  %4639 = trunc i64 %4634 to i32
  %4640 = and i32 %4639, 255
  %4641 = tail call i32 @llvm.ctpop.i32(i32 %4640) #8
  %4642 = trunc i32 %4641 to i8
  %4643 = and i8 %4642, 1
  %4644 = xor i8 %4643, 1
  store i8 %4644, i8* %50, align 1, !tbaa !2446
  %4645 = xor i64 %4632, %4600
  %4646 = xor i64 %4645, %4634
  %4647 = lshr i64 %4646, 4
  %4648 = trunc i64 %4647 to i8
  %4649 = and i8 %4648, 1
  store i8 %4649, i8* %55, align 1, !tbaa !2447
  %4650 = icmp eq i64 %4634, 0
  %4651 = zext i1 %4650 to i8
  store i8 %4651, i8* %58, align 1, !tbaa !2448
  %4652 = lshr i64 %4634, 63
  %4653 = trunc i64 %4652 to i8
  store i8 %4653, i8* %61, align 1, !tbaa !2449
  %4654 = xor i64 %4652, %4618
  %4655 = xor i64 %4652, %4633
  %4656 = add nuw nsw i64 %4654, %4655
  %4657 = icmp eq i64 %4656, 2
  %4658 = zext i1 %4657 to i8
  store i8 %4658, i8* %67, align 1, !tbaa !2450
  %4659 = add i64 %4626, -108
  %4660 = add i64 %4543, 63
  store i64 %4660, i64* %PC, align 8
  %4661 = inttoptr i64 %4659 to i32*
  %4662 = load i32, i32* %4661, align 4
  %4663 = sext i32 %4662 to i64
  store i64 %4663, i64* %RCX, align 8, !tbaa !2428
  %4664 = shl nsw i64 %4663, 3
  %4665 = add i64 %4664, %4634
  %4666 = add i64 %4543, 68
  store i64 %4666, i64* %PC, align 8
  %4667 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %4668 = load i64, i64* %4667, align 1
  %4669 = inttoptr i64 %4665 to i64*
  store i64 %4668, i64* %4669, align 8
  %4670 = load i64, i64* %RBP, align 8
  %4671 = add i64 %4670, -108
  %4672 = load i64, i64* %PC, align 8
  %4673 = add i64 %4672, 3
  store i64 %4673, i64* %PC, align 8
  %4674 = inttoptr i64 %4671 to i32*
  %4675 = load i32, i32* %4674, align 4
  %4676 = add i32 %4675, 1
  %4677 = zext i32 %4676 to i64
  store i64 %4677, i64* %RAX, align 8, !tbaa !2428
  %4678 = icmp eq i32 %4675, -1
  %4679 = icmp eq i32 %4676, 0
  %4680 = or i1 %4678, %4679
  %4681 = zext i1 %4680 to i8
  store i8 %4681, i8* %43, align 1, !tbaa !2432
  %4682 = and i32 %4676, 255
  %4683 = tail call i32 @llvm.ctpop.i32(i32 %4682) #8
  %4684 = trunc i32 %4683 to i8
  %4685 = and i8 %4684, 1
  %4686 = xor i8 %4685, 1
  store i8 %4686, i8* %50, align 1, !tbaa !2446
  %4687 = xor i32 %4675, %4676
  %4688 = lshr i32 %4687, 4
  %4689 = trunc i32 %4688 to i8
  %4690 = and i8 %4689, 1
  store i8 %4690, i8* %55, align 1, !tbaa !2447
  %4691 = icmp eq i32 %4676, 0
  %4692 = zext i1 %4691 to i8
  store i8 %4692, i8* %58, align 1, !tbaa !2448
  %4693 = lshr i32 %4676, 31
  %4694 = trunc i32 %4693 to i8
  store i8 %4694, i8* %61, align 1, !tbaa !2449
  %4695 = lshr i32 %4675, 31
  %4696 = xor i32 %4693, %4695
  %4697 = add nuw nsw i32 %4696, %4693
  %4698 = icmp eq i32 %4697, 2
  %4699 = zext i1 %4698 to i8
  store i8 %4699, i8* %67, align 1, !tbaa !2450
  %4700 = add i64 %4672, 9
  store i64 %4700, i64* %PC, align 8
  store i32 %4676, i32* %4674, align 4
  %4701 = load i64, i64* %PC, align 8
  %4702 = add i64 %4701, -679
  store i64 %4702, i64* %229, align 8, !tbaa !2428
  br label %block_401fe0

block_401fc6:                                     ; preds = %block_401fba
  %4703 = add i64 %240, -104
  %4704 = add i64 %276, 7
  store i64 %4704, i64* %PC, align 8
  %4705 = inttoptr i64 %4703 to i32*
  store i32 0, i32* %4705, align 4
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_401fcd

block_402a25:                                     ; preds = %block_401fcd
  %4706 = add i64 %329, -100
  %4707 = add i64 %365, 8
  store i64 %4707, i64* %PC, align 8
  %4708 = inttoptr i64 %4706 to i32*
  %4709 = load i32, i32* %4708, align 4
  %4710 = add i32 %4709, 1
  %4711 = zext i32 %4710 to i64
  store i64 %4711, i64* %RAX, align 8, !tbaa !2428
  %4712 = icmp eq i32 %4709, -1
  %4713 = icmp eq i32 %4710, 0
  %4714 = or i1 %4712, %4713
  %4715 = zext i1 %4714 to i8
  store i8 %4715, i8* %43, align 1, !tbaa !2432
  %4716 = and i32 %4710, 255
  %4717 = tail call i32 @llvm.ctpop.i32(i32 %4716) #8
  %4718 = trunc i32 %4717 to i8
  %4719 = and i8 %4718, 1
  %4720 = xor i8 %4719, 1
  store i8 %4720, i8* %50, align 1, !tbaa !2446
  %4721 = xor i32 %4709, %4710
  %4722 = lshr i32 %4721, 4
  %4723 = trunc i32 %4722 to i8
  %4724 = and i8 %4723, 1
  store i8 %4724, i8* %55, align 1, !tbaa !2447
  %4725 = icmp eq i32 %4710, 0
  %4726 = zext i1 %4725 to i8
  store i8 %4726, i8* %58, align 1, !tbaa !2448
  %4727 = lshr i32 %4710, 31
  %4728 = trunc i32 %4727 to i8
  store i8 %4728, i8* %61, align 1, !tbaa !2449
  %4729 = lshr i32 %4709, 31
  %4730 = xor i32 %4727, %4729
  %4731 = add nuw nsw i32 %4730, %4727
  %4732 = icmp eq i32 %4731, 2
  %4733 = zext i1 %4732 to i8
  store i8 %4733, i8* %67, align 1, !tbaa !2450
  %4734 = add i64 %365, 14
  store i64 %4734, i64* %PC, align 8
  store i32 %4710, i32* %4708, align 4
  %4735 = load i64, i64* %PC, align 8
  %4736 = add i64 %4735, -2681
  store i64 %4736, i64* %229, align 8, !tbaa !2428
  br label %block_401fba

block_401fe0:                                     ; preds = %block_401fec, %block_401fd9
  %4737 = phi i64 [ %4702, %block_401fec ], [ %.pre3, %block_401fd9 ]
  %4738 = load i64, i64* %RBP, align 8
  %4739 = add i64 %4738, -108
  %4740 = add i64 %4737, 3
  store i64 %4740, i64* %PC, align 8
  %4741 = inttoptr i64 %4739 to i32*
  %4742 = load i32, i32* %4741, align 4
  %4743 = zext i32 %4742 to i64
  store i64 %4743, i64* %RAX, align 8, !tbaa !2428
  %4744 = add i64 %4738, -48
  %4745 = add i64 %4737, 6
  store i64 %4745, i64* %PC, align 8
  %4746 = inttoptr i64 %4744 to i32*
  %4747 = load i32, i32* %4746, align 4
  %4748 = sub i32 %4742, %4747
  %4749 = icmp ult i32 %4742, %4747
  %4750 = zext i1 %4749 to i8
  store i8 %4750, i8* %43, align 1, !tbaa !2432
  %4751 = and i32 %4748, 255
  %4752 = tail call i32 @llvm.ctpop.i32(i32 %4751) #8
  %4753 = trunc i32 %4752 to i8
  %4754 = and i8 %4753, 1
  %4755 = xor i8 %4754, 1
  store i8 %4755, i8* %50, align 1, !tbaa !2446
  %4756 = xor i32 %4747, %4742
  %4757 = xor i32 %4756, %4748
  %4758 = lshr i32 %4757, 4
  %4759 = trunc i32 %4758 to i8
  %4760 = and i8 %4759, 1
  store i8 %4760, i8* %55, align 1, !tbaa !2447
  %4761 = icmp eq i32 %4748, 0
  %4762 = zext i1 %4761 to i8
  store i8 %4762, i8* %58, align 1, !tbaa !2448
  %4763 = lshr i32 %4748, 31
  %4764 = trunc i32 %4763 to i8
  store i8 %4764, i8* %61, align 1, !tbaa !2449
  %4765 = lshr i32 %4742, 31
  %4766 = lshr i32 %4747, 31
  %4767 = xor i32 %4766, %4765
  %4768 = xor i32 %4763, %4765
  %4769 = add nuw nsw i32 %4768, %4767
  %4770 = icmp eq i32 %4769, 2
  %4771 = zext i1 %4770 to i8
  store i8 %4771, i8* %67, align 1, !tbaa !2450
  %4772 = icmp ne i8 %4764, 0
  %4773 = xor i1 %4772, %4770
  %.v6 = select i1 %4773, i64 12, i64 684
  %4774 = add i64 %4737, %.v6
  %4775 = add i64 %4738, 32
  %4776 = add i64 %4774, 4
  store i64 %4776, i64* %PC, align 8
  %4777 = inttoptr i64 %4775 to i64*
  %4778 = load i64, i64* %4777, align 8
  store i64 %4778, i64* %RAX, align 8, !tbaa !2428
  %4779 = add i64 %4738, -100
  %4780 = add i64 %4774, 8
  store i64 %4780, i64* %PC, align 8
  %4781 = inttoptr i64 %4779 to i32*
  %4782 = load i32, i32* %4781, align 4
  %4783 = sext i32 %4782 to i64
  %4784 = mul nsw i64 %4783, 33800
  store i64 %4784, i64* %RCX, align 8, !tbaa !2428
  %4785 = lshr i64 %4784, 63
  %4786 = add i64 %4784, %4778
  store i64 %4786, i64* %RAX, align 8, !tbaa !2428
  %4787 = icmp ult i64 %4786, %4778
  %4788 = icmp ult i64 %4786, %4784
  %4789 = or i1 %4787, %4788
  %4790 = zext i1 %4789 to i8
  store i8 %4790, i8* %43, align 1, !tbaa !2432
  %4791 = trunc i64 %4786 to i32
  %4792 = and i32 %4791, 255
  %4793 = tail call i32 @llvm.ctpop.i32(i32 %4792) #8
  %4794 = trunc i32 %4793 to i8
  %4795 = and i8 %4794, 1
  %4796 = xor i8 %4795, 1
  store i8 %4796, i8* %50, align 1, !tbaa !2446
  %4797 = xor i64 %4784, %4778
  %4798 = xor i64 %4797, %4786
  %4799 = lshr i64 %4798, 4
  %4800 = trunc i64 %4799 to i8
  %4801 = and i8 %4800, 1
  store i8 %4801, i8* %55, align 1, !tbaa !2447
  %4802 = icmp eq i64 %4786, 0
  %4803 = zext i1 %4802 to i8
  store i8 %4803, i8* %58, align 1, !tbaa !2448
  %4804 = lshr i64 %4786, 63
  %4805 = trunc i64 %4804 to i8
  store i8 %4805, i8* %61, align 1, !tbaa !2449
  %4806 = lshr i64 %4778, 63
  %4807 = xor i64 %4804, %4806
  %4808 = xor i64 %4804, %4785
  %4809 = add nuw nsw i64 %4807, %4808
  %4810 = icmp eq i64 %4809, 2
  %4811 = zext i1 %4810 to i8
  store i8 %4811, i8* %67, align 1, !tbaa !2450
  %4812 = load i64, i64* %RBP, align 8
  %4813 = add i64 %4812, -104
  %4814 = add i64 %4774, 22
  store i64 %4814, i64* %PC, align 8
  %4815 = inttoptr i64 %4813 to i32*
  %4816 = load i32, i32* %4815, align 4
  %4817 = sext i32 %4816 to i64
  %4818 = mul nsw i64 %4817, 520
  store i64 %4818, i64* %RCX, align 8, !tbaa !2428
  %4819 = lshr i64 %4818, 63
  %4820 = add i64 %4774, 32
  store i64 %4820, i64* %PC, align 8
  %4821 = add i64 %4818, %4786
  store i64 %4821, i64* %RAX, align 8, !tbaa !2428
  %4822 = icmp ult i64 %4821, %4786
  %4823 = icmp ult i64 %4821, %4818
  %4824 = or i1 %4822, %4823
  %4825 = zext i1 %4824 to i8
  store i8 %4825, i8* %43, align 1, !tbaa !2432
  %4826 = trunc i64 %4821 to i32
  %4827 = and i32 %4826, 255
  %4828 = tail call i32 @llvm.ctpop.i32(i32 %4827) #8
  %4829 = trunc i32 %4828 to i8
  %4830 = and i8 %4829, 1
  %4831 = xor i8 %4830, 1
  store i8 %4831, i8* %50, align 1, !tbaa !2446
  %4832 = xor i64 %4818, %4786
  %4833 = xor i64 %4832, %4821
  %4834 = lshr i64 %4833, 4
  %4835 = trunc i64 %4834 to i8
  %4836 = and i8 %4835, 1
  store i8 %4836, i8* %55, align 1, !tbaa !2447
  %4837 = icmp eq i64 %4821, 0
  %4838 = zext i1 %4837 to i8
  store i8 %4838, i8* %58, align 1, !tbaa !2448
  %4839 = lshr i64 %4821, 63
  %4840 = trunc i64 %4839 to i8
  store i8 %4840, i8* %61, align 1, !tbaa !2449
  %4841 = xor i64 %4839, %4804
  %4842 = xor i64 %4839, %4819
  %4843 = add nuw nsw i64 %4841, %4842
  %4844 = icmp eq i64 %4843, 2
  %4845 = zext i1 %4844 to i8
  store i8 %4845, i8* %67, align 1, !tbaa !2450
  br i1 %4773, label %block_401fec, label %block_40228c
}

; Function Attrs: noinline
define %struct.Memory* @sub_400780_polybench_timer_print(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400780:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %5, i64* %10, align 8
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -24
  %13 = icmp ult i64 %9, 16
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #8
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 %9, 16
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 112), i64* %RDI, align 8, !tbaa !2428
  %41 = load double, double* bitcast (%polybench_t_end_type* @polybench_t_end to double*), align 8
  %42 = bitcast %union.VectorReg* %4 to double*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %44 = load double, double* bitcast (%polybench_t_start_type* @polybench_t_start to double*), align 8
  %45 = fsub double %41, %44
  store double %45, double* %42, align 1, !tbaa !2452
  store i64 0, i64* %43, align 1, !tbaa !2452
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %46 = add i64 %11, -545
  %47 = add i64 %11, 42
  %48 = add i64 %8, -32
  %49 = inttoptr i64 %48 to i64*
  store i64 %47, i64* %49, align 8
  store i64 %48, i64* %7, align 8, !tbaa !2428
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %46, i64* %50, align 8, !tbaa !2428
  %51 = tail call fastcc %struct.Memory* @ext_6040e0_printf(%struct.State* nonnull %0, %struct.Memory* %2)
  %52 = load i64, i64* %RBP, align 8
  %53 = add i64 %52, -4
  %54 = load i32, i32* %EAX, align 4
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %55, 3
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %53 to i32*
  store i32 %54, i32* %57, align 4
  %58 = load i64, i64* %RSP, align 8
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %58, 16
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  %61 = icmp ugt i64 %58, -17
  %62 = zext i1 %61 to i8
  store i8 %62, i8* %15, align 1, !tbaa !2432
  %63 = trunc i64 %60 to i32
  %64 = and i32 %63, 255
  %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #8
  %66 = trunc i32 %65 to i8
  %67 = and i8 %66, 1
  %68 = xor i8 %67, 1
  store i8 %68, i8* %22, align 1, !tbaa !2446
  %69 = xor i64 %58, 16
  %70 = xor i64 %69, %60
  %71 = lshr i64 %70, 4
  %72 = trunc i64 %71 to i8
  %73 = and i8 %72, 1
  store i8 %73, i8* %28, align 1, !tbaa !2447
  %74 = icmp eq i64 %60, 0
  %75 = zext i1 %74 to i8
  store i8 %75, i8* %31, align 1, !tbaa !2448
  %76 = lshr i64 %60, 63
  %77 = trunc i64 %76 to i8
  store i8 %77, i8* %34, align 1, !tbaa !2449
  %78 = lshr i64 %58, 63
  %79 = xor i64 %76, %78
  %80 = add nuw nsw i64 %79, %76
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %40, align 1, !tbaa !2450
  %83 = add i64 %59, 5
  store i64 %83, i64* %PC, align 8
  %84 = add i64 %58, 24
  %85 = inttoptr i64 %60 to i64*
  %86 = load i64, i64* %85, align 8
  store i64 %86, i64* %RBP, align 8, !tbaa !2428
  store i64 %84, i64* %7, align 8, !tbaa !2428
  %87 = add i64 %59, 6
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %84 to i64*
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %50, align 8, !tbaa !2428
  %90 = add i64 %58, 32
  store i64 %90, i64* %7, align 8, !tbaa !2428
  ret %struct.Memory* %51
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005b0__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4005b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %RBP, align 8, !tbaa !2428
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !2432
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4, align 1, !tbaa !2446
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %5, align 1, !tbaa !2448
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6, align 1, !tbaa !2449
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1, !tbaa !2450
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !2447
  %9 = load i64, i64* %RDX, align 8
  store i64 %9, i64* %R9, align 8, !tbaa !2428
  %10 = add i64 %1, 6
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, 8
  %14 = inttoptr i64 %12 to i64*
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %RSI, align 8, !tbaa !2428
  store i64 %13, i64* %RDX, align 8, !tbaa !2428
  %16 = and i64 %13, -16
  store i8 0, i8* %3, align 1, !tbaa !2432
  %17 = trunc i64 %13 to i32
  %18 = and i32 %17, 240
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #8
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  store i8 %22, i8* %4, align 1, !tbaa !2446
  %23 = icmp eq i64 %16, 0
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %5, align 1, !tbaa !2448
  %25 = lshr i64 %13, 63
  %26 = trunc i64 %25 to i8
  store i8 %26, i8* %6, align 1, !tbaa !2449
  store i8 0, i8* %7, align 1, !tbaa !2450
  store i8 0, i8* %8, align 1, !tbaa !2447
  %27 = load i64, i64* %RAX, align 8
  %28 = add i64 %1, 14
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %16, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC, align 8
  %33 = add i64 %16, -16
  %34 = inttoptr i64 %33 to i64*
  store i64 %29, i64* %34, align 16
  %35 = load i64, i64* %PC, align 8
  store i64 ptrtoint (void ()* @callback_sub_402e70___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @callback_sub_402e00___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %36 = add i64 %35, 27
  %37 = add i64 %16, -24
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38, align 8
  store i64 %37, i64* %11, align 8, !tbaa !2428
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %40 = load i64, i64* getelementptr inbounds (%seg_603ff0__got_type, %seg_603ff0__got_type* @seg_603ff0__got, i64 0, i32 0), align 8
  store i64 %40, i64* %39, align 8, !tbaa !2428
  %41 = tail call fastcc %struct.Memory* @ext_6040b0___libc_start_main(%struct.State* nonnull %0, %struct.Memory* %2)
  %42 = load i64, i64* %PC, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %PC, align 8
  %44 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %43, %struct.Memory* %41)
  ret %struct.Memory* %44
}

; Function Attrs: noinline
define %struct.Memory* @sub_400690_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400690:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, -113
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %12, i64* %13, align 8, !tbaa !2428
  %14 = tail call %struct.Memory* @sub_400620_register_tm_clones(%struct.State* nonnull %0, i64 %12, %struct.Memory* %2)
  ret %struct.Memory* %14
}

; Function Attrs: noinline
define %struct.Memory* @sub_402bf0_print_array(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402bf0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %7 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %8 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %R9 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %RBP, align 8
  %11 = add i64 %1, 1
  store i64 %11, i64* %PC, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = load i64, i64* %12, align 8, !tbaa !2428
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %10, i64* %15, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %14, i64* %RBP, align 8, !tbaa !2428
  %17 = add i64 %13, -104
  store i64 %17, i64* %RSP, align 8, !tbaa !2428
  %18 = icmp ult i64 %14, 96
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1, !tbaa !2432
  %21 = trunc i64 %17 to i32
  %22 = and i32 %21, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) #8
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1, !tbaa !2446
  %28 = xor i64 %14, %17
  %29 = lshr i64 %28, 4
  %30 = trunc i64 %29 to i8
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1, !tbaa !2447
  %33 = icmp eq i64 %17, 0
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %34, i8* %35, align 1, !tbaa !2448
  %36 = lshr i64 %17, 63
  %37 = trunc i64 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1, !tbaa !2449
  %39 = lshr i64 %14, 63
  %40 = xor i64 %36, %39
  %41 = add nuw nsw i64 %40, %39
  %42 = icmp eq i64 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1, !tbaa !2450
  %45 = add i64 %13, 8
  %46 = add i64 %16, 11
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %45 to i64*
  %48 = load i64, i64* %47, align 8
  store i64 %48, i64* %RAX, align 8, !tbaa !2428
  %49 = add i64 %13, -12
  %50 = load i32, i32* %EDI, align 4
  %51 = add i64 %16, 14
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i32*
  store i32 %50, i32* %52, align 4
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -8
  %55 = load i32, i32* %ESI, align 4
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 3
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %54 to i32*
  store i32 %55, i32* %58, align 4
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -12
  %61 = load i32, i32* %EDX, align 4
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %60 to i32*
  store i32 %61, i32* %64, align 4
  %65 = load i64, i64* %RBP, align 8
  %66 = add i64 %65, -24
  %67 = load i64, i64* %RCX, align 8
  %68 = load i64, i64* %PC, align 8
  %69 = add i64 %68, 4
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %66 to i64*
  store i64 %67, i64* %70, align 8
  %71 = load i64, i64* %RBP, align 8
  %72 = add i64 %71, -32
  %73 = load i64, i64* %R8, align 8
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %72 to i64*
  store i64 %73, i64* %76, align 8
  %77 = load i64, i64* %RBP, align 8
  %78 = add i64 %77, -40
  %79 = load i64, i64* %R9, align 8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %82, align 8
  %83 = load i64, i64* %RBP, align 8
  %84 = add i64 %83, -44
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 7
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %84 to i32*
  store i32 0, i32* %87, align 4
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -64
  %90 = load i64, i64* %RAX, align 8
  %91 = load i64, i64* %PC, align 8
  %92 = add i64 %91, 4
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %89 to i64*
  store i64 %90, i64* %93, align 8
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %96 = bitcast i64* %95 to double*
  %97 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %98 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %.pre = load i64, i64* %PC, align 8
  br label %block_402c1c

block_402c3b:                                     ; preds = %block_402c2f
  %102 = add i64 %649, -52
  %103 = add i64 %685, 7
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %102 to i32*
  store i32 0, i32* %104, align 4
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_402c42

block_402c1c:                                     ; preds = %block_402dc7, %block_402bf0
  %105 = phi i64 [ %.pre, %block_402bf0 ], [ %716, %block_402dc7 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402bf0 ], [ %MEMORY.1, %block_402dc7 ]
  %106 = load i64, i64* %RBP, align 8
  %107 = add i64 %106, -44
  %108 = add i64 %105, 3
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %107 to i32*
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  store i64 %111, i64* %RAX, align 8, !tbaa !2428
  %112 = add i64 %106, -4
  %113 = add i64 %105, 6
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i32*
  %115 = load i32, i32* %114, align 4
  %116 = sub i32 %110, %115
  %117 = icmp ult i32 %110, %115
  %118 = zext i1 %117 to i8
  store i8 %118, i8* %20, align 1, !tbaa !2432
  %119 = and i32 %116, 255
  %120 = tail call i32 @llvm.ctpop.i32(i32 %119) #8
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  %123 = xor i8 %122, 1
  store i8 %123, i8* %27, align 1, !tbaa !2446
  %124 = xor i32 %115, %110
  %125 = xor i32 %124, %116
  %126 = lshr i32 %125, 4
  %127 = trunc i32 %126 to i8
  %128 = and i8 %127, 1
  store i8 %128, i8* %32, align 1, !tbaa !2447
  %129 = icmp eq i32 %116, 0
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %35, align 1, !tbaa !2448
  %131 = lshr i32 %116, 31
  %132 = trunc i32 %131 to i8
  store i8 %132, i8* %38, align 1, !tbaa !2449
  %133 = lshr i32 %110, 31
  %134 = lshr i32 %115, 31
  %135 = xor i32 %134, %133
  %136 = xor i32 %131, %133
  %137 = add nuw nsw i32 %136, %135
  %138 = icmp eq i32 %137, 2
  %139 = zext i1 %138 to i8
  store i8 %139, i8* %44, align 1, !tbaa !2450
  %140 = icmp ne i8 %132, 0
  %141 = xor i1 %140, %138
  %.demorgan = or i1 %129, %141
  %.v = select i1 %.demorgan, i64 12, i64 446
  %142 = add i64 %105, %.v
  store i64 %142, i64* %94, align 8, !tbaa !2428
  br i1 %.demorgan, label %block_402c28, label %block_402dda

block_402db4:                                     ; preds = %block_402c42
  %143 = add i64 %776, -48
  %144 = add i64 %812, 8
  store i64 %144, i64* %PC, align 8
  %145 = inttoptr i64 %143 to i32*
  %146 = load i32, i32* %145, align 4
  %147 = add i32 %146, 1
  %148 = zext i32 %147 to i64
  store i64 %148, i64* %RAX, align 8, !tbaa !2428
  %149 = icmp eq i32 %146, -1
  %150 = icmp eq i32 %147, 0
  %151 = or i1 %149, %150
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %20, align 1, !tbaa !2432
  %153 = and i32 %147, 255
  %154 = tail call i32 @llvm.ctpop.i32(i32 %153) #8
  %155 = trunc i32 %154 to i8
  %156 = and i8 %155, 1
  %157 = xor i8 %156, 1
  store i8 %157, i8* %27, align 1, !tbaa !2446
  %158 = xor i32 %146, %147
  %159 = lshr i32 %158, 4
  %160 = trunc i32 %159 to i8
  %161 = and i8 %160, 1
  store i8 %161, i8* %32, align 1, !tbaa !2447
  %162 = icmp eq i32 %147, 0
  %163 = zext i1 %162 to i8
  store i8 %163, i8* %35, align 1, !tbaa !2448
  %164 = lshr i32 %147, 31
  %165 = trunc i32 %164 to i8
  store i8 %165, i8* %38, align 1, !tbaa !2449
  %166 = lshr i32 %146, 31
  %167 = xor i32 %164, %166
  %168 = add nuw nsw i32 %167, %164
  %169 = icmp eq i32 %168, 2
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %44, align 1, !tbaa !2450
  %171 = add i64 %812, 14
  store i64 %171, i64* %PC, align 8
  store i32 %147, i32* %145, align 4
  %172 = load i64, i64* %PC, align 8
  %173 = add i64 %172, -403
  store i64 %173, i64* %94, align 8, !tbaa !2428
  br label %block_402c2f

block_402c4e:                                     ; preds = %block_402c42
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %174 = load i64, i64* @stderr, align 32
  store i64 %174, i64* %RDI, align 8, !tbaa !2428
  %175 = add i64 %776, -24
  %176 = add i64 %812, 22
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %175 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RAX, align 8, !tbaa !2428
  %179 = add i64 %776, -44
  %180 = add i64 %812, 26
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i32*
  %182 = load i32, i32* %181, align 4
  %183 = sext i32 %182 to i64
  %184 = mul nsw i64 %183, 33800
  store i64 %184, i64* %RCX, align 8, !tbaa !2428
  %185 = lshr i64 %184, 63
  %186 = add i64 %184, %178
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = icmp ult i64 %186, %178
  %188 = icmp ult i64 %186, %184
  %189 = or i1 %187, %188
  %190 = zext i1 %189 to i8
  store i8 %190, i8* %20, align 1, !tbaa !2432
  %191 = trunc i64 %186 to i32
  %192 = and i32 %191, 255
  %193 = tail call i32 @llvm.ctpop.i32(i32 %192) #8
  %194 = trunc i32 %193 to i8
  %195 = and i8 %194, 1
  %196 = xor i8 %195, 1
  store i8 %196, i8* %27, align 1, !tbaa !2446
  %197 = xor i64 %184, %178
  %198 = xor i64 %197, %186
  %199 = lshr i64 %198, 4
  %200 = trunc i64 %199 to i8
  %201 = and i8 %200, 1
  store i8 %201, i8* %32, align 1, !tbaa !2447
  %202 = icmp eq i64 %186, 0
  %203 = zext i1 %202 to i8
  store i8 %203, i8* %35, align 1, !tbaa !2448
  %204 = lshr i64 %186, 63
  %205 = trunc i64 %204 to i8
  store i8 %205, i8* %38, align 1, !tbaa !2449
  %206 = lshr i64 %178, 63
  %207 = xor i64 %204, %206
  %208 = xor i64 %204, %185
  %209 = add nuw nsw i64 %207, %208
  %210 = icmp eq i64 %209, 2
  %211 = zext i1 %210 to i8
  store i8 %211, i8* %44, align 1, !tbaa !2450
  %212 = add i64 %776, -48
  %213 = add i64 %812, 40
  store i64 %213, i64* %PC, align 8
  %214 = inttoptr i64 %212 to i32*
  %215 = load i32, i32* %214, align 4
  %216 = sext i32 %215 to i64
  %217 = mul nsw i64 %216, 520
  store i64 %217, i64* %RCX, align 8, !tbaa !2428
  %218 = lshr i64 %217, 63
  %219 = add i64 %217, %186
  store i64 %219, i64* %RAX, align 8, !tbaa !2428
  %220 = icmp ult i64 %219, %186
  %221 = icmp ult i64 %219, %217
  %222 = or i1 %220, %221
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %20, align 1, !tbaa !2432
  %224 = trunc i64 %219 to i32
  %225 = and i32 %224, 255
  %226 = tail call i32 @llvm.ctpop.i32(i32 %225) #8
  %227 = trunc i32 %226 to i8
  %228 = and i8 %227, 1
  %229 = xor i8 %228, 1
  store i8 %229, i8* %27, align 1, !tbaa !2446
  %230 = xor i64 %217, %186
  %231 = xor i64 %230, %219
  %232 = lshr i64 %231, 4
  %233 = trunc i64 %232 to i8
  %234 = and i8 %233, 1
  store i8 %234, i8* %32, align 1, !tbaa !2447
  %235 = icmp eq i64 %219, 0
  %236 = zext i1 %235 to i8
  store i8 %236, i8* %35, align 1, !tbaa !2448
  %237 = lshr i64 %219, 63
  %238 = trunc i64 %237 to i8
  store i8 %238, i8* %38, align 1, !tbaa !2449
  %239 = xor i64 %237, %204
  %240 = xor i64 %237, %218
  %241 = add nuw nsw i64 %239, %240
  %242 = icmp eq i64 %241, 2
  %243 = zext i1 %242 to i8
  store i8 %243, i8* %44, align 1, !tbaa !2450
  %244 = load i64, i64* %RBP, align 8
  %245 = add i64 %244, -52
  %246 = add i64 %812, 54
  store i64 %246, i64* %PC, align 8
  %247 = inttoptr i64 %245 to i32*
  %248 = load i32, i32* %247, align 4
  %249 = sext i32 %248 to i64
  store i64 %249, i64* %RCX, align 8, !tbaa !2428
  %250 = shl nsw i64 %249, 3
  %251 = add i64 %250, %219
  %252 = add i64 %812, 59
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %251 to i64*
  %254 = load i64, i64* %253, align 8
  %255 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %254, i64* %255, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %256 = add i64 %812, -9934
  %257 = add i64 %812, 66
  %258 = load i64, i64* %12, align 8, !tbaa !2428
  %259 = add i64 %258, -8
  %260 = inttoptr i64 %259 to i64*
  store i64 %257, i64* %260, align 8
  store i64 %259, i64* %12, align 8, !tbaa !2428
  store i64 %256, i64* %94, align 8, !tbaa !2428
  %261 = tail call fastcc %struct.Memory* @ext_6040f8_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.2)
  %262 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %263 = load i64, i64* @stderr, align 32
  store i64 %263, i64* %RDI, align 8, !tbaa !2428
  %264 = load i64, i64* %RBP, align 8
  %265 = add i64 %264, -32
  %266 = add i64 %262, 22
  store i64 %266, i64* %PC, align 8
  %267 = inttoptr i64 %265 to i64*
  %268 = load i64, i64* %267, align 8
  store i64 %268, i64* %RCX, align 8, !tbaa !2428
  %269 = add i64 %264, -44
  %270 = add i64 %262, 26
  store i64 %270, i64* %PC, align 8
  %271 = inttoptr i64 %269 to i32*
  %272 = load i32, i32* %271, align 4
  %273 = sext i32 %272 to i64
  %274 = mul nsw i64 %273, 33800
  store i64 %274, i64* %RDX, align 8, !tbaa !2428
  %275 = lshr i64 %274, 63
  %276 = add i64 %274, %268
  store i64 %276, i64* %RCX, align 8, !tbaa !2428
  %277 = icmp ult i64 %276, %268
  %278 = icmp ult i64 %276, %274
  %279 = or i1 %277, %278
  %280 = zext i1 %279 to i8
  store i8 %280, i8* %20, align 1, !tbaa !2432
  %281 = trunc i64 %276 to i32
  %282 = and i32 %281, 255
  %283 = tail call i32 @llvm.ctpop.i32(i32 %282) #8
  %284 = trunc i32 %283 to i8
  %285 = and i8 %284, 1
  %286 = xor i8 %285, 1
  store i8 %286, i8* %27, align 1, !tbaa !2446
  %287 = xor i64 %274, %268
  %288 = xor i64 %287, %276
  %289 = lshr i64 %288, 4
  %290 = trunc i64 %289 to i8
  %291 = and i8 %290, 1
  store i8 %291, i8* %32, align 1, !tbaa !2447
  %292 = icmp eq i64 %276, 0
  %293 = zext i1 %292 to i8
  store i8 %293, i8* %35, align 1, !tbaa !2448
  %294 = lshr i64 %276, 63
  %295 = trunc i64 %294 to i8
  store i8 %295, i8* %38, align 1, !tbaa !2449
  %296 = lshr i64 %268, 63
  %297 = xor i64 %294, %296
  %298 = xor i64 %294, %275
  %299 = add nuw nsw i64 %297, %298
  %300 = icmp eq i64 %299, 2
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %44, align 1, !tbaa !2450
  %302 = add i64 %264, -48
  %303 = add i64 %262, 40
  store i64 %303, i64* %PC, align 8
  %304 = inttoptr i64 %302 to i32*
  %305 = load i32, i32* %304, align 4
  %306 = sext i32 %305 to i64
  %307 = mul nsw i64 %306, 520
  store i64 %307, i64* %RDX, align 8, !tbaa !2428
  %308 = lshr i64 %307, 63
  %309 = add i64 %307, %276
  store i64 %309, i64* %RCX, align 8, !tbaa !2428
  %310 = icmp ult i64 %309, %276
  %311 = icmp ult i64 %309, %307
  %312 = or i1 %310, %311
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %20, align 1, !tbaa !2432
  %314 = trunc i64 %309 to i32
  %315 = and i32 %314, 255
  %316 = tail call i32 @llvm.ctpop.i32(i32 %315) #8
  %317 = trunc i32 %316 to i8
  %318 = and i8 %317, 1
  %319 = xor i8 %318, 1
  store i8 %319, i8* %27, align 1, !tbaa !2446
  %320 = xor i64 %307, %276
  %321 = xor i64 %320, %309
  %322 = lshr i64 %321, 4
  %323 = trunc i64 %322 to i8
  %324 = and i8 %323, 1
  store i8 %324, i8* %32, align 1, !tbaa !2447
  %325 = icmp eq i64 %309, 0
  %326 = zext i1 %325 to i8
  store i8 %326, i8* %35, align 1, !tbaa !2448
  %327 = lshr i64 %309, 63
  %328 = trunc i64 %327 to i8
  store i8 %328, i8* %38, align 1, !tbaa !2449
  %329 = xor i64 %327, %294
  %330 = xor i64 %327, %308
  %331 = add nuw nsw i64 %329, %330
  %332 = icmp eq i64 %331, 2
  %333 = zext i1 %332 to i8
  store i8 %333, i8* %44, align 1, !tbaa !2450
  %334 = load i64, i64* %RBP, align 8
  %335 = add i64 %334, -52
  %336 = add i64 %262, 54
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %335 to i32*
  %338 = load i32, i32* %337, align 4
  %339 = sext i32 %338 to i64
  store i64 %339, i64* %RDX, align 8, !tbaa !2428
  %340 = shl nsw i64 %339, 3
  %341 = add i64 %340, %309
  %342 = add i64 %262, 59
  store i64 %342, i64* %PC, align 8
  %343 = inttoptr i64 %341 to i64*
  %344 = load i64, i64* %343, align 8
  %345 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %344, i64* %345, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %346 = add i64 %334, -68
  %347 = load i32, i32* %EAX, align 4
  %348 = add i64 %262, 62
  store i64 %348, i64* %PC, align 8
  %349 = inttoptr i64 %346 to i32*
  store i32 %347, i32* %349, align 4
  %350 = load i64, i64* %PC, align 8
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %351 = add i64 %350, -10062
  %352 = add i64 %350, 7
  %353 = load i64, i64* %12, align 8, !tbaa !2428
  %354 = add i64 %353, -8
  %355 = inttoptr i64 %354 to i64*
  store i64 %352, i64* %355, align 8
  store i64 %354, i64* %12, align 8, !tbaa !2428
  store i64 %351, i64* %94, align 8, !tbaa !2428
  %356 = tail call fastcc %struct.Memory* @ext_6040f8_fprintf(%struct.State* nonnull %0, %struct.Memory* %261)
  %357 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %358 = load i64, i64* @stderr, align 32
  store i64 %358, i64* %RDI, align 8, !tbaa !2428
  %359 = load i64, i64* %RBP, align 8
  %360 = add i64 %359, -40
  %361 = add i64 %357, 22
  store i64 %361, i64* %PC, align 8
  %362 = inttoptr i64 %360 to i64*
  %363 = load i64, i64* %362, align 8
  store i64 %363, i64* %RCX, align 8, !tbaa !2428
  %364 = add i64 %359, -44
  %365 = add i64 %357, 26
  store i64 %365, i64* %PC, align 8
  %366 = inttoptr i64 %364 to i32*
  %367 = load i32, i32* %366, align 4
  %368 = sext i32 %367 to i64
  %369 = mul nsw i64 %368, 33800
  store i64 %369, i64* %RDX, align 8, !tbaa !2428
  %370 = lshr i64 %369, 63
  %371 = add i64 %369, %363
  store i64 %371, i64* %RCX, align 8, !tbaa !2428
  %372 = icmp ult i64 %371, %363
  %373 = icmp ult i64 %371, %369
  %374 = or i1 %372, %373
  %375 = zext i1 %374 to i8
  store i8 %375, i8* %20, align 1, !tbaa !2432
  %376 = trunc i64 %371 to i32
  %377 = and i32 %376, 255
  %378 = tail call i32 @llvm.ctpop.i32(i32 %377) #8
  %379 = trunc i32 %378 to i8
  %380 = and i8 %379, 1
  %381 = xor i8 %380, 1
  store i8 %381, i8* %27, align 1, !tbaa !2446
  %382 = xor i64 %369, %363
  %383 = xor i64 %382, %371
  %384 = lshr i64 %383, 4
  %385 = trunc i64 %384 to i8
  %386 = and i8 %385, 1
  store i8 %386, i8* %32, align 1, !tbaa !2447
  %387 = icmp eq i64 %371, 0
  %388 = zext i1 %387 to i8
  store i8 %388, i8* %35, align 1, !tbaa !2448
  %389 = lshr i64 %371, 63
  %390 = trunc i64 %389 to i8
  store i8 %390, i8* %38, align 1, !tbaa !2449
  %391 = lshr i64 %363, 63
  %392 = xor i64 %389, %391
  %393 = xor i64 %389, %370
  %394 = add nuw nsw i64 %392, %393
  %395 = icmp eq i64 %394, 2
  %396 = zext i1 %395 to i8
  store i8 %396, i8* %44, align 1, !tbaa !2450
  %397 = add i64 %359, -48
  %398 = add i64 %357, 40
  store i64 %398, i64* %PC, align 8
  %399 = inttoptr i64 %397 to i32*
  %400 = load i32, i32* %399, align 4
  %401 = sext i32 %400 to i64
  %402 = mul nsw i64 %401, 520
  store i64 %402, i64* %RDX, align 8, !tbaa !2428
  %403 = lshr i64 %402, 63
  %404 = add i64 %402, %371
  store i64 %404, i64* %RCX, align 8, !tbaa !2428
  %405 = icmp ult i64 %404, %371
  %406 = icmp ult i64 %404, %402
  %407 = or i1 %405, %406
  %408 = zext i1 %407 to i8
  store i8 %408, i8* %20, align 1, !tbaa !2432
  %409 = trunc i64 %404 to i32
  %410 = and i32 %409, 255
  %411 = tail call i32 @llvm.ctpop.i32(i32 %410) #8
  %412 = trunc i32 %411 to i8
  %413 = and i8 %412, 1
  %414 = xor i8 %413, 1
  store i8 %414, i8* %27, align 1, !tbaa !2446
  %415 = xor i64 %402, %371
  %416 = xor i64 %415, %404
  %417 = lshr i64 %416, 4
  %418 = trunc i64 %417 to i8
  %419 = and i8 %418, 1
  store i8 %419, i8* %32, align 1, !tbaa !2447
  %420 = icmp eq i64 %404, 0
  %421 = zext i1 %420 to i8
  store i8 %421, i8* %35, align 1, !tbaa !2448
  %422 = lshr i64 %404, 63
  %423 = trunc i64 %422 to i8
  store i8 %423, i8* %38, align 1, !tbaa !2449
  %424 = xor i64 %422, %389
  %425 = xor i64 %422, %403
  %426 = add nuw nsw i64 %424, %425
  %427 = icmp eq i64 %426, 2
  %428 = zext i1 %427 to i8
  store i8 %428, i8* %44, align 1, !tbaa !2450
  %429 = load i64, i64* %RBP, align 8
  %430 = add i64 %429, -52
  %431 = add i64 %357, 54
  store i64 %431, i64* %PC, align 8
  %432 = inttoptr i64 %430 to i32*
  %433 = load i32, i32* %432, align 4
  %434 = sext i32 %433 to i64
  store i64 %434, i64* %RDX, align 8, !tbaa !2428
  %435 = shl nsw i64 %434, 3
  %436 = add i64 %435, %404
  %437 = add i64 %357, 59
  store i64 %437, i64* %PC, align 8
  %438 = inttoptr i64 %436 to i64*
  %439 = load i64, i64* %438, align 8
  %440 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %439, i64* %440, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %441 = add i64 %429, -72
  %442 = load i32, i32* %EAX, align 4
  %443 = add i64 %357, 62
  store i64 %443, i64* %PC, align 8
  %444 = inttoptr i64 %441 to i32*
  store i32 %442, i32* %444, align 4
  %445 = load i64, i64* %PC, align 8
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %446 = add i64 %445, -10131
  %447 = add i64 %445, 7
  %448 = load i64, i64* %12, align 8, !tbaa !2428
  %449 = add i64 %448, -8
  %450 = inttoptr i64 %449 to i64*
  store i64 %447, i64* %450, align 8
  store i64 %449, i64* %12, align 8, !tbaa !2428
  store i64 %446, i64* %94, align 8, !tbaa !2428
  %451 = tail call fastcc %struct.Memory* @ext_6040f8_fprintf(%struct.State* nonnull %0, %struct.Memory* %356)
  %452 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %453 = load i64, i64* @stderr, align 32
  store i64 %453, i64* %RDI, align 8, !tbaa !2428
  %454 = load i64, i64* %RBP, align 8
  %455 = add i64 %454, 16
  %456 = add i64 %452, 22
  store i64 %456, i64* %PC, align 8
  %457 = inttoptr i64 %455 to i64*
  %458 = load i64, i64* %457, align 8
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = add i64 %454, -44
  %460 = add i64 %452, 26
  store i64 %460, i64* %PC, align 8
  %461 = inttoptr i64 %459 to i32*
  %462 = load i32, i32* %461, align 4
  %463 = sext i32 %462 to i64
  %464 = mul nsw i64 %463, 33800
  store i64 %464, i64* %RDX, align 8, !tbaa !2428
  %465 = lshr i64 %464, 63
  %466 = add i64 %464, %458
  store i64 %466, i64* %RCX, align 8, !tbaa !2428
  %467 = icmp ult i64 %466, %458
  %468 = icmp ult i64 %466, %464
  %469 = or i1 %467, %468
  %470 = zext i1 %469 to i8
  store i8 %470, i8* %20, align 1, !tbaa !2432
  %471 = trunc i64 %466 to i32
  %472 = and i32 %471, 255
  %473 = tail call i32 @llvm.ctpop.i32(i32 %472) #8
  %474 = trunc i32 %473 to i8
  %475 = and i8 %474, 1
  %476 = xor i8 %475, 1
  store i8 %476, i8* %27, align 1, !tbaa !2446
  %477 = xor i64 %464, %458
  %478 = xor i64 %477, %466
  %479 = lshr i64 %478, 4
  %480 = trunc i64 %479 to i8
  %481 = and i8 %480, 1
  store i8 %481, i8* %32, align 1, !tbaa !2447
  %482 = icmp eq i64 %466, 0
  %483 = zext i1 %482 to i8
  store i8 %483, i8* %35, align 1, !tbaa !2448
  %484 = lshr i64 %466, 63
  %485 = trunc i64 %484 to i8
  store i8 %485, i8* %38, align 1, !tbaa !2449
  %486 = lshr i64 %458, 63
  %487 = xor i64 %484, %486
  %488 = xor i64 %484, %465
  %489 = add nuw nsw i64 %487, %488
  %490 = icmp eq i64 %489, 2
  %491 = zext i1 %490 to i8
  store i8 %491, i8* %44, align 1, !tbaa !2450
  %492 = add i64 %454, -48
  %493 = add i64 %452, 40
  store i64 %493, i64* %PC, align 8
  %494 = inttoptr i64 %492 to i32*
  %495 = load i32, i32* %494, align 4
  %496 = sext i32 %495 to i64
  %497 = mul nsw i64 %496, 520
  store i64 %497, i64* %RDX, align 8, !tbaa !2428
  %498 = lshr i64 %497, 63
  %499 = add i64 %497, %466
  store i64 %499, i64* %RCX, align 8, !tbaa !2428
  %500 = icmp ult i64 %499, %466
  %501 = icmp ult i64 %499, %497
  %502 = or i1 %500, %501
  %503 = zext i1 %502 to i8
  store i8 %503, i8* %20, align 1, !tbaa !2432
  %504 = trunc i64 %499 to i32
  %505 = and i32 %504, 255
  %506 = tail call i32 @llvm.ctpop.i32(i32 %505) #8
  %507 = trunc i32 %506 to i8
  %508 = and i8 %507, 1
  %509 = xor i8 %508, 1
  store i8 %509, i8* %27, align 1, !tbaa !2446
  %510 = xor i64 %497, %466
  %511 = xor i64 %510, %499
  %512 = lshr i64 %511, 4
  %513 = trunc i64 %512 to i8
  %514 = and i8 %513, 1
  store i8 %514, i8* %32, align 1, !tbaa !2447
  %515 = icmp eq i64 %499, 0
  %516 = zext i1 %515 to i8
  store i8 %516, i8* %35, align 1, !tbaa !2448
  %517 = lshr i64 %499, 63
  %518 = trunc i64 %517 to i8
  store i8 %518, i8* %38, align 1, !tbaa !2449
  %519 = xor i64 %517, %484
  %520 = xor i64 %517, %498
  %521 = add nuw nsw i64 %519, %520
  %522 = icmp eq i64 %521, 2
  %523 = zext i1 %522 to i8
  store i8 %523, i8* %44, align 1, !tbaa !2450
  %524 = load i64, i64* %RBP, align 8
  %525 = add i64 %524, -52
  %526 = add i64 %452, 54
  store i64 %526, i64* %PC, align 8
  %527 = inttoptr i64 %525 to i32*
  %528 = load i32, i32* %527, align 4
  %529 = sext i32 %528 to i64
  store i64 %529, i64* %RDX, align 8, !tbaa !2428
  %530 = shl nsw i64 %529, 3
  %531 = add i64 %530, %499
  %532 = add i64 %452, 59
  store i64 %532, i64* %PC, align 8
  %533 = inttoptr i64 %531 to i64*
  %534 = load i64, i64* %533, align 8
  %535 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %534, i64* %535, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %536 = add i64 %524, -76
  %537 = load i32, i32* %EAX, align 4
  %538 = add i64 %452, 62
  store i64 %538, i64* %PC, align 8
  %539 = inttoptr i64 %536 to i32*
  store i32 %537, i32* %539, align 4
  %540 = load i64, i64* %PC, align 8
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %541 = add i64 %540, -10200
  %542 = add i64 %540, 7
  %543 = load i64, i64* %12, align 8, !tbaa !2428
  %544 = add i64 %543, -8
  %545 = inttoptr i64 %544 to i64*
  store i64 %542, i64* %545, align 8
  store i64 %544, i64* %12, align 8, !tbaa !2428
  store i64 %541, i64* %94, align 8, !tbaa !2428
  %546 = tail call fastcc %struct.Memory* @ext_6040f8_fprintf(%struct.State* nonnull %0, %struct.Memory* %451)
  %547 = load i64, i64* %PC, align 8
  store i64 20, i64* %97, align 8, !tbaa !2428
  %548 = load i64, i64* %RBP, align 8
  %549 = add i64 %548, -44
  %550 = add i64 %547, 10
  store i64 %550, i64* %PC, align 8
  %551 = inttoptr i64 %549 to i32*
  %552 = load i32, i32* %551, align 4
  %553 = zext i32 %552 to i64
  store i64 %553, i64* %98, align 8, !tbaa !2428
  %554 = add i64 %548, -8
  %555 = add i64 %547, 15
  store i64 %555, i64* %PC, align 8
  %556 = inttoptr i64 %554 to i32*
  %557 = load i32, i32* %556, align 4
  %558 = sext i32 %552 to i64
  %559 = sext i32 %557 to i64
  %560 = mul nsw i64 %559, %558
  %561 = trunc i64 %560 to i32
  %562 = and i64 %560, 4294967295
  store i64 %562, i64* %98, align 8, !tbaa !2428
  %563 = shl i64 %560, 32
  %564 = ashr exact i64 %563, 32
  %565 = icmp ne i64 %564, %560
  %566 = zext i1 %565 to i8
  store i8 %566, i8* %20, align 1, !tbaa !2432
  %567 = and i32 %561, 255
  %568 = tail call i32 @llvm.ctpop.i32(i32 %567) #8
  %569 = trunc i32 %568 to i8
  %570 = and i8 %569, 1
  %571 = xor i8 %570, 1
  store i8 %571, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2447
  store i8 0, i8* %35, align 1, !tbaa !2448
  %572 = lshr i32 %561, 31
  %573 = trunc i32 %572 to i8
  store i8 %573, i8* %38, align 1, !tbaa !2449
  store i8 %566, i8* %44, align 1, !tbaa !2450
  %574 = trunc i64 %560 to i32
  %575 = add i64 %548, -48
  %576 = add i64 %547, 19
  store i64 %576, i64* %PC, align 8
  %577 = inttoptr i64 %575 to i32*
  %578 = load i32, i32* %577, align 4
  %579 = add i32 %578, %574
  %580 = zext i32 %579 to i64
  store i64 %580, i64* %98, align 8, !tbaa !2428
  %581 = icmp ult i32 %579, %574
  %582 = icmp ult i32 %579, %578
  %583 = or i1 %581, %582
  %584 = zext i1 %583 to i8
  store i8 %584, i8* %20, align 1, !tbaa !2432
  %585 = and i32 %579, 255
  %586 = tail call i32 @llvm.ctpop.i32(i32 %585) #8
  %587 = trunc i32 %586 to i8
  %588 = and i8 %587, 1
  %589 = xor i8 %588, 1
  store i8 %589, i8* %27, align 1, !tbaa !2446
  %590 = xor i32 %578, %574
  %591 = xor i32 %590, %579
  %592 = lshr i32 %591, 4
  %593 = trunc i32 %592 to i8
  %594 = and i8 %593, 1
  store i8 %594, i8* %32, align 1, !tbaa !2447
  %595 = icmp eq i32 %579, 0
  %596 = zext i1 %595 to i8
  store i8 %596, i8* %35, align 1, !tbaa !2448
  %597 = lshr i32 %579, 31
  %598 = trunc i32 %597 to i8
  store i8 %598, i8* %38, align 1, !tbaa !2449
  %599 = lshr i32 %574, 31
  %600 = lshr i32 %578, 31
  %601 = xor i32 %597, %599
  %602 = xor i32 %597, %600
  %603 = add nuw nsw i32 %601, %602
  %604 = icmp eq i32 %603, 2
  %605 = zext i1 %604 to i8
  store i8 %605, i8* %44, align 1, !tbaa !2450
  %606 = add i64 %548, -80
  %607 = load i32, i32* %EAX, align 4
  %608 = add i64 %547, 22
  store i64 %608, i64* %PC, align 8
  %609 = inttoptr i64 %606 to i32*
  store i32 %607, i32* %609, align 4
  %610 = load i32, i32* %R9D, align 4
  %611 = zext i32 %610 to i64
  %612 = load i64, i64* %PC, align 8
  store i64 %611, i64* %RAX, align 8, !tbaa !2428
  %613 = sext i32 %610 to i64
  %614 = lshr i64 %613, 32
  store i64 %614, i64* %99, align 8, !tbaa !2428
  %615 = load i32, i32* %R8D, align 4
  %616 = add i64 %612, 7
  store i64 %616, i64* %PC, align 8
  %617 = zext i32 %610 to i64
  %618 = sext i32 %615 to i64
  %619 = shl nuw i64 %614, 32
  %620 = or i64 %619, %617
  %621 = sdiv i64 %620, %618
  %622 = shl i64 %621, 32
  %623 = ashr exact i64 %622, 32
  %624 = icmp eq i64 %621, %623
  br i1 %624, label %627, label %625

; <label>:625:                                    ; preds = %block_402c4e
  %626 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %616, %struct.Memory* %546) #9
  %.pre3 = load i32, i32* %EDX, align 4
  %.pre4 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:627:                                    ; preds = %block_402c4e
  %628 = srem i64 %620, %618
  %629 = and i64 %621, 4294967295
  store i64 %629, i64* %100, align 8, !tbaa !2428
  %630 = and i64 %628, 4294967295
  store i64 %630, i64* %101, align 8, !tbaa !2428
  store i8 0, i8* %20, align 1, !tbaa !2432
  store i8 0, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2447
  store i8 0, i8* %35, align 1, !tbaa !2448
  store i8 0, i8* %38, align 1, !tbaa !2449
  store i8 0, i8* %44, align 1, !tbaa !2450
  %631 = trunc i64 %628 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %627, %625
  %632 = phi i64 [ %.pre4, %625 ], [ %616, %627 ]
  %633 = phi i32 [ %.pre3, %625 ], [ %631, %627 ]
  %634 = phi %struct.Memory* [ %626, %625 ], [ %546, %627 ]
  store i8 0, i8* %20, align 1, !tbaa !2432
  %635 = and i32 %633, 255
  %636 = tail call i32 @llvm.ctpop.i32(i32 %635) #8
  %637 = trunc i32 %636 to i8
  %638 = and i8 %637, 1
  %639 = xor i8 %638, 1
  store i8 %639, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2447
  %640 = icmp eq i32 %633, 0
  %641 = zext i1 %640 to i8
  store i8 %641, i8* %35, align 1, !tbaa !2448
  %642 = lshr i32 %633, 31
  %643 = trunc i32 %642 to i8
  store i8 %643, i8* %38, align 1, !tbaa !2449
  store i8 0, i8* %44, align 1, !tbaa !2450
  %.v10 = select i1 %640, i64 9, i64 37
  %644 = add i64 %632, %.v10
  store i64 %644, i64* %94, align 8, !tbaa !2428
  br i1 %640, label %block_402d85, label %block_402da1

block_402c28:                                     ; preds = %block_402c1c
  %645 = add i64 %106, -48
  %646 = add i64 %142, 7
  store i64 %646, i64* %PC, align 8
  %647 = inttoptr i64 %645 to i32*
  store i32 0, i32* %647, align 4
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_402c2f

block_402c2f:                                     ; preds = %block_402c28, %block_402db4
  %648 = phi i64 [ %.pre1, %block_402c28 ], [ %173, %block_402db4 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_402c28 ], [ %MEMORY.2, %block_402db4 ]
  %649 = load i64, i64* %RBP, align 8
  %650 = add i64 %649, -48
  %651 = add i64 %648, 3
  store i64 %651, i64* %PC, align 8
  %652 = inttoptr i64 %650 to i32*
  %653 = load i32, i32* %652, align 4
  %654 = zext i32 %653 to i64
  store i64 %654, i64* %RAX, align 8, !tbaa !2428
  %655 = add i64 %649, -12
  %656 = add i64 %648, 6
  store i64 %656, i64* %PC, align 8
  %657 = inttoptr i64 %655 to i32*
  %658 = load i32, i32* %657, align 4
  %659 = sub i32 %653, %658
  %660 = icmp ult i32 %653, %658
  %661 = zext i1 %660 to i8
  store i8 %661, i8* %20, align 1, !tbaa !2432
  %662 = and i32 %659, 255
  %663 = tail call i32 @llvm.ctpop.i32(i32 %662) #8
  %664 = trunc i32 %663 to i8
  %665 = and i8 %664, 1
  %666 = xor i8 %665, 1
  store i8 %666, i8* %27, align 1, !tbaa !2446
  %667 = xor i32 %658, %653
  %668 = xor i32 %667, %659
  %669 = lshr i32 %668, 4
  %670 = trunc i32 %669 to i8
  %671 = and i8 %670, 1
  store i8 %671, i8* %32, align 1, !tbaa !2447
  %672 = icmp eq i32 %659, 0
  %673 = zext i1 %672 to i8
  store i8 %673, i8* %35, align 1, !tbaa !2448
  %674 = lshr i32 %659, 31
  %675 = trunc i32 %674 to i8
  store i8 %675, i8* %38, align 1, !tbaa !2449
  %676 = lshr i32 %653, 31
  %677 = lshr i32 %658, 31
  %678 = xor i32 %677, %676
  %679 = xor i32 %674, %676
  %680 = add nuw nsw i32 %679, %678
  %681 = icmp eq i32 %680, 2
  %682 = zext i1 %681 to i8
  store i8 %682, i8* %44, align 1, !tbaa !2450
  %683 = icmp ne i8 %675, 0
  %684 = xor i1 %683, %681
  %.demorgan6 = or i1 %672, %684
  %.v7 = select i1 %.demorgan6, i64 12, i64 408
  %685 = add i64 %648, %.v7
  store i64 %685, i64* %94, align 8, !tbaa !2428
  br i1 %.demorgan6, label %block_402c3b, label %block_402dc7

block_402dc7:                                     ; preds = %block_402c2f
  %686 = add i64 %649, -44
  %687 = add i64 %685, 8
  store i64 %687, i64* %PC, align 8
  %688 = inttoptr i64 %686 to i32*
  %689 = load i32, i32* %688, align 4
  %690 = add i32 %689, 1
  %691 = zext i32 %690 to i64
  store i64 %691, i64* %RAX, align 8, !tbaa !2428
  %692 = icmp eq i32 %689, -1
  %693 = icmp eq i32 %690, 0
  %694 = or i1 %692, %693
  %695 = zext i1 %694 to i8
  store i8 %695, i8* %20, align 1, !tbaa !2432
  %696 = and i32 %690, 255
  %697 = tail call i32 @llvm.ctpop.i32(i32 %696) #8
  %698 = trunc i32 %697 to i8
  %699 = and i8 %698, 1
  %700 = xor i8 %699, 1
  store i8 %700, i8* %27, align 1, !tbaa !2446
  %701 = xor i32 %689, %690
  %702 = lshr i32 %701, 4
  %703 = trunc i32 %702 to i8
  %704 = and i8 %703, 1
  store i8 %704, i8* %32, align 1, !tbaa !2447
  %705 = icmp eq i32 %690, 0
  %706 = zext i1 %705 to i8
  store i8 %706, i8* %35, align 1, !tbaa !2448
  %707 = lshr i32 %690, 31
  %708 = trunc i32 %707 to i8
  store i8 %708, i8* %38, align 1, !tbaa !2449
  %709 = lshr i32 %689, 31
  %710 = xor i32 %707, %709
  %711 = add nuw nsw i32 %710, %707
  %712 = icmp eq i32 %711, 2
  %713 = zext i1 %712 to i8
  store i8 %713, i8* %44, align 1, !tbaa !2450
  %714 = add i64 %685, 14
  store i64 %714, i64* %PC, align 8
  store i32 %690, i32* %688, align 4
  %715 = load i64, i64* %PC, align 8
  %716 = add i64 %715, -441
  store i64 %716, i64* %94, align 8, !tbaa !2428
  br label %block_402c1c

block_402dda:                                     ; preds = %block_402c1c
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 117), i64* %RSI, align 8, !tbaa !2428
  %717 = load i64, i64* @stderr, align 32
  store i64 %717, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2454
  %718 = add i64 %142, -10330
  %719 = add i64 %142, 25
  %720 = load i64, i64* %12, align 8, !tbaa !2428
  %721 = add i64 %720, -8
  %722 = inttoptr i64 %721 to i64*
  store i64 %719, i64* %722, align 8
  store i64 %721, i64* %12, align 8, !tbaa !2428
  store i64 %718, i64* %94, align 8, !tbaa !2428
  %723 = tail call fastcc %struct.Memory* @ext_6040f8_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.0)
  %724 = load i64, i64* %RBP, align 8
  %725 = add i64 %724, -88
  %726 = load i32, i32* %EAX, align 4
  %727 = load i64, i64* %PC, align 8
  %728 = add i64 %727, 3
  store i64 %728, i64* %PC, align 8
  %729 = inttoptr i64 %725 to i32*
  store i32 %726, i32* %729, align 4
  %730 = load i64, i64* %RSP, align 8
  %731 = load i64, i64* %PC, align 8
  %732 = add i64 %730, 96
  store i64 %732, i64* %RSP, align 8, !tbaa !2428
  %733 = icmp ugt i64 %730, -97
  %734 = zext i1 %733 to i8
  store i8 %734, i8* %20, align 1, !tbaa !2432
  %735 = trunc i64 %732 to i32
  %736 = and i32 %735, 255
  %737 = tail call i32 @llvm.ctpop.i32(i32 %736) #8
  %738 = trunc i32 %737 to i8
  %739 = and i8 %738, 1
  %740 = xor i8 %739, 1
  store i8 %740, i8* %27, align 1, !tbaa !2446
  %741 = xor i64 %730, %732
  %742 = lshr i64 %741, 4
  %743 = trunc i64 %742 to i8
  %744 = and i8 %743, 1
  store i8 %744, i8* %32, align 1, !tbaa !2447
  %745 = icmp eq i64 %732, 0
  %746 = zext i1 %745 to i8
  store i8 %746, i8* %35, align 1, !tbaa !2448
  %747 = lshr i64 %732, 63
  %748 = trunc i64 %747 to i8
  store i8 %748, i8* %38, align 1, !tbaa !2449
  %749 = lshr i64 %730, 63
  %750 = xor i64 %747, %749
  %751 = add nuw nsw i64 %750, %747
  %752 = icmp eq i64 %751, 2
  %753 = zext i1 %752 to i8
  store i8 %753, i8* %44, align 1, !tbaa !2450
  %754 = add i64 %731, 5
  store i64 %754, i64* %PC, align 8
  %755 = add i64 %730, 104
  %756 = inttoptr i64 %732 to i64*
  %757 = load i64, i64* %756, align 8
  store i64 %757, i64* %RBP, align 8, !tbaa !2428
  store i64 %755, i64* %12, align 8, !tbaa !2428
  %758 = add i64 %731, 6
  store i64 %758, i64* %PC, align 8
  %759 = inttoptr i64 %755 to i64*
  %760 = load i64, i64* %759, align 8
  store i64 %760, i64* %94, align 8, !tbaa !2428
  %761 = add i64 %730, 112
  store i64 %761, i64* %12, align 8, !tbaa !2428
  ret %struct.Memory* %723

block_402d85:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 117), i64* %RSI, align 8, !tbaa !2428
  %762 = load i64, i64* @stderr, align 32
  store i64 %762, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2454
  %763 = add i64 %644, -10245
  %764 = add i64 %644, 25
  %765 = load i64, i64* %12, align 8, !tbaa !2428
  %766 = add i64 %765, -8
  %767 = inttoptr i64 %766 to i64*
  store i64 %764, i64* %767, align 8
  store i64 %766, i64* %12, align 8, !tbaa !2428
  store i64 %763, i64* %94, align 8, !tbaa !2428
  %768 = tail call fastcc %struct.Memory* @ext_6040f8_fprintf(%struct.State* nonnull %0, %struct.Memory* %634)
  %769 = load i64, i64* %RBP, align 8
  %770 = add i64 %769, -84
  %771 = load i32, i32* %EAX, align 4
  %772 = load i64, i64* %PC, align 8
  %773 = add i64 %772, 3
  store i64 %773, i64* %PC, align 8
  %774 = inttoptr i64 %770 to i32*
  store i32 %771, i32* %774, align 4
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_402da1

block_402c42:                                     ; preds = %block_402da1, %block_402c3b
  %775 = phi i64 [ %.pre2, %block_402c3b ], [ %845, %block_402da1 ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_402c3b ], [ %MEMORY.3, %block_402da1 ]
  %776 = load i64, i64* %RBP, align 8
  %777 = add i64 %776, -52
  %778 = add i64 %775, 3
  store i64 %778, i64* %PC, align 8
  %779 = inttoptr i64 %777 to i32*
  %780 = load i32, i32* %779, align 4
  %781 = zext i32 %780 to i64
  store i64 %781, i64* %RAX, align 8, !tbaa !2428
  %782 = add i64 %776, -8
  %783 = add i64 %775, 6
  store i64 %783, i64* %PC, align 8
  %784 = inttoptr i64 %782 to i32*
  %785 = load i32, i32* %784, align 4
  %786 = sub i32 %780, %785
  %787 = icmp ult i32 %780, %785
  %788 = zext i1 %787 to i8
  store i8 %788, i8* %20, align 1, !tbaa !2432
  %789 = and i32 %786, 255
  %790 = tail call i32 @llvm.ctpop.i32(i32 %789) #8
  %791 = trunc i32 %790 to i8
  %792 = and i8 %791, 1
  %793 = xor i8 %792, 1
  store i8 %793, i8* %27, align 1, !tbaa !2446
  %794 = xor i32 %785, %780
  %795 = xor i32 %794, %786
  %796 = lshr i32 %795, 4
  %797 = trunc i32 %796 to i8
  %798 = and i8 %797, 1
  store i8 %798, i8* %32, align 1, !tbaa !2447
  %799 = icmp eq i32 %786, 0
  %800 = zext i1 %799 to i8
  store i8 %800, i8* %35, align 1, !tbaa !2448
  %801 = lshr i32 %786, 31
  %802 = trunc i32 %801 to i8
  store i8 %802, i8* %38, align 1, !tbaa !2449
  %803 = lshr i32 %780, 31
  %804 = lshr i32 %785, 31
  %805 = xor i32 %804, %803
  %806 = xor i32 %801, %803
  %807 = add nuw nsw i32 %806, %805
  %808 = icmp eq i32 %807, 2
  %809 = zext i1 %808 to i8
  store i8 %809, i8* %44, align 1, !tbaa !2450
  %810 = icmp ne i8 %802, 0
  %811 = xor i1 %810, %808
  %.demorgan8 = or i1 %799, %811
  %.v9 = select i1 %.demorgan8, i64 12, i64 370
  %812 = add i64 %775, %.v9
  store i64 %812, i64* %94, align 8, !tbaa !2428
  br i1 %.demorgan8, label %block_402c4e, label %block_402db4

block_402da1:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_402d85
  %813 = phi i64 [ %644, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %.pre5, %block_402d85 ]
  %MEMORY.3 = phi %struct.Memory* [ %634, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %768, %block_402d85 ]
  %814 = load i64, i64* %RBP, align 8
  %815 = add i64 %814, -52
  %816 = add i64 %813, 8
  store i64 %816, i64* %PC, align 8
  %817 = inttoptr i64 %815 to i32*
  %818 = load i32, i32* %817, align 4
  %819 = add i32 %818, 1
  %820 = zext i32 %819 to i64
  store i64 %820, i64* %RAX, align 8, !tbaa !2428
  %821 = icmp eq i32 %818, -1
  %822 = icmp eq i32 %819, 0
  %823 = or i1 %821, %822
  %824 = zext i1 %823 to i8
  store i8 %824, i8* %20, align 1, !tbaa !2432
  %825 = and i32 %819, 255
  %826 = tail call i32 @llvm.ctpop.i32(i32 %825) #8
  %827 = trunc i32 %826 to i8
  %828 = and i8 %827, 1
  %829 = xor i8 %828, 1
  store i8 %829, i8* %27, align 1, !tbaa !2446
  %830 = xor i32 %818, %819
  %831 = lshr i32 %830, 4
  %832 = trunc i32 %831 to i8
  %833 = and i8 %832, 1
  store i8 %833, i8* %32, align 1, !tbaa !2447
  %834 = icmp eq i32 %819, 0
  %835 = zext i1 %834 to i8
  store i8 %835, i8* %35, align 1, !tbaa !2448
  %836 = lshr i32 %819, 31
  %837 = trunc i32 %836 to i8
  store i8 %837, i8* %38, align 1, !tbaa !2449
  %838 = lshr i32 %818, 31
  %839 = xor i32 %836, %838
  %840 = add nuw nsw i32 %839, %836
  %841 = icmp eq i32 %840, 2
  %842 = zext i1 %841 to i8
  store i8 %842, i8* %44, align 1, !tbaa !2450
  %843 = add i64 %813, 14
  store i64 %843, i64* %PC, align 8
  store i32 %819, i32* %817, align 4
  %844 = load i64, i64* %PC, align 8
  %845 = add i64 %844, -365
  store i64 %845, i64* %94, align 8, !tbaa !2428
  br label %block_402c42
}

; Function Attrs: noinline
define %struct.Memory* @sub_400720_polybench_prepare_instruments(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400720:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, -129
  %11 = add i64 %9, 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %5, align 8, !tbaa !2428
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10, i64* %14, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_4006a0_polybench_flush_cache_renamed_(%struct.State* nonnull %0, i64 %10, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %14, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define %struct.Memory* @sub_400520__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400520:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  store i64 %4, i64* %RSP, align 8, !tbaa !2428
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_603ff0__got_type* @seg_603ff0__got to i64), i64 8) to i64*), align 8
  store i64 %11, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %5, align 1, !tbaa !2432
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #8
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %6, align 1, !tbaa !2446
  %18 = icmp eq i64 %11, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %8, align 1, !tbaa !2448
  %20 = lshr i64 %11, 63
  %21 = trunc i64 %20 to i8
  store i8 %21, i8* %9, align 1, !tbaa !2449
  store i8 0, i8* %10, align 1, !tbaa !2450
  store i8 0, i8* %7, align 1, !tbaa !2447
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %.v = select i1 %18, i64 18, i64 16
  %23 = add i64 %.v, %1
  store i64 %23, i64* %22, align 8, !tbaa !2428
  br i1 %18, label %block_400520.block_400532_crit_edge, label %block_400530

block_400520.block_400532_crit_edge:              ; preds = %block_400520
  %.pre2 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  br label %block_400532

block_400530:                                     ; preds = %block_400520
  %24 = add i64 %23, 2
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %26 = add i64 %3, -16
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27, align 8
  store i64 %26, i64* %25, align 8, !tbaa !2428
  store i64 %11, i64* %22, align 8, !tbaa !2428
  %28 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %.pre = load i64, i64* %RSP, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_400532

block_400532:                                     ; preds = %block_400520.block_400532_crit_edge, %block_400530
  %.pre-phi = phi i64* [ %.pre2, %block_400520.block_400532_crit_edge ], [ %25, %block_400530 ]
  %29 = phi i64 [ %23, %block_400520.block_400532_crit_edge ], [ %.pre1, %block_400530 ]
  %30 = phi i64 [ %4, %block_400520.block_400532_crit_edge ], [ %.pre, %block_400530 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400520.block_400532_crit_edge ], [ %28, %block_400530 ]
  %31 = add i64 %30, 8
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ugt i64 %30, -9
  %33 = zext i1 %32 to i8
  store i8 %33, i8* %5, align 1, !tbaa !2432
  %34 = trunc i64 %31 to i32
  %35 = and i32 %34, 255
  %36 = tail call i32 @llvm.ctpop.i32(i32 %35) #8
  %37 = trunc i32 %36 to i8
  %38 = and i8 %37, 1
  %39 = xor i8 %38, 1
  store i8 %39, i8* %6, align 1, !tbaa !2446
  %40 = xor i64 %30, %31
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  store i8 %43, i8* %7, align 1, !tbaa !2447
  %44 = icmp eq i64 %31, 0
  %45 = zext i1 %44 to i8
  store i8 %45, i8* %8, align 1, !tbaa !2448
  %46 = lshr i64 %31, 63
  %47 = trunc i64 %46 to i8
  store i8 %47, i8* %9, align 1, !tbaa !2449
  %48 = lshr i64 %30, 63
  %49 = xor i64 %46, %48
  %50 = add nuw nsw i64 %49, %46
  %51 = icmp eq i64 %50, 2
  %52 = zext i1 %51 to i8
  store i8 %52, i8* %10, align 1, !tbaa !2450
  %53 = add i64 %29, 5
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %31 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %22, align 8, !tbaa !2428
  %56 = add i64 %30, 16
  store i64 %56, i64* %.pre-phi, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4013d0_kernel_fdtd_apml(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4013d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %8, i64* %13, align 8
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = load i64, i64* %R15, align 8
  %16 = add i64 %14, 5
  store i64 %16, i64* %PC, align 8
  %17 = add i64 %11, -16
  %18 = inttoptr i64 %17 to i64*
  store i64 %15, i64* %18, align 8
  %19 = load i64, i64* %R14, align 8
  %20 = load i64, i64* %PC, align 8
  %21 = add i64 %20, 2
  store i64 %21, i64* %PC, align 8
  %22 = add i64 %11, -24
  %23 = inttoptr i64 %22 to i64*
  store i64 %19, i64* %23, align 8
  %24 = load i64, i64* %R13, align 8
  %25 = load i64, i64* %PC, align 8
  %26 = add i64 %25, 2
  store i64 %26, i64* %PC, align 8
  %27 = add i64 %11, -32
  %28 = inttoptr i64 %27 to i64*
  store i64 %24, i64* %28, align 8
  %29 = load i64, i64* %R12, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 2
  store i64 %31, i64* %PC, align 8
  %32 = add i64 %11, -40
  %33 = inttoptr i64 %32 to i64*
  store i64 %29, i64* %33, align 8
  %34 = load i64, i64* %RBX, align 8
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = add i64 %11, -48
  %38 = inttoptr i64 %37 to i64*
  store i64 %34, i64* %38, align 8
  %39 = load i64, i64* %PC, align 8
  %40 = add i64 %11, -80
  store i64 %40, i64* %RSP, align 8, !tbaa !2428
  %41 = icmp ult i64 %37, 32
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %42, i8* %43, align 1, !tbaa !2432
  %44 = trunc i64 %40 to i32
  %45 = and i32 %44, 255
  %46 = tail call i32 @llvm.ctpop.i32(i32 %45) #8
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = xor i64 %37, %40
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %40, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %40, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %37, 63
  %63 = xor i64 %59, %62
  %64 = add nuw nsw i64 %63, %62
  %65 = icmp eq i64 %64, 2
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %66, i8* %67, align 1, !tbaa !2450
  %68 = load i64, i64* %RBP, align 8
  %69 = add i64 %68, 96
  %70 = add i64 %39, 8
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %RAX, align 8, !tbaa !2428
  %73 = add i64 %68, 88
  %74 = add i64 %39, 12
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %R10, align 8, !tbaa !2428
  %77 = add i64 %68, 80
  %78 = add i64 %39, 16
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %R11, align 8, !tbaa !2428
  %81 = add i64 %68, 72
  %82 = add i64 %39, 20
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %RBX, align 8, !tbaa !2428
  %85 = add i64 %68, 64
  %86 = add i64 %39, 24
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %R14, align 8, !tbaa !2428
  %89 = add i64 %68, 56
  %90 = add i64 %39, 28
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %89 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %R15, align 8, !tbaa !2428
  %93 = add i64 %68, 48
  %94 = add i64 %39, 32
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %R12, align 8, !tbaa !2428
  %97 = add i64 %68, 40
  %98 = add i64 %39, 36
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %R13, align 8, !tbaa !2428
  %101 = add i64 %68, -120
  %102 = add i64 %39, 40
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %101 to i64*
  store i64 %72, i64* %103, align 8
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, 32
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = add i64 %104, -128
  %111 = add i64 %106, 8
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  store i64 %109, i64* %112, align 8
  %113 = load i64, i64* %RBP, align 8
  %114 = add i64 %113, 24
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, 4
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %114 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %RAX, align 8, !tbaa !2428
  %119 = add i64 %113, -136
  %120 = add i64 %115, 11
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %119 to i64*
  store i64 %118, i64* %121, align 8
  %122 = load i64, i64* %RBP, align 8
  %123 = add i64 %122, 16
  %124 = load i64, i64* %PC, align 8
  %125 = add i64 %124, 4
  store i64 %125, i64* %PC, align 8
  %126 = inttoptr i64 %123 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %RAX, align 8, !tbaa !2428
  %128 = add i64 %122, -44
  %129 = load i32, i32* %EDI, align 4
  %130 = add i64 %124, 7
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %128 to i32*
  store i32 %129, i32* %131, align 4
  %132 = load i64, i64* %RBP, align 8
  %133 = add i64 %132, -48
  %134 = load i32, i32* %ESI, align 4
  %135 = load i64, i64* %PC, align 8
  %136 = add i64 %135, 3
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %133 to i32*
  store i32 %134, i32* %137, align 4
  %138 = load i64, i64* %RBP, align 8
  %139 = add i64 %138, -52
  %140 = load i32, i32* %EDX, align 4
  %141 = load i64, i64* %PC, align 8
  %142 = add i64 %141, 3
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %139 to i32*
  store i32 %140, i32* %143, align 4
  %144 = load i64, i64* %RBP, align 8
  %145 = add i64 %144, -64
  %146 = load i64, i64* %PC, align 8
  %147 = add i64 %146, 5
  store i64 %147, i64* %PC, align 8
  %148 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %149 = load i64, i64* %148, align 1
  %150 = inttoptr i64 %145 to i64*
  store i64 %149, i64* %150, align 8
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -72
  %153 = load i64, i64* %PC, align 8
  %154 = add i64 %153, 5
  store i64 %154, i64* %PC, align 8
  %155 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %156 = load i64, i64* %155, align 1
  %157 = inttoptr i64 %152 to i64*
  store i64 %156, i64* %157, align 8
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -80
  %160 = load i64, i64* %RCX, align 8
  %161 = load i64, i64* %PC, align 8
  %162 = add i64 %161, 4
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %159 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -88
  %166 = load i64, i64* %R8, align 8
  %167 = load i64, i64* %PC, align 8
  %168 = add i64 %167, 4
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %165 to i64*
  store i64 %166, i64* %169, align 8
  %170 = load i64, i64* %RBP, align 8
  %171 = add i64 %170, -96
  %172 = load i64, i64* %R9, align 8
  %173 = load i64, i64* %PC, align 8
  %174 = add i64 %173, 4
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %171 to i64*
  store i64 %172, i64* %175, align 8
  %176 = load i64, i64* %RBP, align 8
  %177 = add i64 %176, -100
  %178 = load i64, i64* %PC, align 8
  %179 = add i64 %178, 7
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %177 to i32*
  store i32 0, i32* %180, align 4
  %181 = load i64, i64* %RBP, align 8
  %182 = add i64 %181, -144
  %183 = load i64, i64* %R13, align 8
  %184 = load i64, i64* %PC, align 8
  %185 = add i64 %184, 7
  store i64 %185, i64* %PC, align 8
  %186 = inttoptr i64 %182 to i64*
  store i64 %183, i64* %186, align 8
  %187 = load i64, i64* %RBP, align 8
  %188 = add i64 %187, -152
  %189 = load i64, i64* %RAX, align 8
  %190 = load i64, i64* %PC, align 8
  %191 = add i64 %190, 7
  store i64 %191, i64* %PC, align 8
  %192 = inttoptr i64 %188 to i64*
  store i64 %189, i64* %192, align 8
  %193 = load i64, i64* %RBP, align 8
  %194 = add i64 %193, -160
  %195 = load i64, i64* %R10, align 8
  %196 = load i64, i64* %PC, align 8
  %197 = add i64 %196, 7
  store i64 %197, i64* %PC, align 8
  %198 = inttoptr i64 %194 to i64*
  store i64 %195, i64* %198, align 8
  %199 = load i64, i64* %RBP, align 8
  %200 = add i64 %199, -168
  %201 = load i64, i64* %R11, align 8
  %202 = load i64, i64* %PC, align 8
  %203 = add i64 %202, 7
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %200 to i64*
  store i64 %201, i64* %204, align 8
  %205 = load i64, i64* %RBP, align 8
  %206 = add i64 %205, -176
  %207 = load i64, i64* %RBX, align 8
  %208 = load i64, i64* %PC, align 8
  %209 = add i64 %208, 7
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %206 to i64*
  store i64 %207, i64* %210, align 8
  %211 = load i64, i64* %RBP, align 8
  %212 = add i64 %211, -184
  %213 = load i64, i64* %R14, align 8
  %214 = load i64, i64* %PC, align 8
  %215 = add i64 %214, 7
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %212 to i64*
  store i64 %213, i64* %216, align 8
  %217 = load i64, i64* %RBP, align 8
  %218 = add i64 %217, -192
  %219 = load i64, i64* %R15, align 8
  %220 = load i64, i64* %PC, align 8
  %221 = add i64 %220, 7
  store i64 %221, i64* %PC, align 8
  %222 = inttoptr i64 %218 to i64*
  store i64 %219, i64* %222, align 8
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -200
  %225 = load i64, i64* %R12, align 8
  %226 = load i64, i64* %PC, align 8
  %227 = add i64 %226, 7
  store i64 %227, i64* %PC, align 8
  %228 = inttoptr i64 %224 to i64*
  store i64 %225, i64* %228, align 8
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %230 = bitcast [32 x %union.VectorReg]* %6 to double*
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %232 = bitcast i64* %231 to double*
  %233 = bitcast %union.VectorReg* %7 to double*
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %235 = bitcast i64* %234 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_40147a

block_401499:                                     ; preds = %block_40148d
  %236 = add i64 %329, -108
  %237 = add i64 %365, 7
  store i64 %237, i64* %PC, align 8
  %238 = inttoptr i64 %236 to i32*
  store i32 0, i32* %238, align 4
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_4014a0

block_40147a:                                     ; preds = %block_401ee5, %block_4013d0
  %239 = phi i64 [ %4736, %block_401ee5 ], [ %.pre, %block_4013d0 ]
  %240 = load i64, i64* %RBP, align 8
  %241 = add i64 %240, -100
  %242 = add i64 %239, 3
  store i64 %242, i64* %PC, align 8
  %243 = inttoptr i64 %241 to i32*
  %244 = load i32, i32* %243, align 4
  %245 = zext i32 %244 to i64
  store i64 %245, i64* %RAX, align 8, !tbaa !2428
  %246 = add i64 %240, -44
  %247 = add i64 %239, 6
  store i64 %247, i64* %PC, align 8
  %248 = inttoptr i64 %246 to i32*
  %249 = load i32, i32* %248, align 4
  %250 = sub i32 %244, %249
  %251 = icmp ult i32 %244, %249
  %252 = zext i1 %251 to i8
  store i8 %252, i8* %43, align 1, !tbaa !2432
  %253 = and i32 %250, 255
  %254 = tail call i32 @llvm.ctpop.i32(i32 %253) #8
  %255 = trunc i32 %254 to i8
  %256 = and i8 %255, 1
  %257 = xor i8 %256, 1
  store i8 %257, i8* %50, align 1, !tbaa !2446
  %258 = xor i32 %249, %244
  %259 = xor i32 %258, %250
  %260 = lshr i32 %259, 4
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  store i8 %262, i8* %55, align 1, !tbaa !2447
  %263 = icmp eq i32 %250, 0
  %264 = zext i1 %263 to i8
  store i8 %264, i8* %58, align 1, !tbaa !2448
  %265 = lshr i32 %250, 31
  %266 = trunc i32 %265 to i8
  store i8 %266, i8* %61, align 1, !tbaa !2449
  %267 = lshr i32 %244, 31
  %268 = lshr i32 %249, 31
  %269 = xor i32 %268, %267
  %270 = xor i32 %265, %267
  %271 = add nuw nsw i32 %270, %269
  %272 = icmp eq i32 %271, 2
  %273 = zext i1 %272 to i8
  store i8 %273, i8* %67, align 1, !tbaa !2450
  %274 = icmp ne i8 %266, 0
  %275 = xor i1 %274, %272
  %.v = select i1 %275, i64 12, i64 2686
  %276 = add i64 %239, %.v
  store i64 %276, i64* %229, align 8, !tbaa !2428
  br i1 %275, label %block_401486, label %block_401ef8

block_401ef8:                                     ; preds = %block_40147a
  %277 = load i64, i64* %RSP, align 8
  %278 = add i64 %277, 32
  store i64 %278, i64* %RSP, align 8, !tbaa !2428
  %279 = icmp ugt i64 %277, -33
  %280 = zext i1 %279 to i8
  store i8 %280, i8* %43, align 1, !tbaa !2432
  %281 = trunc i64 %278 to i32
  %282 = and i32 %281, 255
  %283 = tail call i32 @llvm.ctpop.i32(i32 %282) #8
  %284 = trunc i32 %283 to i8
  %285 = and i8 %284, 1
  %286 = xor i8 %285, 1
  store i8 %286, i8* %50, align 1, !tbaa !2446
  %287 = xor i64 %277, %278
  %288 = lshr i64 %287, 4
  %289 = trunc i64 %288 to i8
  %290 = and i8 %289, 1
  store i8 %290, i8* %55, align 1, !tbaa !2447
  %291 = icmp eq i64 %278, 0
  %292 = zext i1 %291 to i8
  store i8 %292, i8* %58, align 1, !tbaa !2448
  %293 = lshr i64 %278, 63
  %294 = trunc i64 %293 to i8
  store i8 %294, i8* %61, align 1, !tbaa !2449
  %295 = lshr i64 %277, 63
  %296 = xor i64 %293, %295
  %297 = add nuw nsw i64 %296, %293
  %298 = icmp eq i64 %297, 2
  %299 = zext i1 %298 to i8
  store i8 %299, i8* %67, align 1, !tbaa !2450
  %300 = add i64 %276, 5
  store i64 %300, i64* %PC, align 8
  %301 = add i64 %277, 40
  %302 = inttoptr i64 %278 to i64*
  %303 = load i64, i64* %302, align 8
  store i64 %303, i64* %RBX, align 8, !tbaa !2428
  store i64 %301, i64* %10, align 8, !tbaa !2428
  %304 = add i64 %276, 7
  store i64 %304, i64* %PC, align 8
  %305 = add i64 %277, 48
  %306 = inttoptr i64 %301 to i64*
  %307 = load i64, i64* %306, align 8
  store i64 %307, i64* %R12, align 8, !tbaa !2428
  store i64 %305, i64* %10, align 8, !tbaa !2428
  %308 = add i64 %276, 9
  store i64 %308, i64* %PC, align 8
  %309 = add i64 %277, 56
  %310 = inttoptr i64 %305 to i64*
  %311 = load i64, i64* %310, align 8
  store i64 %311, i64* %R13, align 8, !tbaa !2428
  store i64 %309, i64* %10, align 8, !tbaa !2428
  %312 = add i64 %276, 11
  store i64 %312, i64* %PC, align 8
  %313 = add i64 %277, 64
  %314 = inttoptr i64 %309 to i64*
  %315 = load i64, i64* %314, align 8
  store i64 %315, i64* %R14, align 8, !tbaa !2428
  store i64 %313, i64* %10, align 8, !tbaa !2428
  %316 = add i64 %276, 13
  store i64 %316, i64* %PC, align 8
  %317 = add i64 %277, 72
  %318 = inttoptr i64 %313 to i64*
  %319 = load i64, i64* %318, align 8
  store i64 %319, i64* %R15, align 8, !tbaa !2428
  store i64 %317, i64* %10, align 8, !tbaa !2428
  %320 = add i64 %276, 14
  store i64 %320, i64* %PC, align 8
  %321 = add i64 %277, 80
  %322 = inttoptr i64 %317 to i64*
  %323 = load i64, i64* %322, align 8
  store i64 %323, i64* %RBP, align 8, !tbaa !2428
  store i64 %321, i64* %10, align 8, !tbaa !2428
  %324 = add i64 %276, 15
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %321 to i64*
  %326 = load i64, i64* %325, align 8
  store i64 %326, i64* %229, align 8, !tbaa !2428
  %327 = add i64 %277, 88
  store i64 %327, i64* %10, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_40148d:                                     ; preds = %block_401486, %block_401c6b
  %328 = phi i64 [ %.pre2, %block_401486 ], [ %2514, %block_401c6b ]
  %329 = load i64, i64* %RBP, align 8
  %330 = add i64 %329, -104
  %331 = add i64 %328, 3
  store i64 %331, i64* %PC, align 8
  %332 = inttoptr i64 %330 to i32*
  %333 = load i32, i32* %332, align 4
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RAX, align 8, !tbaa !2428
  %335 = add i64 %329, -52
  %336 = add i64 %328, 6
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %335 to i32*
  %338 = load i32, i32* %337, align 4
  %339 = sub i32 %333, %338
  %340 = icmp ult i32 %333, %338
  %341 = zext i1 %340 to i8
  store i8 %341, i8* %43, align 1, !tbaa !2432
  %342 = and i32 %339, 255
  %343 = tail call i32 @llvm.ctpop.i32(i32 %342) #8
  %344 = trunc i32 %343 to i8
  %345 = and i8 %344, 1
  %346 = xor i8 %345, 1
  store i8 %346, i8* %50, align 1, !tbaa !2446
  %347 = xor i32 %338, %333
  %348 = xor i32 %347, %339
  %349 = lshr i32 %348, 4
  %350 = trunc i32 %349 to i8
  %351 = and i8 %350, 1
  store i8 %351, i8* %55, align 1, !tbaa !2447
  %352 = icmp eq i32 %339, 0
  %353 = zext i1 %352 to i8
  store i8 %353, i8* %58, align 1, !tbaa !2448
  %354 = lshr i32 %339, 31
  %355 = trunc i32 %354 to i8
  store i8 %355, i8* %61, align 1, !tbaa !2449
  %356 = lshr i32 %333, 31
  %357 = lshr i32 %338, 31
  %358 = xor i32 %357, %356
  %359 = xor i32 %354, %356
  %360 = add nuw nsw i32 %359, %358
  %361 = icmp eq i32 %360, 2
  %362 = zext i1 %361 to i8
  store i8 %362, i8* %67, align 1, !tbaa !2450
  %363 = icmp ne i8 %355, 0
  %364 = xor i1 %363, %361
  %.v5 = select i1 %364, i64 12, i64 2648
  %365 = add i64 %328, %.v5
  store i64 %365, i64* %229, align 8, !tbaa !2428
  br i1 %364, label %block_401499, label %block_401ee5

block_4019d2:                                     ; preds = %block_4019de, %block_40174c
  %366 = phi i64 [ %3590, %block_4019de ], [ %.pre4, %block_40174c ]
  %367 = load i64, i64* %RBP, align 8
  %368 = add i64 %367, -108
  %369 = add i64 %366, 3
  store i64 %369, i64* %PC, align 8
  %370 = inttoptr i64 %368 to i32*
  %371 = load i32, i32* %370, align 4
  %372 = zext i32 %371 to i64
  store i64 %372, i64* %RAX, align 8, !tbaa !2428
  %373 = add i64 %367, -48
  %374 = add i64 %366, 6
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %373 to i32*
  %376 = load i32, i32* %375, align 4
  %377 = sub i32 %371, %376
  %378 = icmp ult i32 %371, %376
  %379 = zext i1 %378 to i8
  store i8 %379, i8* %43, align 1, !tbaa !2432
  %380 = and i32 %377, 255
  %381 = tail call i32 @llvm.ctpop.i32(i32 %380) #8
  %382 = trunc i32 %381 to i8
  %383 = and i8 %382, 1
  %384 = xor i8 %383, 1
  store i8 %384, i8* %50, align 1, !tbaa !2446
  %385 = xor i32 %376, %371
  %386 = xor i32 %385, %377
  %387 = lshr i32 %386, 4
  %388 = trunc i32 %387 to i8
  %389 = and i8 %388, 1
  store i8 %389, i8* %55, align 1, !tbaa !2447
  %390 = icmp eq i32 %377, 0
  %391 = zext i1 %390 to i8
  store i8 %391, i8* %58, align 1, !tbaa !2448
  %392 = lshr i32 %377, 31
  %393 = trunc i32 %392 to i8
  store i8 %393, i8* %61, align 1, !tbaa !2449
  %394 = lshr i32 %371, 31
  %395 = lshr i32 %376, 31
  %396 = xor i32 %395, %394
  %397 = xor i32 %392, %394
  %398 = add nuw nsw i32 %397, %396
  %399 = icmp eq i32 %398, 2
  %400 = zext i1 %399 to i8
  store i8 %400, i8* %67, align 1, !tbaa !2450
  %401 = icmp ne i8 %393, 0
  %402 = xor i1 %401, %399
  %.v7 = select i1 %402, i64 12, i64 665
  %403 = add i64 %366, %.v7
  %404 = add i64 %367, 32
  %405 = add i64 %403, 4
  store i64 %405, i64* %PC, align 8
  %406 = inttoptr i64 %404 to i64*
  %407 = load i64, i64* %406, align 8
  store i64 %407, i64* %RAX, align 8, !tbaa !2428
  %408 = add i64 %367, -100
  %409 = add i64 %403, 8
  store i64 %409, i64* %PC, align 8
  %410 = inttoptr i64 %408 to i32*
  %411 = load i32, i32* %410, align 4
  %412 = sext i32 %411 to i64
  %413 = mul nsw i64 %412, 33800
  store i64 %413, i64* %RCX, align 8, !tbaa !2428
  %414 = lshr i64 %413, 63
  %415 = add i64 %413, %407
  store i64 %415, i64* %RAX, align 8, !tbaa !2428
  %416 = icmp ult i64 %415, %407
  %417 = icmp ult i64 %415, %413
  %418 = or i1 %416, %417
  %419 = zext i1 %418 to i8
  store i8 %419, i8* %43, align 1, !tbaa !2432
  %420 = trunc i64 %415 to i32
  %421 = and i32 %420, 255
  %422 = tail call i32 @llvm.ctpop.i32(i32 %421) #8
  %423 = trunc i32 %422 to i8
  %424 = and i8 %423, 1
  %425 = xor i8 %424, 1
  store i8 %425, i8* %50, align 1, !tbaa !2446
  %426 = xor i64 %413, %407
  %427 = xor i64 %426, %415
  %428 = lshr i64 %427, 4
  %429 = trunc i64 %428 to i8
  %430 = and i8 %429, 1
  store i8 %430, i8* %55, align 1, !tbaa !2447
  %431 = icmp eq i64 %415, 0
  %432 = zext i1 %431 to i8
  store i8 %432, i8* %58, align 1, !tbaa !2448
  %433 = lshr i64 %415, 63
  %434 = trunc i64 %433 to i8
  store i8 %434, i8* %61, align 1, !tbaa !2449
  %435 = lshr i64 %407, 63
  %436 = xor i64 %433, %435
  %437 = xor i64 %433, %414
  %438 = add nuw nsw i64 %436, %437
  %439 = icmp eq i64 %438, 2
  %440 = zext i1 %439 to i8
  store i8 %440, i8* %67, align 1, !tbaa !2450
  %441 = load i64, i64* %RBP, align 8
  %442 = add i64 %441, -52
  %443 = add i64 %403, 22
  store i64 %443, i64* %PC, align 8
  %444 = inttoptr i64 %442 to i32*
  %445 = load i32, i32* %444, align 4
  %446 = sext i32 %445 to i64
  %447 = mul nsw i64 %446, 520
  store i64 %447, i64* %RCX, align 8, !tbaa !2428
  %448 = lshr i64 %447, 63
  %449 = add i64 %403, 32
  store i64 %449, i64* %PC, align 8
  %450 = add i64 %447, %415
  store i64 %450, i64* %RAX, align 8, !tbaa !2428
  %451 = icmp ult i64 %450, %415
  %452 = icmp ult i64 %450, %447
  %453 = or i1 %451, %452
  %454 = zext i1 %453 to i8
  store i8 %454, i8* %43, align 1, !tbaa !2432
  %455 = trunc i64 %450 to i32
  %456 = and i32 %455, 255
  %457 = tail call i32 @llvm.ctpop.i32(i32 %456) #8
  %458 = trunc i32 %457 to i8
  %459 = and i8 %458, 1
  %460 = xor i8 %459, 1
  store i8 %460, i8* %50, align 1, !tbaa !2446
  %461 = xor i64 %447, %415
  %462 = xor i64 %461, %450
  %463 = lshr i64 %462, 4
  %464 = trunc i64 %463 to i8
  %465 = and i8 %464, 1
  store i8 %465, i8* %55, align 1, !tbaa !2447
  %466 = icmp eq i64 %450, 0
  %467 = zext i1 %466 to i8
  store i8 %467, i8* %58, align 1, !tbaa !2448
  %468 = lshr i64 %450, 63
  %469 = trunc i64 %468 to i8
  store i8 %469, i8* %61, align 1, !tbaa !2449
  %470 = xor i64 %468, %433
  %471 = xor i64 %468, %448
  %472 = add nuw nsw i64 %470, %471
  %473 = icmp eq i64 %472, 2
  %474 = zext i1 %473 to i8
  store i8 %474, i8* %67, align 1, !tbaa !2450
  br i1 %402, label %block_4019de, label %block_401c6b

block_40174c:                                     ; preds = %block_4014a0
  %475 = add i64 %4812, -48
  %476 = add i64 %4774, 36
  store i64 %476, i64* %PC, align 8
  %477 = inttoptr i64 %475 to i32*
  %478 = load i32, i32* %477, align 4
  %479 = sext i32 %478 to i64
  store i64 %479, i64* %RCX, align 8, !tbaa !2428
  %480 = shl nsw i64 %479, 3
  %481 = add i64 %480, %4821
  %482 = add i64 %4774, 41
  store i64 %482, i64* %PC, align 8
  %483 = inttoptr i64 %481 to i64*
  %484 = load i64, i64* %483, align 8
  %485 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %484, i64* %485, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %486 = add i64 %4812, 32
  %487 = add i64 %4774, 45
  store i64 %487, i64* %PC, align 8
  %488 = inttoptr i64 %486 to i64*
  %489 = load i64, i64* %488, align 8
  store i64 %489, i64* %RAX, align 8, !tbaa !2428
  %490 = add i64 %4812, -100
  %491 = add i64 %4774, 49
  store i64 %491, i64* %PC, align 8
  %492 = inttoptr i64 %490 to i32*
  %493 = load i32, i32* %492, align 4
  %494 = sext i32 %493 to i64
  %495 = mul nsw i64 %494, 33800
  store i64 %495, i64* %RCX, align 8, !tbaa !2428
  %496 = lshr i64 %495, 63
  %497 = add i64 %495, %489
  store i64 %497, i64* %RAX, align 8, !tbaa !2428
  %498 = icmp ult i64 %497, %489
  %499 = icmp ult i64 %497, %495
  %500 = or i1 %498, %499
  %501 = zext i1 %500 to i8
  store i8 %501, i8* %43, align 1, !tbaa !2432
  %502 = trunc i64 %497 to i32
  %503 = and i32 %502, 255
  %504 = tail call i32 @llvm.ctpop.i32(i32 %503) #8
  %505 = trunc i32 %504 to i8
  %506 = and i8 %505, 1
  %507 = xor i8 %506, 1
  store i8 %507, i8* %50, align 1, !tbaa !2446
  %508 = xor i64 %495, %489
  %509 = xor i64 %508, %497
  %510 = lshr i64 %509, 4
  %511 = trunc i64 %510 to i8
  %512 = and i8 %511, 1
  store i8 %512, i8* %55, align 1, !tbaa !2447
  %513 = icmp eq i64 %497, 0
  %514 = zext i1 %513 to i8
  store i8 %514, i8* %58, align 1, !tbaa !2448
  %515 = lshr i64 %497, 63
  %516 = trunc i64 %515 to i8
  store i8 %516, i8* %61, align 1, !tbaa !2449
  %517 = lshr i64 %489, 63
  %518 = xor i64 %515, %517
  %519 = xor i64 %515, %496
  %520 = add nuw nsw i64 %518, %519
  %521 = icmp eq i64 %520, 2
  %522 = zext i1 %521 to i8
  store i8 %522, i8* %67, align 1, !tbaa !2450
  %523 = add i64 %4774, 62
  store i64 %523, i64* %PC, align 8
  %524 = load i32, i32* %4815, align 4
  %525 = add i32 %524, 1
  %526 = zext i32 %525 to i64
  store i64 %526, i64* %RDX, align 8, !tbaa !2428
  %527 = sext i32 %525 to i64
  %528 = mul nsw i64 %527, 520
  store i64 %528, i64* %RCX, align 8, !tbaa !2428
  %529 = lshr i64 %528, 63
  %530 = load i64, i64* %RAX, align 8
  %531 = add i64 %528, %530
  store i64 %531, i64* %RAX, align 8, !tbaa !2428
  %532 = icmp ult i64 %531, %530
  %533 = icmp ult i64 %531, %528
  %534 = or i1 %532, %533
  %535 = zext i1 %534 to i8
  store i8 %535, i8* %43, align 1, !tbaa !2432
  %536 = trunc i64 %531 to i32
  %537 = and i32 %536, 255
  %538 = tail call i32 @llvm.ctpop.i32(i32 %537) #8
  %539 = trunc i32 %538 to i8
  %540 = and i8 %539, 1
  %541 = xor i8 %540, 1
  store i8 %541, i8* %50, align 1, !tbaa !2446
  %542 = xor i64 %528, %530
  %543 = xor i64 %542, %531
  %544 = lshr i64 %543, 4
  %545 = trunc i64 %544 to i8
  %546 = and i8 %545, 1
  store i8 %546, i8* %55, align 1, !tbaa !2447
  %547 = icmp eq i64 %531, 0
  %548 = zext i1 %547 to i8
  store i8 %548, i8* %58, align 1, !tbaa !2448
  %549 = lshr i64 %531, 63
  %550 = trunc i64 %549 to i8
  store i8 %550, i8* %61, align 1, !tbaa !2449
  %551 = lshr i64 %530, 63
  %552 = xor i64 %549, %551
  %553 = xor i64 %549, %529
  %554 = add nuw nsw i64 %552, %553
  %555 = icmp eq i64 %554, 2
  %556 = zext i1 %555 to i8
  store i8 %556, i8* %67, align 1, !tbaa !2450
  %557 = load i64, i64* %RBP, align 8
  %558 = add i64 %557, -48
  %559 = add i64 %4774, 82
  store i64 %559, i64* %PC, align 8
  %560 = inttoptr i64 %558 to i32*
  %561 = load i32, i32* %560, align 4
  %562 = sext i32 %561 to i64
  store i64 %562, i64* %RCX, align 8, !tbaa !2428
  %563 = shl nsw i64 %562, 3
  %564 = add i64 %563, %531
  %565 = add i64 %4774, 87
  store i64 %565, i64* %PC, align 8
  %566 = load double, double* %230, align 1
  %567 = inttoptr i64 %564 to double*
  %568 = load double, double* %567, align 8
  %569 = fsub double %566, %568
  store double %569, double* %230, align 1, !tbaa !2452
  %570 = add i64 %557, -88
  %571 = add i64 %4774, 91
  store i64 %571, i64* %PC, align 8
  %572 = inttoptr i64 %570 to i64*
  %573 = load i64, i64* %572, align 8
  store i64 %573, i64* %RAX, align 8, !tbaa !2428
  %574 = add i64 %557, -100
  %575 = add i64 %4774, 95
  store i64 %575, i64* %PC, align 8
  %576 = inttoptr i64 %574 to i32*
  %577 = load i32, i32* %576, align 4
  %578 = sext i32 %577 to i64
  %579 = mul nsw i64 %578, 520
  store i64 %579, i64* %RCX, align 8, !tbaa !2428
  %580 = lshr i64 %579, 63
  %581 = add i64 %579, %573
  store i64 %581, i64* %RAX, align 8, !tbaa !2428
  %582 = icmp ult i64 %581, %573
  %583 = icmp ult i64 %581, %579
  %584 = or i1 %582, %583
  %585 = zext i1 %584 to i8
  store i8 %585, i8* %43, align 1, !tbaa !2432
  %586 = trunc i64 %581 to i32
  %587 = and i32 %586, 255
  %588 = tail call i32 @llvm.ctpop.i32(i32 %587) #8
  %589 = trunc i32 %588 to i8
  %590 = and i8 %589, 1
  %591 = xor i8 %590, 1
  store i8 %591, i8* %50, align 1, !tbaa !2446
  %592 = xor i64 %579, %573
  %593 = xor i64 %592, %581
  %594 = lshr i64 %593, 4
  %595 = trunc i64 %594 to i8
  %596 = and i8 %595, 1
  store i8 %596, i8* %55, align 1, !tbaa !2447
  %597 = icmp eq i64 %581, 0
  %598 = zext i1 %597 to i8
  store i8 %598, i8* %58, align 1, !tbaa !2448
  %599 = lshr i64 %581, 63
  %600 = trunc i64 %599 to i8
  store i8 %600, i8* %61, align 1, !tbaa !2449
  %601 = lshr i64 %573, 63
  %602 = xor i64 %599, %601
  %603 = xor i64 %599, %580
  %604 = add nuw nsw i64 %602, %603
  %605 = icmp eq i64 %604, 2
  %606 = zext i1 %605 to i8
  store i8 %606, i8* %67, align 1, !tbaa !2450
  %607 = add i64 %557, -104
  %608 = add i64 %4774, 109
  store i64 %608, i64* %PC, align 8
  %609 = inttoptr i64 %607 to i32*
  %610 = load i32, i32* %609, align 4
  %611 = sext i32 %610 to i64
  store i64 %611, i64* %RCX, align 8, !tbaa !2428
  %612 = shl nsw i64 %611, 3
  %613 = add i64 %612, %581
  %614 = add i64 %4774, 114
  store i64 %614, i64* %PC, align 8
  %615 = inttoptr i64 %613 to double*
  %616 = load double, double* %615, align 8
  %617 = fadd double %569, %616
  store double %617, double* %230, align 1, !tbaa !2452
  %618 = load i64, i64* %RBP, align 8
  %619 = add i64 %618, 40
  %620 = add i64 %4774, 118
  store i64 %620, i64* %PC, align 8
  %621 = inttoptr i64 %619 to i64*
  %622 = load i64, i64* %621, align 8
  store i64 %622, i64* %RAX, align 8, !tbaa !2428
  %623 = add i64 %618, -100
  %624 = add i64 %4774, 122
  store i64 %624, i64* %PC, align 8
  %625 = inttoptr i64 %623 to i32*
  %626 = load i32, i32* %625, align 4
  %627 = sext i32 %626 to i64
  %628 = mul nsw i64 %627, 33800
  store i64 %628, i64* %RCX, align 8, !tbaa !2428
  %629 = lshr i64 %628, 63
  %630 = add i64 %628, %622
  store i64 %630, i64* %RAX, align 8, !tbaa !2428
  %631 = icmp ult i64 %630, %622
  %632 = icmp ult i64 %630, %628
  %633 = or i1 %631, %632
  %634 = zext i1 %633 to i8
  store i8 %634, i8* %43, align 1, !tbaa !2432
  %635 = trunc i64 %630 to i32
  %636 = and i32 %635, 255
  %637 = tail call i32 @llvm.ctpop.i32(i32 %636) #8
  %638 = trunc i32 %637 to i8
  %639 = and i8 %638, 1
  %640 = xor i8 %639, 1
  store i8 %640, i8* %50, align 1, !tbaa !2446
  %641 = xor i64 %628, %622
  %642 = xor i64 %641, %630
  %643 = lshr i64 %642, 4
  %644 = trunc i64 %643 to i8
  %645 = and i8 %644, 1
  store i8 %645, i8* %55, align 1, !tbaa !2447
  %646 = icmp eq i64 %630, 0
  %647 = zext i1 %646 to i8
  store i8 %647, i8* %58, align 1, !tbaa !2448
  %648 = lshr i64 %630, 63
  %649 = trunc i64 %648 to i8
  store i8 %649, i8* %61, align 1, !tbaa !2449
  %650 = lshr i64 %622, 63
  %651 = xor i64 %648, %650
  %652 = xor i64 %648, %629
  %653 = add nuw nsw i64 %651, %652
  %654 = icmp eq i64 %653, 2
  %655 = zext i1 %654 to i8
  store i8 %655, i8* %67, align 1, !tbaa !2450
  %656 = add i64 %618, -104
  %657 = add i64 %4774, 136
  store i64 %657, i64* %PC, align 8
  %658 = inttoptr i64 %656 to i32*
  %659 = load i32, i32* %658, align 4
  %660 = sext i32 %659 to i64
  %661 = mul nsw i64 %660, 520
  store i64 %661, i64* %RCX, align 8, !tbaa !2428
  %662 = lshr i64 %661, 63
  %663 = add i64 %661, %630
  store i64 %663, i64* %RAX, align 8, !tbaa !2428
  %664 = icmp ult i64 %663, %630
  %665 = icmp ult i64 %663, %661
  %666 = or i1 %664, %665
  %667 = zext i1 %666 to i8
  store i8 %667, i8* %43, align 1, !tbaa !2432
  %668 = trunc i64 %663 to i32
  %669 = and i32 %668, 255
  %670 = tail call i32 @llvm.ctpop.i32(i32 %669) #8
  %671 = trunc i32 %670 to i8
  %672 = and i8 %671, 1
  %673 = xor i8 %672, 1
  store i8 %673, i8* %50, align 1, !tbaa !2446
  %674 = xor i64 %661, %630
  %675 = xor i64 %674, %663
  %676 = lshr i64 %675, 4
  %677 = trunc i64 %676 to i8
  %678 = and i8 %677, 1
  store i8 %678, i8* %55, align 1, !tbaa !2447
  %679 = icmp eq i64 %663, 0
  %680 = zext i1 %679 to i8
  store i8 %680, i8* %58, align 1, !tbaa !2448
  %681 = lshr i64 %663, 63
  %682 = trunc i64 %681 to i8
  store i8 %682, i8* %61, align 1, !tbaa !2449
  %683 = xor i64 %681, %648
  %684 = xor i64 %681, %662
  %685 = add nuw nsw i64 %683, %684
  %686 = icmp eq i64 %685, 2
  %687 = zext i1 %686 to i8
  store i8 %687, i8* %67, align 1, !tbaa !2450
  %688 = load i64, i64* %RBP, align 8
  %689 = add i64 %688, -48
  %690 = add i64 %4774, 150
  store i64 %690, i64* %PC, align 8
  %691 = inttoptr i64 %689 to i32*
  %692 = load i32, i32* %691, align 4
  %693 = sext i32 %692 to i64
  store i64 %693, i64* %RCX, align 8, !tbaa !2428
  %694 = shl nsw i64 %693, 3
  %695 = add i64 %694, %663
  %696 = add i64 %4774, 155
  store i64 %696, i64* %PC, align 8
  %697 = load double, double* %230, align 1
  %698 = inttoptr i64 %695 to double*
  %699 = load double, double* %698, align 8
  %700 = fsub double %697, %699
  store double %700, double* %230, align 1, !tbaa !2452
  %701 = add i64 %688, -96
  %702 = add i64 %4774, 159
  store i64 %702, i64* %PC, align 8
  %703 = inttoptr i64 %701 to i64*
  %704 = load i64, i64* %703, align 8
  store i64 %704, i64* %RAX, align 8, !tbaa !2428
  %705 = add i64 %688, -100
  %706 = add i64 %4774, 163
  store i64 %706, i64* %PC, align 8
  %707 = inttoptr i64 %705 to i32*
  %708 = load i32, i32* %707, align 4
  %709 = sext i32 %708 to i64
  %710 = mul nsw i64 %709, 520
  store i64 %710, i64* %RCX, align 8, !tbaa !2428
  %711 = lshr i64 %710, 63
  %712 = add i64 %710, %704
  store i64 %712, i64* %RAX, align 8, !tbaa !2428
  %713 = icmp ult i64 %712, %704
  %714 = icmp ult i64 %712, %710
  %715 = or i1 %713, %714
  %716 = zext i1 %715 to i8
  store i8 %716, i8* %43, align 1, !tbaa !2432
  %717 = trunc i64 %712 to i32
  %718 = and i32 %717, 255
  %719 = tail call i32 @llvm.ctpop.i32(i32 %718) #8
  %720 = trunc i32 %719 to i8
  %721 = and i8 %720, 1
  %722 = xor i8 %721, 1
  store i8 %722, i8* %50, align 1, !tbaa !2446
  %723 = xor i64 %710, %704
  %724 = xor i64 %723, %712
  %725 = lshr i64 %724, 4
  %726 = trunc i64 %725 to i8
  %727 = and i8 %726, 1
  store i8 %727, i8* %55, align 1, !tbaa !2447
  %728 = icmp eq i64 %712, 0
  %729 = zext i1 %728 to i8
  store i8 %729, i8* %58, align 1, !tbaa !2448
  %730 = lshr i64 %712, 63
  %731 = trunc i64 %730 to i8
  store i8 %731, i8* %61, align 1, !tbaa !2449
  %732 = lshr i64 %704, 63
  %733 = xor i64 %730, %732
  %734 = xor i64 %730, %711
  %735 = add nuw nsw i64 %733, %734
  %736 = icmp eq i64 %735, 2
  %737 = zext i1 %736 to i8
  store i8 %737, i8* %67, align 1, !tbaa !2450
  %738 = add i64 %688, -104
  %739 = add i64 %4774, 177
  store i64 %739, i64* %PC, align 8
  %740 = inttoptr i64 %738 to i32*
  %741 = load i32, i32* %740, align 4
  %742 = sext i32 %741 to i64
  store i64 %742, i64* %RCX, align 8, !tbaa !2428
  %743 = shl nsw i64 %742, 3
  %744 = add i64 %743, %712
  %745 = add i64 %4774, 182
  store i64 %745, i64* %PC, align 8
  %746 = inttoptr i64 %744 to double*
  store double %700, double* %746, align 8
  %747 = load i64, i64* %RBP, align 8
  %748 = add i64 %747, 88
  %749 = load i64, i64* %PC, align 8
  %750 = add i64 %749, 4
  store i64 %750, i64* %PC, align 8
  %751 = inttoptr i64 %748 to i64*
  %752 = load i64, i64* %751, align 8
  store i64 %752, i64* %RAX, align 8, !tbaa !2428
  %753 = add i64 %747, -104
  %754 = add i64 %749, 8
  store i64 %754, i64* %PC, align 8
  %755 = inttoptr i64 %753 to i32*
  %756 = load i32, i32* %755, align 4
  %757 = sext i32 %756 to i64
  store i64 %757, i64* %RCX, align 8, !tbaa !2428
  %758 = shl nsw i64 %757, 3
  %759 = add i64 %758, %752
  %760 = add i64 %749, 13
  store i64 %760, i64* %PC, align 8
  %761 = inttoptr i64 %759 to double*
  %762 = load double, double* %761, align 8
  store double %762, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %763 = add i64 %747, 96
  %764 = add i64 %749, 17
  store i64 %764, i64* %PC, align 8
  %765 = inttoptr i64 %763 to i64*
  %766 = load i64, i64* %765, align 8
  store i64 %766, i64* %RAX, align 8, !tbaa !2428
  %767 = add i64 %749, 21
  store i64 %767, i64* %PC, align 8
  %768 = load i32, i32* %755, align 4
  %769 = sext i32 %768 to i64
  store i64 %769, i64* %RCX, align 8, !tbaa !2428
  %770 = shl nsw i64 %769, 3
  %771 = add i64 %770, %766
  %772 = add i64 %749, 26
  store i64 %772, i64* %PC, align 8
  %773 = inttoptr i64 %771 to double*
  %774 = load double, double* %773, align 8
  %775 = fdiv double %762, %774
  store double %775, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %776 = add i64 %747, 24
  %777 = add i64 %749, 30
  store i64 %777, i64* %PC, align 8
  %778 = inttoptr i64 %776 to i64*
  %779 = load i64, i64* %778, align 8
  store i64 %779, i64* %RAX, align 8, !tbaa !2428
  %780 = add i64 %747, -100
  %781 = add i64 %749, 34
  store i64 %781, i64* %PC, align 8
  %782 = inttoptr i64 %780 to i32*
  %783 = load i32, i32* %782, align 4
  %784 = sext i32 %783 to i64
  %785 = mul nsw i64 %784, 33800
  store i64 %785, i64* %RCX, align 8, !tbaa !2428
  %786 = lshr i64 %785, 63
  %787 = add i64 %785, %779
  store i64 %787, i64* %RAX, align 8, !tbaa !2428
  %788 = icmp ult i64 %787, %779
  %789 = icmp ult i64 %787, %785
  %790 = or i1 %788, %789
  %791 = zext i1 %790 to i8
  store i8 %791, i8* %43, align 1, !tbaa !2432
  %792 = trunc i64 %787 to i32
  %793 = and i32 %792, 255
  %794 = tail call i32 @llvm.ctpop.i32(i32 %793) #8
  %795 = trunc i32 %794 to i8
  %796 = and i8 %795, 1
  %797 = xor i8 %796, 1
  store i8 %797, i8* %50, align 1, !tbaa !2446
  %798 = xor i64 %785, %779
  %799 = xor i64 %798, %787
  %800 = lshr i64 %799, 4
  %801 = trunc i64 %800 to i8
  %802 = and i8 %801, 1
  store i8 %802, i8* %55, align 1, !tbaa !2447
  %803 = icmp eq i64 %787, 0
  %804 = zext i1 %803 to i8
  store i8 %804, i8* %58, align 1, !tbaa !2448
  %805 = lshr i64 %787, 63
  %806 = trunc i64 %805 to i8
  store i8 %806, i8* %61, align 1, !tbaa !2449
  %807 = lshr i64 %779, 63
  %808 = xor i64 %805, %807
  %809 = xor i64 %805, %786
  %810 = add nuw nsw i64 %808, %809
  %811 = icmp eq i64 %810, 2
  %812 = zext i1 %811 to i8
  store i8 %812, i8* %67, align 1, !tbaa !2450
  %813 = load i64, i64* %RBP, align 8
  %814 = add i64 %813, -104
  %815 = add i64 %749, 48
  store i64 %815, i64* %PC, align 8
  %816 = inttoptr i64 %814 to i32*
  %817 = load i32, i32* %816, align 4
  %818 = sext i32 %817 to i64
  %819 = mul nsw i64 %818, 520
  store i64 %819, i64* %RCX, align 8, !tbaa !2428
  %820 = lshr i64 %819, 63
  %821 = add i64 %819, %787
  store i64 %821, i64* %RAX, align 8, !tbaa !2428
  %822 = icmp ult i64 %821, %787
  %823 = icmp ult i64 %821, %819
  %824 = or i1 %822, %823
  %825 = zext i1 %824 to i8
  store i8 %825, i8* %43, align 1, !tbaa !2432
  %826 = trunc i64 %821 to i32
  %827 = and i32 %826, 255
  %828 = tail call i32 @llvm.ctpop.i32(i32 %827) #8
  %829 = trunc i32 %828 to i8
  %830 = and i8 %829, 1
  %831 = xor i8 %830, 1
  store i8 %831, i8* %50, align 1, !tbaa !2446
  %832 = xor i64 %819, %787
  %833 = xor i64 %832, %821
  %834 = lshr i64 %833, 4
  %835 = trunc i64 %834 to i8
  %836 = and i8 %835, 1
  store i8 %836, i8* %55, align 1, !tbaa !2447
  %837 = icmp eq i64 %821, 0
  %838 = zext i1 %837 to i8
  store i8 %838, i8* %58, align 1, !tbaa !2448
  %839 = lshr i64 %821, 63
  %840 = trunc i64 %839 to i8
  store i8 %840, i8* %61, align 1, !tbaa !2449
  %841 = xor i64 %839, %805
  %842 = xor i64 %839, %820
  %843 = add nuw nsw i64 %841, %842
  %844 = icmp eq i64 %843, 2
  %845 = zext i1 %844 to i8
  store i8 %845, i8* %67, align 1, !tbaa !2450
  %846 = add i64 %813, -48
  %847 = add i64 %749, 62
  store i64 %847, i64* %PC, align 8
  %848 = inttoptr i64 %846 to i32*
  %849 = load i32, i32* %848, align 4
  %850 = sext i32 %849 to i64
  store i64 %850, i64* %RCX, align 8, !tbaa !2428
  %851 = shl nsw i64 %850, 3
  %852 = add i64 %851, %821
  %853 = add i64 %749, 67
  store i64 %853, i64* %PC, align 8
  %854 = load double, double* %230, align 1
  %855 = inttoptr i64 %852 to double*
  %856 = load double, double* %855, align 8
  %857 = fmul double %854, %856
  store double %857, double* %230, align 1, !tbaa !2452
  %858 = add i64 %813, -72
  %859 = add i64 %749, 72
  store i64 %859, i64* %PC, align 8
  %860 = inttoptr i64 %858 to double*
  %861 = load double, double* %860, align 8
  store double %861, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %862 = add i64 %813, 96
  %863 = add i64 %749, 76
  store i64 %863, i64* %PC, align 8
  %864 = inttoptr i64 %862 to i64*
  %865 = load i64, i64* %864, align 8
  store i64 %865, i64* %RAX, align 8, !tbaa !2428
  %866 = add i64 %749, 80
  store i64 %866, i64* %PC, align 8
  %867 = load i32, i32* %816, align 4
  %868 = sext i32 %867 to i64
  store i64 %868, i64* %RCX, align 8, !tbaa !2428
  %869 = shl nsw i64 %868, 3
  %870 = add i64 %869, %865
  %871 = add i64 %749, 85
  store i64 %871, i64* %PC, align 8
  %872 = inttoptr i64 %870 to double*
  %873 = load double, double* %872, align 8
  %874 = fdiv double %861, %873
  store double %874, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %875 = load i64, i64* %RBP, align 8
  %876 = add i64 %875, -96
  %877 = add i64 %749, 89
  store i64 %877, i64* %PC, align 8
  %878 = inttoptr i64 %876 to i64*
  %879 = load i64, i64* %878, align 8
  store i64 %879, i64* %RAX, align 8, !tbaa !2428
  %880 = add i64 %875, -100
  %881 = add i64 %749, 93
  store i64 %881, i64* %PC, align 8
  %882 = inttoptr i64 %880 to i32*
  %883 = load i32, i32* %882, align 4
  %884 = sext i32 %883 to i64
  %885 = mul nsw i64 %884, 520
  store i64 %885, i64* %RCX, align 8, !tbaa !2428
  %886 = lshr i64 %885, 63
  %887 = add i64 %885, %879
  store i64 %887, i64* %RAX, align 8, !tbaa !2428
  %888 = icmp ult i64 %887, %879
  %889 = icmp ult i64 %887, %885
  %890 = or i1 %888, %889
  %891 = zext i1 %890 to i8
  store i8 %891, i8* %43, align 1, !tbaa !2432
  %892 = trunc i64 %887 to i32
  %893 = and i32 %892, 255
  %894 = tail call i32 @llvm.ctpop.i32(i32 %893) #8
  %895 = trunc i32 %894 to i8
  %896 = and i8 %895, 1
  %897 = xor i8 %896, 1
  store i8 %897, i8* %50, align 1, !tbaa !2446
  %898 = xor i64 %885, %879
  %899 = xor i64 %898, %887
  %900 = lshr i64 %899, 4
  %901 = trunc i64 %900 to i8
  %902 = and i8 %901, 1
  store i8 %902, i8* %55, align 1, !tbaa !2447
  %903 = icmp eq i64 %887, 0
  %904 = zext i1 %903 to i8
  store i8 %904, i8* %58, align 1, !tbaa !2448
  %905 = lshr i64 %887, 63
  %906 = trunc i64 %905 to i8
  store i8 %906, i8* %61, align 1, !tbaa !2449
  %907 = lshr i64 %879, 63
  %908 = xor i64 %905, %907
  %909 = xor i64 %905, %886
  %910 = add nuw nsw i64 %908, %909
  %911 = icmp eq i64 %910, 2
  %912 = zext i1 %911 to i8
  store i8 %912, i8* %67, align 1, !tbaa !2450
  %913 = add i64 %875, -104
  %914 = add i64 %749, 107
  store i64 %914, i64* %PC, align 8
  %915 = inttoptr i64 %913 to i32*
  %916 = load i32, i32* %915, align 4
  %917 = sext i32 %916 to i64
  store i64 %917, i64* %RCX, align 8, !tbaa !2428
  %918 = shl nsw i64 %917, 3
  %919 = add i64 %918, %887
  %920 = add i64 %749, 112
  store i64 %920, i64* %PC, align 8
  %921 = inttoptr i64 %919 to double*
  %922 = load double, double* %921, align 8
  %923 = fmul double %874, %922
  store double %923, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %924 = load double, double* %230, align 1
  %925 = fsub double %924, %923
  store double %925, double* %230, align 1, !tbaa !2452
  %926 = add i64 %875, 16
  %927 = add i64 %749, 120
  store i64 %927, i64* %PC, align 8
  %928 = inttoptr i64 %926 to i64*
  %929 = load i64, i64* %928, align 8
  store i64 %929, i64* %RAX, align 8, !tbaa !2428
  %930 = load i64, i64* %RBP, align 8
  %931 = add i64 %930, -100
  %932 = add i64 %749, 124
  store i64 %932, i64* %PC, align 8
  %933 = inttoptr i64 %931 to i32*
  %934 = load i32, i32* %933, align 4
  %935 = sext i32 %934 to i64
  %936 = mul nsw i64 %935, 520
  store i64 %936, i64* %RCX, align 8, !tbaa !2428
  %937 = lshr i64 %936, 63
  %938 = add i64 %936, %929
  store i64 %938, i64* %RAX, align 8, !tbaa !2428
  %939 = icmp ult i64 %938, %929
  %940 = icmp ult i64 %938, %936
  %941 = or i1 %939, %940
  %942 = zext i1 %941 to i8
  store i8 %942, i8* %43, align 1, !tbaa !2432
  %943 = trunc i64 %938 to i32
  %944 = and i32 %943, 255
  %945 = tail call i32 @llvm.ctpop.i32(i32 %944) #8
  %946 = trunc i32 %945 to i8
  %947 = and i8 %946, 1
  %948 = xor i8 %947, 1
  store i8 %948, i8* %50, align 1, !tbaa !2446
  %949 = xor i64 %936, %929
  %950 = xor i64 %949, %938
  %951 = lshr i64 %950, 4
  %952 = trunc i64 %951 to i8
  %953 = and i8 %952, 1
  store i8 %953, i8* %55, align 1, !tbaa !2447
  %954 = icmp eq i64 %938, 0
  %955 = zext i1 %954 to i8
  store i8 %955, i8* %58, align 1, !tbaa !2448
  %956 = lshr i64 %938, 63
  %957 = trunc i64 %956 to i8
  store i8 %957, i8* %61, align 1, !tbaa !2449
  %958 = lshr i64 %929, 63
  %959 = xor i64 %956, %958
  %960 = xor i64 %956, %937
  %961 = add nuw nsw i64 %959, %960
  %962 = icmp eq i64 %961, 2
  %963 = zext i1 %962 to i8
  store i8 %963, i8* %67, align 1, !tbaa !2450
  %964 = add i64 %930, -104
  %965 = add i64 %749, 138
  store i64 %965, i64* %PC, align 8
  %966 = inttoptr i64 %964 to i32*
  %967 = load i32, i32* %966, align 4
  %968 = sext i32 %967 to i64
  store i64 %968, i64* %RCX, align 8, !tbaa !2428
  %969 = shl nsw i64 %968, 3
  %970 = add i64 %969, %938
  %971 = add i64 %749, 143
  store i64 %971, i64* %PC, align 8
  %972 = inttoptr i64 %970 to double*
  store double %925, double* %972, align 8
  %973 = load i64, i64* %RBP, align 8
  %974 = add i64 %973, 72
  %975 = load i64, i64* %PC, align 8
  %976 = add i64 %975, 4
  store i64 %976, i64* %PC, align 8
  %977 = inttoptr i64 %974 to i64*
  %978 = load i64, i64* %977, align 8
  store i64 %978, i64* %RAX, align 8, !tbaa !2428
  %979 = add i64 %973, -48
  %980 = add i64 %975, 8
  store i64 %980, i64* %PC, align 8
  %981 = inttoptr i64 %979 to i32*
  %982 = load i32, i32* %981, align 4
  %983 = sext i32 %982 to i64
  store i64 %983, i64* %RCX, align 8, !tbaa !2428
  %984 = shl nsw i64 %983, 3
  %985 = add i64 %984, %978
  %986 = add i64 %975, 13
  store i64 %986, i64* %PC, align 8
  %987 = inttoptr i64 %985 to double*
  %988 = load double, double* %987, align 8
  store double %988, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %989 = add i64 %973, 80
  %990 = add i64 %975, 17
  store i64 %990, i64* %PC, align 8
  %991 = inttoptr i64 %989 to i64*
  %992 = load i64, i64* %991, align 8
  store i64 %992, i64* %RAX, align 8, !tbaa !2428
  %993 = add i64 %975, 21
  store i64 %993, i64* %PC, align 8
  %994 = load i32, i32* %981, align 4
  %995 = sext i32 %994 to i64
  store i64 %995, i64* %RCX, align 8, !tbaa !2428
  %996 = shl nsw i64 %995, 3
  %997 = add i64 %996, %992
  %998 = add i64 %975, 26
  store i64 %998, i64* %PC, align 8
  %999 = inttoptr i64 %997 to double*
  %1000 = load double, double* %999, align 8
  %1001 = fdiv double %988, %1000
  store double %1001, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %1002 = add i64 %973, 48
  %1003 = add i64 %975, 30
  store i64 %1003, i64* %PC, align 8
  %1004 = inttoptr i64 %1002 to i64*
  %1005 = load i64, i64* %1004, align 8
  store i64 %1005, i64* %RAX, align 8, !tbaa !2428
  %1006 = add i64 %973, -100
  %1007 = add i64 %975, 34
  store i64 %1007, i64* %PC, align 8
  %1008 = inttoptr i64 %1006 to i32*
  %1009 = load i32, i32* %1008, align 4
  %1010 = sext i32 %1009 to i64
  %1011 = mul nsw i64 %1010, 33800
  store i64 %1011, i64* %RCX, align 8, !tbaa !2428
  %1012 = lshr i64 %1011, 63
  %1013 = add i64 %1011, %1005
  store i64 %1013, i64* %RAX, align 8, !tbaa !2428
  %1014 = icmp ult i64 %1013, %1005
  %1015 = icmp ult i64 %1013, %1011
  %1016 = or i1 %1014, %1015
  %1017 = zext i1 %1016 to i8
  store i8 %1017, i8* %43, align 1, !tbaa !2432
  %1018 = trunc i64 %1013 to i32
  %1019 = and i32 %1018, 255
  %1020 = tail call i32 @llvm.ctpop.i32(i32 %1019) #8
  %1021 = trunc i32 %1020 to i8
  %1022 = and i8 %1021, 1
  %1023 = xor i8 %1022, 1
  store i8 %1023, i8* %50, align 1, !tbaa !2446
  %1024 = xor i64 %1011, %1005
  %1025 = xor i64 %1024, %1013
  %1026 = lshr i64 %1025, 4
  %1027 = trunc i64 %1026 to i8
  %1028 = and i8 %1027, 1
  store i8 %1028, i8* %55, align 1, !tbaa !2447
  %1029 = icmp eq i64 %1013, 0
  %1030 = zext i1 %1029 to i8
  store i8 %1030, i8* %58, align 1, !tbaa !2448
  %1031 = lshr i64 %1013, 63
  %1032 = trunc i64 %1031 to i8
  store i8 %1032, i8* %61, align 1, !tbaa !2449
  %1033 = lshr i64 %1005, 63
  %1034 = xor i64 %1031, %1033
  %1035 = xor i64 %1031, %1012
  %1036 = add nuw nsw i64 %1034, %1035
  %1037 = icmp eq i64 %1036, 2
  %1038 = zext i1 %1037 to i8
  store i8 %1038, i8* %67, align 1, !tbaa !2450
  %1039 = load i64, i64* %RBP, align 8
  %1040 = add i64 %1039, -104
  %1041 = add i64 %975, 48
  store i64 %1041, i64* %PC, align 8
  %1042 = inttoptr i64 %1040 to i32*
  %1043 = load i32, i32* %1042, align 4
  %1044 = sext i32 %1043 to i64
  %1045 = mul nsw i64 %1044, 520
  store i64 %1045, i64* %RCX, align 8, !tbaa !2428
  %1046 = lshr i64 %1045, 63
  %1047 = add i64 %1045, %1013
  store i64 %1047, i64* %RAX, align 8, !tbaa !2428
  %1048 = icmp ult i64 %1047, %1013
  %1049 = icmp ult i64 %1047, %1045
  %1050 = or i1 %1048, %1049
  %1051 = zext i1 %1050 to i8
  store i8 %1051, i8* %43, align 1, !tbaa !2432
  %1052 = trunc i64 %1047 to i32
  %1053 = and i32 %1052, 255
  %1054 = tail call i32 @llvm.ctpop.i32(i32 %1053) #8
  %1055 = trunc i32 %1054 to i8
  %1056 = and i8 %1055, 1
  %1057 = xor i8 %1056, 1
  store i8 %1057, i8* %50, align 1, !tbaa !2446
  %1058 = xor i64 %1045, %1013
  %1059 = xor i64 %1058, %1047
  %1060 = lshr i64 %1059, 4
  %1061 = trunc i64 %1060 to i8
  %1062 = and i8 %1061, 1
  store i8 %1062, i8* %55, align 1, !tbaa !2447
  %1063 = icmp eq i64 %1047, 0
  %1064 = zext i1 %1063 to i8
  store i8 %1064, i8* %58, align 1, !tbaa !2448
  %1065 = lshr i64 %1047, 63
  %1066 = trunc i64 %1065 to i8
  store i8 %1066, i8* %61, align 1, !tbaa !2449
  %1067 = xor i64 %1065, %1031
  %1068 = xor i64 %1065, %1046
  %1069 = add nuw nsw i64 %1067, %1068
  %1070 = icmp eq i64 %1069, 2
  %1071 = zext i1 %1070 to i8
  store i8 %1071, i8* %67, align 1, !tbaa !2450
  %1072 = add i64 %1039, -48
  %1073 = add i64 %975, 62
  store i64 %1073, i64* %PC, align 8
  %1074 = inttoptr i64 %1072 to i32*
  %1075 = load i32, i32* %1074, align 4
  %1076 = sext i32 %1075 to i64
  store i64 %1076, i64* %RCX, align 8, !tbaa !2428
  %1077 = shl nsw i64 %1076, 3
  %1078 = add i64 %1077, %1047
  %1079 = add i64 %975, 67
  store i64 %1079, i64* %PC, align 8
  %1080 = load double, double* %230, align 1
  %1081 = inttoptr i64 %1078 to double*
  %1082 = load double, double* %1081, align 8
  %1083 = fmul double %1080, %1082
  store double %1083, double* %230, align 1, !tbaa !2452
  %1084 = add i64 %1039, -64
  %1085 = add i64 %975, 72
  store i64 %1085, i64* %PC, align 8
  %1086 = inttoptr i64 %1084 to double*
  %1087 = load double, double* %1086, align 8
  store double %1087, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %1088 = add i64 %1039, 64
  %1089 = add i64 %975, 76
  store i64 %1089, i64* %PC, align 8
  %1090 = inttoptr i64 %1088 to i64*
  %1091 = load i64, i64* %1090, align 8
  store i64 %1091, i64* %RAX, align 8, !tbaa !2428
  %1092 = add i64 %1039, -100
  %1093 = add i64 %975, 80
  store i64 %1093, i64* %PC, align 8
  %1094 = inttoptr i64 %1092 to i32*
  %1095 = load i32, i32* %1094, align 4
  %1096 = sext i32 %1095 to i64
  store i64 %1096, i64* %RCX, align 8, !tbaa !2428
  %1097 = shl nsw i64 %1096, 3
  %1098 = add i64 %1097, %1091
  %1099 = add i64 %975, 85
  store i64 %1099, i64* %PC, align 8
  %1100 = inttoptr i64 %1098 to double*
  %1101 = load double, double* %1100, align 8
  %1102 = fmul double %1087, %1101
  store double %1102, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %1103 = load i64, i64* %RBP, align 8
  %1104 = add i64 %1103, 80
  %1105 = add i64 %975, 89
  store i64 %1105, i64* %PC, align 8
  %1106 = inttoptr i64 %1104 to i64*
  %1107 = load i64, i64* %1106, align 8
  store i64 %1107, i64* %RAX, align 8, !tbaa !2428
  %1108 = add i64 %1103, -48
  %1109 = add i64 %975, 93
  store i64 %1109, i64* %PC, align 8
  %1110 = inttoptr i64 %1108 to i32*
  %1111 = load i32, i32* %1110, align 4
  %1112 = sext i32 %1111 to i64
  store i64 %1112, i64* %RCX, align 8, !tbaa !2428
  %1113 = shl nsw i64 %1112, 3
  %1114 = add i64 %1113, %1107
  %1115 = add i64 %975, 98
  store i64 %1115, i64* %PC, align 8
  %1116 = inttoptr i64 %1114 to double*
  %1117 = load double, double* %1116, align 8
  %1118 = fdiv double %1102, %1117
  store double %1118, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %1119 = add i64 %1103, 16
  %1120 = add i64 %975, 102
  store i64 %1120, i64* %PC, align 8
  %1121 = inttoptr i64 %1119 to i64*
  %1122 = load i64, i64* %1121, align 8
  store i64 %1122, i64* %RAX, align 8, !tbaa !2428
  %1123 = add i64 %1103, -100
  %1124 = add i64 %975, 106
  store i64 %1124, i64* %PC, align 8
  %1125 = inttoptr i64 %1123 to i32*
  %1126 = load i32, i32* %1125, align 4
  %1127 = sext i32 %1126 to i64
  %1128 = mul nsw i64 %1127, 520
  store i64 %1128, i64* %RCX, align 8, !tbaa !2428
  %1129 = lshr i64 %1128, 63
  %1130 = add i64 %1128, %1122
  store i64 %1130, i64* %RAX, align 8, !tbaa !2428
  %1131 = icmp ult i64 %1130, %1122
  %1132 = icmp ult i64 %1130, %1128
  %1133 = or i1 %1131, %1132
  %1134 = zext i1 %1133 to i8
  store i8 %1134, i8* %43, align 1, !tbaa !2432
  %1135 = trunc i64 %1130 to i32
  %1136 = and i32 %1135, 255
  %1137 = tail call i32 @llvm.ctpop.i32(i32 %1136) #8
  %1138 = trunc i32 %1137 to i8
  %1139 = and i8 %1138, 1
  %1140 = xor i8 %1139, 1
  store i8 %1140, i8* %50, align 1, !tbaa !2446
  %1141 = xor i64 %1128, %1122
  %1142 = xor i64 %1141, %1130
  %1143 = lshr i64 %1142, 4
  %1144 = trunc i64 %1143 to i8
  %1145 = and i8 %1144, 1
  store i8 %1145, i8* %55, align 1, !tbaa !2447
  %1146 = icmp eq i64 %1130, 0
  %1147 = zext i1 %1146 to i8
  store i8 %1147, i8* %58, align 1, !tbaa !2448
  %1148 = lshr i64 %1130, 63
  %1149 = trunc i64 %1148 to i8
  store i8 %1149, i8* %61, align 1, !tbaa !2449
  %1150 = lshr i64 %1122, 63
  %1151 = xor i64 %1148, %1150
  %1152 = xor i64 %1148, %1129
  %1153 = add nuw nsw i64 %1151, %1152
  %1154 = icmp eq i64 %1153, 2
  %1155 = zext i1 %1154 to i8
  store i8 %1155, i8* %67, align 1, !tbaa !2450
  %1156 = add i64 %1103, -104
  %1157 = add i64 %975, 120
  store i64 %1157, i64* %PC, align 8
  %1158 = inttoptr i64 %1156 to i32*
  %1159 = load i32, i32* %1158, align 4
  %1160 = sext i32 %1159 to i64
  store i64 %1160, i64* %RCX, align 8, !tbaa !2428
  %1161 = shl nsw i64 %1160, 3
  %1162 = add i64 %1161, %1130
  %1163 = add i64 %975, 125
  store i64 %1163, i64* %PC, align 8
  %1164 = inttoptr i64 %1162 to double*
  %1165 = load double, double* %1164, align 8
  %1166 = fmul double %1118, %1165
  store double %1166, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %1167 = load double, double* %230, align 1
  %1168 = fadd double %1167, %1166
  store double %1168, double* %230, align 1, !tbaa !2452
  %1169 = load i64, i64* %RBP, align 8
  %1170 = add i64 %1169, -64
  %1171 = add i64 %975, 134
  store i64 %1171, i64* %PC, align 8
  %1172 = inttoptr i64 %1170 to double*
  %1173 = load double, double* %1172, align 8
  store double %1173, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %1174 = add i64 %1169, 56
  %1175 = add i64 %975, 138
  store i64 %1175, i64* %PC, align 8
  %1176 = inttoptr i64 %1174 to i64*
  %1177 = load i64, i64* %1176, align 8
  store i64 %1177, i64* %RAX, align 8, !tbaa !2428
  %1178 = add i64 %1169, -100
  %1179 = add i64 %975, 142
  store i64 %1179, i64* %PC, align 8
  %1180 = inttoptr i64 %1178 to i32*
  %1181 = load i32, i32* %1180, align 4
  %1182 = sext i32 %1181 to i64
  store i64 %1182, i64* %RCX, align 8, !tbaa !2428
  %1183 = shl nsw i64 %1182, 3
  %1184 = add i64 %1183, %1177
  %1185 = add i64 %975, 147
  store i64 %1185, i64* %PC, align 8
  %1186 = inttoptr i64 %1184 to double*
  %1187 = load double, double* %1186, align 8
  %1188 = fmul double %1173, %1187
  store double %1188, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %1189 = add i64 %1169, 80
  %1190 = add i64 %975, 151
  store i64 %1190, i64* %PC, align 8
  %1191 = inttoptr i64 %1189 to i64*
  %1192 = load i64, i64* %1191, align 8
  store i64 %1192, i64* %RAX, align 8, !tbaa !2428
  %1193 = add i64 %1169, -48
  %1194 = add i64 %975, 155
  store i64 %1194, i64* %PC, align 8
  %1195 = inttoptr i64 %1193 to i32*
  %1196 = load i32, i32* %1195, align 4
  %1197 = sext i32 %1196 to i64
  store i64 %1197, i64* %RCX, align 8, !tbaa !2428
  %1198 = shl nsw i64 %1197, 3
  %1199 = add i64 %1198, %1192
  %1200 = add i64 %975, 160
  store i64 %1200, i64* %PC, align 8
  %1201 = inttoptr i64 %1199 to double*
  %1202 = load double, double* %1201, align 8
  %1203 = fdiv double %1188, %1202
  store double %1203, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %1204 = add i64 %1169, 24
  %1205 = add i64 %975, 164
  store i64 %1205, i64* %PC, align 8
  %1206 = inttoptr i64 %1204 to i64*
  %1207 = load i64, i64* %1206, align 8
  store i64 %1207, i64* %RAX, align 8, !tbaa !2428
  %1208 = add i64 %975, 168
  store i64 %1208, i64* %PC, align 8
  %1209 = load i32, i32* %1180, align 4
  %1210 = sext i32 %1209 to i64
  %1211 = mul nsw i64 %1210, 33800
  store i64 %1211, i64* %RCX, align 8, !tbaa !2428
  %1212 = lshr i64 %1211, 63
  %1213 = add i64 %1211, %1207
  store i64 %1213, i64* %RAX, align 8, !tbaa !2428
  %1214 = icmp ult i64 %1213, %1207
  %1215 = icmp ult i64 %1213, %1211
  %1216 = or i1 %1214, %1215
  %1217 = zext i1 %1216 to i8
  store i8 %1217, i8* %43, align 1, !tbaa !2432
  %1218 = trunc i64 %1213 to i32
  %1219 = and i32 %1218, 255
  %1220 = tail call i32 @llvm.ctpop.i32(i32 %1219) #8
  %1221 = trunc i32 %1220 to i8
  %1222 = and i8 %1221, 1
  %1223 = xor i8 %1222, 1
  store i8 %1223, i8* %50, align 1, !tbaa !2446
  %1224 = xor i64 %1211, %1207
  %1225 = xor i64 %1224, %1213
  %1226 = lshr i64 %1225, 4
  %1227 = trunc i64 %1226 to i8
  %1228 = and i8 %1227, 1
  store i8 %1228, i8* %55, align 1, !tbaa !2447
  %1229 = icmp eq i64 %1213, 0
  %1230 = zext i1 %1229 to i8
  store i8 %1230, i8* %58, align 1, !tbaa !2448
  %1231 = lshr i64 %1213, 63
  %1232 = trunc i64 %1231 to i8
  store i8 %1232, i8* %61, align 1, !tbaa !2449
  %1233 = lshr i64 %1207, 63
  %1234 = xor i64 %1231, %1233
  %1235 = xor i64 %1231, %1212
  %1236 = add nuw nsw i64 %1234, %1235
  %1237 = icmp eq i64 %1236, 2
  %1238 = zext i1 %1237 to i8
  store i8 %1238, i8* %67, align 1, !tbaa !2450
  %1239 = load i64, i64* %RBP, align 8
  %1240 = add i64 %1239, -104
  %1241 = add i64 %975, 182
  store i64 %1241, i64* %PC, align 8
  %1242 = inttoptr i64 %1240 to i32*
  %1243 = load i32, i32* %1242, align 4
  %1244 = sext i32 %1243 to i64
  %1245 = mul nsw i64 %1244, 520
  store i64 %1245, i64* %RCX, align 8, !tbaa !2428
  %1246 = lshr i64 %1245, 63
  %1247 = add i64 %1245, %1213
  store i64 %1247, i64* %RAX, align 8, !tbaa !2428
  %1248 = icmp ult i64 %1247, %1213
  %1249 = icmp ult i64 %1247, %1245
  %1250 = or i1 %1248, %1249
  %1251 = zext i1 %1250 to i8
  store i8 %1251, i8* %43, align 1, !tbaa !2432
  %1252 = trunc i64 %1247 to i32
  %1253 = and i32 %1252, 255
  %1254 = tail call i32 @llvm.ctpop.i32(i32 %1253) #8
  %1255 = trunc i32 %1254 to i8
  %1256 = and i8 %1255, 1
  %1257 = xor i8 %1256, 1
  store i8 %1257, i8* %50, align 1, !tbaa !2446
  %1258 = xor i64 %1245, %1213
  %1259 = xor i64 %1258, %1247
  %1260 = lshr i64 %1259, 4
  %1261 = trunc i64 %1260 to i8
  %1262 = and i8 %1261, 1
  store i8 %1262, i8* %55, align 1, !tbaa !2447
  %1263 = icmp eq i64 %1247, 0
  %1264 = zext i1 %1263 to i8
  store i8 %1264, i8* %58, align 1, !tbaa !2448
  %1265 = lshr i64 %1247, 63
  %1266 = trunc i64 %1265 to i8
  store i8 %1266, i8* %61, align 1, !tbaa !2449
  %1267 = xor i64 %1265, %1231
  %1268 = xor i64 %1265, %1246
  %1269 = add nuw nsw i64 %1267, %1268
  %1270 = icmp eq i64 %1269, 2
  %1271 = zext i1 %1270 to i8
  store i8 %1271, i8* %67, align 1, !tbaa !2450
  %1272 = add i64 %1239, -48
  %1273 = add i64 %975, 196
  store i64 %1273, i64* %PC, align 8
  %1274 = inttoptr i64 %1272 to i32*
  %1275 = load i32, i32* %1274, align 4
  %1276 = sext i32 %1275 to i64
  store i64 %1276, i64* %RCX, align 8, !tbaa !2428
  %1277 = shl nsw i64 %1276, 3
  %1278 = add i64 %1277, %1247
  %1279 = add i64 %975, 201
  store i64 %1279, i64* %PC, align 8
  %1280 = load double, double* %233, align 1
  %1281 = inttoptr i64 %1278 to double*
  %1282 = load double, double* %1281, align 8
  %1283 = fmul double %1280, %1282
  store double %1283, double* %233, align 1, !tbaa !2452
  %1284 = load double, double* %230, align 1
  %1285 = fsub double %1284, %1283
  store double %1285, double* %230, align 1, !tbaa !2452
  %1286 = add i64 %1239, 48
  %1287 = add i64 %975, 209
  store i64 %1287, i64* %PC, align 8
  %1288 = inttoptr i64 %1286 to i64*
  %1289 = load i64, i64* %1288, align 8
  store i64 %1289, i64* %RAX, align 8, !tbaa !2428
  %1290 = add i64 %1239, -100
  %1291 = add i64 %975, 213
  store i64 %1291, i64* %PC, align 8
  %1292 = inttoptr i64 %1290 to i32*
  %1293 = load i32, i32* %1292, align 4
  %1294 = sext i32 %1293 to i64
  %1295 = mul nsw i64 %1294, 33800
  store i64 %1295, i64* %RCX, align 8, !tbaa !2428
  %1296 = lshr i64 %1295, 63
  %1297 = add i64 %1295, %1289
  store i64 %1297, i64* %RAX, align 8, !tbaa !2428
  %1298 = icmp ult i64 %1297, %1289
  %1299 = icmp ult i64 %1297, %1295
  %1300 = or i1 %1298, %1299
  %1301 = zext i1 %1300 to i8
  store i8 %1301, i8* %43, align 1, !tbaa !2432
  %1302 = trunc i64 %1297 to i32
  %1303 = and i32 %1302, 255
  %1304 = tail call i32 @llvm.ctpop.i32(i32 %1303) #8
  %1305 = trunc i32 %1304 to i8
  %1306 = and i8 %1305, 1
  %1307 = xor i8 %1306, 1
  store i8 %1307, i8* %50, align 1, !tbaa !2446
  %1308 = xor i64 %1295, %1289
  %1309 = xor i64 %1308, %1297
  %1310 = lshr i64 %1309, 4
  %1311 = trunc i64 %1310 to i8
  %1312 = and i8 %1311, 1
  store i8 %1312, i8* %55, align 1, !tbaa !2447
  %1313 = icmp eq i64 %1297, 0
  %1314 = zext i1 %1313 to i8
  store i8 %1314, i8* %58, align 1, !tbaa !2448
  %1315 = lshr i64 %1297, 63
  %1316 = trunc i64 %1315 to i8
  store i8 %1316, i8* %61, align 1, !tbaa !2449
  %1317 = lshr i64 %1289, 63
  %1318 = xor i64 %1315, %1317
  %1319 = xor i64 %1315, %1296
  %1320 = add nuw nsw i64 %1318, %1319
  %1321 = icmp eq i64 %1320, 2
  %1322 = zext i1 %1321 to i8
  store i8 %1322, i8* %67, align 1, !tbaa !2450
  %1323 = load i64, i64* %RBP, align 8
  %1324 = add i64 %1323, -104
  %1325 = add i64 %975, 227
  store i64 %1325, i64* %PC, align 8
  %1326 = inttoptr i64 %1324 to i32*
  %1327 = load i32, i32* %1326, align 4
  %1328 = sext i32 %1327 to i64
  %1329 = mul nsw i64 %1328, 520
  store i64 %1329, i64* %RCX, align 8, !tbaa !2428
  %1330 = lshr i64 %1329, 63
  %1331 = add i64 %1329, %1297
  store i64 %1331, i64* %RAX, align 8, !tbaa !2428
  %1332 = icmp ult i64 %1331, %1297
  %1333 = icmp ult i64 %1331, %1329
  %1334 = or i1 %1332, %1333
  %1335 = zext i1 %1334 to i8
  store i8 %1335, i8* %43, align 1, !tbaa !2432
  %1336 = trunc i64 %1331 to i32
  %1337 = and i32 %1336, 255
  %1338 = tail call i32 @llvm.ctpop.i32(i32 %1337) #8
  %1339 = trunc i32 %1338 to i8
  %1340 = and i8 %1339, 1
  %1341 = xor i8 %1340, 1
  store i8 %1341, i8* %50, align 1, !tbaa !2446
  %1342 = xor i64 %1329, %1297
  %1343 = xor i64 %1342, %1331
  %1344 = lshr i64 %1343, 4
  %1345 = trunc i64 %1344 to i8
  %1346 = and i8 %1345, 1
  store i8 %1346, i8* %55, align 1, !tbaa !2447
  %1347 = icmp eq i64 %1331, 0
  %1348 = zext i1 %1347 to i8
  store i8 %1348, i8* %58, align 1, !tbaa !2448
  %1349 = lshr i64 %1331, 63
  %1350 = trunc i64 %1349 to i8
  store i8 %1350, i8* %61, align 1, !tbaa !2449
  %1351 = xor i64 %1349, %1315
  %1352 = xor i64 %1349, %1330
  %1353 = add nuw nsw i64 %1351, %1352
  %1354 = icmp eq i64 %1353, 2
  %1355 = zext i1 %1354 to i8
  store i8 %1355, i8* %67, align 1, !tbaa !2450
  %1356 = add i64 %1323, -48
  %1357 = add i64 %975, 241
  store i64 %1357, i64* %PC, align 8
  %1358 = inttoptr i64 %1356 to i32*
  %1359 = load i32, i32* %1358, align 4
  %1360 = sext i32 %1359 to i64
  store i64 %1360, i64* %RCX, align 8, !tbaa !2428
  %1361 = shl nsw i64 %1360, 3
  %1362 = add i64 %1361, %1331
  %1363 = add i64 %975, 246
  store i64 %1363, i64* %PC, align 8
  %1364 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1365 = load i64, i64* %1364, align 1
  %1366 = inttoptr i64 %1362 to i64*
  store i64 %1365, i64* %1366, align 8
  %1367 = load i64, i64* %RBP, align 8
  %1368 = add i64 %1367, 16
  %1369 = load i64, i64* %PC, align 8
  %1370 = add i64 %1369, 4
  store i64 %1370, i64* %PC, align 8
  %1371 = inttoptr i64 %1368 to i64*
  %1372 = load i64, i64* %1371, align 8
  store i64 %1372, i64* %RAX, align 8, !tbaa !2428
  %1373 = add i64 %1367, -100
  %1374 = add i64 %1369, 8
  store i64 %1374, i64* %PC, align 8
  %1375 = inttoptr i64 %1373 to i32*
  %1376 = load i32, i32* %1375, align 4
  %1377 = sext i32 %1376 to i64
  %1378 = mul nsw i64 %1377, 520
  store i64 %1378, i64* %RCX, align 8, !tbaa !2428
  %1379 = lshr i64 %1378, 63
  %1380 = add i64 %1378, %1372
  store i64 %1380, i64* %RAX, align 8, !tbaa !2428
  %1381 = icmp ult i64 %1380, %1372
  %1382 = icmp ult i64 %1380, %1378
  %1383 = or i1 %1381, %1382
  %1384 = zext i1 %1383 to i8
  store i8 %1384, i8* %43, align 1, !tbaa !2432
  %1385 = trunc i64 %1380 to i32
  %1386 = and i32 %1385, 255
  %1387 = tail call i32 @llvm.ctpop.i32(i32 %1386) #8
  %1388 = trunc i32 %1387 to i8
  %1389 = and i8 %1388, 1
  %1390 = xor i8 %1389, 1
  store i8 %1390, i8* %50, align 1, !tbaa !2446
  %1391 = xor i64 %1378, %1372
  %1392 = xor i64 %1391, %1380
  %1393 = lshr i64 %1392, 4
  %1394 = trunc i64 %1393 to i8
  %1395 = and i8 %1394, 1
  store i8 %1395, i8* %55, align 1, !tbaa !2447
  %1396 = icmp eq i64 %1380, 0
  %1397 = zext i1 %1396 to i8
  store i8 %1397, i8* %58, align 1, !tbaa !2448
  %1398 = lshr i64 %1380, 63
  %1399 = trunc i64 %1398 to i8
  store i8 %1399, i8* %61, align 1, !tbaa !2449
  %1400 = lshr i64 %1372, 63
  %1401 = xor i64 %1398, %1400
  %1402 = xor i64 %1398, %1379
  %1403 = add nuw nsw i64 %1401, %1402
  %1404 = icmp eq i64 %1403, 2
  %1405 = zext i1 %1404 to i8
  store i8 %1405, i8* %67, align 1, !tbaa !2450
  %1406 = add i64 %1367, -104
  %1407 = add i64 %1369, 22
  store i64 %1407, i64* %PC, align 8
  %1408 = inttoptr i64 %1406 to i32*
  %1409 = load i32, i32* %1408, align 4
  %1410 = sext i32 %1409 to i64
  store i64 %1410, i64* %RCX, align 8, !tbaa !2428
  %1411 = shl nsw i64 %1410, 3
  %1412 = add i64 %1411, %1380
  %1413 = add i64 %1369, 27
  store i64 %1413, i64* %PC, align 8
  %1414 = inttoptr i64 %1412 to i64*
  %1415 = load i64, i64* %1414, align 8
  %1416 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %1415, i64* %1416, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %1417 = add i64 %1367, 24
  %1418 = add i64 %1369, 31
  store i64 %1418, i64* %PC, align 8
  %1419 = inttoptr i64 %1417 to i64*
  %1420 = load i64, i64* %1419, align 8
  store i64 %1420, i64* %RAX, align 8, !tbaa !2428
  %1421 = add i64 %1369, 35
  store i64 %1421, i64* %PC, align 8
  %1422 = load i32, i32* %1375, align 4
  %1423 = sext i32 %1422 to i64
  %1424 = mul nsw i64 %1423, 33800
  store i64 %1424, i64* %RCX, align 8, !tbaa !2428
  %1425 = lshr i64 %1424, 63
  %1426 = add i64 %1424, %1420
  store i64 %1426, i64* %RAX, align 8, !tbaa !2428
  %1427 = icmp ult i64 %1426, %1420
  %1428 = icmp ult i64 %1426, %1424
  %1429 = or i1 %1427, %1428
  %1430 = zext i1 %1429 to i8
  store i8 %1430, i8* %43, align 1, !tbaa !2432
  %1431 = trunc i64 %1426 to i32
  %1432 = and i32 %1431, 255
  %1433 = tail call i32 @llvm.ctpop.i32(i32 %1432) #8
  %1434 = trunc i32 %1433 to i8
  %1435 = and i8 %1434, 1
  %1436 = xor i8 %1435, 1
  store i8 %1436, i8* %50, align 1, !tbaa !2446
  %1437 = xor i64 %1424, %1420
  %1438 = xor i64 %1437, %1426
  %1439 = lshr i64 %1438, 4
  %1440 = trunc i64 %1439 to i8
  %1441 = and i8 %1440, 1
  store i8 %1441, i8* %55, align 1, !tbaa !2447
  %1442 = icmp eq i64 %1426, 0
  %1443 = zext i1 %1442 to i8
  store i8 %1443, i8* %58, align 1, !tbaa !2448
  %1444 = lshr i64 %1426, 63
  %1445 = trunc i64 %1444 to i8
  store i8 %1445, i8* %61, align 1, !tbaa !2449
  %1446 = lshr i64 %1420, 63
  %1447 = xor i64 %1444, %1446
  %1448 = xor i64 %1444, %1425
  %1449 = add nuw nsw i64 %1447, %1448
  %1450 = icmp eq i64 %1449, 2
  %1451 = zext i1 %1450 to i8
  store i8 %1451, i8* %67, align 1, !tbaa !2450
  %1452 = load i64, i64* %RBP, align 8
  %1453 = add i64 %1452, -104
  %1454 = add i64 %1369, 49
  store i64 %1454, i64* %PC, align 8
  %1455 = inttoptr i64 %1453 to i32*
  %1456 = load i32, i32* %1455, align 4
  %1457 = sext i32 %1456 to i64
  %1458 = mul nsw i64 %1457, 520
  store i64 %1458, i64* %RCX, align 8, !tbaa !2428
  %1459 = lshr i64 %1458, 63
  %1460 = add i64 %1458, %1426
  store i64 %1460, i64* %RAX, align 8, !tbaa !2428
  %1461 = icmp ult i64 %1460, %1426
  %1462 = icmp ult i64 %1460, %1458
  %1463 = or i1 %1461, %1462
  %1464 = zext i1 %1463 to i8
  store i8 %1464, i8* %43, align 1, !tbaa !2432
  %1465 = trunc i64 %1460 to i32
  %1466 = and i32 %1465, 255
  %1467 = tail call i32 @llvm.ctpop.i32(i32 %1466) #8
  %1468 = trunc i32 %1467 to i8
  %1469 = and i8 %1468, 1
  %1470 = xor i8 %1469, 1
  store i8 %1470, i8* %50, align 1, !tbaa !2446
  %1471 = xor i64 %1458, %1426
  %1472 = xor i64 %1471, %1460
  %1473 = lshr i64 %1472, 4
  %1474 = trunc i64 %1473 to i8
  %1475 = and i8 %1474, 1
  store i8 %1475, i8* %55, align 1, !tbaa !2447
  %1476 = icmp eq i64 %1460, 0
  %1477 = zext i1 %1476 to i8
  store i8 %1477, i8* %58, align 1, !tbaa !2448
  %1478 = lshr i64 %1460, 63
  %1479 = trunc i64 %1478 to i8
  store i8 %1479, i8* %61, align 1, !tbaa !2449
  %1480 = xor i64 %1478, %1444
  %1481 = xor i64 %1478, %1459
  %1482 = add nuw nsw i64 %1480, %1481
  %1483 = icmp eq i64 %1482, 2
  %1484 = zext i1 %1483 to i8
  store i8 %1484, i8* %67, align 1, !tbaa !2450
  %1485 = add i64 %1452, -48
  %1486 = add i64 %1369, 63
  store i64 %1486, i64* %PC, align 8
  %1487 = inttoptr i64 %1485 to i32*
  %1488 = load i32, i32* %1487, align 4
  %1489 = sext i32 %1488 to i64
  store i64 %1489, i64* %RCX, align 8, !tbaa !2428
  %1490 = shl nsw i64 %1489, 3
  %1491 = add i64 %1490, %1460
  %1492 = add i64 %1369, 68
  store i64 %1492, i64* %PC, align 8
  %1493 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1494 = load i64, i64* %1493, align 1
  %1495 = inttoptr i64 %1491 to i64*
  store i64 %1494, i64* %1495, align 8
  %1496 = load i64, i64* %RBP, align 8
  %1497 = add i64 %1496, -108
  %1498 = load i64, i64* %PC, align 8
  %1499 = add i64 %1498, 7
  store i64 %1499, i64* %PC, align 8
  %1500 = inttoptr i64 %1497 to i32*
  store i32 0, i32* %1500, align 4
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_4019d2

block_401c6b:                                     ; preds = %block_4019d2
  %1501 = add i64 %441, -48
  %1502 = add i64 %403, 36
  store i64 %1502, i64* %PC, align 8
  %1503 = inttoptr i64 %1501 to i32*
  %1504 = load i32, i32* %1503, align 4
  %1505 = sext i32 %1504 to i64
  store i64 %1505, i64* %RCX, align 8, !tbaa !2428
  %1506 = shl nsw i64 %1505, 3
  %1507 = add i64 %1506, %450
  %1508 = add i64 %403, 41
  store i64 %1508, i64* %PC, align 8
  %1509 = inttoptr i64 %1507 to double*
  %1510 = load double, double* %1509, align 8
  store double %1510, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %1511 = add i64 %441, -80
  %1512 = add i64 %403, 45
  store i64 %1512, i64* %PC, align 8
  %1513 = inttoptr i64 %1511 to i64*
  %1514 = load i64, i64* %1513, align 8
  store i64 %1514, i64* %RAX, align 8, !tbaa !2428
  %1515 = add i64 %441, -100
  %1516 = add i64 %403, 49
  store i64 %1516, i64* %PC, align 8
  %1517 = inttoptr i64 %1515 to i32*
  %1518 = load i32, i32* %1517, align 4
  %1519 = sext i32 %1518 to i64
  %1520 = mul nsw i64 %1519, 520
  store i64 %1520, i64* %RCX, align 8, !tbaa !2428
  %1521 = lshr i64 %1520, 63
  %1522 = add i64 %1520, %1514
  store i64 %1522, i64* %RAX, align 8, !tbaa !2428
  %1523 = icmp ult i64 %1522, %1514
  %1524 = icmp ult i64 %1522, %1520
  %1525 = or i1 %1523, %1524
  %1526 = zext i1 %1525 to i8
  store i8 %1526, i8* %43, align 1, !tbaa !2432
  %1527 = trunc i64 %1522 to i32
  %1528 = and i32 %1527, 255
  %1529 = tail call i32 @llvm.ctpop.i32(i32 %1528) #8
  %1530 = trunc i32 %1529 to i8
  %1531 = and i8 %1530, 1
  %1532 = xor i8 %1531, 1
  store i8 %1532, i8* %50, align 1, !tbaa !2446
  %1533 = xor i64 %1520, %1514
  %1534 = xor i64 %1533, %1522
  %1535 = lshr i64 %1534, 4
  %1536 = trunc i64 %1535 to i8
  %1537 = and i8 %1536, 1
  store i8 %1537, i8* %55, align 1, !tbaa !2447
  %1538 = icmp eq i64 %1522, 0
  %1539 = zext i1 %1538 to i8
  store i8 %1539, i8* %58, align 1, !tbaa !2448
  %1540 = lshr i64 %1522, 63
  %1541 = trunc i64 %1540 to i8
  store i8 %1541, i8* %61, align 1, !tbaa !2449
  %1542 = lshr i64 %1514, 63
  %1543 = xor i64 %1540, %1542
  %1544 = xor i64 %1540, %1521
  %1545 = add nuw nsw i64 %1543, %1544
  %1546 = icmp eq i64 %1545, 2
  %1547 = zext i1 %1546 to i8
  store i8 %1547, i8* %67, align 1, !tbaa !2450
  %1548 = add i64 %403, 63
  store i64 %1548, i64* %PC, align 8
  %1549 = load i32, i32* %1503, align 4
  %1550 = sext i32 %1549 to i64
  store i64 %1550, i64* %RCX, align 8, !tbaa !2428
  %1551 = shl nsw i64 %1550, 3
  %1552 = add i64 %1551, %1522
  %1553 = add i64 %403, 68
  store i64 %1553, i64* %PC, align 8
  %1554 = inttoptr i64 %1552 to double*
  %1555 = load double, double* %1554, align 8
  %1556 = fsub double %1510, %1555
  store double %1556, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %1557 = load i64, i64* %RBP, align 8
  %1558 = add i64 %1557, -88
  %1559 = add i64 %403, 72
  store i64 %1559, i64* %PC, align 8
  %1560 = inttoptr i64 %1558 to i64*
  %1561 = load i64, i64* %1560, align 8
  store i64 %1561, i64* %RAX, align 8, !tbaa !2428
  %1562 = add i64 %1557, -100
  %1563 = add i64 %403, 76
  store i64 %1563, i64* %PC, align 8
  %1564 = inttoptr i64 %1562 to i32*
  %1565 = load i32, i32* %1564, align 4
  %1566 = sext i32 %1565 to i64
  %1567 = mul nsw i64 %1566, 520
  store i64 %1567, i64* %RCX, align 8, !tbaa !2428
  %1568 = lshr i64 %1567, 63
  %1569 = add i64 %1567, %1561
  store i64 %1569, i64* %RAX, align 8, !tbaa !2428
  %1570 = icmp ult i64 %1569, %1561
  %1571 = icmp ult i64 %1569, %1567
  %1572 = or i1 %1570, %1571
  %1573 = zext i1 %1572 to i8
  store i8 %1573, i8* %43, align 1, !tbaa !2432
  %1574 = trunc i64 %1569 to i32
  %1575 = and i32 %1574, 255
  %1576 = tail call i32 @llvm.ctpop.i32(i32 %1575) #8
  %1577 = trunc i32 %1576 to i8
  %1578 = and i8 %1577, 1
  %1579 = xor i8 %1578, 1
  store i8 %1579, i8* %50, align 1, !tbaa !2446
  %1580 = xor i64 %1567, %1561
  %1581 = xor i64 %1580, %1569
  %1582 = lshr i64 %1581, 4
  %1583 = trunc i64 %1582 to i8
  %1584 = and i8 %1583, 1
  store i8 %1584, i8* %55, align 1, !tbaa !2447
  %1585 = icmp eq i64 %1569, 0
  %1586 = zext i1 %1585 to i8
  store i8 %1586, i8* %58, align 1, !tbaa !2448
  %1587 = lshr i64 %1569, 63
  %1588 = trunc i64 %1587 to i8
  store i8 %1588, i8* %61, align 1, !tbaa !2449
  %1589 = lshr i64 %1561, 63
  %1590 = xor i64 %1587, %1589
  %1591 = xor i64 %1587, %1568
  %1592 = add nuw nsw i64 %1590, %1591
  %1593 = icmp eq i64 %1592, 2
  %1594 = zext i1 %1593 to i8
  store i8 %1594, i8* %67, align 1, !tbaa !2450
  %1595 = add i64 %1557, -52
  %1596 = add i64 %403, 90
  store i64 %1596, i64* %PC, align 8
  %1597 = inttoptr i64 %1595 to i32*
  %1598 = load i32, i32* %1597, align 4
  %1599 = sext i32 %1598 to i64
  store i64 %1599, i64* %RCX, align 8, !tbaa !2428
  %1600 = shl nsw i64 %1599, 3
  %1601 = add i64 %1600, %1569
  %1602 = add i64 %403, 95
  store i64 %1602, i64* %PC, align 8
  %1603 = inttoptr i64 %1601 to double*
  %1604 = load double, double* %1603, align 8
  %1605 = fadd double %1556, %1604
  store double %1605, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %1606 = add i64 %1557, 40
  %1607 = add i64 %403, 99
  store i64 %1607, i64* %PC, align 8
  %1608 = inttoptr i64 %1606 to i64*
  %1609 = load i64, i64* %1608, align 8
  store i64 %1609, i64* %RAX, align 8, !tbaa !2428
  %1610 = add i64 %403, 103
  store i64 %1610, i64* %PC, align 8
  %1611 = load i32, i32* %1564, align 4
  %1612 = sext i32 %1611 to i64
  %1613 = mul nsw i64 %1612, 33800
  store i64 %1613, i64* %RCX, align 8, !tbaa !2428
  %1614 = lshr i64 %1613, 63
  %1615 = add i64 %1613, %1609
  store i64 %1615, i64* %RAX, align 8, !tbaa !2428
  %1616 = icmp ult i64 %1615, %1609
  %1617 = icmp ult i64 %1615, %1613
  %1618 = or i1 %1616, %1617
  %1619 = zext i1 %1618 to i8
  store i8 %1619, i8* %43, align 1, !tbaa !2432
  %1620 = trunc i64 %1615 to i32
  %1621 = and i32 %1620, 255
  %1622 = tail call i32 @llvm.ctpop.i32(i32 %1621) #8
  %1623 = trunc i32 %1622 to i8
  %1624 = and i8 %1623, 1
  %1625 = xor i8 %1624, 1
  store i8 %1625, i8* %50, align 1, !tbaa !2446
  %1626 = xor i64 %1613, %1609
  %1627 = xor i64 %1626, %1615
  %1628 = lshr i64 %1627, 4
  %1629 = trunc i64 %1628 to i8
  %1630 = and i8 %1629, 1
  store i8 %1630, i8* %55, align 1, !tbaa !2447
  %1631 = icmp eq i64 %1615, 0
  %1632 = zext i1 %1631 to i8
  store i8 %1632, i8* %58, align 1, !tbaa !2448
  %1633 = lshr i64 %1615, 63
  %1634 = trunc i64 %1633 to i8
  store i8 %1634, i8* %61, align 1, !tbaa !2449
  %1635 = lshr i64 %1609, 63
  %1636 = xor i64 %1633, %1635
  %1637 = xor i64 %1633, %1614
  %1638 = add nuw nsw i64 %1636, %1637
  %1639 = icmp eq i64 %1638, 2
  %1640 = zext i1 %1639 to i8
  store i8 %1640, i8* %67, align 1, !tbaa !2450
  %1641 = load i64, i64* %RBP, align 8
  %1642 = add i64 %1641, -52
  %1643 = add i64 %403, 117
  store i64 %1643, i64* %PC, align 8
  %1644 = inttoptr i64 %1642 to i32*
  %1645 = load i32, i32* %1644, align 4
  %1646 = sext i32 %1645 to i64
  %1647 = mul nsw i64 %1646, 520
  store i64 %1647, i64* %RCX, align 8, !tbaa !2428
  %1648 = lshr i64 %1647, 63
  %1649 = add i64 %1647, %1615
  store i64 %1649, i64* %RAX, align 8, !tbaa !2428
  %1650 = icmp ult i64 %1649, %1615
  %1651 = icmp ult i64 %1649, %1647
  %1652 = or i1 %1650, %1651
  %1653 = zext i1 %1652 to i8
  store i8 %1653, i8* %43, align 1, !tbaa !2432
  %1654 = trunc i64 %1649 to i32
  %1655 = and i32 %1654, 255
  %1656 = tail call i32 @llvm.ctpop.i32(i32 %1655) #8
  %1657 = trunc i32 %1656 to i8
  %1658 = and i8 %1657, 1
  %1659 = xor i8 %1658, 1
  store i8 %1659, i8* %50, align 1, !tbaa !2446
  %1660 = xor i64 %1647, %1615
  %1661 = xor i64 %1660, %1649
  %1662 = lshr i64 %1661, 4
  %1663 = trunc i64 %1662 to i8
  %1664 = and i8 %1663, 1
  store i8 %1664, i8* %55, align 1, !tbaa !2447
  %1665 = icmp eq i64 %1649, 0
  %1666 = zext i1 %1665 to i8
  store i8 %1666, i8* %58, align 1, !tbaa !2448
  %1667 = lshr i64 %1649, 63
  %1668 = trunc i64 %1667 to i8
  store i8 %1668, i8* %61, align 1, !tbaa !2449
  %1669 = xor i64 %1667, %1633
  %1670 = xor i64 %1667, %1648
  %1671 = add nuw nsw i64 %1669, %1670
  %1672 = icmp eq i64 %1671, 2
  %1673 = zext i1 %1672 to i8
  store i8 %1673, i8* %67, align 1, !tbaa !2450
  %1674 = add i64 %1641, -48
  %1675 = add i64 %403, 131
  store i64 %1675, i64* %PC, align 8
  %1676 = inttoptr i64 %1674 to i32*
  %1677 = load i32, i32* %1676, align 4
  %1678 = sext i32 %1677 to i64
  store i64 %1678, i64* %RCX, align 8, !tbaa !2428
  %1679 = shl nsw i64 %1678, 3
  %1680 = add i64 %1679, %1649
  %1681 = add i64 %403, 136
  store i64 %1681, i64* %PC, align 8
  %1682 = load double, double* %230, align 1
  %1683 = inttoptr i64 %1680 to double*
  %1684 = load double, double* %1683, align 8
  %1685 = fsub double %1682, %1684
  store double %1685, double* %230, align 1, !tbaa !2452
  %1686 = add i64 %1641, -96
  %1687 = add i64 %403, 140
  store i64 %1687, i64* %PC, align 8
  %1688 = inttoptr i64 %1686 to i64*
  %1689 = load i64, i64* %1688, align 8
  store i64 %1689, i64* %RAX, align 8, !tbaa !2428
  %1690 = add i64 %1641, -100
  %1691 = add i64 %403, 144
  store i64 %1691, i64* %PC, align 8
  %1692 = inttoptr i64 %1690 to i32*
  %1693 = load i32, i32* %1692, align 4
  %1694 = sext i32 %1693 to i64
  %1695 = mul nsw i64 %1694, 520
  store i64 %1695, i64* %RCX, align 8, !tbaa !2428
  %1696 = lshr i64 %1695, 63
  %1697 = add i64 %1695, %1689
  store i64 %1697, i64* %RAX, align 8, !tbaa !2428
  %1698 = icmp ult i64 %1697, %1689
  %1699 = icmp ult i64 %1697, %1695
  %1700 = or i1 %1698, %1699
  %1701 = zext i1 %1700 to i8
  store i8 %1701, i8* %43, align 1, !tbaa !2432
  %1702 = trunc i64 %1697 to i32
  %1703 = and i32 %1702, 255
  %1704 = tail call i32 @llvm.ctpop.i32(i32 %1703) #8
  %1705 = trunc i32 %1704 to i8
  %1706 = and i8 %1705, 1
  %1707 = xor i8 %1706, 1
  store i8 %1707, i8* %50, align 1, !tbaa !2446
  %1708 = xor i64 %1695, %1689
  %1709 = xor i64 %1708, %1697
  %1710 = lshr i64 %1709, 4
  %1711 = trunc i64 %1710 to i8
  %1712 = and i8 %1711, 1
  store i8 %1712, i8* %55, align 1, !tbaa !2447
  %1713 = icmp eq i64 %1697, 0
  %1714 = zext i1 %1713 to i8
  store i8 %1714, i8* %58, align 1, !tbaa !2448
  %1715 = lshr i64 %1697, 63
  %1716 = trunc i64 %1715 to i8
  store i8 %1716, i8* %61, align 1, !tbaa !2449
  %1717 = lshr i64 %1689, 63
  %1718 = xor i64 %1715, %1717
  %1719 = xor i64 %1715, %1696
  %1720 = add nuw nsw i64 %1718, %1719
  %1721 = icmp eq i64 %1720, 2
  %1722 = zext i1 %1721 to i8
  store i8 %1722, i8* %67, align 1, !tbaa !2450
  %1723 = load i64, i64* %RBP, align 8
  %1724 = add i64 %1723, -104
  %1725 = add i64 %403, 158
  store i64 %1725, i64* %PC, align 8
  %1726 = inttoptr i64 %1724 to i32*
  %1727 = load i32, i32* %1726, align 4
  %1728 = sext i32 %1727 to i64
  store i64 %1728, i64* %RCX, align 8, !tbaa !2428
  %1729 = shl nsw i64 %1728, 3
  %1730 = add i64 %1729, %1697
  %1731 = add i64 %403, 163
  store i64 %1731, i64* %PC, align 8
  %1732 = inttoptr i64 %1730 to double*
  store double %1685, double* %1732, align 8
  %1733 = load i64, i64* %RBP, align 8
  %1734 = add i64 %1733, 88
  %1735 = load i64, i64* %PC, align 8
  %1736 = add i64 %1735, 4
  store i64 %1736, i64* %PC, align 8
  %1737 = inttoptr i64 %1734 to i64*
  %1738 = load i64, i64* %1737, align 8
  store i64 %1738, i64* %RAX, align 8, !tbaa !2428
  %1739 = add i64 %1733, -52
  %1740 = add i64 %1735, 8
  store i64 %1740, i64* %PC, align 8
  %1741 = inttoptr i64 %1739 to i32*
  %1742 = load i32, i32* %1741, align 4
  %1743 = sext i32 %1742 to i64
  store i64 %1743, i64* %RCX, align 8, !tbaa !2428
  %1744 = shl nsw i64 %1743, 3
  %1745 = add i64 %1744, %1738
  %1746 = add i64 %1735, 13
  store i64 %1746, i64* %PC, align 8
  %1747 = inttoptr i64 %1745 to double*
  %1748 = load double, double* %1747, align 8
  store double %1748, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %1749 = add i64 %1733, 96
  %1750 = add i64 %1735, 17
  store i64 %1750, i64* %PC, align 8
  %1751 = inttoptr i64 %1749 to i64*
  %1752 = load i64, i64* %1751, align 8
  store i64 %1752, i64* %RAX, align 8, !tbaa !2428
  %1753 = add i64 %1735, 21
  store i64 %1753, i64* %PC, align 8
  %1754 = load i32, i32* %1741, align 4
  %1755 = sext i32 %1754 to i64
  store i64 %1755, i64* %RCX, align 8, !tbaa !2428
  %1756 = shl nsw i64 %1755, 3
  %1757 = add i64 %1756, %1752
  %1758 = add i64 %1735, 26
  store i64 %1758, i64* %PC, align 8
  %1759 = inttoptr i64 %1757 to double*
  %1760 = load double, double* %1759, align 8
  %1761 = fdiv double %1748, %1760
  store double %1761, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %1762 = add i64 %1733, 24
  %1763 = add i64 %1735, 30
  store i64 %1763, i64* %PC, align 8
  %1764 = inttoptr i64 %1762 to i64*
  %1765 = load i64, i64* %1764, align 8
  store i64 %1765, i64* %RAX, align 8, !tbaa !2428
  %1766 = add i64 %1733, -100
  %1767 = add i64 %1735, 34
  store i64 %1767, i64* %PC, align 8
  %1768 = inttoptr i64 %1766 to i32*
  %1769 = load i32, i32* %1768, align 4
  %1770 = sext i32 %1769 to i64
  %1771 = mul nsw i64 %1770, 33800
  store i64 %1771, i64* %RCX, align 8, !tbaa !2428
  %1772 = lshr i64 %1771, 63
  %1773 = add i64 %1771, %1765
  store i64 %1773, i64* %RAX, align 8, !tbaa !2428
  %1774 = icmp ult i64 %1773, %1765
  %1775 = icmp ult i64 %1773, %1771
  %1776 = or i1 %1774, %1775
  %1777 = zext i1 %1776 to i8
  store i8 %1777, i8* %43, align 1, !tbaa !2432
  %1778 = trunc i64 %1773 to i32
  %1779 = and i32 %1778, 255
  %1780 = tail call i32 @llvm.ctpop.i32(i32 %1779) #8
  %1781 = trunc i32 %1780 to i8
  %1782 = and i8 %1781, 1
  %1783 = xor i8 %1782, 1
  store i8 %1783, i8* %50, align 1, !tbaa !2446
  %1784 = xor i64 %1771, %1765
  %1785 = xor i64 %1784, %1773
  %1786 = lshr i64 %1785, 4
  %1787 = trunc i64 %1786 to i8
  %1788 = and i8 %1787, 1
  store i8 %1788, i8* %55, align 1, !tbaa !2447
  %1789 = icmp eq i64 %1773, 0
  %1790 = zext i1 %1789 to i8
  store i8 %1790, i8* %58, align 1, !tbaa !2448
  %1791 = lshr i64 %1773, 63
  %1792 = trunc i64 %1791 to i8
  store i8 %1792, i8* %61, align 1, !tbaa !2449
  %1793 = lshr i64 %1765, 63
  %1794 = xor i64 %1791, %1793
  %1795 = xor i64 %1791, %1772
  %1796 = add nuw nsw i64 %1794, %1795
  %1797 = icmp eq i64 %1796, 2
  %1798 = zext i1 %1797 to i8
  store i8 %1798, i8* %67, align 1, !tbaa !2450
  %1799 = load i64, i64* %RBP, align 8
  %1800 = add i64 %1799, -52
  %1801 = add i64 %1735, 48
  store i64 %1801, i64* %PC, align 8
  %1802 = inttoptr i64 %1800 to i32*
  %1803 = load i32, i32* %1802, align 4
  %1804 = sext i32 %1803 to i64
  %1805 = mul nsw i64 %1804, 520
  store i64 %1805, i64* %RCX, align 8, !tbaa !2428
  %1806 = lshr i64 %1805, 63
  %1807 = add i64 %1805, %1773
  store i64 %1807, i64* %RAX, align 8, !tbaa !2428
  %1808 = icmp ult i64 %1807, %1773
  %1809 = icmp ult i64 %1807, %1805
  %1810 = or i1 %1808, %1809
  %1811 = zext i1 %1810 to i8
  store i8 %1811, i8* %43, align 1, !tbaa !2432
  %1812 = trunc i64 %1807 to i32
  %1813 = and i32 %1812, 255
  %1814 = tail call i32 @llvm.ctpop.i32(i32 %1813) #8
  %1815 = trunc i32 %1814 to i8
  %1816 = and i8 %1815, 1
  %1817 = xor i8 %1816, 1
  store i8 %1817, i8* %50, align 1, !tbaa !2446
  %1818 = xor i64 %1805, %1773
  %1819 = xor i64 %1818, %1807
  %1820 = lshr i64 %1819, 4
  %1821 = trunc i64 %1820 to i8
  %1822 = and i8 %1821, 1
  store i8 %1822, i8* %55, align 1, !tbaa !2447
  %1823 = icmp eq i64 %1807, 0
  %1824 = zext i1 %1823 to i8
  store i8 %1824, i8* %58, align 1, !tbaa !2448
  %1825 = lshr i64 %1807, 63
  %1826 = trunc i64 %1825 to i8
  store i8 %1826, i8* %61, align 1, !tbaa !2449
  %1827 = xor i64 %1825, %1791
  %1828 = xor i64 %1825, %1806
  %1829 = add nuw nsw i64 %1827, %1828
  %1830 = icmp eq i64 %1829, 2
  %1831 = zext i1 %1830 to i8
  store i8 %1831, i8* %67, align 1, !tbaa !2450
  %1832 = add i64 %1799, -48
  %1833 = add i64 %1735, 62
  store i64 %1833, i64* %PC, align 8
  %1834 = inttoptr i64 %1832 to i32*
  %1835 = load i32, i32* %1834, align 4
  %1836 = sext i32 %1835 to i64
  store i64 %1836, i64* %RCX, align 8, !tbaa !2428
  %1837 = shl nsw i64 %1836, 3
  %1838 = add i64 %1837, %1807
  %1839 = add i64 %1735, 67
  store i64 %1839, i64* %PC, align 8
  %1840 = load double, double* %230, align 1
  %1841 = inttoptr i64 %1838 to double*
  %1842 = load double, double* %1841, align 8
  %1843 = fmul double %1840, %1842
  store double %1843, double* %230, align 1, !tbaa !2452
  %1844 = add i64 %1799, -72
  %1845 = add i64 %1735, 72
  store i64 %1845, i64* %PC, align 8
  %1846 = inttoptr i64 %1844 to double*
  %1847 = load double, double* %1846, align 8
  store double %1847, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %1848 = add i64 %1799, 96
  %1849 = add i64 %1735, 76
  store i64 %1849, i64* %PC, align 8
  %1850 = inttoptr i64 %1848 to i64*
  %1851 = load i64, i64* %1850, align 8
  store i64 %1851, i64* %RAX, align 8, !tbaa !2428
  %1852 = add i64 %1735, 80
  store i64 %1852, i64* %PC, align 8
  %1853 = load i32, i32* %1802, align 4
  %1854 = sext i32 %1853 to i64
  store i64 %1854, i64* %RCX, align 8, !tbaa !2428
  %1855 = shl nsw i64 %1854, 3
  %1856 = add i64 %1855, %1851
  %1857 = add i64 %1735, 85
  store i64 %1857, i64* %PC, align 8
  %1858 = inttoptr i64 %1856 to double*
  %1859 = load double, double* %1858, align 8
  %1860 = fdiv double %1847, %1859
  store double %1860, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %1861 = load i64, i64* %RBP, align 8
  %1862 = add i64 %1861, -96
  %1863 = add i64 %1735, 89
  store i64 %1863, i64* %PC, align 8
  %1864 = inttoptr i64 %1862 to i64*
  %1865 = load i64, i64* %1864, align 8
  store i64 %1865, i64* %RAX, align 8, !tbaa !2428
  %1866 = add i64 %1861, -100
  %1867 = add i64 %1735, 93
  store i64 %1867, i64* %PC, align 8
  %1868 = inttoptr i64 %1866 to i32*
  %1869 = load i32, i32* %1868, align 4
  %1870 = sext i32 %1869 to i64
  %1871 = mul nsw i64 %1870, 520
  store i64 %1871, i64* %RCX, align 8, !tbaa !2428
  %1872 = lshr i64 %1871, 63
  %1873 = add i64 %1871, %1865
  store i64 %1873, i64* %RAX, align 8, !tbaa !2428
  %1874 = icmp ult i64 %1873, %1865
  %1875 = icmp ult i64 %1873, %1871
  %1876 = or i1 %1874, %1875
  %1877 = zext i1 %1876 to i8
  store i8 %1877, i8* %43, align 1, !tbaa !2432
  %1878 = trunc i64 %1873 to i32
  %1879 = and i32 %1878, 255
  %1880 = tail call i32 @llvm.ctpop.i32(i32 %1879) #8
  %1881 = trunc i32 %1880 to i8
  %1882 = and i8 %1881, 1
  %1883 = xor i8 %1882, 1
  store i8 %1883, i8* %50, align 1, !tbaa !2446
  %1884 = xor i64 %1871, %1865
  %1885 = xor i64 %1884, %1873
  %1886 = lshr i64 %1885, 4
  %1887 = trunc i64 %1886 to i8
  %1888 = and i8 %1887, 1
  store i8 %1888, i8* %55, align 1, !tbaa !2447
  %1889 = icmp eq i64 %1873, 0
  %1890 = zext i1 %1889 to i8
  store i8 %1890, i8* %58, align 1, !tbaa !2448
  %1891 = lshr i64 %1873, 63
  %1892 = trunc i64 %1891 to i8
  store i8 %1892, i8* %61, align 1, !tbaa !2449
  %1893 = lshr i64 %1865, 63
  %1894 = xor i64 %1891, %1893
  %1895 = xor i64 %1891, %1872
  %1896 = add nuw nsw i64 %1894, %1895
  %1897 = icmp eq i64 %1896, 2
  %1898 = zext i1 %1897 to i8
  store i8 %1898, i8* %67, align 1, !tbaa !2450
  %1899 = add i64 %1861, -104
  %1900 = add i64 %1735, 107
  store i64 %1900, i64* %PC, align 8
  %1901 = inttoptr i64 %1899 to i32*
  %1902 = load i32, i32* %1901, align 4
  %1903 = sext i32 %1902 to i64
  store i64 %1903, i64* %RCX, align 8, !tbaa !2428
  %1904 = shl nsw i64 %1903, 3
  %1905 = add i64 %1904, %1873
  %1906 = add i64 %1735, 112
  store i64 %1906, i64* %PC, align 8
  %1907 = inttoptr i64 %1905 to double*
  %1908 = load double, double* %1907, align 8
  %1909 = fmul double %1860, %1908
  store double %1909, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %1910 = load double, double* %230, align 1
  %1911 = fsub double %1910, %1909
  store double %1911, double* %230, align 1, !tbaa !2452
  %1912 = add i64 %1861, 16
  %1913 = add i64 %1735, 120
  store i64 %1913, i64* %PC, align 8
  %1914 = inttoptr i64 %1912 to i64*
  %1915 = load i64, i64* %1914, align 8
  store i64 %1915, i64* %RAX, align 8, !tbaa !2428
  %1916 = load i64, i64* %RBP, align 8
  %1917 = add i64 %1916, -100
  %1918 = add i64 %1735, 124
  store i64 %1918, i64* %PC, align 8
  %1919 = inttoptr i64 %1917 to i32*
  %1920 = load i32, i32* %1919, align 4
  %1921 = sext i32 %1920 to i64
  %1922 = mul nsw i64 %1921, 520
  store i64 %1922, i64* %RCX, align 8, !tbaa !2428
  %1923 = lshr i64 %1922, 63
  %1924 = add i64 %1922, %1915
  store i64 %1924, i64* %RAX, align 8, !tbaa !2428
  %1925 = icmp ult i64 %1924, %1915
  %1926 = icmp ult i64 %1924, %1922
  %1927 = or i1 %1925, %1926
  %1928 = zext i1 %1927 to i8
  store i8 %1928, i8* %43, align 1, !tbaa !2432
  %1929 = trunc i64 %1924 to i32
  %1930 = and i32 %1929, 255
  %1931 = tail call i32 @llvm.ctpop.i32(i32 %1930) #8
  %1932 = trunc i32 %1931 to i8
  %1933 = and i8 %1932, 1
  %1934 = xor i8 %1933, 1
  store i8 %1934, i8* %50, align 1, !tbaa !2446
  %1935 = xor i64 %1922, %1915
  %1936 = xor i64 %1935, %1924
  %1937 = lshr i64 %1936, 4
  %1938 = trunc i64 %1937 to i8
  %1939 = and i8 %1938, 1
  store i8 %1939, i8* %55, align 1, !tbaa !2447
  %1940 = icmp eq i64 %1924, 0
  %1941 = zext i1 %1940 to i8
  store i8 %1941, i8* %58, align 1, !tbaa !2448
  %1942 = lshr i64 %1924, 63
  %1943 = trunc i64 %1942 to i8
  store i8 %1943, i8* %61, align 1, !tbaa !2449
  %1944 = lshr i64 %1915, 63
  %1945 = xor i64 %1942, %1944
  %1946 = xor i64 %1942, %1923
  %1947 = add nuw nsw i64 %1945, %1946
  %1948 = icmp eq i64 %1947, 2
  %1949 = zext i1 %1948 to i8
  store i8 %1949, i8* %67, align 1, !tbaa !2450
  %1950 = add i64 %1916, -104
  %1951 = add i64 %1735, 138
  store i64 %1951, i64* %PC, align 8
  %1952 = inttoptr i64 %1950 to i32*
  %1953 = load i32, i32* %1952, align 4
  %1954 = sext i32 %1953 to i64
  store i64 %1954, i64* %RCX, align 8, !tbaa !2428
  %1955 = shl nsw i64 %1954, 3
  %1956 = add i64 %1955, %1924
  %1957 = add i64 %1735, 143
  store i64 %1957, i64* %PC, align 8
  %1958 = inttoptr i64 %1956 to double*
  store double %1911, double* %1958, align 8
  %1959 = load i64, i64* %RBP, align 8
  %1960 = add i64 %1959, 72
  %1961 = load i64, i64* %PC, align 8
  %1962 = add i64 %1961, 4
  store i64 %1962, i64* %PC, align 8
  %1963 = inttoptr i64 %1960 to i64*
  %1964 = load i64, i64* %1963, align 8
  store i64 %1964, i64* %RAX, align 8, !tbaa !2428
  %1965 = add i64 %1959, -48
  %1966 = add i64 %1961, 8
  store i64 %1966, i64* %PC, align 8
  %1967 = inttoptr i64 %1965 to i32*
  %1968 = load i32, i32* %1967, align 4
  %1969 = sext i32 %1968 to i64
  store i64 %1969, i64* %RCX, align 8, !tbaa !2428
  %1970 = shl nsw i64 %1969, 3
  %1971 = add i64 %1970, %1964
  %1972 = add i64 %1961, 13
  store i64 %1972, i64* %PC, align 8
  %1973 = inttoptr i64 %1971 to double*
  %1974 = load double, double* %1973, align 8
  store double %1974, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %1975 = add i64 %1959, 80
  %1976 = add i64 %1961, 17
  store i64 %1976, i64* %PC, align 8
  %1977 = inttoptr i64 %1975 to i64*
  %1978 = load i64, i64* %1977, align 8
  store i64 %1978, i64* %RAX, align 8, !tbaa !2428
  %1979 = add i64 %1961, 21
  store i64 %1979, i64* %PC, align 8
  %1980 = load i32, i32* %1967, align 4
  %1981 = sext i32 %1980 to i64
  store i64 %1981, i64* %RCX, align 8, !tbaa !2428
  %1982 = shl nsw i64 %1981, 3
  %1983 = add i64 %1982, %1978
  %1984 = add i64 %1961, 26
  store i64 %1984, i64* %PC, align 8
  %1985 = inttoptr i64 %1983 to double*
  %1986 = load double, double* %1985, align 8
  %1987 = fdiv double %1974, %1986
  store double %1987, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %1988 = add i64 %1959, 48
  %1989 = add i64 %1961, 30
  store i64 %1989, i64* %PC, align 8
  %1990 = inttoptr i64 %1988 to i64*
  %1991 = load i64, i64* %1990, align 8
  store i64 %1991, i64* %RAX, align 8, !tbaa !2428
  %1992 = add i64 %1959, -100
  %1993 = add i64 %1961, 34
  store i64 %1993, i64* %PC, align 8
  %1994 = inttoptr i64 %1992 to i32*
  %1995 = load i32, i32* %1994, align 4
  %1996 = sext i32 %1995 to i64
  %1997 = mul nsw i64 %1996, 33800
  store i64 %1997, i64* %RCX, align 8, !tbaa !2428
  %1998 = lshr i64 %1997, 63
  %1999 = add i64 %1997, %1991
  store i64 %1999, i64* %RAX, align 8, !tbaa !2428
  %2000 = icmp ult i64 %1999, %1991
  %2001 = icmp ult i64 %1999, %1997
  %2002 = or i1 %2000, %2001
  %2003 = zext i1 %2002 to i8
  store i8 %2003, i8* %43, align 1, !tbaa !2432
  %2004 = trunc i64 %1999 to i32
  %2005 = and i32 %2004, 255
  %2006 = tail call i32 @llvm.ctpop.i32(i32 %2005) #8
  %2007 = trunc i32 %2006 to i8
  %2008 = and i8 %2007, 1
  %2009 = xor i8 %2008, 1
  store i8 %2009, i8* %50, align 1, !tbaa !2446
  %2010 = xor i64 %1997, %1991
  %2011 = xor i64 %2010, %1999
  %2012 = lshr i64 %2011, 4
  %2013 = trunc i64 %2012 to i8
  %2014 = and i8 %2013, 1
  store i8 %2014, i8* %55, align 1, !tbaa !2447
  %2015 = icmp eq i64 %1999, 0
  %2016 = zext i1 %2015 to i8
  store i8 %2016, i8* %58, align 1, !tbaa !2448
  %2017 = lshr i64 %1999, 63
  %2018 = trunc i64 %2017 to i8
  store i8 %2018, i8* %61, align 1, !tbaa !2449
  %2019 = lshr i64 %1991, 63
  %2020 = xor i64 %2017, %2019
  %2021 = xor i64 %2017, %1998
  %2022 = add nuw nsw i64 %2020, %2021
  %2023 = icmp eq i64 %2022, 2
  %2024 = zext i1 %2023 to i8
  store i8 %2024, i8* %67, align 1, !tbaa !2450
  %2025 = load i64, i64* %RBP, align 8
  %2026 = add i64 %2025, -52
  %2027 = add i64 %1961, 48
  store i64 %2027, i64* %PC, align 8
  %2028 = inttoptr i64 %2026 to i32*
  %2029 = load i32, i32* %2028, align 4
  %2030 = sext i32 %2029 to i64
  %2031 = mul nsw i64 %2030, 520
  store i64 %2031, i64* %RCX, align 8, !tbaa !2428
  %2032 = lshr i64 %2031, 63
  %2033 = add i64 %2031, %1999
  store i64 %2033, i64* %RAX, align 8, !tbaa !2428
  %2034 = icmp ult i64 %2033, %1999
  %2035 = icmp ult i64 %2033, %2031
  %2036 = or i1 %2034, %2035
  %2037 = zext i1 %2036 to i8
  store i8 %2037, i8* %43, align 1, !tbaa !2432
  %2038 = trunc i64 %2033 to i32
  %2039 = and i32 %2038, 255
  %2040 = tail call i32 @llvm.ctpop.i32(i32 %2039) #8
  %2041 = trunc i32 %2040 to i8
  %2042 = and i8 %2041, 1
  %2043 = xor i8 %2042, 1
  store i8 %2043, i8* %50, align 1, !tbaa !2446
  %2044 = xor i64 %2031, %1999
  %2045 = xor i64 %2044, %2033
  %2046 = lshr i64 %2045, 4
  %2047 = trunc i64 %2046 to i8
  %2048 = and i8 %2047, 1
  store i8 %2048, i8* %55, align 1, !tbaa !2447
  %2049 = icmp eq i64 %2033, 0
  %2050 = zext i1 %2049 to i8
  store i8 %2050, i8* %58, align 1, !tbaa !2448
  %2051 = lshr i64 %2033, 63
  %2052 = trunc i64 %2051 to i8
  store i8 %2052, i8* %61, align 1, !tbaa !2449
  %2053 = xor i64 %2051, %2017
  %2054 = xor i64 %2051, %2032
  %2055 = add nuw nsw i64 %2053, %2054
  %2056 = icmp eq i64 %2055, 2
  %2057 = zext i1 %2056 to i8
  store i8 %2057, i8* %67, align 1, !tbaa !2450
  %2058 = add i64 %2025, -48
  %2059 = add i64 %1961, 62
  store i64 %2059, i64* %PC, align 8
  %2060 = inttoptr i64 %2058 to i32*
  %2061 = load i32, i32* %2060, align 4
  %2062 = sext i32 %2061 to i64
  store i64 %2062, i64* %RCX, align 8, !tbaa !2428
  %2063 = shl nsw i64 %2062, 3
  %2064 = add i64 %2063, %2033
  %2065 = add i64 %1961, 67
  store i64 %2065, i64* %PC, align 8
  %2066 = load double, double* %230, align 1
  %2067 = inttoptr i64 %2064 to double*
  %2068 = load double, double* %2067, align 8
  %2069 = fmul double %2066, %2068
  store double %2069, double* %230, align 1, !tbaa !2452
  %2070 = add i64 %2025, -64
  %2071 = add i64 %1961, 72
  store i64 %2071, i64* %PC, align 8
  %2072 = inttoptr i64 %2070 to double*
  %2073 = load double, double* %2072, align 8
  store double %2073, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %2074 = add i64 %2025, 64
  %2075 = add i64 %1961, 76
  store i64 %2075, i64* %PC, align 8
  %2076 = inttoptr i64 %2074 to i64*
  %2077 = load i64, i64* %2076, align 8
  store i64 %2077, i64* %RAX, align 8, !tbaa !2428
  %2078 = add i64 %2025, -100
  %2079 = add i64 %1961, 80
  store i64 %2079, i64* %PC, align 8
  %2080 = inttoptr i64 %2078 to i32*
  %2081 = load i32, i32* %2080, align 4
  %2082 = sext i32 %2081 to i64
  store i64 %2082, i64* %RCX, align 8, !tbaa !2428
  %2083 = shl nsw i64 %2082, 3
  %2084 = add i64 %2083, %2077
  %2085 = add i64 %1961, 85
  store i64 %2085, i64* %PC, align 8
  %2086 = inttoptr i64 %2084 to double*
  %2087 = load double, double* %2086, align 8
  %2088 = fmul double %2073, %2087
  store double %2088, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %2089 = load i64, i64* %RBP, align 8
  %2090 = add i64 %2089, 80
  %2091 = add i64 %1961, 89
  store i64 %2091, i64* %PC, align 8
  %2092 = inttoptr i64 %2090 to i64*
  %2093 = load i64, i64* %2092, align 8
  store i64 %2093, i64* %RAX, align 8, !tbaa !2428
  %2094 = add i64 %2089, -48
  %2095 = add i64 %1961, 93
  store i64 %2095, i64* %PC, align 8
  %2096 = inttoptr i64 %2094 to i32*
  %2097 = load i32, i32* %2096, align 4
  %2098 = sext i32 %2097 to i64
  store i64 %2098, i64* %RCX, align 8, !tbaa !2428
  %2099 = shl nsw i64 %2098, 3
  %2100 = add i64 %2099, %2093
  %2101 = add i64 %1961, 98
  store i64 %2101, i64* %PC, align 8
  %2102 = inttoptr i64 %2100 to double*
  %2103 = load double, double* %2102, align 8
  %2104 = fdiv double %2088, %2103
  store double %2104, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %2105 = add i64 %2089, 16
  %2106 = add i64 %1961, 102
  store i64 %2106, i64* %PC, align 8
  %2107 = inttoptr i64 %2105 to i64*
  %2108 = load i64, i64* %2107, align 8
  store i64 %2108, i64* %RAX, align 8, !tbaa !2428
  %2109 = add i64 %2089, -100
  %2110 = add i64 %1961, 106
  store i64 %2110, i64* %PC, align 8
  %2111 = inttoptr i64 %2109 to i32*
  %2112 = load i32, i32* %2111, align 4
  %2113 = sext i32 %2112 to i64
  %2114 = mul nsw i64 %2113, 520
  store i64 %2114, i64* %RCX, align 8, !tbaa !2428
  %2115 = lshr i64 %2114, 63
  %2116 = add i64 %2114, %2108
  store i64 %2116, i64* %RAX, align 8, !tbaa !2428
  %2117 = icmp ult i64 %2116, %2108
  %2118 = icmp ult i64 %2116, %2114
  %2119 = or i1 %2117, %2118
  %2120 = zext i1 %2119 to i8
  store i8 %2120, i8* %43, align 1, !tbaa !2432
  %2121 = trunc i64 %2116 to i32
  %2122 = and i32 %2121, 255
  %2123 = tail call i32 @llvm.ctpop.i32(i32 %2122) #8
  %2124 = trunc i32 %2123 to i8
  %2125 = and i8 %2124, 1
  %2126 = xor i8 %2125, 1
  store i8 %2126, i8* %50, align 1, !tbaa !2446
  %2127 = xor i64 %2114, %2108
  %2128 = xor i64 %2127, %2116
  %2129 = lshr i64 %2128, 4
  %2130 = trunc i64 %2129 to i8
  %2131 = and i8 %2130, 1
  store i8 %2131, i8* %55, align 1, !tbaa !2447
  %2132 = icmp eq i64 %2116, 0
  %2133 = zext i1 %2132 to i8
  store i8 %2133, i8* %58, align 1, !tbaa !2448
  %2134 = lshr i64 %2116, 63
  %2135 = trunc i64 %2134 to i8
  store i8 %2135, i8* %61, align 1, !tbaa !2449
  %2136 = lshr i64 %2108, 63
  %2137 = xor i64 %2134, %2136
  %2138 = xor i64 %2134, %2115
  %2139 = add nuw nsw i64 %2137, %2138
  %2140 = icmp eq i64 %2139, 2
  %2141 = zext i1 %2140 to i8
  store i8 %2141, i8* %67, align 1, !tbaa !2450
  %2142 = add i64 %2089, -104
  %2143 = add i64 %1961, 120
  store i64 %2143, i64* %PC, align 8
  %2144 = inttoptr i64 %2142 to i32*
  %2145 = load i32, i32* %2144, align 4
  %2146 = sext i32 %2145 to i64
  store i64 %2146, i64* %RCX, align 8, !tbaa !2428
  %2147 = shl nsw i64 %2146, 3
  %2148 = add i64 %2147, %2116
  %2149 = add i64 %1961, 125
  store i64 %2149, i64* %PC, align 8
  %2150 = inttoptr i64 %2148 to double*
  %2151 = load double, double* %2150, align 8
  %2152 = fmul double %2104, %2151
  store double %2152, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %2153 = load double, double* %230, align 1
  %2154 = fadd double %2153, %2152
  store double %2154, double* %230, align 1, !tbaa !2452
  %2155 = load i64, i64* %RBP, align 8
  %2156 = add i64 %2155, -64
  %2157 = add i64 %1961, 134
  store i64 %2157, i64* %PC, align 8
  %2158 = inttoptr i64 %2156 to double*
  %2159 = load double, double* %2158, align 8
  store double %2159, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %2160 = add i64 %2155, 56
  %2161 = add i64 %1961, 138
  store i64 %2161, i64* %PC, align 8
  %2162 = inttoptr i64 %2160 to i64*
  %2163 = load i64, i64* %2162, align 8
  store i64 %2163, i64* %RAX, align 8, !tbaa !2428
  %2164 = add i64 %2155, -100
  %2165 = add i64 %1961, 142
  store i64 %2165, i64* %PC, align 8
  %2166 = inttoptr i64 %2164 to i32*
  %2167 = load i32, i32* %2166, align 4
  %2168 = sext i32 %2167 to i64
  store i64 %2168, i64* %RCX, align 8, !tbaa !2428
  %2169 = shl nsw i64 %2168, 3
  %2170 = add i64 %2169, %2163
  %2171 = add i64 %1961, 147
  store i64 %2171, i64* %PC, align 8
  %2172 = inttoptr i64 %2170 to double*
  %2173 = load double, double* %2172, align 8
  %2174 = fmul double %2159, %2173
  store double %2174, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %2175 = add i64 %2155, 80
  %2176 = add i64 %1961, 151
  store i64 %2176, i64* %PC, align 8
  %2177 = inttoptr i64 %2175 to i64*
  %2178 = load i64, i64* %2177, align 8
  store i64 %2178, i64* %RAX, align 8, !tbaa !2428
  %2179 = add i64 %2155, -48
  %2180 = add i64 %1961, 155
  store i64 %2180, i64* %PC, align 8
  %2181 = inttoptr i64 %2179 to i32*
  %2182 = load i32, i32* %2181, align 4
  %2183 = sext i32 %2182 to i64
  store i64 %2183, i64* %RCX, align 8, !tbaa !2428
  %2184 = shl nsw i64 %2183, 3
  %2185 = add i64 %2184, %2178
  %2186 = add i64 %1961, 160
  store i64 %2186, i64* %PC, align 8
  %2187 = inttoptr i64 %2185 to double*
  %2188 = load double, double* %2187, align 8
  %2189 = fdiv double %2174, %2188
  store double %2189, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %2190 = add i64 %2155, 24
  %2191 = add i64 %1961, 164
  store i64 %2191, i64* %PC, align 8
  %2192 = inttoptr i64 %2190 to i64*
  %2193 = load i64, i64* %2192, align 8
  store i64 %2193, i64* %RAX, align 8, !tbaa !2428
  %2194 = add i64 %1961, 168
  store i64 %2194, i64* %PC, align 8
  %2195 = load i32, i32* %2166, align 4
  %2196 = sext i32 %2195 to i64
  %2197 = mul nsw i64 %2196, 33800
  store i64 %2197, i64* %RCX, align 8, !tbaa !2428
  %2198 = lshr i64 %2197, 63
  %2199 = add i64 %2197, %2193
  store i64 %2199, i64* %RAX, align 8, !tbaa !2428
  %2200 = icmp ult i64 %2199, %2193
  %2201 = icmp ult i64 %2199, %2197
  %2202 = or i1 %2200, %2201
  %2203 = zext i1 %2202 to i8
  store i8 %2203, i8* %43, align 1, !tbaa !2432
  %2204 = trunc i64 %2199 to i32
  %2205 = and i32 %2204, 255
  %2206 = tail call i32 @llvm.ctpop.i32(i32 %2205) #8
  %2207 = trunc i32 %2206 to i8
  %2208 = and i8 %2207, 1
  %2209 = xor i8 %2208, 1
  store i8 %2209, i8* %50, align 1, !tbaa !2446
  %2210 = xor i64 %2197, %2193
  %2211 = xor i64 %2210, %2199
  %2212 = lshr i64 %2211, 4
  %2213 = trunc i64 %2212 to i8
  %2214 = and i8 %2213, 1
  store i8 %2214, i8* %55, align 1, !tbaa !2447
  %2215 = icmp eq i64 %2199, 0
  %2216 = zext i1 %2215 to i8
  store i8 %2216, i8* %58, align 1, !tbaa !2448
  %2217 = lshr i64 %2199, 63
  %2218 = trunc i64 %2217 to i8
  store i8 %2218, i8* %61, align 1, !tbaa !2449
  %2219 = lshr i64 %2193, 63
  %2220 = xor i64 %2217, %2219
  %2221 = xor i64 %2217, %2198
  %2222 = add nuw nsw i64 %2220, %2221
  %2223 = icmp eq i64 %2222, 2
  %2224 = zext i1 %2223 to i8
  store i8 %2224, i8* %67, align 1, !tbaa !2450
  %2225 = load i64, i64* %RBP, align 8
  %2226 = add i64 %2225, -52
  %2227 = add i64 %1961, 182
  store i64 %2227, i64* %PC, align 8
  %2228 = inttoptr i64 %2226 to i32*
  %2229 = load i32, i32* %2228, align 4
  %2230 = sext i32 %2229 to i64
  %2231 = mul nsw i64 %2230, 520
  store i64 %2231, i64* %RCX, align 8, !tbaa !2428
  %2232 = lshr i64 %2231, 63
  %2233 = add i64 %2231, %2199
  store i64 %2233, i64* %RAX, align 8, !tbaa !2428
  %2234 = icmp ult i64 %2233, %2199
  %2235 = icmp ult i64 %2233, %2231
  %2236 = or i1 %2234, %2235
  %2237 = zext i1 %2236 to i8
  store i8 %2237, i8* %43, align 1, !tbaa !2432
  %2238 = trunc i64 %2233 to i32
  %2239 = and i32 %2238, 255
  %2240 = tail call i32 @llvm.ctpop.i32(i32 %2239) #8
  %2241 = trunc i32 %2240 to i8
  %2242 = and i8 %2241, 1
  %2243 = xor i8 %2242, 1
  store i8 %2243, i8* %50, align 1, !tbaa !2446
  %2244 = xor i64 %2231, %2199
  %2245 = xor i64 %2244, %2233
  %2246 = lshr i64 %2245, 4
  %2247 = trunc i64 %2246 to i8
  %2248 = and i8 %2247, 1
  store i8 %2248, i8* %55, align 1, !tbaa !2447
  %2249 = icmp eq i64 %2233, 0
  %2250 = zext i1 %2249 to i8
  store i8 %2250, i8* %58, align 1, !tbaa !2448
  %2251 = lshr i64 %2233, 63
  %2252 = trunc i64 %2251 to i8
  store i8 %2252, i8* %61, align 1, !tbaa !2449
  %2253 = xor i64 %2251, %2217
  %2254 = xor i64 %2251, %2232
  %2255 = add nuw nsw i64 %2253, %2254
  %2256 = icmp eq i64 %2255, 2
  %2257 = zext i1 %2256 to i8
  store i8 %2257, i8* %67, align 1, !tbaa !2450
  %2258 = add i64 %2225, -48
  %2259 = add i64 %1961, 196
  store i64 %2259, i64* %PC, align 8
  %2260 = inttoptr i64 %2258 to i32*
  %2261 = load i32, i32* %2260, align 4
  %2262 = sext i32 %2261 to i64
  store i64 %2262, i64* %RCX, align 8, !tbaa !2428
  %2263 = shl nsw i64 %2262, 3
  %2264 = add i64 %2263, %2233
  %2265 = add i64 %1961, 201
  store i64 %2265, i64* %PC, align 8
  %2266 = load double, double* %233, align 1
  %2267 = inttoptr i64 %2264 to double*
  %2268 = load double, double* %2267, align 8
  %2269 = fmul double %2266, %2268
  store double %2269, double* %233, align 1, !tbaa !2452
  %2270 = load double, double* %230, align 1
  %2271 = fsub double %2270, %2269
  store double %2271, double* %230, align 1, !tbaa !2452
  %2272 = add i64 %2225, 48
  %2273 = add i64 %1961, 209
  store i64 %2273, i64* %PC, align 8
  %2274 = inttoptr i64 %2272 to i64*
  %2275 = load i64, i64* %2274, align 8
  store i64 %2275, i64* %RAX, align 8, !tbaa !2428
  %2276 = add i64 %2225, -100
  %2277 = add i64 %1961, 213
  store i64 %2277, i64* %PC, align 8
  %2278 = inttoptr i64 %2276 to i32*
  %2279 = load i32, i32* %2278, align 4
  %2280 = sext i32 %2279 to i64
  %2281 = mul nsw i64 %2280, 33800
  store i64 %2281, i64* %RCX, align 8, !tbaa !2428
  %2282 = lshr i64 %2281, 63
  %2283 = add i64 %2281, %2275
  store i64 %2283, i64* %RAX, align 8, !tbaa !2428
  %2284 = icmp ult i64 %2283, %2275
  %2285 = icmp ult i64 %2283, %2281
  %2286 = or i1 %2284, %2285
  %2287 = zext i1 %2286 to i8
  store i8 %2287, i8* %43, align 1, !tbaa !2432
  %2288 = trunc i64 %2283 to i32
  %2289 = and i32 %2288, 255
  %2290 = tail call i32 @llvm.ctpop.i32(i32 %2289) #8
  %2291 = trunc i32 %2290 to i8
  %2292 = and i8 %2291, 1
  %2293 = xor i8 %2292, 1
  store i8 %2293, i8* %50, align 1, !tbaa !2446
  %2294 = xor i64 %2281, %2275
  %2295 = xor i64 %2294, %2283
  %2296 = lshr i64 %2295, 4
  %2297 = trunc i64 %2296 to i8
  %2298 = and i8 %2297, 1
  store i8 %2298, i8* %55, align 1, !tbaa !2447
  %2299 = icmp eq i64 %2283, 0
  %2300 = zext i1 %2299 to i8
  store i8 %2300, i8* %58, align 1, !tbaa !2448
  %2301 = lshr i64 %2283, 63
  %2302 = trunc i64 %2301 to i8
  store i8 %2302, i8* %61, align 1, !tbaa !2449
  %2303 = lshr i64 %2275, 63
  %2304 = xor i64 %2301, %2303
  %2305 = xor i64 %2301, %2282
  %2306 = add nuw nsw i64 %2304, %2305
  %2307 = icmp eq i64 %2306, 2
  %2308 = zext i1 %2307 to i8
  store i8 %2308, i8* %67, align 1, !tbaa !2450
  %2309 = load i64, i64* %RBP, align 8
  %2310 = add i64 %2309, -52
  %2311 = add i64 %1961, 227
  store i64 %2311, i64* %PC, align 8
  %2312 = inttoptr i64 %2310 to i32*
  %2313 = load i32, i32* %2312, align 4
  %2314 = sext i32 %2313 to i64
  %2315 = mul nsw i64 %2314, 520
  store i64 %2315, i64* %RCX, align 8, !tbaa !2428
  %2316 = lshr i64 %2315, 63
  %2317 = add i64 %2315, %2283
  store i64 %2317, i64* %RAX, align 8, !tbaa !2428
  %2318 = icmp ult i64 %2317, %2283
  %2319 = icmp ult i64 %2317, %2315
  %2320 = or i1 %2318, %2319
  %2321 = zext i1 %2320 to i8
  store i8 %2321, i8* %43, align 1, !tbaa !2432
  %2322 = trunc i64 %2317 to i32
  %2323 = and i32 %2322, 255
  %2324 = tail call i32 @llvm.ctpop.i32(i32 %2323) #8
  %2325 = trunc i32 %2324 to i8
  %2326 = and i8 %2325, 1
  %2327 = xor i8 %2326, 1
  store i8 %2327, i8* %50, align 1, !tbaa !2446
  %2328 = xor i64 %2315, %2283
  %2329 = xor i64 %2328, %2317
  %2330 = lshr i64 %2329, 4
  %2331 = trunc i64 %2330 to i8
  %2332 = and i8 %2331, 1
  store i8 %2332, i8* %55, align 1, !tbaa !2447
  %2333 = icmp eq i64 %2317, 0
  %2334 = zext i1 %2333 to i8
  store i8 %2334, i8* %58, align 1, !tbaa !2448
  %2335 = lshr i64 %2317, 63
  %2336 = trunc i64 %2335 to i8
  store i8 %2336, i8* %61, align 1, !tbaa !2449
  %2337 = xor i64 %2335, %2301
  %2338 = xor i64 %2335, %2316
  %2339 = add nuw nsw i64 %2337, %2338
  %2340 = icmp eq i64 %2339, 2
  %2341 = zext i1 %2340 to i8
  store i8 %2341, i8* %67, align 1, !tbaa !2450
  %2342 = add i64 %2309, -48
  %2343 = add i64 %1961, 241
  store i64 %2343, i64* %PC, align 8
  %2344 = inttoptr i64 %2342 to i32*
  %2345 = load i32, i32* %2344, align 4
  %2346 = sext i32 %2345 to i64
  store i64 %2346, i64* %RCX, align 8, !tbaa !2428
  %2347 = shl nsw i64 %2346, 3
  %2348 = add i64 %2347, %2317
  %2349 = add i64 %1961, 246
  store i64 %2349, i64* %PC, align 8
  %2350 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2351 = load i64, i64* %2350, align 1
  %2352 = inttoptr i64 %2348 to i64*
  store i64 %2351, i64* %2352, align 8
  %2353 = load i64, i64* %RBP, align 8
  %2354 = add i64 %2353, 16
  %2355 = load i64, i64* %PC, align 8
  %2356 = add i64 %2355, 4
  store i64 %2356, i64* %PC, align 8
  %2357 = inttoptr i64 %2354 to i64*
  %2358 = load i64, i64* %2357, align 8
  store i64 %2358, i64* %RAX, align 8, !tbaa !2428
  %2359 = add i64 %2353, -100
  %2360 = add i64 %2355, 8
  store i64 %2360, i64* %PC, align 8
  %2361 = inttoptr i64 %2359 to i32*
  %2362 = load i32, i32* %2361, align 4
  %2363 = sext i32 %2362 to i64
  %2364 = mul nsw i64 %2363, 520
  store i64 %2364, i64* %RCX, align 8, !tbaa !2428
  %2365 = lshr i64 %2364, 63
  %2366 = add i64 %2364, %2358
  store i64 %2366, i64* %RAX, align 8, !tbaa !2428
  %2367 = icmp ult i64 %2366, %2358
  %2368 = icmp ult i64 %2366, %2364
  %2369 = or i1 %2367, %2368
  %2370 = zext i1 %2369 to i8
  store i8 %2370, i8* %43, align 1, !tbaa !2432
  %2371 = trunc i64 %2366 to i32
  %2372 = and i32 %2371, 255
  %2373 = tail call i32 @llvm.ctpop.i32(i32 %2372) #8
  %2374 = trunc i32 %2373 to i8
  %2375 = and i8 %2374, 1
  %2376 = xor i8 %2375, 1
  store i8 %2376, i8* %50, align 1, !tbaa !2446
  %2377 = xor i64 %2364, %2358
  %2378 = xor i64 %2377, %2366
  %2379 = lshr i64 %2378, 4
  %2380 = trunc i64 %2379 to i8
  %2381 = and i8 %2380, 1
  store i8 %2381, i8* %55, align 1, !tbaa !2447
  %2382 = icmp eq i64 %2366, 0
  %2383 = zext i1 %2382 to i8
  store i8 %2383, i8* %58, align 1, !tbaa !2448
  %2384 = lshr i64 %2366, 63
  %2385 = trunc i64 %2384 to i8
  store i8 %2385, i8* %61, align 1, !tbaa !2449
  %2386 = lshr i64 %2358, 63
  %2387 = xor i64 %2384, %2386
  %2388 = xor i64 %2384, %2365
  %2389 = add nuw nsw i64 %2387, %2388
  %2390 = icmp eq i64 %2389, 2
  %2391 = zext i1 %2390 to i8
  store i8 %2391, i8* %67, align 1, !tbaa !2450
  %2392 = add i64 %2353, -104
  %2393 = add i64 %2355, 22
  store i64 %2393, i64* %PC, align 8
  %2394 = inttoptr i64 %2392 to i32*
  %2395 = load i32, i32* %2394, align 4
  %2396 = sext i32 %2395 to i64
  store i64 %2396, i64* %RCX, align 8, !tbaa !2428
  %2397 = shl nsw i64 %2396, 3
  %2398 = add i64 %2397, %2366
  %2399 = add i64 %2355, 27
  store i64 %2399, i64* %PC, align 8
  %2400 = inttoptr i64 %2398 to i64*
  %2401 = load i64, i64* %2400, align 8
  %2402 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %2401, i64* %2402, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %2403 = add i64 %2353, 24
  %2404 = add i64 %2355, 31
  store i64 %2404, i64* %PC, align 8
  %2405 = inttoptr i64 %2403 to i64*
  %2406 = load i64, i64* %2405, align 8
  store i64 %2406, i64* %RAX, align 8, !tbaa !2428
  %2407 = add i64 %2355, 35
  store i64 %2407, i64* %PC, align 8
  %2408 = load i32, i32* %2361, align 4
  %2409 = sext i32 %2408 to i64
  %2410 = mul nsw i64 %2409, 33800
  store i64 %2410, i64* %RCX, align 8, !tbaa !2428
  %2411 = lshr i64 %2410, 63
  %2412 = add i64 %2410, %2406
  store i64 %2412, i64* %RAX, align 8, !tbaa !2428
  %2413 = icmp ult i64 %2412, %2406
  %2414 = icmp ult i64 %2412, %2410
  %2415 = or i1 %2413, %2414
  %2416 = zext i1 %2415 to i8
  store i8 %2416, i8* %43, align 1, !tbaa !2432
  %2417 = trunc i64 %2412 to i32
  %2418 = and i32 %2417, 255
  %2419 = tail call i32 @llvm.ctpop.i32(i32 %2418) #8
  %2420 = trunc i32 %2419 to i8
  %2421 = and i8 %2420, 1
  %2422 = xor i8 %2421, 1
  store i8 %2422, i8* %50, align 1, !tbaa !2446
  %2423 = xor i64 %2410, %2406
  %2424 = xor i64 %2423, %2412
  %2425 = lshr i64 %2424, 4
  %2426 = trunc i64 %2425 to i8
  %2427 = and i8 %2426, 1
  store i8 %2427, i8* %55, align 1, !tbaa !2447
  %2428 = icmp eq i64 %2412, 0
  %2429 = zext i1 %2428 to i8
  store i8 %2429, i8* %58, align 1, !tbaa !2448
  %2430 = lshr i64 %2412, 63
  %2431 = trunc i64 %2430 to i8
  store i8 %2431, i8* %61, align 1, !tbaa !2449
  %2432 = lshr i64 %2406, 63
  %2433 = xor i64 %2430, %2432
  %2434 = xor i64 %2430, %2411
  %2435 = add nuw nsw i64 %2433, %2434
  %2436 = icmp eq i64 %2435, 2
  %2437 = zext i1 %2436 to i8
  store i8 %2437, i8* %67, align 1, !tbaa !2450
  %2438 = load i64, i64* %RBP, align 8
  %2439 = add i64 %2438, -52
  %2440 = add i64 %2355, 49
  store i64 %2440, i64* %PC, align 8
  %2441 = inttoptr i64 %2439 to i32*
  %2442 = load i32, i32* %2441, align 4
  %2443 = sext i32 %2442 to i64
  %2444 = mul nsw i64 %2443, 520
  store i64 %2444, i64* %RCX, align 8, !tbaa !2428
  %2445 = lshr i64 %2444, 63
  %2446 = add i64 %2444, %2412
  store i64 %2446, i64* %RAX, align 8, !tbaa !2428
  %2447 = icmp ult i64 %2446, %2412
  %2448 = icmp ult i64 %2446, %2444
  %2449 = or i1 %2447, %2448
  %2450 = zext i1 %2449 to i8
  store i8 %2450, i8* %43, align 1, !tbaa !2432
  %2451 = trunc i64 %2446 to i32
  %2452 = and i32 %2451, 255
  %2453 = tail call i32 @llvm.ctpop.i32(i32 %2452) #8
  %2454 = trunc i32 %2453 to i8
  %2455 = and i8 %2454, 1
  %2456 = xor i8 %2455, 1
  store i8 %2456, i8* %50, align 1, !tbaa !2446
  %2457 = xor i64 %2444, %2412
  %2458 = xor i64 %2457, %2446
  %2459 = lshr i64 %2458, 4
  %2460 = trunc i64 %2459 to i8
  %2461 = and i8 %2460, 1
  store i8 %2461, i8* %55, align 1, !tbaa !2447
  %2462 = icmp eq i64 %2446, 0
  %2463 = zext i1 %2462 to i8
  store i8 %2463, i8* %58, align 1, !tbaa !2448
  %2464 = lshr i64 %2446, 63
  %2465 = trunc i64 %2464 to i8
  store i8 %2465, i8* %61, align 1, !tbaa !2449
  %2466 = xor i64 %2464, %2430
  %2467 = xor i64 %2464, %2445
  %2468 = add nuw nsw i64 %2466, %2467
  %2469 = icmp eq i64 %2468, 2
  %2470 = zext i1 %2469 to i8
  store i8 %2470, i8* %67, align 1, !tbaa !2450
  %2471 = add i64 %2438, -48
  %2472 = add i64 %2355, 63
  store i64 %2472, i64* %PC, align 8
  %2473 = inttoptr i64 %2471 to i32*
  %2474 = load i32, i32* %2473, align 4
  %2475 = sext i32 %2474 to i64
  store i64 %2475, i64* %RCX, align 8, !tbaa !2428
  %2476 = shl nsw i64 %2475, 3
  %2477 = add i64 %2476, %2446
  %2478 = add i64 %2355, 68
  store i64 %2478, i64* %PC, align 8
  %2479 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2480 = load i64, i64* %2479, align 1
  %2481 = inttoptr i64 %2477 to i64*
  store i64 %2480, i64* %2481, align 8
  %2482 = load i64, i64* %RBP, align 8
  %2483 = add i64 %2482, -104
  %2484 = load i64, i64* %PC, align 8
  %2485 = add i64 %2484, 3
  store i64 %2485, i64* %PC, align 8
  %2486 = inttoptr i64 %2483 to i32*
  %2487 = load i32, i32* %2486, align 4
  %2488 = add i32 %2487, 1
  %2489 = zext i32 %2488 to i64
  store i64 %2489, i64* %RAX, align 8, !tbaa !2428
  %2490 = icmp eq i32 %2487, -1
  %2491 = icmp eq i32 %2488, 0
  %2492 = or i1 %2490, %2491
  %2493 = zext i1 %2492 to i8
  store i8 %2493, i8* %43, align 1, !tbaa !2432
  %2494 = and i32 %2488, 255
  %2495 = tail call i32 @llvm.ctpop.i32(i32 %2494) #8
  %2496 = trunc i32 %2495 to i8
  %2497 = and i8 %2496, 1
  %2498 = xor i8 %2497, 1
  store i8 %2498, i8* %50, align 1, !tbaa !2446
  %2499 = xor i32 %2487, %2488
  %2500 = lshr i32 %2499, 4
  %2501 = trunc i32 %2500 to i8
  %2502 = and i8 %2501, 1
  store i8 %2502, i8* %55, align 1, !tbaa !2447
  %2503 = icmp eq i32 %2488, 0
  %2504 = zext i1 %2503 to i8
  store i8 %2504, i8* %58, align 1, !tbaa !2448
  %2505 = lshr i32 %2488, 31
  %2506 = trunc i32 %2505 to i8
  store i8 %2506, i8* %61, align 1, !tbaa !2449
  %2507 = lshr i32 %2487, 31
  %2508 = xor i32 %2505, %2507
  %2509 = add nuw nsw i32 %2508, %2505
  %2510 = icmp eq i32 %2509, 2
  %2511 = zext i1 %2510 to i8
  store i8 %2511, i8* %67, align 1, !tbaa !2450
  %2512 = add i64 %2484, 9
  store i64 %2512, i64* %PC, align 8
  store i32 %2488, i32* %2486, align 4
  %2513 = load i64, i64* %PC, align 8
  %2514 = add i64 %2513, -2643
  store i64 %2514, i64* %229, align 8, !tbaa !2428
  br label %block_40148d

block_4019de:                                     ; preds = %block_4019d2
  %2515 = add i64 %441, -108
  %2516 = add i64 %403, 36
  store i64 %2516, i64* %PC, align 8
  %2517 = inttoptr i64 %2515 to i32*
  %2518 = load i32, i32* %2517, align 4
  %2519 = sext i32 %2518 to i64
  store i64 %2519, i64* %RCX, align 8, !tbaa !2428
  %2520 = shl nsw i64 %2519, 3
  %2521 = add i64 %2520, %450
  %2522 = add i64 %403, 41
  store i64 %2522, i64* %PC, align 8
  %2523 = inttoptr i64 %2521 to double*
  %2524 = load double, double* %2523, align 8
  store double %2524, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %2525 = add i64 %441, -80
  %2526 = add i64 %403, 45
  store i64 %2526, i64* %PC, align 8
  %2527 = inttoptr i64 %2525 to i64*
  %2528 = load i64, i64* %2527, align 8
  store i64 %2528, i64* %RAX, align 8, !tbaa !2428
  %2529 = add i64 %441, -100
  %2530 = add i64 %403, 49
  store i64 %2530, i64* %PC, align 8
  %2531 = inttoptr i64 %2529 to i32*
  %2532 = load i32, i32* %2531, align 4
  %2533 = sext i32 %2532 to i64
  %2534 = mul nsw i64 %2533, 520
  store i64 %2534, i64* %RCX, align 8, !tbaa !2428
  %2535 = lshr i64 %2534, 63
  %2536 = add i64 %2534, %2528
  store i64 %2536, i64* %RAX, align 8, !tbaa !2428
  %2537 = icmp ult i64 %2536, %2528
  %2538 = icmp ult i64 %2536, %2534
  %2539 = or i1 %2537, %2538
  %2540 = zext i1 %2539 to i8
  store i8 %2540, i8* %43, align 1, !tbaa !2432
  %2541 = trunc i64 %2536 to i32
  %2542 = and i32 %2541, 255
  %2543 = tail call i32 @llvm.ctpop.i32(i32 %2542) #8
  %2544 = trunc i32 %2543 to i8
  %2545 = and i8 %2544, 1
  %2546 = xor i8 %2545, 1
  store i8 %2546, i8* %50, align 1, !tbaa !2446
  %2547 = xor i64 %2534, %2528
  %2548 = xor i64 %2547, %2536
  %2549 = lshr i64 %2548, 4
  %2550 = trunc i64 %2549 to i8
  %2551 = and i8 %2550, 1
  store i8 %2551, i8* %55, align 1, !tbaa !2447
  %2552 = icmp eq i64 %2536, 0
  %2553 = zext i1 %2552 to i8
  store i8 %2553, i8* %58, align 1, !tbaa !2448
  %2554 = lshr i64 %2536, 63
  %2555 = trunc i64 %2554 to i8
  store i8 %2555, i8* %61, align 1, !tbaa !2449
  %2556 = lshr i64 %2528, 63
  %2557 = xor i64 %2554, %2556
  %2558 = xor i64 %2554, %2535
  %2559 = add nuw nsw i64 %2557, %2558
  %2560 = icmp eq i64 %2559, 2
  %2561 = zext i1 %2560 to i8
  store i8 %2561, i8* %67, align 1, !tbaa !2450
  %2562 = add i64 %403, 63
  store i64 %2562, i64* %PC, align 8
  %2563 = load i32, i32* %2517, align 4
  %2564 = sext i32 %2563 to i64
  store i64 %2564, i64* %RCX, align 8, !tbaa !2428
  %2565 = shl nsw i64 %2564, 3
  %2566 = add i64 %2565, %2536
  %2567 = add i64 %403, 68
  store i64 %2567, i64* %PC, align 8
  %2568 = inttoptr i64 %2566 to double*
  %2569 = load double, double* %2568, align 8
  %2570 = fsub double %2524, %2569
  store double %2570, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %2571 = load i64, i64* %RBP, align 8
  %2572 = add i64 %2571, 40
  %2573 = add i64 %403, 72
  store i64 %2573, i64* %PC, align 8
  %2574 = inttoptr i64 %2572 to i64*
  %2575 = load i64, i64* %2574, align 8
  store i64 %2575, i64* %RAX, align 8, !tbaa !2428
  %2576 = add i64 %2571, -100
  %2577 = add i64 %403, 76
  store i64 %2577, i64* %PC, align 8
  %2578 = inttoptr i64 %2576 to i32*
  %2579 = load i32, i32* %2578, align 4
  %2580 = sext i32 %2579 to i64
  %2581 = mul nsw i64 %2580, 33800
  store i64 %2581, i64* %RCX, align 8, !tbaa !2428
  %2582 = lshr i64 %2581, 63
  %2583 = add i64 %2581, %2575
  store i64 %2583, i64* %RAX, align 8, !tbaa !2428
  %2584 = icmp ult i64 %2583, %2575
  %2585 = icmp ult i64 %2583, %2581
  %2586 = or i1 %2584, %2585
  %2587 = zext i1 %2586 to i8
  store i8 %2587, i8* %43, align 1, !tbaa !2432
  %2588 = trunc i64 %2583 to i32
  %2589 = and i32 %2588, 255
  %2590 = tail call i32 @llvm.ctpop.i32(i32 %2589) #8
  %2591 = trunc i32 %2590 to i8
  %2592 = and i8 %2591, 1
  %2593 = xor i8 %2592, 1
  store i8 %2593, i8* %50, align 1, !tbaa !2446
  %2594 = xor i64 %2581, %2575
  %2595 = xor i64 %2594, %2583
  %2596 = lshr i64 %2595, 4
  %2597 = trunc i64 %2596 to i8
  %2598 = and i8 %2597, 1
  store i8 %2598, i8* %55, align 1, !tbaa !2447
  %2599 = icmp eq i64 %2583, 0
  %2600 = zext i1 %2599 to i8
  store i8 %2600, i8* %58, align 1, !tbaa !2448
  %2601 = lshr i64 %2583, 63
  %2602 = trunc i64 %2601 to i8
  store i8 %2602, i8* %61, align 1, !tbaa !2449
  %2603 = lshr i64 %2575, 63
  %2604 = xor i64 %2601, %2603
  %2605 = xor i64 %2601, %2582
  %2606 = add nuw nsw i64 %2604, %2605
  %2607 = icmp eq i64 %2606, 2
  %2608 = zext i1 %2607 to i8
  store i8 %2608, i8* %67, align 1, !tbaa !2450
  %2609 = add i64 %2571, -52
  %2610 = add i64 %403, 90
  store i64 %2610, i64* %PC, align 8
  %2611 = inttoptr i64 %2609 to i32*
  %2612 = load i32, i32* %2611, align 4
  %2613 = sext i32 %2612 to i64
  %2614 = mul nsw i64 %2613, 520
  store i64 %2614, i64* %RCX, align 8, !tbaa !2428
  %2615 = lshr i64 %2614, 63
  %2616 = add i64 %2614, %2583
  store i64 %2616, i64* %RAX, align 8, !tbaa !2428
  %2617 = icmp ult i64 %2616, %2583
  %2618 = icmp ult i64 %2616, %2614
  %2619 = or i1 %2617, %2618
  %2620 = zext i1 %2619 to i8
  store i8 %2620, i8* %43, align 1, !tbaa !2432
  %2621 = trunc i64 %2616 to i32
  %2622 = and i32 %2621, 255
  %2623 = tail call i32 @llvm.ctpop.i32(i32 %2622) #8
  %2624 = trunc i32 %2623 to i8
  %2625 = and i8 %2624, 1
  %2626 = xor i8 %2625, 1
  store i8 %2626, i8* %50, align 1, !tbaa !2446
  %2627 = xor i64 %2614, %2583
  %2628 = xor i64 %2627, %2616
  %2629 = lshr i64 %2628, 4
  %2630 = trunc i64 %2629 to i8
  %2631 = and i8 %2630, 1
  store i8 %2631, i8* %55, align 1, !tbaa !2447
  %2632 = icmp eq i64 %2616, 0
  %2633 = zext i1 %2632 to i8
  store i8 %2633, i8* %58, align 1, !tbaa !2448
  %2634 = lshr i64 %2616, 63
  %2635 = trunc i64 %2634 to i8
  store i8 %2635, i8* %61, align 1, !tbaa !2449
  %2636 = xor i64 %2634, %2601
  %2637 = xor i64 %2634, %2615
  %2638 = add nuw nsw i64 %2636, %2637
  %2639 = icmp eq i64 %2638, 2
  %2640 = zext i1 %2639 to i8
  store i8 %2640, i8* %67, align 1, !tbaa !2450
  %2641 = load i64, i64* %RBP, align 8
  %2642 = add i64 %2641, -108
  %2643 = add i64 %403, 103
  store i64 %2643, i64* %PC, align 8
  %2644 = inttoptr i64 %2642 to i32*
  %2645 = load i32, i32* %2644, align 4
  %2646 = add i32 %2645, 1
  %2647 = zext i32 %2646 to i64
  store i64 %2647, i64* %RDX, align 8, !tbaa !2428
  %2648 = icmp eq i32 %2645, -1
  %2649 = icmp eq i32 %2646, 0
  %2650 = or i1 %2648, %2649
  %2651 = zext i1 %2650 to i8
  store i8 %2651, i8* %43, align 1, !tbaa !2432
  %2652 = and i32 %2646, 255
  %2653 = tail call i32 @llvm.ctpop.i32(i32 %2652) #8
  %2654 = trunc i32 %2653 to i8
  %2655 = and i8 %2654, 1
  %2656 = xor i8 %2655, 1
  store i8 %2656, i8* %50, align 1, !tbaa !2446
  %2657 = xor i32 %2645, %2646
  %2658 = lshr i32 %2657, 4
  %2659 = trunc i32 %2658 to i8
  %2660 = and i8 %2659, 1
  store i8 %2660, i8* %55, align 1, !tbaa !2447
  %2661 = icmp eq i32 %2646, 0
  %2662 = zext i1 %2661 to i8
  store i8 %2662, i8* %58, align 1, !tbaa !2448
  %2663 = lshr i32 %2646, 31
  %2664 = trunc i32 %2663 to i8
  store i8 %2664, i8* %61, align 1, !tbaa !2449
  %2665 = lshr i32 %2645, 31
  %2666 = xor i32 %2663, %2665
  %2667 = add nuw nsw i32 %2666, %2663
  %2668 = icmp eq i32 %2667, 2
  %2669 = zext i1 %2668 to i8
  store i8 %2669, i8* %67, align 1, !tbaa !2450
  %2670 = sext i32 %2646 to i64
  store i64 %2670, i64* %RCX, align 8, !tbaa !2428
  %2671 = shl nsw i64 %2670, 3
  %2672 = add i64 %2671, %2616
  %2673 = add i64 %403, 114
  store i64 %2673, i64* %PC, align 8
  %2674 = load double, double* %230, align 1
  %2675 = inttoptr i64 %2672 to double*
  %2676 = load double, double* %2675, align 8
  %2677 = fadd double %2674, %2676
  store double %2677, double* %230, align 1, !tbaa !2452
  %2678 = add i64 %2641, 40
  %2679 = add i64 %403, 118
  store i64 %2679, i64* %PC, align 8
  %2680 = inttoptr i64 %2678 to i64*
  %2681 = load i64, i64* %2680, align 8
  store i64 %2681, i64* %RAX, align 8, !tbaa !2428
  %2682 = add i64 %2641, -100
  %2683 = add i64 %403, 122
  store i64 %2683, i64* %PC, align 8
  %2684 = inttoptr i64 %2682 to i32*
  %2685 = load i32, i32* %2684, align 4
  %2686 = sext i32 %2685 to i64
  %2687 = mul nsw i64 %2686, 33800
  store i64 %2687, i64* %RCX, align 8, !tbaa !2428
  %2688 = lshr i64 %2687, 63
  %2689 = add i64 %2687, %2681
  store i64 %2689, i64* %RAX, align 8, !tbaa !2428
  %2690 = icmp ult i64 %2689, %2681
  %2691 = icmp ult i64 %2689, %2687
  %2692 = or i1 %2690, %2691
  %2693 = zext i1 %2692 to i8
  store i8 %2693, i8* %43, align 1, !tbaa !2432
  %2694 = trunc i64 %2689 to i32
  %2695 = and i32 %2694, 255
  %2696 = tail call i32 @llvm.ctpop.i32(i32 %2695) #8
  %2697 = trunc i32 %2696 to i8
  %2698 = and i8 %2697, 1
  %2699 = xor i8 %2698, 1
  store i8 %2699, i8* %50, align 1, !tbaa !2446
  %2700 = xor i64 %2687, %2681
  %2701 = xor i64 %2700, %2689
  %2702 = lshr i64 %2701, 4
  %2703 = trunc i64 %2702 to i8
  %2704 = and i8 %2703, 1
  store i8 %2704, i8* %55, align 1, !tbaa !2447
  %2705 = icmp eq i64 %2689, 0
  %2706 = zext i1 %2705 to i8
  store i8 %2706, i8* %58, align 1, !tbaa !2448
  %2707 = lshr i64 %2689, 63
  %2708 = trunc i64 %2707 to i8
  store i8 %2708, i8* %61, align 1, !tbaa !2449
  %2709 = lshr i64 %2681, 63
  %2710 = xor i64 %2707, %2709
  %2711 = xor i64 %2707, %2688
  %2712 = add nuw nsw i64 %2710, %2711
  %2713 = icmp eq i64 %2712, 2
  %2714 = zext i1 %2713 to i8
  store i8 %2714, i8* %67, align 1, !tbaa !2450
  %2715 = load i64, i64* %RBP, align 8
  %2716 = add i64 %2715, -52
  %2717 = add i64 %403, 136
  store i64 %2717, i64* %PC, align 8
  %2718 = inttoptr i64 %2716 to i32*
  %2719 = load i32, i32* %2718, align 4
  %2720 = sext i32 %2719 to i64
  %2721 = mul nsw i64 %2720, 520
  store i64 %2721, i64* %RCX, align 8, !tbaa !2428
  %2722 = lshr i64 %2721, 63
  %2723 = add i64 %2721, %2689
  store i64 %2723, i64* %RAX, align 8, !tbaa !2428
  %2724 = icmp ult i64 %2723, %2689
  %2725 = icmp ult i64 %2723, %2721
  %2726 = or i1 %2724, %2725
  %2727 = zext i1 %2726 to i8
  store i8 %2727, i8* %43, align 1, !tbaa !2432
  %2728 = trunc i64 %2723 to i32
  %2729 = and i32 %2728, 255
  %2730 = tail call i32 @llvm.ctpop.i32(i32 %2729) #8
  %2731 = trunc i32 %2730 to i8
  %2732 = and i8 %2731, 1
  %2733 = xor i8 %2732, 1
  store i8 %2733, i8* %50, align 1, !tbaa !2446
  %2734 = xor i64 %2721, %2689
  %2735 = xor i64 %2734, %2723
  %2736 = lshr i64 %2735, 4
  %2737 = trunc i64 %2736 to i8
  %2738 = and i8 %2737, 1
  store i8 %2738, i8* %55, align 1, !tbaa !2447
  %2739 = icmp eq i64 %2723, 0
  %2740 = zext i1 %2739 to i8
  store i8 %2740, i8* %58, align 1, !tbaa !2448
  %2741 = lshr i64 %2723, 63
  %2742 = trunc i64 %2741 to i8
  store i8 %2742, i8* %61, align 1, !tbaa !2449
  %2743 = xor i64 %2741, %2707
  %2744 = xor i64 %2741, %2722
  %2745 = add nuw nsw i64 %2743, %2744
  %2746 = icmp eq i64 %2745, 2
  %2747 = zext i1 %2746 to i8
  store i8 %2747, i8* %67, align 1, !tbaa !2450
  %2748 = add i64 %2715, -108
  %2749 = add i64 %403, 150
  store i64 %2749, i64* %PC, align 8
  %2750 = inttoptr i64 %2748 to i32*
  %2751 = load i32, i32* %2750, align 4
  %2752 = sext i32 %2751 to i64
  store i64 %2752, i64* %RCX, align 8, !tbaa !2428
  %2753 = shl nsw i64 %2752, 3
  %2754 = add i64 %2753, %2723
  %2755 = add i64 %403, 155
  store i64 %2755, i64* %PC, align 8
  %2756 = load double, double* %230, align 1
  %2757 = inttoptr i64 %2754 to double*
  %2758 = load double, double* %2757, align 8
  %2759 = fsub double %2756, %2758
  store double %2759, double* %230, align 1, !tbaa !2452
  %2760 = add i64 %2715, -96
  %2761 = add i64 %403, 159
  store i64 %2761, i64* %PC, align 8
  %2762 = inttoptr i64 %2760 to i64*
  %2763 = load i64, i64* %2762, align 8
  store i64 %2763, i64* %RAX, align 8, !tbaa !2428
  %2764 = add i64 %2715, -100
  %2765 = add i64 %403, 163
  store i64 %2765, i64* %PC, align 8
  %2766 = inttoptr i64 %2764 to i32*
  %2767 = load i32, i32* %2766, align 4
  %2768 = sext i32 %2767 to i64
  %2769 = mul nsw i64 %2768, 520
  store i64 %2769, i64* %RCX, align 8, !tbaa !2428
  %2770 = lshr i64 %2769, 63
  %2771 = add i64 %2769, %2763
  store i64 %2771, i64* %RAX, align 8, !tbaa !2428
  %2772 = icmp ult i64 %2771, %2763
  %2773 = icmp ult i64 %2771, %2769
  %2774 = or i1 %2772, %2773
  %2775 = zext i1 %2774 to i8
  store i8 %2775, i8* %43, align 1, !tbaa !2432
  %2776 = trunc i64 %2771 to i32
  %2777 = and i32 %2776, 255
  %2778 = tail call i32 @llvm.ctpop.i32(i32 %2777) #8
  %2779 = trunc i32 %2778 to i8
  %2780 = and i8 %2779, 1
  %2781 = xor i8 %2780, 1
  store i8 %2781, i8* %50, align 1, !tbaa !2446
  %2782 = xor i64 %2769, %2763
  %2783 = xor i64 %2782, %2771
  %2784 = lshr i64 %2783, 4
  %2785 = trunc i64 %2784 to i8
  %2786 = and i8 %2785, 1
  store i8 %2786, i8* %55, align 1, !tbaa !2447
  %2787 = icmp eq i64 %2771, 0
  %2788 = zext i1 %2787 to i8
  store i8 %2788, i8* %58, align 1, !tbaa !2448
  %2789 = lshr i64 %2771, 63
  %2790 = trunc i64 %2789 to i8
  store i8 %2790, i8* %61, align 1, !tbaa !2449
  %2791 = lshr i64 %2763, 63
  %2792 = xor i64 %2789, %2791
  %2793 = xor i64 %2789, %2770
  %2794 = add nuw nsw i64 %2792, %2793
  %2795 = icmp eq i64 %2794, 2
  %2796 = zext i1 %2795 to i8
  store i8 %2796, i8* %67, align 1, !tbaa !2450
  %2797 = load i64, i64* %RBP, align 8
  %2798 = add i64 %2797, -104
  %2799 = add i64 %403, 177
  store i64 %2799, i64* %PC, align 8
  %2800 = inttoptr i64 %2798 to i32*
  %2801 = load i32, i32* %2800, align 4
  %2802 = sext i32 %2801 to i64
  store i64 %2802, i64* %RCX, align 8, !tbaa !2428
  %2803 = shl nsw i64 %2802, 3
  %2804 = add i64 %2803, %2771
  %2805 = add i64 %403, 182
  store i64 %2805, i64* %PC, align 8
  %2806 = inttoptr i64 %2804 to double*
  store double %2759, double* %2806, align 8
  %2807 = load i64, i64* %RBP, align 8
  %2808 = add i64 %2807, 88
  %2809 = load i64, i64* %PC, align 8
  %2810 = add i64 %2809, 4
  store i64 %2810, i64* %PC, align 8
  %2811 = inttoptr i64 %2808 to i64*
  %2812 = load i64, i64* %2811, align 8
  store i64 %2812, i64* %RAX, align 8, !tbaa !2428
  %2813 = add i64 %2807, -52
  %2814 = add i64 %2809, 8
  store i64 %2814, i64* %PC, align 8
  %2815 = inttoptr i64 %2813 to i32*
  %2816 = load i32, i32* %2815, align 4
  %2817 = sext i32 %2816 to i64
  store i64 %2817, i64* %RCX, align 8, !tbaa !2428
  %2818 = shl nsw i64 %2817, 3
  %2819 = add i64 %2818, %2812
  %2820 = add i64 %2809, 13
  store i64 %2820, i64* %PC, align 8
  %2821 = inttoptr i64 %2819 to double*
  %2822 = load double, double* %2821, align 8
  store double %2822, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %2823 = add i64 %2807, 96
  %2824 = add i64 %2809, 17
  store i64 %2824, i64* %PC, align 8
  %2825 = inttoptr i64 %2823 to i64*
  %2826 = load i64, i64* %2825, align 8
  store i64 %2826, i64* %RAX, align 8, !tbaa !2428
  %2827 = add i64 %2807, -104
  %2828 = add i64 %2809, 21
  store i64 %2828, i64* %PC, align 8
  %2829 = inttoptr i64 %2827 to i32*
  %2830 = load i32, i32* %2829, align 4
  %2831 = sext i32 %2830 to i64
  store i64 %2831, i64* %RCX, align 8, !tbaa !2428
  %2832 = shl nsw i64 %2831, 3
  %2833 = add i64 %2832, %2826
  %2834 = add i64 %2809, 26
  store i64 %2834, i64* %PC, align 8
  %2835 = inttoptr i64 %2833 to double*
  %2836 = load double, double* %2835, align 8
  %2837 = fdiv double %2822, %2836
  store double %2837, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %2838 = add i64 %2807, 24
  %2839 = add i64 %2809, 30
  store i64 %2839, i64* %PC, align 8
  %2840 = inttoptr i64 %2838 to i64*
  %2841 = load i64, i64* %2840, align 8
  store i64 %2841, i64* %RAX, align 8, !tbaa !2428
  %2842 = add i64 %2807, -100
  %2843 = add i64 %2809, 34
  store i64 %2843, i64* %PC, align 8
  %2844 = inttoptr i64 %2842 to i32*
  %2845 = load i32, i32* %2844, align 4
  %2846 = sext i32 %2845 to i64
  %2847 = mul nsw i64 %2846, 33800
  store i64 %2847, i64* %RCX, align 8, !tbaa !2428
  %2848 = lshr i64 %2847, 63
  %2849 = add i64 %2847, %2841
  store i64 %2849, i64* %RAX, align 8, !tbaa !2428
  %2850 = icmp ult i64 %2849, %2841
  %2851 = icmp ult i64 %2849, %2847
  %2852 = or i1 %2850, %2851
  %2853 = zext i1 %2852 to i8
  store i8 %2853, i8* %43, align 1, !tbaa !2432
  %2854 = trunc i64 %2849 to i32
  %2855 = and i32 %2854, 255
  %2856 = tail call i32 @llvm.ctpop.i32(i32 %2855) #8
  %2857 = trunc i32 %2856 to i8
  %2858 = and i8 %2857, 1
  %2859 = xor i8 %2858, 1
  store i8 %2859, i8* %50, align 1, !tbaa !2446
  %2860 = xor i64 %2847, %2841
  %2861 = xor i64 %2860, %2849
  %2862 = lshr i64 %2861, 4
  %2863 = trunc i64 %2862 to i8
  %2864 = and i8 %2863, 1
  store i8 %2864, i8* %55, align 1, !tbaa !2447
  %2865 = icmp eq i64 %2849, 0
  %2866 = zext i1 %2865 to i8
  store i8 %2866, i8* %58, align 1, !tbaa !2448
  %2867 = lshr i64 %2849, 63
  %2868 = trunc i64 %2867 to i8
  store i8 %2868, i8* %61, align 1, !tbaa !2449
  %2869 = lshr i64 %2841, 63
  %2870 = xor i64 %2867, %2869
  %2871 = xor i64 %2867, %2848
  %2872 = add nuw nsw i64 %2870, %2871
  %2873 = icmp eq i64 %2872, 2
  %2874 = zext i1 %2873 to i8
  store i8 %2874, i8* %67, align 1, !tbaa !2450
  %2875 = load i64, i64* %RBP, align 8
  %2876 = add i64 %2875, -104
  %2877 = add i64 %2809, 48
  store i64 %2877, i64* %PC, align 8
  %2878 = inttoptr i64 %2876 to i32*
  %2879 = load i32, i32* %2878, align 4
  %2880 = sext i32 %2879 to i64
  %2881 = mul nsw i64 %2880, 520
  store i64 %2881, i64* %RCX, align 8, !tbaa !2428
  %2882 = lshr i64 %2881, 63
  %2883 = add i64 %2881, %2849
  store i64 %2883, i64* %RAX, align 8, !tbaa !2428
  %2884 = icmp ult i64 %2883, %2849
  %2885 = icmp ult i64 %2883, %2881
  %2886 = or i1 %2884, %2885
  %2887 = zext i1 %2886 to i8
  store i8 %2887, i8* %43, align 1, !tbaa !2432
  %2888 = trunc i64 %2883 to i32
  %2889 = and i32 %2888, 255
  %2890 = tail call i32 @llvm.ctpop.i32(i32 %2889) #8
  %2891 = trunc i32 %2890 to i8
  %2892 = and i8 %2891, 1
  %2893 = xor i8 %2892, 1
  store i8 %2893, i8* %50, align 1, !tbaa !2446
  %2894 = xor i64 %2881, %2849
  %2895 = xor i64 %2894, %2883
  %2896 = lshr i64 %2895, 4
  %2897 = trunc i64 %2896 to i8
  %2898 = and i8 %2897, 1
  store i8 %2898, i8* %55, align 1, !tbaa !2447
  %2899 = icmp eq i64 %2883, 0
  %2900 = zext i1 %2899 to i8
  store i8 %2900, i8* %58, align 1, !tbaa !2448
  %2901 = lshr i64 %2883, 63
  %2902 = trunc i64 %2901 to i8
  store i8 %2902, i8* %61, align 1, !tbaa !2449
  %2903 = xor i64 %2901, %2867
  %2904 = xor i64 %2901, %2882
  %2905 = add nuw nsw i64 %2903, %2904
  %2906 = icmp eq i64 %2905, 2
  %2907 = zext i1 %2906 to i8
  store i8 %2907, i8* %67, align 1, !tbaa !2450
  %2908 = add i64 %2875, -108
  %2909 = add i64 %2809, 62
  store i64 %2909, i64* %PC, align 8
  %2910 = inttoptr i64 %2908 to i32*
  %2911 = load i32, i32* %2910, align 4
  %2912 = sext i32 %2911 to i64
  store i64 %2912, i64* %RCX, align 8, !tbaa !2428
  %2913 = shl nsw i64 %2912, 3
  %2914 = add i64 %2913, %2883
  %2915 = add i64 %2809, 67
  store i64 %2915, i64* %PC, align 8
  %2916 = load double, double* %230, align 1
  %2917 = inttoptr i64 %2914 to double*
  %2918 = load double, double* %2917, align 8
  %2919 = fmul double %2916, %2918
  store double %2919, double* %230, align 1, !tbaa !2452
  %2920 = add i64 %2875, -72
  %2921 = add i64 %2809, 72
  store i64 %2921, i64* %PC, align 8
  %2922 = inttoptr i64 %2920 to double*
  %2923 = load double, double* %2922, align 8
  store double %2923, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %2924 = add i64 %2875, 96
  %2925 = add i64 %2809, 76
  store i64 %2925, i64* %PC, align 8
  %2926 = inttoptr i64 %2924 to i64*
  %2927 = load i64, i64* %2926, align 8
  store i64 %2927, i64* %RAX, align 8, !tbaa !2428
  %2928 = add i64 %2809, 80
  store i64 %2928, i64* %PC, align 8
  %2929 = load i32, i32* %2878, align 4
  %2930 = sext i32 %2929 to i64
  store i64 %2930, i64* %RCX, align 8, !tbaa !2428
  %2931 = shl nsw i64 %2930, 3
  %2932 = add i64 %2931, %2927
  %2933 = add i64 %2809, 85
  store i64 %2933, i64* %PC, align 8
  %2934 = inttoptr i64 %2932 to double*
  %2935 = load double, double* %2934, align 8
  %2936 = fdiv double %2923, %2935
  store double %2936, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %2937 = load i64, i64* %RBP, align 8
  %2938 = add i64 %2937, -96
  %2939 = add i64 %2809, 89
  store i64 %2939, i64* %PC, align 8
  %2940 = inttoptr i64 %2938 to i64*
  %2941 = load i64, i64* %2940, align 8
  store i64 %2941, i64* %RAX, align 8, !tbaa !2428
  %2942 = add i64 %2937, -100
  %2943 = add i64 %2809, 93
  store i64 %2943, i64* %PC, align 8
  %2944 = inttoptr i64 %2942 to i32*
  %2945 = load i32, i32* %2944, align 4
  %2946 = sext i32 %2945 to i64
  %2947 = mul nsw i64 %2946, 520
  store i64 %2947, i64* %RCX, align 8, !tbaa !2428
  %2948 = lshr i64 %2947, 63
  %2949 = add i64 %2947, %2941
  store i64 %2949, i64* %RAX, align 8, !tbaa !2428
  %2950 = icmp ult i64 %2949, %2941
  %2951 = icmp ult i64 %2949, %2947
  %2952 = or i1 %2950, %2951
  %2953 = zext i1 %2952 to i8
  store i8 %2953, i8* %43, align 1, !tbaa !2432
  %2954 = trunc i64 %2949 to i32
  %2955 = and i32 %2954, 255
  %2956 = tail call i32 @llvm.ctpop.i32(i32 %2955) #8
  %2957 = trunc i32 %2956 to i8
  %2958 = and i8 %2957, 1
  %2959 = xor i8 %2958, 1
  store i8 %2959, i8* %50, align 1, !tbaa !2446
  %2960 = xor i64 %2947, %2941
  %2961 = xor i64 %2960, %2949
  %2962 = lshr i64 %2961, 4
  %2963 = trunc i64 %2962 to i8
  %2964 = and i8 %2963, 1
  store i8 %2964, i8* %55, align 1, !tbaa !2447
  %2965 = icmp eq i64 %2949, 0
  %2966 = zext i1 %2965 to i8
  store i8 %2966, i8* %58, align 1, !tbaa !2448
  %2967 = lshr i64 %2949, 63
  %2968 = trunc i64 %2967 to i8
  store i8 %2968, i8* %61, align 1, !tbaa !2449
  %2969 = lshr i64 %2941, 63
  %2970 = xor i64 %2967, %2969
  %2971 = xor i64 %2967, %2948
  %2972 = add nuw nsw i64 %2970, %2971
  %2973 = icmp eq i64 %2972, 2
  %2974 = zext i1 %2973 to i8
  store i8 %2974, i8* %67, align 1, !tbaa !2450
  %2975 = add i64 %2937, -104
  %2976 = add i64 %2809, 107
  store i64 %2976, i64* %PC, align 8
  %2977 = inttoptr i64 %2975 to i32*
  %2978 = load i32, i32* %2977, align 4
  %2979 = sext i32 %2978 to i64
  store i64 %2979, i64* %RCX, align 8, !tbaa !2428
  %2980 = shl nsw i64 %2979, 3
  %2981 = add i64 %2980, %2949
  %2982 = add i64 %2809, 112
  store i64 %2982, i64* %PC, align 8
  %2983 = inttoptr i64 %2981 to double*
  %2984 = load double, double* %2983, align 8
  %2985 = fmul double %2936, %2984
  store double %2985, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %2986 = load double, double* %230, align 1
  %2987 = fsub double %2986, %2985
  store double %2987, double* %230, align 1, !tbaa !2452
  %2988 = add i64 %2937, 16
  %2989 = add i64 %2809, 120
  store i64 %2989, i64* %PC, align 8
  %2990 = inttoptr i64 %2988 to i64*
  %2991 = load i64, i64* %2990, align 8
  store i64 %2991, i64* %RAX, align 8, !tbaa !2428
  %2992 = load i64, i64* %RBP, align 8
  %2993 = add i64 %2992, -100
  %2994 = add i64 %2809, 124
  store i64 %2994, i64* %PC, align 8
  %2995 = inttoptr i64 %2993 to i32*
  %2996 = load i32, i32* %2995, align 4
  %2997 = sext i32 %2996 to i64
  %2998 = mul nsw i64 %2997, 520
  store i64 %2998, i64* %RCX, align 8, !tbaa !2428
  %2999 = lshr i64 %2998, 63
  %3000 = add i64 %2998, %2991
  store i64 %3000, i64* %RAX, align 8, !tbaa !2428
  %3001 = icmp ult i64 %3000, %2991
  %3002 = icmp ult i64 %3000, %2998
  %3003 = or i1 %3001, %3002
  %3004 = zext i1 %3003 to i8
  store i8 %3004, i8* %43, align 1, !tbaa !2432
  %3005 = trunc i64 %3000 to i32
  %3006 = and i32 %3005, 255
  %3007 = tail call i32 @llvm.ctpop.i32(i32 %3006) #8
  %3008 = trunc i32 %3007 to i8
  %3009 = and i8 %3008, 1
  %3010 = xor i8 %3009, 1
  store i8 %3010, i8* %50, align 1, !tbaa !2446
  %3011 = xor i64 %2998, %2991
  %3012 = xor i64 %3011, %3000
  %3013 = lshr i64 %3012, 4
  %3014 = trunc i64 %3013 to i8
  %3015 = and i8 %3014, 1
  store i8 %3015, i8* %55, align 1, !tbaa !2447
  %3016 = icmp eq i64 %3000, 0
  %3017 = zext i1 %3016 to i8
  store i8 %3017, i8* %58, align 1, !tbaa !2448
  %3018 = lshr i64 %3000, 63
  %3019 = trunc i64 %3018 to i8
  store i8 %3019, i8* %61, align 1, !tbaa !2449
  %3020 = lshr i64 %2991, 63
  %3021 = xor i64 %3018, %3020
  %3022 = xor i64 %3018, %2999
  %3023 = add nuw nsw i64 %3021, %3022
  %3024 = icmp eq i64 %3023, 2
  %3025 = zext i1 %3024 to i8
  store i8 %3025, i8* %67, align 1, !tbaa !2450
  %3026 = add i64 %2992, -104
  %3027 = add i64 %2809, 138
  store i64 %3027, i64* %PC, align 8
  %3028 = inttoptr i64 %3026 to i32*
  %3029 = load i32, i32* %3028, align 4
  %3030 = sext i32 %3029 to i64
  store i64 %3030, i64* %RCX, align 8, !tbaa !2428
  %3031 = shl nsw i64 %3030, 3
  %3032 = add i64 %3031, %3000
  %3033 = add i64 %2809, 143
  store i64 %3033, i64* %PC, align 8
  %3034 = inttoptr i64 %3032 to double*
  store double %2987, double* %3034, align 8
  %3035 = load i64, i64* %RBP, align 8
  %3036 = add i64 %3035, 72
  %3037 = load i64, i64* %PC, align 8
  %3038 = add i64 %3037, 4
  store i64 %3038, i64* %PC, align 8
  %3039 = inttoptr i64 %3036 to i64*
  %3040 = load i64, i64* %3039, align 8
  store i64 %3040, i64* %RAX, align 8, !tbaa !2428
  %3041 = add i64 %3035, -108
  %3042 = add i64 %3037, 8
  store i64 %3042, i64* %PC, align 8
  %3043 = inttoptr i64 %3041 to i32*
  %3044 = load i32, i32* %3043, align 4
  %3045 = sext i32 %3044 to i64
  store i64 %3045, i64* %RCX, align 8, !tbaa !2428
  %3046 = shl nsw i64 %3045, 3
  %3047 = add i64 %3046, %3040
  %3048 = add i64 %3037, 13
  store i64 %3048, i64* %PC, align 8
  %3049 = inttoptr i64 %3047 to double*
  %3050 = load double, double* %3049, align 8
  store double %3050, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %3051 = add i64 %3035, 80
  %3052 = add i64 %3037, 17
  store i64 %3052, i64* %PC, align 8
  %3053 = inttoptr i64 %3051 to i64*
  %3054 = load i64, i64* %3053, align 8
  store i64 %3054, i64* %RAX, align 8, !tbaa !2428
  %3055 = add i64 %3037, 21
  store i64 %3055, i64* %PC, align 8
  %3056 = load i32, i32* %3043, align 4
  %3057 = sext i32 %3056 to i64
  store i64 %3057, i64* %RCX, align 8, !tbaa !2428
  %3058 = shl nsw i64 %3057, 3
  %3059 = add i64 %3058, %3054
  %3060 = add i64 %3037, 26
  store i64 %3060, i64* %PC, align 8
  %3061 = inttoptr i64 %3059 to double*
  %3062 = load double, double* %3061, align 8
  %3063 = fdiv double %3050, %3062
  store double %3063, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %3064 = add i64 %3035, 48
  %3065 = add i64 %3037, 30
  store i64 %3065, i64* %PC, align 8
  %3066 = inttoptr i64 %3064 to i64*
  %3067 = load i64, i64* %3066, align 8
  store i64 %3067, i64* %RAX, align 8, !tbaa !2428
  %3068 = add i64 %3035, -100
  %3069 = add i64 %3037, 34
  store i64 %3069, i64* %PC, align 8
  %3070 = inttoptr i64 %3068 to i32*
  %3071 = load i32, i32* %3070, align 4
  %3072 = sext i32 %3071 to i64
  %3073 = mul nsw i64 %3072, 33800
  store i64 %3073, i64* %RCX, align 8, !tbaa !2428
  %3074 = lshr i64 %3073, 63
  %3075 = add i64 %3073, %3067
  store i64 %3075, i64* %RAX, align 8, !tbaa !2428
  %3076 = icmp ult i64 %3075, %3067
  %3077 = icmp ult i64 %3075, %3073
  %3078 = or i1 %3076, %3077
  %3079 = zext i1 %3078 to i8
  store i8 %3079, i8* %43, align 1, !tbaa !2432
  %3080 = trunc i64 %3075 to i32
  %3081 = and i32 %3080, 255
  %3082 = tail call i32 @llvm.ctpop.i32(i32 %3081) #8
  %3083 = trunc i32 %3082 to i8
  %3084 = and i8 %3083, 1
  %3085 = xor i8 %3084, 1
  store i8 %3085, i8* %50, align 1, !tbaa !2446
  %3086 = xor i64 %3073, %3067
  %3087 = xor i64 %3086, %3075
  %3088 = lshr i64 %3087, 4
  %3089 = trunc i64 %3088 to i8
  %3090 = and i8 %3089, 1
  store i8 %3090, i8* %55, align 1, !tbaa !2447
  %3091 = icmp eq i64 %3075, 0
  %3092 = zext i1 %3091 to i8
  store i8 %3092, i8* %58, align 1, !tbaa !2448
  %3093 = lshr i64 %3075, 63
  %3094 = trunc i64 %3093 to i8
  store i8 %3094, i8* %61, align 1, !tbaa !2449
  %3095 = lshr i64 %3067, 63
  %3096 = xor i64 %3093, %3095
  %3097 = xor i64 %3093, %3074
  %3098 = add nuw nsw i64 %3096, %3097
  %3099 = icmp eq i64 %3098, 2
  %3100 = zext i1 %3099 to i8
  store i8 %3100, i8* %67, align 1, !tbaa !2450
  %3101 = load i64, i64* %RBP, align 8
  %3102 = add i64 %3101, -52
  %3103 = add i64 %3037, 48
  store i64 %3103, i64* %PC, align 8
  %3104 = inttoptr i64 %3102 to i32*
  %3105 = load i32, i32* %3104, align 4
  %3106 = sext i32 %3105 to i64
  %3107 = mul nsw i64 %3106, 520
  store i64 %3107, i64* %RCX, align 8, !tbaa !2428
  %3108 = lshr i64 %3107, 63
  %3109 = add i64 %3107, %3075
  store i64 %3109, i64* %RAX, align 8, !tbaa !2428
  %3110 = icmp ult i64 %3109, %3075
  %3111 = icmp ult i64 %3109, %3107
  %3112 = or i1 %3110, %3111
  %3113 = zext i1 %3112 to i8
  store i8 %3113, i8* %43, align 1, !tbaa !2432
  %3114 = trunc i64 %3109 to i32
  %3115 = and i32 %3114, 255
  %3116 = tail call i32 @llvm.ctpop.i32(i32 %3115) #8
  %3117 = trunc i32 %3116 to i8
  %3118 = and i8 %3117, 1
  %3119 = xor i8 %3118, 1
  store i8 %3119, i8* %50, align 1, !tbaa !2446
  %3120 = xor i64 %3107, %3075
  %3121 = xor i64 %3120, %3109
  %3122 = lshr i64 %3121, 4
  %3123 = trunc i64 %3122 to i8
  %3124 = and i8 %3123, 1
  store i8 %3124, i8* %55, align 1, !tbaa !2447
  %3125 = icmp eq i64 %3109, 0
  %3126 = zext i1 %3125 to i8
  store i8 %3126, i8* %58, align 1, !tbaa !2448
  %3127 = lshr i64 %3109, 63
  %3128 = trunc i64 %3127 to i8
  store i8 %3128, i8* %61, align 1, !tbaa !2449
  %3129 = xor i64 %3127, %3093
  %3130 = xor i64 %3127, %3108
  %3131 = add nuw nsw i64 %3129, %3130
  %3132 = icmp eq i64 %3131, 2
  %3133 = zext i1 %3132 to i8
  store i8 %3133, i8* %67, align 1, !tbaa !2450
  %3134 = add i64 %3101, -108
  %3135 = add i64 %3037, 62
  store i64 %3135, i64* %PC, align 8
  %3136 = inttoptr i64 %3134 to i32*
  %3137 = load i32, i32* %3136, align 4
  %3138 = sext i32 %3137 to i64
  store i64 %3138, i64* %RCX, align 8, !tbaa !2428
  %3139 = shl nsw i64 %3138, 3
  %3140 = add i64 %3139, %3109
  %3141 = add i64 %3037, 67
  store i64 %3141, i64* %PC, align 8
  %3142 = load double, double* %230, align 1
  %3143 = inttoptr i64 %3140 to double*
  %3144 = load double, double* %3143, align 8
  %3145 = fmul double %3142, %3144
  store double %3145, double* %230, align 1, !tbaa !2452
  %3146 = add i64 %3101, -64
  %3147 = add i64 %3037, 72
  store i64 %3147, i64* %PC, align 8
  %3148 = inttoptr i64 %3146 to double*
  %3149 = load double, double* %3148, align 8
  store double %3149, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %3150 = add i64 %3101, 64
  %3151 = add i64 %3037, 76
  store i64 %3151, i64* %PC, align 8
  %3152 = inttoptr i64 %3150 to i64*
  %3153 = load i64, i64* %3152, align 8
  store i64 %3153, i64* %RAX, align 8, !tbaa !2428
  %3154 = add i64 %3101, -100
  %3155 = add i64 %3037, 80
  store i64 %3155, i64* %PC, align 8
  %3156 = inttoptr i64 %3154 to i32*
  %3157 = load i32, i32* %3156, align 4
  %3158 = sext i32 %3157 to i64
  store i64 %3158, i64* %RCX, align 8, !tbaa !2428
  %3159 = shl nsw i64 %3158, 3
  %3160 = add i64 %3159, %3153
  %3161 = add i64 %3037, 85
  store i64 %3161, i64* %PC, align 8
  %3162 = inttoptr i64 %3160 to double*
  %3163 = load double, double* %3162, align 8
  %3164 = fmul double %3149, %3163
  store double %3164, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %3165 = load i64, i64* %RBP, align 8
  %3166 = add i64 %3165, 80
  %3167 = add i64 %3037, 89
  store i64 %3167, i64* %PC, align 8
  %3168 = inttoptr i64 %3166 to i64*
  %3169 = load i64, i64* %3168, align 8
  store i64 %3169, i64* %RAX, align 8, !tbaa !2428
  %3170 = add i64 %3165, -108
  %3171 = add i64 %3037, 93
  store i64 %3171, i64* %PC, align 8
  %3172 = inttoptr i64 %3170 to i32*
  %3173 = load i32, i32* %3172, align 4
  %3174 = sext i32 %3173 to i64
  store i64 %3174, i64* %RCX, align 8, !tbaa !2428
  %3175 = shl nsw i64 %3174, 3
  %3176 = add i64 %3175, %3169
  %3177 = add i64 %3037, 98
  store i64 %3177, i64* %PC, align 8
  %3178 = inttoptr i64 %3176 to double*
  %3179 = load double, double* %3178, align 8
  %3180 = fdiv double %3164, %3179
  store double %3180, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %3181 = add i64 %3165, 16
  %3182 = add i64 %3037, 102
  store i64 %3182, i64* %PC, align 8
  %3183 = inttoptr i64 %3181 to i64*
  %3184 = load i64, i64* %3183, align 8
  store i64 %3184, i64* %RAX, align 8, !tbaa !2428
  %3185 = add i64 %3165, -100
  %3186 = add i64 %3037, 106
  store i64 %3186, i64* %PC, align 8
  %3187 = inttoptr i64 %3185 to i32*
  %3188 = load i32, i32* %3187, align 4
  %3189 = sext i32 %3188 to i64
  %3190 = mul nsw i64 %3189, 520
  store i64 %3190, i64* %RCX, align 8, !tbaa !2428
  %3191 = lshr i64 %3190, 63
  %3192 = add i64 %3190, %3184
  store i64 %3192, i64* %RAX, align 8, !tbaa !2428
  %3193 = icmp ult i64 %3192, %3184
  %3194 = icmp ult i64 %3192, %3190
  %3195 = or i1 %3193, %3194
  %3196 = zext i1 %3195 to i8
  store i8 %3196, i8* %43, align 1, !tbaa !2432
  %3197 = trunc i64 %3192 to i32
  %3198 = and i32 %3197, 255
  %3199 = tail call i32 @llvm.ctpop.i32(i32 %3198) #8
  %3200 = trunc i32 %3199 to i8
  %3201 = and i8 %3200, 1
  %3202 = xor i8 %3201, 1
  store i8 %3202, i8* %50, align 1, !tbaa !2446
  %3203 = xor i64 %3190, %3184
  %3204 = xor i64 %3203, %3192
  %3205 = lshr i64 %3204, 4
  %3206 = trunc i64 %3205 to i8
  %3207 = and i8 %3206, 1
  store i8 %3207, i8* %55, align 1, !tbaa !2447
  %3208 = icmp eq i64 %3192, 0
  %3209 = zext i1 %3208 to i8
  store i8 %3209, i8* %58, align 1, !tbaa !2448
  %3210 = lshr i64 %3192, 63
  %3211 = trunc i64 %3210 to i8
  store i8 %3211, i8* %61, align 1, !tbaa !2449
  %3212 = lshr i64 %3184, 63
  %3213 = xor i64 %3210, %3212
  %3214 = xor i64 %3210, %3191
  %3215 = add nuw nsw i64 %3213, %3214
  %3216 = icmp eq i64 %3215, 2
  %3217 = zext i1 %3216 to i8
  store i8 %3217, i8* %67, align 1, !tbaa !2450
  %3218 = add i64 %3165, -104
  %3219 = add i64 %3037, 120
  store i64 %3219, i64* %PC, align 8
  %3220 = inttoptr i64 %3218 to i32*
  %3221 = load i32, i32* %3220, align 4
  %3222 = sext i32 %3221 to i64
  store i64 %3222, i64* %RCX, align 8, !tbaa !2428
  %3223 = shl nsw i64 %3222, 3
  %3224 = add i64 %3223, %3192
  %3225 = add i64 %3037, 125
  store i64 %3225, i64* %PC, align 8
  %3226 = inttoptr i64 %3224 to double*
  %3227 = load double, double* %3226, align 8
  %3228 = fmul double %3180, %3227
  store double %3228, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %3229 = load double, double* %230, align 1
  %3230 = fadd double %3229, %3228
  store double %3230, double* %230, align 1, !tbaa !2452
  %3231 = load i64, i64* %RBP, align 8
  %3232 = add i64 %3231, -64
  %3233 = add i64 %3037, 134
  store i64 %3233, i64* %PC, align 8
  %3234 = inttoptr i64 %3232 to double*
  %3235 = load double, double* %3234, align 8
  store double %3235, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %3236 = add i64 %3231, 56
  %3237 = add i64 %3037, 138
  store i64 %3237, i64* %PC, align 8
  %3238 = inttoptr i64 %3236 to i64*
  %3239 = load i64, i64* %3238, align 8
  store i64 %3239, i64* %RAX, align 8, !tbaa !2428
  %3240 = add i64 %3231, -100
  %3241 = add i64 %3037, 142
  store i64 %3241, i64* %PC, align 8
  %3242 = inttoptr i64 %3240 to i32*
  %3243 = load i32, i32* %3242, align 4
  %3244 = sext i32 %3243 to i64
  store i64 %3244, i64* %RCX, align 8, !tbaa !2428
  %3245 = shl nsw i64 %3244, 3
  %3246 = add i64 %3245, %3239
  %3247 = add i64 %3037, 147
  store i64 %3247, i64* %PC, align 8
  %3248 = inttoptr i64 %3246 to double*
  %3249 = load double, double* %3248, align 8
  %3250 = fmul double %3235, %3249
  store double %3250, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %3251 = add i64 %3231, 80
  %3252 = add i64 %3037, 151
  store i64 %3252, i64* %PC, align 8
  %3253 = inttoptr i64 %3251 to i64*
  %3254 = load i64, i64* %3253, align 8
  store i64 %3254, i64* %RAX, align 8, !tbaa !2428
  %3255 = add i64 %3231, -108
  %3256 = add i64 %3037, 155
  store i64 %3256, i64* %PC, align 8
  %3257 = inttoptr i64 %3255 to i32*
  %3258 = load i32, i32* %3257, align 4
  %3259 = sext i32 %3258 to i64
  store i64 %3259, i64* %RCX, align 8, !tbaa !2428
  %3260 = shl nsw i64 %3259, 3
  %3261 = add i64 %3260, %3254
  %3262 = add i64 %3037, 160
  store i64 %3262, i64* %PC, align 8
  %3263 = inttoptr i64 %3261 to double*
  %3264 = load double, double* %3263, align 8
  %3265 = fdiv double %3250, %3264
  store double %3265, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %3266 = add i64 %3231, 24
  %3267 = add i64 %3037, 164
  store i64 %3267, i64* %PC, align 8
  %3268 = inttoptr i64 %3266 to i64*
  %3269 = load i64, i64* %3268, align 8
  store i64 %3269, i64* %RAX, align 8, !tbaa !2428
  %3270 = add i64 %3037, 168
  store i64 %3270, i64* %PC, align 8
  %3271 = load i32, i32* %3242, align 4
  %3272 = sext i32 %3271 to i64
  %3273 = mul nsw i64 %3272, 33800
  store i64 %3273, i64* %RCX, align 8, !tbaa !2428
  %3274 = lshr i64 %3273, 63
  %3275 = add i64 %3273, %3269
  store i64 %3275, i64* %RAX, align 8, !tbaa !2428
  %3276 = icmp ult i64 %3275, %3269
  %3277 = icmp ult i64 %3275, %3273
  %3278 = or i1 %3276, %3277
  %3279 = zext i1 %3278 to i8
  store i8 %3279, i8* %43, align 1, !tbaa !2432
  %3280 = trunc i64 %3275 to i32
  %3281 = and i32 %3280, 255
  %3282 = tail call i32 @llvm.ctpop.i32(i32 %3281) #8
  %3283 = trunc i32 %3282 to i8
  %3284 = and i8 %3283, 1
  %3285 = xor i8 %3284, 1
  store i8 %3285, i8* %50, align 1, !tbaa !2446
  %3286 = xor i64 %3273, %3269
  %3287 = xor i64 %3286, %3275
  %3288 = lshr i64 %3287, 4
  %3289 = trunc i64 %3288 to i8
  %3290 = and i8 %3289, 1
  store i8 %3290, i8* %55, align 1, !tbaa !2447
  %3291 = icmp eq i64 %3275, 0
  %3292 = zext i1 %3291 to i8
  store i8 %3292, i8* %58, align 1, !tbaa !2448
  %3293 = lshr i64 %3275, 63
  %3294 = trunc i64 %3293 to i8
  store i8 %3294, i8* %61, align 1, !tbaa !2449
  %3295 = lshr i64 %3269, 63
  %3296 = xor i64 %3293, %3295
  %3297 = xor i64 %3293, %3274
  %3298 = add nuw nsw i64 %3296, %3297
  %3299 = icmp eq i64 %3298, 2
  %3300 = zext i1 %3299 to i8
  store i8 %3300, i8* %67, align 1, !tbaa !2450
  %3301 = load i64, i64* %RBP, align 8
  %3302 = add i64 %3301, -52
  %3303 = add i64 %3037, 182
  store i64 %3303, i64* %PC, align 8
  %3304 = inttoptr i64 %3302 to i32*
  %3305 = load i32, i32* %3304, align 4
  %3306 = sext i32 %3305 to i64
  %3307 = mul nsw i64 %3306, 520
  store i64 %3307, i64* %RCX, align 8, !tbaa !2428
  %3308 = lshr i64 %3307, 63
  %3309 = add i64 %3307, %3275
  store i64 %3309, i64* %RAX, align 8, !tbaa !2428
  %3310 = icmp ult i64 %3309, %3275
  %3311 = icmp ult i64 %3309, %3307
  %3312 = or i1 %3310, %3311
  %3313 = zext i1 %3312 to i8
  store i8 %3313, i8* %43, align 1, !tbaa !2432
  %3314 = trunc i64 %3309 to i32
  %3315 = and i32 %3314, 255
  %3316 = tail call i32 @llvm.ctpop.i32(i32 %3315) #8
  %3317 = trunc i32 %3316 to i8
  %3318 = and i8 %3317, 1
  %3319 = xor i8 %3318, 1
  store i8 %3319, i8* %50, align 1, !tbaa !2446
  %3320 = xor i64 %3307, %3275
  %3321 = xor i64 %3320, %3309
  %3322 = lshr i64 %3321, 4
  %3323 = trunc i64 %3322 to i8
  %3324 = and i8 %3323, 1
  store i8 %3324, i8* %55, align 1, !tbaa !2447
  %3325 = icmp eq i64 %3309, 0
  %3326 = zext i1 %3325 to i8
  store i8 %3326, i8* %58, align 1, !tbaa !2448
  %3327 = lshr i64 %3309, 63
  %3328 = trunc i64 %3327 to i8
  store i8 %3328, i8* %61, align 1, !tbaa !2449
  %3329 = xor i64 %3327, %3293
  %3330 = xor i64 %3327, %3308
  %3331 = add nuw nsw i64 %3329, %3330
  %3332 = icmp eq i64 %3331, 2
  %3333 = zext i1 %3332 to i8
  store i8 %3333, i8* %67, align 1, !tbaa !2450
  %3334 = add i64 %3301, -108
  %3335 = add i64 %3037, 196
  store i64 %3335, i64* %PC, align 8
  %3336 = inttoptr i64 %3334 to i32*
  %3337 = load i32, i32* %3336, align 4
  %3338 = sext i32 %3337 to i64
  store i64 %3338, i64* %RCX, align 8, !tbaa !2428
  %3339 = shl nsw i64 %3338, 3
  %3340 = add i64 %3339, %3309
  %3341 = add i64 %3037, 201
  store i64 %3341, i64* %PC, align 8
  %3342 = load double, double* %233, align 1
  %3343 = inttoptr i64 %3340 to double*
  %3344 = load double, double* %3343, align 8
  %3345 = fmul double %3342, %3344
  store double %3345, double* %233, align 1, !tbaa !2452
  %3346 = load double, double* %230, align 1
  %3347 = fsub double %3346, %3345
  store double %3347, double* %230, align 1, !tbaa !2452
  %3348 = add i64 %3301, 48
  %3349 = add i64 %3037, 209
  store i64 %3349, i64* %PC, align 8
  %3350 = inttoptr i64 %3348 to i64*
  %3351 = load i64, i64* %3350, align 8
  store i64 %3351, i64* %RAX, align 8, !tbaa !2428
  %3352 = add i64 %3301, -100
  %3353 = add i64 %3037, 213
  store i64 %3353, i64* %PC, align 8
  %3354 = inttoptr i64 %3352 to i32*
  %3355 = load i32, i32* %3354, align 4
  %3356 = sext i32 %3355 to i64
  %3357 = mul nsw i64 %3356, 33800
  store i64 %3357, i64* %RCX, align 8, !tbaa !2428
  %3358 = lshr i64 %3357, 63
  %3359 = add i64 %3357, %3351
  store i64 %3359, i64* %RAX, align 8, !tbaa !2428
  %3360 = icmp ult i64 %3359, %3351
  %3361 = icmp ult i64 %3359, %3357
  %3362 = or i1 %3360, %3361
  %3363 = zext i1 %3362 to i8
  store i8 %3363, i8* %43, align 1, !tbaa !2432
  %3364 = trunc i64 %3359 to i32
  %3365 = and i32 %3364, 255
  %3366 = tail call i32 @llvm.ctpop.i32(i32 %3365) #8
  %3367 = trunc i32 %3366 to i8
  %3368 = and i8 %3367, 1
  %3369 = xor i8 %3368, 1
  store i8 %3369, i8* %50, align 1, !tbaa !2446
  %3370 = xor i64 %3357, %3351
  %3371 = xor i64 %3370, %3359
  %3372 = lshr i64 %3371, 4
  %3373 = trunc i64 %3372 to i8
  %3374 = and i8 %3373, 1
  store i8 %3374, i8* %55, align 1, !tbaa !2447
  %3375 = icmp eq i64 %3359, 0
  %3376 = zext i1 %3375 to i8
  store i8 %3376, i8* %58, align 1, !tbaa !2448
  %3377 = lshr i64 %3359, 63
  %3378 = trunc i64 %3377 to i8
  store i8 %3378, i8* %61, align 1, !tbaa !2449
  %3379 = lshr i64 %3351, 63
  %3380 = xor i64 %3377, %3379
  %3381 = xor i64 %3377, %3358
  %3382 = add nuw nsw i64 %3380, %3381
  %3383 = icmp eq i64 %3382, 2
  %3384 = zext i1 %3383 to i8
  store i8 %3384, i8* %67, align 1, !tbaa !2450
  %3385 = load i64, i64* %RBP, align 8
  %3386 = add i64 %3385, -52
  %3387 = add i64 %3037, 227
  store i64 %3387, i64* %PC, align 8
  %3388 = inttoptr i64 %3386 to i32*
  %3389 = load i32, i32* %3388, align 4
  %3390 = sext i32 %3389 to i64
  %3391 = mul nsw i64 %3390, 520
  store i64 %3391, i64* %RCX, align 8, !tbaa !2428
  %3392 = lshr i64 %3391, 63
  %3393 = add i64 %3391, %3359
  store i64 %3393, i64* %RAX, align 8, !tbaa !2428
  %3394 = icmp ult i64 %3393, %3359
  %3395 = icmp ult i64 %3393, %3391
  %3396 = or i1 %3394, %3395
  %3397 = zext i1 %3396 to i8
  store i8 %3397, i8* %43, align 1, !tbaa !2432
  %3398 = trunc i64 %3393 to i32
  %3399 = and i32 %3398, 255
  %3400 = tail call i32 @llvm.ctpop.i32(i32 %3399) #8
  %3401 = trunc i32 %3400 to i8
  %3402 = and i8 %3401, 1
  %3403 = xor i8 %3402, 1
  store i8 %3403, i8* %50, align 1, !tbaa !2446
  %3404 = xor i64 %3391, %3359
  %3405 = xor i64 %3404, %3393
  %3406 = lshr i64 %3405, 4
  %3407 = trunc i64 %3406 to i8
  %3408 = and i8 %3407, 1
  store i8 %3408, i8* %55, align 1, !tbaa !2447
  %3409 = icmp eq i64 %3393, 0
  %3410 = zext i1 %3409 to i8
  store i8 %3410, i8* %58, align 1, !tbaa !2448
  %3411 = lshr i64 %3393, 63
  %3412 = trunc i64 %3411 to i8
  store i8 %3412, i8* %61, align 1, !tbaa !2449
  %3413 = xor i64 %3411, %3377
  %3414 = xor i64 %3411, %3392
  %3415 = add nuw nsw i64 %3413, %3414
  %3416 = icmp eq i64 %3415, 2
  %3417 = zext i1 %3416 to i8
  store i8 %3417, i8* %67, align 1, !tbaa !2450
  %3418 = add i64 %3385, -108
  %3419 = add i64 %3037, 241
  store i64 %3419, i64* %PC, align 8
  %3420 = inttoptr i64 %3418 to i32*
  %3421 = load i32, i32* %3420, align 4
  %3422 = sext i32 %3421 to i64
  store i64 %3422, i64* %RCX, align 8, !tbaa !2428
  %3423 = shl nsw i64 %3422, 3
  %3424 = add i64 %3423, %3393
  %3425 = add i64 %3037, 246
  store i64 %3425, i64* %PC, align 8
  %3426 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %3427 = load i64, i64* %3426, align 1
  %3428 = inttoptr i64 %3424 to i64*
  store i64 %3427, i64* %3428, align 8
  %3429 = load i64, i64* %RBP, align 8
  %3430 = add i64 %3429, 16
  %3431 = load i64, i64* %PC, align 8
  %3432 = add i64 %3431, 4
  store i64 %3432, i64* %PC, align 8
  %3433 = inttoptr i64 %3430 to i64*
  %3434 = load i64, i64* %3433, align 8
  store i64 %3434, i64* %RAX, align 8, !tbaa !2428
  %3435 = add i64 %3429, -100
  %3436 = add i64 %3431, 8
  store i64 %3436, i64* %PC, align 8
  %3437 = inttoptr i64 %3435 to i32*
  %3438 = load i32, i32* %3437, align 4
  %3439 = sext i32 %3438 to i64
  %3440 = mul nsw i64 %3439, 520
  store i64 %3440, i64* %RCX, align 8, !tbaa !2428
  %3441 = lshr i64 %3440, 63
  %3442 = add i64 %3440, %3434
  store i64 %3442, i64* %RAX, align 8, !tbaa !2428
  %3443 = icmp ult i64 %3442, %3434
  %3444 = icmp ult i64 %3442, %3440
  %3445 = or i1 %3443, %3444
  %3446 = zext i1 %3445 to i8
  store i8 %3446, i8* %43, align 1, !tbaa !2432
  %3447 = trunc i64 %3442 to i32
  %3448 = and i32 %3447, 255
  %3449 = tail call i32 @llvm.ctpop.i32(i32 %3448) #8
  %3450 = trunc i32 %3449 to i8
  %3451 = and i8 %3450, 1
  %3452 = xor i8 %3451, 1
  store i8 %3452, i8* %50, align 1, !tbaa !2446
  %3453 = xor i64 %3440, %3434
  %3454 = xor i64 %3453, %3442
  %3455 = lshr i64 %3454, 4
  %3456 = trunc i64 %3455 to i8
  %3457 = and i8 %3456, 1
  store i8 %3457, i8* %55, align 1, !tbaa !2447
  %3458 = icmp eq i64 %3442, 0
  %3459 = zext i1 %3458 to i8
  store i8 %3459, i8* %58, align 1, !tbaa !2448
  %3460 = lshr i64 %3442, 63
  %3461 = trunc i64 %3460 to i8
  store i8 %3461, i8* %61, align 1, !tbaa !2449
  %3462 = lshr i64 %3434, 63
  %3463 = xor i64 %3460, %3462
  %3464 = xor i64 %3460, %3441
  %3465 = add nuw nsw i64 %3463, %3464
  %3466 = icmp eq i64 %3465, 2
  %3467 = zext i1 %3466 to i8
  store i8 %3467, i8* %67, align 1, !tbaa !2450
  %3468 = add i64 %3429, -104
  %3469 = add i64 %3431, 22
  store i64 %3469, i64* %PC, align 8
  %3470 = inttoptr i64 %3468 to i32*
  %3471 = load i32, i32* %3470, align 4
  %3472 = sext i32 %3471 to i64
  store i64 %3472, i64* %RCX, align 8, !tbaa !2428
  %3473 = shl nsw i64 %3472, 3
  %3474 = add i64 %3473, %3442
  %3475 = add i64 %3431, 27
  store i64 %3475, i64* %PC, align 8
  %3476 = inttoptr i64 %3474 to i64*
  %3477 = load i64, i64* %3476, align 8
  %3478 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %3477, i64* %3478, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %3479 = add i64 %3429, 24
  %3480 = add i64 %3431, 31
  store i64 %3480, i64* %PC, align 8
  %3481 = inttoptr i64 %3479 to i64*
  %3482 = load i64, i64* %3481, align 8
  store i64 %3482, i64* %RAX, align 8, !tbaa !2428
  %3483 = add i64 %3431, 35
  store i64 %3483, i64* %PC, align 8
  %3484 = load i32, i32* %3437, align 4
  %3485 = sext i32 %3484 to i64
  %3486 = mul nsw i64 %3485, 33800
  store i64 %3486, i64* %RCX, align 8, !tbaa !2428
  %3487 = lshr i64 %3486, 63
  %3488 = add i64 %3486, %3482
  store i64 %3488, i64* %RAX, align 8, !tbaa !2428
  %3489 = icmp ult i64 %3488, %3482
  %3490 = icmp ult i64 %3488, %3486
  %3491 = or i1 %3489, %3490
  %3492 = zext i1 %3491 to i8
  store i8 %3492, i8* %43, align 1, !tbaa !2432
  %3493 = trunc i64 %3488 to i32
  %3494 = and i32 %3493, 255
  %3495 = tail call i32 @llvm.ctpop.i32(i32 %3494) #8
  %3496 = trunc i32 %3495 to i8
  %3497 = and i8 %3496, 1
  %3498 = xor i8 %3497, 1
  store i8 %3498, i8* %50, align 1, !tbaa !2446
  %3499 = xor i64 %3486, %3482
  %3500 = xor i64 %3499, %3488
  %3501 = lshr i64 %3500, 4
  %3502 = trunc i64 %3501 to i8
  %3503 = and i8 %3502, 1
  store i8 %3503, i8* %55, align 1, !tbaa !2447
  %3504 = icmp eq i64 %3488, 0
  %3505 = zext i1 %3504 to i8
  store i8 %3505, i8* %58, align 1, !tbaa !2448
  %3506 = lshr i64 %3488, 63
  %3507 = trunc i64 %3506 to i8
  store i8 %3507, i8* %61, align 1, !tbaa !2449
  %3508 = lshr i64 %3482, 63
  %3509 = xor i64 %3506, %3508
  %3510 = xor i64 %3506, %3487
  %3511 = add nuw nsw i64 %3509, %3510
  %3512 = icmp eq i64 %3511, 2
  %3513 = zext i1 %3512 to i8
  store i8 %3513, i8* %67, align 1, !tbaa !2450
  %3514 = load i64, i64* %RBP, align 8
  %3515 = add i64 %3514, -52
  %3516 = add i64 %3431, 49
  store i64 %3516, i64* %PC, align 8
  %3517 = inttoptr i64 %3515 to i32*
  %3518 = load i32, i32* %3517, align 4
  %3519 = sext i32 %3518 to i64
  %3520 = mul nsw i64 %3519, 520
  store i64 %3520, i64* %RCX, align 8, !tbaa !2428
  %3521 = lshr i64 %3520, 63
  %3522 = add i64 %3520, %3488
  store i64 %3522, i64* %RAX, align 8, !tbaa !2428
  %3523 = icmp ult i64 %3522, %3488
  %3524 = icmp ult i64 %3522, %3520
  %3525 = or i1 %3523, %3524
  %3526 = zext i1 %3525 to i8
  store i8 %3526, i8* %43, align 1, !tbaa !2432
  %3527 = trunc i64 %3522 to i32
  %3528 = and i32 %3527, 255
  %3529 = tail call i32 @llvm.ctpop.i32(i32 %3528) #8
  %3530 = trunc i32 %3529 to i8
  %3531 = and i8 %3530, 1
  %3532 = xor i8 %3531, 1
  store i8 %3532, i8* %50, align 1, !tbaa !2446
  %3533 = xor i64 %3520, %3488
  %3534 = xor i64 %3533, %3522
  %3535 = lshr i64 %3534, 4
  %3536 = trunc i64 %3535 to i8
  %3537 = and i8 %3536, 1
  store i8 %3537, i8* %55, align 1, !tbaa !2447
  %3538 = icmp eq i64 %3522, 0
  %3539 = zext i1 %3538 to i8
  store i8 %3539, i8* %58, align 1, !tbaa !2448
  %3540 = lshr i64 %3522, 63
  %3541 = trunc i64 %3540 to i8
  store i8 %3541, i8* %61, align 1, !tbaa !2449
  %3542 = xor i64 %3540, %3506
  %3543 = xor i64 %3540, %3521
  %3544 = add nuw nsw i64 %3542, %3543
  %3545 = icmp eq i64 %3544, 2
  %3546 = zext i1 %3545 to i8
  store i8 %3546, i8* %67, align 1, !tbaa !2450
  %3547 = add i64 %3514, -108
  %3548 = add i64 %3431, 63
  store i64 %3548, i64* %PC, align 8
  %3549 = inttoptr i64 %3547 to i32*
  %3550 = load i32, i32* %3549, align 4
  %3551 = sext i32 %3550 to i64
  store i64 %3551, i64* %RCX, align 8, !tbaa !2428
  %3552 = shl nsw i64 %3551, 3
  %3553 = add i64 %3552, %3522
  %3554 = add i64 %3431, 68
  store i64 %3554, i64* %PC, align 8
  %3555 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %3556 = load i64, i64* %3555, align 1
  %3557 = inttoptr i64 %3553 to i64*
  store i64 %3556, i64* %3557, align 8
  %3558 = load i64, i64* %RBP, align 8
  %3559 = add i64 %3558, -108
  %3560 = load i64, i64* %PC, align 8
  %3561 = add i64 %3560, 3
  store i64 %3561, i64* %PC, align 8
  %3562 = inttoptr i64 %3559 to i32*
  %3563 = load i32, i32* %3562, align 4
  %3564 = add i32 %3563, 1
  %3565 = zext i32 %3564 to i64
  store i64 %3565, i64* %RAX, align 8, !tbaa !2428
  %3566 = icmp eq i32 %3563, -1
  %3567 = icmp eq i32 %3564, 0
  %3568 = or i1 %3566, %3567
  %3569 = zext i1 %3568 to i8
  store i8 %3569, i8* %43, align 1, !tbaa !2432
  %3570 = and i32 %3564, 255
  %3571 = tail call i32 @llvm.ctpop.i32(i32 %3570) #8
  %3572 = trunc i32 %3571 to i8
  %3573 = and i8 %3572, 1
  %3574 = xor i8 %3573, 1
  store i8 %3574, i8* %50, align 1, !tbaa !2446
  %3575 = xor i32 %3563, %3564
  %3576 = lshr i32 %3575, 4
  %3577 = trunc i32 %3576 to i8
  %3578 = and i8 %3577, 1
  store i8 %3578, i8* %55, align 1, !tbaa !2447
  %3579 = icmp eq i32 %3564, 0
  %3580 = zext i1 %3579 to i8
  store i8 %3580, i8* %58, align 1, !tbaa !2448
  %3581 = lshr i32 %3564, 31
  %3582 = trunc i32 %3581 to i8
  store i8 %3582, i8* %61, align 1, !tbaa !2449
  %3583 = lshr i32 %3563, 31
  %3584 = xor i32 %3581, %3583
  %3585 = add nuw nsw i32 %3584, %3581
  %3586 = icmp eq i32 %3585, 2
  %3587 = zext i1 %3586 to i8
  store i8 %3587, i8* %67, align 1, !tbaa !2450
  %3588 = add i64 %3560, 9
  store i64 %3588, i64* %PC, align 8
  store i32 %3564, i32* %3562, align 4
  %3589 = load i64, i64* %PC, align 8
  %3590 = add i64 %3589, -660
  store i64 %3590, i64* %229, align 8, !tbaa !2428
  br label %block_4019d2

block_4014ac:                                     ; preds = %block_4014a0
  %3591 = add i64 %4812, -108
  %3592 = add i64 %4774, 36
  store i64 %3592, i64* %PC, align 8
  %3593 = inttoptr i64 %3591 to i32*
  %3594 = load i32, i32* %3593, align 4
  %3595 = sext i32 %3594 to i64
  store i64 %3595, i64* %RCX, align 8, !tbaa !2428
  %3596 = shl nsw i64 %3595, 3
  %3597 = add i64 %3596, %4821
  %3598 = add i64 %4774, 41
  store i64 %3598, i64* %PC, align 8
  %3599 = inttoptr i64 %3597 to i64*
  %3600 = load i64, i64* %3599, align 8
  %3601 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %3600, i64* %3601, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %3602 = add i64 %4812, 32
  %3603 = add i64 %4774, 45
  store i64 %3603, i64* %PC, align 8
  %3604 = inttoptr i64 %3602 to i64*
  %3605 = load i64, i64* %3604, align 8
  store i64 %3605, i64* %RAX, align 8, !tbaa !2428
  %3606 = add i64 %4812, -100
  %3607 = add i64 %4774, 49
  store i64 %3607, i64* %PC, align 8
  %3608 = inttoptr i64 %3606 to i32*
  %3609 = load i32, i32* %3608, align 4
  %3610 = sext i32 %3609 to i64
  %3611 = mul nsw i64 %3610, 33800
  store i64 %3611, i64* %RCX, align 8, !tbaa !2428
  %3612 = lshr i64 %3611, 63
  %3613 = add i64 %3611, %3605
  store i64 %3613, i64* %RAX, align 8, !tbaa !2428
  %3614 = icmp ult i64 %3613, %3605
  %3615 = icmp ult i64 %3613, %3611
  %3616 = or i1 %3614, %3615
  %3617 = zext i1 %3616 to i8
  store i8 %3617, i8* %43, align 1, !tbaa !2432
  %3618 = trunc i64 %3613 to i32
  %3619 = and i32 %3618, 255
  %3620 = tail call i32 @llvm.ctpop.i32(i32 %3619) #8
  %3621 = trunc i32 %3620 to i8
  %3622 = and i8 %3621, 1
  %3623 = xor i8 %3622, 1
  store i8 %3623, i8* %50, align 1, !tbaa !2446
  %3624 = xor i64 %3611, %3605
  %3625 = xor i64 %3624, %3613
  %3626 = lshr i64 %3625, 4
  %3627 = trunc i64 %3626 to i8
  %3628 = and i8 %3627, 1
  store i8 %3628, i8* %55, align 1, !tbaa !2447
  %3629 = icmp eq i64 %3613, 0
  %3630 = zext i1 %3629 to i8
  store i8 %3630, i8* %58, align 1, !tbaa !2448
  %3631 = lshr i64 %3613, 63
  %3632 = trunc i64 %3631 to i8
  store i8 %3632, i8* %61, align 1, !tbaa !2449
  %3633 = lshr i64 %3605, 63
  %3634 = xor i64 %3631, %3633
  %3635 = xor i64 %3631, %3612
  %3636 = add nuw nsw i64 %3634, %3635
  %3637 = icmp eq i64 %3636, 2
  %3638 = zext i1 %3637 to i8
  store i8 %3638, i8* %67, align 1, !tbaa !2450
  %3639 = add i64 %4774, 62
  store i64 %3639, i64* %PC, align 8
  %3640 = load i32, i32* %4815, align 4
  %3641 = add i32 %3640, 1
  %3642 = zext i32 %3641 to i64
  store i64 %3642, i64* %RDX, align 8, !tbaa !2428
  %3643 = sext i32 %3641 to i64
  %3644 = mul nsw i64 %3643, 520
  store i64 %3644, i64* %RCX, align 8, !tbaa !2428
  %3645 = lshr i64 %3644, 63
  %3646 = load i64, i64* %RAX, align 8
  %3647 = add i64 %3644, %3646
  store i64 %3647, i64* %RAX, align 8, !tbaa !2428
  %3648 = icmp ult i64 %3647, %3646
  %3649 = icmp ult i64 %3647, %3644
  %3650 = or i1 %3648, %3649
  %3651 = zext i1 %3650 to i8
  store i8 %3651, i8* %43, align 1, !tbaa !2432
  %3652 = trunc i64 %3647 to i32
  %3653 = and i32 %3652, 255
  %3654 = tail call i32 @llvm.ctpop.i32(i32 %3653) #8
  %3655 = trunc i32 %3654 to i8
  %3656 = and i8 %3655, 1
  %3657 = xor i8 %3656, 1
  store i8 %3657, i8* %50, align 1, !tbaa !2446
  %3658 = xor i64 %3644, %3646
  %3659 = xor i64 %3658, %3647
  %3660 = lshr i64 %3659, 4
  %3661 = trunc i64 %3660 to i8
  %3662 = and i8 %3661, 1
  store i8 %3662, i8* %55, align 1, !tbaa !2447
  %3663 = icmp eq i64 %3647, 0
  %3664 = zext i1 %3663 to i8
  store i8 %3664, i8* %58, align 1, !tbaa !2448
  %3665 = lshr i64 %3647, 63
  %3666 = trunc i64 %3665 to i8
  store i8 %3666, i8* %61, align 1, !tbaa !2449
  %3667 = lshr i64 %3646, 63
  %3668 = xor i64 %3665, %3667
  %3669 = xor i64 %3665, %3645
  %3670 = add nuw nsw i64 %3668, %3669
  %3671 = icmp eq i64 %3670, 2
  %3672 = zext i1 %3671 to i8
  store i8 %3672, i8* %67, align 1, !tbaa !2450
  %3673 = load i64, i64* %RBP, align 8
  %3674 = add i64 %3673, -108
  %3675 = add i64 %4774, 82
  store i64 %3675, i64* %PC, align 8
  %3676 = inttoptr i64 %3674 to i32*
  %3677 = load i32, i32* %3676, align 4
  %3678 = sext i32 %3677 to i64
  store i64 %3678, i64* %RCX, align 8, !tbaa !2428
  %3679 = shl nsw i64 %3678, 3
  %3680 = add i64 %3679, %3647
  %3681 = add i64 %4774, 87
  store i64 %3681, i64* %PC, align 8
  %3682 = load double, double* %230, align 1
  %3683 = inttoptr i64 %3680 to double*
  %3684 = load double, double* %3683, align 8
  %3685 = fsub double %3682, %3684
  store double %3685, double* %230, align 1, !tbaa !2452
  %3686 = add i64 %3673, 40
  %3687 = add i64 %4774, 91
  store i64 %3687, i64* %PC, align 8
  %3688 = inttoptr i64 %3686 to i64*
  %3689 = load i64, i64* %3688, align 8
  store i64 %3689, i64* %RAX, align 8, !tbaa !2428
  %3690 = add i64 %3673, -100
  %3691 = add i64 %4774, 95
  store i64 %3691, i64* %PC, align 8
  %3692 = inttoptr i64 %3690 to i32*
  %3693 = load i32, i32* %3692, align 4
  %3694 = sext i32 %3693 to i64
  %3695 = mul nsw i64 %3694, 33800
  store i64 %3695, i64* %RCX, align 8, !tbaa !2428
  %3696 = lshr i64 %3695, 63
  %3697 = add i64 %3695, %3689
  store i64 %3697, i64* %RAX, align 8, !tbaa !2428
  %3698 = icmp ult i64 %3697, %3689
  %3699 = icmp ult i64 %3697, %3695
  %3700 = or i1 %3698, %3699
  %3701 = zext i1 %3700 to i8
  store i8 %3701, i8* %43, align 1, !tbaa !2432
  %3702 = trunc i64 %3697 to i32
  %3703 = and i32 %3702, 255
  %3704 = tail call i32 @llvm.ctpop.i32(i32 %3703) #8
  %3705 = trunc i32 %3704 to i8
  %3706 = and i8 %3705, 1
  %3707 = xor i8 %3706, 1
  store i8 %3707, i8* %50, align 1, !tbaa !2446
  %3708 = xor i64 %3695, %3689
  %3709 = xor i64 %3708, %3697
  %3710 = lshr i64 %3709, 4
  %3711 = trunc i64 %3710 to i8
  %3712 = and i8 %3711, 1
  store i8 %3712, i8* %55, align 1, !tbaa !2447
  %3713 = icmp eq i64 %3697, 0
  %3714 = zext i1 %3713 to i8
  store i8 %3714, i8* %58, align 1, !tbaa !2448
  %3715 = lshr i64 %3697, 63
  %3716 = trunc i64 %3715 to i8
  store i8 %3716, i8* %61, align 1, !tbaa !2449
  %3717 = lshr i64 %3689, 63
  %3718 = xor i64 %3715, %3717
  %3719 = xor i64 %3715, %3696
  %3720 = add nuw nsw i64 %3718, %3719
  %3721 = icmp eq i64 %3720, 2
  %3722 = zext i1 %3721 to i8
  store i8 %3722, i8* %67, align 1, !tbaa !2450
  %3723 = add i64 %3673, -104
  %3724 = add i64 %4774, 109
  store i64 %3724, i64* %PC, align 8
  %3725 = inttoptr i64 %3723 to i32*
  %3726 = load i32, i32* %3725, align 4
  %3727 = sext i32 %3726 to i64
  %3728 = mul nsw i64 %3727, 520
  store i64 %3728, i64* %RCX, align 8, !tbaa !2428
  %3729 = lshr i64 %3728, 63
  %3730 = add i64 %3728, %3697
  store i64 %3730, i64* %RAX, align 8, !tbaa !2428
  %3731 = icmp ult i64 %3730, %3697
  %3732 = icmp ult i64 %3730, %3728
  %3733 = or i1 %3731, %3732
  %3734 = zext i1 %3733 to i8
  store i8 %3734, i8* %43, align 1, !tbaa !2432
  %3735 = trunc i64 %3730 to i32
  %3736 = and i32 %3735, 255
  %3737 = tail call i32 @llvm.ctpop.i32(i32 %3736) #8
  %3738 = trunc i32 %3737 to i8
  %3739 = and i8 %3738, 1
  %3740 = xor i8 %3739, 1
  store i8 %3740, i8* %50, align 1, !tbaa !2446
  %3741 = xor i64 %3728, %3697
  %3742 = xor i64 %3741, %3730
  %3743 = lshr i64 %3742, 4
  %3744 = trunc i64 %3743 to i8
  %3745 = and i8 %3744, 1
  store i8 %3745, i8* %55, align 1, !tbaa !2447
  %3746 = icmp eq i64 %3730, 0
  %3747 = zext i1 %3746 to i8
  store i8 %3747, i8* %58, align 1, !tbaa !2448
  %3748 = lshr i64 %3730, 63
  %3749 = trunc i64 %3748 to i8
  store i8 %3749, i8* %61, align 1, !tbaa !2449
  %3750 = xor i64 %3748, %3715
  %3751 = xor i64 %3748, %3729
  %3752 = add nuw nsw i64 %3750, %3751
  %3753 = icmp eq i64 %3752, 2
  %3754 = zext i1 %3753 to i8
  store i8 %3754, i8* %67, align 1, !tbaa !2450
  %3755 = load i64, i64* %RBP, align 8
  %3756 = add i64 %3755, -108
  %3757 = add i64 %4774, 122
  store i64 %3757, i64* %PC, align 8
  %3758 = inttoptr i64 %3756 to i32*
  %3759 = load i32, i32* %3758, align 4
  %3760 = add i32 %3759, 1
  %3761 = zext i32 %3760 to i64
  store i64 %3761, i64* %RDX, align 8, !tbaa !2428
  %3762 = icmp eq i32 %3759, -1
  %3763 = icmp eq i32 %3760, 0
  %3764 = or i1 %3762, %3763
  %3765 = zext i1 %3764 to i8
  store i8 %3765, i8* %43, align 1, !tbaa !2432
  %3766 = and i32 %3760, 255
  %3767 = tail call i32 @llvm.ctpop.i32(i32 %3766) #8
  %3768 = trunc i32 %3767 to i8
  %3769 = and i8 %3768, 1
  %3770 = xor i8 %3769, 1
  store i8 %3770, i8* %50, align 1, !tbaa !2446
  %3771 = xor i32 %3759, %3760
  %3772 = lshr i32 %3771, 4
  %3773 = trunc i32 %3772 to i8
  %3774 = and i8 %3773, 1
  store i8 %3774, i8* %55, align 1, !tbaa !2447
  %3775 = icmp eq i32 %3760, 0
  %3776 = zext i1 %3775 to i8
  store i8 %3776, i8* %58, align 1, !tbaa !2448
  %3777 = lshr i32 %3760, 31
  %3778 = trunc i32 %3777 to i8
  store i8 %3778, i8* %61, align 1, !tbaa !2449
  %3779 = lshr i32 %3759, 31
  %3780 = xor i32 %3777, %3779
  %3781 = add nuw nsw i32 %3780, %3777
  %3782 = icmp eq i32 %3781, 2
  %3783 = zext i1 %3782 to i8
  store i8 %3783, i8* %67, align 1, !tbaa !2450
  %3784 = sext i32 %3760 to i64
  store i64 %3784, i64* %RCX, align 8, !tbaa !2428
  %3785 = shl nsw i64 %3784, 3
  %3786 = add i64 %3785, %3730
  %3787 = add i64 %4774, 133
  store i64 %3787, i64* %PC, align 8
  %3788 = load double, double* %230, align 1
  %3789 = inttoptr i64 %3786 to double*
  %3790 = load double, double* %3789, align 8
  %3791 = fadd double %3788, %3790
  store double %3791, double* %230, align 1, !tbaa !2452
  %3792 = add i64 %3755, 40
  %3793 = add i64 %4774, 137
  store i64 %3793, i64* %PC, align 8
  %3794 = inttoptr i64 %3792 to i64*
  %3795 = load i64, i64* %3794, align 8
  store i64 %3795, i64* %RAX, align 8, !tbaa !2428
  %3796 = add i64 %3755, -100
  %3797 = add i64 %4774, 141
  store i64 %3797, i64* %PC, align 8
  %3798 = inttoptr i64 %3796 to i32*
  %3799 = load i32, i32* %3798, align 4
  %3800 = sext i32 %3799 to i64
  %3801 = mul nsw i64 %3800, 33800
  store i64 %3801, i64* %RCX, align 8, !tbaa !2428
  %3802 = lshr i64 %3801, 63
  %3803 = add i64 %3801, %3795
  store i64 %3803, i64* %RAX, align 8, !tbaa !2428
  %3804 = icmp ult i64 %3803, %3795
  %3805 = icmp ult i64 %3803, %3801
  %3806 = or i1 %3804, %3805
  %3807 = zext i1 %3806 to i8
  store i8 %3807, i8* %43, align 1, !tbaa !2432
  %3808 = trunc i64 %3803 to i32
  %3809 = and i32 %3808, 255
  %3810 = tail call i32 @llvm.ctpop.i32(i32 %3809) #8
  %3811 = trunc i32 %3810 to i8
  %3812 = and i8 %3811, 1
  %3813 = xor i8 %3812, 1
  store i8 %3813, i8* %50, align 1, !tbaa !2446
  %3814 = xor i64 %3801, %3795
  %3815 = xor i64 %3814, %3803
  %3816 = lshr i64 %3815, 4
  %3817 = trunc i64 %3816 to i8
  %3818 = and i8 %3817, 1
  store i8 %3818, i8* %55, align 1, !tbaa !2447
  %3819 = icmp eq i64 %3803, 0
  %3820 = zext i1 %3819 to i8
  store i8 %3820, i8* %58, align 1, !tbaa !2448
  %3821 = lshr i64 %3803, 63
  %3822 = trunc i64 %3821 to i8
  store i8 %3822, i8* %61, align 1, !tbaa !2449
  %3823 = lshr i64 %3795, 63
  %3824 = xor i64 %3821, %3823
  %3825 = xor i64 %3821, %3802
  %3826 = add nuw nsw i64 %3824, %3825
  %3827 = icmp eq i64 %3826, 2
  %3828 = zext i1 %3827 to i8
  store i8 %3828, i8* %67, align 1, !tbaa !2450
  %3829 = load i64, i64* %RBP, align 8
  %3830 = add i64 %3829, -104
  %3831 = add i64 %4774, 155
  store i64 %3831, i64* %PC, align 8
  %3832 = inttoptr i64 %3830 to i32*
  %3833 = load i32, i32* %3832, align 4
  %3834 = sext i32 %3833 to i64
  %3835 = mul nsw i64 %3834, 520
  store i64 %3835, i64* %RCX, align 8, !tbaa !2428
  %3836 = lshr i64 %3835, 63
  %3837 = add i64 %3835, %3803
  store i64 %3837, i64* %RAX, align 8, !tbaa !2428
  %3838 = icmp ult i64 %3837, %3803
  %3839 = icmp ult i64 %3837, %3835
  %3840 = or i1 %3838, %3839
  %3841 = zext i1 %3840 to i8
  store i8 %3841, i8* %43, align 1, !tbaa !2432
  %3842 = trunc i64 %3837 to i32
  %3843 = and i32 %3842, 255
  %3844 = tail call i32 @llvm.ctpop.i32(i32 %3843) #8
  %3845 = trunc i32 %3844 to i8
  %3846 = and i8 %3845, 1
  %3847 = xor i8 %3846, 1
  store i8 %3847, i8* %50, align 1, !tbaa !2446
  %3848 = xor i64 %3835, %3803
  %3849 = xor i64 %3848, %3837
  %3850 = lshr i64 %3849, 4
  %3851 = trunc i64 %3850 to i8
  %3852 = and i8 %3851, 1
  store i8 %3852, i8* %55, align 1, !tbaa !2447
  %3853 = icmp eq i64 %3837, 0
  %3854 = zext i1 %3853 to i8
  store i8 %3854, i8* %58, align 1, !tbaa !2448
  %3855 = lshr i64 %3837, 63
  %3856 = trunc i64 %3855 to i8
  store i8 %3856, i8* %61, align 1, !tbaa !2449
  %3857 = xor i64 %3855, %3821
  %3858 = xor i64 %3855, %3836
  %3859 = add nuw nsw i64 %3857, %3858
  %3860 = icmp eq i64 %3859, 2
  %3861 = zext i1 %3860 to i8
  store i8 %3861, i8* %67, align 1, !tbaa !2450
  %3862 = add i64 %3829, -108
  %3863 = add i64 %4774, 169
  store i64 %3863, i64* %PC, align 8
  %3864 = inttoptr i64 %3862 to i32*
  %3865 = load i32, i32* %3864, align 4
  %3866 = sext i32 %3865 to i64
  store i64 %3866, i64* %RCX, align 8, !tbaa !2428
  %3867 = shl nsw i64 %3866, 3
  %3868 = add i64 %3867, %3837
  %3869 = add i64 %4774, 174
  store i64 %3869, i64* %PC, align 8
  %3870 = load double, double* %230, align 1
  %3871 = inttoptr i64 %3868 to double*
  %3872 = load double, double* %3871, align 8
  %3873 = fsub double %3870, %3872
  store double %3873, double* %230, align 1, !tbaa !2452
  %3874 = add i64 %3829, -96
  %3875 = add i64 %4774, 178
  store i64 %3875, i64* %PC, align 8
  %3876 = inttoptr i64 %3874 to i64*
  %3877 = load i64, i64* %3876, align 8
  store i64 %3877, i64* %RAX, align 8, !tbaa !2428
  %3878 = add i64 %3829, -100
  %3879 = add i64 %4774, 182
  store i64 %3879, i64* %PC, align 8
  %3880 = inttoptr i64 %3878 to i32*
  %3881 = load i32, i32* %3880, align 4
  %3882 = sext i32 %3881 to i64
  %3883 = mul nsw i64 %3882, 520
  store i64 %3883, i64* %RCX, align 8, !tbaa !2428
  %3884 = lshr i64 %3883, 63
  %3885 = add i64 %3883, %3877
  store i64 %3885, i64* %RAX, align 8, !tbaa !2428
  %3886 = icmp ult i64 %3885, %3877
  %3887 = icmp ult i64 %3885, %3883
  %3888 = or i1 %3886, %3887
  %3889 = zext i1 %3888 to i8
  store i8 %3889, i8* %43, align 1, !tbaa !2432
  %3890 = trunc i64 %3885 to i32
  %3891 = and i32 %3890, 255
  %3892 = tail call i32 @llvm.ctpop.i32(i32 %3891) #8
  %3893 = trunc i32 %3892 to i8
  %3894 = and i8 %3893, 1
  %3895 = xor i8 %3894, 1
  store i8 %3895, i8* %50, align 1, !tbaa !2446
  %3896 = xor i64 %3883, %3877
  %3897 = xor i64 %3896, %3885
  %3898 = lshr i64 %3897, 4
  %3899 = trunc i64 %3898 to i8
  %3900 = and i8 %3899, 1
  store i8 %3900, i8* %55, align 1, !tbaa !2447
  %3901 = icmp eq i64 %3885, 0
  %3902 = zext i1 %3901 to i8
  store i8 %3902, i8* %58, align 1, !tbaa !2448
  %3903 = lshr i64 %3885, 63
  %3904 = trunc i64 %3903 to i8
  store i8 %3904, i8* %61, align 1, !tbaa !2449
  %3905 = lshr i64 %3877, 63
  %3906 = xor i64 %3903, %3905
  %3907 = xor i64 %3903, %3884
  %3908 = add nuw nsw i64 %3906, %3907
  %3909 = icmp eq i64 %3908, 2
  %3910 = zext i1 %3909 to i8
  store i8 %3910, i8* %67, align 1, !tbaa !2450
  %3911 = load i64, i64* %RBP, align 8
  %3912 = add i64 %3911, -104
  %3913 = add i64 %4774, 196
  store i64 %3913, i64* %PC, align 8
  %3914 = inttoptr i64 %3912 to i32*
  %3915 = load i32, i32* %3914, align 4
  %3916 = sext i32 %3915 to i64
  store i64 %3916, i64* %RCX, align 8, !tbaa !2428
  %3917 = shl nsw i64 %3916, 3
  %3918 = add i64 %3917, %3885
  %3919 = add i64 %4774, 201
  store i64 %3919, i64* %PC, align 8
  %3920 = inttoptr i64 %3918 to double*
  store double %3873, double* %3920, align 8
  %3921 = load i64, i64* %RBP, align 8
  %3922 = add i64 %3921, 88
  %3923 = load i64, i64* %PC, align 8
  %3924 = add i64 %3923, 4
  store i64 %3924, i64* %PC, align 8
  %3925 = inttoptr i64 %3922 to i64*
  %3926 = load i64, i64* %3925, align 8
  store i64 %3926, i64* %RAX, align 8, !tbaa !2428
  %3927 = add i64 %3921, -104
  %3928 = add i64 %3923, 8
  store i64 %3928, i64* %PC, align 8
  %3929 = inttoptr i64 %3927 to i32*
  %3930 = load i32, i32* %3929, align 4
  %3931 = sext i32 %3930 to i64
  store i64 %3931, i64* %RCX, align 8, !tbaa !2428
  %3932 = shl nsw i64 %3931, 3
  %3933 = add i64 %3932, %3926
  %3934 = add i64 %3923, 13
  store i64 %3934, i64* %PC, align 8
  %3935 = inttoptr i64 %3933 to double*
  %3936 = load double, double* %3935, align 8
  store double %3936, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %3937 = add i64 %3921, 96
  %3938 = add i64 %3923, 17
  store i64 %3938, i64* %PC, align 8
  %3939 = inttoptr i64 %3937 to i64*
  %3940 = load i64, i64* %3939, align 8
  store i64 %3940, i64* %RAX, align 8, !tbaa !2428
  %3941 = add i64 %3923, 21
  store i64 %3941, i64* %PC, align 8
  %3942 = load i32, i32* %3929, align 4
  %3943 = sext i32 %3942 to i64
  store i64 %3943, i64* %RCX, align 8, !tbaa !2428
  %3944 = shl nsw i64 %3943, 3
  %3945 = add i64 %3944, %3940
  %3946 = add i64 %3923, 26
  store i64 %3946, i64* %PC, align 8
  %3947 = inttoptr i64 %3945 to double*
  %3948 = load double, double* %3947, align 8
  %3949 = fdiv double %3936, %3948
  store double %3949, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %3950 = add i64 %3921, 24
  %3951 = add i64 %3923, 30
  store i64 %3951, i64* %PC, align 8
  %3952 = inttoptr i64 %3950 to i64*
  %3953 = load i64, i64* %3952, align 8
  store i64 %3953, i64* %RAX, align 8, !tbaa !2428
  %3954 = add i64 %3921, -100
  %3955 = add i64 %3923, 34
  store i64 %3955, i64* %PC, align 8
  %3956 = inttoptr i64 %3954 to i32*
  %3957 = load i32, i32* %3956, align 4
  %3958 = sext i32 %3957 to i64
  %3959 = mul nsw i64 %3958, 33800
  store i64 %3959, i64* %RCX, align 8, !tbaa !2428
  %3960 = lshr i64 %3959, 63
  %3961 = add i64 %3959, %3953
  store i64 %3961, i64* %RAX, align 8, !tbaa !2428
  %3962 = icmp ult i64 %3961, %3953
  %3963 = icmp ult i64 %3961, %3959
  %3964 = or i1 %3962, %3963
  %3965 = zext i1 %3964 to i8
  store i8 %3965, i8* %43, align 1, !tbaa !2432
  %3966 = trunc i64 %3961 to i32
  %3967 = and i32 %3966, 255
  %3968 = tail call i32 @llvm.ctpop.i32(i32 %3967) #8
  %3969 = trunc i32 %3968 to i8
  %3970 = and i8 %3969, 1
  %3971 = xor i8 %3970, 1
  store i8 %3971, i8* %50, align 1, !tbaa !2446
  %3972 = xor i64 %3959, %3953
  %3973 = xor i64 %3972, %3961
  %3974 = lshr i64 %3973, 4
  %3975 = trunc i64 %3974 to i8
  %3976 = and i8 %3975, 1
  store i8 %3976, i8* %55, align 1, !tbaa !2447
  %3977 = icmp eq i64 %3961, 0
  %3978 = zext i1 %3977 to i8
  store i8 %3978, i8* %58, align 1, !tbaa !2448
  %3979 = lshr i64 %3961, 63
  %3980 = trunc i64 %3979 to i8
  store i8 %3980, i8* %61, align 1, !tbaa !2449
  %3981 = lshr i64 %3953, 63
  %3982 = xor i64 %3979, %3981
  %3983 = xor i64 %3979, %3960
  %3984 = add nuw nsw i64 %3982, %3983
  %3985 = icmp eq i64 %3984, 2
  %3986 = zext i1 %3985 to i8
  store i8 %3986, i8* %67, align 1, !tbaa !2450
  %3987 = load i64, i64* %RBP, align 8
  %3988 = add i64 %3987, -104
  %3989 = add i64 %3923, 48
  store i64 %3989, i64* %PC, align 8
  %3990 = inttoptr i64 %3988 to i32*
  %3991 = load i32, i32* %3990, align 4
  %3992 = sext i32 %3991 to i64
  %3993 = mul nsw i64 %3992, 520
  store i64 %3993, i64* %RCX, align 8, !tbaa !2428
  %3994 = lshr i64 %3993, 63
  %3995 = add i64 %3993, %3961
  store i64 %3995, i64* %RAX, align 8, !tbaa !2428
  %3996 = icmp ult i64 %3995, %3961
  %3997 = icmp ult i64 %3995, %3993
  %3998 = or i1 %3996, %3997
  %3999 = zext i1 %3998 to i8
  store i8 %3999, i8* %43, align 1, !tbaa !2432
  %4000 = trunc i64 %3995 to i32
  %4001 = and i32 %4000, 255
  %4002 = tail call i32 @llvm.ctpop.i32(i32 %4001) #8
  %4003 = trunc i32 %4002 to i8
  %4004 = and i8 %4003, 1
  %4005 = xor i8 %4004, 1
  store i8 %4005, i8* %50, align 1, !tbaa !2446
  %4006 = xor i64 %3993, %3961
  %4007 = xor i64 %4006, %3995
  %4008 = lshr i64 %4007, 4
  %4009 = trunc i64 %4008 to i8
  %4010 = and i8 %4009, 1
  store i8 %4010, i8* %55, align 1, !tbaa !2447
  %4011 = icmp eq i64 %3995, 0
  %4012 = zext i1 %4011 to i8
  store i8 %4012, i8* %58, align 1, !tbaa !2448
  %4013 = lshr i64 %3995, 63
  %4014 = trunc i64 %4013 to i8
  store i8 %4014, i8* %61, align 1, !tbaa !2449
  %4015 = xor i64 %4013, %3979
  %4016 = xor i64 %4013, %3994
  %4017 = add nuw nsw i64 %4015, %4016
  %4018 = icmp eq i64 %4017, 2
  %4019 = zext i1 %4018 to i8
  store i8 %4019, i8* %67, align 1, !tbaa !2450
  %4020 = add i64 %3987, -108
  %4021 = add i64 %3923, 62
  store i64 %4021, i64* %PC, align 8
  %4022 = inttoptr i64 %4020 to i32*
  %4023 = load i32, i32* %4022, align 4
  %4024 = sext i32 %4023 to i64
  store i64 %4024, i64* %RCX, align 8, !tbaa !2428
  %4025 = shl nsw i64 %4024, 3
  %4026 = add i64 %4025, %3995
  %4027 = add i64 %3923, 67
  store i64 %4027, i64* %PC, align 8
  %4028 = load double, double* %230, align 1
  %4029 = inttoptr i64 %4026 to double*
  %4030 = load double, double* %4029, align 8
  %4031 = fmul double %4028, %4030
  store double %4031, double* %230, align 1, !tbaa !2452
  %4032 = add i64 %3987, -72
  %4033 = add i64 %3923, 72
  store i64 %4033, i64* %PC, align 8
  %4034 = inttoptr i64 %4032 to double*
  %4035 = load double, double* %4034, align 8
  store double %4035, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %4036 = add i64 %3987, 96
  %4037 = add i64 %3923, 76
  store i64 %4037, i64* %PC, align 8
  %4038 = inttoptr i64 %4036 to i64*
  %4039 = load i64, i64* %4038, align 8
  store i64 %4039, i64* %RAX, align 8, !tbaa !2428
  %4040 = add i64 %3923, 80
  store i64 %4040, i64* %PC, align 8
  %4041 = load i32, i32* %3990, align 4
  %4042 = sext i32 %4041 to i64
  store i64 %4042, i64* %RCX, align 8, !tbaa !2428
  %4043 = shl nsw i64 %4042, 3
  %4044 = add i64 %4043, %4039
  %4045 = add i64 %3923, 85
  store i64 %4045, i64* %PC, align 8
  %4046 = inttoptr i64 %4044 to double*
  %4047 = load double, double* %4046, align 8
  %4048 = fdiv double %4035, %4047
  store double %4048, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %4049 = load i64, i64* %RBP, align 8
  %4050 = add i64 %4049, -96
  %4051 = add i64 %3923, 89
  store i64 %4051, i64* %PC, align 8
  %4052 = inttoptr i64 %4050 to i64*
  %4053 = load i64, i64* %4052, align 8
  store i64 %4053, i64* %RAX, align 8, !tbaa !2428
  %4054 = add i64 %4049, -100
  %4055 = add i64 %3923, 93
  store i64 %4055, i64* %PC, align 8
  %4056 = inttoptr i64 %4054 to i32*
  %4057 = load i32, i32* %4056, align 4
  %4058 = sext i32 %4057 to i64
  %4059 = mul nsw i64 %4058, 520
  store i64 %4059, i64* %RCX, align 8, !tbaa !2428
  %4060 = lshr i64 %4059, 63
  %4061 = add i64 %4059, %4053
  store i64 %4061, i64* %RAX, align 8, !tbaa !2428
  %4062 = icmp ult i64 %4061, %4053
  %4063 = icmp ult i64 %4061, %4059
  %4064 = or i1 %4062, %4063
  %4065 = zext i1 %4064 to i8
  store i8 %4065, i8* %43, align 1, !tbaa !2432
  %4066 = trunc i64 %4061 to i32
  %4067 = and i32 %4066, 255
  %4068 = tail call i32 @llvm.ctpop.i32(i32 %4067) #8
  %4069 = trunc i32 %4068 to i8
  %4070 = and i8 %4069, 1
  %4071 = xor i8 %4070, 1
  store i8 %4071, i8* %50, align 1, !tbaa !2446
  %4072 = xor i64 %4059, %4053
  %4073 = xor i64 %4072, %4061
  %4074 = lshr i64 %4073, 4
  %4075 = trunc i64 %4074 to i8
  %4076 = and i8 %4075, 1
  store i8 %4076, i8* %55, align 1, !tbaa !2447
  %4077 = icmp eq i64 %4061, 0
  %4078 = zext i1 %4077 to i8
  store i8 %4078, i8* %58, align 1, !tbaa !2448
  %4079 = lshr i64 %4061, 63
  %4080 = trunc i64 %4079 to i8
  store i8 %4080, i8* %61, align 1, !tbaa !2449
  %4081 = lshr i64 %4053, 63
  %4082 = xor i64 %4079, %4081
  %4083 = xor i64 %4079, %4060
  %4084 = add nuw nsw i64 %4082, %4083
  %4085 = icmp eq i64 %4084, 2
  %4086 = zext i1 %4085 to i8
  store i8 %4086, i8* %67, align 1, !tbaa !2450
  %4087 = add i64 %4049, -104
  %4088 = add i64 %3923, 107
  store i64 %4088, i64* %PC, align 8
  %4089 = inttoptr i64 %4087 to i32*
  %4090 = load i32, i32* %4089, align 4
  %4091 = sext i32 %4090 to i64
  store i64 %4091, i64* %RCX, align 8, !tbaa !2428
  %4092 = shl nsw i64 %4091, 3
  %4093 = add i64 %4092, %4061
  %4094 = add i64 %3923, 112
  store i64 %4094, i64* %PC, align 8
  %4095 = inttoptr i64 %4093 to double*
  %4096 = load double, double* %4095, align 8
  %4097 = fmul double %4048, %4096
  store double %4097, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %4098 = load double, double* %230, align 1
  %4099 = fsub double %4098, %4097
  store double %4099, double* %230, align 1, !tbaa !2452
  %4100 = add i64 %4049, 16
  %4101 = add i64 %3923, 120
  store i64 %4101, i64* %PC, align 8
  %4102 = inttoptr i64 %4100 to i64*
  %4103 = load i64, i64* %4102, align 8
  store i64 %4103, i64* %RAX, align 8, !tbaa !2428
  %4104 = load i64, i64* %RBP, align 8
  %4105 = add i64 %4104, -100
  %4106 = add i64 %3923, 124
  store i64 %4106, i64* %PC, align 8
  %4107 = inttoptr i64 %4105 to i32*
  %4108 = load i32, i32* %4107, align 4
  %4109 = sext i32 %4108 to i64
  %4110 = mul nsw i64 %4109, 520
  store i64 %4110, i64* %RCX, align 8, !tbaa !2428
  %4111 = lshr i64 %4110, 63
  %4112 = add i64 %4110, %4103
  store i64 %4112, i64* %RAX, align 8, !tbaa !2428
  %4113 = icmp ult i64 %4112, %4103
  %4114 = icmp ult i64 %4112, %4110
  %4115 = or i1 %4113, %4114
  %4116 = zext i1 %4115 to i8
  store i8 %4116, i8* %43, align 1, !tbaa !2432
  %4117 = trunc i64 %4112 to i32
  %4118 = and i32 %4117, 255
  %4119 = tail call i32 @llvm.ctpop.i32(i32 %4118) #8
  %4120 = trunc i32 %4119 to i8
  %4121 = and i8 %4120, 1
  %4122 = xor i8 %4121, 1
  store i8 %4122, i8* %50, align 1, !tbaa !2446
  %4123 = xor i64 %4110, %4103
  %4124 = xor i64 %4123, %4112
  %4125 = lshr i64 %4124, 4
  %4126 = trunc i64 %4125 to i8
  %4127 = and i8 %4126, 1
  store i8 %4127, i8* %55, align 1, !tbaa !2447
  %4128 = icmp eq i64 %4112, 0
  %4129 = zext i1 %4128 to i8
  store i8 %4129, i8* %58, align 1, !tbaa !2448
  %4130 = lshr i64 %4112, 63
  %4131 = trunc i64 %4130 to i8
  store i8 %4131, i8* %61, align 1, !tbaa !2449
  %4132 = lshr i64 %4103, 63
  %4133 = xor i64 %4130, %4132
  %4134 = xor i64 %4130, %4111
  %4135 = add nuw nsw i64 %4133, %4134
  %4136 = icmp eq i64 %4135, 2
  %4137 = zext i1 %4136 to i8
  store i8 %4137, i8* %67, align 1, !tbaa !2450
  %4138 = add i64 %4104, -104
  %4139 = add i64 %3923, 138
  store i64 %4139, i64* %PC, align 8
  %4140 = inttoptr i64 %4138 to i32*
  %4141 = load i32, i32* %4140, align 4
  %4142 = sext i32 %4141 to i64
  store i64 %4142, i64* %RCX, align 8, !tbaa !2428
  %4143 = shl nsw i64 %4142, 3
  %4144 = add i64 %4143, %4112
  %4145 = add i64 %3923, 143
  store i64 %4145, i64* %PC, align 8
  %4146 = inttoptr i64 %4144 to double*
  store double %4099, double* %4146, align 8
  %4147 = load i64, i64* %RBP, align 8
  %4148 = add i64 %4147, 72
  %4149 = load i64, i64* %PC, align 8
  %4150 = add i64 %4149, 4
  store i64 %4150, i64* %PC, align 8
  %4151 = inttoptr i64 %4148 to i64*
  %4152 = load i64, i64* %4151, align 8
  store i64 %4152, i64* %RAX, align 8, !tbaa !2428
  %4153 = add i64 %4147, -108
  %4154 = add i64 %4149, 8
  store i64 %4154, i64* %PC, align 8
  %4155 = inttoptr i64 %4153 to i32*
  %4156 = load i32, i32* %4155, align 4
  %4157 = sext i32 %4156 to i64
  store i64 %4157, i64* %RCX, align 8, !tbaa !2428
  %4158 = shl nsw i64 %4157, 3
  %4159 = add i64 %4158, %4152
  %4160 = add i64 %4149, 13
  store i64 %4160, i64* %PC, align 8
  %4161 = inttoptr i64 %4159 to double*
  %4162 = load double, double* %4161, align 8
  store double %4162, double* %230, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %4163 = add i64 %4147, 80
  %4164 = add i64 %4149, 17
  store i64 %4164, i64* %PC, align 8
  %4165 = inttoptr i64 %4163 to i64*
  %4166 = load i64, i64* %4165, align 8
  store i64 %4166, i64* %RAX, align 8, !tbaa !2428
  %4167 = add i64 %4149, 21
  store i64 %4167, i64* %PC, align 8
  %4168 = load i32, i32* %4155, align 4
  %4169 = sext i32 %4168 to i64
  store i64 %4169, i64* %RCX, align 8, !tbaa !2428
  %4170 = shl nsw i64 %4169, 3
  %4171 = add i64 %4170, %4166
  %4172 = add i64 %4149, 26
  store i64 %4172, i64* %PC, align 8
  %4173 = inttoptr i64 %4171 to double*
  %4174 = load double, double* %4173, align 8
  %4175 = fdiv double %4162, %4174
  store double %4175, double* %230, align 1, !tbaa !2452
  store i64 0, i64* %231, align 1, !tbaa !2452
  %4176 = add i64 %4147, 48
  %4177 = add i64 %4149, 30
  store i64 %4177, i64* %PC, align 8
  %4178 = inttoptr i64 %4176 to i64*
  %4179 = load i64, i64* %4178, align 8
  store i64 %4179, i64* %RAX, align 8, !tbaa !2428
  %4180 = add i64 %4147, -100
  %4181 = add i64 %4149, 34
  store i64 %4181, i64* %PC, align 8
  %4182 = inttoptr i64 %4180 to i32*
  %4183 = load i32, i32* %4182, align 4
  %4184 = sext i32 %4183 to i64
  %4185 = mul nsw i64 %4184, 33800
  store i64 %4185, i64* %RCX, align 8, !tbaa !2428
  %4186 = lshr i64 %4185, 63
  %4187 = add i64 %4185, %4179
  store i64 %4187, i64* %RAX, align 8, !tbaa !2428
  %4188 = icmp ult i64 %4187, %4179
  %4189 = icmp ult i64 %4187, %4185
  %4190 = or i1 %4188, %4189
  %4191 = zext i1 %4190 to i8
  store i8 %4191, i8* %43, align 1, !tbaa !2432
  %4192 = trunc i64 %4187 to i32
  %4193 = and i32 %4192, 255
  %4194 = tail call i32 @llvm.ctpop.i32(i32 %4193) #8
  %4195 = trunc i32 %4194 to i8
  %4196 = and i8 %4195, 1
  %4197 = xor i8 %4196, 1
  store i8 %4197, i8* %50, align 1, !tbaa !2446
  %4198 = xor i64 %4185, %4179
  %4199 = xor i64 %4198, %4187
  %4200 = lshr i64 %4199, 4
  %4201 = trunc i64 %4200 to i8
  %4202 = and i8 %4201, 1
  store i8 %4202, i8* %55, align 1, !tbaa !2447
  %4203 = icmp eq i64 %4187, 0
  %4204 = zext i1 %4203 to i8
  store i8 %4204, i8* %58, align 1, !tbaa !2448
  %4205 = lshr i64 %4187, 63
  %4206 = trunc i64 %4205 to i8
  store i8 %4206, i8* %61, align 1, !tbaa !2449
  %4207 = lshr i64 %4179, 63
  %4208 = xor i64 %4205, %4207
  %4209 = xor i64 %4205, %4186
  %4210 = add nuw nsw i64 %4208, %4209
  %4211 = icmp eq i64 %4210, 2
  %4212 = zext i1 %4211 to i8
  store i8 %4212, i8* %67, align 1, !tbaa !2450
  %4213 = load i64, i64* %RBP, align 8
  %4214 = add i64 %4213, -104
  %4215 = add i64 %4149, 48
  store i64 %4215, i64* %PC, align 8
  %4216 = inttoptr i64 %4214 to i32*
  %4217 = load i32, i32* %4216, align 4
  %4218 = sext i32 %4217 to i64
  %4219 = mul nsw i64 %4218, 520
  store i64 %4219, i64* %RCX, align 8, !tbaa !2428
  %4220 = lshr i64 %4219, 63
  %4221 = add i64 %4219, %4187
  store i64 %4221, i64* %RAX, align 8, !tbaa !2428
  %4222 = icmp ult i64 %4221, %4187
  %4223 = icmp ult i64 %4221, %4219
  %4224 = or i1 %4222, %4223
  %4225 = zext i1 %4224 to i8
  store i8 %4225, i8* %43, align 1, !tbaa !2432
  %4226 = trunc i64 %4221 to i32
  %4227 = and i32 %4226, 255
  %4228 = tail call i32 @llvm.ctpop.i32(i32 %4227) #8
  %4229 = trunc i32 %4228 to i8
  %4230 = and i8 %4229, 1
  %4231 = xor i8 %4230, 1
  store i8 %4231, i8* %50, align 1, !tbaa !2446
  %4232 = xor i64 %4219, %4187
  %4233 = xor i64 %4232, %4221
  %4234 = lshr i64 %4233, 4
  %4235 = trunc i64 %4234 to i8
  %4236 = and i8 %4235, 1
  store i8 %4236, i8* %55, align 1, !tbaa !2447
  %4237 = icmp eq i64 %4221, 0
  %4238 = zext i1 %4237 to i8
  store i8 %4238, i8* %58, align 1, !tbaa !2448
  %4239 = lshr i64 %4221, 63
  %4240 = trunc i64 %4239 to i8
  store i8 %4240, i8* %61, align 1, !tbaa !2449
  %4241 = xor i64 %4239, %4205
  %4242 = xor i64 %4239, %4220
  %4243 = add nuw nsw i64 %4241, %4242
  %4244 = icmp eq i64 %4243, 2
  %4245 = zext i1 %4244 to i8
  store i8 %4245, i8* %67, align 1, !tbaa !2450
  %4246 = add i64 %4213, -108
  %4247 = add i64 %4149, 62
  store i64 %4247, i64* %PC, align 8
  %4248 = inttoptr i64 %4246 to i32*
  %4249 = load i32, i32* %4248, align 4
  %4250 = sext i32 %4249 to i64
  store i64 %4250, i64* %RCX, align 8, !tbaa !2428
  %4251 = shl nsw i64 %4250, 3
  %4252 = add i64 %4251, %4221
  %4253 = add i64 %4149, 67
  store i64 %4253, i64* %PC, align 8
  %4254 = load double, double* %230, align 1
  %4255 = inttoptr i64 %4252 to double*
  %4256 = load double, double* %4255, align 8
  %4257 = fmul double %4254, %4256
  store double %4257, double* %230, align 1, !tbaa !2452
  %4258 = add i64 %4213, -64
  %4259 = add i64 %4149, 72
  store i64 %4259, i64* %PC, align 8
  %4260 = inttoptr i64 %4258 to double*
  %4261 = load double, double* %4260, align 8
  store double %4261, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %4262 = add i64 %4213, 64
  %4263 = add i64 %4149, 76
  store i64 %4263, i64* %PC, align 8
  %4264 = inttoptr i64 %4262 to i64*
  %4265 = load i64, i64* %4264, align 8
  store i64 %4265, i64* %RAX, align 8, !tbaa !2428
  %4266 = add i64 %4213, -100
  %4267 = add i64 %4149, 80
  store i64 %4267, i64* %PC, align 8
  %4268 = inttoptr i64 %4266 to i32*
  %4269 = load i32, i32* %4268, align 4
  %4270 = sext i32 %4269 to i64
  store i64 %4270, i64* %RCX, align 8, !tbaa !2428
  %4271 = shl nsw i64 %4270, 3
  %4272 = add i64 %4271, %4265
  %4273 = add i64 %4149, 85
  store i64 %4273, i64* %PC, align 8
  %4274 = inttoptr i64 %4272 to double*
  %4275 = load double, double* %4274, align 8
  %4276 = fmul double %4261, %4275
  store double %4276, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %4277 = load i64, i64* %RBP, align 8
  %4278 = add i64 %4277, 80
  %4279 = add i64 %4149, 89
  store i64 %4279, i64* %PC, align 8
  %4280 = inttoptr i64 %4278 to i64*
  %4281 = load i64, i64* %4280, align 8
  store i64 %4281, i64* %RAX, align 8, !tbaa !2428
  %4282 = add i64 %4277, -108
  %4283 = add i64 %4149, 93
  store i64 %4283, i64* %PC, align 8
  %4284 = inttoptr i64 %4282 to i32*
  %4285 = load i32, i32* %4284, align 4
  %4286 = sext i32 %4285 to i64
  store i64 %4286, i64* %RCX, align 8, !tbaa !2428
  %4287 = shl nsw i64 %4286, 3
  %4288 = add i64 %4287, %4281
  %4289 = add i64 %4149, 98
  store i64 %4289, i64* %PC, align 8
  %4290 = inttoptr i64 %4288 to double*
  %4291 = load double, double* %4290, align 8
  %4292 = fdiv double %4276, %4291
  store double %4292, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %4293 = add i64 %4277, 16
  %4294 = add i64 %4149, 102
  store i64 %4294, i64* %PC, align 8
  %4295 = inttoptr i64 %4293 to i64*
  %4296 = load i64, i64* %4295, align 8
  store i64 %4296, i64* %RAX, align 8, !tbaa !2428
  %4297 = add i64 %4277, -100
  %4298 = add i64 %4149, 106
  store i64 %4298, i64* %PC, align 8
  %4299 = inttoptr i64 %4297 to i32*
  %4300 = load i32, i32* %4299, align 4
  %4301 = sext i32 %4300 to i64
  %4302 = mul nsw i64 %4301, 520
  store i64 %4302, i64* %RCX, align 8, !tbaa !2428
  %4303 = lshr i64 %4302, 63
  %4304 = add i64 %4302, %4296
  store i64 %4304, i64* %RAX, align 8, !tbaa !2428
  %4305 = icmp ult i64 %4304, %4296
  %4306 = icmp ult i64 %4304, %4302
  %4307 = or i1 %4305, %4306
  %4308 = zext i1 %4307 to i8
  store i8 %4308, i8* %43, align 1, !tbaa !2432
  %4309 = trunc i64 %4304 to i32
  %4310 = and i32 %4309, 255
  %4311 = tail call i32 @llvm.ctpop.i32(i32 %4310) #8
  %4312 = trunc i32 %4311 to i8
  %4313 = and i8 %4312, 1
  %4314 = xor i8 %4313, 1
  store i8 %4314, i8* %50, align 1, !tbaa !2446
  %4315 = xor i64 %4302, %4296
  %4316 = xor i64 %4315, %4304
  %4317 = lshr i64 %4316, 4
  %4318 = trunc i64 %4317 to i8
  %4319 = and i8 %4318, 1
  store i8 %4319, i8* %55, align 1, !tbaa !2447
  %4320 = icmp eq i64 %4304, 0
  %4321 = zext i1 %4320 to i8
  store i8 %4321, i8* %58, align 1, !tbaa !2448
  %4322 = lshr i64 %4304, 63
  %4323 = trunc i64 %4322 to i8
  store i8 %4323, i8* %61, align 1, !tbaa !2449
  %4324 = lshr i64 %4296, 63
  %4325 = xor i64 %4322, %4324
  %4326 = xor i64 %4322, %4303
  %4327 = add nuw nsw i64 %4325, %4326
  %4328 = icmp eq i64 %4327, 2
  %4329 = zext i1 %4328 to i8
  store i8 %4329, i8* %67, align 1, !tbaa !2450
  %4330 = add i64 %4277, -104
  %4331 = add i64 %4149, 120
  store i64 %4331, i64* %PC, align 8
  %4332 = inttoptr i64 %4330 to i32*
  %4333 = load i32, i32* %4332, align 4
  %4334 = sext i32 %4333 to i64
  store i64 %4334, i64* %RCX, align 8, !tbaa !2428
  %4335 = shl nsw i64 %4334, 3
  %4336 = add i64 %4335, %4304
  %4337 = add i64 %4149, 125
  store i64 %4337, i64* %PC, align 8
  %4338 = inttoptr i64 %4336 to double*
  %4339 = load double, double* %4338, align 8
  %4340 = fmul double %4292, %4339
  store double %4340, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %4341 = load double, double* %230, align 1
  %4342 = fadd double %4341, %4340
  store double %4342, double* %230, align 1, !tbaa !2452
  %4343 = load i64, i64* %RBP, align 8
  %4344 = add i64 %4343, -64
  %4345 = add i64 %4149, 134
  store i64 %4345, i64* %PC, align 8
  %4346 = inttoptr i64 %4344 to double*
  %4347 = load double, double* %4346, align 8
  store double %4347, double* %233, align 1, !tbaa !2452
  store double 0.000000e+00, double* %235, align 1, !tbaa !2452
  %4348 = add i64 %4343, 56
  %4349 = add i64 %4149, 138
  store i64 %4349, i64* %PC, align 8
  %4350 = inttoptr i64 %4348 to i64*
  %4351 = load i64, i64* %4350, align 8
  store i64 %4351, i64* %RAX, align 8, !tbaa !2428
  %4352 = add i64 %4343, -100
  %4353 = add i64 %4149, 142
  store i64 %4353, i64* %PC, align 8
  %4354 = inttoptr i64 %4352 to i32*
  %4355 = load i32, i32* %4354, align 4
  %4356 = sext i32 %4355 to i64
  store i64 %4356, i64* %RCX, align 8, !tbaa !2428
  %4357 = shl nsw i64 %4356, 3
  %4358 = add i64 %4357, %4351
  %4359 = add i64 %4149, 147
  store i64 %4359, i64* %PC, align 8
  %4360 = inttoptr i64 %4358 to double*
  %4361 = load double, double* %4360, align 8
  %4362 = fmul double %4347, %4361
  store double %4362, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %4363 = add i64 %4343, 80
  %4364 = add i64 %4149, 151
  store i64 %4364, i64* %PC, align 8
  %4365 = inttoptr i64 %4363 to i64*
  %4366 = load i64, i64* %4365, align 8
  store i64 %4366, i64* %RAX, align 8, !tbaa !2428
  %4367 = add i64 %4343, -108
  %4368 = add i64 %4149, 155
  store i64 %4368, i64* %PC, align 8
  %4369 = inttoptr i64 %4367 to i32*
  %4370 = load i32, i32* %4369, align 4
  %4371 = sext i32 %4370 to i64
  store i64 %4371, i64* %RCX, align 8, !tbaa !2428
  %4372 = shl nsw i64 %4371, 3
  %4373 = add i64 %4372, %4366
  %4374 = add i64 %4149, 160
  store i64 %4374, i64* %PC, align 8
  %4375 = inttoptr i64 %4373 to double*
  %4376 = load double, double* %4375, align 8
  %4377 = fdiv double %4362, %4376
  store double %4377, double* %233, align 1, !tbaa !2452
  store i64 0, i64* %234, align 1, !tbaa !2452
  %4378 = add i64 %4343, 24
  %4379 = add i64 %4149, 164
  store i64 %4379, i64* %PC, align 8
  %4380 = inttoptr i64 %4378 to i64*
  %4381 = load i64, i64* %4380, align 8
  store i64 %4381, i64* %RAX, align 8, !tbaa !2428
  %4382 = add i64 %4149, 168
  store i64 %4382, i64* %PC, align 8
  %4383 = load i32, i32* %4354, align 4
  %4384 = sext i32 %4383 to i64
  %4385 = mul nsw i64 %4384, 33800
  store i64 %4385, i64* %RCX, align 8, !tbaa !2428
  %4386 = lshr i64 %4385, 63
  %4387 = add i64 %4385, %4381
  store i64 %4387, i64* %RAX, align 8, !tbaa !2428
  %4388 = icmp ult i64 %4387, %4381
  %4389 = icmp ult i64 %4387, %4385
  %4390 = or i1 %4388, %4389
  %4391 = zext i1 %4390 to i8
  store i8 %4391, i8* %43, align 1, !tbaa !2432
  %4392 = trunc i64 %4387 to i32
  %4393 = and i32 %4392, 255
  %4394 = tail call i32 @llvm.ctpop.i32(i32 %4393) #8
  %4395 = trunc i32 %4394 to i8
  %4396 = and i8 %4395, 1
  %4397 = xor i8 %4396, 1
  store i8 %4397, i8* %50, align 1, !tbaa !2446
  %4398 = xor i64 %4385, %4381
  %4399 = xor i64 %4398, %4387
  %4400 = lshr i64 %4399, 4
  %4401 = trunc i64 %4400 to i8
  %4402 = and i8 %4401, 1
  store i8 %4402, i8* %55, align 1, !tbaa !2447
  %4403 = icmp eq i64 %4387, 0
  %4404 = zext i1 %4403 to i8
  store i8 %4404, i8* %58, align 1, !tbaa !2448
  %4405 = lshr i64 %4387, 63
  %4406 = trunc i64 %4405 to i8
  store i8 %4406, i8* %61, align 1, !tbaa !2449
  %4407 = lshr i64 %4381, 63
  %4408 = xor i64 %4405, %4407
  %4409 = xor i64 %4405, %4386
  %4410 = add nuw nsw i64 %4408, %4409
  %4411 = icmp eq i64 %4410, 2
  %4412 = zext i1 %4411 to i8
  store i8 %4412, i8* %67, align 1, !tbaa !2450
  %4413 = load i64, i64* %RBP, align 8
  %4414 = add i64 %4413, -104
  %4415 = add i64 %4149, 182
  store i64 %4415, i64* %PC, align 8
  %4416 = inttoptr i64 %4414 to i32*
  %4417 = load i32, i32* %4416, align 4
  %4418 = sext i32 %4417 to i64
  %4419 = mul nsw i64 %4418, 520
  store i64 %4419, i64* %RCX, align 8, !tbaa !2428
  %4420 = lshr i64 %4419, 63
  %4421 = add i64 %4419, %4387
  store i64 %4421, i64* %RAX, align 8, !tbaa !2428
  %4422 = icmp ult i64 %4421, %4387
  %4423 = icmp ult i64 %4421, %4419
  %4424 = or i1 %4422, %4423
  %4425 = zext i1 %4424 to i8
  store i8 %4425, i8* %43, align 1, !tbaa !2432
  %4426 = trunc i64 %4421 to i32
  %4427 = and i32 %4426, 255
  %4428 = tail call i32 @llvm.ctpop.i32(i32 %4427) #8
  %4429 = trunc i32 %4428 to i8
  %4430 = and i8 %4429, 1
  %4431 = xor i8 %4430, 1
  store i8 %4431, i8* %50, align 1, !tbaa !2446
  %4432 = xor i64 %4419, %4387
  %4433 = xor i64 %4432, %4421
  %4434 = lshr i64 %4433, 4
  %4435 = trunc i64 %4434 to i8
  %4436 = and i8 %4435, 1
  store i8 %4436, i8* %55, align 1, !tbaa !2447
  %4437 = icmp eq i64 %4421, 0
  %4438 = zext i1 %4437 to i8
  store i8 %4438, i8* %58, align 1, !tbaa !2448
  %4439 = lshr i64 %4421, 63
  %4440 = trunc i64 %4439 to i8
  store i8 %4440, i8* %61, align 1, !tbaa !2449
  %4441 = xor i64 %4439, %4405
  %4442 = xor i64 %4439, %4420
  %4443 = add nuw nsw i64 %4441, %4442
  %4444 = icmp eq i64 %4443, 2
  %4445 = zext i1 %4444 to i8
  store i8 %4445, i8* %67, align 1, !tbaa !2450
  %4446 = add i64 %4413, -108
  %4447 = add i64 %4149, 196
  store i64 %4447, i64* %PC, align 8
  %4448 = inttoptr i64 %4446 to i32*
  %4449 = load i32, i32* %4448, align 4
  %4450 = sext i32 %4449 to i64
  store i64 %4450, i64* %RCX, align 8, !tbaa !2428
  %4451 = shl nsw i64 %4450, 3
  %4452 = add i64 %4451, %4421
  %4453 = add i64 %4149, 201
  store i64 %4453, i64* %PC, align 8
  %4454 = load double, double* %233, align 1
  %4455 = inttoptr i64 %4452 to double*
  %4456 = load double, double* %4455, align 8
  %4457 = fmul double %4454, %4456
  store double %4457, double* %233, align 1, !tbaa !2452
  %4458 = load double, double* %230, align 1
  %4459 = fsub double %4458, %4457
  store double %4459, double* %230, align 1, !tbaa !2452
  %4460 = add i64 %4413, 48
  %4461 = add i64 %4149, 209
  store i64 %4461, i64* %PC, align 8
  %4462 = inttoptr i64 %4460 to i64*
  %4463 = load i64, i64* %4462, align 8
  store i64 %4463, i64* %RAX, align 8, !tbaa !2428
  %4464 = add i64 %4413, -100
  %4465 = add i64 %4149, 213
  store i64 %4465, i64* %PC, align 8
  %4466 = inttoptr i64 %4464 to i32*
  %4467 = load i32, i32* %4466, align 4
  %4468 = sext i32 %4467 to i64
  %4469 = mul nsw i64 %4468, 33800
  store i64 %4469, i64* %RCX, align 8, !tbaa !2428
  %4470 = lshr i64 %4469, 63
  %4471 = add i64 %4469, %4463
  store i64 %4471, i64* %RAX, align 8, !tbaa !2428
  %4472 = icmp ult i64 %4471, %4463
  %4473 = icmp ult i64 %4471, %4469
  %4474 = or i1 %4472, %4473
  %4475 = zext i1 %4474 to i8
  store i8 %4475, i8* %43, align 1, !tbaa !2432
  %4476 = trunc i64 %4471 to i32
  %4477 = and i32 %4476, 255
  %4478 = tail call i32 @llvm.ctpop.i32(i32 %4477) #8
  %4479 = trunc i32 %4478 to i8
  %4480 = and i8 %4479, 1
  %4481 = xor i8 %4480, 1
  store i8 %4481, i8* %50, align 1, !tbaa !2446
  %4482 = xor i64 %4469, %4463
  %4483 = xor i64 %4482, %4471
  %4484 = lshr i64 %4483, 4
  %4485 = trunc i64 %4484 to i8
  %4486 = and i8 %4485, 1
  store i8 %4486, i8* %55, align 1, !tbaa !2447
  %4487 = icmp eq i64 %4471, 0
  %4488 = zext i1 %4487 to i8
  store i8 %4488, i8* %58, align 1, !tbaa !2448
  %4489 = lshr i64 %4471, 63
  %4490 = trunc i64 %4489 to i8
  store i8 %4490, i8* %61, align 1, !tbaa !2449
  %4491 = lshr i64 %4463, 63
  %4492 = xor i64 %4489, %4491
  %4493 = xor i64 %4489, %4470
  %4494 = add nuw nsw i64 %4492, %4493
  %4495 = icmp eq i64 %4494, 2
  %4496 = zext i1 %4495 to i8
  store i8 %4496, i8* %67, align 1, !tbaa !2450
  %4497 = load i64, i64* %RBP, align 8
  %4498 = add i64 %4497, -104
  %4499 = add i64 %4149, 227
  store i64 %4499, i64* %PC, align 8
  %4500 = inttoptr i64 %4498 to i32*
  %4501 = load i32, i32* %4500, align 4
  %4502 = sext i32 %4501 to i64
  %4503 = mul nsw i64 %4502, 520
  store i64 %4503, i64* %RCX, align 8, !tbaa !2428
  %4504 = lshr i64 %4503, 63
  %4505 = add i64 %4503, %4471
  store i64 %4505, i64* %RAX, align 8, !tbaa !2428
  %4506 = icmp ult i64 %4505, %4471
  %4507 = icmp ult i64 %4505, %4503
  %4508 = or i1 %4506, %4507
  %4509 = zext i1 %4508 to i8
  store i8 %4509, i8* %43, align 1, !tbaa !2432
  %4510 = trunc i64 %4505 to i32
  %4511 = and i32 %4510, 255
  %4512 = tail call i32 @llvm.ctpop.i32(i32 %4511) #8
  %4513 = trunc i32 %4512 to i8
  %4514 = and i8 %4513, 1
  %4515 = xor i8 %4514, 1
  store i8 %4515, i8* %50, align 1, !tbaa !2446
  %4516 = xor i64 %4503, %4471
  %4517 = xor i64 %4516, %4505
  %4518 = lshr i64 %4517, 4
  %4519 = trunc i64 %4518 to i8
  %4520 = and i8 %4519, 1
  store i8 %4520, i8* %55, align 1, !tbaa !2447
  %4521 = icmp eq i64 %4505, 0
  %4522 = zext i1 %4521 to i8
  store i8 %4522, i8* %58, align 1, !tbaa !2448
  %4523 = lshr i64 %4505, 63
  %4524 = trunc i64 %4523 to i8
  store i8 %4524, i8* %61, align 1, !tbaa !2449
  %4525 = xor i64 %4523, %4489
  %4526 = xor i64 %4523, %4504
  %4527 = add nuw nsw i64 %4525, %4526
  %4528 = icmp eq i64 %4527, 2
  %4529 = zext i1 %4528 to i8
  store i8 %4529, i8* %67, align 1, !tbaa !2450
  %4530 = add i64 %4497, -108
  %4531 = add i64 %4149, 241
  store i64 %4531, i64* %PC, align 8
  %4532 = inttoptr i64 %4530 to i32*
  %4533 = load i32, i32* %4532, align 4
  %4534 = sext i32 %4533 to i64
  store i64 %4534, i64* %RCX, align 8, !tbaa !2428
  %4535 = shl nsw i64 %4534, 3
  %4536 = add i64 %4535, %4505
  %4537 = add i64 %4149, 246
  store i64 %4537, i64* %PC, align 8
  %4538 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %4539 = load i64, i64* %4538, align 1
  %4540 = inttoptr i64 %4536 to i64*
  store i64 %4539, i64* %4540, align 8
  %4541 = load i64, i64* %RBP, align 8
  %4542 = add i64 %4541, 16
  %4543 = load i64, i64* %PC, align 8
  %4544 = add i64 %4543, 4
  store i64 %4544, i64* %PC, align 8
  %4545 = inttoptr i64 %4542 to i64*
  %4546 = load i64, i64* %4545, align 8
  store i64 %4546, i64* %RAX, align 8, !tbaa !2428
  %4547 = add i64 %4541, -100
  %4548 = add i64 %4543, 8
  store i64 %4548, i64* %PC, align 8
  %4549 = inttoptr i64 %4547 to i32*
  %4550 = load i32, i32* %4549, align 4
  %4551 = sext i32 %4550 to i64
  %4552 = mul nsw i64 %4551, 520
  store i64 %4552, i64* %RCX, align 8, !tbaa !2428
  %4553 = lshr i64 %4552, 63
  %4554 = add i64 %4552, %4546
  store i64 %4554, i64* %RAX, align 8, !tbaa !2428
  %4555 = icmp ult i64 %4554, %4546
  %4556 = icmp ult i64 %4554, %4552
  %4557 = or i1 %4555, %4556
  %4558 = zext i1 %4557 to i8
  store i8 %4558, i8* %43, align 1, !tbaa !2432
  %4559 = trunc i64 %4554 to i32
  %4560 = and i32 %4559, 255
  %4561 = tail call i32 @llvm.ctpop.i32(i32 %4560) #8
  %4562 = trunc i32 %4561 to i8
  %4563 = and i8 %4562, 1
  %4564 = xor i8 %4563, 1
  store i8 %4564, i8* %50, align 1, !tbaa !2446
  %4565 = xor i64 %4552, %4546
  %4566 = xor i64 %4565, %4554
  %4567 = lshr i64 %4566, 4
  %4568 = trunc i64 %4567 to i8
  %4569 = and i8 %4568, 1
  store i8 %4569, i8* %55, align 1, !tbaa !2447
  %4570 = icmp eq i64 %4554, 0
  %4571 = zext i1 %4570 to i8
  store i8 %4571, i8* %58, align 1, !tbaa !2448
  %4572 = lshr i64 %4554, 63
  %4573 = trunc i64 %4572 to i8
  store i8 %4573, i8* %61, align 1, !tbaa !2449
  %4574 = lshr i64 %4546, 63
  %4575 = xor i64 %4572, %4574
  %4576 = xor i64 %4572, %4553
  %4577 = add nuw nsw i64 %4575, %4576
  %4578 = icmp eq i64 %4577, 2
  %4579 = zext i1 %4578 to i8
  store i8 %4579, i8* %67, align 1, !tbaa !2450
  %4580 = add i64 %4541, -104
  %4581 = add i64 %4543, 22
  store i64 %4581, i64* %PC, align 8
  %4582 = inttoptr i64 %4580 to i32*
  %4583 = load i32, i32* %4582, align 4
  %4584 = sext i32 %4583 to i64
  store i64 %4584, i64* %RCX, align 8, !tbaa !2428
  %4585 = shl nsw i64 %4584, 3
  %4586 = add i64 %4585, %4554
  %4587 = add i64 %4543, 27
  store i64 %4587, i64* %PC, align 8
  %4588 = inttoptr i64 %4586 to i64*
  %4589 = load i64, i64* %4588, align 8
  %4590 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %4589, i64* %4590, align 1, !tbaa !2452
  store double 0.000000e+00, double* %232, align 1, !tbaa !2452
  %4591 = add i64 %4541, 24
  %4592 = add i64 %4543, 31
  store i64 %4592, i64* %PC, align 8
  %4593 = inttoptr i64 %4591 to i64*
  %4594 = load i64, i64* %4593, align 8
  store i64 %4594, i64* %RAX, align 8, !tbaa !2428
  %4595 = add i64 %4543, 35
  store i64 %4595, i64* %PC, align 8
  %4596 = load i32, i32* %4549, align 4
  %4597 = sext i32 %4596 to i64
  %4598 = mul nsw i64 %4597, 33800
  store i64 %4598, i64* %RCX, align 8, !tbaa !2428
  %4599 = lshr i64 %4598, 63
  %4600 = add i64 %4598, %4594
  store i64 %4600, i64* %RAX, align 8, !tbaa !2428
  %4601 = icmp ult i64 %4600, %4594
  %4602 = icmp ult i64 %4600, %4598
  %4603 = or i1 %4601, %4602
  %4604 = zext i1 %4603 to i8
  store i8 %4604, i8* %43, align 1, !tbaa !2432
  %4605 = trunc i64 %4600 to i32
  %4606 = and i32 %4605, 255
  %4607 = tail call i32 @llvm.ctpop.i32(i32 %4606) #8
  %4608 = trunc i32 %4607 to i8
  %4609 = and i8 %4608, 1
  %4610 = xor i8 %4609, 1
  store i8 %4610, i8* %50, align 1, !tbaa !2446
  %4611 = xor i64 %4598, %4594
  %4612 = xor i64 %4611, %4600
  %4613 = lshr i64 %4612, 4
  %4614 = trunc i64 %4613 to i8
  %4615 = and i8 %4614, 1
  store i8 %4615, i8* %55, align 1, !tbaa !2447
  %4616 = icmp eq i64 %4600, 0
  %4617 = zext i1 %4616 to i8
  store i8 %4617, i8* %58, align 1, !tbaa !2448
  %4618 = lshr i64 %4600, 63
  %4619 = trunc i64 %4618 to i8
  store i8 %4619, i8* %61, align 1, !tbaa !2449
  %4620 = lshr i64 %4594, 63
  %4621 = xor i64 %4618, %4620
  %4622 = xor i64 %4618, %4599
  %4623 = add nuw nsw i64 %4621, %4622
  %4624 = icmp eq i64 %4623, 2
  %4625 = zext i1 %4624 to i8
  store i8 %4625, i8* %67, align 1, !tbaa !2450
  %4626 = load i64, i64* %RBP, align 8
  %4627 = add i64 %4626, -104
  %4628 = add i64 %4543, 49
  store i64 %4628, i64* %PC, align 8
  %4629 = inttoptr i64 %4627 to i32*
  %4630 = load i32, i32* %4629, align 4
  %4631 = sext i32 %4630 to i64
  %4632 = mul nsw i64 %4631, 520
  store i64 %4632, i64* %RCX, align 8, !tbaa !2428
  %4633 = lshr i64 %4632, 63
  %4634 = add i64 %4632, %4600
  store i64 %4634, i64* %RAX, align 8, !tbaa !2428
  %4635 = icmp ult i64 %4634, %4600
  %4636 = icmp ult i64 %4634, %4632
  %4637 = or i1 %4635, %4636
  %4638 = zext i1 %4637 to i8
  store i8 %4638, i8* %43, align 1, !tbaa !2432
  %4639 = trunc i64 %4634 to i32
  %4640 = and i32 %4639, 255
  %4641 = tail call i32 @llvm.ctpop.i32(i32 %4640) #8
  %4642 = trunc i32 %4641 to i8
  %4643 = and i8 %4642, 1
  %4644 = xor i8 %4643, 1
  store i8 %4644, i8* %50, align 1, !tbaa !2446
  %4645 = xor i64 %4632, %4600
  %4646 = xor i64 %4645, %4634
  %4647 = lshr i64 %4646, 4
  %4648 = trunc i64 %4647 to i8
  %4649 = and i8 %4648, 1
  store i8 %4649, i8* %55, align 1, !tbaa !2447
  %4650 = icmp eq i64 %4634, 0
  %4651 = zext i1 %4650 to i8
  store i8 %4651, i8* %58, align 1, !tbaa !2448
  %4652 = lshr i64 %4634, 63
  %4653 = trunc i64 %4652 to i8
  store i8 %4653, i8* %61, align 1, !tbaa !2449
  %4654 = xor i64 %4652, %4618
  %4655 = xor i64 %4652, %4633
  %4656 = add nuw nsw i64 %4654, %4655
  %4657 = icmp eq i64 %4656, 2
  %4658 = zext i1 %4657 to i8
  store i8 %4658, i8* %67, align 1, !tbaa !2450
  %4659 = add i64 %4626, -108
  %4660 = add i64 %4543, 63
  store i64 %4660, i64* %PC, align 8
  %4661 = inttoptr i64 %4659 to i32*
  %4662 = load i32, i32* %4661, align 4
  %4663 = sext i32 %4662 to i64
  store i64 %4663, i64* %RCX, align 8, !tbaa !2428
  %4664 = shl nsw i64 %4663, 3
  %4665 = add i64 %4664, %4634
  %4666 = add i64 %4543, 68
  store i64 %4666, i64* %PC, align 8
  %4667 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %4668 = load i64, i64* %4667, align 1
  %4669 = inttoptr i64 %4665 to i64*
  store i64 %4668, i64* %4669, align 8
  %4670 = load i64, i64* %RBP, align 8
  %4671 = add i64 %4670, -108
  %4672 = load i64, i64* %PC, align 8
  %4673 = add i64 %4672, 3
  store i64 %4673, i64* %PC, align 8
  %4674 = inttoptr i64 %4671 to i32*
  %4675 = load i32, i32* %4674, align 4
  %4676 = add i32 %4675, 1
  %4677 = zext i32 %4676 to i64
  store i64 %4677, i64* %RAX, align 8, !tbaa !2428
  %4678 = icmp eq i32 %4675, -1
  %4679 = icmp eq i32 %4676, 0
  %4680 = or i1 %4678, %4679
  %4681 = zext i1 %4680 to i8
  store i8 %4681, i8* %43, align 1, !tbaa !2432
  %4682 = and i32 %4676, 255
  %4683 = tail call i32 @llvm.ctpop.i32(i32 %4682) #8
  %4684 = trunc i32 %4683 to i8
  %4685 = and i8 %4684, 1
  %4686 = xor i8 %4685, 1
  store i8 %4686, i8* %50, align 1, !tbaa !2446
  %4687 = xor i32 %4675, %4676
  %4688 = lshr i32 %4687, 4
  %4689 = trunc i32 %4688 to i8
  %4690 = and i8 %4689, 1
  store i8 %4690, i8* %55, align 1, !tbaa !2447
  %4691 = icmp eq i32 %4676, 0
  %4692 = zext i1 %4691 to i8
  store i8 %4692, i8* %58, align 1, !tbaa !2448
  %4693 = lshr i32 %4676, 31
  %4694 = trunc i32 %4693 to i8
  store i8 %4694, i8* %61, align 1, !tbaa !2449
  %4695 = lshr i32 %4675, 31
  %4696 = xor i32 %4693, %4695
  %4697 = add nuw nsw i32 %4696, %4693
  %4698 = icmp eq i32 %4697, 2
  %4699 = zext i1 %4698 to i8
  store i8 %4699, i8* %67, align 1, !tbaa !2450
  %4700 = add i64 %4672, 9
  store i64 %4700, i64* %PC, align 8
  store i32 %4676, i32* %4674, align 4
  %4701 = load i64, i64* %PC, align 8
  %4702 = add i64 %4701, -679
  store i64 %4702, i64* %229, align 8, !tbaa !2428
  br label %block_4014a0

block_401486:                                     ; preds = %block_40147a
  %4703 = add i64 %240, -104
  %4704 = add i64 %276, 7
  store i64 %4704, i64* %PC, align 8
  %4705 = inttoptr i64 %4703 to i32*
  store i32 0, i32* %4705, align 4
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_40148d

block_401ee5:                                     ; preds = %block_40148d
  %4706 = add i64 %329, -100
  %4707 = add i64 %365, 8
  store i64 %4707, i64* %PC, align 8
  %4708 = inttoptr i64 %4706 to i32*
  %4709 = load i32, i32* %4708, align 4
  %4710 = add i32 %4709, 1
  %4711 = zext i32 %4710 to i64
  store i64 %4711, i64* %RAX, align 8, !tbaa !2428
  %4712 = icmp eq i32 %4709, -1
  %4713 = icmp eq i32 %4710, 0
  %4714 = or i1 %4712, %4713
  %4715 = zext i1 %4714 to i8
  store i8 %4715, i8* %43, align 1, !tbaa !2432
  %4716 = and i32 %4710, 255
  %4717 = tail call i32 @llvm.ctpop.i32(i32 %4716) #8
  %4718 = trunc i32 %4717 to i8
  %4719 = and i8 %4718, 1
  %4720 = xor i8 %4719, 1
  store i8 %4720, i8* %50, align 1, !tbaa !2446
  %4721 = xor i32 %4709, %4710
  %4722 = lshr i32 %4721, 4
  %4723 = trunc i32 %4722 to i8
  %4724 = and i8 %4723, 1
  store i8 %4724, i8* %55, align 1, !tbaa !2447
  %4725 = icmp eq i32 %4710, 0
  %4726 = zext i1 %4725 to i8
  store i8 %4726, i8* %58, align 1, !tbaa !2448
  %4727 = lshr i32 %4710, 31
  %4728 = trunc i32 %4727 to i8
  store i8 %4728, i8* %61, align 1, !tbaa !2449
  %4729 = lshr i32 %4709, 31
  %4730 = xor i32 %4727, %4729
  %4731 = add nuw nsw i32 %4730, %4727
  %4732 = icmp eq i32 %4731, 2
  %4733 = zext i1 %4732 to i8
  store i8 %4733, i8* %67, align 1, !tbaa !2450
  %4734 = add i64 %365, 14
  store i64 %4734, i64* %PC, align 8
  store i32 %4710, i32* %4708, align 4
  %4735 = load i64, i64* %PC, align 8
  %4736 = add i64 %4735, -2681
  store i64 %4736, i64* %229, align 8, !tbaa !2428
  br label %block_40147a

block_4014a0:                                     ; preds = %block_4014ac, %block_401499
  %4737 = phi i64 [ %4702, %block_4014ac ], [ %.pre3, %block_401499 ]
  %4738 = load i64, i64* %RBP, align 8
  %4739 = add i64 %4738, -108
  %4740 = add i64 %4737, 3
  store i64 %4740, i64* %PC, align 8
  %4741 = inttoptr i64 %4739 to i32*
  %4742 = load i32, i32* %4741, align 4
  %4743 = zext i32 %4742 to i64
  store i64 %4743, i64* %RAX, align 8, !tbaa !2428
  %4744 = add i64 %4738, -48
  %4745 = add i64 %4737, 6
  store i64 %4745, i64* %PC, align 8
  %4746 = inttoptr i64 %4744 to i32*
  %4747 = load i32, i32* %4746, align 4
  %4748 = sub i32 %4742, %4747
  %4749 = icmp ult i32 %4742, %4747
  %4750 = zext i1 %4749 to i8
  store i8 %4750, i8* %43, align 1, !tbaa !2432
  %4751 = and i32 %4748, 255
  %4752 = tail call i32 @llvm.ctpop.i32(i32 %4751) #8
  %4753 = trunc i32 %4752 to i8
  %4754 = and i8 %4753, 1
  %4755 = xor i8 %4754, 1
  store i8 %4755, i8* %50, align 1, !tbaa !2446
  %4756 = xor i32 %4747, %4742
  %4757 = xor i32 %4756, %4748
  %4758 = lshr i32 %4757, 4
  %4759 = trunc i32 %4758 to i8
  %4760 = and i8 %4759, 1
  store i8 %4760, i8* %55, align 1, !tbaa !2447
  %4761 = icmp eq i32 %4748, 0
  %4762 = zext i1 %4761 to i8
  store i8 %4762, i8* %58, align 1, !tbaa !2448
  %4763 = lshr i32 %4748, 31
  %4764 = trunc i32 %4763 to i8
  store i8 %4764, i8* %61, align 1, !tbaa !2449
  %4765 = lshr i32 %4742, 31
  %4766 = lshr i32 %4747, 31
  %4767 = xor i32 %4766, %4765
  %4768 = xor i32 %4763, %4765
  %4769 = add nuw nsw i32 %4768, %4767
  %4770 = icmp eq i32 %4769, 2
  %4771 = zext i1 %4770 to i8
  store i8 %4771, i8* %67, align 1, !tbaa !2450
  %4772 = icmp ne i8 %4764, 0
  %4773 = xor i1 %4772, %4770
  %.v6 = select i1 %4773, i64 12, i64 684
  %4774 = add i64 %4737, %.v6
  %4775 = add i64 %4738, 32
  %4776 = add i64 %4774, 4
  store i64 %4776, i64* %PC, align 8
  %4777 = inttoptr i64 %4775 to i64*
  %4778 = load i64, i64* %4777, align 8
  store i64 %4778, i64* %RAX, align 8, !tbaa !2428
  %4779 = add i64 %4738, -100
  %4780 = add i64 %4774, 8
  store i64 %4780, i64* %PC, align 8
  %4781 = inttoptr i64 %4779 to i32*
  %4782 = load i32, i32* %4781, align 4
  %4783 = sext i32 %4782 to i64
  %4784 = mul nsw i64 %4783, 33800
  store i64 %4784, i64* %RCX, align 8, !tbaa !2428
  %4785 = lshr i64 %4784, 63
  %4786 = add i64 %4784, %4778
  store i64 %4786, i64* %RAX, align 8, !tbaa !2428
  %4787 = icmp ult i64 %4786, %4778
  %4788 = icmp ult i64 %4786, %4784
  %4789 = or i1 %4787, %4788
  %4790 = zext i1 %4789 to i8
  store i8 %4790, i8* %43, align 1, !tbaa !2432
  %4791 = trunc i64 %4786 to i32
  %4792 = and i32 %4791, 255
  %4793 = tail call i32 @llvm.ctpop.i32(i32 %4792) #8
  %4794 = trunc i32 %4793 to i8
  %4795 = and i8 %4794, 1
  %4796 = xor i8 %4795, 1
  store i8 %4796, i8* %50, align 1, !tbaa !2446
  %4797 = xor i64 %4784, %4778
  %4798 = xor i64 %4797, %4786
  %4799 = lshr i64 %4798, 4
  %4800 = trunc i64 %4799 to i8
  %4801 = and i8 %4800, 1
  store i8 %4801, i8* %55, align 1, !tbaa !2447
  %4802 = icmp eq i64 %4786, 0
  %4803 = zext i1 %4802 to i8
  store i8 %4803, i8* %58, align 1, !tbaa !2448
  %4804 = lshr i64 %4786, 63
  %4805 = trunc i64 %4804 to i8
  store i8 %4805, i8* %61, align 1, !tbaa !2449
  %4806 = lshr i64 %4778, 63
  %4807 = xor i64 %4804, %4806
  %4808 = xor i64 %4804, %4785
  %4809 = add nuw nsw i64 %4807, %4808
  %4810 = icmp eq i64 %4809, 2
  %4811 = zext i1 %4810 to i8
  store i8 %4811, i8* %67, align 1, !tbaa !2450
  %4812 = load i64, i64* %RBP, align 8
  %4813 = add i64 %4812, -104
  %4814 = add i64 %4774, 22
  store i64 %4814, i64* %PC, align 8
  %4815 = inttoptr i64 %4813 to i32*
  %4816 = load i32, i32* %4815, align 4
  %4817 = sext i32 %4816 to i64
  %4818 = mul nsw i64 %4817, 520
  store i64 %4818, i64* %RCX, align 8, !tbaa !2428
  %4819 = lshr i64 %4818, 63
  %4820 = add i64 %4774, 32
  store i64 %4820, i64* %PC, align 8
  %4821 = add i64 %4818, %4786
  store i64 %4821, i64* %RAX, align 8, !tbaa !2428
  %4822 = icmp ult i64 %4821, %4786
  %4823 = icmp ult i64 %4821, %4818
  %4824 = or i1 %4822, %4823
  %4825 = zext i1 %4824 to i8
  store i8 %4825, i8* %43, align 1, !tbaa !2432
  %4826 = trunc i64 %4821 to i32
  %4827 = and i32 %4826, 255
  %4828 = tail call i32 @llvm.ctpop.i32(i32 %4827) #8
  %4829 = trunc i32 %4828 to i8
  %4830 = and i8 %4829, 1
  %4831 = xor i8 %4830, 1
  store i8 %4831, i8* %50, align 1, !tbaa !2446
  %4832 = xor i64 %4818, %4786
  %4833 = xor i64 %4832, %4821
  %4834 = lshr i64 %4833, 4
  %4835 = trunc i64 %4834 to i8
  %4836 = and i8 %4835, 1
  store i8 %4836, i8* %55, align 1, !tbaa !2447
  %4837 = icmp eq i64 %4821, 0
  %4838 = zext i1 %4837 to i8
  store i8 %4838, i8* %58, align 1, !tbaa !2448
  %4839 = lshr i64 %4821, 63
  %4840 = trunc i64 %4839 to i8
  store i8 %4840, i8* %61, align 1, !tbaa !2449
  %4841 = xor i64 %4839, %4804
  %4842 = xor i64 %4839, %4819
  %4843 = add nuw nsw i64 %4841, %4842
  %4844 = icmp eq i64 %4843, 2
  %4845 = zext i1 %4844 to i8
  store i8 %4845, i8* %67, align 1, !tbaa !2450
  br i1 %4773, label %block_4014ac, label %block_40174c
}

; Function Attrs: noinline
define %struct.Memory* @sub_400800_xmalloc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400800:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -40
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 32
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #8
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %7, -24
  store i64 %39, i64* %RAX, align 8, !tbaa !2428
  store i64 32, i64* %RCX, align 8, !tbaa !2428
  store i64 32, i64* %RSI, align 8, !tbaa !2428
  %40 = add i64 %7, -16
  %41 = load i64, i64* %RDI, align 8
  %42 = add i64 %10, 22
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 8
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %45 to i64*
  store i64 0, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDX, align 8, !tbaa !2428
  %55 = load i64, i64* %RAX, align 8
  store i64 %55, i64* %RDI, align 8, !tbaa !2428
  %56 = add i64 %51, -639
  %57 = add i64 %51, 12
  %58 = load i64, i64* %6, align 8, !tbaa !2428
  %59 = add i64 %58, -8
  %60 = inttoptr i64 %59 to i64*
  store i64 %57, i64* %60, align 8
  store i64 %59, i64* %6, align 8, !tbaa !2428
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %56, i64* %61, align 8, !tbaa !2428
  %62 = tail call fastcc %struct.Memory* @ext_4005a0_posix_memalign(%struct.State* nonnull %0, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -20
  %65 = load i32, i32* %EAX, align 4
  %66 = load i64, i64* %PC, align 8
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %64 to i32*
  store i32 %65, i32* %68, align 4
  %69 = load i64, i64* %RBP, align 8
  %70 = add i64 %69, -16
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 5
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %70 to i64*
  %74 = load i64, i64* %73, align 8
  store i8 0, i8* %14, align 1, !tbaa !2432
  %75 = trunc i64 %74 to i32
  %76 = and i32 %75, 255
  %77 = tail call i32 @llvm.ctpop.i32(i32 %76) #8
  %78 = trunc i32 %77 to i8
  %79 = and i8 %78, 1
  %80 = xor i8 %79, 1
  store i8 %80, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  %81 = icmp eq i64 %74, 0
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %29, align 1, !tbaa !2448
  %83 = lshr i64 %74, 63
  %84 = trunc i64 %83 to i8
  store i8 %84, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  %.v = select i1 %81, i64 21, i64 11
  %85 = add i64 %71, %.v
  store i64 %85, i64* %61, align 8, !tbaa !2428
  br i1 %81, label %block_400843, label %block_400839

block_400843:                                     ; preds = %block_400839, %block_400800
  %86 = phi i64 [ %122, %block_400839 ], [ %85, %block_400800 ]
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 119), i64* %RSI, align 8, !tbaa !2428
  %87 = load i64, i64* @stderr, align 32
  store i64 %87, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2454
  %88 = add i64 %86, -707
  %89 = add i64 %86, 25
  %90 = load i64, i64* %6, align 8, !tbaa !2428
  %91 = add i64 %90, -8
  %92 = inttoptr i64 %91 to i64*
  store i64 %89, i64* %92, align 8
  store i64 %91, i64* %6, align 8, !tbaa !2428
  store i64 %88, i64* %61, align 8, !tbaa !2428
  %93 = tail call fastcc %struct.Memory* @ext_6040f8_fprintf(%struct.State* nonnull %0, %struct.Memory* %62)
  %94 = load i64, i64* %PC, align 8
  store i64 1, i64* %RDI, align 8, !tbaa !2428
  %95 = load i64, i64* %RBP, align 8
  %96 = add i64 %95, -24
  %97 = load i32, i32* %EAX, align 4
  %98 = add i64 %94, 8
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %96 to i32*
  store i32 %97, i32* %99, align 4
  %100 = load i64, i64* %PC, align 8
  %101 = add i64 %100, -724
  %102 = add i64 %100, 5
  %103 = load i64, i64* %6, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %102, i64* %105, align 8
  store i64 %104, i64* %6, align 8, !tbaa !2428
  store i64 %101, i64* %61, align 8, !tbaa !2428
  %106 = tail call fastcc %struct.Memory* @ext_6040c8_exit(%struct.State* nonnull %0, %struct.Memory* %93)
  %107 = load i64, i64* %PC, align 8
  %108 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %107, %struct.Memory* %106)
  ret %struct.Memory* %108

block_400839:                                     ; preds = %block_400800
  %109 = add i64 %69, -20
  %110 = add i64 %85, 4
  store i64 %110, i64* %PC, align 8
  %111 = inttoptr i64 %109 to i32*
  %112 = load i32, i32* %111, align 4
  store i8 0, i8* %14, align 1, !tbaa !2432
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #8
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  %118 = icmp eq i32 %112, 0
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %29, align 1, !tbaa !2448
  %120 = lshr i32 %112, 31
  %121 = trunc i32 %120 to i8
  store i8 %121, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  %.v1 = select i1 %118, i64 48, i64 10
  %122 = add i64 %85, %.v1
  store i64 %122, i64* %61, align 8, !tbaa !2428
  br i1 %118, label %block_400869, label %block_400843

block_400869:                                     ; preds = %block_400839
  %123 = add i64 %122, 4
  store i64 %123, i64* %PC, align 8
  %124 = load i64, i64* %73, align 8
  store i64 %124, i64* %RAX, align 8, !tbaa !2428
  %125 = load i64, i64* %RSP, align 8
  %126 = add i64 %125, 32
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %127 = icmp ugt i64 %125, -33
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %14, align 1, !tbaa !2432
  %129 = trunc i64 %126 to i32
  %130 = and i32 %129, 255
  %131 = tail call i32 @llvm.ctpop.i32(i32 %130) #8
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  store i8 %134, i8* %21, align 1, !tbaa !2446
  %135 = xor i64 %125, %126
  %136 = lshr i64 %135, 4
  %137 = trunc i64 %136 to i8
  %138 = and i8 %137, 1
  store i8 %138, i8* %26, align 1, !tbaa !2447
  %139 = icmp eq i64 %126, 0
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %29, align 1, !tbaa !2448
  %141 = lshr i64 %126, 63
  %142 = trunc i64 %141 to i8
  store i8 %142, i8* %32, align 1, !tbaa !2449
  %143 = lshr i64 %125, 63
  %144 = xor i64 %141, %143
  %145 = add nuw nsw i64 %144, %141
  %146 = icmp eq i64 %145, 2
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %38, align 1, !tbaa !2450
  %148 = add i64 %122, 9
  store i64 %148, i64* %PC, align 8
  %149 = add i64 %125, 40
  %150 = inttoptr i64 %126 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RBP, align 8, !tbaa !2428
  store i64 %149, i64* %6, align 8, !tbaa !2428
  %152 = add i64 %122, 10
  store i64 %152, i64* %PC, align 8
  %153 = inttoptr i64 %149 to i64*
  %154 = load i64, i64* %153, align 8
  store i64 %154, i64* %61, align 8, !tbaa !2428
  %155 = add i64 %125, 48
  store i64 %155, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %62
}

; Function Attrs: noinline
define %struct.Memory* @sub_402e70___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402e70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  %9 = add i64 %6, 8
  store i64 %9, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400880_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400880:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %12, align 8
  %13 = load i64, i64* %PC, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  %14 = load i64, i64* %R15, align 8
  %15 = add i64 %13, 5
  store i64 %15, i64* %PC, align 8
  %16 = add i64 %10, -16
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = load i64, i64* %R14, align 8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 2
  store i64 %20, i64* %PC, align 8
  %21 = add i64 %10, -24
  %22 = inttoptr i64 %21 to i64*
  store i64 %18, i64* %22, align 8
  %23 = load i64, i64* %R13, align 8
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 2
  store i64 %25, i64* %PC, align 8
  %26 = add i64 %10, -32
  %27 = inttoptr i64 %26 to i64*
  store i64 %23, i64* %27, align 8
  %28 = load i64, i64* %R12, align 8
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 2
  store i64 %30, i64* %PC, align 8
  %31 = add i64 %10, -40
  %32 = inttoptr i64 %31 to i64*
  store i64 %28, i64* %32, align 8
  %33 = load i64, i64* %RBX, align 8
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 1
  store i64 %35, i64* %PC, align 8
  %36 = add i64 %10, -48
  %37 = inttoptr i64 %36 to i64*
  store i64 %33, i64* %37, align 8
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %10, -440
  store i64 %39, i64* %RSP, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, 392
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #8
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 %36, %39
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2447
  %55 = icmp eq i64 %39, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2448
  %58 = lshr i64 %39, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2449
  %61 = lshr i64 %36, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %61
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2450
  store i64 4225, i64* %RCX, align 8, !tbaa !2428
  store i64 8, i64* %RAX, align 8, !tbaa !2428
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -44
  %69 = add i64 %38, 26
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i32*
  store i32 0, i32* %70, align 4
  %71 = load i64, i64* %RBP, align 8
  %72 = add i64 %71, -48
  %73 = load i32, i32* %EDI, align 4
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 3
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %72 to i32*
  store i32 %73, i32* %76, align 4
  %77 = load i64, i64* %RBP, align 8
  %78 = add i64 %77, -56
  %79 = load i64, i64* %RSI, align 8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %82, align 8
  %83 = load i64, i64* %RBP, align 8
  %84 = add i64 %83, -60
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 7
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %84 to i32*
  store i32 64, i32* %87, align 4
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -64
  %90 = load i64, i64* %PC, align 8
  %91 = add i64 %90, 7
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %89 to i32*
  store i32 64, i32* %92, align 4
  %93 = load i64, i64* %RBP, align 8
  %94 = add i64 %93, -68
  %95 = load i64, i64* %PC, align 8
  %96 = add i64 %95, 7
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %94 to i32*
  store i32 64, i32* %97, align 4
  %98 = load i64, i64* %RCX, align 8
  %99 = load i64, i64* %PC, align 8
  store i64 %98, i64* %RDI, align 8, !tbaa !2428
  %100 = load i32, i32* %EAX, align 4
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %RSI, align 8, !tbaa !2428
  %102 = add i64 %99, -259
  %103 = add i64 %99, 10
  %104 = load i64, i64* %9, align 8, !tbaa !2428
  %105 = add i64 %104, -8
  %106 = inttoptr i64 %105 to i64*
  store i64 %103, i64* %106, align 8
  store i64 %105, i64* %9, align 8, !tbaa !2428
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %102, i64* %107, align 8, !tbaa !2428
  %108 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %102, %struct.Memory* %2)
  %109 = load i64, i64* %PC, align 8
  store i64 4225, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %110 = load i64, i64* %RBP, align 8
  %111 = add i64 %110, -96
  %112 = load i64, i64* %RAX, align 8
  %113 = add i64 %109, 16
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %111 to i64*
  store i64 %112, i64* %114, align 8
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, -285
  %117 = add i64 %115, 5
  %118 = load i64, i64* %9, align 8, !tbaa !2428
  %119 = add i64 %118, -8
  %120 = inttoptr i64 %119 to i64*
  store i64 %117, i64* %120, align 8
  store i64 %119, i64* %9, align 8, !tbaa !2428
  store i64 %116, i64* %107, align 8, !tbaa !2428
  %121 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %116, %struct.Memory* %108)
  %122 = load i64, i64* %PC, align 8
  store i64 4225, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %123 = load i64, i64* %RBP, align 8
  %124 = add i64 %123, -104
  %125 = load i64, i64* %RAX, align 8
  %126 = add i64 %122, 16
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %124 to i64*
  store i64 %125, i64* %127, align 8
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, -306
  %130 = add i64 %128, 5
  %131 = load i64, i64* %9, align 8, !tbaa !2428
  %132 = add i64 %131, -8
  %133 = inttoptr i64 %132 to i64*
  store i64 %130, i64* %133, align 8
  store i64 %132, i64* %9, align 8, !tbaa !2428
  store i64 %129, i64* %107, align 8, !tbaa !2428
  %134 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %129, %struct.Memory* %121)
  %135 = load i64, i64* %PC, align 8
  store i64 4225, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %136 = load i64, i64* %RBP, align 8
  %137 = add i64 %136, -112
  %138 = load i64, i64* %RAX, align 8
  %139 = add i64 %135, 16
  store i64 %139, i64* %PC, align 8
  %140 = inttoptr i64 %137 to i64*
  store i64 %138, i64* %140, align 8
  %141 = load i64, i64* %PC, align 8
  %142 = add i64 %141, -327
  %143 = add i64 %141, 5
  %144 = load i64, i64* %9, align 8, !tbaa !2428
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %143, i64* %146, align 8
  store i64 %145, i64* %9, align 8, !tbaa !2428
  store i64 %142, i64* %107, align 8, !tbaa !2428
  %147 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %142, %struct.Memory* %134)
  %148 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %149 = load i64, i64* %RBP, align 8
  %150 = add i64 %149, -120
  %151 = load i64, i64* %RAX, align 8
  %152 = add i64 %148, 16
  store i64 %152, i64* %PC, align 8
  %153 = inttoptr i64 %150 to i64*
  store i64 %151, i64* %153, align 8
  %154 = load i64, i64* %PC, align 8
  %155 = add i64 %154, -348
  %156 = add i64 %154, 5
  %157 = load i64, i64* %9, align 8, !tbaa !2428
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %9, align 8, !tbaa !2428
  store i64 %155, i64* %107, align 8, !tbaa !2428
  %160 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %155, %struct.Memory* %147)
  %161 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %162 = load i64, i64* %RBP, align 8
  %163 = add i64 %162, -128
  %164 = load i64, i64* %RAX, align 8
  %165 = add i64 %161, 16
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %163 to i64*
  store i64 %164, i64* %166, align 8
  %167 = load i64, i64* %PC, align 8
  %168 = add i64 %167, -369
  %169 = add i64 %167, 5
  %170 = load i64, i64* %9, align 8, !tbaa !2428
  %171 = add i64 %170, -8
  %172 = inttoptr i64 %171 to i64*
  store i64 %169, i64* %172, align 8
  store i64 %171, i64* %9, align 8, !tbaa !2428
  store i64 %168, i64* %107, align 8, !tbaa !2428
  %173 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %168, %struct.Memory* %160)
  %174 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP, align 8
  %176 = add i64 %175, -136
  %177 = load i64, i64* %RAX, align 8
  %178 = add i64 %174, 19
  store i64 %178, i64* %PC, align 8
  %179 = inttoptr i64 %176 to i64*
  store i64 %177, i64* %179, align 8
  %180 = load i64, i64* %PC, align 8
  %181 = add i64 %180, -393
  %182 = add i64 %180, 5
  %183 = load i64, i64* %9, align 8, !tbaa !2428
  %184 = add i64 %183, -8
  %185 = inttoptr i64 %184 to i64*
  store i64 %182, i64* %185, align 8
  store i64 %184, i64* %9, align 8, !tbaa !2428
  store i64 %181, i64* %107, align 8, !tbaa !2428
  %186 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %181, %struct.Memory* %173)
  %187 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %188 = load i64, i64* %RBP, align 8
  %189 = add i64 %188, -144
  %190 = load i64, i64* %RAX, align 8
  %191 = add i64 %187, 19
  store i64 %191, i64* %PC, align 8
  %192 = inttoptr i64 %189 to i64*
  store i64 %190, i64* %192, align 8
  %193 = load i64, i64* %PC, align 8
  %194 = add i64 %193, -417
  %195 = add i64 %193, 5
  %196 = load i64, i64* %9, align 8, !tbaa !2428
  %197 = add i64 %196, -8
  %198 = inttoptr i64 %197 to i64*
  store i64 %195, i64* %198, align 8
  store i64 %197, i64* %9, align 8, !tbaa !2428
  store i64 %194, i64* %107, align 8, !tbaa !2428
  %199 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %194, %struct.Memory* %186)
  %200 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -152
  %203 = load i64, i64* %RAX, align 8
  %204 = add i64 %200, 19
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %202 to i64*
  store i64 %203, i64* %205, align 8
  %206 = load i64, i64* %PC, align 8
  %207 = add i64 %206, -441
  %208 = add i64 %206, 5
  %209 = load i64, i64* %9, align 8, !tbaa !2428
  %210 = add i64 %209, -8
  %211 = inttoptr i64 %210 to i64*
  store i64 %208, i64* %211, align 8
  store i64 %210, i64* %9, align 8, !tbaa !2428
  store i64 %207, i64* %107, align 8, !tbaa !2428
  %212 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %207, %struct.Memory* %199)
  %213 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP, align 8
  %215 = add i64 %214, -160
  %216 = load i64, i64* %RAX, align 8
  %217 = add i64 %213, 19
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %218, align 8
  %219 = load i64, i64* %PC, align 8
  %220 = add i64 %219, -465
  %221 = add i64 %219, 5
  %222 = load i64, i64* %9, align 8, !tbaa !2428
  %223 = add i64 %222, -8
  %224 = inttoptr i64 %223 to i64*
  store i64 %221, i64* %224, align 8
  store i64 %223, i64* %9, align 8, !tbaa !2428
  store i64 %220, i64* %107, align 8, !tbaa !2428
  %225 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %220, %struct.Memory* %212)
  %226 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %227 = load i64, i64* %RBP, align 8
  %228 = add i64 %227, -168
  %229 = load i64, i64* %RAX, align 8
  %230 = add i64 %226, 19
  store i64 %230, i64* %PC, align 8
  %231 = inttoptr i64 %228 to i64*
  store i64 %229, i64* %231, align 8
  %232 = load i64, i64* %PC, align 8
  %233 = add i64 %232, -489
  %234 = add i64 %232, 5
  %235 = load i64, i64* %9, align 8, !tbaa !2428
  %236 = add i64 %235, -8
  %237 = inttoptr i64 %236 to i64*
  store i64 %234, i64* %237, align 8
  store i64 %236, i64* %9, align 8, !tbaa !2428
  store i64 %233, i64* %107, align 8, !tbaa !2428
  %238 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %233, %struct.Memory* %225)
  %239 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %240 = load i64, i64* %RBP, align 8
  %241 = add i64 %240, -176
  %242 = load i64, i64* %RAX, align 8
  %243 = add i64 %239, 19
  store i64 %243, i64* %PC, align 8
  %244 = inttoptr i64 %241 to i64*
  store i64 %242, i64* %244, align 8
  %245 = load i64, i64* %PC, align 8
  %246 = add i64 %245, -513
  %247 = add i64 %245, 5
  %248 = load i64, i64* %9, align 8, !tbaa !2428
  %249 = add i64 %248, -8
  %250 = inttoptr i64 %249 to i64*
  store i64 %247, i64* %250, align 8
  store i64 %249, i64* %9, align 8, !tbaa !2428
  store i64 %246, i64* %107, align 8, !tbaa !2428
  %251 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %246, %struct.Memory* %238)
  %252 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %253 = load i64, i64* %RBP, align 8
  %254 = add i64 %253, -184
  %255 = load i64, i64* %RAX, align 8
  %256 = add i64 %252, 19
  store i64 %256, i64* %PC, align 8
  %257 = inttoptr i64 %254 to i64*
  store i64 %255, i64* %257, align 8
  %258 = load i64, i64* %PC, align 8
  %259 = add i64 %258, -537
  %260 = add i64 %258, 5
  %261 = load i64, i64* %9, align 8, !tbaa !2428
  %262 = add i64 %261, -8
  %263 = inttoptr i64 %262 to i64*
  store i64 %260, i64* %263, align 8
  store i64 %262, i64* %9, align 8, !tbaa !2428
  store i64 %259, i64* %107, align 8, !tbaa !2428
  %264 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %259, %struct.Memory* %251)
  %265 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %266 = load i64, i64* %RBP, align 8
  %267 = add i64 %266, -192
  %268 = load i64, i64* %RAX, align 8
  %269 = add i64 %265, 19
  store i64 %269, i64* %PC, align 8
  %270 = inttoptr i64 %267 to i64*
  store i64 %268, i64* %270, align 8
  %271 = load i64, i64* %PC, align 8
  %272 = add i64 %271, -561
  %273 = add i64 %271, 5
  %274 = load i64, i64* %9, align 8, !tbaa !2428
  %275 = add i64 %274, -8
  %276 = inttoptr i64 %275 to i64*
  store i64 %273, i64* %276, align 8
  store i64 %275, i64* %9, align 8, !tbaa !2428
  store i64 %272, i64* %107, align 8, !tbaa !2428
  %277 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %272, %struct.Memory* %264)
  %278 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %279 = load i64, i64* %RBP, align 8
  %280 = add i64 %279, -200
  %281 = load i64, i64* %RAX, align 8
  %282 = add i64 %278, 19
  store i64 %282, i64* %PC, align 8
  %283 = inttoptr i64 %280 to i64*
  store i64 %281, i64* %283, align 8
  %284 = load i64, i64* %PC, align 8
  %285 = add i64 %284, -585
  %286 = add i64 %284, 5
  %287 = load i64, i64* %9, align 8, !tbaa !2428
  %288 = add i64 %287, -8
  %289 = inttoptr i64 %288 to i64*
  store i64 %286, i64* %289, align 8
  store i64 %288, i64* %9, align 8, !tbaa !2428
  store i64 %285, i64* %107, align 8, !tbaa !2428
  %290 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %285, %struct.Memory* %277)
  %291 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %292 = load i64, i64* %RBP, align 8
  %293 = add i64 %292, -208
  %294 = load i64, i64* %RAX, align 8
  %295 = add i64 %291, 19
  store i64 %295, i64* %PC, align 8
  %296 = inttoptr i64 %293 to i64*
  store i64 %294, i64* %296, align 8
  %297 = load i64, i64* %PC, align 8
  %298 = add i64 %297, -609
  %299 = add i64 %297, 5
  %300 = load i64, i64* %9, align 8, !tbaa !2428
  %301 = add i64 %300, -8
  %302 = inttoptr i64 %301 to i64*
  store i64 %299, i64* %302, align 8
  store i64 %301, i64* %9, align 8, !tbaa !2428
  store i64 %298, i64* %107, align 8, !tbaa !2428
  %303 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %298, %struct.Memory* %290)
  %304 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %305 = load i64, i64* %RBP, align 8
  %306 = add i64 %305, -216
  %307 = load i64, i64* %RAX, align 8
  %308 = add i64 %304, 19
  store i64 %308, i64* %PC, align 8
  %309 = inttoptr i64 %306 to i64*
  store i64 %307, i64* %309, align 8
  %310 = load i64, i64* %PC, align 8
  %311 = add i64 %310, -633
  %312 = add i64 %310, 5
  %313 = load i64, i64* %9, align 8, !tbaa !2428
  %314 = add i64 %313, -8
  %315 = inttoptr i64 %314 to i64*
  store i64 %312, i64* %315, align 8
  store i64 %314, i64* %9, align 8, !tbaa !2428
  store i64 %311, i64* %107, align 8, !tbaa !2428
  %316 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %311, %struct.Memory* %303)
  %317 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %318 = load i64, i64* %RBP, align 8
  %319 = add i64 %318, -224
  %320 = load i64, i64* %RAX, align 8
  %321 = add i64 %317, 19
  store i64 %321, i64* %PC, align 8
  %322 = inttoptr i64 %319 to i64*
  store i64 %320, i64* %322, align 8
  %323 = load i64, i64* %PC, align 8
  %324 = add i64 %323, -657
  %325 = add i64 %323, 5
  %326 = load i64, i64* %9, align 8, !tbaa !2428
  %327 = add i64 %326, -8
  %328 = inttoptr i64 %327 to i64*
  store i64 %325, i64* %328, align 8
  store i64 %327, i64* %9, align 8, !tbaa !2428
  store i64 %324, i64* %107, align 8, !tbaa !2428
  %329 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %324, %struct.Memory* %316)
  %330 = load i64, i64* %RBP, align 8
  %331 = add i64 %330, -80
  %332 = load i64, i64* %PC, align 8
  store i64 %331, i64* %RCX, align 8, !tbaa !2428
  %333 = add i64 %330, -88
  store i64 %333, i64* %R8, align 8, !tbaa !2428
  %334 = add i64 %330, -232
  %335 = load i64, i64* %RAX, align 8
  %336 = add i64 %332, 15
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %334 to i64*
  store i64 %335, i64* %337, align 8
  %338 = load i64, i64* %RBP, align 8
  %339 = add i64 %338, -60
  %340 = load i64, i64* %PC, align 8
  %341 = add i64 %340, 3
  store i64 %341, i64* %PC, align 8
  %342 = inttoptr i64 %339 to i32*
  %343 = load i32, i32* %342, align 4
  %344 = zext i32 %343 to i64
  store i64 %344, i64* %RDI, align 8, !tbaa !2428
  %345 = add i64 %338, -68
  %346 = add i64 %340, 6
  store i64 %346, i64* %PC, align 8
  %347 = inttoptr i64 %345 to i32*
  %348 = load i32, i32* %347, align 4
  %349 = zext i32 %348 to i64
  store i64 %349, i64* %RSI, align 8, !tbaa !2428
  %350 = add i64 %338, -64
  %351 = add i64 %340, 9
  store i64 %351, i64* %PC, align 8
  %352 = inttoptr i64 %350 to i32*
  %353 = load i32, i32* %352, align 4
  %354 = zext i32 %353 to i64
  store i64 %354, i64* %RDX, align 8, !tbaa !2428
  %355 = add i64 %338, -96
  %356 = add i64 %340, 13
  store i64 %356, i64* %PC, align 8
  %357 = inttoptr i64 %355 to i64*
  %358 = load i64, i64* %357, align 8
  store i64 %358, i64* %R9, align 8, !tbaa !2428
  %359 = add i64 %338, -104
  %360 = add i64 %340, 17
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %359 to i64*
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %RAX, align 8, !tbaa !2428
  %363 = add i64 %338, -136
  %364 = add i64 %340, 24
  store i64 %364, i64* %PC, align 8
  %365 = inttoptr i64 %363 to i64*
  %366 = load i64, i64* %365, align 8
  store i64 %366, i64* %R10, align 8, !tbaa !2428
  %367 = add i64 %338, -144
  %368 = add i64 %340, 31
  store i64 %368, i64* %PC, align 8
  %369 = inttoptr i64 %367 to i64*
  %370 = load i64, i64* %369, align 8
  store i64 %370, i64* %R11, align 8, !tbaa !2428
  %371 = add i64 %338, -152
  %372 = add i64 %340, 38
  store i64 %372, i64* %PC, align 8
  %373 = inttoptr i64 %371 to i64*
  %374 = load i64, i64* %373, align 8
  store i64 %374, i64* %RBX, align 8, !tbaa !2428
  %375 = add i64 %338, -192
  %376 = add i64 %340, 45
  store i64 %376, i64* %PC, align 8
  %377 = inttoptr i64 %375 to i64*
  %378 = load i64, i64* %377, align 8
  store i64 %378, i64* %R14, align 8, !tbaa !2428
  %379 = add i64 %338, -200
  %380 = add i64 %340, 52
  store i64 %380, i64* %PC, align 8
  %381 = inttoptr i64 %379 to i64*
  %382 = load i64, i64* %381, align 8
  store i64 %382, i64* %R15, align 8, !tbaa !2428
  %383 = add i64 %338, -208
  %384 = add i64 %340, 59
  store i64 %384, i64* %PC, align 8
  %385 = inttoptr i64 %383 to i64*
  %386 = load i64, i64* %385, align 8
  store i64 %386, i64* %R12, align 8, !tbaa !2428
  %387 = add i64 %338, -216
  %388 = add i64 %340, 66
  store i64 %388, i64* %PC, align 8
  %389 = inttoptr i64 %387 to i64*
  %390 = load i64, i64* %389, align 8
  store i64 %390, i64* %R13, align 8, !tbaa !2428
  %391 = add i64 %338, -240
  %392 = add i64 %340, 73
  store i64 %392, i64* %PC, align 8
  %393 = inttoptr i64 %391 to i64*
  store i64 %362, i64* %393, align 8
  %394 = load i64, i64* %RBP, align 8
  %395 = add i64 %394, -224
  %396 = load i64, i64* %PC, align 8
  %397 = add i64 %396, 7
  store i64 %397, i64* %PC, align 8
  %398 = inttoptr i64 %395 to i64*
  %399 = load i64, i64* %398, align 8
  store i64 %399, i64* %RAX, align 8, !tbaa !2428
  %400 = add i64 %394, -248
  %401 = add i64 %396, 14
  store i64 %401, i64* %PC, align 8
  %402 = inttoptr i64 %400 to i64*
  store i64 %399, i64* %402, align 8
  %403 = load i64, i64* %RBP, align 8
  %404 = add i64 %403, -232
  %405 = load i64, i64* %PC, align 8
  %406 = add i64 %405, 7
  store i64 %406, i64* %PC, align 8
  %407 = inttoptr i64 %404 to i64*
  %408 = load i64, i64* %407, align 8
  store i64 %408, i64* %RAX, align 8, !tbaa !2428
  %409 = add i64 %403, -256
  %410 = add i64 %405, 14
  store i64 %410, i64* %PC, align 8
  %411 = inttoptr i64 %409 to i64*
  store i64 %408, i64* %411, align 8
  %412 = load i64, i64* %RBP, align 8
  %413 = add i64 %412, -240
  %414 = load i64, i64* %PC, align 8
  %415 = add i64 %414, 7
  store i64 %415, i64* %PC, align 8
  %416 = inttoptr i64 %413 to i64*
  %417 = load i64, i64* %416, align 8
  store i64 %417, i64* %RAX, align 8, !tbaa !2428
  %418 = bitcast i64* %RSP to i64**
  %419 = load i64*, i64** %418, align 8
  %420 = add i64 %414, 11
  store i64 %420, i64* %PC, align 8
  store i64 %417, i64* %419, align 8
  %421 = load i64, i64* %RSP, align 8
  %422 = add i64 %421, 8
  %423 = load i64, i64* %R10, align 8
  %424 = load i64, i64* %PC, align 8
  %425 = add i64 %424, 5
  store i64 %425, i64* %PC, align 8
  %426 = inttoptr i64 %422 to i64*
  store i64 %423, i64* %426, align 8
  %427 = load i64, i64* %RSP, align 8
  %428 = add i64 %427, 16
  %429 = load i64, i64* %R11, align 8
  %430 = load i64, i64* %PC, align 8
  %431 = add i64 %430, 5
  store i64 %431, i64* %PC, align 8
  %432 = inttoptr i64 %428 to i64*
  store i64 %429, i64* %432, align 8
  %433 = load i64, i64* %RSP, align 8
  %434 = add i64 %433, 24
  %435 = load i64, i64* %RBX, align 8
  %436 = load i64, i64* %PC, align 8
  %437 = add i64 %436, 5
  store i64 %437, i64* %PC, align 8
  %438 = inttoptr i64 %434 to i64*
  store i64 %435, i64* %438, align 8
  %439 = load i64, i64* %RSP, align 8
  %440 = add i64 %439, 32
  %441 = load i64, i64* %R14, align 8
  %442 = load i64, i64* %PC, align 8
  %443 = add i64 %442, 5
  store i64 %443, i64* %PC, align 8
  %444 = inttoptr i64 %440 to i64*
  store i64 %441, i64* %444, align 8
  %445 = load i64, i64* %RSP, align 8
  %446 = add i64 %445, 40
  %447 = load i64, i64* %R15, align 8
  %448 = load i64, i64* %PC, align 8
  %449 = add i64 %448, 5
  store i64 %449, i64* %PC, align 8
  %450 = inttoptr i64 %446 to i64*
  store i64 %447, i64* %450, align 8
  %451 = load i64, i64* %RSP, align 8
  %452 = add i64 %451, 48
  %453 = load i64, i64* %R12, align 8
  %454 = load i64, i64* %PC, align 8
  %455 = add i64 %454, 5
  store i64 %455, i64* %PC, align 8
  %456 = inttoptr i64 %452 to i64*
  store i64 %453, i64* %456, align 8
  %457 = load i64, i64* %RSP, align 8
  %458 = add i64 %457, 56
  %459 = load i64, i64* %R13, align 8
  %460 = load i64, i64* %PC, align 8
  %461 = add i64 %460, 5
  store i64 %461, i64* %PC, align 8
  %462 = inttoptr i64 %458 to i64*
  store i64 %459, i64* %462, align 8
  %463 = load i64, i64* %RBP, align 8
  %464 = add i64 %463, -248
  %465 = load i64, i64* %PC, align 8
  %466 = add i64 %465, 7
  store i64 %466, i64* %PC, align 8
  %467 = inttoptr i64 %464 to i64*
  %468 = load i64, i64* %467, align 8
  store i64 %468, i64* %RAX, align 8, !tbaa !2428
  %469 = load i64, i64* %RSP, align 8
  %470 = add i64 %469, 64
  %471 = add i64 %465, 12
  store i64 %471, i64* %PC, align 8
  %472 = inttoptr i64 %470 to i64*
  store i64 %468, i64* %472, align 8
  %473 = load i64, i64* %RBP, align 8
  %474 = add i64 %473, -256
  %475 = load i64, i64* %PC, align 8
  %476 = add i64 %475, 7
  store i64 %476, i64* %PC, align 8
  %477 = inttoptr i64 %474 to i64*
  %478 = load i64, i64* %477, align 8
  store i64 %478, i64* %RAX, align 8, !tbaa !2428
  %479 = load i64, i64* %RSP, align 8
  %480 = add i64 %479, 72
  %481 = add i64 %475, 12
  store i64 %481, i64* %PC, align 8
  %482 = inttoptr i64 %480 to i64*
  store i64 %478, i64* %482, align 8
  %483 = load i64, i64* %PC, align 8
  %484 = add i64 %483, 1152
  %485 = add i64 %483, 5
  %486 = load i64, i64* %9, align 8, !tbaa !2428
  %487 = add i64 %486, -8
  %488 = inttoptr i64 %487 to i64*
  store i64 %485, i64* %488, align 8
  store i64 %487, i64* %9, align 8, !tbaa !2428
  store i64 %484, i64* %107, align 8, !tbaa !2428
  %489 = tail call %struct.Memory* @sub_400f90_init_array_renamed_(%struct.State* nonnull %0, i64 %484, %struct.Memory* %329)
  %490 = load i64, i64* %RBP, align 8
  %491 = add i64 %490, -60
  %492 = load i64, i64* %PC, align 8
  %493 = add i64 %492, 3
  store i64 %493, i64* %PC, align 8
  %494 = inttoptr i64 %491 to i32*
  %495 = load i32, i32* %494, align 4
  %496 = zext i32 %495 to i64
  store i64 %496, i64* %RDI, align 8, !tbaa !2428
  %497 = add i64 %490, -68
  %498 = add i64 %492, 6
  store i64 %498, i64* %PC, align 8
  %499 = inttoptr i64 %497 to i32*
  %500 = load i32, i32* %499, align 4
  %501 = zext i32 %500 to i64
  store i64 %501, i64* %RSI, align 8, !tbaa !2428
  %502 = add i64 %490, -64
  %503 = add i64 %492, 9
  store i64 %503, i64* %PC, align 8
  %504 = inttoptr i64 %502 to i32*
  %505 = load i32, i32* %504, align 4
  %506 = zext i32 %505 to i64
  store i64 %506, i64* %RDX, align 8, !tbaa !2428
  %507 = add i64 %490, -80
  %508 = add i64 %492, 14
  store i64 %508, i64* %PC, align 8
  %509 = inttoptr i64 %507 to i64*
  %510 = load i64, i64* %509, align 8
  %511 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %5, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %510, i64* %511, align 1, !tbaa !2452
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %513 = bitcast i64* %512 to double*
  store double 0.000000e+00, double* %513, align 1, !tbaa !2452
  %514 = add i64 %490, -88
  %515 = add i64 %492, 19
  store i64 %515, i64* %PC, align 8
  %516 = inttoptr i64 %514 to i64*
  %517 = load i64, i64* %516, align 8
  %518 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %517, i64* %518, align 1, !tbaa !2452
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %520 = bitcast i64* %519 to double*
  store double 0.000000e+00, double* %520, align 1, !tbaa !2452
  %521 = add i64 %490, -96
  %522 = add i64 %492, 23
  store i64 %522, i64* %PC, align 8
  %523 = inttoptr i64 %521 to i64*
  %524 = load i64, i64* %523, align 8
  store i64 %524, i64* %RCX, align 8, !tbaa !2428
  %525 = add i64 %490, -104
  %526 = add i64 %492, 27
  store i64 %526, i64* %PC, align 8
  %527 = inttoptr i64 %525 to i64*
  %528 = load i64, i64* %527, align 8
  store i64 %528, i64* %R8, align 8, !tbaa !2428
  %529 = add i64 %490, -112
  %530 = add i64 %492, 31
  store i64 %530, i64* %PC, align 8
  %531 = inttoptr i64 %529 to i64*
  %532 = load i64, i64* %531, align 8
  store i64 %532, i64* %R9, align 8, !tbaa !2428
  %533 = add i64 %490, -120
  %534 = add i64 %492, 35
  store i64 %534, i64* %PC, align 8
  %535 = inttoptr i64 %533 to i64*
  %536 = load i64, i64* %535, align 8
  store i64 %536, i64* %RAX, align 8, !tbaa !2428
  %537 = add i64 %490, -128
  %538 = add i64 %492, 39
  store i64 %538, i64* %PC, align 8
  %539 = inttoptr i64 %537 to i64*
  %540 = load i64, i64* %539, align 8
  store i64 %540, i64* %R10, align 8, !tbaa !2428
  %541 = add i64 %490, -136
  %542 = add i64 %492, 46
  store i64 %542, i64* %PC, align 8
  %543 = inttoptr i64 %541 to i64*
  %544 = load i64, i64* %543, align 8
  store i64 %544, i64* %R11, align 8, !tbaa !2428
  %545 = add i64 %490, -144
  %546 = add i64 %492, 53
  store i64 %546, i64* %PC, align 8
  %547 = inttoptr i64 %545 to i64*
  %548 = load i64, i64* %547, align 8
  store i64 %548, i64* %RBX, align 8, !tbaa !2428
  %549 = add i64 %490, -152
  %550 = add i64 %492, 60
  store i64 %550, i64* %PC, align 8
  %551 = inttoptr i64 %549 to i64*
  %552 = load i64, i64* %551, align 8
  store i64 %552, i64* %R14, align 8, !tbaa !2428
  %553 = add i64 %490, -192
  %554 = add i64 %492, 67
  store i64 %554, i64* %PC, align 8
  %555 = inttoptr i64 %553 to i64*
  %556 = load i64, i64* %555, align 8
  store i64 %556, i64* %R15, align 8, !tbaa !2428
  %557 = add i64 %490, -200
  %558 = add i64 %492, 74
  store i64 %558, i64* %PC, align 8
  %559 = inttoptr i64 %557 to i64*
  %560 = load i64, i64* %559, align 8
  store i64 %560, i64* %R12, align 8, !tbaa !2428
  %561 = load i64, i64* %RBP, align 8
  %562 = add i64 %561, -208
  %563 = add i64 %492, 81
  store i64 %563, i64* %PC, align 8
  %564 = inttoptr i64 %562 to i64*
  %565 = load i64, i64* %564, align 8
  store i64 %565, i64* %R13, align 8, !tbaa !2428
  %566 = add i64 %561, -264
  %567 = add i64 %492, 88
  store i64 %567, i64* %PC, align 8
  %568 = inttoptr i64 %566 to i64*
  store i64 %536, i64* %568, align 8
  %569 = load i64, i64* %RBP, align 8
  %570 = add i64 %569, -216
  %571 = load i64, i64* %PC, align 8
  %572 = add i64 %571, 7
  store i64 %572, i64* %PC, align 8
  %573 = inttoptr i64 %570 to i64*
  %574 = load i64, i64* %573, align 8
  store i64 %574, i64* %RAX, align 8, !tbaa !2428
  %575 = add i64 %569, -272
  %576 = add i64 %571, 14
  store i64 %576, i64* %PC, align 8
  %577 = inttoptr i64 %575 to i64*
  store i64 %574, i64* %577, align 8
  %578 = load i64, i64* %RBP, align 8
  %579 = add i64 %578, -224
  %580 = load i64, i64* %PC, align 8
  %581 = add i64 %580, 7
  store i64 %581, i64* %PC, align 8
  %582 = inttoptr i64 %579 to i64*
  %583 = load i64, i64* %582, align 8
  store i64 %583, i64* %RAX, align 8, !tbaa !2428
  %584 = add i64 %578, -280
  %585 = add i64 %580, 14
  store i64 %585, i64* %PC, align 8
  %586 = inttoptr i64 %584 to i64*
  store i64 %583, i64* %586, align 8
  %587 = load i64, i64* %RBP, align 8
  %588 = add i64 %587, -232
  %589 = load i64, i64* %PC, align 8
  %590 = add i64 %589, 7
  store i64 %590, i64* %PC, align 8
  %591 = inttoptr i64 %588 to i64*
  %592 = load i64, i64* %591, align 8
  store i64 %592, i64* %RAX, align 8, !tbaa !2428
  %593 = add i64 %587, -288
  %594 = add i64 %589, 14
  store i64 %594, i64* %PC, align 8
  %595 = inttoptr i64 %593 to i64*
  store i64 %592, i64* %595, align 8
  %596 = load i64, i64* %RBP, align 8
  %597 = add i64 %596, -264
  %598 = load i64, i64* %PC, align 8
  %599 = add i64 %598, 7
  store i64 %599, i64* %PC, align 8
  %600 = inttoptr i64 %597 to i64*
  %601 = load i64, i64* %600, align 8
  store i64 %601, i64* %RAX, align 8, !tbaa !2428
  %602 = bitcast i64* %RSP to i64**
  %603 = load i64*, i64** %602, align 8
  %604 = add i64 %598, 11
  store i64 %604, i64* %PC, align 8
  store i64 %601, i64* %603, align 8
  %605 = load i64, i64* %RSP, align 8
  %606 = add i64 %605, 8
  %607 = load i64, i64* %R10, align 8
  %608 = load i64, i64* %PC, align 8
  %609 = add i64 %608, 5
  store i64 %609, i64* %PC, align 8
  %610 = inttoptr i64 %606 to i64*
  store i64 %607, i64* %610, align 8
  %611 = load i64, i64* %RSP, align 8
  %612 = add i64 %611, 16
  %613 = load i64, i64* %R11, align 8
  %614 = load i64, i64* %PC, align 8
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC, align 8
  %616 = inttoptr i64 %612 to i64*
  store i64 %613, i64* %616, align 8
  %617 = load i64, i64* %RSP, align 8
  %618 = add i64 %617, 24
  %619 = load i64, i64* %RBX, align 8
  %620 = load i64, i64* %PC, align 8
  %621 = add i64 %620, 5
  store i64 %621, i64* %PC, align 8
  %622 = inttoptr i64 %618 to i64*
  store i64 %619, i64* %622, align 8
  %623 = load i64, i64* %RSP, align 8
  %624 = add i64 %623, 32
  %625 = load i64, i64* %R14, align 8
  %626 = load i64, i64* %PC, align 8
  %627 = add i64 %626, 5
  store i64 %627, i64* %PC, align 8
  %628 = inttoptr i64 %624 to i64*
  store i64 %625, i64* %628, align 8
  %629 = load i64, i64* %RSP, align 8
  %630 = add i64 %629, 40
  %631 = load i64, i64* %R15, align 8
  %632 = load i64, i64* %PC, align 8
  %633 = add i64 %632, 5
  store i64 %633, i64* %PC, align 8
  %634 = inttoptr i64 %630 to i64*
  store i64 %631, i64* %634, align 8
  %635 = load i64, i64* %RSP, align 8
  %636 = add i64 %635, 48
  %637 = load i64, i64* %R12, align 8
  %638 = load i64, i64* %PC, align 8
  %639 = add i64 %638, 5
  store i64 %639, i64* %PC, align 8
  %640 = inttoptr i64 %636 to i64*
  store i64 %637, i64* %640, align 8
  %641 = load i64, i64* %RSP, align 8
  %642 = add i64 %641, 56
  %643 = load i64, i64* %R13, align 8
  %644 = load i64, i64* %PC, align 8
  %645 = add i64 %644, 5
  store i64 %645, i64* %PC, align 8
  %646 = inttoptr i64 %642 to i64*
  store i64 %643, i64* %646, align 8
  %647 = load i64, i64* %RBP, align 8
  %648 = add i64 %647, -272
  %649 = load i64, i64* %PC, align 8
  %650 = add i64 %649, 7
  store i64 %650, i64* %PC, align 8
  %651 = inttoptr i64 %648 to i64*
  %652 = load i64, i64* %651, align 8
  store i64 %652, i64* %RAX, align 8, !tbaa !2428
  %653 = load i64, i64* %RSP, align 8
  %654 = add i64 %653, 64
  %655 = add i64 %649, 12
  store i64 %655, i64* %PC, align 8
  %656 = inttoptr i64 %654 to i64*
  store i64 %652, i64* %656, align 8
  %657 = load i64, i64* %RBP, align 8
  %658 = add i64 %657, -280
  %659 = load i64, i64* %PC, align 8
  %660 = add i64 %659, 7
  store i64 %660, i64* %PC, align 8
  %661 = inttoptr i64 %658 to i64*
  %662 = load i64, i64* %661, align 8
  store i64 %662, i64* %RAX, align 8, !tbaa !2428
  %663 = load i64, i64* %RSP, align 8
  %664 = add i64 %663, 72
  %665 = add i64 %659, 12
  store i64 %665, i64* %PC, align 8
  %666 = inttoptr i64 %664 to i64*
  store i64 %662, i64* %666, align 8
  %667 = load i64, i64* %RBP, align 8
  %668 = add i64 %667, -288
  %669 = load i64, i64* %PC, align 8
  %670 = add i64 %669, 7
  store i64 %670, i64* %PC, align 8
  %671 = inttoptr i64 %668 to i64*
  %672 = load i64, i64* %671, align 8
  store i64 %672, i64* %RAX, align 8, !tbaa !2428
  %673 = load i64, i64* %RSP, align 8
  %674 = add i64 %673, 80
  %675 = add i64 %669, 12
  store i64 %675, i64* %PC, align 8
  %676 = inttoptr i64 %674 to i64*
  store i64 %672, i64* %676, align 8
  %677 = load i64, i64* %PC, align 8
  %678 = add i64 %677, 2023
  %679 = add i64 %677, 5
  %680 = load i64, i64* %9, align 8, !tbaa !2428
  %681 = add i64 %680, -8
  %682 = inttoptr i64 %681 to i64*
  store i64 %679, i64* %682, align 8
  store i64 %681, i64* %9, align 8, !tbaa !2428
  store i64 %678, i64* %107, align 8, !tbaa !2428
  %683 = tail call %struct.Memory* @sub_4013d0_kernel_fdtd_apml_renamed_(%struct.State* nonnull %0, i64 %678, %struct.Memory* %489)
  %684 = load i64, i64* %RBP, align 8
  %685 = add i64 %684, -80
  %686 = load i64, i64* %PC, align 8
  store i64 %685, i64* %RCX, align 8, !tbaa !2428
  %687 = add i64 %684, -88
  store i64 %687, i64* %R8, align 8, !tbaa !2428
  %688 = add i64 %684, -60
  %689 = add i64 %686, 11
  store i64 %689, i64* %PC, align 8
  %690 = inttoptr i64 %688 to i32*
  %691 = load i32, i32* %690, align 4
  %692 = zext i32 %691 to i64
  store i64 %692, i64* %RDI, align 8, !tbaa !2428
  %693 = add i64 %684, -68
  %694 = add i64 %686, 14
  store i64 %694, i64* %PC, align 8
  %695 = inttoptr i64 %693 to i32*
  %696 = load i32, i32* %695, align 4
  %697 = zext i32 %696 to i64
  store i64 %697, i64* %RSI, align 8, !tbaa !2428
  %698 = add i64 %684, -64
  %699 = add i64 %686, 17
  store i64 %699, i64* %PC, align 8
  %700 = inttoptr i64 %698 to i32*
  %701 = load i32, i32* %700, align 4
  %702 = zext i32 %701 to i64
  store i64 %702, i64* %RDX, align 8, !tbaa !2428
  %703 = add i64 %684, -96
  %704 = add i64 %686, 21
  store i64 %704, i64* %PC, align 8
  %705 = inttoptr i64 %703 to i64*
  %706 = load i64, i64* %705, align 8
  store i64 %706, i64* %R9, align 8, !tbaa !2428
  %707 = add i64 %684, -104
  %708 = add i64 %686, 25
  store i64 %708, i64* %PC, align 8
  %709 = inttoptr i64 %707 to i64*
  %710 = load i64, i64* %709, align 8
  store i64 %710, i64* %RAX, align 8, !tbaa !2428
  %711 = add i64 %684, -168
  %712 = add i64 %686, 32
  store i64 %712, i64* %PC, align 8
  %713 = inttoptr i64 %711 to i64*
  %714 = load i64, i64* %713, align 8
  store i64 %714, i64* %R10, align 8, !tbaa !2428
  %715 = add i64 %684, -176
  %716 = add i64 %686, 39
  store i64 %716, i64* %PC, align 8
  %717 = inttoptr i64 %715 to i64*
  %718 = load i64, i64* %717, align 8
  store i64 %718, i64* %R11, align 8, !tbaa !2428
  %719 = add i64 %684, -184
  %720 = add i64 %686, 46
  store i64 %720, i64* %PC, align 8
  %721 = inttoptr i64 %719 to i64*
  %722 = load i64, i64* %721, align 8
  store i64 %722, i64* %RBX, align 8, !tbaa !2428
  %723 = add i64 %684, -192
  %724 = add i64 %686, 53
  store i64 %724, i64* %PC, align 8
  %725 = inttoptr i64 %723 to i64*
  %726 = load i64, i64* %725, align 8
  store i64 %726, i64* %R14, align 8, !tbaa !2428
  %727 = add i64 %684, -200
  %728 = add i64 %686, 60
  store i64 %728, i64* %PC, align 8
  %729 = inttoptr i64 %727 to i64*
  %730 = load i64, i64* %729, align 8
  store i64 %730, i64* %R15, align 8, !tbaa !2428
  %731 = add i64 %684, -208
  %732 = add i64 %686, 67
  store i64 %732, i64* %PC, align 8
  %733 = inttoptr i64 %731 to i64*
  %734 = load i64, i64* %733, align 8
  store i64 %734, i64* %R12, align 8, !tbaa !2428
  %735 = add i64 %684, -216
  %736 = add i64 %686, 74
  store i64 %736, i64* %PC, align 8
  %737 = inttoptr i64 %735 to i64*
  %738 = load i64, i64* %737, align 8
  store i64 %738, i64* %R13, align 8, !tbaa !2428
  %739 = add i64 %684, -296
  %740 = add i64 %686, 81
  store i64 %740, i64* %PC, align 8
  %741 = inttoptr i64 %739 to i64*
  store i64 %710, i64* %741, align 8
  %742 = load i64, i64* %RBP, align 8
  %743 = add i64 %742, -224
  %744 = load i64, i64* %PC, align 8
  %745 = add i64 %744, 7
  store i64 %745, i64* %PC, align 8
  %746 = inttoptr i64 %743 to i64*
  %747 = load i64, i64* %746, align 8
  store i64 %747, i64* %RAX, align 8, !tbaa !2428
  %748 = add i64 %742, -304
  %749 = add i64 %744, 14
  store i64 %749, i64* %PC, align 8
  %750 = inttoptr i64 %748 to i64*
  store i64 %747, i64* %750, align 8
  %751 = load i64, i64* %RBP, align 8
  %752 = add i64 %751, -232
  %753 = load i64, i64* %PC, align 8
  %754 = add i64 %753, 7
  store i64 %754, i64* %PC, align 8
  %755 = inttoptr i64 %752 to i64*
  %756 = load i64, i64* %755, align 8
  store i64 %756, i64* %RAX, align 8, !tbaa !2428
  %757 = add i64 %751, -312
  %758 = add i64 %753, 14
  store i64 %758, i64* %PC, align 8
  %759 = inttoptr i64 %757 to i64*
  store i64 %756, i64* %759, align 8
  %760 = load i64, i64* %RBP, align 8
  %761 = add i64 %760, -296
  %762 = load i64, i64* %PC, align 8
  %763 = add i64 %762, 7
  store i64 %763, i64* %PC, align 8
  %764 = inttoptr i64 %761 to i64*
  %765 = load i64, i64* %764, align 8
  store i64 %765, i64* %RAX, align 8, !tbaa !2428
  %766 = bitcast i64* %RSP to i64**
  %767 = load i64*, i64** %766, align 8
  %768 = add i64 %762, 11
  store i64 %768, i64* %PC, align 8
  store i64 %765, i64* %767, align 8
  %769 = load i64, i64* %RSP, align 8
  %770 = add i64 %769, 8
  %771 = load i64, i64* %R10, align 8
  %772 = load i64, i64* %PC, align 8
  %773 = add i64 %772, 5
  store i64 %773, i64* %PC, align 8
  %774 = inttoptr i64 %770 to i64*
  store i64 %771, i64* %774, align 8
  %775 = load i64, i64* %RSP, align 8
  %776 = add i64 %775, 16
  %777 = load i64, i64* %R11, align 8
  %778 = load i64, i64* %PC, align 8
  %779 = add i64 %778, 5
  store i64 %779, i64* %PC, align 8
  %780 = inttoptr i64 %776 to i64*
  store i64 %777, i64* %780, align 8
  %781 = load i64, i64* %RSP, align 8
  %782 = add i64 %781, 24
  %783 = load i64, i64* %RBX, align 8
  %784 = load i64, i64* %PC, align 8
  %785 = add i64 %784, 5
  store i64 %785, i64* %PC, align 8
  %786 = inttoptr i64 %782 to i64*
  store i64 %783, i64* %786, align 8
  %787 = load i64, i64* %RSP, align 8
  %788 = add i64 %787, 32
  %789 = load i64, i64* %R14, align 8
  %790 = load i64, i64* %PC, align 8
  %791 = add i64 %790, 5
  store i64 %791, i64* %PC, align 8
  %792 = inttoptr i64 %788 to i64*
  store i64 %789, i64* %792, align 8
  %793 = load i64, i64* %RSP, align 8
  %794 = add i64 %793, 40
  %795 = load i64, i64* %R15, align 8
  %796 = load i64, i64* %PC, align 8
  %797 = add i64 %796, 5
  store i64 %797, i64* %PC, align 8
  %798 = inttoptr i64 %794 to i64*
  store i64 %795, i64* %798, align 8
  %799 = load i64, i64* %RSP, align 8
  %800 = add i64 %799, 48
  %801 = load i64, i64* %R12, align 8
  %802 = load i64, i64* %PC, align 8
  %803 = add i64 %802, 5
  store i64 %803, i64* %PC, align 8
  %804 = inttoptr i64 %800 to i64*
  store i64 %801, i64* %804, align 8
  %805 = load i64, i64* %RSP, align 8
  %806 = add i64 %805, 56
  %807 = load i64, i64* %R13, align 8
  %808 = load i64, i64* %PC, align 8
  %809 = add i64 %808, 5
  store i64 %809, i64* %PC, align 8
  %810 = inttoptr i64 %806 to i64*
  store i64 %807, i64* %810, align 8
  %811 = load i64, i64* %RBP, align 8
  %812 = add i64 %811, -304
  %813 = load i64, i64* %PC, align 8
  %814 = add i64 %813, 7
  store i64 %814, i64* %PC, align 8
  %815 = inttoptr i64 %812 to i64*
  %816 = load i64, i64* %815, align 8
  store i64 %816, i64* %RAX, align 8, !tbaa !2428
  %817 = load i64, i64* %RSP, align 8
  %818 = add i64 %817, 64
  %819 = add i64 %813, 12
  store i64 %819, i64* %PC, align 8
  %820 = inttoptr i64 %818 to i64*
  store i64 %816, i64* %820, align 8
  %821 = load i64, i64* %RBP, align 8
  %822 = add i64 %821, -312
  %823 = load i64, i64* %PC, align 8
  %824 = add i64 %823, 7
  store i64 %824, i64* %PC, align 8
  %825 = inttoptr i64 %822 to i64*
  %826 = load i64, i64* %825, align 8
  store i64 %826, i64* %RAX, align 8, !tbaa !2428
  %827 = load i64, i64* %RSP, align 8
  %828 = add i64 %827, 72
  %829 = add i64 %823, 12
  store i64 %829, i64* %PC, align 8
  %830 = inttoptr i64 %828 to i64*
  store i64 %826, i64* %830, align 8
  %831 = load i64, i64* %PC, align 8
  %832 = add i64 %831, 751
  %833 = add i64 %831, 5
  %834 = load i64, i64* %9, align 8, !tbaa !2428
  %835 = add i64 %834, -8
  %836 = inttoptr i64 %835 to i64*
  store i64 %833, i64* %836, align 8
  store i64 %835, i64* %9, align 8, !tbaa !2428
  store i64 %832, i64* %107, align 8, !tbaa !2428
  %837 = tail call %struct.Memory* @sub_400f90_init_array_renamed_(%struct.State* nonnull %0, i64 %832, %struct.Memory* %683)
  %838 = load i64, i64* %RBP, align 8
  %839 = add i64 %838, -60
  %840 = load i64, i64* %PC, align 8
  %841 = add i64 %840, 3
  store i64 %841, i64* %PC, align 8
  %842 = inttoptr i64 %839 to i32*
  %843 = load i32, i32* %842, align 4
  %844 = zext i32 %843 to i64
  store i64 %844, i64* %RDI, align 8, !tbaa !2428
  %845 = add i64 %838, -68
  %846 = add i64 %840, 6
  store i64 %846, i64* %PC, align 8
  %847 = inttoptr i64 %845 to i32*
  %848 = load i32, i32* %847, align 4
  %849 = zext i32 %848 to i64
  store i64 %849, i64* %RSI, align 8, !tbaa !2428
  %850 = add i64 %838, -64
  %851 = add i64 %840, 9
  store i64 %851, i64* %PC, align 8
  %852 = inttoptr i64 %850 to i32*
  %853 = load i32, i32* %852, align 4
  %854 = zext i32 %853 to i64
  store i64 %854, i64* %RDX, align 8, !tbaa !2428
  %855 = add i64 %838, -80
  %856 = add i64 %840, 14
  store i64 %856, i64* %PC, align 8
  %857 = inttoptr i64 %855 to i64*
  %858 = load i64, i64* %857, align 8
  %859 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %5, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %858, i64* %859, align 1, !tbaa !2452
  store double 0.000000e+00, double* %513, align 1, !tbaa !2452
  %860 = add i64 %838, -88
  %861 = add i64 %840, 19
  store i64 %861, i64* %PC, align 8
  %862 = inttoptr i64 %860 to i64*
  %863 = load i64, i64* %862, align 8
  %864 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %863, i64* %864, align 1, !tbaa !2452
  store double 0.000000e+00, double* %520, align 1, !tbaa !2452
  %865 = add i64 %838, -96
  %866 = add i64 %840, 23
  store i64 %866, i64* %PC, align 8
  %867 = inttoptr i64 %865 to i64*
  %868 = load i64, i64* %867, align 8
  store i64 %868, i64* %RCX, align 8, !tbaa !2428
  %869 = add i64 %838, -104
  %870 = add i64 %840, 27
  store i64 %870, i64* %PC, align 8
  %871 = inttoptr i64 %869 to i64*
  %872 = load i64, i64* %871, align 8
  store i64 %872, i64* %R8, align 8, !tbaa !2428
  %873 = add i64 %838, -112
  %874 = add i64 %840, 31
  store i64 %874, i64* %PC, align 8
  %875 = inttoptr i64 %873 to i64*
  %876 = load i64, i64* %875, align 8
  store i64 %876, i64* %R9, align 8, !tbaa !2428
  %877 = add i64 %838, -120
  %878 = add i64 %840, 35
  store i64 %878, i64* %PC, align 8
  %879 = inttoptr i64 %877 to i64*
  %880 = load i64, i64* %879, align 8
  store i64 %880, i64* %RAX, align 8, !tbaa !2428
  %881 = add i64 %838, -160
  %882 = add i64 %840, 42
  store i64 %882, i64* %PC, align 8
  %883 = inttoptr i64 %881 to i64*
  %884 = load i64, i64* %883, align 8
  store i64 %884, i64* %R10, align 8, !tbaa !2428
  %885 = add i64 %838, -168
  %886 = add i64 %840, 49
  store i64 %886, i64* %PC, align 8
  %887 = inttoptr i64 %885 to i64*
  %888 = load i64, i64* %887, align 8
  store i64 %888, i64* %R11, align 8, !tbaa !2428
  %889 = add i64 %838, -176
  %890 = add i64 %840, 56
  store i64 %890, i64* %PC, align 8
  %891 = inttoptr i64 %889 to i64*
  %892 = load i64, i64* %891, align 8
  store i64 %892, i64* %RBX, align 8, !tbaa !2428
  %893 = add i64 %838, -184
  %894 = add i64 %840, 63
  store i64 %894, i64* %PC, align 8
  %895 = inttoptr i64 %893 to i64*
  %896 = load i64, i64* %895, align 8
  store i64 %896, i64* %R14, align 8, !tbaa !2428
  %897 = add i64 %838, -192
  %898 = add i64 %840, 70
  store i64 %898, i64* %PC, align 8
  %899 = inttoptr i64 %897 to i64*
  %900 = load i64, i64* %899, align 8
  store i64 %900, i64* %R15, align 8, !tbaa !2428
  %901 = add i64 %838, -200
  %902 = add i64 %840, 77
  store i64 %902, i64* %PC, align 8
  %903 = inttoptr i64 %901 to i64*
  %904 = load i64, i64* %903, align 8
  store i64 %904, i64* %R12, align 8, !tbaa !2428
  %905 = add i64 %838, -208
  %906 = add i64 %840, 84
  store i64 %906, i64* %PC, align 8
  %907 = inttoptr i64 %905 to i64*
  %908 = load i64, i64* %907, align 8
  store i64 %908, i64* %R13, align 8, !tbaa !2428
  %909 = load i64, i64* %RBP, align 8
  %910 = add i64 %909, -320
  %911 = add i64 %840, 91
  store i64 %911, i64* %PC, align 8
  %912 = inttoptr i64 %910 to i64*
  store i64 %880, i64* %912, align 8
  %913 = load i64, i64* %RBP, align 8
  %914 = add i64 %913, -216
  %915 = load i64, i64* %PC, align 8
  %916 = add i64 %915, 7
  store i64 %916, i64* %PC, align 8
  %917 = inttoptr i64 %914 to i64*
  %918 = load i64, i64* %917, align 8
  store i64 %918, i64* %RAX, align 8, !tbaa !2428
  %919 = add i64 %913, -328
  %920 = add i64 %915, 14
  store i64 %920, i64* %PC, align 8
  %921 = inttoptr i64 %919 to i64*
  store i64 %918, i64* %921, align 8
  %922 = load i64, i64* %RBP, align 8
  %923 = add i64 %922, -224
  %924 = load i64, i64* %PC, align 8
  %925 = add i64 %924, 7
  store i64 %925, i64* %PC, align 8
  %926 = inttoptr i64 %923 to i64*
  %927 = load i64, i64* %926, align 8
  store i64 %927, i64* %RAX, align 8, !tbaa !2428
  %928 = add i64 %922, -336
  %929 = add i64 %924, 14
  store i64 %929, i64* %PC, align 8
  %930 = inttoptr i64 %928 to i64*
  store i64 %927, i64* %930, align 8
  %931 = load i64, i64* %RBP, align 8
  %932 = add i64 %931, -232
  %933 = load i64, i64* %PC, align 8
  %934 = add i64 %933, 7
  store i64 %934, i64* %PC, align 8
  %935 = inttoptr i64 %932 to i64*
  %936 = load i64, i64* %935, align 8
  store i64 %936, i64* %RAX, align 8, !tbaa !2428
  %937 = add i64 %931, -344
  %938 = add i64 %933, 14
  store i64 %938, i64* %PC, align 8
  %939 = inttoptr i64 %937 to i64*
  store i64 %936, i64* %939, align 8
  %940 = load i64, i64* %RBP, align 8
  %941 = add i64 %940, -320
  %942 = load i64, i64* %PC, align 8
  %943 = add i64 %942, 7
  store i64 %943, i64* %PC, align 8
  %944 = inttoptr i64 %941 to i64*
  %945 = load i64, i64* %944, align 8
  store i64 %945, i64* %RAX, align 8, !tbaa !2428
  %946 = bitcast i64* %RSP to i64**
  %947 = load i64*, i64** %946, align 8
  %948 = add i64 %942, 11
  store i64 %948, i64* %PC, align 8
  store i64 %945, i64* %947, align 8
  %949 = load i64, i64* %RSP, align 8
  %950 = add i64 %949, 8
  %951 = load i64, i64* %R10, align 8
  %952 = load i64, i64* %PC, align 8
  %953 = add i64 %952, 5
  store i64 %953, i64* %PC, align 8
  %954 = inttoptr i64 %950 to i64*
  store i64 %951, i64* %954, align 8
  %955 = load i64, i64* %RSP, align 8
  %956 = add i64 %955, 16
  %957 = load i64, i64* %R11, align 8
  %958 = load i64, i64* %PC, align 8
  %959 = add i64 %958, 5
  store i64 %959, i64* %PC, align 8
  %960 = inttoptr i64 %956 to i64*
  store i64 %957, i64* %960, align 8
  %961 = load i64, i64* %RSP, align 8
  %962 = add i64 %961, 24
  %963 = load i64, i64* %RBX, align 8
  %964 = load i64, i64* %PC, align 8
  %965 = add i64 %964, 5
  store i64 %965, i64* %PC, align 8
  %966 = inttoptr i64 %962 to i64*
  store i64 %963, i64* %966, align 8
  %967 = load i64, i64* %RSP, align 8
  %968 = add i64 %967, 32
  %969 = load i64, i64* %R14, align 8
  %970 = load i64, i64* %PC, align 8
  %971 = add i64 %970, 5
  store i64 %971, i64* %PC, align 8
  %972 = inttoptr i64 %968 to i64*
  store i64 %969, i64* %972, align 8
  %973 = load i64, i64* %RSP, align 8
  %974 = add i64 %973, 40
  %975 = load i64, i64* %R15, align 8
  %976 = load i64, i64* %PC, align 8
  %977 = add i64 %976, 5
  store i64 %977, i64* %PC, align 8
  %978 = inttoptr i64 %974 to i64*
  store i64 %975, i64* %978, align 8
  %979 = load i64, i64* %RSP, align 8
  %980 = add i64 %979, 48
  %981 = load i64, i64* %R12, align 8
  %982 = load i64, i64* %PC, align 8
  %983 = add i64 %982, 5
  store i64 %983, i64* %PC, align 8
  %984 = inttoptr i64 %980 to i64*
  store i64 %981, i64* %984, align 8
  %985 = load i64, i64* %RSP, align 8
  %986 = add i64 %985, 56
  %987 = load i64, i64* %R13, align 8
  %988 = load i64, i64* %PC, align 8
  %989 = add i64 %988, 5
  store i64 %989, i64* %PC, align 8
  %990 = inttoptr i64 %986 to i64*
  store i64 %987, i64* %990, align 8
  %991 = load i64, i64* %RBP, align 8
  %992 = add i64 %991, -328
  %993 = load i64, i64* %PC, align 8
  %994 = add i64 %993, 7
  store i64 %994, i64* %PC, align 8
  %995 = inttoptr i64 %992 to i64*
  %996 = load i64, i64* %995, align 8
  store i64 %996, i64* %RAX, align 8, !tbaa !2428
  %997 = load i64, i64* %RSP, align 8
  %998 = add i64 %997, 64
  %999 = add i64 %993, 12
  store i64 %999, i64* %PC, align 8
  %1000 = inttoptr i64 %998 to i64*
  store i64 %996, i64* %1000, align 8
  %1001 = load i64, i64* %RBP, align 8
  %1002 = add i64 %1001, -336
  %1003 = load i64, i64* %PC, align 8
  %1004 = add i64 %1003, 7
  store i64 %1004, i64* %PC, align 8
  %1005 = inttoptr i64 %1002 to i64*
  %1006 = load i64, i64* %1005, align 8
  store i64 %1006, i64* %RAX, align 8, !tbaa !2428
  %1007 = load i64, i64* %RSP, align 8
  %1008 = add i64 %1007, 72
  %1009 = add i64 %1003, 12
  store i64 %1009, i64* %PC, align 8
  %1010 = inttoptr i64 %1008 to i64*
  store i64 %1006, i64* %1010, align 8
  %1011 = load i64, i64* %RBP, align 8
  %1012 = add i64 %1011, -344
  %1013 = load i64, i64* %PC, align 8
  %1014 = add i64 %1013, 7
  store i64 %1014, i64* %PC, align 8
  %1015 = inttoptr i64 %1012 to i64*
  %1016 = load i64, i64* %1015, align 8
  store i64 %1016, i64* %RAX, align 8, !tbaa !2428
  %1017 = load i64, i64* %RSP, align 8
  %1018 = add i64 %1017, 80
  %1019 = add i64 %1013, 12
  store i64 %1019, i64* %PC, align 8
  %1020 = inttoptr i64 %1018 to i64*
  store i64 %1016, i64* %1020, align 8
  %1021 = load i64, i64* %PC, align 8
  %1022 = add i64 %1021, 4499
  %1023 = add i64 %1021, 5
  %1024 = load i64, i64* %9, align 8, !tbaa !2428
  %1025 = add i64 %1024, -8
  %1026 = inttoptr i64 %1025 to i64*
  store i64 %1023, i64* %1026, align 8
  store i64 %1025, i64* %9, align 8, !tbaa !2428
  store i64 %1022, i64* %107, align 8, !tbaa !2428
  %1027 = tail call %struct.Memory* @sub_401f10_kernel_fdtd_apml_StrictFP_renamed_(%struct.State* nonnull %0, i64 %1022, %struct.Memory* %837)
  %1028 = load i64, i64* %RBP, align 8
  %1029 = add i64 %1028, -60
  %1030 = load i64, i64* %PC, align 8
  %1031 = add i64 %1030, 3
  store i64 %1031, i64* %PC, align 8
  %1032 = inttoptr i64 %1029 to i32*
  %1033 = load i32, i32* %1032, align 4
  %1034 = zext i32 %1033 to i64
  store i64 %1034, i64* %RDI, align 8, !tbaa !2428
  %1035 = add i64 %1028, -68
  %1036 = add i64 %1030, 6
  store i64 %1036, i64* %PC, align 8
  %1037 = inttoptr i64 %1035 to i32*
  %1038 = load i32, i32* %1037, align 4
  %1039 = zext i32 %1038 to i64
  store i64 %1039, i64* %RSI, align 8, !tbaa !2428
  %1040 = add i64 %1028, -64
  %1041 = add i64 %1030, 9
  store i64 %1041, i64* %PC, align 8
  %1042 = inttoptr i64 %1040 to i32*
  %1043 = load i32, i32* %1042, align 4
  %1044 = zext i32 %1043 to i64
  store i64 %1044, i64* %RDX, align 8, !tbaa !2428
  %1045 = add i64 %1028, -128
  %1046 = add i64 %1030, 13
  store i64 %1046, i64* %PC, align 8
  %1047 = inttoptr i64 %1045 to i64*
  %1048 = load i64, i64* %1047, align 8
  store i64 %1048, i64* %RCX, align 8, !tbaa !2428
  %1049 = add i64 %1028, -160
  %1050 = add i64 %1030, 20
  store i64 %1050, i64* %PC, align 8
  %1051 = inttoptr i64 %1049 to i64*
  %1052 = load i64, i64* %1051, align 8
  store i64 %1052, i64* %R8, align 8, !tbaa !2428
  %1053 = add i64 %1030, 7374
  %1054 = add i64 %1030, 25
  %1055 = load i64, i64* %9, align 8, !tbaa !2428
  %1056 = add i64 %1055, -8
  %1057 = inttoptr i64 %1056 to i64*
  store i64 %1054, i64* %1057, align 8
  store i64 %1056, i64* %9, align 8, !tbaa !2428
  store i64 %1053, i64* %107, align 8, !tbaa !2428
  %1058 = tail call %struct.Memory* @sub_402a50_check_FP_renamed_(%struct.State* nonnull %0, i64 %1053, %struct.Memory* %1027)
  %1059 = load i32, i32* %EAX, align 4
  %1060 = load i64, i64* %PC, align 8
  store i8 0, i8* %42, align 1, !tbaa !2432
  %1061 = and i32 %1059, 255
  %1062 = tail call i32 @llvm.ctpop.i32(i32 %1061) #8
  %1063 = trunc i32 %1062 to i8
  %1064 = and i8 %1063, 1
  %1065 = xor i8 %1064, 1
  store i8 %1065, i8* %49, align 1, !tbaa !2446
  store i8 0, i8* %54, align 1, !tbaa !2447
  %1066 = icmp eq i32 %1059, 0
  %1067 = zext i1 %1066 to i8
  store i8 %1067, i8* %57, align 1, !tbaa !2448
  %1068 = lshr i32 %1059, 31
  %1069 = trunc i32 %1068 to i8
  store i8 %1069, i8* %60, align 1, !tbaa !2449
  store i8 0, i8* %66, align 1, !tbaa !2450
  %.v = select i1 %1066, i64 9, i64 21
  %1070 = add i64 %1060, %.v
  store i64 %1070, i64* %107, align 8, !tbaa !2428
  %1071 = load i64, i64* %RBP, align 8
  br i1 %1066, label %block_400da4, label %block_400db0

block_400e12:                                     ; preds = %block_400de1
  %1072 = add i64 %1532, -60
  %1073 = add i64 %1531, 3
  store i64 %1073, i64* %PC, align 8
  %1074 = inttoptr i64 %1072 to i32*
  %1075 = load i32, i32* %1074, align 4
  %1076 = zext i32 %1075 to i64
  store i64 %1076, i64* %RDI, align 8, !tbaa !2428
  %1077 = add i64 %1532, -68
  %1078 = add i64 %1531, 6
  store i64 %1078, i64* %PC, align 8
  %1079 = inttoptr i64 %1077 to i32*
  %1080 = load i32, i32* %1079, align 4
  %1081 = zext i32 %1080 to i64
  store i64 %1081, i64* %RSI, align 8, !tbaa !2428
  %1082 = add i64 %1532, -64
  %1083 = add i64 %1531, 9
  store i64 %1083, i64* %PC, align 8
  %1084 = inttoptr i64 %1082 to i32*
  %1085 = load i32, i32* %1084, align 4
  %1086 = zext i32 %1085 to i64
  store i64 %1086, i64* %RDX, align 8, !tbaa !2428
  %1087 = add i64 %1532, -152
  %1088 = add i64 %1531, 16
  store i64 %1088, i64* %PC, align 8
  %1089 = inttoptr i64 %1087 to i64*
  %1090 = load i64, i64* %1089, align 8
  store i64 %1090, i64* %RCX, align 8, !tbaa !2428
  %1091 = add i64 %1532, -184
  %1092 = add i64 %1531, 23
  store i64 %1092, i64* %PC, align 8
  %1093 = inttoptr i64 %1091 to i64*
  %1094 = load i64, i64* %1093, align 8
  store i64 %1094, i64* %R8, align 8, !tbaa !2428
  %1095 = add i64 %1531, 7230
  %1096 = add i64 %1531, 28
  %1097 = load i64, i64* %9, align 8, !tbaa !2428
  %1098 = add i64 %1097, -8
  %1099 = inttoptr i64 %1098 to i64*
  store i64 %1096, i64* %1099, align 8
  store i64 %1098, i64* %9, align 8, !tbaa !2428
  store i64 %1095, i64* %107, align 8, !tbaa !2428
  %1100 = tail call %struct.Memory* @sub_402a50_check_FP_renamed_(%struct.State* nonnull %0, i64 %1095, %struct.Memory* %1519)
  %1101 = load i32, i32* %EAX, align 4
  %1102 = load i64, i64* %PC, align 8
  store i8 0, i8* %42, align 1, !tbaa !2432
  %1103 = and i32 %1101, 255
  %1104 = tail call i32 @llvm.ctpop.i32(i32 %1103) #8
  %1105 = trunc i32 %1104 to i8
  %1106 = and i8 %1105, 1
  %1107 = xor i8 %1106, 1
  store i8 %1107, i8* %49, align 1, !tbaa !2446
  store i8 0, i8* %54, align 1, !tbaa !2447
  %1108 = icmp eq i32 %1101, 0
  %1109 = zext i1 %1108 to i8
  store i8 %1109, i8* %57, align 1, !tbaa !2448
  %1110 = lshr i32 %1101, 31
  %1111 = trunc i32 %1110 to i8
  store i8 %1111, i8* %60, align 1, !tbaa !2449
  store i8 0, i8* %66, align 1, !tbaa !2450
  %.v3 = select i1 %1108, i64 9, i64 21
  %1112 = add i64 %1102, %.v3
  store i64 %1112, i64* %107, align 8, !tbaa !2428
  %1113 = load i64, i64* %RBP, align 8
  br i1 %1108, label %block_400e37, label %block_400e43

block_400f77:                                     ; preds = %block_400dd5, %block_400e43, %block_400da4, %block_400e06, %block_400e37
  %1114 = phi i64 [ %.pre, %block_400e43 ], [ %1218, %block_400e37 ], [ %1223, %block_400e06 ], [ %1537, %block_400dd5 ], [ %1228, %block_400da4 ]
  %MEMORY.0 = phi %struct.Memory* [ %1485, %block_400e43 ], [ %1100, %block_400e37 ], [ %1519, %block_400e06 ], [ %1200, %block_400dd5 ], [ %1058, %block_400da4 ]
  %1115 = load i64, i64* %RBP, align 8
  %1116 = add i64 %1115, -44
  %1117 = add i64 %1114, 3
  store i64 %1117, i64* %PC, align 8
  %1118 = inttoptr i64 %1116 to i32*
  %1119 = load i32, i32* %1118, align 4
  %1120 = zext i32 %1119 to i64
  store i64 %1120, i64* %RAX, align 8, !tbaa !2428
  %1121 = load i64, i64* %RSP, align 8
  %1122 = add i64 %1121, 392
  store i64 %1122, i64* %RSP, align 8, !tbaa !2428
  %1123 = icmp ugt i64 %1121, -393
  %1124 = zext i1 %1123 to i8
  store i8 %1124, i8* %42, align 1, !tbaa !2432
  %1125 = trunc i64 %1122 to i32
  %1126 = and i32 %1125, 255
  %1127 = tail call i32 @llvm.ctpop.i32(i32 %1126) #8
  %1128 = trunc i32 %1127 to i8
  %1129 = and i8 %1128, 1
  %1130 = xor i8 %1129, 1
  store i8 %1130, i8* %49, align 1, !tbaa !2446
  %1131 = xor i64 %1121, %1122
  %1132 = lshr i64 %1131, 4
  %1133 = trunc i64 %1132 to i8
  %1134 = and i8 %1133, 1
  store i8 %1134, i8* %54, align 1, !tbaa !2447
  %1135 = icmp eq i64 %1122, 0
  %1136 = zext i1 %1135 to i8
  store i8 %1136, i8* %57, align 1, !tbaa !2448
  %1137 = lshr i64 %1122, 63
  %1138 = trunc i64 %1137 to i8
  store i8 %1138, i8* %60, align 1, !tbaa !2449
  %1139 = lshr i64 %1121, 63
  %1140 = xor i64 %1137, %1139
  %1141 = add nuw nsw i64 %1140, %1137
  %1142 = icmp eq i64 %1141, 2
  %1143 = zext i1 %1142 to i8
  store i8 %1143, i8* %66, align 1, !tbaa !2450
  %1144 = add i64 %1114, 11
  store i64 %1144, i64* %PC, align 8
  %1145 = add i64 %1121, 400
  %1146 = inttoptr i64 %1122 to i64*
  %1147 = load i64, i64* %1146, align 8
  store i64 %1147, i64* %RBX, align 8, !tbaa !2428
  store i64 %1145, i64* %9, align 8, !tbaa !2428
  %1148 = add i64 %1114, 13
  store i64 %1148, i64* %PC, align 8
  %1149 = add i64 %1121, 408
  %1150 = inttoptr i64 %1145 to i64*
  %1151 = load i64, i64* %1150, align 8
  store i64 %1151, i64* %R12, align 8, !tbaa !2428
  store i64 %1149, i64* %9, align 8, !tbaa !2428
  %1152 = add i64 %1114, 15
  store i64 %1152, i64* %PC, align 8
  %1153 = add i64 %1121, 416
  %1154 = inttoptr i64 %1149 to i64*
  %1155 = load i64, i64* %1154, align 8
  store i64 %1155, i64* %R13, align 8, !tbaa !2428
  store i64 %1153, i64* %9, align 8, !tbaa !2428
  %1156 = add i64 %1114, 17
  store i64 %1156, i64* %PC, align 8
  %1157 = add i64 %1121, 424
  %1158 = inttoptr i64 %1153 to i64*
  %1159 = load i64, i64* %1158, align 8
  store i64 %1159, i64* %R14, align 8, !tbaa !2428
  store i64 %1157, i64* %9, align 8, !tbaa !2428
  %1160 = add i64 %1114, 19
  store i64 %1160, i64* %PC, align 8
  %1161 = add i64 %1121, 432
  %1162 = inttoptr i64 %1157 to i64*
  %1163 = load i64, i64* %1162, align 8
  store i64 %1163, i64* %R15, align 8, !tbaa !2428
  store i64 %1161, i64* %9, align 8, !tbaa !2428
  %1164 = add i64 %1114, 20
  store i64 %1164, i64* %PC, align 8
  %1165 = add i64 %1121, 440
  %1166 = inttoptr i64 %1161 to i64*
  %1167 = load i64, i64* %1166, align 8
  store i64 %1167, i64* %RBP, align 8, !tbaa !2428
  store i64 %1165, i64* %9, align 8, !tbaa !2428
  %1168 = add i64 %1114, 21
  store i64 %1168, i64* %PC, align 8
  %1169 = inttoptr i64 %1165 to i64*
  %1170 = load i64, i64* %1169, align 8
  store i64 %1170, i64* %107, align 8, !tbaa !2428
  %1171 = add i64 %1121, 448
  store i64 %1171, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400db0:                                     ; preds = %block_400880
  %1172 = add i64 %1071, -60
  %1173 = add i64 %1070, 3
  store i64 %1173, i64* %PC, align 8
  %1174 = inttoptr i64 %1172 to i32*
  %1175 = load i32, i32* %1174, align 4
  %1176 = zext i32 %1175 to i64
  store i64 %1176, i64* %RDI, align 8, !tbaa !2428
  %1177 = add i64 %1071, -68
  %1178 = add i64 %1070, 6
  store i64 %1178, i64* %PC, align 8
  %1179 = inttoptr i64 %1177 to i32*
  %1180 = load i32, i32* %1179, align 4
  %1181 = zext i32 %1180 to i64
  store i64 %1181, i64* %RSI, align 8, !tbaa !2428
  %1182 = add i64 %1071, -64
  %1183 = add i64 %1070, 9
  store i64 %1183, i64* %PC, align 8
  %1184 = inttoptr i64 %1182 to i32*
  %1185 = load i32, i32* %1184, align 4
  %1186 = zext i32 %1185 to i64
  store i64 %1186, i64* %RDX, align 8, !tbaa !2428
  %1187 = add i64 %1071, -136
  %1188 = add i64 %1070, 16
  store i64 %1188, i64* %PC, align 8
  %1189 = inttoptr i64 %1187 to i64*
  %1190 = load i64, i64* %1189, align 8
  store i64 %1190, i64* %RCX, align 8, !tbaa !2428
  %1191 = add i64 %1071, -168
  %1192 = add i64 %1070, 23
  store i64 %1192, i64* %PC, align 8
  %1193 = inttoptr i64 %1191 to i64*
  %1194 = load i64, i64* %1193, align 8
  store i64 %1194, i64* %R8, align 8, !tbaa !2428
  %1195 = add i64 %1070, 7328
  %1196 = add i64 %1070, 28
  %1197 = load i64, i64* %9, align 8, !tbaa !2428
  %1198 = add i64 %1197, -8
  %1199 = inttoptr i64 %1198 to i64*
  store i64 %1196, i64* %1199, align 8
  store i64 %1198, i64* %9, align 8, !tbaa !2428
  store i64 %1195, i64* %107, align 8, !tbaa !2428
  %1200 = tail call %struct.Memory* @sub_402a50_check_FP_renamed_(%struct.State* nonnull %0, i64 %1195, %struct.Memory* %1058)
  %1201 = load i32, i32* %EAX, align 4
  %1202 = load i64, i64* %PC, align 8
  store i8 0, i8* %42, align 1, !tbaa !2432
  %1203 = and i32 %1201, 255
  %1204 = tail call i32 @llvm.ctpop.i32(i32 %1203) #8
  %1205 = trunc i32 %1204 to i8
  %1206 = and i8 %1205, 1
  %1207 = xor i8 %1206, 1
  store i8 %1207, i8* %49, align 1, !tbaa !2446
  store i8 0, i8* %54, align 1, !tbaa !2447
  %1208 = icmp eq i32 %1201, 0
  %1209 = zext i1 %1208 to i8
  store i8 %1209, i8* %57, align 1, !tbaa !2448
  %1210 = lshr i32 %1201, 31
  %1211 = trunc i32 %1210 to i8
  store i8 %1211, i8* %60, align 1, !tbaa !2449
  store i8 0, i8* %66, align 1, !tbaa !2450
  %.v1 = select i1 %1208, i64 9, i64 21
  %1212 = add i64 %1202, %.v1
  store i64 %1212, i64* %107, align 8, !tbaa !2428
  %1213 = load i64, i64* %RBP, align 8
  br i1 %1208, label %block_400dd5, label %block_400de1

block_400e37:                                     ; preds = %block_400e12
  %1214 = add i64 %1113, -44
  %1215 = add i64 %1112, 7
  store i64 %1215, i64* %PC, align 8
  %1216 = inttoptr i64 %1214 to i32*
  store i32 1, i32* %1216, align 4
  %1217 = load i64, i64* %PC, align 8
  %1218 = add i64 %1217, 313
  store i64 %1218, i64* %107, align 8, !tbaa !2428
  br label %block_400f77

block_400e06:                                     ; preds = %block_400de1
  %1219 = add i64 %1532, -44
  %1220 = add i64 %1531, 7
  store i64 %1220, i64* %PC, align 8
  %1221 = inttoptr i64 %1219 to i32*
  store i32 1, i32* %1221, align 4
  %1222 = load i64, i64* %PC, align 8
  %1223 = add i64 %1222, 362
  store i64 %1223, i64* %107, align 8, !tbaa !2428
  br label %block_400f77

block_400da4:                                     ; preds = %block_400880
  %1224 = add i64 %1071, -44
  %1225 = add i64 %1070, 7
  store i64 %1225, i64* %PC, align 8
  %1226 = inttoptr i64 %1224 to i32*
  store i32 1, i32* %1226, align 4
  %1227 = load i64, i64* %PC, align 8
  %1228 = add i64 %1227, 460
  store i64 %1228, i64* %107, align 8, !tbaa !2428
  br label %block_400f77

block_400e43:                                     ; preds = %block_400e12
  %1229 = add i64 %1113, -60
  %1230 = add i64 %1112, 3
  store i64 %1230, i64* %PC, align 8
  %1231 = inttoptr i64 %1229 to i32*
  %1232 = load i32, i32* %1231, align 4
  %1233 = zext i32 %1232 to i64
  store i64 %1233, i64* %RDI, align 8, !tbaa !2428
  %1234 = add i64 %1113, -68
  %1235 = add i64 %1112, 6
  store i64 %1235, i64* %PC, align 8
  %1236 = inttoptr i64 %1234 to i32*
  %1237 = load i32, i32* %1236, align 4
  %1238 = zext i32 %1237 to i64
  store i64 %1238, i64* %RSI, align 8, !tbaa !2428
  %1239 = add i64 %1113, -64
  %1240 = add i64 %1112, 9
  store i64 %1240, i64* %PC, align 8
  %1241 = inttoptr i64 %1239 to i32*
  %1242 = load i32, i32* %1241, align 4
  %1243 = zext i32 %1242 to i64
  store i64 %1243, i64* %RDX, align 8, !tbaa !2428
  %1244 = add i64 %1113, -160
  %1245 = add i64 %1112, 16
  store i64 %1245, i64* %PC, align 8
  %1246 = inttoptr i64 %1244 to i64*
  %1247 = load i64, i64* %1246, align 8
  store i64 %1247, i64* %RCX, align 8, !tbaa !2428
  %1248 = add i64 %1113, -168
  %1249 = add i64 %1112, 23
  store i64 %1249, i64* %PC, align 8
  %1250 = inttoptr i64 %1248 to i64*
  %1251 = load i64, i64* %1250, align 8
  store i64 %1251, i64* %R8, align 8, !tbaa !2428
  %1252 = add i64 %1113, -176
  %1253 = add i64 %1112, 30
  store i64 %1253, i64* %PC, align 8
  %1254 = inttoptr i64 %1252 to i64*
  %1255 = load i64, i64* %1254, align 8
  store i64 %1255, i64* %R9, align 8, !tbaa !2428
  %1256 = add i64 %1113, -184
  %1257 = add i64 %1112, 37
  store i64 %1257, i64* %PC, align 8
  %1258 = inttoptr i64 %1256 to i64*
  %1259 = load i64, i64* %1258, align 8
  store i64 %1259, i64* %RAX, align 8, !tbaa !2428
  %1260 = bitcast i64* %RSP to i64**
  %1261 = load i64*, i64** %1260, align 8
  %1262 = add i64 %1112, 41
  store i64 %1262, i64* %PC, align 8
  store i64 %1259, i64* %1261, align 8
  %1263 = load i64, i64* %PC, align 8
  %1264 = add i64 %1263, 7556
  %1265 = add i64 %1263, 5
  %1266 = load i64, i64* %9, align 8, !tbaa !2428
  %1267 = add i64 %1266, -8
  %1268 = inttoptr i64 %1267 to i64*
  store i64 %1265, i64* %1268, align 8
  store i64 %1267, i64* %9, align 8, !tbaa !2428
  store i64 %1264, i64* %107, align 8, !tbaa !2428
  %1269 = tail call %struct.Memory* @sub_402bf0_print_array_renamed_(%struct.State* nonnull %0, i64 %1264, %struct.Memory* %1100)
  %1270 = load i64, i64* %RBP, align 8
  %1271 = add i64 %1270, -96
  %1272 = load i64, i64* %PC, align 8
  %1273 = add i64 %1272, 4
  store i64 %1273, i64* %PC, align 8
  %1274 = inttoptr i64 %1271 to i64*
  %1275 = load i64, i64* %1274, align 8
  store i64 %1275, i64* %RAX, align 8, !tbaa !2428
  store i64 %1275, i64* %RDI, align 8, !tbaa !2428
  %1276 = add i64 %1272, -2337
  %1277 = add i64 %1272, 12
  %1278 = load i64, i64* %9, align 8, !tbaa !2428
  %1279 = add i64 %1278, -8
  %1280 = inttoptr i64 %1279 to i64*
  store i64 %1277, i64* %1280, align 8
  store i64 %1279, i64* %9, align 8, !tbaa !2428
  store i64 %1276, i64* %107, align 8, !tbaa !2428
  %1281 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1269)
  %1282 = load i64, i64* %RBP, align 8
  %1283 = add i64 %1282, -104
  %1284 = load i64, i64* %PC, align 8
  %1285 = add i64 %1284, 4
  store i64 %1285, i64* %PC, align 8
  %1286 = inttoptr i64 %1283 to i64*
  %1287 = load i64, i64* %1286, align 8
  store i64 %1287, i64* %RAX, align 8, !tbaa !2428
  store i64 %1287, i64* %RDI, align 8, !tbaa !2428
  %1288 = add i64 %1284, -2349
  %1289 = add i64 %1284, 12
  %1290 = load i64, i64* %9, align 8, !tbaa !2428
  %1291 = add i64 %1290, -8
  %1292 = inttoptr i64 %1291 to i64*
  store i64 %1289, i64* %1292, align 8
  store i64 %1291, i64* %9, align 8, !tbaa !2428
  store i64 %1288, i64* %107, align 8, !tbaa !2428
  %1293 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1281)
  %1294 = load i64, i64* %RBP, align 8
  %1295 = add i64 %1294, -112
  %1296 = load i64, i64* %PC, align 8
  %1297 = add i64 %1296, 4
  store i64 %1297, i64* %PC, align 8
  %1298 = inttoptr i64 %1295 to i64*
  %1299 = load i64, i64* %1298, align 8
  store i64 %1299, i64* %RAX, align 8, !tbaa !2428
  store i64 %1299, i64* %RDI, align 8, !tbaa !2428
  %1300 = add i64 %1296, -2361
  %1301 = add i64 %1296, 12
  %1302 = load i64, i64* %9, align 8, !tbaa !2428
  %1303 = add i64 %1302, -8
  %1304 = inttoptr i64 %1303 to i64*
  store i64 %1301, i64* %1304, align 8
  store i64 %1303, i64* %9, align 8, !tbaa !2428
  store i64 %1300, i64* %107, align 8, !tbaa !2428
  %1305 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1293)
  %1306 = load i64, i64* %RBP, align 8
  %1307 = add i64 %1306, -120
  %1308 = load i64, i64* %PC, align 8
  %1309 = add i64 %1308, 4
  store i64 %1309, i64* %PC, align 8
  %1310 = inttoptr i64 %1307 to i64*
  %1311 = load i64, i64* %1310, align 8
  store i64 %1311, i64* %RAX, align 8, !tbaa !2428
  store i64 %1311, i64* %RDI, align 8, !tbaa !2428
  %1312 = add i64 %1308, -2373
  %1313 = add i64 %1308, 12
  %1314 = load i64, i64* %9, align 8, !tbaa !2428
  %1315 = add i64 %1314, -8
  %1316 = inttoptr i64 %1315 to i64*
  store i64 %1313, i64* %1316, align 8
  store i64 %1315, i64* %9, align 8, !tbaa !2428
  store i64 %1312, i64* %107, align 8, !tbaa !2428
  %1317 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1305)
  %1318 = load i64, i64* %RBP, align 8
  %1319 = add i64 %1318, -128
  %1320 = load i64, i64* %PC, align 8
  %1321 = add i64 %1320, 4
  store i64 %1321, i64* %PC, align 8
  %1322 = inttoptr i64 %1319 to i64*
  %1323 = load i64, i64* %1322, align 8
  store i64 %1323, i64* %RAX, align 8, !tbaa !2428
  store i64 %1323, i64* %RDI, align 8, !tbaa !2428
  %1324 = add i64 %1320, -2385
  %1325 = add i64 %1320, 12
  %1326 = load i64, i64* %9, align 8, !tbaa !2428
  %1327 = add i64 %1326, -8
  %1328 = inttoptr i64 %1327 to i64*
  store i64 %1325, i64* %1328, align 8
  store i64 %1327, i64* %9, align 8, !tbaa !2428
  store i64 %1324, i64* %107, align 8, !tbaa !2428
  %1329 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1317)
  %1330 = load i64, i64* %RBP, align 8
  %1331 = add i64 %1330, -136
  %1332 = load i64, i64* %PC, align 8
  %1333 = add i64 %1332, 7
  store i64 %1333, i64* %PC, align 8
  %1334 = inttoptr i64 %1331 to i64*
  %1335 = load i64, i64* %1334, align 8
  store i64 %1335, i64* %RAX, align 8, !tbaa !2428
  store i64 %1335, i64* %RDI, align 8, !tbaa !2428
  %1336 = add i64 %1332, -2397
  %1337 = add i64 %1332, 15
  %1338 = load i64, i64* %9, align 8, !tbaa !2428
  %1339 = add i64 %1338, -8
  %1340 = inttoptr i64 %1339 to i64*
  store i64 %1337, i64* %1340, align 8
  store i64 %1339, i64* %9, align 8, !tbaa !2428
  store i64 %1336, i64* %107, align 8, !tbaa !2428
  %1341 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1329)
  %1342 = load i64, i64* %RBP, align 8
  %1343 = add i64 %1342, -144
  %1344 = load i64, i64* %PC, align 8
  %1345 = add i64 %1344, 7
  store i64 %1345, i64* %PC, align 8
  %1346 = inttoptr i64 %1343 to i64*
  %1347 = load i64, i64* %1346, align 8
  store i64 %1347, i64* %RAX, align 8, !tbaa !2428
  store i64 %1347, i64* %RDI, align 8, !tbaa !2428
  %1348 = add i64 %1344, -2412
  %1349 = add i64 %1344, 15
  %1350 = load i64, i64* %9, align 8, !tbaa !2428
  %1351 = add i64 %1350, -8
  %1352 = inttoptr i64 %1351 to i64*
  store i64 %1349, i64* %1352, align 8
  store i64 %1351, i64* %9, align 8, !tbaa !2428
  store i64 %1348, i64* %107, align 8, !tbaa !2428
  %1353 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1341)
  %1354 = load i64, i64* %RBP, align 8
  %1355 = add i64 %1354, -152
  %1356 = load i64, i64* %PC, align 8
  %1357 = add i64 %1356, 7
  store i64 %1357, i64* %PC, align 8
  %1358 = inttoptr i64 %1355 to i64*
  %1359 = load i64, i64* %1358, align 8
  store i64 %1359, i64* %RAX, align 8, !tbaa !2428
  store i64 %1359, i64* %RDI, align 8, !tbaa !2428
  %1360 = add i64 %1356, -2427
  %1361 = add i64 %1356, 15
  %1362 = load i64, i64* %9, align 8, !tbaa !2428
  %1363 = add i64 %1362, -8
  %1364 = inttoptr i64 %1363 to i64*
  store i64 %1361, i64* %1364, align 8
  store i64 %1363, i64* %9, align 8, !tbaa !2428
  store i64 %1360, i64* %107, align 8, !tbaa !2428
  %1365 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1353)
  %1366 = load i64, i64* %RBP, align 8
  %1367 = add i64 %1366, -160
  %1368 = load i64, i64* %PC, align 8
  %1369 = add i64 %1368, 7
  store i64 %1369, i64* %PC, align 8
  %1370 = inttoptr i64 %1367 to i64*
  %1371 = load i64, i64* %1370, align 8
  store i64 %1371, i64* %RAX, align 8, !tbaa !2428
  store i64 %1371, i64* %RDI, align 8, !tbaa !2428
  %1372 = add i64 %1368, -2442
  %1373 = add i64 %1368, 15
  %1374 = load i64, i64* %9, align 8, !tbaa !2428
  %1375 = add i64 %1374, -8
  %1376 = inttoptr i64 %1375 to i64*
  store i64 %1373, i64* %1376, align 8
  store i64 %1375, i64* %9, align 8, !tbaa !2428
  store i64 %1372, i64* %107, align 8, !tbaa !2428
  %1377 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1365)
  %1378 = load i64, i64* %RBP, align 8
  %1379 = add i64 %1378, -168
  %1380 = load i64, i64* %PC, align 8
  %1381 = add i64 %1380, 7
  store i64 %1381, i64* %PC, align 8
  %1382 = inttoptr i64 %1379 to i64*
  %1383 = load i64, i64* %1382, align 8
  store i64 %1383, i64* %RAX, align 8, !tbaa !2428
  store i64 %1383, i64* %RDI, align 8, !tbaa !2428
  %1384 = add i64 %1380, -2457
  %1385 = add i64 %1380, 15
  %1386 = load i64, i64* %9, align 8, !tbaa !2428
  %1387 = add i64 %1386, -8
  %1388 = inttoptr i64 %1387 to i64*
  store i64 %1385, i64* %1388, align 8
  store i64 %1387, i64* %9, align 8, !tbaa !2428
  store i64 %1384, i64* %107, align 8, !tbaa !2428
  %1389 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1377)
  %1390 = load i64, i64* %RBP, align 8
  %1391 = add i64 %1390, -176
  %1392 = load i64, i64* %PC, align 8
  %1393 = add i64 %1392, 7
  store i64 %1393, i64* %PC, align 8
  %1394 = inttoptr i64 %1391 to i64*
  %1395 = load i64, i64* %1394, align 8
  store i64 %1395, i64* %RAX, align 8, !tbaa !2428
  store i64 %1395, i64* %RDI, align 8, !tbaa !2428
  %1396 = add i64 %1392, -2472
  %1397 = add i64 %1392, 15
  %1398 = load i64, i64* %9, align 8, !tbaa !2428
  %1399 = add i64 %1398, -8
  %1400 = inttoptr i64 %1399 to i64*
  store i64 %1397, i64* %1400, align 8
  store i64 %1399, i64* %9, align 8, !tbaa !2428
  store i64 %1396, i64* %107, align 8, !tbaa !2428
  %1401 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1389)
  %1402 = load i64, i64* %RBP, align 8
  %1403 = add i64 %1402, -184
  %1404 = load i64, i64* %PC, align 8
  %1405 = add i64 %1404, 7
  store i64 %1405, i64* %PC, align 8
  %1406 = inttoptr i64 %1403 to i64*
  %1407 = load i64, i64* %1406, align 8
  store i64 %1407, i64* %RAX, align 8, !tbaa !2428
  store i64 %1407, i64* %RDI, align 8, !tbaa !2428
  %1408 = add i64 %1404, -2487
  %1409 = add i64 %1404, 15
  %1410 = load i64, i64* %9, align 8, !tbaa !2428
  %1411 = add i64 %1410, -8
  %1412 = inttoptr i64 %1411 to i64*
  store i64 %1409, i64* %1412, align 8
  store i64 %1411, i64* %9, align 8, !tbaa !2428
  store i64 %1408, i64* %107, align 8, !tbaa !2428
  %1413 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1401)
  %1414 = load i64, i64* %RBP, align 8
  %1415 = add i64 %1414, -192
  %1416 = load i64, i64* %PC, align 8
  %1417 = add i64 %1416, 7
  store i64 %1417, i64* %PC, align 8
  %1418 = inttoptr i64 %1415 to i64*
  %1419 = load i64, i64* %1418, align 8
  store i64 %1419, i64* %RAX, align 8, !tbaa !2428
  store i64 %1419, i64* %RDI, align 8, !tbaa !2428
  %1420 = add i64 %1416, -2502
  %1421 = add i64 %1416, 15
  %1422 = load i64, i64* %9, align 8, !tbaa !2428
  %1423 = add i64 %1422, -8
  %1424 = inttoptr i64 %1423 to i64*
  store i64 %1421, i64* %1424, align 8
  store i64 %1423, i64* %9, align 8, !tbaa !2428
  store i64 %1420, i64* %107, align 8, !tbaa !2428
  %1425 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1413)
  %1426 = load i64, i64* %RBP, align 8
  %1427 = add i64 %1426, -200
  %1428 = load i64, i64* %PC, align 8
  %1429 = add i64 %1428, 7
  store i64 %1429, i64* %PC, align 8
  %1430 = inttoptr i64 %1427 to i64*
  %1431 = load i64, i64* %1430, align 8
  store i64 %1431, i64* %RAX, align 8, !tbaa !2428
  store i64 %1431, i64* %RDI, align 8, !tbaa !2428
  %1432 = add i64 %1428, -2517
  %1433 = add i64 %1428, 15
  %1434 = load i64, i64* %9, align 8, !tbaa !2428
  %1435 = add i64 %1434, -8
  %1436 = inttoptr i64 %1435 to i64*
  store i64 %1433, i64* %1436, align 8
  store i64 %1435, i64* %9, align 8, !tbaa !2428
  store i64 %1432, i64* %107, align 8, !tbaa !2428
  %1437 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1425)
  %1438 = load i64, i64* %RBP, align 8
  %1439 = add i64 %1438, -208
  %1440 = load i64, i64* %PC, align 8
  %1441 = add i64 %1440, 7
  store i64 %1441, i64* %PC, align 8
  %1442 = inttoptr i64 %1439 to i64*
  %1443 = load i64, i64* %1442, align 8
  store i64 %1443, i64* %RAX, align 8, !tbaa !2428
  store i64 %1443, i64* %RDI, align 8, !tbaa !2428
  %1444 = add i64 %1440, -2532
  %1445 = add i64 %1440, 15
  %1446 = load i64, i64* %9, align 8, !tbaa !2428
  %1447 = add i64 %1446, -8
  %1448 = inttoptr i64 %1447 to i64*
  store i64 %1445, i64* %1448, align 8
  store i64 %1447, i64* %9, align 8, !tbaa !2428
  store i64 %1444, i64* %107, align 8, !tbaa !2428
  %1449 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1437)
  %1450 = load i64, i64* %RBP, align 8
  %1451 = add i64 %1450, -216
  %1452 = load i64, i64* %PC, align 8
  %1453 = add i64 %1452, 7
  store i64 %1453, i64* %PC, align 8
  %1454 = inttoptr i64 %1451 to i64*
  %1455 = load i64, i64* %1454, align 8
  store i64 %1455, i64* %RAX, align 8, !tbaa !2428
  store i64 %1455, i64* %RDI, align 8, !tbaa !2428
  %1456 = add i64 %1452, -2547
  %1457 = add i64 %1452, 15
  %1458 = load i64, i64* %9, align 8, !tbaa !2428
  %1459 = add i64 %1458, -8
  %1460 = inttoptr i64 %1459 to i64*
  store i64 %1457, i64* %1460, align 8
  store i64 %1459, i64* %9, align 8, !tbaa !2428
  store i64 %1456, i64* %107, align 8, !tbaa !2428
  %1461 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1449)
  %1462 = load i64, i64* %RBP, align 8
  %1463 = add i64 %1462, -224
  %1464 = load i64, i64* %PC, align 8
  %1465 = add i64 %1464, 7
  store i64 %1465, i64* %PC, align 8
  %1466 = inttoptr i64 %1463 to i64*
  %1467 = load i64, i64* %1466, align 8
  store i64 %1467, i64* %RAX, align 8, !tbaa !2428
  store i64 %1467, i64* %RDI, align 8, !tbaa !2428
  %1468 = add i64 %1464, -2562
  %1469 = add i64 %1464, 15
  %1470 = load i64, i64* %9, align 8, !tbaa !2428
  %1471 = add i64 %1470, -8
  %1472 = inttoptr i64 %1471 to i64*
  store i64 %1469, i64* %1472, align 8
  store i64 %1471, i64* %9, align 8, !tbaa !2428
  store i64 %1468, i64* %107, align 8, !tbaa !2428
  %1473 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1461)
  %1474 = load i64, i64* %RBP, align 8
  %1475 = add i64 %1474, -232
  %1476 = load i64, i64* %PC, align 8
  %1477 = add i64 %1476, 7
  store i64 %1477, i64* %PC, align 8
  %1478 = inttoptr i64 %1475 to i64*
  %1479 = load i64, i64* %1478, align 8
  store i64 %1479, i64* %RAX, align 8, !tbaa !2428
  store i64 %1479, i64* %RDI, align 8, !tbaa !2428
  %1480 = add i64 %1476, -2577
  %1481 = add i64 %1476, 15
  %1482 = load i64, i64* %9, align 8, !tbaa !2428
  %1483 = add i64 %1482, -8
  %1484 = inttoptr i64 %1483 to i64*
  store i64 %1481, i64* %1484, align 8
  store i64 %1483, i64* %9, align 8, !tbaa !2428
  store i64 %1480, i64* %107, align 8, !tbaa !2428
  %1485 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1473)
  %1486 = load i64, i64* %RBP, align 8
  %1487 = add i64 %1486, -44
  %1488 = load i64, i64* %PC, align 8
  %1489 = add i64 %1488, 7
  store i64 %1489, i64* %PC, align 8
  %1490 = inttoptr i64 %1487 to i32*
  store i32 0, i32* %1490, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400f77

block_400de1:                                     ; preds = %block_400db0
  %1491 = add i64 %1213, -60
  %1492 = add i64 %1212, 3
  store i64 %1492, i64* %PC, align 8
  %1493 = inttoptr i64 %1491 to i32*
  %1494 = load i32, i32* %1493, align 4
  %1495 = zext i32 %1494 to i64
  store i64 %1495, i64* %RDI, align 8, !tbaa !2428
  %1496 = add i64 %1213, -68
  %1497 = add i64 %1212, 6
  store i64 %1497, i64* %PC, align 8
  %1498 = inttoptr i64 %1496 to i32*
  %1499 = load i32, i32* %1498, align 4
  %1500 = zext i32 %1499 to i64
  store i64 %1500, i64* %RSI, align 8, !tbaa !2428
  %1501 = add i64 %1213, -64
  %1502 = add i64 %1212, 9
  store i64 %1502, i64* %PC, align 8
  %1503 = inttoptr i64 %1501 to i32*
  %1504 = load i32, i32* %1503, align 4
  %1505 = zext i32 %1504 to i64
  store i64 %1505, i64* %RDX, align 8, !tbaa !2428
  %1506 = add i64 %1213, -144
  %1507 = add i64 %1212, 16
  store i64 %1507, i64* %PC, align 8
  %1508 = inttoptr i64 %1506 to i64*
  %1509 = load i64, i64* %1508, align 8
  store i64 %1509, i64* %RCX, align 8, !tbaa !2428
  %1510 = add i64 %1213, -176
  %1511 = add i64 %1212, 23
  store i64 %1511, i64* %PC, align 8
  %1512 = inttoptr i64 %1510 to i64*
  %1513 = load i64, i64* %1512, align 8
  store i64 %1513, i64* %R8, align 8, !tbaa !2428
  %1514 = add i64 %1212, 7279
  %1515 = add i64 %1212, 28
  %1516 = load i64, i64* %9, align 8, !tbaa !2428
  %1517 = add i64 %1516, -8
  %1518 = inttoptr i64 %1517 to i64*
  store i64 %1515, i64* %1518, align 8
  store i64 %1517, i64* %9, align 8, !tbaa !2428
  store i64 %1514, i64* %107, align 8, !tbaa !2428
  %1519 = tail call %struct.Memory* @sub_402a50_check_FP_renamed_(%struct.State* nonnull %0, i64 %1514, %struct.Memory* %1200)
  %1520 = load i32, i32* %EAX, align 4
  %1521 = load i64, i64* %PC, align 8
  store i8 0, i8* %42, align 1, !tbaa !2432
  %1522 = and i32 %1520, 255
  %1523 = tail call i32 @llvm.ctpop.i32(i32 %1522) #8
  %1524 = trunc i32 %1523 to i8
  %1525 = and i8 %1524, 1
  %1526 = xor i8 %1525, 1
  store i8 %1526, i8* %49, align 1, !tbaa !2446
  store i8 0, i8* %54, align 1, !tbaa !2447
  %1527 = icmp eq i32 %1520, 0
  %1528 = zext i1 %1527 to i8
  store i8 %1528, i8* %57, align 1, !tbaa !2448
  %1529 = lshr i32 %1520, 31
  %1530 = trunc i32 %1529 to i8
  store i8 %1530, i8* %60, align 1, !tbaa !2449
  store i8 0, i8* %66, align 1, !tbaa !2450
  %.v2 = select i1 %1527, i64 9, i64 21
  %1531 = add i64 %1521, %.v2
  store i64 %1531, i64* %107, align 8, !tbaa !2428
  %1532 = load i64, i64* %RBP, align 8
  br i1 %1527, label %block_400e06, label %block_400e12

block_400dd5:                                     ; preds = %block_400db0
  %1533 = add i64 %1213, -44
  %1534 = add i64 %1212, 7
  store i64 %1534, i64* %PC, align 8
  %1535 = inttoptr i64 %1533 to i32*
  store i32 1, i32* %1535, align 4
  %1536 = load i64, i64* %PC, align 8
  %1537 = add i64 %1536, 411
  store i64 %1537, i64* %107, align 8, !tbaa !2428
  br label %block_400f77
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #5

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400690_frame_dummy() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400690;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @1, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_400690_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400690_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400660___do_global_dtors_aux() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400660;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @3, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_400660___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400660___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_6040d8_free(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_6040b8_calloc(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @calloc to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_6040f8_fprintf(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_6040e0_printf(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402e70___libc_csu_fini() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402e70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @4, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_402e70___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402e70___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402e00___libc_csu_init() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402e00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @5, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_402e00___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402e00___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400880;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @6, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400880_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_6040b0___libc_start_main(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_6040c8_exit(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exit to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_4005a0_posix_memalign(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @posix_memalign to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_flush_cache() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4006a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @7, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @polybench_flush_cache_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4006a0_polybench_flush_cache(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402e74;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @8, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402e74__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_timer_stop() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400760;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @9, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @polybench_timer_stop_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400760_polybench_timer_stop(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_alloc_data() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4007c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @10, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @polybench_alloc_data_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_timer_print() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400780;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @11, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @polybench_timer_print_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400780_polybench_timer_print(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400520;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @12, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400520__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_timer_start() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400730;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @13, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @polybench_timer_start_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400730_polybench_timer_start(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_prepare_instruments() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400720;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @14, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @polybench_prepare_instruments_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400720_polybench_prepare_instruments(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %0, %2
  tail call void @callback_sub_402e00___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  tail call void @callback_sub_402e70___libc_csu_fini()
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline }
attributes #6 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { naked nobuiltin noinline }
attributes #8 = { nounwind }
attributes #9 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2445, !2445, i64 0}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"double", !2430, i64 0}
!2454 = !{!2430, !2430, i64 0}
!2455 = !{!2456, !2456, i64 0}
!2456 = !{!"float", !2430, i64 0}
