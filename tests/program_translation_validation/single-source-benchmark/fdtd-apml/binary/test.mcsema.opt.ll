; ModuleID = 'binary/test.mcsema.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_402e80__rodata_type = type <{ [112 x i8], [7 x i8], [51 x i8], [8 x i8], [84 x i8] }>
%seg_603df0__init_array_type = type <{ i64, i64 }>
%seg_603ff0__got_type = type <{ i64, i64 }>
%seg_604060__bss_type = type <{ [8 x i8], [8 x i8] }>
%polybench_papi_counters_threadid_type = type <{ [8 x i8] }>
%polybench_program_total_flops_type = type <{ [8 x i8] }>
%polybench_c_end_type = type <{ [8 x i8] }>
%polybench_t_end_type = type <{ [8 x i8] }>
%polybench_t_start_type = type <{ [8 x i8] }>
%polybench_c_start_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external local_unnamed_addr global i64, align 32
@seg_402e80__rodata = internal constant %seg_402e80__rodata_type <{ [112 x i8] c"\01\00\02\00\00\00\00\00\00\00\00\00\00\00E@\00\00\00\00\00J\A2@\00\00\00\00\00\00&@\00\00\00\00\00\00$@\00\00\00\00\00\00\08@\00\00\00\00\00\00\00@\00\00\00\00\00\00\F0?\00\00\00\00\00\00\18@\00\00\00\00\00\00\14@\00\00\00\00\00\00\10@\F1h\E3\88\B5\F8\E4>\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [7 x i8] c"%0.6f\0A\00", [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", [8 x i8] c"%0.2lf \00", [84 x i8] c"A[%d][%d][%d] = %lf and B[%d][%d][%d] = %lf differ more than FP_ABSTOLERANCE = %lf\0A\00" }>
@seg_603df0__init_array = internal global %seg_603df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400690_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400660___do_global_dtors_aux to i64) }>
@seg_603ff0__got = internal global %seg_603ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_604060__bss = internal global %seg_604060__bss_type zeroinitializer
@polybench_papi_counters_threadid = local_unnamed_addr global %polybench_papi_counters_threadid_type zeroinitializer
@polybench_program_total_flops = local_unnamed_addr global %polybench_program_total_flops_type zeroinitializer
@polybench_c_end = local_unnamed_addr global %polybench_c_end_type zeroinitializer
@polybench_t_end = local_unnamed_addr global %polybench_t_end_type zeroinitializer
@polybench_t_start = local_unnamed_addr global %polybench_t_start_type zeroinitializer
@polybench_c_start = local_unnamed_addr global %polybench_c_start_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400690_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400660___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402e70___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402e00___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_flush_cache_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_timer_stop_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_alloc_data_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_timer_print_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_timer_start_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_prepare_instruments_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @sub_401f10_kernel_fdtd_apml_StrictFP_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402bf0_print_array_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400520__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4005f0_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400720_polybench_prepare_instruments_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4006a0_polybench_flush_cache_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4013d0_kernel_fdtd_apml_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400f90_init_array_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402a50_check_FP_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400800_xmalloc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400750_rtclock_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #2 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() local_unnamed_addr #3 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exit(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @calloc(i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @posix_memalign(i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @free(i64) #5

; Function Attrs: noinline
define %struct.Memory* @sub_4005e0__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4005e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4006a0_polybench_flush_cache(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4006a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  store i64 8, i64* %RAX, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %38 = add i64 %6, -12
  %39 = add i64 %9, 21
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %38 to i32*
  store i32 4194560, i32* %40, align 4
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -4
  %43 = load i64, i64* %PC, align 8
  %44 = add i64 %43, 4
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %42 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = sext i32 %46 to i64
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %43, -326
  %49 = add i64 %43, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call fastcc %struct.Memory* @ext_6040b8_calloc(%struct.State* nonnull %0, %struct.Memory* %2)
  %54 = bitcast %union.VectorReg* %3 to i8*
  %55 = load i64, i64* %PC, align 8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %57 = bitcast %union.VectorReg* %3 to i32*
  store i32 0, i32* %57, align 1, !tbaa !2451
  %58 = getelementptr inbounds i8, i8* %54, i64 4
  %59 = bitcast i8* %58 to i32*
  store i32 0, i32* %59, align 1, !tbaa !2451
  %60 = bitcast i64* %56 to i32*
  store i32 0, i32* %60, align 1, !tbaa !2451
  %61 = getelementptr inbounds i8, i8* %54, i64 12
  %62 = bitcast i8* %61 to i32*
  store i32 0, i32* %62, align 1, !tbaa !2451
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -16
  %65 = load i64, i64* %RAX, align 8
  %66 = add i64 %55, 7
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %64 to i64*
  store i64 %65, i64* %67, align 8
  %68 = load i64, i64* %RBP, align 8
  %69 = add i64 %68, -32
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC, align 8
  %72 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %73 = load i64, i64* %72, align 1
  %74 = inttoptr i64 %69 to i64*
  store i64 %73, i64* %74, align 8
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -20
  %77 = load i64, i64* %PC, align 8
  %78 = add i64 %77, 7
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %76 to i32*
  store i32 0, i32* %79, align 4
  %80 = bitcast %union.VectorReg* %3 to double*
  %81 = bitcast i64* %56 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_4006d2

block_4006de:                                     ; preds = %block_4006d2
  %82 = add i64 %203, 8
  store i64 %82, i64* %PC, align 8
  %83 = load i32, i32* %170, align 4
  %84 = sext i32 %83 to i64
  store i64 %84, i64* %RCX, align 8, !tbaa !2428
  %85 = shl nsw i64 %84, 3
  %86 = add i64 %85, %207
  %87 = add i64 %203, 13
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %86 to double*
  %89 = load double, double* %88, align 8
  store double %89, double* %80, align 1, !tbaa !2452
  store double 0.000000e+00, double* %81, align 1, !tbaa !2452
  %90 = add i64 %167, -32
  %91 = add i64 %203, 18
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %90 to double*
  %93 = load double, double* %92, align 8
  %94 = fadd double %89, %93
  store double %94, double* %80, align 1, !tbaa !2452
  store i64 0, i64* %56, align 1, !tbaa !2452
  %95 = add i64 %203, 23
  store i64 %95, i64* %PC, align 8
  store double %94, double* %92, align 8
  %96 = load i64, i64* %RBP, align 8
  %97 = add i64 %96, -20
  %98 = load i64, i64* %PC, align 8
  %99 = add i64 %98, 3
  store i64 %99, i64* %PC, align 8
  %100 = inttoptr i64 %97 to i32*
  %101 = load i32, i32* %100, align 4
  %102 = add i32 %101, 1
  %103 = zext i32 %102 to i64
  store i64 %103, i64* %RAX, align 8, !tbaa !2428
  %104 = icmp eq i32 %101, -1
  %105 = icmp eq i32 %102, 0
  %106 = or i1 %104, %105
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %13, align 1, !tbaa !2432
  %108 = and i32 %102, 255
  %109 = tail call i32 @llvm.ctpop.i32(i32 %108) #8
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %20, align 1, !tbaa !2446
  %113 = xor i32 %101, %102
  %114 = lshr i32 %113, 4
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  store i8 %116, i8* %25, align 1, !tbaa !2447
  %117 = zext i1 %105 to i8
  store i8 %117, i8* %28, align 1, !tbaa !2448
  %118 = lshr i32 %102, 31
  %119 = trunc i32 %118 to i8
  store i8 %119, i8* %31, align 1, !tbaa !2449
  %120 = lshr i32 %101, 31
  %121 = xor i32 %118, %120
  %122 = add nuw nsw i32 %121, %118
  %123 = icmp eq i32 %122, 2
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %37, align 1, !tbaa !2450
  %125 = add i64 %98, 9
  store i64 %125, i64* %PC, align 8
  store i32 %102, i32* %100, align 4
  %126 = load i64, i64* %PC, align 8
  %127 = add i64 %126, -44
  store i64 %127, i64* %PC, align 8, !tbaa !2428
  br label %block_4006d2

block_400703:                                     ; preds = %block_4006d2
  store i64 %207, i64* %RDI, align 8, !tbaa !2428
  %128 = add i64 %203, -435
  %129 = add i64 %203, 12
  %130 = load i64, i64* %RSP, align 8, !tbaa !2428
  %131 = add i64 %130, -8
  %132 = inttoptr i64 %131 to i64*
  store i64 %129, i64* %132, align 8
  store i64 %131, i64* %RSP, align 8, !tbaa !2428
  store i64 %128, i64* %PC, align 8, !tbaa !2428
  %133 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %53)
  %134 = load i64, i64* %RSP, align 8
  %135 = load i64, i64* %PC, align 8
  %136 = add i64 %134, 32
  store i64 %136, i64* %RSP, align 8, !tbaa !2428
  %137 = icmp ugt i64 %134, -33
  %138 = zext i1 %137 to i8
  store i8 %138, i8* %13, align 1, !tbaa !2432
  %139 = trunc i64 %136 to i32
  %140 = and i32 %139, 255
  %141 = tail call i32 @llvm.ctpop.i32(i32 %140) #8
  %142 = trunc i32 %141 to i8
  %143 = and i8 %142, 1
  %144 = xor i8 %143, 1
  store i8 %144, i8* %20, align 1, !tbaa !2446
  %145 = xor i64 %134, %136
  %146 = lshr i64 %145, 4
  %147 = trunc i64 %146 to i8
  %148 = and i8 %147, 1
  store i8 %148, i8* %25, align 1, !tbaa !2447
  %149 = icmp eq i64 %136, 0
  %150 = zext i1 %149 to i8
  store i8 %150, i8* %28, align 1, !tbaa !2448
  %151 = lshr i64 %136, 63
  %152 = trunc i64 %151 to i8
  store i8 %152, i8* %31, align 1, !tbaa !2449
  %153 = lshr i64 %134, 63
  %154 = xor i64 %151, %153
  %155 = add nuw nsw i64 %154, %151
  %156 = icmp eq i64 %155, 2
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %37, align 1, !tbaa !2450
  %158 = add i64 %135, 5
  store i64 %158, i64* %PC, align 8
  %159 = add i64 %134, 40
  %160 = inttoptr i64 %136 to i64*
  %161 = load i64, i64* %160, align 8
  store i64 %161, i64* %RBP, align 8, !tbaa !2428
  store i64 %159, i64* %RSP, align 8, !tbaa !2428
  %162 = add i64 %135, 6
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %159 to i64*
  %164 = load i64, i64* %163, align 8
  store i64 %164, i64* %PC, align 8, !tbaa !2428
  %165 = add i64 %134, 48
  store i64 %165, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %133

block_4006d2:                                     ; preds = %block_4006de, %block_4006a0
  %166 = phi i64 [ %127, %block_4006de ], [ %.pre, %block_4006a0 ]
  %167 = load i64, i64* %RBP, align 8
  %168 = add i64 %167, -20
  %169 = add i64 %166, 3
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %168 to i32*
  %171 = load i32, i32* %170, align 4
  %172 = zext i32 %171 to i64
  store i64 %172, i64* %RAX, align 8, !tbaa !2428
  %173 = add i64 %167, -4
  %174 = add i64 %166, 6
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %173 to i32*
  %176 = load i32, i32* %175, align 4
  %177 = sub i32 %171, %176
  %178 = icmp ult i32 %171, %176
  %179 = zext i1 %178 to i8
  store i8 %179, i8* %13, align 1, !tbaa !2432
  %180 = and i32 %177, 255
  %181 = tail call i32 @llvm.ctpop.i32(i32 %180) #8
  %182 = trunc i32 %181 to i8
  %183 = and i8 %182, 1
  %184 = xor i8 %183, 1
  store i8 %184, i8* %20, align 1, !tbaa !2446
  %185 = xor i32 %176, %171
  %186 = xor i32 %185, %177
  %187 = lshr i32 %186, 4
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  store i8 %189, i8* %25, align 1, !tbaa !2447
  %190 = icmp eq i32 %177, 0
  %191 = zext i1 %190 to i8
  store i8 %191, i8* %28, align 1, !tbaa !2448
  %192 = lshr i32 %177, 31
  %193 = trunc i32 %192 to i8
  store i8 %193, i8* %31, align 1, !tbaa !2449
  %194 = lshr i32 %171, 31
  %195 = lshr i32 %176, 31
  %196 = xor i32 %195, %194
  %197 = xor i32 %192, %194
  %198 = add nuw nsw i32 %197, %196
  %199 = icmp eq i32 %198, 2
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %37, align 1, !tbaa !2450
  %201 = icmp ne i8 %193, 0
  %202 = xor i1 %201, %199
  %.v = select i1 %202, i64 12, i64 49
  %203 = add i64 %166, %.v
  %204 = add i64 %167, -16
  %205 = add i64 %203, 4
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  %207 = load i64, i64* %206, align 8
  store i64 %207, i64* %RAX, align 8, !tbaa !2428
  br i1 %202, label %block_4006de, label %block_400703
}

; Function Attrs: noinline
define %struct.Memory* @sub_400660___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400660:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604060__bss_type* @seg_604060__bss to i64), i64 8) to i8*), align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4, align 1, !tbaa !2432
  %5 = zext i8 %3 to i32
  %6 = tail call i32 @llvm.ctpop.i32(i32 %5) #8
  %7 = trunc i32 %6 to i8
  %8 = and i8 %7, 1
  %9 = xor i8 %8, 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9, i8* %10, align 1, !tbaa !2446
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1, !tbaa !2447
  %12 = icmp eq i8 %3, 0
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13, i8* %14, align 1, !tbaa !2448
  %15 = lshr i8 %3, 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15, i8* %16, align 1, !tbaa !2449
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1, !tbaa !2450
  %.v = select i1 %12, i64 9, i64 32
  %18 = add i64 %.v, %1
  store i64 %18, i64* %PC, align 8, !tbaa !2428
  br i1 %12, label %block_400669, label %block_400680

block_400680:                                     ; preds = %block_400660
  %19 = add i64 %18, 2
  store i64 %19, i64* %PC, align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !2428
  %22 = inttoptr i64 %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %24 = add i64 %21, 8
  store i64 %24, i64* %20, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400669:                                     ; preds = %block_400660
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %18, 1
  store i64 %26, i64* %PC, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %25, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = add i64 %31, -122
  %33 = add i64 %31, 8
  %34 = add i64 %28, -16
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35, align 8
  store i64 %34, i64* %27, align 8, !tbaa !2428
  store i64 %32, i64* %PC, align 8, !tbaa !2428
  %36 = tail call %struct.Memory* @sub_4005f0_deregister_tm_clones_renamed_(%struct.State* nonnull %0, i64 %32, %struct.Memory* %2)
  %37 = load i64, i64* %PC, align 8
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604060__bss_type* @seg_604060__bss to i64), i64 8) to i8*), align 8
  %38 = add i64 %37, 8
  store i64 %38, i64* %PC, align 8
  %39 = load i64, i64* %27, align 8, !tbaa !2428
  %40 = add i64 %39, 8
  %41 = inttoptr i64 %39 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  store i64 %40, i64* %27, align 8, !tbaa !2428
  %43 = add i64 %37, 9
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %PC, align 8, !tbaa !2428
  %46 = add i64 %39, 16
  store i64 %46, i64* %27, align 8, !tbaa !2428
  ret %struct.Memory* %36
}

; Function Attrs: noinline
define %struct.Memory* @sub_400760_polybench_timer_stop(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400760:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, -17
  %11 = add i64 %9, 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %5, align 8, !tbaa !2428
  store i64 %10, i64* %PC, align 8, !tbaa !2428
  %14 = tail call %struct.Memory* @sub_400750_rtclock_renamed_(%struct.State* nonnull %0, i64 %10, %struct.Memory* %2)
  %15 = load i64, i64* %PC, align 8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %17 = load i64, i64* %16, align 1
  store i64 %17, i64* bitcast (%polybench_t_end_type* @polybench_t_end to i64*), align 8
  %18 = add i64 %15, 10
  store i64 %18, i64* %PC, align 8
  %19 = load i64, i64* %5, align 8, !tbaa !2428
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  store i64 %20, i64* %5, align 8, !tbaa !2428
  %23 = add i64 %15, 11
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %20 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %PC, align 8, !tbaa !2428
  %26 = add i64 %19, 16
  store i64 %26, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %14
}

; Function Attrs: noinline
define %struct.Memory* @sub_400730_polybench_timer_start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400730:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, -17
  %11 = add i64 %9, 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %5, align 8, !tbaa !2428
  store i64 %10, i64* %PC, align 8, !tbaa !2428
  %14 = tail call %struct.Memory* @sub_400720_polybench_prepare_instruments_renamed_(%struct.State* nonnull %0, i64 %10, %struct.Memory* %2)
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 23
  %17 = add i64 %15, 5
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, -8
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  store i64 %19, i64* %5, align 8, !tbaa !2428
  store i64 %16, i64* %PC, align 8, !tbaa !2428
  %21 = tail call %struct.Memory* @sub_400750_rtclock_renamed_(%struct.State* nonnull %0, i64 %16, %struct.Memory* %14)
  %22 = load i64, i64* %PC, align 8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %24 = load i64, i64* %23, align 1
  store i64 %24, i64* bitcast (%polybench_t_start_type* @polybench_t_start to i64*), align 8
  %25 = add i64 %22, 10
  store i64 %25, i64* %PC, align 8
  %26 = load i64, i64* %5, align 8, !tbaa !2428
  %27 = add i64 %26, 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  store i64 %27, i64* %5, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %27 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %PC, align 8, !tbaa !2428
  %33 = add i64 %26, 16
  store i64 %33, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %21
}

; Function Attrs: noinline
define %struct.Memory* @sub_400620_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400620:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 6307928, i64* %RSI, align 8, !tbaa !2428
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 6
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %RSI, align 8
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %9, -6307928
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %18 = ashr i64 %11, 3
  %19 = lshr i64 %18, 63
  store i64 %19, i64* %RAX, align 8, !tbaa !2428
  %20 = add nsw i64 %19, %18
  %21 = trunc i64 %20 to i8
  %22 = and i8 %21, 1
  %23 = ashr i64 %20, 1
  store i64 %23, i64* %RSI, align 8, !tbaa !2428
  store i8 %22, i8* %12, align 1, !tbaa !2454
  %24 = trunc i64 %23 to i32
  %25 = and i32 %24, 255
  %26 = tail call i32 @llvm.ctpop.i32(i32 %25) #8
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  store i8 %29, i8* %13, align 1, !tbaa !2454
  store i8 0, i8* %14, align 1, !tbaa !2454
  %30 = icmp eq i64 %23, 0
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %15, align 1, !tbaa !2454
  %32 = lshr i64 %23, 63
  %33 = trunc i64 %32 to i8
  store i8 %33, i8* %16, align 1, !tbaa !2454
  store i8 0, i8* %17, align 1, !tbaa !2454
  %.v = select i1 %30, i64 50, i64 29
  %34 = add i64 %10, %.v
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  br i1 %30, label %block_400658, label %block_400643

block_400658:                                     ; preds = %block_400643, %block_400620
  %35 = phi i64 [ %42, %block_400643 ], [ %34, %block_400620 ]
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %8, align 8
  store i64 %37, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %38 = add i64 %35, 2
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %6 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %PC, align 8, !tbaa !2428
  %41 = add i64 %7, 16
  store i64 %41, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400643:                                     ; preds = %block_400620
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %42 = add i64 %34, 21
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  br label %block_400658
}

; Function Attrs: noinline
define %struct.Memory* @sub_400750_rtclock(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400750:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  store i64 %8, i64* %6, align 8, !tbaa !2428
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = bitcast %union.VectorReg* %3 to i8*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %13 = bitcast %union.VectorReg* %3 to i32*
  store i32 0, i32* %13, align 1, !tbaa !2451
  %14 = getelementptr inbounds i8, i8* %11, i64 4
  %15 = bitcast i8* %14 to i32*
  store i32 0, i32* %15, align 1, !tbaa !2451
  %16 = bitcast i64* %12 to i32*
  store i32 0, i32* %16, align 1, !tbaa !2451
  %17 = getelementptr inbounds i8, i8* %11, i64 12
  %18 = bitcast i8* %17 to i32*
  store i32 0, i32* %18, align 1, !tbaa !2451
  %19 = add i64 %10, 7
  store i64 %19, i64* %PC, align 8
  %20 = load i64, i64* %9, align 8
  store i64 %20, i64* %RBP, align 8, !tbaa !2428
  store i64 %7, i64* %6, align 8, !tbaa !2428
  %21 = add i64 %10, 8
  store i64 %21, i64* %PC, align 8
  %22 = inttoptr i64 %7 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %24 = add i64 %7, 8
  store i64 %24, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402e00___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402e00:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13D = bitcast %union.anon* %4 to i32*
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = load i64, i64* %R15, align 8
  %6 = add i64 %1, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %R14, align 8
  %11 = load i64, i64* %PC, align 8
  %12 = add i64 %11, 2
  store i64 %12, i64* %PC, align 8
  %13 = add i64 %7, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %RDX, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %15, i64* %R15, align 8, !tbaa !2428
  %17 = load i64, i64* %R13, align 8
  %18 = add i64 %16, 5
  store i64 %18, i64* %PC, align 8
  %19 = add i64 %7, -24
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %R12, align 8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 2
  store i64 %23, i64* %PC, align 8
  %24 = add i64 %7, -32
  %25 = inttoptr i64 %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %26, 8
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %7, -40
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RBX, align 8
  %33 = add i64 %31, 8
  store i64 %33, i64* %PC, align 8
  %34 = add i64 %7, -48
  %35 = inttoptr i64 %34 to i64*
  store i64 %32, i64* %35, align 8
  %36 = load i32, i32* %EDI, align 4
  %37 = zext i32 %36 to i64
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %R13, align 8, !tbaa !2428
  %39 = load i64, i64* %RSI, align 8
  store i64 %39, i64* %R14, align 8, !tbaa !2428
  %40 = load i64, i64* %RBP, align 8
  %41 = load i64, i64* %R12, align 8
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %49 = lshr i64 %42, 2
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = ashr i64 %42, 3
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i8 %51, i8* %43, align 1, !tbaa !2454
  %53 = trunc i64 %52 to i32
  %54 = and i32 %53, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #8
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  store i8 %58, i8* %44, align 1, !tbaa !2454
  store i8 0, i8* %45, align 1, !tbaa !2454
  %59 = icmp eq i64 %52, 0
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %46, align 1, !tbaa !2454
  %61 = lshr i64 %52, 63
  %62 = trunc i64 %61 to i8
  store i8 %62, i8* %47, align 1, !tbaa !2454
  store i8 0, i8* %48, align 1, !tbaa !2454
  %63 = add i64 %38, -10491
  %64 = add i64 %38, 22
  %65 = add i64 %7, -64
  %66 = inttoptr i64 %65 to i64*
  store i64 %64, i64* %66, align 8
  store i64 %65, i64* %RSP, align 8, !tbaa !2428
  store i64 %63, i64* %PC, align 8, !tbaa !2428
  %67 = tail call %struct.Memory* @sub_400520__init_proc_renamed_(%struct.State* nonnull %0, i64 %63, %struct.Memory* %2)
  %68 = load i64, i64* %RBP, align 8
  %69 = load i64, i64* %PC, align 8
  store i8 0, i8* %43, align 1, !tbaa !2432
  %70 = trunc i64 %68 to i32
  %71 = and i32 %70, 255
  %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #8
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  store i8 %75, i8* %44, align 1, !tbaa !2446
  %76 = icmp eq i64 %68, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %46, align 1, !tbaa !2448
  %78 = lshr i64 %68, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  store i8 0, i8* %45, align 1, !tbaa !2447
  %.v = select i1 %76, i64 37, i64 5
  %80 = add i64 %69, %.v
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  br i1 %76, label %block_402e56, label %block_402e36

block_402e56:                                     ; preds = %block_402e40, %block_402e00
  %81 = phi i64 [ %80, %block_402e00 ], [ %179, %block_402e40 ]
  %MEMORY.0 = phi %struct.Memory* [ %67, %block_402e00 ], [ %149, %block_402e40 ]
  %82 = load i64, i64* %RSP, align 8
  %83 = add i64 %82, 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  %84 = icmp ugt i64 %82, -9
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %43, align 1, !tbaa !2432
  %86 = trunc i64 %83 to i32
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #8
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %44, align 1, !tbaa !2446
  %92 = xor i64 %82, %83
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %45, align 1, !tbaa !2447
  %96 = icmp eq i64 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %46, align 1, !tbaa !2448
  %98 = lshr i64 %83, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %47, align 1, !tbaa !2449
  %100 = lshr i64 %82, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %48, align 1, !tbaa !2450
  %105 = add i64 %81, 5
  store i64 %105, i64* %PC, align 8
  %106 = add i64 %82, 16
  %107 = inttoptr i64 %83 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RBX, align 8, !tbaa !2428
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %109 = add i64 %81, 6
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %82, 24
  %111 = inttoptr i64 %106 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %81, 8
  store i64 %113, i64* %PC, align 8
  %114 = add i64 %82, 32
  %115 = inttoptr i64 %110 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %R12, align 8, !tbaa !2428
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %117 = add i64 %81, 10
  store i64 %117, i64* %PC, align 8
  %118 = add i64 %82, 40
  %119 = inttoptr i64 %114 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %R13, align 8, !tbaa !2428
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %81, 12
  store i64 %121, i64* %PC, align 8
  %122 = add i64 %82, 48
  %123 = inttoptr i64 %118 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %R14, align 8, !tbaa !2428
  store i64 %122, i64* %RSP, align 8, !tbaa !2428
  %125 = add i64 %81, 14
  store i64 %125, i64* %PC, align 8
  %126 = add i64 %82, 56
  %127 = inttoptr i64 %122 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %R15, align 8, !tbaa !2428
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %129 = add i64 %81, 15
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %126 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %132 = add i64 %82, 64
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402e36:                                     ; preds = %block_402e00
  store i64 0, i64* %RBX, align 8, !tbaa !2428
  store i8 0, i8* %43, align 1, !tbaa !2432
  store i8 1, i8* %44, align 1, !tbaa !2446
  store i8 1, i8* %46, align 1, !tbaa !2448
  store i8 0, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  store i8 0, i8* %45, align 1, !tbaa !2447
  %133 = add i64 %80, 10
  store i64 %133, i64* %PC, align 8
  br label %block_402e40

block_402e40:                                     ; preds = %block_402e40, %block_402e36
  %134 = phi i64 [ 0, %block_402e36 ], [ %152, %block_402e40 ]
  %135 = phi i64 [ %133, %block_402e36 ], [ %179, %block_402e40 ]
  %MEMORY.1 = phi %struct.Memory* [ %67, %block_402e36 ], [ %149, %block_402e40 ]
  %136 = load i64, i64* %R15, align 8
  store i64 %136, i64* %RDX, align 8, !tbaa !2428
  %137 = load i64, i64* %R14, align 8
  store i64 %137, i64* %RSI, align 8, !tbaa !2428
  %138 = load i32, i32* %R13D, align 4
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RDI, align 8, !tbaa !2428
  %140 = load i64, i64* %R12, align 8
  %141 = shl i64 %134, 3
  %142 = add i64 %141, %140
  %143 = add i64 %135, 13
  store i64 %143, i64* %PC, align 8
  %144 = load i64, i64* %RSP, align 8, !tbaa !2428
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %143, i64* %146, align 8
  store i64 %145, i64* %RSP, align 8, !tbaa !2428
  %147 = inttoptr i64 %142 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %149 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %148, %struct.Memory* %MEMORY.1)
  %150 = load i64, i64* %RBX, align 8
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %150, 1
  store i64 %152, i64* %RBX, align 8, !tbaa !2428
  %153 = lshr i64 %152, 63
  %154 = load i64, i64* %RBP, align 8
  %155 = sub i64 %154, %152
  %156 = icmp ult i64 %154, %152
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %43, align 1, !tbaa !2432
  %158 = trunc i64 %155 to i32
  %159 = and i32 %158, 255
  %160 = tail call i32 @llvm.ctpop.i32(i32 %159) #8
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = xor i8 %162, 1
  store i8 %163, i8* %44, align 1, !tbaa !2446
  %164 = xor i64 %152, %154
  %165 = xor i64 %164, %155
  %166 = lshr i64 %165, 4
  %167 = trunc i64 %166 to i8
  %168 = and i8 %167, 1
  store i8 %168, i8* %45, align 1, !tbaa !2447
  %169 = icmp eq i64 %155, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %46, align 1, !tbaa !2448
  %171 = lshr i64 %155, 63
  %172 = trunc i64 %171 to i8
  store i8 %172, i8* %47, align 1, !tbaa !2449
  %173 = lshr i64 %154, 63
  %174 = xor i64 %153, %173
  %175 = xor i64 %171, %173
  %176 = add nuw nsw i64 %175, %174
  %177 = icmp eq i64 %176, 2
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %48, align 1, !tbaa !2450
  %.v1 = select i1 %169, i64 9, i64 -13
  %179 = add i64 %151, %.v1
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  br i1 %169, label %block_402e56, label %block_402e40
}

; Function Attrs: noinline
define %struct.Memory* @sub_402a50_check_FP(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402a50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %8 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %11 = load i64, i64* %RBP, align 8
  %12 = add i64 %1, 1
  store i64 %12, i64* %PC, align 8
  %13 = load i64, i64* %RSP, align 8, !tbaa !2428
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %11, i64* %15, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %14, i64* %RBP, align 8, !tbaa !2428
  %17 = add i64 %13, -120
  store i64 %17, i64* %RSP, align 8, !tbaa !2428
  %18 = icmp ult i64 %14, 112
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1, !tbaa !2432
  %21 = trunc i64 %17 to i32
  %22 = and i32 %21, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) #8
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1, !tbaa !2446
  %28 = xor i64 %14, 16
  %29 = xor i64 %28, %17
  %30 = lshr i64 %29, 4
  %31 = trunc i64 %30 to i8
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %32, i8* %33, align 1, !tbaa !2447
  %34 = icmp eq i64 %17, 0
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %35, i8* %36, align 1, !tbaa !2448
  %37 = lshr i64 %17, 63
  %38 = trunc i64 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %38, i8* %39, align 1, !tbaa !2449
  %40 = lshr i64 %14, 63
  %41 = xor i64 %37, %40
  %42 = add nuw nsw i64 %41, %40
  %43 = icmp eq i64 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1, !tbaa !2450
  %46 = bitcast [32 x %union.VectorReg]* %9 to i8*
  %47 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 88) to i64*), align 8
  %48 = bitcast [32 x %union.VectorReg]* %9 to double*
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %9, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %47, i64* %49, align 1, !tbaa !2452
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %51 = bitcast i64* %50 to double*
  store double 0.000000e+00, double* %51, align 1, !tbaa !2452
  %52 = add i64 %13, -16
  %53 = load i32, i32* %EDI, align 4
  %54 = add i64 %16, 18
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %52 to i32*
  store i32 %53, i32* %55, align 4
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -12
  %58 = load i32, i32* %ESI, align 4
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %57 to i32*
  store i32 %58, i32* %61, align 4
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -16
  %64 = load i32, i32* %EDX, align 4
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %65, 3
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %63 to i32*
  store i32 %64, i32* %67, align 4
  %68 = load i64, i64* %RBP, align 8
  %69 = add i64 %68, -24
  %70 = load i64, i64* %RCX, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 4
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %69 to i64*
  store i64 %70, i64* %73, align 8
  %74 = load i64, i64* %RBP, align 8
  %75 = add i64 %74, -32
  %76 = load i64, i64* %R8, align 8
  %77 = load i64, i64* %PC, align 8
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %75 to i64*
  store i64 %76, i64* %79, align 8
  %80 = load i64, i64* %RBP, align 8
  %81 = add i64 %80, -56
  %82 = load i64, i64* %PC, align 8
  %83 = add i64 %82, 5
  store i64 %83, i64* %PC, align 8
  %84 = load i64, i64* %49, align 1
  %85 = inttoptr i64 %81 to i64*
  store i64 %84, i64* %85, align 8
  %86 = load i64, i64* %RBP, align 8
  %87 = add i64 %86, -36
  %88 = load i64, i64* %PC, align 8
  %89 = add i64 %88, 7
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %87 to i32*
  store i32 0, i32* %90, align 4
  %91 = bitcast %union.VectorReg* %10 to i8*
  %92 = getelementptr inbounds i8, i8* %91, i64 4
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %94 = getelementptr inbounds i8, i8* %91, i64 12
  %95 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %10, i64 0, i32 0, i32 0, i32 0, i64 0
  %96 = bitcast [32 x %union.VectorReg]* %9 to i32*
  %97 = getelementptr inbounds i8, i8* %46, i64 4
  %98 = bitcast i8* %97 to i32*
  %99 = bitcast i64* %50 to i32*
  %100 = getelementptr inbounds i8, i8* %46, i64 12
  %101 = bitcast i8* %100 to i32*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402a7d

block_402bbe:                                     ; preds = %block_402a95
  %102 = add i64 %551, -36
  %103 = add i64 %589, 8
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %102 to i32*
  %105 = load i32, i32* %104, align 4
  %106 = add i32 %105, 1
  %107 = zext i32 %106 to i64
  store i64 %107, i64* %RAX, align 8, !tbaa !2428
  %108 = icmp eq i32 %105, -1
  %109 = icmp eq i32 %106, 0
  %110 = or i1 %108, %109
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %20, align 1, !tbaa !2432
  %112 = and i32 %106, 255
  %113 = tail call i32 @llvm.ctpop.i32(i32 %112) #8
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  store i8 %116, i8* %27, align 1, !tbaa !2446
  %117 = xor i32 %105, %106
  %118 = lshr i32 %117, 4
  %119 = trunc i32 %118 to i8
  %120 = and i8 %119, 1
  store i8 %120, i8* %33, align 1, !tbaa !2447
  %121 = zext i1 %109 to i8
  store i8 %121, i8* %36, align 1, !tbaa !2448
  %122 = lshr i32 %106, 31
  %123 = trunc i32 %122 to i8
  store i8 %123, i8* %39, align 1, !tbaa !2449
  %124 = lshr i32 %105, 31
  %125 = xor i32 %122, %124
  %126 = add nuw nsw i32 %125, %122
  %127 = icmp eq i32 %126, 2
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %45, align 1, !tbaa !2450
  %129 = add i64 %589, 14
  store i64 %129, i64* %PC, align 8
  store i32 %106, i32* %104, align 4
  %130 = load i64, i64* %PC, align 8
  %131 = add i64 %130, -335
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  br label %block_402a7d

block_402b98:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %132 = load i64, i64* %RBP, align 8
  %133 = add i64 %132, -44
  %134 = add i64 %440, 8
  store i64 %134, i64* %PC, align 8
  %135 = inttoptr i64 %133 to i32*
  %136 = load i32, i32* %135, align 4
  %137 = add i32 %136, 1
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RAX, align 8, !tbaa !2428
  %139 = icmp eq i32 %136, -1
  %140 = icmp eq i32 %137, 0
  %141 = or i1 %139, %140
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %20, align 1, !tbaa !2432
  %143 = and i32 %137, 255
  %144 = tail call i32 @llvm.ctpop.i32(i32 %143) #8
  %145 = trunc i32 %144 to i8
  %146 = and i8 %145, 1
  %147 = xor i8 %146, 1
  store i8 %147, i8* %27, align 1, !tbaa !2446
  %148 = xor i32 %136, %137
  %149 = lshr i32 %148, 4
  %150 = trunc i32 %149 to i8
  %151 = and i8 %150, 1
  store i8 %151, i8* %33, align 1, !tbaa !2447
  %152 = zext i1 %140 to i8
  store i8 %152, i8* %36, align 1, !tbaa !2448
  %153 = lshr i32 %137, 31
  %154 = trunc i32 %153 to i8
  store i8 %154, i8* %39, align 1, !tbaa !2449
  %155 = lshr i32 %136, 31
  %156 = xor i32 %153, %155
  %157 = add nuw nsw i32 %156, %153
  %158 = icmp eq i32 %157, 2
  %159 = zext i1 %158 to i8
  store i8 %159, i8* %45, align 1, !tbaa !2450
  %160 = add i64 %440, 14
  store i64 %160, i64* %PC, align 8
  store i32 %137, i32* %135, align 4
  %161 = load i64, i64* %PC, align 8
  %162 = add i64 %161, -249
  store i64 %162, i64* %PC, align 8, !tbaa !2428
  br label %block_402aad

block_402bd1:                                     ; preds = %block_402a7d
  %163 = add i64 %167, -4
  %164 = add i64 %205, 7
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %163 to i32*
  store i32 1, i32* %165, align 4
  %.pre10 = load i64, i64* %PC, align 8
  br label %block_402bd8

block_402a7d:                                     ; preds = %block_402bbe, %block_402a50
  %166 = phi i64 [ %.pre, %block_402a50 ], [ %131, %block_402bbe ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402a50 ], [ %MEMORY.3, %block_402bbe ]
  %167 = load i64, i64* %RBP, align 8
  %168 = add i64 %167, -36
  %169 = add i64 %166, 3
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %168 to i32*
  %171 = load i32, i32* %170, align 4
  %172 = zext i32 %171 to i64
  store i64 %172, i64* %RAX, align 8, !tbaa !2428
  %173 = add i64 %167, -8
  %174 = add i64 %166, 6
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %173 to i32*
  %176 = load i32, i32* %175, align 4
  %177 = add i32 %176, 1
  %178 = zext i32 %177 to i64
  store i64 %178, i64* %RCX, align 8, !tbaa !2428
  %179 = lshr i32 %177, 31
  %180 = sub i32 %171, %177
  %181 = icmp ult i32 %171, %177
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %20, align 1, !tbaa !2432
  %183 = and i32 %180, 255
  %184 = tail call i32 @llvm.ctpop.i32(i32 %183) #8
  %185 = trunc i32 %184 to i8
  %186 = and i8 %185, 1
  %187 = xor i8 %186, 1
  store i8 %187, i8* %27, align 1, !tbaa !2446
  %188 = xor i32 %177, %171
  %189 = xor i32 %188, %180
  %190 = lshr i32 %189, 4
  %191 = trunc i32 %190 to i8
  %192 = and i8 %191, 1
  store i8 %192, i8* %33, align 1, !tbaa !2447
  %193 = icmp eq i32 %180, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %36, align 1, !tbaa !2448
  %195 = lshr i32 %180, 31
  %196 = trunc i32 %195 to i8
  store i8 %196, i8* %39, align 1, !tbaa !2449
  %197 = lshr i32 %171, 31
  %198 = xor i32 %179, %197
  %199 = xor i32 %195, %197
  %200 = add nuw nsw i32 %199, %198
  %201 = icmp eq i32 %200, 2
  %202 = zext i1 %201 to i8
  store i8 %202, i8* %45, align 1, !tbaa !2450
  %203 = icmp ne i8 %196, 0
  %204 = xor i1 %203, %201
  %.v = select i1 %204, i64 17, i64 340
  %205 = add i64 %166, %.v
  store i64 %205, i64* %PC, align 8, !tbaa !2428
  br i1 %204, label %block_402a8e, label %block_402bd1

block_402a8e:                                     ; preds = %block_402a7d
  %206 = add i64 %167, -40
  %207 = add i64 %205, 7
  store i64 %207, i64* %PC, align 8
  %208 = inttoptr i64 %206 to i32*
  store i32 0, i32* %208, align 4
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_402a95

block_402abe:                                     ; preds = %block_402aad
  %209 = add i64 %442, -24
  %210 = add i64 %480, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %209 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RAX, align 8, !tbaa !2428
  %213 = add i64 %442, -36
  %214 = add i64 %480, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i32*
  %216 = load i32, i32* %215, align 4
  %217 = sext i32 %216 to i64
  %218 = mul nsw i64 %217, 33800
  store i64 %218, i64* %RCX, align 8, !tbaa !2428
  %219 = lshr i64 %218, 63
  %220 = add i64 %218, %212
  store i64 %220, i64* %RAX, align 8, !tbaa !2428
  %221 = icmp ult i64 %220, %212
  %222 = icmp ult i64 %220, %218
  %223 = or i1 %221, %222
  %224 = zext i1 %223 to i8
  store i8 %224, i8* %20, align 1, !tbaa !2432
  %225 = trunc i64 %220 to i32
  %226 = and i32 %225, 255
  %227 = tail call i32 @llvm.ctpop.i32(i32 %226) #8
  %228 = trunc i32 %227 to i8
  %229 = and i8 %228, 1
  %230 = xor i8 %229, 1
  store i8 %230, i8* %27, align 1, !tbaa !2446
  %231 = xor i64 %218, %212
  %232 = xor i64 %231, %220
  %233 = lshr i64 %232, 4
  %234 = trunc i64 %233 to i8
  %235 = and i8 %234, 1
  store i8 %235, i8* %33, align 1, !tbaa !2447
  %236 = icmp eq i64 %220, 0
  %237 = zext i1 %236 to i8
  store i8 %237, i8* %36, align 1, !tbaa !2448
  %238 = lshr i64 %220, 63
  %239 = trunc i64 %238 to i8
  store i8 %239, i8* %39, align 1, !tbaa !2449
  %240 = lshr i64 %212, 63
  %241 = xor i64 %238, %240
  %242 = xor i64 %238, %219
  %243 = add nuw nsw i64 %241, %242
  %244 = icmp eq i64 %243, 2
  %245 = zext i1 %244 to i8
  store i8 %245, i8* %45, align 1, !tbaa !2450
  %246 = add i64 %442, -40
  %247 = add i64 %480, 22
  store i64 %247, i64* %PC, align 8
  %248 = inttoptr i64 %246 to i32*
  %249 = load i32, i32* %248, align 4
  %250 = sext i32 %249 to i64
  %251 = mul nsw i64 %250, 520
  store i64 %251, i64* %RCX, align 8, !tbaa !2428
  %252 = lshr i64 %251, 63
  %253 = add i64 %251, %220
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = icmp ult i64 %253, %220
  %255 = icmp ult i64 %253, %251
  %256 = or i1 %254, %255
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %20, align 1, !tbaa !2432
  %258 = trunc i64 %253 to i32
  %259 = and i32 %258, 255
  %260 = tail call i32 @llvm.ctpop.i32(i32 %259) #8
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  store i8 %263, i8* %27, align 1, !tbaa !2446
  %264 = xor i64 %251, %220
  %265 = xor i64 %264, %253
  %266 = lshr i64 %265, 4
  %267 = trunc i64 %266 to i8
  %268 = and i8 %267, 1
  store i8 %268, i8* %33, align 1, !tbaa !2447
  %269 = icmp eq i64 %253, 0
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %36, align 1, !tbaa !2448
  %271 = lshr i64 %253, 63
  %272 = trunc i64 %271 to i8
  store i8 %272, i8* %39, align 1, !tbaa !2449
  %273 = xor i64 %271, %238
  %274 = xor i64 %271, %252
  %275 = add nuw nsw i64 %273, %274
  %276 = icmp eq i64 %275, 2
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %45, align 1, !tbaa !2450
  %278 = add i64 %480, 36
  store i64 %278, i64* %PC, align 8
  %279 = load i32, i32* %445, align 4
  %280 = sext i32 %279 to i64
  store i64 %280, i64* %RCX, align 8, !tbaa !2428
  %281 = shl nsw i64 %280, 3
  %282 = add i64 %281, %253
  %283 = add i64 %480, 41
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %282 to i64*
  %285 = load i64, i64* %284, align 8
  store i64 %285, i64* %49, align 1, !tbaa !2452
  store double 0.000000e+00, double* %51, align 1, !tbaa !2452
  %286 = add i64 %442, -64
  %287 = add i64 %480, 46
  store i64 %287, i64* %PC, align 8
  %288 = inttoptr i64 %286 to i64*
  store i64 %285, i64* %288, align 8
  %289 = load i64, i64* %RBP, align 8
  %290 = add i64 %289, -32
  %291 = load i64, i64* %PC, align 8
  %292 = add i64 %291, 4
  store i64 %292, i64* %PC, align 8
  %293 = inttoptr i64 %290 to i64*
  %294 = load i64, i64* %293, align 8
  store i64 %294, i64* %RAX, align 8, !tbaa !2428
  %295 = add i64 %289, -36
  %296 = add i64 %291, 8
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %295 to i32*
  %298 = load i32, i32* %297, align 4
  %299 = sext i32 %298 to i64
  %300 = mul nsw i64 %299, 33800
  store i64 %300, i64* %RCX, align 8, !tbaa !2428
  %301 = lshr i64 %300, 63
  %302 = add i64 %300, %294
  store i64 %302, i64* %RAX, align 8, !tbaa !2428
  %303 = icmp ult i64 %302, %294
  %304 = icmp ult i64 %302, %300
  %305 = or i1 %303, %304
  %306 = zext i1 %305 to i8
  store i8 %306, i8* %20, align 1, !tbaa !2432
  %307 = trunc i64 %302 to i32
  %308 = and i32 %307, 255
  %309 = tail call i32 @llvm.ctpop.i32(i32 %308) #8
  %310 = trunc i32 %309 to i8
  %311 = and i8 %310, 1
  %312 = xor i8 %311, 1
  store i8 %312, i8* %27, align 1, !tbaa !2446
  %313 = xor i64 %300, %294
  %314 = xor i64 %313, %302
  %315 = lshr i64 %314, 4
  %316 = trunc i64 %315 to i8
  %317 = and i8 %316, 1
  store i8 %317, i8* %33, align 1, !tbaa !2447
  %318 = icmp eq i64 %302, 0
  %319 = zext i1 %318 to i8
  store i8 %319, i8* %36, align 1, !tbaa !2448
  %320 = lshr i64 %302, 63
  %321 = trunc i64 %320 to i8
  store i8 %321, i8* %39, align 1, !tbaa !2449
  %322 = lshr i64 %294, 63
  %323 = xor i64 %320, %322
  %324 = xor i64 %320, %301
  %325 = add nuw nsw i64 %323, %324
  %326 = icmp eq i64 %325, 2
  %327 = zext i1 %326 to i8
  store i8 %327, i8* %45, align 1, !tbaa !2450
  %328 = add i64 %289, -40
  %329 = add i64 %291, 22
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %328 to i32*
  %331 = load i32, i32* %330, align 4
  %332 = sext i32 %331 to i64
  %333 = mul nsw i64 %332, 520
  store i64 %333, i64* %RCX, align 8, !tbaa !2428
  %334 = lshr i64 %333, 63
  %335 = add i64 %333, %302
  store i64 %335, i64* %RAX, align 8, !tbaa !2428
  %336 = icmp ult i64 %335, %302
  %337 = icmp ult i64 %335, %333
  %338 = or i1 %336, %337
  %339 = zext i1 %338 to i8
  store i8 %339, i8* %20, align 1, !tbaa !2432
  %340 = trunc i64 %335 to i32
  %341 = and i32 %340, 255
  %342 = tail call i32 @llvm.ctpop.i32(i32 %341) #8
  %343 = trunc i32 %342 to i8
  %344 = and i8 %343, 1
  %345 = xor i8 %344, 1
  store i8 %345, i8* %27, align 1, !tbaa !2446
  %346 = xor i64 %333, %302
  %347 = xor i64 %346, %335
  %348 = lshr i64 %347, 4
  %349 = trunc i64 %348 to i8
  %350 = and i8 %349, 1
  store i8 %350, i8* %33, align 1, !tbaa !2447
  %351 = icmp eq i64 %335, 0
  %352 = zext i1 %351 to i8
  store i8 %352, i8* %36, align 1, !tbaa !2448
  %353 = lshr i64 %335, 63
  %354 = trunc i64 %353 to i8
  store i8 %354, i8* %39, align 1, !tbaa !2449
  %355 = xor i64 %353, %320
  %356 = xor i64 %353, %334
  %357 = add nuw nsw i64 %355, %356
  %358 = icmp eq i64 %357, 2
  %359 = zext i1 %358 to i8
  store i8 %359, i8* %45, align 1, !tbaa !2450
  %360 = add i64 %289, -44
  %361 = add i64 %291, 36
  store i64 %361, i64* %PC, align 8
  %362 = inttoptr i64 %360 to i32*
  %363 = load i32, i32* %362, align 4
  %364 = sext i32 %363 to i64
  store i64 %364, i64* %RCX, align 8, !tbaa !2428
  %365 = shl nsw i64 %364, 3
  %366 = add i64 %365, %335
  %367 = add i64 %291, 41
  store i64 %367, i64* %PC, align 8
  %368 = inttoptr i64 %366 to i64*
  %369 = load i64, i64* %368, align 8
  store i64 %369, i64* %49, align 1, !tbaa !2452
  store double 0.000000e+00, double* %51, align 1, !tbaa !2452
  %370 = add i64 %289, -72
  %371 = add i64 %291, 46
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %370 to i64*
  store i64 %369, i64* %372, align 8
  %373 = load i64, i64* %RBP, align 8
  %374 = add i64 %373, -64
  %375 = load i64, i64* %PC, align 8
  %376 = add i64 %375, 5
  store i64 %376, i64* %PC, align 8
  %377 = inttoptr i64 %374 to double*
  %378 = load double, double* %377, align 8
  store double %378, double* %48, align 1, !tbaa !2452
  store double 0.000000e+00, double* %51, align 1, !tbaa !2452
  %379 = add i64 %373, -72
  %380 = add i64 %375, 10
  store i64 %380, i64* %PC, align 8
  %381 = inttoptr i64 %379 to double*
  %382 = load double, double* %381, align 8
  %383 = fsub double %378, %382
  %384 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 96) to i32*), align 16
  %385 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 100) to i32*), align 4
  %386 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 104) to i32*), align 8
  %387 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 108) to i32*), align 4
  %388 = bitcast %union.VectorReg* %10 to i32*
  store i32 %384, i32* %388, align 1, !tbaa !2455
  %389 = bitcast i8* %92 to i32*
  store i32 %385, i32* %389, align 1, !tbaa !2455
  %390 = bitcast i64* %93 to i32*
  store i32 %386, i32* %390, align 1, !tbaa !2455
  %391 = bitcast i8* %94 to i32*
  store i32 %387, i32* %391, align 1, !tbaa !2455
  %392 = bitcast double %383 to i64
  %393 = load i64, i64* %95, align 1
  %394 = and i64 %393, %392
  %395 = trunc i64 %394 to i32
  %396 = lshr i64 %394, 32
  %397 = trunc i64 %396 to i32
  store i32 %395, i32* %96, align 1, !tbaa !2451
  store i32 %397, i32* %98, align 1, !tbaa !2451
  store i32 0, i32* %99, align 1, !tbaa !2451
  store i32 0, i32* %101, align 1, !tbaa !2451
  %398 = add i64 %373, -80
  %399 = add i64 %375, 26
  store i64 %399, i64* %PC, align 8
  %400 = load i64, i64* %49, align 1
  %401 = inttoptr i64 %398 to i64*
  store i64 %400, i64* %401, align 8
  %402 = load i64, i64* %RBP, align 8
  %403 = add i64 %402, -80
  %404 = load i64, i64* %PC, align 8
  %405 = add i64 %404, 5
  store i64 %405, i64* %PC, align 8
  %406 = inttoptr i64 %403 to double*
  %407 = load double, double* %406, align 8
  store double %407, double* %48, align 1, !tbaa !2452
  store double 0.000000e+00, double* %51, align 1, !tbaa !2452
  %408 = add i64 %402, -56
  %409 = add i64 %404, 10
  store i64 %409, i64* %PC, align 8
  %410 = inttoptr i64 %408 to double*
  %411 = load double, double* %410, align 8
  %412 = fcmp uno double %407, %411
  br i1 %412, label %413, label %423

; <label>:413:                                    ; preds = %block_402abe
  %414 = fadd double %407, %411
  %415 = bitcast double %414 to i64
  %416 = and i64 %415, 9221120237041090560
  %417 = icmp eq i64 %416, 9218868437227405312
  %418 = and i64 %415, 2251799813685247
  %419 = icmp ne i64 %418, 0
  %420 = and i1 %417, %419
  br i1 %420, label %421, label %429

; <label>:421:                                    ; preds = %413
  %422 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %409, %struct.Memory* %MEMORY.1) #9
  %.pre9 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:423:                                    ; preds = %block_402abe
  %424 = fcmp ogt double %407, %411
  br i1 %424, label %429, label %425

; <label>:425:                                    ; preds = %423
  %426 = fcmp olt double %407, %411
  br i1 %426, label %429, label %427

; <label>:427:                                    ; preds = %425
  %428 = fcmp oeq double %407, %411
  br i1 %428, label %429, label %433

; <label>:429:                                    ; preds = %427, %425, %423, %413
  %430 = phi i8 [ 0, %423 ], [ 0, %425 ], [ 1, %427 ], [ 1, %413 ]
  %431 = phi i8 [ 0, %423 ], [ 0, %425 ], [ 0, %427 ], [ 1, %413 ]
  %432 = phi i8 [ 0, %423 ], [ 1, %425 ], [ 0, %427 ], [ 1, %413 ]
  store i8 %430, i8* %36, align 1, !tbaa !2454
  store i8 %431, i8* %27, align 1, !tbaa !2454
  store i8 %432, i8* %20, align 1, !tbaa !2454
  br label %433

; <label>:433:                                    ; preds = %429, %427
  store i8 0, i8* %45, align 1, !tbaa !2454
  store i8 0, i8* %39, align 1, !tbaa !2454
  store i8 0, i8* %33, align 1, !tbaa !2454
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %433, %421
  %434 = phi i64 [ %.pre9, %421 ], [ %409, %433 ]
  %435 = phi %struct.Memory* [ %422, %421 ], [ %MEMORY.1, %433 ]
  %436 = load i8, i8* %20, align 1, !tbaa !2432
  %437 = load i8, i8* %36, align 1, !tbaa !2448
  %438 = or i8 %437, %436
  %439 = icmp ne i8 %438, 0
  %.v13 = select i1 %439, i64 90, i64 6
  %440 = add i64 %434, %.v13
  store i64 %440, i64* %PC, align 8, !tbaa !2428
  br i1 %439, label %block_402b98, label %block_402b44

block_402aad:                                     ; preds = %block_402aa6, %block_402b98
  %441 = phi i64 [ %.pre8, %block_402aa6 ], [ %162, %block_402b98 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_402aa6 ], [ %435, %block_402b98 ]
  %442 = load i64, i64* %RBP, align 8
  %443 = add i64 %442, -44
  %444 = add i64 %441, 3
  store i64 %444, i64* %PC, align 8
  %445 = inttoptr i64 %443 to i32*
  %446 = load i32, i32* %445, align 4
  %447 = zext i32 %446 to i64
  store i64 %447, i64* %RAX, align 8, !tbaa !2428
  %448 = add i64 %442, -12
  %449 = add i64 %441, 6
  store i64 %449, i64* %PC, align 8
  %450 = inttoptr i64 %448 to i32*
  %451 = load i32, i32* %450, align 4
  %452 = add i32 %451, 1
  %453 = zext i32 %452 to i64
  store i64 %453, i64* %RCX, align 8, !tbaa !2428
  %454 = lshr i32 %452, 31
  %455 = sub i32 %446, %452
  %456 = icmp ult i32 %446, %452
  %457 = zext i1 %456 to i8
  store i8 %457, i8* %20, align 1, !tbaa !2432
  %458 = and i32 %455, 255
  %459 = tail call i32 @llvm.ctpop.i32(i32 %458) #8
  %460 = trunc i32 %459 to i8
  %461 = and i8 %460, 1
  %462 = xor i8 %461, 1
  store i8 %462, i8* %27, align 1, !tbaa !2446
  %463 = xor i32 %452, %446
  %464 = xor i32 %463, %455
  %465 = lshr i32 %464, 4
  %466 = trunc i32 %465 to i8
  %467 = and i8 %466, 1
  store i8 %467, i8* %33, align 1, !tbaa !2447
  %468 = icmp eq i32 %455, 0
  %469 = zext i1 %468 to i8
  store i8 %469, i8* %36, align 1, !tbaa !2448
  %470 = lshr i32 %455, 31
  %471 = trunc i32 %470 to i8
  store i8 %471, i8* %39, align 1, !tbaa !2449
  %472 = lshr i32 %446, 31
  %473 = xor i32 %454, %472
  %474 = xor i32 %470, %472
  %475 = add nuw nsw i32 %474, %473
  %476 = icmp eq i32 %475, 2
  %477 = zext i1 %476 to i8
  store i8 %477, i8* %45, align 1, !tbaa !2450
  %478 = icmp ne i8 %471, 0
  %479 = xor i1 %478, %476
  %.v12 = select i1 %479, i64 17, i64 254
  %480 = add i64 %441, %.v12
  store i64 %480, i64* %PC, align 8, !tbaa !2428
  br i1 %479, label %block_402abe, label %block_402bab

block_402bab:                                     ; preds = %block_402aad
  %481 = add i64 %442, -40
  %482 = add i64 %480, 8
  store i64 %482, i64* %PC, align 8
  %483 = inttoptr i64 %481 to i32*
  %484 = load i32, i32* %483, align 4
  %485 = add i32 %484, 1
  %486 = zext i32 %485 to i64
  store i64 %486, i64* %RAX, align 8, !tbaa !2428
  %487 = icmp eq i32 %484, -1
  %488 = icmp eq i32 %485, 0
  %489 = or i1 %487, %488
  %490 = zext i1 %489 to i8
  store i8 %490, i8* %20, align 1, !tbaa !2432
  %491 = and i32 %485, 255
  %492 = tail call i32 @llvm.ctpop.i32(i32 %491) #8
  %493 = trunc i32 %492 to i8
  %494 = and i8 %493, 1
  %495 = xor i8 %494, 1
  store i8 %495, i8* %27, align 1, !tbaa !2446
  %496 = xor i32 %484, %485
  %497 = lshr i32 %496, 4
  %498 = trunc i32 %497 to i8
  %499 = and i8 %498, 1
  store i8 %499, i8* %33, align 1, !tbaa !2447
  %500 = zext i1 %488 to i8
  store i8 %500, i8* %36, align 1, !tbaa !2448
  %501 = lshr i32 %485, 31
  %502 = trunc i32 %501 to i8
  store i8 %502, i8* %39, align 1, !tbaa !2449
  %503 = lshr i32 %484, 31
  %504 = xor i32 %501, %503
  %505 = add nuw nsw i32 %504, %501
  %506 = icmp eq i32 %505, 2
  %507 = zext i1 %506 to i8
  store i8 %507, i8* %45, align 1, !tbaa !2450
  %508 = add i64 %480, 14
  store i64 %508, i64* %PC, align 8
  store i32 %485, i32* %483, align 4
  %509 = load i64, i64* %PC, align 8
  %510 = add i64 %509, -292
  store i64 %510, i64* %PC, align 8, !tbaa !2428
  br label %block_402a95

block_402bd8:                                     ; preds = %block_402b44, %block_402bd1
  %511 = phi i64 [ %.pre10, %block_402bd1 ], [ %665, %block_402b44 ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_402bd1 ], [ %652, %block_402b44 ]
  %512 = load i64, i64* %RBP, align 8
  %513 = add i64 %512, -4
  %514 = add i64 %511, 3
  store i64 %514, i64* %PC, align 8
  %515 = inttoptr i64 %513 to i32*
  %516 = load i32, i32* %515, align 4
  %517 = zext i32 %516 to i64
  store i64 %517, i64* %RAX, align 8, !tbaa !2428
  %518 = load i64, i64* %RSP, align 8
  %519 = add i64 %518, 112
  store i64 %519, i64* %RSP, align 8, !tbaa !2428
  %520 = icmp ugt i64 %518, -113
  %521 = zext i1 %520 to i8
  store i8 %521, i8* %20, align 1, !tbaa !2432
  %522 = trunc i64 %519 to i32
  %523 = and i32 %522, 255
  %524 = tail call i32 @llvm.ctpop.i32(i32 %523) #8
  %525 = trunc i32 %524 to i8
  %526 = and i8 %525, 1
  %527 = xor i8 %526, 1
  store i8 %527, i8* %27, align 1, !tbaa !2446
  %528 = xor i64 %518, 16
  %529 = xor i64 %528, %519
  %530 = lshr i64 %529, 4
  %531 = trunc i64 %530 to i8
  %532 = and i8 %531, 1
  store i8 %532, i8* %33, align 1, !tbaa !2447
  %533 = icmp eq i64 %519, 0
  %534 = zext i1 %533 to i8
  store i8 %534, i8* %36, align 1, !tbaa !2448
  %535 = lshr i64 %519, 63
  %536 = trunc i64 %535 to i8
  store i8 %536, i8* %39, align 1, !tbaa !2449
  %537 = lshr i64 %518, 63
  %538 = xor i64 %535, %537
  %539 = add nuw nsw i64 %538, %535
  %540 = icmp eq i64 %539, 2
  %541 = zext i1 %540 to i8
  store i8 %541, i8* %45, align 1, !tbaa !2450
  %542 = add i64 %511, 8
  store i64 %542, i64* %PC, align 8
  %543 = add i64 %518, 120
  %544 = inttoptr i64 %519 to i64*
  %545 = load i64, i64* %544, align 8
  store i64 %545, i64* %RBP, align 8, !tbaa !2428
  store i64 %543, i64* %RSP, align 8, !tbaa !2428
  %546 = add i64 %511, 9
  store i64 %546, i64* %PC, align 8
  %547 = inttoptr i64 %543 to i64*
  %548 = load i64, i64* %547, align 8
  store i64 %548, i64* %PC, align 8, !tbaa !2428
  %549 = add i64 %518, 128
  store i64 %549, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_402a95:                                     ; preds = %block_402bab, %block_402a8e
  %550 = phi i64 [ %.pre7, %block_402a8e ], [ %510, %block_402bab ]
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.0, %block_402a8e ], [ %MEMORY.1, %block_402bab ]
  %551 = load i64, i64* %RBP, align 8
  %552 = add i64 %551, -40
  %553 = add i64 %550, 3
  store i64 %553, i64* %PC, align 8
  %554 = inttoptr i64 %552 to i32*
  %555 = load i32, i32* %554, align 4
  %556 = zext i32 %555 to i64
  store i64 %556, i64* %RAX, align 8, !tbaa !2428
  %557 = add i64 %551, -16
  %558 = add i64 %550, 6
  store i64 %558, i64* %PC, align 8
  %559 = inttoptr i64 %557 to i32*
  %560 = load i32, i32* %559, align 4
  %561 = add i32 %560, 1
  %562 = zext i32 %561 to i64
  store i64 %562, i64* %RCX, align 8, !tbaa !2428
  %563 = lshr i32 %561, 31
  %564 = sub i32 %555, %561
  %565 = icmp ult i32 %555, %561
  %566 = zext i1 %565 to i8
  store i8 %566, i8* %20, align 1, !tbaa !2432
  %567 = and i32 %564, 255
  %568 = tail call i32 @llvm.ctpop.i32(i32 %567) #8
  %569 = trunc i32 %568 to i8
  %570 = and i8 %569, 1
  %571 = xor i8 %570, 1
  store i8 %571, i8* %27, align 1, !tbaa !2446
  %572 = xor i32 %561, %555
  %573 = xor i32 %572, %564
  %574 = lshr i32 %573, 4
  %575 = trunc i32 %574 to i8
  %576 = and i8 %575, 1
  store i8 %576, i8* %33, align 1, !tbaa !2447
  %577 = icmp eq i32 %564, 0
  %578 = zext i1 %577 to i8
  store i8 %578, i8* %36, align 1, !tbaa !2448
  %579 = lshr i32 %564, 31
  %580 = trunc i32 %579 to i8
  store i8 %580, i8* %39, align 1, !tbaa !2449
  %581 = lshr i32 %555, 31
  %582 = xor i32 %563, %581
  %583 = xor i32 %579, %581
  %584 = add nuw nsw i32 %583, %582
  %585 = icmp eq i32 %584, 2
  %586 = zext i1 %585 to i8
  store i8 %586, i8* %45, align 1, !tbaa !2450
  %587 = icmp ne i8 %580, 0
  %588 = xor i1 %587, %585
  %.v11 = select i1 %588, i64 17, i64 297
  %589 = add i64 %550, %.v11
  store i64 %589, i64* %PC, align 8, !tbaa !2428
  br i1 %588, label %block_402aa6, label %block_402bbe

block_402aa6:                                     ; preds = %block_402a95
  %590 = add i64 %551, -44
  %591 = add i64 %589, 7
  store i64 %591, i64* %PC, align 8
  %592 = inttoptr i64 %590 to i32*
  store i32 0, i32* %592, align 4
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_402aad

block_402b44:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 178), i64* %RSI, align 8, !tbaa !2428
  %593 = load i64, i64* @stderr, align 32
  store i64 %593, i64* %RDI, align 8, !tbaa !2428
  %594 = load i64, i64* %RBP, align 8
  %595 = add i64 %594, -36
  %596 = add i64 %440, 21
  store i64 %596, i64* %PC, align 8
  %597 = inttoptr i64 %595 to i32*
  %598 = load i32, i32* %597, align 4
  %599 = zext i32 %598 to i64
  store i64 %599, i64* %RDX, align 8, !tbaa !2428
  %600 = add i64 %594, -40
  %601 = add i64 %440, 24
  store i64 %601, i64* %PC, align 8
  %602 = inttoptr i64 %600 to i32*
  %603 = load i32, i32* %602, align 4
  %604 = zext i32 %603 to i64
  store i64 %604, i64* %RCX, align 8, !tbaa !2428
  %605 = add i64 %594, -44
  %606 = add i64 %440, 28
  store i64 %606, i64* %PC, align 8
  %607 = inttoptr i64 %605 to i32*
  %608 = load i32, i32* %607, align 4
  %609 = zext i32 %608 to i64
  store i64 %609, i64* %R8, align 8, !tbaa !2428
  %610 = add i64 %594, -64
  %611 = add i64 %440, 33
  store i64 %611, i64* %PC, align 8
  %612 = inttoptr i64 %610 to i64*
  %613 = load i64, i64* %612, align 8
  store i64 %613, i64* %49, align 1, !tbaa !2452
  store double 0.000000e+00, double* %51, align 1, !tbaa !2452
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %615 = add i64 %440, 37
  store i64 %615, i64* %PC, align 8
  %616 = load i32, i32* %597, align 4
  %617 = zext i32 %616 to i64
  store i64 %617, i64* %614, align 8, !tbaa !2428
  %618 = add i64 %440, 40
  store i64 %618, i64* %PC, align 8
  %619 = load i32, i32* %602, align 4
  %620 = zext i32 %619 to i64
  store i64 %620, i64* %RAX, align 8, !tbaa !2428
  %621 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %622 = add i64 %440, 44
  store i64 %622, i64* %PC, align 8
  %623 = load i32, i32* %607, align 4
  %624 = zext i32 %623 to i64
  store i64 %624, i64* %621, align 8, !tbaa !2428
  %625 = add i64 %594, -72
  %626 = add i64 %440, 49
  store i64 %626, i64* %PC, align 8
  %627 = inttoptr i64 %625 to i64*
  %628 = load i64, i64* %627, align 8
  store i64 %628, i64* %95, align 1, !tbaa !2452
  %629 = bitcast i64* %93 to double*
  store double 0.000000e+00, double* %629, align 1, !tbaa !2452
  %630 = add i64 %594, -56
  %631 = add i64 %440, 54
  store i64 %631, i64* %PC, align 8
  %632 = inttoptr i64 %630 to i64*
  %633 = load i64, i64* %632, align 8
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 0
  store i64 %633, i64* %634, align 1, !tbaa !2452
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %636 = bitcast i64* %635 to double*
  store double 0.000000e+00, double* %636, align 1, !tbaa !2452
  %637 = bitcast i64* %RSP to i32**
  %638 = load i32*, i32** %637, align 8
  %639 = add i64 %440, 57
  store i64 %639, i64* %PC, align 8
  store i32 %619, i32* %638, align 4
  %640 = load i64, i64* %RSP, align 8
  %641 = add i64 %640, 8
  %642 = load i32, i32* %R10D, align 4
  %643 = load i64, i64* %PC, align 8
  %644 = add i64 %643, 5
  store i64 %644, i64* %PC, align 8
  %645 = inttoptr i64 %641 to i32*
  store i32 %642, i32* %645, align 4
  %646 = load i64, i64* %PC, align 8
  store i8 3, i8* %AL, align 1, !tbaa !2454
  %647 = add i64 %646, -9730
  %648 = add i64 %646, 7
  %649 = load i64, i64* %RSP, align 8, !tbaa !2428
  %650 = add i64 %649, -8
  %651 = inttoptr i64 %650 to i64*
  store i64 %648, i64* %651, align 8
  store i64 %650, i64* %RSP, align 8, !tbaa !2428
  store i64 %647, i64* %PC, align 8, !tbaa !2428
  %652 = tail call fastcc %struct.Memory* @ext_6040f8_fprintf(%struct.State* nonnull %0, %struct.Memory* %435)
  %653 = load i64, i64* %RBP, align 8
  %654 = add i64 %653, -4
  %655 = load i64, i64* %PC, align 8
  %656 = add i64 %655, 7
  store i64 %656, i64* %PC, align 8
  %657 = inttoptr i64 %654 to i32*
  store i32 0, i32* %657, align 4
  %658 = load i64, i64* %RBP, align 8
  %659 = add i64 %658, -84
  %660 = load i32, i32* %EAX, align 4
  %661 = load i64, i64* %PC, align 8
  %662 = add i64 %661, 3
  store i64 %662, i64* %PC, align 8
  %663 = inttoptr i64 %659 to i32*
  store i32 %660, i32* %663, align 4
  %664 = load i64, i64* %PC, align 8
  %665 = add i64 %664, 69
  store i64 %665, i64* %PC, align 8, !tbaa !2428
  br label %block_402bd8
}

; Function Attrs: noinline
define %struct.Memory* @sub_402e74__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402e74:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  %5 = icmp ult i64 %3, 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10 = lshr i64 %4, 63
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %12 = lshr i64 %3, 63
  %13 = xor i64 %10, %12
  %14 = add nuw nsw i64 %13, %12
  %15 = icmp eq i64 %14, 2
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = zext i1 %5 to i8
  store i8 %18, i8* %6, align 1, !tbaa !2432
  %19 = trunc i64 %3 to i32
  %20 = and i32 %19, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #8
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  store i8 %24, i8* %7, align 1, !tbaa !2446
  %25 = xor i64 %4, %3
  %26 = lshr i64 %25, 4
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 1
  store i8 %28, i8* %8, align 1, !tbaa !2447
  %29 = icmp eq i64 %3, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %9, align 1, !tbaa !2448
  %31 = trunc i64 %12 to i8
  store i8 %31, i8* %11, align 1, !tbaa !2449
  store i8 %16, i8* %17, align 1, !tbaa !2450
  %32 = add i64 %1, 9
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %3 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  %35 = add i64 %3, 8
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005f0_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4005f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 6307928, i64* %RAX, align 8, !tbaa !2428
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !2432
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %11, align 1, !tbaa !2446
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12, align 1, !tbaa !2447
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %13, align 1, !tbaa !2448
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %14, align 1, !tbaa !2449
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1, !tbaa !2450
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %16 = add i64 %9, 40
  store i64 %16, i64* %PC, align 8
  %17 = load i64, i64* %8, align 8
  store i64 %17, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %18 = add i64 %9, 41
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %6 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  %21 = add i64 %6, 8
  store i64 %21, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400f90_init_array(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400f90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %11 = load i64, i64* %RBP, align 8
  %12 = add i64 %1, 1
  store i64 %12, i64* %PC, align 8
  %13 = load i64, i64* %RSP, align 8, !tbaa !2428
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %11, i64* %15, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %14, i64* %RBP, align 8, !tbaa !2428
  %17 = load i64, i64* %R15, align 8
  %18 = add i64 %16, 5
  store i64 %18, i64* %PC, align 8
  %19 = add i64 %13, -16
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %R14, align 8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 2
  store i64 %23, i64* %PC, align 8
  %24 = add i64 %13, -24
  %25 = inttoptr i64 %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = load i64, i64* %R13, align 8
  %27 = load i64, i64* %PC, align 8
  %28 = add i64 %27, 2
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %13, -32
  %30 = inttoptr i64 %29 to i64*
  store i64 %26, i64* %30, align 8
  %31 = load i64, i64* %R12, align 8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 2
  store i64 %33, i64* %PC, align 8
  %34 = add i64 %13, -40
  %35 = inttoptr i64 %34 to i64*
  store i64 %31, i64* %35, align 8
  %36 = load i64, i64* %RBX, align 8
  %37 = load i64, i64* %PC, align 8
  %38 = add i64 %37, 1
  store i64 %38, i64* %PC, align 8
  %39 = add i64 %13, -48
  %40 = inttoptr i64 %39 to i64*
  store i64 %36, i64* %40, align 8
  %41 = load i64, i64* %RAX, align 8
  %42 = load i64, i64* %PC, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %PC, align 8
  %44 = add i64 %13, -56
  %45 = inttoptr i64 %44 to i64*
  store i64 %41, i64* %45, align 8
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %46 = load i64, i64* %RBP, align 8
  %47 = add i64 %46, 88
  %48 = load i64, i64* %PC, align 8
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %47 to i64*
  %51 = load i64, i64* %50, align 8
  store i64 %51, i64* %RAX, align 8, !tbaa !2428
  %52 = add i64 %46, 80
  %53 = add i64 %48, 8
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %52 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %R10, align 8, !tbaa !2428
  %56 = add i64 %46, 72
  %57 = add i64 %48, 12
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %56 to i64*
  %59 = load i64, i64* %58, align 8
  store i64 %59, i64* %R11, align 8, !tbaa !2428
  %60 = add i64 %46, 64
  %61 = add i64 %48, 16
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %60 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %RBX, align 8, !tbaa !2428
  %64 = add i64 %46, 56
  %65 = add i64 %48, 20
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %R14, align 8, !tbaa !2428
  %68 = add i64 %46, 48
  %69 = add i64 %48, 24
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %R15, align 8, !tbaa !2428
  %72 = add i64 %46, 40
  %73 = add i64 %48, 28
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %R12, align 8, !tbaa !2428
  %76 = add i64 %46, 32
  %77 = add i64 %48, 32
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %R13, align 8, !tbaa !2428
  %80 = add i64 %46, -104
  %81 = add i64 %48, 36
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to i64*
  store i64 %51, i64* %82, align 8
  %83 = load i64, i64* %RBP, align 8
  %84 = add i64 %83, 24
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %84 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %RAX, align 8, !tbaa !2428
  %89 = add i64 %83, -112
  %90 = add i64 %85, 8
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %89 to i64*
  store i64 %88, i64* %91, align 8
  %92 = load i64, i64* %RBP, align 8
  %93 = add i64 %92, 16
  %94 = load i64, i64* %PC, align 8
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %93 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 8) to i64*), align 8
  %99 = bitcast [32 x %union.VectorReg]* %6 to double*
  %100 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %98, i64* %100, align 1, !tbaa !2452
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %102 = bitcast i64* %101 to double*
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %103 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 16) to i64*), align 16
  %104 = bitcast %union.VectorReg* %7 to double*
  %105 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %103, i64* %105, align 1, !tbaa !2452
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %107 = bitcast i64* %106 to double*
  store double 0.000000e+00, double* %107, align 1, !tbaa !2452
  %108 = add i64 %92, -44
  %109 = load i32, i32* %EDI, align 4
  %110 = add i64 %94, 23
  store i64 %110, i64* %PC, align 8
  %111 = inttoptr i64 %108 to i32*
  store i32 %109, i32* %111, align 4
  %112 = load i64, i64* %RBP, align 8
  %113 = add i64 %112, -48
  %114 = load i32, i32* %ESI, align 4
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, 3
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %113 to i32*
  store i32 %114, i32* %117, align 4
  %118 = load i64, i64* %RBP, align 8
  %119 = add i64 %118, -52
  %120 = load i32, i32* %EDX, align 4
  %121 = load i64, i64* %PC, align 8
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC, align 8
  %123 = inttoptr i64 %119 to i32*
  store i32 %120, i32* %123, align 4
  %124 = load i64, i64* %RBP, align 8
  %125 = add i64 %124, -64
  %126 = load i64, i64* %RCX, align 8
  %127 = load i64, i64* %PC, align 8
  %128 = add i64 %127, 4
  store i64 %128, i64* %PC, align 8
  %129 = inttoptr i64 %125 to i64*
  store i64 %126, i64* %129, align 8
  %130 = load i64, i64* %RBP, align 8
  %131 = add i64 %130, -72
  %132 = load i64, i64* %R8, align 8
  %133 = load i64, i64* %PC, align 8
  %134 = add i64 %133, 4
  store i64 %134, i64* %PC, align 8
  %135 = inttoptr i64 %131 to i64*
  store i64 %132, i64* %135, align 8
  %136 = load i64, i64* %RBP, align 8
  %137 = add i64 %136, -80
  %138 = load i64, i64* %R9, align 8
  %139 = load i64, i64* %PC, align 8
  %140 = add i64 %139, 4
  store i64 %140, i64* %PC, align 8
  %141 = inttoptr i64 %137 to i64*
  store i64 %138, i64* %141, align 8
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -64
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RCX, align 8, !tbaa !2428
  %148 = add i64 %144, 8
  store i64 %148, i64* %PC, align 8
  %149 = load i64, i64* %105, align 1
  %150 = inttoptr i64 %147 to i64*
  store i64 %149, i64* %150, align 8
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -72
  %153 = load i64, i64* %PC, align 8
  %154 = add i64 %153, 4
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %152 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %RCX, align 8, !tbaa !2428
  %157 = add i64 %153, 8
  store i64 %157, i64* %PC, align 8
  %158 = load i64, i64* %100, align 1
  %159 = inttoptr i64 %156 to i64*
  store i64 %158, i64* %159, align 8
  %160 = load i64, i64* %RBP, align 8
  %161 = add i64 %160, -84
  %162 = load i64, i64* %PC, align 8
  %163 = add i64 %162, 7
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %161 to i32*
  store i32 0, i32* %164, align 4
  %165 = load i64, i64* %RBP, align 8
  %166 = add i64 %165, -120
  %167 = load i64, i64* %R13, align 8
  %168 = load i64, i64* %PC, align 8
  %169 = add i64 %168, 4
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %166 to i64*
  store i64 %167, i64* %170, align 8
  %171 = load i64, i64* %RBP, align 8
  %172 = add i64 %171, -128
  %173 = load i64, i64* %R14, align 8
  %174 = load i64, i64* %PC, align 8
  %175 = add i64 %174, 4
  store i64 %175, i64* %PC, align 8
  %176 = inttoptr i64 %172 to i64*
  store i64 %173, i64* %176, align 8
  %177 = load i64, i64* %RBP, align 8
  %178 = add i64 %177, -136
  %179 = load i64, i64* %R15, align 8
  %180 = load i64, i64* %PC, align 8
  %181 = add i64 %180, 7
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %178 to i64*
  store i64 %179, i64* %182, align 8
  %183 = load i64, i64* %RBP, align 8
  %184 = add i64 %183, -144
  %185 = load i64, i64* %R12, align 8
  %186 = load i64, i64* %PC, align 8
  %187 = add i64 %186, 7
  store i64 %187, i64* %PC, align 8
  %188 = inttoptr i64 %184 to i64*
  store i64 %185, i64* %188, align 8
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -152
  %191 = load i64, i64* %RBX, align 8
  %192 = load i64, i64* %PC, align 8
  %193 = add i64 %192, 7
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %190 to i64*
  store i64 %191, i64* %194, align 8
  %195 = load i64, i64* %RBP, align 8
  %196 = add i64 %195, -160
  %197 = load i64, i64* %R11, align 8
  %198 = load i64, i64* %PC, align 8
  %199 = add i64 %198, 7
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200, align 8
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -168
  %203 = load i64, i64* %RAX, align 8
  %204 = load i64, i64* %PC, align 8
  %205 = add i64 %204, 7
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %202 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -176
  %209 = load i64, i64* %R10, align 8
  %210 = load i64, i64* %PC, align 8
  %211 = add i64 %210, 7
  store i64 %211, i64* %PC, align 8
  %212 = inttoptr i64 %208 to i64*
  store i64 %209, i64* %212, align 8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %219 = bitcast %union.VectorReg* %8 to double*
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %.pre = load i64, i64* %PC, align 8
  br label %block_40103c

block_4010bf:                                     ; preds = %block_4010b3
  %221 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 80) to i64*), align 16
  store i64 %221, i64* %100, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %222 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 40) to double*), align 8
  store double %222, double* %104, align 1, !tbaa !2452
  store double 0.000000e+00, double* %107, align 1, !tbaa !2452
  %223 = add i64 %392, 19
  store i64 %223, i64* %PC, align 8
  %224 = load i32, i32* %359, align 4
  %225 = zext i32 %224 to i64
  store i64 %225, i64* %RAX, align 8, !tbaa !2428
  %226 = sitofp i32 %224 to double
  %227 = fadd double %226, %222
  store double %227, double* %219, align 1, !tbaa !2452
  %228 = add i64 %392, 30
  store i64 %228, i64* %PC, align 8
  %229 = load i32, i32* %364, align 4
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = sitofp i32 %229 to double
  store double %231, double* %104, align 1, !tbaa !2452
  %232 = fdiv double %227, %231
  store double %232, double* %219, align 1, !tbaa !2452
  %233 = add i64 %356, 64
  %234 = add i64 %392, 42
  store i64 %234, i64* %PC, align 8
  %235 = inttoptr i64 %233 to i64*
  %236 = load i64, i64* %235, align 8
  store i64 %236, i64* %RCX, align 8, !tbaa !2428
  %237 = add i64 %392, 46
  store i64 %237, i64* %PC, align 8
  %238 = load i32, i32* %359, align 4
  %239 = sext i32 %238 to i64
  store i64 %239, i64* %RDX, align 8, !tbaa !2428
  %240 = shl nsw i64 %239, 3
  %241 = add i64 %240, %236
  %242 = add i64 %392, 51
  store i64 %242, i64* %PC, align 8
  %243 = inttoptr i64 %241 to double*
  store double %232, double* %243, align 8
  %244 = load i64, i64* %RBP, align 8
  %245 = add i64 %244, -84
  %246 = load i64, i64* %PC, align 8
  %247 = add i64 %246, 3
  store i64 %247, i64* %PC, align 8
  %248 = inttoptr i64 %245 to i32*
  %249 = load i32, i32* %248, align 4
  %250 = zext i32 %249 to i64
  store i64 %250, i64* %RAX, align 8, !tbaa !2428
  %251 = sitofp i32 %249 to double
  %252 = load double, double* %99, align 1
  %253 = fadd double %251, %252
  store double %253, double* %104, align 1, !tbaa !2452
  %254 = add i64 %244, -48
  %255 = add i64 %246, 14
  store i64 %255, i64* %PC, align 8
  %256 = inttoptr i64 %254 to i32*
  %257 = load i32, i32* %256, align 4
  %258 = zext i32 %257 to i64
  store i64 %258, i64* %RAX, align 8, !tbaa !2428
  %259 = sitofp i32 %257 to double
  store double %259, double* %99, align 1, !tbaa !2452
  %260 = fdiv double %253, %259
  store double %260, double* %104, align 1, !tbaa !2452
  %261 = add i64 %244, 72
  %262 = add i64 %246, 26
  store i64 %262, i64* %PC, align 8
  %263 = inttoptr i64 %261 to i64*
  %264 = load i64, i64* %263, align 8
  store i64 %264, i64* %RCX, align 8, !tbaa !2428
  %265 = add i64 %246, 30
  store i64 %265, i64* %PC, align 8
  %266 = load i32, i32* %248, align 4
  %267 = sext i32 %266 to i64
  store i64 %267, i64* %RDX, align 8, !tbaa !2428
  %268 = shl nsw i64 %267, 3
  %269 = add i64 %268, %264
  %270 = add i64 %246, 35
  store i64 %270, i64* %PC, align 8
  %271 = inttoptr i64 %269 to double*
  store double %260, double* %271, align 8
  %272 = load i64, i64* %RBP, align 8
  %273 = add i64 %272, -84
  %274 = load i64, i64* %PC, align 8
  %275 = add i64 %274, 3
  store i64 %275, i64* %PC, align 8
  %276 = inttoptr i64 %273 to i32*
  %277 = load i32, i32* %276, align 4
  %278 = add i32 %277, 1
  %279 = zext i32 %278 to i64
  store i64 %279, i64* %RAX, align 8, !tbaa !2428
  %280 = icmp eq i32 %277, -1
  %281 = icmp eq i32 %278, 0
  %282 = or i1 %280, %281
  %283 = zext i1 %282 to i8
  store i8 %283, i8* %213, align 1, !tbaa !2432
  %284 = and i32 %278, 255
  %285 = tail call i32 @llvm.ctpop.i32(i32 %284) #8
  %286 = trunc i32 %285 to i8
  %287 = and i8 %286, 1
  %288 = xor i8 %287, 1
  store i8 %288, i8* %214, align 1, !tbaa !2446
  %289 = xor i32 %277, %278
  %290 = lshr i32 %289, 4
  %291 = trunc i32 %290 to i8
  %292 = and i8 %291, 1
  store i8 %292, i8* %215, align 1, !tbaa !2447
  %293 = zext i1 %281 to i8
  store i8 %293, i8* %216, align 1, !tbaa !2448
  %294 = lshr i32 %278, 31
  %295 = trunc i32 %294 to i8
  store i8 %295, i8* %217, align 1, !tbaa !2449
  %296 = lshr i32 %277, 31
  %297 = xor i32 %294, %296
  %298 = add nuw nsw i32 %297, %294
  %299 = icmp eq i32 %298, 2
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %218, align 1, !tbaa !2450
  %301 = add i64 %274, 9
  store i64 %301, i64* %PC, align 8
  store i32 %278, i32* %276, align 4
  %302 = load i64, i64* %PC, align 8
  %303 = add i64 %302, -107
  store i64 %303, i64* %PC, align 8, !tbaa !2428
  br label %block_4010b3

block_4013b5:                                     ; preds = %block_4011a1
  %304 = load i64, i64* %RSP, align 8
  %305 = add i64 %304, 8
  store i64 %305, i64* %RSP, align 8, !tbaa !2428
  %306 = icmp ugt i64 %304, -9
  %307 = zext i1 %306 to i8
  store i8 %307, i8* %213, align 1, !tbaa !2432
  %308 = trunc i64 %305 to i32
  %309 = and i32 %308, 255
  %310 = tail call i32 @llvm.ctpop.i32(i32 %309) #8
  %311 = trunc i32 %310 to i8
  %312 = and i8 %311, 1
  %313 = xor i8 %312, 1
  store i8 %313, i8* %214, align 1, !tbaa !2446
  %314 = xor i64 %304, %305
  %315 = lshr i64 %314, 4
  %316 = trunc i64 %315 to i8
  %317 = and i8 %316, 1
  store i8 %317, i8* %215, align 1, !tbaa !2447
  %318 = icmp eq i64 %305, 0
  %319 = zext i1 %318 to i8
  store i8 %319, i8* %216, align 1, !tbaa !2448
  %320 = lshr i64 %305, 63
  %321 = trunc i64 %320 to i8
  store i8 %321, i8* %217, align 1, !tbaa !2449
  %322 = lshr i64 %304, 63
  %323 = xor i64 %320, %322
  %324 = add nuw nsw i64 %323, %320
  %325 = icmp eq i64 %324, 2
  %326 = zext i1 %325 to i8
  store i8 %326, i8* %218, align 1, !tbaa !2450
  %327 = add i64 %1348, 5
  store i64 %327, i64* %PC, align 8
  %328 = add i64 %304, 16
  %329 = inttoptr i64 %305 to i64*
  %330 = load i64, i64* %329, align 8
  store i64 %330, i64* %RBX, align 8, !tbaa !2428
  store i64 %328, i64* %RSP, align 8, !tbaa !2428
  %331 = add i64 %1348, 7
  store i64 %331, i64* %PC, align 8
  %332 = add i64 %304, 24
  %333 = inttoptr i64 %328 to i64*
  %334 = load i64, i64* %333, align 8
  store i64 %334, i64* %R12, align 8, !tbaa !2428
  store i64 %332, i64* %RSP, align 8, !tbaa !2428
  %335 = add i64 %1348, 9
  store i64 %335, i64* %PC, align 8
  %336 = add i64 %304, 32
  %337 = inttoptr i64 %332 to i64*
  %338 = load i64, i64* %337, align 8
  store i64 %338, i64* %R13, align 8, !tbaa !2428
  store i64 %336, i64* %RSP, align 8, !tbaa !2428
  %339 = add i64 %1348, 11
  store i64 %339, i64* %PC, align 8
  %340 = add i64 %304, 40
  %341 = inttoptr i64 %336 to i64*
  %342 = load i64, i64* %341, align 8
  store i64 %342, i64* %R14, align 8, !tbaa !2428
  store i64 %340, i64* %RSP, align 8, !tbaa !2428
  %343 = add i64 %1348, 13
  store i64 %343, i64* %PC, align 8
  %344 = add i64 %304, 48
  %345 = inttoptr i64 %340 to i64*
  %346 = load i64, i64* %345, align 8
  store i64 %346, i64* %R15, align 8, !tbaa !2428
  store i64 %344, i64* %RSP, align 8, !tbaa !2428
  %347 = add i64 %1348, 14
  store i64 %347, i64* %PC, align 8
  %348 = add i64 %304, 56
  %349 = inttoptr i64 %344 to i64*
  %350 = load i64, i64* %349, align 8
  store i64 %350, i64* %RBP, align 8, !tbaa !2428
  store i64 %348, i64* %RSP, align 8, !tbaa !2428
  %351 = add i64 %1348, 15
  store i64 %351, i64* %PC, align 8
  %352 = inttoptr i64 %348 to i64*
  %353 = load i64, i64* %352, align 8
  store i64 %353, i64* %PC, align 8, !tbaa !2428
  %354 = add i64 %304, 64
  store i64 %354, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4010b3:                                     ; preds = %block_4010ac, %block_4010bf
  %355 = phi i64 [ %.pre1, %block_4010ac ], [ %303, %block_4010bf ]
  %356 = load i64, i64* %RBP, align 8
  %357 = add i64 %356, -84
  %358 = add i64 %355, 3
  store i64 %358, i64* %PC, align 8
  %359 = inttoptr i64 %357 to i32*
  %360 = load i32, i32* %359, align 4
  %361 = zext i32 %360 to i64
  store i64 %361, i64* %RAX, align 8, !tbaa !2428
  %362 = add i64 %356, -48
  %363 = add i64 %355, 6
  store i64 %363, i64* %PC, align 8
  %364 = inttoptr i64 %362 to i32*
  %365 = load i32, i32* %364, align 4
  %366 = sub i32 %360, %365
  %367 = icmp ult i32 %360, %365
  %368 = zext i1 %367 to i8
  store i8 %368, i8* %213, align 1, !tbaa !2432
  %369 = and i32 %366, 255
  %370 = tail call i32 @llvm.ctpop.i32(i32 %369) #8
  %371 = trunc i32 %370 to i8
  %372 = and i8 %371, 1
  %373 = xor i8 %372, 1
  store i8 %373, i8* %214, align 1, !tbaa !2446
  %374 = xor i32 %365, %360
  %375 = xor i32 %374, %366
  %376 = lshr i32 %375, 4
  %377 = trunc i32 %376 to i8
  %378 = and i8 %377, 1
  store i8 %378, i8* %215, align 1, !tbaa !2447
  %379 = icmp eq i32 %366, 0
  %380 = zext i1 %379 to i8
  store i8 %380, i8* %216, align 1, !tbaa !2448
  %381 = lshr i32 %366, 31
  %382 = trunc i32 %381 to i8
  store i8 %382, i8* %217, align 1, !tbaa !2449
  %383 = lshr i32 %360, 31
  %384 = lshr i32 %365, 31
  %385 = xor i32 %384, %383
  %386 = xor i32 %381, %383
  %387 = add nuw nsw i32 %386, %385
  %388 = icmp eq i32 %387, 2
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %218, align 1, !tbaa !2450
  %390 = icmp ne i8 %382, 0
  %391 = xor i1 %390, %388
  %.demorgan6 = or i1 %379, %391
  %.v7 = select i1 %.demorgan6, i64 12, i64 112
  %392 = add i64 %355, %.v7
  store i64 %392, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan6, label %block_4010bf, label %block_401123

block_401261:                                     ; preds = %block_401255
  %393 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 40) to i64*), align 8
  store i64 %393, i64* %100, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %394 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 48) to i64*), align 16
  store i64 %394, i64* %105, align 1, !tbaa !2452
  store double 0.000000e+00, double* %107, align 1, !tbaa !2452
  %395 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 56) to double*), align 8
  store double %395, double* %219, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1224, align 1, !tbaa !2452
  %396 = add i64 %1075, -84
  %397 = add i64 %1111, 27
  store i64 %397, i64* %PC, align 8
  %398 = inttoptr i64 %396 to i32*
  %399 = load i32, i32* %398, align 4
  %400 = zext i32 %399 to i64
  store i64 %400, i64* %RAX, align 8, !tbaa !2428
  %401 = sitofp i32 %399 to double
  store double %401, double* %1223, align 1, !tbaa !2452
  %402 = add i64 %1075, -88
  %403 = add i64 %1111, 34
  store i64 %403, i64* %PC, align 8
  %404 = inttoptr i64 %402 to i32*
  %405 = load i32, i32* %404, align 4
  %406 = add i32 %405, 3
  %407 = zext i32 %406 to i64
  store i64 %407, i64* %RAX, align 8, !tbaa !2428
  %408 = icmp ugt i32 %405, -4
  %409 = zext i1 %408 to i8
  store i8 %409, i8* %213, align 1, !tbaa !2432
  %410 = and i32 %406, 255
  %411 = tail call i32 @llvm.ctpop.i32(i32 %410) #8
  %412 = trunc i32 %411 to i8
  %413 = and i8 %412, 1
  %414 = xor i8 %413, 1
  store i8 %414, i8* %214, align 1, !tbaa !2446
  %415 = xor i32 %405, %406
  %416 = lshr i32 %415, 4
  %417 = trunc i32 %416 to i8
  %418 = and i8 %417, 1
  store i8 %418, i8* %215, align 1, !tbaa !2447
  %419 = icmp eq i32 %406, 0
  %420 = zext i1 %419 to i8
  store i8 %420, i8* %216, align 1, !tbaa !2448
  %421 = lshr i32 %406, 31
  %422 = trunc i32 %421 to i8
  store i8 %422, i8* %217, align 1, !tbaa !2449
  %423 = lshr i32 %405, 31
  %424 = xor i32 %421, %423
  %425 = add nuw nsw i32 %424, %421
  %426 = icmp eq i32 %425, 2
  %427 = zext i1 %426 to i8
  store i8 %427, i8* %218, align 1, !tbaa !2450
  %428 = sitofp i32 %406 to double
  store double %428, double* %1225, align 1, !tbaa !2452
  %429 = fmul double %401, %428
  store double %429, double* %1223, align 1, !tbaa !2452
  %430 = add i64 %1111, 48
  store i64 %430, i64* %PC, align 8
  %431 = load i32, i32* %1078, align 4
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RAX, align 8, !tbaa !2428
  %433 = sitofp i32 %431 to double
  store double %433, double* %1225, align 1, !tbaa !2452
  %434 = fadd double %429, %433
  %435 = fadd double %434, %395
  store double %435, double* %1223, align 1, !tbaa !2452
  %436 = add i64 %1111, 63
  store i64 %436, i64* %PC, align 8
  %437 = load i32, i32* %1083, align 4
  %438 = zext i32 %437 to i64
  store i64 %438, i64* %RAX, align 8, !tbaa !2428
  %439 = sitofp i32 %437 to double
  store double %439, double* %219, align 1, !tbaa !2452
  %440 = fdiv double %435, %439
  store double %440, double* %1223, align 1, !tbaa !2452
  %441 = add i64 %1075, 24
  %442 = add i64 %1111, 75
  store i64 %442, i64* %PC, align 8
  %443 = inttoptr i64 %441 to i64*
  %444 = load i64, i64* %443, align 8
  store i64 %444, i64* %RCX, align 8, !tbaa !2428
  %445 = add i64 %1111, 79
  store i64 %445, i64* %PC, align 8
  %446 = load i32, i32* %398, align 4
  %447 = sext i32 %446 to i64
  %448 = mul nsw i64 %447, 33800
  store i64 %448, i64* %RDX, align 8, !tbaa !2428
  %449 = lshr i64 %448, 63
  %450 = add i64 %448, %444
  store i64 %450, i64* %RCX, align 8, !tbaa !2428
  %451 = icmp ult i64 %450, %444
  %452 = icmp ult i64 %450, %448
  %453 = or i1 %451, %452
  %454 = zext i1 %453 to i8
  store i8 %454, i8* %213, align 1, !tbaa !2432
  %455 = trunc i64 %450 to i32
  %456 = and i32 %455, 255
  %457 = tail call i32 @llvm.ctpop.i32(i32 %456) #8
  %458 = trunc i32 %457 to i8
  %459 = and i8 %458, 1
  %460 = xor i8 %459, 1
  store i8 %460, i8* %214, align 1, !tbaa !2446
  %461 = xor i64 %448, %444
  %462 = xor i64 %461, %450
  %463 = lshr i64 %462, 4
  %464 = trunc i64 %463 to i8
  %465 = and i8 %464, 1
  store i8 %465, i8* %215, align 1, !tbaa !2447
  %466 = icmp eq i64 %450, 0
  %467 = zext i1 %466 to i8
  store i8 %467, i8* %216, align 1, !tbaa !2448
  %468 = lshr i64 %450, 63
  %469 = trunc i64 %468 to i8
  store i8 %469, i8* %217, align 1, !tbaa !2449
  %470 = lshr i64 %444, 63
  %471 = xor i64 %468, %470
  %472 = xor i64 %468, %449
  %473 = add nuw nsw i64 %471, %472
  %474 = icmp eq i64 %473, 2
  %475 = zext i1 %474 to i8
  store i8 %475, i8* %218, align 1, !tbaa !2450
  %476 = add i64 %1111, 93
  store i64 %476, i64* %PC, align 8
  %477 = load i32, i32* %404, align 4
  %478 = sext i32 %477 to i64
  %479 = mul nsw i64 %478, 520
  store i64 %479, i64* %RDX, align 8, !tbaa !2428
  %480 = lshr i64 %479, 63
  %481 = add i64 %479, %450
  store i64 %481, i64* %RCX, align 8, !tbaa !2428
  %482 = icmp ult i64 %481, %450
  %483 = icmp ult i64 %481, %479
  %484 = or i1 %482, %483
  %485 = zext i1 %484 to i8
  store i8 %485, i8* %213, align 1, !tbaa !2432
  %486 = trunc i64 %481 to i32
  %487 = and i32 %486, 255
  %488 = tail call i32 @llvm.ctpop.i32(i32 %487) #8
  %489 = trunc i32 %488 to i8
  %490 = and i8 %489, 1
  %491 = xor i8 %490, 1
  store i8 %491, i8* %214, align 1, !tbaa !2446
  %492 = xor i64 %479, %450
  %493 = xor i64 %492, %481
  %494 = lshr i64 %493, 4
  %495 = trunc i64 %494 to i8
  %496 = and i8 %495, 1
  store i8 %496, i8* %215, align 1, !tbaa !2447
  %497 = icmp eq i64 %481, 0
  %498 = zext i1 %497 to i8
  store i8 %498, i8* %216, align 1, !tbaa !2448
  %499 = lshr i64 %481, 63
  %500 = trunc i64 %499 to i8
  store i8 %500, i8* %217, align 1, !tbaa !2449
  %501 = xor i64 %499, %468
  %502 = xor i64 %499, %480
  %503 = add nuw nsw i64 %501, %502
  %504 = icmp eq i64 %503, 2
  %505 = zext i1 %504 to i8
  store i8 %505, i8* %218, align 1, !tbaa !2450
  %506 = load i64, i64* %RBP, align 8
  %507 = add i64 %506, -92
  %508 = add i64 %1111, 107
  store i64 %508, i64* %PC, align 8
  %509 = inttoptr i64 %507 to i32*
  %510 = load i32, i32* %509, align 4
  %511 = sext i32 %510 to i64
  store i64 %511, i64* %RDX, align 8, !tbaa !2428
  %512 = shl nsw i64 %511, 3
  %513 = add i64 %512, %481
  %514 = add i64 %1111, 112
  store i64 %514, i64* %PC, align 8
  %515 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  %516 = bitcast double %440 to i64
  %517 = inttoptr i64 %513 to i64*
  store i64 %516, i64* %517, align 8
  %518 = load i64, i64* %RBP, align 8
  %519 = add i64 %518, -84
  %520 = load i64, i64* %PC, align 8
  %521 = add i64 %520, 3
  store i64 %521, i64* %PC, align 8
  %522 = inttoptr i64 %519 to i32*
  %523 = load i32, i32* %522, align 4
  %524 = zext i32 %523 to i64
  store i64 %524, i64* %RAX, align 8, !tbaa !2428
  %525 = sitofp i32 %523 to double
  store double %525, double* %219, align 1, !tbaa !2452
  %526 = add i64 %518, -88
  %527 = add i64 %520, 10
  store i64 %527, i64* %PC, align 8
  %528 = inttoptr i64 %526 to i32*
  %529 = load i32, i32* %528, align 4
  %530 = add i32 %529, 4
  %531 = zext i32 %530 to i64
  store i64 %531, i64* %RAX, align 8, !tbaa !2428
  %532 = icmp ugt i32 %529, -5
  %533 = zext i1 %532 to i8
  store i8 %533, i8* %213, align 1, !tbaa !2432
  %534 = and i32 %530, 255
  %535 = tail call i32 @llvm.ctpop.i32(i32 %534) #8
  %536 = trunc i32 %535 to i8
  %537 = and i8 %536, 1
  %538 = xor i8 %537, 1
  store i8 %538, i8* %214, align 1, !tbaa !2446
  %539 = xor i32 %529, %530
  %540 = lshr i32 %539, 4
  %541 = trunc i32 %540 to i8
  %542 = and i8 %541, 1
  store i8 %542, i8* %215, align 1, !tbaa !2447
  %543 = icmp eq i32 %530, 0
  %544 = zext i1 %543 to i8
  store i8 %544, i8* %216, align 1, !tbaa !2448
  %545 = lshr i32 %530, 31
  %546 = trunc i32 %545 to i8
  store i8 %546, i8* %217, align 1, !tbaa !2449
  %547 = lshr i32 %529, 31
  %548 = xor i32 %545, %547
  %549 = add nuw nsw i32 %548, %545
  %550 = icmp eq i32 %549, 2
  %551 = zext i1 %550 to i8
  store i8 %551, i8* %218, align 1, !tbaa !2450
  %552 = sitofp i32 %530 to double
  store double %552, double* %1223, align 1, !tbaa !2452
  %553 = fmul double %525, %552
  store double %553, double* %219, align 1, !tbaa !2452
  %554 = add i64 %518, -92
  %555 = add i64 %520, 24
  store i64 %555, i64* %PC, align 8
  %556 = inttoptr i64 %554 to i32*
  %557 = load i32, i32* %556, align 4
  %558 = zext i32 %557 to i64
  store i64 %558, i64* %RAX, align 8, !tbaa !2428
  %559 = sitofp i32 %557 to double
  store double %559, double* %1223, align 1, !tbaa !2452
  %560 = fadd double %553, %559
  %561 = load double, double* %104, align 1
  %562 = fadd double %560, %561
  store double %562, double* %219, align 1, !tbaa !2452
  %563 = add i64 %518, -52
  %564 = add i64 %520, 39
  store i64 %564, i64* %PC, align 8
  %565 = inttoptr i64 %563 to i32*
  %566 = load i32, i32* %565, align 4
  %567 = zext i32 %566 to i64
  store i64 %567, i64* %RAX, align 8, !tbaa !2428
  %568 = sitofp i32 %566 to double
  store double %568, double* %104, align 1, !tbaa !2452
  %569 = fdiv double %562, %568
  store double %569, double* %219, align 1, !tbaa !2452
  %570 = add i64 %518, 32
  %571 = add i64 %520, 51
  store i64 %571, i64* %PC, align 8
  %572 = inttoptr i64 %570 to i64*
  %573 = load i64, i64* %572, align 8
  store i64 %573, i64* %RCX, align 8, !tbaa !2428
  %574 = add i64 %520, 55
  store i64 %574, i64* %PC, align 8
  %575 = load i32, i32* %522, align 4
  %576 = sext i32 %575 to i64
  %577 = mul nsw i64 %576, 33800
  store i64 %577, i64* %RDX, align 8, !tbaa !2428
  %578 = lshr i64 %577, 63
  %579 = add i64 %577, %573
  store i64 %579, i64* %RCX, align 8, !tbaa !2428
  %580 = icmp ult i64 %579, %573
  %581 = icmp ult i64 %579, %577
  %582 = or i1 %580, %581
  %583 = zext i1 %582 to i8
  store i8 %583, i8* %213, align 1, !tbaa !2432
  %584 = trunc i64 %579 to i32
  %585 = and i32 %584, 255
  %586 = tail call i32 @llvm.ctpop.i32(i32 %585) #8
  %587 = trunc i32 %586 to i8
  %588 = and i8 %587, 1
  %589 = xor i8 %588, 1
  store i8 %589, i8* %214, align 1, !tbaa !2446
  %590 = xor i64 %577, %573
  %591 = xor i64 %590, %579
  %592 = lshr i64 %591, 4
  %593 = trunc i64 %592 to i8
  %594 = and i8 %593, 1
  store i8 %594, i8* %215, align 1, !tbaa !2447
  %595 = icmp eq i64 %579, 0
  %596 = zext i1 %595 to i8
  store i8 %596, i8* %216, align 1, !tbaa !2448
  %597 = lshr i64 %579, 63
  %598 = trunc i64 %597 to i8
  store i8 %598, i8* %217, align 1, !tbaa !2449
  %599 = lshr i64 %573, 63
  %600 = xor i64 %597, %599
  %601 = xor i64 %597, %578
  %602 = add nuw nsw i64 %600, %601
  %603 = icmp eq i64 %602, 2
  %604 = zext i1 %603 to i8
  store i8 %604, i8* %218, align 1, !tbaa !2450
  %605 = add i64 %520, 69
  store i64 %605, i64* %PC, align 8
  %606 = load i32, i32* %528, align 4
  %607 = sext i32 %606 to i64
  %608 = mul nsw i64 %607, 520
  store i64 %608, i64* %RDX, align 8, !tbaa !2428
  %609 = lshr i64 %608, 63
  %610 = add i64 %608, %579
  store i64 %610, i64* %RCX, align 8, !tbaa !2428
  %611 = icmp ult i64 %610, %579
  %612 = icmp ult i64 %610, %608
  %613 = or i1 %611, %612
  %614 = zext i1 %613 to i8
  store i8 %614, i8* %213, align 1, !tbaa !2432
  %615 = trunc i64 %610 to i32
  %616 = and i32 %615, 255
  %617 = tail call i32 @llvm.ctpop.i32(i32 %616) #8
  %618 = trunc i32 %617 to i8
  %619 = and i8 %618, 1
  %620 = xor i8 %619, 1
  store i8 %620, i8* %214, align 1, !tbaa !2446
  %621 = xor i64 %608, %579
  %622 = xor i64 %621, %610
  %623 = lshr i64 %622, 4
  %624 = trunc i64 %623 to i8
  %625 = and i8 %624, 1
  store i8 %625, i8* %215, align 1, !tbaa !2447
  %626 = icmp eq i64 %610, 0
  %627 = zext i1 %626 to i8
  store i8 %627, i8* %216, align 1, !tbaa !2448
  %628 = lshr i64 %610, 63
  %629 = trunc i64 %628 to i8
  store i8 %629, i8* %217, align 1, !tbaa !2449
  %630 = xor i64 %628, %597
  %631 = xor i64 %628, %609
  %632 = add nuw nsw i64 %630, %631
  %633 = icmp eq i64 %632, 2
  %634 = zext i1 %633 to i8
  store i8 %634, i8* %218, align 1, !tbaa !2450
  %635 = load i64, i64* %RBP, align 8
  %636 = add i64 %635, -92
  %637 = add i64 %520, 83
  store i64 %637, i64* %PC, align 8
  %638 = inttoptr i64 %636 to i32*
  %639 = load i32, i32* %638, align 4
  %640 = sext i32 %639 to i64
  store i64 %640, i64* %RDX, align 8, !tbaa !2428
  %641 = shl nsw i64 %640, 3
  %642 = add i64 %641, %610
  %643 = add i64 %520, 88
  store i64 %643, i64* %PC, align 8
  %644 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %8, i64 0, i32 0, i32 0, i32 0, i64 0
  %645 = bitcast double %569 to i64
  %646 = inttoptr i64 %642 to i64*
  store i64 %645, i64* %646, align 8
  %647 = load i64, i64* %RBP, align 8
  %648 = add i64 %647, -84
  %649 = load i64, i64* %PC, align 8
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC, align 8
  %651 = inttoptr i64 %648 to i32*
  %652 = load i32, i32* %651, align 4
  %653 = zext i32 %652 to i64
  store i64 %653, i64* %RAX, align 8, !tbaa !2428
  %654 = sitofp i32 %652 to double
  store double %654, double* %104, align 1, !tbaa !2452
  %655 = add i64 %647, -88
  %656 = add i64 %649, 10
  store i64 %656, i64* %PC, align 8
  %657 = inttoptr i64 %655 to i32*
  %658 = load i32, i32* %657, align 4
  %659 = add i32 %658, 5
  %660 = zext i32 %659 to i64
  store i64 %660, i64* %RAX, align 8, !tbaa !2428
  %661 = icmp ugt i32 %658, -6
  %662 = zext i1 %661 to i8
  store i8 %662, i8* %213, align 1, !tbaa !2432
  %663 = and i32 %659, 255
  %664 = tail call i32 @llvm.ctpop.i32(i32 %663) #8
  %665 = trunc i32 %664 to i8
  %666 = and i8 %665, 1
  %667 = xor i8 %666, 1
  store i8 %667, i8* %214, align 1, !tbaa !2446
  %668 = xor i32 %658, %659
  %669 = lshr i32 %668, 4
  %670 = trunc i32 %669 to i8
  %671 = and i8 %670, 1
  store i8 %671, i8* %215, align 1, !tbaa !2447
  %672 = icmp eq i32 %659, 0
  %673 = zext i1 %672 to i8
  store i8 %673, i8* %216, align 1, !tbaa !2448
  %674 = lshr i32 %659, 31
  %675 = trunc i32 %674 to i8
  store i8 %675, i8* %217, align 1, !tbaa !2449
  %676 = lshr i32 %658, 31
  %677 = xor i32 %674, %676
  %678 = add nuw nsw i32 %677, %674
  %679 = icmp eq i32 %678, 2
  %680 = zext i1 %679 to i8
  store i8 %680, i8* %218, align 1, !tbaa !2450
  %681 = sitofp i32 %659 to double
  store double %681, double* %219, align 1, !tbaa !2452
  %682 = fmul double %654, %681
  store double %682, double* %104, align 1, !tbaa !2452
  %683 = add i64 %647, -92
  %684 = add i64 %649, 24
  store i64 %684, i64* %PC, align 8
  %685 = inttoptr i64 %683 to i32*
  %686 = load i32, i32* %685, align 4
  %687 = zext i32 %686 to i64
  store i64 %687, i64* %RAX, align 8, !tbaa !2428
  %688 = sitofp i32 %686 to double
  store double %688, double* %219, align 1, !tbaa !2452
  %689 = fadd double %682, %688
  %690 = load double, double* %99, align 1
  %691 = fadd double %689, %690
  store double %691, double* %104, align 1, !tbaa !2452
  %692 = add i64 %647, -44
  %693 = add i64 %649, 39
  store i64 %693, i64* %PC, align 8
  %694 = inttoptr i64 %692 to i32*
  %695 = load i32, i32* %694, align 4
  %696 = zext i32 %695 to i64
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = sitofp i32 %695 to double
  store double %697, double* %99, align 1, !tbaa !2452
  %698 = fdiv double %691, %697
  store double %698, double* %104, align 1, !tbaa !2452
  %699 = add i64 %647, 40
  %700 = add i64 %649, 51
  store i64 %700, i64* %PC, align 8
  %701 = inttoptr i64 %699 to i64*
  %702 = load i64, i64* %701, align 8
  store i64 %702, i64* %RCX, align 8, !tbaa !2428
  %703 = add i64 %649, 55
  store i64 %703, i64* %PC, align 8
  %704 = load i32, i32* %651, align 4
  %705 = sext i32 %704 to i64
  %706 = mul nsw i64 %705, 33800
  store i64 %706, i64* %RDX, align 8, !tbaa !2428
  %707 = lshr i64 %706, 63
  %708 = add i64 %706, %702
  store i64 %708, i64* %RCX, align 8, !tbaa !2428
  %709 = icmp ult i64 %708, %702
  %710 = icmp ult i64 %708, %706
  %711 = or i1 %709, %710
  %712 = zext i1 %711 to i8
  store i8 %712, i8* %213, align 1, !tbaa !2432
  %713 = trunc i64 %708 to i32
  %714 = and i32 %713, 255
  %715 = tail call i32 @llvm.ctpop.i32(i32 %714) #8
  %716 = trunc i32 %715 to i8
  %717 = and i8 %716, 1
  %718 = xor i8 %717, 1
  store i8 %718, i8* %214, align 1, !tbaa !2446
  %719 = xor i64 %706, %702
  %720 = xor i64 %719, %708
  %721 = lshr i64 %720, 4
  %722 = trunc i64 %721 to i8
  %723 = and i8 %722, 1
  store i8 %723, i8* %215, align 1, !tbaa !2447
  %724 = icmp eq i64 %708, 0
  %725 = zext i1 %724 to i8
  store i8 %725, i8* %216, align 1, !tbaa !2448
  %726 = lshr i64 %708, 63
  %727 = trunc i64 %726 to i8
  store i8 %727, i8* %217, align 1, !tbaa !2449
  %728 = lshr i64 %702, 63
  %729 = xor i64 %726, %728
  %730 = xor i64 %726, %707
  %731 = add nuw nsw i64 %729, %730
  %732 = icmp eq i64 %731, 2
  %733 = zext i1 %732 to i8
  store i8 %733, i8* %218, align 1, !tbaa !2450
  %734 = add i64 %649, 69
  store i64 %734, i64* %PC, align 8
  %735 = load i32, i32* %657, align 4
  %736 = sext i32 %735 to i64
  %737 = mul nsw i64 %736, 520
  store i64 %737, i64* %RDX, align 8, !tbaa !2428
  %738 = lshr i64 %737, 63
  %739 = add i64 %737, %708
  store i64 %739, i64* %RCX, align 8, !tbaa !2428
  %740 = icmp ult i64 %739, %708
  %741 = icmp ult i64 %739, %737
  %742 = or i1 %740, %741
  %743 = zext i1 %742 to i8
  store i8 %743, i8* %213, align 1, !tbaa !2432
  %744 = trunc i64 %739 to i32
  %745 = and i32 %744, 255
  %746 = tail call i32 @llvm.ctpop.i32(i32 %745) #8
  %747 = trunc i32 %746 to i8
  %748 = and i8 %747, 1
  %749 = xor i8 %748, 1
  store i8 %749, i8* %214, align 1, !tbaa !2446
  %750 = xor i64 %737, %708
  %751 = xor i64 %750, %739
  %752 = lshr i64 %751, 4
  %753 = trunc i64 %752 to i8
  %754 = and i8 %753, 1
  store i8 %754, i8* %215, align 1, !tbaa !2447
  %755 = icmp eq i64 %739, 0
  %756 = zext i1 %755 to i8
  store i8 %756, i8* %216, align 1, !tbaa !2448
  %757 = lshr i64 %739, 63
  %758 = trunc i64 %757 to i8
  store i8 %758, i8* %217, align 1, !tbaa !2449
  %759 = xor i64 %757, %726
  %760 = xor i64 %757, %738
  %761 = add nuw nsw i64 %759, %760
  %762 = icmp eq i64 %761, 2
  %763 = zext i1 %762 to i8
  store i8 %763, i8* %218, align 1, !tbaa !2450
  %764 = load i64, i64* %RBP, align 8
  %765 = add i64 %764, -92
  %766 = add i64 %649, 83
  store i64 %766, i64* %PC, align 8
  %767 = inttoptr i64 %765 to i32*
  %768 = load i32, i32* %767, align 4
  %769 = sext i32 %768 to i64
  store i64 %769, i64* %RDX, align 8, !tbaa !2428
  %770 = shl nsw i64 %769, 3
  %771 = add i64 %770, %739
  %772 = add i64 %649, 88
  store i64 %772, i64* %PC, align 8
  %773 = bitcast double %698 to i64
  %774 = inttoptr i64 %771 to i64*
  store i64 %773, i64* %774, align 8
  %775 = load i64, i64* %RBP, align 8
  %776 = add i64 %775, -92
  %777 = load i64, i64* %PC, align 8
  %778 = add i64 %777, 3
  store i64 %778, i64* %PC, align 8
  %779 = inttoptr i64 %776 to i32*
  %780 = load i32, i32* %779, align 4
  %781 = add i32 %780, 1
  %782 = zext i32 %781 to i64
  store i64 %782, i64* %RAX, align 8, !tbaa !2428
  %783 = icmp eq i32 %780, -1
  %784 = icmp eq i32 %781, 0
  %785 = or i1 %783, %784
  %786 = zext i1 %785 to i8
  store i8 %786, i8* %213, align 1, !tbaa !2432
  %787 = and i32 %781, 255
  %788 = tail call i32 @llvm.ctpop.i32(i32 %787) #8
  %789 = trunc i32 %788 to i8
  %790 = and i8 %789, 1
  %791 = xor i8 %790, 1
  store i8 %791, i8* %214, align 1, !tbaa !2446
  %792 = xor i32 %780, %781
  %793 = lshr i32 %792, 4
  %794 = trunc i32 %793 to i8
  %795 = and i8 %794, 1
  store i8 %795, i8* %215, align 1, !tbaa !2447
  %796 = zext i1 %784 to i8
  store i8 %796, i8* %216, align 1, !tbaa !2448
  %797 = lshr i32 %781, 31
  %798 = trunc i32 %797 to i8
  store i8 %798, i8* %217, align 1, !tbaa !2449
  %799 = lshr i32 %780, 31
  %800 = xor i32 %797, %799
  %801 = add nuw nsw i32 %800, %797
  %802 = icmp eq i32 %801, 2
  %803 = zext i1 %802 to i8
  store i8 %803, i8* %218, align 1, !tbaa !2450
  %804 = add i64 %777, 9
  store i64 %804, i64* %PC, align 8
  store i32 %781, i32* %779, align 4
  %805 = load i64, i64* %PC, align 8
  %806 = add i64 %805, -309
  store i64 %806, i64* %PC, align 8, !tbaa !2428
  br label %block_401255

block_4011c0:                                     ; preds = %block_4011b4
  %807 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 24) to i64*), align 8
  store i64 %807, i64* %100, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %808 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 32) to double*), align 16
  store double %808, double* %104, align 1, !tbaa !2452
  store double 0.000000e+00, double* %107, align 1, !tbaa !2452
  %809 = add i64 %1113, -84
  %810 = add i64 %1149, 19
  store i64 %810, i64* %PC, align 8
  %811 = inttoptr i64 %809 to i32*
  %812 = load i32, i32* %811, align 4
  %813 = zext i32 %812 to i64
  store i64 %813, i64* %RAX, align 8, !tbaa !2428
  %814 = sitofp i32 %812 to double
  store double %814, double* %219, align 1, !tbaa !2452
  %815 = add i64 %1149, 26
  store i64 %815, i64* %PC, align 8
  %816 = load i32, i32* %1116, align 4
  %817 = add i32 %816, 1
  %818 = zext i32 %817 to i64
  store i64 %818, i64* %RAX, align 8, !tbaa !2428
  %819 = icmp eq i32 %816, -1
  %820 = icmp eq i32 %817, 0
  %821 = or i1 %819, %820
  %822 = zext i1 %821 to i8
  store i8 %822, i8* %213, align 1, !tbaa !2432
  %823 = and i32 %817, 255
  %824 = tail call i32 @llvm.ctpop.i32(i32 %823) #8
  %825 = trunc i32 %824 to i8
  %826 = and i8 %825, 1
  %827 = xor i8 %826, 1
  store i8 %827, i8* %214, align 1, !tbaa !2446
  %828 = xor i32 %816, %817
  %829 = lshr i32 %828, 4
  %830 = trunc i32 %829 to i8
  %831 = and i8 %830, 1
  store i8 %831, i8* %215, align 1, !tbaa !2447
  %832 = zext i1 %820 to i8
  store i8 %832, i8* %216, align 1, !tbaa !2448
  %833 = lshr i32 %817, 31
  %834 = trunc i32 %833 to i8
  store i8 %834, i8* %217, align 1, !tbaa !2449
  %835 = lshr i32 %816, 31
  %836 = xor i32 %833, %835
  %837 = add nuw nsw i32 %836, %833
  %838 = icmp eq i32 %837, 2
  %839 = zext i1 %838 to i8
  store i8 %839, i8* %218, align 1, !tbaa !2450
  %840 = sitofp i32 %817 to double
  store double %840, double* %1223, align 1, !tbaa !2452
  %841 = fmul double %814, %840
  %842 = fadd double %841, %808
  store double %842, double* %219, align 1, !tbaa !2452
  %843 = add i64 %1149, 44
  store i64 %843, i64* %PC, align 8
  %844 = load i32, i32* %1121, align 4
  %845 = zext i32 %844 to i64
  store i64 %845, i64* %RAX, align 8, !tbaa !2428
  %846 = sitofp i32 %844 to double
  store double %846, double* %104, align 1, !tbaa !2452
  %847 = fdiv double %842, %846
  store double %847, double* %219, align 1, !tbaa !2452
  %848 = add i64 %1113, 16
  %849 = add i64 %1149, 56
  store i64 %849, i64* %PC, align 8
  %850 = inttoptr i64 %848 to i64*
  %851 = load i64, i64* %850, align 8
  store i64 %851, i64* %RCX, align 8, !tbaa !2428
  %852 = add i64 %1149, 60
  store i64 %852, i64* %PC, align 8
  %853 = load i32, i32* %811, align 4
  %854 = sext i32 %853 to i64
  %855 = mul nsw i64 %854, 520
  store i64 %855, i64* %RDX, align 8, !tbaa !2428
  %856 = lshr i64 %855, 63
  %857 = add i64 %855, %851
  store i64 %857, i64* %RCX, align 8, !tbaa !2428
  %858 = icmp ult i64 %857, %851
  %859 = icmp ult i64 %857, %855
  %860 = or i1 %858, %859
  %861 = zext i1 %860 to i8
  store i8 %861, i8* %213, align 1, !tbaa !2432
  %862 = trunc i64 %857 to i32
  %863 = and i32 %862, 255
  %864 = tail call i32 @llvm.ctpop.i32(i32 %863) #8
  %865 = trunc i32 %864 to i8
  %866 = and i8 %865, 1
  %867 = xor i8 %866, 1
  store i8 %867, i8* %214, align 1, !tbaa !2446
  %868 = xor i64 %855, %851
  %869 = xor i64 %868, %857
  %870 = lshr i64 %869, 4
  %871 = trunc i64 %870 to i8
  %872 = and i8 %871, 1
  store i8 %872, i8* %215, align 1, !tbaa !2447
  %873 = icmp eq i64 %857, 0
  %874 = zext i1 %873 to i8
  store i8 %874, i8* %216, align 1, !tbaa !2448
  %875 = lshr i64 %857, 63
  %876 = trunc i64 %875 to i8
  store i8 %876, i8* %217, align 1, !tbaa !2449
  %877 = lshr i64 %851, 63
  %878 = xor i64 %875, %877
  %879 = xor i64 %875, %856
  %880 = add nuw nsw i64 %878, %879
  %881 = icmp eq i64 %880, 2
  %882 = zext i1 %881 to i8
  store i8 %882, i8* %218, align 1, !tbaa !2450
  %883 = load i64, i64* %RBP, align 8
  %884 = add i64 %883, -88
  %885 = add i64 %1149, 74
  store i64 %885, i64* %PC, align 8
  %886 = inttoptr i64 %884 to i32*
  %887 = load i32, i32* %886, align 4
  %888 = sext i32 %887 to i64
  store i64 %888, i64* %RDX, align 8, !tbaa !2428
  %889 = shl nsw i64 %888, 3
  %890 = add i64 %889, %857
  %891 = add i64 %1149, 79
  store i64 %891, i64* %PC, align 8
  %892 = inttoptr i64 %890 to double*
  store double %847, double* %892, align 8
  %893 = load i64, i64* %RBP, align 8
  %894 = add i64 %893, -84
  %895 = load i64, i64* %PC, align 8
  %896 = add i64 %895, 3
  store i64 %896, i64* %PC, align 8
  %897 = inttoptr i64 %894 to i32*
  %898 = load i32, i32* %897, align 4
  %899 = zext i32 %898 to i64
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = sitofp i32 %898 to double
  store double %900, double* %104, align 1, !tbaa !2452
  %901 = add i64 %893, -88
  %902 = add i64 %895, 10
  store i64 %902, i64* %PC, align 8
  %903 = inttoptr i64 %901 to i32*
  %904 = load i32, i32* %903, align 4
  %905 = add i32 %904, 2
  %906 = zext i32 %905 to i64
  store i64 %906, i64* %RAX, align 8, !tbaa !2428
  %907 = icmp ugt i32 %904, -3
  %908 = zext i1 %907 to i8
  store i8 %908, i8* %213, align 1, !tbaa !2432
  %909 = and i32 %905, 255
  %910 = tail call i32 @llvm.ctpop.i32(i32 %909) #8
  %911 = trunc i32 %910 to i8
  %912 = and i8 %911, 1
  %913 = xor i8 %912, 1
  store i8 %913, i8* %214, align 1, !tbaa !2446
  %914 = xor i32 %904, %905
  %915 = lshr i32 %914, 4
  %916 = trunc i32 %915 to i8
  %917 = and i8 %916, 1
  store i8 %917, i8* %215, align 1, !tbaa !2447
  %918 = icmp eq i32 %905, 0
  %919 = zext i1 %918 to i8
  store i8 %919, i8* %216, align 1, !tbaa !2448
  %920 = lshr i32 %905, 31
  %921 = trunc i32 %920 to i8
  store i8 %921, i8* %217, align 1, !tbaa !2449
  %922 = lshr i32 %904, 31
  %923 = xor i32 %920, %922
  %924 = add nuw nsw i32 %923, %920
  %925 = icmp eq i32 %924, 2
  %926 = zext i1 %925 to i8
  store i8 %926, i8* %218, align 1, !tbaa !2450
  %927 = sitofp i32 %905 to double
  store double %927, double* %219, align 1, !tbaa !2452
  %928 = fmul double %900, %927
  %929 = load double, double* %99, align 1
  %930 = fadd double %928, %929
  store double %930, double* %104, align 1, !tbaa !2452
  %931 = add i64 %893, -52
  %932 = add i64 %895, 28
  store i64 %932, i64* %PC, align 8
  %933 = inttoptr i64 %931 to i32*
  %934 = load i32, i32* %933, align 4
  %935 = zext i32 %934 to i64
  store i64 %935, i64* %RAX, align 8, !tbaa !2428
  %936 = sitofp i32 %934 to double
  store double %936, double* %99, align 1, !tbaa !2452
  %937 = fdiv double %930, %936
  store double %937, double* %104, align 1, !tbaa !2452
  %938 = add i64 %893, -80
  %939 = add i64 %895, 40
  store i64 %939, i64* %PC, align 8
  %940 = inttoptr i64 %938 to i64*
  %941 = load i64, i64* %940, align 8
  store i64 %941, i64* %RCX, align 8, !tbaa !2428
  %942 = add i64 %895, 44
  store i64 %942, i64* %PC, align 8
  %943 = load i32, i32* %897, align 4
  %944 = sext i32 %943 to i64
  %945 = mul nsw i64 %944, 520
  store i64 %945, i64* %RDX, align 8, !tbaa !2428
  %946 = lshr i64 %945, 63
  %947 = add i64 %945, %941
  store i64 %947, i64* %RCX, align 8, !tbaa !2428
  %948 = icmp ult i64 %947, %941
  %949 = icmp ult i64 %947, %945
  %950 = or i1 %948, %949
  %951 = zext i1 %950 to i8
  store i8 %951, i8* %213, align 1, !tbaa !2432
  %952 = trunc i64 %947 to i32
  %953 = and i32 %952, 255
  %954 = tail call i32 @llvm.ctpop.i32(i32 %953) #8
  %955 = trunc i32 %954 to i8
  %956 = and i8 %955, 1
  %957 = xor i8 %956, 1
  store i8 %957, i8* %214, align 1, !tbaa !2446
  %958 = xor i64 %945, %941
  %959 = xor i64 %958, %947
  %960 = lshr i64 %959, 4
  %961 = trunc i64 %960 to i8
  %962 = and i8 %961, 1
  store i8 %962, i8* %215, align 1, !tbaa !2447
  %963 = icmp eq i64 %947, 0
  %964 = zext i1 %963 to i8
  store i8 %964, i8* %216, align 1, !tbaa !2448
  %965 = lshr i64 %947, 63
  %966 = trunc i64 %965 to i8
  store i8 %966, i8* %217, align 1, !tbaa !2449
  %967 = lshr i64 %941, 63
  %968 = xor i64 %965, %967
  %969 = xor i64 %965, %946
  %970 = add nuw nsw i64 %968, %969
  %971 = icmp eq i64 %970, 2
  %972 = zext i1 %971 to i8
  store i8 %972, i8* %218, align 1, !tbaa !2450
  %973 = load i64, i64* %RBP, align 8
  %974 = add i64 %973, -88
  %975 = add i64 %895, 58
  store i64 %975, i64* %PC, align 8
  %976 = inttoptr i64 %974 to i32*
  %977 = load i32, i32* %976, align 4
  %978 = sext i32 %977 to i64
  store i64 %978, i64* %RDX, align 8, !tbaa !2428
  %979 = shl nsw i64 %978, 3
  %980 = add i64 %979, %947
  %981 = add i64 %895, 63
  store i64 %981, i64* %PC, align 8
  %982 = inttoptr i64 %980 to double*
  store double %937, double* %982, align 8
  %983 = load i64, i64* %RBP, align 8
  %984 = add i64 %983, -92
  %985 = load i64, i64* %PC, align 8
  %986 = add i64 %985, 7
  store i64 %986, i64* %PC, align 8
  %987 = inttoptr i64 %984 to i32*
  store i32 0, i32* %987, align 4
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_401255

block_401136:                                     ; preds = %block_40112a
  %988 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 64) to i64*), align 16
  store i64 %988, i64* %100, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %989 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 72) to double*), align 8
  store double %989, double* %104, align 1, !tbaa !2452
  store double 0.000000e+00, double* %107, align 1, !tbaa !2452
  %990 = add i64 %1187, 19
  store i64 %990, i64* %PC, align 8
  %991 = load i32, i32* %1154, align 4
  %992 = zext i32 %991 to i64
  store i64 %992, i64* %RAX, align 8, !tbaa !2428
  %993 = sitofp i32 %991 to double
  %994 = fadd double %993, %989
  store double %994, double* %219, align 1, !tbaa !2452
  %995 = add i64 %1151, -48
  %996 = add i64 %1187, 30
  store i64 %996, i64* %PC, align 8
  %997 = inttoptr i64 %995 to i32*
  %998 = load i32, i32* %997, align 4
  %999 = zext i32 %998 to i64
  store i64 %999, i64* %RAX, align 8, !tbaa !2428
  %1000 = sitofp i32 %998 to double
  store double %1000, double* %104, align 1, !tbaa !2452
  %1001 = fdiv double %994, %1000
  store double %1001, double* %219, align 1, !tbaa !2452
  %1002 = add i64 %1151, 80
  %1003 = add i64 %1187, 42
  store i64 %1003, i64* %PC, align 8
  %1004 = inttoptr i64 %1002 to i64*
  %1005 = load i64, i64* %1004, align 8
  store i64 %1005, i64* %RCX, align 8, !tbaa !2428
  %1006 = add i64 %1187, 46
  store i64 %1006, i64* %PC, align 8
  %1007 = load i32, i32* %1154, align 4
  %1008 = sext i32 %1007 to i64
  store i64 %1008, i64* %RDX, align 8, !tbaa !2428
  %1009 = shl nsw i64 %1008, 3
  %1010 = add i64 %1009, %1005
  %1011 = add i64 %1187, 51
  store i64 %1011, i64* %PC, align 8
  %1012 = inttoptr i64 %1010 to double*
  store double %1001, double* %1012, align 8
  %1013 = load i64, i64* %RBP, align 8
  %1014 = add i64 %1013, -84
  %1015 = load i64, i64* %PC, align 8
  %1016 = add i64 %1015, 3
  store i64 %1016, i64* %PC, align 8
  %1017 = inttoptr i64 %1014 to i32*
  %1018 = load i32, i32* %1017, align 4
  %1019 = zext i32 %1018 to i64
  store i64 %1019, i64* %RAX, align 8, !tbaa !2428
  %1020 = sitofp i32 %1018 to double
  %1021 = load double, double* %99, align 1
  %1022 = fadd double %1020, %1021
  store double %1022, double* %104, align 1, !tbaa !2452
  %1023 = add i64 %1013, -48
  %1024 = add i64 %1015, 14
  store i64 %1024, i64* %PC, align 8
  %1025 = inttoptr i64 %1023 to i32*
  %1026 = load i32, i32* %1025, align 4
  %1027 = zext i32 %1026 to i64
  store i64 %1027, i64* %RAX, align 8, !tbaa !2428
  %1028 = sitofp i32 %1026 to double
  store double %1028, double* %99, align 1, !tbaa !2452
  %1029 = fdiv double %1022, %1028
  store double %1029, double* %104, align 1, !tbaa !2452
  %1030 = add i64 %1013, 88
  %1031 = add i64 %1015, 26
  store i64 %1031, i64* %PC, align 8
  %1032 = inttoptr i64 %1030 to i64*
  %1033 = load i64, i64* %1032, align 8
  store i64 %1033, i64* %RCX, align 8, !tbaa !2428
  %1034 = add i64 %1015, 30
  store i64 %1034, i64* %PC, align 8
  %1035 = load i32, i32* %1017, align 4
  %1036 = sext i32 %1035 to i64
  store i64 %1036, i64* %RDX, align 8, !tbaa !2428
  %1037 = shl nsw i64 %1036, 3
  %1038 = add i64 %1037, %1033
  %1039 = add i64 %1015, 35
  store i64 %1039, i64* %PC, align 8
  %1040 = inttoptr i64 %1038 to double*
  store double %1029, double* %1040, align 8
  %1041 = load i64, i64* %RBP, align 8
  %1042 = add i64 %1041, -84
  %1043 = load i64, i64* %PC, align 8
  %1044 = add i64 %1043, 3
  store i64 %1044, i64* %PC, align 8
  %1045 = inttoptr i64 %1042 to i32*
  %1046 = load i32, i32* %1045, align 4
  %1047 = add i32 %1046, 1
  %1048 = zext i32 %1047 to i64
  store i64 %1048, i64* %RAX, align 8, !tbaa !2428
  %1049 = icmp eq i32 %1046, -1
  %1050 = icmp eq i32 %1047, 0
  %1051 = or i1 %1049, %1050
  %1052 = zext i1 %1051 to i8
  store i8 %1052, i8* %213, align 1, !tbaa !2432
  %1053 = and i32 %1047, 255
  %1054 = tail call i32 @llvm.ctpop.i32(i32 %1053) #8
  %1055 = trunc i32 %1054 to i8
  %1056 = and i8 %1055, 1
  %1057 = xor i8 %1056, 1
  store i8 %1057, i8* %214, align 1, !tbaa !2446
  %1058 = xor i32 %1046, %1047
  %1059 = lshr i32 %1058, 4
  %1060 = trunc i32 %1059 to i8
  %1061 = and i8 %1060, 1
  store i8 %1061, i8* %215, align 1, !tbaa !2447
  %1062 = zext i1 %1050 to i8
  store i8 %1062, i8* %216, align 1, !tbaa !2448
  %1063 = lshr i32 %1047, 31
  %1064 = trunc i32 %1063 to i8
  store i8 %1064, i8* %217, align 1, !tbaa !2449
  %1065 = lshr i32 %1046, 31
  %1066 = xor i32 %1063, %1065
  %1067 = add nuw nsw i32 %1066, %1063
  %1068 = icmp eq i32 %1067, 2
  %1069 = zext i1 %1068 to i8
  store i8 %1069, i8* %218, align 1, !tbaa !2450
  %1070 = add i64 %1043, 9
  store i64 %1070, i64* %PC, align 8
  store i32 %1047, i32* %1045, align 4
  %1071 = load i64, i64* %PC, align 8
  %1072 = add i64 %1071, -107
  store i64 %1072, i64* %PC, align 8, !tbaa !2428
  br label %block_40112a

block_4010ac:                                     ; preds = %block_40103c
  %1073 = add i64 %1386, 7
  store i64 %1073, i64* %PC, align 8
  store i32 0, i32* %1353, align 4
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_4010b3

block_401255:                                     ; preds = %block_4011c0, %block_401261
  %1074 = phi i64 [ %.pre5, %block_4011c0 ], [ %806, %block_401261 ]
  %1075 = load i64, i64* %RBP, align 8
  %1076 = add i64 %1075, -92
  %1077 = add i64 %1074, 3
  store i64 %1077, i64* %PC, align 8
  %1078 = inttoptr i64 %1076 to i32*
  %1079 = load i32, i32* %1078, align 4
  %1080 = zext i32 %1079 to i64
  store i64 %1080, i64* %RAX, align 8, !tbaa !2428
  %1081 = add i64 %1075, -48
  %1082 = add i64 %1074, 6
  store i64 %1082, i64* %PC, align 8
  %1083 = inttoptr i64 %1081 to i32*
  %1084 = load i32, i32* %1083, align 4
  %1085 = sub i32 %1079, %1084
  %1086 = icmp ult i32 %1079, %1084
  %1087 = zext i1 %1086 to i8
  store i8 %1087, i8* %213, align 1, !tbaa !2432
  %1088 = and i32 %1085, 255
  %1089 = tail call i32 @llvm.ctpop.i32(i32 %1088) #8
  %1090 = trunc i32 %1089 to i8
  %1091 = and i8 %1090, 1
  %1092 = xor i8 %1091, 1
  store i8 %1092, i8* %214, align 1, !tbaa !2446
  %1093 = xor i32 %1084, %1079
  %1094 = xor i32 %1093, %1085
  %1095 = lshr i32 %1094, 4
  %1096 = trunc i32 %1095 to i8
  %1097 = and i8 %1096, 1
  store i8 %1097, i8* %215, align 1, !tbaa !2447
  %1098 = icmp eq i32 %1085, 0
  %1099 = zext i1 %1098 to i8
  store i8 %1099, i8* %216, align 1, !tbaa !2448
  %1100 = lshr i32 %1085, 31
  %1101 = trunc i32 %1100 to i8
  store i8 %1101, i8* %217, align 1, !tbaa !2449
  %1102 = lshr i32 %1079, 31
  %1103 = lshr i32 %1084, 31
  %1104 = xor i32 %1103, %1102
  %1105 = xor i32 %1100, %1102
  %1106 = add nuw nsw i32 %1105, %1104
  %1107 = icmp eq i32 %1106, 2
  %1108 = zext i1 %1107 to i8
  store i8 %1108, i8* %218, align 1, !tbaa !2450
  %1109 = icmp ne i8 %1101, 0
  %1110 = xor i1 %1109, %1107
  %.demorgan14 = or i1 %1098, %1110
  %.v15 = select i1 %.demorgan14, i64 12, i64 314
  %1111 = add i64 %1074, %.v15
  store i64 %1111, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan14, label %block_401261, label %block_40138f

block_4011b4:                                     ; preds = %block_40138f, %block_4011ad
  %1112 = phi i64 [ %1416, %block_40138f ], [ %.pre4, %block_4011ad ]
  %1113 = load i64, i64* %RBP, align 8
  %1114 = add i64 %1113, -88
  %1115 = add i64 %1112, 3
  store i64 %1115, i64* %PC, align 8
  %1116 = inttoptr i64 %1114 to i32*
  %1117 = load i32, i32* %1116, align 4
  %1118 = zext i32 %1117 to i64
  store i64 %1118, i64* %RAX, align 8, !tbaa !2428
  %1119 = add i64 %1113, -52
  %1120 = add i64 %1112, 6
  store i64 %1120, i64* %PC, align 8
  %1121 = inttoptr i64 %1119 to i32*
  %1122 = load i32, i32* %1121, align 4
  %1123 = sub i32 %1117, %1122
  %1124 = icmp ult i32 %1117, %1122
  %1125 = zext i1 %1124 to i8
  store i8 %1125, i8* %213, align 1, !tbaa !2432
  %1126 = and i32 %1123, 255
  %1127 = tail call i32 @llvm.ctpop.i32(i32 %1126) #8
  %1128 = trunc i32 %1127 to i8
  %1129 = and i8 %1128, 1
  %1130 = xor i8 %1129, 1
  store i8 %1130, i8* %214, align 1, !tbaa !2446
  %1131 = xor i32 %1122, %1117
  %1132 = xor i32 %1131, %1123
  %1133 = lshr i32 %1132, 4
  %1134 = trunc i32 %1133 to i8
  %1135 = and i8 %1134, 1
  store i8 %1135, i8* %215, align 1, !tbaa !2447
  %1136 = icmp eq i32 %1123, 0
  %1137 = zext i1 %1136 to i8
  store i8 %1137, i8* %216, align 1, !tbaa !2448
  %1138 = lshr i32 %1123, 31
  %1139 = trunc i32 %1138 to i8
  store i8 %1139, i8* %217, align 1, !tbaa !2449
  %1140 = lshr i32 %1117, 31
  %1141 = lshr i32 %1122, 31
  %1142 = xor i32 %1141, %1140
  %1143 = xor i32 %1138, %1140
  %1144 = add nuw nsw i32 %1143, %1142
  %1145 = icmp eq i32 %1144, 2
  %1146 = zext i1 %1145 to i8
  store i8 %1146, i8* %218, align 1, !tbaa !2450
  %1147 = icmp ne i8 %1139, 0
  %1148 = xor i1 %1147, %1145
  %.demorgan12 = or i1 %1136, %1148
  %.v13 = select i1 %.demorgan12, i64 12, i64 494
  %1149 = add i64 %1112, %.v13
  store i64 %1149, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan12, label %block_4011c0, label %block_4013a2

block_40112a:                                     ; preds = %block_401123, %block_401136
  %1150 = phi i64 [ %.pre2, %block_401123 ], [ %1072, %block_401136 ]
  %1151 = load i64, i64* %RBP, align 8
  %1152 = add i64 %1151, -84
  %1153 = add i64 %1150, 3
  store i64 %1153, i64* %PC, align 8
  %1154 = inttoptr i64 %1152 to i32*
  %1155 = load i32, i32* %1154, align 4
  %1156 = zext i32 %1155 to i64
  store i64 %1156, i64* %RAX, align 8, !tbaa !2428
  %1157 = add i64 %1151, -52
  %1158 = add i64 %1150, 6
  store i64 %1158, i64* %PC, align 8
  %1159 = inttoptr i64 %1157 to i32*
  %1160 = load i32, i32* %1159, align 4
  %1161 = sub i32 %1155, %1160
  %1162 = icmp ult i32 %1155, %1160
  %1163 = zext i1 %1162 to i8
  store i8 %1163, i8* %213, align 1, !tbaa !2432
  %1164 = and i32 %1161, 255
  %1165 = tail call i32 @llvm.ctpop.i32(i32 %1164) #8
  %1166 = trunc i32 %1165 to i8
  %1167 = and i8 %1166, 1
  %1168 = xor i8 %1167, 1
  store i8 %1168, i8* %214, align 1, !tbaa !2446
  %1169 = xor i32 %1160, %1155
  %1170 = xor i32 %1169, %1161
  %1171 = lshr i32 %1170, 4
  %1172 = trunc i32 %1171 to i8
  %1173 = and i8 %1172, 1
  store i8 %1173, i8* %215, align 1, !tbaa !2447
  %1174 = icmp eq i32 %1161, 0
  %1175 = zext i1 %1174 to i8
  store i8 %1175, i8* %216, align 1, !tbaa !2448
  %1176 = lshr i32 %1161, 31
  %1177 = trunc i32 %1176 to i8
  store i8 %1177, i8* %217, align 1, !tbaa !2449
  %1178 = lshr i32 %1155, 31
  %1179 = lshr i32 %1160, 31
  %1180 = xor i32 %1179, %1178
  %1181 = xor i32 %1176, %1178
  %1182 = add nuw nsw i32 %1181, %1180
  %1183 = icmp eq i32 %1182, 2
  %1184 = zext i1 %1183 to i8
  store i8 %1184, i8* %218, align 1, !tbaa !2450
  %1185 = icmp ne i8 %1177, 0
  %1186 = xor i1 %1185, %1183
  %.demorgan8 = or i1 %1174, %1186
  %.v9 = select i1 %.demorgan8, i64 12, i64 112
  %1187 = add i64 %1150, %.v9
  store i64 %1187, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan8, label %block_401136, label %block_40119a

block_4011ad:                                     ; preds = %block_4011a1
  %1188 = add i64 %1312, -88
  %1189 = add i64 %1348, 7
  store i64 %1189, i64* %PC, align 8
  %1190 = inttoptr i64 %1188 to i32*
  store i32 0, i32* %1190, align 4
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_4011b4

block_401123:                                     ; preds = %block_4010b3
  %1191 = add i64 %392, 7
  store i64 %1191, i64* %PC, align 8
  store i32 0, i32* %359, align 4
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_40112a

block_4013a2:                                     ; preds = %block_4011b4
  %1192 = add i64 %1113, -84
  %1193 = add i64 %1149, 8
  store i64 %1193, i64* %PC, align 8
  %1194 = inttoptr i64 %1192 to i32*
  %1195 = load i32, i32* %1194, align 4
  %1196 = add i32 %1195, 1
  %1197 = zext i32 %1196 to i64
  store i64 %1197, i64* %RAX, align 8, !tbaa !2428
  %1198 = icmp eq i32 %1195, -1
  %1199 = icmp eq i32 %1196, 0
  %1200 = or i1 %1198, %1199
  %1201 = zext i1 %1200 to i8
  store i8 %1201, i8* %213, align 1, !tbaa !2432
  %1202 = and i32 %1196, 255
  %1203 = tail call i32 @llvm.ctpop.i32(i32 %1202) #8
  %1204 = trunc i32 %1203 to i8
  %1205 = and i8 %1204, 1
  %1206 = xor i8 %1205, 1
  store i8 %1206, i8* %214, align 1, !tbaa !2446
  %1207 = xor i32 %1195, %1196
  %1208 = lshr i32 %1207, 4
  %1209 = trunc i32 %1208 to i8
  %1210 = and i8 %1209, 1
  store i8 %1210, i8* %215, align 1, !tbaa !2447
  %1211 = zext i1 %1199 to i8
  store i8 %1211, i8* %216, align 1, !tbaa !2448
  %1212 = lshr i32 %1196, 31
  %1213 = trunc i32 %1212 to i8
  store i8 %1213, i8* %217, align 1, !tbaa !2449
  %1214 = lshr i32 %1195, 31
  %1215 = xor i32 %1212, %1214
  %1216 = add nuw nsw i32 %1215, %1212
  %1217 = icmp eq i32 %1216, 2
  %1218 = zext i1 %1217 to i8
  store i8 %1218, i8* %218, align 1, !tbaa !2450
  %1219 = add i64 %1149, 14
  store i64 %1219, i64* %PC, align 8
  store i32 %1196, i32* %1194, align 4
  %1220 = load i64, i64* %PC, align 8
  %1221 = add i64 %1220, -527
  store i64 %1221, i64* %PC, align 8, !tbaa !2428
  br label %block_4011a1

block_40119a:                                     ; preds = %block_40112a
  %1222 = add i64 %1187, 7
  store i64 %1222, i64* %PC, align 8
  store i32 0, i32* %1154, align 4
  %1223 = bitcast %union.VectorReg* %9 to double*
  %1224 = bitcast i64* %220 to double*
  %1225 = bitcast %union.VectorReg* %10 to double*
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_4011a1

block_401048:                                     ; preds = %block_40103c
  %1226 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 48) to i64*), align 16
  store i64 %1226, i64* %100, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %1227 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 56) to double*), align 8
  store double %1227, double* %104, align 1, !tbaa !2452
  store double 0.000000e+00, double* %107, align 1, !tbaa !2452
  %1228 = add i64 %1386, 19
  store i64 %1228, i64* %PC, align 8
  %1229 = load i32, i32* %1353, align 4
  %1230 = zext i32 %1229 to i64
  store i64 %1230, i64* %RAX, align 8, !tbaa !2428
  %1231 = sitofp i32 %1229 to double
  %1232 = fadd double %1231, %1227
  store double %1232, double* %219, align 1, !tbaa !2452
  %1233 = add i64 %1350, -48
  %1234 = add i64 %1386, 30
  store i64 %1234, i64* %PC, align 8
  %1235 = inttoptr i64 %1233 to i32*
  %1236 = load i32, i32* %1235, align 4
  %1237 = zext i32 %1236 to i64
  store i64 %1237, i64* %RAX, align 8, !tbaa !2428
  %1238 = sitofp i32 %1236 to double
  store double %1238, double* %104, align 1, !tbaa !2452
  %1239 = fdiv double %1232, %1238
  store double %1239, double* %219, align 1, !tbaa !2452
  %1240 = add i64 %1350, 48
  %1241 = add i64 %1386, 42
  store i64 %1241, i64* %PC, align 8
  %1242 = inttoptr i64 %1240 to i64*
  %1243 = load i64, i64* %1242, align 8
  store i64 %1243, i64* %RCX, align 8, !tbaa !2428
  %1244 = add i64 %1386, 46
  store i64 %1244, i64* %PC, align 8
  %1245 = load i32, i32* %1353, align 4
  %1246 = sext i32 %1245 to i64
  store i64 %1246, i64* %RDX, align 8, !tbaa !2428
  %1247 = shl nsw i64 %1246, 3
  %1248 = add i64 %1247, %1243
  %1249 = add i64 %1386, 51
  store i64 %1249, i64* %PC, align 8
  %1250 = inttoptr i64 %1248 to double*
  store double %1239, double* %1250, align 8
  %1251 = load i64, i64* %RBP, align 8
  %1252 = add i64 %1251, -84
  %1253 = load i64, i64* %PC, align 8
  %1254 = add i64 %1253, 3
  store i64 %1254, i64* %PC, align 8
  %1255 = inttoptr i64 %1252 to i32*
  %1256 = load i32, i32* %1255, align 4
  %1257 = zext i32 %1256 to i64
  store i64 %1257, i64* %RAX, align 8, !tbaa !2428
  %1258 = sitofp i32 %1256 to double
  %1259 = load double, double* %99, align 1
  %1260 = fadd double %1258, %1259
  store double %1260, double* %104, align 1, !tbaa !2452
  %1261 = add i64 %1251, -48
  %1262 = add i64 %1253, 14
  store i64 %1262, i64* %PC, align 8
  %1263 = inttoptr i64 %1261 to i32*
  %1264 = load i32, i32* %1263, align 4
  %1265 = zext i32 %1264 to i64
  store i64 %1265, i64* %RAX, align 8, !tbaa !2428
  %1266 = sitofp i32 %1264 to double
  store double %1266, double* %99, align 1, !tbaa !2452
  %1267 = fdiv double %1260, %1266
  store double %1267, double* %104, align 1, !tbaa !2452
  %1268 = add i64 %1251, 56
  %1269 = add i64 %1253, 26
  store i64 %1269, i64* %PC, align 8
  %1270 = inttoptr i64 %1268 to i64*
  %1271 = load i64, i64* %1270, align 8
  store i64 %1271, i64* %RCX, align 8, !tbaa !2428
  %1272 = add i64 %1253, 30
  store i64 %1272, i64* %PC, align 8
  %1273 = load i32, i32* %1255, align 4
  %1274 = sext i32 %1273 to i64
  store i64 %1274, i64* %RDX, align 8, !tbaa !2428
  %1275 = shl nsw i64 %1274, 3
  %1276 = add i64 %1275, %1271
  %1277 = add i64 %1253, 35
  store i64 %1277, i64* %PC, align 8
  %1278 = inttoptr i64 %1276 to double*
  store double %1267, double* %1278, align 8
  %1279 = load i64, i64* %RBP, align 8
  %1280 = add i64 %1279, -84
  %1281 = load i64, i64* %PC, align 8
  %1282 = add i64 %1281, 3
  store i64 %1282, i64* %PC, align 8
  %1283 = inttoptr i64 %1280 to i32*
  %1284 = load i32, i32* %1283, align 4
  %1285 = add i32 %1284, 1
  %1286 = zext i32 %1285 to i64
  store i64 %1286, i64* %RAX, align 8, !tbaa !2428
  %1287 = icmp eq i32 %1284, -1
  %1288 = icmp eq i32 %1285, 0
  %1289 = or i1 %1287, %1288
  %1290 = zext i1 %1289 to i8
  store i8 %1290, i8* %213, align 1, !tbaa !2432
  %1291 = and i32 %1285, 255
  %1292 = tail call i32 @llvm.ctpop.i32(i32 %1291) #8
  %1293 = trunc i32 %1292 to i8
  %1294 = and i8 %1293, 1
  %1295 = xor i8 %1294, 1
  store i8 %1295, i8* %214, align 1, !tbaa !2446
  %1296 = xor i32 %1284, %1285
  %1297 = lshr i32 %1296, 4
  %1298 = trunc i32 %1297 to i8
  %1299 = and i8 %1298, 1
  store i8 %1299, i8* %215, align 1, !tbaa !2447
  %1300 = zext i1 %1288 to i8
  store i8 %1300, i8* %216, align 1, !tbaa !2448
  %1301 = lshr i32 %1285, 31
  %1302 = trunc i32 %1301 to i8
  store i8 %1302, i8* %217, align 1, !tbaa !2449
  %1303 = lshr i32 %1284, 31
  %1304 = xor i32 %1301, %1303
  %1305 = add nuw nsw i32 %1304, %1301
  %1306 = icmp eq i32 %1305, 2
  %1307 = zext i1 %1306 to i8
  store i8 %1307, i8* %218, align 1, !tbaa !2450
  %1308 = add i64 %1281, 9
  store i64 %1308, i64* %PC, align 8
  store i32 %1285, i32* %1283, align 4
  %1309 = load i64, i64* %PC, align 8
  %1310 = add i64 %1309, -107
  store i64 %1310, i64* %PC, align 8, !tbaa !2428
  br label %block_40103c

block_4011a1:                                     ; preds = %block_40119a, %block_4013a2
  %1311 = phi i64 [ %.pre3, %block_40119a ], [ %1221, %block_4013a2 ]
  %1312 = load i64, i64* %RBP, align 8
  %1313 = add i64 %1312, -84
  %1314 = add i64 %1311, 3
  store i64 %1314, i64* %PC, align 8
  %1315 = inttoptr i64 %1313 to i32*
  %1316 = load i32, i32* %1315, align 4
  %1317 = zext i32 %1316 to i64
  store i64 %1317, i64* %RAX, align 8, !tbaa !2428
  %1318 = add i64 %1312, -44
  %1319 = add i64 %1311, 6
  store i64 %1319, i64* %PC, align 8
  %1320 = inttoptr i64 %1318 to i32*
  %1321 = load i32, i32* %1320, align 4
  %1322 = sub i32 %1316, %1321
  %1323 = icmp ult i32 %1316, %1321
  %1324 = zext i1 %1323 to i8
  store i8 %1324, i8* %213, align 1, !tbaa !2432
  %1325 = and i32 %1322, 255
  %1326 = tail call i32 @llvm.ctpop.i32(i32 %1325) #8
  %1327 = trunc i32 %1326 to i8
  %1328 = and i8 %1327, 1
  %1329 = xor i8 %1328, 1
  store i8 %1329, i8* %214, align 1, !tbaa !2446
  %1330 = xor i32 %1321, %1316
  %1331 = xor i32 %1330, %1322
  %1332 = lshr i32 %1331, 4
  %1333 = trunc i32 %1332 to i8
  %1334 = and i8 %1333, 1
  store i8 %1334, i8* %215, align 1, !tbaa !2447
  %1335 = icmp eq i32 %1322, 0
  %1336 = zext i1 %1335 to i8
  store i8 %1336, i8* %216, align 1, !tbaa !2448
  %1337 = lshr i32 %1322, 31
  %1338 = trunc i32 %1337 to i8
  store i8 %1338, i8* %217, align 1, !tbaa !2449
  %1339 = lshr i32 %1316, 31
  %1340 = lshr i32 %1321, 31
  %1341 = xor i32 %1340, %1339
  %1342 = xor i32 %1337, %1339
  %1343 = add nuw nsw i32 %1342, %1341
  %1344 = icmp eq i32 %1343, 2
  %1345 = zext i1 %1344 to i8
  store i8 %1345, i8* %218, align 1, !tbaa !2450
  %1346 = icmp ne i8 %1338, 0
  %1347 = xor i1 %1346, %1344
  %.demorgan10 = or i1 %1335, %1347
  %.v11 = select i1 %.demorgan10, i64 12, i64 532
  %1348 = add i64 %1311, %.v11
  store i64 %1348, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan10, label %block_4011ad, label %block_4013b5

block_40103c:                                     ; preds = %block_401048, %block_400f90
  %1349 = phi i64 [ %1310, %block_401048 ], [ %.pre, %block_400f90 ]
  %1350 = load i64, i64* %RBP, align 8
  %1351 = add i64 %1350, -84
  %1352 = add i64 %1349, 3
  store i64 %1352, i64* %PC, align 8
  %1353 = inttoptr i64 %1351 to i32*
  %1354 = load i32, i32* %1353, align 4
  %1355 = zext i32 %1354 to i64
  store i64 %1355, i64* %RAX, align 8, !tbaa !2428
  %1356 = add i64 %1350, -44
  %1357 = add i64 %1349, 6
  store i64 %1357, i64* %PC, align 8
  %1358 = inttoptr i64 %1356 to i32*
  %1359 = load i32, i32* %1358, align 4
  %1360 = sub i32 %1354, %1359
  %1361 = icmp ult i32 %1354, %1359
  %1362 = zext i1 %1361 to i8
  store i8 %1362, i8* %213, align 1, !tbaa !2432
  %1363 = and i32 %1360, 255
  %1364 = tail call i32 @llvm.ctpop.i32(i32 %1363) #8
  %1365 = trunc i32 %1364 to i8
  %1366 = and i8 %1365, 1
  %1367 = xor i8 %1366, 1
  store i8 %1367, i8* %214, align 1, !tbaa !2446
  %1368 = xor i32 %1359, %1354
  %1369 = xor i32 %1368, %1360
  %1370 = lshr i32 %1369, 4
  %1371 = trunc i32 %1370 to i8
  %1372 = and i8 %1371, 1
  store i8 %1372, i8* %215, align 1, !tbaa !2447
  %1373 = icmp eq i32 %1360, 0
  %1374 = zext i1 %1373 to i8
  store i8 %1374, i8* %216, align 1, !tbaa !2448
  %1375 = lshr i32 %1360, 31
  %1376 = trunc i32 %1375 to i8
  store i8 %1376, i8* %217, align 1, !tbaa !2449
  %1377 = lshr i32 %1354, 31
  %1378 = lshr i32 %1359, 31
  %1379 = xor i32 %1378, %1377
  %1380 = xor i32 %1375, %1377
  %1381 = add nuw nsw i32 %1380, %1379
  %1382 = icmp eq i32 %1381, 2
  %1383 = zext i1 %1382 to i8
  store i8 %1383, i8* %218, align 1, !tbaa !2450
  %1384 = icmp ne i8 %1376, 0
  %1385 = xor i1 %1384, %1382
  %.demorgan = or i1 %1373, %1385
  %.v = select i1 %.demorgan, i64 12, i64 112
  %1386 = add i64 %1349, %.v
  store i64 %1386, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan, label %block_401048, label %block_4010ac

block_40138f:                                     ; preds = %block_401255
  %1387 = add i64 %1075, -88
  %1388 = add i64 %1111, 8
  store i64 %1388, i64* %PC, align 8
  %1389 = inttoptr i64 %1387 to i32*
  %1390 = load i32, i32* %1389, align 4
  %1391 = add i32 %1390, 1
  %1392 = zext i32 %1391 to i64
  store i64 %1392, i64* %RAX, align 8, !tbaa !2428
  %1393 = icmp eq i32 %1390, -1
  %1394 = icmp eq i32 %1391, 0
  %1395 = or i1 %1393, %1394
  %1396 = zext i1 %1395 to i8
  store i8 %1396, i8* %213, align 1, !tbaa !2432
  %1397 = and i32 %1391, 255
  %1398 = tail call i32 @llvm.ctpop.i32(i32 %1397) #8
  %1399 = trunc i32 %1398 to i8
  %1400 = and i8 %1399, 1
  %1401 = xor i8 %1400, 1
  store i8 %1401, i8* %214, align 1, !tbaa !2446
  %1402 = xor i32 %1390, %1391
  %1403 = lshr i32 %1402, 4
  %1404 = trunc i32 %1403 to i8
  %1405 = and i8 %1404, 1
  store i8 %1405, i8* %215, align 1, !tbaa !2447
  %1406 = zext i1 %1394 to i8
  store i8 %1406, i8* %216, align 1, !tbaa !2448
  %1407 = lshr i32 %1391, 31
  %1408 = trunc i32 %1407 to i8
  store i8 %1408, i8* %217, align 1, !tbaa !2449
  %1409 = lshr i32 %1390, 31
  %1410 = xor i32 %1407, %1409
  %1411 = add nuw nsw i32 %1410, %1407
  %1412 = icmp eq i32 %1411, 2
  %1413 = zext i1 %1412 to i8
  store i8 %1413, i8* %218, align 1, !tbaa !2450
  %1414 = add i64 %1111, 14
  store i64 %1414, i64* %PC, align 8
  store i32 %1391, i32* %1389, align 4
  %1415 = load i64, i64* %PC, align 8
  %1416 = add i64 %1415, -489
  store i64 %1416, i64* %PC, align 8, !tbaa !2428
  br label %block_4011b4
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007c0_polybench_alloc_data(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4007c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -12
  %44 = load i32, i32* %ESI, align 4
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i32*
  store i32 %44, i32* %47, align 4
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -24
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  store i64 %53, i64* %56, align 8
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -12
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = sext i32 %62 to i64
  store i64 %63, i64* %RDI, align 8, !tbaa !2428
  %64 = add i64 %57, -24
  %65 = add i64 %59, 9
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = sext i32 %62 to i128
  %69 = and i128 %68, -18446744073709551616
  %70 = sext i64 %67 to i128
  %71 = and i128 %70, -18446744073709551616
  %72 = zext i64 %63 to i128
  %73 = or i128 %69, %72
  %74 = zext i64 %67 to i128
  %75 = or i128 %71, %74
  %76 = mul nsw i128 %75, %73
  %77 = trunc i128 %76 to i64
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = sext i64 %77 to i128
  %79 = icmp ne i128 %78, %76
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %13, align 1, !tbaa !2432
  %81 = trunc i128 %76 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #8
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  store i8 0, i8* %28, align 1, !tbaa !2448
  %87 = lshr i64 %77, 63
  %88 = trunc i64 %87 to i8
  store i8 %88, i8* %31, align 1, !tbaa !2449
  store i8 %80, i8* %37, align 1, !tbaa !2450
  %89 = add i64 %59, 13
  store i64 %89, i64* %PC, align 8
  store i64 %77, i64* %66, align 8
  %90 = load i64, i64* %RBP, align 8
  %91 = add i64 %90, -24
  %92 = load i64, i64* %PC, align 8
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %91 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %RDI, align 8, !tbaa !2428
  %96 = add i64 %92, 28
  %97 = add i64 %92, 9
  %98 = load i64, i64* %RSP, align 8, !tbaa !2428
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %97, i64* %100, align 8
  store i64 %99, i64* %RSP, align 8, !tbaa !2428
  store i64 %96, i64* %PC, align 8, !tbaa !2428
  %101 = tail call %struct.Memory* @sub_400800_xmalloc_renamed_(%struct.State* nonnull %0, i64 %96, %struct.Memory* %2)
  %102 = load i64, i64* %RBP, align 8
  %103 = add i64 %102, -32
  %104 = load i64, i64* %RAX, align 8
  %105 = load i64, i64* %PC, align 8
  %106 = add i64 %105, 4
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  store i64 %104, i64* %107, align 8
  %108 = load i64, i64* %RBP, align 8
  %109 = add i64 %108, -32
  %110 = load i64, i64* %PC, align 8
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %109 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = load i64, i64* %RSP, align 8
  %115 = add i64 %114, 32
  store i64 %115, i64* %RSP, align 8, !tbaa !2428
  %116 = icmp ugt i64 %114, -33
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %13, align 1, !tbaa !2432
  %118 = trunc i64 %115 to i32
  %119 = and i32 %118, 255
  %120 = tail call i32 @llvm.ctpop.i32(i32 %119) #8
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  %123 = xor i8 %122, 1
  store i8 %123, i8* %20, align 1, !tbaa !2446
  %124 = xor i64 %114, %115
  %125 = lshr i64 %124, 4
  %126 = trunc i64 %125 to i8
  %127 = and i8 %126, 1
  store i8 %127, i8* %25, align 1, !tbaa !2447
  %128 = icmp eq i64 %115, 0
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %28, align 1, !tbaa !2448
  %130 = lshr i64 %115, 63
  %131 = trunc i64 %130 to i8
  store i8 %131, i8* %31, align 1, !tbaa !2449
  %132 = lshr i64 %114, 63
  %133 = xor i64 %130, %132
  %134 = add nuw nsw i64 %133, %130
  %135 = icmp eq i64 %134, 2
  %136 = zext i1 %135 to i8
  store i8 %136, i8* %37, align 1, !tbaa !2450
  %137 = add i64 %110, 9
  store i64 %137, i64* %PC, align 8
  %138 = add i64 %114, 40
  %139 = inttoptr i64 %115 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RBP, align 8, !tbaa !2428
  store i64 %138, i64* %RSP, align 8, !tbaa !2428
  %141 = add i64 %110, 10
  store i64 %141, i64* %PC, align 8
  %142 = inttoptr i64 %138 to i64*
  %143 = load i64, i64* %142, align 8
  store i64 %143, i64* %PC, align 8, !tbaa !2428
  %144 = add i64 %114, 48
  store i64 %144, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %101
}

; Function Attrs: noinline
define %struct.Memory* @sub_401f10_kernel_fdtd_apml_StrictFP(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401f10:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = load i64, i64* %RSP, align 8, !tbaa !2428
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %8, i64* %12, align 8
  %13 = load i64, i64* %PC, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  %14 = load i64, i64* %R15, align 8
  %15 = add i64 %13, 5
  store i64 %15, i64* %PC, align 8
  %16 = add i64 %10, -16
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = load i64, i64* %R14, align 8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 2
  store i64 %20, i64* %PC, align 8
  %21 = add i64 %10, -24
  %22 = inttoptr i64 %21 to i64*
  store i64 %18, i64* %22, align 8
  %23 = load i64, i64* %R13, align 8
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 2
  store i64 %25, i64* %PC, align 8
  %26 = add i64 %10, -32
  %27 = inttoptr i64 %26 to i64*
  store i64 %23, i64* %27, align 8
  %28 = load i64, i64* %R12, align 8
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 2
  store i64 %30, i64* %PC, align 8
  %31 = add i64 %10, -40
  %32 = inttoptr i64 %31 to i64*
  store i64 %28, i64* %32, align 8
  %33 = load i64, i64* %RBX, align 8
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 1
  store i64 %35, i64* %PC, align 8
  %36 = add i64 %10, -48
  %37 = inttoptr i64 %36 to i64*
  store i64 %33, i64* %37, align 8
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %10, -80
  store i64 %39, i64* %RSP, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, 32
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #8
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 %36, %39
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2447
  %55 = icmp eq i64 %39, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2448
  %58 = lshr i64 %39, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2449
  %61 = lshr i64 %36, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %61
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2450
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, 96
  %69 = add i64 %38, 8
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %RAX, align 8, !tbaa !2428
  %72 = add i64 %67, 88
  %73 = add i64 %38, 12
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %R10, align 8, !tbaa !2428
  %76 = add i64 %67, 80
  %77 = add i64 %38, 16
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %R11, align 8, !tbaa !2428
  %80 = add i64 %67, 72
  %81 = add i64 %38, 20
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %RBX, align 8, !tbaa !2428
  %84 = add i64 %67, 64
  %85 = add i64 %38, 24
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86, align 8
  store i64 %87, i64* %R14, align 8, !tbaa !2428
  %88 = add i64 %67, 56
  %89 = add i64 %38, 28
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %88 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %R15, align 8, !tbaa !2428
  %92 = add i64 %67, 48
  %93 = add i64 %38, 32
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %92 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %R12, align 8, !tbaa !2428
  %96 = add i64 %67, 40
  %97 = add i64 %38, 36
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %96 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %R13, align 8, !tbaa !2428
  %100 = add i64 %67, -120
  %101 = add i64 %38, 40
  store i64 %101, i64* %PC, align 8
  %102 = inttoptr i64 %100 to i64*
  store i64 %71, i64* %102, align 8
  %103 = load i64, i64* %RBP, align 8
  %104 = add i64 %103, 32
  %105 = load i64, i64* %PC, align 8
  %106 = add i64 %105, 4
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %104 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = add i64 %103, -128
  %110 = add i64 %105, 8
  store i64 %110, i64* %PC, align 8
  %111 = inttoptr i64 %109 to i64*
  store i64 %108, i64* %111, align 8
  %112 = load i64, i64* %RBP, align 8
  %113 = add i64 %112, 24
  %114 = load i64, i64* %PC, align 8
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %113 to i64*
  %117 = load i64, i64* %116, align 8
  store i64 %117, i64* %RAX, align 8, !tbaa !2428
  %118 = add i64 %112, -136
  %119 = add i64 %114, 11
  store i64 %119, i64* %PC, align 8
  %120 = inttoptr i64 %118 to i64*
  store i64 %117, i64* %120, align 8
  %121 = load i64, i64* %RBP, align 8
  %122 = add i64 %121, 16
  %123 = load i64, i64* %PC, align 8
  %124 = add i64 %123, 4
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %122 to i64*
  %126 = load i64, i64* %125, align 8
  store i64 %126, i64* %RAX, align 8, !tbaa !2428
  %127 = add i64 %121, -44
  %128 = load i32, i32* %EDI, align 4
  %129 = add i64 %123, 7
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i32*
  store i32 %128, i32* %130, align 4
  %131 = load i64, i64* %RBP, align 8
  %132 = add i64 %131, -48
  %133 = load i32, i32* %ESI, align 4
  %134 = load i64, i64* %PC, align 8
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %132 to i32*
  store i32 %133, i32* %136, align 4
  %137 = load i64, i64* %RBP, align 8
  %138 = add i64 %137, -52
  %139 = load i32, i32* %EDX, align 4
  %140 = load i64, i64* %PC, align 8
  %141 = add i64 %140, 3
  store i64 %141, i64* %PC, align 8
  %142 = inttoptr i64 %138 to i32*
  store i32 %139, i32* %142, align 4
  %143 = load i64, i64* %RBP, align 8
  %144 = add i64 %143, -64
  %145 = load i64, i64* %PC, align 8
  %146 = add i64 %145, 5
  store i64 %146, i64* %PC, align 8
  %147 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %148 = load i64, i64* %147, align 1
  %149 = inttoptr i64 %144 to i64*
  store i64 %148, i64* %149, align 8
  %150 = load i64, i64* %RBP, align 8
  %151 = add i64 %150, -72
  %152 = load i64, i64* %PC, align 8
  %153 = add i64 %152, 5
  store i64 %153, i64* %PC, align 8
  %154 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %155 = load i64, i64* %154, align 1
  %156 = inttoptr i64 %151 to i64*
  store i64 %155, i64* %156, align 8
  %157 = load i64, i64* %RBP, align 8
  %158 = add i64 %157, -80
  %159 = load i64, i64* %RCX, align 8
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 4
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %158 to i64*
  store i64 %159, i64* %162, align 8
  %163 = load i64, i64* %RBP, align 8
  %164 = add i64 %163, -88
  %165 = load i64, i64* %R8, align 8
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %164 to i64*
  store i64 %165, i64* %168, align 8
  %169 = load i64, i64* %RBP, align 8
  %170 = add i64 %169, -96
  %171 = load i64, i64* %R9, align 8
  %172 = load i64, i64* %PC, align 8
  %173 = add i64 %172, 4
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %170 to i64*
  store i64 %171, i64* %174, align 8
  %175 = load i64, i64* %RBP, align 8
  %176 = add i64 %175, -100
  %177 = load i64, i64* %PC, align 8
  %178 = add i64 %177, 7
  store i64 %178, i64* %PC, align 8
  %179 = inttoptr i64 %176 to i32*
  store i32 0, i32* %179, align 4
  %180 = load i64, i64* %RBP, align 8
  %181 = add i64 %180, -144
  %182 = load i64, i64* %R13, align 8
  %183 = load i64, i64* %PC, align 8
  %184 = add i64 %183, 7
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %181 to i64*
  store i64 %182, i64* %185, align 8
  %186 = load i64, i64* %RBP, align 8
  %187 = add i64 %186, -152
  %188 = load i64, i64* %RAX, align 8
  %189 = load i64, i64* %PC, align 8
  %190 = add i64 %189, 7
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %187 to i64*
  store i64 %188, i64* %191, align 8
  %192 = load i64, i64* %RBP, align 8
  %193 = add i64 %192, -160
  %194 = load i64, i64* %R10, align 8
  %195 = load i64, i64* %PC, align 8
  %196 = add i64 %195, 7
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %193 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -168
  %200 = load i64, i64* %R11, align 8
  %201 = load i64, i64* %PC, align 8
  %202 = add i64 %201, 7
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %199 to i64*
  store i64 %200, i64* %203, align 8
  %204 = load i64, i64* %RBP, align 8
  %205 = add i64 %204, -176
  %206 = load i64, i64* %RBX, align 8
  %207 = load i64, i64* %PC, align 8
  %208 = add i64 %207, 7
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %205 to i64*
  store i64 %206, i64* %209, align 8
  %210 = load i64, i64* %RBP, align 8
  %211 = add i64 %210, -184
  %212 = load i64, i64* %R14, align 8
  %213 = load i64, i64* %PC, align 8
  %214 = add i64 %213, 7
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %211 to i64*
  store i64 %212, i64* %215, align 8
  %216 = load i64, i64* %RBP, align 8
  %217 = add i64 %216, -192
  %218 = load i64, i64* %R15, align 8
  %219 = load i64, i64* %PC, align 8
  %220 = add i64 %219, 7
  store i64 %220, i64* %PC, align 8
  %221 = inttoptr i64 %217 to i64*
  store i64 %218, i64* %221, align 8
  %222 = load i64, i64* %RBP, align 8
  %223 = add i64 %222, -200
  %224 = load i64, i64* %R12, align 8
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 7
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %223 to i64*
  store i64 %224, i64* %227, align 8
  %228 = bitcast [32 x %union.VectorReg]* %6 to double*
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %230 = bitcast i64* %229 to double*
  %231 = bitcast %union.VectorReg* %7 to double*
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %233 = bitcast i64* %232 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401fba

block_401fd9:                                     ; preds = %block_401fcd
  %234 = add i64 %327, -108
  %235 = add i64 %363, 7
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %234 to i32*
  store i32 0, i32* %236, align 4
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_401fe0

block_401fba:                                     ; preds = %block_402a25, %block_401f10
  %237 = phi i64 [ %4579, %block_402a25 ], [ %.pre, %block_401f10 ]
  %238 = load i64, i64* %RBP, align 8
  %239 = add i64 %238, -100
  %240 = add i64 %237, 3
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %239 to i32*
  %242 = load i32, i32* %241, align 4
  %243 = zext i32 %242 to i64
  store i64 %243, i64* %RAX, align 8, !tbaa !2428
  %244 = add i64 %238, -44
  %245 = add i64 %237, 6
  store i64 %245, i64* %PC, align 8
  %246 = inttoptr i64 %244 to i32*
  %247 = load i32, i32* %246, align 4
  %248 = sub i32 %242, %247
  %249 = icmp ult i32 %242, %247
  %250 = zext i1 %249 to i8
  store i8 %250, i8* %42, align 1, !tbaa !2432
  %251 = and i32 %248, 255
  %252 = tail call i32 @llvm.ctpop.i32(i32 %251) #8
  %253 = trunc i32 %252 to i8
  %254 = and i8 %253, 1
  %255 = xor i8 %254, 1
  store i8 %255, i8* %49, align 1, !tbaa !2446
  %256 = xor i32 %247, %242
  %257 = xor i32 %256, %248
  %258 = lshr i32 %257, 4
  %259 = trunc i32 %258 to i8
  %260 = and i8 %259, 1
  store i8 %260, i8* %54, align 1, !tbaa !2447
  %261 = icmp eq i32 %248, 0
  %262 = zext i1 %261 to i8
  store i8 %262, i8* %57, align 1, !tbaa !2448
  %263 = lshr i32 %248, 31
  %264 = trunc i32 %263 to i8
  store i8 %264, i8* %60, align 1, !tbaa !2449
  %265 = lshr i32 %242, 31
  %266 = lshr i32 %247, 31
  %267 = xor i32 %266, %265
  %268 = xor i32 %263, %265
  %269 = add nuw nsw i32 %268, %267
  %270 = icmp eq i32 %269, 2
  %271 = zext i1 %270 to i8
  store i8 %271, i8* %66, align 1, !tbaa !2450
  %272 = icmp ne i8 %264, 0
  %273 = xor i1 %272, %270
  %.v = select i1 %273, i64 12, i64 2686
  %274 = add i64 %237, %.v
  store i64 %274, i64* %PC, align 8, !tbaa !2428
  br i1 %273, label %block_401fc6, label %block_402a38

block_402a38:                                     ; preds = %block_401fba
  %275 = load i64, i64* %RSP, align 8
  %276 = add i64 %275, 32
  store i64 %276, i64* %RSP, align 8, !tbaa !2428
  %277 = icmp ugt i64 %275, -33
  %278 = zext i1 %277 to i8
  store i8 %278, i8* %42, align 1, !tbaa !2432
  %279 = trunc i64 %276 to i32
  %280 = and i32 %279, 255
  %281 = tail call i32 @llvm.ctpop.i32(i32 %280) #8
  %282 = trunc i32 %281 to i8
  %283 = and i8 %282, 1
  %284 = xor i8 %283, 1
  store i8 %284, i8* %49, align 1, !tbaa !2446
  %285 = xor i64 %275, %276
  %286 = lshr i64 %285, 4
  %287 = trunc i64 %286 to i8
  %288 = and i8 %287, 1
  store i8 %288, i8* %54, align 1, !tbaa !2447
  %289 = icmp eq i64 %276, 0
  %290 = zext i1 %289 to i8
  store i8 %290, i8* %57, align 1, !tbaa !2448
  %291 = lshr i64 %276, 63
  %292 = trunc i64 %291 to i8
  store i8 %292, i8* %60, align 1, !tbaa !2449
  %293 = lshr i64 %275, 63
  %294 = xor i64 %291, %293
  %295 = add nuw nsw i64 %294, %291
  %296 = icmp eq i64 %295, 2
  %297 = zext i1 %296 to i8
  store i8 %297, i8* %66, align 1, !tbaa !2450
  %298 = add i64 %274, 5
  store i64 %298, i64* %PC, align 8
  %299 = add i64 %275, 40
  %300 = inttoptr i64 %276 to i64*
  %301 = load i64, i64* %300, align 8
  store i64 %301, i64* %RBX, align 8, !tbaa !2428
  store i64 %299, i64* %RSP, align 8, !tbaa !2428
  %302 = add i64 %274, 7
  store i64 %302, i64* %PC, align 8
  %303 = add i64 %275, 48
  %304 = inttoptr i64 %299 to i64*
  %305 = load i64, i64* %304, align 8
  store i64 %305, i64* %R12, align 8, !tbaa !2428
  store i64 %303, i64* %RSP, align 8, !tbaa !2428
  %306 = add i64 %274, 9
  store i64 %306, i64* %PC, align 8
  %307 = add i64 %275, 56
  %308 = inttoptr i64 %303 to i64*
  %309 = load i64, i64* %308, align 8
  store i64 %309, i64* %R13, align 8, !tbaa !2428
  store i64 %307, i64* %RSP, align 8, !tbaa !2428
  %310 = add i64 %274, 11
  store i64 %310, i64* %PC, align 8
  %311 = add i64 %275, 64
  %312 = inttoptr i64 %307 to i64*
  %313 = load i64, i64* %312, align 8
  store i64 %313, i64* %R14, align 8, !tbaa !2428
  store i64 %311, i64* %RSP, align 8, !tbaa !2428
  %314 = add i64 %274, 13
  store i64 %314, i64* %PC, align 8
  %315 = add i64 %275, 72
  %316 = inttoptr i64 %311 to i64*
  %317 = load i64, i64* %316, align 8
  store i64 %317, i64* %R15, align 8, !tbaa !2428
  store i64 %315, i64* %RSP, align 8, !tbaa !2428
  %318 = add i64 %274, 14
  store i64 %318, i64* %PC, align 8
  %319 = add i64 %275, 80
  %320 = inttoptr i64 %315 to i64*
  %321 = load i64, i64* %320, align 8
  store i64 %321, i64* %RBP, align 8, !tbaa !2428
  store i64 %319, i64* %RSP, align 8, !tbaa !2428
  %322 = add i64 %274, 15
  store i64 %322, i64* %PC, align 8
  %323 = inttoptr i64 %319 to i64*
  %324 = load i64, i64* %323, align 8
  store i64 %324, i64* %PC, align 8, !tbaa !2428
  %325 = add i64 %275, 88
  store i64 %325, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_401fcd:                                     ; preds = %block_401fc6, %block_4027ab
  %326 = phi i64 [ %.pre2, %block_401fc6 ], [ %2439, %block_4027ab ]
  %327 = load i64, i64* %RBP, align 8
  %328 = add i64 %327, -104
  %329 = add i64 %326, 3
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %328 to i32*
  %331 = load i32, i32* %330, align 4
  %332 = zext i32 %331 to i64
  store i64 %332, i64* %RAX, align 8, !tbaa !2428
  %333 = add i64 %327, -52
  %334 = add i64 %326, 6
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %333 to i32*
  %336 = load i32, i32* %335, align 4
  %337 = sub i32 %331, %336
  %338 = icmp ult i32 %331, %336
  %339 = zext i1 %338 to i8
  store i8 %339, i8* %42, align 1, !tbaa !2432
  %340 = and i32 %337, 255
  %341 = tail call i32 @llvm.ctpop.i32(i32 %340) #8
  %342 = trunc i32 %341 to i8
  %343 = and i8 %342, 1
  %344 = xor i8 %343, 1
  store i8 %344, i8* %49, align 1, !tbaa !2446
  %345 = xor i32 %336, %331
  %346 = xor i32 %345, %337
  %347 = lshr i32 %346, 4
  %348 = trunc i32 %347 to i8
  %349 = and i8 %348, 1
  store i8 %349, i8* %54, align 1, !tbaa !2447
  %350 = icmp eq i32 %337, 0
  %351 = zext i1 %350 to i8
  store i8 %351, i8* %57, align 1, !tbaa !2448
  %352 = lshr i32 %337, 31
  %353 = trunc i32 %352 to i8
  store i8 %353, i8* %60, align 1, !tbaa !2449
  %354 = lshr i32 %331, 31
  %355 = lshr i32 %336, 31
  %356 = xor i32 %355, %354
  %357 = xor i32 %352, %354
  %358 = add nuw nsw i32 %357, %356
  %359 = icmp eq i32 %358, 2
  %360 = zext i1 %359 to i8
  store i8 %360, i8* %66, align 1, !tbaa !2450
  %361 = icmp ne i8 %353, 0
  %362 = xor i1 %361, %359
  %.v5 = select i1 %362, i64 12, i64 2648
  %363 = add i64 %326, %.v5
  store i64 %363, i64* %PC, align 8, !tbaa !2428
  br i1 %362, label %block_401fd9, label %block_402a25

block_402512:                                     ; preds = %block_40251e, %block_40228c
  %364 = phi i64 [ %3477, %block_40251e ], [ %.pre4, %block_40228c ]
  %365 = load i64, i64* %RBP, align 8
  %366 = add i64 %365, -108
  %367 = add i64 %364, 3
  store i64 %367, i64* %PC, align 8
  %368 = inttoptr i64 %366 to i32*
  %369 = load i32, i32* %368, align 4
  %370 = zext i32 %369 to i64
  store i64 %370, i64* %RAX, align 8, !tbaa !2428
  %371 = add i64 %365, -48
  %372 = add i64 %364, 6
  store i64 %372, i64* %PC, align 8
  %373 = inttoptr i64 %371 to i32*
  %374 = load i32, i32* %373, align 4
  %375 = sub i32 %369, %374
  %376 = icmp ult i32 %369, %374
  %377 = zext i1 %376 to i8
  store i8 %377, i8* %42, align 1, !tbaa !2432
  %378 = and i32 %375, 255
  %379 = tail call i32 @llvm.ctpop.i32(i32 %378) #8
  %380 = trunc i32 %379 to i8
  %381 = and i8 %380, 1
  %382 = xor i8 %381, 1
  store i8 %382, i8* %49, align 1, !tbaa !2446
  %383 = xor i32 %374, %369
  %384 = xor i32 %383, %375
  %385 = lshr i32 %384, 4
  %386 = trunc i32 %385 to i8
  %387 = and i8 %386, 1
  store i8 %387, i8* %54, align 1, !tbaa !2447
  %388 = icmp eq i32 %375, 0
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %57, align 1, !tbaa !2448
  %390 = lshr i32 %375, 31
  %391 = trunc i32 %390 to i8
  store i8 %391, i8* %60, align 1, !tbaa !2449
  %392 = lshr i32 %369, 31
  %393 = lshr i32 %374, 31
  %394 = xor i32 %393, %392
  %395 = xor i32 %390, %392
  %396 = add nuw nsw i32 %395, %394
  %397 = icmp eq i32 %396, 2
  %398 = zext i1 %397 to i8
  store i8 %398, i8* %66, align 1, !tbaa !2450
  %399 = icmp ne i8 %391, 0
  %400 = xor i1 %399, %397
  %.v7 = select i1 %400, i64 12, i64 665
  %401 = add i64 %364, %.v7
  %402 = add i64 %365, 32
  %403 = add i64 %401, 4
  store i64 %403, i64* %PC, align 8
  %404 = inttoptr i64 %402 to i64*
  %405 = load i64, i64* %404, align 8
  store i64 %405, i64* %RAX, align 8, !tbaa !2428
  %406 = add i64 %365, -100
  %407 = add i64 %401, 8
  store i64 %407, i64* %PC, align 8
  %408 = inttoptr i64 %406 to i32*
  %409 = load i32, i32* %408, align 4
  %410 = sext i32 %409 to i64
  %411 = mul nsw i64 %410, 33800
  store i64 %411, i64* %RCX, align 8, !tbaa !2428
  %412 = lshr i64 %411, 63
  %413 = add i64 %411, %405
  store i64 %413, i64* %RAX, align 8, !tbaa !2428
  %414 = icmp ult i64 %413, %405
  %415 = icmp ult i64 %413, %411
  %416 = or i1 %414, %415
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %42, align 1, !tbaa !2432
  %418 = trunc i64 %413 to i32
  %419 = and i32 %418, 255
  %420 = tail call i32 @llvm.ctpop.i32(i32 %419) #8
  %421 = trunc i32 %420 to i8
  %422 = and i8 %421, 1
  %423 = xor i8 %422, 1
  store i8 %423, i8* %49, align 1, !tbaa !2446
  %424 = xor i64 %411, %405
  %425 = xor i64 %424, %413
  %426 = lshr i64 %425, 4
  %427 = trunc i64 %426 to i8
  %428 = and i8 %427, 1
  store i8 %428, i8* %54, align 1, !tbaa !2447
  %429 = icmp eq i64 %413, 0
  %430 = zext i1 %429 to i8
  store i8 %430, i8* %57, align 1, !tbaa !2448
  %431 = lshr i64 %413, 63
  %432 = trunc i64 %431 to i8
  store i8 %432, i8* %60, align 1, !tbaa !2449
  %433 = lshr i64 %405, 63
  %434 = xor i64 %431, %433
  %435 = xor i64 %431, %412
  %436 = add nuw nsw i64 %434, %435
  %437 = icmp eq i64 %436, 2
  %438 = zext i1 %437 to i8
  store i8 %438, i8* %66, align 1, !tbaa !2450
  %439 = add i64 %365, -52
  %440 = add i64 %401, 22
  store i64 %440, i64* %PC, align 8
  %441 = inttoptr i64 %439 to i32*
  %442 = load i32, i32* %441, align 4
  %443 = sext i32 %442 to i64
  %444 = mul nsw i64 %443, 520
  store i64 %444, i64* %RCX, align 8, !tbaa !2428
  %445 = lshr i64 %444, 63
  %446 = add i64 %401, 32
  store i64 %446, i64* %PC, align 8
  %447 = add i64 %444, %413
  store i64 %447, i64* %RAX, align 8, !tbaa !2428
  %448 = icmp ult i64 %447, %413
  %449 = icmp ult i64 %447, %444
  %450 = or i1 %448, %449
  %451 = zext i1 %450 to i8
  store i8 %451, i8* %42, align 1, !tbaa !2432
  %452 = trunc i64 %447 to i32
  %453 = and i32 %452, 255
  %454 = tail call i32 @llvm.ctpop.i32(i32 %453) #8
  %455 = trunc i32 %454 to i8
  %456 = and i8 %455, 1
  %457 = xor i8 %456, 1
  store i8 %457, i8* %49, align 1, !tbaa !2446
  %458 = xor i64 %444, %413
  %459 = xor i64 %458, %447
  %460 = lshr i64 %459, 4
  %461 = trunc i64 %460 to i8
  %462 = and i8 %461, 1
  store i8 %462, i8* %54, align 1, !tbaa !2447
  %463 = icmp eq i64 %447, 0
  %464 = zext i1 %463 to i8
  store i8 %464, i8* %57, align 1, !tbaa !2448
  %465 = lshr i64 %447, 63
  %466 = trunc i64 %465 to i8
  store i8 %466, i8* %60, align 1, !tbaa !2449
  %467 = xor i64 %465, %431
  %468 = xor i64 %465, %445
  %469 = add nuw nsw i64 %467, %468
  %470 = icmp eq i64 %469, 2
  %471 = zext i1 %470 to i8
  store i8 %471, i8* %66, align 1, !tbaa !2450
  br i1 %400, label %block_40251e, label %block_4027ab

block_40228c:                                     ; preds = %block_401fe0
  %472 = add i64 %4617, 36
  store i64 %472, i64* %PC, align 8
  %473 = load i32, i32* %4589, align 4
  %474 = sext i32 %473 to i64
  store i64 %474, i64* %RCX, align 8, !tbaa !2428
  %475 = shl nsw i64 %474, 3
  %476 = add i64 %475, %4663
  %477 = add i64 %4617, 41
  store i64 %477, i64* %PC, align 8
  %478 = inttoptr i64 %476 to i64*
  %479 = load i64, i64* %478, align 8
  store i64 %479, i64* %147, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %480 = add i64 %4617, 45
  store i64 %480, i64* %PC, align 8
  %481 = load i64, i64* %4620, align 8
  store i64 %481, i64* %RAX, align 8, !tbaa !2428
  %482 = add i64 %4617, 49
  store i64 %482, i64* %PC, align 8
  %483 = load i32, i32* %4624, align 4
  %484 = sext i32 %483 to i64
  %485 = mul nsw i64 %484, 33800
  store i64 %485, i64* %RCX, align 8, !tbaa !2428
  %486 = lshr i64 %485, 63
  %487 = add i64 %485, %481
  store i64 %487, i64* %RAX, align 8, !tbaa !2428
  %488 = icmp ult i64 %487, %481
  %489 = icmp ult i64 %487, %485
  %490 = or i1 %488, %489
  %491 = zext i1 %490 to i8
  store i8 %491, i8* %42, align 1, !tbaa !2432
  %492 = trunc i64 %487 to i32
  %493 = and i32 %492, 255
  %494 = tail call i32 @llvm.ctpop.i32(i32 %493) #8
  %495 = trunc i32 %494 to i8
  %496 = and i8 %495, 1
  %497 = xor i8 %496, 1
  store i8 %497, i8* %49, align 1, !tbaa !2446
  %498 = xor i64 %485, %481
  %499 = xor i64 %498, %487
  %500 = lshr i64 %499, 4
  %501 = trunc i64 %500 to i8
  %502 = and i8 %501, 1
  store i8 %502, i8* %54, align 1, !tbaa !2447
  %503 = icmp eq i64 %487, 0
  %504 = zext i1 %503 to i8
  store i8 %504, i8* %57, align 1, !tbaa !2448
  %505 = lshr i64 %487, 63
  %506 = trunc i64 %505 to i8
  store i8 %506, i8* %60, align 1, !tbaa !2449
  %507 = lshr i64 %481, 63
  %508 = xor i64 %505, %507
  %509 = xor i64 %505, %486
  %510 = add nuw nsw i64 %508, %509
  %511 = icmp eq i64 %510, 2
  %512 = zext i1 %511 to i8
  store i8 %512, i8* %66, align 1, !tbaa !2450
  %513 = add i64 %4617, 62
  store i64 %513, i64* %PC, align 8
  %514 = load i32, i32* %4657, align 4
  %515 = add i32 %514, 1
  %516 = zext i32 %515 to i64
  store i64 %516, i64* %RDX, align 8, !tbaa !2428
  %517 = sext i32 %515 to i64
  %518 = mul nsw i64 %517, 520
  store i64 %518, i64* %RCX, align 8, !tbaa !2428
  %519 = lshr i64 %518, 63
  %520 = add i64 %518, %487
  store i64 %520, i64* %RAX, align 8, !tbaa !2428
  %521 = icmp ult i64 %520, %487
  %522 = icmp ult i64 %520, %518
  %523 = or i1 %521, %522
  %524 = zext i1 %523 to i8
  store i8 %524, i8* %42, align 1, !tbaa !2432
  %525 = trunc i64 %520 to i32
  %526 = and i32 %525, 255
  %527 = tail call i32 @llvm.ctpop.i32(i32 %526) #8
  %528 = trunc i32 %527 to i8
  %529 = and i8 %528, 1
  %530 = xor i8 %529, 1
  store i8 %530, i8* %49, align 1, !tbaa !2446
  %531 = xor i64 %518, %487
  %532 = xor i64 %531, %520
  %533 = lshr i64 %532, 4
  %534 = trunc i64 %533 to i8
  %535 = and i8 %534, 1
  store i8 %535, i8* %54, align 1, !tbaa !2447
  %536 = icmp eq i64 %520, 0
  %537 = zext i1 %536 to i8
  store i8 %537, i8* %57, align 1, !tbaa !2448
  %538 = lshr i64 %520, 63
  %539 = trunc i64 %538 to i8
  store i8 %539, i8* %60, align 1, !tbaa !2449
  %540 = xor i64 %538, %505
  %541 = xor i64 %538, %519
  %542 = add nuw nsw i64 %540, %541
  %543 = icmp eq i64 %542, 2
  %544 = zext i1 %543 to i8
  store i8 %544, i8* %66, align 1, !tbaa !2450
  %545 = load i64, i64* %RBP, align 8
  %546 = add i64 %545, -48
  %547 = add i64 %4617, 82
  store i64 %547, i64* %PC, align 8
  %548 = inttoptr i64 %546 to i32*
  %549 = load i32, i32* %548, align 4
  %550 = sext i32 %549 to i64
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %551 = shl nsw i64 %550, 3
  %552 = add i64 %551, %520
  %553 = add i64 %4617, 87
  store i64 %553, i64* %PC, align 8
  %554 = load double, double* %228, align 1
  %555 = inttoptr i64 %552 to double*
  %556 = load double, double* %555, align 8
  %557 = fsub double %554, %556
  store double %557, double* %228, align 1, !tbaa !2452
  %558 = add i64 %545, -88
  %559 = add i64 %4617, 91
  store i64 %559, i64* %PC, align 8
  %560 = inttoptr i64 %558 to i64*
  %561 = load i64, i64* %560, align 8
  store i64 %561, i64* %RAX, align 8, !tbaa !2428
  %562 = add i64 %545, -100
  %563 = add i64 %4617, 95
  store i64 %563, i64* %PC, align 8
  %564 = inttoptr i64 %562 to i32*
  %565 = load i32, i32* %564, align 4
  %566 = sext i32 %565 to i64
  %567 = mul nsw i64 %566, 520
  store i64 %567, i64* %RCX, align 8, !tbaa !2428
  %568 = lshr i64 %567, 63
  %569 = add i64 %567, %561
  store i64 %569, i64* %RAX, align 8, !tbaa !2428
  %570 = icmp ult i64 %569, %561
  %571 = icmp ult i64 %569, %567
  %572 = or i1 %570, %571
  %573 = zext i1 %572 to i8
  store i8 %573, i8* %42, align 1, !tbaa !2432
  %574 = trunc i64 %569 to i32
  %575 = and i32 %574, 255
  %576 = tail call i32 @llvm.ctpop.i32(i32 %575) #8
  %577 = trunc i32 %576 to i8
  %578 = and i8 %577, 1
  %579 = xor i8 %578, 1
  store i8 %579, i8* %49, align 1, !tbaa !2446
  %580 = xor i64 %567, %561
  %581 = xor i64 %580, %569
  %582 = lshr i64 %581, 4
  %583 = trunc i64 %582 to i8
  %584 = and i8 %583, 1
  store i8 %584, i8* %54, align 1, !tbaa !2447
  %585 = icmp eq i64 %569, 0
  %586 = zext i1 %585 to i8
  store i8 %586, i8* %57, align 1, !tbaa !2448
  %587 = lshr i64 %569, 63
  %588 = trunc i64 %587 to i8
  store i8 %588, i8* %60, align 1, !tbaa !2449
  %589 = lshr i64 %561, 63
  %590 = xor i64 %587, %589
  %591 = xor i64 %587, %568
  %592 = add nuw nsw i64 %590, %591
  %593 = icmp eq i64 %592, 2
  %594 = zext i1 %593 to i8
  store i8 %594, i8* %66, align 1, !tbaa !2450
  %595 = add i64 %545, -104
  %596 = add i64 %4617, 109
  store i64 %596, i64* %PC, align 8
  %597 = inttoptr i64 %595 to i32*
  %598 = load i32, i32* %597, align 4
  %599 = sext i32 %598 to i64
  store i64 %599, i64* %RCX, align 8, !tbaa !2428
  %600 = shl nsw i64 %599, 3
  %601 = add i64 %600, %569
  %602 = add i64 %4617, 114
  store i64 %602, i64* %PC, align 8
  %603 = inttoptr i64 %601 to double*
  %604 = load double, double* %603, align 8
  %605 = fadd double %557, %604
  store double %605, double* %228, align 1, !tbaa !2452
  %606 = add i64 %545, 40
  %607 = add i64 %4617, 118
  store i64 %607, i64* %PC, align 8
  %608 = inttoptr i64 %606 to i64*
  %609 = load i64, i64* %608, align 8
  store i64 %609, i64* %RAX, align 8, !tbaa !2428
  %610 = add i64 %4617, 122
  store i64 %610, i64* %PC, align 8
  %611 = load i32, i32* %564, align 4
  %612 = sext i32 %611 to i64
  %613 = mul nsw i64 %612, 33800
  store i64 %613, i64* %RCX, align 8, !tbaa !2428
  %614 = lshr i64 %613, 63
  %615 = add i64 %613, %609
  store i64 %615, i64* %RAX, align 8, !tbaa !2428
  %616 = icmp ult i64 %615, %609
  %617 = icmp ult i64 %615, %613
  %618 = or i1 %616, %617
  %619 = zext i1 %618 to i8
  store i8 %619, i8* %42, align 1, !tbaa !2432
  %620 = trunc i64 %615 to i32
  %621 = and i32 %620, 255
  %622 = tail call i32 @llvm.ctpop.i32(i32 %621) #8
  %623 = trunc i32 %622 to i8
  %624 = and i8 %623, 1
  %625 = xor i8 %624, 1
  store i8 %625, i8* %49, align 1, !tbaa !2446
  %626 = xor i64 %613, %609
  %627 = xor i64 %626, %615
  %628 = lshr i64 %627, 4
  %629 = trunc i64 %628 to i8
  %630 = and i8 %629, 1
  store i8 %630, i8* %54, align 1, !tbaa !2447
  %631 = icmp eq i64 %615, 0
  %632 = zext i1 %631 to i8
  store i8 %632, i8* %57, align 1, !tbaa !2448
  %633 = lshr i64 %615, 63
  %634 = trunc i64 %633 to i8
  store i8 %634, i8* %60, align 1, !tbaa !2449
  %635 = lshr i64 %609, 63
  %636 = xor i64 %633, %635
  %637 = xor i64 %633, %614
  %638 = add nuw nsw i64 %636, %637
  %639 = icmp eq i64 %638, 2
  %640 = zext i1 %639 to i8
  store i8 %640, i8* %66, align 1, !tbaa !2450
  %641 = add i64 %4617, 136
  store i64 %641, i64* %PC, align 8
  %642 = load i32, i32* %597, align 4
  %643 = sext i32 %642 to i64
  %644 = mul nsw i64 %643, 520
  store i64 %644, i64* %RCX, align 8, !tbaa !2428
  %645 = lshr i64 %644, 63
  %646 = add i64 %644, %615
  store i64 %646, i64* %RAX, align 8, !tbaa !2428
  %647 = icmp ult i64 %646, %615
  %648 = icmp ult i64 %646, %644
  %649 = or i1 %647, %648
  %650 = zext i1 %649 to i8
  store i8 %650, i8* %42, align 1, !tbaa !2432
  %651 = trunc i64 %646 to i32
  %652 = and i32 %651, 255
  %653 = tail call i32 @llvm.ctpop.i32(i32 %652) #8
  %654 = trunc i32 %653 to i8
  %655 = and i8 %654, 1
  %656 = xor i8 %655, 1
  store i8 %656, i8* %49, align 1, !tbaa !2446
  %657 = xor i64 %644, %615
  %658 = xor i64 %657, %646
  %659 = lshr i64 %658, 4
  %660 = trunc i64 %659 to i8
  %661 = and i8 %660, 1
  store i8 %661, i8* %54, align 1, !tbaa !2447
  %662 = icmp eq i64 %646, 0
  %663 = zext i1 %662 to i8
  store i8 %663, i8* %57, align 1, !tbaa !2448
  %664 = lshr i64 %646, 63
  %665 = trunc i64 %664 to i8
  store i8 %665, i8* %60, align 1, !tbaa !2449
  %666 = xor i64 %664, %633
  %667 = xor i64 %664, %645
  %668 = add nuw nsw i64 %666, %667
  %669 = icmp eq i64 %668, 2
  %670 = zext i1 %669 to i8
  store i8 %670, i8* %66, align 1, !tbaa !2450
  %671 = load i64, i64* %RBP, align 8
  %672 = add i64 %671, -48
  %673 = add i64 %4617, 150
  store i64 %673, i64* %PC, align 8
  %674 = inttoptr i64 %672 to i32*
  %675 = load i32, i32* %674, align 4
  %676 = sext i32 %675 to i64
  store i64 %676, i64* %RCX, align 8, !tbaa !2428
  %677 = shl nsw i64 %676, 3
  %678 = add i64 %677, %646
  %679 = add i64 %4617, 155
  store i64 %679, i64* %PC, align 8
  %680 = inttoptr i64 %678 to double*
  %681 = load double, double* %680, align 8
  %682 = fsub double %605, %681
  store double %682, double* %228, align 1, !tbaa !2452
  %683 = add i64 %671, -96
  %684 = add i64 %4617, 159
  store i64 %684, i64* %PC, align 8
  %685 = inttoptr i64 %683 to i64*
  %686 = load i64, i64* %685, align 8
  store i64 %686, i64* %RAX, align 8, !tbaa !2428
  %687 = add i64 %671, -100
  %688 = add i64 %4617, 163
  store i64 %688, i64* %PC, align 8
  %689 = inttoptr i64 %687 to i32*
  %690 = load i32, i32* %689, align 4
  %691 = sext i32 %690 to i64
  %692 = mul nsw i64 %691, 520
  store i64 %692, i64* %RCX, align 8, !tbaa !2428
  %693 = lshr i64 %692, 63
  %694 = add i64 %692, %686
  store i64 %694, i64* %RAX, align 8, !tbaa !2428
  %695 = icmp ult i64 %694, %686
  %696 = icmp ult i64 %694, %692
  %697 = or i1 %695, %696
  %698 = zext i1 %697 to i8
  store i8 %698, i8* %42, align 1, !tbaa !2432
  %699 = trunc i64 %694 to i32
  %700 = and i32 %699, 255
  %701 = tail call i32 @llvm.ctpop.i32(i32 %700) #8
  %702 = trunc i32 %701 to i8
  %703 = and i8 %702, 1
  %704 = xor i8 %703, 1
  store i8 %704, i8* %49, align 1, !tbaa !2446
  %705 = xor i64 %692, %686
  %706 = xor i64 %705, %694
  %707 = lshr i64 %706, 4
  %708 = trunc i64 %707 to i8
  %709 = and i8 %708, 1
  store i8 %709, i8* %54, align 1, !tbaa !2447
  %710 = icmp eq i64 %694, 0
  %711 = zext i1 %710 to i8
  store i8 %711, i8* %57, align 1, !tbaa !2448
  %712 = lshr i64 %694, 63
  %713 = trunc i64 %712 to i8
  store i8 %713, i8* %60, align 1, !tbaa !2449
  %714 = lshr i64 %686, 63
  %715 = xor i64 %712, %714
  %716 = xor i64 %712, %693
  %717 = add nuw nsw i64 %715, %716
  %718 = icmp eq i64 %717, 2
  %719 = zext i1 %718 to i8
  store i8 %719, i8* %66, align 1, !tbaa !2450
  %720 = add i64 %671, -104
  %721 = add i64 %4617, 177
  store i64 %721, i64* %PC, align 8
  %722 = inttoptr i64 %720 to i32*
  %723 = load i32, i32* %722, align 4
  %724 = sext i32 %723 to i64
  store i64 %724, i64* %RCX, align 8, !tbaa !2428
  %725 = shl nsw i64 %724, 3
  %726 = add i64 %725, %694
  %727 = add i64 %4617, 182
  store i64 %727, i64* %PC, align 8
  %728 = inttoptr i64 %726 to double*
  store double %682, double* %728, align 8
  %729 = load i64, i64* %RBP, align 8
  %730 = add i64 %729, 88
  %731 = load i64, i64* %PC, align 8
  %732 = add i64 %731, 4
  store i64 %732, i64* %PC, align 8
  %733 = inttoptr i64 %730 to i64*
  %734 = load i64, i64* %733, align 8
  store i64 %734, i64* %RAX, align 8, !tbaa !2428
  %735 = add i64 %729, -104
  %736 = add i64 %731, 8
  store i64 %736, i64* %PC, align 8
  %737 = inttoptr i64 %735 to i32*
  %738 = load i32, i32* %737, align 4
  %739 = sext i32 %738 to i64
  store i64 %739, i64* %RCX, align 8, !tbaa !2428
  %740 = shl nsw i64 %739, 3
  %741 = add i64 %740, %734
  %742 = add i64 %731, 13
  store i64 %742, i64* %PC, align 8
  %743 = inttoptr i64 %741 to double*
  %744 = load double, double* %743, align 8
  store double %744, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %745 = add i64 %729, 96
  %746 = add i64 %731, 17
  store i64 %746, i64* %PC, align 8
  %747 = inttoptr i64 %745 to i64*
  %748 = load i64, i64* %747, align 8
  store i64 %748, i64* %RAX, align 8, !tbaa !2428
  %749 = add i64 %731, 21
  store i64 %749, i64* %PC, align 8
  %750 = load i32, i32* %737, align 4
  %751 = sext i32 %750 to i64
  store i64 %751, i64* %RCX, align 8, !tbaa !2428
  %752 = shl nsw i64 %751, 3
  %753 = add i64 %752, %748
  %754 = add i64 %731, 26
  store i64 %754, i64* %PC, align 8
  %755 = inttoptr i64 %753 to double*
  %756 = load double, double* %755, align 8
  %757 = fdiv double %744, %756
  store double %757, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %758 = add i64 %729, 24
  %759 = add i64 %731, 30
  store i64 %759, i64* %PC, align 8
  %760 = inttoptr i64 %758 to i64*
  %761 = load i64, i64* %760, align 8
  store i64 %761, i64* %RAX, align 8, !tbaa !2428
  %762 = add i64 %729, -100
  %763 = add i64 %731, 34
  store i64 %763, i64* %PC, align 8
  %764 = inttoptr i64 %762 to i32*
  %765 = load i32, i32* %764, align 4
  %766 = sext i32 %765 to i64
  %767 = mul nsw i64 %766, 33800
  store i64 %767, i64* %RCX, align 8, !tbaa !2428
  %768 = lshr i64 %767, 63
  %769 = add i64 %767, %761
  store i64 %769, i64* %RAX, align 8, !tbaa !2428
  %770 = icmp ult i64 %769, %761
  %771 = icmp ult i64 %769, %767
  %772 = or i1 %770, %771
  %773 = zext i1 %772 to i8
  store i8 %773, i8* %42, align 1, !tbaa !2432
  %774 = trunc i64 %769 to i32
  %775 = and i32 %774, 255
  %776 = tail call i32 @llvm.ctpop.i32(i32 %775) #8
  %777 = trunc i32 %776 to i8
  %778 = and i8 %777, 1
  %779 = xor i8 %778, 1
  store i8 %779, i8* %49, align 1, !tbaa !2446
  %780 = xor i64 %767, %761
  %781 = xor i64 %780, %769
  %782 = lshr i64 %781, 4
  %783 = trunc i64 %782 to i8
  %784 = and i8 %783, 1
  store i8 %784, i8* %54, align 1, !tbaa !2447
  %785 = icmp eq i64 %769, 0
  %786 = zext i1 %785 to i8
  store i8 %786, i8* %57, align 1, !tbaa !2448
  %787 = lshr i64 %769, 63
  %788 = trunc i64 %787 to i8
  store i8 %788, i8* %60, align 1, !tbaa !2449
  %789 = lshr i64 %761, 63
  %790 = xor i64 %787, %789
  %791 = xor i64 %787, %768
  %792 = add nuw nsw i64 %790, %791
  %793 = icmp eq i64 %792, 2
  %794 = zext i1 %793 to i8
  store i8 %794, i8* %66, align 1, !tbaa !2450
  %795 = add i64 %731, 48
  store i64 %795, i64* %PC, align 8
  %796 = load i32, i32* %737, align 4
  %797 = sext i32 %796 to i64
  %798 = mul nsw i64 %797, 520
  store i64 %798, i64* %RCX, align 8, !tbaa !2428
  %799 = lshr i64 %798, 63
  %800 = add i64 %798, %769
  store i64 %800, i64* %RAX, align 8, !tbaa !2428
  %801 = icmp ult i64 %800, %769
  %802 = icmp ult i64 %800, %798
  %803 = or i1 %801, %802
  %804 = zext i1 %803 to i8
  store i8 %804, i8* %42, align 1, !tbaa !2432
  %805 = trunc i64 %800 to i32
  %806 = and i32 %805, 255
  %807 = tail call i32 @llvm.ctpop.i32(i32 %806) #8
  %808 = trunc i32 %807 to i8
  %809 = and i8 %808, 1
  %810 = xor i8 %809, 1
  store i8 %810, i8* %49, align 1, !tbaa !2446
  %811 = xor i64 %798, %769
  %812 = xor i64 %811, %800
  %813 = lshr i64 %812, 4
  %814 = trunc i64 %813 to i8
  %815 = and i8 %814, 1
  store i8 %815, i8* %54, align 1, !tbaa !2447
  %816 = icmp eq i64 %800, 0
  %817 = zext i1 %816 to i8
  store i8 %817, i8* %57, align 1, !tbaa !2448
  %818 = lshr i64 %800, 63
  %819 = trunc i64 %818 to i8
  store i8 %819, i8* %60, align 1, !tbaa !2449
  %820 = xor i64 %818, %787
  %821 = xor i64 %818, %799
  %822 = add nuw nsw i64 %820, %821
  %823 = icmp eq i64 %822, 2
  %824 = zext i1 %823 to i8
  store i8 %824, i8* %66, align 1, !tbaa !2450
  %825 = add i64 %729, -48
  %826 = add i64 %731, 62
  store i64 %826, i64* %PC, align 8
  %827 = inttoptr i64 %825 to i32*
  %828 = load i32, i32* %827, align 4
  %829 = sext i32 %828 to i64
  store i64 %829, i64* %RCX, align 8, !tbaa !2428
  %830 = shl nsw i64 %829, 3
  %831 = add i64 %830, %800
  %832 = add i64 %731, 67
  store i64 %832, i64* %PC, align 8
  %833 = load double, double* %228, align 1
  %834 = inttoptr i64 %831 to double*
  %835 = load double, double* %834, align 8
  %836 = fmul double %833, %835
  store double %836, double* %228, align 1, !tbaa !2452
  %837 = add i64 %729, -72
  %838 = add i64 %731, 72
  store i64 %838, i64* %PC, align 8
  %839 = inttoptr i64 %837 to double*
  %840 = load double, double* %839, align 8
  store double %840, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %841 = add i64 %731, 76
  store i64 %841, i64* %PC, align 8
  %842 = load i64, i64* %747, align 8
  store i64 %842, i64* %RAX, align 8, !tbaa !2428
  %843 = add i64 %731, 80
  store i64 %843, i64* %PC, align 8
  %844 = load i32, i32* %737, align 4
  %845 = sext i32 %844 to i64
  store i64 %845, i64* %RCX, align 8, !tbaa !2428
  %846 = shl nsw i64 %845, 3
  %847 = add i64 %846, %842
  %848 = add i64 %731, 85
  store i64 %848, i64* %PC, align 8
  %849 = inttoptr i64 %847 to double*
  %850 = load double, double* %849, align 8
  %851 = fdiv double %840, %850
  store double %851, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %852 = load i64, i64* %RBP, align 8
  %853 = add i64 %852, -96
  %854 = add i64 %731, 89
  store i64 %854, i64* %PC, align 8
  %855 = inttoptr i64 %853 to i64*
  %856 = load i64, i64* %855, align 8
  store i64 %856, i64* %RAX, align 8, !tbaa !2428
  %857 = add i64 %852, -100
  %858 = add i64 %731, 93
  store i64 %858, i64* %PC, align 8
  %859 = inttoptr i64 %857 to i32*
  %860 = load i32, i32* %859, align 4
  %861 = sext i32 %860 to i64
  %862 = mul nsw i64 %861, 520
  store i64 %862, i64* %RCX, align 8, !tbaa !2428
  %863 = lshr i64 %862, 63
  %864 = add i64 %862, %856
  store i64 %864, i64* %RAX, align 8, !tbaa !2428
  %865 = icmp ult i64 %864, %856
  %866 = icmp ult i64 %864, %862
  %867 = or i1 %865, %866
  %868 = zext i1 %867 to i8
  store i8 %868, i8* %42, align 1, !tbaa !2432
  %869 = trunc i64 %864 to i32
  %870 = and i32 %869, 255
  %871 = tail call i32 @llvm.ctpop.i32(i32 %870) #8
  %872 = trunc i32 %871 to i8
  %873 = and i8 %872, 1
  %874 = xor i8 %873, 1
  store i8 %874, i8* %49, align 1, !tbaa !2446
  %875 = xor i64 %862, %856
  %876 = xor i64 %875, %864
  %877 = lshr i64 %876, 4
  %878 = trunc i64 %877 to i8
  %879 = and i8 %878, 1
  store i8 %879, i8* %54, align 1, !tbaa !2447
  %880 = icmp eq i64 %864, 0
  %881 = zext i1 %880 to i8
  store i8 %881, i8* %57, align 1, !tbaa !2448
  %882 = lshr i64 %864, 63
  %883 = trunc i64 %882 to i8
  store i8 %883, i8* %60, align 1, !tbaa !2449
  %884 = lshr i64 %856, 63
  %885 = xor i64 %882, %884
  %886 = xor i64 %882, %863
  %887 = add nuw nsw i64 %885, %886
  %888 = icmp eq i64 %887, 2
  %889 = zext i1 %888 to i8
  store i8 %889, i8* %66, align 1, !tbaa !2450
  %890 = add i64 %852, -104
  %891 = add i64 %731, 107
  store i64 %891, i64* %PC, align 8
  %892 = inttoptr i64 %890 to i32*
  %893 = load i32, i32* %892, align 4
  %894 = sext i32 %893 to i64
  store i64 %894, i64* %RCX, align 8, !tbaa !2428
  %895 = shl nsw i64 %894, 3
  %896 = add i64 %895, %864
  %897 = add i64 %731, 112
  store i64 %897, i64* %PC, align 8
  %898 = inttoptr i64 %896 to double*
  %899 = load double, double* %898, align 8
  %900 = fmul double %851, %899
  store double %900, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %901 = fsub double %836, %900
  store double %901, double* %228, align 1, !tbaa !2452
  %902 = add i64 %852, 16
  %903 = add i64 %731, 120
  store i64 %903, i64* %PC, align 8
  %904 = inttoptr i64 %902 to i64*
  %905 = load i64, i64* %904, align 8
  store i64 %905, i64* %RAX, align 8, !tbaa !2428
  %906 = add i64 %731, 124
  store i64 %906, i64* %PC, align 8
  %907 = load i32, i32* %859, align 4
  %908 = sext i32 %907 to i64
  %909 = mul nsw i64 %908, 520
  store i64 %909, i64* %RCX, align 8, !tbaa !2428
  %910 = lshr i64 %909, 63
  %911 = add i64 %909, %905
  store i64 %911, i64* %RAX, align 8, !tbaa !2428
  %912 = icmp ult i64 %911, %905
  %913 = icmp ult i64 %911, %909
  %914 = or i1 %912, %913
  %915 = zext i1 %914 to i8
  store i8 %915, i8* %42, align 1, !tbaa !2432
  %916 = trunc i64 %911 to i32
  %917 = and i32 %916, 255
  %918 = tail call i32 @llvm.ctpop.i32(i32 %917) #8
  %919 = trunc i32 %918 to i8
  %920 = and i8 %919, 1
  %921 = xor i8 %920, 1
  store i8 %921, i8* %49, align 1, !tbaa !2446
  %922 = xor i64 %909, %905
  %923 = xor i64 %922, %911
  %924 = lshr i64 %923, 4
  %925 = trunc i64 %924 to i8
  %926 = and i8 %925, 1
  store i8 %926, i8* %54, align 1, !tbaa !2447
  %927 = icmp eq i64 %911, 0
  %928 = zext i1 %927 to i8
  store i8 %928, i8* %57, align 1, !tbaa !2448
  %929 = lshr i64 %911, 63
  %930 = trunc i64 %929 to i8
  store i8 %930, i8* %60, align 1, !tbaa !2449
  %931 = lshr i64 %905, 63
  %932 = xor i64 %929, %931
  %933 = xor i64 %929, %910
  %934 = add nuw nsw i64 %932, %933
  %935 = icmp eq i64 %934, 2
  %936 = zext i1 %935 to i8
  store i8 %936, i8* %66, align 1, !tbaa !2450
  %937 = add i64 %731, 138
  store i64 %937, i64* %PC, align 8
  %938 = load i32, i32* %892, align 4
  %939 = sext i32 %938 to i64
  store i64 %939, i64* %RCX, align 8, !tbaa !2428
  %940 = shl nsw i64 %939, 3
  %941 = add i64 %940, %911
  %942 = add i64 %731, 143
  store i64 %942, i64* %PC, align 8
  %943 = inttoptr i64 %941 to double*
  store double %901, double* %943, align 8
  %944 = load i64, i64* %RBP, align 8
  %945 = add i64 %944, 72
  %946 = load i64, i64* %PC, align 8
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC, align 8
  %948 = inttoptr i64 %945 to i64*
  %949 = load i64, i64* %948, align 8
  store i64 %949, i64* %RAX, align 8, !tbaa !2428
  %950 = add i64 %944, -48
  %951 = add i64 %946, 8
  store i64 %951, i64* %PC, align 8
  %952 = inttoptr i64 %950 to i32*
  %953 = load i32, i32* %952, align 4
  %954 = sext i32 %953 to i64
  store i64 %954, i64* %RCX, align 8, !tbaa !2428
  %955 = shl nsw i64 %954, 3
  %956 = add i64 %955, %949
  %957 = add i64 %946, 13
  store i64 %957, i64* %PC, align 8
  %958 = inttoptr i64 %956 to double*
  %959 = load double, double* %958, align 8
  store double %959, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %960 = add i64 %944, 80
  %961 = add i64 %946, 17
  store i64 %961, i64* %PC, align 8
  %962 = inttoptr i64 %960 to i64*
  %963 = load i64, i64* %962, align 8
  store i64 %963, i64* %RAX, align 8, !tbaa !2428
  %964 = add i64 %946, 21
  store i64 %964, i64* %PC, align 8
  %965 = load i32, i32* %952, align 4
  %966 = sext i32 %965 to i64
  store i64 %966, i64* %RCX, align 8, !tbaa !2428
  %967 = shl nsw i64 %966, 3
  %968 = add i64 %967, %963
  %969 = add i64 %946, 26
  store i64 %969, i64* %PC, align 8
  %970 = inttoptr i64 %968 to double*
  %971 = load double, double* %970, align 8
  %972 = fdiv double %959, %971
  store double %972, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %973 = add i64 %944, 48
  %974 = add i64 %946, 30
  store i64 %974, i64* %PC, align 8
  %975 = inttoptr i64 %973 to i64*
  %976 = load i64, i64* %975, align 8
  store i64 %976, i64* %RAX, align 8, !tbaa !2428
  %977 = add i64 %944, -100
  %978 = add i64 %946, 34
  store i64 %978, i64* %PC, align 8
  %979 = inttoptr i64 %977 to i32*
  %980 = load i32, i32* %979, align 4
  %981 = sext i32 %980 to i64
  %982 = mul nsw i64 %981, 33800
  store i64 %982, i64* %RCX, align 8, !tbaa !2428
  %983 = lshr i64 %982, 63
  %984 = add i64 %982, %976
  store i64 %984, i64* %RAX, align 8, !tbaa !2428
  %985 = icmp ult i64 %984, %976
  %986 = icmp ult i64 %984, %982
  %987 = or i1 %985, %986
  %988 = zext i1 %987 to i8
  store i8 %988, i8* %42, align 1, !tbaa !2432
  %989 = trunc i64 %984 to i32
  %990 = and i32 %989, 255
  %991 = tail call i32 @llvm.ctpop.i32(i32 %990) #8
  %992 = trunc i32 %991 to i8
  %993 = and i8 %992, 1
  %994 = xor i8 %993, 1
  store i8 %994, i8* %49, align 1, !tbaa !2446
  %995 = xor i64 %982, %976
  %996 = xor i64 %995, %984
  %997 = lshr i64 %996, 4
  %998 = trunc i64 %997 to i8
  %999 = and i8 %998, 1
  store i8 %999, i8* %54, align 1, !tbaa !2447
  %1000 = icmp eq i64 %984, 0
  %1001 = zext i1 %1000 to i8
  store i8 %1001, i8* %57, align 1, !tbaa !2448
  %1002 = lshr i64 %984, 63
  %1003 = trunc i64 %1002 to i8
  store i8 %1003, i8* %60, align 1, !tbaa !2449
  %1004 = lshr i64 %976, 63
  %1005 = xor i64 %1002, %1004
  %1006 = xor i64 %1002, %983
  %1007 = add nuw nsw i64 %1005, %1006
  %1008 = icmp eq i64 %1007, 2
  %1009 = zext i1 %1008 to i8
  store i8 %1009, i8* %66, align 1, !tbaa !2450
  %1010 = add i64 %944, -104
  %1011 = add i64 %946, 48
  store i64 %1011, i64* %PC, align 8
  %1012 = inttoptr i64 %1010 to i32*
  %1013 = load i32, i32* %1012, align 4
  %1014 = sext i32 %1013 to i64
  %1015 = mul nsw i64 %1014, 520
  store i64 %1015, i64* %RCX, align 8, !tbaa !2428
  %1016 = lshr i64 %1015, 63
  %1017 = add i64 %1015, %984
  store i64 %1017, i64* %RAX, align 8, !tbaa !2428
  %1018 = icmp ult i64 %1017, %984
  %1019 = icmp ult i64 %1017, %1015
  %1020 = or i1 %1018, %1019
  %1021 = zext i1 %1020 to i8
  store i8 %1021, i8* %42, align 1, !tbaa !2432
  %1022 = trunc i64 %1017 to i32
  %1023 = and i32 %1022, 255
  %1024 = tail call i32 @llvm.ctpop.i32(i32 %1023) #8
  %1025 = trunc i32 %1024 to i8
  %1026 = and i8 %1025, 1
  %1027 = xor i8 %1026, 1
  store i8 %1027, i8* %49, align 1, !tbaa !2446
  %1028 = xor i64 %1015, %984
  %1029 = xor i64 %1028, %1017
  %1030 = lshr i64 %1029, 4
  %1031 = trunc i64 %1030 to i8
  %1032 = and i8 %1031, 1
  store i8 %1032, i8* %54, align 1, !tbaa !2447
  %1033 = icmp eq i64 %1017, 0
  %1034 = zext i1 %1033 to i8
  store i8 %1034, i8* %57, align 1, !tbaa !2448
  %1035 = lshr i64 %1017, 63
  %1036 = trunc i64 %1035 to i8
  store i8 %1036, i8* %60, align 1, !tbaa !2449
  %1037 = xor i64 %1035, %1002
  %1038 = xor i64 %1035, %1016
  %1039 = add nuw nsw i64 %1037, %1038
  %1040 = icmp eq i64 %1039, 2
  %1041 = zext i1 %1040 to i8
  store i8 %1041, i8* %66, align 1, !tbaa !2450
  %1042 = add i64 %946, 62
  store i64 %1042, i64* %PC, align 8
  %1043 = load i32, i32* %952, align 4
  %1044 = sext i32 %1043 to i64
  store i64 %1044, i64* %RCX, align 8, !tbaa !2428
  %1045 = shl nsw i64 %1044, 3
  %1046 = add i64 %1045, %1017
  %1047 = add i64 %946, 67
  store i64 %1047, i64* %PC, align 8
  %1048 = load double, double* %228, align 1
  %1049 = inttoptr i64 %1046 to double*
  %1050 = load double, double* %1049, align 8
  %1051 = fmul double %1048, %1050
  store double %1051, double* %228, align 1, !tbaa !2452
  %1052 = add i64 %944, -64
  %1053 = add i64 %946, 72
  store i64 %1053, i64* %PC, align 8
  %1054 = inttoptr i64 %1052 to double*
  %1055 = load double, double* %1054, align 8
  store double %1055, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %1056 = add i64 %944, 64
  %1057 = add i64 %946, 76
  store i64 %1057, i64* %PC, align 8
  %1058 = inttoptr i64 %1056 to i64*
  %1059 = load i64, i64* %1058, align 8
  store i64 %1059, i64* %RAX, align 8, !tbaa !2428
  %1060 = add i64 %946, 80
  store i64 %1060, i64* %PC, align 8
  %1061 = load i32, i32* %979, align 4
  %1062 = sext i32 %1061 to i64
  store i64 %1062, i64* %RCX, align 8, !tbaa !2428
  %1063 = shl nsw i64 %1062, 3
  %1064 = add i64 %1063, %1059
  %1065 = add i64 %946, 85
  store i64 %1065, i64* %PC, align 8
  %1066 = inttoptr i64 %1064 to double*
  %1067 = load double, double* %1066, align 8
  %1068 = fmul double %1055, %1067
  store double %1068, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %1069 = load i64, i64* %RBP, align 8
  %1070 = add i64 %1069, 80
  %1071 = add i64 %946, 89
  store i64 %1071, i64* %PC, align 8
  %1072 = inttoptr i64 %1070 to i64*
  %1073 = load i64, i64* %1072, align 8
  store i64 %1073, i64* %RAX, align 8, !tbaa !2428
  %1074 = add i64 %1069, -48
  %1075 = add i64 %946, 93
  store i64 %1075, i64* %PC, align 8
  %1076 = inttoptr i64 %1074 to i32*
  %1077 = load i32, i32* %1076, align 4
  %1078 = sext i32 %1077 to i64
  store i64 %1078, i64* %RCX, align 8, !tbaa !2428
  %1079 = shl nsw i64 %1078, 3
  %1080 = add i64 %1079, %1073
  %1081 = add i64 %946, 98
  store i64 %1081, i64* %PC, align 8
  %1082 = inttoptr i64 %1080 to double*
  %1083 = load double, double* %1082, align 8
  %1084 = fdiv double %1068, %1083
  store double %1084, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %1085 = add i64 %1069, 16
  %1086 = add i64 %946, 102
  store i64 %1086, i64* %PC, align 8
  %1087 = inttoptr i64 %1085 to i64*
  %1088 = load i64, i64* %1087, align 8
  store i64 %1088, i64* %RAX, align 8, !tbaa !2428
  %1089 = add i64 %1069, -100
  %1090 = add i64 %946, 106
  store i64 %1090, i64* %PC, align 8
  %1091 = inttoptr i64 %1089 to i32*
  %1092 = load i32, i32* %1091, align 4
  %1093 = sext i32 %1092 to i64
  %1094 = mul nsw i64 %1093, 520
  store i64 %1094, i64* %RCX, align 8, !tbaa !2428
  %1095 = lshr i64 %1094, 63
  %1096 = add i64 %1094, %1088
  store i64 %1096, i64* %RAX, align 8, !tbaa !2428
  %1097 = icmp ult i64 %1096, %1088
  %1098 = icmp ult i64 %1096, %1094
  %1099 = or i1 %1097, %1098
  %1100 = zext i1 %1099 to i8
  store i8 %1100, i8* %42, align 1, !tbaa !2432
  %1101 = trunc i64 %1096 to i32
  %1102 = and i32 %1101, 255
  %1103 = tail call i32 @llvm.ctpop.i32(i32 %1102) #8
  %1104 = trunc i32 %1103 to i8
  %1105 = and i8 %1104, 1
  %1106 = xor i8 %1105, 1
  store i8 %1106, i8* %49, align 1, !tbaa !2446
  %1107 = xor i64 %1094, %1088
  %1108 = xor i64 %1107, %1096
  %1109 = lshr i64 %1108, 4
  %1110 = trunc i64 %1109 to i8
  %1111 = and i8 %1110, 1
  store i8 %1111, i8* %54, align 1, !tbaa !2447
  %1112 = icmp eq i64 %1096, 0
  %1113 = zext i1 %1112 to i8
  store i8 %1113, i8* %57, align 1, !tbaa !2448
  %1114 = lshr i64 %1096, 63
  %1115 = trunc i64 %1114 to i8
  store i8 %1115, i8* %60, align 1, !tbaa !2449
  %1116 = lshr i64 %1088, 63
  %1117 = xor i64 %1114, %1116
  %1118 = xor i64 %1114, %1095
  %1119 = add nuw nsw i64 %1117, %1118
  %1120 = icmp eq i64 %1119, 2
  %1121 = zext i1 %1120 to i8
  store i8 %1121, i8* %66, align 1, !tbaa !2450
  %1122 = add i64 %1069, -104
  %1123 = add i64 %946, 120
  store i64 %1123, i64* %PC, align 8
  %1124 = inttoptr i64 %1122 to i32*
  %1125 = load i32, i32* %1124, align 4
  %1126 = sext i32 %1125 to i64
  store i64 %1126, i64* %RCX, align 8, !tbaa !2428
  %1127 = shl nsw i64 %1126, 3
  %1128 = add i64 %1127, %1096
  %1129 = add i64 %946, 125
  store i64 %1129, i64* %PC, align 8
  %1130 = inttoptr i64 %1128 to double*
  %1131 = load double, double* %1130, align 8
  %1132 = fmul double %1084, %1131
  store double %1132, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %1133 = load double, double* %228, align 1
  %1134 = fadd double %1133, %1132
  store double %1134, double* %228, align 1, !tbaa !2452
  %1135 = add i64 %1069, -64
  %1136 = add i64 %946, 134
  store i64 %1136, i64* %PC, align 8
  %1137 = inttoptr i64 %1135 to double*
  %1138 = load double, double* %1137, align 8
  store double %1138, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %1139 = add i64 %1069, 56
  %1140 = add i64 %946, 138
  store i64 %1140, i64* %PC, align 8
  %1141 = inttoptr i64 %1139 to i64*
  %1142 = load i64, i64* %1141, align 8
  store i64 %1142, i64* %RAX, align 8, !tbaa !2428
  %1143 = add i64 %946, 142
  store i64 %1143, i64* %PC, align 8
  %1144 = load i32, i32* %1091, align 4
  %1145 = sext i32 %1144 to i64
  store i64 %1145, i64* %RCX, align 8, !tbaa !2428
  %1146 = shl nsw i64 %1145, 3
  %1147 = add i64 %1146, %1142
  %1148 = add i64 %946, 147
  store i64 %1148, i64* %PC, align 8
  %1149 = inttoptr i64 %1147 to double*
  %1150 = load double, double* %1149, align 8
  %1151 = fmul double %1138, %1150
  store double %1151, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %1152 = add i64 %946, 151
  store i64 %1152, i64* %PC, align 8
  %1153 = load i64, i64* %1072, align 8
  store i64 %1153, i64* %RAX, align 8, !tbaa !2428
  %1154 = add i64 %946, 155
  store i64 %1154, i64* %PC, align 8
  %1155 = load i32, i32* %1076, align 4
  %1156 = sext i32 %1155 to i64
  store i64 %1156, i64* %RCX, align 8, !tbaa !2428
  %1157 = shl nsw i64 %1156, 3
  %1158 = add i64 %1157, %1153
  %1159 = add i64 %946, 160
  store i64 %1159, i64* %PC, align 8
  %1160 = inttoptr i64 %1158 to double*
  %1161 = load double, double* %1160, align 8
  %1162 = fdiv double %1151, %1161
  store double %1162, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %1163 = add i64 %1069, 24
  %1164 = add i64 %946, 164
  store i64 %1164, i64* %PC, align 8
  %1165 = inttoptr i64 %1163 to i64*
  %1166 = load i64, i64* %1165, align 8
  store i64 %1166, i64* %RAX, align 8, !tbaa !2428
  %1167 = add i64 %946, 168
  store i64 %1167, i64* %PC, align 8
  %1168 = load i32, i32* %1091, align 4
  %1169 = sext i32 %1168 to i64
  %1170 = mul nsw i64 %1169, 33800
  store i64 %1170, i64* %RCX, align 8, !tbaa !2428
  %1171 = lshr i64 %1170, 63
  %1172 = add i64 %1170, %1166
  store i64 %1172, i64* %RAX, align 8, !tbaa !2428
  %1173 = icmp ult i64 %1172, %1166
  %1174 = icmp ult i64 %1172, %1170
  %1175 = or i1 %1173, %1174
  %1176 = zext i1 %1175 to i8
  store i8 %1176, i8* %42, align 1, !tbaa !2432
  %1177 = trunc i64 %1172 to i32
  %1178 = and i32 %1177, 255
  %1179 = tail call i32 @llvm.ctpop.i32(i32 %1178) #8
  %1180 = trunc i32 %1179 to i8
  %1181 = and i8 %1180, 1
  %1182 = xor i8 %1181, 1
  store i8 %1182, i8* %49, align 1, !tbaa !2446
  %1183 = xor i64 %1170, %1166
  %1184 = xor i64 %1183, %1172
  %1185 = lshr i64 %1184, 4
  %1186 = trunc i64 %1185 to i8
  %1187 = and i8 %1186, 1
  store i8 %1187, i8* %54, align 1, !tbaa !2447
  %1188 = icmp eq i64 %1172, 0
  %1189 = zext i1 %1188 to i8
  store i8 %1189, i8* %57, align 1, !tbaa !2448
  %1190 = lshr i64 %1172, 63
  %1191 = trunc i64 %1190 to i8
  store i8 %1191, i8* %60, align 1, !tbaa !2449
  %1192 = lshr i64 %1166, 63
  %1193 = xor i64 %1190, %1192
  %1194 = xor i64 %1190, %1171
  %1195 = add nuw nsw i64 %1193, %1194
  %1196 = icmp eq i64 %1195, 2
  %1197 = zext i1 %1196 to i8
  store i8 %1197, i8* %66, align 1, !tbaa !2450
  %1198 = load i64, i64* %RBP, align 8
  %1199 = add i64 %1198, -104
  %1200 = add i64 %946, 182
  store i64 %1200, i64* %PC, align 8
  %1201 = inttoptr i64 %1199 to i32*
  %1202 = load i32, i32* %1201, align 4
  %1203 = sext i32 %1202 to i64
  %1204 = mul nsw i64 %1203, 520
  store i64 %1204, i64* %RCX, align 8, !tbaa !2428
  %1205 = lshr i64 %1204, 63
  %1206 = add i64 %1204, %1172
  store i64 %1206, i64* %RAX, align 8, !tbaa !2428
  %1207 = icmp ult i64 %1206, %1172
  %1208 = icmp ult i64 %1206, %1204
  %1209 = or i1 %1207, %1208
  %1210 = zext i1 %1209 to i8
  store i8 %1210, i8* %42, align 1, !tbaa !2432
  %1211 = trunc i64 %1206 to i32
  %1212 = and i32 %1211, 255
  %1213 = tail call i32 @llvm.ctpop.i32(i32 %1212) #8
  %1214 = trunc i32 %1213 to i8
  %1215 = and i8 %1214, 1
  %1216 = xor i8 %1215, 1
  store i8 %1216, i8* %49, align 1, !tbaa !2446
  %1217 = xor i64 %1204, %1172
  %1218 = xor i64 %1217, %1206
  %1219 = lshr i64 %1218, 4
  %1220 = trunc i64 %1219 to i8
  %1221 = and i8 %1220, 1
  store i8 %1221, i8* %54, align 1, !tbaa !2447
  %1222 = icmp eq i64 %1206, 0
  %1223 = zext i1 %1222 to i8
  store i8 %1223, i8* %57, align 1, !tbaa !2448
  %1224 = lshr i64 %1206, 63
  %1225 = trunc i64 %1224 to i8
  store i8 %1225, i8* %60, align 1, !tbaa !2449
  %1226 = xor i64 %1224, %1190
  %1227 = xor i64 %1224, %1205
  %1228 = add nuw nsw i64 %1226, %1227
  %1229 = icmp eq i64 %1228, 2
  %1230 = zext i1 %1229 to i8
  store i8 %1230, i8* %66, align 1, !tbaa !2450
  %1231 = add i64 %1198, -48
  %1232 = add i64 %946, 196
  store i64 %1232, i64* %PC, align 8
  %1233 = inttoptr i64 %1231 to i32*
  %1234 = load i32, i32* %1233, align 4
  %1235 = sext i32 %1234 to i64
  store i64 %1235, i64* %RCX, align 8, !tbaa !2428
  %1236 = shl nsw i64 %1235, 3
  %1237 = add i64 %1236, %1206
  %1238 = add i64 %946, 201
  store i64 %1238, i64* %PC, align 8
  %1239 = load double, double* %231, align 1
  %1240 = inttoptr i64 %1237 to double*
  %1241 = load double, double* %1240, align 8
  %1242 = fmul double %1239, %1241
  store double %1242, double* %231, align 1, !tbaa !2452
  %1243 = load double, double* %228, align 1
  %1244 = fsub double %1243, %1242
  store double %1244, double* %228, align 1, !tbaa !2452
  %1245 = add i64 %1198, 48
  %1246 = add i64 %946, 209
  store i64 %1246, i64* %PC, align 8
  %1247 = inttoptr i64 %1245 to i64*
  %1248 = load i64, i64* %1247, align 8
  store i64 %1248, i64* %RAX, align 8, !tbaa !2428
  %1249 = add i64 %1198, -100
  %1250 = add i64 %946, 213
  store i64 %1250, i64* %PC, align 8
  %1251 = inttoptr i64 %1249 to i32*
  %1252 = load i32, i32* %1251, align 4
  %1253 = sext i32 %1252 to i64
  %1254 = mul nsw i64 %1253, 33800
  store i64 %1254, i64* %RCX, align 8, !tbaa !2428
  %1255 = lshr i64 %1254, 63
  %1256 = add i64 %1254, %1248
  store i64 %1256, i64* %RAX, align 8, !tbaa !2428
  %1257 = icmp ult i64 %1256, %1248
  %1258 = icmp ult i64 %1256, %1254
  %1259 = or i1 %1257, %1258
  %1260 = zext i1 %1259 to i8
  store i8 %1260, i8* %42, align 1, !tbaa !2432
  %1261 = trunc i64 %1256 to i32
  %1262 = and i32 %1261, 255
  %1263 = tail call i32 @llvm.ctpop.i32(i32 %1262) #8
  %1264 = trunc i32 %1263 to i8
  %1265 = and i8 %1264, 1
  %1266 = xor i8 %1265, 1
  store i8 %1266, i8* %49, align 1, !tbaa !2446
  %1267 = xor i64 %1254, %1248
  %1268 = xor i64 %1267, %1256
  %1269 = lshr i64 %1268, 4
  %1270 = trunc i64 %1269 to i8
  %1271 = and i8 %1270, 1
  store i8 %1271, i8* %54, align 1, !tbaa !2447
  %1272 = icmp eq i64 %1256, 0
  %1273 = zext i1 %1272 to i8
  store i8 %1273, i8* %57, align 1, !tbaa !2448
  %1274 = lshr i64 %1256, 63
  %1275 = trunc i64 %1274 to i8
  store i8 %1275, i8* %60, align 1, !tbaa !2449
  %1276 = lshr i64 %1248, 63
  %1277 = xor i64 %1274, %1276
  %1278 = xor i64 %1274, %1255
  %1279 = add nuw nsw i64 %1277, %1278
  %1280 = icmp eq i64 %1279, 2
  %1281 = zext i1 %1280 to i8
  store i8 %1281, i8* %66, align 1, !tbaa !2450
  %1282 = load i64, i64* %RBP, align 8
  %1283 = add i64 %1282, -104
  %1284 = add i64 %946, 227
  store i64 %1284, i64* %PC, align 8
  %1285 = inttoptr i64 %1283 to i32*
  %1286 = load i32, i32* %1285, align 4
  %1287 = sext i32 %1286 to i64
  %1288 = mul nsw i64 %1287, 520
  store i64 %1288, i64* %RCX, align 8, !tbaa !2428
  %1289 = lshr i64 %1288, 63
  %1290 = add i64 %1288, %1256
  store i64 %1290, i64* %RAX, align 8, !tbaa !2428
  %1291 = icmp ult i64 %1290, %1256
  %1292 = icmp ult i64 %1290, %1288
  %1293 = or i1 %1291, %1292
  %1294 = zext i1 %1293 to i8
  store i8 %1294, i8* %42, align 1, !tbaa !2432
  %1295 = trunc i64 %1290 to i32
  %1296 = and i32 %1295, 255
  %1297 = tail call i32 @llvm.ctpop.i32(i32 %1296) #8
  %1298 = trunc i32 %1297 to i8
  %1299 = and i8 %1298, 1
  %1300 = xor i8 %1299, 1
  store i8 %1300, i8* %49, align 1, !tbaa !2446
  %1301 = xor i64 %1288, %1256
  %1302 = xor i64 %1301, %1290
  %1303 = lshr i64 %1302, 4
  %1304 = trunc i64 %1303 to i8
  %1305 = and i8 %1304, 1
  store i8 %1305, i8* %54, align 1, !tbaa !2447
  %1306 = icmp eq i64 %1290, 0
  %1307 = zext i1 %1306 to i8
  store i8 %1307, i8* %57, align 1, !tbaa !2448
  %1308 = lshr i64 %1290, 63
  %1309 = trunc i64 %1308 to i8
  store i8 %1309, i8* %60, align 1, !tbaa !2449
  %1310 = xor i64 %1308, %1274
  %1311 = xor i64 %1308, %1289
  %1312 = add nuw nsw i64 %1310, %1311
  %1313 = icmp eq i64 %1312, 2
  %1314 = zext i1 %1313 to i8
  store i8 %1314, i8* %66, align 1, !tbaa !2450
  %1315 = add i64 %1282, -48
  %1316 = add i64 %946, 241
  store i64 %1316, i64* %PC, align 8
  %1317 = inttoptr i64 %1315 to i32*
  %1318 = load i32, i32* %1317, align 4
  %1319 = sext i32 %1318 to i64
  store i64 %1319, i64* %RCX, align 8, !tbaa !2428
  %1320 = shl nsw i64 %1319, 3
  %1321 = add i64 %1320, %1290
  %1322 = add i64 %946, 246
  store i64 %1322, i64* %PC, align 8
  %1323 = load i64, i64* %147, align 1
  %1324 = inttoptr i64 %1321 to i64*
  store i64 %1323, i64* %1324, align 8
  %1325 = load i64, i64* %RBP, align 8
  %1326 = add i64 %1325, 16
  %1327 = load i64, i64* %PC, align 8
  %1328 = add i64 %1327, 4
  store i64 %1328, i64* %PC, align 8
  %1329 = inttoptr i64 %1326 to i64*
  %1330 = load i64, i64* %1329, align 8
  store i64 %1330, i64* %RAX, align 8, !tbaa !2428
  %1331 = add i64 %1325, -100
  %1332 = add i64 %1327, 8
  store i64 %1332, i64* %PC, align 8
  %1333 = inttoptr i64 %1331 to i32*
  %1334 = load i32, i32* %1333, align 4
  %1335 = sext i32 %1334 to i64
  %1336 = mul nsw i64 %1335, 520
  store i64 %1336, i64* %RCX, align 8, !tbaa !2428
  %1337 = lshr i64 %1336, 63
  %1338 = add i64 %1336, %1330
  store i64 %1338, i64* %RAX, align 8, !tbaa !2428
  %1339 = icmp ult i64 %1338, %1330
  %1340 = icmp ult i64 %1338, %1336
  %1341 = or i1 %1339, %1340
  %1342 = zext i1 %1341 to i8
  store i8 %1342, i8* %42, align 1, !tbaa !2432
  %1343 = trunc i64 %1338 to i32
  %1344 = and i32 %1343, 255
  %1345 = tail call i32 @llvm.ctpop.i32(i32 %1344) #8
  %1346 = trunc i32 %1345 to i8
  %1347 = and i8 %1346, 1
  %1348 = xor i8 %1347, 1
  store i8 %1348, i8* %49, align 1, !tbaa !2446
  %1349 = xor i64 %1336, %1330
  %1350 = xor i64 %1349, %1338
  %1351 = lshr i64 %1350, 4
  %1352 = trunc i64 %1351 to i8
  %1353 = and i8 %1352, 1
  store i8 %1353, i8* %54, align 1, !tbaa !2447
  %1354 = icmp eq i64 %1338, 0
  %1355 = zext i1 %1354 to i8
  store i8 %1355, i8* %57, align 1, !tbaa !2448
  %1356 = lshr i64 %1338, 63
  %1357 = trunc i64 %1356 to i8
  store i8 %1357, i8* %60, align 1, !tbaa !2449
  %1358 = lshr i64 %1330, 63
  %1359 = xor i64 %1356, %1358
  %1360 = xor i64 %1356, %1337
  %1361 = add nuw nsw i64 %1359, %1360
  %1362 = icmp eq i64 %1361, 2
  %1363 = zext i1 %1362 to i8
  store i8 %1363, i8* %66, align 1, !tbaa !2450
  %1364 = add i64 %1325, -104
  %1365 = add i64 %1327, 22
  store i64 %1365, i64* %PC, align 8
  %1366 = inttoptr i64 %1364 to i32*
  %1367 = load i32, i32* %1366, align 4
  %1368 = sext i32 %1367 to i64
  store i64 %1368, i64* %RCX, align 8, !tbaa !2428
  %1369 = shl nsw i64 %1368, 3
  %1370 = add i64 %1369, %1338
  %1371 = add i64 %1327, 27
  store i64 %1371, i64* %PC, align 8
  %1372 = inttoptr i64 %1370 to i64*
  %1373 = load i64, i64* %1372, align 8
  store i64 %1373, i64* %147, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %1374 = add i64 %1325, 24
  %1375 = add i64 %1327, 31
  store i64 %1375, i64* %PC, align 8
  %1376 = inttoptr i64 %1374 to i64*
  %1377 = load i64, i64* %1376, align 8
  store i64 %1377, i64* %RAX, align 8, !tbaa !2428
  %1378 = add i64 %1327, 35
  store i64 %1378, i64* %PC, align 8
  %1379 = load i32, i32* %1333, align 4
  %1380 = sext i32 %1379 to i64
  %1381 = mul nsw i64 %1380, 33800
  store i64 %1381, i64* %RCX, align 8, !tbaa !2428
  %1382 = lshr i64 %1381, 63
  %1383 = add i64 %1381, %1377
  store i64 %1383, i64* %RAX, align 8, !tbaa !2428
  %1384 = icmp ult i64 %1383, %1377
  %1385 = icmp ult i64 %1383, %1381
  %1386 = or i1 %1384, %1385
  %1387 = zext i1 %1386 to i8
  store i8 %1387, i8* %42, align 1, !tbaa !2432
  %1388 = trunc i64 %1383 to i32
  %1389 = and i32 %1388, 255
  %1390 = tail call i32 @llvm.ctpop.i32(i32 %1389) #8
  %1391 = trunc i32 %1390 to i8
  %1392 = and i8 %1391, 1
  %1393 = xor i8 %1392, 1
  store i8 %1393, i8* %49, align 1, !tbaa !2446
  %1394 = xor i64 %1381, %1377
  %1395 = xor i64 %1394, %1383
  %1396 = lshr i64 %1395, 4
  %1397 = trunc i64 %1396 to i8
  %1398 = and i8 %1397, 1
  store i8 %1398, i8* %54, align 1, !tbaa !2447
  %1399 = icmp eq i64 %1383, 0
  %1400 = zext i1 %1399 to i8
  store i8 %1400, i8* %57, align 1, !tbaa !2448
  %1401 = lshr i64 %1383, 63
  %1402 = trunc i64 %1401 to i8
  store i8 %1402, i8* %60, align 1, !tbaa !2449
  %1403 = lshr i64 %1377, 63
  %1404 = xor i64 %1401, %1403
  %1405 = xor i64 %1401, %1382
  %1406 = add nuw nsw i64 %1404, %1405
  %1407 = icmp eq i64 %1406, 2
  %1408 = zext i1 %1407 to i8
  store i8 %1408, i8* %66, align 1, !tbaa !2450
  %1409 = load i64, i64* %RBP, align 8
  %1410 = add i64 %1409, -104
  %1411 = add i64 %1327, 49
  store i64 %1411, i64* %PC, align 8
  %1412 = inttoptr i64 %1410 to i32*
  %1413 = load i32, i32* %1412, align 4
  %1414 = sext i32 %1413 to i64
  %1415 = mul nsw i64 %1414, 520
  store i64 %1415, i64* %RCX, align 8, !tbaa !2428
  %1416 = lshr i64 %1415, 63
  %1417 = add i64 %1415, %1383
  store i64 %1417, i64* %RAX, align 8, !tbaa !2428
  %1418 = icmp ult i64 %1417, %1383
  %1419 = icmp ult i64 %1417, %1415
  %1420 = or i1 %1418, %1419
  %1421 = zext i1 %1420 to i8
  store i8 %1421, i8* %42, align 1, !tbaa !2432
  %1422 = trunc i64 %1417 to i32
  %1423 = and i32 %1422, 255
  %1424 = tail call i32 @llvm.ctpop.i32(i32 %1423) #8
  %1425 = trunc i32 %1424 to i8
  %1426 = and i8 %1425, 1
  %1427 = xor i8 %1426, 1
  store i8 %1427, i8* %49, align 1, !tbaa !2446
  %1428 = xor i64 %1415, %1383
  %1429 = xor i64 %1428, %1417
  %1430 = lshr i64 %1429, 4
  %1431 = trunc i64 %1430 to i8
  %1432 = and i8 %1431, 1
  store i8 %1432, i8* %54, align 1, !tbaa !2447
  %1433 = icmp eq i64 %1417, 0
  %1434 = zext i1 %1433 to i8
  store i8 %1434, i8* %57, align 1, !tbaa !2448
  %1435 = lshr i64 %1417, 63
  %1436 = trunc i64 %1435 to i8
  store i8 %1436, i8* %60, align 1, !tbaa !2449
  %1437 = xor i64 %1435, %1401
  %1438 = xor i64 %1435, %1416
  %1439 = add nuw nsw i64 %1437, %1438
  %1440 = icmp eq i64 %1439, 2
  %1441 = zext i1 %1440 to i8
  store i8 %1441, i8* %66, align 1, !tbaa !2450
  %1442 = add i64 %1409, -48
  %1443 = add i64 %1327, 63
  store i64 %1443, i64* %PC, align 8
  %1444 = inttoptr i64 %1442 to i32*
  %1445 = load i32, i32* %1444, align 4
  %1446 = sext i32 %1445 to i64
  store i64 %1446, i64* %RCX, align 8, !tbaa !2428
  %1447 = shl nsw i64 %1446, 3
  %1448 = add i64 %1447, %1417
  %1449 = add i64 %1327, 68
  store i64 %1449, i64* %PC, align 8
  %1450 = load i64, i64* %147, align 1
  %1451 = inttoptr i64 %1448 to i64*
  store i64 %1450, i64* %1451, align 8
  %1452 = load i64, i64* %RBP, align 8
  %1453 = add i64 %1452, -108
  %1454 = load i64, i64* %PC, align 8
  %1455 = add i64 %1454, 7
  store i64 %1455, i64* %PC, align 8
  %1456 = inttoptr i64 %1453 to i32*
  store i32 0, i32* %1456, align 4
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_402512

block_4027ab:                                     ; preds = %block_402512
  %1457 = add i64 %401, 36
  store i64 %1457, i64* %PC, align 8
  %1458 = load i32, i32* %373, align 4
  %1459 = sext i32 %1458 to i64
  store i64 %1459, i64* %RCX, align 8, !tbaa !2428
  %1460 = shl nsw i64 %1459, 3
  %1461 = add i64 %1460, %447
  %1462 = add i64 %401, 41
  store i64 %1462, i64* %PC, align 8
  %1463 = inttoptr i64 %1461 to double*
  %1464 = load double, double* %1463, align 8
  store double %1464, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %1465 = add i64 %365, -80
  %1466 = add i64 %401, 45
  store i64 %1466, i64* %PC, align 8
  %1467 = inttoptr i64 %1465 to i64*
  %1468 = load i64, i64* %1467, align 8
  store i64 %1468, i64* %RAX, align 8, !tbaa !2428
  %1469 = add i64 %401, 49
  store i64 %1469, i64* %PC, align 8
  %1470 = load i32, i32* %408, align 4
  %1471 = sext i32 %1470 to i64
  %1472 = mul nsw i64 %1471, 520
  store i64 %1472, i64* %RCX, align 8, !tbaa !2428
  %1473 = lshr i64 %1472, 63
  %1474 = add i64 %1472, %1468
  store i64 %1474, i64* %RAX, align 8, !tbaa !2428
  %1475 = icmp ult i64 %1474, %1468
  %1476 = icmp ult i64 %1474, %1472
  %1477 = or i1 %1475, %1476
  %1478 = zext i1 %1477 to i8
  store i8 %1478, i8* %42, align 1, !tbaa !2432
  %1479 = trunc i64 %1474 to i32
  %1480 = and i32 %1479, 255
  %1481 = tail call i32 @llvm.ctpop.i32(i32 %1480) #8
  %1482 = trunc i32 %1481 to i8
  %1483 = and i8 %1482, 1
  %1484 = xor i8 %1483, 1
  store i8 %1484, i8* %49, align 1, !tbaa !2446
  %1485 = xor i64 %1472, %1468
  %1486 = xor i64 %1485, %1474
  %1487 = lshr i64 %1486, 4
  %1488 = trunc i64 %1487 to i8
  %1489 = and i8 %1488, 1
  store i8 %1489, i8* %54, align 1, !tbaa !2447
  %1490 = icmp eq i64 %1474, 0
  %1491 = zext i1 %1490 to i8
  store i8 %1491, i8* %57, align 1, !tbaa !2448
  %1492 = lshr i64 %1474, 63
  %1493 = trunc i64 %1492 to i8
  store i8 %1493, i8* %60, align 1, !tbaa !2449
  %1494 = lshr i64 %1468, 63
  %1495 = xor i64 %1492, %1494
  %1496 = xor i64 %1492, %1473
  %1497 = add nuw nsw i64 %1495, %1496
  %1498 = icmp eq i64 %1497, 2
  %1499 = zext i1 %1498 to i8
  store i8 %1499, i8* %66, align 1, !tbaa !2450
  %1500 = add i64 %401, 63
  store i64 %1500, i64* %PC, align 8
  %1501 = load i32, i32* %373, align 4
  %1502 = sext i32 %1501 to i64
  store i64 %1502, i64* %RCX, align 8, !tbaa !2428
  %1503 = shl nsw i64 %1502, 3
  %1504 = add i64 %1503, %1474
  %1505 = add i64 %401, 68
  store i64 %1505, i64* %PC, align 8
  %1506 = inttoptr i64 %1504 to double*
  %1507 = load double, double* %1506, align 8
  %1508 = fsub double %1464, %1507
  store double %1508, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %1509 = load i64, i64* %RBP, align 8
  %1510 = add i64 %1509, -88
  %1511 = add i64 %401, 72
  store i64 %1511, i64* %PC, align 8
  %1512 = inttoptr i64 %1510 to i64*
  %1513 = load i64, i64* %1512, align 8
  store i64 %1513, i64* %RAX, align 8, !tbaa !2428
  %1514 = add i64 %1509, -100
  %1515 = add i64 %401, 76
  store i64 %1515, i64* %PC, align 8
  %1516 = inttoptr i64 %1514 to i32*
  %1517 = load i32, i32* %1516, align 4
  %1518 = sext i32 %1517 to i64
  %1519 = mul nsw i64 %1518, 520
  store i64 %1519, i64* %RCX, align 8, !tbaa !2428
  %1520 = lshr i64 %1519, 63
  %1521 = add i64 %1519, %1513
  store i64 %1521, i64* %RAX, align 8, !tbaa !2428
  %1522 = icmp ult i64 %1521, %1513
  %1523 = icmp ult i64 %1521, %1519
  %1524 = or i1 %1522, %1523
  %1525 = zext i1 %1524 to i8
  store i8 %1525, i8* %42, align 1, !tbaa !2432
  %1526 = trunc i64 %1521 to i32
  %1527 = and i32 %1526, 255
  %1528 = tail call i32 @llvm.ctpop.i32(i32 %1527) #8
  %1529 = trunc i32 %1528 to i8
  %1530 = and i8 %1529, 1
  %1531 = xor i8 %1530, 1
  store i8 %1531, i8* %49, align 1, !tbaa !2446
  %1532 = xor i64 %1519, %1513
  %1533 = xor i64 %1532, %1521
  %1534 = lshr i64 %1533, 4
  %1535 = trunc i64 %1534 to i8
  %1536 = and i8 %1535, 1
  store i8 %1536, i8* %54, align 1, !tbaa !2447
  %1537 = icmp eq i64 %1521, 0
  %1538 = zext i1 %1537 to i8
  store i8 %1538, i8* %57, align 1, !tbaa !2448
  %1539 = lshr i64 %1521, 63
  %1540 = trunc i64 %1539 to i8
  store i8 %1540, i8* %60, align 1, !tbaa !2449
  %1541 = lshr i64 %1513, 63
  %1542 = xor i64 %1539, %1541
  %1543 = xor i64 %1539, %1520
  %1544 = add nuw nsw i64 %1542, %1543
  %1545 = icmp eq i64 %1544, 2
  %1546 = zext i1 %1545 to i8
  store i8 %1546, i8* %66, align 1, !tbaa !2450
  %1547 = add i64 %1509, -52
  %1548 = add i64 %401, 90
  store i64 %1548, i64* %PC, align 8
  %1549 = inttoptr i64 %1547 to i32*
  %1550 = load i32, i32* %1549, align 4
  %1551 = sext i32 %1550 to i64
  store i64 %1551, i64* %RCX, align 8, !tbaa !2428
  %1552 = shl nsw i64 %1551, 3
  %1553 = add i64 %1552, %1521
  %1554 = add i64 %401, 95
  store i64 %1554, i64* %PC, align 8
  %1555 = inttoptr i64 %1553 to double*
  %1556 = load double, double* %1555, align 8
  %1557 = fadd double %1508, %1556
  store double %1557, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %1558 = add i64 %1509, 40
  %1559 = add i64 %401, 99
  store i64 %1559, i64* %PC, align 8
  %1560 = inttoptr i64 %1558 to i64*
  %1561 = load i64, i64* %1560, align 8
  store i64 %1561, i64* %RAX, align 8, !tbaa !2428
  %1562 = add i64 %401, 103
  store i64 %1562, i64* %PC, align 8
  %1563 = load i32, i32* %1516, align 4
  %1564 = sext i32 %1563 to i64
  %1565 = mul nsw i64 %1564, 33800
  store i64 %1565, i64* %RCX, align 8, !tbaa !2428
  %1566 = lshr i64 %1565, 63
  %1567 = add i64 %1565, %1561
  store i64 %1567, i64* %RAX, align 8, !tbaa !2428
  %1568 = icmp ult i64 %1567, %1561
  %1569 = icmp ult i64 %1567, %1565
  %1570 = or i1 %1568, %1569
  %1571 = zext i1 %1570 to i8
  store i8 %1571, i8* %42, align 1, !tbaa !2432
  %1572 = trunc i64 %1567 to i32
  %1573 = and i32 %1572, 255
  %1574 = tail call i32 @llvm.ctpop.i32(i32 %1573) #8
  %1575 = trunc i32 %1574 to i8
  %1576 = and i8 %1575, 1
  %1577 = xor i8 %1576, 1
  store i8 %1577, i8* %49, align 1, !tbaa !2446
  %1578 = xor i64 %1565, %1561
  %1579 = xor i64 %1578, %1567
  %1580 = lshr i64 %1579, 4
  %1581 = trunc i64 %1580 to i8
  %1582 = and i8 %1581, 1
  store i8 %1582, i8* %54, align 1, !tbaa !2447
  %1583 = icmp eq i64 %1567, 0
  %1584 = zext i1 %1583 to i8
  store i8 %1584, i8* %57, align 1, !tbaa !2448
  %1585 = lshr i64 %1567, 63
  %1586 = trunc i64 %1585 to i8
  store i8 %1586, i8* %60, align 1, !tbaa !2449
  %1587 = lshr i64 %1561, 63
  %1588 = xor i64 %1585, %1587
  %1589 = xor i64 %1585, %1566
  %1590 = add nuw nsw i64 %1588, %1589
  %1591 = icmp eq i64 %1590, 2
  %1592 = zext i1 %1591 to i8
  store i8 %1592, i8* %66, align 1, !tbaa !2450
  %1593 = load i64, i64* %RBP, align 8
  %1594 = add i64 %1593, -52
  %1595 = add i64 %401, 117
  store i64 %1595, i64* %PC, align 8
  %1596 = inttoptr i64 %1594 to i32*
  %1597 = load i32, i32* %1596, align 4
  %1598 = sext i32 %1597 to i64
  %1599 = mul nsw i64 %1598, 520
  store i64 %1599, i64* %RCX, align 8, !tbaa !2428
  %1600 = lshr i64 %1599, 63
  %1601 = add i64 %1599, %1567
  store i64 %1601, i64* %RAX, align 8, !tbaa !2428
  %1602 = icmp ult i64 %1601, %1567
  %1603 = icmp ult i64 %1601, %1599
  %1604 = or i1 %1602, %1603
  %1605 = zext i1 %1604 to i8
  store i8 %1605, i8* %42, align 1, !tbaa !2432
  %1606 = trunc i64 %1601 to i32
  %1607 = and i32 %1606, 255
  %1608 = tail call i32 @llvm.ctpop.i32(i32 %1607) #8
  %1609 = trunc i32 %1608 to i8
  %1610 = and i8 %1609, 1
  %1611 = xor i8 %1610, 1
  store i8 %1611, i8* %49, align 1, !tbaa !2446
  %1612 = xor i64 %1599, %1567
  %1613 = xor i64 %1612, %1601
  %1614 = lshr i64 %1613, 4
  %1615 = trunc i64 %1614 to i8
  %1616 = and i8 %1615, 1
  store i8 %1616, i8* %54, align 1, !tbaa !2447
  %1617 = icmp eq i64 %1601, 0
  %1618 = zext i1 %1617 to i8
  store i8 %1618, i8* %57, align 1, !tbaa !2448
  %1619 = lshr i64 %1601, 63
  %1620 = trunc i64 %1619 to i8
  store i8 %1620, i8* %60, align 1, !tbaa !2449
  %1621 = xor i64 %1619, %1585
  %1622 = xor i64 %1619, %1600
  %1623 = add nuw nsw i64 %1621, %1622
  %1624 = icmp eq i64 %1623, 2
  %1625 = zext i1 %1624 to i8
  store i8 %1625, i8* %66, align 1, !tbaa !2450
  %1626 = add i64 %1593, -48
  %1627 = add i64 %401, 131
  store i64 %1627, i64* %PC, align 8
  %1628 = inttoptr i64 %1626 to i32*
  %1629 = load i32, i32* %1628, align 4
  %1630 = sext i32 %1629 to i64
  store i64 %1630, i64* %RCX, align 8, !tbaa !2428
  %1631 = shl nsw i64 %1630, 3
  %1632 = add i64 %1631, %1601
  %1633 = add i64 %401, 136
  store i64 %1633, i64* %PC, align 8
  %1634 = load double, double* %228, align 1
  %1635 = inttoptr i64 %1632 to double*
  %1636 = load double, double* %1635, align 8
  %1637 = fsub double %1634, %1636
  store double %1637, double* %228, align 1, !tbaa !2452
  %1638 = add i64 %1593, -96
  %1639 = add i64 %401, 140
  store i64 %1639, i64* %PC, align 8
  %1640 = inttoptr i64 %1638 to i64*
  %1641 = load i64, i64* %1640, align 8
  store i64 %1641, i64* %RAX, align 8, !tbaa !2428
  %1642 = add i64 %1593, -100
  %1643 = add i64 %401, 144
  store i64 %1643, i64* %PC, align 8
  %1644 = inttoptr i64 %1642 to i32*
  %1645 = load i32, i32* %1644, align 4
  %1646 = sext i32 %1645 to i64
  %1647 = mul nsw i64 %1646, 520
  store i64 %1647, i64* %RCX, align 8, !tbaa !2428
  %1648 = lshr i64 %1647, 63
  %1649 = add i64 %1647, %1641
  store i64 %1649, i64* %RAX, align 8, !tbaa !2428
  %1650 = icmp ult i64 %1649, %1641
  %1651 = icmp ult i64 %1649, %1647
  %1652 = or i1 %1650, %1651
  %1653 = zext i1 %1652 to i8
  store i8 %1653, i8* %42, align 1, !tbaa !2432
  %1654 = trunc i64 %1649 to i32
  %1655 = and i32 %1654, 255
  %1656 = tail call i32 @llvm.ctpop.i32(i32 %1655) #8
  %1657 = trunc i32 %1656 to i8
  %1658 = and i8 %1657, 1
  %1659 = xor i8 %1658, 1
  store i8 %1659, i8* %49, align 1, !tbaa !2446
  %1660 = xor i64 %1647, %1641
  %1661 = xor i64 %1660, %1649
  %1662 = lshr i64 %1661, 4
  %1663 = trunc i64 %1662 to i8
  %1664 = and i8 %1663, 1
  store i8 %1664, i8* %54, align 1, !tbaa !2447
  %1665 = icmp eq i64 %1649, 0
  %1666 = zext i1 %1665 to i8
  store i8 %1666, i8* %57, align 1, !tbaa !2448
  %1667 = lshr i64 %1649, 63
  %1668 = trunc i64 %1667 to i8
  store i8 %1668, i8* %60, align 1, !tbaa !2449
  %1669 = lshr i64 %1641, 63
  %1670 = xor i64 %1667, %1669
  %1671 = xor i64 %1667, %1648
  %1672 = add nuw nsw i64 %1670, %1671
  %1673 = icmp eq i64 %1672, 2
  %1674 = zext i1 %1673 to i8
  store i8 %1674, i8* %66, align 1, !tbaa !2450
  %1675 = load i64, i64* %RBP, align 8
  %1676 = add i64 %1675, -104
  %1677 = add i64 %401, 158
  store i64 %1677, i64* %PC, align 8
  %1678 = inttoptr i64 %1676 to i32*
  %1679 = load i32, i32* %1678, align 4
  %1680 = sext i32 %1679 to i64
  store i64 %1680, i64* %RCX, align 8, !tbaa !2428
  %1681 = shl nsw i64 %1680, 3
  %1682 = add i64 %1681, %1649
  %1683 = add i64 %401, 163
  store i64 %1683, i64* %PC, align 8
  %1684 = inttoptr i64 %1682 to double*
  store double %1637, double* %1684, align 8
  %1685 = load i64, i64* %RBP, align 8
  %1686 = add i64 %1685, 88
  %1687 = load i64, i64* %PC, align 8
  %1688 = add i64 %1687, 4
  store i64 %1688, i64* %PC, align 8
  %1689 = inttoptr i64 %1686 to i64*
  %1690 = load i64, i64* %1689, align 8
  store i64 %1690, i64* %RAX, align 8, !tbaa !2428
  %1691 = add i64 %1685, -52
  %1692 = add i64 %1687, 8
  store i64 %1692, i64* %PC, align 8
  %1693 = inttoptr i64 %1691 to i32*
  %1694 = load i32, i32* %1693, align 4
  %1695 = sext i32 %1694 to i64
  store i64 %1695, i64* %RCX, align 8, !tbaa !2428
  %1696 = shl nsw i64 %1695, 3
  %1697 = add i64 %1696, %1690
  %1698 = add i64 %1687, 13
  store i64 %1698, i64* %PC, align 8
  %1699 = inttoptr i64 %1697 to double*
  %1700 = load double, double* %1699, align 8
  store double %1700, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %1701 = add i64 %1685, 96
  %1702 = add i64 %1687, 17
  store i64 %1702, i64* %PC, align 8
  %1703 = inttoptr i64 %1701 to i64*
  %1704 = load i64, i64* %1703, align 8
  store i64 %1704, i64* %RAX, align 8, !tbaa !2428
  %1705 = add i64 %1687, 21
  store i64 %1705, i64* %PC, align 8
  %1706 = load i32, i32* %1693, align 4
  %1707 = sext i32 %1706 to i64
  store i64 %1707, i64* %RCX, align 8, !tbaa !2428
  %1708 = shl nsw i64 %1707, 3
  %1709 = add i64 %1708, %1704
  %1710 = add i64 %1687, 26
  store i64 %1710, i64* %PC, align 8
  %1711 = inttoptr i64 %1709 to double*
  %1712 = load double, double* %1711, align 8
  %1713 = fdiv double %1700, %1712
  store double %1713, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %1714 = add i64 %1685, 24
  %1715 = add i64 %1687, 30
  store i64 %1715, i64* %PC, align 8
  %1716 = inttoptr i64 %1714 to i64*
  %1717 = load i64, i64* %1716, align 8
  store i64 %1717, i64* %RAX, align 8, !tbaa !2428
  %1718 = add i64 %1685, -100
  %1719 = add i64 %1687, 34
  store i64 %1719, i64* %PC, align 8
  %1720 = inttoptr i64 %1718 to i32*
  %1721 = load i32, i32* %1720, align 4
  %1722 = sext i32 %1721 to i64
  %1723 = mul nsw i64 %1722, 33800
  store i64 %1723, i64* %RCX, align 8, !tbaa !2428
  %1724 = lshr i64 %1723, 63
  %1725 = add i64 %1723, %1717
  store i64 %1725, i64* %RAX, align 8, !tbaa !2428
  %1726 = icmp ult i64 %1725, %1717
  %1727 = icmp ult i64 %1725, %1723
  %1728 = or i1 %1726, %1727
  %1729 = zext i1 %1728 to i8
  store i8 %1729, i8* %42, align 1, !tbaa !2432
  %1730 = trunc i64 %1725 to i32
  %1731 = and i32 %1730, 255
  %1732 = tail call i32 @llvm.ctpop.i32(i32 %1731) #8
  %1733 = trunc i32 %1732 to i8
  %1734 = and i8 %1733, 1
  %1735 = xor i8 %1734, 1
  store i8 %1735, i8* %49, align 1, !tbaa !2446
  %1736 = xor i64 %1723, %1717
  %1737 = xor i64 %1736, %1725
  %1738 = lshr i64 %1737, 4
  %1739 = trunc i64 %1738 to i8
  %1740 = and i8 %1739, 1
  store i8 %1740, i8* %54, align 1, !tbaa !2447
  %1741 = icmp eq i64 %1725, 0
  %1742 = zext i1 %1741 to i8
  store i8 %1742, i8* %57, align 1, !tbaa !2448
  %1743 = lshr i64 %1725, 63
  %1744 = trunc i64 %1743 to i8
  store i8 %1744, i8* %60, align 1, !tbaa !2449
  %1745 = lshr i64 %1717, 63
  %1746 = xor i64 %1743, %1745
  %1747 = xor i64 %1743, %1724
  %1748 = add nuw nsw i64 %1746, %1747
  %1749 = icmp eq i64 %1748, 2
  %1750 = zext i1 %1749 to i8
  store i8 %1750, i8* %66, align 1, !tbaa !2450
  %1751 = add i64 %1687, 48
  store i64 %1751, i64* %PC, align 8
  %1752 = load i32, i32* %1693, align 4
  %1753 = sext i32 %1752 to i64
  %1754 = mul nsw i64 %1753, 520
  store i64 %1754, i64* %RCX, align 8, !tbaa !2428
  %1755 = lshr i64 %1754, 63
  %1756 = add i64 %1754, %1725
  store i64 %1756, i64* %RAX, align 8, !tbaa !2428
  %1757 = icmp ult i64 %1756, %1725
  %1758 = icmp ult i64 %1756, %1754
  %1759 = or i1 %1757, %1758
  %1760 = zext i1 %1759 to i8
  store i8 %1760, i8* %42, align 1, !tbaa !2432
  %1761 = trunc i64 %1756 to i32
  %1762 = and i32 %1761, 255
  %1763 = tail call i32 @llvm.ctpop.i32(i32 %1762) #8
  %1764 = trunc i32 %1763 to i8
  %1765 = and i8 %1764, 1
  %1766 = xor i8 %1765, 1
  store i8 %1766, i8* %49, align 1, !tbaa !2446
  %1767 = xor i64 %1754, %1725
  %1768 = xor i64 %1767, %1756
  %1769 = lshr i64 %1768, 4
  %1770 = trunc i64 %1769 to i8
  %1771 = and i8 %1770, 1
  store i8 %1771, i8* %54, align 1, !tbaa !2447
  %1772 = icmp eq i64 %1756, 0
  %1773 = zext i1 %1772 to i8
  store i8 %1773, i8* %57, align 1, !tbaa !2448
  %1774 = lshr i64 %1756, 63
  %1775 = trunc i64 %1774 to i8
  store i8 %1775, i8* %60, align 1, !tbaa !2449
  %1776 = xor i64 %1774, %1743
  %1777 = xor i64 %1774, %1755
  %1778 = add nuw nsw i64 %1776, %1777
  %1779 = icmp eq i64 %1778, 2
  %1780 = zext i1 %1779 to i8
  store i8 %1780, i8* %66, align 1, !tbaa !2450
  %1781 = add i64 %1685, -48
  %1782 = add i64 %1687, 62
  store i64 %1782, i64* %PC, align 8
  %1783 = inttoptr i64 %1781 to i32*
  %1784 = load i32, i32* %1783, align 4
  %1785 = sext i32 %1784 to i64
  store i64 %1785, i64* %RCX, align 8, !tbaa !2428
  %1786 = shl nsw i64 %1785, 3
  %1787 = add i64 %1786, %1756
  %1788 = add i64 %1687, 67
  store i64 %1788, i64* %PC, align 8
  %1789 = load double, double* %228, align 1
  %1790 = inttoptr i64 %1787 to double*
  %1791 = load double, double* %1790, align 8
  %1792 = fmul double %1789, %1791
  store double %1792, double* %228, align 1, !tbaa !2452
  %1793 = add i64 %1685, -72
  %1794 = add i64 %1687, 72
  store i64 %1794, i64* %PC, align 8
  %1795 = inttoptr i64 %1793 to double*
  %1796 = load double, double* %1795, align 8
  store double %1796, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %1797 = add i64 %1687, 76
  store i64 %1797, i64* %PC, align 8
  %1798 = load i64, i64* %1703, align 8
  store i64 %1798, i64* %RAX, align 8, !tbaa !2428
  %1799 = add i64 %1687, 80
  store i64 %1799, i64* %PC, align 8
  %1800 = load i32, i32* %1693, align 4
  %1801 = sext i32 %1800 to i64
  store i64 %1801, i64* %RCX, align 8, !tbaa !2428
  %1802 = shl nsw i64 %1801, 3
  %1803 = add i64 %1802, %1798
  %1804 = add i64 %1687, 85
  store i64 %1804, i64* %PC, align 8
  %1805 = inttoptr i64 %1803 to double*
  %1806 = load double, double* %1805, align 8
  %1807 = fdiv double %1796, %1806
  store double %1807, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %1808 = load i64, i64* %RBP, align 8
  %1809 = add i64 %1808, -96
  %1810 = add i64 %1687, 89
  store i64 %1810, i64* %PC, align 8
  %1811 = inttoptr i64 %1809 to i64*
  %1812 = load i64, i64* %1811, align 8
  store i64 %1812, i64* %RAX, align 8, !tbaa !2428
  %1813 = add i64 %1808, -100
  %1814 = add i64 %1687, 93
  store i64 %1814, i64* %PC, align 8
  %1815 = inttoptr i64 %1813 to i32*
  %1816 = load i32, i32* %1815, align 4
  %1817 = sext i32 %1816 to i64
  %1818 = mul nsw i64 %1817, 520
  store i64 %1818, i64* %RCX, align 8, !tbaa !2428
  %1819 = lshr i64 %1818, 63
  %1820 = add i64 %1818, %1812
  store i64 %1820, i64* %RAX, align 8, !tbaa !2428
  %1821 = icmp ult i64 %1820, %1812
  %1822 = icmp ult i64 %1820, %1818
  %1823 = or i1 %1821, %1822
  %1824 = zext i1 %1823 to i8
  store i8 %1824, i8* %42, align 1, !tbaa !2432
  %1825 = trunc i64 %1820 to i32
  %1826 = and i32 %1825, 255
  %1827 = tail call i32 @llvm.ctpop.i32(i32 %1826) #8
  %1828 = trunc i32 %1827 to i8
  %1829 = and i8 %1828, 1
  %1830 = xor i8 %1829, 1
  store i8 %1830, i8* %49, align 1, !tbaa !2446
  %1831 = xor i64 %1818, %1812
  %1832 = xor i64 %1831, %1820
  %1833 = lshr i64 %1832, 4
  %1834 = trunc i64 %1833 to i8
  %1835 = and i8 %1834, 1
  store i8 %1835, i8* %54, align 1, !tbaa !2447
  %1836 = icmp eq i64 %1820, 0
  %1837 = zext i1 %1836 to i8
  store i8 %1837, i8* %57, align 1, !tbaa !2448
  %1838 = lshr i64 %1820, 63
  %1839 = trunc i64 %1838 to i8
  store i8 %1839, i8* %60, align 1, !tbaa !2449
  %1840 = lshr i64 %1812, 63
  %1841 = xor i64 %1838, %1840
  %1842 = xor i64 %1838, %1819
  %1843 = add nuw nsw i64 %1841, %1842
  %1844 = icmp eq i64 %1843, 2
  %1845 = zext i1 %1844 to i8
  store i8 %1845, i8* %66, align 1, !tbaa !2450
  %1846 = add i64 %1808, -104
  %1847 = add i64 %1687, 107
  store i64 %1847, i64* %PC, align 8
  %1848 = inttoptr i64 %1846 to i32*
  %1849 = load i32, i32* %1848, align 4
  %1850 = sext i32 %1849 to i64
  store i64 %1850, i64* %RCX, align 8, !tbaa !2428
  %1851 = shl nsw i64 %1850, 3
  %1852 = add i64 %1851, %1820
  %1853 = add i64 %1687, 112
  store i64 %1853, i64* %PC, align 8
  %1854 = inttoptr i64 %1852 to double*
  %1855 = load double, double* %1854, align 8
  %1856 = fmul double %1807, %1855
  store double %1856, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %1857 = fsub double %1792, %1856
  store double %1857, double* %228, align 1, !tbaa !2452
  %1858 = add i64 %1808, 16
  %1859 = add i64 %1687, 120
  store i64 %1859, i64* %PC, align 8
  %1860 = inttoptr i64 %1858 to i64*
  %1861 = load i64, i64* %1860, align 8
  store i64 %1861, i64* %RAX, align 8, !tbaa !2428
  %1862 = add i64 %1687, 124
  store i64 %1862, i64* %PC, align 8
  %1863 = load i32, i32* %1815, align 4
  %1864 = sext i32 %1863 to i64
  %1865 = mul nsw i64 %1864, 520
  store i64 %1865, i64* %RCX, align 8, !tbaa !2428
  %1866 = lshr i64 %1865, 63
  %1867 = add i64 %1865, %1861
  store i64 %1867, i64* %RAX, align 8, !tbaa !2428
  %1868 = icmp ult i64 %1867, %1861
  %1869 = icmp ult i64 %1867, %1865
  %1870 = or i1 %1868, %1869
  %1871 = zext i1 %1870 to i8
  store i8 %1871, i8* %42, align 1, !tbaa !2432
  %1872 = trunc i64 %1867 to i32
  %1873 = and i32 %1872, 255
  %1874 = tail call i32 @llvm.ctpop.i32(i32 %1873) #8
  %1875 = trunc i32 %1874 to i8
  %1876 = and i8 %1875, 1
  %1877 = xor i8 %1876, 1
  store i8 %1877, i8* %49, align 1, !tbaa !2446
  %1878 = xor i64 %1865, %1861
  %1879 = xor i64 %1878, %1867
  %1880 = lshr i64 %1879, 4
  %1881 = trunc i64 %1880 to i8
  %1882 = and i8 %1881, 1
  store i8 %1882, i8* %54, align 1, !tbaa !2447
  %1883 = icmp eq i64 %1867, 0
  %1884 = zext i1 %1883 to i8
  store i8 %1884, i8* %57, align 1, !tbaa !2448
  %1885 = lshr i64 %1867, 63
  %1886 = trunc i64 %1885 to i8
  store i8 %1886, i8* %60, align 1, !tbaa !2449
  %1887 = lshr i64 %1861, 63
  %1888 = xor i64 %1885, %1887
  %1889 = xor i64 %1885, %1866
  %1890 = add nuw nsw i64 %1888, %1889
  %1891 = icmp eq i64 %1890, 2
  %1892 = zext i1 %1891 to i8
  store i8 %1892, i8* %66, align 1, !tbaa !2450
  %1893 = add i64 %1687, 138
  store i64 %1893, i64* %PC, align 8
  %1894 = load i32, i32* %1848, align 4
  %1895 = sext i32 %1894 to i64
  store i64 %1895, i64* %RCX, align 8, !tbaa !2428
  %1896 = shl nsw i64 %1895, 3
  %1897 = add i64 %1896, %1867
  %1898 = add i64 %1687, 143
  store i64 %1898, i64* %PC, align 8
  %1899 = inttoptr i64 %1897 to double*
  store double %1857, double* %1899, align 8
  %1900 = load i64, i64* %RBP, align 8
  %1901 = add i64 %1900, 72
  %1902 = load i64, i64* %PC, align 8
  %1903 = add i64 %1902, 4
  store i64 %1903, i64* %PC, align 8
  %1904 = inttoptr i64 %1901 to i64*
  %1905 = load i64, i64* %1904, align 8
  store i64 %1905, i64* %RAX, align 8, !tbaa !2428
  %1906 = add i64 %1900, -48
  %1907 = add i64 %1902, 8
  store i64 %1907, i64* %PC, align 8
  %1908 = inttoptr i64 %1906 to i32*
  %1909 = load i32, i32* %1908, align 4
  %1910 = sext i32 %1909 to i64
  store i64 %1910, i64* %RCX, align 8, !tbaa !2428
  %1911 = shl nsw i64 %1910, 3
  %1912 = add i64 %1911, %1905
  %1913 = add i64 %1902, 13
  store i64 %1913, i64* %PC, align 8
  %1914 = inttoptr i64 %1912 to double*
  %1915 = load double, double* %1914, align 8
  store double %1915, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %1916 = add i64 %1900, 80
  %1917 = add i64 %1902, 17
  store i64 %1917, i64* %PC, align 8
  %1918 = inttoptr i64 %1916 to i64*
  %1919 = load i64, i64* %1918, align 8
  store i64 %1919, i64* %RAX, align 8, !tbaa !2428
  %1920 = add i64 %1902, 21
  store i64 %1920, i64* %PC, align 8
  %1921 = load i32, i32* %1908, align 4
  %1922 = sext i32 %1921 to i64
  store i64 %1922, i64* %RCX, align 8, !tbaa !2428
  %1923 = shl nsw i64 %1922, 3
  %1924 = add i64 %1923, %1919
  %1925 = add i64 %1902, 26
  store i64 %1925, i64* %PC, align 8
  %1926 = inttoptr i64 %1924 to double*
  %1927 = load double, double* %1926, align 8
  %1928 = fdiv double %1915, %1927
  store double %1928, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %1929 = add i64 %1900, 48
  %1930 = add i64 %1902, 30
  store i64 %1930, i64* %PC, align 8
  %1931 = inttoptr i64 %1929 to i64*
  %1932 = load i64, i64* %1931, align 8
  store i64 %1932, i64* %RAX, align 8, !tbaa !2428
  %1933 = add i64 %1900, -100
  %1934 = add i64 %1902, 34
  store i64 %1934, i64* %PC, align 8
  %1935 = inttoptr i64 %1933 to i32*
  %1936 = load i32, i32* %1935, align 4
  %1937 = sext i32 %1936 to i64
  %1938 = mul nsw i64 %1937, 33800
  store i64 %1938, i64* %RCX, align 8, !tbaa !2428
  %1939 = lshr i64 %1938, 63
  %1940 = add i64 %1938, %1932
  store i64 %1940, i64* %RAX, align 8, !tbaa !2428
  %1941 = icmp ult i64 %1940, %1932
  %1942 = icmp ult i64 %1940, %1938
  %1943 = or i1 %1941, %1942
  %1944 = zext i1 %1943 to i8
  store i8 %1944, i8* %42, align 1, !tbaa !2432
  %1945 = trunc i64 %1940 to i32
  %1946 = and i32 %1945, 255
  %1947 = tail call i32 @llvm.ctpop.i32(i32 %1946) #8
  %1948 = trunc i32 %1947 to i8
  %1949 = and i8 %1948, 1
  %1950 = xor i8 %1949, 1
  store i8 %1950, i8* %49, align 1, !tbaa !2446
  %1951 = xor i64 %1938, %1932
  %1952 = xor i64 %1951, %1940
  %1953 = lshr i64 %1952, 4
  %1954 = trunc i64 %1953 to i8
  %1955 = and i8 %1954, 1
  store i8 %1955, i8* %54, align 1, !tbaa !2447
  %1956 = icmp eq i64 %1940, 0
  %1957 = zext i1 %1956 to i8
  store i8 %1957, i8* %57, align 1, !tbaa !2448
  %1958 = lshr i64 %1940, 63
  %1959 = trunc i64 %1958 to i8
  store i8 %1959, i8* %60, align 1, !tbaa !2449
  %1960 = lshr i64 %1932, 63
  %1961 = xor i64 %1958, %1960
  %1962 = xor i64 %1958, %1939
  %1963 = add nuw nsw i64 %1961, %1962
  %1964 = icmp eq i64 %1963, 2
  %1965 = zext i1 %1964 to i8
  store i8 %1965, i8* %66, align 1, !tbaa !2450
  %1966 = add i64 %1900, -52
  %1967 = add i64 %1902, 48
  store i64 %1967, i64* %PC, align 8
  %1968 = inttoptr i64 %1966 to i32*
  %1969 = load i32, i32* %1968, align 4
  %1970 = sext i32 %1969 to i64
  %1971 = mul nsw i64 %1970, 520
  store i64 %1971, i64* %RCX, align 8, !tbaa !2428
  %1972 = lshr i64 %1971, 63
  %1973 = add i64 %1971, %1940
  store i64 %1973, i64* %RAX, align 8, !tbaa !2428
  %1974 = icmp ult i64 %1973, %1940
  %1975 = icmp ult i64 %1973, %1971
  %1976 = or i1 %1974, %1975
  %1977 = zext i1 %1976 to i8
  store i8 %1977, i8* %42, align 1, !tbaa !2432
  %1978 = trunc i64 %1973 to i32
  %1979 = and i32 %1978, 255
  %1980 = tail call i32 @llvm.ctpop.i32(i32 %1979) #8
  %1981 = trunc i32 %1980 to i8
  %1982 = and i8 %1981, 1
  %1983 = xor i8 %1982, 1
  store i8 %1983, i8* %49, align 1, !tbaa !2446
  %1984 = xor i64 %1971, %1940
  %1985 = xor i64 %1984, %1973
  %1986 = lshr i64 %1985, 4
  %1987 = trunc i64 %1986 to i8
  %1988 = and i8 %1987, 1
  store i8 %1988, i8* %54, align 1, !tbaa !2447
  %1989 = icmp eq i64 %1973, 0
  %1990 = zext i1 %1989 to i8
  store i8 %1990, i8* %57, align 1, !tbaa !2448
  %1991 = lshr i64 %1973, 63
  %1992 = trunc i64 %1991 to i8
  store i8 %1992, i8* %60, align 1, !tbaa !2449
  %1993 = xor i64 %1991, %1958
  %1994 = xor i64 %1991, %1972
  %1995 = add nuw nsw i64 %1993, %1994
  %1996 = icmp eq i64 %1995, 2
  %1997 = zext i1 %1996 to i8
  store i8 %1997, i8* %66, align 1, !tbaa !2450
  %1998 = add i64 %1902, 62
  store i64 %1998, i64* %PC, align 8
  %1999 = load i32, i32* %1908, align 4
  %2000 = sext i32 %1999 to i64
  store i64 %2000, i64* %RCX, align 8, !tbaa !2428
  %2001 = shl nsw i64 %2000, 3
  %2002 = add i64 %2001, %1973
  %2003 = add i64 %1902, 67
  store i64 %2003, i64* %PC, align 8
  %2004 = load double, double* %228, align 1
  %2005 = inttoptr i64 %2002 to double*
  %2006 = load double, double* %2005, align 8
  %2007 = fmul double %2004, %2006
  store double %2007, double* %228, align 1, !tbaa !2452
  %2008 = add i64 %1900, -64
  %2009 = add i64 %1902, 72
  store i64 %2009, i64* %PC, align 8
  %2010 = inttoptr i64 %2008 to double*
  %2011 = load double, double* %2010, align 8
  store double %2011, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %2012 = add i64 %1900, 64
  %2013 = add i64 %1902, 76
  store i64 %2013, i64* %PC, align 8
  %2014 = inttoptr i64 %2012 to i64*
  %2015 = load i64, i64* %2014, align 8
  store i64 %2015, i64* %RAX, align 8, !tbaa !2428
  %2016 = add i64 %1902, 80
  store i64 %2016, i64* %PC, align 8
  %2017 = load i32, i32* %1935, align 4
  %2018 = sext i32 %2017 to i64
  store i64 %2018, i64* %RCX, align 8, !tbaa !2428
  %2019 = shl nsw i64 %2018, 3
  %2020 = add i64 %2019, %2015
  %2021 = add i64 %1902, 85
  store i64 %2021, i64* %PC, align 8
  %2022 = inttoptr i64 %2020 to double*
  %2023 = load double, double* %2022, align 8
  %2024 = fmul double %2011, %2023
  store double %2024, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %2025 = load i64, i64* %RBP, align 8
  %2026 = add i64 %2025, 80
  %2027 = add i64 %1902, 89
  store i64 %2027, i64* %PC, align 8
  %2028 = inttoptr i64 %2026 to i64*
  %2029 = load i64, i64* %2028, align 8
  store i64 %2029, i64* %RAX, align 8, !tbaa !2428
  %2030 = add i64 %2025, -48
  %2031 = add i64 %1902, 93
  store i64 %2031, i64* %PC, align 8
  %2032 = inttoptr i64 %2030 to i32*
  %2033 = load i32, i32* %2032, align 4
  %2034 = sext i32 %2033 to i64
  store i64 %2034, i64* %RCX, align 8, !tbaa !2428
  %2035 = shl nsw i64 %2034, 3
  %2036 = add i64 %2035, %2029
  %2037 = add i64 %1902, 98
  store i64 %2037, i64* %PC, align 8
  %2038 = inttoptr i64 %2036 to double*
  %2039 = load double, double* %2038, align 8
  %2040 = fdiv double %2024, %2039
  store double %2040, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %2041 = add i64 %2025, 16
  %2042 = add i64 %1902, 102
  store i64 %2042, i64* %PC, align 8
  %2043 = inttoptr i64 %2041 to i64*
  %2044 = load i64, i64* %2043, align 8
  store i64 %2044, i64* %RAX, align 8, !tbaa !2428
  %2045 = add i64 %2025, -100
  %2046 = add i64 %1902, 106
  store i64 %2046, i64* %PC, align 8
  %2047 = inttoptr i64 %2045 to i32*
  %2048 = load i32, i32* %2047, align 4
  %2049 = sext i32 %2048 to i64
  %2050 = mul nsw i64 %2049, 520
  store i64 %2050, i64* %RCX, align 8, !tbaa !2428
  %2051 = lshr i64 %2050, 63
  %2052 = add i64 %2050, %2044
  store i64 %2052, i64* %RAX, align 8, !tbaa !2428
  %2053 = icmp ult i64 %2052, %2044
  %2054 = icmp ult i64 %2052, %2050
  %2055 = or i1 %2053, %2054
  %2056 = zext i1 %2055 to i8
  store i8 %2056, i8* %42, align 1, !tbaa !2432
  %2057 = trunc i64 %2052 to i32
  %2058 = and i32 %2057, 255
  %2059 = tail call i32 @llvm.ctpop.i32(i32 %2058) #8
  %2060 = trunc i32 %2059 to i8
  %2061 = and i8 %2060, 1
  %2062 = xor i8 %2061, 1
  store i8 %2062, i8* %49, align 1, !tbaa !2446
  %2063 = xor i64 %2050, %2044
  %2064 = xor i64 %2063, %2052
  %2065 = lshr i64 %2064, 4
  %2066 = trunc i64 %2065 to i8
  %2067 = and i8 %2066, 1
  store i8 %2067, i8* %54, align 1, !tbaa !2447
  %2068 = icmp eq i64 %2052, 0
  %2069 = zext i1 %2068 to i8
  store i8 %2069, i8* %57, align 1, !tbaa !2448
  %2070 = lshr i64 %2052, 63
  %2071 = trunc i64 %2070 to i8
  store i8 %2071, i8* %60, align 1, !tbaa !2449
  %2072 = lshr i64 %2044, 63
  %2073 = xor i64 %2070, %2072
  %2074 = xor i64 %2070, %2051
  %2075 = add nuw nsw i64 %2073, %2074
  %2076 = icmp eq i64 %2075, 2
  %2077 = zext i1 %2076 to i8
  store i8 %2077, i8* %66, align 1, !tbaa !2450
  %2078 = add i64 %2025, -104
  %2079 = add i64 %1902, 120
  store i64 %2079, i64* %PC, align 8
  %2080 = inttoptr i64 %2078 to i32*
  %2081 = load i32, i32* %2080, align 4
  %2082 = sext i32 %2081 to i64
  store i64 %2082, i64* %RCX, align 8, !tbaa !2428
  %2083 = shl nsw i64 %2082, 3
  %2084 = add i64 %2083, %2052
  %2085 = add i64 %1902, 125
  store i64 %2085, i64* %PC, align 8
  %2086 = inttoptr i64 %2084 to double*
  %2087 = load double, double* %2086, align 8
  %2088 = fmul double %2040, %2087
  store double %2088, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %2089 = load double, double* %228, align 1
  %2090 = fadd double %2089, %2088
  store double %2090, double* %228, align 1, !tbaa !2452
  %2091 = add i64 %2025, -64
  %2092 = add i64 %1902, 134
  store i64 %2092, i64* %PC, align 8
  %2093 = inttoptr i64 %2091 to double*
  %2094 = load double, double* %2093, align 8
  store double %2094, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %2095 = add i64 %2025, 56
  %2096 = add i64 %1902, 138
  store i64 %2096, i64* %PC, align 8
  %2097 = inttoptr i64 %2095 to i64*
  %2098 = load i64, i64* %2097, align 8
  store i64 %2098, i64* %RAX, align 8, !tbaa !2428
  %2099 = add i64 %1902, 142
  store i64 %2099, i64* %PC, align 8
  %2100 = load i32, i32* %2047, align 4
  %2101 = sext i32 %2100 to i64
  store i64 %2101, i64* %RCX, align 8, !tbaa !2428
  %2102 = shl nsw i64 %2101, 3
  %2103 = add i64 %2102, %2098
  %2104 = add i64 %1902, 147
  store i64 %2104, i64* %PC, align 8
  %2105 = inttoptr i64 %2103 to double*
  %2106 = load double, double* %2105, align 8
  %2107 = fmul double %2094, %2106
  store double %2107, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %2108 = add i64 %1902, 151
  store i64 %2108, i64* %PC, align 8
  %2109 = load i64, i64* %2028, align 8
  store i64 %2109, i64* %RAX, align 8, !tbaa !2428
  %2110 = add i64 %1902, 155
  store i64 %2110, i64* %PC, align 8
  %2111 = load i32, i32* %2032, align 4
  %2112 = sext i32 %2111 to i64
  store i64 %2112, i64* %RCX, align 8, !tbaa !2428
  %2113 = shl nsw i64 %2112, 3
  %2114 = add i64 %2113, %2109
  %2115 = add i64 %1902, 160
  store i64 %2115, i64* %PC, align 8
  %2116 = inttoptr i64 %2114 to double*
  %2117 = load double, double* %2116, align 8
  %2118 = fdiv double %2107, %2117
  store double %2118, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %2119 = add i64 %2025, 24
  %2120 = add i64 %1902, 164
  store i64 %2120, i64* %PC, align 8
  %2121 = inttoptr i64 %2119 to i64*
  %2122 = load i64, i64* %2121, align 8
  store i64 %2122, i64* %RAX, align 8, !tbaa !2428
  %2123 = add i64 %1902, 168
  store i64 %2123, i64* %PC, align 8
  %2124 = load i32, i32* %2047, align 4
  %2125 = sext i32 %2124 to i64
  %2126 = mul nsw i64 %2125, 33800
  store i64 %2126, i64* %RCX, align 8, !tbaa !2428
  %2127 = lshr i64 %2126, 63
  %2128 = add i64 %2126, %2122
  store i64 %2128, i64* %RAX, align 8, !tbaa !2428
  %2129 = icmp ult i64 %2128, %2122
  %2130 = icmp ult i64 %2128, %2126
  %2131 = or i1 %2129, %2130
  %2132 = zext i1 %2131 to i8
  store i8 %2132, i8* %42, align 1, !tbaa !2432
  %2133 = trunc i64 %2128 to i32
  %2134 = and i32 %2133, 255
  %2135 = tail call i32 @llvm.ctpop.i32(i32 %2134) #8
  %2136 = trunc i32 %2135 to i8
  %2137 = and i8 %2136, 1
  %2138 = xor i8 %2137, 1
  store i8 %2138, i8* %49, align 1, !tbaa !2446
  %2139 = xor i64 %2126, %2122
  %2140 = xor i64 %2139, %2128
  %2141 = lshr i64 %2140, 4
  %2142 = trunc i64 %2141 to i8
  %2143 = and i8 %2142, 1
  store i8 %2143, i8* %54, align 1, !tbaa !2447
  %2144 = icmp eq i64 %2128, 0
  %2145 = zext i1 %2144 to i8
  store i8 %2145, i8* %57, align 1, !tbaa !2448
  %2146 = lshr i64 %2128, 63
  %2147 = trunc i64 %2146 to i8
  store i8 %2147, i8* %60, align 1, !tbaa !2449
  %2148 = lshr i64 %2122, 63
  %2149 = xor i64 %2146, %2148
  %2150 = xor i64 %2146, %2127
  %2151 = add nuw nsw i64 %2149, %2150
  %2152 = icmp eq i64 %2151, 2
  %2153 = zext i1 %2152 to i8
  store i8 %2153, i8* %66, align 1, !tbaa !2450
  %2154 = load i64, i64* %RBP, align 8
  %2155 = add i64 %2154, -52
  %2156 = add i64 %1902, 182
  store i64 %2156, i64* %PC, align 8
  %2157 = inttoptr i64 %2155 to i32*
  %2158 = load i32, i32* %2157, align 4
  %2159 = sext i32 %2158 to i64
  %2160 = mul nsw i64 %2159, 520
  store i64 %2160, i64* %RCX, align 8, !tbaa !2428
  %2161 = lshr i64 %2160, 63
  %2162 = add i64 %2160, %2128
  store i64 %2162, i64* %RAX, align 8, !tbaa !2428
  %2163 = icmp ult i64 %2162, %2128
  %2164 = icmp ult i64 %2162, %2160
  %2165 = or i1 %2163, %2164
  %2166 = zext i1 %2165 to i8
  store i8 %2166, i8* %42, align 1, !tbaa !2432
  %2167 = trunc i64 %2162 to i32
  %2168 = and i32 %2167, 255
  %2169 = tail call i32 @llvm.ctpop.i32(i32 %2168) #8
  %2170 = trunc i32 %2169 to i8
  %2171 = and i8 %2170, 1
  %2172 = xor i8 %2171, 1
  store i8 %2172, i8* %49, align 1, !tbaa !2446
  %2173 = xor i64 %2160, %2128
  %2174 = xor i64 %2173, %2162
  %2175 = lshr i64 %2174, 4
  %2176 = trunc i64 %2175 to i8
  %2177 = and i8 %2176, 1
  store i8 %2177, i8* %54, align 1, !tbaa !2447
  %2178 = icmp eq i64 %2162, 0
  %2179 = zext i1 %2178 to i8
  store i8 %2179, i8* %57, align 1, !tbaa !2448
  %2180 = lshr i64 %2162, 63
  %2181 = trunc i64 %2180 to i8
  store i8 %2181, i8* %60, align 1, !tbaa !2449
  %2182 = xor i64 %2180, %2146
  %2183 = xor i64 %2180, %2161
  %2184 = add nuw nsw i64 %2182, %2183
  %2185 = icmp eq i64 %2184, 2
  %2186 = zext i1 %2185 to i8
  store i8 %2186, i8* %66, align 1, !tbaa !2450
  %2187 = add i64 %2154, -48
  %2188 = add i64 %1902, 196
  store i64 %2188, i64* %PC, align 8
  %2189 = inttoptr i64 %2187 to i32*
  %2190 = load i32, i32* %2189, align 4
  %2191 = sext i32 %2190 to i64
  store i64 %2191, i64* %RCX, align 8, !tbaa !2428
  %2192 = shl nsw i64 %2191, 3
  %2193 = add i64 %2192, %2162
  %2194 = add i64 %1902, 201
  store i64 %2194, i64* %PC, align 8
  %2195 = load double, double* %231, align 1
  %2196 = inttoptr i64 %2193 to double*
  %2197 = load double, double* %2196, align 8
  %2198 = fmul double %2195, %2197
  store double %2198, double* %231, align 1, !tbaa !2452
  %2199 = load double, double* %228, align 1
  %2200 = fsub double %2199, %2198
  store double %2200, double* %228, align 1, !tbaa !2452
  %2201 = add i64 %2154, 48
  %2202 = add i64 %1902, 209
  store i64 %2202, i64* %PC, align 8
  %2203 = inttoptr i64 %2201 to i64*
  %2204 = load i64, i64* %2203, align 8
  store i64 %2204, i64* %RAX, align 8, !tbaa !2428
  %2205 = add i64 %2154, -100
  %2206 = add i64 %1902, 213
  store i64 %2206, i64* %PC, align 8
  %2207 = inttoptr i64 %2205 to i32*
  %2208 = load i32, i32* %2207, align 4
  %2209 = sext i32 %2208 to i64
  %2210 = mul nsw i64 %2209, 33800
  store i64 %2210, i64* %RCX, align 8, !tbaa !2428
  %2211 = lshr i64 %2210, 63
  %2212 = add i64 %2210, %2204
  store i64 %2212, i64* %RAX, align 8, !tbaa !2428
  %2213 = icmp ult i64 %2212, %2204
  %2214 = icmp ult i64 %2212, %2210
  %2215 = or i1 %2213, %2214
  %2216 = zext i1 %2215 to i8
  store i8 %2216, i8* %42, align 1, !tbaa !2432
  %2217 = trunc i64 %2212 to i32
  %2218 = and i32 %2217, 255
  %2219 = tail call i32 @llvm.ctpop.i32(i32 %2218) #8
  %2220 = trunc i32 %2219 to i8
  %2221 = and i8 %2220, 1
  %2222 = xor i8 %2221, 1
  store i8 %2222, i8* %49, align 1, !tbaa !2446
  %2223 = xor i64 %2210, %2204
  %2224 = xor i64 %2223, %2212
  %2225 = lshr i64 %2224, 4
  %2226 = trunc i64 %2225 to i8
  %2227 = and i8 %2226, 1
  store i8 %2227, i8* %54, align 1, !tbaa !2447
  %2228 = icmp eq i64 %2212, 0
  %2229 = zext i1 %2228 to i8
  store i8 %2229, i8* %57, align 1, !tbaa !2448
  %2230 = lshr i64 %2212, 63
  %2231 = trunc i64 %2230 to i8
  store i8 %2231, i8* %60, align 1, !tbaa !2449
  %2232 = lshr i64 %2204, 63
  %2233 = xor i64 %2230, %2232
  %2234 = xor i64 %2230, %2211
  %2235 = add nuw nsw i64 %2233, %2234
  %2236 = icmp eq i64 %2235, 2
  %2237 = zext i1 %2236 to i8
  store i8 %2237, i8* %66, align 1, !tbaa !2450
  %2238 = load i64, i64* %RBP, align 8
  %2239 = add i64 %2238, -52
  %2240 = add i64 %1902, 227
  store i64 %2240, i64* %PC, align 8
  %2241 = inttoptr i64 %2239 to i32*
  %2242 = load i32, i32* %2241, align 4
  %2243 = sext i32 %2242 to i64
  %2244 = mul nsw i64 %2243, 520
  store i64 %2244, i64* %RCX, align 8, !tbaa !2428
  %2245 = lshr i64 %2244, 63
  %2246 = add i64 %2244, %2212
  store i64 %2246, i64* %RAX, align 8, !tbaa !2428
  %2247 = icmp ult i64 %2246, %2212
  %2248 = icmp ult i64 %2246, %2244
  %2249 = or i1 %2247, %2248
  %2250 = zext i1 %2249 to i8
  store i8 %2250, i8* %42, align 1, !tbaa !2432
  %2251 = trunc i64 %2246 to i32
  %2252 = and i32 %2251, 255
  %2253 = tail call i32 @llvm.ctpop.i32(i32 %2252) #8
  %2254 = trunc i32 %2253 to i8
  %2255 = and i8 %2254, 1
  %2256 = xor i8 %2255, 1
  store i8 %2256, i8* %49, align 1, !tbaa !2446
  %2257 = xor i64 %2244, %2212
  %2258 = xor i64 %2257, %2246
  %2259 = lshr i64 %2258, 4
  %2260 = trunc i64 %2259 to i8
  %2261 = and i8 %2260, 1
  store i8 %2261, i8* %54, align 1, !tbaa !2447
  %2262 = icmp eq i64 %2246, 0
  %2263 = zext i1 %2262 to i8
  store i8 %2263, i8* %57, align 1, !tbaa !2448
  %2264 = lshr i64 %2246, 63
  %2265 = trunc i64 %2264 to i8
  store i8 %2265, i8* %60, align 1, !tbaa !2449
  %2266 = xor i64 %2264, %2230
  %2267 = xor i64 %2264, %2245
  %2268 = add nuw nsw i64 %2266, %2267
  %2269 = icmp eq i64 %2268, 2
  %2270 = zext i1 %2269 to i8
  store i8 %2270, i8* %66, align 1, !tbaa !2450
  %2271 = add i64 %2238, -48
  %2272 = add i64 %1902, 241
  store i64 %2272, i64* %PC, align 8
  %2273 = inttoptr i64 %2271 to i32*
  %2274 = load i32, i32* %2273, align 4
  %2275 = sext i32 %2274 to i64
  store i64 %2275, i64* %RCX, align 8, !tbaa !2428
  %2276 = shl nsw i64 %2275, 3
  %2277 = add i64 %2276, %2246
  %2278 = add i64 %1902, 246
  store i64 %2278, i64* %PC, align 8
  %2279 = load i64, i64* %147, align 1
  %2280 = inttoptr i64 %2277 to i64*
  store i64 %2279, i64* %2280, align 8
  %2281 = load i64, i64* %RBP, align 8
  %2282 = add i64 %2281, 16
  %2283 = load i64, i64* %PC, align 8
  %2284 = add i64 %2283, 4
  store i64 %2284, i64* %PC, align 8
  %2285 = inttoptr i64 %2282 to i64*
  %2286 = load i64, i64* %2285, align 8
  store i64 %2286, i64* %RAX, align 8, !tbaa !2428
  %2287 = add i64 %2281, -100
  %2288 = add i64 %2283, 8
  store i64 %2288, i64* %PC, align 8
  %2289 = inttoptr i64 %2287 to i32*
  %2290 = load i32, i32* %2289, align 4
  %2291 = sext i32 %2290 to i64
  %2292 = mul nsw i64 %2291, 520
  store i64 %2292, i64* %RCX, align 8, !tbaa !2428
  %2293 = lshr i64 %2292, 63
  %2294 = add i64 %2292, %2286
  store i64 %2294, i64* %RAX, align 8, !tbaa !2428
  %2295 = icmp ult i64 %2294, %2286
  %2296 = icmp ult i64 %2294, %2292
  %2297 = or i1 %2295, %2296
  %2298 = zext i1 %2297 to i8
  store i8 %2298, i8* %42, align 1, !tbaa !2432
  %2299 = trunc i64 %2294 to i32
  %2300 = and i32 %2299, 255
  %2301 = tail call i32 @llvm.ctpop.i32(i32 %2300) #8
  %2302 = trunc i32 %2301 to i8
  %2303 = and i8 %2302, 1
  %2304 = xor i8 %2303, 1
  store i8 %2304, i8* %49, align 1, !tbaa !2446
  %2305 = xor i64 %2292, %2286
  %2306 = xor i64 %2305, %2294
  %2307 = lshr i64 %2306, 4
  %2308 = trunc i64 %2307 to i8
  %2309 = and i8 %2308, 1
  store i8 %2309, i8* %54, align 1, !tbaa !2447
  %2310 = icmp eq i64 %2294, 0
  %2311 = zext i1 %2310 to i8
  store i8 %2311, i8* %57, align 1, !tbaa !2448
  %2312 = lshr i64 %2294, 63
  %2313 = trunc i64 %2312 to i8
  store i8 %2313, i8* %60, align 1, !tbaa !2449
  %2314 = lshr i64 %2286, 63
  %2315 = xor i64 %2312, %2314
  %2316 = xor i64 %2312, %2293
  %2317 = add nuw nsw i64 %2315, %2316
  %2318 = icmp eq i64 %2317, 2
  %2319 = zext i1 %2318 to i8
  store i8 %2319, i8* %66, align 1, !tbaa !2450
  %2320 = add i64 %2281, -104
  %2321 = add i64 %2283, 22
  store i64 %2321, i64* %PC, align 8
  %2322 = inttoptr i64 %2320 to i32*
  %2323 = load i32, i32* %2322, align 4
  %2324 = sext i32 %2323 to i64
  store i64 %2324, i64* %RCX, align 8, !tbaa !2428
  %2325 = shl nsw i64 %2324, 3
  %2326 = add i64 %2325, %2294
  %2327 = add i64 %2283, 27
  store i64 %2327, i64* %PC, align 8
  %2328 = inttoptr i64 %2326 to i64*
  %2329 = load i64, i64* %2328, align 8
  store i64 %2329, i64* %147, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %2330 = add i64 %2281, 24
  %2331 = add i64 %2283, 31
  store i64 %2331, i64* %PC, align 8
  %2332 = inttoptr i64 %2330 to i64*
  %2333 = load i64, i64* %2332, align 8
  store i64 %2333, i64* %RAX, align 8, !tbaa !2428
  %2334 = add i64 %2283, 35
  store i64 %2334, i64* %PC, align 8
  %2335 = load i32, i32* %2289, align 4
  %2336 = sext i32 %2335 to i64
  %2337 = mul nsw i64 %2336, 33800
  store i64 %2337, i64* %RCX, align 8, !tbaa !2428
  %2338 = lshr i64 %2337, 63
  %2339 = add i64 %2337, %2333
  store i64 %2339, i64* %RAX, align 8, !tbaa !2428
  %2340 = icmp ult i64 %2339, %2333
  %2341 = icmp ult i64 %2339, %2337
  %2342 = or i1 %2340, %2341
  %2343 = zext i1 %2342 to i8
  store i8 %2343, i8* %42, align 1, !tbaa !2432
  %2344 = trunc i64 %2339 to i32
  %2345 = and i32 %2344, 255
  %2346 = tail call i32 @llvm.ctpop.i32(i32 %2345) #8
  %2347 = trunc i32 %2346 to i8
  %2348 = and i8 %2347, 1
  %2349 = xor i8 %2348, 1
  store i8 %2349, i8* %49, align 1, !tbaa !2446
  %2350 = xor i64 %2337, %2333
  %2351 = xor i64 %2350, %2339
  %2352 = lshr i64 %2351, 4
  %2353 = trunc i64 %2352 to i8
  %2354 = and i8 %2353, 1
  store i8 %2354, i8* %54, align 1, !tbaa !2447
  %2355 = icmp eq i64 %2339, 0
  %2356 = zext i1 %2355 to i8
  store i8 %2356, i8* %57, align 1, !tbaa !2448
  %2357 = lshr i64 %2339, 63
  %2358 = trunc i64 %2357 to i8
  store i8 %2358, i8* %60, align 1, !tbaa !2449
  %2359 = lshr i64 %2333, 63
  %2360 = xor i64 %2357, %2359
  %2361 = xor i64 %2357, %2338
  %2362 = add nuw nsw i64 %2360, %2361
  %2363 = icmp eq i64 %2362, 2
  %2364 = zext i1 %2363 to i8
  store i8 %2364, i8* %66, align 1, !tbaa !2450
  %2365 = load i64, i64* %RBP, align 8
  %2366 = add i64 %2365, -52
  %2367 = add i64 %2283, 49
  store i64 %2367, i64* %PC, align 8
  %2368 = inttoptr i64 %2366 to i32*
  %2369 = load i32, i32* %2368, align 4
  %2370 = sext i32 %2369 to i64
  %2371 = mul nsw i64 %2370, 520
  store i64 %2371, i64* %RCX, align 8, !tbaa !2428
  %2372 = lshr i64 %2371, 63
  %2373 = add i64 %2371, %2339
  store i64 %2373, i64* %RAX, align 8, !tbaa !2428
  %2374 = icmp ult i64 %2373, %2339
  %2375 = icmp ult i64 %2373, %2371
  %2376 = or i1 %2374, %2375
  %2377 = zext i1 %2376 to i8
  store i8 %2377, i8* %42, align 1, !tbaa !2432
  %2378 = trunc i64 %2373 to i32
  %2379 = and i32 %2378, 255
  %2380 = tail call i32 @llvm.ctpop.i32(i32 %2379) #8
  %2381 = trunc i32 %2380 to i8
  %2382 = and i8 %2381, 1
  %2383 = xor i8 %2382, 1
  store i8 %2383, i8* %49, align 1, !tbaa !2446
  %2384 = xor i64 %2371, %2339
  %2385 = xor i64 %2384, %2373
  %2386 = lshr i64 %2385, 4
  %2387 = trunc i64 %2386 to i8
  %2388 = and i8 %2387, 1
  store i8 %2388, i8* %54, align 1, !tbaa !2447
  %2389 = icmp eq i64 %2373, 0
  %2390 = zext i1 %2389 to i8
  store i8 %2390, i8* %57, align 1, !tbaa !2448
  %2391 = lshr i64 %2373, 63
  %2392 = trunc i64 %2391 to i8
  store i8 %2392, i8* %60, align 1, !tbaa !2449
  %2393 = xor i64 %2391, %2357
  %2394 = xor i64 %2391, %2372
  %2395 = add nuw nsw i64 %2393, %2394
  %2396 = icmp eq i64 %2395, 2
  %2397 = zext i1 %2396 to i8
  store i8 %2397, i8* %66, align 1, !tbaa !2450
  %2398 = add i64 %2365, -48
  %2399 = add i64 %2283, 63
  store i64 %2399, i64* %PC, align 8
  %2400 = inttoptr i64 %2398 to i32*
  %2401 = load i32, i32* %2400, align 4
  %2402 = sext i32 %2401 to i64
  store i64 %2402, i64* %RCX, align 8, !tbaa !2428
  %2403 = shl nsw i64 %2402, 3
  %2404 = add i64 %2403, %2373
  %2405 = add i64 %2283, 68
  store i64 %2405, i64* %PC, align 8
  %2406 = load i64, i64* %147, align 1
  %2407 = inttoptr i64 %2404 to i64*
  store i64 %2406, i64* %2407, align 8
  %2408 = load i64, i64* %RBP, align 8
  %2409 = add i64 %2408, -104
  %2410 = load i64, i64* %PC, align 8
  %2411 = add i64 %2410, 3
  store i64 %2411, i64* %PC, align 8
  %2412 = inttoptr i64 %2409 to i32*
  %2413 = load i32, i32* %2412, align 4
  %2414 = add i32 %2413, 1
  %2415 = zext i32 %2414 to i64
  store i64 %2415, i64* %RAX, align 8, !tbaa !2428
  %2416 = icmp eq i32 %2413, -1
  %2417 = icmp eq i32 %2414, 0
  %2418 = or i1 %2416, %2417
  %2419 = zext i1 %2418 to i8
  store i8 %2419, i8* %42, align 1, !tbaa !2432
  %2420 = and i32 %2414, 255
  %2421 = tail call i32 @llvm.ctpop.i32(i32 %2420) #8
  %2422 = trunc i32 %2421 to i8
  %2423 = and i8 %2422, 1
  %2424 = xor i8 %2423, 1
  store i8 %2424, i8* %49, align 1, !tbaa !2446
  %2425 = xor i32 %2413, %2414
  %2426 = lshr i32 %2425, 4
  %2427 = trunc i32 %2426 to i8
  %2428 = and i8 %2427, 1
  store i8 %2428, i8* %54, align 1, !tbaa !2447
  %2429 = zext i1 %2417 to i8
  store i8 %2429, i8* %57, align 1, !tbaa !2448
  %2430 = lshr i32 %2414, 31
  %2431 = trunc i32 %2430 to i8
  store i8 %2431, i8* %60, align 1, !tbaa !2449
  %2432 = lshr i32 %2413, 31
  %2433 = xor i32 %2430, %2432
  %2434 = add nuw nsw i32 %2433, %2430
  %2435 = icmp eq i32 %2434, 2
  %2436 = zext i1 %2435 to i8
  store i8 %2436, i8* %66, align 1, !tbaa !2450
  %2437 = add i64 %2410, 9
  store i64 %2437, i64* %PC, align 8
  store i32 %2414, i32* %2412, align 4
  %2438 = load i64, i64* %PC, align 8
  %2439 = add i64 %2438, -2643
  store i64 %2439, i64* %PC, align 8, !tbaa !2428
  br label %block_401fcd

block_40251e:                                     ; preds = %block_402512
  %2440 = add i64 %401, 36
  store i64 %2440, i64* %PC, align 8
  %2441 = load i32, i32* %368, align 4
  %2442 = sext i32 %2441 to i64
  store i64 %2442, i64* %RCX, align 8, !tbaa !2428
  %2443 = shl nsw i64 %2442, 3
  %2444 = add i64 %2443, %447
  %2445 = add i64 %401, 41
  store i64 %2445, i64* %PC, align 8
  %2446 = inttoptr i64 %2444 to double*
  %2447 = load double, double* %2446, align 8
  store double %2447, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %2448 = add i64 %365, -80
  %2449 = add i64 %401, 45
  store i64 %2449, i64* %PC, align 8
  %2450 = inttoptr i64 %2448 to i64*
  %2451 = load i64, i64* %2450, align 8
  store i64 %2451, i64* %RAX, align 8, !tbaa !2428
  %2452 = add i64 %401, 49
  store i64 %2452, i64* %PC, align 8
  %2453 = load i32, i32* %408, align 4
  %2454 = sext i32 %2453 to i64
  %2455 = mul nsw i64 %2454, 520
  store i64 %2455, i64* %RCX, align 8, !tbaa !2428
  %2456 = lshr i64 %2455, 63
  %2457 = add i64 %2455, %2451
  store i64 %2457, i64* %RAX, align 8, !tbaa !2428
  %2458 = icmp ult i64 %2457, %2451
  %2459 = icmp ult i64 %2457, %2455
  %2460 = or i1 %2458, %2459
  %2461 = zext i1 %2460 to i8
  store i8 %2461, i8* %42, align 1, !tbaa !2432
  %2462 = trunc i64 %2457 to i32
  %2463 = and i32 %2462, 255
  %2464 = tail call i32 @llvm.ctpop.i32(i32 %2463) #8
  %2465 = trunc i32 %2464 to i8
  %2466 = and i8 %2465, 1
  %2467 = xor i8 %2466, 1
  store i8 %2467, i8* %49, align 1, !tbaa !2446
  %2468 = xor i64 %2455, %2451
  %2469 = xor i64 %2468, %2457
  %2470 = lshr i64 %2469, 4
  %2471 = trunc i64 %2470 to i8
  %2472 = and i8 %2471, 1
  store i8 %2472, i8* %54, align 1, !tbaa !2447
  %2473 = icmp eq i64 %2457, 0
  %2474 = zext i1 %2473 to i8
  store i8 %2474, i8* %57, align 1, !tbaa !2448
  %2475 = lshr i64 %2457, 63
  %2476 = trunc i64 %2475 to i8
  store i8 %2476, i8* %60, align 1, !tbaa !2449
  %2477 = lshr i64 %2451, 63
  %2478 = xor i64 %2475, %2477
  %2479 = xor i64 %2475, %2456
  %2480 = add nuw nsw i64 %2478, %2479
  %2481 = icmp eq i64 %2480, 2
  %2482 = zext i1 %2481 to i8
  store i8 %2482, i8* %66, align 1, !tbaa !2450
  %2483 = add i64 %401, 63
  store i64 %2483, i64* %PC, align 8
  %2484 = load i32, i32* %368, align 4
  %2485 = sext i32 %2484 to i64
  store i64 %2485, i64* %RCX, align 8, !tbaa !2428
  %2486 = shl nsw i64 %2485, 3
  %2487 = add i64 %2486, %2457
  %2488 = add i64 %401, 68
  store i64 %2488, i64* %PC, align 8
  %2489 = inttoptr i64 %2487 to double*
  %2490 = load double, double* %2489, align 8
  %2491 = fsub double %2447, %2490
  store double %2491, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %2492 = load i64, i64* %RBP, align 8
  %2493 = add i64 %2492, 40
  %2494 = add i64 %401, 72
  store i64 %2494, i64* %PC, align 8
  %2495 = inttoptr i64 %2493 to i64*
  %2496 = load i64, i64* %2495, align 8
  store i64 %2496, i64* %RAX, align 8, !tbaa !2428
  %2497 = add i64 %2492, -100
  %2498 = add i64 %401, 76
  store i64 %2498, i64* %PC, align 8
  %2499 = inttoptr i64 %2497 to i32*
  %2500 = load i32, i32* %2499, align 4
  %2501 = sext i32 %2500 to i64
  %2502 = mul nsw i64 %2501, 33800
  store i64 %2502, i64* %RCX, align 8, !tbaa !2428
  %2503 = lshr i64 %2502, 63
  %2504 = add i64 %2502, %2496
  store i64 %2504, i64* %RAX, align 8, !tbaa !2428
  %2505 = icmp ult i64 %2504, %2496
  %2506 = icmp ult i64 %2504, %2502
  %2507 = or i1 %2505, %2506
  %2508 = zext i1 %2507 to i8
  store i8 %2508, i8* %42, align 1, !tbaa !2432
  %2509 = trunc i64 %2504 to i32
  %2510 = and i32 %2509, 255
  %2511 = tail call i32 @llvm.ctpop.i32(i32 %2510) #8
  %2512 = trunc i32 %2511 to i8
  %2513 = and i8 %2512, 1
  %2514 = xor i8 %2513, 1
  store i8 %2514, i8* %49, align 1, !tbaa !2446
  %2515 = xor i64 %2502, %2496
  %2516 = xor i64 %2515, %2504
  %2517 = lshr i64 %2516, 4
  %2518 = trunc i64 %2517 to i8
  %2519 = and i8 %2518, 1
  store i8 %2519, i8* %54, align 1, !tbaa !2447
  %2520 = icmp eq i64 %2504, 0
  %2521 = zext i1 %2520 to i8
  store i8 %2521, i8* %57, align 1, !tbaa !2448
  %2522 = lshr i64 %2504, 63
  %2523 = trunc i64 %2522 to i8
  store i8 %2523, i8* %60, align 1, !tbaa !2449
  %2524 = lshr i64 %2496, 63
  %2525 = xor i64 %2522, %2524
  %2526 = xor i64 %2522, %2503
  %2527 = add nuw nsw i64 %2525, %2526
  %2528 = icmp eq i64 %2527, 2
  %2529 = zext i1 %2528 to i8
  store i8 %2529, i8* %66, align 1, !tbaa !2450
  %2530 = add i64 %2492, -52
  %2531 = add i64 %401, 90
  store i64 %2531, i64* %PC, align 8
  %2532 = inttoptr i64 %2530 to i32*
  %2533 = load i32, i32* %2532, align 4
  %2534 = sext i32 %2533 to i64
  %2535 = mul nsw i64 %2534, 520
  store i64 %2535, i64* %RCX, align 8, !tbaa !2428
  %2536 = lshr i64 %2535, 63
  %2537 = add i64 %2535, %2504
  store i64 %2537, i64* %RAX, align 8, !tbaa !2428
  %2538 = icmp ult i64 %2537, %2504
  %2539 = icmp ult i64 %2537, %2535
  %2540 = or i1 %2538, %2539
  %2541 = zext i1 %2540 to i8
  store i8 %2541, i8* %42, align 1, !tbaa !2432
  %2542 = trunc i64 %2537 to i32
  %2543 = and i32 %2542, 255
  %2544 = tail call i32 @llvm.ctpop.i32(i32 %2543) #8
  %2545 = trunc i32 %2544 to i8
  %2546 = and i8 %2545, 1
  %2547 = xor i8 %2546, 1
  store i8 %2547, i8* %49, align 1, !tbaa !2446
  %2548 = xor i64 %2535, %2504
  %2549 = xor i64 %2548, %2537
  %2550 = lshr i64 %2549, 4
  %2551 = trunc i64 %2550 to i8
  %2552 = and i8 %2551, 1
  store i8 %2552, i8* %54, align 1, !tbaa !2447
  %2553 = icmp eq i64 %2537, 0
  %2554 = zext i1 %2553 to i8
  store i8 %2554, i8* %57, align 1, !tbaa !2448
  %2555 = lshr i64 %2537, 63
  %2556 = trunc i64 %2555 to i8
  store i8 %2556, i8* %60, align 1, !tbaa !2449
  %2557 = xor i64 %2555, %2522
  %2558 = xor i64 %2555, %2536
  %2559 = add nuw nsw i64 %2557, %2558
  %2560 = icmp eq i64 %2559, 2
  %2561 = zext i1 %2560 to i8
  store i8 %2561, i8* %66, align 1, !tbaa !2450
  %2562 = add i64 %2492, -108
  %2563 = add i64 %401, 103
  store i64 %2563, i64* %PC, align 8
  %2564 = inttoptr i64 %2562 to i32*
  %2565 = load i32, i32* %2564, align 4
  %2566 = add i32 %2565, 1
  %2567 = zext i32 %2566 to i64
  store i64 %2567, i64* %RDX, align 8, !tbaa !2428
  %2568 = icmp eq i32 %2565, -1
  %2569 = icmp eq i32 %2566, 0
  %2570 = or i1 %2568, %2569
  %2571 = zext i1 %2570 to i8
  store i8 %2571, i8* %42, align 1, !tbaa !2432
  %2572 = and i32 %2566, 255
  %2573 = tail call i32 @llvm.ctpop.i32(i32 %2572) #8
  %2574 = trunc i32 %2573 to i8
  %2575 = and i8 %2574, 1
  %2576 = xor i8 %2575, 1
  store i8 %2576, i8* %49, align 1, !tbaa !2446
  %2577 = xor i32 %2565, %2566
  %2578 = lshr i32 %2577, 4
  %2579 = trunc i32 %2578 to i8
  %2580 = and i8 %2579, 1
  store i8 %2580, i8* %54, align 1, !tbaa !2447
  %2581 = zext i1 %2569 to i8
  store i8 %2581, i8* %57, align 1, !tbaa !2448
  %2582 = lshr i32 %2566, 31
  %2583 = trunc i32 %2582 to i8
  store i8 %2583, i8* %60, align 1, !tbaa !2449
  %2584 = lshr i32 %2565, 31
  %2585 = xor i32 %2582, %2584
  %2586 = add nuw nsw i32 %2585, %2582
  %2587 = icmp eq i32 %2586, 2
  %2588 = zext i1 %2587 to i8
  store i8 %2588, i8* %66, align 1, !tbaa !2450
  %2589 = sext i32 %2566 to i64
  store i64 %2589, i64* %RCX, align 8, !tbaa !2428
  %2590 = shl nsw i64 %2589, 3
  %2591 = add i64 %2590, %2537
  %2592 = add i64 %401, 114
  store i64 %2592, i64* %PC, align 8
  %2593 = load double, double* %228, align 1
  %2594 = inttoptr i64 %2591 to double*
  %2595 = load double, double* %2594, align 8
  %2596 = fadd double %2593, %2595
  store double %2596, double* %228, align 1, !tbaa !2452
  %2597 = add i64 %401, 118
  store i64 %2597, i64* %PC, align 8
  %2598 = load i64, i64* %2495, align 8
  store i64 %2598, i64* %RAX, align 8, !tbaa !2428
  %2599 = add i64 %401, 122
  store i64 %2599, i64* %PC, align 8
  %2600 = load i32, i32* %2499, align 4
  %2601 = sext i32 %2600 to i64
  %2602 = mul nsw i64 %2601, 33800
  store i64 %2602, i64* %RCX, align 8, !tbaa !2428
  %2603 = lshr i64 %2602, 63
  %2604 = add i64 %2602, %2598
  store i64 %2604, i64* %RAX, align 8, !tbaa !2428
  %2605 = icmp ult i64 %2604, %2598
  %2606 = icmp ult i64 %2604, %2602
  %2607 = or i1 %2605, %2606
  %2608 = zext i1 %2607 to i8
  store i8 %2608, i8* %42, align 1, !tbaa !2432
  %2609 = trunc i64 %2604 to i32
  %2610 = and i32 %2609, 255
  %2611 = tail call i32 @llvm.ctpop.i32(i32 %2610) #8
  %2612 = trunc i32 %2611 to i8
  %2613 = and i8 %2612, 1
  %2614 = xor i8 %2613, 1
  store i8 %2614, i8* %49, align 1, !tbaa !2446
  %2615 = xor i64 %2602, %2598
  %2616 = xor i64 %2615, %2604
  %2617 = lshr i64 %2616, 4
  %2618 = trunc i64 %2617 to i8
  %2619 = and i8 %2618, 1
  store i8 %2619, i8* %54, align 1, !tbaa !2447
  %2620 = icmp eq i64 %2604, 0
  %2621 = zext i1 %2620 to i8
  store i8 %2621, i8* %57, align 1, !tbaa !2448
  %2622 = lshr i64 %2604, 63
  %2623 = trunc i64 %2622 to i8
  store i8 %2623, i8* %60, align 1, !tbaa !2449
  %2624 = lshr i64 %2598, 63
  %2625 = xor i64 %2622, %2624
  %2626 = xor i64 %2622, %2603
  %2627 = add nuw nsw i64 %2625, %2626
  %2628 = icmp eq i64 %2627, 2
  %2629 = zext i1 %2628 to i8
  store i8 %2629, i8* %66, align 1, !tbaa !2450
  %2630 = load i64, i64* %RBP, align 8
  %2631 = add i64 %2630, -52
  %2632 = add i64 %401, 136
  store i64 %2632, i64* %PC, align 8
  %2633 = inttoptr i64 %2631 to i32*
  %2634 = load i32, i32* %2633, align 4
  %2635 = sext i32 %2634 to i64
  %2636 = mul nsw i64 %2635, 520
  store i64 %2636, i64* %RCX, align 8, !tbaa !2428
  %2637 = lshr i64 %2636, 63
  %2638 = add i64 %2636, %2604
  store i64 %2638, i64* %RAX, align 8, !tbaa !2428
  %2639 = icmp ult i64 %2638, %2604
  %2640 = icmp ult i64 %2638, %2636
  %2641 = or i1 %2639, %2640
  %2642 = zext i1 %2641 to i8
  store i8 %2642, i8* %42, align 1, !tbaa !2432
  %2643 = trunc i64 %2638 to i32
  %2644 = and i32 %2643, 255
  %2645 = tail call i32 @llvm.ctpop.i32(i32 %2644) #8
  %2646 = trunc i32 %2645 to i8
  %2647 = and i8 %2646, 1
  %2648 = xor i8 %2647, 1
  store i8 %2648, i8* %49, align 1, !tbaa !2446
  %2649 = xor i64 %2636, %2604
  %2650 = xor i64 %2649, %2638
  %2651 = lshr i64 %2650, 4
  %2652 = trunc i64 %2651 to i8
  %2653 = and i8 %2652, 1
  store i8 %2653, i8* %54, align 1, !tbaa !2447
  %2654 = icmp eq i64 %2638, 0
  %2655 = zext i1 %2654 to i8
  store i8 %2655, i8* %57, align 1, !tbaa !2448
  %2656 = lshr i64 %2638, 63
  %2657 = trunc i64 %2656 to i8
  store i8 %2657, i8* %60, align 1, !tbaa !2449
  %2658 = xor i64 %2656, %2622
  %2659 = xor i64 %2656, %2637
  %2660 = add nuw nsw i64 %2658, %2659
  %2661 = icmp eq i64 %2660, 2
  %2662 = zext i1 %2661 to i8
  store i8 %2662, i8* %66, align 1, !tbaa !2450
  %2663 = add i64 %2630, -108
  %2664 = add i64 %401, 150
  store i64 %2664, i64* %PC, align 8
  %2665 = inttoptr i64 %2663 to i32*
  %2666 = load i32, i32* %2665, align 4
  %2667 = sext i32 %2666 to i64
  store i64 %2667, i64* %RCX, align 8, !tbaa !2428
  %2668 = shl nsw i64 %2667, 3
  %2669 = add i64 %2668, %2638
  %2670 = add i64 %401, 155
  store i64 %2670, i64* %PC, align 8
  %2671 = inttoptr i64 %2669 to double*
  %2672 = load double, double* %2671, align 8
  %2673 = fsub double %2596, %2672
  store double %2673, double* %228, align 1, !tbaa !2452
  %2674 = add i64 %2630, -96
  %2675 = add i64 %401, 159
  store i64 %2675, i64* %PC, align 8
  %2676 = inttoptr i64 %2674 to i64*
  %2677 = load i64, i64* %2676, align 8
  store i64 %2677, i64* %RAX, align 8, !tbaa !2428
  %2678 = add i64 %2630, -100
  %2679 = add i64 %401, 163
  store i64 %2679, i64* %PC, align 8
  %2680 = inttoptr i64 %2678 to i32*
  %2681 = load i32, i32* %2680, align 4
  %2682 = sext i32 %2681 to i64
  %2683 = mul nsw i64 %2682, 520
  store i64 %2683, i64* %RCX, align 8, !tbaa !2428
  %2684 = lshr i64 %2683, 63
  %2685 = add i64 %2683, %2677
  store i64 %2685, i64* %RAX, align 8, !tbaa !2428
  %2686 = icmp ult i64 %2685, %2677
  %2687 = icmp ult i64 %2685, %2683
  %2688 = or i1 %2686, %2687
  %2689 = zext i1 %2688 to i8
  store i8 %2689, i8* %42, align 1, !tbaa !2432
  %2690 = trunc i64 %2685 to i32
  %2691 = and i32 %2690, 255
  %2692 = tail call i32 @llvm.ctpop.i32(i32 %2691) #8
  %2693 = trunc i32 %2692 to i8
  %2694 = and i8 %2693, 1
  %2695 = xor i8 %2694, 1
  store i8 %2695, i8* %49, align 1, !tbaa !2446
  %2696 = xor i64 %2683, %2677
  %2697 = xor i64 %2696, %2685
  %2698 = lshr i64 %2697, 4
  %2699 = trunc i64 %2698 to i8
  %2700 = and i8 %2699, 1
  store i8 %2700, i8* %54, align 1, !tbaa !2447
  %2701 = icmp eq i64 %2685, 0
  %2702 = zext i1 %2701 to i8
  store i8 %2702, i8* %57, align 1, !tbaa !2448
  %2703 = lshr i64 %2685, 63
  %2704 = trunc i64 %2703 to i8
  store i8 %2704, i8* %60, align 1, !tbaa !2449
  %2705 = lshr i64 %2677, 63
  %2706 = xor i64 %2703, %2705
  %2707 = xor i64 %2703, %2684
  %2708 = add nuw nsw i64 %2706, %2707
  %2709 = icmp eq i64 %2708, 2
  %2710 = zext i1 %2709 to i8
  store i8 %2710, i8* %66, align 1, !tbaa !2450
  %2711 = load i64, i64* %RBP, align 8
  %2712 = add i64 %2711, -104
  %2713 = add i64 %401, 177
  store i64 %2713, i64* %PC, align 8
  %2714 = inttoptr i64 %2712 to i32*
  %2715 = load i32, i32* %2714, align 4
  %2716 = sext i32 %2715 to i64
  store i64 %2716, i64* %RCX, align 8, !tbaa !2428
  %2717 = shl nsw i64 %2716, 3
  %2718 = add i64 %2717, %2685
  %2719 = add i64 %401, 182
  store i64 %2719, i64* %PC, align 8
  %2720 = inttoptr i64 %2718 to double*
  store double %2673, double* %2720, align 8
  %2721 = load i64, i64* %RBP, align 8
  %2722 = add i64 %2721, 88
  %2723 = load i64, i64* %PC, align 8
  %2724 = add i64 %2723, 4
  store i64 %2724, i64* %PC, align 8
  %2725 = inttoptr i64 %2722 to i64*
  %2726 = load i64, i64* %2725, align 8
  store i64 %2726, i64* %RAX, align 8, !tbaa !2428
  %2727 = add i64 %2721, -52
  %2728 = add i64 %2723, 8
  store i64 %2728, i64* %PC, align 8
  %2729 = inttoptr i64 %2727 to i32*
  %2730 = load i32, i32* %2729, align 4
  %2731 = sext i32 %2730 to i64
  store i64 %2731, i64* %RCX, align 8, !tbaa !2428
  %2732 = shl nsw i64 %2731, 3
  %2733 = add i64 %2732, %2726
  %2734 = add i64 %2723, 13
  store i64 %2734, i64* %PC, align 8
  %2735 = inttoptr i64 %2733 to double*
  %2736 = load double, double* %2735, align 8
  store double %2736, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %2737 = add i64 %2721, 96
  %2738 = add i64 %2723, 17
  store i64 %2738, i64* %PC, align 8
  %2739 = inttoptr i64 %2737 to i64*
  %2740 = load i64, i64* %2739, align 8
  store i64 %2740, i64* %RAX, align 8, !tbaa !2428
  %2741 = add i64 %2721, -104
  %2742 = add i64 %2723, 21
  store i64 %2742, i64* %PC, align 8
  %2743 = inttoptr i64 %2741 to i32*
  %2744 = load i32, i32* %2743, align 4
  %2745 = sext i32 %2744 to i64
  store i64 %2745, i64* %RCX, align 8, !tbaa !2428
  %2746 = shl nsw i64 %2745, 3
  %2747 = add i64 %2746, %2740
  %2748 = add i64 %2723, 26
  store i64 %2748, i64* %PC, align 8
  %2749 = inttoptr i64 %2747 to double*
  %2750 = load double, double* %2749, align 8
  %2751 = fdiv double %2736, %2750
  store double %2751, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %2752 = add i64 %2721, 24
  %2753 = add i64 %2723, 30
  store i64 %2753, i64* %PC, align 8
  %2754 = inttoptr i64 %2752 to i64*
  %2755 = load i64, i64* %2754, align 8
  store i64 %2755, i64* %RAX, align 8, !tbaa !2428
  %2756 = add i64 %2721, -100
  %2757 = add i64 %2723, 34
  store i64 %2757, i64* %PC, align 8
  %2758 = inttoptr i64 %2756 to i32*
  %2759 = load i32, i32* %2758, align 4
  %2760 = sext i32 %2759 to i64
  %2761 = mul nsw i64 %2760, 33800
  store i64 %2761, i64* %RCX, align 8, !tbaa !2428
  %2762 = lshr i64 %2761, 63
  %2763 = add i64 %2761, %2755
  store i64 %2763, i64* %RAX, align 8, !tbaa !2428
  %2764 = icmp ult i64 %2763, %2755
  %2765 = icmp ult i64 %2763, %2761
  %2766 = or i1 %2764, %2765
  %2767 = zext i1 %2766 to i8
  store i8 %2767, i8* %42, align 1, !tbaa !2432
  %2768 = trunc i64 %2763 to i32
  %2769 = and i32 %2768, 255
  %2770 = tail call i32 @llvm.ctpop.i32(i32 %2769) #8
  %2771 = trunc i32 %2770 to i8
  %2772 = and i8 %2771, 1
  %2773 = xor i8 %2772, 1
  store i8 %2773, i8* %49, align 1, !tbaa !2446
  %2774 = xor i64 %2761, %2755
  %2775 = xor i64 %2774, %2763
  %2776 = lshr i64 %2775, 4
  %2777 = trunc i64 %2776 to i8
  %2778 = and i8 %2777, 1
  store i8 %2778, i8* %54, align 1, !tbaa !2447
  %2779 = icmp eq i64 %2763, 0
  %2780 = zext i1 %2779 to i8
  store i8 %2780, i8* %57, align 1, !tbaa !2448
  %2781 = lshr i64 %2763, 63
  %2782 = trunc i64 %2781 to i8
  store i8 %2782, i8* %60, align 1, !tbaa !2449
  %2783 = lshr i64 %2755, 63
  %2784 = xor i64 %2781, %2783
  %2785 = xor i64 %2781, %2762
  %2786 = add nuw nsw i64 %2784, %2785
  %2787 = icmp eq i64 %2786, 2
  %2788 = zext i1 %2787 to i8
  store i8 %2788, i8* %66, align 1, !tbaa !2450
  %2789 = add i64 %2723, 48
  store i64 %2789, i64* %PC, align 8
  %2790 = load i32, i32* %2743, align 4
  %2791 = sext i32 %2790 to i64
  %2792 = mul nsw i64 %2791, 520
  store i64 %2792, i64* %RCX, align 8, !tbaa !2428
  %2793 = lshr i64 %2792, 63
  %2794 = add i64 %2792, %2763
  store i64 %2794, i64* %RAX, align 8, !tbaa !2428
  %2795 = icmp ult i64 %2794, %2763
  %2796 = icmp ult i64 %2794, %2792
  %2797 = or i1 %2795, %2796
  %2798 = zext i1 %2797 to i8
  store i8 %2798, i8* %42, align 1, !tbaa !2432
  %2799 = trunc i64 %2794 to i32
  %2800 = and i32 %2799, 255
  %2801 = tail call i32 @llvm.ctpop.i32(i32 %2800) #8
  %2802 = trunc i32 %2801 to i8
  %2803 = and i8 %2802, 1
  %2804 = xor i8 %2803, 1
  store i8 %2804, i8* %49, align 1, !tbaa !2446
  %2805 = xor i64 %2792, %2763
  %2806 = xor i64 %2805, %2794
  %2807 = lshr i64 %2806, 4
  %2808 = trunc i64 %2807 to i8
  %2809 = and i8 %2808, 1
  store i8 %2809, i8* %54, align 1, !tbaa !2447
  %2810 = icmp eq i64 %2794, 0
  %2811 = zext i1 %2810 to i8
  store i8 %2811, i8* %57, align 1, !tbaa !2448
  %2812 = lshr i64 %2794, 63
  %2813 = trunc i64 %2812 to i8
  store i8 %2813, i8* %60, align 1, !tbaa !2449
  %2814 = xor i64 %2812, %2781
  %2815 = xor i64 %2812, %2793
  %2816 = add nuw nsw i64 %2814, %2815
  %2817 = icmp eq i64 %2816, 2
  %2818 = zext i1 %2817 to i8
  store i8 %2818, i8* %66, align 1, !tbaa !2450
  %2819 = add i64 %2721, -108
  %2820 = add i64 %2723, 62
  store i64 %2820, i64* %PC, align 8
  %2821 = inttoptr i64 %2819 to i32*
  %2822 = load i32, i32* %2821, align 4
  %2823 = sext i32 %2822 to i64
  store i64 %2823, i64* %RCX, align 8, !tbaa !2428
  %2824 = shl nsw i64 %2823, 3
  %2825 = add i64 %2824, %2794
  %2826 = add i64 %2723, 67
  store i64 %2826, i64* %PC, align 8
  %2827 = load double, double* %228, align 1
  %2828 = inttoptr i64 %2825 to double*
  %2829 = load double, double* %2828, align 8
  %2830 = fmul double %2827, %2829
  store double %2830, double* %228, align 1, !tbaa !2452
  %2831 = add i64 %2721, -72
  %2832 = add i64 %2723, 72
  store i64 %2832, i64* %PC, align 8
  %2833 = inttoptr i64 %2831 to double*
  %2834 = load double, double* %2833, align 8
  store double %2834, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %2835 = add i64 %2723, 76
  store i64 %2835, i64* %PC, align 8
  %2836 = load i64, i64* %2739, align 8
  store i64 %2836, i64* %RAX, align 8, !tbaa !2428
  %2837 = add i64 %2723, 80
  store i64 %2837, i64* %PC, align 8
  %2838 = load i32, i32* %2743, align 4
  %2839 = sext i32 %2838 to i64
  store i64 %2839, i64* %RCX, align 8, !tbaa !2428
  %2840 = shl nsw i64 %2839, 3
  %2841 = add i64 %2840, %2836
  %2842 = add i64 %2723, 85
  store i64 %2842, i64* %PC, align 8
  %2843 = inttoptr i64 %2841 to double*
  %2844 = load double, double* %2843, align 8
  %2845 = fdiv double %2834, %2844
  store double %2845, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %2846 = load i64, i64* %RBP, align 8
  %2847 = add i64 %2846, -96
  %2848 = add i64 %2723, 89
  store i64 %2848, i64* %PC, align 8
  %2849 = inttoptr i64 %2847 to i64*
  %2850 = load i64, i64* %2849, align 8
  store i64 %2850, i64* %RAX, align 8, !tbaa !2428
  %2851 = add i64 %2846, -100
  %2852 = add i64 %2723, 93
  store i64 %2852, i64* %PC, align 8
  %2853 = inttoptr i64 %2851 to i32*
  %2854 = load i32, i32* %2853, align 4
  %2855 = sext i32 %2854 to i64
  %2856 = mul nsw i64 %2855, 520
  store i64 %2856, i64* %RCX, align 8, !tbaa !2428
  %2857 = lshr i64 %2856, 63
  %2858 = add i64 %2856, %2850
  store i64 %2858, i64* %RAX, align 8, !tbaa !2428
  %2859 = icmp ult i64 %2858, %2850
  %2860 = icmp ult i64 %2858, %2856
  %2861 = or i1 %2859, %2860
  %2862 = zext i1 %2861 to i8
  store i8 %2862, i8* %42, align 1, !tbaa !2432
  %2863 = trunc i64 %2858 to i32
  %2864 = and i32 %2863, 255
  %2865 = tail call i32 @llvm.ctpop.i32(i32 %2864) #8
  %2866 = trunc i32 %2865 to i8
  %2867 = and i8 %2866, 1
  %2868 = xor i8 %2867, 1
  store i8 %2868, i8* %49, align 1, !tbaa !2446
  %2869 = xor i64 %2856, %2850
  %2870 = xor i64 %2869, %2858
  %2871 = lshr i64 %2870, 4
  %2872 = trunc i64 %2871 to i8
  %2873 = and i8 %2872, 1
  store i8 %2873, i8* %54, align 1, !tbaa !2447
  %2874 = icmp eq i64 %2858, 0
  %2875 = zext i1 %2874 to i8
  store i8 %2875, i8* %57, align 1, !tbaa !2448
  %2876 = lshr i64 %2858, 63
  %2877 = trunc i64 %2876 to i8
  store i8 %2877, i8* %60, align 1, !tbaa !2449
  %2878 = lshr i64 %2850, 63
  %2879 = xor i64 %2876, %2878
  %2880 = xor i64 %2876, %2857
  %2881 = add nuw nsw i64 %2879, %2880
  %2882 = icmp eq i64 %2881, 2
  %2883 = zext i1 %2882 to i8
  store i8 %2883, i8* %66, align 1, !tbaa !2450
  %2884 = add i64 %2846, -104
  %2885 = add i64 %2723, 107
  store i64 %2885, i64* %PC, align 8
  %2886 = inttoptr i64 %2884 to i32*
  %2887 = load i32, i32* %2886, align 4
  %2888 = sext i32 %2887 to i64
  store i64 %2888, i64* %RCX, align 8, !tbaa !2428
  %2889 = shl nsw i64 %2888, 3
  %2890 = add i64 %2889, %2858
  %2891 = add i64 %2723, 112
  store i64 %2891, i64* %PC, align 8
  %2892 = inttoptr i64 %2890 to double*
  %2893 = load double, double* %2892, align 8
  %2894 = fmul double %2845, %2893
  store double %2894, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %2895 = fsub double %2830, %2894
  store double %2895, double* %228, align 1, !tbaa !2452
  %2896 = add i64 %2846, 16
  %2897 = add i64 %2723, 120
  store i64 %2897, i64* %PC, align 8
  %2898 = inttoptr i64 %2896 to i64*
  %2899 = load i64, i64* %2898, align 8
  store i64 %2899, i64* %RAX, align 8, !tbaa !2428
  %2900 = add i64 %2723, 124
  store i64 %2900, i64* %PC, align 8
  %2901 = load i32, i32* %2853, align 4
  %2902 = sext i32 %2901 to i64
  %2903 = mul nsw i64 %2902, 520
  store i64 %2903, i64* %RCX, align 8, !tbaa !2428
  %2904 = lshr i64 %2903, 63
  %2905 = add i64 %2903, %2899
  store i64 %2905, i64* %RAX, align 8, !tbaa !2428
  %2906 = icmp ult i64 %2905, %2899
  %2907 = icmp ult i64 %2905, %2903
  %2908 = or i1 %2906, %2907
  %2909 = zext i1 %2908 to i8
  store i8 %2909, i8* %42, align 1, !tbaa !2432
  %2910 = trunc i64 %2905 to i32
  %2911 = and i32 %2910, 255
  %2912 = tail call i32 @llvm.ctpop.i32(i32 %2911) #8
  %2913 = trunc i32 %2912 to i8
  %2914 = and i8 %2913, 1
  %2915 = xor i8 %2914, 1
  store i8 %2915, i8* %49, align 1, !tbaa !2446
  %2916 = xor i64 %2903, %2899
  %2917 = xor i64 %2916, %2905
  %2918 = lshr i64 %2917, 4
  %2919 = trunc i64 %2918 to i8
  %2920 = and i8 %2919, 1
  store i8 %2920, i8* %54, align 1, !tbaa !2447
  %2921 = icmp eq i64 %2905, 0
  %2922 = zext i1 %2921 to i8
  store i8 %2922, i8* %57, align 1, !tbaa !2448
  %2923 = lshr i64 %2905, 63
  %2924 = trunc i64 %2923 to i8
  store i8 %2924, i8* %60, align 1, !tbaa !2449
  %2925 = lshr i64 %2899, 63
  %2926 = xor i64 %2923, %2925
  %2927 = xor i64 %2923, %2904
  %2928 = add nuw nsw i64 %2926, %2927
  %2929 = icmp eq i64 %2928, 2
  %2930 = zext i1 %2929 to i8
  store i8 %2930, i8* %66, align 1, !tbaa !2450
  %2931 = add i64 %2723, 138
  store i64 %2931, i64* %PC, align 8
  %2932 = load i32, i32* %2886, align 4
  %2933 = sext i32 %2932 to i64
  store i64 %2933, i64* %RCX, align 8, !tbaa !2428
  %2934 = shl nsw i64 %2933, 3
  %2935 = add i64 %2934, %2905
  %2936 = add i64 %2723, 143
  store i64 %2936, i64* %PC, align 8
  %2937 = inttoptr i64 %2935 to double*
  store double %2895, double* %2937, align 8
  %2938 = load i64, i64* %RBP, align 8
  %2939 = add i64 %2938, 72
  %2940 = load i64, i64* %PC, align 8
  %2941 = add i64 %2940, 4
  store i64 %2941, i64* %PC, align 8
  %2942 = inttoptr i64 %2939 to i64*
  %2943 = load i64, i64* %2942, align 8
  store i64 %2943, i64* %RAX, align 8, !tbaa !2428
  %2944 = add i64 %2938, -108
  %2945 = add i64 %2940, 8
  store i64 %2945, i64* %PC, align 8
  %2946 = inttoptr i64 %2944 to i32*
  %2947 = load i32, i32* %2946, align 4
  %2948 = sext i32 %2947 to i64
  store i64 %2948, i64* %RCX, align 8, !tbaa !2428
  %2949 = shl nsw i64 %2948, 3
  %2950 = add i64 %2949, %2943
  %2951 = add i64 %2940, 13
  store i64 %2951, i64* %PC, align 8
  %2952 = inttoptr i64 %2950 to double*
  %2953 = load double, double* %2952, align 8
  store double %2953, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %2954 = add i64 %2938, 80
  %2955 = add i64 %2940, 17
  store i64 %2955, i64* %PC, align 8
  %2956 = inttoptr i64 %2954 to i64*
  %2957 = load i64, i64* %2956, align 8
  store i64 %2957, i64* %RAX, align 8, !tbaa !2428
  %2958 = add i64 %2940, 21
  store i64 %2958, i64* %PC, align 8
  %2959 = load i32, i32* %2946, align 4
  %2960 = sext i32 %2959 to i64
  store i64 %2960, i64* %RCX, align 8, !tbaa !2428
  %2961 = shl nsw i64 %2960, 3
  %2962 = add i64 %2961, %2957
  %2963 = add i64 %2940, 26
  store i64 %2963, i64* %PC, align 8
  %2964 = inttoptr i64 %2962 to double*
  %2965 = load double, double* %2964, align 8
  %2966 = fdiv double %2953, %2965
  store double %2966, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %2967 = add i64 %2938, 48
  %2968 = add i64 %2940, 30
  store i64 %2968, i64* %PC, align 8
  %2969 = inttoptr i64 %2967 to i64*
  %2970 = load i64, i64* %2969, align 8
  store i64 %2970, i64* %RAX, align 8, !tbaa !2428
  %2971 = add i64 %2938, -100
  %2972 = add i64 %2940, 34
  store i64 %2972, i64* %PC, align 8
  %2973 = inttoptr i64 %2971 to i32*
  %2974 = load i32, i32* %2973, align 4
  %2975 = sext i32 %2974 to i64
  %2976 = mul nsw i64 %2975, 33800
  store i64 %2976, i64* %RCX, align 8, !tbaa !2428
  %2977 = lshr i64 %2976, 63
  %2978 = add i64 %2976, %2970
  store i64 %2978, i64* %RAX, align 8, !tbaa !2428
  %2979 = icmp ult i64 %2978, %2970
  %2980 = icmp ult i64 %2978, %2976
  %2981 = or i1 %2979, %2980
  %2982 = zext i1 %2981 to i8
  store i8 %2982, i8* %42, align 1, !tbaa !2432
  %2983 = trunc i64 %2978 to i32
  %2984 = and i32 %2983, 255
  %2985 = tail call i32 @llvm.ctpop.i32(i32 %2984) #8
  %2986 = trunc i32 %2985 to i8
  %2987 = and i8 %2986, 1
  %2988 = xor i8 %2987, 1
  store i8 %2988, i8* %49, align 1, !tbaa !2446
  %2989 = xor i64 %2976, %2970
  %2990 = xor i64 %2989, %2978
  %2991 = lshr i64 %2990, 4
  %2992 = trunc i64 %2991 to i8
  %2993 = and i8 %2992, 1
  store i8 %2993, i8* %54, align 1, !tbaa !2447
  %2994 = icmp eq i64 %2978, 0
  %2995 = zext i1 %2994 to i8
  store i8 %2995, i8* %57, align 1, !tbaa !2448
  %2996 = lshr i64 %2978, 63
  %2997 = trunc i64 %2996 to i8
  store i8 %2997, i8* %60, align 1, !tbaa !2449
  %2998 = lshr i64 %2970, 63
  %2999 = xor i64 %2996, %2998
  %3000 = xor i64 %2996, %2977
  %3001 = add nuw nsw i64 %2999, %3000
  %3002 = icmp eq i64 %3001, 2
  %3003 = zext i1 %3002 to i8
  store i8 %3003, i8* %66, align 1, !tbaa !2450
  %3004 = add i64 %2938, -52
  %3005 = add i64 %2940, 48
  store i64 %3005, i64* %PC, align 8
  %3006 = inttoptr i64 %3004 to i32*
  %3007 = load i32, i32* %3006, align 4
  %3008 = sext i32 %3007 to i64
  %3009 = mul nsw i64 %3008, 520
  store i64 %3009, i64* %RCX, align 8, !tbaa !2428
  %3010 = lshr i64 %3009, 63
  %3011 = add i64 %3009, %2978
  store i64 %3011, i64* %RAX, align 8, !tbaa !2428
  %3012 = icmp ult i64 %3011, %2978
  %3013 = icmp ult i64 %3011, %3009
  %3014 = or i1 %3012, %3013
  %3015 = zext i1 %3014 to i8
  store i8 %3015, i8* %42, align 1, !tbaa !2432
  %3016 = trunc i64 %3011 to i32
  %3017 = and i32 %3016, 255
  %3018 = tail call i32 @llvm.ctpop.i32(i32 %3017) #8
  %3019 = trunc i32 %3018 to i8
  %3020 = and i8 %3019, 1
  %3021 = xor i8 %3020, 1
  store i8 %3021, i8* %49, align 1, !tbaa !2446
  %3022 = xor i64 %3009, %2978
  %3023 = xor i64 %3022, %3011
  %3024 = lshr i64 %3023, 4
  %3025 = trunc i64 %3024 to i8
  %3026 = and i8 %3025, 1
  store i8 %3026, i8* %54, align 1, !tbaa !2447
  %3027 = icmp eq i64 %3011, 0
  %3028 = zext i1 %3027 to i8
  store i8 %3028, i8* %57, align 1, !tbaa !2448
  %3029 = lshr i64 %3011, 63
  %3030 = trunc i64 %3029 to i8
  store i8 %3030, i8* %60, align 1, !tbaa !2449
  %3031 = xor i64 %3029, %2996
  %3032 = xor i64 %3029, %3010
  %3033 = add nuw nsw i64 %3031, %3032
  %3034 = icmp eq i64 %3033, 2
  %3035 = zext i1 %3034 to i8
  store i8 %3035, i8* %66, align 1, !tbaa !2450
  %3036 = add i64 %2940, 62
  store i64 %3036, i64* %PC, align 8
  %3037 = load i32, i32* %2946, align 4
  %3038 = sext i32 %3037 to i64
  store i64 %3038, i64* %RCX, align 8, !tbaa !2428
  %3039 = shl nsw i64 %3038, 3
  %3040 = add i64 %3039, %3011
  %3041 = add i64 %2940, 67
  store i64 %3041, i64* %PC, align 8
  %3042 = load double, double* %228, align 1
  %3043 = inttoptr i64 %3040 to double*
  %3044 = load double, double* %3043, align 8
  %3045 = fmul double %3042, %3044
  store double %3045, double* %228, align 1, !tbaa !2452
  %3046 = add i64 %2938, -64
  %3047 = add i64 %2940, 72
  store i64 %3047, i64* %PC, align 8
  %3048 = inttoptr i64 %3046 to double*
  %3049 = load double, double* %3048, align 8
  store double %3049, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %3050 = add i64 %2938, 64
  %3051 = add i64 %2940, 76
  store i64 %3051, i64* %PC, align 8
  %3052 = inttoptr i64 %3050 to i64*
  %3053 = load i64, i64* %3052, align 8
  store i64 %3053, i64* %RAX, align 8, !tbaa !2428
  %3054 = add i64 %2940, 80
  store i64 %3054, i64* %PC, align 8
  %3055 = load i32, i32* %2973, align 4
  %3056 = sext i32 %3055 to i64
  store i64 %3056, i64* %RCX, align 8, !tbaa !2428
  %3057 = shl nsw i64 %3056, 3
  %3058 = add i64 %3057, %3053
  %3059 = add i64 %2940, 85
  store i64 %3059, i64* %PC, align 8
  %3060 = inttoptr i64 %3058 to double*
  %3061 = load double, double* %3060, align 8
  %3062 = fmul double %3049, %3061
  store double %3062, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %3063 = load i64, i64* %RBP, align 8
  %3064 = add i64 %3063, 80
  %3065 = add i64 %2940, 89
  store i64 %3065, i64* %PC, align 8
  %3066 = inttoptr i64 %3064 to i64*
  %3067 = load i64, i64* %3066, align 8
  store i64 %3067, i64* %RAX, align 8, !tbaa !2428
  %3068 = add i64 %3063, -108
  %3069 = add i64 %2940, 93
  store i64 %3069, i64* %PC, align 8
  %3070 = inttoptr i64 %3068 to i32*
  %3071 = load i32, i32* %3070, align 4
  %3072 = sext i32 %3071 to i64
  store i64 %3072, i64* %RCX, align 8, !tbaa !2428
  %3073 = shl nsw i64 %3072, 3
  %3074 = add i64 %3073, %3067
  %3075 = add i64 %2940, 98
  store i64 %3075, i64* %PC, align 8
  %3076 = inttoptr i64 %3074 to double*
  %3077 = load double, double* %3076, align 8
  %3078 = fdiv double %3062, %3077
  store double %3078, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %3079 = add i64 %3063, 16
  %3080 = add i64 %2940, 102
  store i64 %3080, i64* %PC, align 8
  %3081 = inttoptr i64 %3079 to i64*
  %3082 = load i64, i64* %3081, align 8
  store i64 %3082, i64* %RAX, align 8, !tbaa !2428
  %3083 = add i64 %3063, -100
  %3084 = add i64 %2940, 106
  store i64 %3084, i64* %PC, align 8
  %3085 = inttoptr i64 %3083 to i32*
  %3086 = load i32, i32* %3085, align 4
  %3087 = sext i32 %3086 to i64
  %3088 = mul nsw i64 %3087, 520
  store i64 %3088, i64* %RCX, align 8, !tbaa !2428
  %3089 = lshr i64 %3088, 63
  %3090 = add i64 %3088, %3082
  store i64 %3090, i64* %RAX, align 8, !tbaa !2428
  %3091 = icmp ult i64 %3090, %3082
  %3092 = icmp ult i64 %3090, %3088
  %3093 = or i1 %3091, %3092
  %3094 = zext i1 %3093 to i8
  store i8 %3094, i8* %42, align 1, !tbaa !2432
  %3095 = trunc i64 %3090 to i32
  %3096 = and i32 %3095, 255
  %3097 = tail call i32 @llvm.ctpop.i32(i32 %3096) #8
  %3098 = trunc i32 %3097 to i8
  %3099 = and i8 %3098, 1
  %3100 = xor i8 %3099, 1
  store i8 %3100, i8* %49, align 1, !tbaa !2446
  %3101 = xor i64 %3088, %3082
  %3102 = xor i64 %3101, %3090
  %3103 = lshr i64 %3102, 4
  %3104 = trunc i64 %3103 to i8
  %3105 = and i8 %3104, 1
  store i8 %3105, i8* %54, align 1, !tbaa !2447
  %3106 = icmp eq i64 %3090, 0
  %3107 = zext i1 %3106 to i8
  store i8 %3107, i8* %57, align 1, !tbaa !2448
  %3108 = lshr i64 %3090, 63
  %3109 = trunc i64 %3108 to i8
  store i8 %3109, i8* %60, align 1, !tbaa !2449
  %3110 = lshr i64 %3082, 63
  %3111 = xor i64 %3108, %3110
  %3112 = xor i64 %3108, %3089
  %3113 = add nuw nsw i64 %3111, %3112
  %3114 = icmp eq i64 %3113, 2
  %3115 = zext i1 %3114 to i8
  store i8 %3115, i8* %66, align 1, !tbaa !2450
  %3116 = add i64 %3063, -104
  %3117 = add i64 %2940, 120
  store i64 %3117, i64* %PC, align 8
  %3118 = inttoptr i64 %3116 to i32*
  %3119 = load i32, i32* %3118, align 4
  %3120 = sext i32 %3119 to i64
  store i64 %3120, i64* %RCX, align 8, !tbaa !2428
  %3121 = shl nsw i64 %3120, 3
  %3122 = add i64 %3121, %3090
  %3123 = add i64 %2940, 125
  store i64 %3123, i64* %PC, align 8
  %3124 = inttoptr i64 %3122 to double*
  %3125 = load double, double* %3124, align 8
  %3126 = fmul double %3078, %3125
  store double %3126, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %3127 = load double, double* %228, align 1
  %3128 = fadd double %3127, %3126
  store double %3128, double* %228, align 1, !tbaa !2452
  %3129 = add i64 %3063, -64
  %3130 = add i64 %2940, 134
  store i64 %3130, i64* %PC, align 8
  %3131 = inttoptr i64 %3129 to double*
  %3132 = load double, double* %3131, align 8
  store double %3132, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %3133 = add i64 %3063, 56
  %3134 = add i64 %2940, 138
  store i64 %3134, i64* %PC, align 8
  %3135 = inttoptr i64 %3133 to i64*
  %3136 = load i64, i64* %3135, align 8
  store i64 %3136, i64* %RAX, align 8, !tbaa !2428
  %3137 = add i64 %2940, 142
  store i64 %3137, i64* %PC, align 8
  %3138 = load i32, i32* %3085, align 4
  %3139 = sext i32 %3138 to i64
  store i64 %3139, i64* %RCX, align 8, !tbaa !2428
  %3140 = shl nsw i64 %3139, 3
  %3141 = add i64 %3140, %3136
  %3142 = add i64 %2940, 147
  store i64 %3142, i64* %PC, align 8
  %3143 = inttoptr i64 %3141 to double*
  %3144 = load double, double* %3143, align 8
  %3145 = fmul double %3132, %3144
  store double %3145, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %3146 = add i64 %2940, 151
  store i64 %3146, i64* %PC, align 8
  %3147 = load i64, i64* %3066, align 8
  store i64 %3147, i64* %RAX, align 8, !tbaa !2428
  %3148 = add i64 %2940, 155
  store i64 %3148, i64* %PC, align 8
  %3149 = load i32, i32* %3070, align 4
  %3150 = sext i32 %3149 to i64
  store i64 %3150, i64* %RCX, align 8, !tbaa !2428
  %3151 = shl nsw i64 %3150, 3
  %3152 = add i64 %3151, %3147
  %3153 = add i64 %2940, 160
  store i64 %3153, i64* %PC, align 8
  %3154 = inttoptr i64 %3152 to double*
  %3155 = load double, double* %3154, align 8
  %3156 = fdiv double %3145, %3155
  store double %3156, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %3157 = add i64 %3063, 24
  %3158 = add i64 %2940, 164
  store i64 %3158, i64* %PC, align 8
  %3159 = inttoptr i64 %3157 to i64*
  %3160 = load i64, i64* %3159, align 8
  store i64 %3160, i64* %RAX, align 8, !tbaa !2428
  %3161 = add i64 %2940, 168
  store i64 %3161, i64* %PC, align 8
  %3162 = load i32, i32* %3085, align 4
  %3163 = sext i32 %3162 to i64
  %3164 = mul nsw i64 %3163, 33800
  store i64 %3164, i64* %RCX, align 8, !tbaa !2428
  %3165 = lshr i64 %3164, 63
  %3166 = add i64 %3164, %3160
  store i64 %3166, i64* %RAX, align 8, !tbaa !2428
  %3167 = icmp ult i64 %3166, %3160
  %3168 = icmp ult i64 %3166, %3164
  %3169 = or i1 %3167, %3168
  %3170 = zext i1 %3169 to i8
  store i8 %3170, i8* %42, align 1, !tbaa !2432
  %3171 = trunc i64 %3166 to i32
  %3172 = and i32 %3171, 255
  %3173 = tail call i32 @llvm.ctpop.i32(i32 %3172) #8
  %3174 = trunc i32 %3173 to i8
  %3175 = and i8 %3174, 1
  %3176 = xor i8 %3175, 1
  store i8 %3176, i8* %49, align 1, !tbaa !2446
  %3177 = xor i64 %3164, %3160
  %3178 = xor i64 %3177, %3166
  %3179 = lshr i64 %3178, 4
  %3180 = trunc i64 %3179 to i8
  %3181 = and i8 %3180, 1
  store i8 %3181, i8* %54, align 1, !tbaa !2447
  %3182 = icmp eq i64 %3166, 0
  %3183 = zext i1 %3182 to i8
  store i8 %3183, i8* %57, align 1, !tbaa !2448
  %3184 = lshr i64 %3166, 63
  %3185 = trunc i64 %3184 to i8
  store i8 %3185, i8* %60, align 1, !tbaa !2449
  %3186 = lshr i64 %3160, 63
  %3187 = xor i64 %3184, %3186
  %3188 = xor i64 %3184, %3165
  %3189 = add nuw nsw i64 %3187, %3188
  %3190 = icmp eq i64 %3189, 2
  %3191 = zext i1 %3190 to i8
  store i8 %3191, i8* %66, align 1, !tbaa !2450
  %3192 = load i64, i64* %RBP, align 8
  %3193 = add i64 %3192, -52
  %3194 = add i64 %2940, 182
  store i64 %3194, i64* %PC, align 8
  %3195 = inttoptr i64 %3193 to i32*
  %3196 = load i32, i32* %3195, align 4
  %3197 = sext i32 %3196 to i64
  %3198 = mul nsw i64 %3197, 520
  store i64 %3198, i64* %RCX, align 8, !tbaa !2428
  %3199 = lshr i64 %3198, 63
  %3200 = add i64 %3198, %3166
  store i64 %3200, i64* %RAX, align 8, !tbaa !2428
  %3201 = icmp ult i64 %3200, %3166
  %3202 = icmp ult i64 %3200, %3198
  %3203 = or i1 %3201, %3202
  %3204 = zext i1 %3203 to i8
  store i8 %3204, i8* %42, align 1, !tbaa !2432
  %3205 = trunc i64 %3200 to i32
  %3206 = and i32 %3205, 255
  %3207 = tail call i32 @llvm.ctpop.i32(i32 %3206) #8
  %3208 = trunc i32 %3207 to i8
  %3209 = and i8 %3208, 1
  %3210 = xor i8 %3209, 1
  store i8 %3210, i8* %49, align 1, !tbaa !2446
  %3211 = xor i64 %3198, %3166
  %3212 = xor i64 %3211, %3200
  %3213 = lshr i64 %3212, 4
  %3214 = trunc i64 %3213 to i8
  %3215 = and i8 %3214, 1
  store i8 %3215, i8* %54, align 1, !tbaa !2447
  %3216 = icmp eq i64 %3200, 0
  %3217 = zext i1 %3216 to i8
  store i8 %3217, i8* %57, align 1, !tbaa !2448
  %3218 = lshr i64 %3200, 63
  %3219 = trunc i64 %3218 to i8
  store i8 %3219, i8* %60, align 1, !tbaa !2449
  %3220 = xor i64 %3218, %3184
  %3221 = xor i64 %3218, %3199
  %3222 = add nuw nsw i64 %3220, %3221
  %3223 = icmp eq i64 %3222, 2
  %3224 = zext i1 %3223 to i8
  store i8 %3224, i8* %66, align 1, !tbaa !2450
  %3225 = add i64 %3192, -108
  %3226 = add i64 %2940, 196
  store i64 %3226, i64* %PC, align 8
  %3227 = inttoptr i64 %3225 to i32*
  %3228 = load i32, i32* %3227, align 4
  %3229 = sext i32 %3228 to i64
  store i64 %3229, i64* %RCX, align 8, !tbaa !2428
  %3230 = shl nsw i64 %3229, 3
  %3231 = add i64 %3230, %3200
  %3232 = add i64 %2940, 201
  store i64 %3232, i64* %PC, align 8
  %3233 = load double, double* %231, align 1
  %3234 = inttoptr i64 %3231 to double*
  %3235 = load double, double* %3234, align 8
  %3236 = fmul double %3233, %3235
  store double %3236, double* %231, align 1, !tbaa !2452
  %3237 = load double, double* %228, align 1
  %3238 = fsub double %3237, %3236
  store double %3238, double* %228, align 1, !tbaa !2452
  %3239 = add i64 %3192, 48
  %3240 = add i64 %2940, 209
  store i64 %3240, i64* %PC, align 8
  %3241 = inttoptr i64 %3239 to i64*
  %3242 = load i64, i64* %3241, align 8
  store i64 %3242, i64* %RAX, align 8, !tbaa !2428
  %3243 = add i64 %3192, -100
  %3244 = add i64 %2940, 213
  store i64 %3244, i64* %PC, align 8
  %3245 = inttoptr i64 %3243 to i32*
  %3246 = load i32, i32* %3245, align 4
  %3247 = sext i32 %3246 to i64
  %3248 = mul nsw i64 %3247, 33800
  store i64 %3248, i64* %RCX, align 8, !tbaa !2428
  %3249 = lshr i64 %3248, 63
  %3250 = add i64 %3248, %3242
  store i64 %3250, i64* %RAX, align 8, !tbaa !2428
  %3251 = icmp ult i64 %3250, %3242
  %3252 = icmp ult i64 %3250, %3248
  %3253 = or i1 %3251, %3252
  %3254 = zext i1 %3253 to i8
  store i8 %3254, i8* %42, align 1, !tbaa !2432
  %3255 = trunc i64 %3250 to i32
  %3256 = and i32 %3255, 255
  %3257 = tail call i32 @llvm.ctpop.i32(i32 %3256) #8
  %3258 = trunc i32 %3257 to i8
  %3259 = and i8 %3258, 1
  %3260 = xor i8 %3259, 1
  store i8 %3260, i8* %49, align 1, !tbaa !2446
  %3261 = xor i64 %3248, %3242
  %3262 = xor i64 %3261, %3250
  %3263 = lshr i64 %3262, 4
  %3264 = trunc i64 %3263 to i8
  %3265 = and i8 %3264, 1
  store i8 %3265, i8* %54, align 1, !tbaa !2447
  %3266 = icmp eq i64 %3250, 0
  %3267 = zext i1 %3266 to i8
  store i8 %3267, i8* %57, align 1, !tbaa !2448
  %3268 = lshr i64 %3250, 63
  %3269 = trunc i64 %3268 to i8
  store i8 %3269, i8* %60, align 1, !tbaa !2449
  %3270 = lshr i64 %3242, 63
  %3271 = xor i64 %3268, %3270
  %3272 = xor i64 %3268, %3249
  %3273 = add nuw nsw i64 %3271, %3272
  %3274 = icmp eq i64 %3273, 2
  %3275 = zext i1 %3274 to i8
  store i8 %3275, i8* %66, align 1, !tbaa !2450
  %3276 = load i64, i64* %RBP, align 8
  %3277 = add i64 %3276, -52
  %3278 = add i64 %2940, 227
  store i64 %3278, i64* %PC, align 8
  %3279 = inttoptr i64 %3277 to i32*
  %3280 = load i32, i32* %3279, align 4
  %3281 = sext i32 %3280 to i64
  %3282 = mul nsw i64 %3281, 520
  store i64 %3282, i64* %RCX, align 8, !tbaa !2428
  %3283 = lshr i64 %3282, 63
  %3284 = add i64 %3282, %3250
  store i64 %3284, i64* %RAX, align 8, !tbaa !2428
  %3285 = icmp ult i64 %3284, %3250
  %3286 = icmp ult i64 %3284, %3282
  %3287 = or i1 %3285, %3286
  %3288 = zext i1 %3287 to i8
  store i8 %3288, i8* %42, align 1, !tbaa !2432
  %3289 = trunc i64 %3284 to i32
  %3290 = and i32 %3289, 255
  %3291 = tail call i32 @llvm.ctpop.i32(i32 %3290) #8
  %3292 = trunc i32 %3291 to i8
  %3293 = and i8 %3292, 1
  %3294 = xor i8 %3293, 1
  store i8 %3294, i8* %49, align 1, !tbaa !2446
  %3295 = xor i64 %3282, %3250
  %3296 = xor i64 %3295, %3284
  %3297 = lshr i64 %3296, 4
  %3298 = trunc i64 %3297 to i8
  %3299 = and i8 %3298, 1
  store i8 %3299, i8* %54, align 1, !tbaa !2447
  %3300 = icmp eq i64 %3284, 0
  %3301 = zext i1 %3300 to i8
  store i8 %3301, i8* %57, align 1, !tbaa !2448
  %3302 = lshr i64 %3284, 63
  %3303 = trunc i64 %3302 to i8
  store i8 %3303, i8* %60, align 1, !tbaa !2449
  %3304 = xor i64 %3302, %3268
  %3305 = xor i64 %3302, %3283
  %3306 = add nuw nsw i64 %3304, %3305
  %3307 = icmp eq i64 %3306, 2
  %3308 = zext i1 %3307 to i8
  store i8 %3308, i8* %66, align 1, !tbaa !2450
  %3309 = add i64 %3276, -108
  %3310 = add i64 %2940, 241
  store i64 %3310, i64* %PC, align 8
  %3311 = inttoptr i64 %3309 to i32*
  %3312 = load i32, i32* %3311, align 4
  %3313 = sext i32 %3312 to i64
  store i64 %3313, i64* %RCX, align 8, !tbaa !2428
  %3314 = shl nsw i64 %3313, 3
  %3315 = add i64 %3314, %3284
  %3316 = add i64 %2940, 246
  store i64 %3316, i64* %PC, align 8
  %3317 = load i64, i64* %147, align 1
  %3318 = inttoptr i64 %3315 to i64*
  store i64 %3317, i64* %3318, align 8
  %3319 = load i64, i64* %RBP, align 8
  %3320 = add i64 %3319, 16
  %3321 = load i64, i64* %PC, align 8
  %3322 = add i64 %3321, 4
  store i64 %3322, i64* %PC, align 8
  %3323 = inttoptr i64 %3320 to i64*
  %3324 = load i64, i64* %3323, align 8
  store i64 %3324, i64* %RAX, align 8, !tbaa !2428
  %3325 = add i64 %3319, -100
  %3326 = add i64 %3321, 8
  store i64 %3326, i64* %PC, align 8
  %3327 = inttoptr i64 %3325 to i32*
  %3328 = load i32, i32* %3327, align 4
  %3329 = sext i32 %3328 to i64
  %3330 = mul nsw i64 %3329, 520
  store i64 %3330, i64* %RCX, align 8, !tbaa !2428
  %3331 = lshr i64 %3330, 63
  %3332 = add i64 %3330, %3324
  store i64 %3332, i64* %RAX, align 8, !tbaa !2428
  %3333 = icmp ult i64 %3332, %3324
  %3334 = icmp ult i64 %3332, %3330
  %3335 = or i1 %3333, %3334
  %3336 = zext i1 %3335 to i8
  store i8 %3336, i8* %42, align 1, !tbaa !2432
  %3337 = trunc i64 %3332 to i32
  %3338 = and i32 %3337, 255
  %3339 = tail call i32 @llvm.ctpop.i32(i32 %3338) #8
  %3340 = trunc i32 %3339 to i8
  %3341 = and i8 %3340, 1
  %3342 = xor i8 %3341, 1
  store i8 %3342, i8* %49, align 1, !tbaa !2446
  %3343 = xor i64 %3330, %3324
  %3344 = xor i64 %3343, %3332
  %3345 = lshr i64 %3344, 4
  %3346 = trunc i64 %3345 to i8
  %3347 = and i8 %3346, 1
  store i8 %3347, i8* %54, align 1, !tbaa !2447
  %3348 = icmp eq i64 %3332, 0
  %3349 = zext i1 %3348 to i8
  store i8 %3349, i8* %57, align 1, !tbaa !2448
  %3350 = lshr i64 %3332, 63
  %3351 = trunc i64 %3350 to i8
  store i8 %3351, i8* %60, align 1, !tbaa !2449
  %3352 = lshr i64 %3324, 63
  %3353 = xor i64 %3350, %3352
  %3354 = xor i64 %3350, %3331
  %3355 = add nuw nsw i64 %3353, %3354
  %3356 = icmp eq i64 %3355, 2
  %3357 = zext i1 %3356 to i8
  store i8 %3357, i8* %66, align 1, !tbaa !2450
  %3358 = add i64 %3319, -104
  %3359 = add i64 %3321, 22
  store i64 %3359, i64* %PC, align 8
  %3360 = inttoptr i64 %3358 to i32*
  %3361 = load i32, i32* %3360, align 4
  %3362 = sext i32 %3361 to i64
  store i64 %3362, i64* %RCX, align 8, !tbaa !2428
  %3363 = shl nsw i64 %3362, 3
  %3364 = add i64 %3363, %3332
  %3365 = add i64 %3321, 27
  store i64 %3365, i64* %PC, align 8
  %3366 = inttoptr i64 %3364 to i64*
  %3367 = load i64, i64* %3366, align 8
  store i64 %3367, i64* %147, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %3368 = add i64 %3319, 24
  %3369 = add i64 %3321, 31
  store i64 %3369, i64* %PC, align 8
  %3370 = inttoptr i64 %3368 to i64*
  %3371 = load i64, i64* %3370, align 8
  store i64 %3371, i64* %RAX, align 8, !tbaa !2428
  %3372 = add i64 %3321, 35
  store i64 %3372, i64* %PC, align 8
  %3373 = load i32, i32* %3327, align 4
  %3374 = sext i32 %3373 to i64
  %3375 = mul nsw i64 %3374, 33800
  store i64 %3375, i64* %RCX, align 8, !tbaa !2428
  %3376 = lshr i64 %3375, 63
  %3377 = add i64 %3375, %3371
  store i64 %3377, i64* %RAX, align 8, !tbaa !2428
  %3378 = icmp ult i64 %3377, %3371
  %3379 = icmp ult i64 %3377, %3375
  %3380 = or i1 %3378, %3379
  %3381 = zext i1 %3380 to i8
  store i8 %3381, i8* %42, align 1, !tbaa !2432
  %3382 = trunc i64 %3377 to i32
  %3383 = and i32 %3382, 255
  %3384 = tail call i32 @llvm.ctpop.i32(i32 %3383) #8
  %3385 = trunc i32 %3384 to i8
  %3386 = and i8 %3385, 1
  %3387 = xor i8 %3386, 1
  store i8 %3387, i8* %49, align 1, !tbaa !2446
  %3388 = xor i64 %3375, %3371
  %3389 = xor i64 %3388, %3377
  %3390 = lshr i64 %3389, 4
  %3391 = trunc i64 %3390 to i8
  %3392 = and i8 %3391, 1
  store i8 %3392, i8* %54, align 1, !tbaa !2447
  %3393 = icmp eq i64 %3377, 0
  %3394 = zext i1 %3393 to i8
  store i8 %3394, i8* %57, align 1, !tbaa !2448
  %3395 = lshr i64 %3377, 63
  %3396 = trunc i64 %3395 to i8
  store i8 %3396, i8* %60, align 1, !tbaa !2449
  %3397 = lshr i64 %3371, 63
  %3398 = xor i64 %3395, %3397
  %3399 = xor i64 %3395, %3376
  %3400 = add nuw nsw i64 %3398, %3399
  %3401 = icmp eq i64 %3400, 2
  %3402 = zext i1 %3401 to i8
  store i8 %3402, i8* %66, align 1, !tbaa !2450
  %3403 = load i64, i64* %RBP, align 8
  %3404 = add i64 %3403, -52
  %3405 = add i64 %3321, 49
  store i64 %3405, i64* %PC, align 8
  %3406 = inttoptr i64 %3404 to i32*
  %3407 = load i32, i32* %3406, align 4
  %3408 = sext i32 %3407 to i64
  %3409 = mul nsw i64 %3408, 520
  store i64 %3409, i64* %RCX, align 8, !tbaa !2428
  %3410 = lshr i64 %3409, 63
  %3411 = add i64 %3409, %3377
  store i64 %3411, i64* %RAX, align 8, !tbaa !2428
  %3412 = icmp ult i64 %3411, %3377
  %3413 = icmp ult i64 %3411, %3409
  %3414 = or i1 %3412, %3413
  %3415 = zext i1 %3414 to i8
  store i8 %3415, i8* %42, align 1, !tbaa !2432
  %3416 = trunc i64 %3411 to i32
  %3417 = and i32 %3416, 255
  %3418 = tail call i32 @llvm.ctpop.i32(i32 %3417) #8
  %3419 = trunc i32 %3418 to i8
  %3420 = and i8 %3419, 1
  %3421 = xor i8 %3420, 1
  store i8 %3421, i8* %49, align 1, !tbaa !2446
  %3422 = xor i64 %3409, %3377
  %3423 = xor i64 %3422, %3411
  %3424 = lshr i64 %3423, 4
  %3425 = trunc i64 %3424 to i8
  %3426 = and i8 %3425, 1
  store i8 %3426, i8* %54, align 1, !tbaa !2447
  %3427 = icmp eq i64 %3411, 0
  %3428 = zext i1 %3427 to i8
  store i8 %3428, i8* %57, align 1, !tbaa !2448
  %3429 = lshr i64 %3411, 63
  %3430 = trunc i64 %3429 to i8
  store i8 %3430, i8* %60, align 1, !tbaa !2449
  %3431 = xor i64 %3429, %3395
  %3432 = xor i64 %3429, %3410
  %3433 = add nuw nsw i64 %3431, %3432
  %3434 = icmp eq i64 %3433, 2
  %3435 = zext i1 %3434 to i8
  store i8 %3435, i8* %66, align 1, !tbaa !2450
  %3436 = add i64 %3403, -108
  %3437 = add i64 %3321, 63
  store i64 %3437, i64* %PC, align 8
  %3438 = inttoptr i64 %3436 to i32*
  %3439 = load i32, i32* %3438, align 4
  %3440 = sext i32 %3439 to i64
  store i64 %3440, i64* %RCX, align 8, !tbaa !2428
  %3441 = shl nsw i64 %3440, 3
  %3442 = add i64 %3441, %3411
  %3443 = add i64 %3321, 68
  store i64 %3443, i64* %PC, align 8
  %3444 = load i64, i64* %147, align 1
  %3445 = inttoptr i64 %3442 to i64*
  store i64 %3444, i64* %3445, align 8
  %3446 = load i64, i64* %RBP, align 8
  %3447 = add i64 %3446, -108
  %3448 = load i64, i64* %PC, align 8
  %3449 = add i64 %3448, 3
  store i64 %3449, i64* %PC, align 8
  %3450 = inttoptr i64 %3447 to i32*
  %3451 = load i32, i32* %3450, align 4
  %3452 = add i32 %3451, 1
  %3453 = zext i32 %3452 to i64
  store i64 %3453, i64* %RAX, align 8, !tbaa !2428
  %3454 = icmp eq i32 %3451, -1
  %3455 = icmp eq i32 %3452, 0
  %3456 = or i1 %3454, %3455
  %3457 = zext i1 %3456 to i8
  store i8 %3457, i8* %42, align 1, !tbaa !2432
  %3458 = and i32 %3452, 255
  %3459 = tail call i32 @llvm.ctpop.i32(i32 %3458) #8
  %3460 = trunc i32 %3459 to i8
  %3461 = and i8 %3460, 1
  %3462 = xor i8 %3461, 1
  store i8 %3462, i8* %49, align 1, !tbaa !2446
  %3463 = xor i32 %3451, %3452
  %3464 = lshr i32 %3463, 4
  %3465 = trunc i32 %3464 to i8
  %3466 = and i8 %3465, 1
  store i8 %3466, i8* %54, align 1, !tbaa !2447
  %3467 = zext i1 %3455 to i8
  store i8 %3467, i8* %57, align 1, !tbaa !2448
  %3468 = lshr i32 %3452, 31
  %3469 = trunc i32 %3468 to i8
  store i8 %3469, i8* %60, align 1, !tbaa !2449
  %3470 = lshr i32 %3451, 31
  %3471 = xor i32 %3468, %3470
  %3472 = add nuw nsw i32 %3471, %3468
  %3473 = icmp eq i32 %3472, 2
  %3474 = zext i1 %3473 to i8
  store i8 %3474, i8* %66, align 1, !tbaa !2450
  %3475 = add i64 %3448, 9
  store i64 %3475, i64* %PC, align 8
  store i32 %3452, i32* %3450, align 4
  %3476 = load i64, i64* %PC, align 8
  %3477 = add i64 %3476, -660
  store i64 %3477, i64* %PC, align 8, !tbaa !2428
  br label %block_402512

block_401fec:                                     ; preds = %block_401fe0
  %3478 = add i64 %4617, 36
  store i64 %3478, i64* %PC, align 8
  %3479 = load i32, i32* %4584, align 4
  %3480 = sext i32 %3479 to i64
  store i64 %3480, i64* %RCX, align 8, !tbaa !2428
  %3481 = shl nsw i64 %3480, 3
  %3482 = add i64 %3481, %4663
  %3483 = add i64 %4617, 41
  store i64 %3483, i64* %PC, align 8
  %3484 = inttoptr i64 %3482 to i64*
  %3485 = load i64, i64* %3484, align 8
  store i64 %3485, i64* %147, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %3486 = add i64 %4617, 45
  store i64 %3486, i64* %PC, align 8
  %3487 = load i64, i64* %4620, align 8
  store i64 %3487, i64* %RAX, align 8, !tbaa !2428
  %3488 = add i64 %4617, 49
  store i64 %3488, i64* %PC, align 8
  %3489 = load i32, i32* %4624, align 4
  %3490 = sext i32 %3489 to i64
  %3491 = mul nsw i64 %3490, 33800
  store i64 %3491, i64* %RCX, align 8, !tbaa !2428
  %3492 = lshr i64 %3491, 63
  %3493 = add i64 %3491, %3487
  store i64 %3493, i64* %RAX, align 8, !tbaa !2428
  %3494 = icmp ult i64 %3493, %3487
  %3495 = icmp ult i64 %3493, %3491
  %3496 = or i1 %3494, %3495
  %3497 = zext i1 %3496 to i8
  store i8 %3497, i8* %42, align 1, !tbaa !2432
  %3498 = trunc i64 %3493 to i32
  %3499 = and i32 %3498, 255
  %3500 = tail call i32 @llvm.ctpop.i32(i32 %3499) #8
  %3501 = trunc i32 %3500 to i8
  %3502 = and i8 %3501, 1
  %3503 = xor i8 %3502, 1
  store i8 %3503, i8* %49, align 1, !tbaa !2446
  %3504 = xor i64 %3491, %3487
  %3505 = xor i64 %3504, %3493
  %3506 = lshr i64 %3505, 4
  %3507 = trunc i64 %3506 to i8
  %3508 = and i8 %3507, 1
  store i8 %3508, i8* %54, align 1, !tbaa !2447
  %3509 = icmp eq i64 %3493, 0
  %3510 = zext i1 %3509 to i8
  store i8 %3510, i8* %57, align 1, !tbaa !2448
  %3511 = lshr i64 %3493, 63
  %3512 = trunc i64 %3511 to i8
  store i8 %3512, i8* %60, align 1, !tbaa !2449
  %3513 = lshr i64 %3487, 63
  %3514 = xor i64 %3511, %3513
  %3515 = xor i64 %3511, %3492
  %3516 = add nuw nsw i64 %3514, %3515
  %3517 = icmp eq i64 %3516, 2
  %3518 = zext i1 %3517 to i8
  store i8 %3518, i8* %66, align 1, !tbaa !2450
  %3519 = add i64 %4617, 62
  store i64 %3519, i64* %PC, align 8
  %3520 = load i32, i32* %4657, align 4
  %3521 = add i32 %3520, 1
  %3522 = zext i32 %3521 to i64
  store i64 %3522, i64* %RDX, align 8, !tbaa !2428
  %3523 = sext i32 %3521 to i64
  %3524 = mul nsw i64 %3523, 520
  store i64 %3524, i64* %RCX, align 8, !tbaa !2428
  %3525 = lshr i64 %3524, 63
  %3526 = add i64 %3524, %3493
  store i64 %3526, i64* %RAX, align 8, !tbaa !2428
  %3527 = icmp ult i64 %3526, %3493
  %3528 = icmp ult i64 %3526, %3524
  %3529 = or i1 %3527, %3528
  %3530 = zext i1 %3529 to i8
  store i8 %3530, i8* %42, align 1, !tbaa !2432
  %3531 = trunc i64 %3526 to i32
  %3532 = and i32 %3531, 255
  %3533 = tail call i32 @llvm.ctpop.i32(i32 %3532) #8
  %3534 = trunc i32 %3533 to i8
  %3535 = and i8 %3534, 1
  %3536 = xor i8 %3535, 1
  store i8 %3536, i8* %49, align 1, !tbaa !2446
  %3537 = xor i64 %3524, %3493
  %3538 = xor i64 %3537, %3526
  %3539 = lshr i64 %3538, 4
  %3540 = trunc i64 %3539 to i8
  %3541 = and i8 %3540, 1
  store i8 %3541, i8* %54, align 1, !tbaa !2447
  %3542 = icmp eq i64 %3526, 0
  %3543 = zext i1 %3542 to i8
  store i8 %3543, i8* %57, align 1, !tbaa !2448
  %3544 = lshr i64 %3526, 63
  %3545 = trunc i64 %3544 to i8
  store i8 %3545, i8* %60, align 1, !tbaa !2449
  %3546 = xor i64 %3544, %3511
  %3547 = xor i64 %3544, %3525
  %3548 = add nuw nsw i64 %3546, %3547
  %3549 = icmp eq i64 %3548, 2
  %3550 = zext i1 %3549 to i8
  store i8 %3550, i8* %66, align 1, !tbaa !2450
  %3551 = load i64, i64* %RBP, align 8
  %3552 = add i64 %3551, -108
  %3553 = add i64 %4617, 82
  store i64 %3553, i64* %PC, align 8
  %3554 = inttoptr i64 %3552 to i32*
  %3555 = load i32, i32* %3554, align 4
  %3556 = sext i32 %3555 to i64
  store i64 %3556, i64* %RCX, align 8, !tbaa !2428
  %3557 = shl nsw i64 %3556, 3
  %3558 = add i64 %3557, %3526
  %3559 = add i64 %4617, 87
  store i64 %3559, i64* %PC, align 8
  %3560 = load double, double* %228, align 1
  %3561 = inttoptr i64 %3558 to double*
  %3562 = load double, double* %3561, align 8
  %3563 = fsub double %3560, %3562
  store double %3563, double* %228, align 1, !tbaa !2452
  %3564 = add i64 %3551, 40
  %3565 = add i64 %4617, 91
  store i64 %3565, i64* %PC, align 8
  %3566 = inttoptr i64 %3564 to i64*
  %3567 = load i64, i64* %3566, align 8
  store i64 %3567, i64* %RAX, align 8, !tbaa !2428
  %3568 = add i64 %3551, -100
  %3569 = add i64 %4617, 95
  store i64 %3569, i64* %PC, align 8
  %3570 = inttoptr i64 %3568 to i32*
  %3571 = load i32, i32* %3570, align 4
  %3572 = sext i32 %3571 to i64
  %3573 = mul nsw i64 %3572, 33800
  store i64 %3573, i64* %RCX, align 8, !tbaa !2428
  %3574 = lshr i64 %3573, 63
  %3575 = add i64 %3573, %3567
  store i64 %3575, i64* %RAX, align 8, !tbaa !2428
  %3576 = icmp ult i64 %3575, %3567
  %3577 = icmp ult i64 %3575, %3573
  %3578 = or i1 %3576, %3577
  %3579 = zext i1 %3578 to i8
  store i8 %3579, i8* %42, align 1, !tbaa !2432
  %3580 = trunc i64 %3575 to i32
  %3581 = and i32 %3580, 255
  %3582 = tail call i32 @llvm.ctpop.i32(i32 %3581) #8
  %3583 = trunc i32 %3582 to i8
  %3584 = and i8 %3583, 1
  %3585 = xor i8 %3584, 1
  store i8 %3585, i8* %49, align 1, !tbaa !2446
  %3586 = xor i64 %3573, %3567
  %3587 = xor i64 %3586, %3575
  %3588 = lshr i64 %3587, 4
  %3589 = trunc i64 %3588 to i8
  %3590 = and i8 %3589, 1
  store i8 %3590, i8* %54, align 1, !tbaa !2447
  %3591 = icmp eq i64 %3575, 0
  %3592 = zext i1 %3591 to i8
  store i8 %3592, i8* %57, align 1, !tbaa !2448
  %3593 = lshr i64 %3575, 63
  %3594 = trunc i64 %3593 to i8
  store i8 %3594, i8* %60, align 1, !tbaa !2449
  %3595 = lshr i64 %3567, 63
  %3596 = xor i64 %3593, %3595
  %3597 = xor i64 %3593, %3574
  %3598 = add nuw nsw i64 %3596, %3597
  %3599 = icmp eq i64 %3598, 2
  %3600 = zext i1 %3599 to i8
  store i8 %3600, i8* %66, align 1, !tbaa !2450
  %3601 = add i64 %3551, -104
  %3602 = add i64 %4617, 109
  store i64 %3602, i64* %PC, align 8
  %3603 = inttoptr i64 %3601 to i32*
  %3604 = load i32, i32* %3603, align 4
  %3605 = sext i32 %3604 to i64
  %3606 = mul nsw i64 %3605, 520
  store i64 %3606, i64* %RCX, align 8, !tbaa !2428
  %3607 = lshr i64 %3606, 63
  %3608 = add i64 %3606, %3575
  store i64 %3608, i64* %RAX, align 8, !tbaa !2428
  %3609 = icmp ult i64 %3608, %3575
  %3610 = icmp ult i64 %3608, %3606
  %3611 = or i1 %3609, %3610
  %3612 = zext i1 %3611 to i8
  store i8 %3612, i8* %42, align 1, !tbaa !2432
  %3613 = trunc i64 %3608 to i32
  %3614 = and i32 %3613, 255
  %3615 = tail call i32 @llvm.ctpop.i32(i32 %3614) #8
  %3616 = trunc i32 %3615 to i8
  %3617 = and i8 %3616, 1
  %3618 = xor i8 %3617, 1
  store i8 %3618, i8* %49, align 1, !tbaa !2446
  %3619 = xor i64 %3606, %3575
  %3620 = xor i64 %3619, %3608
  %3621 = lshr i64 %3620, 4
  %3622 = trunc i64 %3621 to i8
  %3623 = and i8 %3622, 1
  store i8 %3623, i8* %54, align 1, !tbaa !2447
  %3624 = icmp eq i64 %3608, 0
  %3625 = zext i1 %3624 to i8
  store i8 %3625, i8* %57, align 1, !tbaa !2448
  %3626 = lshr i64 %3608, 63
  %3627 = trunc i64 %3626 to i8
  store i8 %3627, i8* %60, align 1, !tbaa !2449
  %3628 = xor i64 %3626, %3593
  %3629 = xor i64 %3626, %3607
  %3630 = add nuw nsw i64 %3628, %3629
  %3631 = icmp eq i64 %3630, 2
  %3632 = zext i1 %3631 to i8
  store i8 %3632, i8* %66, align 1, !tbaa !2450
  %3633 = load i64, i64* %RBP, align 8
  %3634 = add i64 %3633, -108
  %3635 = add i64 %4617, 122
  store i64 %3635, i64* %PC, align 8
  %3636 = inttoptr i64 %3634 to i32*
  %3637 = load i32, i32* %3636, align 4
  %3638 = add i32 %3637, 1
  %3639 = zext i32 %3638 to i64
  store i64 %3639, i64* %RDX, align 8, !tbaa !2428
  %3640 = icmp eq i32 %3637, -1
  %3641 = icmp eq i32 %3638, 0
  %3642 = or i1 %3640, %3641
  %3643 = zext i1 %3642 to i8
  store i8 %3643, i8* %42, align 1, !tbaa !2432
  %3644 = and i32 %3638, 255
  %3645 = tail call i32 @llvm.ctpop.i32(i32 %3644) #8
  %3646 = trunc i32 %3645 to i8
  %3647 = and i8 %3646, 1
  %3648 = xor i8 %3647, 1
  store i8 %3648, i8* %49, align 1, !tbaa !2446
  %3649 = xor i32 %3637, %3638
  %3650 = lshr i32 %3649, 4
  %3651 = trunc i32 %3650 to i8
  %3652 = and i8 %3651, 1
  store i8 %3652, i8* %54, align 1, !tbaa !2447
  %3653 = zext i1 %3641 to i8
  store i8 %3653, i8* %57, align 1, !tbaa !2448
  %3654 = lshr i32 %3638, 31
  %3655 = trunc i32 %3654 to i8
  store i8 %3655, i8* %60, align 1, !tbaa !2449
  %3656 = lshr i32 %3637, 31
  %3657 = xor i32 %3654, %3656
  %3658 = add nuw nsw i32 %3657, %3654
  %3659 = icmp eq i32 %3658, 2
  %3660 = zext i1 %3659 to i8
  store i8 %3660, i8* %66, align 1, !tbaa !2450
  %3661 = sext i32 %3638 to i64
  store i64 %3661, i64* %RCX, align 8, !tbaa !2428
  %3662 = shl nsw i64 %3661, 3
  %3663 = add i64 %3662, %3608
  %3664 = add i64 %4617, 133
  store i64 %3664, i64* %PC, align 8
  %3665 = load double, double* %228, align 1
  %3666 = inttoptr i64 %3663 to double*
  %3667 = load double, double* %3666, align 8
  %3668 = fadd double %3665, %3667
  store double %3668, double* %228, align 1, !tbaa !2452
  %3669 = add i64 %3633, 40
  %3670 = add i64 %4617, 137
  store i64 %3670, i64* %PC, align 8
  %3671 = inttoptr i64 %3669 to i64*
  %3672 = load i64, i64* %3671, align 8
  store i64 %3672, i64* %RAX, align 8, !tbaa !2428
  %3673 = add i64 %3633, -100
  %3674 = add i64 %4617, 141
  store i64 %3674, i64* %PC, align 8
  %3675 = inttoptr i64 %3673 to i32*
  %3676 = load i32, i32* %3675, align 4
  %3677 = sext i32 %3676 to i64
  %3678 = mul nsw i64 %3677, 33800
  store i64 %3678, i64* %RCX, align 8, !tbaa !2428
  %3679 = lshr i64 %3678, 63
  %3680 = add i64 %3678, %3672
  store i64 %3680, i64* %RAX, align 8, !tbaa !2428
  %3681 = icmp ult i64 %3680, %3672
  %3682 = icmp ult i64 %3680, %3678
  %3683 = or i1 %3681, %3682
  %3684 = zext i1 %3683 to i8
  store i8 %3684, i8* %42, align 1, !tbaa !2432
  %3685 = trunc i64 %3680 to i32
  %3686 = and i32 %3685, 255
  %3687 = tail call i32 @llvm.ctpop.i32(i32 %3686) #8
  %3688 = trunc i32 %3687 to i8
  %3689 = and i8 %3688, 1
  %3690 = xor i8 %3689, 1
  store i8 %3690, i8* %49, align 1, !tbaa !2446
  %3691 = xor i64 %3678, %3672
  %3692 = xor i64 %3691, %3680
  %3693 = lshr i64 %3692, 4
  %3694 = trunc i64 %3693 to i8
  %3695 = and i8 %3694, 1
  store i8 %3695, i8* %54, align 1, !tbaa !2447
  %3696 = icmp eq i64 %3680, 0
  %3697 = zext i1 %3696 to i8
  store i8 %3697, i8* %57, align 1, !tbaa !2448
  %3698 = lshr i64 %3680, 63
  %3699 = trunc i64 %3698 to i8
  store i8 %3699, i8* %60, align 1, !tbaa !2449
  %3700 = lshr i64 %3672, 63
  %3701 = xor i64 %3698, %3700
  %3702 = xor i64 %3698, %3679
  %3703 = add nuw nsw i64 %3701, %3702
  %3704 = icmp eq i64 %3703, 2
  %3705 = zext i1 %3704 to i8
  store i8 %3705, i8* %66, align 1, !tbaa !2450
  %3706 = add i64 %3633, -104
  %3707 = add i64 %4617, 155
  store i64 %3707, i64* %PC, align 8
  %3708 = inttoptr i64 %3706 to i32*
  %3709 = load i32, i32* %3708, align 4
  %3710 = sext i32 %3709 to i64
  %3711 = mul nsw i64 %3710, 520
  store i64 %3711, i64* %RCX, align 8, !tbaa !2428
  %3712 = lshr i64 %3711, 63
  %3713 = add i64 %3711, %3680
  store i64 %3713, i64* %RAX, align 8, !tbaa !2428
  %3714 = icmp ult i64 %3713, %3680
  %3715 = icmp ult i64 %3713, %3711
  %3716 = or i1 %3714, %3715
  %3717 = zext i1 %3716 to i8
  store i8 %3717, i8* %42, align 1, !tbaa !2432
  %3718 = trunc i64 %3713 to i32
  %3719 = and i32 %3718, 255
  %3720 = tail call i32 @llvm.ctpop.i32(i32 %3719) #8
  %3721 = trunc i32 %3720 to i8
  %3722 = and i8 %3721, 1
  %3723 = xor i8 %3722, 1
  store i8 %3723, i8* %49, align 1, !tbaa !2446
  %3724 = xor i64 %3711, %3680
  %3725 = xor i64 %3724, %3713
  %3726 = lshr i64 %3725, 4
  %3727 = trunc i64 %3726 to i8
  %3728 = and i8 %3727, 1
  store i8 %3728, i8* %54, align 1, !tbaa !2447
  %3729 = icmp eq i64 %3713, 0
  %3730 = zext i1 %3729 to i8
  store i8 %3730, i8* %57, align 1, !tbaa !2448
  %3731 = lshr i64 %3713, 63
  %3732 = trunc i64 %3731 to i8
  store i8 %3732, i8* %60, align 1, !tbaa !2449
  %3733 = xor i64 %3731, %3698
  %3734 = xor i64 %3731, %3712
  %3735 = add nuw nsw i64 %3733, %3734
  %3736 = icmp eq i64 %3735, 2
  %3737 = zext i1 %3736 to i8
  store i8 %3737, i8* %66, align 1, !tbaa !2450
  %3738 = add i64 %4617, 169
  store i64 %3738, i64* %PC, align 8
  %3739 = load i32, i32* %3636, align 4
  %3740 = sext i32 %3739 to i64
  store i64 %3740, i64* %RCX, align 8, !tbaa !2428
  %3741 = shl nsw i64 %3740, 3
  %3742 = add i64 %3741, %3713
  %3743 = add i64 %4617, 174
  store i64 %3743, i64* %PC, align 8
  %3744 = inttoptr i64 %3742 to double*
  %3745 = load double, double* %3744, align 8
  %3746 = fsub double %3668, %3745
  store double %3746, double* %228, align 1, !tbaa !2452
  %3747 = add i64 %3633, -96
  %3748 = add i64 %4617, 178
  store i64 %3748, i64* %PC, align 8
  %3749 = inttoptr i64 %3747 to i64*
  %3750 = load i64, i64* %3749, align 8
  store i64 %3750, i64* %RAX, align 8, !tbaa !2428
  %3751 = add i64 %4617, 182
  store i64 %3751, i64* %PC, align 8
  %3752 = load i32, i32* %3675, align 4
  %3753 = sext i32 %3752 to i64
  %3754 = mul nsw i64 %3753, 520
  store i64 %3754, i64* %RCX, align 8, !tbaa !2428
  %3755 = lshr i64 %3754, 63
  %3756 = add i64 %3754, %3750
  store i64 %3756, i64* %RAX, align 8, !tbaa !2428
  %3757 = icmp ult i64 %3756, %3750
  %3758 = icmp ult i64 %3756, %3754
  %3759 = or i1 %3757, %3758
  %3760 = zext i1 %3759 to i8
  store i8 %3760, i8* %42, align 1, !tbaa !2432
  %3761 = trunc i64 %3756 to i32
  %3762 = and i32 %3761, 255
  %3763 = tail call i32 @llvm.ctpop.i32(i32 %3762) #8
  %3764 = trunc i32 %3763 to i8
  %3765 = and i8 %3764, 1
  %3766 = xor i8 %3765, 1
  store i8 %3766, i8* %49, align 1, !tbaa !2446
  %3767 = xor i64 %3754, %3750
  %3768 = xor i64 %3767, %3756
  %3769 = lshr i64 %3768, 4
  %3770 = trunc i64 %3769 to i8
  %3771 = and i8 %3770, 1
  store i8 %3771, i8* %54, align 1, !tbaa !2447
  %3772 = icmp eq i64 %3756, 0
  %3773 = zext i1 %3772 to i8
  store i8 %3773, i8* %57, align 1, !tbaa !2448
  %3774 = lshr i64 %3756, 63
  %3775 = trunc i64 %3774 to i8
  store i8 %3775, i8* %60, align 1, !tbaa !2449
  %3776 = lshr i64 %3750, 63
  %3777 = xor i64 %3774, %3776
  %3778 = xor i64 %3774, %3755
  %3779 = add nuw nsw i64 %3777, %3778
  %3780 = icmp eq i64 %3779, 2
  %3781 = zext i1 %3780 to i8
  store i8 %3781, i8* %66, align 1, !tbaa !2450
  %3782 = load i64, i64* %RBP, align 8
  %3783 = add i64 %3782, -104
  %3784 = add i64 %4617, 196
  store i64 %3784, i64* %PC, align 8
  %3785 = inttoptr i64 %3783 to i32*
  %3786 = load i32, i32* %3785, align 4
  %3787 = sext i32 %3786 to i64
  store i64 %3787, i64* %RCX, align 8, !tbaa !2428
  %3788 = shl nsw i64 %3787, 3
  %3789 = add i64 %3788, %3756
  %3790 = add i64 %4617, 201
  store i64 %3790, i64* %PC, align 8
  %3791 = inttoptr i64 %3789 to double*
  store double %3746, double* %3791, align 8
  %3792 = load i64, i64* %RBP, align 8
  %3793 = add i64 %3792, 88
  %3794 = load i64, i64* %PC, align 8
  %3795 = add i64 %3794, 4
  store i64 %3795, i64* %PC, align 8
  %3796 = inttoptr i64 %3793 to i64*
  %3797 = load i64, i64* %3796, align 8
  store i64 %3797, i64* %RAX, align 8, !tbaa !2428
  %3798 = add i64 %3792, -104
  %3799 = add i64 %3794, 8
  store i64 %3799, i64* %PC, align 8
  %3800 = inttoptr i64 %3798 to i32*
  %3801 = load i32, i32* %3800, align 4
  %3802 = sext i32 %3801 to i64
  store i64 %3802, i64* %RCX, align 8, !tbaa !2428
  %3803 = shl nsw i64 %3802, 3
  %3804 = add i64 %3803, %3797
  %3805 = add i64 %3794, 13
  store i64 %3805, i64* %PC, align 8
  %3806 = inttoptr i64 %3804 to double*
  %3807 = load double, double* %3806, align 8
  store double %3807, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %3808 = add i64 %3792, 96
  %3809 = add i64 %3794, 17
  store i64 %3809, i64* %PC, align 8
  %3810 = inttoptr i64 %3808 to i64*
  %3811 = load i64, i64* %3810, align 8
  store i64 %3811, i64* %RAX, align 8, !tbaa !2428
  %3812 = add i64 %3794, 21
  store i64 %3812, i64* %PC, align 8
  %3813 = load i32, i32* %3800, align 4
  %3814 = sext i32 %3813 to i64
  store i64 %3814, i64* %RCX, align 8, !tbaa !2428
  %3815 = shl nsw i64 %3814, 3
  %3816 = add i64 %3815, %3811
  %3817 = add i64 %3794, 26
  store i64 %3817, i64* %PC, align 8
  %3818 = inttoptr i64 %3816 to double*
  %3819 = load double, double* %3818, align 8
  %3820 = fdiv double %3807, %3819
  store double %3820, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %3821 = add i64 %3792, 24
  %3822 = add i64 %3794, 30
  store i64 %3822, i64* %PC, align 8
  %3823 = inttoptr i64 %3821 to i64*
  %3824 = load i64, i64* %3823, align 8
  store i64 %3824, i64* %RAX, align 8, !tbaa !2428
  %3825 = add i64 %3792, -100
  %3826 = add i64 %3794, 34
  store i64 %3826, i64* %PC, align 8
  %3827 = inttoptr i64 %3825 to i32*
  %3828 = load i32, i32* %3827, align 4
  %3829 = sext i32 %3828 to i64
  %3830 = mul nsw i64 %3829, 33800
  store i64 %3830, i64* %RCX, align 8, !tbaa !2428
  %3831 = lshr i64 %3830, 63
  %3832 = add i64 %3830, %3824
  store i64 %3832, i64* %RAX, align 8, !tbaa !2428
  %3833 = icmp ult i64 %3832, %3824
  %3834 = icmp ult i64 %3832, %3830
  %3835 = or i1 %3833, %3834
  %3836 = zext i1 %3835 to i8
  store i8 %3836, i8* %42, align 1, !tbaa !2432
  %3837 = trunc i64 %3832 to i32
  %3838 = and i32 %3837, 255
  %3839 = tail call i32 @llvm.ctpop.i32(i32 %3838) #8
  %3840 = trunc i32 %3839 to i8
  %3841 = and i8 %3840, 1
  %3842 = xor i8 %3841, 1
  store i8 %3842, i8* %49, align 1, !tbaa !2446
  %3843 = xor i64 %3830, %3824
  %3844 = xor i64 %3843, %3832
  %3845 = lshr i64 %3844, 4
  %3846 = trunc i64 %3845 to i8
  %3847 = and i8 %3846, 1
  store i8 %3847, i8* %54, align 1, !tbaa !2447
  %3848 = icmp eq i64 %3832, 0
  %3849 = zext i1 %3848 to i8
  store i8 %3849, i8* %57, align 1, !tbaa !2448
  %3850 = lshr i64 %3832, 63
  %3851 = trunc i64 %3850 to i8
  store i8 %3851, i8* %60, align 1, !tbaa !2449
  %3852 = lshr i64 %3824, 63
  %3853 = xor i64 %3850, %3852
  %3854 = xor i64 %3850, %3831
  %3855 = add nuw nsw i64 %3853, %3854
  %3856 = icmp eq i64 %3855, 2
  %3857 = zext i1 %3856 to i8
  store i8 %3857, i8* %66, align 1, !tbaa !2450
  %3858 = add i64 %3794, 48
  store i64 %3858, i64* %PC, align 8
  %3859 = load i32, i32* %3800, align 4
  %3860 = sext i32 %3859 to i64
  %3861 = mul nsw i64 %3860, 520
  store i64 %3861, i64* %RCX, align 8, !tbaa !2428
  %3862 = lshr i64 %3861, 63
  %3863 = add i64 %3861, %3832
  store i64 %3863, i64* %RAX, align 8, !tbaa !2428
  %3864 = icmp ult i64 %3863, %3832
  %3865 = icmp ult i64 %3863, %3861
  %3866 = or i1 %3864, %3865
  %3867 = zext i1 %3866 to i8
  store i8 %3867, i8* %42, align 1, !tbaa !2432
  %3868 = trunc i64 %3863 to i32
  %3869 = and i32 %3868, 255
  %3870 = tail call i32 @llvm.ctpop.i32(i32 %3869) #8
  %3871 = trunc i32 %3870 to i8
  %3872 = and i8 %3871, 1
  %3873 = xor i8 %3872, 1
  store i8 %3873, i8* %49, align 1, !tbaa !2446
  %3874 = xor i64 %3861, %3832
  %3875 = xor i64 %3874, %3863
  %3876 = lshr i64 %3875, 4
  %3877 = trunc i64 %3876 to i8
  %3878 = and i8 %3877, 1
  store i8 %3878, i8* %54, align 1, !tbaa !2447
  %3879 = icmp eq i64 %3863, 0
  %3880 = zext i1 %3879 to i8
  store i8 %3880, i8* %57, align 1, !tbaa !2448
  %3881 = lshr i64 %3863, 63
  %3882 = trunc i64 %3881 to i8
  store i8 %3882, i8* %60, align 1, !tbaa !2449
  %3883 = xor i64 %3881, %3850
  %3884 = xor i64 %3881, %3862
  %3885 = add nuw nsw i64 %3883, %3884
  %3886 = icmp eq i64 %3885, 2
  %3887 = zext i1 %3886 to i8
  store i8 %3887, i8* %66, align 1, !tbaa !2450
  %3888 = add i64 %3792, -108
  %3889 = add i64 %3794, 62
  store i64 %3889, i64* %PC, align 8
  %3890 = inttoptr i64 %3888 to i32*
  %3891 = load i32, i32* %3890, align 4
  %3892 = sext i32 %3891 to i64
  store i64 %3892, i64* %RCX, align 8, !tbaa !2428
  %3893 = shl nsw i64 %3892, 3
  %3894 = add i64 %3893, %3863
  %3895 = add i64 %3794, 67
  store i64 %3895, i64* %PC, align 8
  %3896 = load double, double* %228, align 1
  %3897 = inttoptr i64 %3894 to double*
  %3898 = load double, double* %3897, align 8
  %3899 = fmul double %3896, %3898
  store double %3899, double* %228, align 1, !tbaa !2452
  %3900 = add i64 %3792, -72
  %3901 = add i64 %3794, 72
  store i64 %3901, i64* %PC, align 8
  %3902 = inttoptr i64 %3900 to double*
  %3903 = load double, double* %3902, align 8
  store double %3903, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %3904 = add i64 %3794, 76
  store i64 %3904, i64* %PC, align 8
  %3905 = load i64, i64* %3810, align 8
  store i64 %3905, i64* %RAX, align 8, !tbaa !2428
  %3906 = add i64 %3794, 80
  store i64 %3906, i64* %PC, align 8
  %3907 = load i32, i32* %3800, align 4
  %3908 = sext i32 %3907 to i64
  store i64 %3908, i64* %RCX, align 8, !tbaa !2428
  %3909 = shl nsw i64 %3908, 3
  %3910 = add i64 %3909, %3905
  %3911 = add i64 %3794, 85
  store i64 %3911, i64* %PC, align 8
  %3912 = inttoptr i64 %3910 to double*
  %3913 = load double, double* %3912, align 8
  %3914 = fdiv double %3903, %3913
  store double %3914, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %3915 = load i64, i64* %RBP, align 8
  %3916 = add i64 %3915, -96
  %3917 = add i64 %3794, 89
  store i64 %3917, i64* %PC, align 8
  %3918 = inttoptr i64 %3916 to i64*
  %3919 = load i64, i64* %3918, align 8
  store i64 %3919, i64* %RAX, align 8, !tbaa !2428
  %3920 = add i64 %3915, -100
  %3921 = add i64 %3794, 93
  store i64 %3921, i64* %PC, align 8
  %3922 = inttoptr i64 %3920 to i32*
  %3923 = load i32, i32* %3922, align 4
  %3924 = sext i32 %3923 to i64
  %3925 = mul nsw i64 %3924, 520
  store i64 %3925, i64* %RCX, align 8, !tbaa !2428
  %3926 = lshr i64 %3925, 63
  %3927 = add i64 %3925, %3919
  store i64 %3927, i64* %RAX, align 8, !tbaa !2428
  %3928 = icmp ult i64 %3927, %3919
  %3929 = icmp ult i64 %3927, %3925
  %3930 = or i1 %3928, %3929
  %3931 = zext i1 %3930 to i8
  store i8 %3931, i8* %42, align 1, !tbaa !2432
  %3932 = trunc i64 %3927 to i32
  %3933 = and i32 %3932, 255
  %3934 = tail call i32 @llvm.ctpop.i32(i32 %3933) #8
  %3935 = trunc i32 %3934 to i8
  %3936 = and i8 %3935, 1
  %3937 = xor i8 %3936, 1
  store i8 %3937, i8* %49, align 1, !tbaa !2446
  %3938 = xor i64 %3925, %3919
  %3939 = xor i64 %3938, %3927
  %3940 = lshr i64 %3939, 4
  %3941 = trunc i64 %3940 to i8
  %3942 = and i8 %3941, 1
  store i8 %3942, i8* %54, align 1, !tbaa !2447
  %3943 = icmp eq i64 %3927, 0
  %3944 = zext i1 %3943 to i8
  store i8 %3944, i8* %57, align 1, !tbaa !2448
  %3945 = lshr i64 %3927, 63
  %3946 = trunc i64 %3945 to i8
  store i8 %3946, i8* %60, align 1, !tbaa !2449
  %3947 = lshr i64 %3919, 63
  %3948 = xor i64 %3945, %3947
  %3949 = xor i64 %3945, %3926
  %3950 = add nuw nsw i64 %3948, %3949
  %3951 = icmp eq i64 %3950, 2
  %3952 = zext i1 %3951 to i8
  store i8 %3952, i8* %66, align 1, !tbaa !2450
  %3953 = add i64 %3915, -104
  %3954 = add i64 %3794, 107
  store i64 %3954, i64* %PC, align 8
  %3955 = inttoptr i64 %3953 to i32*
  %3956 = load i32, i32* %3955, align 4
  %3957 = sext i32 %3956 to i64
  store i64 %3957, i64* %RCX, align 8, !tbaa !2428
  %3958 = shl nsw i64 %3957, 3
  %3959 = add i64 %3958, %3927
  %3960 = add i64 %3794, 112
  store i64 %3960, i64* %PC, align 8
  %3961 = inttoptr i64 %3959 to double*
  %3962 = load double, double* %3961, align 8
  %3963 = fmul double %3914, %3962
  store double %3963, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %3964 = fsub double %3899, %3963
  store double %3964, double* %228, align 1, !tbaa !2452
  %3965 = add i64 %3915, 16
  %3966 = add i64 %3794, 120
  store i64 %3966, i64* %PC, align 8
  %3967 = inttoptr i64 %3965 to i64*
  %3968 = load i64, i64* %3967, align 8
  store i64 %3968, i64* %RAX, align 8, !tbaa !2428
  %3969 = add i64 %3794, 124
  store i64 %3969, i64* %PC, align 8
  %3970 = load i32, i32* %3922, align 4
  %3971 = sext i32 %3970 to i64
  %3972 = mul nsw i64 %3971, 520
  store i64 %3972, i64* %RCX, align 8, !tbaa !2428
  %3973 = lshr i64 %3972, 63
  %3974 = add i64 %3972, %3968
  store i64 %3974, i64* %RAX, align 8, !tbaa !2428
  %3975 = icmp ult i64 %3974, %3968
  %3976 = icmp ult i64 %3974, %3972
  %3977 = or i1 %3975, %3976
  %3978 = zext i1 %3977 to i8
  store i8 %3978, i8* %42, align 1, !tbaa !2432
  %3979 = trunc i64 %3974 to i32
  %3980 = and i32 %3979, 255
  %3981 = tail call i32 @llvm.ctpop.i32(i32 %3980) #8
  %3982 = trunc i32 %3981 to i8
  %3983 = and i8 %3982, 1
  %3984 = xor i8 %3983, 1
  store i8 %3984, i8* %49, align 1, !tbaa !2446
  %3985 = xor i64 %3972, %3968
  %3986 = xor i64 %3985, %3974
  %3987 = lshr i64 %3986, 4
  %3988 = trunc i64 %3987 to i8
  %3989 = and i8 %3988, 1
  store i8 %3989, i8* %54, align 1, !tbaa !2447
  %3990 = icmp eq i64 %3974, 0
  %3991 = zext i1 %3990 to i8
  store i8 %3991, i8* %57, align 1, !tbaa !2448
  %3992 = lshr i64 %3974, 63
  %3993 = trunc i64 %3992 to i8
  store i8 %3993, i8* %60, align 1, !tbaa !2449
  %3994 = lshr i64 %3968, 63
  %3995 = xor i64 %3992, %3994
  %3996 = xor i64 %3992, %3973
  %3997 = add nuw nsw i64 %3995, %3996
  %3998 = icmp eq i64 %3997, 2
  %3999 = zext i1 %3998 to i8
  store i8 %3999, i8* %66, align 1, !tbaa !2450
  %4000 = add i64 %3794, 138
  store i64 %4000, i64* %PC, align 8
  %4001 = load i32, i32* %3955, align 4
  %4002 = sext i32 %4001 to i64
  store i64 %4002, i64* %RCX, align 8, !tbaa !2428
  %4003 = shl nsw i64 %4002, 3
  %4004 = add i64 %4003, %3974
  %4005 = add i64 %3794, 143
  store i64 %4005, i64* %PC, align 8
  %4006 = inttoptr i64 %4004 to double*
  store double %3964, double* %4006, align 8
  %4007 = load i64, i64* %RBP, align 8
  %4008 = add i64 %4007, 72
  %4009 = load i64, i64* %PC, align 8
  %4010 = add i64 %4009, 4
  store i64 %4010, i64* %PC, align 8
  %4011 = inttoptr i64 %4008 to i64*
  %4012 = load i64, i64* %4011, align 8
  store i64 %4012, i64* %RAX, align 8, !tbaa !2428
  %4013 = add i64 %4007, -108
  %4014 = add i64 %4009, 8
  store i64 %4014, i64* %PC, align 8
  %4015 = inttoptr i64 %4013 to i32*
  %4016 = load i32, i32* %4015, align 4
  %4017 = sext i32 %4016 to i64
  store i64 %4017, i64* %RCX, align 8, !tbaa !2428
  %4018 = shl nsw i64 %4017, 3
  %4019 = add i64 %4018, %4012
  %4020 = add i64 %4009, 13
  store i64 %4020, i64* %PC, align 8
  %4021 = inttoptr i64 %4019 to double*
  %4022 = load double, double* %4021, align 8
  store double %4022, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %4023 = add i64 %4007, 80
  %4024 = add i64 %4009, 17
  store i64 %4024, i64* %PC, align 8
  %4025 = inttoptr i64 %4023 to i64*
  %4026 = load i64, i64* %4025, align 8
  store i64 %4026, i64* %RAX, align 8, !tbaa !2428
  %4027 = add i64 %4009, 21
  store i64 %4027, i64* %PC, align 8
  %4028 = load i32, i32* %4015, align 4
  %4029 = sext i32 %4028 to i64
  store i64 %4029, i64* %RCX, align 8, !tbaa !2428
  %4030 = shl nsw i64 %4029, 3
  %4031 = add i64 %4030, %4026
  %4032 = add i64 %4009, 26
  store i64 %4032, i64* %PC, align 8
  %4033 = inttoptr i64 %4031 to double*
  %4034 = load double, double* %4033, align 8
  %4035 = fdiv double %4022, %4034
  store double %4035, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %4036 = add i64 %4007, 48
  %4037 = add i64 %4009, 30
  store i64 %4037, i64* %PC, align 8
  %4038 = inttoptr i64 %4036 to i64*
  %4039 = load i64, i64* %4038, align 8
  store i64 %4039, i64* %RAX, align 8, !tbaa !2428
  %4040 = add i64 %4007, -100
  %4041 = add i64 %4009, 34
  store i64 %4041, i64* %PC, align 8
  %4042 = inttoptr i64 %4040 to i32*
  %4043 = load i32, i32* %4042, align 4
  %4044 = sext i32 %4043 to i64
  %4045 = mul nsw i64 %4044, 33800
  store i64 %4045, i64* %RCX, align 8, !tbaa !2428
  %4046 = lshr i64 %4045, 63
  %4047 = add i64 %4045, %4039
  store i64 %4047, i64* %RAX, align 8, !tbaa !2428
  %4048 = icmp ult i64 %4047, %4039
  %4049 = icmp ult i64 %4047, %4045
  %4050 = or i1 %4048, %4049
  %4051 = zext i1 %4050 to i8
  store i8 %4051, i8* %42, align 1, !tbaa !2432
  %4052 = trunc i64 %4047 to i32
  %4053 = and i32 %4052, 255
  %4054 = tail call i32 @llvm.ctpop.i32(i32 %4053) #8
  %4055 = trunc i32 %4054 to i8
  %4056 = and i8 %4055, 1
  %4057 = xor i8 %4056, 1
  store i8 %4057, i8* %49, align 1, !tbaa !2446
  %4058 = xor i64 %4045, %4039
  %4059 = xor i64 %4058, %4047
  %4060 = lshr i64 %4059, 4
  %4061 = trunc i64 %4060 to i8
  %4062 = and i8 %4061, 1
  store i8 %4062, i8* %54, align 1, !tbaa !2447
  %4063 = icmp eq i64 %4047, 0
  %4064 = zext i1 %4063 to i8
  store i8 %4064, i8* %57, align 1, !tbaa !2448
  %4065 = lshr i64 %4047, 63
  %4066 = trunc i64 %4065 to i8
  store i8 %4066, i8* %60, align 1, !tbaa !2449
  %4067 = lshr i64 %4039, 63
  %4068 = xor i64 %4065, %4067
  %4069 = xor i64 %4065, %4046
  %4070 = add nuw nsw i64 %4068, %4069
  %4071 = icmp eq i64 %4070, 2
  %4072 = zext i1 %4071 to i8
  store i8 %4072, i8* %66, align 1, !tbaa !2450
  %4073 = add i64 %4007, -104
  %4074 = add i64 %4009, 48
  store i64 %4074, i64* %PC, align 8
  %4075 = inttoptr i64 %4073 to i32*
  %4076 = load i32, i32* %4075, align 4
  %4077 = sext i32 %4076 to i64
  %4078 = mul nsw i64 %4077, 520
  store i64 %4078, i64* %RCX, align 8, !tbaa !2428
  %4079 = lshr i64 %4078, 63
  %4080 = add i64 %4078, %4047
  store i64 %4080, i64* %RAX, align 8, !tbaa !2428
  %4081 = icmp ult i64 %4080, %4047
  %4082 = icmp ult i64 %4080, %4078
  %4083 = or i1 %4081, %4082
  %4084 = zext i1 %4083 to i8
  store i8 %4084, i8* %42, align 1, !tbaa !2432
  %4085 = trunc i64 %4080 to i32
  %4086 = and i32 %4085, 255
  %4087 = tail call i32 @llvm.ctpop.i32(i32 %4086) #8
  %4088 = trunc i32 %4087 to i8
  %4089 = and i8 %4088, 1
  %4090 = xor i8 %4089, 1
  store i8 %4090, i8* %49, align 1, !tbaa !2446
  %4091 = xor i64 %4078, %4047
  %4092 = xor i64 %4091, %4080
  %4093 = lshr i64 %4092, 4
  %4094 = trunc i64 %4093 to i8
  %4095 = and i8 %4094, 1
  store i8 %4095, i8* %54, align 1, !tbaa !2447
  %4096 = icmp eq i64 %4080, 0
  %4097 = zext i1 %4096 to i8
  store i8 %4097, i8* %57, align 1, !tbaa !2448
  %4098 = lshr i64 %4080, 63
  %4099 = trunc i64 %4098 to i8
  store i8 %4099, i8* %60, align 1, !tbaa !2449
  %4100 = xor i64 %4098, %4065
  %4101 = xor i64 %4098, %4079
  %4102 = add nuw nsw i64 %4100, %4101
  %4103 = icmp eq i64 %4102, 2
  %4104 = zext i1 %4103 to i8
  store i8 %4104, i8* %66, align 1, !tbaa !2450
  %4105 = add i64 %4009, 62
  store i64 %4105, i64* %PC, align 8
  %4106 = load i32, i32* %4015, align 4
  %4107 = sext i32 %4106 to i64
  store i64 %4107, i64* %RCX, align 8, !tbaa !2428
  %4108 = shl nsw i64 %4107, 3
  %4109 = add i64 %4108, %4080
  %4110 = add i64 %4009, 67
  store i64 %4110, i64* %PC, align 8
  %4111 = load double, double* %228, align 1
  %4112 = inttoptr i64 %4109 to double*
  %4113 = load double, double* %4112, align 8
  %4114 = fmul double %4111, %4113
  store double %4114, double* %228, align 1, !tbaa !2452
  %4115 = add i64 %4007, -64
  %4116 = add i64 %4009, 72
  store i64 %4116, i64* %PC, align 8
  %4117 = inttoptr i64 %4115 to double*
  %4118 = load double, double* %4117, align 8
  store double %4118, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %4119 = add i64 %4007, 64
  %4120 = add i64 %4009, 76
  store i64 %4120, i64* %PC, align 8
  %4121 = inttoptr i64 %4119 to i64*
  %4122 = load i64, i64* %4121, align 8
  store i64 %4122, i64* %RAX, align 8, !tbaa !2428
  %4123 = add i64 %4009, 80
  store i64 %4123, i64* %PC, align 8
  %4124 = load i32, i32* %4042, align 4
  %4125 = sext i32 %4124 to i64
  store i64 %4125, i64* %RCX, align 8, !tbaa !2428
  %4126 = shl nsw i64 %4125, 3
  %4127 = add i64 %4126, %4122
  %4128 = add i64 %4009, 85
  store i64 %4128, i64* %PC, align 8
  %4129 = inttoptr i64 %4127 to double*
  %4130 = load double, double* %4129, align 8
  %4131 = fmul double %4118, %4130
  store double %4131, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %4132 = load i64, i64* %RBP, align 8
  %4133 = add i64 %4132, 80
  %4134 = add i64 %4009, 89
  store i64 %4134, i64* %PC, align 8
  %4135 = inttoptr i64 %4133 to i64*
  %4136 = load i64, i64* %4135, align 8
  store i64 %4136, i64* %RAX, align 8, !tbaa !2428
  %4137 = add i64 %4132, -108
  %4138 = add i64 %4009, 93
  store i64 %4138, i64* %PC, align 8
  %4139 = inttoptr i64 %4137 to i32*
  %4140 = load i32, i32* %4139, align 4
  %4141 = sext i32 %4140 to i64
  store i64 %4141, i64* %RCX, align 8, !tbaa !2428
  %4142 = shl nsw i64 %4141, 3
  %4143 = add i64 %4142, %4136
  %4144 = add i64 %4009, 98
  store i64 %4144, i64* %PC, align 8
  %4145 = inttoptr i64 %4143 to double*
  %4146 = load double, double* %4145, align 8
  %4147 = fdiv double %4131, %4146
  store double %4147, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %4148 = add i64 %4132, 16
  %4149 = add i64 %4009, 102
  store i64 %4149, i64* %PC, align 8
  %4150 = inttoptr i64 %4148 to i64*
  %4151 = load i64, i64* %4150, align 8
  store i64 %4151, i64* %RAX, align 8, !tbaa !2428
  %4152 = add i64 %4132, -100
  %4153 = add i64 %4009, 106
  store i64 %4153, i64* %PC, align 8
  %4154 = inttoptr i64 %4152 to i32*
  %4155 = load i32, i32* %4154, align 4
  %4156 = sext i32 %4155 to i64
  %4157 = mul nsw i64 %4156, 520
  store i64 %4157, i64* %RCX, align 8, !tbaa !2428
  %4158 = lshr i64 %4157, 63
  %4159 = add i64 %4157, %4151
  store i64 %4159, i64* %RAX, align 8, !tbaa !2428
  %4160 = icmp ult i64 %4159, %4151
  %4161 = icmp ult i64 %4159, %4157
  %4162 = or i1 %4160, %4161
  %4163 = zext i1 %4162 to i8
  store i8 %4163, i8* %42, align 1, !tbaa !2432
  %4164 = trunc i64 %4159 to i32
  %4165 = and i32 %4164, 255
  %4166 = tail call i32 @llvm.ctpop.i32(i32 %4165) #8
  %4167 = trunc i32 %4166 to i8
  %4168 = and i8 %4167, 1
  %4169 = xor i8 %4168, 1
  store i8 %4169, i8* %49, align 1, !tbaa !2446
  %4170 = xor i64 %4157, %4151
  %4171 = xor i64 %4170, %4159
  %4172 = lshr i64 %4171, 4
  %4173 = trunc i64 %4172 to i8
  %4174 = and i8 %4173, 1
  store i8 %4174, i8* %54, align 1, !tbaa !2447
  %4175 = icmp eq i64 %4159, 0
  %4176 = zext i1 %4175 to i8
  store i8 %4176, i8* %57, align 1, !tbaa !2448
  %4177 = lshr i64 %4159, 63
  %4178 = trunc i64 %4177 to i8
  store i8 %4178, i8* %60, align 1, !tbaa !2449
  %4179 = lshr i64 %4151, 63
  %4180 = xor i64 %4177, %4179
  %4181 = xor i64 %4177, %4158
  %4182 = add nuw nsw i64 %4180, %4181
  %4183 = icmp eq i64 %4182, 2
  %4184 = zext i1 %4183 to i8
  store i8 %4184, i8* %66, align 1, !tbaa !2450
  %4185 = add i64 %4132, -104
  %4186 = add i64 %4009, 120
  store i64 %4186, i64* %PC, align 8
  %4187 = inttoptr i64 %4185 to i32*
  %4188 = load i32, i32* %4187, align 4
  %4189 = sext i32 %4188 to i64
  store i64 %4189, i64* %RCX, align 8, !tbaa !2428
  %4190 = shl nsw i64 %4189, 3
  %4191 = add i64 %4190, %4159
  %4192 = add i64 %4009, 125
  store i64 %4192, i64* %PC, align 8
  %4193 = inttoptr i64 %4191 to double*
  %4194 = load double, double* %4193, align 8
  %4195 = fmul double %4147, %4194
  store double %4195, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %4196 = load double, double* %228, align 1
  %4197 = fadd double %4196, %4195
  store double %4197, double* %228, align 1, !tbaa !2452
  %4198 = add i64 %4132, -64
  %4199 = add i64 %4009, 134
  store i64 %4199, i64* %PC, align 8
  %4200 = inttoptr i64 %4198 to double*
  %4201 = load double, double* %4200, align 8
  store double %4201, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %4202 = add i64 %4132, 56
  %4203 = add i64 %4009, 138
  store i64 %4203, i64* %PC, align 8
  %4204 = inttoptr i64 %4202 to i64*
  %4205 = load i64, i64* %4204, align 8
  store i64 %4205, i64* %RAX, align 8, !tbaa !2428
  %4206 = add i64 %4009, 142
  store i64 %4206, i64* %PC, align 8
  %4207 = load i32, i32* %4154, align 4
  %4208 = sext i32 %4207 to i64
  store i64 %4208, i64* %RCX, align 8, !tbaa !2428
  %4209 = shl nsw i64 %4208, 3
  %4210 = add i64 %4209, %4205
  %4211 = add i64 %4009, 147
  store i64 %4211, i64* %PC, align 8
  %4212 = inttoptr i64 %4210 to double*
  %4213 = load double, double* %4212, align 8
  %4214 = fmul double %4201, %4213
  store double %4214, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %4215 = add i64 %4009, 151
  store i64 %4215, i64* %PC, align 8
  %4216 = load i64, i64* %4135, align 8
  store i64 %4216, i64* %RAX, align 8, !tbaa !2428
  %4217 = add i64 %4009, 155
  store i64 %4217, i64* %PC, align 8
  %4218 = load i32, i32* %4139, align 4
  %4219 = sext i32 %4218 to i64
  store i64 %4219, i64* %RCX, align 8, !tbaa !2428
  %4220 = shl nsw i64 %4219, 3
  %4221 = add i64 %4220, %4216
  %4222 = add i64 %4009, 160
  store i64 %4222, i64* %PC, align 8
  %4223 = inttoptr i64 %4221 to double*
  %4224 = load double, double* %4223, align 8
  %4225 = fdiv double %4214, %4224
  store double %4225, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %4226 = add i64 %4132, 24
  %4227 = add i64 %4009, 164
  store i64 %4227, i64* %PC, align 8
  %4228 = inttoptr i64 %4226 to i64*
  %4229 = load i64, i64* %4228, align 8
  store i64 %4229, i64* %RAX, align 8, !tbaa !2428
  %4230 = add i64 %4009, 168
  store i64 %4230, i64* %PC, align 8
  %4231 = load i32, i32* %4154, align 4
  %4232 = sext i32 %4231 to i64
  %4233 = mul nsw i64 %4232, 33800
  store i64 %4233, i64* %RCX, align 8, !tbaa !2428
  %4234 = lshr i64 %4233, 63
  %4235 = add i64 %4233, %4229
  store i64 %4235, i64* %RAX, align 8, !tbaa !2428
  %4236 = icmp ult i64 %4235, %4229
  %4237 = icmp ult i64 %4235, %4233
  %4238 = or i1 %4236, %4237
  %4239 = zext i1 %4238 to i8
  store i8 %4239, i8* %42, align 1, !tbaa !2432
  %4240 = trunc i64 %4235 to i32
  %4241 = and i32 %4240, 255
  %4242 = tail call i32 @llvm.ctpop.i32(i32 %4241) #8
  %4243 = trunc i32 %4242 to i8
  %4244 = and i8 %4243, 1
  %4245 = xor i8 %4244, 1
  store i8 %4245, i8* %49, align 1, !tbaa !2446
  %4246 = xor i64 %4233, %4229
  %4247 = xor i64 %4246, %4235
  %4248 = lshr i64 %4247, 4
  %4249 = trunc i64 %4248 to i8
  %4250 = and i8 %4249, 1
  store i8 %4250, i8* %54, align 1, !tbaa !2447
  %4251 = icmp eq i64 %4235, 0
  %4252 = zext i1 %4251 to i8
  store i8 %4252, i8* %57, align 1, !tbaa !2448
  %4253 = lshr i64 %4235, 63
  %4254 = trunc i64 %4253 to i8
  store i8 %4254, i8* %60, align 1, !tbaa !2449
  %4255 = lshr i64 %4229, 63
  %4256 = xor i64 %4253, %4255
  %4257 = xor i64 %4253, %4234
  %4258 = add nuw nsw i64 %4256, %4257
  %4259 = icmp eq i64 %4258, 2
  %4260 = zext i1 %4259 to i8
  store i8 %4260, i8* %66, align 1, !tbaa !2450
  %4261 = load i64, i64* %RBP, align 8
  %4262 = add i64 %4261, -104
  %4263 = add i64 %4009, 182
  store i64 %4263, i64* %PC, align 8
  %4264 = inttoptr i64 %4262 to i32*
  %4265 = load i32, i32* %4264, align 4
  %4266 = sext i32 %4265 to i64
  %4267 = mul nsw i64 %4266, 520
  store i64 %4267, i64* %RCX, align 8, !tbaa !2428
  %4268 = lshr i64 %4267, 63
  %4269 = add i64 %4267, %4235
  store i64 %4269, i64* %RAX, align 8, !tbaa !2428
  %4270 = icmp ult i64 %4269, %4235
  %4271 = icmp ult i64 %4269, %4267
  %4272 = or i1 %4270, %4271
  %4273 = zext i1 %4272 to i8
  store i8 %4273, i8* %42, align 1, !tbaa !2432
  %4274 = trunc i64 %4269 to i32
  %4275 = and i32 %4274, 255
  %4276 = tail call i32 @llvm.ctpop.i32(i32 %4275) #8
  %4277 = trunc i32 %4276 to i8
  %4278 = and i8 %4277, 1
  %4279 = xor i8 %4278, 1
  store i8 %4279, i8* %49, align 1, !tbaa !2446
  %4280 = xor i64 %4267, %4235
  %4281 = xor i64 %4280, %4269
  %4282 = lshr i64 %4281, 4
  %4283 = trunc i64 %4282 to i8
  %4284 = and i8 %4283, 1
  store i8 %4284, i8* %54, align 1, !tbaa !2447
  %4285 = icmp eq i64 %4269, 0
  %4286 = zext i1 %4285 to i8
  store i8 %4286, i8* %57, align 1, !tbaa !2448
  %4287 = lshr i64 %4269, 63
  %4288 = trunc i64 %4287 to i8
  store i8 %4288, i8* %60, align 1, !tbaa !2449
  %4289 = xor i64 %4287, %4253
  %4290 = xor i64 %4287, %4268
  %4291 = add nuw nsw i64 %4289, %4290
  %4292 = icmp eq i64 %4291, 2
  %4293 = zext i1 %4292 to i8
  store i8 %4293, i8* %66, align 1, !tbaa !2450
  %4294 = add i64 %4261, -108
  %4295 = add i64 %4009, 196
  store i64 %4295, i64* %PC, align 8
  %4296 = inttoptr i64 %4294 to i32*
  %4297 = load i32, i32* %4296, align 4
  %4298 = sext i32 %4297 to i64
  store i64 %4298, i64* %RCX, align 8, !tbaa !2428
  %4299 = shl nsw i64 %4298, 3
  %4300 = add i64 %4299, %4269
  %4301 = add i64 %4009, 201
  store i64 %4301, i64* %PC, align 8
  %4302 = load double, double* %231, align 1
  %4303 = inttoptr i64 %4300 to double*
  %4304 = load double, double* %4303, align 8
  %4305 = fmul double %4302, %4304
  store double %4305, double* %231, align 1, !tbaa !2452
  %4306 = load double, double* %228, align 1
  %4307 = fsub double %4306, %4305
  store double %4307, double* %228, align 1, !tbaa !2452
  %4308 = add i64 %4261, 48
  %4309 = add i64 %4009, 209
  store i64 %4309, i64* %PC, align 8
  %4310 = inttoptr i64 %4308 to i64*
  %4311 = load i64, i64* %4310, align 8
  store i64 %4311, i64* %RAX, align 8, !tbaa !2428
  %4312 = add i64 %4261, -100
  %4313 = add i64 %4009, 213
  store i64 %4313, i64* %PC, align 8
  %4314 = inttoptr i64 %4312 to i32*
  %4315 = load i32, i32* %4314, align 4
  %4316 = sext i32 %4315 to i64
  %4317 = mul nsw i64 %4316, 33800
  store i64 %4317, i64* %RCX, align 8, !tbaa !2428
  %4318 = lshr i64 %4317, 63
  %4319 = add i64 %4317, %4311
  store i64 %4319, i64* %RAX, align 8, !tbaa !2428
  %4320 = icmp ult i64 %4319, %4311
  %4321 = icmp ult i64 %4319, %4317
  %4322 = or i1 %4320, %4321
  %4323 = zext i1 %4322 to i8
  store i8 %4323, i8* %42, align 1, !tbaa !2432
  %4324 = trunc i64 %4319 to i32
  %4325 = and i32 %4324, 255
  %4326 = tail call i32 @llvm.ctpop.i32(i32 %4325) #8
  %4327 = trunc i32 %4326 to i8
  %4328 = and i8 %4327, 1
  %4329 = xor i8 %4328, 1
  store i8 %4329, i8* %49, align 1, !tbaa !2446
  %4330 = xor i64 %4317, %4311
  %4331 = xor i64 %4330, %4319
  %4332 = lshr i64 %4331, 4
  %4333 = trunc i64 %4332 to i8
  %4334 = and i8 %4333, 1
  store i8 %4334, i8* %54, align 1, !tbaa !2447
  %4335 = icmp eq i64 %4319, 0
  %4336 = zext i1 %4335 to i8
  store i8 %4336, i8* %57, align 1, !tbaa !2448
  %4337 = lshr i64 %4319, 63
  %4338 = trunc i64 %4337 to i8
  store i8 %4338, i8* %60, align 1, !tbaa !2449
  %4339 = lshr i64 %4311, 63
  %4340 = xor i64 %4337, %4339
  %4341 = xor i64 %4337, %4318
  %4342 = add nuw nsw i64 %4340, %4341
  %4343 = icmp eq i64 %4342, 2
  %4344 = zext i1 %4343 to i8
  store i8 %4344, i8* %66, align 1, !tbaa !2450
  %4345 = load i64, i64* %RBP, align 8
  %4346 = add i64 %4345, -104
  %4347 = add i64 %4009, 227
  store i64 %4347, i64* %PC, align 8
  %4348 = inttoptr i64 %4346 to i32*
  %4349 = load i32, i32* %4348, align 4
  %4350 = sext i32 %4349 to i64
  %4351 = mul nsw i64 %4350, 520
  store i64 %4351, i64* %RCX, align 8, !tbaa !2428
  %4352 = lshr i64 %4351, 63
  %4353 = add i64 %4351, %4319
  store i64 %4353, i64* %RAX, align 8, !tbaa !2428
  %4354 = icmp ult i64 %4353, %4319
  %4355 = icmp ult i64 %4353, %4351
  %4356 = or i1 %4354, %4355
  %4357 = zext i1 %4356 to i8
  store i8 %4357, i8* %42, align 1, !tbaa !2432
  %4358 = trunc i64 %4353 to i32
  %4359 = and i32 %4358, 255
  %4360 = tail call i32 @llvm.ctpop.i32(i32 %4359) #8
  %4361 = trunc i32 %4360 to i8
  %4362 = and i8 %4361, 1
  %4363 = xor i8 %4362, 1
  store i8 %4363, i8* %49, align 1, !tbaa !2446
  %4364 = xor i64 %4351, %4319
  %4365 = xor i64 %4364, %4353
  %4366 = lshr i64 %4365, 4
  %4367 = trunc i64 %4366 to i8
  %4368 = and i8 %4367, 1
  store i8 %4368, i8* %54, align 1, !tbaa !2447
  %4369 = icmp eq i64 %4353, 0
  %4370 = zext i1 %4369 to i8
  store i8 %4370, i8* %57, align 1, !tbaa !2448
  %4371 = lshr i64 %4353, 63
  %4372 = trunc i64 %4371 to i8
  store i8 %4372, i8* %60, align 1, !tbaa !2449
  %4373 = xor i64 %4371, %4337
  %4374 = xor i64 %4371, %4352
  %4375 = add nuw nsw i64 %4373, %4374
  %4376 = icmp eq i64 %4375, 2
  %4377 = zext i1 %4376 to i8
  store i8 %4377, i8* %66, align 1, !tbaa !2450
  %4378 = add i64 %4345, -108
  %4379 = add i64 %4009, 241
  store i64 %4379, i64* %PC, align 8
  %4380 = inttoptr i64 %4378 to i32*
  %4381 = load i32, i32* %4380, align 4
  %4382 = sext i32 %4381 to i64
  store i64 %4382, i64* %RCX, align 8, !tbaa !2428
  %4383 = shl nsw i64 %4382, 3
  %4384 = add i64 %4383, %4353
  %4385 = add i64 %4009, 246
  store i64 %4385, i64* %PC, align 8
  %4386 = load i64, i64* %147, align 1
  %4387 = inttoptr i64 %4384 to i64*
  store i64 %4386, i64* %4387, align 8
  %4388 = load i64, i64* %RBP, align 8
  %4389 = add i64 %4388, 16
  %4390 = load i64, i64* %PC, align 8
  %4391 = add i64 %4390, 4
  store i64 %4391, i64* %PC, align 8
  %4392 = inttoptr i64 %4389 to i64*
  %4393 = load i64, i64* %4392, align 8
  store i64 %4393, i64* %RAX, align 8, !tbaa !2428
  %4394 = add i64 %4388, -100
  %4395 = add i64 %4390, 8
  store i64 %4395, i64* %PC, align 8
  %4396 = inttoptr i64 %4394 to i32*
  %4397 = load i32, i32* %4396, align 4
  %4398 = sext i32 %4397 to i64
  %4399 = mul nsw i64 %4398, 520
  store i64 %4399, i64* %RCX, align 8, !tbaa !2428
  %4400 = lshr i64 %4399, 63
  %4401 = add i64 %4399, %4393
  store i64 %4401, i64* %RAX, align 8, !tbaa !2428
  %4402 = icmp ult i64 %4401, %4393
  %4403 = icmp ult i64 %4401, %4399
  %4404 = or i1 %4402, %4403
  %4405 = zext i1 %4404 to i8
  store i8 %4405, i8* %42, align 1, !tbaa !2432
  %4406 = trunc i64 %4401 to i32
  %4407 = and i32 %4406, 255
  %4408 = tail call i32 @llvm.ctpop.i32(i32 %4407) #8
  %4409 = trunc i32 %4408 to i8
  %4410 = and i8 %4409, 1
  %4411 = xor i8 %4410, 1
  store i8 %4411, i8* %49, align 1, !tbaa !2446
  %4412 = xor i64 %4399, %4393
  %4413 = xor i64 %4412, %4401
  %4414 = lshr i64 %4413, 4
  %4415 = trunc i64 %4414 to i8
  %4416 = and i8 %4415, 1
  store i8 %4416, i8* %54, align 1, !tbaa !2447
  %4417 = icmp eq i64 %4401, 0
  %4418 = zext i1 %4417 to i8
  store i8 %4418, i8* %57, align 1, !tbaa !2448
  %4419 = lshr i64 %4401, 63
  %4420 = trunc i64 %4419 to i8
  store i8 %4420, i8* %60, align 1, !tbaa !2449
  %4421 = lshr i64 %4393, 63
  %4422 = xor i64 %4419, %4421
  %4423 = xor i64 %4419, %4400
  %4424 = add nuw nsw i64 %4422, %4423
  %4425 = icmp eq i64 %4424, 2
  %4426 = zext i1 %4425 to i8
  store i8 %4426, i8* %66, align 1, !tbaa !2450
  %4427 = add i64 %4388, -104
  %4428 = add i64 %4390, 22
  store i64 %4428, i64* %PC, align 8
  %4429 = inttoptr i64 %4427 to i32*
  %4430 = load i32, i32* %4429, align 4
  %4431 = sext i32 %4430 to i64
  store i64 %4431, i64* %RCX, align 8, !tbaa !2428
  %4432 = shl nsw i64 %4431, 3
  %4433 = add i64 %4432, %4401
  %4434 = add i64 %4390, 27
  store i64 %4434, i64* %PC, align 8
  %4435 = inttoptr i64 %4433 to i64*
  %4436 = load i64, i64* %4435, align 8
  store i64 %4436, i64* %147, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %4437 = add i64 %4388, 24
  %4438 = add i64 %4390, 31
  store i64 %4438, i64* %PC, align 8
  %4439 = inttoptr i64 %4437 to i64*
  %4440 = load i64, i64* %4439, align 8
  store i64 %4440, i64* %RAX, align 8, !tbaa !2428
  %4441 = add i64 %4390, 35
  store i64 %4441, i64* %PC, align 8
  %4442 = load i32, i32* %4396, align 4
  %4443 = sext i32 %4442 to i64
  %4444 = mul nsw i64 %4443, 33800
  store i64 %4444, i64* %RCX, align 8, !tbaa !2428
  %4445 = lshr i64 %4444, 63
  %4446 = add i64 %4444, %4440
  store i64 %4446, i64* %RAX, align 8, !tbaa !2428
  %4447 = icmp ult i64 %4446, %4440
  %4448 = icmp ult i64 %4446, %4444
  %4449 = or i1 %4447, %4448
  %4450 = zext i1 %4449 to i8
  store i8 %4450, i8* %42, align 1, !tbaa !2432
  %4451 = trunc i64 %4446 to i32
  %4452 = and i32 %4451, 255
  %4453 = tail call i32 @llvm.ctpop.i32(i32 %4452) #8
  %4454 = trunc i32 %4453 to i8
  %4455 = and i8 %4454, 1
  %4456 = xor i8 %4455, 1
  store i8 %4456, i8* %49, align 1, !tbaa !2446
  %4457 = xor i64 %4444, %4440
  %4458 = xor i64 %4457, %4446
  %4459 = lshr i64 %4458, 4
  %4460 = trunc i64 %4459 to i8
  %4461 = and i8 %4460, 1
  store i8 %4461, i8* %54, align 1, !tbaa !2447
  %4462 = icmp eq i64 %4446, 0
  %4463 = zext i1 %4462 to i8
  store i8 %4463, i8* %57, align 1, !tbaa !2448
  %4464 = lshr i64 %4446, 63
  %4465 = trunc i64 %4464 to i8
  store i8 %4465, i8* %60, align 1, !tbaa !2449
  %4466 = lshr i64 %4440, 63
  %4467 = xor i64 %4464, %4466
  %4468 = xor i64 %4464, %4445
  %4469 = add nuw nsw i64 %4467, %4468
  %4470 = icmp eq i64 %4469, 2
  %4471 = zext i1 %4470 to i8
  store i8 %4471, i8* %66, align 1, !tbaa !2450
  %4472 = load i64, i64* %RBP, align 8
  %4473 = add i64 %4472, -104
  %4474 = add i64 %4390, 49
  store i64 %4474, i64* %PC, align 8
  %4475 = inttoptr i64 %4473 to i32*
  %4476 = load i32, i32* %4475, align 4
  %4477 = sext i32 %4476 to i64
  %4478 = mul nsw i64 %4477, 520
  store i64 %4478, i64* %RCX, align 8, !tbaa !2428
  %4479 = lshr i64 %4478, 63
  %4480 = add i64 %4478, %4446
  store i64 %4480, i64* %RAX, align 8, !tbaa !2428
  %4481 = icmp ult i64 %4480, %4446
  %4482 = icmp ult i64 %4480, %4478
  %4483 = or i1 %4481, %4482
  %4484 = zext i1 %4483 to i8
  store i8 %4484, i8* %42, align 1, !tbaa !2432
  %4485 = trunc i64 %4480 to i32
  %4486 = and i32 %4485, 255
  %4487 = tail call i32 @llvm.ctpop.i32(i32 %4486) #8
  %4488 = trunc i32 %4487 to i8
  %4489 = and i8 %4488, 1
  %4490 = xor i8 %4489, 1
  store i8 %4490, i8* %49, align 1, !tbaa !2446
  %4491 = xor i64 %4478, %4446
  %4492 = xor i64 %4491, %4480
  %4493 = lshr i64 %4492, 4
  %4494 = trunc i64 %4493 to i8
  %4495 = and i8 %4494, 1
  store i8 %4495, i8* %54, align 1, !tbaa !2447
  %4496 = icmp eq i64 %4480, 0
  %4497 = zext i1 %4496 to i8
  store i8 %4497, i8* %57, align 1, !tbaa !2448
  %4498 = lshr i64 %4480, 63
  %4499 = trunc i64 %4498 to i8
  store i8 %4499, i8* %60, align 1, !tbaa !2449
  %4500 = xor i64 %4498, %4464
  %4501 = xor i64 %4498, %4479
  %4502 = add nuw nsw i64 %4500, %4501
  %4503 = icmp eq i64 %4502, 2
  %4504 = zext i1 %4503 to i8
  store i8 %4504, i8* %66, align 1, !tbaa !2450
  %4505 = add i64 %4472, -108
  %4506 = add i64 %4390, 63
  store i64 %4506, i64* %PC, align 8
  %4507 = inttoptr i64 %4505 to i32*
  %4508 = load i32, i32* %4507, align 4
  %4509 = sext i32 %4508 to i64
  store i64 %4509, i64* %RCX, align 8, !tbaa !2428
  %4510 = shl nsw i64 %4509, 3
  %4511 = add i64 %4510, %4480
  %4512 = add i64 %4390, 68
  store i64 %4512, i64* %PC, align 8
  %4513 = load i64, i64* %147, align 1
  %4514 = inttoptr i64 %4511 to i64*
  store i64 %4513, i64* %4514, align 8
  %4515 = load i64, i64* %RBP, align 8
  %4516 = add i64 %4515, -108
  %4517 = load i64, i64* %PC, align 8
  %4518 = add i64 %4517, 3
  store i64 %4518, i64* %PC, align 8
  %4519 = inttoptr i64 %4516 to i32*
  %4520 = load i32, i32* %4519, align 4
  %4521 = add i32 %4520, 1
  %4522 = zext i32 %4521 to i64
  store i64 %4522, i64* %RAX, align 8, !tbaa !2428
  %4523 = icmp eq i32 %4520, -1
  %4524 = icmp eq i32 %4521, 0
  %4525 = or i1 %4523, %4524
  %4526 = zext i1 %4525 to i8
  store i8 %4526, i8* %42, align 1, !tbaa !2432
  %4527 = and i32 %4521, 255
  %4528 = tail call i32 @llvm.ctpop.i32(i32 %4527) #8
  %4529 = trunc i32 %4528 to i8
  %4530 = and i8 %4529, 1
  %4531 = xor i8 %4530, 1
  store i8 %4531, i8* %49, align 1, !tbaa !2446
  %4532 = xor i32 %4520, %4521
  %4533 = lshr i32 %4532, 4
  %4534 = trunc i32 %4533 to i8
  %4535 = and i8 %4534, 1
  store i8 %4535, i8* %54, align 1, !tbaa !2447
  %4536 = zext i1 %4524 to i8
  store i8 %4536, i8* %57, align 1, !tbaa !2448
  %4537 = lshr i32 %4521, 31
  %4538 = trunc i32 %4537 to i8
  store i8 %4538, i8* %60, align 1, !tbaa !2449
  %4539 = lshr i32 %4520, 31
  %4540 = xor i32 %4537, %4539
  %4541 = add nuw nsw i32 %4540, %4537
  %4542 = icmp eq i32 %4541, 2
  %4543 = zext i1 %4542 to i8
  store i8 %4543, i8* %66, align 1, !tbaa !2450
  %4544 = add i64 %4517, 9
  store i64 %4544, i64* %PC, align 8
  store i32 %4521, i32* %4519, align 4
  %4545 = load i64, i64* %PC, align 8
  %4546 = add i64 %4545, -679
  store i64 %4546, i64* %PC, align 8, !tbaa !2428
  br label %block_401fe0

block_401fc6:                                     ; preds = %block_401fba
  %4547 = add i64 %238, -104
  %4548 = add i64 %274, 7
  store i64 %4548, i64* %PC, align 8
  %4549 = inttoptr i64 %4547 to i32*
  store i32 0, i32* %4549, align 4
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_401fcd

block_402a25:                                     ; preds = %block_401fcd
  %4550 = add i64 %327, -100
  %4551 = add i64 %363, 8
  store i64 %4551, i64* %PC, align 8
  %4552 = inttoptr i64 %4550 to i32*
  %4553 = load i32, i32* %4552, align 4
  %4554 = add i32 %4553, 1
  %4555 = zext i32 %4554 to i64
  store i64 %4555, i64* %RAX, align 8, !tbaa !2428
  %4556 = icmp eq i32 %4553, -1
  %4557 = icmp eq i32 %4554, 0
  %4558 = or i1 %4556, %4557
  %4559 = zext i1 %4558 to i8
  store i8 %4559, i8* %42, align 1, !tbaa !2432
  %4560 = and i32 %4554, 255
  %4561 = tail call i32 @llvm.ctpop.i32(i32 %4560) #8
  %4562 = trunc i32 %4561 to i8
  %4563 = and i8 %4562, 1
  %4564 = xor i8 %4563, 1
  store i8 %4564, i8* %49, align 1, !tbaa !2446
  %4565 = xor i32 %4553, %4554
  %4566 = lshr i32 %4565, 4
  %4567 = trunc i32 %4566 to i8
  %4568 = and i8 %4567, 1
  store i8 %4568, i8* %54, align 1, !tbaa !2447
  %4569 = zext i1 %4557 to i8
  store i8 %4569, i8* %57, align 1, !tbaa !2448
  %4570 = lshr i32 %4554, 31
  %4571 = trunc i32 %4570 to i8
  store i8 %4571, i8* %60, align 1, !tbaa !2449
  %4572 = lshr i32 %4553, 31
  %4573 = xor i32 %4570, %4572
  %4574 = add nuw nsw i32 %4573, %4570
  %4575 = icmp eq i32 %4574, 2
  %4576 = zext i1 %4575 to i8
  store i8 %4576, i8* %66, align 1, !tbaa !2450
  %4577 = add i64 %363, 14
  store i64 %4577, i64* %PC, align 8
  store i32 %4554, i32* %4552, align 4
  %4578 = load i64, i64* %PC, align 8
  %4579 = add i64 %4578, -2681
  store i64 %4579, i64* %PC, align 8, !tbaa !2428
  br label %block_401fba

block_401fe0:                                     ; preds = %block_401fec, %block_401fd9
  %4580 = phi i64 [ %4546, %block_401fec ], [ %.pre3, %block_401fd9 ]
  %4581 = load i64, i64* %RBP, align 8
  %4582 = add i64 %4581, -108
  %4583 = add i64 %4580, 3
  store i64 %4583, i64* %PC, align 8
  %4584 = inttoptr i64 %4582 to i32*
  %4585 = load i32, i32* %4584, align 4
  %4586 = zext i32 %4585 to i64
  store i64 %4586, i64* %RAX, align 8, !tbaa !2428
  %4587 = add i64 %4581, -48
  %4588 = add i64 %4580, 6
  store i64 %4588, i64* %PC, align 8
  %4589 = inttoptr i64 %4587 to i32*
  %4590 = load i32, i32* %4589, align 4
  %4591 = sub i32 %4585, %4590
  %4592 = icmp ult i32 %4585, %4590
  %4593 = zext i1 %4592 to i8
  store i8 %4593, i8* %42, align 1, !tbaa !2432
  %4594 = and i32 %4591, 255
  %4595 = tail call i32 @llvm.ctpop.i32(i32 %4594) #8
  %4596 = trunc i32 %4595 to i8
  %4597 = and i8 %4596, 1
  %4598 = xor i8 %4597, 1
  store i8 %4598, i8* %49, align 1, !tbaa !2446
  %4599 = xor i32 %4590, %4585
  %4600 = xor i32 %4599, %4591
  %4601 = lshr i32 %4600, 4
  %4602 = trunc i32 %4601 to i8
  %4603 = and i8 %4602, 1
  store i8 %4603, i8* %54, align 1, !tbaa !2447
  %4604 = icmp eq i32 %4591, 0
  %4605 = zext i1 %4604 to i8
  store i8 %4605, i8* %57, align 1, !tbaa !2448
  %4606 = lshr i32 %4591, 31
  %4607 = trunc i32 %4606 to i8
  store i8 %4607, i8* %60, align 1, !tbaa !2449
  %4608 = lshr i32 %4585, 31
  %4609 = lshr i32 %4590, 31
  %4610 = xor i32 %4609, %4608
  %4611 = xor i32 %4606, %4608
  %4612 = add nuw nsw i32 %4611, %4610
  %4613 = icmp eq i32 %4612, 2
  %4614 = zext i1 %4613 to i8
  store i8 %4614, i8* %66, align 1, !tbaa !2450
  %4615 = icmp ne i8 %4607, 0
  %4616 = xor i1 %4615, %4613
  %.v6 = select i1 %4616, i64 12, i64 684
  %4617 = add i64 %4580, %.v6
  %4618 = add i64 %4581, 32
  %4619 = add i64 %4617, 4
  store i64 %4619, i64* %PC, align 8
  %4620 = inttoptr i64 %4618 to i64*
  %4621 = load i64, i64* %4620, align 8
  store i64 %4621, i64* %RAX, align 8, !tbaa !2428
  %4622 = add i64 %4581, -100
  %4623 = add i64 %4617, 8
  store i64 %4623, i64* %PC, align 8
  %4624 = inttoptr i64 %4622 to i32*
  %4625 = load i32, i32* %4624, align 4
  %4626 = sext i32 %4625 to i64
  %4627 = mul nsw i64 %4626, 33800
  store i64 %4627, i64* %RCX, align 8, !tbaa !2428
  %4628 = lshr i64 %4627, 63
  %4629 = add i64 %4627, %4621
  store i64 %4629, i64* %RAX, align 8, !tbaa !2428
  %4630 = icmp ult i64 %4629, %4621
  %4631 = icmp ult i64 %4629, %4627
  %4632 = or i1 %4630, %4631
  %4633 = zext i1 %4632 to i8
  store i8 %4633, i8* %42, align 1, !tbaa !2432
  %4634 = trunc i64 %4629 to i32
  %4635 = and i32 %4634, 255
  %4636 = tail call i32 @llvm.ctpop.i32(i32 %4635) #8
  %4637 = trunc i32 %4636 to i8
  %4638 = and i8 %4637, 1
  %4639 = xor i8 %4638, 1
  store i8 %4639, i8* %49, align 1, !tbaa !2446
  %4640 = xor i64 %4627, %4621
  %4641 = xor i64 %4640, %4629
  %4642 = lshr i64 %4641, 4
  %4643 = trunc i64 %4642 to i8
  %4644 = and i8 %4643, 1
  store i8 %4644, i8* %54, align 1, !tbaa !2447
  %4645 = icmp eq i64 %4629, 0
  %4646 = zext i1 %4645 to i8
  store i8 %4646, i8* %57, align 1, !tbaa !2448
  %4647 = lshr i64 %4629, 63
  %4648 = trunc i64 %4647 to i8
  store i8 %4648, i8* %60, align 1, !tbaa !2449
  %4649 = lshr i64 %4621, 63
  %4650 = xor i64 %4647, %4649
  %4651 = xor i64 %4647, %4628
  %4652 = add nuw nsw i64 %4650, %4651
  %4653 = icmp eq i64 %4652, 2
  %4654 = zext i1 %4653 to i8
  store i8 %4654, i8* %66, align 1, !tbaa !2450
  %4655 = add i64 %4581, -104
  %4656 = add i64 %4617, 22
  store i64 %4656, i64* %PC, align 8
  %4657 = inttoptr i64 %4655 to i32*
  %4658 = load i32, i32* %4657, align 4
  %4659 = sext i32 %4658 to i64
  %4660 = mul nsw i64 %4659, 520
  store i64 %4660, i64* %RCX, align 8, !tbaa !2428
  %4661 = lshr i64 %4660, 63
  %4662 = add i64 %4617, 32
  store i64 %4662, i64* %PC, align 8
  %4663 = add i64 %4660, %4629
  store i64 %4663, i64* %RAX, align 8, !tbaa !2428
  %4664 = icmp ult i64 %4663, %4629
  %4665 = icmp ult i64 %4663, %4660
  %4666 = or i1 %4664, %4665
  %4667 = zext i1 %4666 to i8
  store i8 %4667, i8* %42, align 1, !tbaa !2432
  %4668 = trunc i64 %4663 to i32
  %4669 = and i32 %4668, 255
  %4670 = tail call i32 @llvm.ctpop.i32(i32 %4669) #8
  %4671 = trunc i32 %4670 to i8
  %4672 = and i8 %4671, 1
  %4673 = xor i8 %4672, 1
  store i8 %4673, i8* %49, align 1, !tbaa !2446
  %4674 = xor i64 %4660, %4629
  %4675 = xor i64 %4674, %4663
  %4676 = lshr i64 %4675, 4
  %4677 = trunc i64 %4676 to i8
  %4678 = and i8 %4677, 1
  store i8 %4678, i8* %54, align 1, !tbaa !2447
  %4679 = icmp eq i64 %4663, 0
  %4680 = zext i1 %4679 to i8
  store i8 %4680, i8* %57, align 1, !tbaa !2448
  %4681 = lshr i64 %4663, 63
  %4682 = trunc i64 %4681 to i8
  store i8 %4682, i8* %60, align 1, !tbaa !2449
  %4683 = xor i64 %4681, %4647
  %4684 = xor i64 %4681, %4661
  %4685 = add nuw nsw i64 %4683, %4684
  %4686 = icmp eq i64 %4685, 2
  %4687 = zext i1 %4686 to i8
  store i8 %4687, i8* %66, align 1, !tbaa !2450
  br i1 %4616, label %block_401fec, label %block_40228c
}

; Function Attrs: noinline
define %struct.Memory* @sub_400780_polybench_timer_print(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400780:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -24
  %12 = icmp ult i64 %8, 16
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #8
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2447
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2448
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2450
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 112), i64* %RDI, align 8, !tbaa !2428
  %40 = load double, double* bitcast (%polybench_t_end_type* @polybench_t_end to double*), align 8
  %41 = bitcast %union.VectorReg* %4 to double*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %43 = load double, double* bitcast (%polybench_t_start_type* @polybench_t_start to double*), align 8
  %44 = fsub double %40, %43
  store double %44, double* %41, align 1, !tbaa !2452
  store i64 0, i64* %42, align 1, !tbaa !2452
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %45 = add i64 %10, -545
  %46 = add i64 %10, 42
  %47 = add i64 %7, -32
  %48 = inttoptr i64 %47 to i64*
  store i64 %46, i64* %48, align 8
  store i64 %47, i64* %RSP, align 8, !tbaa !2428
  store i64 %45, i64* %PC, align 8, !tbaa !2428
  %49 = tail call fastcc %struct.Memory* @ext_6040e0_printf(%struct.State* nonnull %0, %struct.Memory* %2)
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -4
  %52 = load i32, i32* %EAX, align 4
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 3
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %51 to i32*
  store i32 %52, i32* %55, align 4
  %56 = load i64, i64* %RSP, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %56, 16
  store i64 %58, i64* %RSP, align 8, !tbaa !2428
  %59 = icmp ugt i64 %56, -17
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %14, align 1, !tbaa !2432
  %61 = trunc i64 %58 to i32
  %62 = and i32 %61, 255
  %63 = tail call i32 @llvm.ctpop.i32(i32 %62) #8
  %64 = trunc i32 %63 to i8
  %65 = and i8 %64, 1
  %66 = xor i8 %65, 1
  store i8 %66, i8* %21, align 1, !tbaa !2446
  %67 = xor i64 %56, 16
  %68 = xor i64 %67, %58
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  store i8 %71, i8* %27, align 1, !tbaa !2447
  %72 = icmp eq i64 %58, 0
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %30, align 1, !tbaa !2448
  %74 = lshr i64 %58, 63
  %75 = trunc i64 %74 to i8
  store i8 %75, i8* %33, align 1, !tbaa !2449
  %76 = lshr i64 %56, 63
  %77 = xor i64 %74, %76
  %78 = add nuw nsw i64 %77, %74
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %39, align 1, !tbaa !2450
  %81 = add i64 %57, 5
  store i64 %81, i64* %PC, align 8
  %82 = add i64 %56, 24
  %83 = inttoptr i64 %58 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %RBP, align 8, !tbaa !2428
  store i64 %82, i64* %RSP, align 8, !tbaa !2428
  %85 = add i64 %57, 6
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %82 to i64*
  %87 = load i64, i64* %86, align 8
  store i64 %87, i64* %PC, align 8, !tbaa !2428
  %88 = add i64 %56, 32
  store i64 %88, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %49
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005b0__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4005b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %RBP, align 8, !tbaa !2428
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !2432
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4, align 1, !tbaa !2446
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %5, align 1, !tbaa !2448
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6, align 1, !tbaa !2449
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1, !tbaa !2450
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !2447
  %9 = load i64, i64* %RDX, align 8
  store i64 %9, i64* %R9, align 8, !tbaa !2428
  %10 = add i64 %1, 6
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, 8
  %14 = inttoptr i64 %12 to i64*
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %RSI, align 8, !tbaa !2428
  store i64 %13, i64* %RDX, align 8, !tbaa !2428
  %16 = and i64 %13, -16
  store i8 0, i8* %3, align 1, !tbaa !2432
  %17 = trunc i64 %13 to i32
  %18 = and i32 %17, 240
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #8
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  store i8 %22, i8* %4, align 1, !tbaa !2446
  %23 = icmp eq i64 %16, 0
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %5, align 1, !tbaa !2448
  %25 = lshr i64 %13, 63
  %26 = trunc i64 %25 to i8
  store i8 %26, i8* %6, align 1, !tbaa !2449
  store i8 0, i8* %7, align 1, !tbaa !2450
  store i8 0, i8* %8, align 1, !tbaa !2447
  %27 = load i64, i64* %RAX, align 8
  %28 = add i64 %1, 14
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %16, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC, align 8
  %33 = add i64 %16, -16
  %34 = inttoptr i64 %33 to i64*
  store i64 %29, i64* %34, align 16
  %35 = load i64, i64* %PC, align 8
  store i64 ptrtoint (void ()* @callback_sub_402e70___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @callback_sub_402e00___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %36 = add i64 %35, 27
  %37 = add i64 %16, -24
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38, align 8
  store i64 %37, i64* %11, align 8, !tbaa !2428
  %39 = load i64, i64* getelementptr inbounds (%seg_603ff0__got_type, %seg_603ff0__got_type* @seg_603ff0__got, i64 0, i32 0), align 8
  store i64 %39, i64* %PC, align 8, !tbaa !2428
  %40 = tail call fastcc %struct.Memory* @ext_6040b0___libc_start_main(%struct.State* nonnull %0, %struct.Memory* %2)
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 1
  store i64 %42, i64* %PC, align 8
  %43 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %42, %struct.Memory* %40)
  ret %struct.Memory* %43
}

; Function Attrs: noinline
define %struct.Memory* @sub_400690_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400690:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, -113
  store i64 %12, i64* %PC, align 8, !tbaa !2428
  %13 = tail call %struct.Memory* @sub_400620_register_tm_clones(%struct.State* nonnull %0, i64 %12, %struct.Memory* %2)
  ret %struct.Memory* %13
}

; Function Attrs: noinline
define %struct.Memory* @sub_402bf0_print_array(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402bf0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %7 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %8 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %R9 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %10 = load i64, i64* %RBP, align 8
  %11 = add i64 %1, 1
  store i64 %11, i64* %PC, align 8
  %12 = load i64, i64* %RSP, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  %16 = add i64 %12, -104
  store i64 %16, i64* %RSP, align 8, !tbaa !2428
  %17 = icmp ult i64 %13, 96
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1, !tbaa !2432
  %20 = trunc i64 %16 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) #8
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1, !tbaa !2446
  %27 = xor i64 %13, %16
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %16, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %16, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %13, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = add i64 %12, 8
  %45 = add i64 %15, 11
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %44 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RAX, align 8, !tbaa !2428
  %48 = add i64 %12, -12
  %49 = load i32, i32* %EDI, align 4
  %50 = add i64 %15, 14
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i32*
  store i32 %49, i32* %51, align 4
  %52 = load i64, i64* %RBP, align 8
  %53 = add i64 %52, -8
  %54 = load i32, i32* %ESI, align 4
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %55, 3
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %53 to i32*
  store i32 %54, i32* %57, align 4
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -12
  %60 = load i32, i32* %EDX, align 4
  %61 = load i64, i64* %PC, align 8
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %59 to i32*
  store i32 %60, i32* %63, align 4
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -24
  %66 = load i64, i64* %RCX, align 8
  %67 = load i64, i64* %PC, align 8
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %65 to i64*
  store i64 %66, i64* %69, align 8
  %70 = load i64, i64* %RBP, align 8
  %71 = add i64 %70, -32
  %72 = load i64, i64* %R8, align 8
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %71 to i64*
  store i64 %72, i64* %75, align 8
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -40
  %78 = load i64, i64* %R9, align 8
  %79 = load i64, i64* %PC, align 8
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %77 to i64*
  store i64 %78, i64* %81, align 8
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -44
  %84 = load i64, i64* %PC, align 8
  %85 = add i64 %84, 7
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %83 to i32*
  store i32 0, i32* %86, align 4
  %87 = load i64, i64* %RBP, align 8
  %88 = add i64 %87, -64
  %89 = load i64, i64* %RAX, align 8
  %90 = load i64, i64* %PC, align 8
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92, align 8
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %94 = bitcast i64* %93 to double*
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %.pre = load i64, i64* %PC, align 8
  br label %block_402c1c

block_402c3b:                                     ; preds = %block_402c2f
  %97 = add i64 %631, -52
  %98 = add i64 %667, 7
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to i32*
  store i32 0, i32* %99, align 4
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_402c42

block_402c1c:                                     ; preds = %block_402dc7, %block_402bf0
  %100 = phi i64 [ %.pre, %block_402bf0 ], [ %697, %block_402dc7 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402bf0 ], [ %MEMORY.1, %block_402dc7 ]
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -44
  %103 = add i64 %100, 3
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %102 to i32*
  %105 = load i32, i32* %104, align 4
  %106 = zext i32 %105 to i64
  store i64 %106, i64* %RAX, align 8, !tbaa !2428
  %107 = add i64 %101, -4
  %108 = add i64 %100, 6
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %107 to i32*
  %110 = load i32, i32* %109, align 4
  %111 = sub i32 %105, %110
  %112 = icmp ult i32 %105, %110
  %113 = zext i1 %112 to i8
  store i8 %113, i8* %19, align 1, !tbaa !2432
  %114 = and i32 %111, 255
  %115 = tail call i32 @llvm.ctpop.i32(i32 %114) #8
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, 1
  %118 = xor i8 %117, 1
  store i8 %118, i8* %26, align 1, !tbaa !2446
  %119 = xor i32 %110, %105
  %120 = xor i32 %119, %111
  %121 = lshr i32 %120, 4
  %122 = trunc i32 %121 to i8
  %123 = and i8 %122, 1
  store i8 %123, i8* %31, align 1, !tbaa !2447
  %124 = icmp eq i32 %111, 0
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %34, align 1, !tbaa !2448
  %126 = lshr i32 %111, 31
  %127 = trunc i32 %126 to i8
  store i8 %127, i8* %37, align 1, !tbaa !2449
  %128 = lshr i32 %105, 31
  %129 = lshr i32 %110, 31
  %130 = xor i32 %129, %128
  %131 = xor i32 %126, %128
  %132 = add nuw nsw i32 %131, %130
  %133 = icmp eq i32 %132, 2
  %134 = zext i1 %133 to i8
  store i8 %134, i8* %43, align 1, !tbaa !2450
  %135 = icmp ne i8 %127, 0
  %136 = xor i1 %135, %133
  %.demorgan = or i1 %124, %136
  %.v = select i1 %.demorgan, i64 12, i64 446
  %137 = add i64 %100, %.v
  store i64 %137, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan, label %block_402c28, label %block_402dda

block_402db4:                                     ; preds = %block_402c42
  %138 = add i64 %757, -48
  %139 = add i64 %793, 8
  store i64 %139, i64* %PC, align 8
  %140 = inttoptr i64 %138 to i32*
  %141 = load i32, i32* %140, align 4
  %142 = add i32 %141, 1
  %143 = zext i32 %142 to i64
  store i64 %143, i64* %RAX, align 8, !tbaa !2428
  %144 = icmp eq i32 %141, -1
  %145 = icmp eq i32 %142, 0
  %146 = or i1 %144, %145
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %19, align 1, !tbaa !2432
  %148 = and i32 %142, 255
  %149 = tail call i32 @llvm.ctpop.i32(i32 %148) #8
  %150 = trunc i32 %149 to i8
  %151 = and i8 %150, 1
  %152 = xor i8 %151, 1
  store i8 %152, i8* %26, align 1, !tbaa !2446
  %153 = xor i32 %141, %142
  %154 = lshr i32 %153, 4
  %155 = trunc i32 %154 to i8
  %156 = and i8 %155, 1
  store i8 %156, i8* %31, align 1, !tbaa !2447
  %157 = zext i1 %145 to i8
  store i8 %157, i8* %34, align 1, !tbaa !2448
  %158 = lshr i32 %142, 31
  %159 = trunc i32 %158 to i8
  store i8 %159, i8* %37, align 1, !tbaa !2449
  %160 = lshr i32 %141, 31
  %161 = xor i32 %158, %160
  %162 = add nuw nsw i32 %161, %158
  %163 = icmp eq i32 %162, 2
  %164 = zext i1 %163 to i8
  store i8 %164, i8* %43, align 1, !tbaa !2450
  %165 = add i64 %793, 14
  store i64 %165, i64* %PC, align 8
  store i32 %142, i32* %140, align 4
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, -403
  store i64 %167, i64* %PC, align 8, !tbaa !2428
  br label %block_402c2f

block_402c4e:                                     ; preds = %block_402c42
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %168 = load i64, i64* @stderr, align 32
  store i64 %168, i64* %RDI, align 8, !tbaa !2428
  %169 = add i64 %757, -24
  %170 = add i64 %793, 22
  store i64 %170, i64* %PC, align 8
  %171 = inttoptr i64 %169 to i64*
  %172 = load i64, i64* %171, align 8
  store i64 %172, i64* %RAX, align 8, !tbaa !2428
  %173 = add i64 %757, -44
  %174 = add i64 %793, 26
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %173 to i32*
  %176 = load i32, i32* %175, align 4
  %177 = sext i32 %176 to i64
  %178 = mul nsw i64 %177, 33800
  store i64 %178, i64* %RCX, align 8, !tbaa !2428
  %179 = lshr i64 %178, 63
  %180 = add i64 %178, %172
  store i64 %180, i64* %RAX, align 8, !tbaa !2428
  %181 = icmp ult i64 %180, %172
  %182 = icmp ult i64 %180, %178
  %183 = or i1 %181, %182
  %184 = zext i1 %183 to i8
  store i8 %184, i8* %19, align 1, !tbaa !2432
  %185 = trunc i64 %180 to i32
  %186 = and i32 %185, 255
  %187 = tail call i32 @llvm.ctpop.i32(i32 %186) #8
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %26, align 1, !tbaa !2446
  %191 = xor i64 %178, %172
  %192 = xor i64 %191, %180
  %193 = lshr i64 %192, 4
  %194 = trunc i64 %193 to i8
  %195 = and i8 %194, 1
  store i8 %195, i8* %31, align 1, !tbaa !2447
  %196 = icmp eq i64 %180, 0
  %197 = zext i1 %196 to i8
  store i8 %197, i8* %34, align 1, !tbaa !2448
  %198 = lshr i64 %180, 63
  %199 = trunc i64 %198 to i8
  store i8 %199, i8* %37, align 1, !tbaa !2449
  %200 = lshr i64 %172, 63
  %201 = xor i64 %198, %200
  %202 = xor i64 %198, %179
  %203 = add nuw nsw i64 %201, %202
  %204 = icmp eq i64 %203, 2
  %205 = zext i1 %204 to i8
  store i8 %205, i8* %43, align 1, !tbaa !2450
  %206 = add i64 %757, -48
  %207 = add i64 %793, 40
  store i64 %207, i64* %PC, align 8
  %208 = inttoptr i64 %206 to i32*
  %209 = load i32, i32* %208, align 4
  %210 = sext i32 %209 to i64
  %211 = mul nsw i64 %210, 520
  store i64 %211, i64* %RCX, align 8, !tbaa !2428
  %212 = lshr i64 %211, 63
  %213 = add i64 %211, %180
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = icmp ult i64 %213, %180
  %215 = icmp ult i64 %213, %211
  %216 = or i1 %214, %215
  %217 = zext i1 %216 to i8
  store i8 %217, i8* %19, align 1, !tbaa !2432
  %218 = trunc i64 %213 to i32
  %219 = and i32 %218, 255
  %220 = tail call i32 @llvm.ctpop.i32(i32 %219) #8
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  store i8 %223, i8* %26, align 1, !tbaa !2446
  %224 = xor i64 %211, %180
  %225 = xor i64 %224, %213
  %226 = lshr i64 %225, 4
  %227 = trunc i64 %226 to i8
  %228 = and i8 %227, 1
  store i8 %228, i8* %31, align 1, !tbaa !2447
  %229 = icmp eq i64 %213, 0
  %230 = zext i1 %229 to i8
  store i8 %230, i8* %34, align 1, !tbaa !2448
  %231 = lshr i64 %213, 63
  %232 = trunc i64 %231 to i8
  store i8 %232, i8* %37, align 1, !tbaa !2449
  %233 = xor i64 %231, %198
  %234 = xor i64 %231, %212
  %235 = add nuw nsw i64 %233, %234
  %236 = icmp eq i64 %235, 2
  %237 = zext i1 %236 to i8
  store i8 %237, i8* %43, align 1, !tbaa !2450
  %238 = add i64 %793, 54
  store i64 %238, i64* %PC, align 8
  %239 = load i32, i32* %760, align 4
  %240 = sext i32 %239 to i64
  store i64 %240, i64* %RCX, align 8, !tbaa !2428
  %241 = shl nsw i64 %240, 3
  %242 = add i64 %241, %213
  %243 = add i64 %793, 59
  store i64 %243, i64* %PC, align 8
  %244 = inttoptr i64 %242 to i64*
  %245 = load i64, i64* %244, align 8
  %246 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %245, i64* %246, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %247 = add i64 %793, -9934
  %248 = add i64 %793, 66
  %249 = load i64, i64* %RSP, align 8, !tbaa !2428
  %250 = add i64 %249, -8
  %251 = inttoptr i64 %250 to i64*
  store i64 %248, i64* %251, align 8
  store i64 %250, i64* %RSP, align 8, !tbaa !2428
  store i64 %247, i64* %PC, align 8, !tbaa !2428
  %252 = tail call fastcc %struct.Memory* @ext_6040f8_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.2)
  %253 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %254 = load i64, i64* @stderr, align 32
  store i64 %254, i64* %RDI, align 8, !tbaa !2428
  %255 = load i64, i64* %RBP, align 8
  %256 = add i64 %255, -32
  %257 = add i64 %253, 22
  store i64 %257, i64* %PC, align 8
  %258 = inttoptr i64 %256 to i64*
  %259 = load i64, i64* %258, align 8
  store i64 %259, i64* %RCX, align 8, !tbaa !2428
  %260 = add i64 %255, -44
  %261 = add i64 %253, 26
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %260 to i32*
  %263 = load i32, i32* %262, align 4
  %264 = sext i32 %263 to i64
  %265 = mul nsw i64 %264, 33800
  store i64 %265, i64* %RDX, align 8, !tbaa !2428
  %266 = lshr i64 %265, 63
  %267 = add i64 %265, %259
  store i64 %267, i64* %RCX, align 8, !tbaa !2428
  %268 = icmp ult i64 %267, %259
  %269 = icmp ult i64 %267, %265
  %270 = or i1 %268, %269
  %271 = zext i1 %270 to i8
  store i8 %271, i8* %19, align 1, !tbaa !2432
  %272 = trunc i64 %267 to i32
  %273 = and i32 %272, 255
  %274 = tail call i32 @llvm.ctpop.i32(i32 %273) #8
  %275 = trunc i32 %274 to i8
  %276 = and i8 %275, 1
  %277 = xor i8 %276, 1
  store i8 %277, i8* %26, align 1, !tbaa !2446
  %278 = xor i64 %265, %259
  %279 = xor i64 %278, %267
  %280 = lshr i64 %279, 4
  %281 = trunc i64 %280 to i8
  %282 = and i8 %281, 1
  store i8 %282, i8* %31, align 1, !tbaa !2447
  %283 = icmp eq i64 %267, 0
  %284 = zext i1 %283 to i8
  store i8 %284, i8* %34, align 1, !tbaa !2448
  %285 = lshr i64 %267, 63
  %286 = trunc i64 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %285, %287
  %289 = xor i64 %285, %266
  %290 = add nuw nsw i64 %288, %289
  %291 = icmp eq i64 %290, 2
  %292 = zext i1 %291 to i8
  store i8 %292, i8* %43, align 1, !tbaa !2450
  %293 = add i64 %255, -48
  %294 = add i64 %253, 40
  store i64 %294, i64* %PC, align 8
  %295 = inttoptr i64 %293 to i32*
  %296 = load i32, i32* %295, align 4
  %297 = sext i32 %296 to i64
  %298 = mul nsw i64 %297, 520
  store i64 %298, i64* %RDX, align 8, !tbaa !2428
  %299 = lshr i64 %298, 63
  %300 = add i64 %298, %267
  store i64 %300, i64* %RCX, align 8, !tbaa !2428
  %301 = icmp ult i64 %300, %267
  %302 = icmp ult i64 %300, %298
  %303 = or i1 %301, %302
  %304 = zext i1 %303 to i8
  store i8 %304, i8* %19, align 1, !tbaa !2432
  %305 = trunc i64 %300 to i32
  %306 = and i32 %305, 255
  %307 = tail call i32 @llvm.ctpop.i32(i32 %306) #8
  %308 = trunc i32 %307 to i8
  %309 = and i8 %308, 1
  %310 = xor i8 %309, 1
  store i8 %310, i8* %26, align 1, !tbaa !2446
  %311 = xor i64 %298, %267
  %312 = xor i64 %311, %300
  %313 = lshr i64 %312, 4
  %314 = trunc i64 %313 to i8
  %315 = and i8 %314, 1
  store i8 %315, i8* %31, align 1, !tbaa !2447
  %316 = icmp eq i64 %300, 0
  %317 = zext i1 %316 to i8
  store i8 %317, i8* %34, align 1, !tbaa !2448
  %318 = lshr i64 %300, 63
  %319 = trunc i64 %318 to i8
  store i8 %319, i8* %37, align 1, !tbaa !2449
  %320 = xor i64 %318, %285
  %321 = xor i64 %318, %299
  %322 = add nuw nsw i64 %320, %321
  %323 = icmp eq i64 %322, 2
  %324 = zext i1 %323 to i8
  store i8 %324, i8* %43, align 1, !tbaa !2450
  %325 = add i64 %255, -52
  %326 = add i64 %253, 54
  store i64 %326, i64* %PC, align 8
  %327 = inttoptr i64 %325 to i32*
  %328 = load i32, i32* %327, align 4
  %329 = sext i32 %328 to i64
  store i64 %329, i64* %RDX, align 8, !tbaa !2428
  %330 = shl nsw i64 %329, 3
  %331 = add i64 %330, %300
  %332 = add i64 %253, 59
  store i64 %332, i64* %PC, align 8
  %333 = inttoptr i64 %331 to i64*
  %334 = load i64, i64* %333, align 8
  store i64 %334, i64* %246, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %335 = add i64 %255, -68
  %336 = load i32, i32* %EAX, align 4
  %337 = add i64 %253, 62
  store i64 %337, i64* %PC, align 8
  %338 = inttoptr i64 %335 to i32*
  store i32 %336, i32* %338, align 4
  %339 = load i64, i64* %PC, align 8
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %340 = add i64 %339, -10062
  %341 = add i64 %339, 7
  %342 = load i64, i64* %RSP, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %341, i64* %344, align 8
  store i64 %343, i64* %RSP, align 8, !tbaa !2428
  store i64 %340, i64* %PC, align 8, !tbaa !2428
  %345 = tail call fastcc %struct.Memory* @ext_6040f8_fprintf(%struct.State* nonnull %0, %struct.Memory* %252)
  %346 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %347 = load i64, i64* @stderr, align 32
  store i64 %347, i64* %RDI, align 8, !tbaa !2428
  %348 = load i64, i64* %RBP, align 8
  %349 = add i64 %348, -40
  %350 = add i64 %346, 22
  store i64 %350, i64* %PC, align 8
  %351 = inttoptr i64 %349 to i64*
  %352 = load i64, i64* %351, align 8
  store i64 %352, i64* %RCX, align 8, !tbaa !2428
  %353 = add i64 %348, -44
  %354 = add i64 %346, 26
  store i64 %354, i64* %PC, align 8
  %355 = inttoptr i64 %353 to i32*
  %356 = load i32, i32* %355, align 4
  %357 = sext i32 %356 to i64
  %358 = mul nsw i64 %357, 33800
  store i64 %358, i64* %RDX, align 8, !tbaa !2428
  %359 = lshr i64 %358, 63
  %360 = add i64 %358, %352
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %352
  %362 = icmp ult i64 %360, %358
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %19, align 1, !tbaa !2432
  %365 = trunc i64 %360 to i32
  %366 = and i32 %365, 255
  %367 = tail call i32 @llvm.ctpop.i32(i32 %366) #8
  %368 = trunc i32 %367 to i8
  %369 = and i8 %368, 1
  %370 = xor i8 %369, 1
  store i8 %370, i8* %26, align 1, !tbaa !2446
  %371 = xor i64 %358, %352
  %372 = xor i64 %371, %360
  %373 = lshr i64 %372, 4
  %374 = trunc i64 %373 to i8
  %375 = and i8 %374, 1
  store i8 %375, i8* %31, align 1, !tbaa !2447
  %376 = icmp eq i64 %360, 0
  %377 = zext i1 %376 to i8
  store i8 %377, i8* %34, align 1, !tbaa !2448
  %378 = lshr i64 %360, 63
  %379 = trunc i64 %378 to i8
  store i8 %379, i8* %37, align 1, !tbaa !2449
  %380 = lshr i64 %352, 63
  %381 = xor i64 %378, %380
  %382 = xor i64 %378, %359
  %383 = add nuw nsw i64 %381, %382
  %384 = icmp eq i64 %383, 2
  %385 = zext i1 %384 to i8
  store i8 %385, i8* %43, align 1, !tbaa !2450
  %386 = add i64 %348, -48
  %387 = add i64 %346, 40
  store i64 %387, i64* %PC, align 8
  %388 = inttoptr i64 %386 to i32*
  %389 = load i32, i32* %388, align 4
  %390 = sext i32 %389 to i64
  %391 = mul nsw i64 %390, 520
  store i64 %391, i64* %RDX, align 8, !tbaa !2428
  %392 = lshr i64 %391, 63
  %393 = add i64 %391, %360
  store i64 %393, i64* %RCX, align 8, !tbaa !2428
  %394 = icmp ult i64 %393, %360
  %395 = icmp ult i64 %393, %391
  %396 = or i1 %394, %395
  %397 = zext i1 %396 to i8
  store i8 %397, i8* %19, align 1, !tbaa !2432
  %398 = trunc i64 %393 to i32
  %399 = and i32 %398, 255
  %400 = tail call i32 @llvm.ctpop.i32(i32 %399) #8
  %401 = trunc i32 %400 to i8
  %402 = and i8 %401, 1
  %403 = xor i8 %402, 1
  store i8 %403, i8* %26, align 1, !tbaa !2446
  %404 = xor i64 %391, %360
  %405 = xor i64 %404, %393
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  store i8 %408, i8* %31, align 1, !tbaa !2447
  %409 = icmp eq i64 %393, 0
  %410 = zext i1 %409 to i8
  store i8 %410, i8* %34, align 1, !tbaa !2448
  %411 = lshr i64 %393, 63
  %412 = trunc i64 %411 to i8
  store i8 %412, i8* %37, align 1, !tbaa !2449
  %413 = xor i64 %411, %378
  %414 = xor i64 %411, %392
  %415 = add nuw nsw i64 %413, %414
  %416 = icmp eq i64 %415, 2
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %43, align 1, !tbaa !2450
  %418 = add i64 %348, -52
  %419 = add i64 %346, 54
  store i64 %419, i64* %PC, align 8
  %420 = inttoptr i64 %418 to i32*
  %421 = load i32, i32* %420, align 4
  %422 = sext i32 %421 to i64
  store i64 %422, i64* %RDX, align 8, !tbaa !2428
  %423 = shl nsw i64 %422, 3
  %424 = add i64 %423, %393
  %425 = add i64 %346, 59
  store i64 %425, i64* %PC, align 8
  %426 = inttoptr i64 %424 to i64*
  %427 = load i64, i64* %426, align 8
  store i64 %427, i64* %246, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %428 = add i64 %348, -72
  %429 = load i32, i32* %EAX, align 4
  %430 = add i64 %346, 62
  store i64 %430, i64* %PC, align 8
  %431 = inttoptr i64 %428 to i32*
  store i32 %429, i32* %431, align 4
  %432 = load i64, i64* %PC, align 8
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %433 = add i64 %432, -10131
  %434 = add i64 %432, 7
  %435 = load i64, i64* %RSP, align 8, !tbaa !2428
  %436 = add i64 %435, -8
  %437 = inttoptr i64 %436 to i64*
  store i64 %434, i64* %437, align 8
  store i64 %436, i64* %RSP, align 8, !tbaa !2428
  store i64 %433, i64* %PC, align 8, !tbaa !2428
  %438 = tail call fastcc %struct.Memory* @ext_6040f8_fprintf(%struct.State* nonnull %0, %struct.Memory* %345)
  %439 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %440 = load i64, i64* @stderr, align 32
  store i64 %440, i64* %RDI, align 8, !tbaa !2428
  %441 = load i64, i64* %RBP, align 8
  %442 = add i64 %441, 16
  %443 = add i64 %439, 22
  store i64 %443, i64* %PC, align 8
  %444 = inttoptr i64 %442 to i64*
  %445 = load i64, i64* %444, align 8
  store i64 %445, i64* %RCX, align 8, !tbaa !2428
  %446 = add i64 %441, -44
  %447 = add i64 %439, 26
  store i64 %447, i64* %PC, align 8
  %448 = inttoptr i64 %446 to i32*
  %449 = load i32, i32* %448, align 4
  %450 = sext i32 %449 to i64
  %451 = mul nsw i64 %450, 33800
  store i64 %451, i64* %RDX, align 8, !tbaa !2428
  %452 = lshr i64 %451, 63
  %453 = add i64 %451, %445
  store i64 %453, i64* %RCX, align 8, !tbaa !2428
  %454 = icmp ult i64 %453, %445
  %455 = icmp ult i64 %453, %451
  %456 = or i1 %454, %455
  %457 = zext i1 %456 to i8
  store i8 %457, i8* %19, align 1, !tbaa !2432
  %458 = trunc i64 %453 to i32
  %459 = and i32 %458, 255
  %460 = tail call i32 @llvm.ctpop.i32(i32 %459) #8
  %461 = trunc i32 %460 to i8
  %462 = and i8 %461, 1
  %463 = xor i8 %462, 1
  store i8 %463, i8* %26, align 1, !tbaa !2446
  %464 = xor i64 %451, %445
  %465 = xor i64 %464, %453
  %466 = lshr i64 %465, 4
  %467 = trunc i64 %466 to i8
  %468 = and i8 %467, 1
  store i8 %468, i8* %31, align 1, !tbaa !2447
  %469 = icmp eq i64 %453, 0
  %470 = zext i1 %469 to i8
  store i8 %470, i8* %34, align 1, !tbaa !2448
  %471 = lshr i64 %453, 63
  %472 = trunc i64 %471 to i8
  store i8 %472, i8* %37, align 1, !tbaa !2449
  %473 = lshr i64 %445, 63
  %474 = xor i64 %471, %473
  %475 = xor i64 %471, %452
  %476 = add nuw nsw i64 %474, %475
  %477 = icmp eq i64 %476, 2
  %478 = zext i1 %477 to i8
  store i8 %478, i8* %43, align 1, !tbaa !2450
  %479 = add i64 %441, -48
  %480 = add i64 %439, 40
  store i64 %480, i64* %PC, align 8
  %481 = inttoptr i64 %479 to i32*
  %482 = load i32, i32* %481, align 4
  %483 = sext i32 %482 to i64
  %484 = mul nsw i64 %483, 520
  store i64 %484, i64* %RDX, align 8, !tbaa !2428
  %485 = lshr i64 %484, 63
  %486 = add i64 %484, %453
  store i64 %486, i64* %RCX, align 8, !tbaa !2428
  %487 = icmp ult i64 %486, %453
  %488 = icmp ult i64 %486, %484
  %489 = or i1 %487, %488
  %490 = zext i1 %489 to i8
  store i8 %490, i8* %19, align 1, !tbaa !2432
  %491 = trunc i64 %486 to i32
  %492 = and i32 %491, 255
  %493 = tail call i32 @llvm.ctpop.i32(i32 %492) #8
  %494 = trunc i32 %493 to i8
  %495 = and i8 %494, 1
  %496 = xor i8 %495, 1
  store i8 %496, i8* %26, align 1, !tbaa !2446
  %497 = xor i64 %484, %453
  %498 = xor i64 %497, %486
  %499 = lshr i64 %498, 4
  %500 = trunc i64 %499 to i8
  %501 = and i8 %500, 1
  store i8 %501, i8* %31, align 1, !tbaa !2447
  %502 = icmp eq i64 %486, 0
  %503 = zext i1 %502 to i8
  store i8 %503, i8* %34, align 1, !tbaa !2448
  %504 = lshr i64 %486, 63
  %505 = trunc i64 %504 to i8
  store i8 %505, i8* %37, align 1, !tbaa !2449
  %506 = xor i64 %504, %471
  %507 = xor i64 %504, %485
  %508 = add nuw nsw i64 %506, %507
  %509 = icmp eq i64 %508, 2
  %510 = zext i1 %509 to i8
  store i8 %510, i8* %43, align 1, !tbaa !2450
  %511 = add i64 %441, -52
  %512 = add i64 %439, 54
  store i64 %512, i64* %PC, align 8
  %513 = inttoptr i64 %511 to i32*
  %514 = load i32, i32* %513, align 4
  %515 = sext i32 %514 to i64
  store i64 %515, i64* %RDX, align 8, !tbaa !2428
  %516 = shl nsw i64 %515, 3
  %517 = add i64 %516, %486
  %518 = add i64 %439, 59
  store i64 %518, i64* %PC, align 8
  %519 = inttoptr i64 %517 to i64*
  %520 = load i64, i64* %519, align 8
  store i64 %520, i64* %246, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %521 = add i64 %441, -76
  %522 = load i32, i32* %EAX, align 4
  %523 = add i64 %439, 62
  store i64 %523, i64* %PC, align 8
  %524 = inttoptr i64 %521 to i32*
  store i32 %522, i32* %524, align 4
  %525 = load i64, i64* %PC, align 8
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %526 = add i64 %525, -10200
  %527 = add i64 %525, 7
  %528 = load i64, i64* %RSP, align 8, !tbaa !2428
  %529 = add i64 %528, -8
  %530 = inttoptr i64 %529 to i64*
  store i64 %527, i64* %530, align 8
  store i64 %529, i64* %RSP, align 8, !tbaa !2428
  store i64 %526, i64* %PC, align 8, !tbaa !2428
  %531 = tail call fastcc %struct.Memory* @ext_6040f8_fprintf(%struct.State* nonnull %0, %struct.Memory* %438)
  %532 = load i64, i64* %PC, align 8
  store i64 20, i64* %R8, align 8, !tbaa !2428
  %533 = load i64, i64* %RBP, align 8
  %534 = add i64 %533, -44
  %535 = add i64 %532, 10
  store i64 %535, i64* %PC, align 8
  %536 = inttoptr i64 %534 to i32*
  %537 = load i32, i32* %536, align 4
  %538 = zext i32 %537 to i64
  store i64 %538, i64* %R9, align 8, !tbaa !2428
  %539 = add i64 %533, -8
  %540 = add i64 %532, 15
  store i64 %540, i64* %PC, align 8
  %541 = inttoptr i64 %539 to i32*
  %542 = load i32, i32* %541, align 4
  %543 = sext i32 %537 to i64
  %544 = sext i32 %542 to i64
  %545 = mul nsw i64 %544, %543
  %546 = trunc i64 %545 to i32
  %547 = and i64 %545, 4294967295
  store i64 %547, i64* %R9, align 8, !tbaa !2428
  %548 = shl i64 %545, 32
  %549 = ashr exact i64 %548, 32
  %550 = icmp ne i64 %549, %545
  %551 = zext i1 %550 to i8
  store i8 %551, i8* %19, align 1, !tbaa !2432
  %552 = and i32 %546, 255
  %553 = tail call i32 @llvm.ctpop.i32(i32 %552) #8
  %554 = trunc i32 %553 to i8
  %555 = and i8 %554, 1
  %556 = xor i8 %555, 1
  store i8 %556, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2447
  store i8 0, i8* %34, align 1, !tbaa !2448
  %557 = lshr i32 %546, 31
  %558 = trunc i32 %557 to i8
  store i8 %558, i8* %37, align 1, !tbaa !2449
  store i8 %551, i8* %43, align 1, !tbaa !2450
  %559 = add i64 %533, -48
  %560 = add i64 %532, 19
  store i64 %560, i64* %PC, align 8
  %561 = inttoptr i64 %559 to i32*
  %562 = load i32, i32* %561, align 4
  %563 = add i32 %562, %546
  %564 = zext i32 %563 to i64
  store i64 %564, i64* %R9, align 8, !tbaa !2428
  %565 = icmp ult i32 %563, %546
  %566 = icmp ult i32 %563, %562
  %567 = or i1 %565, %566
  %568 = zext i1 %567 to i8
  store i8 %568, i8* %19, align 1, !tbaa !2432
  %569 = and i32 %563, 255
  %570 = tail call i32 @llvm.ctpop.i32(i32 %569) #8
  %571 = trunc i32 %570 to i8
  %572 = and i8 %571, 1
  %573 = xor i8 %572, 1
  store i8 %573, i8* %26, align 1, !tbaa !2446
  %574 = xor i32 %562, %546
  %575 = xor i32 %574, %563
  %576 = lshr i32 %575, 4
  %577 = trunc i32 %576 to i8
  %578 = and i8 %577, 1
  store i8 %578, i8* %31, align 1, !tbaa !2447
  %579 = icmp eq i32 %563, 0
  %580 = zext i1 %579 to i8
  store i8 %580, i8* %34, align 1, !tbaa !2448
  %581 = lshr i32 %563, 31
  %582 = trunc i32 %581 to i8
  store i8 %582, i8* %37, align 1, !tbaa !2449
  %583 = lshr i32 %562, 31
  %584 = xor i32 %581, %557
  %585 = xor i32 %581, %583
  %586 = add nuw nsw i32 %584, %585
  %587 = icmp eq i32 %586, 2
  %588 = zext i1 %587 to i8
  store i8 %588, i8* %43, align 1, !tbaa !2450
  %589 = add i64 %533, -80
  %590 = load i32, i32* %EAX, align 4
  %591 = add i64 %532, 22
  store i64 %591, i64* %PC, align 8
  %592 = inttoptr i64 %589 to i32*
  store i32 %590, i32* %592, align 4
  %593 = load i32, i32* %R9D, align 4
  %594 = zext i32 %593 to i64
  %595 = load i64, i64* %PC, align 8
  store i64 %594, i64* %RAX, align 8, !tbaa !2428
  %596 = sext i32 %593 to i64
  %597 = lshr i64 %596, 32
  store i64 %597, i64* %95, align 8, !tbaa !2428
  %598 = load i32, i32* %R8D, align 4
  %599 = add i64 %595, 7
  store i64 %599, i64* %PC, align 8
  %600 = sext i32 %598 to i64
  %601 = shl nuw i64 %597, 32
  %602 = or i64 %601, %594
  %603 = sdiv i64 %602, %600
  %604 = shl i64 %603, 32
  %605 = ashr exact i64 %604, 32
  %606 = icmp eq i64 %603, %605
  br i1 %606, label %609, label %607

; <label>:607:                                    ; preds = %block_402c4e
  %608 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %599, %struct.Memory* %531) #9
  %.pre3 = load i32, i32* %EDX, align 4
  %.pre4 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:609:                                    ; preds = %block_402c4e
  %610 = srem i64 %602, %600
  %611 = and i64 %603, 4294967295
  store i64 %611, i64* %96, align 8, !tbaa !2428
  %612 = and i64 %610, 4294967295
  store i64 %612, i64* %95, align 8, !tbaa !2428
  store i8 0, i8* %19, align 1, !tbaa !2432
  store i8 0, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2447
  store i8 0, i8* %34, align 1, !tbaa !2448
  store i8 0, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  %613 = trunc i64 %610 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %609, %607
  %614 = phi i64 [ %.pre4, %607 ], [ %599, %609 ]
  %615 = phi i32 [ %.pre3, %607 ], [ %613, %609 ]
  %616 = phi %struct.Memory* [ %608, %607 ], [ %531, %609 ]
  store i8 0, i8* %19, align 1, !tbaa !2432
  %617 = and i32 %615, 255
  %618 = tail call i32 @llvm.ctpop.i32(i32 %617) #8
  %619 = trunc i32 %618 to i8
  %620 = and i8 %619, 1
  %621 = xor i8 %620, 1
  store i8 %621, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2447
  %622 = icmp eq i32 %615, 0
  %623 = zext i1 %622 to i8
  store i8 %623, i8* %34, align 1, !tbaa !2448
  %624 = lshr i32 %615, 31
  %625 = trunc i32 %624 to i8
  store i8 %625, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  %.v10 = select i1 %622, i64 9, i64 37
  %626 = add i64 %614, %.v10
  store i64 %626, i64* %PC, align 8, !tbaa !2428
  br i1 %622, label %block_402d85, label %block_402da1

block_402c28:                                     ; preds = %block_402c1c
  %627 = add i64 %101, -48
  %628 = add i64 %137, 7
  store i64 %628, i64* %PC, align 8
  %629 = inttoptr i64 %627 to i32*
  store i32 0, i32* %629, align 4
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_402c2f

block_402c2f:                                     ; preds = %block_402c28, %block_402db4
  %630 = phi i64 [ %.pre1, %block_402c28 ], [ %167, %block_402db4 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_402c28 ], [ %MEMORY.2, %block_402db4 ]
  %631 = load i64, i64* %RBP, align 8
  %632 = add i64 %631, -48
  %633 = add i64 %630, 3
  store i64 %633, i64* %PC, align 8
  %634 = inttoptr i64 %632 to i32*
  %635 = load i32, i32* %634, align 4
  %636 = zext i32 %635 to i64
  store i64 %636, i64* %RAX, align 8, !tbaa !2428
  %637 = add i64 %631, -12
  %638 = add i64 %630, 6
  store i64 %638, i64* %PC, align 8
  %639 = inttoptr i64 %637 to i32*
  %640 = load i32, i32* %639, align 4
  %641 = sub i32 %635, %640
  %642 = icmp ult i32 %635, %640
  %643 = zext i1 %642 to i8
  store i8 %643, i8* %19, align 1, !tbaa !2432
  %644 = and i32 %641, 255
  %645 = tail call i32 @llvm.ctpop.i32(i32 %644) #8
  %646 = trunc i32 %645 to i8
  %647 = and i8 %646, 1
  %648 = xor i8 %647, 1
  store i8 %648, i8* %26, align 1, !tbaa !2446
  %649 = xor i32 %640, %635
  %650 = xor i32 %649, %641
  %651 = lshr i32 %650, 4
  %652 = trunc i32 %651 to i8
  %653 = and i8 %652, 1
  store i8 %653, i8* %31, align 1, !tbaa !2447
  %654 = icmp eq i32 %641, 0
  %655 = zext i1 %654 to i8
  store i8 %655, i8* %34, align 1, !tbaa !2448
  %656 = lshr i32 %641, 31
  %657 = trunc i32 %656 to i8
  store i8 %657, i8* %37, align 1, !tbaa !2449
  %658 = lshr i32 %635, 31
  %659 = lshr i32 %640, 31
  %660 = xor i32 %659, %658
  %661 = xor i32 %656, %658
  %662 = add nuw nsw i32 %661, %660
  %663 = icmp eq i32 %662, 2
  %664 = zext i1 %663 to i8
  store i8 %664, i8* %43, align 1, !tbaa !2450
  %665 = icmp ne i8 %657, 0
  %666 = xor i1 %665, %663
  %.demorgan6 = or i1 %654, %666
  %.v7 = select i1 %.demorgan6, i64 12, i64 408
  %667 = add i64 %630, %.v7
  store i64 %667, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan6, label %block_402c3b, label %block_402dc7

block_402dc7:                                     ; preds = %block_402c2f
  %668 = add i64 %631, -44
  %669 = add i64 %667, 8
  store i64 %669, i64* %PC, align 8
  %670 = inttoptr i64 %668 to i32*
  %671 = load i32, i32* %670, align 4
  %672 = add i32 %671, 1
  %673 = zext i32 %672 to i64
  store i64 %673, i64* %RAX, align 8, !tbaa !2428
  %674 = icmp eq i32 %671, -1
  %675 = icmp eq i32 %672, 0
  %676 = or i1 %674, %675
  %677 = zext i1 %676 to i8
  store i8 %677, i8* %19, align 1, !tbaa !2432
  %678 = and i32 %672, 255
  %679 = tail call i32 @llvm.ctpop.i32(i32 %678) #8
  %680 = trunc i32 %679 to i8
  %681 = and i8 %680, 1
  %682 = xor i8 %681, 1
  store i8 %682, i8* %26, align 1, !tbaa !2446
  %683 = xor i32 %671, %672
  %684 = lshr i32 %683, 4
  %685 = trunc i32 %684 to i8
  %686 = and i8 %685, 1
  store i8 %686, i8* %31, align 1, !tbaa !2447
  %687 = zext i1 %675 to i8
  store i8 %687, i8* %34, align 1, !tbaa !2448
  %688 = lshr i32 %672, 31
  %689 = trunc i32 %688 to i8
  store i8 %689, i8* %37, align 1, !tbaa !2449
  %690 = lshr i32 %671, 31
  %691 = xor i32 %688, %690
  %692 = add nuw nsw i32 %691, %688
  %693 = icmp eq i32 %692, 2
  %694 = zext i1 %693 to i8
  store i8 %694, i8* %43, align 1, !tbaa !2450
  %695 = add i64 %667, 14
  store i64 %695, i64* %PC, align 8
  store i32 %672, i32* %670, align 4
  %696 = load i64, i64* %PC, align 8
  %697 = add i64 %696, -441
  store i64 %697, i64* %PC, align 8, !tbaa !2428
  br label %block_402c1c

block_402dda:                                     ; preds = %block_402c1c
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 117), i64* %RSI, align 8, !tbaa !2428
  %698 = load i64, i64* @stderr, align 32
  store i64 %698, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2454
  %699 = add i64 %137, -10330
  %700 = add i64 %137, 25
  %701 = load i64, i64* %RSP, align 8, !tbaa !2428
  %702 = add i64 %701, -8
  %703 = inttoptr i64 %702 to i64*
  store i64 %700, i64* %703, align 8
  store i64 %702, i64* %RSP, align 8, !tbaa !2428
  store i64 %699, i64* %PC, align 8, !tbaa !2428
  %704 = tail call fastcc %struct.Memory* @ext_6040f8_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.0)
  %705 = load i64, i64* %RBP, align 8
  %706 = add i64 %705, -88
  %707 = load i32, i32* %EAX, align 4
  %708 = load i64, i64* %PC, align 8
  %709 = add i64 %708, 3
  store i64 %709, i64* %PC, align 8
  %710 = inttoptr i64 %706 to i32*
  store i32 %707, i32* %710, align 4
  %711 = load i64, i64* %RSP, align 8
  %712 = load i64, i64* %PC, align 8
  %713 = add i64 %711, 96
  store i64 %713, i64* %RSP, align 8, !tbaa !2428
  %714 = icmp ugt i64 %711, -97
  %715 = zext i1 %714 to i8
  store i8 %715, i8* %19, align 1, !tbaa !2432
  %716 = trunc i64 %713 to i32
  %717 = and i32 %716, 255
  %718 = tail call i32 @llvm.ctpop.i32(i32 %717) #8
  %719 = trunc i32 %718 to i8
  %720 = and i8 %719, 1
  %721 = xor i8 %720, 1
  store i8 %721, i8* %26, align 1, !tbaa !2446
  %722 = xor i64 %711, %713
  %723 = lshr i64 %722, 4
  %724 = trunc i64 %723 to i8
  %725 = and i8 %724, 1
  store i8 %725, i8* %31, align 1, !tbaa !2447
  %726 = icmp eq i64 %713, 0
  %727 = zext i1 %726 to i8
  store i8 %727, i8* %34, align 1, !tbaa !2448
  %728 = lshr i64 %713, 63
  %729 = trunc i64 %728 to i8
  store i8 %729, i8* %37, align 1, !tbaa !2449
  %730 = lshr i64 %711, 63
  %731 = xor i64 %728, %730
  %732 = add nuw nsw i64 %731, %728
  %733 = icmp eq i64 %732, 2
  %734 = zext i1 %733 to i8
  store i8 %734, i8* %43, align 1, !tbaa !2450
  %735 = add i64 %712, 5
  store i64 %735, i64* %PC, align 8
  %736 = add i64 %711, 104
  %737 = inttoptr i64 %713 to i64*
  %738 = load i64, i64* %737, align 8
  store i64 %738, i64* %RBP, align 8, !tbaa !2428
  store i64 %736, i64* %RSP, align 8, !tbaa !2428
  %739 = add i64 %712, 6
  store i64 %739, i64* %PC, align 8
  %740 = inttoptr i64 %736 to i64*
  %741 = load i64, i64* %740, align 8
  store i64 %741, i64* %PC, align 8, !tbaa !2428
  %742 = add i64 %711, 112
  store i64 %742, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %704

block_402d85:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 117), i64* %RSI, align 8, !tbaa !2428
  %743 = load i64, i64* @stderr, align 32
  store i64 %743, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2454
  %744 = add i64 %626, -10245
  %745 = add i64 %626, 25
  %746 = load i64, i64* %RSP, align 8, !tbaa !2428
  %747 = add i64 %746, -8
  %748 = inttoptr i64 %747 to i64*
  store i64 %745, i64* %748, align 8
  store i64 %747, i64* %RSP, align 8, !tbaa !2428
  store i64 %744, i64* %PC, align 8, !tbaa !2428
  %749 = tail call fastcc %struct.Memory* @ext_6040f8_fprintf(%struct.State* nonnull %0, %struct.Memory* %616)
  %750 = load i64, i64* %RBP, align 8
  %751 = add i64 %750, -84
  %752 = load i32, i32* %EAX, align 4
  %753 = load i64, i64* %PC, align 8
  %754 = add i64 %753, 3
  store i64 %754, i64* %PC, align 8
  %755 = inttoptr i64 %751 to i32*
  store i32 %752, i32* %755, align 4
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_402da1

block_402c42:                                     ; preds = %block_402da1, %block_402c3b
  %756 = phi i64 [ %.pre2, %block_402c3b ], [ %825, %block_402da1 ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_402c3b ], [ %MEMORY.3, %block_402da1 ]
  %757 = load i64, i64* %RBP, align 8
  %758 = add i64 %757, -52
  %759 = add i64 %756, 3
  store i64 %759, i64* %PC, align 8
  %760 = inttoptr i64 %758 to i32*
  %761 = load i32, i32* %760, align 4
  %762 = zext i32 %761 to i64
  store i64 %762, i64* %RAX, align 8, !tbaa !2428
  %763 = add i64 %757, -8
  %764 = add i64 %756, 6
  store i64 %764, i64* %PC, align 8
  %765 = inttoptr i64 %763 to i32*
  %766 = load i32, i32* %765, align 4
  %767 = sub i32 %761, %766
  %768 = icmp ult i32 %761, %766
  %769 = zext i1 %768 to i8
  store i8 %769, i8* %19, align 1, !tbaa !2432
  %770 = and i32 %767, 255
  %771 = tail call i32 @llvm.ctpop.i32(i32 %770) #8
  %772 = trunc i32 %771 to i8
  %773 = and i8 %772, 1
  %774 = xor i8 %773, 1
  store i8 %774, i8* %26, align 1, !tbaa !2446
  %775 = xor i32 %766, %761
  %776 = xor i32 %775, %767
  %777 = lshr i32 %776, 4
  %778 = trunc i32 %777 to i8
  %779 = and i8 %778, 1
  store i8 %779, i8* %31, align 1, !tbaa !2447
  %780 = icmp eq i32 %767, 0
  %781 = zext i1 %780 to i8
  store i8 %781, i8* %34, align 1, !tbaa !2448
  %782 = lshr i32 %767, 31
  %783 = trunc i32 %782 to i8
  store i8 %783, i8* %37, align 1, !tbaa !2449
  %784 = lshr i32 %761, 31
  %785 = lshr i32 %766, 31
  %786 = xor i32 %785, %784
  %787 = xor i32 %782, %784
  %788 = add nuw nsw i32 %787, %786
  %789 = icmp eq i32 %788, 2
  %790 = zext i1 %789 to i8
  store i8 %790, i8* %43, align 1, !tbaa !2450
  %791 = icmp ne i8 %783, 0
  %792 = xor i1 %791, %789
  %.demorgan8 = or i1 %780, %792
  %.v9 = select i1 %.demorgan8, i64 12, i64 370
  %793 = add i64 %756, %.v9
  store i64 %793, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan8, label %block_402c4e, label %block_402db4

block_402da1:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_402d85
  %794 = phi i64 [ %626, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %.pre5, %block_402d85 ]
  %MEMORY.3 = phi %struct.Memory* [ %616, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %749, %block_402d85 ]
  %795 = load i64, i64* %RBP, align 8
  %796 = add i64 %795, -52
  %797 = add i64 %794, 8
  store i64 %797, i64* %PC, align 8
  %798 = inttoptr i64 %796 to i32*
  %799 = load i32, i32* %798, align 4
  %800 = add i32 %799, 1
  %801 = zext i32 %800 to i64
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  %802 = icmp eq i32 %799, -1
  %803 = icmp eq i32 %800, 0
  %804 = or i1 %802, %803
  %805 = zext i1 %804 to i8
  store i8 %805, i8* %19, align 1, !tbaa !2432
  %806 = and i32 %800, 255
  %807 = tail call i32 @llvm.ctpop.i32(i32 %806) #8
  %808 = trunc i32 %807 to i8
  %809 = and i8 %808, 1
  %810 = xor i8 %809, 1
  store i8 %810, i8* %26, align 1, !tbaa !2446
  %811 = xor i32 %799, %800
  %812 = lshr i32 %811, 4
  %813 = trunc i32 %812 to i8
  %814 = and i8 %813, 1
  store i8 %814, i8* %31, align 1, !tbaa !2447
  %815 = zext i1 %803 to i8
  store i8 %815, i8* %34, align 1, !tbaa !2448
  %816 = lshr i32 %800, 31
  %817 = trunc i32 %816 to i8
  store i8 %817, i8* %37, align 1, !tbaa !2449
  %818 = lshr i32 %799, 31
  %819 = xor i32 %816, %818
  %820 = add nuw nsw i32 %819, %816
  %821 = icmp eq i32 %820, 2
  %822 = zext i1 %821 to i8
  store i8 %822, i8* %43, align 1, !tbaa !2450
  %823 = add i64 %794, 14
  store i64 %823, i64* %PC, align 8
  store i32 %800, i32* %798, align 4
  %824 = load i64, i64* %PC, align 8
  %825 = add i64 %824, -365
  store i64 %825, i64* %PC, align 8, !tbaa !2428
  br label %block_402c42
}

; Function Attrs: noinline
define %struct.Memory* @sub_400720_polybench_prepare_instruments(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400720:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, -129
  %11 = add i64 %9, 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %5, align 8, !tbaa !2428
  store i64 %10, i64* %PC, align 8, !tbaa !2428
  %14 = tail call %struct.Memory* @sub_4006a0_polybench_flush_cache_renamed_(%struct.State* nonnull %0, i64 %10, %struct.Memory* %2)
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 1
  store i64 %16, i64* %PC, align 8
  %17 = load i64, i64* %5, align 8, !tbaa !2428
  %18 = add i64 %17, 8
  %19 = inttoptr i64 %17 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %RBP, align 8, !tbaa !2428
  store i64 %18, i64* %5, align 8, !tbaa !2428
  %21 = add i64 %15, 2
  store i64 %21, i64* %PC, align 8
  %22 = inttoptr i64 %18 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %24 = add i64 %17, 16
  store i64 %24, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %14
}

; Function Attrs: noinline
define %struct.Memory* @sub_400520__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400520:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  store i64 %4, i64* %RSP, align 8, !tbaa !2428
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_603ff0__got_type* @seg_603ff0__got to i64), i64 8) to i64*), align 8
  store i64 %11, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %5, align 1, !tbaa !2432
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #8
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %6, align 1, !tbaa !2446
  %18 = icmp eq i64 %11, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %8, align 1, !tbaa !2448
  %20 = lshr i64 %11, 63
  %21 = trunc i64 %20 to i8
  store i8 %21, i8* %9, align 1, !tbaa !2449
  store i8 0, i8* %10, align 1, !tbaa !2450
  store i8 0, i8* %7, align 1, !tbaa !2447
  %.v = select i1 %18, i64 18, i64 16
  %22 = add i64 %.v, %1
  store i64 %22, i64* %PC, align 8, !tbaa !2428
  br i1 %18, label %block_400520.block_400532_crit_edge, label %block_400530

block_400520.block_400532_crit_edge:              ; preds = %block_400520
  br label %block_400532

block_400530:                                     ; preds = %block_400520
  %23 = add i64 %22, 2
  %24 = add i64 %3, -16
  %25 = inttoptr i64 %24 to i64*
  store i64 %23, i64* %25, align 8
  store i64 %24, i64* %RSP, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %26 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %.pre = load i64, i64* %RSP, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_400532

block_400532:                                     ; preds = %block_400520.block_400532_crit_edge, %block_400530
  %27 = phi i64 [ %22, %block_400520.block_400532_crit_edge ], [ %.pre1, %block_400530 ]
  %28 = phi i64 [ %4, %block_400520.block_400532_crit_edge ], [ %.pre, %block_400530 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400520.block_400532_crit_edge ], [ %26, %block_400530 ]
  %29 = add i64 %28, 8
  store i64 %29, i64* %RSP, align 8, !tbaa !2428
  %30 = icmp ugt i64 %28, -9
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %5, align 1, !tbaa !2432
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #8
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %6, align 1, !tbaa !2446
  %38 = xor i64 %28, %29
  %39 = lshr i64 %38, 4
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 1
  store i8 %41, i8* %7, align 1, !tbaa !2447
  %42 = icmp eq i64 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %8, align 1, !tbaa !2448
  %44 = lshr i64 %29, 63
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %9, align 1, !tbaa !2449
  %46 = lshr i64 %28, 63
  %47 = xor i64 %44, %46
  %48 = add nuw nsw i64 %47, %44
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %10, align 1, !tbaa !2450
  %51 = add i64 %27, 5
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %29 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %54 = add i64 %28, 16
  store i64 %54, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4013d0_kernel_fdtd_apml(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4013d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = load i64, i64* %RSP, align 8, !tbaa !2428
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %8, i64* %12, align 8
  %13 = load i64, i64* %PC, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  %14 = load i64, i64* %R15, align 8
  %15 = add i64 %13, 5
  store i64 %15, i64* %PC, align 8
  %16 = add i64 %10, -16
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = load i64, i64* %R14, align 8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 2
  store i64 %20, i64* %PC, align 8
  %21 = add i64 %10, -24
  %22 = inttoptr i64 %21 to i64*
  store i64 %18, i64* %22, align 8
  %23 = load i64, i64* %R13, align 8
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 2
  store i64 %25, i64* %PC, align 8
  %26 = add i64 %10, -32
  %27 = inttoptr i64 %26 to i64*
  store i64 %23, i64* %27, align 8
  %28 = load i64, i64* %R12, align 8
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 2
  store i64 %30, i64* %PC, align 8
  %31 = add i64 %10, -40
  %32 = inttoptr i64 %31 to i64*
  store i64 %28, i64* %32, align 8
  %33 = load i64, i64* %RBX, align 8
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 1
  store i64 %35, i64* %PC, align 8
  %36 = add i64 %10, -48
  %37 = inttoptr i64 %36 to i64*
  store i64 %33, i64* %37, align 8
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %10, -80
  store i64 %39, i64* %RSP, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, 32
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #8
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 %36, %39
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2447
  %55 = icmp eq i64 %39, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2448
  %58 = lshr i64 %39, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2449
  %61 = lshr i64 %36, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %61
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2450
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, 96
  %69 = add i64 %38, 8
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %RAX, align 8, !tbaa !2428
  %72 = add i64 %67, 88
  %73 = add i64 %38, 12
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %R10, align 8, !tbaa !2428
  %76 = add i64 %67, 80
  %77 = add i64 %38, 16
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %R11, align 8, !tbaa !2428
  %80 = add i64 %67, 72
  %81 = add i64 %38, 20
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %RBX, align 8, !tbaa !2428
  %84 = add i64 %67, 64
  %85 = add i64 %38, 24
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86, align 8
  store i64 %87, i64* %R14, align 8, !tbaa !2428
  %88 = add i64 %67, 56
  %89 = add i64 %38, 28
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %88 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %R15, align 8, !tbaa !2428
  %92 = add i64 %67, 48
  %93 = add i64 %38, 32
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %92 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %R12, align 8, !tbaa !2428
  %96 = add i64 %67, 40
  %97 = add i64 %38, 36
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %96 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %R13, align 8, !tbaa !2428
  %100 = add i64 %67, -120
  %101 = add i64 %38, 40
  store i64 %101, i64* %PC, align 8
  %102 = inttoptr i64 %100 to i64*
  store i64 %71, i64* %102, align 8
  %103 = load i64, i64* %RBP, align 8
  %104 = add i64 %103, 32
  %105 = load i64, i64* %PC, align 8
  %106 = add i64 %105, 4
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %104 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = add i64 %103, -128
  %110 = add i64 %105, 8
  store i64 %110, i64* %PC, align 8
  %111 = inttoptr i64 %109 to i64*
  store i64 %108, i64* %111, align 8
  %112 = load i64, i64* %RBP, align 8
  %113 = add i64 %112, 24
  %114 = load i64, i64* %PC, align 8
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %113 to i64*
  %117 = load i64, i64* %116, align 8
  store i64 %117, i64* %RAX, align 8, !tbaa !2428
  %118 = add i64 %112, -136
  %119 = add i64 %114, 11
  store i64 %119, i64* %PC, align 8
  %120 = inttoptr i64 %118 to i64*
  store i64 %117, i64* %120, align 8
  %121 = load i64, i64* %RBP, align 8
  %122 = add i64 %121, 16
  %123 = load i64, i64* %PC, align 8
  %124 = add i64 %123, 4
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %122 to i64*
  %126 = load i64, i64* %125, align 8
  store i64 %126, i64* %RAX, align 8, !tbaa !2428
  %127 = add i64 %121, -44
  %128 = load i32, i32* %EDI, align 4
  %129 = add i64 %123, 7
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i32*
  store i32 %128, i32* %130, align 4
  %131 = load i64, i64* %RBP, align 8
  %132 = add i64 %131, -48
  %133 = load i32, i32* %ESI, align 4
  %134 = load i64, i64* %PC, align 8
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %132 to i32*
  store i32 %133, i32* %136, align 4
  %137 = load i64, i64* %RBP, align 8
  %138 = add i64 %137, -52
  %139 = load i32, i32* %EDX, align 4
  %140 = load i64, i64* %PC, align 8
  %141 = add i64 %140, 3
  store i64 %141, i64* %PC, align 8
  %142 = inttoptr i64 %138 to i32*
  store i32 %139, i32* %142, align 4
  %143 = load i64, i64* %RBP, align 8
  %144 = add i64 %143, -64
  %145 = load i64, i64* %PC, align 8
  %146 = add i64 %145, 5
  store i64 %146, i64* %PC, align 8
  %147 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %148 = load i64, i64* %147, align 1
  %149 = inttoptr i64 %144 to i64*
  store i64 %148, i64* %149, align 8
  %150 = load i64, i64* %RBP, align 8
  %151 = add i64 %150, -72
  %152 = load i64, i64* %PC, align 8
  %153 = add i64 %152, 5
  store i64 %153, i64* %PC, align 8
  %154 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %155 = load i64, i64* %154, align 1
  %156 = inttoptr i64 %151 to i64*
  store i64 %155, i64* %156, align 8
  %157 = load i64, i64* %RBP, align 8
  %158 = add i64 %157, -80
  %159 = load i64, i64* %RCX, align 8
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 4
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %158 to i64*
  store i64 %159, i64* %162, align 8
  %163 = load i64, i64* %RBP, align 8
  %164 = add i64 %163, -88
  %165 = load i64, i64* %R8, align 8
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %164 to i64*
  store i64 %165, i64* %168, align 8
  %169 = load i64, i64* %RBP, align 8
  %170 = add i64 %169, -96
  %171 = load i64, i64* %R9, align 8
  %172 = load i64, i64* %PC, align 8
  %173 = add i64 %172, 4
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %170 to i64*
  store i64 %171, i64* %174, align 8
  %175 = load i64, i64* %RBP, align 8
  %176 = add i64 %175, -100
  %177 = load i64, i64* %PC, align 8
  %178 = add i64 %177, 7
  store i64 %178, i64* %PC, align 8
  %179 = inttoptr i64 %176 to i32*
  store i32 0, i32* %179, align 4
  %180 = load i64, i64* %RBP, align 8
  %181 = add i64 %180, -144
  %182 = load i64, i64* %R13, align 8
  %183 = load i64, i64* %PC, align 8
  %184 = add i64 %183, 7
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %181 to i64*
  store i64 %182, i64* %185, align 8
  %186 = load i64, i64* %RBP, align 8
  %187 = add i64 %186, -152
  %188 = load i64, i64* %RAX, align 8
  %189 = load i64, i64* %PC, align 8
  %190 = add i64 %189, 7
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %187 to i64*
  store i64 %188, i64* %191, align 8
  %192 = load i64, i64* %RBP, align 8
  %193 = add i64 %192, -160
  %194 = load i64, i64* %R10, align 8
  %195 = load i64, i64* %PC, align 8
  %196 = add i64 %195, 7
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %193 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -168
  %200 = load i64, i64* %R11, align 8
  %201 = load i64, i64* %PC, align 8
  %202 = add i64 %201, 7
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %199 to i64*
  store i64 %200, i64* %203, align 8
  %204 = load i64, i64* %RBP, align 8
  %205 = add i64 %204, -176
  %206 = load i64, i64* %RBX, align 8
  %207 = load i64, i64* %PC, align 8
  %208 = add i64 %207, 7
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %205 to i64*
  store i64 %206, i64* %209, align 8
  %210 = load i64, i64* %RBP, align 8
  %211 = add i64 %210, -184
  %212 = load i64, i64* %R14, align 8
  %213 = load i64, i64* %PC, align 8
  %214 = add i64 %213, 7
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %211 to i64*
  store i64 %212, i64* %215, align 8
  %216 = load i64, i64* %RBP, align 8
  %217 = add i64 %216, -192
  %218 = load i64, i64* %R15, align 8
  %219 = load i64, i64* %PC, align 8
  %220 = add i64 %219, 7
  store i64 %220, i64* %PC, align 8
  %221 = inttoptr i64 %217 to i64*
  store i64 %218, i64* %221, align 8
  %222 = load i64, i64* %RBP, align 8
  %223 = add i64 %222, -200
  %224 = load i64, i64* %R12, align 8
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 7
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %223 to i64*
  store i64 %224, i64* %227, align 8
  %228 = bitcast [32 x %union.VectorReg]* %6 to double*
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %230 = bitcast i64* %229 to double*
  %231 = bitcast %union.VectorReg* %7 to double*
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %233 = bitcast i64* %232 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_40147a

block_401499:                                     ; preds = %block_40148d
  %234 = add i64 %327, -108
  %235 = add i64 %363, 7
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %234 to i32*
  store i32 0, i32* %236, align 4
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_4014a0

block_40147a:                                     ; preds = %block_401ee5, %block_4013d0
  %237 = phi i64 [ %4579, %block_401ee5 ], [ %.pre, %block_4013d0 ]
  %238 = load i64, i64* %RBP, align 8
  %239 = add i64 %238, -100
  %240 = add i64 %237, 3
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %239 to i32*
  %242 = load i32, i32* %241, align 4
  %243 = zext i32 %242 to i64
  store i64 %243, i64* %RAX, align 8, !tbaa !2428
  %244 = add i64 %238, -44
  %245 = add i64 %237, 6
  store i64 %245, i64* %PC, align 8
  %246 = inttoptr i64 %244 to i32*
  %247 = load i32, i32* %246, align 4
  %248 = sub i32 %242, %247
  %249 = icmp ult i32 %242, %247
  %250 = zext i1 %249 to i8
  store i8 %250, i8* %42, align 1, !tbaa !2432
  %251 = and i32 %248, 255
  %252 = tail call i32 @llvm.ctpop.i32(i32 %251) #8
  %253 = trunc i32 %252 to i8
  %254 = and i8 %253, 1
  %255 = xor i8 %254, 1
  store i8 %255, i8* %49, align 1, !tbaa !2446
  %256 = xor i32 %247, %242
  %257 = xor i32 %256, %248
  %258 = lshr i32 %257, 4
  %259 = trunc i32 %258 to i8
  %260 = and i8 %259, 1
  store i8 %260, i8* %54, align 1, !tbaa !2447
  %261 = icmp eq i32 %248, 0
  %262 = zext i1 %261 to i8
  store i8 %262, i8* %57, align 1, !tbaa !2448
  %263 = lshr i32 %248, 31
  %264 = trunc i32 %263 to i8
  store i8 %264, i8* %60, align 1, !tbaa !2449
  %265 = lshr i32 %242, 31
  %266 = lshr i32 %247, 31
  %267 = xor i32 %266, %265
  %268 = xor i32 %263, %265
  %269 = add nuw nsw i32 %268, %267
  %270 = icmp eq i32 %269, 2
  %271 = zext i1 %270 to i8
  store i8 %271, i8* %66, align 1, !tbaa !2450
  %272 = icmp ne i8 %264, 0
  %273 = xor i1 %272, %270
  %.v = select i1 %273, i64 12, i64 2686
  %274 = add i64 %237, %.v
  store i64 %274, i64* %PC, align 8, !tbaa !2428
  br i1 %273, label %block_401486, label %block_401ef8

block_401ef8:                                     ; preds = %block_40147a
  %275 = load i64, i64* %RSP, align 8
  %276 = add i64 %275, 32
  store i64 %276, i64* %RSP, align 8, !tbaa !2428
  %277 = icmp ugt i64 %275, -33
  %278 = zext i1 %277 to i8
  store i8 %278, i8* %42, align 1, !tbaa !2432
  %279 = trunc i64 %276 to i32
  %280 = and i32 %279, 255
  %281 = tail call i32 @llvm.ctpop.i32(i32 %280) #8
  %282 = trunc i32 %281 to i8
  %283 = and i8 %282, 1
  %284 = xor i8 %283, 1
  store i8 %284, i8* %49, align 1, !tbaa !2446
  %285 = xor i64 %275, %276
  %286 = lshr i64 %285, 4
  %287 = trunc i64 %286 to i8
  %288 = and i8 %287, 1
  store i8 %288, i8* %54, align 1, !tbaa !2447
  %289 = icmp eq i64 %276, 0
  %290 = zext i1 %289 to i8
  store i8 %290, i8* %57, align 1, !tbaa !2448
  %291 = lshr i64 %276, 63
  %292 = trunc i64 %291 to i8
  store i8 %292, i8* %60, align 1, !tbaa !2449
  %293 = lshr i64 %275, 63
  %294 = xor i64 %291, %293
  %295 = add nuw nsw i64 %294, %291
  %296 = icmp eq i64 %295, 2
  %297 = zext i1 %296 to i8
  store i8 %297, i8* %66, align 1, !tbaa !2450
  %298 = add i64 %274, 5
  store i64 %298, i64* %PC, align 8
  %299 = add i64 %275, 40
  %300 = inttoptr i64 %276 to i64*
  %301 = load i64, i64* %300, align 8
  store i64 %301, i64* %RBX, align 8, !tbaa !2428
  store i64 %299, i64* %RSP, align 8, !tbaa !2428
  %302 = add i64 %274, 7
  store i64 %302, i64* %PC, align 8
  %303 = add i64 %275, 48
  %304 = inttoptr i64 %299 to i64*
  %305 = load i64, i64* %304, align 8
  store i64 %305, i64* %R12, align 8, !tbaa !2428
  store i64 %303, i64* %RSP, align 8, !tbaa !2428
  %306 = add i64 %274, 9
  store i64 %306, i64* %PC, align 8
  %307 = add i64 %275, 56
  %308 = inttoptr i64 %303 to i64*
  %309 = load i64, i64* %308, align 8
  store i64 %309, i64* %R13, align 8, !tbaa !2428
  store i64 %307, i64* %RSP, align 8, !tbaa !2428
  %310 = add i64 %274, 11
  store i64 %310, i64* %PC, align 8
  %311 = add i64 %275, 64
  %312 = inttoptr i64 %307 to i64*
  %313 = load i64, i64* %312, align 8
  store i64 %313, i64* %R14, align 8, !tbaa !2428
  store i64 %311, i64* %RSP, align 8, !tbaa !2428
  %314 = add i64 %274, 13
  store i64 %314, i64* %PC, align 8
  %315 = add i64 %275, 72
  %316 = inttoptr i64 %311 to i64*
  %317 = load i64, i64* %316, align 8
  store i64 %317, i64* %R15, align 8, !tbaa !2428
  store i64 %315, i64* %RSP, align 8, !tbaa !2428
  %318 = add i64 %274, 14
  store i64 %318, i64* %PC, align 8
  %319 = add i64 %275, 80
  %320 = inttoptr i64 %315 to i64*
  %321 = load i64, i64* %320, align 8
  store i64 %321, i64* %RBP, align 8, !tbaa !2428
  store i64 %319, i64* %RSP, align 8, !tbaa !2428
  %322 = add i64 %274, 15
  store i64 %322, i64* %PC, align 8
  %323 = inttoptr i64 %319 to i64*
  %324 = load i64, i64* %323, align 8
  store i64 %324, i64* %PC, align 8, !tbaa !2428
  %325 = add i64 %275, 88
  store i64 %325, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_40148d:                                     ; preds = %block_401486, %block_401c6b
  %326 = phi i64 [ %.pre2, %block_401486 ], [ %2439, %block_401c6b ]
  %327 = load i64, i64* %RBP, align 8
  %328 = add i64 %327, -104
  %329 = add i64 %326, 3
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %328 to i32*
  %331 = load i32, i32* %330, align 4
  %332 = zext i32 %331 to i64
  store i64 %332, i64* %RAX, align 8, !tbaa !2428
  %333 = add i64 %327, -52
  %334 = add i64 %326, 6
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %333 to i32*
  %336 = load i32, i32* %335, align 4
  %337 = sub i32 %331, %336
  %338 = icmp ult i32 %331, %336
  %339 = zext i1 %338 to i8
  store i8 %339, i8* %42, align 1, !tbaa !2432
  %340 = and i32 %337, 255
  %341 = tail call i32 @llvm.ctpop.i32(i32 %340) #8
  %342 = trunc i32 %341 to i8
  %343 = and i8 %342, 1
  %344 = xor i8 %343, 1
  store i8 %344, i8* %49, align 1, !tbaa !2446
  %345 = xor i32 %336, %331
  %346 = xor i32 %345, %337
  %347 = lshr i32 %346, 4
  %348 = trunc i32 %347 to i8
  %349 = and i8 %348, 1
  store i8 %349, i8* %54, align 1, !tbaa !2447
  %350 = icmp eq i32 %337, 0
  %351 = zext i1 %350 to i8
  store i8 %351, i8* %57, align 1, !tbaa !2448
  %352 = lshr i32 %337, 31
  %353 = trunc i32 %352 to i8
  store i8 %353, i8* %60, align 1, !tbaa !2449
  %354 = lshr i32 %331, 31
  %355 = lshr i32 %336, 31
  %356 = xor i32 %355, %354
  %357 = xor i32 %352, %354
  %358 = add nuw nsw i32 %357, %356
  %359 = icmp eq i32 %358, 2
  %360 = zext i1 %359 to i8
  store i8 %360, i8* %66, align 1, !tbaa !2450
  %361 = icmp ne i8 %353, 0
  %362 = xor i1 %361, %359
  %.v5 = select i1 %362, i64 12, i64 2648
  %363 = add i64 %326, %.v5
  store i64 %363, i64* %PC, align 8, !tbaa !2428
  br i1 %362, label %block_401499, label %block_401ee5

block_4019d2:                                     ; preds = %block_4019de, %block_40174c
  %364 = phi i64 [ %3477, %block_4019de ], [ %.pre4, %block_40174c ]
  %365 = load i64, i64* %RBP, align 8
  %366 = add i64 %365, -108
  %367 = add i64 %364, 3
  store i64 %367, i64* %PC, align 8
  %368 = inttoptr i64 %366 to i32*
  %369 = load i32, i32* %368, align 4
  %370 = zext i32 %369 to i64
  store i64 %370, i64* %RAX, align 8, !tbaa !2428
  %371 = add i64 %365, -48
  %372 = add i64 %364, 6
  store i64 %372, i64* %PC, align 8
  %373 = inttoptr i64 %371 to i32*
  %374 = load i32, i32* %373, align 4
  %375 = sub i32 %369, %374
  %376 = icmp ult i32 %369, %374
  %377 = zext i1 %376 to i8
  store i8 %377, i8* %42, align 1, !tbaa !2432
  %378 = and i32 %375, 255
  %379 = tail call i32 @llvm.ctpop.i32(i32 %378) #8
  %380 = trunc i32 %379 to i8
  %381 = and i8 %380, 1
  %382 = xor i8 %381, 1
  store i8 %382, i8* %49, align 1, !tbaa !2446
  %383 = xor i32 %374, %369
  %384 = xor i32 %383, %375
  %385 = lshr i32 %384, 4
  %386 = trunc i32 %385 to i8
  %387 = and i8 %386, 1
  store i8 %387, i8* %54, align 1, !tbaa !2447
  %388 = icmp eq i32 %375, 0
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %57, align 1, !tbaa !2448
  %390 = lshr i32 %375, 31
  %391 = trunc i32 %390 to i8
  store i8 %391, i8* %60, align 1, !tbaa !2449
  %392 = lshr i32 %369, 31
  %393 = lshr i32 %374, 31
  %394 = xor i32 %393, %392
  %395 = xor i32 %390, %392
  %396 = add nuw nsw i32 %395, %394
  %397 = icmp eq i32 %396, 2
  %398 = zext i1 %397 to i8
  store i8 %398, i8* %66, align 1, !tbaa !2450
  %399 = icmp ne i8 %391, 0
  %400 = xor i1 %399, %397
  %.v7 = select i1 %400, i64 12, i64 665
  %401 = add i64 %364, %.v7
  %402 = add i64 %365, 32
  %403 = add i64 %401, 4
  store i64 %403, i64* %PC, align 8
  %404 = inttoptr i64 %402 to i64*
  %405 = load i64, i64* %404, align 8
  store i64 %405, i64* %RAX, align 8, !tbaa !2428
  %406 = add i64 %365, -100
  %407 = add i64 %401, 8
  store i64 %407, i64* %PC, align 8
  %408 = inttoptr i64 %406 to i32*
  %409 = load i32, i32* %408, align 4
  %410 = sext i32 %409 to i64
  %411 = mul nsw i64 %410, 33800
  store i64 %411, i64* %RCX, align 8, !tbaa !2428
  %412 = lshr i64 %411, 63
  %413 = add i64 %411, %405
  store i64 %413, i64* %RAX, align 8, !tbaa !2428
  %414 = icmp ult i64 %413, %405
  %415 = icmp ult i64 %413, %411
  %416 = or i1 %414, %415
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %42, align 1, !tbaa !2432
  %418 = trunc i64 %413 to i32
  %419 = and i32 %418, 255
  %420 = tail call i32 @llvm.ctpop.i32(i32 %419) #8
  %421 = trunc i32 %420 to i8
  %422 = and i8 %421, 1
  %423 = xor i8 %422, 1
  store i8 %423, i8* %49, align 1, !tbaa !2446
  %424 = xor i64 %411, %405
  %425 = xor i64 %424, %413
  %426 = lshr i64 %425, 4
  %427 = trunc i64 %426 to i8
  %428 = and i8 %427, 1
  store i8 %428, i8* %54, align 1, !tbaa !2447
  %429 = icmp eq i64 %413, 0
  %430 = zext i1 %429 to i8
  store i8 %430, i8* %57, align 1, !tbaa !2448
  %431 = lshr i64 %413, 63
  %432 = trunc i64 %431 to i8
  store i8 %432, i8* %60, align 1, !tbaa !2449
  %433 = lshr i64 %405, 63
  %434 = xor i64 %431, %433
  %435 = xor i64 %431, %412
  %436 = add nuw nsw i64 %434, %435
  %437 = icmp eq i64 %436, 2
  %438 = zext i1 %437 to i8
  store i8 %438, i8* %66, align 1, !tbaa !2450
  %439 = add i64 %365, -52
  %440 = add i64 %401, 22
  store i64 %440, i64* %PC, align 8
  %441 = inttoptr i64 %439 to i32*
  %442 = load i32, i32* %441, align 4
  %443 = sext i32 %442 to i64
  %444 = mul nsw i64 %443, 520
  store i64 %444, i64* %RCX, align 8, !tbaa !2428
  %445 = lshr i64 %444, 63
  %446 = add i64 %401, 32
  store i64 %446, i64* %PC, align 8
  %447 = add i64 %444, %413
  store i64 %447, i64* %RAX, align 8, !tbaa !2428
  %448 = icmp ult i64 %447, %413
  %449 = icmp ult i64 %447, %444
  %450 = or i1 %448, %449
  %451 = zext i1 %450 to i8
  store i8 %451, i8* %42, align 1, !tbaa !2432
  %452 = trunc i64 %447 to i32
  %453 = and i32 %452, 255
  %454 = tail call i32 @llvm.ctpop.i32(i32 %453) #8
  %455 = trunc i32 %454 to i8
  %456 = and i8 %455, 1
  %457 = xor i8 %456, 1
  store i8 %457, i8* %49, align 1, !tbaa !2446
  %458 = xor i64 %444, %413
  %459 = xor i64 %458, %447
  %460 = lshr i64 %459, 4
  %461 = trunc i64 %460 to i8
  %462 = and i8 %461, 1
  store i8 %462, i8* %54, align 1, !tbaa !2447
  %463 = icmp eq i64 %447, 0
  %464 = zext i1 %463 to i8
  store i8 %464, i8* %57, align 1, !tbaa !2448
  %465 = lshr i64 %447, 63
  %466 = trunc i64 %465 to i8
  store i8 %466, i8* %60, align 1, !tbaa !2449
  %467 = xor i64 %465, %431
  %468 = xor i64 %465, %445
  %469 = add nuw nsw i64 %467, %468
  %470 = icmp eq i64 %469, 2
  %471 = zext i1 %470 to i8
  store i8 %471, i8* %66, align 1, !tbaa !2450
  br i1 %400, label %block_4019de, label %block_401c6b

block_40174c:                                     ; preds = %block_4014a0
  %472 = add i64 %4617, 36
  store i64 %472, i64* %PC, align 8
  %473 = load i32, i32* %4589, align 4
  %474 = sext i32 %473 to i64
  store i64 %474, i64* %RCX, align 8, !tbaa !2428
  %475 = shl nsw i64 %474, 3
  %476 = add i64 %475, %4663
  %477 = add i64 %4617, 41
  store i64 %477, i64* %PC, align 8
  %478 = inttoptr i64 %476 to i64*
  %479 = load i64, i64* %478, align 8
  store i64 %479, i64* %147, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %480 = add i64 %4617, 45
  store i64 %480, i64* %PC, align 8
  %481 = load i64, i64* %4620, align 8
  store i64 %481, i64* %RAX, align 8, !tbaa !2428
  %482 = add i64 %4617, 49
  store i64 %482, i64* %PC, align 8
  %483 = load i32, i32* %4624, align 4
  %484 = sext i32 %483 to i64
  %485 = mul nsw i64 %484, 33800
  store i64 %485, i64* %RCX, align 8, !tbaa !2428
  %486 = lshr i64 %485, 63
  %487 = add i64 %485, %481
  store i64 %487, i64* %RAX, align 8, !tbaa !2428
  %488 = icmp ult i64 %487, %481
  %489 = icmp ult i64 %487, %485
  %490 = or i1 %488, %489
  %491 = zext i1 %490 to i8
  store i8 %491, i8* %42, align 1, !tbaa !2432
  %492 = trunc i64 %487 to i32
  %493 = and i32 %492, 255
  %494 = tail call i32 @llvm.ctpop.i32(i32 %493) #8
  %495 = trunc i32 %494 to i8
  %496 = and i8 %495, 1
  %497 = xor i8 %496, 1
  store i8 %497, i8* %49, align 1, !tbaa !2446
  %498 = xor i64 %485, %481
  %499 = xor i64 %498, %487
  %500 = lshr i64 %499, 4
  %501 = trunc i64 %500 to i8
  %502 = and i8 %501, 1
  store i8 %502, i8* %54, align 1, !tbaa !2447
  %503 = icmp eq i64 %487, 0
  %504 = zext i1 %503 to i8
  store i8 %504, i8* %57, align 1, !tbaa !2448
  %505 = lshr i64 %487, 63
  %506 = trunc i64 %505 to i8
  store i8 %506, i8* %60, align 1, !tbaa !2449
  %507 = lshr i64 %481, 63
  %508 = xor i64 %505, %507
  %509 = xor i64 %505, %486
  %510 = add nuw nsw i64 %508, %509
  %511 = icmp eq i64 %510, 2
  %512 = zext i1 %511 to i8
  store i8 %512, i8* %66, align 1, !tbaa !2450
  %513 = add i64 %4617, 62
  store i64 %513, i64* %PC, align 8
  %514 = load i32, i32* %4657, align 4
  %515 = add i32 %514, 1
  %516 = zext i32 %515 to i64
  store i64 %516, i64* %RDX, align 8, !tbaa !2428
  %517 = sext i32 %515 to i64
  %518 = mul nsw i64 %517, 520
  store i64 %518, i64* %RCX, align 8, !tbaa !2428
  %519 = lshr i64 %518, 63
  %520 = add i64 %518, %487
  store i64 %520, i64* %RAX, align 8, !tbaa !2428
  %521 = icmp ult i64 %520, %487
  %522 = icmp ult i64 %520, %518
  %523 = or i1 %521, %522
  %524 = zext i1 %523 to i8
  store i8 %524, i8* %42, align 1, !tbaa !2432
  %525 = trunc i64 %520 to i32
  %526 = and i32 %525, 255
  %527 = tail call i32 @llvm.ctpop.i32(i32 %526) #8
  %528 = trunc i32 %527 to i8
  %529 = and i8 %528, 1
  %530 = xor i8 %529, 1
  store i8 %530, i8* %49, align 1, !tbaa !2446
  %531 = xor i64 %518, %487
  %532 = xor i64 %531, %520
  %533 = lshr i64 %532, 4
  %534 = trunc i64 %533 to i8
  %535 = and i8 %534, 1
  store i8 %535, i8* %54, align 1, !tbaa !2447
  %536 = icmp eq i64 %520, 0
  %537 = zext i1 %536 to i8
  store i8 %537, i8* %57, align 1, !tbaa !2448
  %538 = lshr i64 %520, 63
  %539 = trunc i64 %538 to i8
  store i8 %539, i8* %60, align 1, !tbaa !2449
  %540 = xor i64 %538, %505
  %541 = xor i64 %538, %519
  %542 = add nuw nsw i64 %540, %541
  %543 = icmp eq i64 %542, 2
  %544 = zext i1 %543 to i8
  store i8 %544, i8* %66, align 1, !tbaa !2450
  %545 = load i64, i64* %RBP, align 8
  %546 = add i64 %545, -48
  %547 = add i64 %4617, 82
  store i64 %547, i64* %PC, align 8
  %548 = inttoptr i64 %546 to i32*
  %549 = load i32, i32* %548, align 4
  %550 = sext i32 %549 to i64
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %551 = shl nsw i64 %550, 3
  %552 = add i64 %551, %520
  %553 = add i64 %4617, 87
  store i64 %553, i64* %PC, align 8
  %554 = load double, double* %228, align 1
  %555 = inttoptr i64 %552 to double*
  %556 = load double, double* %555, align 8
  %557 = fsub double %554, %556
  store double %557, double* %228, align 1, !tbaa !2452
  %558 = add i64 %545, -88
  %559 = add i64 %4617, 91
  store i64 %559, i64* %PC, align 8
  %560 = inttoptr i64 %558 to i64*
  %561 = load i64, i64* %560, align 8
  store i64 %561, i64* %RAX, align 8, !tbaa !2428
  %562 = add i64 %545, -100
  %563 = add i64 %4617, 95
  store i64 %563, i64* %PC, align 8
  %564 = inttoptr i64 %562 to i32*
  %565 = load i32, i32* %564, align 4
  %566 = sext i32 %565 to i64
  %567 = mul nsw i64 %566, 520
  store i64 %567, i64* %RCX, align 8, !tbaa !2428
  %568 = lshr i64 %567, 63
  %569 = add i64 %567, %561
  store i64 %569, i64* %RAX, align 8, !tbaa !2428
  %570 = icmp ult i64 %569, %561
  %571 = icmp ult i64 %569, %567
  %572 = or i1 %570, %571
  %573 = zext i1 %572 to i8
  store i8 %573, i8* %42, align 1, !tbaa !2432
  %574 = trunc i64 %569 to i32
  %575 = and i32 %574, 255
  %576 = tail call i32 @llvm.ctpop.i32(i32 %575) #8
  %577 = trunc i32 %576 to i8
  %578 = and i8 %577, 1
  %579 = xor i8 %578, 1
  store i8 %579, i8* %49, align 1, !tbaa !2446
  %580 = xor i64 %567, %561
  %581 = xor i64 %580, %569
  %582 = lshr i64 %581, 4
  %583 = trunc i64 %582 to i8
  %584 = and i8 %583, 1
  store i8 %584, i8* %54, align 1, !tbaa !2447
  %585 = icmp eq i64 %569, 0
  %586 = zext i1 %585 to i8
  store i8 %586, i8* %57, align 1, !tbaa !2448
  %587 = lshr i64 %569, 63
  %588 = trunc i64 %587 to i8
  store i8 %588, i8* %60, align 1, !tbaa !2449
  %589 = lshr i64 %561, 63
  %590 = xor i64 %587, %589
  %591 = xor i64 %587, %568
  %592 = add nuw nsw i64 %590, %591
  %593 = icmp eq i64 %592, 2
  %594 = zext i1 %593 to i8
  store i8 %594, i8* %66, align 1, !tbaa !2450
  %595 = add i64 %545, -104
  %596 = add i64 %4617, 109
  store i64 %596, i64* %PC, align 8
  %597 = inttoptr i64 %595 to i32*
  %598 = load i32, i32* %597, align 4
  %599 = sext i32 %598 to i64
  store i64 %599, i64* %RCX, align 8, !tbaa !2428
  %600 = shl nsw i64 %599, 3
  %601 = add i64 %600, %569
  %602 = add i64 %4617, 114
  store i64 %602, i64* %PC, align 8
  %603 = inttoptr i64 %601 to double*
  %604 = load double, double* %603, align 8
  %605 = fadd double %557, %604
  store double %605, double* %228, align 1, !tbaa !2452
  %606 = add i64 %545, 40
  %607 = add i64 %4617, 118
  store i64 %607, i64* %PC, align 8
  %608 = inttoptr i64 %606 to i64*
  %609 = load i64, i64* %608, align 8
  store i64 %609, i64* %RAX, align 8, !tbaa !2428
  %610 = add i64 %4617, 122
  store i64 %610, i64* %PC, align 8
  %611 = load i32, i32* %564, align 4
  %612 = sext i32 %611 to i64
  %613 = mul nsw i64 %612, 33800
  store i64 %613, i64* %RCX, align 8, !tbaa !2428
  %614 = lshr i64 %613, 63
  %615 = add i64 %613, %609
  store i64 %615, i64* %RAX, align 8, !tbaa !2428
  %616 = icmp ult i64 %615, %609
  %617 = icmp ult i64 %615, %613
  %618 = or i1 %616, %617
  %619 = zext i1 %618 to i8
  store i8 %619, i8* %42, align 1, !tbaa !2432
  %620 = trunc i64 %615 to i32
  %621 = and i32 %620, 255
  %622 = tail call i32 @llvm.ctpop.i32(i32 %621) #8
  %623 = trunc i32 %622 to i8
  %624 = and i8 %623, 1
  %625 = xor i8 %624, 1
  store i8 %625, i8* %49, align 1, !tbaa !2446
  %626 = xor i64 %613, %609
  %627 = xor i64 %626, %615
  %628 = lshr i64 %627, 4
  %629 = trunc i64 %628 to i8
  %630 = and i8 %629, 1
  store i8 %630, i8* %54, align 1, !tbaa !2447
  %631 = icmp eq i64 %615, 0
  %632 = zext i1 %631 to i8
  store i8 %632, i8* %57, align 1, !tbaa !2448
  %633 = lshr i64 %615, 63
  %634 = trunc i64 %633 to i8
  store i8 %634, i8* %60, align 1, !tbaa !2449
  %635 = lshr i64 %609, 63
  %636 = xor i64 %633, %635
  %637 = xor i64 %633, %614
  %638 = add nuw nsw i64 %636, %637
  %639 = icmp eq i64 %638, 2
  %640 = zext i1 %639 to i8
  store i8 %640, i8* %66, align 1, !tbaa !2450
  %641 = add i64 %4617, 136
  store i64 %641, i64* %PC, align 8
  %642 = load i32, i32* %597, align 4
  %643 = sext i32 %642 to i64
  %644 = mul nsw i64 %643, 520
  store i64 %644, i64* %RCX, align 8, !tbaa !2428
  %645 = lshr i64 %644, 63
  %646 = add i64 %644, %615
  store i64 %646, i64* %RAX, align 8, !tbaa !2428
  %647 = icmp ult i64 %646, %615
  %648 = icmp ult i64 %646, %644
  %649 = or i1 %647, %648
  %650 = zext i1 %649 to i8
  store i8 %650, i8* %42, align 1, !tbaa !2432
  %651 = trunc i64 %646 to i32
  %652 = and i32 %651, 255
  %653 = tail call i32 @llvm.ctpop.i32(i32 %652) #8
  %654 = trunc i32 %653 to i8
  %655 = and i8 %654, 1
  %656 = xor i8 %655, 1
  store i8 %656, i8* %49, align 1, !tbaa !2446
  %657 = xor i64 %644, %615
  %658 = xor i64 %657, %646
  %659 = lshr i64 %658, 4
  %660 = trunc i64 %659 to i8
  %661 = and i8 %660, 1
  store i8 %661, i8* %54, align 1, !tbaa !2447
  %662 = icmp eq i64 %646, 0
  %663 = zext i1 %662 to i8
  store i8 %663, i8* %57, align 1, !tbaa !2448
  %664 = lshr i64 %646, 63
  %665 = trunc i64 %664 to i8
  store i8 %665, i8* %60, align 1, !tbaa !2449
  %666 = xor i64 %664, %633
  %667 = xor i64 %664, %645
  %668 = add nuw nsw i64 %666, %667
  %669 = icmp eq i64 %668, 2
  %670 = zext i1 %669 to i8
  store i8 %670, i8* %66, align 1, !tbaa !2450
  %671 = load i64, i64* %RBP, align 8
  %672 = add i64 %671, -48
  %673 = add i64 %4617, 150
  store i64 %673, i64* %PC, align 8
  %674 = inttoptr i64 %672 to i32*
  %675 = load i32, i32* %674, align 4
  %676 = sext i32 %675 to i64
  store i64 %676, i64* %RCX, align 8, !tbaa !2428
  %677 = shl nsw i64 %676, 3
  %678 = add i64 %677, %646
  %679 = add i64 %4617, 155
  store i64 %679, i64* %PC, align 8
  %680 = inttoptr i64 %678 to double*
  %681 = load double, double* %680, align 8
  %682 = fsub double %605, %681
  store double %682, double* %228, align 1, !tbaa !2452
  %683 = add i64 %671, -96
  %684 = add i64 %4617, 159
  store i64 %684, i64* %PC, align 8
  %685 = inttoptr i64 %683 to i64*
  %686 = load i64, i64* %685, align 8
  store i64 %686, i64* %RAX, align 8, !tbaa !2428
  %687 = add i64 %671, -100
  %688 = add i64 %4617, 163
  store i64 %688, i64* %PC, align 8
  %689 = inttoptr i64 %687 to i32*
  %690 = load i32, i32* %689, align 4
  %691 = sext i32 %690 to i64
  %692 = mul nsw i64 %691, 520
  store i64 %692, i64* %RCX, align 8, !tbaa !2428
  %693 = lshr i64 %692, 63
  %694 = add i64 %692, %686
  store i64 %694, i64* %RAX, align 8, !tbaa !2428
  %695 = icmp ult i64 %694, %686
  %696 = icmp ult i64 %694, %692
  %697 = or i1 %695, %696
  %698 = zext i1 %697 to i8
  store i8 %698, i8* %42, align 1, !tbaa !2432
  %699 = trunc i64 %694 to i32
  %700 = and i32 %699, 255
  %701 = tail call i32 @llvm.ctpop.i32(i32 %700) #8
  %702 = trunc i32 %701 to i8
  %703 = and i8 %702, 1
  %704 = xor i8 %703, 1
  store i8 %704, i8* %49, align 1, !tbaa !2446
  %705 = xor i64 %692, %686
  %706 = xor i64 %705, %694
  %707 = lshr i64 %706, 4
  %708 = trunc i64 %707 to i8
  %709 = and i8 %708, 1
  store i8 %709, i8* %54, align 1, !tbaa !2447
  %710 = icmp eq i64 %694, 0
  %711 = zext i1 %710 to i8
  store i8 %711, i8* %57, align 1, !tbaa !2448
  %712 = lshr i64 %694, 63
  %713 = trunc i64 %712 to i8
  store i8 %713, i8* %60, align 1, !tbaa !2449
  %714 = lshr i64 %686, 63
  %715 = xor i64 %712, %714
  %716 = xor i64 %712, %693
  %717 = add nuw nsw i64 %715, %716
  %718 = icmp eq i64 %717, 2
  %719 = zext i1 %718 to i8
  store i8 %719, i8* %66, align 1, !tbaa !2450
  %720 = add i64 %671, -104
  %721 = add i64 %4617, 177
  store i64 %721, i64* %PC, align 8
  %722 = inttoptr i64 %720 to i32*
  %723 = load i32, i32* %722, align 4
  %724 = sext i32 %723 to i64
  store i64 %724, i64* %RCX, align 8, !tbaa !2428
  %725 = shl nsw i64 %724, 3
  %726 = add i64 %725, %694
  %727 = add i64 %4617, 182
  store i64 %727, i64* %PC, align 8
  %728 = inttoptr i64 %726 to double*
  store double %682, double* %728, align 8
  %729 = load i64, i64* %RBP, align 8
  %730 = add i64 %729, 88
  %731 = load i64, i64* %PC, align 8
  %732 = add i64 %731, 4
  store i64 %732, i64* %PC, align 8
  %733 = inttoptr i64 %730 to i64*
  %734 = load i64, i64* %733, align 8
  store i64 %734, i64* %RAX, align 8, !tbaa !2428
  %735 = add i64 %729, -104
  %736 = add i64 %731, 8
  store i64 %736, i64* %PC, align 8
  %737 = inttoptr i64 %735 to i32*
  %738 = load i32, i32* %737, align 4
  %739 = sext i32 %738 to i64
  store i64 %739, i64* %RCX, align 8, !tbaa !2428
  %740 = shl nsw i64 %739, 3
  %741 = add i64 %740, %734
  %742 = add i64 %731, 13
  store i64 %742, i64* %PC, align 8
  %743 = inttoptr i64 %741 to double*
  %744 = load double, double* %743, align 8
  store double %744, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %745 = add i64 %729, 96
  %746 = add i64 %731, 17
  store i64 %746, i64* %PC, align 8
  %747 = inttoptr i64 %745 to i64*
  %748 = load i64, i64* %747, align 8
  store i64 %748, i64* %RAX, align 8, !tbaa !2428
  %749 = add i64 %731, 21
  store i64 %749, i64* %PC, align 8
  %750 = load i32, i32* %737, align 4
  %751 = sext i32 %750 to i64
  store i64 %751, i64* %RCX, align 8, !tbaa !2428
  %752 = shl nsw i64 %751, 3
  %753 = add i64 %752, %748
  %754 = add i64 %731, 26
  store i64 %754, i64* %PC, align 8
  %755 = inttoptr i64 %753 to double*
  %756 = load double, double* %755, align 8
  %757 = fdiv double %744, %756
  store double %757, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %758 = add i64 %729, 24
  %759 = add i64 %731, 30
  store i64 %759, i64* %PC, align 8
  %760 = inttoptr i64 %758 to i64*
  %761 = load i64, i64* %760, align 8
  store i64 %761, i64* %RAX, align 8, !tbaa !2428
  %762 = add i64 %729, -100
  %763 = add i64 %731, 34
  store i64 %763, i64* %PC, align 8
  %764 = inttoptr i64 %762 to i32*
  %765 = load i32, i32* %764, align 4
  %766 = sext i32 %765 to i64
  %767 = mul nsw i64 %766, 33800
  store i64 %767, i64* %RCX, align 8, !tbaa !2428
  %768 = lshr i64 %767, 63
  %769 = add i64 %767, %761
  store i64 %769, i64* %RAX, align 8, !tbaa !2428
  %770 = icmp ult i64 %769, %761
  %771 = icmp ult i64 %769, %767
  %772 = or i1 %770, %771
  %773 = zext i1 %772 to i8
  store i8 %773, i8* %42, align 1, !tbaa !2432
  %774 = trunc i64 %769 to i32
  %775 = and i32 %774, 255
  %776 = tail call i32 @llvm.ctpop.i32(i32 %775) #8
  %777 = trunc i32 %776 to i8
  %778 = and i8 %777, 1
  %779 = xor i8 %778, 1
  store i8 %779, i8* %49, align 1, !tbaa !2446
  %780 = xor i64 %767, %761
  %781 = xor i64 %780, %769
  %782 = lshr i64 %781, 4
  %783 = trunc i64 %782 to i8
  %784 = and i8 %783, 1
  store i8 %784, i8* %54, align 1, !tbaa !2447
  %785 = icmp eq i64 %769, 0
  %786 = zext i1 %785 to i8
  store i8 %786, i8* %57, align 1, !tbaa !2448
  %787 = lshr i64 %769, 63
  %788 = trunc i64 %787 to i8
  store i8 %788, i8* %60, align 1, !tbaa !2449
  %789 = lshr i64 %761, 63
  %790 = xor i64 %787, %789
  %791 = xor i64 %787, %768
  %792 = add nuw nsw i64 %790, %791
  %793 = icmp eq i64 %792, 2
  %794 = zext i1 %793 to i8
  store i8 %794, i8* %66, align 1, !tbaa !2450
  %795 = add i64 %731, 48
  store i64 %795, i64* %PC, align 8
  %796 = load i32, i32* %737, align 4
  %797 = sext i32 %796 to i64
  %798 = mul nsw i64 %797, 520
  store i64 %798, i64* %RCX, align 8, !tbaa !2428
  %799 = lshr i64 %798, 63
  %800 = add i64 %798, %769
  store i64 %800, i64* %RAX, align 8, !tbaa !2428
  %801 = icmp ult i64 %800, %769
  %802 = icmp ult i64 %800, %798
  %803 = or i1 %801, %802
  %804 = zext i1 %803 to i8
  store i8 %804, i8* %42, align 1, !tbaa !2432
  %805 = trunc i64 %800 to i32
  %806 = and i32 %805, 255
  %807 = tail call i32 @llvm.ctpop.i32(i32 %806) #8
  %808 = trunc i32 %807 to i8
  %809 = and i8 %808, 1
  %810 = xor i8 %809, 1
  store i8 %810, i8* %49, align 1, !tbaa !2446
  %811 = xor i64 %798, %769
  %812 = xor i64 %811, %800
  %813 = lshr i64 %812, 4
  %814 = trunc i64 %813 to i8
  %815 = and i8 %814, 1
  store i8 %815, i8* %54, align 1, !tbaa !2447
  %816 = icmp eq i64 %800, 0
  %817 = zext i1 %816 to i8
  store i8 %817, i8* %57, align 1, !tbaa !2448
  %818 = lshr i64 %800, 63
  %819 = trunc i64 %818 to i8
  store i8 %819, i8* %60, align 1, !tbaa !2449
  %820 = xor i64 %818, %787
  %821 = xor i64 %818, %799
  %822 = add nuw nsw i64 %820, %821
  %823 = icmp eq i64 %822, 2
  %824 = zext i1 %823 to i8
  store i8 %824, i8* %66, align 1, !tbaa !2450
  %825 = add i64 %729, -48
  %826 = add i64 %731, 62
  store i64 %826, i64* %PC, align 8
  %827 = inttoptr i64 %825 to i32*
  %828 = load i32, i32* %827, align 4
  %829 = sext i32 %828 to i64
  store i64 %829, i64* %RCX, align 8, !tbaa !2428
  %830 = shl nsw i64 %829, 3
  %831 = add i64 %830, %800
  %832 = add i64 %731, 67
  store i64 %832, i64* %PC, align 8
  %833 = load double, double* %228, align 1
  %834 = inttoptr i64 %831 to double*
  %835 = load double, double* %834, align 8
  %836 = fmul double %833, %835
  store double %836, double* %228, align 1, !tbaa !2452
  %837 = add i64 %729, -72
  %838 = add i64 %731, 72
  store i64 %838, i64* %PC, align 8
  %839 = inttoptr i64 %837 to double*
  %840 = load double, double* %839, align 8
  store double %840, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %841 = add i64 %731, 76
  store i64 %841, i64* %PC, align 8
  %842 = load i64, i64* %747, align 8
  store i64 %842, i64* %RAX, align 8, !tbaa !2428
  %843 = add i64 %731, 80
  store i64 %843, i64* %PC, align 8
  %844 = load i32, i32* %737, align 4
  %845 = sext i32 %844 to i64
  store i64 %845, i64* %RCX, align 8, !tbaa !2428
  %846 = shl nsw i64 %845, 3
  %847 = add i64 %846, %842
  %848 = add i64 %731, 85
  store i64 %848, i64* %PC, align 8
  %849 = inttoptr i64 %847 to double*
  %850 = load double, double* %849, align 8
  %851 = fdiv double %840, %850
  store double %851, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %852 = load i64, i64* %RBP, align 8
  %853 = add i64 %852, -96
  %854 = add i64 %731, 89
  store i64 %854, i64* %PC, align 8
  %855 = inttoptr i64 %853 to i64*
  %856 = load i64, i64* %855, align 8
  store i64 %856, i64* %RAX, align 8, !tbaa !2428
  %857 = add i64 %852, -100
  %858 = add i64 %731, 93
  store i64 %858, i64* %PC, align 8
  %859 = inttoptr i64 %857 to i32*
  %860 = load i32, i32* %859, align 4
  %861 = sext i32 %860 to i64
  %862 = mul nsw i64 %861, 520
  store i64 %862, i64* %RCX, align 8, !tbaa !2428
  %863 = lshr i64 %862, 63
  %864 = add i64 %862, %856
  store i64 %864, i64* %RAX, align 8, !tbaa !2428
  %865 = icmp ult i64 %864, %856
  %866 = icmp ult i64 %864, %862
  %867 = or i1 %865, %866
  %868 = zext i1 %867 to i8
  store i8 %868, i8* %42, align 1, !tbaa !2432
  %869 = trunc i64 %864 to i32
  %870 = and i32 %869, 255
  %871 = tail call i32 @llvm.ctpop.i32(i32 %870) #8
  %872 = trunc i32 %871 to i8
  %873 = and i8 %872, 1
  %874 = xor i8 %873, 1
  store i8 %874, i8* %49, align 1, !tbaa !2446
  %875 = xor i64 %862, %856
  %876 = xor i64 %875, %864
  %877 = lshr i64 %876, 4
  %878 = trunc i64 %877 to i8
  %879 = and i8 %878, 1
  store i8 %879, i8* %54, align 1, !tbaa !2447
  %880 = icmp eq i64 %864, 0
  %881 = zext i1 %880 to i8
  store i8 %881, i8* %57, align 1, !tbaa !2448
  %882 = lshr i64 %864, 63
  %883 = trunc i64 %882 to i8
  store i8 %883, i8* %60, align 1, !tbaa !2449
  %884 = lshr i64 %856, 63
  %885 = xor i64 %882, %884
  %886 = xor i64 %882, %863
  %887 = add nuw nsw i64 %885, %886
  %888 = icmp eq i64 %887, 2
  %889 = zext i1 %888 to i8
  store i8 %889, i8* %66, align 1, !tbaa !2450
  %890 = add i64 %852, -104
  %891 = add i64 %731, 107
  store i64 %891, i64* %PC, align 8
  %892 = inttoptr i64 %890 to i32*
  %893 = load i32, i32* %892, align 4
  %894 = sext i32 %893 to i64
  store i64 %894, i64* %RCX, align 8, !tbaa !2428
  %895 = shl nsw i64 %894, 3
  %896 = add i64 %895, %864
  %897 = add i64 %731, 112
  store i64 %897, i64* %PC, align 8
  %898 = inttoptr i64 %896 to double*
  %899 = load double, double* %898, align 8
  %900 = fmul double %851, %899
  store double %900, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %901 = fsub double %836, %900
  store double %901, double* %228, align 1, !tbaa !2452
  %902 = add i64 %852, 16
  %903 = add i64 %731, 120
  store i64 %903, i64* %PC, align 8
  %904 = inttoptr i64 %902 to i64*
  %905 = load i64, i64* %904, align 8
  store i64 %905, i64* %RAX, align 8, !tbaa !2428
  %906 = add i64 %731, 124
  store i64 %906, i64* %PC, align 8
  %907 = load i32, i32* %859, align 4
  %908 = sext i32 %907 to i64
  %909 = mul nsw i64 %908, 520
  store i64 %909, i64* %RCX, align 8, !tbaa !2428
  %910 = lshr i64 %909, 63
  %911 = add i64 %909, %905
  store i64 %911, i64* %RAX, align 8, !tbaa !2428
  %912 = icmp ult i64 %911, %905
  %913 = icmp ult i64 %911, %909
  %914 = or i1 %912, %913
  %915 = zext i1 %914 to i8
  store i8 %915, i8* %42, align 1, !tbaa !2432
  %916 = trunc i64 %911 to i32
  %917 = and i32 %916, 255
  %918 = tail call i32 @llvm.ctpop.i32(i32 %917) #8
  %919 = trunc i32 %918 to i8
  %920 = and i8 %919, 1
  %921 = xor i8 %920, 1
  store i8 %921, i8* %49, align 1, !tbaa !2446
  %922 = xor i64 %909, %905
  %923 = xor i64 %922, %911
  %924 = lshr i64 %923, 4
  %925 = trunc i64 %924 to i8
  %926 = and i8 %925, 1
  store i8 %926, i8* %54, align 1, !tbaa !2447
  %927 = icmp eq i64 %911, 0
  %928 = zext i1 %927 to i8
  store i8 %928, i8* %57, align 1, !tbaa !2448
  %929 = lshr i64 %911, 63
  %930 = trunc i64 %929 to i8
  store i8 %930, i8* %60, align 1, !tbaa !2449
  %931 = lshr i64 %905, 63
  %932 = xor i64 %929, %931
  %933 = xor i64 %929, %910
  %934 = add nuw nsw i64 %932, %933
  %935 = icmp eq i64 %934, 2
  %936 = zext i1 %935 to i8
  store i8 %936, i8* %66, align 1, !tbaa !2450
  %937 = add i64 %731, 138
  store i64 %937, i64* %PC, align 8
  %938 = load i32, i32* %892, align 4
  %939 = sext i32 %938 to i64
  store i64 %939, i64* %RCX, align 8, !tbaa !2428
  %940 = shl nsw i64 %939, 3
  %941 = add i64 %940, %911
  %942 = add i64 %731, 143
  store i64 %942, i64* %PC, align 8
  %943 = inttoptr i64 %941 to double*
  store double %901, double* %943, align 8
  %944 = load i64, i64* %RBP, align 8
  %945 = add i64 %944, 72
  %946 = load i64, i64* %PC, align 8
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC, align 8
  %948 = inttoptr i64 %945 to i64*
  %949 = load i64, i64* %948, align 8
  store i64 %949, i64* %RAX, align 8, !tbaa !2428
  %950 = add i64 %944, -48
  %951 = add i64 %946, 8
  store i64 %951, i64* %PC, align 8
  %952 = inttoptr i64 %950 to i32*
  %953 = load i32, i32* %952, align 4
  %954 = sext i32 %953 to i64
  store i64 %954, i64* %RCX, align 8, !tbaa !2428
  %955 = shl nsw i64 %954, 3
  %956 = add i64 %955, %949
  %957 = add i64 %946, 13
  store i64 %957, i64* %PC, align 8
  %958 = inttoptr i64 %956 to double*
  %959 = load double, double* %958, align 8
  store double %959, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %960 = add i64 %944, 80
  %961 = add i64 %946, 17
  store i64 %961, i64* %PC, align 8
  %962 = inttoptr i64 %960 to i64*
  %963 = load i64, i64* %962, align 8
  store i64 %963, i64* %RAX, align 8, !tbaa !2428
  %964 = add i64 %946, 21
  store i64 %964, i64* %PC, align 8
  %965 = load i32, i32* %952, align 4
  %966 = sext i32 %965 to i64
  store i64 %966, i64* %RCX, align 8, !tbaa !2428
  %967 = shl nsw i64 %966, 3
  %968 = add i64 %967, %963
  %969 = add i64 %946, 26
  store i64 %969, i64* %PC, align 8
  %970 = inttoptr i64 %968 to double*
  %971 = load double, double* %970, align 8
  %972 = fdiv double %959, %971
  store double %972, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %973 = add i64 %944, 48
  %974 = add i64 %946, 30
  store i64 %974, i64* %PC, align 8
  %975 = inttoptr i64 %973 to i64*
  %976 = load i64, i64* %975, align 8
  store i64 %976, i64* %RAX, align 8, !tbaa !2428
  %977 = add i64 %944, -100
  %978 = add i64 %946, 34
  store i64 %978, i64* %PC, align 8
  %979 = inttoptr i64 %977 to i32*
  %980 = load i32, i32* %979, align 4
  %981 = sext i32 %980 to i64
  %982 = mul nsw i64 %981, 33800
  store i64 %982, i64* %RCX, align 8, !tbaa !2428
  %983 = lshr i64 %982, 63
  %984 = add i64 %982, %976
  store i64 %984, i64* %RAX, align 8, !tbaa !2428
  %985 = icmp ult i64 %984, %976
  %986 = icmp ult i64 %984, %982
  %987 = or i1 %985, %986
  %988 = zext i1 %987 to i8
  store i8 %988, i8* %42, align 1, !tbaa !2432
  %989 = trunc i64 %984 to i32
  %990 = and i32 %989, 255
  %991 = tail call i32 @llvm.ctpop.i32(i32 %990) #8
  %992 = trunc i32 %991 to i8
  %993 = and i8 %992, 1
  %994 = xor i8 %993, 1
  store i8 %994, i8* %49, align 1, !tbaa !2446
  %995 = xor i64 %982, %976
  %996 = xor i64 %995, %984
  %997 = lshr i64 %996, 4
  %998 = trunc i64 %997 to i8
  %999 = and i8 %998, 1
  store i8 %999, i8* %54, align 1, !tbaa !2447
  %1000 = icmp eq i64 %984, 0
  %1001 = zext i1 %1000 to i8
  store i8 %1001, i8* %57, align 1, !tbaa !2448
  %1002 = lshr i64 %984, 63
  %1003 = trunc i64 %1002 to i8
  store i8 %1003, i8* %60, align 1, !tbaa !2449
  %1004 = lshr i64 %976, 63
  %1005 = xor i64 %1002, %1004
  %1006 = xor i64 %1002, %983
  %1007 = add nuw nsw i64 %1005, %1006
  %1008 = icmp eq i64 %1007, 2
  %1009 = zext i1 %1008 to i8
  store i8 %1009, i8* %66, align 1, !tbaa !2450
  %1010 = add i64 %944, -104
  %1011 = add i64 %946, 48
  store i64 %1011, i64* %PC, align 8
  %1012 = inttoptr i64 %1010 to i32*
  %1013 = load i32, i32* %1012, align 4
  %1014 = sext i32 %1013 to i64
  %1015 = mul nsw i64 %1014, 520
  store i64 %1015, i64* %RCX, align 8, !tbaa !2428
  %1016 = lshr i64 %1015, 63
  %1017 = add i64 %1015, %984
  store i64 %1017, i64* %RAX, align 8, !tbaa !2428
  %1018 = icmp ult i64 %1017, %984
  %1019 = icmp ult i64 %1017, %1015
  %1020 = or i1 %1018, %1019
  %1021 = zext i1 %1020 to i8
  store i8 %1021, i8* %42, align 1, !tbaa !2432
  %1022 = trunc i64 %1017 to i32
  %1023 = and i32 %1022, 255
  %1024 = tail call i32 @llvm.ctpop.i32(i32 %1023) #8
  %1025 = trunc i32 %1024 to i8
  %1026 = and i8 %1025, 1
  %1027 = xor i8 %1026, 1
  store i8 %1027, i8* %49, align 1, !tbaa !2446
  %1028 = xor i64 %1015, %984
  %1029 = xor i64 %1028, %1017
  %1030 = lshr i64 %1029, 4
  %1031 = trunc i64 %1030 to i8
  %1032 = and i8 %1031, 1
  store i8 %1032, i8* %54, align 1, !tbaa !2447
  %1033 = icmp eq i64 %1017, 0
  %1034 = zext i1 %1033 to i8
  store i8 %1034, i8* %57, align 1, !tbaa !2448
  %1035 = lshr i64 %1017, 63
  %1036 = trunc i64 %1035 to i8
  store i8 %1036, i8* %60, align 1, !tbaa !2449
  %1037 = xor i64 %1035, %1002
  %1038 = xor i64 %1035, %1016
  %1039 = add nuw nsw i64 %1037, %1038
  %1040 = icmp eq i64 %1039, 2
  %1041 = zext i1 %1040 to i8
  store i8 %1041, i8* %66, align 1, !tbaa !2450
  %1042 = add i64 %946, 62
  store i64 %1042, i64* %PC, align 8
  %1043 = load i32, i32* %952, align 4
  %1044 = sext i32 %1043 to i64
  store i64 %1044, i64* %RCX, align 8, !tbaa !2428
  %1045 = shl nsw i64 %1044, 3
  %1046 = add i64 %1045, %1017
  %1047 = add i64 %946, 67
  store i64 %1047, i64* %PC, align 8
  %1048 = load double, double* %228, align 1
  %1049 = inttoptr i64 %1046 to double*
  %1050 = load double, double* %1049, align 8
  %1051 = fmul double %1048, %1050
  store double %1051, double* %228, align 1, !tbaa !2452
  %1052 = add i64 %944, -64
  %1053 = add i64 %946, 72
  store i64 %1053, i64* %PC, align 8
  %1054 = inttoptr i64 %1052 to double*
  %1055 = load double, double* %1054, align 8
  store double %1055, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %1056 = add i64 %944, 64
  %1057 = add i64 %946, 76
  store i64 %1057, i64* %PC, align 8
  %1058 = inttoptr i64 %1056 to i64*
  %1059 = load i64, i64* %1058, align 8
  store i64 %1059, i64* %RAX, align 8, !tbaa !2428
  %1060 = add i64 %946, 80
  store i64 %1060, i64* %PC, align 8
  %1061 = load i32, i32* %979, align 4
  %1062 = sext i32 %1061 to i64
  store i64 %1062, i64* %RCX, align 8, !tbaa !2428
  %1063 = shl nsw i64 %1062, 3
  %1064 = add i64 %1063, %1059
  %1065 = add i64 %946, 85
  store i64 %1065, i64* %PC, align 8
  %1066 = inttoptr i64 %1064 to double*
  %1067 = load double, double* %1066, align 8
  %1068 = fmul double %1055, %1067
  store double %1068, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %1069 = load i64, i64* %RBP, align 8
  %1070 = add i64 %1069, 80
  %1071 = add i64 %946, 89
  store i64 %1071, i64* %PC, align 8
  %1072 = inttoptr i64 %1070 to i64*
  %1073 = load i64, i64* %1072, align 8
  store i64 %1073, i64* %RAX, align 8, !tbaa !2428
  %1074 = add i64 %1069, -48
  %1075 = add i64 %946, 93
  store i64 %1075, i64* %PC, align 8
  %1076 = inttoptr i64 %1074 to i32*
  %1077 = load i32, i32* %1076, align 4
  %1078 = sext i32 %1077 to i64
  store i64 %1078, i64* %RCX, align 8, !tbaa !2428
  %1079 = shl nsw i64 %1078, 3
  %1080 = add i64 %1079, %1073
  %1081 = add i64 %946, 98
  store i64 %1081, i64* %PC, align 8
  %1082 = inttoptr i64 %1080 to double*
  %1083 = load double, double* %1082, align 8
  %1084 = fdiv double %1068, %1083
  store double %1084, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %1085 = add i64 %1069, 16
  %1086 = add i64 %946, 102
  store i64 %1086, i64* %PC, align 8
  %1087 = inttoptr i64 %1085 to i64*
  %1088 = load i64, i64* %1087, align 8
  store i64 %1088, i64* %RAX, align 8, !tbaa !2428
  %1089 = add i64 %1069, -100
  %1090 = add i64 %946, 106
  store i64 %1090, i64* %PC, align 8
  %1091 = inttoptr i64 %1089 to i32*
  %1092 = load i32, i32* %1091, align 4
  %1093 = sext i32 %1092 to i64
  %1094 = mul nsw i64 %1093, 520
  store i64 %1094, i64* %RCX, align 8, !tbaa !2428
  %1095 = lshr i64 %1094, 63
  %1096 = add i64 %1094, %1088
  store i64 %1096, i64* %RAX, align 8, !tbaa !2428
  %1097 = icmp ult i64 %1096, %1088
  %1098 = icmp ult i64 %1096, %1094
  %1099 = or i1 %1097, %1098
  %1100 = zext i1 %1099 to i8
  store i8 %1100, i8* %42, align 1, !tbaa !2432
  %1101 = trunc i64 %1096 to i32
  %1102 = and i32 %1101, 255
  %1103 = tail call i32 @llvm.ctpop.i32(i32 %1102) #8
  %1104 = trunc i32 %1103 to i8
  %1105 = and i8 %1104, 1
  %1106 = xor i8 %1105, 1
  store i8 %1106, i8* %49, align 1, !tbaa !2446
  %1107 = xor i64 %1094, %1088
  %1108 = xor i64 %1107, %1096
  %1109 = lshr i64 %1108, 4
  %1110 = trunc i64 %1109 to i8
  %1111 = and i8 %1110, 1
  store i8 %1111, i8* %54, align 1, !tbaa !2447
  %1112 = icmp eq i64 %1096, 0
  %1113 = zext i1 %1112 to i8
  store i8 %1113, i8* %57, align 1, !tbaa !2448
  %1114 = lshr i64 %1096, 63
  %1115 = trunc i64 %1114 to i8
  store i8 %1115, i8* %60, align 1, !tbaa !2449
  %1116 = lshr i64 %1088, 63
  %1117 = xor i64 %1114, %1116
  %1118 = xor i64 %1114, %1095
  %1119 = add nuw nsw i64 %1117, %1118
  %1120 = icmp eq i64 %1119, 2
  %1121 = zext i1 %1120 to i8
  store i8 %1121, i8* %66, align 1, !tbaa !2450
  %1122 = add i64 %1069, -104
  %1123 = add i64 %946, 120
  store i64 %1123, i64* %PC, align 8
  %1124 = inttoptr i64 %1122 to i32*
  %1125 = load i32, i32* %1124, align 4
  %1126 = sext i32 %1125 to i64
  store i64 %1126, i64* %RCX, align 8, !tbaa !2428
  %1127 = shl nsw i64 %1126, 3
  %1128 = add i64 %1127, %1096
  %1129 = add i64 %946, 125
  store i64 %1129, i64* %PC, align 8
  %1130 = inttoptr i64 %1128 to double*
  %1131 = load double, double* %1130, align 8
  %1132 = fmul double %1084, %1131
  store double %1132, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %1133 = load double, double* %228, align 1
  %1134 = fadd double %1133, %1132
  store double %1134, double* %228, align 1, !tbaa !2452
  %1135 = add i64 %1069, -64
  %1136 = add i64 %946, 134
  store i64 %1136, i64* %PC, align 8
  %1137 = inttoptr i64 %1135 to double*
  %1138 = load double, double* %1137, align 8
  store double %1138, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %1139 = add i64 %1069, 56
  %1140 = add i64 %946, 138
  store i64 %1140, i64* %PC, align 8
  %1141 = inttoptr i64 %1139 to i64*
  %1142 = load i64, i64* %1141, align 8
  store i64 %1142, i64* %RAX, align 8, !tbaa !2428
  %1143 = add i64 %946, 142
  store i64 %1143, i64* %PC, align 8
  %1144 = load i32, i32* %1091, align 4
  %1145 = sext i32 %1144 to i64
  store i64 %1145, i64* %RCX, align 8, !tbaa !2428
  %1146 = shl nsw i64 %1145, 3
  %1147 = add i64 %1146, %1142
  %1148 = add i64 %946, 147
  store i64 %1148, i64* %PC, align 8
  %1149 = inttoptr i64 %1147 to double*
  %1150 = load double, double* %1149, align 8
  %1151 = fmul double %1138, %1150
  store double %1151, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %1152 = add i64 %946, 151
  store i64 %1152, i64* %PC, align 8
  %1153 = load i64, i64* %1072, align 8
  store i64 %1153, i64* %RAX, align 8, !tbaa !2428
  %1154 = add i64 %946, 155
  store i64 %1154, i64* %PC, align 8
  %1155 = load i32, i32* %1076, align 4
  %1156 = sext i32 %1155 to i64
  store i64 %1156, i64* %RCX, align 8, !tbaa !2428
  %1157 = shl nsw i64 %1156, 3
  %1158 = add i64 %1157, %1153
  %1159 = add i64 %946, 160
  store i64 %1159, i64* %PC, align 8
  %1160 = inttoptr i64 %1158 to double*
  %1161 = load double, double* %1160, align 8
  %1162 = fdiv double %1151, %1161
  store double %1162, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %1163 = add i64 %1069, 24
  %1164 = add i64 %946, 164
  store i64 %1164, i64* %PC, align 8
  %1165 = inttoptr i64 %1163 to i64*
  %1166 = load i64, i64* %1165, align 8
  store i64 %1166, i64* %RAX, align 8, !tbaa !2428
  %1167 = add i64 %946, 168
  store i64 %1167, i64* %PC, align 8
  %1168 = load i32, i32* %1091, align 4
  %1169 = sext i32 %1168 to i64
  %1170 = mul nsw i64 %1169, 33800
  store i64 %1170, i64* %RCX, align 8, !tbaa !2428
  %1171 = lshr i64 %1170, 63
  %1172 = add i64 %1170, %1166
  store i64 %1172, i64* %RAX, align 8, !tbaa !2428
  %1173 = icmp ult i64 %1172, %1166
  %1174 = icmp ult i64 %1172, %1170
  %1175 = or i1 %1173, %1174
  %1176 = zext i1 %1175 to i8
  store i8 %1176, i8* %42, align 1, !tbaa !2432
  %1177 = trunc i64 %1172 to i32
  %1178 = and i32 %1177, 255
  %1179 = tail call i32 @llvm.ctpop.i32(i32 %1178) #8
  %1180 = trunc i32 %1179 to i8
  %1181 = and i8 %1180, 1
  %1182 = xor i8 %1181, 1
  store i8 %1182, i8* %49, align 1, !tbaa !2446
  %1183 = xor i64 %1170, %1166
  %1184 = xor i64 %1183, %1172
  %1185 = lshr i64 %1184, 4
  %1186 = trunc i64 %1185 to i8
  %1187 = and i8 %1186, 1
  store i8 %1187, i8* %54, align 1, !tbaa !2447
  %1188 = icmp eq i64 %1172, 0
  %1189 = zext i1 %1188 to i8
  store i8 %1189, i8* %57, align 1, !tbaa !2448
  %1190 = lshr i64 %1172, 63
  %1191 = trunc i64 %1190 to i8
  store i8 %1191, i8* %60, align 1, !tbaa !2449
  %1192 = lshr i64 %1166, 63
  %1193 = xor i64 %1190, %1192
  %1194 = xor i64 %1190, %1171
  %1195 = add nuw nsw i64 %1193, %1194
  %1196 = icmp eq i64 %1195, 2
  %1197 = zext i1 %1196 to i8
  store i8 %1197, i8* %66, align 1, !tbaa !2450
  %1198 = load i64, i64* %RBP, align 8
  %1199 = add i64 %1198, -104
  %1200 = add i64 %946, 182
  store i64 %1200, i64* %PC, align 8
  %1201 = inttoptr i64 %1199 to i32*
  %1202 = load i32, i32* %1201, align 4
  %1203 = sext i32 %1202 to i64
  %1204 = mul nsw i64 %1203, 520
  store i64 %1204, i64* %RCX, align 8, !tbaa !2428
  %1205 = lshr i64 %1204, 63
  %1206 = add i64 %1204, %1172
  store i64 %1206, i64* %RAX, align 8, !tbaa !2428
  %1207 = icmp ult i64 %1206, %1172
  %1208 = icmp ult i64 %1206, %1204
  %1209 = or i1 %1207, %1208
  %1210 = zext i1 %1209 to i8
  store i8 %1210, i8* %42, align 1, !tbaa !2432
  %1211 = trunc i64 %1206 to i32
  %1212 = and i32 %1211, 255
  %1213 = tail call i32 @llvm.ctpop.i32(i32 %1212) #8
  %1214 = trunc i32 %1213 to i8
  %1215 = and i8 %1214, 1
  %1216 = xor i8 %1215, 1
  store i8 %1216, i8* %49, align 1, !tbaa !2446
  %1217 = xor i64 %1204, %1172
  %1218 = xor i64 %1217, %1206
  %1219 = lshr i64 %1218, 4
  %1220 = trunc i64 %1219 to i8
  %1221 = and i8 %1220, 1
  store i8 %1221, i8* %54, align 1, !tbaa !2447
  %1222 = icmp eq i64 %1206, 0
  %1223 = zext i1 %1222 to i8
  store i8 %1223, i8* %57, align 1, !tbaa !2448
  %1224 = lshr i64 %1206, 63
  %1225 = trunc i64 %1224 to i8
  store i8 %1225, i8* %60, align 1, !tbaa !2449
  %1226 = xor i64 %1224, %1190
  %1227 = xor i64 %1224, %1205
  %1228 = add nuw nsw i64 %1226, %1227
  %1229 = icmp eq i64 %1228, 2
  %1230 = zext i1 %1229 to i8
  store i8 %1230, i8* %66, align 1, !tbaa !2450
  %1231 = add i64 %1198, -48
  %1232 = add i64 %946, 196
  store i64 %1232, i64* %PC, align 8
  %1233 = inttoptr i64 %1231 to i32*
  %1234 = load i32, i32* %1233, align 4
  %1235 = sext i32 %1234 to i64
  store i64 %1235, i64* %RCX, align 8, !tbaa !2428
  %1236 = shl nsw i64 %1235, 3
  %1237 = add i64 %1236, %1206
  %1238 = add i64 %946, 201
  store i64 %1238, i64* %PC, align 8
  %1239 = load double, double* %231, align 1
  %1240 = inttoptr i64 %1237 to double*
  %1241 = load double, double* %1240, align 8
  %1242 = fmul double %1239, %1241
  store double %1242, double* %231, align 1, !tbaa !2452
  %1243 = load double, double* %228, align 1
  %1244 = fsub double %1243, %1242
  store double %1244, double* %228, align 1, !tbaa !2452
  %1245 = add i64 %1198, 48
  %1246 = add i64 %946, 209
  store i64 %1246, i64* %PC, align 8
  %1247 = inttoptr i64 %1245 to i64*
  %1248 = load i64, i64* %1247, align 8
  store i64 %1248, i64* %RAX, align 8, !tbaa !2428
  %1249 = add i64 %1198, -100
  %1250 = add i64 %946, 213
  store i64 %1250, i64* %PC, align 8
  %1251 = inttoptr i64 %1249 to i32*
  %1252 = load i32, i32* %1251, align 4
  %1253 = sext i32 %1252 to i64
  %1254 = mul nsw i64 %1253, 33800
  store i64 %1254, i64* %RCX, align 8, !tbaa !2428
  %1255 = lshr i64 %1254, 63
  %1256 = add i64 %1254, %1248
  store i64 %1256, i64* %RAX, align 8, !tbaa !2428
  %1257 = icmp ult i64 %1256, %1248
  %1258 = icmp ult i64 %1256, %1254
  %1259 = or i1 %1257, %1258
  %1260 = zext i1 %1259 to i8
  store i8 %1260, i8* %42, align 1, !tbaa !2432
  %1261 = trunc i64 %1256 to i32
  %1262 = and i32 %1261, 255
  %1263 = tail call i32 @llvm.ctpop.i32(i32 %1262) #8
  %1264 = trunc i32 %1263 to i8
  %1265 = and i8 %1264, 1
  %1266 = xor i8 %1265, 1
  store i8 %1266, i8* %49, align 1, !tbaa !2446
  %1267 = xor i64 %1254, %1248
  %1268 = xor i64 %1267, %1256
  %1269 = lshr i64 %1268, 4
  %1270 = trunc i64 %1269 to i8
  %1271 = and i8 %1270, 1
  store i8 %1271, i8* %54, align 1, !tbaa !2447
  %1272 = icmp eq i64 %1256, 0
  %1273 = zext i1 %1272 to i8
  store i8 %1273, i8* %57, align 1, !tbaa !2448
  %1274 = lshr i64 %1256, 63
  %1275 = trunc i64 %1274 to i8
  store i8 %1275, i8* %60, align 1, !tbaa !2449
  %1276 = lshr i64 %1248, 63
  %1277 = xor i64 %1274, %1276
  %1278 = xor i64 %1274, %1255
  %1279 = add nuw nsw i64 %1277, %1278
  %1280 = icmp eq i64 %1279, 2
  %1281 = zext i1 %1280 to i8
  store i8 %1281, i8* %66, align 1, !tbaa !2450
  %1282 = load i64, i64* %RBP, align 8
  %1283 = add i64 %1282, -104
  %1284 = add i64 %946, 227
  store i64 %1284, i64* %PC, align 8
  %1285 = inttoptr i64 %1283 to i32*
  %1286 = load i32, i32* %1285, align 4
  %1287 = sext i32 %1286 to i64
  %1288 = mul nsw i64 %1287, 520
  store i64 %1288, i64* %RCX, align 8, !tbaa !2428
  %1289 = lshr i64 %1288, 63
  %1290 = add i64 %1288, %1256
  store i64 %1290, i64* %RAX, align 8, !tbaa !2428
  %1291 = icmp ult i64 %1290, %1256
  %1292 = icmp ult i64 %1290, %1288
  %1293 = or i1 %1291, %1292
  %1294 = zext i1 %1293 to i8
  store i8 %1294, i8* %42, align 1, !tbaa !2432
  %1295 = trunc i64 %1290 to i32
  %1296 = and i32 %1295, 255
  %1297 = tail call i32 @llvm.ctpop.i32(i32 %1296) #8
  %1298 = trunc i32 %1297 to i8
  %1299 = and i8 %1298, 1
  %1300 = xor i8 %1299, 1
  store i8 %1300, i8* %49, align 1, !tbaa !2446
  %1301 = xor i64 %1288, %1256
  %1302 = xor i64 %1301, %1290
  %1303 = lshr i64 %1302, 4
  %1304 = trunc i64 %1303 to i8
  %1305 = and i8 %1304, 1
  store i8 %1305, i8* %54, align 1, !tbaa !2447
  %1306 = icmp eq i64 %1290, 0
  %1307 = zext i1 %1306 to i8
  store i8 %1307, i8* %57, align 1, !tbaa !2448
  %1308 = lshr i64 %1290, 63
  %1309 = trunc i64 %1308 to i8
  store i8 %1309, i8* %60, align 1, !tbaa !2449
  %1310 = xor i64 %1308, %1274
  %1311 = xor i64 %1308, %1289
  %1312 = add nuw nsw i64 %1310, %1311
  %1313 = icmp eq i64 %1312, 2
  %1314 = zext i1 %1313 to i8
  store i8 %1314, i8* %66, align 1, !tbaa !2450
  %1315 = add i64 %1282, -48
  %1316 = add i64 %946, 241
  store i64 %1316, i64* %PC, align 8
  %1317 = inttoptr i64 %1315 to i32*
  %1318 = load i32, i32* %1317, align 4
  %1319 = sext i32 %1318 to i64
  store i64 %1319, i64* %RCX, align 8, !tbaa !2428
  %1320 = shl nsw i64 %1319, 3
  %1321 = add i64 %1320, %1290
  %1322 = add i64 %946, 246
  store i64 %1322, i64* %PC, align 8
  %1323 = load i64, i64* %147, align 1
  %1324 = inttoptr i64 %1321 to i64*
  store i64 %1323, i64* %1324, align 8
  %1325 = load i64, i64* %RBP, align 8
  %1326 = add i64 %1325, 16
  %1327 = load i64, i64* %PC, align 8
  %1328 = add i64 %1327, 4
  store i64 %1328, i64* %PC, align 8
  %1329 = inttoptr i64 %1326 to i64*
  %1330 = load i64, i64* %1329, align 8
  store i64 %1330, i64* %RAX, align 8, !tbaa !2428
  %1331 = add i64 %1325, -100
  %1332 = add i64 %1327, 8
  store i64 %1332, i64* %PC, align 8
  %1333 = inttoptr i64 %1331 to i32*
  %1334 = load i32, i32* %1333, align 4
  %1335 = sext i32 %1334 to i64
  %1336 = mul nsw i64 %1335, 520
  store i64 %1336, i64* %RCX, align 8, !tbaa !2428
  %1337 = lshr i64 %1336, 63
  %1338 = add i64 %1336, %1330
  store i64 %1338, i64* %RAX, align 8, !tbaa !2428
  %1339 = icmp ult i64 %1338, %1330
  %1340 = icmp ult i64 %1338, %1336
  %1341 = or i1 %1339, %1340
  %1342 = zext i1 %1341 to i8
  store i8 %1342, i8* %42, align 1, !tbaa !2432
  %1343 = trunc i64 %1338 to i32
  %1344 = and i32 %1343, 255
  %1345 = tail call i32 @llvm.ctpop.i32(i32 %1344) #8
  %1346 = trunc i32 %1345 to i8
  %1347 = and i8 %1346, 1
  %1348 = xor i8 %1347, 1
  store i8 %1348, i8* %49, align 1, !tbaa !2446
  %1349 = xor i64 %1336, %1330
  %1350 = xor i64 %1349, %1338
  %1351 = lshr i64 %1350, 4
  %1352 = trunc i64 %1351 to i8
  %1353 = and i8 %1352, 1
  store i8 %1353, i8* %54, align 1, !tbaa !2447
  %1354 = icmp eq i64 %1338, 0
  %1355 = zext i1 %1354 to i8
  store i8 %1355, i8* %57, align 1, !tbaa !2448
  %1356 = lshr i64 %1338, 63
  %1357 = trunc i64 %1356 to i8
  store i8 %1357, i8* %60, align 1, !tbaa !2449
  %1358 = lshr i64 %1330, 63
  %1359 = xor i64 %1356, %1358
  %1360 = xor i64 %1356, %1337
  %1361 = add nuw nsw i64 %1359, %1360
  %1362 = icmp eq i64 %1361, 2
  %1363 = zext i1 %1362 to i8
  store i8 %1363, i8* %66, align 1, !tbaa !2450
  %1364 = add i64 %1325, -104
  %1365 = add i64 %1327, 22
  store i64 %1365, i64* %PC, align 8
  %1366 = inttoptr i64 %1364 to i32*
  %1367 = load i32, i32* %1366, align 4
  %1368 = sext i32 %1367 to i64
  store i64 %1368, i64* %RCX, align 8, !tbaa !2428
  %1369 = shl nsw i64 %1368, 3
  %1370 = add i64 %1369, %1338
  %1371 = add i64 %1327, 27
  store i64 %1371, i64* %PC, align 8
  %1372 = inttoptr i64 %1370 to i64*
  %1373 = load i64, i64* %1372, align 8
  store i64 %1373, i64* %147, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %1374 = add i64 %1325, 24
  %1375 = add i64 %1327, 31
  store i64 %1375, i64* %PC, align 8
  %1376 = inttoptr i64 %1374 to i64*
  %1377 = load i64, i64* %1376, align 8
  store i64 %1377, i64* %RAX, align 8, !tbaa !2428
  %1378 = add i64 %1327, 35
  store i64 %1378, i64* %PC, align 8
  %1379 = load i32, i32* %1333, align 4
  %1380 = sext i32 %1379 to i64
  %1381 = mul nsw i64 %1380, 33800
  store i64 %1381, i64* %RCX, align 8, !tbaa !2428
  %1382 = lshr i64 %1381, 63
  %1383 = add i64 %1381, %1377
  store i64 %1383, i64* %RAX, align 8, !tbaa !2428
  %1384 = icmp ult i64 %1383, %1377
  %1385 = icmp ult i64 %1383, %1381
  %1386 = or i1 %1384, %1385
  %1387 = zext i1 %1386 to i8
  store i8 %1387, i8* %42, align 1, !tbaa !2432
  %1388 = trunc i64 %1383 to i32
  %1389 = and i32 %1388, 255
  %1390 = tail call i32 @llvm.ctpop.i32(i32 %1389) #8
  %1391 = trunc i32 %1390 to i8
  %1392 = and i8 %1391, 1
  %1393 = xor i8 %1392, 1
  store i8 %1393, i8* %49, align 1, !tbaa !2446
  %1394 = xor i64 %1381, %1377
  %1395 = xor i64 %1394, %1383
  %1396 = lshr i64 %1395, 4
  %1397 = trunc i64 %1396 to i8
  %1398 = and i8 %1397, 1
  store i8 %1398, i8* %54, align 1, !tbaa !2447
  %1399 = icmp eq i64 %1383, 0
  %1400 = zext i1 %1399 to i8
  store i8 %1400, i8* %57, align 1, !tbaa !2448
  %1401 = lshr i64 %1383, 63
  %1402 = trunc i64 %1401 to i8
  store i8 %1402, i8* %60, align 1, !tbaa !2449
  %1403 = lshr i64 %1377, 63
  %1404 = xor i64 %1401, %1403
  %1405 = xor i64 %1401, %1382
  %1406 = add nuw nsw i64 %1404, %1405
  %1407 = icmp eq i64 %1406, 2
  %1408 = zext i1 %1407 to i8
  store i8 %1408, i8* %66, align 1, !tbaa !2450
  %1409 = load i64, i64* %RBP, align 8
  %1410 = add i64 %1409, -104
  %1411 = add i64 %1327, 49
  store i64 %1411, i64* %PC, align 8
  %1412 = inttoptr i64 %1410 to i32*
  %1413 = load i32, i32* %1412, align 4
  %1414 = sext i32 %1413 to i64
  %1415 = mul nsw i64 %1414, 520
  store i64 %1415, i64* %RCX, align 8, !tbaa !2428
  %1416 = lshr i64 %1415, 63
  %1417 = add i64 %1415, %1383
  store i64 %1417, i64* %RAX, align 8, !tbaa !2428
  %1418 = icmp ult i64 %1417, %1383
  %1419 = icmp ult i64 %1417, %1415
  %1420 = or i1 %1418, %1419
  %1421 = zext i1 %1420 to i8
  store i8 %1421, i8* %42, align 1, !tbaa !2432
  %1422 = trunc i64 %1417 to i32
  %1423 = and i32 %1422, 255
  %1424 = tail call i32 @llvm.ctpop.i32(i32 %1423) #8
  %1425 = trunc i32 %1424 to i8
  %1426 = and i8 %1425, 1
  %1427 = xor i8 %1426, 1
  store i8 %1427, i8* %49, align 1, !tbaa !2446
  %1428 = xor i64 %1415, %1383
  %1429 = xor i64 %1428, %1417
  %1430 = lshr i64 %1429, 4
  %1431 = trunc i64 %1430 to i8
  %1432 = and i8 %1431, 1
  store i8 %1432, i8* %54, align 1, !tbaa !2447
  %1433 = icmp eq i64 %1417, 0
  %1434 = zext i1 %1433 to i8
  store i8 %1434, i8* %57, align 1, !tbaa !2448
  %1435 = lshr i64 %1417, 63
  %1436 = trunc i64 %1435 to i8
  store i8 %1436, i8* %60, align 1, !tbaa !2449
  %1437 = xor i64 %1435, %1401
  %1438 = xor i64 %1435, %1416
  %1439 = add nuw nsw i64 %1437, %1438
  %1440 = icmp eq i64 %1439, 2
  %1441 = zext i1 %1440 to i8
  store i8 %1441, i8* %66, align 1, !tbaa !2450
  %1442 = add i64 %1409, -48
  %1443 = add i64 %1327, 63
  store i64 %1443, i64* %PC, align 8
  %1444 = inttoptr i64 %1442 to i32*
  %1445 = load i32, i32* %1444, align 4
  %1446 = sext i32 %1445 to i64
  store i64 %1446, i64* %RCX, align 8, !tbaa !2428
  %1447 = shl nsw i64 %1446, 3
  %1448 = add i64 %1447, %1417
  %1449 = add i64 %1327, 68
  store i64 %1449, i64* %PC, align 8
  %1450 = load i64, i64* %147, align 1
  %1451 = inttoptr i64 %1448 to i64*
  store i64 %1450, i64* %1451, align 8
  %1452 = load i64, i64* %RBP, align 8
  %1453 = add i64 %1452, -108
  %1454 = load i64, i64* %PC, align 8
  %1455 = add i64 %1454, 7
  store i64 %1455, i64* %PC, align 8
  %1456 = inttoptr i64 %1453 to i32*
  store i32 0, i32* %1456, align 4
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_4019d2

block_401c6b:                                     ; preds = %block_4019d2
  %1457 = add i64 %401, 36
  store i64 %1457, i64* %PC, align 8
  %1458 = load i32, i32* %373, align 4
  %1459 = sext i32 %1458 to i64
  store i64 %1459, i64* %RCX, align 8, !tbaa !2428
  %1460 = shl nsw i64 %1459, 3
  %1461 = add i64 %1460, %447
  %1462 = add i64 %401, 41
  store i64 %1462, i64* %PC, align 8
  %1463 = inttoptr i64 %1461 to double*
  %1464 = load double, double* %1463, align 8
  store double %1464, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %1465 = add i64 %365, -80
  %1466 = add i64 %401, 45
  store i64 %1466, i64* %PC, align 8
  %1467 = inttoptr i64 %1465 to i64*
  %1468 = load i64, i64* %1467, align 8
  store i64 %1468, i64* %RAX, align 8, !tbaa !2428
  %1469 = add i64 %401, 49
  store i64 %1469, i64* %PC, align 8
  %1470 = load i32, i32* %408, align 4
  %1471 = sext i32 %1470 to i64
  %1472 = mul nsw i64 %1471, 520
  store i64 %1472, i64* %RCX, align 8, !tbaa !2428
  %1473 = lshr i64 %1472, 63
  %1474 = add i64 %1472, %1468
  store i64 %1474, i64* %RAX, align 8, !tbaa !2428
  %1475 = icmp ult i64 %1474, %1468
  %1476 = icmp ult i64 %1474, %1472
  %1477 = or i1 %1475, %1476
  %1478 = zext i1 %1477 to i8
  store i8 %1478, i8* %42, align 1, !tbaa !2432
  %1479 = trunc i64 %1474 to i32
  %1480 = and i32 %1479, 255
  %1481 = tail call i32 @llvm.ctpop.i32(i32 %1480) #8
  %1482 = trunc i32 %1481 to i8
  %1483 = and i8 %1482, 1
  %1484 = xor i8 %1483, 1
  store i8 %1484, i8* %49, align 1, !tbaa !2446
  %1485 = xor i64 %1472, %1468
  %1486 = xor i64 %1485, %1474
  %1487 = lshr i64 %1486, 4
  %1488 = trunc i64 %1487 to i8
  %1489 = and i8 %1488, 1
  store i8 %1489, i8* %54, align 1, !tbaa !2447
  %1490 = icmp eq i64 %1474, 0
  %1491 = zext i1 %1490 to i8
  store i8 %1491, i8* %57, align 1, !tbaa !2448
  %1492 = lshr i64 %1474, 63
  %1493 = trunc i64 %1492 to i8
  store i8 %1493, i8* %60, align 1, !tbaa !2449
  %1494 = lshr i64 %1468, 63
  %1495 = xor i64 %1492, %1494
  %1496 = xor i64 %1492, %1473
  %1497 = add nuw nsw i64 %1495, %1496
  %1498 = icmp eq i64 %1497, 2
  %1499 = zext i1 %1498 to i8
  store i8 %1499, i8* %66, align 1, !tbaa !2450
  %1500 = add i64 %401, 63
  store i64 %1500, i64* %PC, align 8
  %1501 = load i32, i32* %373, align 4
  %1502 = sext i32 %1501 to i64
  store i64 %1502, i64* %RCX, align 8, !tbaa !2428
  %1503 = shl nsw i64 %1502, 3
  %1504 = add i64 %1503, %1474
  %1505 = add i64 %401, 68
  store i64 %1505, i64* %PC, align 8
  %1506 = inttoptr i64 %1504 to double*
  %1507 = load double, double* %1506, align 8
  %1508 = fsub double %1464, %1507
  store double %1508, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %1509 = load i64, i64* %RBP, align 8
  %1510 = add i64 %1509, -88
  %1511 = add i64 %401, 72
  store i64 %1511, i64* %PC, align 8
  %1512 = inttoptr i64 %1510 to i64*
  %1513 = load i64, i64* %1512, align 8
  store i64 %1513, i64* %RAX, align 8, !tbaa !2428
  %1514 = add i64 %1509, -100
  %1515 = add i64 %401, 76
  store i64 %1515, i64* %PC, align 8
  %1516 = inttoptr i64 %1514 to i32*
  %1517 = load i32, i32* %1516, align 4
  %1518 = sext i32 %1517 to i64
  %1519 = mul nsw i64 %1518, 520
  store i64 %1519, i64* %RCX, align 8, !tbaa !2428
  %1520 = lshr i64 %1519, 63
  %1521 = add i64 %1519, %1513
  store i64 %1521, i64* %RAX, align 8, !tbaa !2428
  %1522 = icmp ult i64 %1521, %1513
  %1523 = icmp ult i64 %1521, %1519
  %1524 = or i1 %1522, %1523
  %1525 = zext i1 %1524 to i8
  store i8 %1525, i8* %42, align 1, !tbaa !2432
  %1526 = trunc i64 %1521 to i32
  %1527 = and i32 %1526, 255
  %1528 = tail call i32 @llvm.ctpop.i32(i32 %1527) #8
  %1529 = trunc i32 %1528 to i8
  %1530 = and i8 %1529, 1
  %1531 = xor i8 %1530, 1
  store i8 %1531, i8* %49, align 1, !tbaa !2446
  %1532 = xor i64 %1519, %1513
  %1533 = xor i64 %1532, %1521
  %1534 = lshr i64 %1533, 4
  %1535 = trunc i64 %1534 to i8
  %1536 = and i8 %1535, 1
  store i8 %1536, i8* %54, align 1, !tbaa !2447
  %1537 = icmp eq i64 %1521, 0
  %1538 = zext i1 %1537 to i8
  store i8 %1538, i8* %57, align 1, !tbaa !2448
  %1539 = lshr i64 %1521, 63
  %1540 = trunc i64 %1539 to i8
  store i8 %1540, i8* %60, align 1, !tbaa !2449
  %1541 = lshr i64 %1513, 63
  %1542 = xor i64 %1539, %1541
  %1543 = xor i64 %1539, %1520
  %1544 = add nuw nsw i64 %1542, %1543
  %1545 = icmp eq i64 %1544, 2
  %1546 = zext i1 %1545 to i8
  store i8 %1546, i8* %66, align 1, !tbaa !2450
  %1547 = add i64 %1509, -52
  %1548 = add i64 %401, 90
  store i64 %1548, i64* %PC, align 8
  %1549 = inttoptr i64 %1547 to i32*
  %1550 = load i32, i32* %1549, align 4
  %1551 = sext i32 %1550 to i64
  store i64 %1551, i64* %RCX, align 8, !tbaa !2428
  %1552 = shl nsw i64 %1551, 3
  %1553 = add i64 %1552, %1521
  %1554 = add i64 %401, 95
  store i64 %1554, i64* %PC, align 8
  %1555 = inttoptr i64 %1553 to double*
  %1556 = load double, double* %1555, align 8
  %1557 = fadd double %1508, %1556
  store double %1557, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %1558 = add i64 %1509, 40
  %1559 = add i64 %401, 99
  store i64 %1559, i64* %PC, align 8
  %1560 = inttoptr i64 %1558 to i64*
  %1561 = load i64, i64* %1560, align 8
  store i64 %1561, i64* %RAX, align 8, !tbaa !2428
  %1562 = add i64 %401, 103
  store i64 %1562, i64* %PC, align 8
  %1563 = load i32, i32* %1516, align 4
  %1564 = sext i32 %1563 to i64
  %1565 = mul nsw i64 %1564, 33800
  store i64 %1565, i64* %RCX, align 8, !tbaa !2428
  %1566 = lshr i64 %1565, 63
  %1567 = add i64 %1565, %1561
  store i64 %1567, i64* %RAX, align 8, !tbaa !2428
  %1568 = icmp ult i64 %1567, %1561
  %1569 = icmp ult i64 %1567, %1565
  %1570 = or i1 %1568, %1569
  %1571 = zext i1 %1570 to i8
  store i8 %1571, i8* %42, align 1, !tbaa !2432
  %1572 = trunc i64 %1567 to i32
  %1573 = and i32 %1572, 255
  %1574 = tail call i32 @llvm.ctpop.i32(i32 %1573) #8
  %1575 = trunc i32 %1574 to i8
  %1576 = and i8 %1575, 1
  %1577 = xor i8 %1576, 1
  store i8 %1577, i8* %49, align 1, !tbaa !2446
  %1578 = xor i64 %1565, %1561
  %1579 = xor i64 %1578, %1567
  %1580 = lshr i64 %1579, 4
  %1581 = trunc i64 %1580 to i8
  %1582 = and i8 %1581, 1
  store i8 %1582, i8* %54, align 1, !tbaa !2447
  %1583 = icmp eq i64 %1567, 0
  %1584 = zext i1 %1583 to i8
  store i8 %1584, i8* %57, align 1, !tbaa !2448
  %1585 = lshr i64 %1567, 63
  %1586 = trunc i64 %1585 to i8
  store i8 %1586, i8* %60, align 1, !tbaa !2449
  %1587 = lshr i64 %1561, 63
  %1588 = xor i64 %1585, %1587
  %1589 = xor i64 %1585, %1566
  %1590 = add nuw nsw i64 %1588, %1589
  %1591 = icmp eq i64 %1590, 2
  %1592 = zext i1 %1591 to i8
  store i8 %1592, i8* %66, align 1, !tbaa !2450
  %1593 = load i64, i64* %RBP, align 8
  %1594 = add i64 %1593, -52
  %1595 = add i64 %401, 117
  store i64 %1595, i64* %PC, align 8
  %1596 = inttoptr i64 %1594 to i32*
  %1597 = load i32, i32* %1596, align 4
  %1598 = sext i32 %1597 to i64
  %1599 = mul nsw i64 %1598, 520
  store i64 %1599, i64* %RCX, align 8, !tbaa !2428
  %1600 = lshr i64 %1599, 63
  %1601 = add i64 %1599, %1567
  store i64 %1601, i64* %RAX, align 8, !tbaa !2428
  %1602 = icmp ult i64 %1601, %1567
  %1603 = icmp ult i64 %1601, %1599
  %1604 = or i1 %1602, %1603
  %1605 = zext i1 %1604 to i8
  store i8 %1605, i8* %42, align 1, !tbaa !2432
  %1606 = trunc i64 %1601 to i32
  %1607 = and i32 %1606, 255
  %1608 = tail call i32 @llvm.ctpop.i32(i32 %1607) #8
  %1609 = trunc i32 %1608 to i8
  %1610 = and i8 %1609, 1
  %1611 = xor i8 %1610, 1
  store i8 %1611, i8* %49, align 1, !tbaa !2446
  %1612 = xor i64 %1599, %1567
  %1613 = xor i64 %1612, %1601
  %1614 = lshr i64 %1613, 4
  %1615 = trunc i64 %1614 to i8
  %1616 = and i8 %1615, 1
  store i8 %1616, i8* %54, align 1, !tbaa !2447
  %1617 = icmp eq i64 %1601, 0
  %1618 = zext i1 %1617 to i8
  store i8 %1618, i8* %57, align 1, !tbaa !2448
  %1619 = lshr i64 %1601, 63
  %1620 = trunc i64 %1619 to i8
  store i8 %1620, i8* %60, align 1, !tbaa !2449
  %1621 = xor i64 %1619, %1585
  %1622 = xor i64 %1619, %1600
  %1623 = add nuw nsw i64 %1621, %1622
  %1624 = icmp eq i64 %1623, 2
  %1625 = zext i1 %1624 to i8
  store i8 %1625, i8* %66, align 1, !tbaa !2450
  %1626 = add i64 %1593, -48
  %1627 = add i64 %401, 131
  store i64 %1627, i64* %PC, align 8
  %1628 = inttoptr i64 %1626 to i32*
  %1629 = load i32, i32* %1628, align 4
  %1630 = sext i32 %1629 to i64
  store i64 %1630, i64* %RCX, align 8, !tbaa !2428
  %1631 = shl nsw i64 %1630, 3
  %1632 = add i64 %1631, %1601
  %1633 = add i64 %401, 136
  store i64 %1633, i64* %PC, align 8
  %1634 = load double, double* %228, align 1
  %1635 = inttoptr i64 %1632 to double*
  %1636 = load double, double* %1635, align 8
  %1637 = fsub double %1634, %1636
  store double %1637, double* %228, align 1, !tbaa !2452
  %1638 = add i64 %1593, -96
  %1639 = add i64 %401, 140
  store i64 %1639, i64* %PC, align 8
  %1640 = inttoptr i64 %1638 to i64*
  %1641 = load i64, i64* %1640, align 8
  store i64 %1641, i64* %RAX, align 8, !tbaa !2428
  %1642 = add i64 %1593, -100
  %1643 = add i64 %401, 144
  store i64 %1643, i64* %PC, align 8
  %1644 = inttoptr i64 %1642 to i32*
  %1645 = load i32, i32* %1644, align 4
  %1646 = sext i32 %1645 to i64
  %1647 = mul nsw i64 %1646, 520
  store i64 %1647, i64* %RCX, align 8, !tbaa !2428
  %1648 = lshr i64 %1647, 63
  %1649 = add i64 %1647, %1641
  store i64 %1649, i64* %RAX, align 8, !tbaa !2428
  %1650 = icmp ult i64 %1649, %1641
  %1651 = icmp ult i64 %1649, %1647
  %1652 = or i1 %1650, %1651
  %1653 = zext i1 %1652 to i8
  store i8 %1653, i8* %42, align 1, !tbaa !2432
  %1654 = trunc i64 %1649 to i32
  %1655 = and i32 %1654, 255
  %1656 = tail call i32 @llvm.ctpop.i32(i32 %1655) #8
  %1657 = trunc i32 %1656 to i8
  %1658 = and i8 %1657, 1
  %1659 = xor i8 %1658, 1
  store i8 %1659, i8* %49, align 1, !tbaa !2446
  %1660 = xor i64 %1647, %1641
  %1661 = xor i64 %1660, %1649
  %1662 = lshr i64 %1661, 4
  %1663 = trunc i64 %1662 to i8
  %1664 = and i8 %1663, 1
  store i8 %1664, i8* %54, align 1, !tbaa !2447
  %1665 = icmp eq i64 %1649, 0
  %1666 = zext i1 %1665 to i8
  store i8 %1666, i8* %57, align 1, !tbaa !2448
  %1667 = lshr i64 %1649, 63
  %1668 = trunc i64 %1667 to i8
  store i8 %1668, i8* %60, align 1, !tbaa !2449
  %1669 = lshr i64 %1641, 63
  %1670 = xor i64 %1667, %1669
  %1671 = xor i64 %1667, %1648
  %1672 = add nuw nsw i64 %1670, %1671
  %1673 = icmp eq i64 %1672, 2
  %1674 = zext i1 %1673 to i8
  store i8 %1674, i8* %66, align 1, !tbaa !2450
  %1675 = load i64, i64* %RBP, align 8
  %1676 = add i64 %1675, -104
  %1677 = add i64 %401, 158
  store i64 %1677, i64* %PC, align 8
  %1678 = inttoptr i64 %1676 to i32*
  %1679 = load i32, i32* %1678, align 4
  %1680 = sext i32 %1679 to i64
  store i64 %1680, i64* %RCX, align 8, !tbaa !2428
  %1681 = shl nsw i64 %1680, 3
  %1682 = add i64 %1681, %1649
  %1683 = add i64 %401, 163
  store i64 %1683, i64* %PC, align 8
  %1684 = inttoptr i64 %1682 to double*
  store double %1637, double* %1684, align 8
  %1685 = load i64, i64* %RBP, align 8
  %1686 = add i64 %1685, 88
  %1687 = load i64, i64* %PC, align 8
  %1688 = add i64 %1687, 4
  store i64 %1688, i64* %PC, align 8
  %1689 = inttoptr i64 %1686 to i64*
  %1690 = load i64, i64* %1689, align 8
  store i64 %1690, i64* %RAX, align 8, !tbaa !2428
  %1691 = add i64 %1685, -52
  %1692 = add i64 %1687, 8
  store i64 %1692, i64* %PC, align 8
  %1693 = inttoptr i64 %1691 to i32*
  %1694 = load i32, i32* %1693, align 4
  %1695 = sext i32 %1694 to i64
  store i64 %1695, i64* %RCX, align 8, !tbaa !2428
  %1696 = shl nsw i64 %1695, 3
  %1697 = add i64 %1696, %1690
  %1698 = add i64 %1687, 13
  store i64 %1698, i64* %PC, align 8
  %1699 = inttoptr i64 %1697 to double*
  %1700 = load double, double* %1699, align 8
  store double %1700, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %1701 = add i64 %1685, 96
  %1702 = add i64 %1687, 17
  store i64 %1702, i64* %PC, align 8
  %1703 = inttoptr i64 %1701 to i64*
  %1704 = load i64, i64* %1703, align 8
  store i64 %1704, i64* %RAX, align 8, !tbaa !2428
  %1705 = add i64 %1687, 21
  store i64 %1705, i64* %PC, align 8
  %1706 = load i32, i32* %1693, align 4
  %1707 = sext i32 %1706 to i64
  store i64 %1707, i64* %RCX, align 8, !tbaa !2428
  %1708 = shl nsw i64 %1707, 3
  %1709 = add i64 %1708, %1704
  %1710 = add i64 %1687, 26
  store i64 %1710, i64* %PC, align 8
  %1711 = inttoptr i64 %1709 to double*
  %1712 = load double, double* %1711, align 8
  %1713 = fdiv double %1700, %1712
  store double %1713, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %1714 = add i64 %1685, 24
  %1715 = add i64 %1687, 30
  store i64 %1715, i64* %PC, align 8
  %1716 = inttoptr i64 %1714 to i64*
  %1717 = load i64, i64* %1716, align 8
  store i64 %1717, i64* %RAX, align 8, !tbaa !2428
  %1718 = add i64 %1685, -100
  %1719 = add i64 %1687, 34
  store i64 %1719, i64* %PC, align 8
  %1720 = inttoptr i64 %1718 to i32*
  %1721 = load i32, i32* %1720, align 4
  %1722 = sext i32 %1721 to i64
  %1723 = mul nsw i64 %1722, 33800
  store i64 %1723, i64* %RCX, align 8, !tbaa !2428
  %1724 = lshr i64 %1723, 63
  %1725 = add i64 %1723, %1717
  store i64 %1725, i64* %RAX, align 8, !tbaa !2428
  %1726 = icmp ult i64 %1725, %1717
  %1727 = icmp ult i64 %1725, %1723
  %1728 = or i1 %1726, %1727
  %1729 = zext i1 %1728 to i8
  store i8 %1729, i8* %42, align 1, !tbaa !2432
  %1730 = trunc i64 %1725 to i32
  %1731 = and i32 %1730, 255
  %1732 = tail call i32 @llvm.ctpop.i32(i32 %1731) #8
  %1733 = trunc i32 %1732 to i8
  %1734 = and i8 %1733, 1
  %1735 = xor i8 %1734, 1
  store i8 %1735, i8* %49, align 1, !tbaa !2446
  %1736 = xor i64 %1723, %1717
  %1737 = xor i64 %1736, %1725
  %1738 = lshr i64 %1737, 4
  %1739 = trunc i64 %1738 to i8
  %1740 = and i8 %1739, 1
  store i8 %1740, i8* %54, align 1, !tbaa !2447
  %1741 = icmp eq i64 %1725, 0
  %1742 = zext i1 %1741 to i8
  store i8 %1742, i8* %57, align 1, !tbaa !2448
  %1743 = lshr i64 %1725, 63
  %1744 = trunc i64 %1743 to i8
  store i8 %1744, i8* %60, align 1, !tbaa !2449
  %1745 = lshr i64 %1717, 63
  %1746 = xor i64 %1743, %1745
  %1747 = xor i64 %1743, %1724
  %1748 = add nuw nsw i64 %1746, %1747
  %1749 = icmp eq i64 %1748, 2
  %1750 = zext i1 %1749 to i8
  store i8 %1750, i8* %66, align 1, !tbaa !2450
  %1751 = add i64 %1687, 48
  store i64 %1751, i64* %PC, align 8
  %1752 = load i32, i32* %1693, align 4
  %1753 = sext i32 %1752 to i64
  %1754 = mul nsw i64 %1753, 520
  store i64 %1754, i64* %RCX, align 8, !tbaa !2428
  %1755 = lshr i64 %1754, 63
  %1756 = add i64 %1754, %1725
  store i64 %1756, i64* %RAX, align 8, !tbaa !2428
  %1757 = icmp ult i64 %1756, %1725
  %1758 = icmp ult i64 %1756, %1754
  %1759 = or i1 %1757, %1758
  %1760 = zext i1 %1759 to i8
  store i8 %1760, i8* %42, align 1, !tbaa !2432
  %1761 = trunc i64 %1756 to i32
  %1762 = and i32 %1761, 255
  %1763 = tail call i32 @llvm.ctpop.i32(i32 %1762) #8
  %1764 = trunc i32 %1763 to i8
  %1765 = and i8 %1764, 1
  %1766 = xor i8 %1765, 1
  store i8 %1766, i8* %49, align 1, !tbaa !2446
  %1767 = xor i64 %1754, %1725
  %1768 = xor i64 %1767, %1756
  %1769 = lshr i64 %1768, 4
  %1770 = trunc i64 %1769 to i8
  %1771 = and i8 %1770, 1
  store i8 %1771, i8* %54, align 1, !tbaa !2447
  %1772 = icmp eq i64 %1756, 0
  %1773 = zext i1 %1772 to i8
  store i8 %1773, i8* %57, align 1, !tbaa !2448
  %1774 = lshr i64 %1756, 63
  %1775 = trunc i64 %1774 to i8
  store i8 %1775, i8* %60, align 1, !tbaa !2449
  %1776 = xor i64 %1774, %1743
  %1777 = xor i64 %1774, %1755
  %1778 = add nuw nsw i64 %1776, %1777
  %1779 = icmp eq i64 %1778, 2
  %1780 = zext i1 %1779 to i8
  store i8 %1780, i8* %66, align 1, !tbaa !2450
  %1781 = add i64 %1685, -48
  %1782 = add i64 %1687, 62
  store i64 %1782, i64* %PC, align 8
  %1783 = inttoptr i64 %1781 to i32*
  %1784 = load i32, i32* %1783, align 4
  %1785 = sext i32 %1784 to i64
  store i64 %1785, i64* %RCX, align 8, !tbaa !2428
  %1786 = shl nsw i64 %1785, 3
  %1787 = add i64 %1786, %1756
  %1788 = add i64 %1687, 67
  store i64 %1788, i64* %PC, align 8
  %1789 = load double, double* %228, align 1
  %1790 = inttoptr i64 %1787 to double*
  %1791 = load double, double* %1790, align 8
  %1792 = fmul double %1789, %1791
  store double %1792, double* %228, align 1, !tbaa !2452
  %1793 = add i64 %1685, -72
  %1794 = add i64 %1687, 72
  store i64 %1794, i64* %PC, align 8
  %1795 = inttoptr i64 %1793 to double*
  %1796 = load double, double* %1795, align 8
  store double %1796, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %1797 = add i64 %1687, 76
  store i64 %1797, i64* %PC, align 8
  %1798 = load i64, i64* %1703, align 8
  store i64 %1798, i64* %RAX, align 8, !tbaa !2428
  %1799 = add i64 %1687, 80
  store i64 %1799, i64* %PC, align 8
  %1800 = load i32, i32* %1693, align 4
  %1801 = sext i32 %1800 to i64
  store i64 %1801, i64* %RCX, align 8, !tbaa !2428
  %1802 = shl nsw i64 %1801, 3
  %1803 = add i64 %1802, %1798
  %1804 = add i64 %1687, 85
  store i64 %1804, i64* %PC, align 8
  %1805 = inttoptr i64 %1803 to double*
  %1806 = load double, double* %1805, align 8
  %1807 = fdiv double %1796, %1806
  store double %1807, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %1808 = load i64, i64* %RBP, align 8
  %1809 = add i64 %1808, -96
  %1810 = add i64 %1687, 89
  store i64 %1810, i64* %PC, align 8
  %1811 = inttoptr i64 %1809 to i64*
  %1812 = load i64, i64* %1811, align 8
  store i64 %1812, i64* %RAX, align 8, !tbaa !2428
  %1813 = add i64 %1808, -100
  %1814 = add i64 %1687, 93
  store i64 %1814, i64* %PC, align 8
  %1815 = inttoptr i64 %1813 to i32*
  %1816 = load i32, i32* %1815, align 4
  %1817 = sext i32 %1816 to i64
  %1818 = mul nsw i64 %1817, 520
  store i64 %1818, i64* %RCX, align 8, !tbaa !2428
  %1819 = lshr i64 %1818, 63
  %1820 = add i64 %1818, %1812
  store i64 %1820, i64* %RAX, align 8, !tbaa !2428
  %1821 = icmp ult i64 %1820, %1812
  %1822 = icmp ult i64 %1820, %1818
  %1823 = or i1 %1821, %1822
  %1824 = zext i1 %1823 to i8
  store i8 %1824, i8* %42, align 1, !tbaa !2432
  %1825 = trunc i64 %1820 to i32
  %1826 = and i32 %1825, 255
  %1827 = tail call i32 @llvm.ctpop.i32(i32 %1826) #8
  %1828 = trunc i32 %1827 to i8
  %1829 = and i8 %1828, 1
  %1830 = xor i8 %1829, 1
  store i8 %1830, i8* %49, align 1, !tbaa !2446
  %1831 = xor i64 %1818, %1812
  %1832 = xor i64 %1831, %1820
  %1833 = lshr i64 %1832, 4
  %1834 = trunc i64 %1833 to i8
  %1835 = and i8 %1834, 1
  store i8 %1835, i8* %54, align 1, !tbaa !2447
  %1836 = icmp eq i64 %1820, 0
  %1837 = zext i1 %1836 to i8
  store i8 %1837, i8* %57, align 1, !tbaa !2448
  %1838 = lshr i64 %1820, 63
  %1839 = trunc i64 %1838 to i8
  store i8 %1839, i8* %60, align 1, !tbaa !2449
  %1840 = lshr i64 %1812, 63
  %1841 = xor i64 %1838, %1840
  %1842 = xor i64 %1838, %1819
  %1843 = add nuw nsw i64 %1841, %1842
  %1844 = icmp eq i64 %1843, 2
  %1845 = zext i1 %1844 to i8
  store i8 %1845, i8* %66, align 1, !tbaa !2450
  %1846 = add i64 %1808, -104
  %1847 = add i64 %1687, 107
  store i64 %1847, i64* %PC, align 8
  %1848 = inttoptr i64 %1846 to i32*
  %1849 = load i32, i32* %1848, align 4
  %1850 = sext i32 %1849 to i64
  store i64 %1850, i64* %RCX, align 8, !tbaa !2428
  %1851 = shl nsw i64 %1850, 3
  %1852 = add i64 %1851, %1820
  %1853 = add i64 %1687, 112
  store i64 %1853, i64* %PC, align 8
  %1854 = inttoptr i64 %1852 to double*
  %1855 = load double, double* %1854, align 8
  %1856 = fmul double %1807, %1855
  store double %1856, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %1857 = fsub double %1792, %1856
  store double %1857, double* %228, align 1, !tbaa !2452
  %1858 = add i64 %1808, 16
  %1859 = add i64 %1687, 120
  store i64 %1859, i64* %PC, align 8
  %1860 = inttoptr i64 %1858 to i64*
  %1861 = load i64, i64* %1860, align 8
  store i64 %1861, i64* %RAX, align 8, !tbaa !2428
  %1862 = add i64 %1687, 124
  store i64 %1862, i64* %PC, align 8
  %1863 = load i32, i32* %1815, align 4
  %1864 = sext i32 %1863 to i64
  %1865 = mul nsw i64 %1864, 520
  store i64 %1865, i64* %RCX, align 8, !tbaa !2428
  %1866 = lshr i64 %1865, 63
  %1867 = add i64 %1865, %1861
  store i64 %1867, i64* %RAX, align 8, !tbaa !2428
  %1868 = icmp ult i64 %1867, %1861
  %1869 = icmp ult i64 %1867, %1865
  %1870 = or i1 %1868, %1869
  %1871 = zext i1 %1870 to i8
  store i8 %1871, i8* %42, align 1, !tbaa !2432
  %1872 = trunc i64 %1867 to i32
  %1873 = and i32 %1872, 255
  %1874 = tail call i32 @llvm.ctpop.i32(i32 %1873) #8
  %1875 = trunc i32 %1874 to i8
  %1876 = and i8 %1875, 1
  %1877 = xor i8 %1876, 1
  store i8 %1877, i8* %49, align 1, !tbaa !2446
  %1878 = xor i64 %1865, %1861
  %1879 = xor i64 %1878, %1867
  %1880 = lshr i64 %1879, 4
  %1881 = trunc i64 %1880 to i8
  %1882 = and i8 %1881, 1
  store i8 %1882, i8* %54, align 1, !tbaa !2447
  %1883 = icmp eq i64 %1867, 0
  %1884 = zext i1 %1883 to i8
  store i8 %1884, i8* %57, align 1, !tbaa !2448
  %1885 = lshr i64 %1867, 63
  %1886 = trunc i64 %1885 to i8
  store i8 %1886, i8* %60, align 1, !tbaa !2449
  %1887 = lshr i64 %1861, 63
  %1888 = xor i64 %1885, %1887
  %1889 = xor i64 %1885, %1866
  %1890 = add nuw nsw i64 %1888, %1889
  %1891 = icmp eq i64 %1890, 2
  %1892 = zext i1 %1891 to i8
  store i8 %1892, i8* %66, align 1, !tbaa !2450
  %1893 = add i64 %1687, 138
  store i64 %1893, i64* %PC, align 8
  %1894 = load i32, i32* %1848, align 4
  %1895 = sext i32 %1894 to i64
  store i64 %1895, i64* %RCX, align 8, !tbaa !2428
  %1896 = shl nsw i64 %1895, 3
  %1897 = add i64 %1896, %1867
  %1898 = add i64 %1687, 143
  store i64 %1898, i64* %PC, align 8
  %1899 = inttoptr i64 %1897 to double*
  store double %1857, double* %1899, align 8
  %1900 = load i64, i64* %RBP, align 8
  %1901 = add i64 %1900, 72
  %1902 = load i64, i64* %PC, align 8
  %1903 = add i64 %1902, 4
  store i64 %1903, i64* %PC, align 8
  %1904 = inttoptr i64 %1901 to i64*
  %1905 = load i64, i64* %1904, align 8
  store i64 %1905, i64* %RAX, align 8, !tbaa !2428
  %1906 = add i64 %1900, -48
  %1907 = add i64 %1902, 8
  store i64 %1907, i64* %PC, align 8
  %1908 = inttoptr i64 %1906 to i32*
  %1909 = load i32, i32* %1908, align 4
  %1910 = sext i32 %1909 to i64
  store i64 %1910, i64* %RCX, align 8, !tbaa !2428
  %1911 = shl nsw i64 %1910, 3
  %1912 = add i64 %1911, %1905
  %1913 = add i64 %1902, 13
  store i64 %1913, i64* %PC, align 8
  %1914 = inttoptr i64 %1912 to double*
  %1915 = load double, double* %1914, align 8
  store double %1915, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %1916 = add i64 %1900, 80
  %1917 = add i64 %1902, 17
  store i64 %1917, i64* %PC, align 8
  %1918 = inttoptr i64 %1916 to i64*
  %1919 = load i64, i64* %1918, align 8
  store i64 %1919, i64* %RAX, align 8, !tbaa !2428
  %1920 = add i64 %1902, 21
  store i64 %1920, i64* %PC, align 8
  %1921 = load i32, i32* %1908, align 4
  %1922 = sext i32 %1921 to i64
  store i64 %1922, i64* %RCX, align 8, !tbaa !2428
  %1923 = shl nsw i64 %1922, 3
  %1924 = add i64 %1923, %1919
  %1925 = add i64 %1902, 26
  store i64 %1925, i64* %PC, align 8
  %1926 = inttoptr i64 %1924 to double*
  %1927 = load double, double* %1926, align 8
  %1928 = fdiv double %1915, %1927
  store double %1928, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %1929 = add i64 %1900, 48
  %1930 = add i64 %1902, 30
  store i64 %1930, i64* %PC, align 8
  %1931 = inttoptr i64 %1929 to i64*
  %1932 = load i64, i64* %1931, align 8
  store i64 %1932, i64* %RAX, align 8, !tbaa !2428
  %1933 = add i64 %1900, -100
  %1934 = add i64 %1902, 34
  store i64 %1934, i64* %PC, align 8
  %1935 = inttoptr i64 %1933 to i32*
  %1936 = load i32, i32* %1935, align 4
  %1937 = sext i32 %1936 to i64
  %1938 = mul nsw i64 %1937, 33800
  store i64 %1938, i64* %RCX, align 8, !tbaa !2428
  %1939 = lshr i64 %1938, 63
  %1940 = add i64 %1938, %1932
  store i64 %1940, i64* %RAX, align 8, !tbaa !2428
  %1941 = icmp ult i64 %1940, %1932
  %1942 = icmp ult i64 %1940, %1938
  %1943 = or i1 %1941, %1942
  %1944 = zext i1 %1943 to i8
  store i8 %1944, i8* %42, align 1, !tbaa !2432
  %1945 = trunc i64 %1940 to i32
  %1946 = and i32 %1945, 255
  %1947 = tail call i32 @llvm.ctpop.i32(i32 %1946) #8
  %1948 = trunc i32 %1947 to i8
  %1949 = and i8 %1948, 1
  %1950 = xor i8 %1949, 1
  store i8 %1950, i8* %49, align 1, !tbaa !2446
  %1951 = xor i64 %1938, %1932
  %1952 = xor i64 %1951, %1940
  %1953 = lshr i64 %1952, 4
  %1954 = trunc i64 %1953 to i8
  %1955 = and i8 %1954, 1
  store i8 %1955, i8* %54, align 1, !tbaa !2447
  %1956 = icmp eq i64 %1940, 0
  %1957 = zext i1 %1956 to i8
  store i8 %1957, i8* %57, align 1, !tbaa !2448
  %1958 = lshr i64 %1940, 63
  %1959 = trunc i64 %1958 to i8
  store i8 %1959, i8* %60, align 1, !tbaa !2449
  %1960 = lshr i64 %1932, 63
  %1961 = xor i64 %1958, %1960
  %1962 = xor i64 %1958, %1939
  %1963 = add nuw nsw i64 %1961, %1962
  %1964 = icmp eq i64 %1963, 2
  %1965 = zext i1 %1964 to i8
  store i8 %1965, i8* %66, align 1, !tbaa !2450
  %1966 = add i64 %1900, -52
  %1967 = add i64 %1902, 48
  store i64 %1967, i64* %PC, align 8
  %1968 = inttoptr i64 %1966 to i32*
  %1969 = load i32, i32* %1968, align 4
  %1970 = sext i32 %1969 to i64
  %1971 = mul nsw i64 %1970, 520
  store i64 %1971, i64* %RCX, align 8, !tbaa !2428
  %1972 = lshr i64 %1971, 63
  %1973 = add i64 %1971, %1940
  store i64 %1973, i64* %RAX, align 8, !tbaa !2428
  %1974 = icmp ult i64 %1973, %1940
  %1975 = icmp ult i64 %1973, %1971
  %1976 = or i1 %1974, %1975
  %1977 = zext i1 %1976 to i8
  store i8 %1977, i8* %42, align 1, !tbaa !2432
  %1978 = trunc i64 %1973 to i32
  %1979 = and i32 %1978, 255
  %1980 = tail call i32 @llvm.ctpop.i32(i32 %1979) #8
  %1981 = trunc i32 %1980 to i8
  %1982 = and i8 %1981, 1
  %1983 = xor i8 %1982, 1
  store i8 %1983, i8* %49, align 1, !tbaa !2446
  %1984 = xor i64 %1971, %1940
  %1985 = xor i64 %1984, %1973
  %1986 = lshr i64 %1985, 4
  %1987 = trunc i64 %1986 to i8
  %1988 = and i8 %1987, 1
  store i8 %1988, i8* %54, align 1, !tbaa !2447
  %1989 = icmp eq i64 %1973, 0
  %1990 = zext i1 %1989 to i8
  store i8 %1990, i8* %57, align 1, !tbaa !2448
  %1991 = lshr i64 %1973, 63
  %1992 = trunc i64 %1991 to i8
  store i8 %1992, i8* %60, align 1, !tbaa !2449
  %1993 = xor i64 %1991, %1958
  %1994 = xor i64 %1991, %1972
  %1995 = add nuw nsw i64 %1993, %1994
  %1996 = icmp eq i64 %1995, 2
  %1997 = zext i1 %1996 to i8
  store i8 %1997, i8* %66, align 1, !tbaa !2450
  %1998 = add i64 %1902, 62
  store i64 %1998, i64* %PC, align 8
  %1999 = load i32, i32* %1908, align 4
  %2000 = sext i32 %1999 to i64
  store i64 %2000, i64* %RCX, align 8, !tbaa !2428
  %2001 = shl nsw i64 %2000, 3
  %2002 = add i64 %2001, %1973
  %2003 = add i64 %1902, 67
  store i64 %2003, i64* %PC, align 8
  %2004 = load double, double* %228, align 1
  %2005 = inttoptr i64 %2002 to double*
  %2006 = load double, double* %2005, align 8
  %2007 = fmul double %2004, %2006
  store double %2007, double* %228, align 1, !tbaa !2452
  %2008 = add i64 %1900, -64
  %2009 = add i64 %1902, 72
  store i64 %2009, i64* %PC, align 8
  %2010 = inttoptr i64 %2008 to double*
  %2011 = load double, double* %2010, align 8
  store double %2011, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %2012 = add i64 %1900, 64
  %2013 = add i64 %1902, 76
  store i64 %2013, i64* %PC, align 8
  %2014 = inttoptr i64 %2012 to i64*
  %2015 = load i64, i64* %2014, align 8
  store i64 %2015, i64* %RAX, align 8, !tbaa !2428
  %2016 = add i64 %1902, 80
  store i64 %2016, i64* %PC, align 8
  %2017 = load i32, i32* %1935, align 4
  %2018 = sext i32 %2017 to i64
  store i64 %2018, i64* %RCX, align 8, !tbaa !2428
  %2019 = shl nsw i64 %2018, 3
  %2020 = add i64 %2019, %2015
  %2021 = add i64 %1902, 85
  store i64 %2021, i64* %PC, align 8
  %2022 = inttoptr i64 %2020 to double*
  %2023 = load double, double* %2022, align 8
  %2024 = fmul double %2011, %2023
  store double %2024, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %2025 = load i64, i64* %RBP, align 8
  %2026 = add i64 %2025, 80
  %2027 = add i64 %1902, 89
  store i64 %2027, i64* %PC, align 8
  %2028 = inttoptr i64 %2026 to i64*
  %2029 = load i64, i64* %2028, align 8
  store i64 %2029, i64* %RAX, align 8, !tbaa !2428
  %2030 = add i64 %2025, -48
  %2031 = add i64 %1902, 93
  store i64 %2031, i64* %PC, align 8
  %2032 = inttoptr i64 %2030 to i32*
  %2033 = load i32, i32* %2032, align 4
  %2034 = sext i32 %2033 to i64
  store i64 %2034, i64* %RCX, align 8, !tbaa !2428
  %2035 = shl nsw i64 %2034, 3
  %2036 = add i64 %2035, %2029
  %2037 = add i64 %1902, 98
  store i64 %2037, i64* %PC, align 8
  %2038 = inttoptr i64 %2036 to double*
  %2039 = load double, double* %2038, align 8
  %2040 = fdiv double %2024, %2039
  store double %2040, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %2041 = add i64 %2025, 16
  %2042 = add i64 %1902, 102
  store i64 %2042, i64* %PC, align 8
  %2043 = inttoptr i64 %2041 to i64*
  %2044 = load i64, i64* %2043, align 8
  store i64 %2044, i64* %RAX, align 8, !tbaa !2428
  %2045 = add i64 %2025, -100
  %2046 = add i64 %1902, 106
  store i64 %2046, i64* %PC, align 8
  %2047 = inttoptr i64 %2045 to i32*
  %2048 = load i32, i32* %2047, align 4
  %2049 = sext i32 %2048 to i64
  %2050 = mul nsw i64 %2049, 520
  store i64 %2050, i64* %RCX, align 8, !tbaa !2428
  %2051 = lshr i64 %2050, 63
  %2052 = add i64 %2050, %2044
  store i64 %2052, i64* %RAX, align 8, !tbaa !2428
  %2053 = icmp ult i64 %2052, %2044
  %2054 = icmp ult i64 %2052, %2050
  %2055 = or i1 %2053, %2054
  %2056 = zext i1 %2055 to i8
  store i8 %2056, i8* %42, align 1, !tbaa !2432
  %2057 = trunc i64 %2052 to i32
  %2058 = and i32 %2057, 255
  %2059 = tail call i32 @llvm.ctpop.i32(i32 %2058) #8
  %2060 = trunc i32 %2059 to i8
  %2061 = and i8 %2060, 1
  %2062 = xor i8 %2061, 1
  store i8 %2062, i8* %49, align 1, !tbaa !2446
  %2063 = xor i64 %2050, %2044
  %2064 = xor i64 %2063, %2052
  %2065 = lshr i64 %2064, 4
  %2066 = trunc i64 %2065 to i8
  %2067 = and i8 %2066, 1
  store i8 %2067, i8* %54, align 1, !tbaa !2447
  %2068 = icmp eq i64 %2052, 0
  %2069 = zext i1 %2068 to i8
  store i8 %2069, i8* %57, align 1, !tbaa !2448
  %2070 = lshr i64 %2052, 63
  %2071 = trunc i64 %2070 to i8
  store i8 %2071, i8* %60, align 1, !tbaa !2449
  %2072 = lshr i64 %2044, 63
  %2073 = xor i64 %2070, %2072
  %2074 = xor i64 %2070, %2051
  %2075 = add nuw nsw i64 %2073, %2074
  %2076 = icmp eq i64 %2075, 2
  %2077 = zext i1 %2076 to i8
  store i8 %2077, i8* %66, align 1, !tbaa !2450
  %2078 = add i64 %2025, -104
  %2079 = add i64 %1902, 120
  store i64 %2079, i64* %PC, align 8
  %2080 = inttoptr i64 %2078 to i32*
  %2081 = load i32, i32* %2080, align 4
  %2082 = sext i32 %2081 to i64
  store i64 %2082, i64* %RCX, align 8, !tbaa !2428
  %2083 = shl nsw i64 %2082, 3
  %2084 = add i64 %2083, %2052
  %2085 = add i64 %1902, 125
  store i64 %2085, i64* %PC, align 8
  %2086 = inttoptr i64 %2084 to double*
  %2087 = load double, double* %2086, align 8
  %2088 = fmul double %2040, %2087
  store double %2088, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %2089 = load double, double* %228, align 1
  %2090 = fadd double %2089, %2088
  store double %2090, double* %228, align 1, !tbaa !2452
  %2091 = add i64 %2025, -64
  %2092 = add i64 %1902, 134
  store i64 %2092, i64* %PC, align 8
  %2093 = inttoptr i64 %2091 to double*
  %2094 = load double, double* %2093, align 8
  store double %2094, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %2095 = add i64 %2025, 56
  %2096 = add i64 %1902, 138
  store i64 %2096, i64* %PC, align 8
  %2097 = inttoptr i64 %2095 to i64*
  %2098 = load i64, i64* %2097, align 8
  store i64 %2098, i64* %RAX, align 8, !tbaa !2428
  %2099 = add i64 %1902, 142
  store i64 %2099, i64* %PC, align 8
  %2100 = load i32, i32* %2047, align 4
  %2101 = sext i32 %2100 to i64
  store i64 %2101, i64* %RCX, align 8, !tbaa !2428
  %2102 = shl nsw i64 %2101, 3
  %2103 = add i64 %2102, %2098
  %2104 = add i64 %1902, 147
  store i64 %2104, i64* %PC, align 8
  %2105 = inttoptr i64 %2103 to double*
  %2106 = load double, double* %2105, align 8
  %2107 = fmul double %2094, %2106
  store double %2107, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %2108 = add i64 %1902, 151
  store i64 %2108, i64* %PC, align 8
  %2109 = load i64, i64* %2028, align 8
  store i64 %2109, i64* %RAX, align 8, !tbaa !2428
  %2110 = add i64 %1902, 155
  store i64 %2110, i64* %PC, align 8
  %2111 = load i32, i32* %2032, align 4
  %2112 = sext i32 %2111 to i64
  store i64 %2112, i64* %RCX, align 8, !tbaa !2428
  %2113 = shl nsw i64 %2112, 3
  %2114 = add i64 %2113, %2109
  %2115 = add i64 %1902, 160
  store i64 %2115, i64* %PC, align 8
  %2116 = inttoptr i64 %2114 to double*
  %2117 = load double, double* %2116, align 8
  %2118 = fdiv double %2107, %2117
  store double %2118, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %2119 = add i64 %2025, 24
  %2120 = add i64 %1902, 164
  store i64 %2120, i64* %PC, align 8
  %2121 = inttoptr i64 %2119 to i64*
  %2122 = load i64, i64* %2121, align 8
  store i64 %2122, i64* %RAX, align 8, !tbaa !2428
  %2123 = add i64 %1902, 168
  store i64 %2123, i64* %PC, align 8
  %2124 = load i32, i32* %2047, align 4
  %2125 = sext i32 %2124 to i64
  %2126 = mul nsw i64 %2125, 33800
  store i64 %2126, i64* %RCX, align 8, !tbaa !2428
  %2127 = lshr i64 %2126, 63
  %2128 = add i64 %2126, %2122
  store i64 %2128, i64* %RAX, align 8, !tbaa !2428
  %2129 = icmp ult i64 %2128, %2122
  %2130 = icmp ult i64 %2128, %2126
  %2131 = or i1 %2129, %2130
  %2132 = zext i1 %2131 to i8
  store i8 %2132, i8* %42, align 1, !tbaa !2432
  %2133 = trunc i64 %2128 to i32
  %2134 = and i32 %2133, 255
  %2135 = tail call i32 @llvm.ctpop.i32(i32 %2134) #8
  %2136 = trunc i32 %2135 to i8
  %2137 = and i8 %2136, 1
  %2138 = xor i8 %2137, 1
  store i8 %2138, i8* %49, align 1, !tbaa !2446
  %2139 = xor i64 %2126, %2122
  %2140 = xor i64 %2139, %2128
  %2141 = lshr i64 %2140, 4
  %2142 = trunc i64 %2141 to i8
  %2143 = and i8 %2142, 1
  store i8 %2143, i8* %54, align 1, !tbaa !2447
  %2144 = icmp eq i64 %2128, 0
  %2145 = zext i1 %2144 to i8
  store i8 %2145, i8* %57, align 1, !tbaa !2448
  %2146 = lshr i64 %2128, 63
  %2147 = trunc i64 %2146 to i8
  store i8 %2147, i8* %60, align 1, !tbaa !2449
  %2148 = lshr i64 %2122, 63
  %2149 = xor i64 %2146, %2148
  %2150 = xor i64 %2146, %2127
  %2151 = add nuw nsw i64 %2149, %2150
  %2152 = icmp eq i64 %2151, 2
  %2153 = zext i1 %2152 to i8
  store i8 %2153, i8* %66, align 1, !tbaa !2450
  %2154 = load i64, i64* %RBP, align 8
  %2155 = add i64 %2154, -52
  %2156 = add i64 %1902, 182
  store i64 %2156, i64* %PC, align 8
  %2157 = inttoptr i64 %2155 to i32*
  %2158 = load i32, i32* %2157, align 4
  %2159 = sext i32 %2158 to i64
  %2160 = mul nsw i64 %2159, 520
  store i64 %2160, i64* %RCX, align 8, !tbaa !2428
  %2161 = lshr i64 %2160, 63
  %2162 = add i64 %2160, %2128
  store i64 %2162, i64* %RAX, align 8, !tbaa !2428
  %2163 = icmp ult i64 %2162, %2128
  %2164 = icmp ult i64 %2162, %2160
  %2165 = or i1 %2163, %2164
  %2166 = zext i1 %2165 to i8
  store i8 %2166, i8* %42, align 1, !tbaa !2432
  %2167 = trunc i64 %2162 to i32
  %2168 = and i32 %2167, 255
  %2169 = tail call i32 @llvm.ctpop.i32(i32 %2168) #8
  %2170 = trunc i32 %2169 to i8
  %2171 = and i8 %2170, 1
  %2172 = xor i8 %2171, 1
  store i8 %2172, i8* %49, align 1, !tbaa !2446
  %2173 = xor i64 %2160, %2128
  %2174 = xor i64 %2173, %2162
  %2175 = lshr i64 %2174, 4
  %2176 = trunc i64 %2175 to i8
  %2177 = and i8 %2176, 1
  store i8 %2177, i8* %54, align 1, !tbaa !2447
  %2178 = icmp eq i64 %2162, 0
  %2179 = zext i1 %2178 to i8
  store i8 %2179, i8* %57, align 1, !tbaa !2448
  %2180 = lshr i64 %2162, 63
  %2181 = trunc i64 %2180 to i8
  store i8 %2181, i8* %60, align 1, !tbaa !2449
  %2182 = xor i64 %2180, %2146
  %2183 = xor i64 %2180, %2161
  %2184 = add nuw nsw i64 %2182, %2183
  %2185 = icmp eq i64 %2184, 2
  %2186 = zext i1 %2185 to i8
  store i8 %2186, i8* %66, align 1, !tbaa !2450
  %2187 = add i64 %2154, -48
  %2188 = add i64 %1902, 196
  store i64 %2188, i64* %PC, align 8
  %2189 = inttoptr i64 %2187 to i32*
  %2190 = load i32, i32* %2189, align 4
  %2191 = sext i32 %2190 to i64
  store i64 %2191, i64* %RCX, align 8, !tbaa !2428
  %2192 = shl nsw i64 %2191, 3
  %2193 = add i64 %2192, %2162
  %2194 = add i64 %1902, 201
  store i64 %2194, i64* %PC, align 8
  %2195 = load double, double* %231, align 1
  %2196 = inttoptr i64 %2193 to double*
  %2197 = load double, double* %2196, align 8
  %2198 = fmul double %2195, %2197
  store double %2198, double* %231, align 1, !tbaa !2452
  %2199 = load double, double* %228, align 1
  %2200 = fsub double %2199, %2198
  store double %2200, double* %228, align 1, !tbaa !2452
  %2201 = add i64 %2154, 48
  %2202 = add i64 %1902, 209
  store i64 %2202, i64* %PC, align 8
  %2203 = inttoptr i64 %2201 to i64*
  %2204 = load i64, i64* %2203, align 8
  store i64 %2204, i64* %RAX, align 8, !tbaa !2428
  %2205 = add i64 %2154, -100
  %2206 = add i64 %1902, 213
  store i64 %2206, i64* %PC, align 8
  %2207 = inttoptr i64 %2205 to i32*
  %2208 = load i32, i32* %2207, align 4
  %2209 = sext i32 %2208 to i64
  %2210 = mul nsw i64 %2209, 33800
  store i64 %2210, i64* %RCX, align 8, !tbaa !2428
  %2211 = lshr i64 %2210, 63
  %2212 = add i64 %2210, %2204
  store i64 %2212, i64* %RAX, align 8, !tbaa !2428
  %2213 = icmp ult i64 %2212, %2204
  %2214 = icmp ult i64 %2212, %2210
  %2215 = or i1 %2213, %2214
  %2216 = zext i1 %2215 to i8
  store i8 %2216, i8* %42, align 1, !tbaa !2432
  %2217 = trunc i64 %2212 to i32
  %2218 = and i32 %2217, 255
  %2219 = tail call i32 @llvm.ctpop.i32(i32 %2218) #8
  %2220 = trunc i32 %2219 to i8
  %2221 = and i8 %2220, 1
  %2222 = xor i8 %2221, 1
  store i8 %2222, i8* %49, align 1, !tbaa !2446
  %2223 = xor i64 %2210, %2204
  %2224 = xor i64 %2223, %2212
  %2225 = lshr i64 %2224, 4
  %2226 = trunc i64 %2225 to i8
  %2227 = and i8 %2226, 1
  store i8 %2227, i8* %54, align 1, !tbaa !2447
  %2228 = icmp eq i64 %2212, 0
  %2229 = zext i1 %2228 to i8
  store i8 %2229, i8* %57, align 1, !tbaa !2448
  %2230 = lshr i64 %2212, 63
  %2231 = trunc i64 %2230 to i8
  store i8 %2231, i8* %60, align 1, !tbaa !2449
  %2232 = lshr i64 %2204, 63
  %2233 = xor i64 %2230, %2232
  %2234 = xor i64 %2230, %2211
  %2235 = add nuw nsw i64 %2233, %2234
  %2236 = icmp eq i64 %2235, 2
  %2237 = zext i1 %2236 to i8
  store i8 %2237, i8* %66, align 1, !tbaa !2450
  %2238 = load i64, i64* %RBP, align 8
  %2239 = add i64 %2238, -52
  %2240 = add i64 %1902, 227
  store i64 %2240, i64* %PC, align 8
  %2241 = inttoptr i64 %2239 to i32*
  %2242 = load i32, i32* %2241, align 4
  %2243 = sext i32 %2242 to i64
  %2244 = mul nsw i64 %2243, 520
  store i64 %2244, i64* %RCX, align 8, !tbaa !2428
  %2245 = lshr i64 %2244, 63
  %2246 = add i64 %2244, %2212
  store i64 %2246, i64* %RAX, align 8, !tbaa !2428
  %2247 = icmp ult i64 %2246, %2212
  %2248 = icmp ult i64 %2246, %2244
  %2249 = or i1 %2247, %2248
  %2250 = zext i1 %2249 to i8
  store i8 %2250, i8* %42, align 1, !tbaa !2432
  %2251 = trunc i64 %2246 to i32
  %2252 = and i32 %2251, 255
  %2253 = tail call i32 @llvm.ctpop.i32(i32 %2252) #8
  %2254 = trunc i32 %2253 to i8
  %2255 = and i8 %2254, 1
  %2256 = xor i8 %2255, 1
  store i8 %2256, i8* %49, align 1, !tbaa !2446
  %2257 = xor i64 %2244, %2212
  %2258 = xor i64 %2257, %2246
  %2259 = lshr i64 %2258, 4
  %2260 = trunc i64 %2259 to i8
  %2261 = and i8 %2260, 1
  store i8 %2261, i8* %54, align 1, !tbaa !2447
  %2262 = icmp eq i64 %2246, 0
  %2263 = zext i1 %2262 to i8
  store i8 %2263, i8* %57, align 1, !tbaa !2448
  %2264 = lshr i64 %2246, 63
  %2265 = trunc i64 %2264 to i8
  store i8 %2265, i8* %60, align 1, !tbaa !2449
  %2266 = xor i64 %2264, %2230
  %2267 = xor i64 %2264, %2245
  %2268 = add nuw nsw i64 %2266, %2267
  %2269 = icmp eq i64 %2268, 2
  %2270 = zext i1 %2269 to i8
  store i8 %2270, i8* %66, align 1, !tbaa !2450
  %2271 = add i64 %2238, -48
  %2272 = add i64 %1902, 241
  store i64 %2272, i64* %PC, align 8
  %2273 = inttoptr i64 %2271 to i32*
  %2274 = load i32, i32* %2273, align 4
  %2275 = sext i32 %2274 to i64
  store i64 %2275, i64* %RCX, align 8, !tbaa !2428
  %2276 = shl nsw i64 %2275, 3
  %2277 = add i64 %2276, %2246
  %2278 = add i64 %1902, 246
  store i64 %2278, i64* %PC, align 8
  %2279 = load i64, i64* %147, align 1
  %2280 = inttoptr i64 %2277 to i64*
  store i64 %2279, i64* %2280, align 8
  %2281 = load i64, i64* %RBP, align 8
  %2282 = add i64 %2281, 16
  %2283 = load i64, i64* %PC, align 8
  %2284 = add i64 %2283, 4
  store i64 %2284, i64* %PC, align 8
  %2285 = inttoptr i64 %2282 to i64*
  %2286 = load i64, i64* %2285, align 8
  store i64 %2286, i64* %RAX, align 8, !tbaa !2428
  %2287 = add i64 %2281, -100
  %2288 = add i64 %2283, 8
  store i64 %2288, i64* %PC, align 8
  %2289 = inttoptr i64 %2287 to i32*
  %2290 = load i32, i32* %2289, align 4
  %2291 = sext i32 %2290 to i64
  %2292 = mul nsw i64 %2291, 520
  store i64 %2292, i64* %RCX, align 8, !tbaa !2428
  %2293 = lshr i64 %2292, 63
  %2294 = add i64 %2292, %2286
  store i64 %2294, i64* %RAX, align 8, !tbaa !2428
  %2295 = icmp ult i64 %2294, %2286
  %2296 = icmp ult i64 %2294, %2292
  %2297 = or i1 %2295, %2296
  %2298 = zext i1 %2297 to i8
  store i8 %2298, i8* %42, align 1, !tbaa !2432
  %2299 = trunc i64 %2294 to i32
  %2300 = and i32 %2299, 255
  %2301 = tail call i32 @llvm.ctpop.i32(i32 %2300) #8
  %2302 = trunc i32 %2301 to i8
  %2303 = and i8 %2302, 1
  %2304 = xor i8 %2303, 1
  store i8 %2304, i8* %49, align 1, !tbaa !2446
  %2305 = xor i64 %2292, %2286
  %2306 = xor i64 %2305, %2294
  %2307 = lshr i64 %2306, 4
  %2308 = trunc i64 %2307 to i8
  %2309 = and i8 %2308, 1
  store i8 %2309, i8* %54, align 1, !tbaa !2447
  %2310 = icmp eq i64 %2294, 0
  %2311 = zext i1 %2310 to i8
  store i8 %2311, i8* %57, align 1, !tbaa !2448
  %2312 = lshr i64 %2294, 63
  %2313 = trunc i64 %2312 to i8
  store i8 %2313, i8* %60, align 1, !tbaa !2449
  %2314 = lshr i64 %2286, 63
  %2315 = xor i64 %2312, %2314
  %2316 = xor i64 %2312, %2293
  %2317 = add nuw nsw i64 %2315, %2316
  %2318 = icmp eq i64 %2317, 2
  %2319 = zext i1 %2318 to i8
  store i8 %2319, i8* %66, align 1, !tbaa !2450
  %2320 = add i64 %2281, -104
  %2321 = add i64 %2283, 22
  store i64 %2321, i64* %PC, align 8
  %2322 = inttoptr i64 %2320 to i32*
  %2323 = load i32, i32* %2322, align 4
  %2324 = sext i32 %2323 to i64
  store i64 %2324, i64* %RCX, align 8, !tbaa !2428
  %2325 = shl nsw i64 %2324, 3
  %2326 = add i64 %2325, %2294
  %2327 = add i64 %2283, 27
  store i64 %2327, i64* %PC, align 8
  %2328 = inttoptr i64 %2326 to i64*
  %2329 = load i64, i64* %2328, align 8
  store i64 %2329, i64* %147, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %2330 = add i64 %2281, 24
  %2331 = add i64 %2283, 31
  store i64 %2331, i64* %PC, align 8
  %2332 = inttoptr i64 %2330 to i64*
  %2333 = load i64, i64* %2332, align 8
  store i64 %2333, i64* %RAX, align 8, !tbaa !2428
  %2334 = add i64 %2283, 35
  store i64 %2334, i64* %PC, align 8
  %2335 = load i32, i32* %2289, align 4
  %2336 = sext i32 %2335 to i64
  %2337 = mul nsw i64 %2336, 33800
  store i64 %2337, i64* %RCX, align 8, !tbaa !2428
  %2338 = lshr i64 %2337, 63
  %2339 = add i64 %2337, %2333
  store i64 %2339, i64* %RAX, align 8, !tbaa !2428
  %2340 = icmp ult i64 %2339, %2333
  %2341 = icmp ult i64 %2339, %2337
  %2342 = or i1 %2340, %2341
  %2343 = zext i1 %2342 to i8
  store i8 %2343, i8* %42, align 1, !tbaa !2432
  %2344 = trunc i64 %2339 to i32
  %2345 = and i32 %2344, 255
  %2346 = tail call i32 @llvm.ctpop.i32(i32 %2345) #8
  %2347 = trunc i32 %2346 to i8
  %2348 = and i8 %2347, 1
  %2349 = xor i8 %2348, 1
  store i8 %2349, i8* %49, align 1, !tbaa !2446
  %2350 = xor i64 %2337, %2333
  %2351 = xor i64 %2350, %2339
  %2352 = lshr i64 %2351, 4
  %2353 = trunc i64 %2352 to i8
  %2354 = and i8 %2353, 1
  store i8 %2354, i8* %54, align 1, !tbaa !2447
  %2355 = icmp eq i64 %2339, 0
  %2356 = zext i1 %2355 to i8
  store i8 %2356, i8* %57, align 1, !tbaa !2448
  %2357 = lshr i64 %2339, 63
  %2358 = trunc i64 %2357 to i8
  store i8 %2358, i8* %60, align 1, !tbaa !2449
  %2359 = lshr i64 %2333, 63
  %2360 = xor i64 %2357, %2359
  %2361 = xor i64 %2357, %2338
  %2362 = add nuw nsw i64 %2360, %2361
  %2363 = icmp eq i64 %2362, 2
  %2364 = zext i1 %2363 to i8
  store i8 %2364, i8* %66, align 1, !tbaa !2450
  %2365 = load i64, i64* %RBP, align 8
  %2366 = add i64 %2365, -52
  %2367 = add i64 %2283, 49
  store i64 %2367, i64* %PC, align 8
  %2368 = inttoptr i64 %2366 to i32*
  %2369 = load i32, i32* %2368, align 4
  %2370 = sext i32 %2369 to i64
  %2371 = mul nsw i64 %2370, 520
  store i64 %2371, i64* %RCX, align 8, !tbaa !2428
  %2372 = lshr i64 %2371, 63
  %2373 = add i64 %2371, %2339
  store i64 %2373, i64* %RAX, align 8, !tbaa !2428
  %2374 = icmp ult i64 %2373, %2339
  %2375 = icmp ult i64 %2373, %2371
  %2376 = or i1 %2374, %2375
  %2377 = zext i1 %2376 to i8
  store i8 %2377, i8* %42, align 1, !tbaa !2432
  %2378 = trunc i64 %2373 to i32
  %2379 = and i32 %2378, 255
  %2380 = tail call i32 @llvm.ctpop.i32(i32 %2379) #8
  %2381 = trunc i32 %2380 to i8
  %2382 = and i8 %2381, 1
  %2383 = xor i8 %2382, 1
  store i8 %2383, i8* %49, align 1, !tbaa !2446
  %2384 = xor i64 %2371, %2339
  %2385 = xor i64 %2384, %2373
  %2386 = lshr i64 %2385, 4
  %2387 = trunc i64 %2386 to i8
  %2388 = and i8 %2387, 1
  store i8 %2388, i8* %54, align 1, !tbaa !2447
  %2389 = icmp eq i64 %2373, 0
  %2390 = zext i1 %2389 to i8
  store i8 %2390, i8* %57, align 1, !tbaa !2448
  %2391 = lshr i64 %2373, 63
  %2392 = trunc i64 %2391 to i8
  store i8 %2392, i8* %60, align 1, !tbaa !2449
  %2393 = xor i64 %2391, %2357
  %2394 = xor i64 %2391, %2372
  %2395 = add nuw nsw i64 %2393, %2394
  %2396 = icmp eq i64 %2395, 2
  %2397 = zext i1 %2396 to i8
  store i8 %2397, i8* %66, align 1, !tbaa !2450
  %2398 = add i64 %2365, -48
  %2399 = add i64 %2283, 63
  store i64 %2399, i64* %PC, align 8
  %2400 = inttoptr i64 %2398 to i32*
  %2401 = load i32, i32* %2400, align 4
  %2402 = sext i32 %2401 to i64
  store i64 %2402, i64* %RCX, align 8, !tbaa !2428
  %2403 = shl nsw i64 %2402, 3
  %2404 = add i64 %2403, %2373
  %2405 = add i64 %2283, 68
  store i64 %2405, i64* %PC, align 8
  %2406 = load i64, i64* %147, align 1
  %2407 = inttoptr i64 %2404 to i64*
  store i64 %2406, i64* %2407, align 8
  %2408 = load i64, i64* %RBP, align 8
  %2409 = add i64 %2408, -104
  %2410 = load i64, i64* %PC, align 8
  %2411 = add i64 %2410, 3
  store i64 %2411, i64* %PC, align 8
  %2412 = inttoptr i64 %2409 to i32*
  %2413 = load i32, i32* %2412, align 4
  %2414 = add i32 %2413, 1
  %2415 = zext i32 %2414 to i64
  store i64 %2415, i64* %RAX, align 8, !tbaa !2428
  %2416 = icmp eq i32 %2413, -1
  %2417 = icmp eq i32 %2414, 0
  %2418 = or i1 %2416, %2417
  %2419 = zext i1 %2418 to i8
  store i8 %2419, i8* %42, align 1, !tbaa !2432
  %2420 = and i32 %2414, 255
  %2421 = tail call i32 @llvm.ctpop.i32(i32 %2420) #8
  %2422 = trunc i32 %2421 to i8
  %2423 = and i8 %2422, 1
  %2424 = xor i8 %2423, 1
  store i8 %2424, i8* %49, align 1, !tbaa !2446
  %2425 = xor i32 %2413, %2414
  %2426 = lshr i32 %2425, 4
  %2427 = trunc i32 %2426 to i8
  %2428 = and i8 %2427, 1
  store i8 %2428, i8* %54, align 1, !tbaa !2447
  %2429 = zext i1 %2417 to i8
  store i8 %2429, i8* %57, align 1, !tbaa !2448
  %2430 = lshr i32 %2414, 31
  %2431 = trunc i32 %2430 to i8
  store i8 %2431, i8* %60, align 1, !tbaa !2449
  %2432 = lshr i32 %2413, 31
  %2433 = xor i32 %2430, %2432
  %2434 = add nuw nsw i32 %2433, %2430
  %2435 = icmp eq i32 %2434, 2
  %2436 = zext i1 %2435 to i8
  store i8 %2436, i8* %66, align 1, !tbaa !2450
  %2437 = add i64 %2410, 9
  store i64 %2437, i64* %PC, align 8
  store i32 %2414, i32* %2412, align 4
  %2438 = load i64, i64* %PC, align 8
  %2439 = add i64 %2438, -2643
  store i64 %2439, i64* %PC, align 8, !tbaa !2428
  br label %block_40148d

block_4019de:                                     ; preds = %block_4019d2
  %2440 = add i64 %401, 36
  store i64 %2440, i64* %PC, align 8
  %2441 = load i32, i32* %368, align 4
  %2442 = sext i32 %2441 to i64
  store i64 %2442, i64* %RCX, align 8, !tbaa !2428
  %2443 = shl nsw i64 %2442, 3
  %2444 = add i64 %2443, %447
  %2445 = add i64 %401, 41
  store i64 %2445, i64* %PC, align 8
  %2446 = inttoptr i64 %2444 to double*
  %2447 = load double, double* %2446, align 8
  store double %2447, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %2448 = add i64 %365, -80
  %2449 = add i64 %401, 45
  store i64 %2449, i64* %PC, align 8
  %2450 = inttoptr i64 %2448 to i64*
  %2451 = load i64, i64* %2450, align 8
  store i64 %2451, i64* %RAX, align 8, !tbaa !2428
  %2452 = add i64 %401, 49
  store i64 %2452, i64* %PC, align 8
  %2453 = load i32, i32* %408, align 4
  %2454 = sext i32 %2453 to i64
  %2455 = mul nsw i64 %2454, 520
  store i64 %2455, i64* %RCX, align 8, !tbaa !2428
  %2456 = lshr i64 %2455, 63
  %2457 = add i64 %2455, %2451
  store i64 %2457, i64* %RAX, align 8, !tbaa !2428
  %2458 = icmp ult i64 %2457, %2451
  %2459 = icmp ult i64 %2457, %2455
  %2460 = or i1 %2458, %2459
  %2461 = zext i1 %2460 to i8
  store i8 %2461, i8* %42, align 1, !tbaa !2432
  %2462 = trunc i64 %2457 to i32
  %2463 = and i32 %2462, 255
  %2464 = tail call i32 @llvm.ctpop.i32(i32 %2463) #8
  %2465 = trunc i32 %2464 to i8
  %2466 = and i8 %2465, 1
  %2467 = xor i8 %2466, 1
  store i8 %2467, i8* %49, align 1, !tbaa !2446
  %2468 = xor i64 %2455, %2451
  %2469 = xor i64 %2468, %2457
  %2470 = lshr i64 %2469, 4
  %2471 = trunc i64 %2470 to i8
  %2472 = and i8 %2471, 1
  store i8 %2472, i8* %54, align 1, !tbaa !2447
  %2473 = icmp eq i64 %2457, 0
  %2474 = zext i1 %2473 to i8
  store i8 %2474, i8* %57, align 1, !tbaa !2448
  %2475 = lshr i64 %2457, 63
  %2476 = trunc i64 %2475 to i8
  store i8 %2476, i8* %60, align 1, !tbaa !2449
  %2477 = lshr i64 %2451, 63
  %2478 = xor i64 %2475, %2477
  %2479 = xor i64 %2475, %2456
  %2480 = add nuw nsw i64 %2478, %2479
  %2481 = icmp eq i64 %2480, 2
  %2482 = zext i1 %2481 to i8
  store i8 %2482, i8* %66, align 1, !tbaa !2450
  %2483 = add i64 %401, 63
  store i64 %2483, i64* %PC, align 8
  %2484 = load i32, i32* %368, align 4
  %2485 = sext i32 %2484 to i64
  store i64 %2485, i64* %RCX, align 8, !tbaa !2428
  %2486 = shl nsw i64 %2485, 3
  %2487 = add i64 %2486, %2457
  %2488 = add i64 %401, 68
  store i64 %2488, i64* %PC, align 8
  %2489 = inttoptr i64 %2487 to double*
  %2490 = load double, double* %2489, align 8
  %2491 = fsub double %2447, %2490
  store double %2491, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %2492 = load i64, i64* %RBP, align 8
  %2493 = add i64 %2492, 40
  %2494 = add i64 %401, 72
  store i64 %2494, i64* %PC, align 8
  %2495 = inttoptr i64 %2493 to i64*
  %2496 = load i64, i64* %2495, align 8
  store i64 %2496, i64* %RAX, align 8, !tbaa !2428
  %2497 = add i64 %2492, -100
  %2498 = add i64 %401, 76
  store i64 %2498, i64* %PC, align 8
  %2499 = inttoptr i64 %2497 to i32*
  %2500 = load i32, i32* %2499, align 4
  %2501 = sext i32 %2500 to i64
  %2502 = mul nsw i64 %2501, 33800
  store i64 %2502, i64* %RCX, align 8, !tbaa !2428
  %2503 = lshr i64 %2502, 63
  %2504 = add i64 %2502, %2496
  store i64 %2504, i64* %RAX, align 8, !tbaa !2428
  %2505 = icmp ult i64 %2504, %2496
  %2506 = icmp ult i64 %2504, %2502
  %2507 = or i1 %2505, %2506
  %2508 = zext i1 %2507 to i8
  store i8 %2508, i8* %42, align 1, !tbaa !2432
  %2509 = trunc i64 %2504 to i32
  %2510 = and i32 %2509, 255
  %2511 = tail call i32 @llvm.ctpop.i32(i32 %2510) #8
  %2512 = trunc i32 %2511 to i8
  %2513 = and i8 %2512, 1
  %2514 = xor i8 %2513, 1
  store i8 %2514, i8* %49, align 1, !tbaa !2446
  %2515 = xor i64 %2502, %2496
  %2516 = xor i64 %2515, %2504
  %2517 = lshr i64 %2516, 4
  %2518 = trunc i64 %2517 to i8
  %2519 = and i8 %2518, 1
  store i8 %2519, i8* %54, align 1, !tbaa !2447
  %2520 = icmp eq i64 %2504, 0
  %2521 = zext i1 %2520 to i8
  store i8 %2521, i8* %57, align 1, !tbaa !2448
  %2522 = lshr i64 %2504, 63
  %2523 = trunc i64 %2522 to i8
  store i8 %2523, i8* %60, align 1, !tbaa !2449
  %2524 = lshr i64 %2496, 63
  %2525 = xor i64 %2522, %2524
  %2526 = xor i64 %2522, %2503
  %2527 = add nuw nsw i64 %2525, %2526
  %2528 = icmp eq i64 %2527, 2
  %2529 = zext i1 %2528 to i8
  store i8 %2529, i8* %66, align 1, !tbaa !2450
  %2530 = add i64 %2492, -52
  %2531 = add i64 %401, 90
  store i64 %2531, i64* %PC, align 8
  %2532 = inttoptr i64 %2530 to i32*
  %2533 = load i32, i32* %2532, align 4
  %2534 = sext i32 %2533 to i64
  %2535 = mul nsw i64 %2534, 520
  store i64 %2535, i64* %RCX, align 8, !tbaa !2428
  %2536 = lshr i64 %2535, 63
  %2537 = add i64 %2535, %2504
  store i64 %2537, i64* %RAX, align 8, !tbaa !2428
  %2538 = icmp ult i64 %2537, %2504
  %2539 = icmp ult i64 %2537, %2535
  %2540 = or i1 %2538, %2539
  %2541 = zext i1 %2540 to i8
  store i8 %2541, i8* %42, align 1, !tbaa !2432
  %2542 = trunc i64 %2537 to i32
  %2543 = and i32 %2542, 255
  %2544 = tail call i32 @llvm.ctpop.i32(i32 %2543) #8
  %2545 = trunc i32 %2544 to i8
  %2546 = and i8 %2545, 1
  %2547 = xor i8 %2546, 1
  store i8 %2547, i8* %49, align 1, !tbaa !2446
  %2548 = xor i64 %2535, %2504
  %2549 = xor i64 %2548, %2537
  %2550 = lshr i64 %2549, 4
  %2551 = trunc i64 %2550 to i8
  %2552 = and i8 %2551, 1
  store i8 %2552, i8* %54, align 1, !tbaa !2447
  %2553 = icmp eq i64 %2537, 0
  %2554 = zext i1 %2553 to i8
  store i8 %2554, i8* %57, align 1, !tbaa !2448
  %2555 = lshr i64 %2537, 63
  %2556 = trunc i64 %2555 to i8
  store i8 %2556, i8* %60, align 1, !tbaa !2449
  %2557 = xor i64 %2555, %2522
  %2558 = xor i64 %2555, %2536
  %2559 = add nuw nsw i64 %2557, %2558
  %2560 = icmp eq i64 %2559, 2
  %2561 = zext i1 %2560 to i8
  store i8 %2561, i8* %66, align 1, !tbaa !2450
  %2562 = add i64 %2492, -108
  %2563 = add i64 %401, 103
  store i64 %2563, i64* %PC, align 8
  %2564 = inttoptr i64 %2562 to i32*
  %2565 = load i32, i32* %2564, align 4
  %2566 = add i32 %2565, 1
  %2567 = zext i32 %2566 to i64
  store i64 %2567, i64* %RDX, align 8, !tbaa !2428
  %2568 = icmp eq i32 %2565, -1
  %2569 = icmp eq i32 %2566, 0
  %2570 = or i1 %2568, %2569
  %2571 = zext i1 %2570 to i8
  store i8 %2571, i8* %42, align 1, !tbaa !2432
  %2572 = and i32 %2566, 255
  %2573 = tail call i32 @llvm.ctpop.i32(i32 %2572) #8
  %2574 = trunc i32 %2573 to i8
  %2575 = and i8 %2574, 1
  %2576 = xor i8 %2575, 1
  store i8 %2576, i8* %49, align 1, !tbaa !2446
  %2577 = xor i32 %2565, %2566
  %2578 = lshr i32 %2577, 4
  %2579 = trunc i32 %2578 to i8
  %2580 = and i8 %2579, 1
  store i8 %2580, i8* %54, align 1, !tbaa !2447
  %2581 = zext i1 %2569 to i8
  store i8 %2581, i8* %57, align 1, !tbaa !2448
  %2582 = lshr i32 %2566, 31
  %2583 = trunc i32 %2582 to i8
  store i8 %2583, i8* %60, align 1, !tbaa !2449
  %2584 = lshr i32 %2565, 31
  %2585 = xor i32 %2582, %2584
  %2586 = add nuw nsw i32 %2585, %2582
  %2587 = icmp eq i32 %2586, 2
  %2588 = zext i1 %2587 to i8
  store i8 %2588, i8* %66, align 1, !tbaa !2450
  %2589 = sext i32 %2566 to i64
  store i64 %2589, i64* %RCX, align 8, !tbaa !2428
  %2590 = shl nsw i64 %2589, 3
  %2591 = add i64 %2590, %2537
  %2592 = add i64 %401, 114
  store i64 %2592, i64* %PC, align 8
  %2593 = load double, double* %228, align 1
  %2594 = inttoptr i64 %2591 to double*
  %2595 = load double, double* %2594, align 8
  %2596 = fadd double %2593, %2595
  store double %2596, double* %228, align 1, !tbaa !2452
  %2597 = add i64 %401, 118
  store i64 %2597, i64* %PC, align 8
  %2598 = load i64, i64* %2495, align 8
  store i64 %2598, i64* %RAX, align 8, !tbaa !2428
  %2599 = add i64 %401, 122
  store i64 %2599, i64* %PC, align 8
  %2600 = load i32, i32* %2499, align 4
  %2601 = sext i32 %2600 to i64
  %2602 = mul nsw i64 %2601, 33800
  store i64 %2602, i64* %RCX, align 8, !tbaa !2428
  %2603 = lshr i64 %2602, 63
  %2604 = add i64 %2602, %2598
  store i64 %2604, i64* %RAX, align 8, !tbaa !2428
  %2605 = icmp ult i64 %2604, %2598
  %2606 = icmp ult i64 %2604, %2602
  %2607 = or i1 %2605, %2606
  %2608 = zext i1 %2607 to i8
  store i8 %2608, i8* %42, align 1, !tbaa !2432
  %2609 = trunc i64 %2604 to i32
  %2610 = and i32 %2609, 255
  %2611 = tail call i32 @llvm.ctpop.i32(i32 %2610) #8
  %2612 = trunc i32 %2611 to i8
  %2613 = and i8 %2612, 1
  %2614 = xor i8 %2613, 1
  store i8 %2614, i8* %49, align 1, !tbaa !2446
  %2615 = xor i64 %2602, %2598
  %2616 = xor i64 %2615, %2604
  %2617 = lshr i64 %2616, 4
  %2618 = trunc i64 %2617 to i8
  %2619 = and i8 %2618, 1
  store i8 %2619, i8* %54, align 1, !tbaa !2447
  %2620 = icmp eq i64 %2604, 0
  %2621 = zext i1 %2620 to i8
  store i8 %2621, i8* %57, align 1, !tbaa !2448
  %2622 = lshr i64 %2604, 63
  %2623 = trunc i64 %2622 to i8
  store i8 %2623, i8* %60, align 1, !tbaa !2449
  %2624 = lshr i64 %2598, 63
  %2625 = xor i64 %2622, %2624
  %2626 = xor i64 %2622, %2603
  %2627 = add nuw nsw i64 %2625, %2626
  %2628 = icmp eq i64 %2627, 2
  %2629 = zext i1 %2628 to i8
  store i8 %2629, i8* %66, align 1, !tbaa !2450
  %2630 = load i64, i64* %RBP, align 8
  %2631 = add i64 %2630, -52
  %2632 = add i64 %401, 136
  store i64 %2632, i64* %PC, align 8
  %2633 = inttoptr i64 %2631 to i32*
  %2634 = load i32, i32* %2633, align 4
  %2635 = sext i32 %2634 to i64
  %2636 = mul nsw i64 %2635, 520
  store i64 %2636, i64* %RCX, align 8, !tbaa !2428
  %2637 = lshr i64 %2636, 63
  %2638 = add i64 %2636, %2604
  store i64 %2638, i64* %RAX, align 8, !tbaa !2428
  %2639 = icmp ult i64 %2638, %2604
  %2640 = icmp ult i64 %2638, %2636
  %2641 = or i1 %2639, %2640
  %2642 = zext i1 %2641 to i8
  store i8 %2642, i8* %42, align 1, !tbaa !2432
  %2643 = trunc i64 %2638 to i32
  %2644 = and i32 %2643, 255
  %2645 = tail call i32 @llvm.ctpop.i32(i32 %2644) #8
  %2646 = trunc i32 %2645 to i8
  %2647 = and i8 %2646, 1
  %2648 = xor i8 %2647, 1
  store i8 %2648, i8* %49, align 1, !tbaa !2446
  %2649 = xor i64 %2636, %2604
  %2650 = xor i64 %2649, %2638
  %2651 = lshr i64 %2650, 4
  %2652 = trunc i64 %2651 to i8
  %2653 = and i8 %2652, 1
  store i8 %2653, i8* %54, align 1, !tbaa !2447
  %2654 = icmp eq i64 %2638, 0
  %2655 = zext i1 %2654 to i8
  store i8 %2655, i8* %57, align 1, !tbaa !2448
  %2656 = lshr i64 %2638, 63
  %2657 = trunc i64 %2656 to i8
  store i8 %2657, i8* %60, align 1, !tbaa !2449
  %2658 = xor i64 %2656, %2622
  %2659 = xor i64 %2656, %2637
  %2660 = add nuw nsw i64 %2658, %2659
  %2661 = icmp eq i64 %2660, 2
  %2662 = zext i1 %2661 to i8
  store i8 %2662, i8* %66, align 1, !tbaa !2450
  %2663 = add i64 %2630, -108
  %2664 = add i64 %401, 150
  store i64 %2664, i64* %PC, align 8
  %2665 = inttoptr i64 %2663 to i32*
  %2666 = load i32, i32* %2665, align 4
  %2667 = sext i32 %2666 to i64
  store i64 %2667, i64* %RCX, align 8, !tbaa !2428
  %2668 = shl nsw i64 %2667, 3
  %2669 = add i64 %2668, %2638
  %2670 = add i64 %401, 155
  store i64 %2670, i64* %PC, align 8
  %2671 = inttoptr i64 %2669 to double*
  %2672 = load double, double* %2671, align 8
  %2673 = fsub double %2596, %2672
  store double %2673, double* %228, align 1, !tbaa !2452
  %2674 = add i64 %2630, -96
  %2675 = add i64 %401, 159
  store i64 %2675, i64* %PC, align 8
  %2676 = inttoptr i64 %2674 to i64*
  %2677 = load i64, i64* %2676, align 8
  store i64 %2677, i64* %RAX, align 8, !tbaa !2428
  %2678 = add i64 %2630, -100
  %2679 = add i64 %401, 163
  store i64 %2679, i64* %PC, align 8
  %2680 = inttoptr i64 %2678 to i32*
  %2681 = load i32, i32* %2680, align 4
  %2682 = sext i32 %2681 to i64
  %2683 = mul nsw i64 %2682, 520
  store i64 %2683, i64* %RCX, align 8, !tbaa !2428
  %2684 = lshr i64 %2683, 63
  %2685 = add i64 %2683, %2677
  store i64 %2685, i64* %RAX, align 8, !tbaa !2428
  %2686 = icmp ult i64 %2685, %2677
  %2687 = icmp ult i64 %2685, %2683
  %2688 = or i1 %2686, %2687
  %2689 = zext i1 %2688 to i8
  store i8 %2689, i8* %42, align 1, !tbaa !2432
  %2690 = trunc i64 %2685 to i32
  %2691 = and i32 %2690, 255
  %2692 = tail call i32 @llvm.ctpop.i32(i32 %2691) #8
  %2693 = trunc i32 %2692 to i8
  %2694 = and i8 %2693, 1
  %2695 = xor i8 %2694, 1
  store i8 %2695, i8* %49, align 1, !tbaa !2446
  %2696 = xor i64 %2683, %2677
  %2697 = xor i64 %2696, %2685
  %2698 = lshr i64 %2697, 4
  %2699 = trunc i64 %2698 to i8
  %2700 = and i8 %2699, 1
  store i8 %2700, i8* %54, align 1, !tbaa !2447
  %2701 = icmp eq i64 %2685, 0
  %2702 = zext i1 %2701 to i8
  store i8 %2702, i8* %57, align 1, !tbaa !2448
  %2703 = lshr i64 %2685, 63
  %2704 = trunc i64 %2703 to i8
  store i8 %2704, i8* %60, align 1, !tbaa !2449
  %2705 = lshr i64 %2677, 63
  %2706 = xor i64 %2703, %2705
  %2707 = xor i64 %2703, %2684
  %2708 = add nuw nsw i64 %2706, %2707
  %2709 = icmp eq i64 %2708, 2
  %2710 = zext i1 %2709 to i8
  store i8 %2710, i8* %66, align 1, !tbaa !2450
  %2711 = load i64, i64* %RBP, align 8
  %2712 = add i64 %2711, -104
  %2713 = add i64 %401, 177
  store i64 %2713, i64* %PC, align 8
  %2714 = inttoptr i64 %2712 to i32*
  %2715 = load i32, i32* %2714, align 4
  %2716 = sext i32 %2715 to i64
  store i64 %2716, i64* %RCX, align 8, !tbaa !2428
  %2717 = shl nsw i64 %2716, 3
  %2718 = add i64 %2717, %2685
  %2719 = add i64 %401, 182
  store i64 %2719, i64* %PC, align 8
  %2720 = inttoptr i64 %2718 to double*
  store double %2673, double* %2720, align 8
  %2721 = load i64, i64* %RBP, align 8
  %2722 = add i64 %2721, 88
  %2723 = load i64, i64* %PC, align 8
  %2724 = add i64 %2723, 4
  store i64 %2724, i64* %PC, align 8
  %2725 = inttoptr i64 %2722 to i64*
  %2726 = load i64, i64* %2725, align 8
  store i64 %2726, i64* %RAX, align 8, !tbaa !2428
  %2727 = add i64 %2721, -52
  %2728 = add i64 %2723, 8
  store i64 %2728, i64* %PC, align 8
  %2729 = inttoptr i64 %2727 to i32*
  %2730 = load i32, i32* %2729, align 4
  %2731 = sext i32 %2730 to i64
  store i64 %2731, i64* %RCX, align 8, !tbaa !2428
  %2732 = shl nsw i64 %2731, 3
  %2733 = add i64 %2732, %2726
  %2734 = add i64 %2723, 13
  store i64 %2734, i64* %PC, align 8
  %2735 = inttoptr i64 %2733 to double*
  %2736 = load double, double* %2735, align 8
  store double %2736, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %2737 = add i64 %2721, 96
  %2738 = add i64 %2723, 17
  store i64 %2738, i64* %PC, align 8
  %2739 = inttoptr i64 %2737 to i64*
  %2740 = load i64, i64* %2739, align 8
  store i64 %2740, i64* %RAX, align 8, !tbaa !2428
  %2741 = add i64 %2721, -104
  %2742 = add i64 %2723, 21
  store i64 %2742, i64* %PC, align 8
  %2743 = inttoptr i64 %2741 to i32*
  %2744 = load i32, i32* %2743, align 4
  %2745 = sext i32 %2744 to i64
  store i64 %2745, i64* %RCX, align 8, !tbaa !2428
  %2746 = shl nsw i64 %2745, 3
  %2747 = add i64 %2746, %2740
  %2748 = add i64 %2723, 26
  store i64 %2748, i64* %PC, align 8
  %2749 = inttoptr i64 %2747 to double*
  %2750 = load double, double* %2749, align 8
  %2751 = fdiv double %2736, %2750
  store double %2751, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %2752 = add i64 %2721, 24
  %2753 = add i64 %2723, 30
  store i64 %2753, i64* %PC, align 8
  %2754 = inttoptr i64 %2752 to i64*
  %2755 = load i64, i64* %2754, align 8
  store i64 %2755, i64* %RAX, align 8, !tbaa !2428
  %2756 = add i64 %2721, -100
  %2757 = add i64 %2723, 34
  store i64 %2757, i64* %PC, align 8
  %2758 = inttoptr i64 %2756 to i32*
  %2759 = load i32, i32* %2758, align 4
  %2760 = sext i32 %2759 to i64
  %2761 = mul nsw i64 %2760, 33800
  store i64 %2761, i64* %RCX, align 8, !tbaa !2428
  %2762 = lshr i64 %2761, 63
  %2763 = add i64 %2761, %2755
  store i64 %2763, i64* %RAX, align 8, !tbaa !2428
  %2764 = icmp ult i64 %2763, %2755
  %2765 = icmp ult i64 %2763, %2761
  %2766 = or i1 %2764, %2765
  %2767 = zext i1 %2766 to i8
  store i8 %2767, i8* %42, align 1, !tbaa !2432
  %2768 = trunc i64 %2763 to i32
  %2769 = and i32 %2768, 255
  %2770 = tail call i32 @llvm.ctpop.i32(i32 %2769) #8
  %2771 = trunc i32 %2770 to i8
  %2772 = and i8 %2771, 1
  %2773 = xor i8 %2772, 1
  store i8 %2773, i8* %49, align 1, !tbaa !2446
  %2774 = xor i64 %2761, %2755
  %2775 = xor i64 %2774, %2763
  %2776 = lshr i64 %2775, 4
  %2777 = trunc i64 %2776 to i8
  %2778 = and i8 %2777, 1
  store i8 %2778, i8* %54, align 1, !tbaa !2447
  %2779 = icmp eq i64 %2763, 0
  %2780 = zext i1 %2779 to i8
  store i8 %2780, i8* %57, align 1, !tbaa !2448
  %2781 = lshr i64 %2763, 63
  %2782 = trunc i64 %2781 to i8
  store i8 %2782, i8* %60, align 1, !tbaa !2449
  %2783 = lshr i64 %2755, 63
  %2784 = xor i64 %2781, %2783
  %2785 = xor i64 %2781, %2762
  %2786 = add nuw nsw i64 %2784, %2785
  %2787 = icmp eq i64 %2786, 2
  %2788 = zext i1 %2787 to i8
  store i8 %2788, i8* %66, align 1, !tbaa !2450
  %2789 = add i64 %2723, 48
  store i64 %2789, i64* %PC, align 8
  %2790 = load i32, i32* %2743, align 4
  %2791 = sext i32 %2790 to i64
  %2792 = mul nsw i64 %2791, 520
  store i64 %2792, i64* %RCX, align 8, !tbaa !2428
  %2793 = lshr i64 %2792, 63
  %2794 = add i64 %2792, %2763
  store i64 %2794, i64* %RAX, align 8, !tbaa !2428
  %2795 = icmp ult i64 %2794, %2763
  %2796 = icmp ult i64 %2794, %2792
  %2797 = or i1 %2795, %2796
  %2798 = zext i1 %2797 to i8
  store i8 %2798, i8* %42, align 1, !tbaa !2432
  %2799 = trunc i64 %2794 to i32
  %2800 = and i32 %2799, 255
  %2801 = tail call i32 @llvm.ctpop.i32(i32 %2800) #8
  %2802 = trunc i32 %2801 to i8
  %2803 = and i8 %2802, 1
  %2804 = xor i8 %2803, 1
  store i8 %2804, i8* %49, align 1, !tbaa !2446
  %2805 = xor i64 %2792, %2763
  %2806 = xor i64 %2805, %2794
  %2807 = lshr i64 %2806, 4
  %2808 = trunc i64 %2807 to i8
  %2809 = and i8 %2808, 1
  store i8 %2809, i8* %54, align 1, !tbaa !2447
  %2810 = icmp eq i64 %2794, 0
  %2811 = zext i1 %2810 to i8
  store i8 %2811, i8* %57, align 1, !tbaa !2448
  %2812 = lshr i64 %2794, 63
  %2813 = trunc i64 %2812 to i8
  store i8 %2813, i8* %60, align 1, !tbaa !2449
  %2814 = xor i64 %2812, %2781
  %2815 = xor i64 %2812, %2793
  %2816 = add nuw nsw i64 %2814, %2815
  %2817 = icmp eq i64 %2816, 2
  %2818 = zext i1 %2817 to i8
  store i8 %2818, i8* %66, align 1, !tbaa !2450
  %2819 = add i64 %2721, -108
  %2820 = add i64 %2723, 62
  store i64 %2820, i64* %PC, align 8
  %2821 = inttoptr i64 %2819 to i32*
  %2822 = load i32, i32* %2821, align 4
  %2823 = sext i32 %2822 to i64
  store i64 %2823, i64* %RCX, align 8, !tbaa !2428
  %2824 = shl nsw i64 %2823, 3
  %2825 = add i64 %2824, %2794
  %2826 = add i64 %2723, 67
  store i64 %2826, i64* %PC, align 8
  %2827 = load double, double* %228, align 1
  %2828 = inttoptr i64 %2825 to double*
  %2829 = load double, double* %2828, align 8
  %2830 = fmul double %2827, %2829
  store double %2830, double* %228, align 1, !tbaa !2452
  %2831 = add i64 %2721, -72
  %2832 = add i64 %2723, 72
  store i64 %2832, i64* %PC, align 8
  %2833 = inttoptr i64 %2831 to double*
  %2834 = load double, double* %2833, align 8
  store double %2834, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %2835 = add i64 %2723, 76
  store i64 %2835, i64* %PC, align 8
  %2836 = load i64, i64* %2739, align 8
  store i64 %2836, i64* %RAX, align 8, !tbaa !2428
  %2837 = add i64 %2723, 80
  store i64 %2837, i64* %PC, align 8
  %2838 = load i32, i32* %2743, align 4
  %2839 = sext i32 %2838 to i64
  store i64 %2839, i64* %RCX, align 8, !tbaa !2428
  %2840 = shl nsw i64 %2839, 3
  %2841 = add i64 %2840, %2836
  %2842 = add i64 %2723, 85
  store i64 %2842, i64* %PC, align 8
  %2843 = inttoptr i64 %2841 to double*
  %2844 = load double, double* %2843, align 8
  %2845 = fdiv double %2834, %2844
  store double %2845, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %2846 = load i64, i64* %RBP, align 8
  %2847 = add i64 %2846, -96
  %2848 = add i64 %2723, 89
  store i64 %2848, i64* %PC, align 8
  %2849 = inttoptr i64 %2847 to i64*
  %2850 = load i64, i64* %2849, align 8
  store i64 %2850, i64* %RAX, align 8, !tbaa !2428
  %2851 = add i64 %2846, -100
  %2852 = add i64 %2723, 93
  store i64 %2852, i64* %PC, align 8
  %2853 = inttoptr i64 %2851 to i32*
  %2854 = load i32, i32* %2853, align 4
  %2855 = sext i32 %2854 to i64
  %2856 = mul nsw i64 %2855, 520
  store i64 %2856, i64* %RCX, align 8, !tbaa !2428
  %2857 = lshr i64 %2856, 63
  %2858 = add i64 %2856, %2850
  store i64 %2858, i64* %RAX, align 8, !tbaa !2428
  %2859 = icmp ult i64 %2858, %2850
  %2860 = icmp ult i64 %2858, %2856
  %2861 = or i1 %2859, %2860
  %2862 = zext i1 %2861 to i8
  store i8 %2862, i8* %42, align 1, !tbaa !2432
  %2863 = trunc i64 %2858 to i32
  %2864 = and i32 %2863, 255
  %2865 = tail call i32 @llvm.ctpop.i32(i32 %2864) #8
  %2866 = trunc i32 %2865 to i8
  %2867 = and i8 %2866, 1
  %2868 = xor i8 %2867, 1
  store i8 %2868, i8* %49, align 1, !tbaa !2446
  %2869 = xor i64 %2856, %2850
  %2870 = xor i64 %2869, %2858
  %2871 = lshr i64 %2870, 4
  %2872 = trunc i64 %2871 to i8
  %2873 = and i8 %2872, 1
  store i8 %2873, i8* %54, align 1, !tbaa !2447
  %2874 = icmp eq i64 %2858, 0
  %2875 = zext i1 %2874 to i8
  store i8 %2875, i8* %57, align 1, !tbaa !2448
  %2876 = lshr i64 %2858, 63
  %2877 = trunc i64 %2876 to i8
  store i8 %2877, i8* %60, align 1, !tbaa !2449
  %2878 = lshr i64 %2850, 63
  %2879 = xor i64 %2876, %2878
  %2880 = xor i64 %2876, %2857
  %2881 = add nuw nsw i64 %2879, %2880
  %2882 = icmp eq i64 %2881, 2
  %2883 = zext i1 %2882 to i8
  store i8 %2883, i8* %66, align 1, !tbaa !2450
  %2884 = add i64 %2846, -104
  %2885 = add i64 %2723, 107
  store i64 %2885, i64* %PC, align 8
  %2886 = inttoptr i64 %2884 to i32*
  %2887 = load i32, i32* %2886, align 4
  %2888 = sext i32 %2887 to i64
  store i64 %2888, i64* %RCX, align 8, !tbaa !2428
  %2889 = shl nsw i64 %2888, 3
  %2890 = add i64 %2889, %2858
  %2891 = add i64 %2723, 112
  store i64 %2891, i64* %PC, align 8
  %2892 = inttoptr i64 %2890 to double*
  %2893 = load double, double* %2892, align 8
  %2894 = fmul double %2845, %2893
  store double %2894, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %2895 = fsub double %2830, %2894
  store double %2895, double* %228, align 1, !tbaa !2452
  %2896 = add i64 %2846, 16
  %2897 = add i64 %2723, 120
  store i64 %2897, i64* %PC, align 8
  %2898 = inttoptr i64 %2896 to i64*
  %2899 = load i64, i64* %2898, align 8
  store i64 %2899, i64* %RAX, align 8, !tbaa !2428
  %2900 = add i64 %2723, 124
  store i64 %2900, i64* %PC, align 8
  %2901 = load i32, i32* %2853, align 4
  %2902 = sext i32 %2901 to i64
  %2903 = mul nsw i64 %2902, 520
  store i64 %2903, i64* %RCX, align 8, !tbaa !2428
  %2904 = lshr i64 %2903, 63
  %2905 = add i64 %2903, %2899
  store i64 %2905, i64* %RAX, align 8, !tbaa !2428
  %2906 = icmp ult i64 %2905, %2899
  %2907 = icmp ult i64 %2905, %2903
  %2908 = or i1 %2906, %2907
  %2909 = zext i1 %2908 to i8
  store i8 %2909, i8* %42, align 1, !tbaa !2432
  %2910 = trunc i64 %2905 to i32
  %2911 = and i32 %2910, 255
  %2912 = tail call i32 @llvm.ctpop.i32(i32 %2911) #8
  %2913 = trunc i32 %2912 to i8
  %2914 = and i8 %2913, 1
  %2915 = xor i8 %2914, 1
  store i8 %2915, i8* %49, align 1, !tbaa !2446
  %2916 = xor i64 %2903, %2899
  %2917 = xor i64 %2916, %2905
  %2918 = lshr i64 %2917, 4
  %2919 = trunc i64 %2918 to i8
  %2920 = and i8 %2919, 1
  store i8 %2920, i8* %54, align 1, !tbaa !2447
  %2921 = icmp eq i64 %2905, 0
  %2922 = zext i1 %2921 to i8
  store i8 %2922, i8* %57, align 1, !tbaa !2448
  %2923 = lshr i64 %2905, 63
  %2924 = trunc i64 %2923 to i8
  store i8 %2924, i8* %60, align 1, !tbaa !2449
  %2925 = lshr i64 %2899, 63
  %2926 = xor i64 %2923, %2925
  %2927 = xor i64 %2923, %2904
  %2928 = add nuw nsw i64 %2926, %2927
  %2929 = icmp eq i64 %2928, 2
  %2930 = zext i1 %2929 to i8
  store i8 %2930, i8* %66, align 1, !tbaa !2450
  %2931 = add i64 %2723, 138
  store i64 %2931, i64* %PC, align 8
  %2932 = load i32, i32* %2886, align 4
  %2933 = sext i32 %2932 to i64
  store i64 %2933, i64* %RCX, align 8, !tbaa !2428
  %2934 = shl nsw i64 %2933, 3
  %2935 = add i64 %2934, %2905
  %2936 = add i64 %2723, 143
  store i64 %2936, i64* %PC, align 8
  %2937 = inttoptr i64 %2935 to double*
  store double %2895, double* %2937, align 8
  %2938 = load i64, i64* %RBP, align 8
  %2939 = add i64 %2938, 72
  %2940 = load i64, i64* %PC, align 8
  %2941 = add i64 %2940, 4
  store i64 %2941, i64* %PC, align 8
  %2942 = inttoptr i64 %2939 to i64*
  %2943 = load i64, i64* %2942, align 8
  store i64 %2943, i64* %RAX, align 8, !tbaa !2428
  %2944 = add i64 %2938, -108
  %2945 = add i64 %2940, 8
  store i64 %2945, i64* %PC, align 8
  %2946 = inttoptr i64 %2944 to i32*
  %2947 = load i32, i32* %2946, align 4
  %2948 = sext i32 %2947 to i64
  store i64 %2948, i64* %RCX, align 8, !tbaa !2428
  %2949 = shl nsw i64 %2948, 3
  %2950 = add i64 %2949, %2943
  %2951 = add i64 %2940, 13
  store i64 %2951, i64* %PC, align 8
  %2952 = inttoptr i64 %2950 to double*
  %2953 = load double, double* %2952, align 8
  store double %2953, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %2954 = add i64 %2938, 80
  %2955 = add i64 %2940, 17
  store i64 %2955, i64* %PC, align 8
  %2956 = inttoptr i64 %2954 to i64*
  %2957 = load i64, i64* %2956, align 8
  store i64 %2957, i64* %RAX, align 8, !tbaa !2428
  %2958 = add i64 %2940, 21
  store i64 %2958, i64* %PC, align 8
  %2959 = load i32, i32* %2946, align 4
  %2960 = sext i32 %2959 to i64
  store i64 %2960, i64* %RCX, align 8, !tbaa !2428
  %2961 = shl nsw i64 %2960, 3
  %2962 = add i64 %2961, %2957
  %2963 = add i64 %2940, 26
  store i64 %2963, i64* %PC, align 8
  %2964 = inttoptr i64 %2962 to double*
  %2965 = load double, double* %2964, align 8
  %2966 = fdiv double %2953, %2965
  store double %2966, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %2967 = add i64 %2938, 48
  %2968 = add i64 %2940, 30
  store i64 %2968, i64* %PC, align 8
  %2969 = inttoptr i64 %2967 to i64*
  %2970 = load i64, i64* %2969, align 8
  store i64 %2970, i64* %RAX, align 8, !tbaa !2428
  %2971 = add i64 %2938, -100
  %2972 = add i64 %2940, 34
  store i64 %2972, i64* %PC, align 8
  %2973 = inttoptr i64 %2971 to i32*
  %2974 = load i32, i32* %2973, align 4
  %2975 = sext i32 %2974 to i64
  %2976 = mul nsw i64 %2975, 33800
  store i64 %2976, i64* %RCX, align 8, !tbaa !2428
  %2977 = lshr i64 %2976, 63
  %2978 = add i64 %2976, %2970
  store i64 %2978, i64* %RAX, align 8, !tbaa !2428
  %2979 = icmp ult i64 %2978, %2970
  %2980 = icmp ult i64 %2978, %2976
  %2981 = or i1 %2979, %2980
  %2982 = zext i1 %2981 to i8
  store i8 %2982, i8* %42, align 1, !tbaa !2432
  %2983 = trunc i64 %2978 to i32
  %2984 = and i32 %2983, 255
  %2985 = tail call i32 @llvm.ctpop.i32(i32 %2984) #8
  %2986 = trunc i32 %2985 to i8
  %2987 = and i8 %2986, 1
  %2988 = xor i8 %2987, 1
  store i8 %2988, i8* %49, align 1, !tbaa !2446
  %2989 = xor i64 %2976, %2970
  %2990 = xor i64 %2989, %2978
  %2991 = lshr i64 %2990, 4
  %2992 = trunc i64 %2991 to i8
  %2993 = and i8 %2992, 1
  store i8 %2993, i8* %54, align 1, !tbaa !2447
  %2994 = icmp eq i64 %2978, 0
  %2995 = zext i1 %2994 to i8
  store i8 %2995, i8* %57, align 1, !tbaa !2448
  %2996 = lshr i64 %2978, 63
  %2997 = trunc i64 %2996 to i8
  store i8 %2997, i8* %60, align 1, !tbaa !2449
  %2998 = lshr i64 %2970, 63
  %2999 = xor i64 %2996, %2998
  %3000 = xor i64 %2996, %2977
  %3001 = add nuw nsw i64 %2999, %3000
  %3002 = icmp eq i64 %3001, 2
  %3003 = zext i1 %3002 to i8
  store i8 %3003, i8* %66, align 1, !tbaa !2450
  %3004 = add i64 %2938, -52
  %3005 = add i64 %2940, 48
  store i64 %3005, i64* %PC, align 8
  %3006 = inttoptr i64 %3004 to i32*
  %3007 = load i32, i32* %3006, align 4
  %3008 = sext i32 %3007 to i64
  %3009 = mul nsw i64 %3008, 520
  store i64 %3009, i64* %RCX, align 8, !tbaa !2428
  %3010 = lshr i64 %3009, 63
  %3011 = add i64 %3009, %2978
  store i64 %3011, i64* %RAX, align 8, !tbaa !2428
  %3012 = icmp ult i64 %3011, %2978
  %3013 = icmp ult i64 %3011, %3009
  %3014 = or i1 %3012, %3013
  %3015 = zext i1 %3014 to i8
  store i8 %3015, i8* %42, align 1, !tbaa !2432
  %3016 = trunc i64 %3011 to i32
  %3017 = and i32 %3016, 255
  %3018 = tail call i32 @llvm.ctpop.i32(i32 %3017) #8
  %3019 = trunc i32 %3018 to i8
  %3020 = and i8 %3019, 1
  %3021 = xor i8 %3020, 1
  store i8 %3021, i8* %49, align 1, !tbaa !2446
  %3022 = xor i64 %3009, %2978
  %3023 = xor i64 %3022, %3011
  %3024 = lshr i64 %3023, 4
  %3025 = trunc i64 %3024 to i8
  %3026 = and i8 %3025, 1
  store i8 %3026, i8* %54, align 1, !tbaa !2447
  %3027 = icmp eq i64 %3011, 0
  %3028 = zext i1 %3027 to i8
  store i8 %3028, i8* %57, align 1, !tbaa !2448
  %3029 = lshr i64 %3011, 63
  %3030 = trunc i64 %3029 to i8
  store i8 %3030, i8* %60, align 1, !tbaa !2449
  %3031 = xor i64 %3029, %2996
  %3032 = xor i64 %3029, %3010
  %3033 = add nuw nsw i64 %3031, %3032
  %3034 = icmp eq i64 %3033, 2
  %3035 = zext i1 %3034 to i8
  store i8 %3035, i8* %66, align 1, !tbaa !2450
  %3036 = add i64 %2940, 62
  store i64 %3036, i64* %PC, align 8
  %3037 = load i32, i32* %2946, align 4
  %3038 = sext i32 %3037 to i64
  store i64 %3038, i64* %RCX, align 8, !tbaa !2428
  %3039 = shl nsw i64 %3038, 3
  %3040 = add i64 %3039, %3011
  %3041 = add i64 %2940, 67
  store i64 %3041, i64* %PC, align 8
  %3042 = load double, double* %228, align 1
  %3043 = inttoptr i64 %3040 to double*
  %3044 = load double, double* %3043, align 8
  %3045 = fmul double %3042, %3044
  store double %3045, double* %228, align 1, !tbaa !2452
  %3046 = add i64 %2938, -64
  %3047 = add i64 %2940, 72
  store i64 %3047, i64* %PC, align 8
  %3048 = inttoptr i64 %3046 to double*
  %3049 = load double, double* %3048, align 8
  store double %3049, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %3050 = add i64 %2938, 64
  %3051 = add i64 %2940, 76
  store i64 %3051, i64* %PC, align 8
  %3052 = inttoptr i64 %3050 to i64*
  %3053 = load i64, i64* %3052, align 8
  store i64 %3053, i64* %RAX, align 8, !tbaa !2428
  %3054 = add i64 %2940, 80
  store i64 %3054, i64* %PC, align 8
  %3055 = load i32, i32* %2973, align 4
  %3056 = sext i32 %3055 to i64
  store i64 %3056, i64* %RCX, align 8, !tbaa !2428
  %3057 = shl nsw i64 %3056, 3
  %3058 = add i64 %3057, %3053
  %3059 = add i64 %2940, 85
  store i64 %3059, i64* %PC, align 8
  %3060 = inttoptr i64 %3058 to double*
  %3061 = load double, double* %3060, align 8
  %3062 = fmul double %3049, %3061
  store double %3062, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %3063 = load i64, i64* %RBP, align 8
  %3064 = add i64 %3063, 80
  %3065 = add i64 %2940, 89
  store i64 %3065, i64* %PC, align 8
  %3066 = inttoptr i64 %3064 to i64*
  %3067 = load i64, i64* %3066, align 8
  store i64 %3067, i64* %RAX, align 8, !tbaa !2428
  %3068 = add i64 %3063, -108
  %3069 = add i64 %2940, 93
  store i64 %3069, i64* %PC, align 8
  %3070 = inttoptr i64 %3068 to i32*
  %3071 = load i32, i32* %3070, align 4
  %3072 = sext i32 %3071 to i64
  store i64 %3072, i64* %RCX, align 8, !tbaa !2428
  %3073 = shl nsw i64 %3072, 3
  %3074 = add i64 %3073, %3067
  %3075 = add i64 %2940, 98
  store i64 %3075, i64* %PC, align 8
  %3076 = inttoptr i64 %3074 to double*
  %3077 = load double, double* %3076, align 8
  %3078 = fdiv double %3062, %3077
  store double %3078, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %3079 = add i64 %3063, 16
  %3080 = add i64 %2940, 102
  store i64 %3080, i64* %PC, align 8
  %3081 = inttoptr i64 %3079 to i64*
  %3082 = load i64, i64* %3081, align 8
  store i64 %3082, i64* %RAX, align 8, !tbaa !2428
  %3083 = add i64 %3063, -100
  %3084 = add i64 %2940, 106
  store i64 %3084, i64* %PC, align 8
  %3085 = inttoptr i64 %3083 to i32*
  %3086 = load i32, i32* %3085, align 4
  %3087 = sext i32 %3086 to i64
  %3088 = mul nsw i64 %3087, 520
  store i64 %3088, i64* %RCX, align 8, !tbaa !2428
  %3089 = lshr i64 %3088, 63
  %3090 = add i64 %3088, %3082
  store i64 %3090, i64* %RAX, align 8, !tbaa !2428
  %3091 = icmp ult i64 %3090, %3082
  %3092 = icmp ult i64 %3090, %3088
  %3093 = or i1 %3091, %3092
  %3094 = zext i1 %3093 to i8
  store i8 %3094, i8* %42, align 1, !tbaa !2432
  %3095 = trunc i64 %3090 to i32
  %3096 = and i32 %3095, 255
  %3097 = tail call i32 @llvm.ctpop.i32(i32 %3096) #8
  %3098 = trunc i32 %3097 to i8
  %3099 = and i8 %3098, 1
  %3100 = xor i8 %3099, 1
  store i8 %3100, i8* %49, align 1, !tbaa !2446
  %3101 = xor i64 %3088, %3082
  %3102 = xor i64 %3101, %3090
  %3103 = lshr i64 %3102, 4
  %3104 = trunc i64 %3103 to i8
  %3105 = and i8 %3104, 1
  store i8 %3105, i8* %54, align 1, !tbaa !2447
  %3106 = icmp eq i64 %3090, 0
  %3107 = zext i1 %3106 to i8
  store i8 %3107, i8* %57, align 1, !tbaa !2448
  %3108 = lshr i64 %3090, 63
  %3109 = trunc i64 %3108 to i8
  store i8 %3109, i8* %60, align 1, !tbaa !2449
  %3110 = lshr i64 %3082, 63
  %3111 = xor i64 %3108, %3110
  %3112 = xor i64 %3108, %3089
  %3113 = add nuw nsw i64 %3111, %3112
  %3114 = icmp eq i64 %3113, 2
  %3115 = zext i1 %3114 to i8
  store i8 %3115, i8* %66, align 1, !tbaa !2450
  %3116 = add i64 %3063, -104
  %3117 = add i64 %2940, 120
  store i64 %3117, i64* %PC, align 8
  %3118 = inttoptr i64 %3116 to i32*
  %3119 = load i32, i32* %3118, align 4
  %3120 = sext i32 %3119 to i64
  store i64 %3120, i64* %RCX, align 8, !tbaa !2428
  %3121 = shl nsw i64 %3120, 3
  %3122 = add i64 %3121, %3090
  %3123 = add i64 %2940, 125
  store i64 %3123, i64* %PC, align 8
  %3124 = inttoptr i64 %3122 to double*
  %3125 = load double, double* %3124, align 8
  %3126 = fmul double %3078, %3125
  store double %3126, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %3127 = load double, double* %228, align 1
  %3128 = fadd double %3127, %3126
  store double %3128, double* %228, align 1, !tbaa !2452
  %3129 = add i64 %3063, -64
  %3130 = add i64 %2940, 134
  store i64 %3130, i64* %PC, align 8
  %3131 = inttoptr i64 %3129 to double*
  %3132 = load double, double* %3131, align 8
  store double %3132, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %3133 = add i64 %3063, 56
  %3134 = add i64 %2940, 138
  store i64 %3134, i64* %PC, align 8
  %3135 = inttoptr i64 %3133 to i64*
  %3136 = load i64, i64* %3135, align 8
  store i64 %3136, i64* %RAX, align 8, !tbaa !2428
  %3137 = add i64 %2940, 142
  store i64 %3137, i64* %PC, align 8
  %3138 = load i32, i32* %3085, align 4
  %3139 = sext i32 %3138 to i64
  store i64 %3139, i64* %RCX, align 8, !tbaa !2428
  %3140 = shl nsw i64 %3139, 3
  %3141 = add i64 %3140, %3136
  %3142 = add i64 %2940, 147
  store i64 %3142, i64* %PC, align 8
  %3143 = inttoptr i64 %3141 to double*
  %3144 = load double, double* %3143, align 8
  %3145 = fmul double %3132, %3144
  store double %3145, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %3146 = add i64 %2940, 151
  store i64 %3146, i64* %PC, align 8
  %3147 = load i64, i64* %3066, align 8
  store i64 %3147, i64* %RAX, align 8, !tbaa !2428
  %3148 = add i64 %2940, 155
  store i64 %3148, i64* %PC, align 8
  %3149 = load i32, i32* %3070, align 4
  %3150 = sext i32 %3149 to i64
  store i64 %3150, i64* %RCX, align 8, !tbaa !2428
  %3151 = shl nsw i64 %3150, 3
  %3152 = add i64 %3151, %3147
  %3153 = add i64 %2940, 160
  store i64 %3153, i64* %PC, align 8
  %3154 = inttoptr i64 %3152 to double*
  %3155 = load double, double* %3154, align 8
  %3156 = fdiv double %3145, %3155
  store double %3156, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %3157 = add i64 %3063, 24
  %3158 = add i64 %2940, 164
  store i64 %3158, i64* %PC, align 8
  %3159 = inttoptr i64 %3157 to i64*
  %3160 = load i64, i64* %3159, align 8
  store i64 %3160, i64* %RAX, align 8, !tbaa !2428
  %3161 = add i64 %2940, 168
  store i64 %3161, i64* %PC, align 8
  %3162 = load i32, i32* %3085, align 4
  %3163 = sext i32 %3162 to i64
  %3164 = mul nsw i64 %3163, 33800
  store i64 %3164, i64* %RCX, align 8, !tbaa !2428
  %3165 = lshr i64 %3164, 63
  %3166 = add i64 %3164, %3160
  store i64 %3166, i64* %RAX, align 8, !tbaa !2428
  %3167 = icmp ult i64 %3166, %3160
  %3168 = icmp ult i64 %3166, %3164
  %3169 = or i1 %3167, %3168
  %3170 = zext i1 %3169 to i8
  store i8 %3170, i8* %42, align 1, !tbaa !2432
  %3171 = trunc i64 %3166 to i32
  %3172 = and i32 %3171, 255
  %3173 = tail call i32 @llvm.ctpop.i32(i32 %3172) #8
  %3174 = trunc i32 %3173 to i8
  %3175 = and i8 %3174, 1
  %3176 = xor i8 %3175, 1
  store i8 %3176, i8* %49, align 1, !tbaa !2446
  %3177 = xor i64 %3164, %3160
  %3178 = xor i64 %3177, %3166
  %3179 = lshr i64 %3178, 4
  %3180 = trunc i64 %3179 to i8
  %3181 = and i8 %3180, 1
  store i8 %3181, i8* %54, align 1, !tbaa !2447
  %3182 = icmp eq i64 %3166, 0
  %3183 = zext i1 %3182 to i8
  store i8 %3183, i8* %57, align 1, !tbaa !2448
  %3184 = lshr i64 %3166, 63
  %3185 = trunc i64 %3184 to i8
  store i8 %3185, i8* %60, align 1, !tbaa !2449
  %3186 = lshr i64 %3160, 63
  %3187 = xor i64 %3184, %3186
  %3188 = xor i64 %3184, %3165
  %3189 = add nuw nsw i64 %3187, %3188
  %3190 = icmp eq i64 %3189, 2
  %3191 = zext i1 %3190 to i8
  store i8 %3191, i8* %66, align 1, !tbaa !2450
  %3192 = load i64, i64* %RBP, align 8
  %3193 = add i64 %3192, -52
  %3194 = add i64 %2940, 182
  store i64 %3194, i64* %PC, align 8
  %3195 = inttoptr i64 %3193 to i32*
  %3196 = load i32, i32* %3195, align 4
  %3197 = sext i32 %3196 to i64
  %3198 = mul nsw i64 %3197, 520
  store i64 %3198, i64* %RCX, align 8, !tbaa !2428
  %3199 = lshr i64 %3198, 63
  %3200 = add i64 %3198, %3166
  store i64 %3200, i64* %RAX, align 8, !tbaa !2428
  %3201 = icmp ult i64 %3200, %3166
  %3202 = icmp ult i64 %3200, %3198
  %3203 = or i1 %3201, %3202
  %3204 = zext i1 %3203 to i8
  store i8 %3204, i8* %42, align 1, !tbaa !2432
  %3205 = trunc i64 %3200 to i32
  %3206 = and i32 %3205, 255
  %3207 = tail call i32 @llvm.ctpop.i32(i32 %3206) #8
  %3208 = trunc i32 %3207 to i8
  %3209 = and i8 %3208, 1
  %3210 = xor i8 %3209, 1
  store i8 %3210, i8* %49, align 1, !tbaa !2446
  %3211 = xor i64 %3198, %3166
  %3212 = xor i64 %3211, %3200
  %3213 = lshr i64 %3212, 4
  %3214 = trunc i64 %3213 to i8
  %3215 = and i8 %3214, 1
  store i8 %3215, i8* %54, align 1, !tbaa !2447
  %3216 = icmp eq i64 %3200, 0
  %3217 = zext i1 %3216 to i8
  store i8 %3217, i8* %57, align 1, !tbaa !2448
  %3218 = lshr i64 %3200, 63
  %3219 = trunc i64 %3218 to i8
  store i8 %3219, i8* %60, align 1, !tbaa !2449
  %3220 = xor i64 %3218, %3184
  %3221 = xor i64 %3218, %3199
  %3222 = add nuw nsw i64 %3220, %3221
  %3223 = icmp eq i64 %3222, 2
  %3224 = zext i1 %3223 to i8
  store i8 %3224, i8* %66, align 1, !tbaa !2450
  %3225 = add i64 %3192, -108
  %3226 = add i64 %2940, 196
  store i64 %3226, i64* %PC, align 8
  %3227 = inttoptr i64 %3225 to i32*
  %3228 = load i32, i32* %3227, align 4
  %3229 = sext i32 %3228 to i64
  store i64 %3229, i64* %RCX, align 8, !tbaa !2428
  %3230 = shl nsw i64 %3229, 3
  %3231 = add i64 %3230, %3200
  %3232 = add i64 %2940, 201
  store i64 %3232, i64* %PC, align 8
  %3233 = load double, double* %231, align 1
  %3234 = inttoptr i64 %3231 to double*
  %3235 = load double, double* %3234, align 8
  %3236 = fmul double %3233, %3235
  store double %3236, double* %231, align 1, !tbaa !2452
  %3237 = load double, double* %228, align 1
  %3238 = fsub double %3237, %3236
  store double %3238, double* %228, align 1, !tbaa !2452
  %3239 = add i64 %3192, 48
  %3240 = add i64 %2940, 209
  store i64 %3240, i64* %PC, align 8
  %3241 = inttoptr i64 %3239 to i64*
  %3242 = load i64, i64* %3241, align 8
  store i64 %3242, i64* %RAX, align 8, !tbaa !2428
  %3243 = add i64 %3192, -100
  %3244 = add i64 %2940, 213
  store i64 %3244, i64* %PC, align 8
  %3245 = inttoptr i64 %3243 to i32*
  %3246 = load i32, i32* %3245, align 4
  %3247 = sext i32 %3246 to i64
  %3248 = mul nsw i64 %3247, 33800
  store i64 %3248, i64* %RCX, align 8, !tbaa !2428
  %3249 = lshr i64 %3248, 63
  %3250 = add i64 %3248, %3242
  store i64 %3250, i64* %RAX, align 8, !tbaa !2428
  %3251 = icmp ult i64 %3250, %3242
  %3252 = icmp ult i64 %3250, %3248
  %3253 = or i1 %3251, %3252
  %3254 = zext i1 %3253 to i8
  store i8 %3254, i8* %42, align 1, !tbaa !2432
  %3255 = trunc i64 %3250 to i32
  %3256 = and i32 %3255, 255
  %3257 = tail call i32 @llvm.ctpop.i32(i32 %3256) #8
  %3258 = trunc i32 %3257 to i8
  %3259 = and i8 %3258, 1
  %3260 = xor i8 %3259, 1
  store i8 %3260, i8* %49, align 1, !tbaa !2446
  %3261 = xor i64 %3248, %3242
  %3262 = xor i64 %3261, %3250
  %3263 = lshr i64 %3262, 4
  %3264 = trunc i64 %3263 to i8
  %3265 = and i8 %3264, 1
  store i8 %3265, i8* %54, align 1, !tbaa !2447
  %3266 = icmp eq i64 %3250, 0
  %3267 = zext i1 %3266 to i8
  store i8 %3267, i8* %57, align 1, !tbaa !2448
  %3268 = lshr i64 %3250, 63
  %3269 = trunc i64 %3268 to i8
  store i8 %3269, i8* %60, align 1, !tbaa !2449
  %3270 = lshr i64 %3242, 63
  %3271 = xor i64 %3268, %3270
  %3272 = xor i64 %3268, %3249
  %3273 = add nuw nsw i64 %3271, %3272
  %3274 = icmp eq i64 %3273, 2
  %3275 = zext i1 %3274 to i8
  store i8 %3275, i8* %66, align 1, !tbaa !2450
  %3276 = load i64, i64* %RBP, align 8
  %3277 = add i64 %3276, -52
  %3278 = add i64 %2940, 227
  store i64 %3278, i64* %PC, align 8
  %3279 = inttoptr i64 %3277 to i32*
  %3280 = load i32, i32* %3279, align 4
  %3281 = sext i32 %3280 to i64
  %3282 = mul nsw i64 %3281, 520
  store i64 %3282, i64* %RCX, align 8, !tbaa !2428
  %3283 = lshr i64 %3282, 63
  %3284 = add i64 %3282, %3250
  store i64 %3284, i64* %RAX, align 8, !tbaa !2428
  %3285 = icmp ult i64 %3284, %3250
  %3286 = icmp ult i64 %3284, %3282
  %3287 = or i1 %3285, %3286
  %3288 = zext i1 %3287 to i8
  store i8 %3288, i8* %42, align 1, !tbaa !2432
  %3289 = trunc i64 %3284 to i32
  %3290 = and i32 %3289, 255
  %3291 = tail call i32 @llvm.ctpop.i32(i32 %3290) #8
  %3292 = trunc i32 %3291 to i8
  %3293 = and i8 %3292, 1
  %3294 = xor i8 %3293, 1
  store i8 %3294, i8* %49, align 1, !tbaa !2446
  %3295 = xor i64 %3282, %3250
  %3296 = xor i64 %3295, %3284
  %3297 = lshr i64 %3296, 4
  %3298 = trunc i64 %3297 to i8
  %3299 = and i8 %3298, 1
  store i8 %3299, i8* %54, align 1, !tbaa !2447
  %3300 = icmp eq i64 %3284, 0
  %3301 = zext i1 %3300 to i8
  store i8 %3301, i8* %57, align 1, !tbaa !2448
  %3302 = lshr i64 %3284, 63
  %3303 = trunc i64 %3302 to i8
  store i8 %3303, i8* %60, align 1, !tbaa !2449
  %3304 = xor i64 %3302, %3268
  %3305 = xor i64 %3302, %3283
  %3306 = add nuw nsw i64 %3304, %3305
  %3307 = icmp eq i64 %3306, 2
  %3308 = zext i1 %3307 to i8
  store i8 %3308, i8* %66, align 1, !tbaa !2450
  %3309 = add i64 %3276, -108
  %3310 = add i64 %2940, 241
  store i64 %3310, i64* %PC, align 8
  %3311 = inttoptr i64 %3309 to i32*
  %3312 = load i32, i32* %3311, align 4
  %3313 = sext i32 %3312 to i64
  store i64 %3313, i64* %RCX, align 8, !tbaa !2428
  %3314 = shl nsw i64 %3313, 3
  %3315 = add i64 %3314, %3284
  %3316 = add i64 %2940, 246
  store i64 %3316, i64* %PC, align 8
  %3317 = load i64, i64* %147, align 1
  %3318 = inttoptr i64 %3315 to i64*
  store i64 %3317, i64* %3318, align 8
  %3319 = load i64, i64* %RBP, align 8
  %3320 = add i64 %3319, 16
  %3321 = load i64, i64* %PC, align 8
  %3322 = add i64 %3321, 4
  store i64 %3322, i64* %PC, align 8
  %3323 = inttoptr i64 %3320 to i64*
  %3324 = load i64, i64* %3323, align 8
  store i64 %3324, i64* %RAX, align 8, !tbaa !2428
  %3325 = add i64 %3319, -100
  %3326 = add i64 %3321, 8
  store i64 %3326, i64* %PC, align 8
  %3327 = inttoptr i64 %3325 to i32*
  %3328 = load i32, i32* %3327, align 4
  %3329 = sext i32 %3328 to i64
  %3330 = mul nsw i64 %3329, 520
  store i64 %3330, i64* %RCX, align 8, !tbaa !2428
  %3331 = lshr i64 %3330, 63
  %3332 = add i64 %3330, %3324
  store i64 %3332, i64* %RAX, align 8, !tbaa !2428
  %3333 = icmp ult i64 %3332, %3324
  %3334 = icmp ult i64 %3332, %3330
  %3335 = or i1 %3333, %3334
  %3336 = zext i1 %3335 to i8
  store i8 %3336, i8* %42, align 1, !tbaa !2432
  %3337 = trunc i64 %3332 to i32
  %3338 = and i32 %3337, 255
  %3339 = tail call i32 @llvm.ctpop.i32(i32 %3338) #8
  %3340 = trunc i32 %3339 to i8
  %3341 = and i8 %3340, 1
  %3342 = xor i8 %3341, 1
  store i8 %3342, i8* %49, align 1, !tbaa !2446
  %3343 = xor i64 %3330, %3324
  %3344 = xor i64 %3343, %3332
  %3345 = lshr i64 %3344, 4
  %3346 = trunc i64 %3345 to i8
  %3347 = and i8 %3346, 1
  store i8 %3347, i8* %54, align 1, !tbaa !2447
  %3348 = icmp eq i64 %3332, 0
  %3349 = zext i1 %3348 to i8
  store i8 %3349, i8* %57, align 1, !tbaa !2448
  %3350 = lshr i64 %3332, 63
  %3351 = trunc i64 %3350 to i8
  store i8 %3351, i8* %60, align 1, !tbaa !2449
  %3352 = lshr i64 %3324, 63
  %3353 = xor i64 %3350, %3352
  %3354 = xor i64 %3350, %3331
  %3355 = add nuw nsw i64 %3353, %3354
  %3356 = icmp eq i64 %3355, 2
  %3357 = zext i1 %3356 to i8
  store i8 %3357, i8* %66, align 1, !tbaa !2450
  %3358 = add i64 %3319, -104
  %3359 = add i64 %3321, 22
  store i64 %3359, i64* %PC, align 8
  %3360 = inttoptr i64 %3358 to i32*
  %3361 = load i32, i32* %3360, align 4
  %3362 = sext i32 %3361 to i64
  store i64 %3362, i64* %RCX, align 8, !tbaa !2428
  %3363 = shl nsw i64 %3362, 3
  %3364 = add i64 %3363, %3332
  %3365 = add i64 %3321, 27
  store i64 %3365, i64* %PC, align 8
  %3366 = inttoptr i64 %3364 to i64*
  %3367 = load i64, i64* %3366, align 8
  store i64 %3367, i64* %147, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %3368 = add i64 %3319, 24
  %3369 = add i64 %3321, 31
  store i64 %3369, i64* %PC, align 8
  %3370 = inttoptr i64 %3368 to i64*
  %3371 = load i64, i64* %3370, align 8
  store i64 %3371, i64* %RAX, align 8, !tbaa !2428
  %3372 = add i64 %3321, 35
  store i64 %3372, i64* %PC, align 8
  %3373 = load i32, i32* %3327, align 4
  %3374 = sext i32 %3373 to i64
  %3375 = mul nsw i64 %3374, 33800
  store i64 %3375, i64* %RCX, align 8, !tbaa !2428
  %3376 = lshr i64 %3375, 63
  %3377 = add i64 %3375, %3371
  store i64 %3377, i64* %RAX, align 8, !tbaa !2428
  %3378 = icmp ult i64 %3377, %3371
  %3379 = icmp ult i64 %3377, %3375
  %3380 = or i1 %3378, %3379
  %3381 = zext i1 %3380 to i8
  store i8 %3381, i8* %42, align 1, !tbaa !2432
  %3382 = trunc i64 %3377 to i32
  %3383 = and i32 %3382, 255
  %3384 = tail call i32 @llvm.ctpop.i32(i32 %3383) #8
  %3385 = trunc i32 %3384 to i8
  %3386 = and i8 %3385, 1
  %3387 = xor i8 %3386, 1
  store i8 %3387, i8* %49, align 1, !tbaa !2446
  %3388 = xor i64 %3375, %3371
  %3389 = xor i64 %3388, %3377
  %3390 = lshr i64 %3389, 4
  %3391 = trunc i64 %3390 to i8
  %3392 = and i8 %3391, 1
  store i8 %3392, i8* %54, align 1, !tbaa !2447
  %3393 = icmp eq i64 %3377, 0
  %3394 = zext i1 %3393 to i8
  store i8 %3394, i8* %57, align 1, !tbaa !2448
  %3395 = lshr i64 %3377, 63
  %3396 = trunc i64 %3395 to i8
  store i8 %3396, i8* %60, align 1, !tbaa !2449
  %3397 = lshr i64 %3371, 63
  %3398 = xor i64 %3395, %3397
  %3399 = xor i64 %3395, %3376
  %3400 = add nuw nsw i64 %3398, %3399
  %3401 = icmp eq i64 %3400, 2
  %3402 = zext i1 %3401 to i8
  store i8 %3402, i8* %66, align 1, !tbaa !2450
  %3403 = load i64, i64* %RBP, align 8
  %3404 = add i64 %3403, -52
  %3405 = add i64 %3321, 49
  store i64 %3405, i64* %PC, align 8
  %3406 = inttoptr i64 %3404 to i32*
  %3407 = load i32, i32* %3406, align 4
  %3408 = sext i32 %3407 to i64
  %3409 = mul nsw i64 %3408, 520
  store i64 %3409, i64* %RCX, align 8, !tbaa !2428
  %3410 = lshr i64 %3409, 63
  %3411 = add i64 %3409, %3377
  store i64 %3411, i64* %RAX, align 8, !tbaa !2428
  %3412 = icmp ult i64 %3411, %3377
  %3413 = icmp ult i64 %3411, %3409
  %3414 = or i1 %3412, %3413
  %3415 = zext i1 %3414 to i8
  store i8 %3415, i8* %42, align 1, !tbaa !2432
  %3416 = trunc i64 %3411 to i32
  %3417 = and i32 %3416, 255
  %3418 = tail call i32 @llvm.ctpop.i32(i32 %3417) #8
  %3419 = trunc i32 %3418 to i8
  %3420 = and i8 %3419, 1
  %3421 = xor i8 %3420, 1
  store i8 %3421, i8* %49, align 1, !tbaa !2446
  %3422 = xor i64 %3409, %3377
  %3423 = xor i64 %3422, %3411
  %3424 = lshr i64 %3423, 4
  %3425 = trunc i64 %3424 to i8
  %3426 = and i8 %3425, 1
  store i8 %3426, i8* %54, align 1, !tbaa !2447
  %3427 = icmp eq i64 %3411, 0
  %3428 = zext i1 %3427 to i8
  store i8 %3428, i8* %57, align 1, !tbaa !2448
  %3429 = lshr i64 %3411, 63
  %3430 = trunc i64 %3429 to i8
  store i8 %3430, i8* %60, align 1, !tbaa !2449
  %3431 = xor i64 %3429, %3395
  %3432 = xor i64 %3429, %3410
  %3433 = add nuw nsw i64 %3431, %3432
  %3434 = icmp eq i64 %3433, 2
  %3435 = zext i1 %3434 to i8
  store i8 %3435, i8* %66, align 1, !tbaa !2450
  %3436 = add i64 %3403, -108
  %3437 = add i64 %3321, 63
  store i64 %3437, i64* %PC, align 8
  %3438 = inttoptr i64 %3436 to i32*
  %3439 = load i32, i32* %3438, align 4
  %3440 = sext i32 %3439 to i64
  store i64 %3440, i64* %RCX, align 8, !tbaa !2428
  %3441 = shl nsw i64 %3440, 3
  %3442 = add i64 %3441, %3411
  %3443 = add i64 %3321, 68
  store i64 %3443, i64* %PC, align 8
  %3444 = load i64, i64* %147, align 1
  %3445 = inttoptr i64 %3442 to i64*
  store i64 %3444, i64* %3445, align 8
  %3446 = load i64, i64* %RBP, align 8
  %3447 = add i64 %3446, -108
  %3448 = load i64, i64* %PC, align 8
  %3449 = add i64 %3448, 3
  store i64 %3449, i64* %PC, align 8
  %3450 = inttoptr i64 %3447 to i32*
  %3451 = load i32, i32* %3450, align 4
  %3452 = add i32 %3451, 1
  %3453 = zext i32 %3452 to i64
  store i64 %3453, i64* %RAX, align 8, !tbaa !2428
  %3454 = icmp eq i32 %3451, -1
  %3455 = icmp eq i32 %3452, 0
  %3456 = or i1 %3454, %3455
  %3457 = zext i1 %3456 to i8
  store i8 %3457, i8* %42, align 1, !tbaa !2432
  %3458 = and i32 %3452, 255
  %3459 = tail call i32 @llvm.ctpop.i32(i32 %3458) #8
  %3460 = trunc i32 %3459 to i8
  %3461 = and i8 %3460, 1
  %3462 = xor i8 %3461, 1
  store i8 %3462, i8* %49, align 1, !tbaa !2446
  %3463 = xor i32 %3451, %3452
  %3464 = lshr i32 %3463, 4
  %3465 = trunc i32 %3464 to i8
  %3466 = and i8 %3465, 1
  store i8 %3466, i8* %54, align 1, !tbaa !2447
  %3467 = zext i1 %3455 to i8
  store i8 %3467, i8* %57, align 1, !tbaa !2448
  %3468 = lshr i32 %3452, 31
  %3469 = trunc i32 %3468 to i8
  store i8 %3469, i8* %60, align 1, !tbaa !2449
  %3470 = lshr i32 %3451, 31
  %3471 = xor i32 %3468, %3470
  %3472 = add nuw nsw i32 %3471, %3468
  %3473 = icmp eq i32 %3472, 2
  %3474 = zext i1 %3473 to i8
  store i8 %3474, i8* %66, align 1, !tbaa !2450
  %3475 = add i64 %3448, 9
  store i64 %3475, i64* %PC, align 8
  store i32 %3452, i32* %3450, align 4
  %3476 = load i64, i64* %PC, align 8
  %3477 = add i64 %3476, -660
  store i64 %3477, i64* %PC, align 8, !tbaa !2428
  br label %block_4019d2

block_4014ac:                                     ; preds = %block_4014a0
  %3478 = add i64 %4617, 36
  store i64 %3478, i64* %PC, align 8
  %3479 = load i32, i32* %4584, align 4
  %3480 = sext i32 %3479 to i64
  store i64 %3480, i64* %RCX, align 8, !tbaa !2428
  %3481 = shl nsw i64 %3480, 3
  %3482 = add i64 %3481, %4663
  %3483 = add i64 %4617, 41
  store i64 %3483, i64* %PC, align 8
  %3484 = inttoptr i64 %3482 to i64*
  %3485 = load i64, i64* %3484, align 8
  store i64 %3485, i64* %147, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %3486 = add i64 %4617, 45
  store i64 %3486, i64* %PC, align 8
  %3487 = load i64, i64* %4620, align 8
  store i64 %3487, i64* %RAX, align 8, !tbaa !2428
  %3488 = add i64 %4617, 49
  store i64 %3488, i64* %PC, align 8
  %3489 = load i32, i32* %4624, align 4
  %3490 = sext i32 %3489 to i64
  %3491 = mul nsw i64 %3490, 33800
  store i64 %3491, i64* %RCX, align 8, !tbaa !2428
  %3492 = lshr i64 %3491, 63
  %3493 = add i64 %3491, %3487
  store i64 %3493, i64* %RAX, align 8, !tbaa !2428
  %3494 = icmp ult i64 %3493, %3487
  %3495 = icmp ult i64 %3493, %3491
  %3496 = or i1 %3494, %3495
  %3497 = zext i1 %3496 to i8
  store i8 %3497, i8* %42, align 1, !tbaa !2432
  %3498 = trunc i64 %3493 to i32
  %3499 = and i32 %3498, 255
  %3500 = tail call i32 @llvm.ctpop.i32(i32 %3499) #8
  %3501 = trunc i32 %3500 to i8
  %3502 = and i8 %3501, 1
  %3503 = xor i8 %3502, 1
  store i8 %3503, i8* %49, align 1, !tbaa !2446
  %3504 = xor i64 %3491, %3487
  %3505 = xor i64 %3504, %3493
  %3506 = lshr i64 %3505, 4
  %3507 = trunc i64 %3506 to i8
  %3508 = and i8 %3507, 1
  store i8 %3508, i8* %54, align 1, !tbaa !2447
  %3509 = icmp eq i64 %3493, 0
  %3510 = zext i1 %3509 to i8
  store i8 %3510, i8* %57, align 1, !tbaa !2448
  %3511 = lshr i64 %3493, 63
  %3512 = trunc i64 %3511 to i8
  store i8 %3512, i8* %60, align 1, !tbaa !2449
  %3513 = lshr i64 %3487, 63
  %3514 = xor i64 %3511, %3513
  %3515 = xor i64 %3511, %3492
  %3516 = add nuw nsw i64 %3514, %3515
  %3517 = icmp eq i64 %3516, 2
  %3518 = zext i1 %3517 to i8
  store i8 %3518, i8* %66, align 1, !tbaa !2450
  %3519 = add i64 %4617, 62
  store i64 %3519, i64* %PC, align 8
  %3520 = load i32, i32* %4657, align 4
  %3521 = add i32 %3520, 1
  %3522 = zext i32 %3521 to i64
  store i64 %3522, i64* %RDX, align 8, !tbaa !2428
  %3523 = sext i32 %3521 to i64
  %3524 = mul nsw i64 %3523, 520
  store i64 %3524, i64* %RCX, align 8, !tbaa !2428
  %3525 = lshr i64 %3524, 63
  %3526 = add i64 %3524, %3493
  store i64 %3526, i64* %RAX, align 8, !tbaa !2428
  %3527 = icmp ult i64 %3526, %3493
  %3528 = icmp ult i64 %3526, %3524
  %3529 = or i1 %3527, %3528
  %3530 = zext i1 %3529 to i8
  store i8 %3530, i8* %42, align 1, !tbaa !2432
  %3531 = trunc i64 %3526 to i32
  %3532 = and i32 %3531, 255
  %3533 = tail call i32 @llvm.ctpop.i32(i32 %3532) #8
  %3534 = trunc i32 %3533 to i8
  %3535 = and i8 %3534, 1
  %3536 = xor i8 %3535, 1
  store i8 %3536, i8* %49, align 1, !tbaa !2446
  %3537 = xor i64 %3524, %3493
  %3538 = xor i64 %3537, %3526
  %3539 = lshr i64 %3538, 4
  %3540 = trunc i64 %3539 to i8
  %3541 = and i8 %3540, 1
  store i8 %3541, i8* %54, align 1, !tbaa !2447
  %3542 = icmp eq i64 %3526, 0
  %3543 = zext i1 %3542 to i8
  store i8 %3543, i8* %57, align 1, !tbaa !2448
  %3544 = lshr i64 %3526, 63
  %3545 = trunc i64 %3544 to i8
  store i8 %3545, i8* %60, align 1, !tbaa !2449
  %3546 = xor i64 %3544, %3511
  %3547 = xor i64 %3544, %3525
  %3548 = add nuw nsw i64 %3546, %3547
  %3549 = icmp eq i64 %3548, 2
  %3550 = zext i1 %3549 to i8
  store i8 %3550, i8* %66, align 1, !tbaa !2450
  %3551 = load i64, i64* %RBP, align 8
  %3552 = add i64 %3551, -108
  %3553 = add i64 %4617, 82
  store i64 %3553, i64* %PC, align 8
  %3554 = inttoptr i64 %3552 to i32*
  %3555 = load i32, i32* %3554, align 4
  %3556 = sext i32 %3555 to i64
  store i64 %3556, i64* %RCX, align 8, !tbaa !2428
  %3557 = shl nsw i64 %3556, 3
  %3558 = add i64 %3557, %3526
  %3559 = add i64 %4617, 87
  store i64 %3559, i64* %PC, align 8
  %3560 = load double, double* %228, align 1
  %3561 = inttoptr i64 %3558 to double*
  %3562 = load double, double* %3561, align 8
  %3563 = fsub double %3560, %3562
  store double %3563, double* %228, align 1, !tbaa !2452
  %3564 = add i64 %3551, 40
  %3565 = add i64 %4617, 91
  store i64 %3565, i64* %PC, align 8
  %3566 = inttoptr i64 %3564 to i64*
  %3567 = load i64, i64* %3566, align 8
  store i64 %3567, i64* %RAX, align 8, !tbaa !2428
  %3568 = add i64 %3551, -100
  %3569 = add i64 %4617, 95
  store i64 %3569, i64* %PC, align 8
  %3570 = inttoptr i64 %3568 to i32*
  %3571 = load i32, i32* %3570, align 4
  %3572 = sext i32 %3571 to i64
  %3573 = mul nsw i64 %3572, 33800
  store i64 %3573, i64* %RCX, align 8, !tbaa !2428
  %3574 = lshr i64 %3573, 63
  %3575 = add i64 %3573, %3567
  store i64 %3575, i64* %RAX, align 8, !tbaa !2428
  %3576 = icmp ult i64 %3575, %3567
  %3577 = icmp ult i64 %3575, %3573
  %3578 = or i1 %3576, %3577
  %3579 = zext i1 %3578 to i8
  store i8 %3579, i8* %42, align 1, !tbaa !2432
  %3580 = trunc i64 %3575 to i32
  %3581 = and i32 %3580, 255
  %3582 = tail call i32 @llvm.ctpop.i32(i32 %3581) #8
  %3583 = trunc i32 %3582 to i8
  %3584 = and i8 %3583, 1
  %3585 = xor i8 %3584, 1
  store i8 %3585, i8* %49, align 1, !tbaa !2446
  %3586 = xor i64 %3573, %3567
  %3587 = xor i64 %3586, %3575
  %3588 = lshr i64 %3587, 4
  %3589 = trunc i64 %3588 to i8
  %3590 = and i8 %3589, 1
  store i8 %3590, i8* %54, align 1, !tbaa !2447
  %3591 = icmp eq i64 %3575, 0
  %3592 = zext i1 %3591 to i8
  store i8 %3592, i8* %57, align 1, !tbaa !2448
  %3593 = lshr i64 %3575, 63
  %3594 = trunc i64 %3593 to i8
  store i8 %3594, i8* %60, align 1, !tbaa !2449
  %3595 = lshr i64 %3567, 63
  %3596 = xor i64 %3593, %3595
  %3597 = xor i64 %3593, %3574
  %3598 = add nuw nsw i64 %3596, %3597
  %3599 = icmp eq i64 %3598, 2
  %3600 = zext i1 %3599 to i8
  store i8 %3600, i8* %66, align 1, !tbaa !2450
  %3601 = add i64 %3551, -104
  %3602 = add i64 %4617, 109
  store i64 %3602, i64* %PC, align 8
  %3603 = inttoptr i64 %3601 to i32*
  %3604 = load i32, i32* %3603, align 4
  %3605 = sext i32 %3604 to i64
  %3606 = mul nsw i64 %3605, 520
  store i64 %3606, i64* %RCX, align 8, !tbaa !2428
  %3607 = lshr i64 %3606, 63
  %3608 = add i64 %3606, %3575
  store i64 %3608, i64* %RAX, align 8, !tbaa !2428
  %3609 = icmp ult i64 %3608, %3575
  %3610 = icmp ult i64 %3608, %3606
  %3611 = or i1 %3609, %3610
  %3612 = zext i1 %3611 to i8
  store i8 %3612, i8* %42, align 1, !tbaa !2432
  %3613 = trunc i64 %3608 to i32
  %3614 = and i32 %3613, 255
  %3615 = tail call i32 @llvm.ctpop.i32(i32 %3614) #8
  %3616 = trunc i32 %3615 to i8
  %3617 = and i8 %3616, 1
  %3618 = xor i8 %3617, 1
  store i8 %3618, i8* %49, align 1, !tbaa !2446
  %3619 = xor i64 %3606, %3575
  %3620 = xor i64 %3619, %3608
  %3621 = lshr i64 %3620, 4
  %3622 = trunc i64 %3621 to i8
  %3623 = and i8 %3622, 1
  store i8 %3623, i8* %54, align 1, !tbaa !2447
  %3624 = icmp eq i64 %3608, 0
  %3625 = zext i1 %3624 to i8
  store i8 %3625, i8* %57, align 1, !tbaa !2448
  %3626 = lshr i64 %3608, 63
  %3627 = trunc i64 %3626 to i8
  store i8 %3627, i8* %60, align 1, !tbaa !2449
  %3628 = xor i64 %3626, %3593
  %3629 = xor i64 %3626, %3607
  %3630 = add nuw nsw i64 %3628, %3629
  %3631 = icmp eq i64 %3630, 2
  %3632 = zext i1 %3631 to i8
  store i8 %3632, i8* %66, align 1, !tbaa !2450
  %3633 = load i64, i64* %RBP, align 8
  %3634 = add i64 %3633, -108
  %3635 = add i64 %4617, 122
  store i64 %3635, i64* %PC, align 8
  %3636 = inttoptr i64 %3634 to i32*
  %3637 = load i32, i32* %3636, align 4
  %3638 = add i32 %3637, 1
  %3639 = zext i32 %3638 to i64
  store i64 %3639, i64* %RDX, align 8, !tbaa !2428
  %3640 = icmp eq i32 %3637, -1
  %3641 = icmp eq i32 %3638, 0
  %3642 = or i1 %3640, %3641
  %3643 = zext i1 %3642 to i8
  store i8 %3643, i8* %42, align 1, !tbaa !2432
  %3644 = and i32 %3638, 255
  %3645 = tail call i32 @llvm.ctpop.i32(i32 %3644) #8
  %3646 = trunc i32 %3645 to i8
  %3647 = and i8 %3646, 1
  %3648 = xor i8 %3647, 1
  store i8 %3648, i8* %49, align 1, !tbaa !2446
  %3649 = xor i32 %3637, %3638
  %3650 = lshr i32 %3649, 4
  %3651 = trunc i32 %3650 to i8
  %3652 = and i8 %3651, 1
  store i8 %3652, i8* %54, align 1, !tbaa !2447
  %3653 = zext i1 %3641 to i8
  store i8 %3653, i8* %57, align 1, !tbaa !2448
  %3654 = lshr i32 %3638, 31
  %3655 = trunc i32 %3654 to i8
  store i8 %3655, i8* %60, align 1, !tbaa !2449
  %3656 = lshr i32 %3637, 31
  %3657 = xor i32 %3654, %3656
  %3658 = add nuw nsw i32 %3657, %3654
  %3659 = icmp eq i32 %3658, 2
  %3660 = zext i1 %3659 to i8
  store i8 %3660, i8* %66, align 1, !tbaa !2450
  %3661 = sext i32 %3638 to i64
  store i64 %3661, i64* %RCX, align 8, !tbaa !2428
  %3662 = shl nsw i64 %3661, 3
  %3663 = add i64 %3662, %3608
  %3664 = add i64 %4617, 133
  store i64 %3664, i64* %PC, align 8
  %3665 = load double, double* %228, align 1
  %3666 = inttoptr i64 %3663 to double*
  %3667 = load double, double* %3666, align 8
  %3668 = fadd double %3665, %3667
  store double %3668, double* %228, align 1, !tbaa !2452
  %3669 = add i64 %3633, 40
  %3670 = add i64 %4617, 137
  store i64 %3670, i64* %PC, align 8
  %3671 = inttoptr i64 %3669 to i64*
  %3672 = load i64, i64* %3671, align 8
  store i64 %3672, i64* %RAX, align 8, !tbaa !2428
  %3673 = add i64 %3633, -100
  %3674 = add i64 %4617, 141
  store i64 %3674, i64* %PC, align 8
  %3675 = inttoptr i64 %3673 to i32*
  %3676 = load i32, i32* %3675, align 4
  %3677 = sext i32 %3676 to i64
  %3678 = mul nsw i64 %3677, 33800
  store i64 %3678, i64* %RCX, align 8, !tbaa !2428
  %3679 = lshr i64 %3678, 63
  %3680 = add i64 %3678, %3672
  store i64 %3680, i64* %RAX, align 8, !tbaa !2428
  %3681 = icmp ult i64 %3680, %3672
  %3682 = icmp ult i64 %3680, %3678
  %3683 = or i1 %3681, %3682
  %3684 = zext i1 %3683 to i8
  store i8 %3684, i8* %42, align 1, !tbaa !2432
  %3685 = trunc i64 %3680 to i32
  %3686 = and i32 %3685, 255
  %3687 = tail call i32 @llvm.ctpop.i32(i32 %3686) #8
  %3688 = trunc i32 %3687 to i8
  %3689 = and i8 %3688, 1
  %3690 = xor i8 %3689, 1
  store i8 %3690, i8* %49, align 1, !tbaa !2446
  %3691 = xor i64 %3678, %3672
  %3692 = xor i64 %3691, %3680
  %3693 = lshr i64 %3692, 4
  %3694 = trunc i64 %3693 to i8
  %3695 = and i8 %3694, 1
  store i8 %3695, i8* %54, align 1, !tbaa !2447
  %3696 = icmp eq i64 %3680, 0
  %3697 = zext i1 %3696 to i8
  store i8 %3697, i8* %57, align 1, !tbaa !2448
  %3698 = lshr i64 %3680, 63
  %3699 = trunc i64 %3698 to i8
  store i8 %3699, i8* %60, align 1, !tbaa !2449
  %3700 = lshr i64 %3672, 63
  %3701 = xor i64 %3698, %3700
  %3702 = xor i64 %3698, %3679
  %3703 = add nuw nsw i64 %3701, %3702
  %3704 = icmp eq i64 %3703, 2
  %3705 = zext i1 %3704 to i8
  store i8 %3705, i8* %66, align 1, !tbaa !2450
  %3706 = add i64 %3633, -104
  %3707 = add i64 %4617, 155
  store i64 %3707, i64* %PC, align 8
  %3708 = inttoptr i64 %3706 to i32*
  %3709 = load i32, i32* %3708, align 4
  %3710 = sext i32 %3709 to i64
  %3711 = mul nsw i64 %3710, 520
  store i64 %3711, i64* %RCX, align 8, !tbaa !2428
  %3712 = lshr i64 %3711, 63
  %3713 = add i64 %3711, %3680
  store i64 %3713, i64* %RAX, align 8, !tbaa !2428
  %3714 = icmp ult i64 %3713, %3680
  %3715 = icmp ult i64 %3713, %3711
  %3716 = or i1 %3714, %3715
  %3717 = zext i1 %3716 to i8
  store i8 %3717, i8* %42, align 1, !tbaa !2432
  %3718 = trunc i64 %3713 to i32
  %3719 = and i32 %3718, 255
  %3720 = tail call i32 @llvm.ctpop.i32(i32 %3719) #8
  %3721 = trunc i32 %3720 to i8
  %3722 = and i8 %3721, 1
  %3723 = xor i8 %3722, 1
  store i8 %3723, i8* %49, align 1, !tbaa !2446
  %3724 = xor i64 %3711, %3680
  %3725 = xor i64 %3724, %3713
  %3726 = lshr i64 %3725, 4
  %3727 = trunc i64 %3726 to i8
  %3728 = and i8 %3727, 1
  store i8 %3728, i8* %54, align 1, !tbaa !2447
  %3729 = icmp eq i64 %3713, 0
  %3730 = zext i1 %3729 to i8
  store i8 %3730, i8* %57, align 1, !tbaa !2448
  %3731 = lshr i64 %3713, 63
  %3732 = trunc i64 %3731 to i8
  store i8 %3732, i8* %60, align 1, !tbaa !2449
  %3733 = xor i64 %3731, %3698
  %3734 = xor i64 %3731, %3712
  %3735 = add nuw nsw i64 %3733, %3734
  %3736 = icmp eq i64 %3735, 2
  %3737 = zext i1 %3736 to i8
  store i8 %3737, i8* %66, align 1, !tbaa !2450
  %3738 = add i64 %4617, 169
  store i64 %3738, i64* %PC, align 8
  %3739 = load i32, i32* %3636, align 4
  %3740 = sext i32 %3739 to i64
  store i64 %3740, i64* %RCX, align 8, !tbaa !2428
  %3741 = shl nsw i64 %3740, 3
  %3742 = add i64 %3741, %3713
  %3743 = add i64 %4617, 174
  store i64 %3743, i64* %PC, align 8
  %3744 = inttoptr i64 %3742 to double*
  %3745 = load double, double* %3744, align 8
  %3746 = fsub double %3668, %3745
  store double %3746, double* %228, align 1, !tbaa !2452
  %3747 = add i64 %3633, -96
  %3748 = add i64 %4617, 178
  store i64 %3748, i64* %PC, align 8
  %3749 = inttoptr i64 %3747 to i64*
  %3750 = load i64, i64* %3749, align 8
  store i64 %3750, i64* %RAX, align 8, !tbaa !2428
  %3751 = add i64 %4617, 182
  store i64 %3751, i64* %PC, align 8
  %3752 = load i32, i32* %3675, align 4
  %3753 = sext i32 %3752 to i64
  %3754 = mul nsw i64 %3753, 520
  store i64 %3754, i64* %RCX, align 8, !tbaa !2428
  %3755 = lshr i64 %3754, 63
  %3756 = add i64 %3754, %3750
  store i64 %3756, i64* %RAX, align 8, !tbaa !2428
  %3757 = icmp ult i64 %3756, %3750
  %3758 = icmp ult i64 %3756, %3754
  %3759 = or i1 %3757, %3758
  %3760 = zext i1 %3759 to i8
  store i8 %3760, i8* %42, align 1, !tbaa !2432
  %3761 = trunc i64 %3756 to i32
  %3762 = and i32 %3761, 255
  %3763 = tail call i32 @llvm.ctpop.i32(i32 %3762) #8
  %3764 = trunc i32 %3763 to i8
  %3765 = and i8 %3764, 1
  %3766 = xor i8 %3765, 1
  store i8 %3766, i8* %49, align 1, !tbaa !2446
  %3767 = xor i64 %3754, %3750
  %3768 = xor i64 %3767, %3756
  %3769 = lshr i64 %3768, 4
  %3770 = trunc i64 %3769 to i8
  %3771 = and i8 %3770, 1
  store i8 %3771, i8* %54, align 1, !tbaa !2447
  %3772 = icmp eq i64 %3756, 0
  %3773 = zext i1 %3772 to i8
  store i8 %3773, i8* %57, align 1, !tbaa !2448
  %3774 = lshr i64 %3756, 63
  %3775 = trunc i64 %3774 to i8
  store i8 %3775, i8* %60, align 1, !tbaa !2449
  %3776 = lshr i64 %3750, 63
  %3777 = xor i64 %3774, %3776
  %3778 = xor i64 %3774, %3755
  %3779 = add nuw nsw i64 %3777, %3778
  %3780 = icmp eq i64 %3779, 2
  %3781 = zext i1 %3780 to i8
  store i8 %3781, i8* %66, align 1, !tbaa !2450
  %3782 = load i64, i64* %RBP, align 8
  %3783 = add i64 %3782, -104
  %3784 = add i64 %4617, 196
  store i64 %3784, i64* %PC, align 8
  %3785 = inttoptr i64 %3783 to i32*
  %3786 = load i32, i32* %3785, align 4
  %3787 = sext i32 %3786 to i64
  store i64 %3787, i64* %RCX, align 8, !tbaa !2428
  %3788 = shl nsw i64 %3787, 3
  %3789 = add i64 %3788, %3756
  %3790 = add i64 %4617, 201
  store i64 %3790, i64* %PC, align 8
  %3791 = inttoptr i64 %3789 to double*
  store double %3746, double* %3791, align 8
  %3792 = load i64, i64* %RBP, align 8
  %3793 = add i64 %3792, 88
  %3794 = load i64, i64* %PC, align 8
  %3795 = add i64 %3794, 4
  store i64 %3795, i64* %PC, align 8
  %3796 = inttoptr i64 %3793 to i64*
  %3797 = load i64, i64* %3796, align 8
  store i64 %3797, i64* %RAX, align 8, !tbaa !2428
  %3798 = add i64 %3792, -104
  %3799 = add i64 %3794, 8
  store i64 %3799, i64* %PC, align 8
  %3800 = inttoptr i64 %3798 to i32*
  %3801 = load i32, i32* %3800, align 4
  %3802 = sext i32 %3801 to i64
  store i64 %3802, i64* %RCX, align 8, !tbaa !2428
  %3803 = shl nsw i64 %3802, 3
  %3804 = add i64 %3803, %3797
  %3805 = add i64 %3794, 13
  store i64 %3805, i64* %PC, align 8
  %3806 = inttoptr i64 %3804 to double*
  %3807 = load double, double* %3806, align 8
  store double %3807, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %3808 = add i64 %3792, 96
  %3809 = add i64 %3794, 17
  store i64 %3809, i64* %PC, align 8
  %3810 = inttoptr i64 %3808 to i64*
  %3811 = load i64, i64* %3810, align 8
  store i64 %3811, i64* %RAX, align 8, !tbaa !2428
  %3812 = add i64 %3794, 21
  store i64 %3812, i64* %PC, align 8
  %3813 = load i32, i32* %3800, align 4
  %3814 = sext i32 %3813 to i64
  store i64 %3814, i64* %RCX, align 8, !tbaa !2428
  %3815 = shl nsw i64 %3814, 3
  %3816 = add i64 %3815, %3811
  %3817 = add i64 %3794, 26
  store i64 %3817, i64* %PC, align 8
  %3818 = inttoptr i64 %3816 to double*
  %3819 = load double, double* %3818, align 8
  %3820 = fdiv double %3807, %3819
  store double %3820, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %3821 = add i64 %3792, 24
  %3822 = add i64 %3794, 30
  store i64 %3822, i64* %PC, align 8
  %3823 = inttoptr i64 %3821 to i64*
  %3824 = load i64, i64* %3823, align 8
  store i64 %3824, i64* %RAX, align 8, !tbaa !2428
  %3825 = add i64 %3792, -100
  %3826 = add i64 %3794, 34
  store i64 %3826, i64* %PC, align 8
  %3827 = inttoptr i64 %3825 to i32*
  %3828 = load i32, i32* %3827, align 4
  %3829 = sext i32 %3828 to i64
  %3830 = mul nsw i64 %3829, 33800
  store i64 %3830, i64* %RCX, align 8, !tbaa !2428
  %3831 = lshr i64 %3830, 63
  %3832 = add i64 %3830, %3824
  store i64 %3832, i64* %RAX, align 8, !tbaa !2428
  %3833 = icmp ult i64 %3832, %3824
  %3834 = icmp ult i64 %3832, %3830
  %3835 = or i1 %3833, %3834
  %3836 = zext i1 %3835 to i8
  store i8 %3836, i8* %42, align 1, !tbaa !2432
  %3837 = trunc i64 %3832 to i32
  %3838 = and i32 %3837, 255
  %3839 = tail call i32 @llvm.ctpop.i32(i32 %3838) #8
  %3840 = trunc i32 %3839 to i8
  %3841 = and i8 %3840, 1
  %3842 = xor i8 %3841, 1
  store i8 %3842, i8* %49, align 1, !tbaa !2446
  %3843 = xor i64 %3830, %3824
  %3844 = xor i64 %3843, %3832
  %3845 = lshr i64 %3844, 4
  %3846 = trunc i64 %3845 to i8
  %3847 = and i8 %3846, 1
  store i8 %3847, i8* %54, align 1, !tbaa !2447
  %3848 = icmp eq i64 %3832, 0
  %3849 = zext i1 %3848 to i8
  store i8 %3849, i8* %57, align 1, !tbaa !2448
  %3850 = lshr i64 %3832, 63
  %3851 = trunc i64 %3850 to i8
  store i8 %3851, i8* %60, align 1, !tbaa !2449
  %3852 = lshr i64 %3824, 63
  %3853 = xor i64 %3850, %3852
  %3854 = xor i64 %3850, %3831
  %3855 = add nuw nsw i64 %3853, %3854
  %3856 = icmp eq i64 %3855, 2
  %3857 = zext i1 %3856 to i8
  store i8 %3857, i8* %66, align 1, !tbaa !2450
  %3858 = add i64 %3794, 48
  store i64 %3858, i64* %PC, align 8
  %3859 = load i32, i32* %3800, align 4
  %3860 = sext i32 %3859 to i64
  %3861 = mul nsw i64 %3860, 520
  store i64 %3861, i64* %RCX, align 8, !tbaa !2428
  %3862 = lshr i64 %3861, 63
  %3863 = add i64 %3861, %3832
  store i64 %3863, i64* %RAX, align 8, !tbaa !2428
  %3864 = icmp ult i64 %3863, %3832
  %3865 = icmp ult i64 %3863, %3861
  %3866 = or i1 %3864, %3865
  %3867 = zext i1 %3866 to i8
  store i8 %3867, i8* %42, align 1, !tbaa !2432
  %3868 = trunc i64 %3863 to i32
  %3869 = and i32 %3868, 255
  %3870 = tail call i32 @llvm.ctpop.i32(i32 %3869) #8
  %3871 = trunc i32 %3870 to i8
  %3872 = and i8 %3871, 1
  %3873 = xor i8 %3872, 1
  store i8 %3873, i8* %49, align 1, !tbaa !2446
  %3874 = xor i64 %3861, %3832
  %3875 = xor i64 %3874, %3863
  %3876 = lshr i64 %3875, 4
  %3877 = trunc i64 %3876 to i8
  %3878 = and i8 %3877, 1
  store i8 %3878, i8* %54, align 1, !tbaa !2447
  %3879 = icmp eq i64 %3863, 0
  %3880 = zext i1 %3879 to i8
  store i8 %3880, i8* %57, align 1, !tbaa !2448
  %3881 = lshr i64 %3863, 63
  %3882 = trunc i64 %3881 to i8
  store i8 %3882, i8* %60, align 1, !tbaa !2449
  %3883 = xor i64 %3881, %3850
  %3884 = xor i64 %3881, %3862
  %3885 = add nuw nsw i64 %3883, %3884
  %3886 = icmp eq i64 %3885, 2
  %3887 = zext i1 %3886 to i8
  store i8 %3887, i8* %66, align 1, !tbaa !2450
  %3888 = add i64 %3792, -108
  %3889 = add i64 %3794, 62
  store i64 %3889, i64* %PC, align 8
  %3890 = inttoptr i64 %3888 to i32*
  %3891 = load i32, i32* %3890, align 4
  %3892 = sext i32 %3891 to i64
  store i64 %3892, i64* %RCX, align 8, !tbaa !2428
  %3893 = shl nsw i64 %3892, 3
  %3894 = add i64 %3893, %3863
  %3895 = add i64 %3794, 67
  store i64 %3895, i64* %PC, align 8
  %3896 = load double, double* %228, align 1
  %3897 = inttoptr i64 %3894 to double*
  %3898 = load double, double* %3897, align 8
  %3899 = fmul double %3896, %3898
  store double %3899, double* %228, align 1, !tbaa !2452
  %3900 = add i64 %3792, -72
  %3901 = add i64 %3794, 72
  store i64 %3901, i64* %PC, align 8
  %3902 = inttoptr i64 %3900 to double*
  %3903 = load double, double* %3902, align 8
  store double %3903, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %3904 = add i64 %3794, 76
  store i64 %3904, i64* %PC, align 8
  %3905 = load i64, i64* %3810, align 8
  store i64 %3905, i64* %RAX, align 8, !tbaa !2428
  %3906 = add i64 %3794, 80
  store i64 %3906, i64* %PC, align 8
  %3907 = load i32, i32* %3800, align 4
  %3908 = sext i32 %3907 to i64
  store i64 %3908, i64* %RCX, align 8, !tbaa !2428
  %3909 = shl nsw i64 %3908, 3
  %3910 = add i64 %3909, %3905
  %3911 = add i64 %3794, 85
  store i64 %3911, i64* %PC, align 8
  %3912 = inttoptr i64 %3910 to double*
  %3913 = load double, double* %3912, align 8
  %3914 = fdiv double %3903, %3913
  store double %3914, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %3915 = load i64, i64* %RBP, align 8
  %3916 = add i64 %3915, -96
  %3917 = add i64 %3794, 89
  store i64 %3917, i64* %PC, align 8
  %3918 = inttoptr i64 %3916 to i64*
  %3919 = load i64, i64* %3918, align 8
  store i64 %3919, i64* %RAX, align 8, !tbaa !2428
  %3920 = add i64 %3915, -100
  %3921 = add i64 %3794, 93
  store i64 %3921, i64* %PC, align 8
  %3922 = inttoptr i64 %3920 to i32*
  %3923 = load i32, i32* %3922, align 4
  %3924 = sext i32 %3923 to i64
  %3925 = mul nsw i64 %3924, 520
  store i64 %3925, i64* %RCX, align 8, !tbaa !2428
  %3926 = lshr i64 %3925, 63
  %3927 = add i64 %3925, %3919
  store i64 %3927, i64* %RAX, align 8, !tbaa !2428
  %3928 = icmp ult i64 %3927, %3919
  %3929 = icmp ult i64 %3927, %3925
  %3930 = or i1 %3928, %3929
  %3931 = zext i1 %3930 to i8
  store i8 %3931, i8* %42, align 1, !tbaa !2432
  %3932 = trunc i64 %3927 to i32
  %3933 = and i32 %3932, 255
  %3934 = tail call i32 @llvm.ctpop.i32(i32 %3933) #8
  %3935 = trunc i32 %3934 to i8
  %3936 = and i8 %3935, 1
  %3937 = xor i8 %3936, 1
  store i8 %3937, i8* %49, align 1, !tbaa !2446
  %3938 = xor i64 %3925, %3919
  %3939 = xor i64 %3938, %3927
  %3940 = lshr i64 %3939, 4
  %3941 = trunc i64 %3940 to i8
  %3942 = and i8 %3941, 1
  store i8 %3942, i8* %54, align 1, !tbaa !2447
  %3943 = icmp eq i64 %3927, 0
  %3944 = zext i1 %3943 to i8
  store i8 %3944, i8* %57, align 1, !tbaa !2448
  %3945 = lshr i64 %3927, 63
  %3946 = trunc i64 %3945 to i8
  store i8 %3946, i8* %60, align 1, !tbaa !2449
  %3947 = lshr i64 %3919, 63
  %3948 = xor i64 %3945, %3947
  %3949 = xor i64 %3945, %3926
  %3950 = add nuw nsw i64 %3948, %3949
  %3951 = icmp eq i64 %3950, 2
  %3952 = zext i1 %3951 to i8
  store i8 %3952, i8* %66, align 1, !tbaa !2450
  %3953 = add i64 %3915, -104
  %3954 = add i64 %3794, 107
  store i64 %3954, i64* %PC, align 8
  %3955 = inttoptr i64 %3953 to i32*
  %3956 = load i32, i32* %3955, align 4
  %3957 = sext i32 %3956 to i64
  store i64 %3957, i64* %RCX, align 8, !tbaa !2428
  %3958 = shl nsw i64 %3957, 3
  %3959 = add i64 %3958, %3927
  %3960 = add i64 %3794, 112
  store i64 %3960, i64* %PC, align 8
  %3961 = inttoptr i64 %3959 to double*
  %3962 = load double, double* %3961, align 8
  %3963 = fmul double %3914, %3962
  store double %3963, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %3964 = fsub double %3899, %3963
  store double %3964, double* %228, align 1, !tbaa !2452
  %3965 = add i64 %3915, 16
  %3966 = add i64 %3794, 120
  store i64 %3966, i64* %PC, align 8
  %3967 = inttoptr i64 %3965 to i64*
  %3968 = load i64, i64* %3967, align 8
  store i64 %3968, i64* %RAX, align 8, !tbaa !2428
  %3969 = add i64 %3794, 124
  store i64 %3969, i64* %PC, align 8
  %3970 = load i32, i32* %3922, align 4
  %3971 = sext i32 %3970 to i64
  %3972 = mul nsw i64 %3971, 520
  store i64 %3972, i64* %RCX, align 8, !tbaa !2428
  %3973 = lshr i64 %3972, 63
  %3974 = add i64 %3972, %3968
  store i64 %3974, i64* %RAX, align 8, !tbaa !2428
  %3975 = icmp ult i64 %3974, %3968
  %3976 = icmp ult i64 %3974, %3972
  %3977 = or i1 %3975, %3976
  %3978 = zext i1 %3977 to i8
  store i8 %3978, i8* %42, align 1, !tbaa !2432
  %3979 = trunc i64 %3974 to i32
  %3980 = and i32 %3979, 255
  %3981 = tail call i32 @llvm.ctpop.i32(i32 %3980) #8
  %3982 = trunc i32 %3981 to i8
  %3983 = and i8 %3982, 1
  %3984 = xor i8 %3983, 1
  store i8 %3984, i8* %49, align 1, !tbaa !2446
  %3985 = xor i64 %3972, %3968
  %3986 = xor i64 %3985, %3974
  %3987 = lshr i64 %3986, 4
  %3988 = trunc i64 %3987 to i8
  %3989 = and i8 %3988, 1
  store i8 %3989, i8* %54, align 1, !tbaa !2447
  %3990 = icmp eq i64 %3974, 0
  %3991 = zext i1 %3990 to i8
  store i8 %3991, i8* %57, align 1, !tbaa !2448
  %3992 = lshr i64 %3974, 63
  %3993 = trunc i64 %3992 to i8
  store i8 %3993, i8* %60, align 1, !tbaa !2449
  %3994 = lshr i64 %3968, 63
  %3995 = xor i64 %3992, %3994
  %3996 = xor i64 %3992, %3973
  %3997 = add nuw nsw i64 %3995, %3996
  %3998 = icmp eq i64 %3997, 2
  %3999 = zext i1 %3998 to i8
  store i8 %3999, i8* %66, align 1, !tbaa !2450
  %4000 = add i64 %3794, 138
  store i64 %4000, i64* %PC, align 8
  %4001 = load i32, i32* %3955, align 4
  %4002 = sext i32 %4001 to i64
  store i64 %4002, i64* %RCX, align 8, !tbaa !2428
  %4003 = shl nsw i64 %4002, 3
  %4004 = add i64 %4003, %3974
  %4005 = add i64 %3794, 143
  store i64 %4005, i64* %PC, align 8
  %4006 = inttoptr i64 %4004 to double*
  store double %3964, double* %4006, align 8
  %4007 = load i64, i64* %RBP, align 8
  %4008 = add i64 %4007, 72
  %4009 = load i64, i64* %PC, align 8
  %4010 = add i64 %4009, 4
  store i64 %4010, i64* %PC, align 8
  %4011 = inttoptr i64 %4008 to i64*
  %4012 = load i64, i64* %4011, align 8
  store i64 %4012, i64* %RAX, align 8, !tbaa !2428
  %4013 = add i64 %4007, -108
  %4014 = add i64 %4009, 8
  store i64 %4014, i64* %PC, align 8
  %4015 = inttoptr i64 %4013 to i32*
  %4016 = load i32, i32* %4015, align 4
  %4017 = sext i32 %4016 to i64
  store i64 %4017, i64* %RCX, align 8, !tbaa !2428
  %4018 = shl nsw i64 %4017, 3
  %4019 = add i64 %4018, %4012
  %4020 = add i64 %4009, 13
  store i64 %4020, i64* %PC, align 8
  %4021 = inttoptr i64 %4019 to double*
  %4022 = load double, double* %4021, align 8
  store double %4022, double* %228, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %4023 = add i64 %4007, 80
  %4024 = add i64 %4009, 17
  store i64 %4024, i64* %PC, align 8
  %4025 = inttoptr i64 %4023 to i64*
  %4026 = load i64, i64* %4025, align 8
  store i64 %4026, i64* %RAX, align 8, !tbaa !2428
  %4027 = add i64 %4009, 21
  store i64 %4027, i64* %PC, align 8
  %4028 = load i32, i32* %4015, align 4
  %4029 = sext i32 %4028 to i64
  store i64 %4029, i64* %RCX, align 8, !tbaa !2428
  %4030 = shl nsw i64 %4029, 3
  %4031 = add i64 %4030, %4026
  %4032 = add i64 %4009, 26
  store i64 %4032, i64* %PC, align 8
  %4033 = inttoptr i64 %4031 to double*
  %4034 = load double, double* %4033, align 8
  %4035 = fdiv double %4022, %4034
  store double %4035, double* %228, align 1, !tbaa !2452
  store i64 0, i64* %229, align 1, !tbaa !2452
  %4036 = add i64 %4007, 48
  %4037 = add i64 %4009, 30
  store i64 %4037, i64* %PC, align 8
  %4038 = inttoptr i64 %4036 to i64*
  %4039 = load i64, i64* %4038, align 8
  store i64 %4039, i64* %RAX, align 8, !tbaa !2428
  %4040 = add i64 %4007, -100
  %4041 = add i64 %4009, 34
  store i64 %4041, i64* %PC, align 8
  %4042 = inttoptr i64 %4040 to i32*
  %4043 = load i32, i32* %4042, align 4
  %4044 = sext i32 %4043 to i64
  %4045 = mul nsw i64 %4044, 33800
  store i64 %4045, i64* %RCX, align 8, !tbaa !2428
  %4046 = lshr i64 %4045, 63
  %4047 = add i64 %4045, %4039
  store i64 %4047, i64* %RAX, align 8, !tbaa !2428
  %4048 = icmp ult i64 %4047, %4039
  %4049 = icmp ult i64 %4047, %4045
  %4050 = or i1 %4048, %4049
  %4051 = zext i1 %4050 to i8
  store i8 %4051, i8* %42, align 1, !tbaa !2432
  %4052 = trunc i64 %4047 to i32
  %4053 = and i32 %4052, 255
  %4054 = tail call i32 @llvm.ctpop.i32(i32 %4053) #8
  %4055 = trunc i32 %4054 to i8
  %4056 = and i8 %4055, 1
  %4057 = xor i8 %4056, 1
  store i8 %4057, i8* %49, align 1, !tbaa !2446
  %4058 = xor i64 %4045, %4039
  %4059 = xor i64 %4058, %4047
  %4060 = lshr i64 %4059, 4
  %4061 = trunc i64 %4060 to i8
  %4062 = and i8 %4061, 1
  store i8 %4062, i8* %54, align 1, !tbaa !2447
  %4063 = icmp eq i64 %4047, 0
  %4064 = zext i1 %4063 to i8
  store i8 %4064, i8* %57, align 1, !tbaa !2448
  %4065 = lshr i64 %4047, 63
  %4066 = trunc i64 %4065 to i8
  store i8 %4066, i8* %60, align 1, !tbaa !2449
  %4067 = lshr i64 %4039, 63
  %4068 = xor i64 %4065, %4067
  %4069 = xor i64 %4065, %4046
  %4070 = add nuw nsw i64 %4068, %4069
  %4071 = icmp eq i64 %4070, 2
  %4072 = zext i1 %4071 to i8
  store i8 %4072, i8* %66, align 1, !tbaa !2450
  %4073 = add i64 %4007, -104
  %4074 = add i64 %4009, 48
  store i64 %4074, i64* %PC, align 8
  %4075 = inttoptr i64 %4073 to i32*
  %4076 = load i32, i32* %4075, align 4
  %4077 = sext i32 %4076 to i64
  %4078 = mul nsw i64 %4077, 520
  store i64 %4078, i64* %RCX, align 8, !tbaa !2428
  %4079 = lshr i64 %4078, 63
  %4080 = add i64 %4078, %4047
  store i64 %4080, i64* %RAX, align 8, !tbaa !2428
  %4081 = icmp ult i64 %4080, %4047
  %4082 = icmp ult i64 %4080, %4078
  %4083 = or i1 %4081, %4082
  %4084 = zext i1 %4083 to i8
  store i8 %4084, i8* %42, align 1, !tbaa !2432
  %4085 = trunc i64 %4080 to i32
  %4086 = and i32 %4085, 255
  %4087 = tail call i32 @llvm.ctpop.i32(i32 %4086) #8
  %4088 = trunc i32 %4087 to i8
  %4089 = and i8 %4088, 1
  %4090 = xor i8 %4089, 1
  store i8 %4090, i8* %49, align 1, !tbaa !2446
  %4091 = xor i64 %4078, %4047
  %4092 = xor i64 %4091, %4080
  %4093 = lshr i64 %4092, 4
  %4094 = trunc i64 %4093 to i8
  %4095 = and i8 %4094, 1
  store i8 %4095, i8* %54, align 1, !tbaa !2447
  %4096 = icmp eq i64 %4080, 0
  %4097 = zext i1 %4096 to i8
  store i8 %4097, i8* %57, align 1, !tbaa !2448
  %4098 = lshr i64 %4080, 63
  %4099 = trunc i64 %4098 to i8
  store i8 %4099, i8* %60, align 1, !tbaa !2449
  %4100 = xor i64 %4098, %4065
  %4101 = xor i64 %4098, %4079
  %4102 = add nuw nsw i64 %4100, %4101
  %4103 = icmp eq i64 %4102, 2
  %4104 = zext i1 %4103 to i8
  store i8 %4104, i8* %66, align 1, !tbaa !2450
  %4105 = add i64 %4009, 62
  store i64 %4105, i64* %PC, align 8
  %4106 = load i32, i32* %4015, align 4
  %4107 = sext i32 %4106 to i64
  store i64 %4107, i64* %RCX, align 8, !tbaa !2428
  %4108 = shl nsw i64 %4107, 3
  %4109 = add i64 %4108, %4080
  %4110 = add i64 %4009, 67
  store i64 %4110, i64* %PC, align 8
  %4111 = load double, double* %228, align 1
  %4112 = inttoptr i64 %4109 to double*
  %4113 = load double, double* %4112, align 8
  %4114 = fmul double %4111, %4113
  store double %4114, double* %228, align 1, !tbaa !2452
  %4115 = add i64 %4007, -64
  %4116 = add i64 %4009, 72
  store i64 %4116, i64* %PC, align 8
  %4117 = inttoptr i64 %4115 to double*
  %4118 = load double, double* %4117, align 8
  store double %4118, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %4119 = add i64 %4007, 64
  %4120 = add i64 %4009, 76
  store i64 %4120, i64* %PC, align 8
  %4121 = inttoptr i64 %4119 to i64*
  %4122 = load i64, i64* %4121, align 8
  store i64 %4122, i64* %RAX, align 8, !tbaa !2428
  %4123 = add i64 %4009, 80
  store i64 %4123, i64* %PC, align 8
  %4124 = load i32, i32* %4042, align 4
  %4125 = sext i32 %4124 to i64
  store i64 %4125, i64* %RCX, align 8, !tbaa !2428
  %4126 = shl nsw i64 %4125, 3
  %4127 = add i64 %4126, %4122
  %4128 = add i64 %4009, 85
  store i64 %4128, i64* %PC, align 8
  %4129 = inttoptr i64 %4127 to double*
  %4130 = load double, double* %4129, align 8
  %4131 = fmul double %4118, %4130
  store double %4131, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %4132 = load i64, i64* %RBP, align 8
  %4133 = add i64 %4132, 80
  %4134 = add i64 %4009, 89
  store i64 %4134, i64* %PC, align 8
  %4135 = inttoptr i64 %4133 to i64*
  %4136 = load i64, i64* %4135, align 8
  store i64 %4136, i64* %RAX, align 8, !tbaa !2428
  %4137 = add i64 %4132, -108
  %4138 = add i64 %4009, 93
  store i64 %4138, i64* %PC, align 8
  %4139 = inttoptr i64 %4137 to i32*
  %4140 = load i32, i32* %4139, align 4
  %4141 = sext i32 %4140 to i64
  store i64 %4141, i64* %RCX, align 8, !tbaa !2428
  %4142 = shl nsw i64 %4141, 3
  %4143 = add i64 %4142, %4136
  %4144 = add i64 %4009, 98
  store i64 %4144, i64* %PC, align 8
  %4145 = inttoptr i64 %4143 to double*
  %4146 = load double, double* %4145, align 8
  %4147 = fdiv double %4131, %4146
  store double %4147, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %4148 = add i64 %4132, 16
  %4149 = add i64 %4009, 102
  store i64 %4149, i64* %PC, align 8
  %4150 = inttoptr i64 %4148 to i64*
  %4151 = load i64, i64* %4150, align 8
  store i64 %4151, i64* %RAX, align 8, !tbaa !2428
  %4152 = add i64 %4132, -100
  %4153 = add i64 %4009, 106
  store i64 %4153, i64* %PC, align 8
  %4154 = inttoptr i64 %4152 to i32*
  %4155 = load i32, i32* %4154, align 4
  %4156 = sext i32 %4155 to i64
  %4157 = mul nsw i64 %4156, 520
  store i64 %4157, i64* %RCX, align 8, !tbaa !2428
  %4158 = lshr i64 %4157, 63
  %4159 = add i64 %4157, %4151
  store i64 %4159, i64* %RAX, align 8, !tbaa !2428
  %4160 = icmp ult i64 %4159, %4151
  %4161 = icmp ult i64 %4159, %4157
  %4162 = or i1 %4160, %4161
  %4163 = zext i1 %4162 to i8
  store i8 %4163, i8* %42, align 1, !tbaa !2432
  %4164 = trunc i64 %4159 to i32
  %4165 = and i32 %4164, 255
  %4166 = tail call i32 @llvm.ctpop.i32(i32 %4165) #8
  %4167 = trunc i32 %4166 to i8
  %4168 = and i8 %4167, 1
  %4169 = xor i8 %4168, 1
  store i8 %4169, i8* %49, align 1, !tbaa !2446
  %4170 = xor i64 %4157, %4151
  %4171 = xor i64 %4170, %4159
  %4172 = lshr i64 %4171, 4
  %4173 = trunc i64 %4172 to i8
  %4174 = and i8 %4173, 1
  store i8 %4174, i8* %54, align 1, !tbaa !2447
  %4175 = icmp eq i64 %4159, 0
  %4176 = zext i1 %4175 to i8
  store i8 %4176, i8* %57, align 1, !tbaa !2448
  %4177 = lshr i64 %4159, 63
  %4178 = trunc i64 %4177 to i8
  store i8 %4178, i8* %60, align 1, !tbaa !2449
  %4179 = lshr i64 %4151, 63
  %4180 = xor i64 %4177, %4179
  %4181 = xor i64 %4177, %4158
  %4182 = add nuw nsw i64 %4180, %4181
  %4183 = icmp eq i64 %4182, 2
  %4184 = zext i1 %4183 to i8
  store i8 %4184, i8* %66, align 1, !tbaa !2450
  %4185 = add i64 %4132, -104
  %4186 = add i64 %4009, 120
  store i64 %4186, i64* %PC, align 8
  %4187 = inttoptr i64 %4185 to i32*
  %4188 = load i32, i32* %4187, align 4
  %4189 = sext i32 %4188 to i64
  store i64 %4189, i64* %RCX, align 8, !tbaa !2428
  %4190 = shl nsw i64 %4189, 3
  %4191 = add i64 %4190, %4159
  %4192 = add i64 %4009, 125
  store i64 %4192, i64* %PC, align 8
  %4193 = inttoptr i64 %4191 to double*
  %4194 = load double, double* %4193, align 8
  %4195 = fmul double %4147, %4194
  store double %4195, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %4196 = load double, double* %228, align 1
  %4197 = fadd double %4196, %4195
  store double %4197, double* %228, align 1, !tbaa !2452
  %4198 = add i64 %4132, -64
  %4199 = add i64 %4009, 134
  store i64 %4199, i64* %PC, align 8
  %4200 = inttoptr i64 %4198 to double*
  %4201 = load double, double* %4200, align 8
  store double %4201, double* %231, align 1, !tbaa !2452
  store double 0.000000e+00, double* %233, align 1, !tbaa !2452
  %4202 = add i64 %4132, 56
  %4203 = add i64 %4009, 138
  store i64 %4203, i64* %PC, align 8
  %4204 = inttoptr i64 %4202 to i64*
  %4205 = load i64, i64* %4204, align 8
  store i64 %4205, i64* %RAX, align 8, !tbaa !2428
  %4206 = add i64 %4009, 142
  store i64 %4206, i64* %PC, align 8
  %4207 = load i32, i32* %4154, align 4
  %4208 = sext i32 %4207 to i64
  store i64 %4208, i64* %RCX, align 8, !tbaa !2428
  %4209 = shl nsw i64 %4208, 3
  %4210 = add i64 %4209, %4205
  %4211 = add i64 %4009, 147
  store i64 %4211, i64* %PC, align 8
  %4212 = inttoptr i64 %4210 to double*
  %4213 = load double, double* %4212, align 8
  %4214 = fmul double %4201, %4213
  store double %4214, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %4215 = add i64 %4009, 151
  store i64 %4215, i64* %PC, align 8
  %4216 = load i64, i64* %4135, align 8
  store i64 %4216, i64* %RAX, align 8, !tbaa !2428
  %4217 = add i64 %4009, 155
  store i64 %4217, i64* %PC, align 8
  %4218 = load i32, i32* %4139, align 4
  %4219 = sext i32 %4218 to i64
  store i64 %4219, i64* %RCX, align 8, !tbaa !2428
  %4220 = shl nsw i64 %4219, 3
  %4221 = add i64 %4220, %4216
  %4222 = add i64 %4009, 160
  store i64 %4222, i64* %PC, align 8
  %4223 = inttoptr i64 %4221 to double*
  %4224 = load double, double* %4223, align 8
  %4225 = fdiv double %4214, %4224
  store double %4225, double* %231, align 1, !tbaa !2452
  store i64 0, i64* %232, align 1, !tbaa !2452
  %4226 = add i64 %4132, 24
  %4227 = add i64 %4009, 164
  store i64 %4227, i64* %PC, align 8
  %4228 = inttoptr i64 %4226 to i64*
  %4229 = load i64, i64* %4228, align 8
  store i64 %4229, i64* %RAX, align 8, !tbaa !2428
  %4230 = add i64 %4009, 168
  store i64 %4230, i64* %PC, align 8
  %4231 = load i32, i32* %4154, align 4
  %4232 = sext i32 %4231 to i64
  %4233 = mul nsw i64 %4232, 33800
  store i64 %4233, i64* %RCX, align 8, !tbaa !2428
  %4234 = lshr i64 %4233, 63
  %4235 = add i64 %4233, %4229
  store i64 %4235, i64* %RAX, align 8, !tbaa !2428
  %4236 = icmp ult i64 %4235, %4229
  %4237 = icmp ult i64 %4235, %4233
  %4238 = or i1 %4236, %4237
  %4239 = zext i1 %4238 to i8
  store i8 %4239, i8* %42, align 1, !tbaa !2432
  %4240 = trunc i64 %4235 to i32
  %4241 = and i32 %4240, 255
  %4242 = tail call i32 @llvm.ctpop.i32(i32 %4241) #8
  %4243 = trunc i32 %4242 to i8
  %4244 = and i8 %4243, 1
  %4245 = xor i8 %4244, 1
  store i8 %4245, i8* %49, align 1, !tbaa !2446
  %4246 = xor i64 %4233, %4229
  %4247 = xor i64 %4246, %4235
  %4248 = lshr i64 %4247, 4
  %4249 = trunc i64 %4248 to i8
  %4250 = and i8 %4249, 1
  store i8 %4250, i8* %54, align 1, !tbaa !2447
  %4251 = icmp eq i64 %4235, 0
  %4252 = zext i1 %4251 to i8
  store i8 %4252, i8* %57, align 1, !tbaa !2448
  %4253 = lshr i64 %4235, 63
  %4254 = trunc i64 %4253 to i8
  store i8 %4254, i8* %60, align 1, !tbaa !2449
  %4255 = lshr i64 %4229, 63
  %4256 = xor i64 %4253, %4255
  %4257 = xor i64 %4253, %4234
  %4258 = add nuw nsw i64 %4256, %4257
  %4259 = icmp eq i64 %4258, 2
  %4260 = zext i1 %4259 to i8
  store i8 %4260, i8* %66, align 1, !tbaa !2450
  %4261 = load i64, i64* %RBP, align 8
  %4262 = add i64 %4261, -104
  %4263 = add i64 %4009, 182
  store i64 %4263, i64* %PC, align 8
  %4264 = inttoptr i64 %4262 to i32*
  %4265 = load i32, i32* %4264, align 4
  %4266 = sext i32 %4265 to i64
  %4267 = mul nsw i64 %4266, 520
  store i64 %4267, i64* %RCX, align 8, !tbaa !2428
  %4268 = lshr i64 %4267, 63
  %4269 = add i64 %4267, %4235
  store i64 %4269, i64* %RAX, align 8, !tbaa !2428
  %4270 = icmp ult i64 %4269, %4235
  %4271 = icmp ult i64 %4269, %4267
  %4272 = or i1 %4270, %4271
  %4273 = zext i1 %4272 to i8
  store i8 %4273, i8* %42, align 1, !tbaa !2432
  %4274 = trunc i64 %4269 to i32
  %4275 = and i32 %4274, 255
  %4276 = tail call i32 @llvm.ctpop.i32(i32 %4275) #8
  %4277 = trunc i32 %4276 to i8
  %4278 = and i8 %4277, 1
  %4279 = xor i8 %4278, 1
  store i8 %4279, i8* %49, align 1, !tbaa !2446
  %4280 = xor i64 %4267, %4235
  %4281 = xor i64 %4280, %4269
  %4282 = lshr i64 %4281, 4
  %4283 = trunc i64 %4282 to i8
  %4284 = and i8 %4283, 1
  store i8 %4284, i8* %54, align 1, !tbaa !2447
  %4285 = icmp eq i64 %4269, 0
  %4286 = zext i1 %4285 to i8
  store i8 %4286, i8* %57, align 1, !tbaa !2448
  %4287 = lshr i64 %4269, 63
  %4288 = trunc i64 %4287 to i8
  store i8 %4288, i8* %60, align 1, !tbaa !2449
  %4289 = xor i64 %4287, %4253
  %4290 = xor i64 %4287, %4268
  %4291 = add nuw nsw i64 %4289, %4290
  %4292 = icmp eq i64 %4291, 2
  %4293 = zext i1 %4292 to i8
  store i8 %4293, i8* %66, align 1, !tbaa !2450
  %4294 = add i64 %4261, -108
  %4295 = add i64 %4009, 196
  store i64 %4295, i64* %PC, align 8
  %4296 = inttoptr i64 %4294 to i32*
  %4297 = load i32, i32* %4296, align 4
  %4298 = sext i32 %4297 to i64
  store i64 %4298, i64* %RCX, align 8, !tbaa !2428
  %4299 = shl nsw i64 %4298, 3
  %4300 = add i64 %4299, %4269
  %4301 = add i64 %4009, 201
  store i64 %4301, i64* %PC, align 8
  %4302 = load double, double* %231, align 1
  %4303 = inttoptr i64 %4300 to double*
  %4304 = load double, double* %4303, align 8
  %4305 = fmul double %4302, %4304
  store double %4305, double* %231, align 1, !tbaa !2452
  %4306 = load double, double* %228, align 1
  %4307 = fsub double %4306, %4305
  store double %4307, double* %228, align 1, !tbaa !2452
  %4308 = add i64 %4261, 48
  %4309 = add i64 %4009, 209
  store i64 %4309, i64* %PC, align 8
  %4310 = inttoptr i64 %4308 to i64*
  %4311 = load i64, i64* %4310, align 8
  store i64 %4311, i64* %RAX, align 8, !tbaa !2428
  %4312 = add i64 %4261, -100
  %4313 = add i64 %4009, 213
  store i64 %4313, i64* %PC, align 8
  %4314 = inttoptr i64 %4312 to i32*
  %4315 = load i32, i32* %4314, align 4
  %4316 = sext i32 %4315 to i64
  %4317 = mul nsw i64 %4316, 33800
  store i64 %4317, i64* %RCX, align 8, !tbaa !2428
  %4318 = lshr i64 %4317, 63
  %4319 = add i64 %4317, %4311
  store i64 %4319, i64* %RAX, align 8, !tbaa !2428
  %4320 = icmp ult i64 %4319, %4311
  %4321 = icmp ult i64 %4319, %4317
  %4322 = or i1 %4320, %4321
  %4323 = zext i1 %4322 to i8
  store i8 %4323, i8* %42, align 1, !tbaa !2432
  %4324 = trunc i64 %4319 to i32
  %4325 = and i32 %4324, 255
  %4326 = tail call i32 @llvm.ctpop.i32(i32 %4325) #8
  %4327 = trunc i32 %4326 to i8
  %4328 = and i8 %4327, 1
  %4329 = xor i8 %4328, 1
  store i8 %4329, i8* %49, align 1, !tbaa !2446
  %4330 = xor i64 %4317, %4311
  %4331 = xor i64 %4330, %4319
  %4332 = lshr i64 %4331, 4
  %4333 = trunc i64 %4332 to i8
  %4334 = and i8 %4333, 1
  store i8 %4334, i8* %54, align 1, !tbaa !2447
  %4335 = icmp eq i64 %4319, 0
  %4336 = zext i1 %4335 to i8
  store i8 %4336, i8* %57, align 1, !tbaa !2448
  %4337 = lshr i64 %4319, 63
  %4338 = trunc i64 %4337 to i8
  store i8 %4338, i8* %60, align 1, !tbaa !2449
  %4339 = lshr i64 %4311, 63
  %4340 = xor i64 %4337, %4339
  %4341 = xor i64 %4337, %4318
  %4342 = add nuw nsw i64 %4340, %4341
  %4343 = icmp eq i64 %4342, 2
  %4344 = zext i1 %4343 to i8
  store i8 %4344, i8* %66, align 1, !tbaa !2450
  %4345 = load i64, i64* %RBP, align 8
  %4346 = add i64 %4345, -104
  %4347 = add i64 %4009, 227
  store i64 %4347, i64* %PC, align 8
  %4348 = inttoptr i64 %4346 to i32*
  %4349 = load i32, i32* %4348, align 4
  %4350 = sext i32 %4349 to i64
  %4351 = mul nsw i64 %4350, 520
  store i64 %4351, i64* %RCX, align 8, !tbaa !2428
  %4352 = lshr i64 %4351, 63
  %4353 = add i64 %4351, %4319
  store i64 %4353, i64* %RAX, align 8, !tbaa !2428
  %4354 = icmp ult i64 %4353, %4319
  %4355 = icmp ult i64 %4353, %4351
  %4356 = or i1 %4354, %4355
  %4357 = zext i1 %4356 to i8
  store i8 %4357, i8* %42, align 1, !tbaa !2432
  %4358 = trunc i64 %4353 to i32
  %4359 = and i32 %4358, 255
  %4360 = tail call i32 @llvm.ctpop.i32(i32 %4359) #8
  %4361 = trunc i32 %4360 to i8
  %4362 = and i8 %4361, 1
  %4363 = xor i8 %4362, 1
  store i8 %4363, i8* %49, align 1, !tbaa !2446
  %4364 = xor i64 %4351, %4319
  %4365 = xor i64 %4364, %4353
  %4366 = lshr i64 %4365, 4
  %4367 = trunc i64 %4366 to i8
  %4368 = and i8 %4367, 1
  store i8 %4368, i8* %54, align 1, !tbaa !2447
  %4369 = icmp eq i64 %4353, 0
  %4370 = zext i1 %4369 to i8
  store i8 %4370, i8* %57, align 1, !tbaa !2448
  %4371 = lshr i64 %4353, 63
  %4372 = trunc i64 %4371 to i8
  store i8 %4372, i8* %60, align 1, !tbaa !2449
  %4373 = xor i64 %4371, %4337
  %4374 = xor i64 %4371, %4352
  %4375 = add nuw nsw i64 %4373, %4374
  %4376 = icmp eq i64 %4375, 2
  %4377 = zext i1 %4376 to i8
  store i8 %4377, i8* %66, align 1, !tbaa !2450
  %4378 = add i64 %4345, -108
  %4379 = add i64 %4009, 241
  store i64 %4379, i64* %PC, align 8
  %4380 = inttoptr i64 %4378 to i32*
  %4381 = load i32, i32* %4380, align 4
  %4382 = sext i32 %4381 to i64
  store i64 %4382, i64* %RCX, align 8, !tbaa !2428
  %4383 = shl nsw i64 %4382, 3
  %4384 = add i64 %4383, %4353
  %4385 = add i64 %4009, 246
  store i64 %4385, i64* %PC, align 8
  %4386 = load i64, i64* %147, align 1
  %4387 = inttoptr i64 %4384 to i64*
  store i64 %4386, i64* %4387, align 8
  %4388 = load i64, i64* %RBP, align 8
  %4389 = add i64 %4388, 16
  %4390 = load i64, i64* %PC, align 8
  %4391 = add i64 %4390, 4
  store i64 %4391, i64* %PC, align 8
  %4392 = inttoptr i64 %4389 to i64*
  %4393 = load i64, i64* %4392, align 8
  store i64 %4393, i64* %RAX, align 8, !tbaa !2428
  %4394 = add i64 %4388, -100
  %4395 = add i64 %4390, 8
  store i64 %4395, i64* %PC, align 8
  %4396 = inttoptr i64 %4394 to i32*
  %4397 = load i32, i32* %4396, align 4
  %4398 = sext i32 %4397 to i64
  %4399 = mul nsw i64 %4398, 520
  store i64 %4399, i64* %RCX, align 8, !tbaa !2428
  %4400 = lshr i64 %4399, 63
  %4401 = add i64 %4399, %4393
  store i64 %4401, i64* %RAX, align 8, !tbaa !2428
  %4402 = icmp ult i64 %4401, %4393
  %4403 = icmp ult i64 %4401, %4399
  %4404 = or i1 %4402, %4403
  %4405 = zext i1 %4404 to i8
  store i8 %4405, i8* %42, align 1, !tbaa !2432
  %4406 = trunc i64 %4401 to i32
  %4407 = and i32 %4406, 255
  %4408 = tail call i32 @llvm.ctpop.i32(i32 %4407) #8
  %4409 = trunc i32 %4408 to i8
  %4410 = and i8 %4409, 1
  %4411 = xor i8 %4410, 1
  store i8 %4411, i8* %49, align 1, !tbaa !2446
  %4412 = xor i64 %4399, %4393
  %4413 = xor i64 %4412, %4401
  %4414 = lshr i64 %4413, 4
  %4415 = trunc i64 %4414 to i8
  %4416 = and i8 %4415, 1
  store i8 %4416, i8* %54, align 1, !tbaa !2447
  %4417 = icmp eq i64 %4401, 0
  %4418 = zext i1 %4417 to i8
  store i8 %4418, i8* %57, align 1, !tbaa !2448
  %4419 = lshr i64 %4401, 63
  %4420 = trunc i64 %4419 to i8
  store i8 %4420, i8* %60, align 1, !tbaa !2449
  %4421 = lshr i64 %4393, 63
  %4422 = xor i64 %4419, %4421
  %4423 = xor i64 %4419, %4400
  %4424 = add nuw nsw i64 %4422, %4423
  %4425 = icmp eq i64 %4424, 2
  %4426 = zext i1 %4425 to i8
  store i8 %4426, i8* %66, align 1, !tbaa !2450
  %4427 = add i64 %4388, -104
  %4428 = add i64 %4390, 22
  store i64 %4428, i64* %PC, align 8
  %4429 = inttoptr i64 %4427 to i32*
  %4430 = load i32, i32* %4429, align 4
  %4431 = sext i32 %4430 to i64
  store i64 %4431, i64* %RCX, align 8, !tbaa !2428
  %4432 = shl nsw i64 %4431, 3
  %4433 = add i64 %4432, %4401
  %4434 = add i64 %4390, 27
  store i64 %4434, i64* %PC, align 8
  %4435 = inttoptr i64 %4433 to i64*
  %4436 = load i64, i64* %4435, align 8
  store i64 %4436, i64* %147, align 1, !tbaa !2452
  store double 0.000000e+00, double* %230, align 1, !tbaa !2452
  %4437 = add i64 %4388, 24
  %4438 = add i64 %4390, 31
  store i64 %4438, i64* %PC, align 8
  %4439 = inttoptr i64 %4437 to i64*
  %4440 = load i64, i64* %4439, align 8
  store i64 %4440, i64* %RAX, align 8, !tbaa !2428
  %4441 = add i64 %4390, 35
  store i64 %4441, i64* %PC, align 8
  %4442 = load i32, i32* %4396, align 4
  %4443 = sext i32 %4442 to i64
  %4444 = mul nsw i64 %4443, 33800
  store i64 %4444, i64* %RCX, align 8, !tbaa !2428
  %4445 = lshr i64 %4444, 63
  %4446 = add i64 %4444, %4440
  store i64 %4446, i64* %RAX, align 8, !tbaa !2428
  %4447 = icmp ult i64 %4446, %4440
  %4448 = icmp ult i64 %4446, %4444
  %4449 = or i1 %4447, %4448
  %4450 = zext i1 %4449 to i8
  store i8 %4450, i8* %42, align 1, !tbaa !2432
  %4451 = trunc i64 %4446 to i32
  %4452 = and i32 %4451, 255
  %4453 = tail call i32 @llvm.ctpop.i32(i32 %4452) #8
  %4454 = trunc i32 %4453 to i8
  %4455 = and i8 %4454, 1
  %4456 = xor i8 %4455, 1
  store i8 %4456, i8* %49, align 1, !tbaa !2446
  %4457 = xor i64 %4444, %4440
  %4458 = xor i64 %4457, %4446
  %4459 = lshr i64 %4458, 4
  %4460 = trunc i64 %4459 to i8
  %4461 = and i8 %4460, 1
  store i8 %4461, i8* %54, align 1, !tbaa !2447
  %4462 = icmp eq i64 %4446, 0
  %4463 = zext i1 %4462 to i8
  store i8 %4463, i8* %57, align 1, !tbaa !2448
  %4464 = lshr i64 %4446, 63
  %4465 = trunc i64 %4464 to i8
  store i8 %4465, i8* %60, align 1, !tbaa !2449
  %4466 = lshr i64 %4440, 63
  %4467 = xor i64 %4464, %4466
  %4468 = xor i64 %4464, %4445
  %4469 = add nuw nsw i64 %4467, %4468
  %4470 = icmp eq i64 %4469, 2
  %4471 = zext i1 %4470 to i8
  store i8 %4471, i8* %66, align 1, !tbaa !2450
  %4472 = load i64, i64* %RBP, align 8
  %4473 = add i64 %4472, -104
  %4474 = add i64 %4390, 49
  store i64 %4474, i64* %PC, align 8
  %4475 = inttoptr i64 %4473 to i32*
  %4476 = load i32, i32* %4475, align 4
  %4477 = sext i32 %4476 to i64
  %4478 = mul nsw i64 %4477, 520
  store i64 %4478, i64* %RCX, align 8, !tbaa !2428
  %4479 = lshr i64 %4478, 63
  %4480 = add i64 %4478, %4446
  store i64 %4480, i64* %RAX, align 8, !tbaa !2428
  %4481 = icmp ult i64 %4480, %4446
  %4482 = icmp ult i64 %4480, %4478
  %4483 = or i1 %4481, %4482
  %4484 = zext i1 %4483 to i8
  store i8 %4484, i8* %42, align 1, !tbaa !2432
  %4485 = trunc i64 %4480 to i32
  %4486 = and i32 %4485, 255
  %4487 = tail call i32 @llvm.ctpop.i32(i32 %4486) #8
  %4488 = trunc i32 %4487 to i8
  %4489 = and i8 %4488, 1
  %4490 = xor i8 %4489, 1
  store i8 %4490, i8* %49, align 1, !tbaa !2446
  %4491 = xor i64 %4478, %4446
  %4492 = xor i64 %4491, %4480
  %4493 = lshr i64 %4492, 4
  %4494 = trunc i64 %4493 to i8
  %4495 = and i8 %4494, 1
  store i8 %4495, i8* %54, align 1, !tbaa !2447
  %4496 = icmp eq i64 %4480, 0
  %4497 = zext i1 %4496 to i8
  store i8 %4497, i8* %57, align 1, !tbaa !2448
  %4498 = lshr i64 %4480, 63
  %4499 = trunc i64 %4498 to i8
  store i8 %4499, i8* %60, align 1, !tbaa !2449
  %4500 = xor i64 %4498, %4464
  %4501 = xor i64 %4498, %4479
  %4502 = add nuw nsw i64 %4500, %4501
  %4503 = icmp eq i64 %4502, 2
  %4504 = zext i1 %4503 to i8
  store i8 %4504, i8* %66, align 1, !tbaa !2450
  %4505 = add i64 %4472, -108
  %4506 = add i64 %4390, 63
  store i64 %4506, i64* %PC, align 8
  %4507 = inttoptr i64 %4505 to i32*
  %4508 = load i32, i32* %4507, align 4
  %4509 = sext i32 %4508 to i64
  store i64 %4509, i64* %RCX, align 8, !tbaa !2428
  %4510 = shl nsw i64 %4509, 3
  %4511 = add i64 %4510, %4480
  %4512 = add i64 %4390, 68
  store i64 %4512, i64* %PC, align 8
  %4513 = load i64, i64* %147, align 1
  %4514 = inttoptr i64 %4511 to i64*
  store i64 %4513, i64* %4514, align 8
  %4515 = load i64, i64* %RBP, align 8
  %4516 = add i64 %4515, -108
  %4517 = load i64, i64* %PC, align 8
  %4518 = add i64 %4517, 3
  store i64 %4518, i64* %PC, align 8
  %4519 = inttoptr i64 %4516 to i32*
  %4520 = load i32, i32* %4519, align 4
  %4521 = add i32 %4520, 1
  %4522 = zext i32 %4521 to i64
  store i64 %4522, i64* %RAX, align 8, !tbaa !2428
  %4523 = icmp eq i32 %4520, -1
  %4524 = icmp eq i32 %4521, 0
  %4525 = or i1 %4523, %4524
  %4526 = zext i1 %4525 to i8
  store i8 %4526, i8* %42, align 1, !tbaa !2432
  %4527 = and i32 %4521, 255
  %4528 = tail call i32 @llvm.ctpop.i32(i32 %4527) #8
  %4529 = trunc i32 %4528 to i8
  %4530 = and i8 %4529, 1
  %4531 = xor i8 %4530, 1
  store i8 %4531, i8* %49, align 1, !tbaa !2446
  %4532 = xor i32 %4520, %4521
  %4533 = lshr i32 %4532, 4
  %4534 = trunc i32 %4533 to i8
  %4535 = and i8 %4534, 1
  store i8 %4535, i8* %54, align 1, !tbaa !2447
  %4536 = zext i1 %4524 to i8
  store i8 %4536, i8* %57, align 1, !tbaa !2448
  %4537 = lshr i32 %4521, 31
  %4538 = trunc i32 %4537 to i8
  store i8 %4538, i8* %60, align 1, !tbaa !2449
  %4539 = lshr i32 %4520, 31
  %4540 = xor i32 %4537, %4539
  %4541 = add nuw nsw i32 %4540, %4537
  %4542 = icmp eq i32 %4541, 2
  %4543 = zext i1 %4542 to i8
  store i8 %4543, i8* %66, align 1, !tbaa !2450
  %4544 = add i64 %4517, 9
  store i64 %4544, i64* %PC, align 8
  store i32 %4521, i32* %4519, align 4
  %4545 = load i64, i64* %PC, align 8
  %4546 = add i64 %4545, -679
  store i64 %4546, i64* %PC, align 8, !tbaa !2428
  br label %block_4014a0

block_401486:                                     ; preds = %block_40147a
  %4547 = add i64 %238, -104
  %4548 = add i64 %274, 7
  store i64 %4548, i64* %PC, align 8
  %4549 = inttoptr i64 %4547 to i32*
  store i32 0, i32* %4549, align 4
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_40148d

block_401ee5:                                     ; preds = %block_40148d
  %4550 = add i64 %327, -100
  %4551 = add i64 %363, 8
  store i64 %4551, i64* %PC, align 8
  %4552 = inttoptr i64 %4550 to i32*
  %4553 = load i32, i32* %4552, align 4
  %4554 = add i32 %4553, 1
  %4555 = zext i32 %4554 to i64
  store i64 %4555, i64* %RAX, align 8, !tbaa !2428
  %4556 = icmp eq i32 %4553, -1
  %4557 = icmp eq i32 %4554, 0
  %4558 = or i1 %4556, %4557
  %4559 = zext i1 %4558 to i8
  store i8 %4559, i8* %42, align 1, !tbaa !2432
  %4560 = and i32 %4554, 255
  %4561 = tail call i32 @llvm.ctpop.i32(i32 %4560) #8
  %4562 = trunc i32 %4561 to i8
  %4563 = and i8 %4562, 1
  %4564 = xor i8 %4563, 1
  store i8 %4564, i8* %49, align 1, !tbaa !2446
  %4565 = xor i32 %4553, %4554
  %4566 = lshr i32 %4565, 4
  %4567 = trunc i32 %4566 to i8
  %4568 = and i8 %4567, 1
  store i8 %4568, i8* %54, align 1, !tbaa !2447
  %4569 = zext i1 %4557 to i8
  store i8 %4569, i8* %57, align 1, !tbaa !2448
  %4570 = lshr i32 %4554, 31
  %4571 = trunc i32 %4570 to i8
  store i8 %4571, i8* %60, align 1, !tbaa !2449
  %4572 = lshr i32 %4553, 31
  %4573 = xor i32 %4570, %4572
  %4574 = add nuw nsw i32 %4573, %4570
  %4575 = icmp eq i32 %4574, 2
  %4576 = zext i1 %4575 to i8
  store i8 %4576, i8* %66, align 1, !tbaa !2450
  %4577 = add i64 %363, 14
  store i64 %4577, i64* %PC, align 8
  store i32 %4554, i32* %4552, align 4
  %4578 = load i64, i64* %PC, align 8
  %4579 = add i64 %4578, -2681
  store i64 %4579, i64* %PC, align 8, !tbaa !2428
  br label %block_40147a

block_4014a0:                                     ; preds = %block_4014ac, %block_401499
  %4580 = phi i64 [ %4546, %block_4014ac ], [ %.pre3, %block_401499 ]
  %4581 = load i64, i64* %RBP, align 8
  %4582 = add i64 %4581, -108
  %4583 = add i64 %4580, 3
  store i64 %4583, i64* %PC, align 8
  %4584 = inttoptr i64 %4582 to i32*
  %4585 = load i32, i32* %4584, align 4
  %4586 = zext i32 %4585 to i64
  store i64 %4586, i64* %RAX, align 8, !tbaa !2428
  %4587 = add i64 %4581, -48
  %4588 = add i64 %4580, 6
  store i64 %4588, i64* %PC, align 8
  %4589 = inttoptr i64 %4587 to i32*
  %4590 = load i32, i32* %4589, align 4
  %4591 = sub i32 %4585, %4590
  %4592 = icmp ult i32 %4585, %4590
  %4593 = zext i1 %4592 to i8
  store i8 %4593, i8* %42, align 1, !tbaa !2432
  %4594 = and i32 %4591, 255
  %4595 = tail call i32 @llvm.ctpop.i32(i32 %4594) #8
  %4596 = trunc i32 %4595 to i8
  %4597 = and i8 %4596, 1
  %4598 = xor i8 %4597, 1
  store i8 %4598, i8* %49, align 1, !tbaa !2446
  %4599 = xor i32 %4590, %4585
  %4600 = xor i32 %4599, %4591
  %4601 = lshr i32 %4600, 4
  %4602 = trunc i32 %4601 to i8
  %4603 = and i8 %4602, 1
  store i8 %4603, i8* %54, align 1, !tbaa !2447
  %4604 = icmp eq i32 %4591, 0
  %4605 = zext i1 %4604 to i8
  store i8 %4605, i8* %57, align 1, !tbaa !2448
  %4606 = lshr i32 %4591, 31
  %4607 = trunc i32 %4606 to i8
  store i8 %4607, i8* %60, align 1, !tbaa !2449
  %4608 = lshr i32 %4585, 31
  %4609 = lshr i32 %4590, 31
  %4610 = xor i32 %4609, %4608
  %4611 = xor i32 %4606, %4608
  %4612 = add nuw nsw i32 %4611, %4610
  %4613 = icmp eq i32 %4612, 2
  %4614 = zext i1 %4613 to i8
  store i8 %4614, i8* %66, align 1, !tbaa !2450
  %4615 = icmp ne i8 %4607, 0
  %4616 = xor i1 %4615, %4613
  %.v6 = select i1 %4616, i64 12, i64 684
  %4617 = add i64 %4580, %.v6
  %4618 = add i64 %4581, 32
  %4619 = add i64 %4617, 4
  store i64 %4619, i64* %PC, align 8
  %4620 = inttoptr i64 %4618 to i64*
  %4621 = load i64, i64* %4620, align 8
  store i64 %4621, i64* %RAX, align 8, !tbaa !2428
  %4622 = add i64 %4581, -100
  %4623 = add i64 %4617, 8
  store i64 %4623, i64* %PC, align 8
  %4624 = inttoptr i64 %4622 to i32*
  %4625 = load i32, i32* %4624, align 4
  %4626 = sext i32 %4625 to i64
  %4627 = mul nsw i64 %4626, 33800
  store i64 %4627, i64* %RCX, align 8, !tbaa !2428
  %4628 = lshr i64 %4627, 63
  %4629 = add i64 %4627, %4621
  store i64 %4629, i64* %RAX, align 8, !tbaa !2428
  %4630 = icmp ult i64 %4629, %4621
  %4631 = icmp ult i64 %4629, %4627
  %4632 = or i1 %4630, %4631
  %4633 = zext i1 %4632 to i8
  store i8 %4633, i8* %42, align 1, !tbaa !2432
  %4634 = trunc i64 %4629 to i32
  %4635 = and i32 %4634, 255
  %4636 = tail call i32 @llvm.ctpop.i32(i32 %4635) #8
  %4637 = trunc i32 %4636 to i8
  %4638 = and i8 %4637, 1
  %4639 = xor i8 %4638, 1
  store i8 %4639, i8* %49, align 1, !tbaa !2446
  %4640 = xor i64 %4627, %4621
  %4641 = xor i64 %4640, %4629
  %4642 = lshr i64 %4641, 4
  %4643 = trunc i64 %4642 to i8
  %4644 = and i8 %4643, 1
  store i8 %4644, i8* %54, align 1, !tbaa !2447
  %4645 = icmp eq i64 %4629, 0
  %4646 = zext i1 %4645 to i8
  store i8 %4646, i8* %57, align 1, !tbaa !2448
  %4647 = lshr i64 %4629, 63
  %4648 = trunc i64 %4647 to i8
  store i8 %4648, i8* %60, align 1, !tbaa !2449
  %4649 = lshr i64 %4621, 63
  %4650 = xor i64 %4647, %4649
  %4651 = xor i64 %4647, %4628
  %4652 = add nuw nsw i64 %4650, %4651
  %4653 = icmp eq i64 %4652, 2
  %4654 = zext i1 %4653 to i8
  store i8 %4654, i8* %66, align 1, !tbaa !2450
  %4655 = add i64 %4581, -104
  %4656 = add i64 %4617, 22
  store i64 %4656, i64* %PC, align 8
  %4657 = inttoptr i64 %4655 to i32*
  %4658 = load i32, i32* %4657, align 4
  %4659 = sext i32 %4658 to i64
  %4660 = mul nsw i64 %4659, 520
  store i64 %4660, i64* %RCX, align 8, !tbaa !2428
  %4661 = lshr i64 %4660, 63
  %4662 = add i64 %4617, 32
  store i64 %4662, i64* %PC, align 8
  %4663 = add i64 %4660, %4629
  store i64 %4663, i64* %RAX, align 8, !tbaa !2428
  %4664 = icmp ult i64 %4663, %4629
  %4665 = icmp ult i64 %4663, %4660
  %4666 = or i1 %4664, %4665
  %4667 = zext i1 %4666 to i8
  store i8 %4667, i8* %42, align 1, !tbaa !2432
  %4668 = trunc i64 %4663 to i32
  %4669 = and i32 %4668, 255
  %4670 = tail call i32 @llvm.ctpop.i32(i32 %4669) #8
  %4671 = trunc i32 %4670 to i8
  %4672 = and i8 %4671, 1
  %4673 = xor i8 %4672, 1
  store i8 %4673, i8* %49, align 1, !tbaa !2446
  %4674 = xor i64 %4660, %4629
  %4675 = xor i64 %4674, %4663
  %4676 = lshr i64 %4675, 4
  %4677 = trunc i64 %4676 to i8
  %4678 = and i8 %4677, 1
  store i8 %4678, i8* %54, align 1, !tbaa !2447
  %4679 = icmp eq i64 %4663, 0
  %4680 = zext i1 %4679 to i8
  store i8 %4680, i8* %57, align 1, !tbaa !2448
  %4681 = lshr i64 %4663, 63
  %4682 = trunc i64 %4681 to i8
  store i8 %4682, i8* %60, align 1, !tbaa !2449
  %4683 = xor i64 %4681, %4647
  %4684 = xor i64 %4681, %4661
  %4685 = add nuw nsw i64 %4683, %4684
  %4686 = icmp eq i64 %4685, 2
  %4687 = zext i1 %4686 to i8
  store i8 %4687, i8* %66, align 1, !tbaa !2450
  br i1 %4616, label %block_4014ac, label %block_40174c
}

; Function Attrs: noinline
define %struct.Memory* @sub_400800_xmalloc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400800:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #8
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  store i64 %38, i64* %RAX, align 8, !tbaa !2428
  store i64 32, i64* %RCX, align 8, !tbaa !2428
  store i64 32, i64* %RSI, align 8, !tbaa !2428
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 22
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 8
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %44 to i64*
  store i64 0, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDX, align 8, !tbaa !2428
  %54 = load i64, i64* %RAX, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %50, -639
  %56 = add i64 %50, 12
  %57 = load i64, i64* %RSP, align 8, !tbaa !2428
  %58 = add i64 %57, -8
  %59 = inttoptr i64 %58 to i64*
  store i64 %56, i64* %59, align 8
  store i64 %58, i64* %RSP, align 8, !tbaa !2428
  store i64 %55, i64* %PC, align 8, !tbaa !2428
  %60 = tail call fastcc %struct.Memory* @ext_4005a0_posix_memalign(%struct.State* nonnull %0, %struct.Memory* %2)
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -20
  %63 = load i32, i32* %EAX, align 4
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %62 to i32*
  store i32 %63, i32* %66, align 4
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -16
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 5
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %68 to i64*
  %72 = load i64, i64* %71, align 8
  store i8 0, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %72 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #8
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  %79 = icmp eq i64 %72, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %28, align 1, !tbaa !2448
  %81 = lshr i64 %72, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  %.v = select i1 %79, i64 21, i64 11
  %83 = add i64 %69, %.v
  store i64 %83, i64* %PC, align 8, !tbaa !2428
  br i1 %79, label %block_400843, label %block_400839

block_400843:                                     ; preds = %block_400839, %block_400800
  %84 = phi i64 [ %120, %block_400839 ], [ %83, %block_400800 ]
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 119), i64* %RSI, align 8, !tbaa !2428
  %85 = load i64, i64* @stderr, align 32
  store i64 %85, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2454
  %86 = add i64 %84, -707
  %87 = add i64 %84, 25
  %88 = load i64, i64* %RSP, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %87, i64* %90, align 8
  store i64 %89, i64* %RSP, align 8, !tbaa !2428
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  %91 = tail call fastcc %struct.Memory* @ext_6040f8_fprintf(%struct.State* nonnull %0, %struct.Memory* %60)
  %92 = load i64, i64* %PC, align 8
  store i64 1, i64* %RDI, align 8, !tbaa !2428
  %93 = load i64, i64* %RBP, align 8
  %94 = add i64 %93, -24
  %95 = load i32, i32* %EAX, align 4
  %96 = add i64 %92, 8
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %94 to i32*
  store i32 %95, i32* %97, align 4
  %98 = load i64, i64* %PC, align 8
  %99 = add i64 %98, -724
  %100 = add i64 %98, 5
  %101 = load i64, i64* %RSP, align 8, !tbaa !2428
  %102 = add i64 %101, -8
  %103 = inttoptr i64 %102 to i64*
  store i64 %100, i64* %103, align 8
  store i64 %102, i64* %RSP, align 8, !tbaa !2428
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %104 = tail call fastcc %struct.Memory* @ext_6040c8_exit(%struct.State* nonnull %0, %struct.Memory* %91)
  %105 = load i64, i64* %PC, align 8
  %106 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %105, %struct.Memory* %104)
  ret %struct.Memory* %106

block_400839:                                     ; preds = %block_400800
  %107 = add i64 %67, -20
  %108 = add i64 %83, 4
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %107 to i32*
  %110 = load i32, i32* %109, align 4
  store i8 0, i8* %13, align 1, !tbaa !2432
  %111 = and i32 %110, 255
  %112 = tail call i32 @llvm.ctpop.i32(i32 %111) #8
  %113 = trunc i32 %112 to i8
  %114 = and i8 %113, 1
  %115 = xor i8 %114, 1
  store i8 %115, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  %116 = icmp eq i32 %110, 0
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %28, align 1, !tbaa !2448
  %118 = lshr i32 %110, 31
  %119 = trunc i32 %118 to i8
  store i8 %119, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  %.v1 = select i1 %116, i64 48, i64 10
  %120 = add i64 %83, %.v1
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  br i1 %116, label %block_400869, label %block_400843

block_400869:                                     ; preds = %block_400839
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC, align 8
  %122 = load i64, i64* %71, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = load i64, i64* %RSP, align 8
  %124 = add i64 %123, 32
  store i64 %124, i64* %RSP, align 8, !tbaa !2428
  %125 = icmp ugt i64 %123, -33
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %13, align 1, !tbaa !2432
  %127 = trunc i64 %124 to i32
  %128 = and i32 %127, 255
  %129 = tail call i32 @llvm.ctpop.i32(i32 %128) #8
  %130 = trunc i32 %129 to i8
  %131 = and i8 %130, 1
  %132 = xor i8 %131, 1
  store i8 %132, i8* %20, align 1, !tbaa !2446
  %133 = xor i64 %123, %124
  %134 = lshr i64 %133, 4
  %135 = trunc i64 %134 to i8
  %136 = and i8 %135, 1
  store i8 %136, i8* %25, align 1, !tbaa !2447
  %137 = icmp eq i64 %124, 0
  %138 = zext i1 %137 to i8
  store i8 %138, i8* %28, align 1, !tbaa !2448
  %139 = lshr i64 %124, 63
  %140 = trunc i64 %139 to i8
  store i8 %140, i8* %31, align 1, !tbaa !2449
  %141 = lshr i64 %123, 63
  %142 = xor i64 %139, %141
  %143 = add nuw nsw i64 %142, %139
  %144 = icmp eq i64 %143, 2
  %145 = zext i1 %144 to i8
  store i8 %145, i8* %37, align 1, !tbaa !2450
  %146 = add i64 %120, 9
  store i64 %146, i64* %PC, align 8
  %147 = add i64 %123, 40
  %148 = inttoptr i64 %124 to i64*
  %149 = load i64, i64* %148, align 8
  store i64 %149, i64* %RBP, align 8, !tbaa !2428
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %150 = add i64 %120, 10
  store i64 %150, i64* %PC, align 8
  %151 = inttoptr i64 %147 to i64*
  %152 = load i64, i64* %151, align 8
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %153 = add i64 %123, 48
  store i64 %153, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %60
}

; Function Attrs: noinline
define %struct.Memory* @sub_402e70___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402e70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400880_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400880:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = load i64, i64* %RSP, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %7, i64* %11, align 8
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = load i64, i64* %R15, align 8
  %14 = add i64 %12, 5
  store i64 %14, i64* %PC, align 8
  %15 = add i64 %9, -16
  %16 = inttoptr i64 %15 to i64*
  store i64 %13, i64* %16, align 8
  %17 = load i64, i64* %R14, align 8
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 2
  store i64 %19, i64* %PC, align 8
  %20 = add i64 %9, -24
  %21 = inttoptr i64 %20 to i64*
  store i64 %17, i64* %21, align 8
  %22 = load i64, i64* %R13, align 8
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 2
  store i64 %24, i64* %PC, align 8
  %25 = add i64 %9, -32
  %26 = inttoptr i64 %25 to i64*
  store i64 %22, i64* %26, align 8
  %27 = load i64, i64* %R12, align 8
  %28 = load i64, i64* %PC, align 8
  %29 = add i64 %28, 2
  store i64 %29, i64* %PC, align 8
  %30 = add i64 %9, -40
  %31 = inttoptr i64 %30 to i64*
  store i64 %27, i64* %31, align 8
  %32 = load i64, i64* %RBX, align 8
  %33 = load i64, i64* %PC, align 8
  %34 = add i64 %33, 1
  store i64 %34, i64* %PC, align 8
  %35 = add i64 %9, -48
  %36 = inttoptr i64 %35 to i64*
  store i64 %32, i64* %36, align 8
  %37 = load i64, i64* %PC, align 8
  %38 = add i64 %9, -440
  store i64 %38, i64* %RSP, align 8, !tbaa !2428
  %39 = icmp ult i64 %35, 392
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %40, i8* %41, align 1, !tbaa !2432
  %42 = trunc i64 %38 to i32
  %43 = and i32 %42, 255
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #8
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %47, i8* %48, align 1, !tbaa !2446
  %49 = xor i64 %35, %38
  %50 = lshr i64 %49, 4
  %51 = trunc i64 %50 to i8
  %52 = and i8 %51, 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %52, i8* %53, align 1, !tbaa !2447
  %54 = icmp eq i64 %38, 0
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %55, i8* %56, align 1, !tbaa !2448
  %57 = lshr i64 %38, 63
  %58 = trunc i64 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %58, i8* %59, align 1, !tbaa !2449
  %60 = lshr i64 %35, 63
  %61 = xor i64 %57, %60
  %62 = add nuw nsw i64 %61, %60
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %64, i8* %65, align 1, !tbaa !2450
  store i64 4225, i64* %RCX, align 8, !tbaa !2428
  store i64 8, i64* %RAX, align 8, !tbaa !2428
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -44
  %68 = add i64 %37, 26
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %67 to i32*
  store i32 0, i32* %69, align 4
  %70 = load i64, i64* %RBP, align 8
  %71 = add i64 %70, -48
  %72 = load i32, i32* %EDI, align 4
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 3
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %71 to i32*
  store i32 %72, i32* %75, align 4
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -56
  %78 = load i64, i64* %RSI, align 8
  %79 = load i64, i64* %PC, align 8
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %77 to i64*
  store i64 %78, i64* %81, align 8
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -60
  %84 = load i64, i64* %PC, align 8
  %85 = add i64 %84, 7
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %83 to i32*
  store i32 64, i32* %86, align 4
  %87 = load i64, i64* %RBP, align 8
  %88 = add i64 %87, -64
  %89 = load i64, i64* %PC, align 8
  %90 = add i64 %89, 7
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %88 to i32*
  store i32 64, i32* %91, align 4
  %92 = load i64, i64* %RBP, align 8
  %93 = add i64 %92, -68
  %94 = load i64, i64* %PC, align 8
  %95 = add i64 %94, 7
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %93 to i32*
  store i32 64, i32* %96, align 4
  %97 = load i64, i64* %RCX, align 8
  %98 = load i64, i64* %PC, align 8
  store i64 %97, i64* %RDI, align 8, !tbaa !2428
  %99 = load i32, i32* %EAX, align 4
  %100 = zext i32 %99 to i64
  store i64 %100, i64* %RSI, align 8, !tbaa !2428
  %101 = add i64 %98, -259
  %102 = add i64 %98, 10
  %103 = load i64, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %102, i64* %105, align 8
  store i64 %104, i64* %RSP, align 8, !tbaa !2428
  store i64 %101, i64* %PC, align 8, !tbaa !2428
  %106 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %101, %struct.Memory* %2)
  %107 = load i64, i64* %PC, align 8
  store i64 4225, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %108 = load i64, i64* %RBP, align 8
  %109 = add i64 %108, -96
  %110 = load i64, i64* %RAX, align 8
  %111 = add i64 %107, 16
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %109 to i64*
  store i64 %110, i64* %112, align 8
  %113 = load i64, i64* %PC, align 8
  %114 = add i64 %113, -285
  %115 = add i64 %113, 5
  %116 = load i64, i64* %RSP, align 8, !tbaa !2428
  %117 = add i64 %116, -8
  %118 = inttoptr i64 %117 to i64*
  store i64 %115, i64* %118, align 8
  store i64 %117, i64* %RSP, align 8, !tbaa !2428
  store i64 %114, i64* %PC, align 8, !tbaa !2428
  %119 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %114, %struct.Memory* %106)
  %120 = load i64, i64* %PC, align 8
  store i64 4225, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %121 = load i64, i64* %RBP, align 8
  %122 = add i64 %121, -104
  %123 = load i64, i64* %RAX, align 8
  %124 = add i64 %120, 16
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %122 to i64*
  store i64 %123, i64* %125, align 8
  %126 = load i64, i64* %PC, align 8
  %127 = add i64 %126, -306
  %128 = add i64 %126, 5
  %129 = load i64, i64* %RSP, align 8, !tbaa !2428
  %130 = add i64 %129, -8
  %131 = inttoptr i64 %130 to i64*
  store i64 %128, i64* %131, align 8
  store i64 %130, i64* %RSP, align 8, !tbaa !2428
  store i64 %127, i64* %PC, align 8, !tbaa !2428
  %132 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %127, %struct.Memory* %119)
  %133 = load i64, i64* %PC, align 8
  store i64 4225, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %134 = load i64, i64* %RBP, align 8
  %135 = add i64 %134, -112
  %136 = load i64, i64* %RAX, align 8
  %137 = add i64 %133, 16
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %135 to i64*
  store i64 %136, i64* %138, align 8
  %139 = load i64, i64* %PC, align 8
  %140 = add i64 %139, -327
  %141 = add i64 %139, 5
  %142 = load i64, i64* %RSP, align 8, !tbaa !2428
  %143 = add i64 %142, -8
  %144 = inttoptr i64 %143 to i64*
  store i64 %141, i64* %144, align 8
  store i64 %143, i64* %RSP, align 8, !tbaa !2428
  store i64 %140, i64* %PC, align 8, !tbaa !2428
  %145 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %140, %struct.Memory* %132)
  %146 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %147 = load i64, i64* %RBP, align 8
  %148 = add i64 %147, -120
  %149 = load i64, i64* %RAX, align 8
  %150 = add i64 %146, 16
  store i64 %150, i64* %PC, align 8
  %151 = inttoptr i64 %148 to i64*
  store i64 %149, i64* %151, align 8
  %152 = load i64, i64* %PC, align 8
  %153 = add i64 %152, -348
  %154 = add i64 %152, 5
  %155 = load i64, i64* %RSP, align 8, !tbaa !2428
  %156 = add i64 %155, -8
  %157 = inttoptr i64 %156 to i64*
  store i64 %154, i64* %157, align 8
  store i64 %156, i64* %RSP, align 8, !tbaa !2428
  store i64 %153, i64* %PC, align 8, !tbaa !2428
  %158 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %153, %struct.Memory* %145)
  %159 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %160 = load i64, i64* %RBP, align 8
  %161 = add i64 %160, -128
  %162 = load i64, i64* %RAX, align 8
  %163 = add i64 %159, 16
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %161 to i64*
  store i64 %162, i64* %164, align 8
  %165 = load i64, i64* %PC, align 8
  %166 = add i64 %165, -369
  %167 = add i64 %165, 5
  %168 = load i64, i64* %RSP, align 8, !tbaa !2428
  %169 = add i64 %168, -8
  %170 = inttoptr i64 %169 to i64*
  store i64 %167, i64* %170, align 8
  store i64 %169, i64* %RSP, align 8, !tbaa !2428
  store i64 %166, i64* %PC, align 8, !tbaa !2428
  %171 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %166, %struct.Memory* %158)
  %172 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -136
  %175 = load i64, i64* %RAX, align 8
  %176 = add i64 %172, 19
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  store i64 %175, i64* %177, align 8
  %178 = load i64, i64* %PC, align 8
  %179 = add i64 %178, -393
  %180 = add i64 %178, 5
  %181 = load i64, i64* %RSP, align 8, !tbaa !2428
  %182 = add i64 %181, -8
  %183 = inttoptr i64 %182 to i64*
  store i64 %180, i64* %183, align 8
  store i64 %182, i64* %RSP, align 8, !tbaa !2428
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  %184 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %179, %struct.Memory* %171)
  %185 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %186 = load i64, i64* %RBP, align 8
  %187 = add i64 %186, -144
  %188 = load i64, i64* %RAX, align 8
  %189 = add i64 %185, 19
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %187 to i64*
  store i64 %188, i64* %190, align 8
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, -417
  %193 = add i64 %191, 5
  %194 = load i64, i64* %RSP, align 8, !tbaa !2428
  %195 = add i64 %194, -8
  %196 = inttoptr i64 %195 to i64*
  store i64 %193, i64* %196, align 8
  store i64 %195, i64* %RSP, align 8, !tbaa !2428
  store i64 %192, i64* %PC, align 8, !tbaa !2428
  %197 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %192, %struct.Memory* %184)
  %198 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %199 = load i64, i64* %RBP, align 8
  %200 = add i64 %199, -152
  %201 = load i64, i64* %RAX, align 8
  %202 = add i64 %198, 19
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %200 to i64*
  store i64 %201, i64* %203, align 8
  %204 = load i64, i64* %PC, align 8
  %205 = add i64 %204, -441
  %206 = add i64 %204, 5
  %207 = load i64, i64* %RSP, align 8, !tbaa !2428
  %208 = add i64 %207, -8
  %209 = inttoptr i64 %208 to i64*
  store i64 %206, i64* %209, align 8
  store i64 %208, i64* %RSP, align 8, !tbaa !2428
  store i64 %205, i64* %PC, align 8, !tbaa !2428
  %210 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %205, %struct.Memory* %197)
  %211 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %212 = load i64, i64* %RBP, align 8
  %213 = add i64 %212, -160
  %214 = load i64, i64* %RAX, align 8
  %215 = add i64 %211, 19
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %213 to i64*
  store i64 %214, i64* %216, align 8
  %217 = load i64, i64* %PC, align 8
  %218 = add i64 %217, -465
  %219 = add i64 %217, 5
  %220 = load i64, i64* %RSP, align 8, !tbaa !2428
  %221 = add i64 %220, -8
  %222 = inttoptr i64 %221 to i64*
  store i64 %219, i64* %222, align 8
  store i64 %221, i64* %RSP, align 8, !tbaa !2428
  store i64 %218, i64* %PC, align 8, !tbaa !2428
  %223 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %218, %struct.Memory* %210)
  %224 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %225 = load i64, i64* %RBP, align 8
  %226 = add i64 %225, -168
  %227 = load i64, i64* %RAX, align 8
  %228 = add i64 %224, 19
  store i64 %228, i64* %PC, align 8
  %229 = inttoptr i64 %226 to i64*
  store i64 %227, i64* %229, align 8
  %230 = load i64, i64* %PC, align 8
  %231 = add i64 %230, -489
  %232 = add i64 %230, 5
  %233 = load i64, i64* %RSP, align 8, !tbaa !2428
  %234 = add i64 %233, -8
  %235 = inttoptr i64 %234 to i64*
  store i64 %232, i64* %235, align 8
  store i64 %234, i64* %RSP, align 8, !tbaa !2428
  store i64 %231, i64* %PC, align 8, !tbaa !2428
  %236 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %231, %struct.Memory* %223)
  %237 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %238 = load i64, i64* %RBP, align 8
  %239 = add i64 %238, -176
  %240 = load i64, i64* %RAX, align 8
  %241 = add i64 %237, 19
  store i64 %241, i64* %PC, align 8
  %242 = inttoptr i64 %239 to i64*
  store i64 %240, i64* %242, align 8
  %243 = load i64, i64* %PC, align 8
  %244 = add i64 %243, -513
  %245 = add i64 %243, 5
  %246 = load i64, i64* %RSP, align 8, !tbaa !2428
  %247 = add i64 %246, -8
  %248 = inttoptr i64 %247 to i64*
  store i64 %245, i64* %248, align 8
  store i64 %247, i64* %RSP, align 8, !tbaa !2428
  store i64 %244, i64* %PC, align 8, !tbaa !2428
  %249 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %244, %struct.Memory* %236)
  %250 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %251 = load i64, i64* %RBP, align 8
  %252 = add i64 %251, -184
  %253 = load i64, i64* %RAX, align 8
  %254 = add i64 %250, 19
  store i64 %254, i64* %PC, align 8
  %255 = inttoptr i64 %252 to i64*
  store i64 %253, i64* %255, align 8
  %256 = load i64, i64* %PC, align 8
  %257 = add i64 %256, -537
  %258 = add i64 %256, 5
  %259 = load i64, i64* %RSP, align 8, !tbaa !2428
  %260 = add i64 %259, -8
  %261 = inttoptr i64 %260 to i64*
  store i64 %258, i64* %261, align 8
  store i64 %260, i64* %RSP, align 8, !tbaa !2428
  store i64 %257, i64* %PC, align 8, !tbaa !2428
  %262 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %257, %struct.Memory* %249)
  %263 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %264 = load i64, i64* %RBP, align 8
  %265 = add i64 %264, -192
  %266 = load i64, i64* %RAX, align 8
  %267 = add i64 %263, 19
  store i64 %267, i64* %PC, align 8
  %268 = inttoptr i64 %265 to i64*
  store i64 %266, i64* %268, align 8
  %269 = load i64, i64* %PC, align 8
  %270 = add i64 %269, -561
  %271 = add i64 %269, 5
  %272 = load i64, i64* %RSP, align 8, !tbaa !2428
  %273 = add i64 %272, -8
  %274 = inttoptr i64 %273 to i64*
  store i64 %271, i64* %274, align 8
  store i64 %273, i64* %RSP, align 8, !tbaa !2428
  store i64 %270, i64* %PC, align 8, !tbaa !2428
  %275 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %270, %struct.Memory* %262)
  %276 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %277 = load i64, i64* %RBP, align 8
  %278 = add i64 %277, -200
  %279 = load i64, i64* %RAX, align 8
  %280 = add i64 %276, 19
  store i64 %280, i64* %PC, align 8
  %281 = inttoptr i64 %278 to i64*
  store i64 %279, i64* %281, align 8
  %282 = load i64, i64* %PC, align 8
  %283 = add i64 %282, -585
  %284 = add i64 %282, 5
  %285 = load i64, i64* %RSP, align 8, !tbaa !2428
  %286 = add i64 %285, -8
  %287 = inttoptr i64 %286 to i64*
  store i64 %284, i64* %287, align 8
  store i64 %286, i64* %RSP, align 8, !tbaa !2428
  store i64 %283, i64* %PC, align 8, !tbaa !2428
  %288 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %283, %struct.Memory* %275)
  %289 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %290 = load i64, i64* %RBP, align 8
  %291 = add i64 %290, -208
  %292 = load i64, i64* %RAX, align 8
  %293 = add i64 %289, 19
  store i64 %293, i64* %PC, align 8
  %294 = inttoptr i64 %291 to i64*
  store i64 %292, i64* %294, align 8
  %295 = load i64, i64* %PC, align 8
  %296 = add i64 %295, -609
  %297 = add i64 %295, 5
  %298 = load i64, i64* %RSP, align 8, !tbaa !2428
  %299 = add i64 %298, -8
  %300 = inttoptr i64 %299 to i64*
  store i64 %297, i64* %300, align 8
  store i64 %299, i64* %RSP, align 8, !tbaa !2428
  store i64 %296, i64* %PC, align 8, !tbaa !2428
  %301 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %296, %struct.Memory* %288)
  %302 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %303 = load i64, i64* %RBP, align 8
  %304 = add i64 %303, -216
  %305 = load i64, i64* %RAX, align 8
  %306 = add i64 %302, 19
  store i64 %306, i64* %PC, align 8
  %307 = inttoptr i64 %304 to i64*
  store i64 %305, i64* %307, align 8
  %308 = load i64, i64* %PC, align 8
  %309 = add i64 %308, -633
  %310 = add i64 %308, 5
  %311 = load i64, i64* %RSP, align 8, !tbaa !2428
  %312 = add i64 %311, -8
  %313 = inttoptr i64 %312 to i64*
  store i64 %310, i64* %313, align 8
  store i64 %312, i64* %RSP, align 8, !tbaa !2428
  store i64 %309, i64* %PC, align 8, !tbaa !2428
  %314 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %309, %struct.Memory* %301)
  %315 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %316 = load i64, i64* %RBP, align 8
  %317 = add i64 %316, -224
  %318 = load i64, i64* %RAX, align 8
  %319 = add i64 %315, 19
  store i64 %319, i64* %PC, align 8
  %320 = inttoptr i64 %317 to i64*
  store i64 %318, i64* %320, align 8
  %321 = load i64, i64* %PC, align 8
  %322 = add i64 %321, -657
  %323 = add i64 %321, 5
  %324 = load i64, i64* %RSP, align 8, !tbaa !2428
  %325 = add i64 %324, -8
  %326 = inttoptr i64 %325 to i64*
  store i64 %323, i64* %326, align 8
  store i64 %325, i64* %RSP, align 8, !tbaa !2428
  store i64 %322, i64* %PC, align 8, !tbaa !2428
  %327 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %322, %struct.Memory* %314)
  %328 = load i64, i64* %RBP, align 8
  %329 = add i64 %328, -80
  %330 = load i64, i64* %PC, align 8
  store i64 %329, i64* %RCX, align 8, !tbaa !2428
  %331 = add i64 %328, -88
  store i64 %331, i64* %R8, align 8, !tbaa !2428
  %332 = add i64 %328, -232
  %333 = load i64, i64* %RAX, align 8
  %334 = add i64 %330, 15
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %332 to i64*
  store i64 %333, i64* %335, align 8
  %336 = load i64, i64* %RBP, align 8
  %337 = add i64 %336, -60
  %338 = load i64, i64* %PC, align 8
  %339 = add i64 %338, 3
  store i64 %339, i64* %PC, align 8
  %340 = inttoptr i64 %337 to i32*
  %341 = load i32, i32* %340, align 4
  %342 = zext i32 %341 to i64
  store i64 %342, i64* %RDI, align 8, !tbaa !2428
  %343 = add i64 %336, -68
  %344 = add i64 %338, 6
  store i64 %344, i64* %PC, align 8
  %345 = inttoptr i64 %343 to i32*
  %346 = load i32, i32* %345, align 4
  %347 = zext i32 %346 to i64
  store i64 %347, i64* %RSI, align 8, !tbaa !2428
  %348 = add i64 %336, -64
  %349 = add i64 %338, 9
  store i64 %349, i64* %PC, align 8
  %350 = inttoptr i64 %348 to i32*
  %351 = load i32, i32* %350, align 4
  %352 = zext i32 %351 to i64
  store i64 %352, i64* %RDX, align 8, !tbaa !2428
  %353 = add i64 %336, -96
  %354 = add i64 %338, 13
  store i64 %354, i64* %PC, align 8
  %355 = inttoptr i64 %353 to i64*
  %356 = load i64, i64* %355, align 8
  store i64 %356, i64* %R9, align 8, !tbaa !2428
  %357 = add i64 %336, -104
  %358 = add i64 %338, 17
  store i64 %358, i64* %PC, align 8
  %359 = inttoptr i64 %357 to i64*
  %360 = load i64, i64* %359, align 8
  store i64 %360, i64* %RAX, align 8, !tbaa !2428
  %361 = add i64 %336, -136
  %362 = add i64 %338, 24
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %361 to i64*
  %364 = load i64, i64* %363, align 8
  store i64 %364, i64* %R10, align 8, !tbaa !2428
  %365 = add i64 %336, -144
  %366 = add i64 %338, 31
  store i64 %366, i64* %PC, align 8
  %367 = inttoptr i64 %365 to i64*
  %368 = load i64, i64* %367, align 8
  store i64 %368, i64* %R11, align 8, !tbaa !2428
  %369 = add i64 %336, -152
  %370 = add i64 %338, 38
  store i64 %370, i64* %PC, align 8
  %371 = inttoptr i64 %369 to i64*
  %372 = load i64, i64* %371, align 8
  store i64 %372, i64* %RBX, align 8, !tbaa !2428
  %373 = add i64 %336, -192
  %374 = add i64 %338, 45
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %373 to i64*
  %376 = load i64, i64* %375, align 8
  store i64 %376, i64* %R14, align 8, !tbaa !2428
  %377 = add i64 %336, -200
  %378 = add i64 %338, 52
  store i64 %378, i64* %PC, align 8
  %379 = inttoptr i64 %377 to i64*
  %380 = load i64, i64* %379, align 8
  store i64 %380, i64* %R15, align 8, !tbaa !2428
  %381 = add i64 %336, -208
  %382 = add i64 %338, 59
  store i64 %382, i64* %PC, align 8
  %383 = inttoptr i64 %381 to i64*
  %384 = load i64, i64* %383, align 8
  store i64 %384, i64* %R12, align 8, !tbaa !2428
  %385 = add i64 %336, -216
  %386 = add i64 %338, 66
  store i64 %386, i64* %PC, align 8
  %387 = inttoptr i64 %385 to i64*
  %388 = load i64, i64* %387, align 8
  store i64 %388, i64* %R13, align 8, !tbaa !2428
  %389 = add i64 %336, -240
  %390 = add i64 %338, 73
  store i64 %390, i64* %PC, align 8
  %391 = inttoptr i64 %389 to i64*
  store i64 %360, i64* %391, align 8
  %392 = load i64, i64* %RBP, align 8
  %393 = add i64 %392, -224
  %394 = load i64, i64* %PC, align 8
  %395 = add i64 %394, 7
  store i64 %395, i64* %PC, align 8
  %396 = inttoptr i64 %393 to i64*
  %397 = load i64, i64* %396, align 8
  store i64 %397, i64* %RAX, align 8, !tbaa !2428
  %398 = add i64 %392, -248
  %399 = add i64 %394, 14
  store i64 %399, i64* %PC, align 8
  %400 = inttoptr i64 %398 to i64*
  store i64 %397, i64* %400, align 8
  %401 = load i64, i64* %RBP, align 8
  %402 = add i64 %401, -232
  %403 = load i64, i64* %PC, align 8
  %404 = add i64 %403, 7
  store i64 %404, i64* %PC, align 8
  %405 = inttoptr i64 %402 to i64*
  %406 = load i64, i64* %405, align 8
  store i64 %406, i64* %RAX, align 8, !tbaa !2428
  %407 = add i64 %401, -256
  %408 = add i64 %403, 14
  store i64 %408, i64* %PC, align 8
  %409 = inttoptr i64 %407 to i64*
  store i64 %406, i64* %409, align 8
  %410 = load i64, i64* %RBP, align 8
  %411 = add i64 %410, -240
  %412 = load i64, i64* %PC, align 8
  %413 = add i64 %412, 7
  store i64 %413, i64* %PC, align 8
  %414 = inttoptr i64 %411 to i64*
  %415 = load i64, i64* %414, align 8
  store i64 %415, i64* %RAX, align 8, !tbaa !2428
  %416 = bitcast i64* %RSP to i64**
  %417 = load i64*, i64** %416, align 8
  %418 = add i64 %412, 11
  store i64 %418, i64* %PC, align 8
  store i64 %415, i64* %417, align 8
  %419 = load i64, i64* %RSP, align 8
  %420 = add i64 %419, 8
  %421 = load i64, i64* %R10, align 8
  %422 = load i64, i64* %PC, align 8
  %423 = add i64 %422, 5
  store i64 %423, i64* %PC, align 8
  %424 = inttoptr i64 %420 to i64*
  store i64 %421, i64* %424, align 8
  %425 = load i64, i64* %RSP, align 8
  %426 = add i64 %425, 16
  %427 = load i64, i64* %R11, align 8
  %428 = load i64, i64* %PC, align 8
  %429 = add i64 %428, 5
  store i64 %429, i64* %PC, align 8
  %430 = inttoptr i64 %426 to i64*
  store i64 %427, i64* %430, align 8
  %431 = load i64, i64* %RSP, align 8
  %432 = add i64 %431, 24
  %433 = load i64, i64* %RBX, align 8
  %434 = load i64, i64* %PC, align 8
  %435 = add i64 %434, 5
  store i64 %435, i64* %PC, align 8
  %436 = inttoptr i64 %432 to i64*
  store i64 %433, i64* %436, align 8
  %437 = load i64, i64* %RSP, align 8
  %438 = add i64 %437, 32
  %439 = load i64, i64* %R14, align 8
  %440 = load i64, i64* %PC, align 8
  %441 = add i64 %440, 5
  store i64 %441, i64* %PC, align 8
  %442 = inttoptr i64 %438 to i64*
  store i64 %439, i64* %442, align 8
  %443 = load i64, i64* %RSP, align 8
  %444 = add i64 %443, 40
  %445 = load i64, i64* %R15, align 8
  %446 = load i64, i64* %PC, align 8
  %447 = add i64 %446, 5
  store i64 %447, i64* %PC, align 8
  %448 = inttoptr i64 %444 to i64*
  store i64 %445, i64* %448, align 8
  %449 = load i64, i64* %RSP, align 8
  %450 = add i64 %449, 48
  %451 = load i64, i64* %R12, align 8
  %452 = load i64, i64* %PC, align 8
  %453 = add i64 %452, 5
  store i64 %453, i64* %PC, align 8
  %454 = inttoptr i64 %450 to i64*
  store i64 %451, i64* %454, align 8
  %455 = load i64, i64* %RSP, align 8
  %456 = add i64 %455, 56
  %457 = load i64, i64* %R13, align 8
  %458 = load i64, i64* %PC, align 8
  %459 = add i64 %458, 5
  store i64 %459, i64* %PC, align 8
  %460 = inttoptr i64 %456 to i64*
  store i64 %457, i64* %460, align 8
  %461 = load i64, i64* %RBP, align 8
  %462 = add i64 %461, -248
  %463 = load i64, i64* %PC, align 8
  %464 = add i64 %463, 7
  store i64 %464, i64* %PC, align 8
  %465 = inttoptr i64 %462 to i64*
  %466 = load i64, i64* %465, align 8
  store i64 %466, i64* %RAX, align 8, !tbaa !2428
  %467 = load i64, i64* %RSP, align 8
  %468 = add i64 %467, 64
  %469 = add i64 %463, 12
  store i64 %469, i64* %PC, align 8
  %470 = inttoptr i64 %468 to i64*
  store i64 %466, i64* %470, align 8
  %471 = load i64, i64* %RBP, align 8
  %472 = add i64 %471, -256
  %473 = load i64, i64* %PC, align 8
  %474 = add i64 %473, 7
  store i64 %474, i64* %PC, align 8
  %475 = inttoptr i64 %472 to i64*
  %476 = load i64, i64* %475, align 8
  store i64 %476, i64* %RAX, align 8, !tbaa !2428
  %477 = load i64, i64* %RSP, align 8
  %478 = add i64 %477, 72
  %479 = add i64 %473, 12
  store i64 %479, i64* %PC, align 8
  %480 = inttoptr i64 %478 to i64*
  store i64 %476, i64* %480, align 8
  %481 = load i64, i64* %PC, align 8
  %482 = add i64 %481, 1152
  %483 = add i64 %481, 5
  %484 = load i64, i64* %RSP, align 8, !tbaa !2428
  %485 = add i64 %484, -8
  %486 = inttoptr i64 %485 to i64*
  store i64 %483, i64* %486, align 8
  store i64 %485, i64* %RSP, align 8, !tbaa !2428
  store i64 %482, i64* %PC, align 8, !tbaa !2428
  %487 = tail call %struct.Memory* @sub_400f90_init_array_renamed_(%struct.State* nonnull %0, i64 %482, %struct.Memory* %327)
  %488 = load i64, i64* %RBP, align 8
  %489 = add i64 %488, -60
  %490 = load i64, i64* %PC, align 8
  %491 = add i64 %490, 3
  store i64 %491, i64* %PC, align 8
  %492 = inttoptr i64 %489 to i32*
  %493 = load i32, i32* %492, align 4
  %494 = zext i32 %493 to i64
  store i64 %494, i64* %RDI, align 8, !tbaa !2428
  %495 = add i64 %488, -68
  %496 = add i64 %490, 6
  store i64 %496, i64* %PC, align 8
  %497 = inttoptr i64 %495 to i32*
  %498 = load i32, i32* %497, align 4
  %499 = zext i32 %498 to i64
  store i64 %499, i64* %RSI, align 8, !tbaa !2428
  %500 = add i64 %488, -64
  %501 = add i64 %490, 9
  store i64 %501, i64* %PC, align 8
  %502 = inttoptr i64 %500 to i32*
  %503 = load i32, i32* %502, align 4
  %504 = zext i32 %503 to i64
  store i64 %504, i64* %RDX, align 8, !tbaa !2428
  %505 = add i64 %488, -80
  %506 = add i64 %490, 14
  store i64 %506, i64* %PC, align 8
  %507 = inttoptr i64 %505 to i64*
  %508 = load i64, i64* %507, align 8
  %509 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %5, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %508, i64* %509, align 1, !tbaa !2452
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %511 = bitcast i64* %510 to double*
  store double 0.000000e+00, double* %511, align 1, !tbaa !2452
  %512 = add i64 %488, -88
  %513 = add i64 %490, 19
  store i64 %513, i64* %PC, align 8
  %514 = inttoptr i64 %512 to i64*
  %515 = load i64, i64* %514, align 8
  %516 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %515, i64* %516, align 1, !tbaa !2452
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %518 = bitcast i64* %517 to double*
  store double 0.000000e+00, double* %518, align 1, !tbaa !2452
  %519 = add i64 %488, -96
  %520 = add i64 %490, 23
  store i64 %520, i64* %PC, align 8
  %521 = inttoptr i64 %519 to i64*
  %522 = load i64, i64* %521, align 8
  store i64 %522, i64* %RCX, align 8, !tbaa !2428
  %523 = add i64 %488, -104
  %524 = add i64 %490, 27
  store i64 %524, i64* %PC, align 8
  %525 = inttoptr i64 %523 to i64*
  %526 = load i64, i64* %525, align 8
  store i64 %526, i64* %R8, align 8, !tbaa !2428
  %527 = add i64 %488, -112
  %528 = add i64 %490, 31
  store i64 %528, i64* %PC, align 8
  %529 = inttoptr i64 %527 to i64*
  %530 = load i64, i64* %529, align 8
  store i64 %530, i64* %R9, align 8, !tbaa !2428
  %531 = add i64 %488, -120
  %532 = add i64 %490, 35
  store i64 %532, i64* %PC, align 8
  %533 = inttoptr i64 %531 to i64*
  %534 = load i64, i64* %533, align 8
  store i64 %534, i64* %RAX, align 8, !tbaa !2428
  %535 = add i64 %488, -128
  %536 = add i64 %490, 39
  store i64 %536, i64* %PC, align 8
  %537 = inttoptr i64 %535 to i64*
  %538 = load i64, i64* %537, align 8
  store i64 %538, i64* %R10, align 8, !tbaa !2428
  %539 = add i64 %488, -136
  %540 = add i64 %490, 46
  store i64 %540, i64* %PC, align 8
  %541 = inttoptr i64 %539 to i64*
  %542 = load i64, i64* %541, align 8
  store i64 %542, i64* %R11, align 8, !tbaa !2428
  %543 = add i64 %488, -144
  %544 = add i64 %490, 53
  store i64 %544, i64* %PC, align 8
  %545 = inttoptr i64 %543 to i64*
  %546 = load i64, i64* %545, align 8
  store i64 %546, i64* %RBX, align 8, !tbaa !2428
  %547 = add i64 %488, -152
  %548 = add i64 %490, 60
  store i64 %548, i64* %PC, align 8
  %549 = inttoptr i64 %547 to i64*
  %550 = load i64, i64* %549, align 8
  store i64 %550, i64* %R14, align 8, !tbaa !2428
  %551 = add i64 %488, -192
  %552 = add i64 %490, 67
  store i64 %552, i64* %PC, align 8
  %553 = inttoptr i64 %551 to i64*
  %554 = load i64, i64* %553, align 8
  store i64 %554, i64* %R15, align 8, !tbaa !2428
  %555 = add i64 %488, -200
  %556 = add i64 %490, 74
  store i64 %556, i64* %PC, align 8
  %557 = inttoptr i64 %555 to i64*
  %558 = load i64, i64* %557, align 8
  store i64 %558, i64* %R12, align 8, !tbaa !2428
  %559 = load i64, i64* %RBP, align 8
  %560 = add i64 %559, -208
  %561 = add i64 %490, 81
  store i64 %561, i64* %PC, align 8
  %562 = inttoptr i64 %560 to i64*
  %563 = load i64, i64* %562, align 8
  store i64 %563, i64* %R13, align 8, !tbaa !2428
  %564 = add i64 %559, -264
  %565 = add i64 %490, 88
  store i64 %565, i64* %PC, align 8
  %566 = inttoptr i64 %564 to i64*
  store i64 %534, i64* %566, align 8
  %567 = load i64, i64* %RBP, align 8
  %568 = add i64 %567, -216
  %569 = load i64, i64* %PC, align 8
  %570 = add i64 %569, 7
  store i64 %570, i64* %PC, align 8
  %571 = inttoptr i64 %568 to i64*
  %572 = load i64, i64* %571, align 8
  store i64 %572, i64* %RAX, align 8, !tbaa !2428
  %573 = add i64 %567, -272
  %574 = add i64 %569, 14
  store i64 %574, i64* %PC, align 8
  %575 = inttoptr i64 %573 to i64*
  store i64 %572, i64* %575, align 8
  %576 = load i64, i64* %RBP, align 8
  %577 = add i64 %576, -224
  %578 = load i64, i64* %PC, align 8
  %579 = add i64 %578, 7
  store i64 %579, i64* %PC, align 8
  %580 = inttoptr i64 %577 to i64*
  %581 = load i64, i64* %580, align 8
  store i64 %581, i64* %RAX, align 8, !tbaa !2428
  %582 = add i64 %576, -280
  %583 = add i64 %578, 14
  store i64 %583, i64* %PC, align 8
  %584 = inttoptr i64 %582 to i64*
  store i64 %581, i64* %584, align 8
  %585 = load i64, i64* %RBP, align 8
  %586 = add i64 %585, -232
  %587 = load i64, i64* %PC, align 8
  %588 = add i64 %587, 7
  store i64 %588, i64* %PC, align 8
  %589 = inttoptr i64 %586 to i64*
  %590 = load i64, i64* %589, align 8
  store i64 %590, i64* %RAX, align 8, !tbaa !2428
  %591 = add i64 %585, -288
  %592 = add i64 %587, 14
  store i64 %592, i64* %PC, align 8
  %593 = inttoptr i64 %591 to i64*
  store i64 %590, i64* %593, align 8
  %594 = load i64, i64* %RBP, align 8
  %595 = add i64 %594, -264
  %596 = load i64, i64* %PC, align 8
  %597 = add i64 %596, 7
  store i64 %597, i64* %PC, align 8
  %598 = inttoptr i64 %595 to i64*
  %599 = load i64, i64* %598, align 8
  store i64 %599, i64* %RAX, align 8, !tbaa !2428
  %600 = load i64*, i64** %416, align 8
  %601 = add i64 %596, 11
  store i64 %601, i64* %PC, align 8
  store i64 %599, i64* %600, align 8
  %602 = load i64, i64* %RSP, align 8
  %603 = add i64 %602, 8
  %604 = load i64, i64* %R10, align 8
  %605 = load i64, i64* %PC, align 8
  %606 = add i64 %605, 5
  store i64 %606, i64* %PC, align 8
  %607 = inttoptr i64 %603 to i64*
  store i64 %604, i64* %607, align 8
  %608 = load i64, i64* %RSP, align 8
  %609 = add i64 %608, 16
  %610 = load i64, i64* %R11, align 8
  %611 = load i64, i64* %PC, align 8
  %612 = add i64 %611, 5
  store i64 %612, i64* %PC, align 8
  %613 = inttoptr i64 %609 to i64*
  store i64 %610, i64* %613, align 8
  %614 = load i64, i64* %RSP, align 8
  %615 = add i64 %614, 24
  %616 = load i64, i64* %RBX, align 8
  %617 = load i64, i64* %PC, align 8
  %618 = add i64 %617, 5
  store i64 %618, i64* %PC, align 8
  %619 = inttoptr i64 %615 to i64*
  store i64 %616, i64* %619, align 8
  %620 = load i64, i64* %RSP, align 8
  %621 = add i64 %620, 32
  %622 = load i64, i64* %R14, align 8
  %623 = load i64, i64* %PC, align 8
  %624 = add i64 %623, 5
  store i64 %624, i64* %PC, align 8
  %625 = inttoptr i64 %621 to i64*
  store i64 %622, i64* %625, align 8
  %626 = load i64, i64* %RSP, align 8
  %627 = add i64 %626, 40
  %628 = load i64, i64* %R15, align 8
  %629 = load i64, i64* %PC, align 8
  %630 = add i64 %629, 5
  store i64 %630, i64* %PC, align 8
  %631 = inttoptr i64 %627 to i64*
  store i64 %628, i64* %631, align 8
  %632 = load i64, i64* %RSP, align 8
  %633 = add i64 %632, 48
  %634 = load i64, i64* %R12, align 8
  %635 = load i64, i64* %PC, align 8
  %636 = add i64 %635, 5
  store i64 %636, i64* %PC, align 8
  %637 = inttoptr i64 %633 to i64*
  store i64 %634, i64* %637, align 8
  %638 = load i64, i64* %RSP, align 8
  %639 = add i64 %638, 56
  %640 = load i64, i64* %R13, align 8
  %641 = load i64, i64* %PC, align 8
  %642 = add i64 %641, 5
  store i64 %642, i64* %PC, align 8
  %643 = inttoptr i64 %639 to i64*
  store i64 %640, i64* %643, align 8
  %644 = load i64, i64* %RBP, align 8
  %645 = add i64 %644, -272
  %646 = load i64, i64* %PC, align 8
  %647 = add i64 %646, 7
  store i64 %647, i64* %PC, align 8
  %648 = inttoptr i64 %645 to i64*
  %649 = load i64, i64* %648, align 8
  store i64 %649, i64* %RAX, align 8, !tbaa !2428
  %650 = load i64, i64* %RSP, align 8
  %651 = add i64 %650, 64
  %652 = add i64 %646, 12
  store i64 %652, i64* %PC, align 8
  %653 = inttoptr i64 %651 to i64*
  store i64 %649, i64* %653, align 8
  %654 = load i64, i64* %RBP, align 8
  %655 = add i64 %654, -280
  %656 = load i64, i64* %PC, align 8
  %657 = add i64 %656, 7
  store i64 %657, i64* %PC, align 8
  %658 = inttoptr i64 %655 to i64*
  %659 = load i64, i64* %658, align 8
  store i64 %659, i64* %RAX, align 8, !tbaa !2428
  %660 = load i64, i64* %RSP, align 8
  %661 = add i64 %660, 72
  %662 = add i64 %656, 12
  store i64 %662, i64* %PC, align 8
  %663 = inttoptr i64 %661 to i64*
  store i64 %659, i64* %663, align 8
  %664 = load i64, i64* %RBP, align 8
  %665 = add i64 %664, -288
  %666 = load i64, i64* %PC, align 8
  %667 = add i64 %666, 7
  store i64 %667, i64* %PC, align 8
  %668 = inttoptr i64 %665 to i64*
  %669 = load i64, i64* %668, align 8
  store i64 %669, i64* %RAX, align 8, !tbaa !2428
  %670 = load i64, i64* %RSP, align 8
  %671 = add i64 %670, 80
  %672 = add i64 %666, 12
  store i64 %672, i64* %PC, align 8
  %673 = inttoptr i64 %671 to i64*
  store i64 %669, i64* %673, align 8
  %674 = load i64, i64* %PC, align 8
  %675 = add i64 %674, 2023
  %676 = add i64 %674, 5
  %677 = load i64, i64* %RSP, align 8, !tbaa !2428
  %678 = add i64 %677, -8
  %679 = inttoptr i64 %678 to i64*
  store i64 %676, i64* %679, align 8
  store i64 %678, i64* %RSP, align 8, !tbaa !2428
  store i64 %675, i64* %PC, align 8, !tbaa !2428
  %680 = tail call %struct.Memory* @sub_4013d0_kernel_fdtd_apml_renamed_(%struct.State* nonnull %0, i64 %675, %struct.Memory* %487)
  %681 = load i64, i64* %RBP, align 8
  %682 = add i64 %681, -80
  %683 = load i64, i64* %PC, align 8
  store i64 %682, i64* %RCX, align 8, !tbaa !2428
  %684 = add i64 %681, -88
  store i64 %684, i64* %R8, align 8, !tbaa !2428
  %685 = add i64 %681, -60
  %686 = add i64 %683, 11
  store i64 %686, i64* %PC, align 8
  %687 = inttoptr i64 %685 to i32*
  %688 = load i32, i32* %687, align 4
  %689 = zext i32 %688 to i64
  store i64 %689, i64* %RDI, align 8, !tbaa !2428
  %690 = add i64 %681, -68
  %691 = add i64 %683, 14
  store i64 %691, i64* %PC, align 8
  %692 = inttoptr i64 %690 to i32*
  %693 = load i32, i32* %692, align 4
  %694 = zext i32 %693 to i64
  store i64 %694, i64* %RSI, align 8, !tbaa !2428
  %695 = add i64 %681, -64
  %696 = add i64 %683, 17
  store i64 %696, i64* %PC, align 8
  %697 = inttoptr i64 %695 to i32*
  %698 = load i32, i32* %697, align 4
  %699 = zext i32 %698 to i64
  store i64 %699, i64* %RDX, align 8, !tbaa !2428
  %700 = add i64 %681, -96
  %701 = add i64 %683, 21
  store i64 %701, i64* %PC, align 8
  %702 = inttoptr i64 %700 to i64*
  %703 = load i64, i64* %702, align 8
  store i64 %703, i64* %R9, align 8, !tbaa !2428
  %704 = add i64 %681, -104
  %705 = add i64 %683, 25
  store i64 %705, i64* %PC, align 8
  %706 = inttoptr i64 %704 to i64*
  %707 = load i64, i64* %706, align 8
  store i64 %707, i64* %RAX, align 8, !tbaa !2428
  %708 = add i64 %681, -168
  %709 = add i64 %683, 32
  store i64 %709, i64* %PC, align 8
  %710 = inttoptr i64 %708 to i64*
  %711 = load i64, i64* %710, align 8
  store i64 %711, i64* %R10, align 8, !tbaa !2428
  %712 = add i64 %681, -176
  %713 = add i64 %683, 39
  store i64 %713, i64* %PC, align 8
  %714 = inttoptr i64 %712 to i64*
  %715 = load i64, i64* %714, align 8
  store i64 %715, i64* %R11, align 8, !tbaa !2428
  %716 = add i64 %681, -184
  %717 = add i64 %683, 46
  store i64 %717, i64* %PC, align 8
  %718 = inttoptr i64 %716 to i64*
  %719 = load i64, i64* %718, align 8
  store i64 %719, i64* %RBX, align 8, !tbaa !2428
  %720 = add i64 %681, -192
  %721 = add i64 %683, 53
  store i64 %721, i64* %PC, align 8
  %722 = inttoptr i64 %720 to i64*
  %723 = load i64, i64* %722, align 8
  store i64 %723, i64* %R14, align 8, !tbaa !2428
  %724 = add i64 %681, -200
  %725 = add i64 %683, 60
  store i64 %725, i64* %PC, align 8
  %726 = inttoptr i64 %724 to i64*
  %727 = load i64, i64* %726, align 8
  store i64 %727, i64* %R15, align 8, !tbaa !2428
  %728 = add i64 %681, -208
  %729 = add i64 %683, 67
  store i64 %729, i64* %PC, align 8
  %730 = inttoptr i64 %728 to i64*
  %731 = load i64, i64* %730, align 8
  store i64 %731, i64* %R12, align 8, !tbaa !2428
  %732 = add i64 %681, -216
  %733 = add i64 %683, 74
  store i64 %733, i64* %PC, align 8
  %734 = inttoptr i64 %732 to i64*
  %735 = load i64, i64* %734, align 8
  store i64 %735, i64* %R13, align 8, !tbaa !2428
  %736 = add i64 %681, -296
  %737 = add i64 %683, 81
  store i64 %737, i64* %PC, align 8
  %738 = inttoptr i64 %736 to i64*
  store i64 %707, i64* %738, align 8
  %739 = load i64, i64* %RBP, align 8
  %740 = add i64 %739, -224
  %741 = load i64, i64* %PC, align 8
  %742 = add i64 %741, 7
  store i64 %742, i64* %PC, align 8
  %743 = inttoptr i64 %740 to i64*
  %744 = load i64, i64* %743, align 8
  store i64 %744, i64* %RAX, align 8, !tbaa !2428
  %745 = add i64 %739, -304
  %746 = add i64 %741, 14
  store i64 %746, i64* %PC, align 8
  %747 = inttoptr i64 %745 to i64*
  store i64 %744, i64* %747, align 8
  %748 = load i64, i64* %RBP, align 8
  %749 = add i64 %748, -232
  %750 = load i64, i64* %PC, align 8
  %751 = add i64 %750, 7
  store i64 %751, i64* %PC, align 8
  %752 = inttoptr i64 %749 to i64*
  %753 = load i64, i64* %752, align 8
  store i64 %753, i64* %RAX, align 8, !tbaa !2428
  %754 = add i64 %748, -312
  %755 = add i64 %750, 14
  store i64 %755, i64* %PC, align 8
  %756 = inttoptr i64 %754 to i64*
  store i64 %753, i64* %756, align 8
  %757 = load i64, i64* %RBP, align 8
  %758 = add i64 %757, -296
  %759 = load i64, i64* %PC, align 8
  %760 = add i64 %759, 7
  store i64 %760, i64* %PC, align 8
  %761 = inttoptr i64 %758 to i64*
  %762 = load i64, i64* %761, align 8
  store i64 %762, i64* %RAX, align 8, !tbaa !2428
  %763 = load i64*, i64** %416, align 8
  %764 = add i64 %759, 11
  store i64 %764, i64* %PC, align 8
  store i64 %762, i64* %763, align 8
  %765 = load i64, i64* %RSP, align 8
  %766 = add i64 %765, 8
  %767 = load i64, i64* %R10, align 8
  %768 = load i64, i64* %PC, align 8
  %769 = add i64 %768, 5
  store i64 %769, i64* %PC, align 8
  %770 = inttoptr i64 %766 to i64*
  store i64 %767, i64* %770, align 8
  %771 = load i64, i64* %RSP, align 8
  %772 = add i64 %771, 16
  %773 = load i64, i64* %R11, align 8
  %774 = load i64, i64* %PC, align 8
  %775 = add i64 %774, 5
  store i64 %775, i64* %PC, align 8
  %776 = inttoptr i64 %772 to i64*
  store i64 %773, i64* %776, align 8
  %777 = load i64, i64* %RSP, align 8
  %778 = add i64 %777, 24
  %779 = load i64, i64* %RBX, align 8
  %780 = load i64, i64* %PC, align 8
  %781 = add i64 %780, 5
  store i64 %781, i64* %PC, align 8
  %782 = inttoptr i64 %778 to i64*
  store i64 %779, i64* %782, align 8
  %783 = load i64, i64* %RSP, align 8
  %784 = add i64 %783, 32
  %785 = load i64, i64* %R14, align 8
  %786 = load i64, i64* %PC, align 8
  %787 = add i64 %786, 5
  store i64 %787, i64* %PC, align 8
  %788 = inttoptr i64 %784 to i64*
  store i64 %785, i64* %788, align 8
  %789 = load i64, i64* %RSP, align 8
  %790 = add i64 %789, 40
  %791 = load i64, i64* %R15, align 8
  %792 = load i64, i64* %PC, align 8
  %793 = add i64 %792, 5
  store i64 %793, i64* %PC, align 8
  %794 = inttoptr i64 %790 to i64*
  store i64 %791, i64* %794, align 8
  %795 = load i64, i64* %RSP, align 8
  %796 = add i64 %795, 48
  %797 = load i64, i64* %R12, align 8
  %798 = load i64, i64* %PC, align 8
  %799 = add i64 %798, 5
  store i64 %799, i64* %PC, align 8
  %800 = inttoptr i64 %796 to i64*
  store i64 %797, i64* %800, align 8
  %801 = load i64, i64* %RSP, align 8
  %802 = add i64 %801, 56
  %803 = load i64, i64* %R13, align 8
  %804 = load i64, i64* %PC, align 8
  %805 = add i64 %804, 5
  store i64 %805, i64* %PC, align 8
  %806 = inttoptr i64 %802 to i64*
  store i64 %803, i64* %806, align 8
  %807 = load i64, i64* %RBP, align 8
  %808 = add i64 %807, -304
  %809 = load i64, i64* %PC, align 8
  %810 = add i64 %809, 7
  store i64 %810, i64* %PC, align 8
  %811 = inttoptr i64 %808 to i64*
  %812 = load i64, i64* %811, align 8
  store i64 %812, i64* %RAX, align 8, !tbaa !2428
  %813 = load i64, i64* %RSP, align 8
  %814 = add i64 %813, 64
  %815 = add i64 %809, 12
  store i64 %815, i64* %PC, align 8
  %816 = inttoptr i64 %814 to i64*
  store i64 %812, i64* %816, align 8
  %817 = load i64, i64* %RBP, align 8
  %818 = add i64 %817, -312
  %819 = load i64, i64* %PC, align 8
  %820 = add i64 %819, 7
  store i64 %820, i64* %PC, align 8
  %821 = inttoptr i64 %818 to i64*
  %822 = load i64, i64* %821, align 8
  store i64 %822, i64* %RAX, align 8, !tbaa !2428
  %823 = load i64, i64* %RSP, align 8
  %824 = add i64 %823, 72
  %825 = add i64 %819, 12
  store i64 %825, i64* %PC, align 8
  %826 = inttoptr i64 %824 to i64*
  store i64 %822, i64* %826, align 8
  %827 = load i64, i64* %PC, align 8
  %828 = add i64 %827, 751
  %829 = add i64 %827, 5
  %830 = load i64, i64* %RSP, align 8, !tbaa !2428
  %831 = add i64 %830, -8
  %832 = inttoptr i64 %831 to i64*
  store i64 %829, i64* %832, align 8
  store i64 %831, i64* %RSP, align 8, !tbaa !2428
  store i64 %828, i64* %PC, align 8, !tbaa !2428
  %833 = tail call %struct.Memory* @sub_400f90_init_array_renamed_(%struct.State* nonnull %0, i64 %828, %struct.Memory* %680)
  %834 = load i64, i64* %RBP, align 8
  %835 = add i64 %834, -60
  %836 = load i64, i64* %PC, align 8
  %837 = add i64 %836, 3
  store i64 %837, i64* %PC, align 8
  %838 = inttoptr i64 %835 to i32*
  %839 = load i32, i32* %838, align 4
  %840 = zext i32 %839 to i64
  store i64 %840, i64* %RDI, align 8, !tbaa !2428
  %841 = add i64 %834, -68
  %842 = add i64 %836, 6
  store i64 %842, i64* %PC, align 8
  %843 = inttoptr i64 %841 to i32*
  %844 = load i32, i32* %843, align 4
  %845 = zext i32 %844 to i64
  store i64 %845, i64* %RSI, align 8, !tbaa !2428
  %846 = add i64 %834, -64
  %847 = add i64 %836, 9
  store i64 %847, i64* %PC, align 8
  %848 = inttoptr i64 %846 to i32*
  %849 = load i32, i32* %848, align 4
  %850 = zext i32 %849 to i64
  store i64 %850, i64* %RDX, align 8, !tbaa !2428
  %851 = add i64 %834, -80
  %852 = add i64 %836, 14
  store i64 %852, i64* %PC, align 8
  %853 = inttoptr i64 %851 to i64*
  %854 = load i64, i64* %853, align 8
  store i64 %854, i64* %509, align 1, !tbaa !2452
  store double 0.000000e+00, double* %511, align 1, !tbaa !2452
  %855 = add i64 %834, -88
  %856 = add i64 %836, 19
  store i64 %856, i64* %PC, align 8
  %857 = inttoptr i64 %855 to i64*
  %858 = load i64, i64* %857, align 8
  store i64 %858, i64* %516, align 1, !tbaa !2452
  store double 0.000000e+00, double* %518, align 1, !tbaa !2452
  %859 = add i64 %834, -96
  %860 = add i64 %836, 23
  store i64 %860, i64* %PC, align 8
  %861 = inttoptr i64 %859 to i64*
  %862 = load i64, i64* %861, align 8
  store i64 %862, i64* %RCX, align 8, !tbaa !2428
  %863 = add i64 %834, -104
  %864 = add i64 %836, 27
  store i64 %864, i64* %PC, align 8
  %865 = inttoptr i64 %863 to i64*
  %866 = load i64, i64* %865, align 8
  store i64 %866, i64* %R8, align 8, !tbaa !2428
  %867 = add i64 %834, -112
  %868 = add i64 %836, 31
  store i64 %868, i64* %PC, align 8
  %869 = inttoptr i64 %867 to i64*
  %870 = load i64, i64* %869, align 8
  store i64 %870, i64* %R9, align 8, !tbaa !2428
  %871 = add i64 %834, -120
  %872 = add i64 %836, 35
  store i64 %872, i64* %PC, align 8
  %873 = inttoptr i64 %871 to i64*
  %874 = load i64, i64* %873, align 8
  store i64 %874, i64* %RAX, align 8, !tbaa !2428
  %875 = add i64 %834, -160
  %876 = add i64 %836, 42
  store i64 %876, i64* %PC, align 8
  %877 = inttoptr i64 %875 to i64*
  %878 = load i64, i64* %877, align 8
  store i64 %878, i64* %R10, align 8, !tbaa !2428
  %879 = add i64 %834, -168
  %880 = add i64 %836, 49
  store i64 %880, i64* %PC, align 8
  %881 = inttoptr i64 %879 to i64*
  %882 = load i64, i64* %881, align 8
  store i64 %882, i64* %R11, align 8, !tbaa !2428
  %883 = add i64 %834, -176
  %884 = add i64 %836, 56
  store i64 %884, i64* %PC, align 8
  %885 = inttoptr i64 %883 to i64*
  %886 = load i64, i64* %885, align 8
  store i64 %886, i64* %RBX, align 8, !tbaa !2428
  %887 = add i64 %834, -184
  %888 = add i64 %836, 63
  store i64 %888, i64* %PC, align 8
  %889 = inttoptr i64 %887 to i64*
  %890 = load i64, i64* %889, align 8
  store i64 %890, i64* %R14, align 8, !tbaa !2428
  %891 = add i64 %834, -192
  %892 = add i64 %836, 70
  store i64 %892, i64* %PC, align 8
  %893 = inttoptr i64 %891 to i64*
  %894 = load i64, i64* %893, align 8
  store i64 %894, i64* %R15, align 8, !tbaa !2428
  %895 = add i64 %834, -200
  %896 = add i64 %836, 77
  store i64 %896, i64* %PC, align 8
  %897 = inttoptr i64 %895 to i64*
  %898 = load i64, i64* %897, align 8
  store i64 %898, i64* %R12, align 8, !tbaa !2428
  %899 = add i64 %834, -208
  %900 = add i64 %836, 84
  store i64 %900, i64* %PC, align 8
  %901 = inttoptr i64 %899 to i64*
  %902 = load i64, i64* %901, align 8
  store i64 %902, i64* %R13, align 8, !tbaa !2428
  %903 = load i64, i64* %RBP, align 8
  %904 = add i64 %903, -320
  %905 = add i64 %836, 91
  store i64 %905, i64* %PC, align 8
  %906 = inttoptr i64 %904 to i64*
  store i64 %874, i64* %906, align 8
  %907 = load i64, i64* %RBP, align 8
  %908 = add i64 %907, -216
  %909 = load i64, i64* %PC, align 8
  %910 = add i64 %909, 7
  store i64 %910, i64* %PC, align 8
  %911 = inttoptr i64 %908 to i64*
  %912 = load i64, i64* %911, align 8
  store i64 %912, i64* %RAX, align 8, !tbaa !2428
  %913 = add i64 %907, -328
  %914 = add i64 %909, 14
  store i64 %914, i64* %PC, align 8
  %915 = inttoptr i64 %913 to i64*
  store i64 %912, i64* %915, align 8
  %916 = load i64, i64* %RBP, align 8
  %917 = add i64 %916, -224
  %918 = load i64, i64* %PC, align 8
  %919 = add i64 %918, 7
  store i64 %919, i64* %PC, align 8
  %920 = inttoptr i64 %917 to i64*
  %921 = load i64, i64* %920, align 8
  store i64 %921, i64* %RAX, align 8, !tbaa !2428
  %922 = add i64 %916, -336
  %923 = add i64 %918, 14
  store i64 %923, i64* %PC, align 8
  %924 = inttoptr i64 %922 to i64*
  store i64 %921, i64* %924, align 8
  %925 = load i64, i64* %RBP, align 8
  %926 = add i64 %925, -232
  %927 = load i64, i64* %PC, align 8
  %928 = add i64 %927, 7
  store i64 %928, i64* %PC, align 8
  %929 = inttoptr i64 %926 to i64*
  %930 = load i64, i64* %929, align 8
  store i64 %930, i64* %RAX, align 8, !tbaa !2428
  %931 = add i64 %925, -344
  %932 = add i64 %927, 14
  store i64 %932, i64* %PC, align 8
  %933 = inttoptr i64 %931 to i64*
  store i64 %930, i64* %933, align 8
  %934 = load i64, i64* %RBP, align 8
  %935 = add i64 %934, -320
  %936 = load i64, i64* %PC, align 8
  %937 = add i64 %936, 7
  store i64 %937, i64* %PC, align 8
  %938 = inttoptr i64 %935 to i64*
  %939 = load i64, i64* %938, align 8
  store i64 %939, i64* %RAX, align 8, !tbaa !2428
  %940 = load i64*, i64** %416, align 8
  %941 = add i64 %936, 11
  store i64 %941, i64* %PC, align 8
  store i64 %939, i64* %940, align 8
  %942 = load i64, i64* %RSP, align 8
  %943 = add i64 %942, 8
  %944 = load i64, i64* %R10, align 8
  %945 = load i64, i64* %PC, align 8
  %946 = add i64 %945, 5
  store i64 %946, i64* %PC, align 8
  %947 = inttoptr i64 %943 to i64*
  store i64 %944, i64* %947, align 8
  %948 = load i64, i64* %RSP, align 8
  %949 = add i64 %948, 16
  %950 = load i64, i64* %R11, align 8
  %951 = load i64, i64* %PC, align 8
  %952 = add i64 %951, 5
  store i64 %952, i64* %PC, align 8
  %953 = inttoptr i64 %949 to i64*
  store i64 %950, i64* %953, align 8
  %954 = load i64, i64* %RSP, align 8
  %955 = add i64 %954, 24
  %956 = load i64, i64* %RBX, align 8
  %957 = load i64, i64* %PC, align 8
  %958 = add i64 %957, 5
  store i64 %958, i64* %PC, align 8
  %959 = inttoptr i64 %955 to i64*
  store i64 %956, i64* %959, align 8
  %960 = load i64, i64* %RSP, align 8
  %961 = add i64 %960, 32
  %962 = load i64, i64* %R14, align 8
  %963 = load i64, i64* %PC, align 8
  %964 = add i64 %963, 5
  store i64 %964, i64* %PC, align 8
  %965 = inttoptr i64 %961 to i64*
  store i64 %962, i64* %965, align 8
  %966 = load i64, i64* %RSP, align 8
  %967 = add i64 %966, 40
  %968 = load i64, i64* %R15, align 8
  %969 = load i64, i64* %PC, align 8
  %970 = add i64 %969, 5
  store i64 %970, i64* %PC, align 8
  %971 = inttoptr i64 %967 to i64*
  store i64 %968, i64* %971, align 8
  %972 = load i64, i64* %RSP, align 8
  %973 = add i64 %972, 48
  %974 = load i64, i64* %R12, align 8
  %975 = load i64, i64* %PC, align 8
  %976 = add i64 %975, 5
  store i64 %976, i64* %PC, align 8
  %977 = inttoptr i64 %973 to i64*
  store i64 %974, i64* %977, align 8
  %978 = load i64, i64* %RSP, align 8
  %979 = add i64 %978, 56
  %980 = load i64, i64* %R13, align 8
  %981 = load i64, i64* %PC, align 8
  %982 = add i64 %981, 5
  store i64 %982, i64* %PC, align 8
  %983 = inttoptr i64 %979 to i64*
  store i64 %980, i64* %983, align 8
  %984 = load i64, i64* %RBP, align 8
  %985 = add i64 %984, -328
  %986 = load i64, i64* %PC, align 8
  %987 = add i64 %986, 7
  store i64 %987, i64* %PC, align 8
  %988 = inttoptr i64 %985 to i64*
  %989 = load i64, i64* %988, align 8
  store i64 %989, i64* %RAX, align 8, !tbaa !2428
  %990 = load i64, i64* %RSP, align 8
  %991 = add i64 %990, 64
  %992 = add i64 %986, 12
  store i64 %992, i64* %PC, align 8
  %993 = inttoptr i64 %991 to i64*
  store i64 %989, i64* %993, align 8
  %994 = load i64, i64* %RBP, align 8
  %995 = add i64 %994, -336
  %996 = load i64, i64* %PC, align 8
  %997 = add i64 %996, 7
  store i64 %997, i64* %PC, align 8
  %998 = inttoptr i64 %995 to i64*
  %999 = load i64, i64* %998, align 8
  store i64 %999, i64* %RAX, align 8, !tbaa !2428
  %1000 = load i64, i64* %RSP, align 8
  %1001 = add i64 %1000, 72
  %1002 = add i64 %996, 12
  store i64 %1002, i64* %PC, align 8
  %1003 = inttoptr i64 %1001 to i64*
  store i64 %999, i64* %1003, align 8
  %1004 = load i64, i64* %RBP, align 8
  %1005 = add i64 %1004, -344
  %1006 = load i64, i64* %PC, align 8
  %1007 = add i64 %1006, 7
  store i64 %1007, i64* %PC, align 8
  %1008 = inttoptr i64 %1005 to i64*
  %1009 = load i64, i64* %1008, align 8
  store i64 %1009, i64* %RAX, align 8, !tbaa !2428
  %1010 = load i64, i64* %RSP, align 8
  %1011 = add i64 %1010, 80
  %1012 = add i64 %1006, 12
  store i64 %1012, i64* %PC, align 8
  %1013 = inttoptr i64 %1011 to i64*
  store i64 %1009, i64* %1013, align 8
  %1014 = load i64, i64* %PC, align 8
  %1015 = add i64 %1014, 4499
  %1016 = add i64 %1014, 5
  %1017 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1018 = add i64 %1017, -8
  %1019 = inttoptr i64 %1018 to i64*
  store i64 %1016, i64* %1019, align 8
  store i64 %1018, i64* %RSP, align 8, !tbaa !2428
  store i64 %1015, i64* %PC, align 8, !tbaa !2428
  %1020 = tail call %struct.Memory* @sub_401f10_kernel_fdtd_apml_StrictFP_renamed_(%struct.State* nonnull %0, i64 %1015, %struct.Memory* %833)
  %1021 = load i64, i64* %RBP, align 8
  %1022 = add i64 %1021, -60
  %1023 = load i64, i64* %PC, align 8
  %1024 = add i64 %1023, 3
  store i64 %1024, i64* %PC, align 8
  %1025 = inttoptr i64 %1022 to i32*
  %1026 = load i32, i32* %1025, align 4
  %1027 = zext i32 %1026 to i64
  store i64 %1027, i64* %RDI, align 8, !tbaa !2428
  %1028 = add i64 %1021, -68
  %1029 = add i64 %1023, 6
  store i64 %1029, i64* %PC, align 8
  %1030 = inttoptr i64 %1028 to i32*
  %1031 = load i32, i32* %1030, align 4
  %1032 = zext i32 %1031 to i64
  store i64 %1032, i64* %RSI, align 8, !tbaa !2428
  %1033 = add i64 %1021, -64
  %1034 = add i64 %1023, 9
  store i64 %1034, i64* %PC, align 8
  %1035 = inttoptr i64 %1033 to i32*
  %1036 = load i32, i32* %1035, align 4
  %1037 = zext i32 %1036 to i64
  store i64 %1037, i64* %RDX, align 8, !tbaa !2428
  %1038 = add i64 %1021, -128
  %1039 = add i64 %1023, 13
  store i64 %1039, i64* %PC, align 8
  %1040 = inttoptr i64 %1038 to i64*
  %1041 = load i64, i64* %1040, align 8
  store i64 %1041, i64* %RCX, align 8, !tbaa !2428
  %1042 = add i64 %1021, -160
  %1043 = add i64 %1023, 20
  store i64 %1043, i64* %PC, align 8
  %1044 = inttoptr i64 %1042 to i64*
  %1045 = load i64, i64* %1044, align 8
  store i64 %1045, i64* %R8, align 8, !tbaa !2428
  %1046 = add i64 %1023, 7374
  %1047 = add i64 %1023, 25
  %1048 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1049 = add i64 %1048, -8
  %1050 = inttoptr i64 %1049 to i64*
  store i64 %1047, i64* %1050, align 8
  store i64 %1049, i64* %RSP, align 8, !tbaa !2428
  store i64 %1046, i64* %PC, align 8, !tbaa !2428
  %1051 = tail call %struct.Memory* @sub_402a50_check_FP_renamed_(%struct.State* nonnull %0, i64 %1046, %struct.Memory* %1020)
  %1052 = load i32, i32* %EAX, align 4
  %1053 = load i64, i64* %PC, align 8
  store i8 0, i8* %41, align 1, !tbaa !2432
  %1054 = and i32 %1052, 255
  %1055 = tail call i32 @llvm.ctpop.i32(i32 %1054) #8
  %1056 = trunc i32 %1055 to i8
  %1057 = and i8 %1056, 1
  %1058 = xor i8 %1057, 1
  store i8 %1058, i8* %48, align 1, !tbaa !2446
  store i8 0, i8* %53, align 1, !tbaa !2447
  %1059 = icmp eq i32 %1052, 0
  %1060 = zext i1 %1059 to i8
  store i8 %1060, i8* %56, align 1, !tbaa !2448
  %1061 = lshr i32 %1052, 31
  %1062 = trunc i32 %1061 to i8
  store i8 %1062, i8* %59, align 1, !tbaa !2449
  store i8 0, i8* %65, align 1, !tbaa !2450
  %.v = select i1 %1059, i64 9, i64 21
  %1063 = add i64 %1053, %.v
  store i64 %1063, i64* %PC, align 8, !tbaa !2428
  %1064 = load i64, i64* %RBP, align 8
  br i1 %1059, label %block_400da4, label %block_400db0

block_400e12:                                     ; preds = %block_400de1
  %1065 = add i64 %1524, -60
  %1066 = add i64 %1523, 3
  store i64 %1066, i64* %PC, align 8
  %1067 = inttoptr i64 %1065 to i32*
  %1068 = load i32, i32* %1067, align 4
  %1069 = zext i32 %1068 to i64
  store i64 %1069, i64* %RDI, align 8, !tbaa !2428
  %1070 = add i64 %1524, -68
  %1071 = add i64 %1523, 6
  store i64 %1071, i64* %PC, align 8
  %1072 = inttoptr i64 %1070 to i32*
  %1073 = load i32, i32* %1072, align 4
  %1074 = zext i32 %1073 to i64
  store i64 %1074, i64* %RSI, align 8, !tbaa !2428
  %1075 = add i64 %1524, -64
  %1076 = add i64 %1523, 9
  store i64 %1076, i64* %PC, align 8
  %1077 = inttoptr i64 %1075 to i32*
  %1078 = load i32, i32* %1077, align 4
  %1079 = zext i32 %1078 to i64
  store i64 %1079, i64* %RDX, align 8, !tbaa !2428
  %1080 = add i64 %1524, -152
  %1081 = add i64 %1523, 16
  store i64 %1081, i64* %PC, align 8
  %1082 = inttoptr i64 %1080 to i64*
  %1083 = load i64, i64* %1082, align 8
  store i64 %1083, i64* %RCX, align 8, !tbaa !2428
  %1084 = add i64 %1524, -184
  %1085 = add i64 %1523, 23
  store i64 %1085, i64* %PC, align 8
  %1086 = inttoptr i64 %1084 to i64*
  %1087 = load i64, i64* %1086, align 8
  store i64 %1087, i64* %R8, align 8, !tbaa !2428
  %1088 = add i64 %1523, 7230
  %1089 = add i64 %1523, 28
  %1090 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1091 = add i64 %1090, -8
  %1092 = inttoptr i64 %1091 to i64*
  store i64 %1089, i64* %1092, align 8
  store i64 %1091, i64* %RSP, align 8, !tbaa !2428
  store i64 %1088, i64* %PC, align 8, !tbaa !2428
  %1093 = tail call %struct.Memory* @sub_402a50_check_FP_renamed_(%struct.State* nonnull %0, i64 %1088, %struct.Memory* %1511)
  %1094 = load i32, i32* %EAX, align 4
  %1095 = load i64, i64* %PC, align 8
  store i8 0, i8* %41, align 1, !tbaa !2432
  %1096 = and i32 %1094, 255
  %1097 = tail call i32 @llvm.ctpop.i32(i32 %1096) #8
  %1098 = trunc i32 %1097 to i8
  %1099 = and i8 %1098, 1
  %1100 = xor i8 %1099, 1
  store i8 %1100, i8* %48, align 1, !tbaa !2446
  store i8 0, i8* %53, align 1, !tbaa !2447
  %1101 = icmp eq i32 %1094, 0
  %1102 = zext i1 %1101 to i8
  store i8 %1102, i8* %56, align 1, !tbaa !2448
  %1103 = lshr i32 %1094, 31
  %1104 = trunc i32 %1103 to i8
  store i8 %1104, i8* %59, align 1, !tbaa !2449
  store i8 0, i8* %65, align 1, !tbaa !2450
  %.v3 = select i1 %1101, i64 9, i64 21
  %1105 = add i64 %1095, %.v3
  store i64 %1105, i64* %PC, align 8, !tbaa !2428
  %1106 = load i64, i64* %RBP, align 8
  br i1 %1101, label %block_400e37, label %block_400e43

block_400f77:                                     ; preds = %block_400dd5, %block_400e43, %block_400da4, %block_400e06, %block_400e37
  %1107 = phi i64 [ %.pre, %block_400e43 ], [ %1211, %block_400e37 ], [ %1216, %block_400e06 ], [ %1529, %block_400dd5 ], [ %1221, %block_400da4 ]
  %MEMORY.0 = phi %struct.Memory* [ %1477, %block_400e43 ], [ %1093, %block_400e37 ], [ %1511, %block_400e06 ], [ %1193, %block_400dd5 ], [ %1051, %block_400da4 ]
  %1108 = load i64, i64* %RBP, align 8
  %1109 = add i64 %1108, -44
  %1110 = add i64 %1107, 3
  store i64 %1110, i64* %PC, align 8
  %1111 = inttoptr i64 %1109 to i32*
  %1112 = load i32, i32* %1111, align 4
  %1113 = zext i32 %1112 to i64
  store i64 %1113, i64* %RAX, align 8, !tbaa !2428
  %1114 = load i64, i64* %RSP, align 8
  %1115 = add i64 %1114, 392
  store i64 %1115, i64* %RSP, align 8, !tbaa !2428
  %1116 = icmp ugt i64 %1114, -393
  %1117 = zext i1 %1116 to i8
  store i8 %1117, i8* %41, align 1, !tbaa !2432
  %1118 = trunc i64 %1115 to i32
  %1119 = and i32 %1118, 255
  %1120 = tail call i32 @llvm.ctpop.i32(i32 %1119) #8
  %1121 = trunc i32 %1120 to i8
  %1122 = and i8 %1121, 1
  %1123 = xor i8 %1122, 1
  store i8 %1123, i8* %48, align 1, !tbaa !2446
  %1124 = xor i64 %1114, %1115
  %1125 = lshr i64 %1124, 4
  %1126 = trunc i64 %1125 to i8
  %1127 = and i8 %1126, 1
  store i8 %1127, i8* %53, align 1, !tbaa !2447
  %1128 = icmp eq i64 %1115, 0
  %1129 = zext i1 %1128 to i8
  store i8 %1129, i8* %56, align 1, !tbaa !2448
  %1130 = lshr i64 %1115, 63
  %1131 = trunc i64 %1130 to i8
  store i8 %1131, i8* %59, align 1, !tbaa !2449
  %1132 = lshr i64 %1114, 63
  %1133 = xor i64 %1130, %1132
  %1134 = add nuw nsw i64 %1133, %1130
  %1135 = icmp eq i64 %1134, 2
  %1136 = zext i1 %1135 to i8
  store i8 %1136, i8* %65, align 1, !tbaa !2450
  %1137 = add i64 %1107, 11
  store i64 %1137, i64* %PC, align 8
  %1138 = add i64 %1114, 400
  %1139 = inttoptr i64 %1115 to i64*
  %1140 = load i64, i64* %1139, align 8
  store i64 %1140, i64* %RBX, align 8, !tbaa !2428
  store i64 %1138, i64* %RSP, align 8, !tbaa !2428
  %1141 = add i64 %1107, 13
  store i64 %1141, i64* %PC, align 8
  %1142 = add i64 %1114, 408
  %1143 = inttoptr i64 %1138 to i64*
  %1144 = load i64, i64* %1143, align 8
  store i64 %1144, i64* %R12, align 8, !tbaa !2428
  store i64 %1142, i64* %RSP, align 8, !tbaa !2428
  %1145 = add i64 %1107, 15
  store i64 %1145, i64* %PC, align 8
  %1146 = add i64 %1114, 416
  %1147 = inttoptr i64 %1142 to i64*
  %1148 = load i64, i64* %1147, align 8
  store i64 %1148, i64* %R13, align 8, !tbaa !2428
  store i64 %1146, i64* %RSP, align 8, !tbaa !2428
  %1149 = add i64 %1107, 17
  store i64 %1149, i64* %PC, align 8
  %1150 = add i64 %1114, 424
  %1151 = inttoptr i64 %1146 to i64*
  %1152 = load i64, i64* %1151, align 8
  store i64 %1152, i64* %R14, align 8, !tbaa !2428
  store i64 %1150, i64* %RSP, align 8, !tbaa !2428
  %1153 = add i64 %1107, 19
  store i64 %1153, i64* %PC, align 8
  %1154 = add i64 %1114, 432
  %1155 = inttoptr i64 %1150 to i64*
  %1156 = load i64, i64* %1155, align 8
  store i64 %1156, i64* %R15, align 8, !tbaa !2428
  store i64 %1154, i64* %RSP, align 8, !tbaa !2428
  %1157 = add i64 %1107, 20
  store i64 %1157, i64* %PC, align 8
  %1158 = add i64 %1114, 440
  %1159 = inttoptr i64 %1154 to i64*
  %1160 = load i64, i64* %1159, align 8
  store i64 %1160, i64* %RBP, align 8, !tbaa !2428
  store i64 %1158, i64* %RSP, align 8, !tbaa !2428
  %1161 = add i64 %1107, 21
  store i64 %1161, i64* %PC, align 8
  %1162 = inttoptr i64 %1158 to i64*
  %1163 = load i64, i64* %1162, align 8
  store i64 %1163, i64* %PC, align 8, !tbaa !2428
  %1164 = add i64 %1114, 448
  store i64 %1164, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400db0:                                     ; preds = %block_400880
  %1165 = add i64 %1064, -60
  %1166 = add i64 %1063, 3
  store i64 %1166, i64* %PC, align 8
  %1167 = inttoptr i64 %1165 to i32*
  %1168 = load i32, i32* %1167, align 4
  %1169 = zext i32 %1168 to i64
  store i64 %1169, i64* %RDI, align 8, !tbaa !2428
  %1170 = add i64 %1064, -68
  %1171 = add i64 %1063, 6
  store i64 %1171, i64* %PC, align 8
  %1172 = inttoptr i64 %1170 to i32*
  %1173 = load i32, i32* %1172, align 4
  %1174 = zext i32 %1173 to i64
  store i64 %1174, i64* %RSI, align 8, !tbaa !2428
  %1175 = add i64 %1064, -64
  %1176 = add i64 %1063, 9
  store i64 %1176, i64* %PC, align 8
  %1177 = inttoptr i64 %1175 to i32*
  %1178 = load i32, i32* %1177, align 4
  %1179 = zext i32 %1178 to i64
  store i64 %1179, i64* %RDX, align 8, !tbaa !2428
  %1180 = add i64 %1064, -136
  %1181 = add i64 %1063, 16
  store i64 %1181, i64* %PC, align 8
  %1182 = inttoptr i64 %1180 to i64*
  %1183 = load i64, i64* %1182, align 8
  store i64 %1183, i64* %RCX, align 8, !tbaa !2428
  %1184 = add i64 %1064, -168
  %1185 = add i64 %1063, 23
  store i64 %1185, i64* %PC, align 8
  %1186 = inttoptr i64 %1184 to i64*
  %1187 = load i64, i64* %1186, align 8
  store i64 %1187, i64* %R8, align 8, !tbaa !2428
  %1188 = add i64 %1063, 7328
  %1189 = add i64 %1063, 28
  %1190 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1191 = add i64 %1190, -8
  %1192 = inttoptr i64 %1191 to i64*
  store i64 %1189, i64* %1192, align 8
  store i64 %1191, i64* %RSP, align 8, !tbaa !2428
  store i64 %1188, i64* %PC, align 8, !tbaa !2428
  %1193 = tail call %struct.Memory* @sub_402a50_check_FP_renamed_(%struct.State* nonnull %0, i64 %1188, %struct.Memory* %1051)
  %1194 = load i32, i32* %EAX, align 4
  %1195 = load i64, i64* %PC, align 8
  store i8 0, i8* %41, align 1, !tbaa !2432
  %1196 = and i32 %1194, 255
  %1197 = tail call i32 @llvm.ctpop.i32(i32 %1196) #8
  %1198 = trunc i32 %1197 to i8
  %1199 = and i8 %1198, 1
  %1200 = xor i8 %1199, 1
  store i8 %1200, i8* %48, align 1, !tbaa !2446
  store i8 0, i8* %53, align 1, !tbaa !2447
  %1201 = icmp eq i32 %1194, 0
  %1202 = zext i1 %1201 to i8
  store i8 %1202, i8* %56, align 1, !tbaa !2448
  %1203 = lshr i32 %1194, 31
  %1204 = trunc i32 %1203 to i8
  store i8 %1204, i8* %59, align 1, !tbaa !2449
  store i8 0, i8* %65, align 1, !tbaa !2450
  %.v1 = select i1 %1201, i64 9, i64 21
  %1205 = add i64 %1195, %.v1
  store i64 %1205, i64* %PC, align 8, !tbaa !2428
  %1206 = load i64, i64* %RBP, align 8
  br i1 %1201, label %block_400dd5, label %block_400de1

block_400e37:                                     ; preds = %block_400e12
  %1207 = add i64 %1106, -44
  %1208 = add i64 %1105, 7
  store i64 %1208, i64* %PC, align 8
  %1209 = inttoptr i64 %1207 to i32*
  store i32 1, i32* %1209, align 4
  %1210 = load i64, i64* %PC, align 8
  %1211 = add i64 %1210, 313
  store i64 %1211, i64* %PC, align 8, !tbaa !2428
  br label %block_400f77

block_400e06:                                     ; preds = %block_400de1
  %1212 = add i64 %1524, -44
  %1213 = add i64 %1523, 7
  store i64 %1213, i64* %PC, align 8
  %1214 = inttoptr i64 %1212 to i32*
  store i32 1, i32* %1214, align 4
  %1215 = load i64, i64* %PC, align 8
  %1216 = add i64 %1215, 362
  store i64 %1216, i64* %PC, align 8, !tbaa !2428
  br label %block_400f77

block_400da4:                                     ; preds = %block_400880
  %1217 = add i64 %1064, -44
  %1218 = add i64 %1063, 7
  store i64 %1218, i64* %PC, align 8
  %1219 = inttoptr i64 %1217 to i32*
  store i32 1, i32* %1219, align 4
  %1220 = load i64, i64* %PC, align 8
  %1221 = add i64 %1220, 460
  store i64 %1221, i64* %PC, align 8, !tbaa !2428
  br label %block_400f77

block_400e43:                                     ; preds = %block_400e12
  %1222 = add i64 %1106, -60
  %1223 = add i64 %1105, 3
  store i64 %1223, i64* %PC, align 8
  %1224 = inttoptr i64 %1222 to i32*
  %1225 = load i32, i32* %1224, align 4
  %1226 = zext i32 %1225 to i64
  store i64 %1226, i64* %RDI, align 8, !tbaa !2428
  %1227 = add i64 %1106, -68
  %1228 = add i64 %1105, 6
  store i64 %1228, i64* %PC, align 8
  %1229 = inttoptr i64 %1227 to i32*
  %1230 = load i32, i32* %1229, align 4
  %1231 = zext i32 %1230 to i64
  store i64 %1231, i64* %RSI, align 8, !tbaa !2428
  %1232 = add i64 %1106, -64
  %1233 = add i64 %1105, 9
  store i64 %1233, i64* %PC, align 8
  %1234 = inttoptr i64 %1232 to i32*
  %1235 = load i32, i32* %1234, align 4
  %1236 = zext i32 %1235 to i64
  store i64 %1236, i64* %RDX, align 8, !tbaa !2428
  %1237 = add i64 %1106, -160
  %1238 = add i64 %1105, 16
  store i64 %1238, i64* %PC, align 8
  %1239 = inttoptr i64 %1237 to i64*
  %1240 = load i64, i64* %1239, align 8
  store i64 %1240, i64* %RCX, align 8, !tbaa !2428
  %1241 = add i64 %1106, -168
  %1242 = add i64 %1105, 23
  store i64 %1242, i64* %PC, align 8
  %1243 = inttoptr i64 %1241 to i64*
  %1244 = load i64, i64* %1243, align 8
  store i64 %1244, i64* %R8, align 8, !tbaa !2428
  %1245 = add i64 %1106, -176
  %1246 = add i64 %1105, 30
  store i64 %1246, i64* %PC, align 8
  %1247 = inttoptr i64 %1245 to i64*
  %1248 = load i64, i64* %1247, align 8
  store i64 %1248, i64* %R9, align 8, !tbaa !2428
  %1249 = add i64 %1106, -184
  %1250 = add i64 %1105, 37
  store i64 %1250, i64* %PC, align 8
  %1251 = inttoptr i64 %1249 to i64*
  %1252 = load i64, i64* %1251, align 8
  store i64 %1252, i64* %RAX, align 8, !tbaa !2428
  %1253 = load i64*, i64** %416, align 8
  %1254 = add i64 %1105, 41
  store i64 %1254, i64* %PC, align 8
  store i64 %1252, i64* %1253, align 8
  %1255 = load i64, i64* %PC, align 8
  %1256 = add i64 %1255, 7556
  %1257 = add i64 %1255, 5
  %1258 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1259 = add i64 %1258, -8
  %1260 = inttoptr i64 %1259 to i64*
  store i64 %1257, i64* %1260, align 8
  store i64 %1259, i64* %RSP, align 8, !tbaa !2428
  store i64 %1256, i64* %PC, align 8, !tbaa !2428
  %1261 = tail call %struct.Memory* @sub_402bf0_print_array_renamed_(%struct.State* nonnull %0, i64 %1256, %struct.Memory* %1093)
  %1262 = load i64, i64* %RBP, align 8
  %1263 = add i64 %1262, -96
  %1264 = load i64, i64* %PC, align 8
  %1265 = add i64 %1264, 4
  store i64 %1265, i64* %PC, align 8
  %1266 = inttoptr i64 %1263 to i64*
  %1267 = load i64, i64* %1266, align 8
  store i64 %1267, i64* %RAX, align 8, !tbaa !2428
  store i64 %1267, i64* %RDI, align 8, !tbaa !2428
  %1268 = add i64 %1264, -2337
  %1269 = add i64 %1264, 12
  %1270 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1271 = add i64 %1270, -8
  %1272 = inttoptr i64 %1271 to i64*
  store i64 %1269, i64* %1272, align 8
  store i64 %1271, i64* %RSP, align 8, !tbaa !2428
  store i64 %1268, i64* %PC, align 8, !tbaa !2428
  %1273 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1261)
  %1274 = load i64, i64* %RBP, align 8
  %1275 = add i64 %1274, -104
  %1276 = load i64, i64* %PC, align 8
  %1277 = add i64 %1276, 4
  store i64 %1277, i64* %PC, align 8
  %1278 = inttoptr i64 %1275 to i64*
  %1279 = load i64, i64* %1278, align 8
  store i64 %1279, i64* %RAX, align 8, !tbaa !2428
  store i64 %1279, i64* %RDI, align 8, !tbaa !2428
  %1280 = add i64 %1276, -2349
  %1281 = add i64 %1276, 12
  %1282 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1283 = add i64 %1282, -8
  %1284 = inttoptr i64 %1283 to i64*
  store i64 %1281, i64* %1284, align 8
  store i64 %1283, i64* %RSP, align 8, !tbaa !2428
  store i64 %1280, i64* %PC, align 8, !tbaa !2428
  %1285 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1273)
  %1286 = load i64, i64* %RBP, align 8
  %1287 = add i64 %1286, -112
  %1288 = load i64, i64* %PC, align 8
  %1289 = add i64 %1288, 4
  store i64 %1289, i64* %PC, align 8
  %1290 = inttoptr i64 %1287 to i64*
  %1291 = load i64, i64* %1290, align 8
  store i64 %1291, i64* %RAX, align 8, !tbaa !2428
  store i64 %1291, i64* %RDI, align 8, !tbaa !2428
  %1292 = add i64 %1288, -2361
  %1293 = add i64 %1288, 12
  %1294 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1295 = add i64 %1294, -8
  %1296 = inttoptr i64 %1295 to i64*
  store i64 %1293, i64* %1296, align 8
  store i64 %1295, i64* %RSP, align 8, !tbaa !2428
  store i64 %1292, i64* %PC, align 8, !tbaa !2428
  %1297 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1285)
  %1298 = load i64, i64* %RBP, align 8
  %1299 = add i64 %1298, -120
  %1300 = load i64, i64* %PC, align 8
  %1301 = add i64 %1300, 4
  store i64 %1301, i64* %PC, align 8
  %1302 = inttoptr i64 %1299 to i64*
  %1303 = load i64, i64* %1302, align 8
  store i64 %1303, i64* %RAX, align 8, !tbaa !2428
  store i64 %1303, i64* %RDI, align 8, !tbaa !2428
  %1304 = add i64 %1300, -2373
  %1305 = add i64 %1300, 12
  %1306 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1307 = add i64 %1306, -8
  %1308 = inttoptr i64 %1307 to i64*
  store i64 %1305, i64* %1308, align 8
  store i64 %1307, i64* %RSP, align 8, !tbaa !2428
  store i64 %1304, i64* %PC, align 8, !tbaa !2428
  %1309 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1297)
  %1310 = load i64, i64* %RBP, align 8
  %1311 = add i64 %1310, -128
  %1312 = load i64, i64* %PC, align 8
  %1313 = add i64 %1312, 4
  store i64 %1313, i64* %PC, align 8
  %1314 = inttoptr i64 %1311 to i64*
  %1315 = load i64, i64* %1314, align 8
  store i64 %1315, i64* %RAX, align 8, !tbaa !2428
  store i64 %1315, i64* %RDI, align 8, !tbaa !2428
  %1316 = add i64 %1312, -2385
  %1317 = add i64 %1312, 12
  %1318 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1319 = add i64 %1318, -8
  %1320 = inttoptr i64 %1319 to i64*
  store i64 %1317, i64* %1320, align 8
  store i64 %1319, i64* %RSP, align 8, !tbaa !2428
  store i64 %1316, i64* %PC, align 8, !tbaa !2428
  %1321 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1309)
  %1322 = load i64, i64* %RBP, align 8
  %1323 = add i64 %1322, -136
  %1324 = load i64, i64* %PC, align 8
  %1325 = add i64 %1324, 7
  store i64 %1325, i64* %PC, align 8
  %1326 = inttoptr i64 %1323 to i64*
  %1327 = load i64, i64* %1326, align 8
  store i64 %1327, i64* %RAX, align 8, !tbaa !2428
  store i64 %1327, i64* %RDI, align 8, !tbaa !2428
  %1328 = add i64 %1324, -2397
  %1329 = add i64 %1324, 15
  %1330 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1331 = add i64 %1330, -8
  %1332 = inttoptr i64 %1331 to i64*
  store i64 %1329, i64* %1332, align 8
  store i64 %1331, i64* %RSP, align 8, !tbaa !2428
  store i64 %1328, i64* %PC, align 8, !tbaa !2428
  %1333 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1321)
  %1334 = load i64, i64* %RBP, align 8
  %1335 = add i64 %1334, -144
  %1336 = load i64, i64* %PC, align 8
  %1337 = add i64 %1336, 7
  store i64 %1337, i64* %PC, align 8
  %1338 = inttoptr i64 %1335 to i64*
  %1339 = load i64, i64* %1338, align 8
  store i64 %1339, i64* %RAX, align 8, !tbaa !2428
  store i64 %1339, i64* %RDI, align 8, !tbaa !2428
  %1340 = add i64 %1336, -2412
  %1341 = add i64 %1336, 15
  %1342 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1343 = add i64 %1342, -8
  %1344 = inttoptr i64 %1343 to i64*
  store i64 %1341, i64* %1344, align 8
  store i64 %1343, i64* %RSP, align 8, !tbaa !2428
  store i64 %1340, i64* %PC, align 8, !tbaa !2428
  %1345 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1333)
  %1346 = load i64, i64* %RBP, align 8
  %1347 = add i64 %1346, -152
  %1348 = load i64, i64* %PC, align 8
  %1349 = add i64 %1348, 7
  store i64 %1349, i64* %PC, align 8
  %1350 = inttoptr i64 %1347 to i64*
  %1351 = load i64, i64* %1350, align 8
  store i64 %1351, i64* %RAX, align 8, !tbaa !2428
  store i64 %1351, i64* %RDI, align 8, !tbaa !2428
  %1352 = add i64 %1348, -2427
  %1353 = add i64 %1348, 15
  %1354 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1355 = add i64 %1354, -8
  %1356 = inttoptr i64 %1355 to i64*
  store i64 %1353, i64* %1356, align 8
  store i64 %1355, i64* %RSP, align 8, !tbaa !2428
  store i64 %1352, i64* %PC, align 8, !tbaa !2428
  %1357 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1345)
  %1358 = load i64, i64* %RBP, align 8
  %1359 = add i64 %1358, -160
  %1360 = load i64, i64* %PC, align 8
  %1361 = add i64 %1360, 7
  store i64 %1361, i64* %PC, align 8
  %1362 = inttoptr i64 %1359 to i64*
  %1363 = load i64, i64* %1362, align 8
  store i64 %1363, i64* %RAX, align 8, !tbaa !2428
  store i64 %1363, i64* %RDI, align 8, !tbaa !2428
  %1364 = add i64 %1360, -2442
  %1365 = add i64 %1360, 15
  %1366 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1367 = add i64 %1366, -8
  %1368 = inttoptr i64 %1367 to i64*
  store i64 %1365, i64* %1368, align 8
  store i64 %1367, i64* %RSP, align 8, !tbaa !2428
  store i64 %1364, i64* %PC, align 8, !tbaa !2428
  %1369 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1357)
  %1370 = load i64, i64* %RBP, align 8
  %1371 = add i64 %1370, -168
  %1372 = load i64, i64* %PC, align 8
  %1373 = add i64 %1372, 7
  store i64 %1373, i64* %PC, align 8
  %1374 = inttoptr i64 %1371 to i64*
  %1375 = load i64, i64* %1374, align 8
  store i64 %1375, i64* %RAX, align 8, !tbaa !2428
  store i64 %1375, i64* %RDI, align 8, !tbaa !2428
  %1376 = add i64 %1372, -2457
  %1377 = add i64 %1372, 15
  %1378 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1379 = add i64 %1378, -8
  %1380 = inttoptr i64 %1379 to i64*
  store i64 %1377, i64* %1380, align 8
  store i64 %1379, i64* %RSP, align 8, !tbaa !2428
  store i64 %1376, i64* %PC, align 8, !tbaa !2428
  %1381 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1369)
  %1382 = load i64, i64* %RBP, align 8
  %1383 = add i64 %1382, -176
  %1384 = load i64, i64* %PC, align 8
  %1385 = add i64 %1384, 7
  store i64 %1385, i64* %PC, align 8
  %1386 = inttoptr i64 %1383 to i64*
  %1387 = load i64, i64* %1386, align 8
  store i64 %1387, i64* %RAX, align 8, !tbaa !2428
  store i64 %1387, i64* %RDI, align 8, !tbaa !2428
  %1388 = add i64 %1384, -2472
  %1389 = add i64 %1384, 15
  %1390 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1391 = add i64 %1390, -8
  %1392 = inttoptr i64 %1391 to i64*
  store i64 %1389, i64* %1392, align 8
  store i64 %1391, i64* %RSP, align 8, !tbaa !2428
  store i64 %1388, i64* %PC, align 8, !tbaa !2428
  %1393 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1381)
  %1394 = load i64, i64* %RBP, align 8
  %1395 = add i64 %1394, -184
  %1396 = load i64, i64* %PC, align 8
  %1397 = add i64 %1396, 7
  store i64 %1397, i64* %PC, align 8
  %1398 = inttoptr i64 %1395 to i64*
  %1399 = load i64, i64* %1398, align 8
  store i64 %1399, i64* %RAX, align 8, !tbaa !2428
  store i64 %1399, i64* %RDI, align 8, !tbaa !2428
  %1400 = add i64 %1396, -2487
  %1401 = add i64 %1396, 15
  %1402 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1403 = add i64 %1402, -8
  %1404 = inttoptr i64 %1403 to i64*
  store i64 %1401, i64* %1404, align 8
  store i64 %1403, i64* %RSP, align 8, !tbaa !2428
  store i64 %1400, i64* %PC, align 8, !tbaa !2428
  %1405 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1393)
  %1406 = load i64, i64* %RBP, align 8
  %1407 = add i64 %1406, -192
  %1408 = load i64, i64* %PC, align 8
  %1409 = add i64 %1408, 7
  store i64 %1409, i64* %PC, align 8
  %1410 = inttoptr i64 %1407 to i64*
  %1411 = load i64, i64* %1410, align 8
  store i64 %1411, i64* %RAX, align 8, !tbaa !2428
  store i64 %1411, i64* %RDI, align 8, !tbaa !2428
  %1412 = add i64 %1408, -2502
  %1413 = add i64 %1408, 15
  %1414 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1415 = add i64 %1414, -8
  %1416 = inttoptr i64 %1415 to i64*
  store i64 %1413, i64* %1416, align 8
  store i64 %1415, i64* %RSP, align 8, !tbaa !2428
  store i64 %1412, i64* %PC, align 8, !tbaa !2428
  %1417 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1405)
  %1418 = load i64, i64* %RBP, align 8
  %1419 = add i64 %1418, -200
  %1420 = load i64, i64* %PC, align 8
  %1421 = add i64 %1420, 7
  store i64 %1421, i64* %PC, align 8
  %1422 = inttoptr i64 %1419 to i64*
  %1423 = load i64, i64* %1422, align 8
  store i64 %1423, i64* %RAX, align 8, !tbaa !2428
  store i64 %1423, i64* %RDI, align 8, !tbaa !2428
  %1424 = add i64 %1420, -2517
  %1425 = add i64 %1420, 15
  %1426 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1427 = add i64 %1426, -8
  %1428 = inttoptr i64 %1427 to i64*
  store i64 %1425, i64* %1428, align 8
  store i64 %1427, i64* %RSP, align 8, !tbaa !2428
  store i64 %1424, i64* %PC, align 8, !tbaa !2428
  %1429 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1417)
  %1430 = load i64, i64* %RBP, align 8
  %1431 = add i64 %1430, -208
  %1432 = load i64, i64* %PC, align 8
  %1433 = add i64 %1432, 7
  store i64 %1433, i64* %PC, align 8
  %1434 = inttoptr i64 %1431 to i64*
  %1435 = load i64, i64* %1434, align 8
  store i64 %1435, i64* %RAX, align 8, !tbaa !2428
  store i64 %1435, i64* %RDI, align 8, !tbaa !2428
  %1436 = add i64 %1432, -2532
  %1437 = add i64 %1432, 15
  %1438 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1439 = add i64 %1438, -8
  %1440 = inttoptr i64 %1439 to i64*
  store i64 %1437, i64* %1440, align 8
  store i64 %1439, i64* %RSP, align 8, !tbaa !2428
  store i64 %1436, i64* %PC, align 8, !tbaa !2428
  %1441 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1429)
  %1442 = load i64, i64* %RBP, align 8
  %1443 = add i64 %1442, -216
  %1444 = load i64, i64* %PC, align 8
  %1445 = add i64 %1444, 7
  store i64 %1445, i64* %PC, align 8
  %1446 = inttoptr i64 %1443 to i64*
  %1447 = load i64, i64* %1446, align 8
  store i64 %1447, i64* %RAX, align 8, !tbaa !2428
  store i64 %1447, i64* %RDI, align 8, !tbaa !2428
  %1448 = add i64 %1444, -2547
  %1449 = add i64 %1444, 15
  %1450 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1451 = add i64 %1450, -8
  %1452 = inttoptr i64 %1451 to i64*
  store i64 %1449, i64* %1452, align 8
  store i64 %1451, i64* %RSP, align 8, !tbaa !2428
  store i64 %1448, i64* %PC, align 8, !tbaa !2428
  %1453 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1441)
  %1454 = load i64, i64* %RBP, align 8
  %1455 = add i64 %1454, -224
  %1456 = load i64, i64* %PC, align 8
  %1457 = add i64 %1456, 7
  store i64 %1457, i64* %PC, align 8
  %1458 = inttoptr i64 %1455 to i64*
  %1459 = load i64, i64* %1458, align 8
  store i64 %1459, i64* %RAX, align 8, !tbaa !2428
  store i64 %1459, i64* %RDI, align 8, !tbaa !2428
  %1460 = add i64 %1456, -2562
  %1461 = add i64 %1456, 15
  %1462 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1463 = add i64 %1462, -8
  %1464 = inttoptr i64 %1463 to i64*
  store i64 %1461, i64* %1464, align 8
  store i64 %1463, i64* %RSP, align 8, !tbaa !2428
  store i64 %1460, i64* %PC, align 8, !tbaa !2428
  %1465 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1453)
  %1466 = load i64, i64* %RBP, align 8
  %1467 = add i64 %1466, -232
  %1468 = load i64, i64* %PC, align 8
  %1469 = add i64 %1468, 7
  store i64 %1469, i64* %PC, align 8
  %1470 = inttoptr i64 %1467 to i64*
  %1471 = load i64, i64* %1470, align 8
  store i64 %1471, i64* %RAX, align 8, !tbaa !2428
  store i64 %1471, i64* %RDI, align 8, !tbaa !2428
  %1472 = add i64 %1468, -2577
  %1473 = add i64 %1468, 15
  %1474 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1475 = add i64 %1474, -8
  %1476 = inttoptr i64 %1475 to i64*
  store i64 %1473, i64* %1476, align 8
  store i64 %1475, i64* %RSP, align 8, !tbaa !2428
  store i64 %1472, i64* %PC, align 8, !tbaa !2428
  %1477 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1465)
  %1478 = load i64, i64* %RBP, align 8
  %1479 = add i64 %1478, -44
  %1480 = load i64, i64* %PC, align 8
  %1481 = add i64 %1480, 7
  store i64 %1481, i64* %PC, align 8
  %1482 = inttoptr i64 %1479 to i32*
  store i32 0, i32* %1482, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400f77

block_400de1:                                     ; preds = %block_400db0
  %1483 = add i64 %1206, -60
  %1484 = add i64 %1205, 3
  store i64 %1484, i64* %PC, align 8
  %1485 = inttoptr i64 %1483 to i32*
  %1486 = load i32, i32* %1485, align 4
  %1487 = zext i32 %1486 to i64
  store i64 %1487, i64* %RDI, align 8, !tbaa !2428
  %1488 = add i64 %1206, -68
  %1489 = add i64 %1205, 6
  store i64 %1489, i64* %PC, align 8
  %1490 = inttoptr i64 %1488 to i32*
  %1491 = load i32, i32* %1490, align 4
  %1492 = zext i32 %1491 to i64
  store i64 %1492, i64* %RSI, align 8, !tbaa !2428
  %1493 = add i64 %1206, -64
  %1494 = add i64 %1205, 9
  store i64 %1494, i64* %PC, align 8
  %1495 = inttoptr i64 %1493 to i32*
  %1496 = load i32, i32* %1495, align 4
  %1497 = zext i32 %1496 to i64
  store i64 %1497, i64* %RDX, align 8, !tbaa !2428
  %1498 = add i64 %1206, -144
  %1499 = add i64 %1205, 16
  store i64 %1499, i64* %PC, align 8
  %1500 = inttoptr i64 %1498 to i64*
  %1501 = load i64, i64* %1500, align 8
  store i64 %1501, i64* %RCX, align 8, !tbaa !2428
  %1502 = add i64 %1206, -176
  %1503 = add i64 %1205, 23
  store i64 %1503, i64* %PC, align 8
  %1504 = inttoptr i64 %1502 to i64*
  %1505 = load i64, i64* %1504, align 8
  store i64 %1505, i64* %R8, align 8, !tbaa !2428
  %1506 = add i64 %1205, 7279
  %1507 = add i64 %1205, 28
  %1508 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1509 = add i64 %1508, -8
  %1510 = inttoptr i64 %1509 to i64*
  store i64 %1507, i64* %1510, align 8
  store i64 %1509, i64* %RSP, align 8, !tbaa !2428
  store i64 %1506, i64* %PC, align 8, !tbaa !2428
  %1511 = tail call %struct.Memory* @sub_402a50_check_FP_renamed_(%struct.State* nonnull %0, i64 %1506, %struct.Memory* %1193)
  %1512 = load i32, i32* %EAX, align 4
  %1513 = load i64, i64* %PC, align 8
  store i8 0, i8* %41, align 1, !tbaa !2432
  %1514 = and i32 %1512, 255
  %1515 = tail call i32 @llvm.ctpop.i32(i32 %1514) #8
  %1516 = trunc i32 %1515 to i8
  %1517 = and i8 %1516, 1
  %1518 = xor i8 %1517, 1
  store i8 %1518, i8* %48, align 1, !tbaa !2446
  store i8 0, i8* %53, align 1, !tbaa !2447
  %1519 = icmp eq i32 %1512, 0
  %1520 = zext i1 %1519 to i8
  store i8 %1520, i8* %56, align 1, !tbaa !2448
  %1521 = lshr i32 %1512, 31
  %1522 = trunc i32 %1521 to i8
  store i8 %1522, i8* %59, align 1, !tbaa !2449
  store i8 0, i8* %65, align 1, !tbaa !2450
  %.v2 = select i1 %1519, i64 9, i64 21
  %1523 = add i64 %1513, %.v2
  store i64 %1523, i64* %PC, align 8, !tbaa !2428
  %1524 = load i64, i64* %RBP, align 8
  br i1 %1519, label %block_400e06, label %block_400e12

block_400dd5:                                     ; preds = %block_400db0
  %1525 = add i64 %1206, -44
  %1526 = add i64 %1205, 7
  store i64 %1526, i64* %PC, align 8
  %1527 = inttoptr i64 %1525 to i32*
  store i32 1, i32* %1527, align 4
  %1528 = load i64, i64* %PC, align 8
  %1529 = add i64 %1528, 411
  store i64 %1529, i64* %PC, align 8, !tbaa !2428
  br label %block_400f77
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #5

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400690_frame_dummy() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400690;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @1, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_400690_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400690_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400660___do_global_dtors_aux() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400660;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @3, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_400660___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400660___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_6040d8_free(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_6040b8_calloc(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @calloc to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_6040f8_fprintf(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_6040e0_printf(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402e70___libc_csu_fini() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402e70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @4, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_402e70___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402e70___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402e00___libc_csu_init() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402e00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @5, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_402e00___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402e00___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400880;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @6, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400880_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_6040b0___libc_start_main(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_6040c8_exit(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exit to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_4005a0_posix_memalign(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @posix_memalign to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_flush_cache() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4006a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @7, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @polybench_flush_cache_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4006a0_polybench_flush_cache(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402e74;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @8, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402e74__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_timer_stop() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400760;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @9, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @polybench_timer_stop_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400760_polybench_timer_stop(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_alloc_data() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4007c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @10, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @polybench_alloc_data_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_timer_print() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400780;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @11, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @polybench_timer_print_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400780_polybench_timer_print(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400520;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @12, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400520__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_timer_start() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400730;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @13, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @polybench_timer_start_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400730_polybench_timer_start(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_prepare_instruments() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400720;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @14, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @polybench_prepare_instruments_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400720_polybench_prepare_instruments(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %0, %2
  tail call void @callback_sub_402e00___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  tail call void @callback_sub_402e70___libc_csu_fini()
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline }
attributes #6 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { naked nobuiltin noinline }
attributes #8 = { nounwind }
attributes #9 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2445, !2445, i64 0}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"double", !2430, i64 0}
!2454 = !{!2430, !2430, i64 0}
!2455 = !{!2456, !2456, i64 0}
!2456 = !{!"float", !2430, i64 0}
