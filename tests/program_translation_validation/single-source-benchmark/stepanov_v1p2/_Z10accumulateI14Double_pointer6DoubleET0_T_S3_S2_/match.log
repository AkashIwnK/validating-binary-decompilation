Writing '/tmp/tmp3s5p5355.dot'...
Writing '/tmp/tmp3s5p5355.dot':Done

Reading LLVM: /tmp/tmp9faugjdw-query.ll
Extracting function [_Z10accumulateI14Double_pointer6DoubleET0_T_S3_S2_] from /tmp/tmp9faugjdw-query.ll
Dot file generated!
Writing '/tmp/tmpn_bwd5oe.dot'...
Writing '/tmp/tmpn_bwd5oe.dot':Done

Reading LLVM: /tmp/tmpeu0zfky8-target.ll
Extracting function [_Z10accumulateI14Double_pointer6DoubleET0_T_S3_S2_] from /tmp/tmpeu0zfky8-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -56
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 48
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, 16
- 27 %23 = xor i64 %22, %11
- 28 %24 = lshr i64 %23, 4
- 29 %25 = trunc i64 %24 to i8
- 30 %26 = and i8 %25, 1
- 31 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 32 store i8 %26, i8* %27, align 1
- 33 %28 = icmp eq i64 %11, 0
- 34 %29 = zext i1 %28 to i8
- 35 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 36 store i8 %29, i8* %30, align 1
- 37 %31 = lshr i64 %11, 63
- 38 %32 = trunc i64 %31 to i8
- 39 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 40 store i8 %32, i8* %33, align 1
- 41 %34 = lshr i64 %8, 63
- 42 %35 = xor i64 %31, %34
- 43 %36 = add nuw nsw i64 %35, %34
- 44 %37 = icmp eq i64 %36, 2
- 45 %38 = zext i1 %37 to i8
- 46 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 47 store i8 %38, i8* %39, align 1
- 48 %RDI.i56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 49 %40 = add i64 %7, -24
- 50 %41 = load i64, i64* %RDI.i56, align 8
- 51 %42 = add i64 %10, 11
- 52 store i64 %42, i64* %3, align 8
- 53 %43 = inttoptr i64 %40 to i64*
- 54 store i64 %41, i64* %43, align 8
- 55 %RSI.i53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 56 %44 = load i64, i64* %RBP.i, align 8
- 57 %45 = add i64 %44, -24
- 58 %46 = load i64, i64* %RSI.i53, align 8
- 59 %47 = load i64, i64* %3, align 8
- 60 %48 = add i64 %47, 4
- 61 store i64 %48, i64* %3, align 8
- 62 %49 = inttoptr i64 %45 to i64*
- 63 store i64 %46, i64* %49, align 8
- 64 %50 = load i64, i64* %RBP.i, align 8
- 65 %51 = add i64 %50, -32
- 66 %52 = load i64, i64* %3, align 8
- 67 %53 = add i64 %52, 5
- 68 store i64 %53, i64* %3, align 8
- 69 %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 70 %55 = load i64, i64* %54, align 1
- 71 %56 = inttoptr i64 %51 to i64*
- 72 store i64 %55, i64* %56, align 8
- 73 %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 74 %EAX.i = bitcast %union.anon* %57 to i32*
- 75 %RAX.i29 = getelementptr inbounds %union.anon, %union.anon* %57, i64 0, i32 0
- 76 %RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 77 %.pre = load i64, i64* %3, align 8
- 78 \<badref\> = br label %block_.L_402a15
- 79 %58 = phi i64 [ %123, %block_402a2b ], [ %.pre, %entry ]
- 80 %59 = load i64, i64* %RBP.i, align 8
- 81 %60 = add i64 %59, -16
- 82 store i64 %60, i64* %RDI.i56, align 8
- 83 %61 = add i64 %59, -24
- 84 store i64 %61, i64* %RSI.i53, align 8
- 85 %62 = add i64 %58, 107
- 86 %63 = add i64 %58, 13
- 87 %64 = load i64, i64* %6, align 8
- 88 %65 = add i64 %64, -8
- 89 %66 = inttoptr i64 %65 to i64*
- 90 store i64 %63, i64* %66, align 8
- 91 store i64 %65, i64* %6, align 8
- 92 store i64 %62, i64* %3, align 8
- 93 %call2_402a1d = tail call %struct.Memory* @sub_402a80._ZneI14Double_pointerEiRKT_S3_(%struct.State* nonnull %0, i64 %62, %struct.Memory* %2)
- 94 %67 = load i32, i32* %EAX.i, align 4
- 95 %68 = load i64, i64* %3, align 8
- 96 store i8 0, i8* %14, align 1
- 97 %69 = and i32 %67, 255
- 98 %70 = tail call i32 @llvm.ctpop.i32(i32 %69)
- 99 %71 = trunc i32 %70 to i8
- 100 %72 = and i8 %71, 1
- 101 %73 = xor i8 %72, 1
- 102 store i8 %73, i8* %21, align 1
- 103 store i8 0, i8* %27, align 1
- 104 %74 = icmp eq i32 %67, 0
- 105 %75 = zext i1 %74 to i8
- 106 store i8 %75, i8* %30, align 1
- 107 %76 = lshr i32 %67, 31
- 108 %77 = trunc i32 %76 to i8
- 109 store i8 %77, i8* %33, align 1
- 110 store i8 0, i8* %39, align 1
- 111 %.v = select i1 %74, i64 73, i64 9
- 112 %78 = add i64 %68, %.v
- 113 store i64 %78, i64* %3, align 8
- 114 %79 = load i64, i64* %RBP.i, align 8
- 115 \<badref\> = br i1 %74, label %block_.L_402a6b, label %block_402a2b
- 116 %80 = add i64 %79, -16
- 117 store i64 %80, i64* %RDI.i56, align 8
- 118 store i64 0, i64* %RSI.i53, align 8
- 119 store i8 0, i8* %14, align 1
- 120 store i8 1, i8* %21, align 1
- 121 store i8 1, i8* %30, align 1
- 122 store i8 0, i8* %33, align 1
- 123 store i8 0, i8* %39, align 1
- 124 store i8 0, i8* %27, align 1
- 125 %81 = add i64 %78, 149
- 126 %82 = add i64 %78, 11
- 127 %83 = load i64, i64* %6, align 8
- 128 %84 = add i64 %83, -8
- 129 %85 = inttoptr i64 %84 to i64*
- 130 store i64 %82, i64* %85, align 8
- 131 store i64 %84, i64* %6, align 8
- 132 store i64 %81, i64* %3, align 8
- 133 %call2_402a31 = tail call %struct.Memory* @sub_402ac0._ZN14Double_pointerppEi(%struct.State* nonnull %0, i64 %81, %struct.Memory* %2)
- 134 %86 = load i64, i64* %RBP.i, align 8
- 135 %87 = add i64 %86, -48
- 136 %88 = load i64, i64* %3, align 8
- 137 store i64 %87, i64* %RDI.i56, align 8
- 138 %89 = load i64, i64* %RAX.i29, align 8
- 139 %90 = add i64 %88, 8
- 140 store i64 %90, i64* %3, align 8
- 141 %91 = inttoptr i64 %87 to i64*
- 142 store i64 %89, i64* %91, align 8
- 143 %92 = load i64, i64* %3, align 8
- 144 %93 = add i64 %92, -3134
- 145 %94 = add i64 %92, 5
- 146 %95 = load i64, i64* %6, align 8
- 147 %96 = add i64 %95, -8
- 148 %97 = inttoptr i64 %96 to i64*
- 149 store i64 %94, i64* %97, align 8
- 150 store i64 %96, i64* %6, align 8
- 151 store i64 %93, i64* %3, align 8
- 152 %call2_402a3e = tail call %struct.Memory* @sub_401e00._ZNK14Double_pointerdeEv(%struct.State* nonnull %0, i64 %93, %struct.Memory* %2)
- 153 %98 = load i64, i64* %3, align 8
- 154 store i64 ptrtoint (%G__0x60cf00_type* @G__0x60cf00 to i64), i64* %RDI.i56, align 8
- 155 %99 = load i64, i64* %RBP.i, align 8
- 156 %100 = add i64 %99, -32
- 157 store i64 %100, i64* %RSI.i53, align 8
- 158 %101 = load i64, i64* %RAX.i29, align 8
- 159 store i64 %101, i64* %RDX.i, align 8
- 160 %102 = add i64 %98, -6371
- 161 %103 = add i64 %98, 22
- 162 %104 = load i64, i64* %6, align 8
- 163 %105 = add i64 %104, -8
- 164 %106 = inttoptr i64 %105 to i64*
- 165 store i64 %103, i64* %106, align 8
- 166 store i64 %105, i64* %6, align 8
- 167 store i64 %102, i64* %3, align 8
- 168 %call2_402a54 = tail call %struct.Memory* @\"sub_401160._ZN3$_0clERK6DoubleS2_\"(%struct.State* nonnull %0, i64 %102, %struct.Memory* %2)
- 169 %107 = load i64, i64* %RBP.i, align 8
- 170 %108 = add i64 %107, -40
- 171 %109 = load i64, i64* %3, align 8
- 172 %110 = add i64 %109, 5
- 173 store i64 %110, i64* %3, align 8
- 174 %111 = load i64, i64* %54, align 1
- 175 %112 = inttoptr i64 %108 to i64*
- 176 store i64 %111, i64* %112, align 8
- 177 %113 = load i64, i64* %RBP.i, align 8
- 178 %114 = add i64 %113, -40
- 179 %115 = load i64, i64* %3, align 8
- 180 %116 = add i64 %115, 4
- 181 store i64 %116, i64* %3, align 8
- 182 %117 = inttoptr i64 %114 to i64*
- 183 %118 = load i64, i64* %117, align 8
- 184 store i64 %118, i64* %RAX.i29, align 8
- 185 %119 = add i64 %113, -32
- 186 %120 = add i64 %115, 8
- 187 store i64 %120, i64* %3, align 8
- 188 %121 = inttoptr i64 %119 to i64*
- 189 store i64 %118, i64* %121, align 8
- 190 %122 = load i64, i64* %3, align 8
- 191 %123 = add i64 %122, -81
- 192 store i64 %123, i64* %3, align 8
- 193 \<badref\> = br label %block_.L_402a15
- 194 %124 = add i64 %79, -32
- 195 %125 = add i64 %78, 4
- 196 store i64 %125, i64* %3, align 8
- 197 %126 = inttoptr i64 %124 to i64*
- 198 %127 = load i64, i64* %126, align 8
- 199 store i64 %127, i64* %RAX.i29, align 8
- 200 %128 = add i64 %79, -8
- 201 %129 = add i64 %78, 8
- 202 store i64 %129, i64* %3, align 8
- 203 %130 = inttoptr i64 %128 to i64*
- 204 store i64 %127, i64* %130, align 8
- 205 %131 = load i64, i64* %RBP.i, align 8
- 206 %132 = add i64 %131, -8
- 207 %133 = load i64, i64* %3, align 8
- 208 %134 = add i64 %133, 5
- 209 store i64 %134, i64* %3, align 8
- 210 %135 = inttoptr i64 %132 to i64*
- 211 %136 = load i64, i64* %135, align 8
- 212 store i64 %136, i64* %54, align 1
- 213 %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 214 %138 = bitcast i64* %137 to double*
- 215 store double 0.000000e+00, double* %138, align 1
- 216 %139 = load i64, i64* %6, align 8
- 217 %140 = add i64 %139, 48
- 218 store i64 %140, i64* %6, align 8
- 219 %141 = icmp ugt i64 %139, -49
- 220 %142 = zext i1 %141 to i8
- 221 store i8 %142, i8* %14, align 1
- 222 %143 = trunc i64 %140 to i32
- 223 %144 = and i32 %143, 255
- 224 %145 = tail call i32 @llvm.ctpop.i32(i32 %144)
- 225 %146 = trunc i32 %145 to i8
- 226 %147 = and i8 %146, 1
- 227 %148 = xor i8 %147, 1
- 228 store i8 %148, i8* %21, align 1
- 229 %149 = xor i64 %139, 16
- 230 %150 = xor i64 %149, %140
- 231 %151 = lshr i64 %150, 4
- 232 %152 = trunc i64 %151 to i8
- 233 %153 = and i8 %152, 1
- 234 store i8 %153, i8* %27, align 1
- 235 %154 = icmp eq i64 %140, 0
- 236 %155 = zext i1 %154 to i8
- 237 store i8 %155, i8* %30, align 1
- 238 %156 = lshr i64 %140, 63
- 239 %157 = trunc i64 %156 to i8
- 240 store i8 %157, i8* %33, align 1
- 241 %158 = lshr i64 %139, 63
- 242 %159 = xor i64 %156, %158
- 243 %160 = add nuw nsw i64 %159, %156
- 244 %161 = icmp eq i64 %160, 2
- 245 %162 = zext i1 %161 to i8
- 246 store i8 %162, i8* %39, align 1
- 247 %163 = add i64 %133, 10
- 248 store i64 %163, i64* %3, align 8
- 249 %164 = add i64 %139, 56
- 250 %165 = inttoptr i64 %140 to i64*
- 251 %166 = load i64, i64* %165, align 8
- 252 store i64 %166, i64* %RBP.i, align 8
- 253 store i64 %164, i64* %6, align 8
- 254 %167 = add i64 %133, 11
- 255 store i64 %167, i64* %3, align 8
- 256 %168 = inttoptr i64 %164 to i64*
- 257 %169 = load i64, i64* %168, align 8
- 258 store i64 %169, i64* %3, align 8
- 259 %170 = add i64 %139, 64
- 260 store i64 %170, i64* %6, align 8
- 261 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fac9d7d10d0>, {0: {0}, 1: {8}, 2: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 3: {10}, 4: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 5: {7}, 6: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 7: {128, 196, 231, 13, 215, 88, 122}, 8: {256, 66, 132, 197, 232, 250, 75, 172, 14, 209, 178, 243, 119, 216, 89, 58, 125}, 9: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 10: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 11: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 12: {18}, 13: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 14: {20}, 15: {167, 40, 105, 142, 51, 21, 158}, 16: {22}, 17: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 18: {161, 35, 99, 44, 108, 144, 147, 24, 154, 27}, 19: {25, 145, 97}, 20: {98, 201, 236, 146, 26, 220, 93}, 21: {161, 35, 99, 44, 108, 144, 147, 24, 154, 27}, 22: {100, 36, 148, 155, 28}, 23: {101, 29, 149}, 24: {30}, 25: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 26: {32, 151}, 27: {48, 33, 164, 152}, 28: {153, 34}, 29: {161, 35, 99, 44, 108, 144, 147, 24, 154, 27}, 30: {100, 36, 148, 155, 28}, 31: {37}, 32: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 33: {104, 157, 39}, 34: {167, 40, 105, 142, 51, 21, 158}, 35: {41}, 36: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 37: {160, 43, 163, 47}, 38: {161, 35, 99, 44, 108, 144, 147, 24, 154, 27}, 39: {45}, 40: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 41: {160, 43, 163, 47}, 42: {48, 33, 164, 152}, 43: {112, 49, 165}, 44: {50, 166}, 45: {167, 40, 105, 142, 51, 21, 158}, 46: {52}, 47: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 48: {6}, 49: {83, 61, 54}, 50: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 51: {56, 194, 176}, 52: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 53: {256, 66, 132, 197, 232, 250, 75, 172, 14, 209, 178, 243, 119, 216, 89, 58, 125}, 54: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 55: {5}, 56: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 57: {83, 61, 54}, 58: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 59: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 60: {64, 248, 117}, 61: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 62: {256, 66, 132, 197, 232, 250, 75, 172, 14, 209, 178, 243, 119, 216, 89, 58, 125}, 63: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 64: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 65: {224, 253, 116, 69}, 66: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 67: {240, 130, 213, 71}, 68: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 69: {73}, 70: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 71: {256, 66, 132, 197, 232, 250, 75, 172, 14, 209, 178, 243, 119, 216, 89, 58, 125}, 72: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 73: {1}, 74: {136, 2}, 75: {3}, 76: {4}, 77: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 78: {261, 78}, 79: {79}, 80: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 81: {184, 81}, 82: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 83: {83, 61, 54}, 84: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 85: {85}, 86: {86}, 87: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 88: {128, 196, 231, 13, 215, 88, 122}, 89: {256, 66, 132, 197, 232, 250, 75, 172, 14, 209, 178, 243, 119, 216, 89, 58, 125}, 90: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 91: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 92: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 93: {98, 201, 236, 146, 26, 220, 93}, 94: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 95: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 96: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 97: {25, 145, 97}, 98: {98, 201, 236, 146, 26, 220, 93}, 99: {161, 35, 99, 44, 108, 144, 147, 24, 154, 27}, 100: {100, 36, 148, 155, 28}, 101: {101, 29, 149}, 102: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 103: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 104: {104, 157, 39}, 105: {167, 40, 105, 142, 51, 21, 158}, 106: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 107: {107}, 108: {161, 35, 99, 44, 108, 144, 147, 24, 154, 27}, 109: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 110: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 111: {111}, 112: {112, 49, 165}, 113: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 114: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 115: {115}, 116: {184, 81}, 117: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 118: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 119: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 120: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 121: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 122: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 123: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 124: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 125: {193}, 126: {56, 194, 176}, 127: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 128: {128, 196, 231, 13, 215, 88, 122}, 129: {256, 66, 132, 197, 232, 250, 75, 172, 14, 209, 178, 243, 119, 216, 89, 58, 125}, 130: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 131: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 132: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 133: {98, 201, 236, 146, 26, 220, 93}, 134: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 135: {203}, 136: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 137: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 138: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 139: {123, 254, 207}, 140: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 141: {256, 66, 132, 197, 232, 250, 75, 172, 14, 209, 178, 243, 119, 216, 89, 58, 125}, 142: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 143: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 144: {212}, 145: {240, 130, 213, 71}, 146: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 147: {128, 196, 231, 13, 215, 88, 122}, 148: {256, 66, 132, 197, 232, 250, 75, 172, 14, 209, 178, 243, 119, 216, 89, 58, 125}, 149: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 150: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 151: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 152: {98, 201, 236, 146, 26, 220, 93}, 153: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 154: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 155: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 156: {224, 253, 116, 69}, 157: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 158: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 159: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 160: {228}, 161: {229}, 162: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 163: {128, 196, 231, 13, 215, 88, 122}, 164: {256, 66, 132, 197, 232, 250, 75, 172, 14, 209, 178, 243, 119, 216, 89, 58, 125}, 165: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 166: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 167: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 168: {98, 201, 236, 146, 26, 220, 93}, 169: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 170: {238, 246}, 171: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 172: {240, 130, 213, 71}, 173: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 174: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 175: {256, 66, 132, 197, 232, 250, 75, 172, 14, 209, 178, 243, 119, 216, 89, 58, 125}, 176: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 177: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 178: {238, 246}, 179: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 180: {64, 248, 117}, 181: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 182: {256, 66, 132, 197, 232, 250, 75, 172, 14, 209, 178, 243, 119, 216, 89, 58, 125}, 183: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 184: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 185: {224, 253, 116, 69}, 186: {123, 254, 207}, 187: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 188: {256, 66, 132, 197, 232, 250, 75, 172, 14, 209, 178, 243, 119, 216, 89, 58, 125}, 189: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 190: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 191: {259}, 192: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 193: {261, 78}, 194: {224, 253, 116, 69}, 195: {64, 248, 117}, 196: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 197: {256, 66, 132, 197, 232, 250, 75, 172, 14, 209, 178, 243, 119, 216, 89, 58, 125}, 198: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 199: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 200: {128, 196, 231, 13, 215, 88, 122}, 201: {123, 254, 207}, 202: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 203: {256, 66, 132, 197, 232, 250, 75, 172, 14, 209, 178, 243, 119, 216, 89, 58, 125}, 204: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 205: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 206: {128, 196, 231, 13, 215, 88, 122}, 207: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 208: {240, 130, 213, 71}, 209: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 210: {256, 66, 132, 197, 232, 250, 75, 172, 14, 209, 178, 243, 119, 216, 89, 58, 125}, 211: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 212: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 213: {135}, 214: {136, 2}, 215: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 216: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 217: {139}, 218: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 219: {141}, 220: {167, 40, 105, 142, 51, 21, 158}, 221: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 222: {161, 35, 99, 44, 108, 144, 147, 24, 154, 27}, 223: {25, 145, 97}, 224: {98, 201, 236, 146, 26, 220, 93}, 225: {161, 35, 99, 44, 108, 144, 147, 24, 154, 27}, 226: {100, 36, 148, 155, 28}, 227: {101, 29, 149}, 228: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 229: {32, 151}, 230: {48, 33, 164, 152}, 231: {153, 34}, 232: {161, 35, 99, 44, 108, 144, 147, 24, 154, 27}, 233: {100, 36, 148, 155, 28}, 234: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 235: {104, 157, 39}, 236: {167, 40, 105, 142, 51, 21, 158}, 237: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 238: {160, 43, 163, 47}, 239: {161, 35, 99, 44, 108, 144, 147, 24, 154, 27}, 240: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 241: {160, 43, 163, 47}, 242: {48, 33, 164, 152}, 243: {112, 49, 165}, 244: {50, 166}, 245: {167, 40, 105, 142, 51, 21, 158}, 246: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 247: {169}, 248: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 249: {171}, 250: {256, 66, 132, 197, 232, 250, 75, 172, 14, 209, 178, 243, 119, 216, 89, 58, 125}, 251: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 252: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 253: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 254: {56, 194, 176}, 255: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 256: {256, 66, 132, 197, 232, 250, 75, 172, 14, 209, 178, 243, 119, 216, 89, 58, 125}, 257: {129, 258, 133, 9, 138, 12, 16, 173, 179, 55, 60, 62, 63, 195, 68, 70, 74, 202, 204, 77, 206, 80, 211, 214, 87, 221, 94, 95, 223, 226, 230, 237, 239, 114, 242, 245, 247, 120, 251, 127}, 258: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 259: {181}, 260: {257, 131, 260, 134, 137, 11, 140, 15, 143, 17, 19, 150, 23, 156, 31, 159, 162, 38, 168, 42, 170, 46, 174, 175, 177, 180, 53, 182, 57, 185, 59, 186, 187, 188, 189, 190, 65, 191, 67, 192, 198, 199, 72, 200, 76, 205, 208, 82, 210, 84, 217, 90, 91, 92, 218, 219, 222, 96, 225, 227, 249, 102, 103, 233, 106, 234, 235, 109, 110, 113, 241, 244, 252, 118, 121, 124, 126, 255}, 261: {183}})
Equivalent! frozenset({56, 176}) {51, 254}
Equivalent! frozenset({57, 177}) {52, 255}
Equivalent! frozenset({64, 248}) {180, 60}
Equivalent! frozenset({65, 249}) {61, 181}
Equivalent! frozenset({240, 130, 71}) {208, 67, 172}
Equivalent! frozenset({72, 241, 131}) {209, 68, 173}
Equivalent! frozenset({261, 78}) {193, 78}
Equivalent! frozenset({80, 114}) {80, 114}
Equivalent! frozenset({184, 81}) {81, 116}
Equivalent! frozenset({185, 82}) {82, 117}
Equivalent! frozenset({195, 87, 214, 230}) {162, 146, 127, 87}
Equivalent! frozenset({88, 215, 196, 231}) {88, 163, 147, 128}
Equivalent! frozenset({218, 234, 91, 199}) {91, 131, 166, 150}
Equivalent! frozenset({254, 207}) {186, 139}
Equivalent! frozenset({208, 255}) {187, 140}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fac9d7d10d0>, {0: {0}, 1: {8}, 2: {9}, 3: {10}, 4: {11}, 5: {7}, 6: {12}, 7: {13}, 8: {14}, 9: {15}, 10: {16, 129}, 11: {17}, 12: {18}, 13: {19}, 14: {20}, 15: {21}, 16: {22}, 17: {23}, 18: {24}, 19: {25}, 20: {26}, 21: {27}, 22: {28}, 23: {29}, 24: {30}, 25: {31}, 26: {32}, 27: {33}, 28: {34}, 29: {35}, 30: {36}, 31: {37}, 32: {38}, 33: {39}, 34: {40}, 35: {41}, 36: {42}, 37: {43}, 38: {44}, 39: {45}, 40: {46}, 41: {47}, 42: {48}, 43: {49}, 44: {50}, 45: {51}, 46: {52}, 47: {53}, 48: {6}, 49: {54}, 50: {55}, 51: {56}, 52: {57}, 53: {58}, 54: {59}, 55: {5}, 56: {60}, 57: {61}, 58: {62}, 59: {63, 247}, 60: {248}, 61: {65}, 62: {66}, 63: {67}, 64: {68}, 65: {69}, 66: {129, 70, 239}, 67: {130}, 68: {241}, 69: {73}, 70: {74}, 71: {75}, 72: {76}, 73: {1}, 74: {2}, 75: {3}, 76: {4}, 77: {77}, 78: {78}, 79: {79}, 80: {80}, 81: {184}, 82: {185}, 83: {83}, 84: {84}, 85: {85}, 86: {86}, 87: {230}, 88: {88}, 89: {89}, 90: {90}, 91: {218}, 92: {92}, 93: {93}, 94: {94}, 95: {95}, 96: {96, 187, 23, 143}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {192, 156, 38, 103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {108}, 109: {109}, 110: {168, 53, 110, 191}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {115}, 116: {81}, 117: {82}, 118: {225, 186, 84}, 119: {96, 187, 23, 143}, 120: {102, 188, 150, 31}, 121: {106, 42, 189, 159}, 122: {46, 162, 109, 190}, 123: {168, 53, 110, 191}, 124: {192, 156, 38, 103}, 125: {193}, 126: {194}, 127: {214}, 128: {231}, 129: {197}, 130: {198}, 131: {234}, 132: {200}, 133: {201}, 134: {202}, 135: {203}, 136: {204, 247}, 137: {205}, 138: {206}, 139: {207}, 140: {255}, 141: {209}, 142: {210}, 143: {211}, 144: {212}, 145: {213}, 146: {87}, 147: {196}, 148: {216}, 149: {217}, 150: {199}, 151: {219}, 152: {220}, 153: {221}, 154: {185, 82, 205, 222}, 155: {223}, 156: {224}, 157: {225}, 158: {226}, 159: {227}, 160: {228}, 161: {229}, 162: {195}, 163: {215}, 164: {232}, 165: {233}, 166: {91}, 167: {235}, 168: {236}, 169: {237}, 170: {238}, 171: {129, 70, 239}, 172: {71}, 173: {131}, 174: {242}, 175: {243}, 176: {244}, 177: {245}, 178: {246}, 179: {204, 63, 247}, 180: {64}, 181: {249}, 182: {250}, 183: {251}, 184: {252}, 185: {253}, 186: {254}, 187: {208}, 188: {256}, 189: {257}, 190: {258}, 191: {259}, 192: {260}, 193: {261}, 194: {116}, 195: {117}, 196: {118}, 197: {119}, 198: {120}, 199: {121}, 200: {122}, 201: {123}, 202: {124}, 203: {125}, 204: {126}, 205: {127}, 206: {128}, 207: {16, 129, 70, 239}, 208: {240}, 209: {72}, 210: {132}, 211: {133}, 212: {134}, 213: {135}, 214: {136}, 215: {137}, 216: {138}, 217: {139}, 218: {140}, 219: {141}, 220: {142}, 221: {143}, 222: {144}, 223: {145}, 224: {146}, 225: {147}, 226: {148}, 227: {149}, 228: {150}, 229: {151}, 230: {152}, 231: {153}, 232: {154}, 233: {155}, 234: {156}, 235: {157}, 236: {158}, 237: {159}, 238: {160}, 239: {161}, 240: {162}, 241: {163}, 242: {164}, 243: {165}, 244: {166}, 245: {167}, 246: {168}, 247: {169}, 248: {170}, 249: {171}, 250: {172}, 251: {173}, 252: {174}, 253: {175}, 254: {176}, 255: {177}, 256: {178}, 257: {179}, 258: {180}, 259: {181}, 260: {182}, 261: {183}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
MORE 10 POT: 2
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 xor xor
EXACT 28 lshr lshr
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 getelementptr getelementptr
EXACT 32 store store
EXACT 33 icmp icmp
EXACT 34 zext zext
EXACT 35 getelementptr getelementptr
EXACT 36 store store
EXACT 37 lshr lshr
EXACT 38 trunc trunc
EXACT 39 getelementptr getelementptr
EXACT 40 store store
EXACT 41 lshr lshr
EXACT 42 xor xor
EXACT 43 add add
EXACT 44 icmp icmp
EXACT 45 zext zext
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 getelementptr getelementptr
EXACT 49 add add
EXACT 50 load load
EXACT 51 add add
EXACT 52 store store
EXACT 53 inttoptr inttoptr
EXACT 54 store store
EXACT 55 getelementptr getelementptr
EXACT 56 load load
EXACT 57 add add
EXACT 58 load load
MORE 59 POT: 2
EXACT 60 add add
EXACT 61 store store
EXACT 62 inttoptr inttoptr
EXACT 63 store store
EXACT 64 load load
EXACT 65 add add
MORE 66 POT: 3
EXACT 67 add add
EXACT 68 store store
EXACT 69 getelementptr getelementptr
EXACT 70 load load
EXACT 71 inttoptr inttoptr
EXACT 72 store store
EXACT 73 getelementptr getelementptr
EXACT 74 bitcast bitcast
EXACT 75 getelementptr getelementptr
EXACT 76 getelementptr getelementptr
EXACT 77 load load
EXACT 78 br br
EXACT 79 phi phi
EXACT 80 load load
EXACT 81 add add
EXACT 82 store store
EXACT 83 add add
EXACT 84 store store
EXACT 85 add add
EXACT 86 add add
EXACT 87 load load
EXACT 88 add add
EXACT 89 inttoptr inttoptr
EXACT 90 store store
EXACT 91 store store
EXACT 92 store store
EXACT 93 tail tail
EXACT 94 load load
EXACT 95 load load
MORE 96 POT: 4
EXACT 97 and and
EXACT 98 tail tail
EXACT 99 trunc trunc
EXACT 100 and and
EXACT 101 xor xor
EXACT 102 store store
MORE 103 POT: 4
EXACT 104 icmp icmp
EXACT 105 zext zext
EXACT 106 store store
EXACT 107 lshr lshr
EXACT 108 trunc trunc
EXACT 109 store store
MORE 110 POT: 4
EXACT 111 select select
EXACT 112 add add
EXACT 113 store store
EXACT 114 load load
EXACT 115 br br
EXACT 116 add add
EXACT 117 store store
MORE 118 POT: 3
MORE 119 POT: 4
MORE 120 POT: 4
MORE 121 POT: 4
MORE 122 POT: 4
MORE 123 POT: 4
MORE 124 POT: 4
EXACT 125 add add
EXACT 126 add add
EXACT 127 load load
EXACT 128 add add
EXACT 129 inttoptr inttoptr
EXACT 130 store store
EXACT 131 store store
EXACT 132 store store
EXACT 133 tail tail
EXACT 134 load load
EXACT 135 add add
MORE 136 POT: 2
EXACT 137 store store
EXACT 138 load load
EXACT 139 add add
EXACT 140 store store
EXACT 141 inttoptr inttoptr
EXACT 142 store store
EXACT 143 load load
EXACT 144 add add
EXACT 145 add add
EXACT 146 load load
EXACT 147 add add
EXACT 148 inttoptr inttoptr
EXACT 149 store store
EXACT 150 store store
EXACT 151 store store
EXACT 152 tail tail
EXACT 153 load load
MORE 154 POT: 4
EXACT 155 load load
EXACT 156 add add
EXACT 157 store store
EXACT 158 load load
EXACT 159 store store
EXACT 160 add add
EXACT 161 add add
EXACT 162 load load
EXACT 163 add add
EXACT 164 inttoptr inttoptr
EXACT 165 store store
EXACT 166 store store
EXACT 167 store store
EXACT 168 tail tail
EXACT 169 load load
EXACT 170 add add
MORE 171 POT: 3
EXACT 172 add add
EXACT 173 store store
EXACT 174 load load
EXACT 175 inttoptr inttoptr
EXACT 176 store store
EXACT 177 load load
EXACT 178 add add
MORE 179 POT: 3
EXACT 180 add add
EXACT 181 store store
EXACT 182 inttoptr inttoptr
EXACT 183 load load
EXACT 184 store store
EXACT 185 add add
EXACT 186 add add
EXACT 187 store store
EXACT 188 inttoptr inttoptr
EXACT 189 store store
EXACT 190 load load
EXACT 191 add add
EXACT 192 store store
EXACT 193 br br
EXACT 194 add add
EXACT 195 add add
EXACT 196 store store
EXACT 197 inttoptr inttoptr
EXACT 198 load load
EXACT 199 store store
EXACT 200 add add
EXACT 201 add add
EXACT 202 store store
EXACT 203 inttoptr inttoptr
EXACT 204 store store
EXACT 205 load load
EXACT 206 add add
MORE 207 POT: 4
EXACT 208 add add
EXACT 209 store store
EXACT 210 inttoptr inttoptr
EXACT 211 load load
EXACT 212 store store
EXACT 213 getelementptr getelementptr
EXACT 214 bitcast bitcast
EXACT 215 store store
EXACT 216 load load
EXACT 217 add add
EXACT 218 store store
EXACT 219 icmp icmp
EXACT 220 zext zext
EXACT 221 store store
EXACT 222 trunc trunc
EXACT 223 and and
EXACT 224 tail tail
EXACT 225 trunc trunc
EXACT 226 and and
EXACT 227 xor xor
EXACT 228 store store
EXACT 229 xor xor
EXACT 230 xor xor
EXACT 231 lshr lshr
EXACT 232 trunc trunc
EXACT 233 and and
EXACT 234 store store
EXACT 235 icmp icmp
EXACT 236 zext zext
EXACT 237 store store
EXACT 238 lshr lshr
EXACT 239 trunc trunc
EXACT 240 store store
EXACT 241 lshr lshr
EXACT 242 xor xor
EXACT 243 add add
EXACT 244 icmp icmp
EXACT 245 zext zext
EXACT 246 store store
EXACT 247 add add
EXACT 248 store store
EXACT 249 add add
EXACT 250 inttoptr inttoptr
EXACT 251 load load
EXACT 252 store store
EXACT 253 store store
EXACT 254 add add
EXACT 255 store store
EXACT 256 inttoptr inttoptr
EXACT 257 load load
EXACT 258 store store
EXACT 259 add add
EXACT 260 store store
EXACT 261 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %EAX = bitcast %union.anon* %3 to i32*
- 3 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 4 %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 5 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 6 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 7 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 8 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 9 %4 = load i64, i64* %RBP, align 8
- 10 %5 = add i64 %1, 1
- 11 store i64 %5, i64* %PC, align 8
- 12 %6 = load i64, i64* %RSP, align 8
- 13 %7 = add i64 %6, -8
- 14 %8 = inttoptr i64 %7 to i64*
- 15 store i64 %4, i64* %8, align 8
- 16 %9 = load i64, i64* %PC, align 8
- 17 store i64 %7, i64* %RBP, align 8
- 18 %10 = add i64 %6, -56
- 19 store i64 %10, i64* %RSP, align 8
- 20 %11 = icmp ult i64 %7, 48
- 21 %12 = zext i1 %11 to i8
- 22 %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 23 store i8 %12, i8* %13, align 1
- 24 %14 = trunc i64 %10 to i32
- 25 %15 = and i32 %14, 255
- 26 %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #12
- 27 %17 = trunc i32 %16 to i8
- 28 %18 = and i8 %17, 1
- 29 %19 = xor i8 %18, 1
- 30 %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 31 store i8 %19, i8* %20, align 1
- 32 %21 = xor i64 %7, 16
- 33 %22 = xor i64 %21, %10
- 34 %23 = lshr i64 %22, 4
- 35 %24 = trunc i64 %23 to i8
- 36 %25 = and i8 %24, 1
- 37 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 38 store i8 %25, i8* %26, align 1
- 39 %27 = icmp eq i64 %10, 0
- 40 %28 = zext i1 %27 to i8
- 41 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 42 store i8 %28, i8* %29, align 1
- 43 %30 = lshr i64 %10, 63
- 44 %31 = trunc i64 %30 to i8
- 45 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 46 store i8 %31, i8* %32, align 1
- 47 %33 = lshr i64 %7, 63
- 48 %34 = xor i64 %30, %33
- 49 %35 = add nuw nsw i64 %34, %33
- 50 %36 = icmp eq i64 %35, 2
- 51 %37 = zext i1 %36 to i8
- 52 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 53 store i8 %37, i8* %38, align 1
- 54 %39 = add i64 %6, -24
- 55 %40 = load i64, i64* %RDI, align 8
- 56 %41 = add i64 %9, 11
- 57 store i64 %41, i64* %PC, align 8
- 58 %42 = inttoptr i64 %39 to i64*
- 59 store i64 %40, i64* %42, align 8
- 60 %43 = load i64, i64* %RBP, align 8
- 61 %44 = add i64 %43, -24
- 62 %45 = load i64, i64* %RSI, align 8
- 63 %46 = load i64, i64* %PC, align 8
- 64 %47 = add i64 %46, 4
- 65 store i64 %47, i64* %PC, align 8
- 66 %48 = inttoptr i64 %44 to i64*
- 67 store i64 %45, i64* %48, align 8
- 68 %49 = load i64, i64* %RBP, align 8
- 69 %50 = add i64 %49, -32
- 70 %51 = load i64, i64* %PC, align 8
- 71 %52 = add i64 %51, 5
- 72 store i64 %52, i64* %PC, align 8
- 73 %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 74 %54 = load i64, i64* %53, align 1
- 75 %55 = inttoptr i64 %50 to i64*
- 76 store i64 %54, i64* %55, align 8
- 77 %.pre = load i64, i64* %PC, align 8
- 78 \<badref\> = br label %block_402a15
- 79 %56 = phi i64 [ %172, %block_402a2b ], [ %.pre, %block_402a00 ]
- 80 %57 = load i64, i64* %RBP, align 8
- 81 %58 = add i64 %57, -16
- 82 store i64 %58, i64* %RDI, align 8
- 83 %59 = add i64 %57, -24
- 84 store i64 %59, i64* %RSI, align 8
- 85 %60 = add i64 %56, 107
- 86 %61 = add i64 %56, 13
- 87 %62 = load i64, i64* %RSP, align 8
- 88 %63 = add i64 %62, -8
- 89 %64 = inttoptr i64 %63 to i64*
- 90 store i64 %61, i64* %64, align 8
- 91 store i64 %63, i64* %RSP, align 8
- 92 store i64 %60, i64* %PC, align 8
- 93 %65 = tail call %struct.Memory* @sub_402a80__ZneI14Double_pointerEiRKT_S3__renamed_(%struct.State* nonnull %0, i64 %60, %struct.Memory* %2)
- 94 %66 = load i32, i32* %EAX, align 4
- 95 %67 = load i64, i64* %PC, align 8
- 96 store i8 0, i8* %13, align 1
- 97 %68 = and i32 %66, 255
- 98 %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #12
- 99 %70 = trunc i32 %69 to i8
- 100 %71 = and i8 %70, 1
- 101 %72 = xor i8 %71, 1
- 102 store i8 %72, i8* %20, align 1
- 103 store i8 0, i8* %26, align 1
- 104 %73 = icmp eq i32 %66, 0
- 105 %74 = zext i1 %73 to i8
- 106 store i8 %74, i8* %29, align 1
- 107 %75 = lshr i32 %66, 31
- 108 %76 = trunc i32 %75 to i8
- 109 store i8 %76, i8* %32, align 1
- 110 store i8 0, i8* %38, align 1
- 111 %.v = select i1 %73, i64 73, i64 9
- 112 %77 = add i64 %67, %.v
- 113 store i64 %77, i64* %PC, align 8
- 114 %78 = load i64, i64* %RBP, align 8
- 115 \<badref\> = br i1 %73, label %block_402a6b, label %block_402a2b
- 116 %79 = add i64 %78, -32
- 117 %80 = add i64 %77, 4
- 118 store i64 %80, i64* %PC, align 8
- 119 %81 = inttoptr i64 %79 to i64*
- 120 %82 = load i64, i64* %81, align 8
- 121 store i64 %82, i64* %RAX, align 8
- 122 %83 = add i64 %78, -8
- 123 %84 = add i64 %77, 8
- 124 store i64 %84, i64* %PC, align 8
- 125 %85 = inttoptr i64 %83 to i64*
- 126 store i64 %82, i64* %85, align 8
- 127 %86 = load i64, i64* %RBP, align 8
- 128 %87 = add i64 %86, -8
- 129 %88 = load i64, i64* %PC, align 8
- 130 %89 = add i64 %88, 5
- 131 store i64 %89, i64* %PC, align 8
- 132 %90 = inttoptr i64 %87 to i64*
- 133 %91 = load i64, i64* %90, align 8
- 134 store i64 %91, i64* %53, align 1
- 135 %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 136 %93 = bitcast i64* %92 to double*
- 137 store double 0.000000e+00, double* %93, align 1
- 138 %94 = load i64, i64* %RSP, align 8
- 139 %95 = add i64 %94, 48
- 140 store i64 %95, i64* %RSP, align 8
- 141 %96 = icmp ugt i64 %94, -49
- 142 %97 = zext i1 %96 to i8
- 143 store i8 %97, i8* %13, align 1
- 144 %98 = trunc i64 %95 to i32
- 145 %99 = and i32 %98, 255
- 146 %100 = tail call i32 @llvm.ctpop.i32(i32 %99) #12
- 147 %101 = trunc i32 %100 to i8
- 148 %102 = and i8 %101, 1
- 149 %103 = xor i8 %102, 1
- 150 store i8 %103, i8* %20, align 1
- 151 %104 = xor i64 %94, 16
- 152 %105 = xor i64 %104, %95
- 153 %106 = lshr i64 %105, 4
- 154 %107 = trunc i64 %106 to i8
- 155 %108 = and i8 %107, 1
- 156 store i8 %108, i8* %26, align 1
- 157 %109 = icmp eq i64 %95, 0
- 158 %110 = zext i1 %109 to i8
- 159 store i8 %110, i8* %29, align 1
- 160 %111 = lshr i64 %95, 63
- 161 %112 = trunc i64 %111 to i8
- 162 store i8 %112, i8* %32, align 1
- 163 %113 = lshr i64 %94, 63
- 164 %114 = xor i64 %111, %113
- 165 %115 = add nuw nsw i64 %114, %111
- 166 %116 = icmp eq i64 %115, 2
- 167 %117 = zext i1 %116 to i8
- 168 store i8 %117, i8* %38, align 1
- 169 %118 = add i64 %88, 10
- 170 store i64 %118, i64* %PC, align 8
- 171 %119 = add i64 %94, 56
- 172 %120 = inttoptr i64 %95 to i64*
- 173 %121 = load i64, i64* %120, align 8
- 174 store i64 %121, i64* %RBP, align 8
- 175 store i64 %119, i64* %RSP, align 8
- 176 %122 = add i64 %88, 11
- 177 store i64 %122, i64* %PC, align 8
- 178 %123 = inttoptr i64 %119 to i64*
- 179 %124 = load i64, i64* %123, align 8
- 180 store i64 %124, i64* %PC, align 8
- 181 %125 = add i64 %94, 64
- 182 store i64 %125, i64* %RSP, align 8
- 183 \<badref\> = ret %struct.Memory* %2
- 184 %126 = add i64 %78, -16
- 185 store i64 %126, i64* %RDI, align 8
- 186 store i64 0, i64* %RSI, align 8
- 187 store i8 0, i8* %13, align 1
- 188 store i8 1, i8* %20, align 1
- 189 store i8 1, i8* %29, align 1
- 190 store i8 0, i8* %32, align 1
- 191 store i8 0, i8* %38, align 1
- 192 store i8 0, i8* %26, align 1
- 193 %127 = add i64 %77, 149
- 194 %128 = add i64 %77, 11
- 195 %129 = load i64, i64* %RSP, align 8
- 196 %130 = add i64 %129, -8
- 197 %131 = inttoptr i64 %130 to i64*
- 198 store i64 %128, i64* %131, align 8
- 199 store i64 %130, i64* %RSP, align 8
- 200 store i64 %127, i64* %PC, align 8
- 201 %132 = tail call %struct.Memory* @sub_402ac0__ZN14Double_pointerppEi_renamed_(%struct.State* nonnull %0, i64 %127, %struct.Memory* %2)
- 202 %133 = load i64, i64* %RBP, align 8
- 203 %134 = add i64 %133, -48
- 204 %135 = load i64, i64* %PC, align 8
- 205 store i64 %134, i64* %RDI, align 8
- 206 %136 = load i64, i64* %RAX, align 8
- 207 %137 = add i64 %135, 8
- 208 store i64 %137, i64* %PC, align 8
- 209 %138 = inttoptr i64 %134 to i64*
- 210 store i64 %136, i64* %138, align 8
- 211 %139 = load i64, i64* %PC, align 8
- 212 %140 = add i64 %139, -3134
- 213 %141 = add i64 %139, 5
- 214 %142 = load i64, i64* %RSP, align 8
- 215 %143 = add i64 %142, -8
- 216 %144 = inttoptr i64 %143 to i64*
- 217 store i64 %141, i64* %144, align 8
- 218 store i64 %143, i64* %RSP, align 8
- 219 store i64 %140, i64* %PC, align 8
- 220 %145 = tail call %struct.Memory* @sub_401e00__ZNK14Double_pointerdeEv_renamed_(%struct.State* nonnull %0, i64 %140, %struct.Memory* %2)
- 221 %146 = load i64, i64* %PC, align 8
- 222 store i64 add (i64 ptrtoint (%rrDPe_type* @rrDPe to i64), i64 8), i64* %RDI, align 8
- 223 %147 = load i64, i64* %RBP, align 8
- 224 %148 = add i64 %147, -32
- 225 store i64 %148, i64* %RSI, align 8
- 226 %149 = load i64, i64* %RAX, align 8
- 227 store i64 %149, i64* %RDX, align 8
- 228 %150 = add i64 %146, -6371
- 229 %151 = add i64 %146, 22
- 230 %152 = load i64, i64* %RSP, align 8
- 231 %153 = add i64 %152, -8
- 232 %154 = inttoptr i64 %153 to i64*
- 233 store i64 %151, i64* %154, align 8
- 234 store i64 %153, i64* %RSP, align 8
- 235 store i64 %150, i64* %PC, align 8
- 236 %155 = tail call %struct.Memory* @sub_401160__ZN3__0clERK6DoubleS2__renamed_(%struct.State* nonnull %0, i64 %150, %struct.Memory* %2)
- 237 %156 = load i64, i64* %RBP, align 8
- 238 %157 = add i64 %156, -40
- 239 %158 = load i64, i64* %PC, align 8
- 240 %159 = add i64 %158, 5
- 241 store i64 %159, i64* %PC, align 8
- 242 %160 = load i64, i64* %53, align 1
- 243 %161 = inttoptr i64 %157 to i64*
- 244 store i64 %160, i64* %161, align 8
- 245 %162 = load i64, i64* %RBP, align 8
- 246 %163 = add i64 %162, -40
- 247 %164 = load i64, i64* %PC, align 8
- 248 %165 = add i64 %164, 4
- 249 store i64 %165, i64* %PC, align 8
- 250 %166 = inttoptr i64 %163 to i64*
- 251 %167 = load i64, i64* %166, align 8
- 252 store i64 %167, i64* %RAX, align 8
- 253 %168 = add i64 %162, -32
- 254 %169 = add i64 %164, 8
- 255 store i64 %169, i64* %PC, align 8
- 256 %170 = inttoptr i64 %168 to i64*
- 257 store i64 %167, i64* %170, align 8
- 258 %171 = load i64, i64* %PC, align 8
- 259 %172 = add i64 %171, -81
- 260 store i64 %172, i64* %PC, align 8
- 261 \<badref\> = br label %block_402a15
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fac9d7d1268>, {0: {0}, 1: {73}, 2: {74, 214}, 3: {75}, 4: {76}, 5: {55}, 6: {48}, 7: {5}, 8: {1}, 9: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 10: {3}, 11: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 12: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 13: {128, 163, 7, 200, 206, 147, 88}, 14: {256, 129, 164, 197, 71, 8, 203, 141, 175, 210, 148, 53, 182, 89, 250, 188, 62}, 15: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 16: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 17: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 18: {12}, 19: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 20: {14}, 21: {34, 105, 236, 45, 15, 245, 220}, 22: {16}, 23: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 24: {225, 99, 38, 232, 108, 239, 18, 21, 29, 222}, 25: {97, 19, 223}, 26: {224, 98, 133, 168, 20, 152, 93}, 27: {225, 99, 38, 232, 108, 239, 18, 21, 29, 222}, 28: {226, 100, 233, 22, 30}, 29: {227, 101, 23}, 30: {24}, 31: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 32: {26, 229}, 33: {242, 42, 27, 230}, 34: {28, 231}, 35: {225, 99, 38, 232, 108, 239, 18, 21, 29, 222}, 36: {226, 100, 233, 22, 30}, 37: {31}, 38: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 39: {104, 33, 235}, 40: {34, 105, 236, 45, 15, 245, 220}, 41: {35}, 42: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 43: {41, 241, 37, 238}, 44: {225, 99, 38, 232, 108, 239, 18, 21, 29, 222}, 45: {39}, 46: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 47: {41, 241, 37, 238}, 48: {242, 42, 27, 230}, 49: {112, 43, 243}, 50: {44, 244}, 51: {34, 105, 236, 45, 15, 245, 220}, 52: {46}, 53: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 54: {49, 83, 57}, 55: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 56: {51, 126, 254}, 57: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 58: {256, 129, 164, 197, 71, 8, 203, 141, 175, 210, 148, 53, 182, 89, 250, 188, 62}, 59: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 60: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 61: {49, 83, 57}, 62: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 63: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 64: {180, 195, 60}, 65: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 66: {256, 129, 164, 197, 71, 8, 203, 141, 175, 210, 148, 53, 182, 89, 250, 188, 62}, 67: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 68: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 69: {65, 194, 185, 156}, 70: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 71: {208, 145, 67, 172}, 72: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 73: {69}, 74: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 75: {256, 129, 164, 197, 71, 8, 203, 141, 175, 210, 148, 53, 182, 89, 250, 188, 62}, 76: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 77: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 78: {193, 78}, 79: {79}, 80: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 81: {81, 116}, 82: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 83: {49, 83, 57}, 84: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 85: {85}, 86: {86}, 87: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 88: {128, 163, 7, 200, 206, 147, 88}, 89: {256, 129, 164, 197, 71, 8, 203, 141, 175, 210, 148, 53, 182, 89, 250, 188, 62}, 90: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 91: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 92: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 93: {224, 98, 133, 168, 20, 152, 93}, 94: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 95: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 96: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 97: {97, 19, 223}, 98: {224, 98, 133, 168, 20, 152, 93}, 99: {225, 99, 38, 232, 108, 239, 18, 21, 29, 222}, 100: {226, 100, 233, 22, 30}, 101: {227, 101, 23}, 102: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 103: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 104: {104, 33, 235}, 105: {34, 105, 236, 45, 15, 245, 220}, 106: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 107: {107}, 108: {225, 99, 38, 232, 108, 239, 18, 21, 29, 222}, 109: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 110: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 111: {111}, 112: {112, 43, 243}, 113: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 114: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 115: {115}, 116: {65, 194, 185, 156}, 117: {180, 195, 60}, 118: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 119: {256, 129, 164, 197, 71, 8, 203, 141, 175, 210, 148, 53, 182, 89, 250, 188, 62}, 120: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 121: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 122: {128, 163, 7, 200, 206, 147, 88}, 123: {201, 186, 139}, 124: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 125: {256, 129, 164, 197, 71, 8, 203, 141, 175, 210, 148, 53, 182, 89, 250, 188, 62}, 126: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 127: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 128: {128, 163, 7, 200, 206, 147, 88}, 129: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 130: {208, 145, 67, 172}, 131: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 132: {256, 129, 164, 197, 71, 8, 203, 141, 175, 210, 148, 53, 182, 89, 250, 188, 62}, 133: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 134: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 135: {213}, 136: {74, 214}, 137: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 138: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 139: {217}, 140: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 141: {219}, 142: {34, 105, 236, 45, 15, 245, 220}, 143: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 144: {225, 99, 38, 232, 108, 239, 18, 21, 29, 222}, 145: {97, 19, 223}, 146: {224, 98, 133, 168, 20, 152, 93}, 147: {225, 99, 38, 232, 108, 239, 18, 21, 29, 222}, 148: {226, 100, 233, 22, 30}, 149: {227, 101, 23}, 150: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 151: {26, 229}, 152: {242, 42, 27, 230}, 153: {28, 231}, 154: {225, 99, 38, 232, 108, 239, 18, 21, 29, 222}, 155: {226, 100, 233, 22, 30}, 156: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 157: {104, 33, 235}, 158: {34, 105, 236, 45, 15, 245, 220}, 159: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 160: {41, 241, 37, 238}, 161: {225, 99, 38, 232, 108, 239, 18, 21, 29, 222}, 162: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 163: {41, 241, 37, 238}, 164: {242, 42, 27, 230}, 165: {112, 43, 243}, 166: {44, 244}, 167: {34, 105, 236, 45, 15, 245, 220}, 168: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 169: {247}, 170: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 171: {249}, 172: {256, 129, 164, 197, 71, 8, 203, 141, 175, 210, 148, 53, 182, 89, 250, 188, 62}, 173: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 174: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 175: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 176: {51, 126, 254}, 177: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 178: {256, 129, 164, 197, 71, 8, 203, 141, 175, 210, 148, 53, 182, 89, 250, 188, 62}, 179: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 180: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 181: {259}, 182: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 183: {261}, 184: {81, 116}, 185: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 186: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 187: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 188: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 189: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 190: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 191: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 192: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 193: {125}, 194: {51, 126, 254}, 195: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 196: {128, 163, 7, 200, 206, 147, 88}, 197: {256, 129, 164, 197, 71, 8, 203, 141, 175, 210, 148, 53, 182, 89, 250, 188, 62}, 198: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 199: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 200: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 201: {224, 98, 133, 168, 20, 152, 93}, 202: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 203: {135}, 204: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 205: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 206: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 207: {201, 186, 139}, 208: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 209: {256, 129, 164, 197, 71, 8, 203, 141, 175, 210, 148, 53, 182, 89, 250, 188, 62}, 210: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 211: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 212: {144}, 213: {208, 145, 67, 172}, 214: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 215: {128, 163, 7, 200, 206, 147, 88}, 216: {256, 129, 164, 197, 71, 8, 203, 141, 175, 210, 148, 53, 182, 89, 250, 188, 62}, 217: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 218: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 219: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 220: {224, 98, 133, 168, 20, 152, 93}, 221: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 222: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 223: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 224: {65, 194, 185, 156}, 225: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 226: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 227: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 228: {160}, 229: {161}, 230: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 231: {128, 163, 7, 200, 206, 147, 88}, 232: {256, 129, 164, 197, 71, 8, 203, 141, 175, 210, 148, 53, 182, 89, 250, 188, 62}, 233: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 234: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 235: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 236: {224, 98, 133, 168, 20, 152, 93}, 237: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 238: {178, 170}, 239: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 240: {208, 145, 67, 172}, 241: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 242: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 243: {256, 129, 164, 197, 71, 8, 203, 141, 175, 210, 148, 53, 182, 89, 250, 188, 62}, 244: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 245: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 246: {178, 170}, 247: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 248: {180, 195, 60}, 249: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 250: {256, 129, 164, 197, 71, 8, 203, 141, 175, 210, 148, 53, 182, 89, 250, 188, 62}, 251: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 252: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 253: {65, 194, 185, 156}, 254: {201, 186, 139}, 255: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 256: {256, 129, 164, 197, 71, 8, 203, 141, 175, 210, 148, 53, 182, 89, 250, 188, 62}, 257: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 258: {257, 2, 6, 134, 136, 10, 138, 143, 146, 153, 155, 158, 162, 169, 171, 174, 177, 50, 179, 183, 56, 58, 59, 190, 64, 66, 70, 198, 77, 205, 207, 80, 211, 87, 216, 94, 95, 114, 251, 127}, 259: {191}, 260: {130, 131, 4, 132, 258, 260, 9, 137, 11, 140, 13, 142, 17, 149, 150, 151, 25, 154, 157, 159, 32, 36, 165, 166, 167, 40, 173, 47, 176, 52, 181, 54, 184, 187, 61, 189, 63, 192, 68, 196, 199, 72, 202, 204, 209, 82, 84, 212, 215, 90, 91, 92, 218, 221, 253, 96, 248, 228, 102, 103, 106, 234, 109, 110, 237, 240, 113, 252, 117, 118, 119, 120, 121, 122, 123, 124, 246, 255}, 261: {193, 78}})
Equivalent! frozenset({51, 254}) {56, 176}
Equivalent! frozenset({52, 255}) {57, 177}
Equivalent! frozenset({180, 60}) {64, 248}
Equivalent! frozenset({61, 181}) {65, 249}
Equivalent! frozenset({208, 67, 172}) {240, 130, 71}
Equivalent! frozenset({209, 68, 173}) {72, 241, 131}
Equivalent! frozenset({193, 78}) {261, 78}
Equivalent! frozenset({80, 114}) {80, 114}
Equivalent! frozenset({81, 116}) {184, 81}
Equivalent! frozenset({82, 117}) {185, 82}
Equivalent! frozenset({162, 146, 87, 127}) {195, 230, 214, 87}
Equivalent! frozenset({88, 163, 147, 128}) {88, 231, 196, 215}
Equivalent! frozenset({91, 131, 166, 150}) {234, 218, 91, 199}
Equivalent! frozenset({186, 139}) {254, 207}
Equivalent! frozenset({187, 140}) {208, 255}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fac9d7d1268>, {0: {0}, 1: {73}, 2: {74}, 3: {75}, 4: {76}, 5: {55}, 6: {48}, 7: {5}, 8: {1}, 9: {2}, 10: {3}, 11: {4}, 12: {6}, 13: {7}, 14: {8}, 15: {9}, 16: {10, 207}, 17: {11}, 18: {12}, 19: {13}, 20: {14}, 21: {15}, 22: {16}, 23: {17}, 24: {18}, 25: {19}, 26: {20}, 27: {21}, 28: {22}, 29: {23}, 30: {24}, 31: {25}, 32: {26}, 33: {27}, 34: {28}, 35: {29}, 36: {30}, 37: {31}, 38: {32}, 39: {33}, 40: {34}, 41: {35}, 42: {36}, 43: {37}, 44: {38}, 45: {39}, 46: {40}, 47: {41}, 48: {42}, 49: {43}, 50: {44}, 51: {45}, 52: {46}, 53: {47}, 54: {49}, 55: {50}, 56: {51}, 57: {52}, 58: {53}, 59: {54}, 60: {56}, 61: {57}, 62: {58}, 63: {59, 179}, 64: {180}, 65: {61}, 66: {62}, 67: {63}, 68: {64}, 69: {65}, 70: {66, 171, 207}, 71: {172}, 72: {209}, 73: {69}, 74: {70}, 75: {71}, 76: {72}, 77: {77}, 78: {78}, 79: {79}, 80: {80}, 81: {116}, 82: {117}, 83: {83}, 84: {84}, 85: {85}, 86: {86}, 87: {127}, 88: {88}, 89: {89}, 90: {90}, 91: {166}, 92: {92}, 93: {93}, 94: {94}, 95: {95}, 96: {96, 17, 221, 119}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {32, 234, 124, 103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {108}, 109: {109}, 110: {123, 246, 110, 47}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {115}, 116: {194}, 117: {195}, 118: {196}, 119: {197}, 120: {198}, 121: {199}, 122: {200}, 123: {201}, 124: {202}, 125: {203}, 126: {204}, 127: {205}, 128: {206}, 129: {66, 10, 171, 207}, 130: {67}, 131: {173}, 132: {210}, 133: {211}, 134: {212}, 135: {213}, 136: {214}, 137: {215}, 138: {216}, 139: {217}, 140: {218}, 141: {219}, 142: {220}, 143: {221}, 144: {222}, 145: {223}, 146: {224}, 147: {225}, 148: {226}, 149: {227}, 150: {228}, 151: {229}, 152: {230}, 153: {231}, 154: {232}, 155: {233}, 156: {234}, 157: {235}, 158: {236}, 159: {237}, 160: {238}, 161: {239}, 162: {240}, 163: {241}, 164: {242}, 165: {243}, 166: {244}, 167: {245}, 168: {246}, 169: {247}, 170: {248}, 171: {249}, 172: {250}, 173: {251}, 174: {252}, 175: {253}, 176: {254}, 177: {255}, 178: {256}, 179: {257}, 180: {258}, 181: {259}, 182: {260}, 183: {261}, 184: {81}, 185: {82}, 186: {84, 157, 118}, 187: {96, 17, 221, 119}, 188: {120, 25, 228, 102}, 189: {121, 106, 36, 237}, 190: {240, 122, 40, 109}, 191: {123, 246, 110, 47}, 192: {32, 234, 124, 103}, 193: {125}, 194: {126}, 195: {162}, 196: {147}, 197: {129}, 198: {130}, 199: {150}, 200: {132}, 201: {133}, 202: {134}, 203: {135}, 204: {136, 179}, 205: {137}, 206: {138}, 207: {139}, 208: {187}, 209: {141}, 210: {142}, 211: {143}, 212: {144}, 213: {145}, 214: {87}, 215: {128}, 216: {148}, 217: {149}, 218: {131}, 219: {151}, 220: {152}, 221: {153}, 222: {137, 82, 117, 154}, 223: {155}, 224: {156}, 225: {157}, 226: {158}, 227: {159}, 228: {160}, 229: {161}, 230: {146}, 231: {163}, 232: {164}, 233: {165}, 234: {91}, 235: {167}, 236: {168}, 237: {169}, 238: {170}, 239: {66, 171, 207}, 240: {208}, 241: {68}, 242: {174}, 243: {175}, 244: {176}, 245: {177}, 246: {178}, 247: {136, 59, 179}, 248: {60}, 249: {181}, 250: {182}, 251: {183}, 252: {184}, 253: {185}, 254: {186}, 255: {140}, 256: {188}, 257: {189}, 258: {190}, 259: {191}, 260: {192}, 261: {193}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 load load
EXACT 10 add add
EXACT 11 store store
EXACT 12 load load
EXACT 13 add add
EXACT 14 inttoptr inttoptr
EXACT 15 store store
MORE 16 POT: 2
EXACT 17 store store
EXACT 18 add add
EXACT 19 store store
EXACT 20 icmp icmp
EXACT 21 zext zext
EXACT 22 getelementptr getelementptr
EXACT 23 store store
EXACT 24 trunc trunc
EXACT 25 and and
EXACT 26 tail tail
EXACT 27 trunc trunc
EXACT 28 and and
EXACT 29 xor xor
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 xor xor
EXACT 33 xor xor
EXACT 34 lshr lshr
EXACT 35 trunc trunc
EXACT 36 and and
EXACT 37 getelementptr getelementptr
EXACT 38 store store
EXACT 39 icmp icmp
EXACT 40 zext zext
EXACT 41 getelementptr getelementptr
EXACT 42 store store
EXACT 43 lshr lshr
EXACT 44 trunc trunc
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 lshr lshr
EXACT 48 xor xor
EXACT 49 add add
EXACT 50 icmp icmp
EXACT 51 zext zext
EXACT 52 getelementptr getelementptr
EXACT 53 store store
EXACT 54 add add
EXACT 55 load load
EXACT 56 add add
EXACT 57 store store
EXACT 58 inttoptr inttoptr
EXACT 59 store store
EXACT 60 load load
EXACT 61 add add
EXACT 62 load load
MORE 63 POT: 2
EXACT 64 add add
EXACT 65 store store
EXACT 66 inttoptr inttoptr
EXACT 67 store store
EXACT 68 load load
EXACT 69 add add
MORE 70 POT: 3
EXACT 71 add add
EXACT 72 store store
EXACT 73 getelementptr getelementptr
EXACT 74 load load
EXACT 75 inttoptr inttoptr
EXACT 76 store store
EXACT 77 load load
EXACT 78 br br
EXACT 79 phi phi
EXACT 80 load load
EXACT 81 add add
EXACT 82 store store
EXACT 83 add add
EXACT 84 store store
EXACT 85 add add
EXACT 86 add add
EXACT 87 load load
EXACT 88 add add
EXACT 89 inttoptr inttoptr
EXACT 90 store store
EXACT 91 store store
EXACT 92 store store
EXACT 93 tail tail
EXACT 94 load load
EXACT 95 load load
MORE 96 POT: 4
EXACT 97 and and
EXACT 98 tail tail
EXACT 99 trunc trunc
EXACT 100 and and
EXACT 101 xor xor
EXACT 102 store store
MORE 103 POT: 4
EXACT 104 icmp icmp
EXACT 105 zext zext
EXACT 106 store store
EXACT 107 lshr lshr
EXACT 108 trunc trunc
EXACT 109 store store
MORE 110 POT: 4
EXACT 111 select select
EXACT 112 add add
EXACT 113 store store
EXACT 114 load load
EXACT 115 br br
EXACT 116 add add
EXACT 117 add add
EXACT 118 store store
EXACT 119 inttoptr inttoptr
EXACT 120 load load
EXACT 121 store store
EXACT 122 add add
EXACT 123 add add
EXACT 124 store store
EXACT 125 inttoptr inttoptr
EXACT 126 store store
EXACT 127 load load
EXACT 128 add add
MORE 129 POT: 4
EXACT 130 add add
EXACT 131 store store
EXACT 132 inttoptr inttoptr
EXACT 133 load load
EXACT 134 store store
EXACT 135 getelementptr getelementptr
EXACT 136 bitcast bitcast
EXACT 137 store store
EXACT 138 load load
EXACT 139 add add
EXACT 140 store store
EXACT 141 icmp icmp
EXACT 142 zext zext
EXACT 143 store store
EXACT 144 trunc trunc
EXACT 145 and and
EXACT 146 tail tail
EXACT 147 trunc trunc
EXACT 148 and and
EXACT 149 xor xor
EXACT 150 store store
EXACT 151 xor xor
EXACT 152 xor xor
EXACT 153 lshr lshr
EXACT 154 trunc trunc
EXACT 155 and and
EXACT 156 store store
EXACT 157 icmp icmp
EXACT 158 zext zext
EXACT 159 store store
EXACT 160 lshr lshr
EXACT 161 trunc trunc
EXACT 162 store store
EXACT 163 lshr lshr
EXACT 164 xor xor
EXACT 165 add add
EXACT 166 icmp icmp
EXACT 167 zext zext
EXACT 168 store store
EXACT 169 add add
EXACT 170 store store
EXACT 171 add add
EXACT 172 inttoptr inttoptr
EXACT 173 load load
EXACT 174 store store
EXACT 175 store store
EXACT 176 add add
EXACT 177 store store
EXACT 178 inttoptr inttoptr
EXACT 179 load load
EXACT 180 store store
EXACT 181 add add
EXACT 182 store store
EXACT 183 ret ret
EXACT 184 add add
EXACT 185 store store
MORE 186 POT: 3
MORE 187 POT: 4
MORE 188 POT: 4
MORE 189 POT: 4
MORE 190 POT: 4
MORE 191 POT: 4
MORE 192 POT: 4
EXACT 193 add add
EXACT 194 add add
EXACT 195 load load
EXACT 196 add add
EXACT 197 inttoptr inttoptr
EXACT 198 store store
EXACT 199 store store
EXACT 200 store store
EXACT 201 tail tail
EXACT 202 load load
EXACT 203 add add
MORE 204 POT: 2
EXACT 205 store store
EXACT 206 load load
EXACT 207 add add
EXACT 208 store store
EXACT 209 inttoptr inttoptr
EXACT 210 store store
EXACT 211 load load
EXACT 212 add add
EXACT 213 add add
EXACT 214 load load
EXACT 215 add add
EXACT 216 inttoptr inttoptr
EXACT 217 store store
EXACT 218 store store
EXACT 219 store store
EXACT 220 tail tail
EXACT 221 load load
MORE 222 POT: 4
EXACT 223 load load
EXACT 224 add add
EXACT 225 store store
EXACT 226 load load
EXACT 227 store store
EXACT 228 add add
EXACT 229 add add
EXACT 230 load load
EXACT 231 add add
EXACT 232 inttoptr inttoptr
EXACT 233 store store
EXACT 234 store store
EXACT 235 store store
EXACT 236 tail tail
EXACT 237 load load
EXACT 238 add add
MORE 239 POT: 3
EXACT 240 add add
EXACT 241 store store
EXACT 242 load load
EXACT 243 inttoptr inttoptr
EXACT 244 store store
EXACT 245 load load
EXACT 246 add add
MORE 247 POT: 3
EXACT 248 add add
EXACT 249 store store
EXACT 250 inttoptr inttoptr
EXACT 251 load load
EXACT 252 store store
EXACT 253 add add
EXACT 254 add add
EXACT 255 store store
EXACT 256 inttoptr inttoptr
EXACT 257 store store
EXACT 258 load load
EXACT 259 add add
EXACT 260 store store
EXACT 261 br br
FP: 63 1.0 False
TO REMOVE: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -56', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 48', '%13 = zext i1 %12 to i8', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %7, -24', '%41 = load i64, i64* %RDI.i56, align 8', '%42 = add i64 %10, 11', 'store i64 %42, i64* %3, align 8', '%43 = inttoptr i64 %40 to i64*', 'store i64 %41, i64* %43, align 8', '%44 = load i64, i64* %RBP.i, align 8', '%45 = add i64 %44, -24', '%46 = load i64, i64* %RSI.i53, align 8', '%48 = add i64 %47, 4', 'store i64 %48, i64* %3, align 8', '%49 = inttoptr i64 %45 to i64*', 'store i64 %46, i64* %49, align 8', '%50 = load i64, i64* %RBP.i, align 8', '%51 = add i64 %50, -32', '%53 = add i64 %52, 5', 'store i64 %53, i64* %3, align 8', '%54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', '%55 = load i64, i64* %54, align 1', '%56 = inttoptr i64 %51 to i64*', 'store i64 %55, i64* %56, align 8', '%RAX.i29 = getelementptr inbounds %union.anon, %union.anon* %57, i64 0, i32 0', '%RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%.pre = load i64, i64* %3, align 8', '%58 = phi i64 [ %123, %block_402a2b ], [ %.pre, %entry ]', '%59 = load i64, i64* %RBP.i, align 8', '%60 = add i64 %59, -16', 'store i64 %60, i64* %RDI.i56, align 8', '%61 = add i64 %59, -24', 'store i64 %61, i64* %RSI.i53, align 8', '%62 = add i64 %58, 107', '%63 = add i64 %58, 13', '%64 = load i64, i64* %6, align 8', '%65 = add i64 %64, -8', '%66 = inttoptr i64 %65 to i64*', 'store i64 %63, i64* %66, align 8', 'store i64 %65, i64* %6, align 8', 'store i64 %62, i64* %3, align 8', '%call2_402a1d = tail call %struct.Memory* @sub_402a80._ZneI14Double_pointerEiRKT_S3_(%struct.State* nonnull %0, i64 %62, %struct.Memory* %2)', '%68 = load i64, i64* %3, align 8', '%69 = and i32 %67, 255', '%70 = tail call i32 @llvm.ctpop.i32(i32 %69)', '%71 = trunc i32 %70 to i8', '%72 = and i8 %71, 1', '%73 = xor i8 %72, 1', 'store i8 %73, i8* %21, align 1', '%75 = zext i1 %74 to i8', 'store i8 %75, i8* %30, align 1', '%76 = lshr i32 %67, 31', '%77 = trunc i32 %76 to i8', 'store i8 %77, i8* %33, align 1', '%.v = select i1 %74, i64 73, i64 9', '%78 = add i64 %68, %.v', 'store i64 %78, i64* %3, align 8', '%79 = load i64, i64* %RBP.i, align 8', '%80 = add i64 %79, -16', 'store i64 %80, i64* %RDI.i56, align 8', '%81 = add i64 %78, 149', '%82 = add i64 %78, 11', '%83 = load i64, i64* %6, align 8', '%84 = add i64 %83, -8', '%85 = inttoptr i64 %84 to i64*', 'store i64 %82, i64* %85, align 8', 'store i64 %84, i64* %6, align 8', 'store i64 %81, i64* %3, align 8', '%call2_402a31 = tail call %struct.Memory* @sub_402ac0._ZN14Double_pointerppEi(%struct.State* nonnull %0, i64 %81, %struct.Memory* %2)', '%86 = load i64, i64* %RBP.i, align 8', '%87 = add i64 %86, -48', 'store i64 %87, i64* %RDI.i56, align 8', '%89 = load i64, i64* %RAX.i29, align 8', '%90 = add i64 %88, 8', 'store i64 %90, i64* %3, align 8', '%91 = inttoptr i64 %87 to i64*', 'store i64 %89, i64* %91, align 8', '%92 = load i64, i64* %3, align 8', '%93 = add i64 %92, -3134', '%94 = add i64 %92, 5', '%95 = load i64, i64* %6, align 8', '%96 = add i64 %95, -8', '%97 = inttoptr i64 %96 to i64*', 'store i64 %94, i64* %97, align 8', 'store i64 %96, i64* %6, align 8', 'store i64 %93, i64* %3, align 8', '%call2_402a3e = tail call %struct.Memory* @sub_401e00._ZNK14Double_pointerdeEv(%struct.State* nonnull %0, i64 %93, %struct.Memory* %2)', '%98 = load i64, i64* %3, align 8', '%99 = load i64, i64* %RBP.i, align 8', '%100 = add i64 %99, -32', 'store i64 %100, i64* %RSI.i53, align 8', '%101 = load i64, i64* %RAX.i29, align 8', 'store i64 %101, i64* %RDX.i, align 8', '%102 = add i64 %98, -6371', '%103 = add i64 %98, 22', '%104 = load i64, i64* %6, align 8', '%105 = add i64 %104, -8', '%106 = inttoptr i64 %105 to i64*', 'store i64 %103, i64* %106, align 8', 'store i64 %105, i64* %6, align 8', 'store i64 %102, i64* %3, align 8', '%call2_402a54 = tail call %struct.Memory* @\\"sub_401160._ZN3$_0clERK6DoubleS2_\\"(%struct.State* nonnull %0, i64 %102, %struct.Memory* %2)', '%107 = load i64, i64* %RBP.i, align 8', '%108 = add i64 %107, -40', '%110 = add i64 %109, 5', 'store i64 %110, i64* %3, align 8', '%111 = load i64, i64* %54, align 1', '%112 = inttoptr i64 %108 to i64*', 'store i64 %111, i64* %112, align 8', '%113 = load i64, i64* %RBP.i, align 8', '%114 = add i64 %113, -40', '%116 = add i64 %115, 4', 'store i64 %116, i64* %3, align 8', '%117 = inttoptr i64 %114 to i64*', '%118 = load i64, i64* %117, align 8', 'store i64 %118, i64* %RAX.i29, align 8', '%119 = add i64 %113, -32', '%120 = add i64 %115, 8', 'store i64 %120, i64* %3, align 8', '%121 = inttoptr i64 %119 to i64*', 'store i64 %118, i64* %121, align 8', '%122 = load i64, i64* %3, align 8', '%123 = add i64 %122, -81', 'store i64 %123, i64* %3, align 8', '%124 = add i64 %79, -32', '%125 = add i64 %78, 4', 'store i64 %125, i64* %3, align 8', '%126 = inttoptr i64 %124 to i64*', '%127 = load i64, i64* %126, align 8', 'store i64 %127, i64* %RAX.i29, align 8', '%128 = add i64 %79, -8', '%129 = add i64 %78, 8', 'store i64 %129, i64* %3, align 8', '%130 = inttoptr i64 %128 to i64*', 'store i64 %127, i64* %130, align 8', '%131 = load i64, i64* %RBP.i, align 8', '%132 = add i64 %131, -8', '%134 = add i64 %133, 5', 'store i64 %134, i64* %3, align 8', '%135 = inttoptr i64 %132 to i64*', '%136 = load i64, i64* %135, align 8', 'store i64 %136, i64* %54, align 1', '%137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%138 = bitcast i64* %137 to double*', 'store double 0.000000e+00, double* %138, align 1', '%139 = load i64, i64* %6, align 8', '%140 = add i64 %139, 48', 'store i64 %140, i64* %6, align 8', '%141 = icmp ugt i64 %139, -49', '%142 = zext i1 %141 to i8', 'store i8 %142, i8* %14, align 1', '%143 = trunc i64 %140 to i32', '%144 = and i32 %143, 255', '%145 = tail call i32 @llvm.ctpop.i32(i32 %144)', '%146 = trunc i32 %145 to i8', '%147 = and i8 %146, 1', '%148 = xor i8 %147, 1', 'store i8 %148, i8* %21, align 1', '%149 = xor i64 %139, 16', '%150 = xor i64 %149, %140', '%151 = lshr i64 %150, 4', '%152 = trunc i64 %151 to i8', '%153 = and i8 %152, 1', 'store i8 %153, i8* %27, align 1', '%154 = icmp eq i64 %140, 0', '%155 = zext i1 %154 to i8', 'store i8 %155, i8* %30, align 1', '%156 = lshr i64 %140, 63', '%157 = trunc i64 %156 to i8', 'store i8 %157, i8* %33, align 1', '%158 = lshr i64 %139, 63', '%159 = xor i64 %156, %158', '%160 = add nuw nsw i64 %159, %156', '%161 = icmp eq i64 %160, 2', '%162 = zext i1 %161 to i8', 'store i8 %162, i8* %39, align 1', '%163 = add i64 %133, 10', 'store i64 %163, i64* %3, align 8', '%164 = add i64 %139, 56', '%165 = inttoptr i64 %140 to i64*', '%166 = load i64, i64* %165, align 8', 'store i64 %166, i64* %RBP.i, align 8', 'store i64 %164, i64* %6, align 8', '%167 = add i64 %133, 11', 'store i64 %167, i64* %3, align 8', '%168 = inttoptr i64 %164 to i64*', '%169 = load i64, i64* %168, align 8', 'store i64 %169, i64* %3, align 8', '%170 = add i64 %139, 64', 'store i64 %170, i64* %6, align 8'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Keep: %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -56
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 48
Found line to remove! %13 = zext i1 %12 to i8
Keep: %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Keep: %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Keep: %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Keep: %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Keep: %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Keep: %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Keep: %RDI.i56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %40 = add i64 %7, -24
Found line to remove! %41 = load i64, i64* %RDI.i56, align 8
Found line to remove! %42 = add i64 %10, 11
Found line to remove! store i64 %42, i64* %3, align 8
Found line to remove! %43 = inttoptr i64 %40 to i64*
Found line to remove! store i64 %41, i64* %43, align 8
Keep: %RSI.i53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %44 = load i64, i64* %RBP.i, align 8
Found line to remove! %45 = add i64 %44, -24
Found line to remove! %46 = load i64, i64* %RSI.i53, align 8
Keep: %47 = load i64, i64* %3, align 8
Found line to remove! %48 = add i64 %47, 4
Found line to remove! store i64 %48, i64* %3, align 8
Found line to remove! %49 = inttoptr i64 %45 to i64*
Found line to remove! store i64 %46, i64* %49, align 8
Found line to remove! %50 = load i64, i64* %RBP.i, align 8
Found line to remove! %51 = add i64 %50, -32
Keep: %52 = load i64, i64* %3, align 8
Found line to remove! %53 = add i64 %52, 5
Found line to remove! store i64 %53, i64* %3, align 8
Found line to remove! %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! %55 = load i64, i64* %54, align 1
Found line to remove! %56 = inttoptr i64 %51 to i64*
Found line to remove! store i64 %55, i64* %56, align 8
Keep: %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %EAX.i = bitcast %union.anon* %57 to i32*
Found line to remove! %RAX.i29 = getelementptr inbounds %union.anon, %union.anon* %57, i64 0, i32 0
Found line to remove! %RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! %.pre = load i64, i64* %3, align 8
Keep: br label %block_.L_402a15
Keep: 
Keep: block_.L_402a15:                                  ; preds = %block_402a2b, %entry
Found line to remove! %58 = phi i64 [ %123, %block_402a2b ], [ %.pre, %entry ]
Found line to remove! %59 = load i64, i64* %RBP.i, align 8
Found line to remove! %60 = add i64 %59, -16
Found line to remove! store i64 %60, i64* %RDI.i56, align 8
Found line to remove! %61 = add i64 %59, -24
Found line to remove! store i64 %61, i64* %RSI.i53, align 8
Found line to remove! %62 = add i64 %58, 107
Found line to remove! %63 = add i64 %58, 13
Found line to remove! %64 = load i64, i64* %6, align 8
Found line to remove! %65 = add i64 %64, -8
Found line to remove! %66 = inttoptr i64 %65 to i64*
Found line to remove! store i64 %63, i64* %66, align 8
Found line to remove! store i64 %65, i64* %6, align 8
Found line to remove! store i64 %62, i64* %3, align 8
Found line to remove! %call2_402a1d = tail call %struct.Memory* @sub_402a80._ZneI14Double_pointerEiRKT_S3_(%struct.State* nonnull %0, i64 %62, %struct.Memory* %2)
Keep: %67 = load i32, i32* %EAX.i, align 4
Found line to remove! %68 = load i64, i64* %3, align 8
Keep: store i8 0, i8* %14, align 1
Found line to remove! %69 = and i32 %67, 255
Found line to remove! %70 = tail call i32 @llvm.ctpop.i32(i32 %69)
Found line to remove! %71 = trunc i32 %70 to i8
Found line to remove! %72 = and i8 %71, 1
Found line to remove! %73 = xor i8 %72, 1
Found line to remove! store i8 %73, i8* %21, align 1
Keep: store i8 0, i8* %27, align 1
Keep: %74 = icmp eq i32 %67, 0
Found line to remove! %75 = zext i1 %74 to i8
Found line to remove! store i8 %75, i8* %30, align 1
Found line to remove! %76 = lshr i32 %67, 31
Found line to remove! %77 = trunc i32 %76 to i8
Found line to remove! store i8 %77, i8* %33, align 1
Keep: store i8 0, i8* %39, align 1
Found line to remove! %.v = select i1 %74, i64 73, i64 9
Found line to remove! %78 = add i64 %68, %.v
Found line to remove! store i64 %78, i64* %3, align 8
Found line to remove! %79 = load i64, i64* %RBP.i, align 8
Keep: br i1 %74, label %block_.L_402a6b, label %block_402a2b
Keep: 
Keep: block_402a2b:                                     ; preds = %block_.L_402a15
Found line to remove! %80 = add i64 %79, -16
Found line to remove! store i64 %80, i64* %RDI.i56, align 8
Keep: store i64 0, i64* %RSI.i53, align 8
Keep: store i8 0, i8* %14, align 1
Keep: store i8 1, i8* %21, align 1
Keep: store i8 1, i8* %30, align 1
Keep: store i8 0, i8* %33, align 1
Keep: store i8 0, i8* %39, align 1
Keep: store i8 0, i8* %27, align 1
Found line to remove! %81 = add i64 %78, 149
Found line to remove! %82 = add i64 %78, 11
Found line to remove! %83 = load i64, i64* %6, align 8
Found line to remove! %84 = add i64 %83, -8
Found line to remove! %85 = inttoptr i64 %84 to i64*
Found line to remove! store i64 %82, i64* %85, align 8
Found line to remove! store i64 %84, i64* %6, align 8
Found line to remove! store i64 %81, i64* %3, align 8
Found line to remove! %call2_402a31 = tail call %struct.Memory* @sub_402ac0._ZN14Double_pointerppEi(%struct.State* nonnull %0, i64 %81, %struct.Memory* %2)
Found line to remove! %86 = load i64, i64* %RBP.i, align 8
Found line to remove! %87 = add i64 %86, -48
Keep: %88 = load i64, i64* %3, align 8
Found line to remove! store i64 %87, i64* %RDI.i56, align 8
Found line to remove! %89 = load i64, i64* %RAX.i29, align 8
Found line to remove! %90 = add i64 %88, 8
Found line to remove! store i64 %90, i64* %3, align 8
Found line to remove! %91 = inttoptr i64 %87 to i64*
Found line to remove! store i64 %89, i64* %91, align 8
Found line to remove! %92 = load i64, i64* %3, align 8
Found line to remove! %93 = add i64 %92, -3134
Found line to remove! %94 = add i64 %92, 5
Found line to remove! %95 = load i64, i64* %6, align 8
Found line to remove! %96 = add i64 %95, -8
Found line to remove! %97 = inttoptr i64 %96 to i64*
Found line to remove! store i64 %94, i64* %97, align 8
Found line to remove! store i64 %96, i64* %6, align 8
Found line to remove! store i64 %93, i64* %3, align 8
Found line to remove! %call2_402a3e = tail call %struct.Memory* @sub_401e00._ZNK14Double_pointerdeEv(%struct.State* nonnull %0, i64 %93, %struct.Memory* %2)
Found line to remove! %98 = load i64, i64* %3, align 8
Keep: store i64 ptrtoint (%G__0x60cf00_type* @G__0x60cf00 to i64), i64* %RDI.i56, align 8
Found line to remove! %99 = load i64, i64* %RBP.i, align 8
Found line to remove! %100 = add i64 %99, -32
Found line to remove! store i64 %100, i64* %RSI.i53, align 8
Found line to remove! %101 = load i64, i64* %RAX.i29, align 8
Found line to remove! store i64 %101, i64* %RDX.i, align 8
Found line to remove! %102 = add i64 %98, -6371
Found line to remove! %103 = add i64 %98, 22
Found line to remove! %104 = load i64, i64* %6, align 8
Found line to remove! %105 = add i64 %104, -8
Found line to remove! %106 = inttoptr i64 %105 to i64*
Found line to remove! store i64 %103, i64* %106, align 8
Found line to remove! store i64 %105, i64* %6, align 8
Found line to remove! store i64 %102, i64* %3, align 8
Keep: %call2_402a54 = tail call %struct.Memory* @"sub_401160._ZN3$_0clERK6DoubleS2_"(%struct.State* nonnull %0, i64 %102, %struct.Memory* %2)
Found line to remove! %107 = load i64, i64* %RBP.i, align 8
Found line to remove! %108 = add i64 %107, -40
Keep: %109 = load i64, i64* %3, align 8
Found line to remove! %110 = add i64 %109, 5
Found line to remove! store i64 %110, i64* %3, align 8
Found line to remove! %111 = load i64, i64* %54, align 1
Found line to remove! %112 = inttoptr i64 %108 to i64*
Found line to remove! store i64 %111, i64* %112, align 8
Found line to remove! %113 = load i64, i64* %RBP.i, align 8
Found line to remove! %114 = add i64 %113, -40
Keep: %115 = load i64, i64* %3, align 8
Found line to remove! %116 = add i64 %115, 4
Found line to remove! store i64 %116, i64* %3, align 8
Found line to remove! %117 = inttoptr i64 %114 to i64*
Found line to remove! %118 = load i64, i64* %117, align 8
Found line to remove! store i64 %118, i64* %RAX.i29, align 8
Found line to remove! %119 = add i64 %113, -32
Found line to remove! %120 = add i64 %115, 8
Found line to remove! store i64 %120, i64* %3, align 8
Found line to remove! %121 = inttoptr i64 %119 to i64*
Found line to remove! store i64 %118, i64* %121, align 8
Found line to remove! %122 = load i64, i64* %3, align 8
Found line to remove! %123 = add i64 %122, -81
Found line to remove! store i64 %123, i64* %3, align 8
Keep: br label %block_.L_402a15
Keep: 
Keep: block_.L_402a6b:                                  ; preds = %block_.L_402a15
Found line to remove! %124 = add i64 %79, -32
Found line to remove! %125 = add i64 %78, 4
Found line to remove! store i64 %125, i64* %3, align 8
Found line to remove! %126 = inttoptr i64 %124 to i64*
Found line to remove! %127 = load i64, i64* %126, align 8
Found line to remove! store i64 %127, i64* %RAX.i29, align 8
Found line to remove! %128 = add i64 %79, -8
Found line to remove! %129 = add i64 %78, 8
Found line to remove! store i64 %129, i64* %3, align 8
Found line to remove! %130 = inttoptr i64 %128 to i64*
Found line to remove! store i64 %127, i64* %130, align 8
Found line to remove! %131 = load i64, i64* %RBP.i, align 8
Found line to remove! %132 = add i64 %131, -8
Keep: %133 = load i64, i64* %3, align 8
Found line to remove! %134 = add i64 %133, 5
Found line to remove! store i64 %134, i64* %3, align 8
Found line to remove! %135 = inttoptr i64 %132 to i64*
Found line to remove! %136 = load i64, i64* %135, align 8
Found line to remove! store i64 %136, i64* %54, align 1
Found line to remove! %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %138 = bitcast i64* %137 to double*
Found line to remove! store double 0.000000e+00, double* %138, align 1
Found line to remove! %139 = load i64, i64* %6, align 8
Found line to remove! %140 = add i64 %139, 48
Found line to remove! store i64 %140, i64* %6, align 8
Found line to remove! %141 = icmp ugt i64 %139, -49
Found line to remove! %142 = zext i1 %141 to i8
Found line to remove! store i8 %142, i8* %14, align 1
Found line to remove! %143 = trunc i64 %140 to i32
Found line to remove! %144 = and i32 %143, 255
Found line to remove! %145 = tail call i32 @llvm.ctpop.i32(i32 %144)
Found line to remove! %146 = trunc i32 %145 to i8
Found line to remove! %147 = and i8 %146, 1
Found line to remove! %148 = xor i8 %147, 1
Found line to remove! store i8 %148, i8* %21, align 1
Found line to remove! %149 = xor i64 %139, 16
Found line to remove! %150 = xor i64 %149, %140
Found line to remove! %151 = lshr i64 %150, 4
Found line to remove! %152 = trunc i64 %151 to i8
Found line to remove! %153 = and i8 %152, 1
Found line to remove! store i8 %153, i8* %27, align 1
Found line to remove! %154 = icmp eq i64 %140, 0
Found line to remove! %155 = zext i1 %154 to i8
Found line to remove! store i8 %155, i8* %30, align 1
Found line to remove! %156 = lshr i64 %140, 63
Found line to remove! %157 = trunc i64 %156 to i8
Found line to remove! store i8 %157, i8* %33, align 1
Found line to remove! %158 = lshr i64 %139, 63
Found line to remove! %159 = xor i64 %156, %158
Found line to remove! %160 = add nuw nsw i64 %159, %156
Found line to remove! %161 = icmp eq i64 %160, 2
Found line to remove! %162 = zext i1 %161 to i8
Found line to remove! store i8 %162, i8* %39, align 1
Found line to remove! %163 = add i64 %133, 10
Found line to remove! store i64 %163, i64* %3, align 8
Found line to remove! %164 = add i64 %139, 56
Found line to remove! %165 = inttoptr i64 %140 to i64*
Found line to remove! %166 = load i64, i64* %165, align 8
Found line to remove! store i64 %166, i64* %RBP.i, align 8
Found line to remove! store i64 %164, i64* %6, align 8
Found line to remove! %167 = add i64 %133, 11
Found line to remove! store i64 %167, i64* %3, align 8
Found line to remove! %168 = inttoptr i64 %164 to i64*
Found line to remove! %169 = load i64, i64* %168, align 8
Found line to remove! store i64 %169, i64* %3, align 8
Found line to remove! %170 = add i64 %139, 64
Found line to remove! store i64 %170, i64* %6, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -56', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 48', '%13 = zext i1 %12 to i8', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %7, -24', '%41 = load i64, i64* %RDI.i56, align 8', '%42 = add i64 %10, 11', 'store i64 %42, i64* %3, align 8', '%43 = inttoptr i64 %40 to i64*', 'store i64 %41, i64* %43, align 8', '%44 = load i64, i64* %RBP.i, align 8', '%45 = add i64 %44, -24', '%46 = load i64, i64* %RSI.i53, align 8', '%48 = add i64 %47, 4', 'store i64 %48, i64* %3, align 8', '%49 = inttoptr i64 %45 to i64*', 'store i64 %46, i64* %49, align 8', '%50 = load i64, i64* %RBP.i, align 8', '%51 = add i64 %50, -32', '%53 = add i64 %52, 5', 'store i64 %53, i64* %3, align 8', '%54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', '%55 = load i64, i64* %54, align 1', '%56 = inttoptr i64 %51 to i64*', 'store i64 %55, i64* %56, align 8', '%RAX.i29 = getelementptr inbounds %union.anon, %union.anon* %57, i64 0, i32 0', '%RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%.pre = load i64, i64* %3, align 8', '%58 = phi i64 [ %123, %block_402a2b ], [ %.pre, %entry ]', '%59 = load i64, i64* %RBP.i, align 8', '%60 = add i64 %59, -16', 'store i64 %60, i64* %RDI.i56, align 8', '%61 = add i64 %59, -24', 'store i64 %61, i64* %RSI.i53, align 8', '%62 = add i64 %58, 107', '%63 = add i64 %58, 13', '%64 = load i64, i64* %6, align 8', '%65 = add i64 %64, -8', '%66 = inttoptr i64 %65 to i64*', 'store i64 %63, i64* %66, align 8', 'store i64 %65, i64* %6, align 8', 'store i64 %62, i64* %3, align 8', '%call2_402a1d = tail call %struct.Memory* @sub_402a80._ZneI14Double_pointerEiRKT_S3_(%struct.State* nonnull %0, i64 %62, %struct.Memory* %2)', '%68 = load i64, i64* %3, align 8', '%69 = and i32 %67, 255', '%70 = tail call i32 @llvm.ctpop.i32(i32 %69)', '%71 = trunc i32 %70 to i8', '%72 = and i8 %71, 1', '%73 = xor i8 %72, 1', 'store i8 %73, i8* %21, align 1', '%75 = zext i1 %74 to i8', 'store i8 %75, i8* %30, align 1', '%76 = lshr i32 %67, 31', '%77 = trunc i32 %76 to i8', 'store i8 %77, i8* %33, align 1', '%.v = select i1 %74, i64 73, i64 9', '%78 = add i64 %68, %.v', 'store i64 %78, i64* %3, align 8', '%79 = load i64, i64* %RBP.i, align 8', '%80 = add i64 %79, -16', 'store i64 %80, i64* %RDI.i56, align 8', '%81 = add i64 %78, 149', '%82 = add i64 %78, 11', '%83 = load i64, i64* %6, align 8', '%84 = add i64 %83, -8', '%85 = inttoptr i64 %84 to i64*', 'store i64 %82, i64* %85, align 8', 'store i64 %84, i64* %6, align 8', 'store i64 %81, i64* %3, align 8', '%call2_402a31 = tail call %struct.Memory* @sub_402ac0._ZN14Double_pointerppEi(%struct.State* nonnull %0, i64 %81, %struct.Memory* %2)', '%86 = load i64, i64* %RBP.i, align 8', '%87 = add i64 %86, -48', 'store i64 %87, i64* %RDI.i56, align 8', '%89 = load i64, i64* %RAX.i29, align 8', '%90 = add i64 %88, 8', 'store i64 %90, i64* %3, align 8', '%91 = inttoptr i64 %87 to i64*', 'store i64 %89, i64* %91, align 8', '%92 = load i64, i64* %3, align 8', '%93 = add i64 %92, -3134', '%94 = add i64 %92, 5', '%95 = load i64, i64* %6, align 8', '%96 = add i64 %95, -8', '%97 = inttoptr i64 %96 to i64*', 'store i64 %94, i64* %97, align 8', 'store i64 %96, i64* %6, align 8', 'store i64 %93, i64* %3, align 8', '%call2_402a3e = tail call %struct.Memory* @sub_401e00._ZNK14Double_pointerdeEv(%struct.State* nonnull %0, i64 %93, %struct.Memory* %2)', '%98 = load i64, i64* %3, align 8', '%99 = load i64, i64* %RBP.i, align 8', '%100 = add i64 %99, -32', 'store i64 %100, i64* %RSI.i53, align 8', '%101 = load i64, i64* %RAX.i29, align 8', 'store i64 %101, i64* %RDX.i, align 8', '%102 = add i64 %98, -6371', '%103 = add i64 %98, 22', '%104 = load i64, i64* %6, align 8', '%105 = add i64 %104, -8', '%106 = inttoptr i64 %105 to i64*', 'store i64 %103, i64* %106, align 8', 'store i64 %105, i64* %6, align 8', 'store i64 %102, i64* %3, align 8', '%call2_402a54 = tail call %struct.Memory* @\\"sub_401160._ZN3$_0clERK6DoubleS2_\\"(%struct.State* nonnull %0, i64 %102, %struct.Memory* %2)', '%107 = load i64, i64* %RBP.i, align 8', '%108 = add i64 %107, -40', '%110 = add i64 %109, 5', 'store i64 %110, i64* %3, align 8', '%111 = load i64, i64* %54, align 1', '%112 = inttoptr i64 %108 to i64*', 'store i64 %111, i64* %112, align 8', '%113 = load i64, i64* %RBP.i, align 8', '%114 = add i64 %113, -40', '%116 = add i64 %115, 4', 'store i64 %116, i64* %3, align 8', '%117 = inttoptr i64 %114 to i64*', '%118 = load i64, i64* %117, align 8', 'store i64 %118, i64* %RAX.i29, align 8', '%119 = add i64 %113, -32', '%120 = add i64 %115, 8', 'store i64 %120, i64* %3, align 8', '%121 = inttoptr i64 %119 to i64*', 'store i64 %118, i64* %121, align 8', '%122 = load i64, i64* %3, align 8', '%123 = add i64 %122, -81', 'store i64 %123, i64* %3, align 8', '%124 = add i64 %79, -32', '%125 = add i64 %78, 4', 'store i64 %125, i64* %3, align 8', '%126 = inttoptr i64 %124 to i64*', '%127 = load i64, i64* %126, align 8', 'store i64 %127, i64* %RAX.i29, align 8', '%128 = add i64 %79, -8', '%129 = add i64 %78, 8', 'store i64 %129, i64* %3, align 8', '%130 = inttoptr i64 %128 to i64*', 'store i64 %127, i64* %130, align 8', '%131 = load i64, i64* %RBP.i, align 8', '%132 = add i64 %131, -8', '%134 = add i64 %133, 5', 'store i64 %134, i64* %3, align 8', '%135 = inttoptr i64 %132 to i64*', '%136 = load i64, i64* %135, align 8', 'store i64 %136, i64* %54, align 1', '%137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%138 = bitcast i64* %137 to double*', 'store double 0.000000e+00, double* %138, align 1', '%139 = load i64, i64* %6, align 8', '%140 = add i64 %139, 48', 'store i64 %140, i64* %6, align 8', '%141 = icmp ugt i64 %139, -49', '%142 = zext i1 %141 to i8', 'store i8 %142, i8* %14, align 1', '%143 = trunc i64 %140 to i32', '%144 = and i32 %143, 255', '%145 = tail call i32 @llvm.ctpop.i32(i32 %144)', '%146 = trunc i32 %145 to i8', '%147 = and i8 %146, 1', '%148 = xor i8 %147, 1', 'store i8 %148, i8* %21, align 1', '%149 = xor i64 %139, 16', '%150 = xor i64 %149, %140', '%151 = lshr i64 %150, 4', '%152 = trunc i64 %151 to i8', '%153 = and i8 %152, 1', 'store i8 %153, i8* %27, align 1', '%154 = icmp eq i64 %140, 0', '%155 = zext i1 %154 to i8', 'store i8 %155, i8* %30, align 1', '%156 = lshr i64 %140, 63', '%157 = trunc i64 %156 to i8', 'store i8 %157, i8* %33, align 1', '%158 = lshr i64 %139, 63', '%159 = xor i64 %156, %158', '%160 = add nuw nsw i64 %159, %156', '%161 = icmp eq i64 %160, 2', '%162 = zext i1 %161 to i8', 'store i8 %162, i8* %39, align 1', '%163 = add i64 %133, 10', 'store i64 %163, i64* %3, align 8', '%164 = add i64 %139, 56', '%165 = inttoptr i64 %140 to i64*', '%166 = load i64, i64* %165, align 8', 'store i64 %166, i64* %RBP.i, align 8', 'store i64 %164, i64* %6, align 8', '%167 = add i64 %133, 11', 'store i64 %167, i64* %3, align 8', '%168 = inttoptr i64 %164 to i64*', '%169 = load i64, i64* %168, align 8', 'store i64 %169, i64* %3, align 8', '%170 = add i64 %139, 64', 'store i64 %170, i64* %6, align 8'])
TO REMOVE: dict_keys(['%RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %PC, align 8', '%6 = load i64, i64* %RSP, align 8', '%7 = add i64 %6, -8', '%8 = inttoptr i64 %7 to i64*', 'store i64 %4, i64* %8, align 8', 'store i64 %7, i64* %RBP, align 8', '%10 = add i64 %6, -56', 'store i64 %10, i64* %RSP, align 8', '%11 = icmp ult i64 %7, 48', '%12 = zext i1 %11 to i8', 'store i8 %12, i8* %13, align 1', '%14 = trunc i64 %10 to i32', '%15 = and i32 %14, 255', '%16 = tail call i32 @llvm.ctpop.i32(i32 %15) #12', '%17 = trunc i32 %16 to i8', '%18 = and i8 %17, 1', '%19 = xor i8 %18, 1', 'store i8 %19, i8* %20, align 1', '%21 = xor i64 %7, 16', '%22 = xor i64 %21, %10', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %10, 0', '%28 = zext i1 %27 to i8', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %10, 63', '%31 = trunc i64 %30 to i8', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %7, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', 'store i8 %37, i8* %38, align 1', '%39 = add i64 %6, -24', '%40 = load i64, i64* %RDI, align 8', '%41 = add i64 %9, 11', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %39 to i64*', 'store i64 %40, i64* %42, align 8', '%43 = load i64, i64* %RBP, align 8', '%44 = add i64 %43, -24', '%45 = load i64, i64* %RSI, align 8', '%47 = add i64 %46, 4', 'store i64 %47, i64* %PC, align 8', '%48 = inttoptr i64 %44 to i64*', 'store i64 %45, i64* %48, align 8', '%49 = load i64, i64* %RBP, align 8', '%50 = add i64 %49, -32', '%52 = add i64 %51, 5', 'store i64 %52, i64* %PC, align 8', '%53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', '%54 = load i64, i64* %53, align 1', '%55 = inttoptr i64 %50 to i64*', 'store i64 %54, i64* %55, align 8', '%.pre = load i64, i64* %PC, align 8', '%56 = phi i64 [ %172, %block_402a2b ], [ %.pre, %block_402a00 ]', '%57 = load i64, i64* %RBP, align 8', '%58 = add i64 %57, -16', 'store i64 %58, i64* %RDI, align 8', '%59 = add i64 %57, -24', 'store i64 %59, i64* %RSI, align 8', '%60 = add i64 %56, 107', '%61 = add i64 %56, 13', '%62 = load i64, i64* %RSP, align 8', '%63 = add i64 %62, -8', '%64 = inttoptr i64 %63 to i64*', 'store i64 %61, i64* %64, align 8', 'store i64 %63, i64* %RSP, align 8', 'store i64 %60, i64* %PC, align 8', '%65 = tail call %struct.Memory* @sub_402a80__ZneI14Double_pointerEiRKT_S3__renamed_(%struct.State* nonnull %0, i64 %60, %struct.Memory* %2)', '%67 = load i64, i64* %PC, align 8', '%68 = and i32 %66, 255', '%69 = tail call i32 @llvm.ctpop.i32(i32 %68) #12', '%70 = trunc i32 %69 to i8', '%71 = and i8 %70, 1', '%72 = xor i8 %71, 1', 'store i8 %72, i8* %20, align 1', '%74 = zext i1 %73 to i8', 'store i8 %74, i8* %29, align 1', '%75 = lshr i32 %66, 31', '%76 = trunc i32 %75 to i8', 'store i8 %76, i8* %32, align 1', '%.v = select i1 %73, i64 73, i64 9', '%77 = add i64 %67, %.v', 'store i64 %77, i64* %PC, align 8', '%78 = load i64, i64* %RBP, align 8', '%79 = add i64 %78, -32', '%80 = add i64 %77, 4', 'store i64 %80, i64* %PC, align 8', '%81 = inttoptr i64 %79 to i64*', '%82 = load i64, i64* %81, align 8', 'store i64 %82, i64* %RAX, align 8', '%83 = add i64 %78, -8', '%84 = add i64 %77, 8', 'store i64 %84, i64* %PC, align 8', '%85 = inttoptr i64 %83 to i64*', 'store i64 %82, i64* %85, align 8', '%86 = load i64, i64* %RBP, align 8', '%87 = add i64 %86, -8', '%89 = add i64 %88, 5', 'store i64 %89, i64* %PC, align 8', '%90 = inttoptr i64 %87 to i64*', '%91 = load i64, i64* %90, align 8', 'store i64 %91, i64* %53, align 1', '%92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%93 = bitcast i64* %92 to double*', 'store double 0.000000e+00, double* %93, align 1', '%94 = load i64, i64* %RSP, align 8', '%95 = add i64 %94, 48', 'store i64 %95, i64* %RSP, align 8', '%96 = icmp ugt i64 %94, -49', '%97 = zext i1 %96 to i8', 'store i8 %97, i8* %13, align 1', '%98 = trunc i64 %95 to i32', '%99 = and i32 %98, 255', '%100 = tail call i32 @llvm.ctpop.i32(i32 %99) #12', '%101 = trunc i32 %100 to i8', '%102 = and i8 %101, 1', '%103 = xor i8 %102, 1', 'store i8 %103, i8* %20, align 1', '%104 = xor i64 %94, 16', '%105 = xor i64 %104, %95', '%106 = lshr i64 %105, 4', '%107 = trunc i64 %106 to i8', '%108 = and i8 %107, 1', 'store i8 %108, i8* %26, align 1', '%109 = icmp eq i64 %95, 0', '%110 = zext i1 %109 to i8', 'store i8 %110, i8* %29, align 1', '%111 = lshr i64 %95, 63', '%112 = trunc i64 %111 to i8', 'store i8 %112, i8* %32, align 1', '%113 = lshr i64 %94, 63', '%114 = xor i64 %111, %113', '%115 = add nuw nsw i64 %114, %111', '%116 = icmp eq i64 %115, 2', '%117 = zext i1 %116 to i8', 'store i8 %117, i8* %38, align 1', '%118 = add i64 %88, 10', 'store i64 %118, i64* %PC, align 8', '%119 = add i64 %94, 56', '%120 = inttoptr i64 %95 to i64*', '%121 = load i64, i64* %120, align 8', 'store i64 %121, i64* %RBP, align 8', 'store i64 %119, i64* %RSP, align 8', '%122 = add i64 %88, 11', 'store i64 %122, i64* %PC, align 8', '%123 = inttoptr i64 %119 to i64*', '%124 = load i64, i64* %123, align 8', 'store i64 %124, i64* %PC, align 8', '%125 = add i64 %94, 64', 'store i64 %125, i64* %RSP, align 8', '%126 = add i64 %78, -16', 'store i64 %126, i64* %RDI, align 8', '%127 = add i64 %77, 149', '%128 = add i64 %77, 11', '%129 = load i64, i64* %RSP, align 8', '%130 = add i64 %129, -8', '%131 = inttoptr i64 %130 to i64*', 'store i64 %128, i64* %131, align 8', 'store i64 %130, i64* %RSP, align 8', 'store i64 %127, i64* %PC, align 8', '%132 = tail call %struct.Memory* @sub_402ac0__ZN14Double_pointerppEi_renamed_(%struct.State* nonnull %0, i64 %127, %struct.Memory* %2)', '%133 = load i64, i64* %RBP, align 8', '%134 = add i64 %133, -48', 'store i64 %134, i64* %RDI, align 8', '%136 = load i64, i64* %RAX, align 8', '%137 = add i64 %135, 8', 'store i64 %137, i64* %PC, align 8', '%138 = inttoptr i64 %134 to i64*', 'store i64 %136, i64* %138, align 8', '%139 = load i64, i64* %PC, align 8', '%140 = add i64 %139, -3134', '%141 = add i64 %139, 5', '%142 = load i64, i64* %RSP, align 8', '%143 = add i64 %142, -8', '%144 = inttoptr i64 %143 to i64*', 'store i64 %141, i64* %144, align 8', 'store i64 %143, i64* %RSP, align 8', 'store i64 %140, i64* %PC, align 8', '%145 = tail call %struct.Memory* @sub_401e00__ZNK14Double_pointerdeEv_renamed_(%struct.State* nonnull %0, i64 %140, %struct.Memory* %2)', '%146 = load i64, i64* %PC, align 8', '%147 = load i64, i64* %RBP, align 8', '%148 = add i64 %147, -32', 'store i64 %148, i64* %RSI, align 8', '%149 = load i64, i64* %RAX, align 8', 'store i64 %149, i64* %RDX, align 8', '%150 = add i64 %146, -6371', '%151 = add i64 %146, 22', '%152 = load i64, i64* %RSP, align 8', '%153 = add i64 %152, -8', '%154 = inttoptr i64 %153 to i64*', 'store i64 %151, i64* %154, align 8', 'store i64 %153, i64* %RSP, align 8', 'store i64 %150, i64* %PC, align 8', '%155 = tail call %struct.Memory* @sub_401160__ZN3__0clERK6DoubleS2__renamed_(%struct.State* nonnull %0, i64 %150, %struct.Memory* %2)', '%156 = load i64, i64* %RBP, align 8', '%157 = add i64 %156, -40', '%159 = add i64 %158, 5', 'store i64 %159, i64* %PC, align 8', '%160 = load i64, i64* %53, align 1', '%161 = inttoptr i64 %157 to i64*', 'store i64 %160, i64* %161, align 8', '%162 = load i64, i64* %RBP, align 8', '%163 = add i64 %162, -40', '%165 = add i64 %164, 4', 'store i64 %165, i64* %PC, align 8', '%166 = inttoptr i64 %163 to i64*', '%167 = load i64, i64* %166, align 8', 'store i64 %167, i64* %RAX, align 8', '%168 = add i64 %162, -32', '%169 = add i64 %164, 8', 'store i64 %169, i64* %PC, align 8', '%170 = inttoptr i64 %168 to i64*', 'store i64 %167, i64* %170, align 8', '%171 = load i64, i64* %PC, align 8', '%172 = add i64 %171, -81', 'store i64 %172, i64* %PC, align 8'])
Keep: block_402a00:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %EAX = bitcast %union.anon* %3 to i32*
Found line to remove! %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Found line to remove! %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Keep: %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Keep: %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %PC, align 8
Found line to remove! %6 = load i64, i64* %RSP, align 8
Found line to remove! %7 = add i64 %6, -8
Found line to remove! %8 = inttoptr i64 %7 to i64*
Found line to remove! store i64 %4, i64* %8, align 8
Keep: %9 = load i64, i64* %PC, align 8
Found line to remove! store i64 %7, i64* %RBP, align 8
Found line to remove! %10 = add i64 %6, -56
Found line to remove! store i64 %10, i64* %RSP, align 8
Found line to remove! %11 = icmp ult i64 %7, 48
Found line to remove! %12 = zext i1 %11 to i8
Keep: %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %12, i8* %13, align 1
Found line to remove! %14 = trunc i64 %10 to i32
Found line to remove! %15 = and i32 %14, 255
Found line to remove! %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #12
Found line to remove! %17 = trunc i32 %16 to i8
Found line to remove! %18 = and i8 %17, 1
Found line to remove! %19 = xor i8 %18, 1
Keep: %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %19, i8* %20, align 1
Found line to remove! %21 = xor i64 %7, 16
Found line to remove! %22 = xor i64 %21, %10
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Keep: %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %10, 0
Found line to remove! %28 = zext i1 %27 to i8
Keep: %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %10, 63
Found line to remove! %31 = trunc i64 %30 to i8
Keep: %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %7, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Keep: %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %39 = add i64 %6, -24
Found line to remove! %40 = load i64, i64* %RDI, align 8
Found line to remove! %41 = add i64 %9, 11
Found line to remove! store i64 %41, i64* %PC, align 8
Found line to remove! %42 = inttoptr i64 %39 to i64*
Found line to remove! store i64 %40, i64* %42, align 8
Found line to remove! %43 = load i64, i64* %RBP, align 8
Found line to remove! %44 = add i64 %43, -24
Found line to remove! %45 = load i64, i64* %RSI, align 8
Keep: %46 = load i64, i64* %PC, align 8
Found line to remove! %47 = add i64 %46, 4
Found line to remove! store i64 %47, i64* %PC, align 8
Found line to remove! %48 = inttoptr i64 %44 to i64*
Found line to remove! store i64 %45, i64* %48, align 8
Found line to remove! %49 = load i64, i64* %RBP, align 8
Found line to remove! %50 = add i64 %49, -32
Keep: %51 = load i64, i64* %PC, align 8
Found line to remove! %52 = add i64 %51, 5
Found line to remove! store i64 %52, i64* %PC, align 8
Found line to remove! %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! %54 = load i64, i64* %53, align 1
Found line to remove! %55 = inttoptr i64 %50 to i64*
Found line to remove! store i64 %54, i64* %55, align 8
Found line to remove! %.pre = load i64, i64* %PC, align 8
Keep: br label %block_402a15
Keep: 
Keep: block_402a15:                                     ; preds = %block_402a2b, %block_402a00
Found line to remove! %56 = phi i64 [ %172, %block_402a2b ], [ %.pre, %block_402a00 ]
Found line to remove! %57 = load i64, i64* %RBP, align 8
Found line to remove! %58 = add i64 %57, -16
Found line to remove! store i64 %58, i64* %RDI, align 8
Found line to remove! %59 = add i64 %57, -24
Found line to remove! store i64 %59, i64* %RSI, align 8
Found line to remove! %60 = add i64 %56, 107
Found line to remove! %61 = add i64 %56, 13
Found line to remove! %62 = load i64, i64* %RSP, align 8
Found line to remove! %63 = add i64 %62, -8
Found line to remove! %64 = inttoptr i64 %63 to i64*
Found line to remove! store i64 %61, i64* %64, align 8
Found line to remove! store i64 %63, i64* %RSP, align 8
Found line to remove! store i64 %60, i64* %PC, align 8
Found line to remove! %65 = tail call %struct.Memory* @sub_402a80__ZneI14Double_pointerEiRKT_S3__renamed_(%struct.State* nonnull %0, i64 %60, %struct.Memory* %2)
Keep: %66 = load i32, i32* %EAX, align 4
Found line to remove! %67 = load i64, i64* %PC, align 8
Keep: store i8 0, i8* %13, align 1
Found line to remove! %68 = and i32 %66, 255
Found line to remove! %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #12
Found line to remove! %70 = trunc i32 %69 to i8
Found line to remove! %71 = and i8 %70, 1
Found line to remove! %72 = xor i8 %71, 1
Found line to remove! store i8 %72, i8* %20, align 1
Keep: store i8 0, i8* %26, align 1
Keep: %73 = icmp eq i32 %66, 0
Found line to remove! %74 = zext i1 %73 to i8
Found line to remove! store i8 %74, i8* %29, align 1
Found line to remove! %75 = lshr i32 %66, 31
Found line to remove! %76 = trunc i32 %75 to i8
Found line to remove! store i8 %76, i8* %32, align 1
Keep: store i8 0, i8* %38, align 1
Found line to remove! %.v = select i1 %73, i64 73, i64 9
Found line to remove! %77 = add i64 %67, %.v
Found line to remove! store i64 %77, i64* %PC, align 8
Found line to remove! %78 = load i64, i64* %RBP, align 8
Keep: br i1 %73, label %block_402a6b, label %block_402a2b
Keep: 
Keep: block_402a6b:                                     ; preds = %block_402a15
Found line to remove! %79 = add i64 %78, -32
Found line to remove! %80 = add i64 %77, 4
Found line to remove! store i64 %80, i64* %PC, align 8
Found line to remove! %81 = inttoptr i64 %79 to i64*
Found line to remove! %82 = load i64, i64* %81, align 8
Found line to remove! store i64 %82, i64* %RAX, align 8
Found line to remove! %83 = add i64 %78, -8
Found line to remove! %84 = add i64 %77, 8
Found line to remove! store i64 %84, i64* %PC, align 8
Found line to remove! %85 = inttoptr i64 %83 to i64*
Found line to remove! store i64 %82, i64* %85, align 8
Found line to remove! %86 = load i64, i64* %RBP, align 8
Found line to remove! %87 = add i64 %86, -8
Keep: %88 = load i64, i64* %PC, align 8
Found line to remove! %89 = add i64 %88, 5
Found line to remove! store i64 %89, i64* %PC, align 8
Found line to remove! %90 = inttoptr i64 %87 to i64*
Found line to remove! %91 = load i64, i64* %90, align 8
Found line to remove! store i64 %91, i64* %53, align 1
Found line to remove! %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %93 = bitcast i64* %92 to double*
Found line to remove! store double 0.000000e+00, double* %93, align 1
Found line to remove! %94 = load i64, i64* %RSP, align 8
Found line to remove! %95 = add i64 %94, 48
Found line to remove! store i64 %95, i64* %RSP, align 8
Found line to remove! %96 = icmp ugt i64 %94, -49
Found line to remove! %97 = zext i1 %96 to i8
Found line to remove! store i8 %97, i8* %13, align 1
Found line to remove! %98 = trunc i64 %95 to i32
Found line to remove! %99 = and i32 %98, 255
Found line to remove! %100 = tail call i32 @llvm.ctpop.i32(i32 %99) #12
Found line to remove! %101 = trunc i32 %100 to i8
Found line to remove! %102 = and i8 %101, 1
Found line to remove! %103 = xor i8 %102, 1
Found line to remove! store i8 %103, i8* %20, align 1
Found line to remove! %104 = xor i64 %94, 16
Found line to remove! %105 = xor i64 %104, %95
Found line to remove! %106 = lshr i64 %105, 4
Found line to remove! %107 = trunc i64 %106 to i8
Found line to remove! %108 = and i8 %107, 1
Found line to remove! store i8 %108, i8* %26, align 1
Found line to remove! %109 = icmp eq i64 %95, 0
Found line to remove! %110 = zext i1 %109 to i8
Found line to remove! store i8 %110, i8* %29, align 1
Found line to remove! %111 = lshr i64 %95, 63
Found line to remove! %112 = trunc i64 %111 to i8
Found line to remove! store i8 %112, i8* %32, align 1
Found line to remove! %113 = lshr i64 %94, 63
Found line to remove! %114 = xor i64 %111, %113
Found line to remove! %115 = add nuw nsw i64 %114, %111
Found line to remove! %116 = icmp eq i64 %115, 2
Found line to remove! %117 = zext i1 %116 to i8
Found line to remove! store i8 %117, i8* %38, align 1
Found line to remove! %118 = add i64 %88, 10
Found line to remove! store i64 %118, i64* %PC, align 8
Found line to remove! %119 = add i64 %94, 56
Found line to remove! %120 = inttoptr i64 %95 to i64*
Found line to remove! %121 = load i64, i64* %120, align 8
Found line to remove! store i64 %121, i64* %RBP, align 8
Found line to remove! store i64 %119, i64* %RSP, align 8
Found line to remove! %122 = add i64 %88, 11
Found line to remove! store i64 %122, i64* %PC, align 8
Found line to remove! %123 = inttoptr i64 %119 to i64*
Found line to remove! %124 = load i64, i64* %123, align 8
Found line to remove! store i64 %124, i64* %PC, align 8
Found line to remove! %125 = add i64 %94, 64
Found line to remove! store i64 %125, i64* %RSP, align 8
Keep: ret %struct.Memory* %2
Keep: 
Keep: block_402a2b:                                     ; preds = %block_402a15
Found line to remove! %126 = add i64 %78, -16
Found line to remove! store i64 %126, i64* %RDI, align 8
Keep: store i64 0, i64* %RSI, align 8
Keep: store i8 0, i8* %13, align 1
Keep: store i8 1, i8* %20, align 1
Keep: store i8 1, i8* %29, align 1
Keep: store i8 0, i8* %32, align 1
Keep: store i8 0, i8* %38, align 1
Keep: store i8 0, i8* %26, align 1
Found line to remove! %127 = add i64 %77, 149
Found line to remove! %128 = add i64 %77, 11
Found line to remove! %129 = load i64, i64* %RSP, align 8
Found line to remove! %130 = add i64 %129, -8
Found line to remove! %131 = inttoptr i64 %130 to i64*
Found line to remove! store i64 %128, i64* %131, align 8
Found line to remove! store i64 %130, i64* %RSP, align 8
Found line to remove! store i64 %127, i64* %PC, align 8
Found line to remove! %132 = tail call %struct.Memory* @sub_402ac0__ZN14Double_pointerppEi_renamed_(%struct.State* nonnull %0, i64 %127, %struct.Memory* %2)
Found line to remove! %133 = load i64, i64* %RBP, align 8
Found line to remove! %134 = add i64 %133, -48
Keep: %135 = load i64, i64* %PC, align 8
Found line to remove! store i64 %134, i64* %RDI, align 8
Found line to remove! %136 = load i64, i64* %RAX, align 8
Found line to remove! %137 = add i64 %135, 8
Found line to remove! store i64 %137, i64* %PC, align 8
Found line to remove! %138 = inttoptr i64 %134 to i64*
Found line to remove! store i64 %136, i64* %138, align 8
Found line to remove! %139 = load i64, i64* %PC, align 8
Found line to remove! %140 = add i64 %139, -3134
Found line to remove! %141 = add i64 %139, 5
Found line to remove! %142 = load i64, i64* %RSP, align 8
Found line to remove! %143 = add i64 %142, -8
Found line to remove! %144 = inttoptr i64 %143 to i64*
Found line to remove! store i64 %141, i64* %144, align 8
Found line to remove! store i64 %143, i64* %RSP, align 8
Found line to remove! store i64 %140, i64* %PC, align 8
Found line to remove! %145 = tail call %struct.Memory* @sub_401e00__ZNK14Double_pointerdeEv_renamed_(%struct.State* nonnull %0, i64 %140, %struct.Memory* %2)
Found line to remove! %146 = load i64, i64* %PC, align 8
Keep: store i64 add (i64 ptrtoint (%rrDPe_type* @rrDPe to i64), i64 8), i64* %RDI, align 8
Found line to remove! %147 = load i64, i64* %RBP, align 8
Found line to remove! %148 = add i64 %147, -32
Found line to remove! store i64 %148, i64* %RSI, align 8
Found line to remove! %149 = load i64, i64* %RAX, align 8
Found line to remove! store i64 %149, i64* %RDX, align 8
Found line to remove! %150 = add i64 %146, -6371
Found line to remove! %151 = add i64 %146, 22
Found line to remove! %152 = load i64, i64* %RSP, align 8
Found line to remove! %153 = add i64 %152, -8
Found line to remove! %154 = inttoptr i64 %153 to i64*
Found line to remove! store i64 %151, i64* %154, align 8
Found line to remove! store i64 %153, i64* %RSP, align 8
Found line to remove! store i64 %150, i64* %PC, align 8
Found line to remove! %155 = tail call %struct.Memory* @sub_401160__ZN3__0clERK6DoubleS2__renamed_(%struct.State* nonnull %0, i64 %150, %struct.Memory* %2)
Found line to remove! %156 = load i64, i64* %RBP, align 8
Found line to remove! %157 = add i64 %156, -40
Keep: %158 = load i64, i64* %PC, align 8
Found line to remove! %159 = add i64 %158, 5
Found line to remove! store i64 %159, i64* %PC, align 8
Found line to remove! %160 = load i64, i64* %53, align 1
Found line to remove! %161 = inttoptr i64 %157 to i64*
Found line to remove! store i64 %160, i64* %161, align 8
Found line to remove! %162 = load i64, i64* %RBP, align 8
Found line to remove! %163 = add i64 %162, -40
Keep: %164 = load i64, i64* %PC, align 8
Found line to remove! %165 = add i64 %164, 4
Found line to remove! store i64 %165, i64* %PC, align 8
Found line to remove! %166 = inttoptr i64 %163 to i64*
Found line to remove! %167 = load i64, i64* %166, align 8
Found line to remove! store i64 %167, i64* %RAX, align 8
Found line to remove! %168 = add i64 %162, -32
Found line to remove! %169 = add i64 %164, 8
Found line to remove! store i64 %169, i64* %PC, align 8
Found line to remove! %170 = inttoptr i64 %168 to i64*
Found line to remove! store i64 %167, i64* %170, align 8
Found line to remove! %171 = load i64, i64* %PC, align 8
Found line to remove! %172 = add i64 %171, -81
Found line to remove! store i64 %172, i64* %PC, align 8
Keep: br label %block_402a15
Missed: dict_keys(['%RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %PC, align 8', '%6 = load i64, i64* %RSP, align 8', '%7 = add i64 %6, -8', '%8 = inttoptr i64 %7 to i64*', 'store i64 %4, i64* %8, align 8', 'store i64 %7, i64* %RBP, align 8', '%10 = add i64 %6, -56', 'store i64 %10, i64* %RSP, align 8', '%11 = icmp ult i64 %7, 48', '%12 = zext i1 %11 to i8', 'store i8 %12, i8* %13, align 1', '%14 = trunc i64 %10 to i32', '%15 = and i32 %14, 255', '%16 = tail call i32 @llvm.ctpop.i32(i32 %15) #12', '%17 = trunc i32 %16 to i8', '%18 = and i8 %17, 1', '%19 = xor i8 %18, 1', 'store i8 %19, i8* %20, align 1', '%21 = xor i64 %7, 16', '%22 = xor i64 %21, %10', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %10, 0', '%28 = zext i1 %27 to i8', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %10, 63', '%31 = trunc i64 %30 to i8', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %7, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', 'store i8 %37, i8* %38, align 1', '%39 = add i64 %6, -24', '%40 = load i64, i64* %RDI, align 8', '%41 = add i64 %9, 11', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %39 to i64*', 'store i64 %40, i64* %42, align 8', '%43 = load i64, i64* %RBP, align 8', '%44 = add i64 %43, -24', '%45 = load i64, i64* %RSI, align 8', '%47 = add i64 %46, 4', 'store i64 %47, i64* %PC, align 8', '%48 = inttoptr i64 %44 to i64*', 'store i64 %45, i64* %48, align 8', '%49 = load i64, i64* %RBP, align 8', '%50 = add i64 %49, -32', '%52 = add i64 %51, 5', 'store i64 %52, i64* %PC, align 8', '%53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', '%54 = load i64, i64* %53, align 1', '%55 = inttoptr i64 %50 to i64*', 'store i64 %54, i64* %55, align 8', '%.pre = load i64, i64* %PC, align 8', '%56 = phi i64 [ %172, %block_402a2b ], [ %.pre, %block_402a00 ]', '%57 = load i64, i64* %RBP, align 8', '%58 = add i64 %57, -16', 'store i64 %58, i64* %RDI, align 8', '%59 = add i64 %57, -24', 'store i64 %59, i64* %RSI, align 8', '%60 = add i64 %56, 107', '%61 = add i64 %56, 13', '%62 = load i64, i64* %RSP, align 8', '%63 = add i64 %62, -8', '%64 = inttoptr i64 %63 to i64*', 'store i64 %61, i64* %64, align 8', 'store i64 %63, i64* %RSP, align 8', 'store i64 %60, i64* %PC, align 8', '%65 = tail call %struct.Memory* @sub_402a80__ZneI14Double_pointerEiRKT_S3__renamed_(%struct.State* nonnull %0, i64 %60, %struct.Memory* %2)', '%67 = load i64, i64* %PC, align 8', '%68 = and i32 %66, 255', '%69 = tail call i32 @llvm.ctpop.i32(i32 %68) #12', '%70 = trunc i32 %69 to i8', '%71 = and i8 %70, 1', '%72 = xor i8 %71, 1', 'store i8 %72, i8* %20, align 1', '%74 = zext i1 %73 to i8', 'store i8 %74, i8* %29, align 1', '%75 = lshr i32 %66, 31', '%76 = trunc i32 %75 to i8', 'store i8 %76, i8* %32, align 1', '%.v = select i1 %73, i64 73, i64 9', '%77 = add i64 %67, %.v', 'store i64 %77, i64* %PC, align 8', '%78 = load i64, i64* %RBP, align 8', '%79 = add i64 %78, -32', '%80 = add i64 %77, 4', 'store i64 %80, i64* %PC, align 8', '%81 = inttoptr i64 %79 to i64*', '%82 = load i64, i64* %81, align 8', 'store i64 %82, i64* %RAX, align 8', '%83 = add i64 %78, -8', '%84 = add i64 %77, 8', 'store i64 %84, i64* %PC, align 8', '%85 = inttoptr i64 %83 to i64*', 'store i64 %82, i64* %85, align 8', '%86 = load i64, i64* %RBP, align 8', '%87 = add i64 %86, -8', '%89 = add i64 %88, 5', 'store i64 %89, i64* %PC, align 8', '%90 = inttoptr i64 %87 to i64*', '%91 = load i64, i64* %90, align 8', 'store i64 %91, i64* %53, align 1', '%92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%93 = bitcast i64* %92 to double*', 'store double 0.000000e+00, double* %93, align 1', '%94 = load i64, i64* %RSP, align 8', '%95 = add i64 %94, 48', 'store i64 %95, i64* %RSP, align 8', '%96 = icmp ugt i64 %94, -49', '%97 = zext i1 %96 to i8', 'store i8 %97, i8* %13, align 1', '%98 = trunc i64 %95 to i32', '%99 = and i32 %98, 255', '%100 = tail call i32 @llvm.ctpop.i32(i32 %99) #12', '%101 = trunc i32 %100 to i8', '%102 = and i8 %101, 1', '%103 = xor i8 %102, 1', 'store i8 %103, i8* %20, align 1', '%104 = xor i64 %94, 16', '%105 = xor i64 %104, %95', '%106 = lshr i64 %105, 4', '%107 = trunc i64 %106 to i8', '%108 = and i8 %107, 1', 'store i8 %108, i8* %26, align 1', '%109 = icmp eq i64 %95, 0', '%110 = zext i1 %109 to i8', 'store i8 %110, i8* %29, align 1', '%111 = lshr i64 %95, 63', '%112 = trunc i64 %111 to i8', 'store i8 %112, i8* %32, align 1', '%113 = lshr i64 %94, 63', '%114 = xor i64 %111, %113', '%115 = add nuw nsw i64 %114, %111', '%116 = icmp eq i64 %115, 2', '%117 = zext i1 %116 to i8', 'store i8 %117, i8* %38, align 1', '%118 = add i64 %88, 10', 'store i64 %118, i64* %PC, align 8', '%119 = add i64 %94, 56', '%120 = inttoptr i64 %95 to i64*', '%121 = load i64, i64* %120, align 8', 'store i64 %121, i64* %RBP, align 8', 'store i64 %119, i64* %RSP, align 8', '%122 = add i64 %88, 11', 'store i64 %122, i64* %PC, align 8', '%123 = inttoptr i64 %119 to i64*', '%124 = load i64, i64* %123, align 8', 'store i64 %124, i64* %PC, align 8', '%125 = add i64 %94, 64', 'store i64 %125, i64* %RSP, align 8', '%126 = add i64 %78, -16', 'store i64 %126, i64* %RDI, align 8', '%127 = add i64 %77, 149', '%128 = add i64 %77, 11', '%129 = load i64, i64* %RSP, align 8', '%130 = add i64 %129, -8', '%131 = inttoptr i64 %130 to i64*', 'store i64 %128, i64* %131, align 8', 'store i64 %130, i64* %RSP, align 8', 'store i64 %127, i64* %PC, align 8', '%132 = tail call %struct.Memory* @sub_402ac0__ZN14Double_pointerppEi_renamed_(%struct.State* nonnull %0, i64 %127, %struct.Memory* %2)', '%133 = load i64, i64* %RBP, align 8', '%134 = add i64 %133, -48', 'store i64 %134, i64* %RDI, align 8', '%136 = load i64, i64* %RAX, align 8', '%137 = add i64 %135, 8', 'store i64 %137, i64* %PC, align 8', '%138 = inttoptr i64 %134 to i64*', 'store i64 %136, i64* %138, align 8', '%139 = load i64, i64* %PC, align 8', '%140 = add i64 %139, -3134', '%141 = add i64 %139, 5', '%142 = load i64, i64* %RSP, align 8', '%143 = add i64 %142, -8', '%144 = inttoptr i64 %143 to i64*', 'store i64 %141, i64* %144, align 8', 'store i64 %143, i64* %RSP, align 8', 'store i64 %140, i64* %PC, align 8', '%145 = tail call %struct.Memory* @sub_401e00__ZNK14Double_pointerdeEv_renamed_(%struct.State* nonnull %0, i64 %140, %struct.Memory* %2)', '%146 = load i64, i64* %PC, align 8', '%147 = load i64, i64* %RBP, align 8', '%148 = add i64 %147, -32', 'store i64 %148, i64* %RSI, align 8', '%149 = load i64, i64* %RAX, align 8', 'store i64 %149, i64* %RDX, align 8', '%150 = add i64 %146, -6371', '%151 = add i64 %146, 22', '%152 = load i64, i64* %RSP, align 8', '%153 = add i64 %152, -8', '%154 = inttoptr i64 %153 to i64*', 'store i64 %151, i64* %154, align 8', 'store i64 %153, i64* %RSP, align 8', 'store i64 %150, i64* %PC, align 8', '%155 = tail call %struct.Memory* @sub_401160__ZN3__0clERK6DoubleS2__renamed_(%struct.State* nonnull %0, i64 %150, %struct.Memory* %2)', '%156 = load i64, i64* %RBP, align 8', '%157 = add i64 %156, -40', '%159 = add i64 %158, 5', 'store i64 %159, i64* %PC, align 8', '%160 = load i64, i64* %53, align 1', '%161 = inttoptr i64 %157 to i64*', 'store i64 %160, i64* %161, align 8', '%162 = load i64, i64* %RBP, align 8', '%163 = add i64 %162, -40', '%165 = add i64 %164, 4', 'store i64 %165, i64* %PC, align 8', '%166 = inttoptr i64 %163 to i64*', '%167 = load i64, i64* %166, align 8', 'store i64 %167, i64* %RAX, align 8', '%168 = add i64 %162, -32', '%169 = add i64 %164, 8', 'store i64 %169, i64* %PC, align 8', '%170 = inttoptr i64 %168 to i64*', 'store i64 %167, i64* %170, align 8', '%171 = load i64, i64* %PC, align 8', '%172 = add i64 %171, -81', 'store i64 %172, i64* %PC, align 8'])/home/ubuntu/Install/llvm/llvm.4.0.0.install/bin/opt: /tmp/tmp9faugjdw-query.ll:368:111: error: use of undefined value '%var_2_102'
%call2_402a54 = tail call %struct.Memory* @"sub_401160._ZN3$_0clERK6DoubleS2_"(%struct.State* nonnull %0, i64 %var_2_102, %struct.Memory* %2)
                                                                                                              ^

[x] Failed to do opt
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/stepanov_v1p2/_Z10accumulateI14Double_pointer6DoubleET0_T_S3_S2_/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/stepanov_v1p2/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
Traceback (most recent call last):
  File "/usr/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/usr/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/ubuntu/Github/llir-matcher/matcher/match.py", line 728, in <module>
    matcher.do_match()
  File "/home/ubuntu/Github/llir-matcher/matcher/match.py", line 101, in do_match
    self.do_opt()
  File "/home/ubuntu/Github/llir-matcher/matcher/match.py", line 582, in do_opt
    env=MYENV)
  File "/usr/lib/python3.6/subprocess.py", line 311, in check_call
    raise CalledProcessError(retcode, cmd)
subprocess.CalledProcessError: Command '/home/ubuntu/Install/llvm/llvm.4.0.0.install/bin/opt -S -inline /tmp/tmp9faugjdw-query.ll -o /tmp/tmp9faugjdw-query.ll' returned non-zero exit status 1.
