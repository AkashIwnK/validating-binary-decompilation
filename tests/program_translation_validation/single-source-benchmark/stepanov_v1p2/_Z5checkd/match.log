Writing '/tmp/tmpty4l_xga.dot'...
Writing '/tmp/tmpty4l_xga.dot':Done

Reading LLVM: /tmp/tmp1oyruhm5-query.ll
Extracting function [_Z5checkd] from /tmp/tmp1oyruhm5-query.ll
Dot file generated!
Writing '/tmp/tmpxn0ct2yz.dot'...
Writing '/tmp/tmpxn0ct2yz.dot':Done

Reading LLVM: /tmp/tmpnxlkqevs-target.ll
Extracting function [_Z5checkd] from /tmp/tmpnxlkqevs-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -24
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 16
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, 16
- 27 %23 = xor i64 %22, %11
- 28 %24 = lshr i64 %23, 4
- 29 %25 = trunc i64 %24 to i8
- 30 %26 = and i8 %25, 1
- 31 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 32 store i8 %26, i8* %27, align 1
- 33 %28 = icmp eq i64 %11, 0
- 34 %29 = zext i1 %28 to i8
- 35 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 36 store i8 %29, i8* %30, align 1
- 37 %31 = lshr i64 %11, 63
- 38 %32 = trunc i64 %31 to i8
- 39 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 40 store i8 %32, i8* %33, align 1
- 41 %34 = lshr i64 %8, 63
- 42 %35 = xor i64 %31, %34
- 43 %36 = add nuw nsw i64 %35, %34
- 44 %37 = icmp eq i64 %36, 2
- 45 %38 = zext i1 %37 to i8
- 46 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 47 store i8 %38, i8* %39, align 1
- 48 %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 49 %41 = add i64 %10, add (i64 ptrtoint (%G_0x19d0__rip__type* @G_0x19d0__rip_ to i64), i64 7)
- 50 %42 = add i64 %10, 15
- 51 store i64 %42, i64* %3, align 8
- 52 %43 = inttoptr i64 %41 to i64*
- 53 %44 = load i64, i64* %43, align 8
- 54 %45 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %40, i64 0, i32 0, i32 0, i32 0, i64 0
- 55 store i64 %44, i64* %45, align 1
- 56 %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
- 57 %47 = bitcast i64* %46 to double*
- 58 store double 0.000000e+00, double* %47, align 1
- 59 %48 = add i64 %7, -16
- 60 %49 = add i64 %10, 20
- 61 store i64 %49, i64* %3, align 8
- 62 %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 63 %51 = load i64, i64* %50, align 1
- 64 %52 = inttoptr i64 %48 to i64*
- 65 store i64 %51, i64* %52, align 8
- 66 %53 = load i64, i64* %RBP.i, align 8
- 67 %54 = add i64 %53, -8
- 68 %55 = load i64, i64* %3, align 8
- 69 %56 = add i64 %55, 5
- 70 store i64 %56, i64* %3, align 8
- 71 %57 = inttoptr i64 %54 to i64*
- 72 %58 = load i64, i64* %57, align 8
- 73 store i64 %58, i64* %50, align 1
- 74 %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 75 %60 = bitcast i64* %59 to double*
- 76 store double 0.000000e+00, double* %60, align 1
- 77 %61 = add i64 %55, 9
- 78 store i64 %61, i64* %3, align 8
- 79 %62 = bitcast i64 %58 to double
- 80 %63 = bitcast %union.VectorReg* %40 to double*
- 81 %64 = load double, double* %63, align 1
- 82 %65 = fcmp uno double %62, %64
- 83 \<badref\> = br i1 %65, label %66, label %76
- 84 %67 = fadd double %62, %64
- 85 %68 = bitcast double %67 to i64
- 86 %69 = and i64 %68, 9221120237041090560
- 87 %70 = icmp eq i64 %69, 9218868437227405312
- 88 %71 = and i64 %68, 2251799813685247
- 89 %72 = icmp ne i64 %71, 0
- 90 %73 = and i1 %70, %72
- 91 \<badref\> = br i1 %73, label %74, label %82
- 92 %75 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %61, %struct.Memory* %2)
- 93 %.pre = load i64, i64* %3, align 8
- 94 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 95 %77 = fcmp ogt double %62, %64
- 96 \<badref\> = br i1 %77, label %82, label %78
- 97 %79 = fcmp olt double %62, %64
- 98 \<badref\> = br i1 %79, label %82, label %80
- 99 %81 = fcmp oeq double %62, %64
- 100 \<badref\> = br i1 %81, label %82, label %86
- 101 %83 = phi i8 [ 0, %76 ], [ 0, %78 ], [ 1, %80 ], [ 1, %66 ]
- 102 %84 = phi i8 [ 0, %76 ], [ 0, %78 ], [ 0, %80 ], [ 1, %66 ]
- 103 %85 = phi i8 [ 0, %76 ], [ 1, %78 ], [ 0, %80 ], [ 1, %66 ]
- 104 store i8 %83, i8* %30, align 1
- 105 store i8 %84, i8* %21, align 1
- 106 store i8 %85, i8* %14, align 1
- 107 \<badref\> = br label %86
- 108 store i8 0, i8* %39, align 1
- 109 store i8 0, i8* %33, align 1
- 110 store i8 0, i8* %27, align 1
- 111 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 112 %87 = phi i64 [ %.pre, %74 ], [ %61, %86 ]
- 113 %88 = phi %struct.Memory* [ %75, %74 ], [ %2, %86 ]
- 114 %89 = add i64 %87, 17
- 115 %90 = add i64 %87, 6
- 116 %91 = load i8, i8* %30, align 1
- 117 %92 = icmp eq i8 %91, 0
- 118 %93 = select i1 %92, i64 %89, i64 %90
- 119 store i64 %93, i64* %3, align 8
- 120 \<badref\> = br i1 %92, label %block_.L_40138f, label %block_401384
- 121 %94 = load i8, i8* %21, align 1
- 122 %95 = icmp ne i8 %94, 0
- 123 %.v = select i1 %95, i64 11, i64 6
- 124 %96 = add i64 %93, %.v
- 125 store i64 %96, i64* %3, align 8
- 126 %cmpBr_401384 = icmp eq i8 %94, 1
- 127 \<badref\> = br i1 %cmpBr_401384, label %block_.L_40138f, label %block_40138a
- 128 %97 = add i64 %96, 32
- 129 store i64 %97, i64* %3, align 8
- 130 \<badref\> = br label %block_.L_4013aa
- 131 %98 = phi i64 [ %96, %block_401384 ], [ %89, %routine_ucomisd__xmm1___xmm0.exit ]
- 132 %RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 133 store i64 ptrtoint (%G__0x402e47_type* @G__0x402e47 to i64), i64* %RDI.i, align 8
- 134 %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 135 %99 = load i32, i32* bitcast (%G_0x605090_type* @G_0x605090 to i32*), align 8
- 136 %100 = zext i32 %99 to i64
- 137 store i64 %100, i64* %RSI.i, align 8
- 138 %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 139 %AL.i = bitcast %union.anon* %101 to i8*
- 140 store i8 0, i8* %AL.i, align 1
- 141 %102 = add i64 %98, -3663
- 142 %103 = add i64 %98, 24
- 143 %104 = load i64, i64* %6, align 8
- 144 %105 = add i64 %104, -8
- 145 %106 = inttoptr i64 %105 to i64*
- 146 store i64 %103, i64* %106, align 8
- 147 store i64 %105, i64* %6, align 8
- 148 store i64 %102, i64* %3, align 8
- 149 %107 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %88)
- 150 %EAX.i = bitcast %union.anon* %101 to i32*
- 151 %108 = load i64, i64* %RBP.i, align 8
- 152 %109 = add i64 %108, -12
- 153 %110 = load i32, i32* %EAX.i, align 4
- 154 %111 = load i64, i64* %3, align 8
- 155 %112 = add i64 %111, 3
- 156 store i64 %112, i64* %3, align 8
- 157 %113 = inttoptr i64 %109 to i32*
- 158 store i32 %110, i32* %113, align 4
- 159 %.pre2 = load i64, i64* %3, align 8
- 160 \<badref\> = br label %block_.L_4013aa
- 161 %114 = phi i64 [ %.pre2, %block_.L_40138f ], [ %97, %block_40138a ]
- 162 %MEMORY.1 = phi %struct.Memory* [ %107, %block_.L_40138f ], [ %88, %block_40138a ]
- 163 %115 = load i64, i64* %6, align 8
- 164 %116 = add i64 %115, 16
- 165 store i64 %116, i64* %6, align 8
- 166 %117 = icmp ugt i64 %115, -17
- 167 %118 = zext i1 %117 to i8
- 168 store i8 %118, i8* %14, align 1
- 169 %119 = trunc i64 %116 to i32
- 170 %120 = and i32 %119, 255
- 171 %121 = tail call i32 @llvm.ctpop.i32(i32 %120)
- 172 %122 = trunc i32 %121 to i8
- 173 %123 = and i8 %122, 1
- 174 %124 = xor i8 %123, 1
- 175 store i8 %124, i8* %21, align 1
- 176 %125 = xor i64 %115, 16
- 177 %126 = xor i64 %125, %116
- 178 %127 = lshr i64 %126, 4
- 179 %128 = trunc i64 %127 to i8
- 180 %129 = and i8 %128, 1
- 181 store i8 %129, i8* %27, align 1
- 182 %130 = icmp eq i64 %116, 0
- 183 %131 = zext i1 %130 to i8
- 184 store i8 %131, i8* %30, align 1
- 185 %132 = lshr i64 %116, 63
- 186 %133 = trunc i64 %132 to i8
- 187 store i8 %133, i8* %33, align 1
- 188 %134 = lshr i64 %115, 63
- 189 %135 = xor i64 %132, %134
- 190 %136 = add nuw nsw i64 %135, %132
- 191 %137 = icmp eq i64 %136, 2
- 192 %138 = zext i1 %137 to i8
- 193 store i8 %138, i8* %39, align 1
- 194 %139 = add i64 %114, 5
- 195 store i64 %139, i64* %3, align 8
- 196 %140 = add i64 %115, 24
- 197 %141 = inttoptr i64 %116 to i64*
- 198 %142 = load i64, i64* %141, align 8
- 199 store i64 %142, i64* %RBP.i, align 8
- 200 store i64 %140, i64* %6, align 8
- 201 %143 = add i64 %114, 6
- 202 store i64 %143, i64* %3, align 8
- 203 %144 = inttoptr i64 %140 to i64*
- 204 %145 = load i64, i64* %144, align 8
- 205 store i64 %145, i64* %3, align 8
- 206 %146 = add i64 %115, 32
- 207 store i64 %146, i64* %6, align 8
- 208 \<badref\> = ret %struct.Memory* %MEMORY.1
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f638c515f28>, {0: {0}, 1: {7}, 2: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 3: {10}, 4: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 5: {6}, 6: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 7: {186, 68, 13}, 8: {65, 164, 198, 72, 14, 187, 158}, 9: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 10: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 11: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 12: {18}, 13: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 14: {20}, 15: {128, 40, 144, 51, 180, 21, 153}, 16: {22}, 17: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 18: {130, 35, 133, 44, 140, 147, 24, 27}, 19: {25, 131}, 20: {26, 132, 93, 191}, 21: {130, 35, 133, 44, 140, 147, 24, 27}, 22: {134, 28, 141, 36}, 23: {29, 135}, 24: {30}, 25: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 26: {32, 137}, 27: {48, 33, 138, 150}, 28: {34, 139}, 29: {130, 35, 133, 44, 140, 147, 24, 27}, 30: {134, 28, 141, 36}, 31: {37}, 32: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 33: {39, 171, 143, 118, 90}, 34: {128, 40, 144, 51, 180, 21, 153}, 35: {41}, 36: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 37: {146, 43, 149, 47}, 38: {130, 35, 133, 44, 140, 147, 24, 27}, 39: {45}, 40: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 41: {146, 43, 149, 47}, 42: {48, 33, 138, 150}, 43: {49, 173, 151}, 44: {152, 50}, 45: {128, 40, 144, 51, 180, 21, 153}, 46: {52}, 47: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 48: {8}, 49: {49, 173, 151}, 50: set(), 51: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 52: {65, 164, 198, 72, 14, 187, 158}, 53: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 54: {55}, 55: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 56: {57}, 57: {2, 3, 76, 80, 81, 86, 58}, 58: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 59: {60}, 60: {61}, 61: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 62: {63}, 63: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 64: {65, 164, 198, 72, 14, 187, 158}, 65: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 66: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 67: {186, 68, 13}, 68: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 69: {155, 70}, 70: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 71: {65, 164, 198, 72, 14, 187, 158}, 72: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 73: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 74: {75}, 75: {2, 3, 76, 80, 81, 86, 58}, 76: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 77: {78}, 78: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 79: {2, 3, 76, 80, 81, 86, 58}, 80: {2, 3, 76, 80, 81, 86, 58}, 81: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 82: {96, 98, 83, 100}, 83: {97, 99, 101, 176, 84, 121, 92}, 84: {85}, 85: {2, 3, 76, 80, 81, 86, 58}, 86: {87}, 87: {88}, 88: {89}, 89: {39, 171, 143, 118, 90}, 90: {91}, 91: {97, 99, 101, 176, 84, 121, 92}, 92: {26, 132, 93, 191}, 93: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 94: {201, 204, 108, 112, 95}, 95: {96, 98, 83, 100}, 96: {97, 99, 101, 176, 84, 121, 92}, 97: {96, 98, 83, 100}, 98: {97, 99, 101, 176, 84, 121, 92}, 99: {96, 98, 83, 100}, 100: {97, 99, 101, 176, 84, 121, 92}, 101: {102}, 102: {103}, 103: {104}, 104: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 105: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 106: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 107: {201, 204, 108, 112, 95}, 108: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 109: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 110: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 111: {201, 204, 108, 112, 95}, 112: {177, 113, 114, 122, 123}, 113: {177, 113, 114, 122, 123}, 114: {115}, 115: {162, 116}, 116: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 117: {39, 171, 143, 118, 90}, 118: {119}, 119: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 120: {97, 99, 101, 176, 84, 121, 92}, 121: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 122: {39, 171, 143, 118, 90}, 123: {172}, 124: {49, 173, 151}, 125: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 126: {175}, 127: {97, 99, 101, 176, 84, 121, 92}, 128: {202, 167}, 129: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 130: {201, 204, 108, 112, 95}, 131: {177, 113, 114, 122, 123}, 132: {5}, 133: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 134: {4}, 135: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 136: {128, 40, 144, 51, 180, 21, 153}, 137: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 138: {1}, 139: {2, 3, 76, 80, 81, 86, 58}, 140: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 141: {183}, 142: {184, 157}, 143: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 144: {186, 68, 13}, 145: {65, 164, 198, 72, 14, 187, 158}, 146: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 147: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 148: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 149: {26, 132, 93, 191}, 150: {2, 3, 76, 80, 81, 86, 58}, 151: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 152: {193}, 153: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 154: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 155: {196}, 156: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 157: {65, 164, 198, 72, 14, 187, 158}, 158: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 159: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 160: {201, 204, 108, 112, 95}, 161: {177, 113, 114, 122, 123}, 162: {177, 113, 114, 122, 123}, 163: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 164: {125}, 165: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 166: {127}, 167: {128, 40, 144, 51, 180, 21, 153}, 168: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 169: {130, 35, 133, 44, 140, 147, 24, 27}, 170: {25, 131}, 171: {26, 132, 93, 191}, 172: {130, 35, 133, 44, 140, 147, 24, 27}, 173: {134, 28, 141, 36}, 174: {29, 135}, 175: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 176: {32, 137}, 177: {48, 33, 138, 150}, 178: {34, 139}, 179: {130, 35, 133, 44, 140, 147, 24, 27}, 180: {134, 28, 141, 36}, 181: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 182: {39, 171, 143, 118, 90}, 183: {128, 40, 144, 51, 180, 21, 153}, 184: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 185: {146, 43, 149, 47}, 186: {130, 35, 133, 44, 140, 147, 24, 27}, 187: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 188: {146, 43, 149, 47}, 189: {48, 33, 138, 150}, 190: {49, 173, 151}, 191: {152, 50}, 192: {128, 40, 144, 51, 180, 21, 153}, 193: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 194: {155, 70}, 195: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 196: {184, 157}, 197: {65, 164, 198, 72, 14, 187, 158}, 198: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 199: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 200: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 201: {162, 116}, 202: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 203: {65, 164, 198, 72, 14, 187, 158}, 204: {9, 12, 16, 159, 165, 170, 179, 54, 185, 64, 192, 194, 67, 195, 69, 200, 73, 82, 94, 117, 124}, 205: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 206: {202, 167}, 207: {129, 136, 11, 142, 15, 17, 145, 19, 148, 23, 154, 156, 31, 160, 161, 163, 38, 166, 168, 42, 46, 174, 178, 53, 181, 182, 56, 59, 188, 189, 62, 190, 66, 197, 71, 199, 74, 203, 77, 79, 105, 106, 107, 109, 110, 111, 120, 126}, 208: {169}})
Equivalent! frozenset({96, 98, 83, 100}) {97, 82, 99, 95}
Equivalent! frozenset({97, 99, 84, 101}) {96, 98, 83, 100}
Equivalent! frozenset({108, 112, 201, 204, 95}) {160, 130, 107, 111, 94}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f638c515f28>, {0: {0}, 1: {7}, 2: {9}, 3: {10}, 4: {11}, 5: {6}, 6: {12}, 7: {13}, 8: {14}, 9: {15}, 10: {16}, 11: {17}, 12: {18}, 13: {19}, 14: {20}, 15: {21}, 16: {22}, 17: {23}, 18: {24}, 19: {25}, 20: {26}, 21: {27}, 22: {28}, 23: {29}, 24: {30}, 25: {31}, 26: {32}, 27: {33}, 28: {34}, 29: {35}, 30: {36}, 31: {37}, 32: {38}, 33: {39}, 34: {40}, 35: {41}, 36: {42}, 37: {43}, 38: {44}, 39: {45}, 40: {46}, 41: {47}, 42: {48}, 43: {49}, 44: {50}, 45: {51}, 46: {52}, 47: {53}, 48: {8}, 49: set(), 50: set(), 51: set(), 52: set(), 53: set(), 54: set(), 55: set(), 56: {57}, 57: {58}, 58: {59}, 59: {60}, 60: {61}, 61: {62}, 62: {63}, 63: {64}, 64: {65}, 65: {66}, 66: {67}, 67: {68}, 68: {69}, 69: {70}, 70: {71}, 71: {72}, 72: {73}, 73: {74}, 74: {75}, 75: {76}, 76: {77}, 77: {78}, 78: {79}, 79: {80}, 80: {81}, 81: {82}, 82: {98}, 83: {84}, 84: {85}, 85: {86}, 86: {87}, 87: {88}, 88: {89}, 89: {90}, 90: {91}, 91: {92}, 92: {93}, 93: {94}, 94: {95}, 95: {100}, 96: {97}, 97: {96}, 98: {99}, 99: {83}, 100: {101}, 101: {102}, 102: {103}, 103: {104}, 104: {105}, 105: {106}, 106: {107}, 107: {201}, 108: {154, 53, 109}, 109: {46, 148, 110}, 110: {38, 142, 111}, 111: {204}, 112: {113}, 113: {114}, 114: {115}, 115: {116}, 116: {117}, 117: {118}, 118: {119}, 119: {120}, 120: {121}, 121: {170}, 122: {171}, 123: {172}, 124: {173}, 125: {174}, 126: {175}, 127: {176}, 128: {202}, 129: {203}, 130: {112}, 131: {177}, 132: {5}, 133: {178}, 134: {4}, 135: {179}, 136: {180}, 137: {181}, 138: {1}, 139: {2}, 140: {182}, 141: {183}, 142: {184}, 143: {185}, 144: {186}, 145: {187}, 146: {188}, 147: {189}, 148: {190}, 149: {191}, 150: {3}, 151: {192}, 152: {193}, 153: {194}, 154: {195}, 155: {196}, 156: {197}, 157: {198}, 158: {199}, 159: {200}, 160: {108}, 161: {122}, 162: {123}, 163: {124}, 164: {125}, 165: {126}, 166: {127}, 167: {128}, 168: {129}, 169: {130}, 170: {131}, 171: {132}, 172: {133}, 173: {134}, 174: {135}, 175: {136}, 176: {137}, 177: {138}, 178: {139}, 179: {140}, 180: {141}, 181: {142}, 182: {143}, 183: {144}, 184: {145}, 185: {146}, 186: {147}, 187: {148}, 188: {149}, 189: {150}, 190: {151}, 191: {152}, 192: {153}, 193: {154}, 194: {155}, 195: {156}, 196: {157}, 197: {158}, 198: {159}, 199: {160}, 200: {161}, 201: {162}, 202: {163}, 203: {164}, 204: {165}, 205: {166}, 206: {167}, 207: {168}, 208: {169}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 xor xor
EXACT 28 lshr lshr
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 getelementptr getelementptr
EXACT 32 store store
EXACT 33 icmp icmp
EXACT 34 zext zext
EXACT 35 getelementptr getelementptr
EXACT 36 store store
EXACT 37 lshr lshr
EXACT 38 trunc trunc
EXACT 39 getelementptr getelementptr
EXACT 40 store store
EXACT 41 lshr lshr
EXACT 42 xor xor
EXACT 43 add add
EXACT 44 icmp icmp
EXACT 45 zext zext
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 getelementptr getelementptr
NO MATCH 49
NO MATCH 50
NO MATCH 51
NO MATCH 52
NO MATCH 53
NO MATCH 54
NO MATCH 55
EXACT 56 getelementptr getelementptr
EXACT 57 bitcast bitcast
EXACT 58 store store
EXACT 59 add add
EXACT 60 add add
EXACT 61 store store
EXACT 62 getelementptr getelementptr
EXACT 63 load load
EXACT 64 inttoptr inttoptr
EXACT 65 store store
EXACT 66 load load
EXACT 67 add add
EXACT 68 load load
EXACT 69 add add
EXACT 70 store store
EXACT 71 inttoptr inttoptr
EXACT 72 load load
EXACT 73 store store
EXACT 74 getelementptr getelementptr
EXACT 75 bitcast bitcast
EXACT 76 store store
EXACT 77 add add
EXACT 78 store store
EXACT 79 bitcast bitcast
EXACT 80 bitcast bitcast
EXACT 81 load load
EXACT 82 fcmp fcmp
EXACT 83 br br
EXACT 84 fadd fadd
EXACT 85 bitcast bitcast
EXACT 86 and and
EXACT 87 icmp icmp
EXACT 88 and and
EXACT 89 icmp icmp
EXACT 90 and and
EXACT 91 br br
EXACT 92 tail tail
EXACT 93 load load
EXACT 94 br br
EXACT 95 fcmp fcmp
EXACT 96 br br
EXACT 97 fcmp fcmp
EXACT 98 br br
EXACT 99 fcmp fcmp
EXACT 100 br br
EXACT 101 phi phi
EXACT 102 phi phi
EXACT 103 phi phi
EXACT 104 store store
EXACT 105 store store
EXACT 106 store store
EXACT 107 br br
MORE 108 POT: 3
MORE 109 POT: 3
MORE 110 POT: 3
EXACT 111 br br
EXACT 112 phi phi
EXACT 113 phi phi
EXACT 114 add add
EXACT 115 add add
EXACT 116 load load
EXACT 117 icmp icmp
EXACT 118 select select
EXACT 119 store store
EXACT 120 br br
EXACT 121 load load
EXACT 122 icmp icmp
EXACT 123 select select
EXACT 124 add add
EXACT 125 store store
EXACT 126 icmp icmp
EXACT 127 br br
EXACT 128 add add
EXACT 129 store store
EXACT 130 br br
EXACT 131 phi phi
EXACT 132 getelementptr getelementptr
EXACT 133 store store
EXACT 134 getelementptr getelementptr
EXACT 135 load load
EXACT 136 zext zext
EXACT 137 store store
EXACT 138 getelementptr getelementptr
EXACT 139 bitcast bitcast
EXACT 140 store store
EXACT 141 add add
EXACT 142 add add
EXACT 143 load load
EXACT 144 add add
EXACT 145 inttoptr inttoptr
EXACT 146 store store
EXACT 147 store store
EXACT 148 store store
EXACT 149 tail tail
EXACT 150 bitcast bitcast
EXACT 151 load load
EXACT 152 add add
EXACT 153 load load
EXACT 154 load load
EXACT 155 add add
EXACT 156 store store
EXACT 157 inttoptr inttoptr
EXACT 158 store store
EXACT 159 load load
EXACT 160 br br
EXACT 161 phi phi
EXACT 162 phi phi
EXACT 163 load load
EXACT 164 add add
EXACT 165 store store
EXACT 166 icmp icmp
EXACT 167 zext zext
EXACT 168 store store
EXACT 169 trunc trunc
EXACT 170 and and
EXACT 171 tail tail
EXACT 172 trunc trunc
EXACT 173 and and
EXACT 174 xor xor
EXACT 175 store store
EXACT 176 xor xor
EXACT 177 xor xor
EXACT 178 lshr lshr
EXACT 179 trunc trunc
EXACT 180 and and
EXACT 181 store store
EXACT 182 icmp icmp
EXACT 183 zext zext
EXACT 184 store store
EXACT 185 lshr lshr
EXACT 186 trunc trunc
EXACT 187 store store
EXACT 188 lshr lshr
EXACT 189 xor xor
EXACT 190 add add
EXACT 191 icmp icmp
EXACT 192 zext zext
EXACT 193 store store
EXACT 194 add add
EXACT 195 store store
EXACT 196 add add
EXACT 197 inttoptr inttoptr
EXACT 198 load load
EXACT 199 store store
EXACT 200 store store
EXACT 201 add add
EXACT 202 store store
EXACT 203 inttoptr inttoptr
EXACT 204 load load
EXACT 205 store store
EXACT 206 add add
EXACT 207 store store
EXACT 208 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %EAX = bitcast %union.anon* %3 to i32*
- 4 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 5 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 6 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 7 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 8 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 9 %5 = load i64, i64* %RBP, align 8
- 10 %6 = add i64 %1, 1
- 11 store i64 %6, i64* %PC, align 8
- 12 %7 = load i64, i64* %RSP, align 8
- 13 %8 = add i64 %7, -8
- 14 %9 = inttoptr i64 %8 to i64*
- 15 store i64 %5, i64* %9, align 8
- 16 %10 = load i64, i64* %PC, align 8
- 17 store i64 %8, i64* %RBP, align 8
- 18 %11 = add i64 %7, -24
- 19 store i64 %11, i64* %RSP, align 8
- 20 %12 = icmp ult i64 %8, 16
- 21 %13 = zext i1 %12 to i8
- 22 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 23 store i8 %13, i8* %14, align 1
- 24 %15 = trunc i64 %11 to i32
- 25 %16 = and i32 %15, 255
- 26 %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
- 27 %18 = trunc i32 %17 to i8
- 28 %19 = and i8 %18, 1
- 29 %20 = xor i8 %19, 1
- 30 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 31 store i8 %20, i8* %21, align 1
- 32 %22 = xor i64 %8, 16
- 33 %23 = xor i64 %22, %11
- 34 %24 = lshr i64 %23, 4
- 35 %25 = trunc i64 %24 to i8
- 36 %26 = and i8 %25, 1
- 37 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 38 store i8 %26, i8* %27, align 1
- 39 %28 = icmp eq i64 %11, 0
- 40 %29 = zext i1 %28 to i8
- 41 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 42 store i8 %29, i8* %30, align 1
- 43 %31 = lshr i64 %11, 63
- 44 %32 = trunc i64 %31 to i8
- 45 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 46 store i8 %32, i8* %33, align 1
- 47 %34 = lshr i64 %8, 63
- 48 %35 = xor i64 %31, %34
- 49 %36 = add nuw nsw i64 %35, %34
- 50 %37 = icmp eq i64 %36, 2
- 51 %38 = zext i1 %37 to i8
- 52 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 53 store i8 %38, i8* %39, align 1
- 54 %40 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402d20__rodata_type* @seg_402d20__rodata to i64), i64 32) to i64*), align 16
- 55 %41 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
- 56 store i64 %40, i64* %41, align 1
- 57 %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
- 58 %43 = bitcast i64* %42 to double*
- 59 store double 0.000000e+00, double* %43, align 1
- 60 %44 = add i64 %7, -16
- 61 %45 = add i64 %10, 20
- 62 store i64 %45, i64* %PC, align 8
- 63 %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 64 %47 = load i64, i64* %46, align 1
- 65 %48 = inttoptr i64 %44 to i64*
- 66 store i64 %47, i64* %48, align 8
- 67 %49 = load i64, i64* %RBP, align 8
- 68 %50 = add i64 %49, -8
- 69 %51 = load i64, i64* %PC, align 8
- 70 %52 = add i64 %51, 5
- 71 store i64 %52, i64* %PC, align 8
- 72 %53 = inttoptr i64 %50 to i64*
- 73 %54 = load i64, i64* %53, align 8
- 74 store i64 %54, i64* %46, align 1
- 75 %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 76 %56 = bitcast i64* %55 to double*
- 77 store double 0.000000e+00, double* %56, align 1
- 78 %57 = add i64 %51, 9
- 79 store i64 %57, i64* %PC, align 8
- 80 %58 = bitcast i64 %54 to double
- 81 %59 = bitcast %union.VectorReg* %4 to double*
- 82 %60 = load double, double* %59, align 1
- 83 %61 = fcmp uno double %58, %60
- 84 \<badref\> = br i1 %61, label %62, label %72
- 85 %63 = fadd double %58, %60
- 86 %64 = bitcast double %63 to i64
- 87 %65 = and i64 %64, 9221120237041090560
- 88 %66 = icmp eq i64 %65, 9218868437227405312
- 89 %67 = and i64 %64, 2251799813685247
- 90 %68 = icmp ne i64 %67, 0
- 91 %69 = and i1 %66, %68
- 92 \<badref\> = br i1 %69, label %70, label %78
- 93 %71 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %57, %struct.Memory* %2) #13
- 94 %.pre = load i64, i64* %PC, align 8
- 95 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 96 %73 = fcmp ogt double %58, %60
- 97 \<badref\> = br i1 %73, label %78, label %74
- 98 %75 = fcmp olt double %58, %60
- 99 \<badref\> = br i1 %75, label %78, label %76
- 100 %77 = fcmp oeq double %58, %60
- 101 \<badref\> = br i1 %77, label %78, label %82
- 102 %79 = phi i8 [ 0, %72 ], [ 0, %74 ], [ 1, %76 ], [ 1, %62 ]
- 103 %80 = phi i8 [ 0, %72 ], [ 0, %74 ], [ 0, %76 ], [ 1, %62 ]
- 104 %81 = phi i8 [ 0, %72 ], [ 1, %74 ], [ 0, %76 ], [ 1, %62 ]
- 105 store i8 %79, i8* %30, align 1
- 106 store i8 %80, i8* %21, align 1
- 107 store i8 %81, i8* %14, align 1
- 108 \<badref\> = br label %82
- 109 store i8 0, i8* %39, align 1
- 110 store i8 0, i8* %33, align 1
- 111 store i8 0, i8* %27, align 1
- 112 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 113 %83 = phi i64 [ %.pre, %70 ], [ %57, %82 ]
- 114 %84 = phi %struct.Memory* [ %71, %70 ], [ %2, %82 ]
- 115 %85 = add i64 %83, 17
- 116 %86 = add i64 %83, 6
- 117 %87 = load i8, i8* %30, align 1
- 118 %88 = icmp eq i8 %87, 0
- 119 %89 = select i1 %88, i64 %85, i64 %86
- 120 store i64 %89, i64* %PC, align 8
- 121 \<badref\> = br i1 %88, label %block_40138f, label %block_401384
- 122 %90 = phi i64 [ %.pre2, %block_40138f ], [ %142, %block_40138a ]
- 123 %MEMORY.0 = phi %struct.Memory* [ %135, %block_40138f ], [ %84, %block_40138a ]
- 124 %91 = load i64, i64* %RSP, align 8
- 125 %92 = add i64 %91, 16
- 126 store i64 %92, i64* %RSP, align 8
- 127 %93 = icmp ugt i64 %91, -17
- 128 %94 = zext i1 %93 to i8
- 129 store i8 %94, i8* %14, align 1
- 130 %95 = trunc i64 %92 to i32
- 131 %96 = and i32 %95, 255
- 132 %97 = tail call i32 @llvm.ctpop.i32(i32 %96) #12
- 133 %98 = trunc i32 %97 to i8
- 134 %99 = and i8 %98, 1
- 135 %100 = xor i8 %99, 1
- 136 store i8 %100, i8* %21, align 1
- 137 %101 = xor i64 %91, 16
- 138 %102 = xor i64 %101, %92
- 139 %103 = lshr i64 %102, 4
- 140 %104 = trunc i64 %103 to i8
- 141 %105 = and i8 %104, 1
- 142 store i8 %105, i8* %27, align 1
- 143 %106 = icmp eq i64 %92, 0
- 144 %107 = zext i1 %106 to i8
- 145 store i8 %107, i8* %30, align 1
- 146 %108 = lshr i64 %92, 63
- 147 %109 = trunc i64 %108 to i8
- 148 store i8 %109, i8* %33, align 1
- 149 %110 = lshr i64 %91, 63
- 150 %111 = xor i64 %108, %110
- 151 %112 = add nuw nsw i64 %111, %108
- 152 %113 = icmp eq i64 %112, 2
- 153 %114 = zext i1 %113 to i8
- 154 store i8 %114, i8* %39, align 1
- 155 %115 = add i64 %90, 5
- 156 store i64 %115, i64* %PC, align 8
- 157 %116 = add i64 %91, 24
- 158 %117 = inttoptr i64 %92 to i64*
- 159 %118 = load i64, i64* %117, align 8
- 160 store i64 %118, i64* %RBP, align 8
- 161 store i64 %116, i64* %RSP, align 8
- 162 %119 = add i64 %90, 6
- 163 store i64 %119, i64* %PC, align 8
- 164 %120 = inttoptr i64 %116 to i64*
- 165 %121 = load i64, i64* %120, align 8
- 166 store i64 %121, i64* %PC, align 8
- 167 %122 = add i64 %91, 32
- 168 store i64 %122, i64* %RSP, align 8
- 169 \<badref\> = ret %struct.Memory* %MEMORY.0
- 170 %123 = load i8, i8* %21, align 1
- 171 %124 = icmp ne i8 %123, 0
- 172 %.v = select i1 %124, i64 11, i64 6
- 173 %125 = add i64 %89, %.v
- 174 store i64 %125, i64* %PC, align 8
- 175 %126 = icmp eq i8 %123, 1
- 176 \<badref\> = br i1 %126, label %block_40138f, label %block_40138a
- 177 %127 = phi i64 [ %125, %block_401384 ], [ %85, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
- 178 store i64 add (i64 ptrtoint (%seg_402d20__rodata_type* @seg_402d20__rodata to i64), i64 295), i64* %RDI, align 8
- 179 %128 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
- 180 %129 = zext i32 %128 to i64
- 181 store i64 %129, i64* %RSI, align 8
- 182 store i8 0, i8* %AL, align 1
- 183 %130 = add i64 %127, -3663
- 184 %131 = add i64 %127, 24
- 185 %132 = load i64, i64* %RSP, align 8
- 186 %133 = add i64 %132, -8
- 187 %134 = inttoptr i64 %133 to i64*
- 188 store i64 %131, i64* %134, align 8
- 189 store i64 %133, i64* %RSP, align 8
- 190 store i64 %130, i64* %PC, align 8
- 191 %135 = tail call fastcc %struct.Memory* @ext_60cf18_printf(%struct.State* nonnull %0, %struct.Memory* %84)
- 192 %136 = load i64, i64* %RBP, align 8
- 193 %137 = add i64 %136, -12
- 194 %138 = load i32, i32* %EAX, align 4
- 195 %139 = load i64, i64* %PC, align 8
- 196 %140 = add i64 %139, 3
- 197 store i64 %140, i64* %PC, align 8
- 198 %141 = inttoptr i64 %137 to i32*
- 199 store i32 %138, i32* %141, align 4
- 200 %.pre2 = load i64, i64* %PC, align 8
- 201 \<badref\> = br label %block_4013aa
- 202 %142 = add i64 %125, 32
- 203 store i64 %142, i64* %PC, align 8
- 204 \<badref\> = br label %block_4013aa
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f638c32f158>, {0: {0}, 1: {138}, 2: {75, 139, 79, 80, 85, 150, 57}, 3: {75, 139, 79, 80, 85, 150, 57}, 4: {134}, 5: {132}, 6: {5}, 7: {1}, 8: {48}, 9: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 10: {3}, 11: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 12: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 13: {144, 67, 7}, 14: {64, 197, 71, 8, 203, 145, 52, 157}, 15: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 16: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 17: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 18: {12}, 19: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 20: {14}, 21: {192, 34, 167, 136, 45, 15, 183}, 22: {16}, 23: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 24: {38, 169, 172, 18, 179, 21, 186, 29}, 25: {170, 19}, 26: {171, 20, 149, 92}, 27: {38, 169, 172, 18, 179, 21, 186, 29}, 28: {180, 173, 22, 30}, 29: {174, 23}, 30: {24}, 31: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 32: {176, 26}, 33: {177, 42, 27, 189}, 34: {178, 28}, 35: {38, 169, 172, 18, 179, 21, 186, 29}, 36: {180, 173, 22, 30}, 37: {31}, 38: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 39: {33, 117, 182, 89, 122}, 40: {192, 34, 167, 136, 45, 15, 183}, 41: {35}, 42: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 43: {41, 185, 188, 37}, 44: {38, 169, 172, 18, 179, 21, 186, 29}, 45: {39}, 46: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 47: {41, 185, 188, 37}, 48: {177, 42, 27, 189}, 49: {49, 43, 124, 190}, 50: {44, 191}, 51: {192, 34, 167, 136, 45, 15, 183}, 52: {46}, 53: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 54: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 55: {54}, 56: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 57: {56}, 58: {75, 139, 79, 80, 85, 150, 57}, 59: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 60: {59}, 61: {60}, 62: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 63: {62}, 64: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 65: {64, 197, 71, 8, 203, 145, 52, 157}, 66: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 67: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 68: {144, 67, 7}, 69: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 70: {194, 69}, 71: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 72: {64, 197, 71, 8, 203, 145, 52, 157}, 73: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 74: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 75: {74}, 76: {75, 139, 79, 80, 85, 150, 57}, 77: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 78: {77}, 79: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 80: {75, 139, 79, 80, 85, 150, 57}, 81: {75, 139, 79, 80, 85, 150, 57}, 82: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 83: {97, 82, 99, 95}, 84: {96, 98, 100, 83, 120, 91, 127}, 85: {84}, 86: {75, 139, 79, 80, 85, 150, 57}, 87: {86}, 88: {87}, 89: {88}, 90: {33, 117, 182, 89, 122}, 91: {90}, 92: {96, 98, 100, 83, 120, 91, 127}, 93: {171, 20, 149, 92}, 94: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 95: {160, 130, 107, 111, 94}, 96: {97, 82, 99, 95}, 97: {96, 98, 100, 83, 120, 91, 127}, 98: {97, 82, 99, 95}, 99: {96, 98, 100, 83, 120, 91, 127}, 100: {97, 82, 99, 95}, 101: {96, 98, 100, 83, 120, 91, 127}, 102: {101}, 103: {102}, 104: {103}, 105: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 106: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 107: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 108: {160, 130, 107, 111, 94}, 109: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 110: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 111: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 112: {160, 130, 107, 111, 94}, 113: {161, 162, 131, 112, 113}, 114: {161, 162, 131, 112, 113}, 115: {114}, 116: {201, 115}, 117: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 118: {33, 117, 182, 89, 122}, 119: {118}, 120: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 121: {96, 98, 100, 83, 120, 91, 127}, 122: {161, 162, 131, 112, 113}, 123: {161, 162, 131, 112, 113}, 124: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 125: {164}, 126: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 127: {166}, 128: {192, 34, 167, 136, 45, 15, 183}, 129: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 130: {38, 169, 172, 18, 179, 21, 186, 29}, 131: {170, 19}, 132: {171, 20, 149, 92}, 133: {38, 169, 172, 18, 179, 21, 186, 29}, 134: {180, 173, 22, 30}, 135: {174, 23}, 136: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 137: {176, 26}, 138: {177, 42, 27, 189}, 139: {178, 28}, 140: {38, 169, 172, 18, 179, 21, 186, 29}, 141: {180, 173, 22, 30}, 142: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 143: {33, 117, 182, 89, 122}, 144: {192, 34, 167, 136, 45, 15, 183}, 145: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 146: {41, 185, 188, 37}, 147: {38, 169, 172, 18, 179, 21, 186, 29}, 148: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 149: {41, 185, 188, 37}, 150: {177, 42, 27, 189}, 151: {49, 43, 124, 190}, 152: {44, 191}, 153: {192, 34, 167, 136, 45, 15, 183}, 154: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 155: {194, 69}, 156: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 157: {196, 142}, 158: {64, 197, 71, 8, 203, 145, 52, 157}, 159: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 160: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 161: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 162: {201, 115}, 163: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 164: {64, 197, 71, 8, 203, 145, 52, 157}, 165: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 166: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 167: {128, 206}, 168: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 169: {208}, 170: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 171: {33, 117, 182, 89, 122}, 172: {123}, 173: {49, 43, 124, 190}, 174: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 175: {126}, 176: {96, 98, 100, 83, 120, 91, 127}, 177: {161, 162, 131, 112, 113}, 178: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 179: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 180: {192, 34, 167, 136, 45, 15, 183}, 181: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 182: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 183: {141}, 184: {196, 142}, 185: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 186: {144, 67, 7}, 187: {64, 197, 71, 8, 203, 145, 52, 157}, 188: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 189: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 190: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 191: {171, 20, 149, 92}, 192: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 193: {152}, 194: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 195: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 196: {155}, 197: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 198: {64, 197, 71, 8, 203, 145, 52, 157}, 199: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 200: {2, 6, 135, 10, 143, 151, 153, 154, 159, 163, 53, 63, 66, 68, 198, 72, 204, 81, 93, 116, 121}, 201: {160, 130, 107, 111, 94}, 202: {128, 206}, 203: {129, 4, 133, 9, 137, 11, 140, 13, 17, 146, 147, 148, 25, 156, 158, 32, 36, 165, 40, 168, 47, 175, 51, 181, 55, 184, 58, 187, 61, 65, 193, 195, 70, 199, 200, 73, 202, 76, 205, 78, 207, 104, 105, 106, 108, 109, 110, 119, 125}, 204: {160, 130, 107, 111, 94}})
Equivalent! frozenset({97, 82, 99, 95}) {96, 98, 83, 100}
Equivalent! frozenset({96, 98, 83, 100}) {97, 99, 84, 101}
Equivalent! frozenset({160, 130, 107, 94, 111}) {201, 204, 108, 112, 95}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f638c32f158>, {0: {0}, 1: {138}, 2: {139}, 3: {150}, 4: {134}, 5: {132}, 6: {5}, 7: {1}, 8: {48}, 9: {2}, 10: {3}, 11: {4}, 12: {6}, 13: {7}, 14: {8}, 15: {9}, 16: {10}, 17: {11}, 18: {12}, 19: {13}, 20: {14}, 21: {15}, 22: {16}, 23: {17}, 24: {18}, 25: {19}, 26: {20}, 27: {21}, 28: {22}, 29: {23}, 30: {24}, 31: {25}, 32: {26}, 33: {27}, 34: {28}, 35: {29}, 36: {30}, 37: {31}, 38: {32}, 39: {33}, 40: {34}, 41: {35}, 42: {36}, 43: {37}, 44: {38}, 45: {39}, 46: {40}, 47: {41}, 48: {42}, 49: {43}, 50: {44}, 51: {45}, 52: {46}, 53: {47}, 54: {53}, 55: {54}, 56: {55}, 57: {56}, 58: {57}, 59: {58}, 60: {59}, 61: {60}, 62: {61}, 63: {62}, 64: {63}, 65: {64}, 66: {65}, 67: {66}, 68: {67}, 69: {68}, 70: {69}, 71: {70}, 72: {71}, 73: {72}, 74: {73}, 75: {74}, 76: {75}, 77: {76}, 78: {77}, 79: {78}, 80: {79}, 81: {80}, 82: {81}, 83: {99}, 84: {83}, 85: {84}, 86: {85}, 87: {86}, 88: {87}, 89: {88}, 90: {89}, 91: {90}, 92: {91}, 93: {92}, 94: {93}, 95: {111}, 96: {97}, 97: {96}, 98: {82}, 99: {98}, 100: {95}, 101: {100}, 102: {101}, 103: {102}, 104: {103}, 105: {104}, 106: {105}, 107: {106}, 108: {107}, 109: {193, 108, 47}, 110: {40, 187, 109}, 111: {32, 181, 110}, 112: {94}, 113: {112}, 114: {113}, 115: {114}, 116: {115}, 117: {116}, 118: {117}, 119: {118}, 120: {119}, 121: {120}, 122: {161}, 123: {162}, 124: {163}, 125: {164}, 126: {165}, 127: {166}, 128: {167}, 129: {168}, 130: {169}, 131: {170}, 132: {171}, 133: {172}, 134: {173}, 135: {174}, 136: {175}, 137: {176}, 138: {177}, 139: {178}, 140: {179}, 141: {180}, 142: {181}, 143: {182}, 144: {183}, 145: {184}, 146: {185}, 147: {186}, 148: {187}, 149: {188}, 150: {189}, 151: {190}, 152: {191}, 153: {192}, 154: {193}, 155: {194}, 156: {195}, 157: {196}, 158: {197}, 159: {198}, 160: {199}, 161: {200}, 162: {201}, 163: {202}, 164: {203}, 165: {204}, 166: {205}, 167: {206}, 168: {207}, 169: {208}, 170: {121}, 171: {122}, 172: {123}, 173: {124}, 174: {125}, 175: {126}, 176: {127}, 177: {131}, 178: {133}, 179: {135}, 180: {136}, 181: {137}, 182: {140}, 183: {141}, 184: {142}, 185: {143}, 186: {144}, 187: {145}, 188: {146}, 189: {147}, 190: {148}, 191: {149}, 192: {151}, 193: {152}, 194: {153}, 195: {154}, 196: {155}, 197: {156}, 198: {157}, 199: {158}, 200: {159}, 201: {160}, 202: {128}, 203: {129}, 204: {130}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 bitcast bitcast
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 load load
EXACT 10 add add
EXACT 11 store store
EXACT 12 load load
EXACT 13 add add
EXACT 14 inttoptr inttoptr
EXACT 15 store store
EXACT 16 load load
EXACT 17 store store
EXACT 18 add add
EXACT 19 store store
EXACT 20 icmp icmp
EXACT 21 zext zext
EXACT 22 getelementptr getelementptr
EXACT 23 store store
EXACT 24 trunc trunc
EXACT 25 and and
EXACT 26 tail tail
EXACT 27 trunc trunc
EXACT 28 and and
EXACT 29 xor xor
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 xor xor
EXACT 33 xor xor
EXACT 34 lshr lshr
EXACT 35 trunc trunc
EXACT 36 and and
EXACT 37 getelementptr getelementptr
EXACT 38 store store
EXACT 39 icmp icmp
EXACT 40 zext zext
EXACT 41 getelementptr getelementptr
EXACT 42 store store
EXACT 43 lshr lshr
EXACT 44 trunc trunc
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 lshr lshr
EXACT 48 xor xor
EXACT 49 add add
EXACT 50 icmp icmp
EXACT 51 zext zext
EXACT 52 getelementptr getelementptr
EXACT 53 store store
EXACT 54 load load
EXACT 55 getelementptr getelementptr
EXACT 56 store store
EXACT 57 getelementptr getelementptr
EXACT 58 bitcast bitcast
EXACT 59 store store
EXACT 60 add add
EXACT 61 add add
EXACT 62 store store
EXACT 63 getelementptr getelementptr
EXACT 64 load load
EXACT 65 inttoptr inttoptr
EXACT 66 store store
EXACT 67 load load
EXACT 68 add add
EXACT 69 load load
EXACT 70 add add
EXACT 71 store store
EXACT 72 inttoptr inttoptr
EXACT 73 load load
EXACT 74 store store
EXACT 75 getelementptr getelementptr
EXACT 76 bitcast bitcast
EXACT 77 store store
EXACT 78 add add
EXACT 79 store store
EXACT 80 bitcast bitcast
EXACT 81 bitcast bitcast
EXACT 82 load load
EXACT 83 fcmp fcmp
EXACT 84 br br
EXACT 85 fadd fadd
EXACT 86 bitcast bitcast
EXACT 87 and and
EXACT 88 icmp icmp
EXACT 89 and and
EXACT 90 icmp icmp
EXACT 91 and and
EXACT 92 br br
EXACT 93 tail tail
EXACT 94 load load
EXACT 95 br br
EXACT 96 fcmp fcmp
EXACT 97 br br
EXACT 98 fcmp fcmp
EXACT 99 br br
EXACT 100 fcmp fcmp
EXACT 101 br br
EXACT 102 phi phi
EXACT 103 phi phi
EXACT 104 phi phi
EXACT 105 store store
EXACT 106 store store
EXACT 107 store store
EXACT 108 br br
MORE 109 POT: 3
MORE 110 POT: 3
MORE 111 POT: 3
EXACT 112 br br
EXACT 113 phi phi
EXACT 114 phi phi
EXACT 115 add add
EXACT 116 add add
EXACT 117 load load
EXACT 118 icmp icmp
EXACT 119 select select
EXACT 120 store store
EXACT 121 br br
EXACT 122 phi phi
EXACT 123 phi phi
EXACT 124 load load
EXACT 125 add add
EXACT 126 store store
EXACT 127 icmp icmp
EXACT 128 zext zext
EXACT 129 store store
EXACT 130 trunc trunc
EXACT 131 and and
EXACT 132 tail tail
EXACT 133 trunc trunc
EXACT 134 and and
EXACT 135 xor xor
EXACT 136 store store
EXACT 137 xor xor
EXACT 138 xor xor
EXACT 139 lshr lshr
EXACT 140 trunc trunc
EXACT 141 and and
EXACT 142 store store
EXACT 143 icmp icmp
EXACT 144 zext zext
EXACT 145 store store
EXACT 146 lshr lshr
EXACT 147 trunc trunc
EXACT 148 store store
EXACT 149 lshr lshr
EXACT 150 xor xor
EXACT 151 add add
EXACT 152 icmp icmp
EXACT 153 zext zext
EXACT 154 store store
EXACT 155 add add
EXACT 156 store store
EXACT 157 add add
EXACT 158 inttoptr inttoptr
EXACT 159 load load
EXACT 160 store store
EXACT 161 store store
EXACT 162 add add
EXACT 163 store store
EXACT 164 inttoptr inttoptr
EXACT 165 load load
EXACT 166 store store
EXACT 167 add add
EXACT 168 store store
EXACT 169 ret ret
EXACT 170 load load
EXACT 171 icmp icmp
EXACT 172 select select
EXACT 173 add add
EXACT 174 store store
EXACT 175 icmp icmp
EXACT 176 br br
EXACT 177 phi phi
EXACT 178 store store
EXACT 179 load load
EXACT 180 zext zext
EXACT 181 store store
EXACT 182 store store
EXACT 183 add add
EXACT 184 add add
EXACT 185 load load
EXACT 186 add add
EXACT 187 inttoptr inttoptr
EXACT 188 store store
EXACT 189 store store
EXACT 190 store store
EXACT 191 tail tail
EXACT 192 load load
EXACT 193 add add
EXACT 194 load load
EXACT 195 load load
EXACT 196 add add
EXACT 197 store store
EXACT 198 inttoptr inttoptr
EXACT 199 store store
EXACT 200 load load
EXACT 201 br br
EXACT 202 add add
EXACT 203 store store
EXACT 204 br br
FP: 63 1.0 False
TO REMOVE: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', 'store i8 %38, i8* %39, align 1', '%46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%47 = bitcast i64* %46 to double*', 'store double 0.000000e+00, double* %47, align 1', '%48 = add i64 %7, -16', '%49 = add i64 %10, 20', 'store i64 %49, i64* %3, align 8', '%50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', '%51 = load i64, i64* %50, align 1', '%52 = inttoptr i64 %48 to i64*', 'store i64 %51, i64* %52, align 8', '%56 = add i64 %55, 5', 'store i64 %56, i64* %3, align 8', 'store i64 %58, i64* %50, align 1', '%59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%60 = bitcast i64* %59 to double*', 'store double 0.000000e+00, double* %60, align 1', 'store i64 %61, i64* %3, align 8', '%.pre = load i64, i64* %3, align 8', '%83 = phi i8 [ 0, %76 ], [ 0, %78 ], [ 1, %80 ], [ 1, %66 ]', '%84 = phi i8 [ 0, %76 ], [ 0, %78 ], [ 0, %80 ], [ 1, %66 ]', '%85 = phi i8 [ 0, %76 ], [ 1, %78 ], [ 0, %80 ], [ 1, %66 ]', 'store i8 %83, i8* %30, align 1', 'store i8 %84, i8* %21, align 1', 'store i8 %85, i8* %14, align 1', '%87 = phi i64 [ %.pre, %74 ], [ %61, %86 ]', '%89 = add i64 %87, 17', '%90 = add i64 %87, 6', '%93 = select i1 %92, i64 %89, i64 %90', 'store i64 %93, i64* %3, align 8', '%95 = icmp ne i8 %94, 0', '%.v = select i1 %95, i64 11, i64 6', '%96 = add i64 %93, %.v', 'store i64 %96, i64* %3, align 8', '%97 = add i64 %96, 32', 'store i64 %97, i64* %3, align 8', '%98 = phi i64 [ %96, %block_401384 ], [ %89, %routine_ucomisd__xmm1___xmm0.exit ]', '%RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', 'store i64 ptrtoint (%G__0x402e47_type* @G__0x402e47 to i64), i64* %RDI.i, align 8', '%RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%99 = load i32, i32* bitcast (%G_0x605090_type* @G_0x605090 to i32*), align 8', '%100 = zext i32 %99 to i64', 'store i64 %100, i64* %RSI.i, align 8', '%101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL.i = bitcast %union.anon* %101 to i8*', 'store i8 0, i8* %AL.i, align 1', '%102 = add i64 %98, -3663', '%103 = add i64 %98, 24', '%104 = load i64, i64* %6, align 8', '%105 = add i64 %104, -8', '%106 = inttoptr i64 %105 to i64*', 'store i64 %103, i64* %106, align 8', 'store i64 %105, i64* %6, align 8', 'store i64 %102, i64* %3, align 8', '%EAX.i = bitcast %union.anon* %101 to i32*', '%108 = load i64, i64* %RBP.i, align 8', '%109 = add i64 %108, -12', '%110 = load i32, i32* %EAX.i, align 4', '%111 = load i64, i64* %3, align 8', '%112 = add i64 %111, 3', 'store i64 %112, i64* %3, align 8', '%113 = inttoptr i64 %109 to i32*', 'store i32 %110, i32* %113, align 4', '%.pre2 = load i64, i64* %3, align 8', '%114 = phi i64 [ %.pre2, %block_.L_40138f ], [ %97, %block_40138a ]', '%115 = load i64, i64* %6, align 8', '%116 = add i64 %115, 16', 'store i64 %116, i64* %6, align 8', '%117 = icmp ugt i64 %115, -17', '%118 = zext i1 %117 to i8', 'store i8 %118, i8* %14, align 1', '%119 = trunc i64 %116 to i32', '%120 = and i32 %119, 255', '%121 = tail call i32 @llvm.ctpop.i32(i32 %120)', '%122 = trunc i32 %121 to i8', '%123 = and i8 %122, 1', '%124 = xor i8 %123, 1', 'store i8 %124, i8* %21, align 1', '%125 = xor i64 %115, 16', '%126 = xor i64 %125, %116', '%127 = lshr i64 %126, 4', '%128 = trunc i64 %127 to i8', '%129 = and i8 %128, 1', 'store i8 %129, i8* %27, align 1', '%130 = icmp eq i64 %116, 0', '%131 = zext i1 %130 to i8', 'store i8 %131, i8* %30, align 1', '%132 = lshr i64 %116, 63', '%133 = trunc i64 %132 to i8', 'store i8 %133, i8* %33, align 1', '%134 = lshr i64 %115, 63', '%135 = xor i64 %132, %134', '%136 = add nuw nsw i64 %135, %132', '%137 = icmp eq i64 %136, 2', '%138 = zext i1 %137 to i8', 'store i8 %138, i8* %39, align 1', '%139 = add i64 %114, 5', 'store i64 %139, i64* %3, align 8', '%140 = add i64 %115, 24', '%141 = inttoptr i64 %116 to i64*', '%142 = load i64, i64* %141, align 8', 'store i64 %142, i64* %RBP.i, align 8', 'store i64 %140, i64* %6, align 8', '%143 = add i64 %114, 6', 'store i64 %143, i64* %3, align 8', '%144 = inttoptr i64 %140 to i64*', '%145 = load i64, i64* %144, align 8', 'store i64 %145, i64* %3, align 8', '%146 = add i64 %115, 32', 'store i64 %146, i64* %6, align 8'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Keep: %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -24
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 16
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Keep: %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Keep: %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Keep: %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Keep: %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Keep: %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Keep: %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Keep: %41 = add i64 %10, add (i64 ptrtoint (%G_0x19d0__rip__type* @G_0x19d0__rip_ to i64), i64 7)
Keep: %42 = add i64 %10, 15
Keep: store i64 %42, i64* %3, align 8
Keep: %43 = inttoptr i64 %41 to i64*
Keep: %44 = load i64, i64* %43, align 8
Keep: %45 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %40, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %44, i64* %45, align 1
Found line to remove! %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
Found line to remove! %47 = bitcast i64* %46 to double*
Found line to remove! store double 0.000000e+00, double* %47, align 1
Found line to remove! %48 = add i64 %7, -16
Found line to remove! %49 = add i64 %10, 20
Found line to remove! store i64 %49, i64* %3, align 8
Found line to remove! %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! %51 = load i64, i64* %50, align 1
Found line to remove! %52 = inttoptr i64 %48 to i64*
Found line to remove! store i64 %51, i64* %52, align 8
Keep: %53 = load i64, i64* %RBP.i, align 8
Keep: %54 = add i64 %53, -8
Keep: %55 = load i64, i64* %3, align 8
Found line to remove! %56 = add i64 %55, 5
Found line to remove! store i64 %56, i64* %3, align 8
Keep: %57 = inttoptr i64 %54 to i64*
Keep: %58 = load i64, i64* %57, align 8
Found line to remove! store i64 %58, i64* %50, align 1
Found line to remove! %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %60 = bitcast i64* %59 to double*
Found line to remove! store double 0.000000e+00, double* %60, align 1
Keep: %61 = add i64 %55, 9
Found line to remove! store i64 %61, i64* %3, align 8
Keep: %62 = bitcast i64 %58 to double
Keep: %63 = bitcast %union.VectorReg* %40 to double*
Keep: %64 = load double, double* %63, align 1
Keep: %65 = fcmp uno double %62, %64
Keep: br i1 %65, label %66, label %76
Keep: 
Keep: ; <label>:66:                                     ; preds = %entry
Keep: %67 = fadd double %62, %64
Keep: %68 = bitcast double %67 to i64
Keep: %69 = and i64 %68, 9221120237041090560
Keep: %70 = icmp eq i64 %69, 9218868437227405312
Keep: %71 = and i64 %68, 2251799813685247
Keep: %72 = icmp ne i64 %71, 0
Keep: %73 = and i1 %70, %72
Keep: br i1 %73, label %74, label %82
Keep: 
Keep: ; <label>:74:                                     ; preds = %66
Keep: %75 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %61, %struct.Memory* %2)
Found line to remove! %.pre = load i64, i64* %3, align 8
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: ; <label>:76:                                     ; preds = %entry
Keep: %77 = fcmp ogt double %62, %64
Keep: br i1 %77, label %82, label %78
Keep: 
Keep: ; <label>:78:                                     ; preds = %76
Keep: %79 = fcmp olt double %62, %64
Keep: br i1 %79, label %82, label %80
Keep: 
Keep: ; <label>:80:                                     ; preds = %78
Keep: %81 = fcmp oeq double %62, %64
Keep: br i1 %81, label %82, label %86
Keep: 
Keep: ; <label>:82:                                     ; preds = %80, %78, %76, %66
Found line to remove! %83 = phi i8 [ 0, %76 ], [ 0, %78 ], [ 1, %80 ], [ 1, %66 ]
Found line to remove! %84 = phi i8 [ 0, %76 ], [ 0, %78 ], [ 0, %80 ], [ 1, %66 ]
Found line to remove! %85 = phi i8 [ 0, %76 ], [ 1, %78 ], [ 0, %80 ], [ 1, %66 ]
Found line to remove! store i8 %83, i8* %30, align 1
Found line to remove! store i8 %84, i8* %21, align 1
Found line to remove! store i8 %85, i8* %14, align 1
Keep: br label %86
Keep: 
Keep: ; <label>:86:                                     ; preds = %82, %80
Keep: store i8 0, i8* %39, align 1
Keep: store i8 0, i8* %33, align 1
Keep: store i8 0, i8* %27, align 1
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: routine_ucomisd__xmm1___xmm0.exit:                ; preds = %86, %74
Found line to remove! %87 = phi i64 [ %.pre, %74 ], [ %61, %86 ]
Keep: %88 = phi %struct.Memory* [ %75, %74 ], [ %2, %86 ]
Found line to remove! %89 = add i64 %87, 17
Found line to remove! %90 = add i64 %87, 6
Keep: %91 = load i8, i8* %30, align 1
Keep: %92 = icmp eq i8 %91, 0
Found line to remove! %93 = select i1 %92, i64 %89, i64 %90
Found line to remove! store i64 %93, i64* %3, align 8
Keep: br i1 %92, label %block_.L_40138f, label %block_401384
Keep: 
Keep: block_401384:                                     ; preds = %routine_ucomisd__xmm1___xmm0.exit
Keep: %94 = load i8, i8* %21, align 1
Found line to remove! %95 = icmp ne i8 %94, 0
Found line to remove! %.v = select i1 %95, i64 11, i64 6
Found line to remove! %96 = add i64 %93, %.v
Found line to remove! store i64 %96, i64* %3, align 8
Keep: %cmpBr_401384 = icmp eq i8 %94, 1
Keep: br i1 %cmpBr_401384, label %block_.L_40138f, label %block_40138a
Keep: 
Keep: block_40138a:                                     ; preds = %block_401384
Found line to remove! %97 = add i64 %96, 32
Found line to remove! store i64 %97, i64* %3, align 8
Keep: br label %block_.L_4013aa
Keep: 
Keep: block_.L_40138f:                                  ; preds = %block_401384, %routine_ucomisd__xmm1___xmm0.exit
Found line to remove! %98 = phi i64 [ %96, %block_401384 ], [ %89, %routine_ucomisd__xmm1___xmm0.exit ]
Found line to remove! %RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! store i64 ptrtoint (%G__0x402e47_type* @G__0x402e47 to i64), i64* %RDI.i, align 8
Found line to remove! %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %99 = load i32, i32* bitcast (%G_0x605090_type* @G_0x605090 to i32*), align 8
Found line to remove! %100 = zext i32 %99 to i64
Found line to remove! store i64 %100, i64* %RSI.i, align 8
Found line to remove! %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL.i = bitcast %union.anon* %101 to i8*
Found line to remove! store i8 0, i8* %AL.i, align 1
Found line to remove! %102 = add i64 %98, -3663
Found line to remove! %103 = add i64 %98, 24
Found line to remove! %104 = load i64, i64* %6, align 8
Found line to remove! %105 = add i64 %104, -8
Found line to remove! %106 = inttoptr i64 %105 to i64*
Found line to remove! store i64 %103, i64* %106, align 8
Found line to remove! store i64 %105, i64* %6, align 8
Found line to remove! store i64 %102, i64* %3, align 8
Keep: %107 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %88)
Found line to remove! %EAX.i = bitcast %union.anon* %101 to i32*
Found line to remove! %108 = load i64, i64* %RBP.i, align 8
Found line to remove! %109 = add i64 %108, -12
Found line to remove! %110 = load i32, i32* %EAX.i, align 4
Found line to remove! %111 = load i64, i64* %3, align 8
Found line to remove! %112 = add i64 %111, 3
Found line to remove! store i64 %112, i64* %3, align 8
Found line to remove! %113 = inttoptr i64 %109 to i32*
Found line to remove! store i32 %110, i32* %113, align 4
Found line to remove! %.pre2 = load i64, i64* %3, align 8
Keep: br label %block_.L_4013aa
Keep: 
Keep: block_.L_4013aa:                                  ; preds = %block_.L_40138f, %block_40138a
Found line to remove! %114 = phi i64 [ %.pre2, %block_.L_40138f ], [ %97, %block_40138a ]
Keep: %MEMORY.1 = phi %struct.Memory* [ %107, %block_.L_40138f ], [ %88, %block_40138a ]
Found line to remove! %115 = load i64, i64* %6, align 8
Found line to remove! %116 = add i64 %115, 16
Found line to remove! store i64 %116, i64* %6, align 8
Found line to remove! %117 = icmp ugt i64 %115, -17
Found line to remove! %118 = zext i1 %117 to i8
Found line to remove! store i8 %118, i8* %14, align 1
Found line to remove! %119 = trunc i64 %116 to i32
Found line to remove! %120 = and i32 %119, 255
Found line to remove! %121 = tail call i32 @llvm.ctpop.i32(i32 %120)
Found line to remove! %122 = trunc i32 %121 to i8
Found line to remove! %123 = and i8 %122, 1
Found line to remove! %124 = xor i8 %123, 1
Found line to remove! store i8 %124, i8* %21, align 1
Found line to remove! %125 = xor i64 %115, 16
Found line to remove! %126 = xor i64 %125, %116
Found line to remove! %127 = lshr i64 %126, 4
Found line to remove! %128 = trunc i64 %127 to i8
Found line to remove! %129 = and i8 %128, 1
Found line to remove! store i8 %129, i8* %27, align 1
Found line to remove! %130 = icmp eq i64 %116, 0
Found line to remove! %131 = zext i1 %130 to i8
Found line to remove! store i8 %131, i8* %30, align 1
Found line to remove! %132 = lshr i64 %116, 63
Found line to remove! %133 = trunc i64 %132 to i8
Found line to remove! store i8 %133, i8* %33, align 1
Found line to remove! %134 = lshr i64 %115, 63
Found line to remove! %135 = xor i64 %132, %134
Found line to remove! %136 = add nuw nsw i64 %135, %132
Found line to remove! %137 = icmp eq i64 %136, 2
Found line to remove! %138 = zext i1 %137 to i8
Found line to remove! store i8 %138, i8* %39, align 1
Found line to remove! %139 = add i64 %114, 5
Found line to remove! store i64 %139, i64* %3, align 8
Found line to remove! %140 = add i64 %115, 24
Found line to remove! %141 = inttoptr i64 %116 to i64*
Found line to remove! %142 = load i64, i64* %141, align 8
Found line to remove! store i64 %142, i64* %RBP.i, align 8
Found line to remove! store i64 %140, i64* %6, align 8
Found line to remove! %143 = add i64 %114, 6
Found line to remove! store i64 %143, i64* %3, align 8
Found line to remove! %144 = inttoptr i64 %140 to i64*
Found line to remove! %145 = load i64, i64* %144, align 8
Found line to remove! store i64 %145, i64* %3, align 8
Found line to remove! %146 = add i64 %115, 32
Found line to remove! store i64 %146, i64* %6, align 8
Keep: ret %struct.Memory* %MEMORY.1
Missed: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', 'store i8 %38, i8* %39, align 1', '%46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%47 = bitcast i64* %46 to double*', 'store double 0.000000e+00, double* %47, align 1', '%48 = add i64 %7, -16', '%49 = add i64 %10, 20', 'store i64 %49, i64* %3, align 8', '%50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', '%51 = load i64, i64* %50, align 1', '%52 = inttoptr i64 %48 to i64*', 'store i64 %51, i64* %52, align 8', '%56 = add i64 %55, 5', 'store i64 %56, i64* %3, align 8', 'store i64 %58, i64* %50, align 1', '%59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%60 = bitcast i64* %59 to double*', 'store double 0.000000e+00, double* %60, align 1', 'store i64 %61, i64* %3, align 8', '%.pre = load i64, i64* %3, align 8', '%83 = phi i8 [ 0, %76 ], [ 0, %78 ], [ 1, %80 ], [ 1, %66 ]', '%84 = phi i8 [ 0, %76 ], [ 0, %78 ], [ 0, %80 ], [ 1, %66 ]', '%85 = phi i8 [ 0, %76 ], [ 1, %78 ], [ 0, %80 ], [ 1, %66 ]', 'store i8 %83, i8* %30, align 1', 'store i8 %84, i8* %21, align 1', 'store i8 %85, i8* %14, align 1', '%87 = phi i64 [ %.pre, %74 ], [ %61, %86 ]', '%89 = add i64 %87, 17', '%90 = add i64 %87, 6', '%93 = select i1 %92, i64 %89, i64 %90', 'store i64 %93, i64* %3, align 8', '%95 = icmp ne i8 %94, 0', '%.v = select i1 %95, i64 11, i64 6', '%96 = add i64 %93, %.v', 'store i64 %96, i64* %3, align 8', '%97 = add i64 %96, 32', 'store i64 %97, i64* %3, align 8', '%98 = phi i64 [ %96, %block_401384 ], [ %89, %routine_ucomisd__xmm1___xmm0.exit ]', '%RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', 'store i64 ptrtoint (%G__0x402e47_type* @G__0x402e47 to i64), i64* %RDI.i, align 8', '%RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%99 = load i32, i32* bitcast (%G_0x605090_type* @G_0x605090 to i32*), align 8', '%100 = zext i32 %99 to i64', 'store i64 %100, i64* %RSI.i, align 8', '%101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL.i = bitcast %union.anon* %101 to i8*', 'store i8 0, i8* %AL.i, align 1', '%102 = add i64 %98, -3663', '%103 = add i64 %98, 24', '%104 = load i64, i64* %6, align 8', '%105 = add i64 %104, -8', '%106 = inttoptr i64 %105 to i64*', 'store i64 %103, i64* %106, align 8', 'store i64 %105, i64* %6, align 8', 'store i64 %102, i64* %3, align 8', '%EAX.i = bitcast %union.anon* %101 to i32*', '%108 = load i64, i64* %RBP.i, align 8', '%109 = add i64 %108, -12', '%110 = load i32, i32* %EAX.i, align 4', '%111 = load i64, i64* %3, align 8', '%112 = add i64 %111, 3', 'store i64 %112, i64* %3, align 8', '%113 = inttoptr i64 %109 to i32*', 'store i32 %110, i32* %113, align 4', '%.pre2 = load i64, i64* %3, align 8', '%114 = phi i64 [ %.pre2, %block_.L_40138f ], [ %97, %block_40138a ]', '%115 = load i64, i64* %6, align 8', '%116 = add i64 %115, 16', 'store i64 %116, i64* %6, align 8', '%117 = icmp ugt i64 %115, -17', '%118 = zext i1 %117 to i8', 'store i8 %118, i8* %14, align 1', '%119 = trunc i64 %116 to i32', '%120 = and i32 %119, 255', '%121 = tail call i32 @llvm.ctpop.i32(i32 %120)', '%122 = trunc i32 %121 to i8', '%123 = and i8 %122, 1', '%124 = xor i8 %123, 1', 'store i8 %124, i8* %21, align 1', '%125 = xor i64 %115, 16', '%126 = xor i64 %125, %116', '%127 = lshr i64 %126, 4', '%128 = trunc i64 %127 to i8', '%129 = and i8 %128, 1', 'store i8 %129, i8* %27, align 1', '%130 = icmp eq i64 %116, 0', '%131 = zext i1 %130 to i8', 'store i8 %131, i8* %30, align 1', '%132 = lshr i64 %116, 63', '%133 = trunc i64 %132 to i8', 'store i8 %133, i8* %33, align 1', '%134 = lshr i64 %115, 63', '%135 = xor i64 %132, %134', '%136 = add nuw nsw i64 %135, %132', '%137 = icmp eq i64 %136, 2', '%138 = zext i1 %137 to i8', 'store i8 %138, i8* %39, align 1', '%139 = add i64 %114, 5', 'store i64 %139, i64* %3, align 8', '%140 = add i64 %115, 24', '%141 = inttoptr i64 %116 to i64*', '%142 = load i64, i64* %141, align 8', 'store i64 %142, i64* %RBP.i, align 8', 'store i64 %140, i64* %6, align 8', '%143 = add i64 %114, 6', 'store i64 %143, i64* %3, align 8', '%144 = inttoptr i64 %140 to i64*', '%145 = load i64, i64* %144, align 8', 'store i64 %145, i64* %3, align 8', '%146 = add i64 %115, 32', 'store i64 %146, i64* %6, align 8'])
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = load i64, i64* %RSP, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %5, i64* %9, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %RSP, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', 'store i8 %38, i8* %39, align 1', '%40 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402d20__rodata_type* @seg_402d20__rodata to i64), i64 32) to i64*), align 16', '%41 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %40, i64* %41, align 1', '%42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%43 = bitcast i64* %42 to double*', 'store double 0.000000e+00, double* %43, align 1', '%44 = add i64 %7, -16', '%45 = add i64 %10, 20', 'store i64 %45, i64* %PC, align 8', '%46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', '%47 = load i64, i64* %46, align 1', '%48 = inttoptr i64 %44 to i64*', 'store i64 %47, i64* %48, align 8', '%52 = add i64 %51, 5', 'store i64 %52, i64* %PC, align 8', 'store i64 %54, i64* %46, align 1', '%55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%56 = bitcast i64* %55 to double*', 'store double 0.000000e+00, double* %56, align 1', 'store i64 %57, i64* %PC, align 8', '%.pre = load i64, i64* %PC, align 8', '%79 = phi i8 [ 0, %72 ], [ 0, %74 ], [ 1, %76 ], [ 1, %62 ]', '%80 = phi i8 [ 0, %72 ], [ 0, %74 ], [ 0, %76 ], [ 1, %62 ]', '%81 = phi i8 [ 0, %72 ], [ 1, %74 ], [ 0, %76 ], [ 1, %62 ]', 'store i8 %79, i8* %30, align 1', 'store i8 %80, i8* %21, align 1', 'store i8 %81, i8* %14, align 1', '%83 = phi i64 [ %.pre, %70 ], [ %57, %82 ]', '%85 = add i64 %83, 17', '%86 = add i64 %83, 6', '%89 = select i1 %88, i64 %85, i64 %86', 'store i64 %89, i64* %PC, align 8', '%90 = phi i64 [ %.pre2, %block_40138f ], [ %142, %block_40138a ]', '%91 = load i64, i64* %RSP, align 8', '%92 = add i64 %91, 16', 'store i64 %92, i64* %RSP, align 8', '%93 = icmp ugt i64 %91, -17', '%94 = zext i1 %93 to i8', 'store i8 %94, i8* %14, align 1', '%95 = trunc i64 %92 to i32', '%96 = and i32 %95, 255', '%97 = tail call i32 @llvm.ctpop.i32(i32 %96) #12', '%98 = trunc i32 %97 to i8', '%99 = and i8 %98, 1', '%100 = xor i8 %99, 1', 'store i8 %100, i8* %21, align 1', '%101 = xor i64 %91, 16', '%102 = xor i64 %101, %92', '%103 = lshr i64 %102, 4', '%104 = trunc i64 %103 to i8', '%105 = and i8 %104, 1', 'store i8 %105, i8* %27, align 1', '%106 = icmp eq i64 %92, 0', '%107 = zext i1 %106 to i8', 'store i8 %107, i8* %30, align 1', '%108 = lshr i64 %92, 63', '%109 = trunc i64 %108 to i8', 'store i8 %109, i8* %33, align 1', '%110 = lshr i64 %91, 63', '%111 = xor i64 %108, %110', '%112 = add nuw nsw i64 %111, %108', '%113 = icmp eq i64 %112, 2', '%114 = zext i1 %113 to i8', 'store i8 %114, i8* %39, align 1', '%115 = add i64 %90, 5', 'store i64 %115, i64* %PC, align 8', '%116 = add i64 %91, 24', '%117 = inttoptr i64 %92 to i64*', '%118 = load i64, i64* %117, align 8', 'store i64 %118, i64* %RBP, align 8', 'store i64 %116, i64* %RSP, align 8', '%119 = add i64 %90, 6', 'store i64 %119, i64* %PC, align 8', '%120 = inttoptr i64 %116 to i64*', '%121 = load i64, i64* %120, align 8', 'store i64 %121, i64* %PC, align 8', '%122 = add i64 %91, 32', 'store i64 %122, i64* %RSP, align 8', '%124 = icmp ne i8 %123, 0', '%.v = select i1 %124, i64 11, i64 6', '%125 = add i64 %89, %.v', 'store i64 %125, i64* %PC, align 8', '%127 = phi i64 [ %125, %block_401384 ], [ %85, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]', 'store i64 add (i64 ptrtoint (%seg_402d20__rodata_type* @seg_402d20__rodata to i64), i64 295), i64* %RDI, align 8', '%128 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8', '%129 = zext i32 %128 to i64', 'store i64 %129, i64* %RSI, align 8', 'store i8 0, i8* %AL, align 1', '%130 = add i64 %127, -3663', '%131 = add i64 %127, 24', '%132 = load i64, i64* %RSP, align 8', '%133 = add i64 %132, -8', '%134 = inttoptr i64 %133 to i64*', 'store i64 %131, i64* %134, align 8', 'store i64 %133, i64* %RSP, align 8', 'store i64 %130, i64* %PC, align 8', '%136 = load i64, i64* %RBP, align 8', '%137 = add i64 %136, -12', '%138 = load i32, i32* %EAX, align 4', '%139 = load i64, i64* %PC, align 8', '%140 = add i64 %139, 3', 'store i64 %140, i64* %PC, align 8', '%141 = inttoptr i64 %137 to i32*', 'store i32 %138, i32* %141, align 4', '%.pre2 = load i64, i64* %PC, align 8', '%142 = add i64 %125, 32', 'store i64 %142, i64* %PC, align 8'])
Keep: block_401360:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Found line to remove! %EAX = bitcast %union.anon* %3 to i32*
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Found line to remove! %5 = load i64, i64* %RBP, align 8
Found line to remove! %6 = add i64 %1, 1
Found line to remove! store i64 %6, i64* %PC, align 8
Found line to remove! %7 = load i64, i64* %RSP, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %5, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %PC, align 8
Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -24
Found line to remove! store i64 %11, i64* %RSP, align 8
Found line to remove! %12 = icmp ult i64 %8, 16
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Keep: %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Keep: %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Keep: %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Keep: %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Keep: %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %40 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402d20__rodata_type* @seg_402d20__rodata to i64), i64 32) to i64*), align 16
Found line to remove! %41 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! store i64 %40, i64* %41, align 1
Found line to remove! %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
Found line to remove! %43 = bitcast i64* %42 to double*
Found line to remove! store double 0.000000e+00, double* %43, align 1
Found line to remove! %44 = add i64 %7, -16
Found line to remove! %45 = add i64 %10, 20
Found line to remove! store i64 %45, i64* %PC, align 8
Found line to remove! %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! %47 = load i64, i64* %46, align 1
Found line to remove! %48 = inttoptr i64 %44 to i64*
Found line to remove! store i64 %47, i64* %48, align 8
Keep: %49 = load i64, i64* %RBP, align 8
Keep: %50 = add i64 %49, -8
Keep: %51 = load i64, i64* %PC, align 8
Found line to remove! %52 = add i64 %51, 5
Found line to remove! store i64 %52, i64* %PC, align 8
Keep: %53 = inttoptr i64 %50 to i64*
Keep: %54 = load i64, i64* %53, align 8
Found line to remove! store i64 %54, i64* %46, align 1
Found line to remove! %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %56 = bitcast i64* %55 to double*
Found line to remove! store double 0.000000e+00, double* %56, align 1
Keep: %57 = add i64 %51, 9
Found line to remove! store i64 %57, i64* %PC, align 8
Keep: %58 = bitcast i64 %54 to double
Keep: %59 = bitcast %union.VectorReg* %4 to double*
Keep: %60 = load double, double* %59, align 1
Keep: %61 = fcmp uno double %58, %60
Keep: br i1 %61, label %62, label %72
Keep: 
Keep: ; <label>:62:                                     ; preds = %block_401360
Keep: %63 = fadd double %58, %60
Keep: %64 = bitcast double %63 to i64
Keep: %65 = and i64 %64, 9221120237041090560
Keep: %66 = icmp eq i64 %65, 9218868437227405312
Keep: %67 = and i64 %64, 2251799813685247
Keep: %68 = icmp ne i64 %67, 0
Keep: %69 = and i1 %66, %68
Keep: br i1 %69, label %70, label %78
Keep: 
Keep: ; <label>:70:                                     ; preds = %62
Keep: %71 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %57, %struct.Memory* %2) #13
Found line to remove! %.pre = load i64, i64* %PC, align 8
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: ; <label>:72:                                     ; preds = %block_401360
Keep: %73 = fcmp ogt double %58, %60
Keep: br i1 %73, label %78, label %74
Keep: 
Keep: ; <label>:74:                                     ; preds = %72
Keep: %75 = fcmp olt double %58, %60
Keep: br i1 %75, label %78, label %76
Keep: 
Keep: ; <label>:76:                                     ; preds = %74
Keep: %77 = fcmp oeq double %58, %60
Keep: br i1 %77, label %78, label %82
Keep: 
Keep: ; <label>:78:                                     ; preds = %76, %74, %72, %62
Found line to remove! %79 = phi i8 [ 0, %72 ], [ 0, %74 ], [ 1, %76 ], [ 1, %62 ]
Found line to remove! %80 = phi i8 [ 0, %72 ], [ 0, %74 ], [ 0, %76 ], [ 1, %62 ]
Found line to remove! %81 = phi i8 [ 0, %72 ], [ 1, %74 ], [ 0, %76 ], [ 1, %62 ]
Found line to remove! store i8 %79, i8* %30, align 1
Found line to remove! store i8 %80, i8* %21, align 1
Found line to remove! store i8 %81, i8* %14, align 1
Keep: br label %82
Keep: 
Keep: ; <label>:82:                                     ; preds = %78, %76
Keep: store i8 0, i8* %39, align 1
Keep: store i8 0, i8* %33, align 1
Keep: store i8 0, i8* %27, align 1
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: _ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %82, %70
Found line to remove! %83 = phi i64 [ %.pre, %70 ], [ %57, %82 ]
Keep: %84 = phi %struct.Memory* [ %71, %70 ], [ %2, %82 ]
Found line to remove! %85 = add i64 %83, 17
Found line to remove! %86 = add i64 %83, 6
Keep: %87 = load i8, i8* %30, align 1
Keep: %88 = icmp eq i8 %87, 0
Found line to remove! %89 = select i1 %88, i64 %85, i64 %86
Found line to remove! store i64 %89, i64* %PC, align 8
Keep: br i1 %88, label %block_40138f, label %block_401384
Keep: 
Keep: block_4013aa:                                     ; preds = %block_40138a, %block_40138f
Found line to remove! %90 = phi i64 [ %.pre2, %block_40138f ], [ %142, %block_40138a ]
Keep: %MEMORY.0 = phi %struct.Memory* [ %135, %block_40138f ], [ %84, %block_40138a ]
Found line to remove! %91 = load i64, i64* %RSP, align 8
Found line to remove! %92 = add i64 %91, 16
Found line to remove! store i64 %92, i64* %RSP, align 8
Found line to remove! %93 = icmp ugt i64 %91, -17
Found line to remove! %94 = zext i1 %93 to i8
Found line to remove! store i8 %94, i8* %14, align 1
Found line to remove! %95 = trunc i64 %92 to i32
Found line to remove! %96 = and i32 %95, 255
Found line to remove! %97 = tail call i32 @llvm.ctpop.i32(i32 %96) #12
Found line to remove! %98 = trunc i32 %97 to i8
Found line to remove! %99 = and i8 %98, 1
Found line to remove! %100 = xor i8 %99, 1
Found line to remove! store i8 %100, i8* %21, align 1
Found line to remove! %101 = xor i64 %91, 16
Found line to remove! %102 = xor i64 %101, %92
Found line to remove! %103 = lshr i64 %102, 4
Found line to remove! %104 = trunc i64 %103 to i8
Found line to remove! %105 = and i8 %104, 1
Found line to remove! store i8 %105, i8* %27, align 1
Found line to remove! %106 = icmp eq i64 %92, 0
Found line to remove! %107 = zext i1 %106 to i8
Found line to remove! store i8 %107, i8* %30, align 1
Found line to remove! %108 = lshr i64 %92, 63
Found line to remove! %109 = trunc i64 %108 to i8
Found line to remove! store i8 %109, i8* %33, align 1
Found line to remove! %110 = lshr i64 %91, 63
Found line to remove! %111 = xor i64 %108, %110
Found line to remove! %112 = add nuw nsw i64 %111, %108
Found line to remove! %113 = icmp eq i64 %112, 2
Found line to remove! %114 = zext i1 %113 to i8
Found line to remove! store i8 %114, i8* %39, align 1
Found line to remove! %115 = add i64 %90, 5
Found line to remove! store i64 %115, i64* %PC, align 8
Found line to remove! %116 = add i64 %91, 24
Found line to remove! %117 = inttoptr i64 %92 to i64*
Found line to remove! %118 = load i64, i64* %117, align 8
Found line to remove! store i64 %118, i64* %RBP, align 8
Found line to remove! store i64 %116, i64* %RSP, align 8
Found line to remove! %119 = add i64 %90, 6
Found line to remove! store i64 %119, i64* %PC, align 8
Found line to remove! %120 = inttoptr i64 %116 to i64*
Found line to remove! %121 = load i64, i64* %120, align 8
Found line to remove! store i64 %121, i64* %PC, align 8
Found line to remove! %122 = add i64 %91, 32
Found line to remove! store i64 %122, i64* %RSP, align 8
Keep: ret %struct.Memory* %MEMORY.0
Keep: 
Keep: block_401384:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: %123 = load i8, i8* %21, align 1
Found line to remove! %124 = icmp ne i8 %123, 0
Found line to remove! %.v = select i1 %124, i64 11, i64 6
Found line to remove! %125 = add i64 %89, %.v
Found line to remove! store i64 %125, i64* %PC, align 8
Keep: %126 = icmp eq i8 %123, 1
Keep: br i1 %126, label %block_40138f, label %block_40138a
Keep: 
Keep: block_40138f:                                     ; preds = %block_401384, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Found line to remove! %127 = phi i64 [ %125, %block_401384 ], [ %85, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
Found line to remove! store i64 add (i64 ptrtoint (%seg_402d20__rodata_type* @seg_402d20__rodata to i64), i64 295), i64* %RDI, align 8
Found line to remove! %128 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
Found line to remove! %129 = zext i32 %128 to i64
Found line to remove! store i64 %129, i64* %RSI, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %130 = add i64 %127, -3663
Found line to remove! %131 = add i64 %127, 24
Found line to remove! %132 = load i64, i64* %RSP, align 8
Found line to remove! %133 = add i64 %132, -8
Found line to remove! %134 = inttoptr i64 %133 to i64*
Found line to remove! store i64 %131, i64* %134, align 8
Found line to remove! store i64 %133, i64* %RSP, align 8
Found line to remove! store i64 %130, i64* %PC, align 8
Keep: %135 = tail call fastcc %struct.Memory* @ext_60cf18_printf(%struct.State* nonnull %0, %struct.Memory* %84)
Found line to remove! %136 = load i64, i64* %RBP, align 8
Found line to remove! %137 = add i64 %136, -12
Found line to remove! %138 = load i32, i32* %EAX, align 4
Found line to remove! %139 = load i64, i64* %PC, align 8
Found line to remove! %140 = add i64 %139, 3
Found line to remove! store i64 %140, i64* %PC, align 8
Found line to remove! %141 = inttoptr i64 %137 to i32*
Found line to remove! store i32 %138, i32* %141, align 4
Found line to remove! %.pre2 = load i64, i64* %PC, align 8
Keep: br label %block_4013aa
Keep: 
Keep: block_40138a:                                     ; preds = %block_401384
Found line to remove! %142 = add i64 %125, 32
Found line to remove! store i64 %142, i64* %PC, align 8
Keep: br label %block_4013aa
Missed: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = load i64, i64* %RSP, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %5, i64* %9, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %RSP, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', 'store i8 %38, i8* %39, align 1', '%40 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402d20__rodata_type* @seg_402d20__rodata to i64), i64 32) to i64*), align 16', '%41 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %40, i64* %41, align 1', '%42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%43 = bitcast i64* %42 to double*', 'store double 0.000000e+00, double* %43, align 1', '%44 = add i64 %7, -16', '%45 = add i64 %10, 20', 'store i64 %45, i64* %PC, align 8', '%46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', '%47 = load i64, i64* %46, align 1', '%48 = inttoptr i64 %44 to i64*', 'store i64 %47, i64* %48, align 8', '%52 = add i64 %51, 5', 'store i64 %52, i64* %PC, align 8', 'store i64 %54, i64* %46, align 1', '%55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%56 = bitcast i64* %55 to double*', 'store double 0.000000e+00, double* %56, align 1', 'store i64 %57, i64* %PC, align 8', '%.pre = load i64, i64* %PC, align 8', '%79 = phi i8 [ 0, %72 ], [ 0, %74 ], [ 1, %76 ], [ 1, %62 ]', '%80 = phi i8 [ 0, %72 ], [ 0, %74 ], [ 0, %76 ], [ 1, %62 ]', '%81 = phi i8 [ 0, %72 ], [ 1, %74 ], [ 0, %76 ], [ 1, %62 ]', 'store i8 %79, i8* %30, align 1', 'store i8 %80, i8* %21, align 1', 'store i8 %81, i8* %14, align 1', '%83 = phi i64 [ %.pre, %70 ], [ %57, %82 ]', '%85 = add i64 %83, 17', '%86 = add i64 %83, 6', '%89 = select i1 %88, i64 %85, i64 %86', 'store i64 %89, i64* %PC, align 8', '%90 = phi i64 [ %.pre2, %block_40138f ], [ %142, %block_40138a ]', '%91 = load i64, i64* %RSP, align 8', '%92 = add i64 %91, 16', 'store i64 %92, i64* %RSP, align 8', '%93 = icmp ugt i64 %91, -17', '%94 = zext i1 %93 to i8', 'store i8 %94, i8* %14, align 1', '%95 = trunc i64 %92 to i32', '%96 = and i32 %95, 255', '%97 = tail call i32 @llvm.ctpop.i32(i32 %96) #12', '%98 = trunc i32 %97 to i8', '%99 = and i8 %98, 1', '%100 = xor i8 %99, 1', 'store i8 %100, i8* %21, align 1', '%101 = xor i64 %91, 16', '%102 = xor i64 %101, %92', '%103 = lshr i64 %102, 4', '%104 = trunc i64 %103 to i8', '%105 = and i8 %104, 1', 'store i8 %105, i8* %27, align 1', '%106 = icmp eq i64 %92, 0', '%107 = zext i1 %106 to i8', 'store i8 %107, i8* %30, align 1', '%108 = lshr i64 %92, 63', '%109 = trunc i64 %108 to i8', 'store i8 %109, i8* %33, align 1', '%110 = lshr i64 %91, 63', '%111 = xor i64 %108, %110', '%112 = add nuw nsw i64 %111, %108', '%113 = icmp eq i64 %112, 2', '%114 = zext i1 %113 to i8', 'store i8 %114, i8* %39, align 1', '%115 = add i64 %90, 5', 'store i64 %115, i64* %PC, align 8', '%116 = add i64 %91, 24', '%117 = inttoptr i64 %92 to i64*', '%118 = load i64, i64* %117, align 8', 'store i64 %118, i64* %RBP, align 8', 'store i64 %116, i64* %RSP, align 8', '%119 = add i64 %90, 6', 'store i64 %119, i64* %PC, align 8', '%120 = inttoptr i64 %116 to i64*', '%121 = load i64, i64* %120, align 8', 'store i64 %121, i64* %PC, align 8', '%122 = add i64 %91, 32', 'store i64 %122, i64* %RSP, align 8', '%124 = icmp ne i8 %123, 0', '%.v = select i1 %124, i64 11, i64 6', '%125 = add i64 %89, %.v', 'store i64 %125, i64* %PC, align 8', '%127 = phi i64 [ %125, %block_401384 ], [ %85, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]', 'store i64 add (i64 ptrtoint (%seg_402d20__rodata_type* @seg_402d20__rodata to i64), i64 295), i64* %RDI, align 8', '%128 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8', '%129 = zext i32 %128 to i64', 'store i64 %129, i64* %RSI, align 8', 'store i8 0, i8* %AL, align 1', '%130 = add i64 %127, -3663', '%131 = add i64 %127, 24', '%132 = load i64, i64* %RSP, align 8', '%133 = add i64 %132, -8', '%134 = inttoptr i64 %133 to i64*', 'store i64 %131, i64* %134, align 8', 'store i64 %133, i64* %RSP, align 8', 'store i64 %130, i64* %PC, align 8', '%136 = load i64, i64* %RBP, align 8', '%137 = add i64 %136, -12', '%138 = load i32, i32* %EAX, align 4', '%139 = load i64, i64* %PC, align 8', '%140 = add i64 %139, 3', 'store i64 %140, i64* %PC, align 8', '%141 = inttoptr i64 %137 to i32*', 'store i32 %138, i32* %141, align 4', '%.pre2 = load i64, i64* %PC, align 8', '%142 = add i64 %125, 32', 'store i64 %142, i64* %PC, align 8'])Writing '/tmp/tmplryj6xpq.dot'...
Writing '/tmp/tmplryj6xpq.dot':Done

Reading LLVM: /tmp/tmp1oyruhm5-query.ll
Extracting function [_Z5checkd] from /tmp/tmp1oyruhm5-query.ll
Dot file generated!
Writing '/tmp/tmpwltrj2ph.dot'...
Writing '/tmp/tmpwltrj2ph.dot':Done

Reading LLVM: /tmp/tmpnxlkqevs-target.ll
Extracting function [_Z5checkd] from /tmp/tmpnxlkqevs-target.ll
Dot file generated!

================ Starting round 2
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %var_2_10 = load i64, i64* %var_2_3, align 8
- 3 %var_2_21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 4 %var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 5 %var_2_30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 6 %var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 7 %var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 8 %var_2_41 = add i64 %var_2_10, add (i64 ptrtoint (%G_0x19d0__rip__type* @G_0x19d0__rip_ to i64), i64 7)
- 9 %var_2_42 = add i64 %var_2_10, 15
- 10 store i64 %var_2_42, i64* %var_2_3, align 8
- 11 %var_2_43 = inttoptr i64 %var_2_41 to i64*
- 12 %var_2_44 = load i64, i64* %var_2_43, align 8
- 13 %var_2_45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
- 14 store i64 %var_2_44, i64* %var_2_45, align 1
- 15 %var_2_53 = load i64, i64* %RBP.i, align 8
- 16 %var_2_54 = add i64 %var_2_53, -8
- 17 %3 = inttoptr i64 %var_2_54 to double*
- 18 %var_2_582 = load double, double* %3, align 8
- 19 %var_2_61 = add i64 %var_2_10, 24
- 20 %4 = bitcast i64 %var_2_44 to double
- 21 %var_2_65 = fcmp uno double %var_2_582, %4
- 22 \<badref\> = br i1 %var_2_65, label %var_2_66, label %var_2_86
- 23 %var_2_67 = fadd double %var_2_582, %4
- 24 %var_2_68 = bitcast double %var_2_67 to i64
- 25 %var_2_69 = and i64 %var_2_68, 9221120237041090560
- 26 %var_2_70 = icmp eq i64 %var_2_69, 9218868437227405312
- 27 %var_2_71 = and i64 %var_2_68, 2251799813685247
- 28 %var_2_72 = icmp ne i64 %var_2_71, 0
- 29 %var_2_73 = and i1 %var_2_70, %var_2_72
- 30 \<badref\> = br i1 %var_2_73, label %var_2_74, label %var_2_86
- 31 %var_2_75 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_61, %struct.Memory* %2)
- 32 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 33 store i8 0, i8* %var_2_39, align 1
- 34 store i8 0, i8* %var_2_33, align 1
- 35 store i8 0, i8* %var_2_27, align 1
- 36 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 37 %var_2_88 = phi %struct.Memory* [ %var_2_75, %var_2_74 ], [ %2, %var_2_86 ]
- 38 %var_2_91 = load i8, i8* %var_2_30, align 1
- 39 %var_2_92 = icmp eq i8 %var_2_91, 0
- 40 \<badref\> = br i1 %var_2_92, label %block_.L_40138f, label %block_401384
- 41 %var_2_94 = load i8, i8* %var_2_21, align 1
- 42 %cmpBr_401384 = icmp eq i8 %var_2_94, 1
- 43 \<badref\> = br i1 %cmpBr_401384, label %block_.L_40138f, label %block_.L_4013aa
- 44 %var_2_107 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %var_2_88)
- 45 \<badref\> = br label %block_.L_4013aa
- 46 %MEMORY.1 = phi %struct.Memory* [ %var_2_107, %block_.L_40138f ], [ %var_2_88, %block_401384 ]
- 47 \<badref\> = ret %struct.Memory* %MEMORY.1
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f638c5c6620>, {0: {0}, 1: {1}, 2: {33, 35, 8, 10, 12, 15}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: set(), 9: set(), 10: {28, 29, 30}, 11: {11}, 12: {33, 35, 8, 10, 12, 15}, 13: set(), 14: {28, 29, 30}, 15: {33, 35, 8, 10, 12, 15}, 16: {9}, 17: {11}, 18: {33, 35, 8, 10, 12, 15}, 19: set(), 20: {19, 14}, 21: {16}, 22: {38, 17, 25}, 23: {18}, 24: {19, 14}, 25: {20}, 26: {21}, 27: {22}, 28: {34, 23}, 29: {24}, 30: {38, 17, 25}, 31: {41, 26}, 32: {42, 27, 31}, 33: {28, 29, 30}, 34: {28, 29, 30}, 35: {28, 29, 30}, 36: {42, 27, 31}, 37: {32, 39}, 38: {33, 35, 8, 10, 12, 15}, 39: {34, 23}, 40: {38, 17, 25}, 41: {33, 35, 8, 10, 12, 15}, 42: {36}, 43: {38, 17, 25}, 44: {41, 26}, 45: {42, 27, 31}, 46: {32, 39}, 47: {40}})
Equivalent! frozenset({42, 27, 31}) {32, 36, 45}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f638c5c6620>, {0: set(), 1: set(), 2: set(), 3: set(), 4: {4}, 5: set(), 6: {6}, 7: {7}, 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: set(), 30: set(), 31: set(), 32: {42}, 33: {28}, 34: {29}, 35: {30}, 36: {27}, 37: set(), 38: set(), 39: set(), 40: set(), 41: set(), 42: set(), 43: set(), 44: set(), 45: {31}, 46: set(), 47: set()})
NO MATCH 0
NO MATCH 1
NO MATCH 2
NO MATCH 3
EXACT 4 getelementptr getelementptr
NO MATCH 5
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
NO MATCH 29
NO MATCH 30
NO MATCH 31
EXACT 32 br br
EXACT 33 store store
EXACT 34 store store
EXACT 35 store store
EXACT 36 br br
NO MATCH 37
NO MATCH 38
NO MATCH 39
NO MATCH 40
NO MATCH 41
NO MATCH 42
NO MATCH 43
NO MATCH 44
EXACT 45 br br
NO MATCH 46
NO MATCH 47
================ Starting round 3
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %var_2_4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 3 %var_2_21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 4 %var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 5 %var_2_30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 6 %var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 7 %var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 8 %var_2_49 = load i64, i64* %RBP, align 8
- 9 %var_2_50 = add i64 %var_2_49, -8
- 10 %var_2_51 = load i64, i64* %PC, align 8
- 11 %3 = inttoptr i64 %var_2_50 to double*
- 12 %var_2_543 = load double, double* %3, align 8
- 13 %var_2_57 = add i64 %var_2_51, 9
- 14 %var_2_59 = bitcast %union.VectorReg* %var_2_4 to double*
- 15 %var_2_60 = load double, double* %var_2_59, align 1
- 16 %var_2_61 = fcmp uno double %var_2_543, %var_2_60
- 17 \<badref\> = br i1 %var_2_61, label %var_2_62, label %var_2_82
- 18 %var_2_63 = fadd double %var_2_543, %var_2_60
- 19 %var_2_64 = bitcast double %var_2_63 to i64
- 20 %var_2_65 = and i64 %var_2_64, 9221120237041090560
- 21 %var_2_66 = icmp eq i64 %var_2_65, 9218868437227405312
- 22 %var_2_67 = and i64 %var_2_64, 2251799813685247
- 23 %var_2_68 = icmp ne i64 %var_2_67, 0
- 24 %var_2_69 = and i1 %var_2_66, %var_2_68
- 25 \<badref\> = br i1 %var_2_69, label %var_2_70, label %var_2_82
- 26 %var_2_71 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_57, %struct.Memory* %2) #13
- 27 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 28 store i8 0, i8* %var_2_39, align 1
- 29 store i8 0, i8* %var_2_33, align 1
- 30 store i8 0, i8* %var_2_27, align 1
- 31 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 32 %var_2_84 = phi %struct.Memory* [ %var_2_71, %var_2_70 ], [ %2, %var_2_82 ]
- 33 %var_2_87 = load i8, i8* %var_2_30, align 1
- 34 %var_2_88 = icmp eq i8 %var_2_87, 0
- 35 %var_2_123 = load i8, i8* %var_2_21, align 1
- 36 %var_2_126 = icmp eq i8 %var_2_123, 1
- 37 %or.cond2 = or i1 %var_2_88, %var_2_126
- 38 \<badref\> = br i1 %or.cond2, label %block_40138f, label %block_4013aa
- 39 %MEMORY.0 = phi %struct.Memory* [ %var_2_135, %block_40138f ], [ %var_2_84, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
- 40 \<badref\> = ret %struct.Memory* %MEMORY.0
- 41 %var_2_135 = tail call fastcc %struct.Memory* @ext_60cf18_printf(%struct.State* nonnull %0, %struct.Memory* %var_2_84)
- 42 \<badref\> = br label %block_4013aa
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f638c0c7510>, {0: {0}, 1: {1}, 2: set(), 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {2, 38, 41, 12, 15, 18}, 9: {16}, 10: {2, 38, 41, 12, 15, 18}, 11: {17, 11}, 12: {2, 38, 41, 12, 15, 18}, 13: set(), 14: {24, 20}, 15: {2, 38, 41, 12, 15, 18}, 16: {21}, 17: {40, 43, 22, 30}, 18: {23}, 19: {24, 20}, 20: {25}, 21: {26}, 22: {27}, 23: {28, 39}, 24: {29}, 25: {40, 43, 22, 30}, 26: {44, 31}, 27: {32, 36, 45}, 28: {33, 34, 35, 10, 14}, 29: {33, 34, 35, 10, 14}, 30: {33, 34, 35, 10, 14}, 31: {32, 36, 45}, 32: {37, 46}, 33: {2, 38, 41, 12, 15, 18}, 34: {28, 39}, 35: {2, 38, 41, 12, 15, 18}, 36: {42}, 37: set(), 38: {40, 43, 22, 30}, 39: {37, 46}, 40: {47}, 41: {44, 31}, 42: {32, 36, 45}})
Equivalent! frozenset({32, 36, 45}) {42, 27, 31}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f638c0c7510>, {0: set(), 1: set(), 2: set(), 3: set(), 4: {4}, 5: set(), 6: {6}, 7: {7}, 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: {36}, 28: {33}, 29: {34}, 30: {35}, 31: {45}, 32: set(), 33: set(), 34: set(), 35: set(), 36: set(), 37: set(), 38: set(), 39: set(), 40: set(), 41: set(), 42: {32}})
NO MATCH 0
NO MATCH 1
NO MATCH 2
NO MATCH 3
EXACT 4 getelementptr getelementptr
NO MATCH 5
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
EXACT 27 br br
EXACT 28 store store
EXACT 29 store store
EXACT 30 store store
EXACT 31 br br
NO MATCH 32
NO MATCH 33
NO MATCH 34
NO MATCH 35
NO MATCH 36
NO MATCH 37
NO MATCH 38
NO MATCH 39
NO MATCH 40
NO MATCH 41
EXACT 42 br br
FP: 63 2.0 False
TO REMOVE: dict_keys(['store i8 0, i8* %var_2_39, align 1', 'store i8 0, i8* %var_2_33, align 1', 'store i8 0, i8* %var_2_27, align 1', '%var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13'])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_10 = load i64, i64* %var_2_3, align 8
Keep: %var_2_21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! %var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Keep: %var_2_30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Keep: %var_2_41 = add i64 %var_2_10, add (i64 ptrtoint (%G_0x19d0__rip__type* @G_0x19d0__rip_ to i64), i64 7)
Keep: %var_2_42 = add i64 %var_2_10, 15
Keep: store i64 %var_2_42, i64* %var_2_3, align 8
Keep: %var_2_43 = inttoptr i64 %var_2_41 to i64*
Keep: %var_2_44 = load i64, i64* %var_2_43, align 8
Keep: %var_2_45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_44, i64* %var_2_45, align 1
Keep: %var_2_53 = load i64, i64* %RBP.i, align 8
Keep: %var_2_54 = add i64 %var_2_53, -8
Keep: %3 = inttoptr i64 %var_2_54 to double*
Keep: %var_2_582 = load double, double* %3, align 8
Keep: %var_2_61 = add i64 %var_2_10, 24
Keep: %4 = bitcast i64 %var_2_44 to double
Keep: %var_2_65 = fcmp uno double %var_2_582, %4
Keep: br i1 %var_2_65, label %var_2_66, label %var_2_86
Keep: 
Keep: var_2_66:                                         ; preds = %entry
Keep: %var_2_67 = fadd double %var_2_582, %4
Keep: %var_2_68 = bitcast double %var_2_67 to i64
Keep: %var_2_69 = and i64 %var_2_68, 9221120237041090560
Keep: %var_2_70 = icmp eq i64 %var_2_69, 9218868437227405312
Keep: %var_2_71 = and i64 %var_2_68, 2251799813685247
Keep: %var_2_72 = icmp ne i64 %var_2_71, 0
Keep: %var_2_73 = and i1 %var_2_70, %var_2_72
Keep: br i1 %var_2_73, label %var_2_74, label %var_2_86
Keep: 
Keep: var_2_74:                                         ; preds = %var_2_66
Keep: %var_2_75 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_61, %struct.Memory* %2)
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: var_2_86:                                         ; preds = %entry, %var_2_66
Found line to remove! store i8 0, i8* %var_2_39, align 1
Found line to remove! store i8 0, i8* %var_2_33, align 1
Found line to remove! store i8 0, i8* %var_2_27, align 1
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: routine_ucomisd__xmm1___xmm0.exit:                ; preds = %var_2_86, %var_2_74
Keep: %var_2_88 = phi %struct.Memory* [ %var_2_75, %var_2_74 ], [ %2, %var_2_86 ]
Keep: %var_2_91 = load i8, i8* %var_2_30, align 1
Keep: %var_2_92 = icmp eq i8 %var_2_91, 0
Keep: br i1 %var_2_92, label %block_.L_40138f, label %block_401384
Keep: 
Keep: block_401384:                                     ; preds = %routine_ucomisd__xmm1___xmm0.exit
Keep: %var_2_94 = load i8, i8* %var_2_21, align 1
Keep: %cmpBr_401384 = icmp eq i8 %var_2_94, 1
Keep: br i1 %cmpBr_401384, label %block_.L_40138f, label %block_.L_4013aa
Keep: 
Keep: block_.L_40138f:                                  ; preds = %block_401384, %routine_ucomisd__xmm1___xmm0.exit
Keep: %var_2_107 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %var_2_88)
Keep: br label %block_.L_4013aa
Keep: 
Keep: block_.L_4013aa:                                  ; preds = %block_401384, %block_.L_40138f
Keep: %MEMORY.1 = phi %struct.Memory* [ %var_2_107, %block_.L_40138f ], [ %var_2_88, %block_401384 ]
Keep: ret %struct.Memory* %MEMORY.1
Missed: dict_keys(['store i8 0, i8* %var_2_39, align 1', 'store i8 0, i8* %var_2_33, align 1', 'store i8 0, i8* %var_2_27, align 1', '%var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13'])
TO REMOVE: dict_keys(['%var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 0, i8* %var_2_39, align 1', 'store i8 0, i8* %var_2_33, align 1', 'store i8 0, i8* %var_2_27, align 1'])
Keep: block_401360:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Keep: %var_2_21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! %var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Keep: %var_2_30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13Writing '/tmp/tmpdfc_4oku.dot'...
Writing '/tmp/tmpdfc_4oku.dot':Done

Reading LLVM: /tmp/tmp1oyruhm5-query.ll
Extracting function [_Z5checkd] from /tmp/tmp1oyruhm5-query.ll
Dot file generated!
Writing '/tmp/tmp56fpyqet.dot'...
Writing '/tmp/tmp56fpyqet.dot':Done

Reading LLVM: /tmp/tmpnxlkqevs-target.ll
Extracting function [_Z5checkd] from /tmp/tmpnxlkqevs-target.ll
Dot file generated!

Keep: %var_2_49 = load i64, i64* %RBP, align 8
Keep: %var_2_50 = add i64 %var_2_49, -8
Keep: %var_2_51 = load i64, i64* %PC, align 8
Keep: %3 = inttoptr i64 %var_2_50 to double*
Keep: %var_2_543 = load double, double* %3, align 8
Keep: %var_2_57 = add i64 %var_2_51, 9
Keep: %var_2_59 = bitcast %union.VectorReg* %var_2_4 to double*
Keep: %var_2_60 = load double, double* %var_2_59, align 1
Keep: %var_2_61 = fcmp uno double %var_2_543, %var_2_60
Keep: br i1 %var_2_61, label %var_2_62, label %var_2_82
Keep: 
Keep: var_2_62:                                         ; preds = %block_401360
Keep: %var_2_63 = fadd double %var_2_543, %var_2_60
Keep: %var_2_64 = bitcast double %var_2_63 to i64
Keep: %var_2_65 = and i64 %var_2_64, 9221120237041090560
Keep: %var_2_66 = icmp eq i64 %var_2_65, 9218868437227405312
Keep: %var_2_67 = and i64 %var_2_64, 2251799813685247
Keep: %var_2_68 = icmp ne i64 %var_2_67, 0
Keep: %var_2_69 = and i1 %var_2_66, %var_2_68
Keep: br i1 %var_2_69, label %var_2_70, label %var_2_82
Keep: 
Keep: var_2_70:                                         ; preds = %var_2_62
Keep: %var_2_71 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_57, %struct.Memory* %2) #13
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: var_2_82:                                         ; preds = %block_401360, %var_2_62
Found line to remove! store i8 0, i8* %var_2_39, align 1
Found line to remove! store i8 0, i8* %var_2_33, align 1
Found line to remove! store i8 0, i8* %var_2_27, align 1
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: _ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %var_2_82, %var_2_70
Keep: %var_2_84 = phi %struct.Memory* [ %var_2_71, %var_2_70 ], [ %2, %var_2_82 ]
Keep: %var_2_87 = load i8, i8* %var_2_30, align 1
Keep: %var_2_88 = icmp eq i8 %var_2_87, 0
Keep: %var_2_123 = load i8, i8* %var_2_21, align 1
Keep: %var_2_126 = icmp eq i8 %var_2_123, 1
Keep: %or.cond2 = or i1 %var_2_88, %var_2_126
Keep: br i1 %or.cond2, label %block_40138f, label %block_4013aa
Keep: 
Keep: block_4013aa:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_40138f
Keep: %MEMORY.0 = phi %struct.Memory* [ %var_2_135, %block_40138f ], [ %var_2_84, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
Keep: ret %struct.Memory* %MEMORY.0
Keep: 
Keep: block_40138f:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: %var_2_135 = tail call fastcc %struct.Memory* @ext_60cf18_printf(%struct.State* nonnull %0, %struct.Memory* %var_2_84)
Keep: br label %block_4013aa
Missed: dict_keys(['%var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 0, i8* %var_2_39, align 1', 'store i8 0, i8* %var_2_33, align 1', 'store i8 0, i8* %var_2_27, align 1'])
================ Starting round 4
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %var_2_10 = load i64, i64* %var_2_3, align 8
- 3 %var_2_21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 4 %var_2_30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 5 %var_2_41 = add i64 %var_2_10, add (i64 ptrtoint (%G_0x19d0__rip__type* @G_0x19d0__rip_ to i64), i64 7)
- 6 %var_2_42 = add i64 %var_2_10, 15
- 7 store i64 %var_2_42, i64* %var_2_3, align 8
- 8 %var_2_43 = inttoptr i64 %var_2_41 to i64*
- 9 %var_2_44 = load i64, i64* %var_2_43, align 8
- 10 %var_2_45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
- 11 store i64 %var_2_44, i64* %var_2_45, align 1
- 12 %var_2_53 = load i64, i64* %RBP.i, align 8
- 13 %var_2_54 = add i64 %var_2_53, -8
- 14 %var_4_3 = inttoptr i64 %var_2_54 to double*
- 15 %var_2_582 = load double, double* %var_4_3, align 8
- 16 %var_2_61 = add i64 %var_2_10, 24
- 17 %var_4_4 = bitcast i64 %var_2_44 to double
- 18 %var_2_65 = fcmp uno double %var_2_582, %var_4_4
- 19 \<badref\> = br i1 %var_2_65, label %var_2_66, label %routine_ucomisd__xmm1___xmm0.exit
- 20 %var_2_67 = fadd double %var_4_4, %var_2_582
- 21 %var_2_68 = bitcast double %var_2_67 to i64
- 22 %var_2_69 = and i64 %var_2_68, 9221120237041090560
- 23 %var_2_70 = icmp eq i64 %var_2_69, 9218868437227405312
- 24 %var_2_71 = and i64 %var_2_68, 2251799813685247
- 25 %var_2_72 = icmp ne i64 %var_2_71, 0
- 26 %var_2_73 = and i1 %var_2_70, %var_2_72
- 27 \<badref\> = br i1 %var_2_73, label %var_2_74, label %routine_ucomisd__xmm1___xmm0.exit
- 28 %var_2_75 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_61, %struct.Memory* %2)
- 29 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 30 %var_2_88 = phi %struct.Memory* [ %var_2_75, %var_2_74 ], [ %2, %var_2_66 ], [ %2, %entry ]
- 31 %var_2_91 = load i8, i8* %var_2_30, align 1
- 32 %var_2_92 = icmp eq i8 %var_2_91, 0
- 33 \<badref\> = br i1 %var_2_92, label %block_.L_40138f, label %block_401384
- 34 %var_2_94 = load i8, i8* %var_2_21, align 1
- 35 %cmpBr_401384 = icmp eq i8 %var_2_94, 1
- 36 \<badref\> = br i1 %cmpBr_401384, label %block_.L_40138f, label %block_.L_4013aa
- 37 %var_2_107 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %var_2_88)
- 38 \<badref\> = br label %block_.L_4013aa
- 39 %MEMORY.1 = phi %struct.Memory* [ %var_2_107, %block_.L_40138f ], [ %var_2_88, %block_401384 ]
- 40 \<badref\> = ret %struct.Memory* %MEMORY.1
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f638c0be0d0>, {0: {0}, 1: {1}, 2: {5, 7, 9, 12, 26, 28}, 3: {3}, 4: {4}, 5: set(), 6: set(), 7: set(), 8: {8}, 9: {5, 7, 9, 12, 26, 28}, 10: set(), 11: set(), 12: {5, 7, 9, 12, 26, 28}, 13: {6}, 14: {8}, 15: {5, 7, 9, 12, 26, 28}, 16: set(), 17: {16, 11}, 18: {13}, 19: {31, 14, 22}, 20: {15}, 21: {16, 11}, 22: {17}, 23: {18}, 24: {19}, 25: {27, 20}, 26: {21}, 27: {31, 14, 22}, 28: {34, 23}, 29: {24, 35}, 30: {25}, 31: {5, 7, 9, 12, 26, 28}, 32: {27, 20}, 33: {31, 14, 22}, 34: {5, 7, 9, 12, 26, 28}, 35: {29}, 36: {31, 14, 22}, 37: {34, 23}, 38: {24, 35}, 39: {32}, 40: {33}})
Equivalent! frozenset({24, 35}) {29, 38}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f638c0be0d0>, {0: set(), 1: set(), 2: set(), 3: set(), 4: set(), 5: set(), 6: set(), 7: set(), 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: {24}, 30: set(), 31: set(), 32: set(), 33: set(), 34: set(), 35: set(), 36: set(), 37: set(), 38: {35}, 39: set(), 40: set()})
NO MATCH 0
NO MATCH 1
NO MATCH 2
NO MATCH 3
NO MATCH 4
NO MATCH 5
NO MATCH 6
NO MATCH 7
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
EXACT 29 br br
NO MATCH 30
NO MATCH 31
NO MATCH 32
NO MATCH 33
NO MATCH 34
NO MATCH 35
NO MATCH 36
NO MATCH 37
EXACT 38 br br
NO MATCH 39
NO MATCH 40
================ Starting round 5
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %var_2_4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 3 %var_2_21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 4 %var_2_30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 5 %var_2_49 = load i64, i64* %RBP, align 8
- 6 %var_2_50 = add i64 %var_2_49, -8
- 7 %var_2_51 = load i64, i64* %PC, align 8
- 8 %var_4_3 = inttoptr i64 %var_2_50 to double*
- 9 %var_2_543 = load double, double* %var_4_3, align 8
- 10 %var_2_57 = add i64 %var_2_51, 9
- 11 %var_2_59 = bitcast %union.VectorReg* %var_2_4 to double*
- 12 %var_2_60 = load double, double* %var_2_59, align 1
- 13 %var_2_61 = fcmp uno double %var_2_543, %var_2_60
- 14 \<badref\> = br i1 %var_2_61, label %var_2_62, label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 15 %var_2_63 = fadd double %var_2_543, %var_2_60
- 16 %var_2_64 = bitcast double %var_2_63 to i64
- 17 %var_2_65 = and i64 %var_2_64, 9221120237041090560
- 18 %var_2_66 = icmp eq i64 %var_2_65, 9218868437227405312
- 19 %var_2_67 = and i64 %var_2_64, 2251799813685247
- 20 %var_2_68 = icmp ne i64 %var_2_67, 0
- 21 %var_2_69 = and i1 %var_2_66, %var_2_68
- 22 \<badref\> = br i1 %var_2_69, label %var_2_70, label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 23 %var_2_71 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_57, %struct.Memory* %2) #13
- 24 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 25 %var_2_84 = phi %struct.Memory* [ %var_2_71, %var_2_70 ], [ %2, %var_2_62 ], [ %2, %block_401360 ]
- 26 %var_2_87 = load i8, i8* %var_2_30, align 1
- 27 %var_2_88 = icmp eq i8 %var_2_87, 0
- 28 %var_2_123 = load i8, i8* %var_2_21, align 1
- 29 %var_2_126 = icmp eq i8 %var_2_123, 1
- 30 %or.cond2 = or i1 %var_2_88, %var_2_126
- 31 \<badref\> = br i1 %or.cond2, label %block_40138f, label %block_4013aa
- 32 %MEMORY.0 = phi %struct.Memory* [ %var_2_135, %block_40138f ], [ %var_2_84, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
- 33 \<badref\> = ret %struct.Memory* %MEMORY.0
- 34 %var_2_135 = tail call fastcc %struct.Memory* @ext_60cf18_printf(%struct.State* nonnull %0, %struct.Memory* %var_2_84)
- 35 \<badref\> = br label %block_4013aa
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f638be05a60>, {0: {0}, 1: {1}, 2: set(), 3: {3}, 4: {4}, 5: {2, 34, 9, 12, 15, 31}, 6: {13}, 7: {2, 34, 9, 12, 15, 31}, 8: {8, 14}, 9: {2, 34, 9, 12, 15, 31}, 10: set(), 11: {17, 21}, 12: {2, 34, 9, 12, 15, 31}, 13: {18}, 14: {27, 33, 19, 36}, 15: {20}, 16: {17, 21}, 17: {22}, 18: {23}, 19: {24}, 20: {32, 25}, 21: {26}, 22: {27, 33, 19, 36}, 23: {28, 37}, 24: {29, 38}, 25: {30}, 26: {2, 34, 9, 12, 15, 31}, 27: {32, 25}, 28: {2, 34, 9, 12, 15, 31}, 29: {35}, 30: set(), 31: {27, 33, 19, 36}, 32: {39}, 33: {40}, 34: {28, 37}, 35: {29, 38}})
Equivalent! frozenset({29, 38}) {24, 35}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f638be05a60>, {0: set(), 1: set(), 2: set(), 3: set(), 4: set(), 5: set(), 6: set(), 7: set(), 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: {29}, 25: set(), 26: set(), 27: set(), 28: set(), 29: set(), 30: set(), 31: set(), 32: set(), 33: set(), 34: set(), 35: {38}})
NO MATCH 0
NO MATCH 1
NO MATCH 2
NO MATCH 3
NO MATCH 4
NO MATCH 5
NO MATCH 6
NO MATCH 7
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
EXACT 24 br br
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
NO MATCH 29
NO MATCH 30
NO MATCH 31
NO MATCH 32
NO MATCH 33
NO MATCH 34
EXACT 35 br br
FP: 63 3.0 False
TO REMOVE: dict_keys([])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_10 = load i64, i64* %var_2_3, align 8
Keep: %var_2_21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Keep: %var_2_30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Keep: %var_2_41 = add i64 %var_2_10, add (i64 ptrtoint (%G_0x19d0__rip__type* @G_0x19d0__rip_ to i64), i64 7)
Keep: %var_2_42 = add i64 %var_2_10, 15
Keep: store i64 %var_2_42, i64* %var_2_3, align 8
Keep: %var_2_43 = inttoptr i64 %var_2_41 to i64*
Keep: %var_2_44 = load i64, i64* %var_2_43, align 8
Keep: %var_2_45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_44, i64* %var_2_45, align 1
Keep: %var_2_53 = load i64, i64* %RBP.i, align 8
Keep: %var_2_54 = add i64 %var_2_53, -8
Keep: %var_4_3 = inttoptr i64 %var_2_54 to double*
Keep: %var_2_582 = load double, double* %var_4_3, align 8
Keep: %var_2_61 = add i64 %var_2_10, 24
Keep: %var_4_4 = bitcast i64 %var_2_44 to double
Keep: %var_2_65 = fcmp uno double %var_2_582, %var_4_4
Keep: br i1 %var_2_65, label %var_2_66, label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: var_2_66:                                         ; preds = %entry
Keep: %var_2_67 = fadd double %var_4_4, %var_2_582
Keep: %var_2_68 = bitcast double %var_2_67 to i64
Keep: %var_2_69 = and i64 %var_2_68, 9221120237041090560
Keep: %var_2_70 = icmp eq i64 %var_2_69, 9218868437227405312
Keep: %var_2_71 = and i64 %var_2_68, 2251799813685247
Keep: %var_2_72 = icmp ne i64 %var_2_71, 0
Keep: %var_2_73 = and i1 %var_2_70, %var_2_72
Keep: br i1 %var_2_73, label %var_2_74, label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: var_2_74:                                         ; preds = %var_2_66
Keep: %var_2_75 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_61, %struct.Memory* %2)
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: routine_ucomisd__xmm1___xmm0.exit:                ; preds = %entry, %var_2_66, %var_2_74
Keep: %var_2_88 = phi %struct.Memory* [ %var_2_75, %var_2_74 ], [ %2, %var_2_66 ], [ %2, %entry ]
Keep: %var_2_91 = load i8, i8* %var_2_30, align 1
Keep: %var_2_92 = icmp eq i8 %var_2_91, 0
Keep: br i1 %var_2_92, label %block_.L_40138f, label %block_401384
Keep: 
Keep: block_401384:                                     ; preds = %routine_ucomisd__xmm1___xmm0.exit
Keep: %var_2_94 = load i8, i8* %var_2_21, align 1
Keep: %cmpBr_401384 = icmp eq i8 %var_2_94, 1
Keep: br i1 %cmpBr_401384, label %block_.L_40138f, label %block_.L_4013aa
Keep: 
Keep: block_.L_40138f:                                  ; preds = %block_401384, %routine_ucomisd__xmm1___xmm0.exit
Keep: %var_2_107 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %var_2_88)
Keep: br label %block_.L_4013aa
Keep: 
Keep: block_.L_4013aa:                                  ; preds = %block_.L_40138f, %block_401384
Keep: %MEMORY.1 = phi %struct.Memory* [ %var_2_107, %block_.L_40138f ], [ %var_2_88, %block_401384 ]
Keep: ret %struct.Memory* %MEMORY.1
Missed: dict_keys([])
TO REMOVE: dict_keys([])
Keep: block_401360:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Keep: %var_2_21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Keep: %var_2_30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Keep: %var_2_49 = load i64, i64* %RBP, align 8
Keep: %var_2_50 = add i64 %var_2_49, -8
Keep: %var_2_51 = load i64, i64* %PC, align 8
Keep: %var_4_3 = inttoptr i64 %var_2_50 to double*
Keep: %var_2_543 = load double, double* %var_4_3, align 8
Keep: %var_2_57 = add i64 %var_2_51, 9
Keep: %var_2_59 = bitcast %union.VectorReg* %var_2_4 to double*
Keep: %var_2_60 = load double, double* %var_2_59, align 1
Keep: %var_2_61 = fcmp uno double %var_2_543, %var_2_60
Keep: br i1 %var_2_61, label %var_2_62, label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: var_2_62:                                         ; preds = %block_401360
Keep: %var_2_63 = fadd double %var_2_543, %var_2_60
Keep: %var_2_64 = bitcast double %var_2_63 to i64
Keep: %var_2_65 = and i64 %var_2_64, 9221120237041090560
Keep: %var_2_66 = icmp eq i64 %var_2_65, 9218868437227405312
Keep: %var_2_67 = and i64 %var_2_64, 2251799813685247
Keep: %var_2_68 = icmp ne i64 %var_2_67, 0
Keep: %var_2_69 = and i1 %var_2_66, %var_2_68
Keep: br i1 %var_2_69, label %var_2_70, label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: var_2_70:                                         ; preds = %var_2_62
Keep: %var_2_71 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_57, %struct.Memory* %2) #13
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: _ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %block_401360, %var_2_62, %var_2_70
Keep: %var_2_84 = phi %struct.Memory* [ %var_2_71, %var_2_70 ], [ %2, %var_2_62 ], [ %2, %block_401360 ]
Keep: %var_2_87 = load i8, i8* %var_2_30, align 1
Keep: %var_2_88 = icmp eq i8 %var_2_87, 0
Keep: %var_2_123 = load i8, i8* %var_2_21, align 1
Keep: %var_2_126 = icmp eq i8 %var_2_123, 1
Keep: %or.cond2 = or i1 %var_2_88, %var_2_126
Keep: br i1 %or.cond2, label %block_40138f, label %block_4013aa
Keep: 
Keep: block_4013aa:                                     ; preds = %block_40138f, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: %MEMORY.0 = phi %struct.Memory* [ %var_2_135, %block_40138f ], [ %var_2_84, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
Keep: ret %struct.Memory* %MEMORY.0
Keep: 
Keep: block_40138f:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: %var_2_135 = tail call fastcc %struct.Memory* @ext_60cf18_printf(%struct.State* nonnull %0, %struct.Memory* %var_2_84)
Keep: br label %block_4013aa
Missed: dict_keys([])
[x] Exhausted iterations without definitive match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/stepanov_v1p2/_Z5checkd/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/stepanov_v1p2/binary/test.mcsema.calls_renamed.ll _Z5checkd
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/stepanov_v1p2/_Z5checkd/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/stepanov_v1p2/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
