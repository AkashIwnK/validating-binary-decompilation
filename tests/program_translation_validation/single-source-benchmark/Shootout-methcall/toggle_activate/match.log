Writing '/tmp/tmp9g94uvyg.dot'...
Writing '/tmp/tmp9g94uvyg.dot':Done

Reading LLVM: /tmp/tmpbxxkwlwx-query.ll
Extracting function [toggle_activate] from /tmp/tmpbxxkwlwx-query.ll
Dot file generated!
Writing '/tmp/tmpofios0ek.dot'...
Writing '/tmp/tmpofios0ek.dot':Done

Reading LLVM: /tmp/tmp5gp8v0mm-target.ll
Extracting function [toggle_activate] from /tmp/tmp5gp8v0mm-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 store i64 %8, i64* %6, align 8
- 11 %10 = load i64, i64* %3, align 8
- 12 store i64 %8, i64* %RBP.i, align 8
- 13 %RDI.i26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 14 %11 = add i64 %7, -16
- 15 %12 = load i64, i64* %RDI.i26, align 8
- 16 %13 = add i64 %10, 7
- 17 store i64 %13, i64* %3, align 8
- 18 %14 = inttoptr i64 %11 to i64*
- 19 store i64 %12, i64* %14, align 8
- 20 %15 = load i64, i64* %RBP.i, align 8
- 21 %16 = add i64 %15, -8
- 22 %17 = load i64, i64* %3, align 8
- 23 %18 = add i64 %17, 4
- 24 store i64 %18, i64* %3, align 8
- 25 %19 = inttoptr i64 %16 to i64*
- 26 %20 = load i64, i64* %19, align 8
- 27 store i64 %20, i64* %RDI.i26, align 8
- 28 %21 = add i64 %17, 7
- 29 store i64 %21, i64* %3, align 8
- 30 %22 = inttoptr i64 %20 to i8*
- 31 %23 = load i8, i8* %22, align 1
- 32 %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 33 %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 34 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 35 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 36 %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 37 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 38 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 39 %AL.i19 = bitcast %union.anon* %30 to i8*
- 40 %31 = icmp eq i8 %23, 0
- 41 %32 = zext i1 %31 to i8
- 42 store i8 0, i8* %24, align 1
- 43 %33 = zext i1 %31 to i32
- 44 %34 = tail call i32 @llvm.ctpop.i32(i32 %33)
- 45 %35 = trunc i32 %34 to i8
- 46 %36 = xor i8 %35, 1
- 47 store i8 %36, i8* %25, align 1
- 48 %37 = xor i8 %32, 1
- 49 store i8 %37, i8* %27, align 1
- 50 store i8 0, i8* %28, align 1
- 51 store i8 0, i8* %29, align 1
- 52 store i8 0, i8* %26, align 1
- 53 %RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 54 %38 = zext i1 %31 to i64
- 55 store i64 %38, i64* %RCX.i, align 8
- 56 store i8 %32, i8* %AL.i19, align 1
- 57 %39 = add i64 %17, 23
- 58 store i64 %39, i64* %3, align 8
- 59 %40 = load i64, i64* %19, align 8
- 60 store i64 %40, i64* %RDI.i26, align 8
- 61 %41 = add i64 %17, 25
- 62 store i64 %41, i64* %3, align 8
- 63 %42 = inttoptr i64 %40 to i8*
- 64 store i8 %32, i8* %42, align 1
- 65 %RAX.i = getelementptr inbounds %union.anon, %union.anon* %30, i64 0, i32 0
- 66 %43 = load i64, i64* %RBP.i, align 8
- 67 %44 = add i64 %43, -8
- 68 %45 = load i64, i64* %3, align 8
- 69 %46 = add i64 %45, 4
- 70 store i64 %46, i64* %3, align 8
- 71 %47 = inttoptr i64 %44 to i64*
- 72 %48 = load i64, i64* %47, align 8
- 73 store i64 %48, i64* %RAX.i, align 8
- 74 %49 = add i64 %45, 5
- 75 store i64 %49, i64* %3, align 8
- 76 %50 = load i64, i64* %6, align 8
- 77 %51 = add i64 %50, 8
- 78 %52 = inttoptr i64 %50 to i64*
- 79 %53 = load i64, i64* %52, align 8
- 80 store i64 %53, i64* %RBP.i, align 8
- 81 store i64 %51, i64* %6, align 8
- 82 %54 = add i64 %45, 6
- 83 store i64 %54, i64* %3, align 8
- 84 %55 = inttoptr i64 %51 to i64*
- 85 %56 = load i64, i64* %55, align 8
- 86 store i64 %56, i64* %3, align 8
- 87 %57 = add i64 %50, 16
- 88 store i64 %57, i64* %6, align 8
- 89 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1f54986c80>, {0: {0}, 1: {5}, 2: {130, 6, 135, 10, 15, 18, 23, 25, 154, 29, 160, 162, 35, 166, 173, 174, 182, 186, 189, 195, 75, 77, 81, 83, 88}, 3: {36, 7}, 4: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 5: {9}, 6: {130, 6, 135, 10, 15, 18, 23, 25, 154, 29, 160, 162, 35, 166, 173, 174, 182, 186, 189, 195, 75, 77, 81, 83, 88}, 7: {161, 11, 76, 178, 24}, 8: {34, 194, 165, 134, 171, 12, 80, 188, 21, 181, 87, 28, 158}, 9: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 10: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 11: {130, 6, 135, 10, 15, 18, 23, 25, 154, 29, 160, 162, 35, 166, 173, 174, 182, 186, 189, 195, 75, 77, 81, 83, 88}, 12: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 13: {4}, 14: {17}, 15: {130, 6, 135, 10, 15, 18, 23, 25, 154, 29, 160, 162, 35, 166, 173, 174, 182, 186, 189, 195, 75, 77, 81, 83, 88}, 16: {32, 19, 132, 85}, 17: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 18: {34, 194, 165, 134, 171, 12, 80, 188, 21, 181, 87, 28, 158}, 19: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 20: {130, 6, 135, 10, 15, 18, 23, 25, 154, 29, 160, 162, 35, 166, 173, 174, 182, 186, 189, 195, 75, 77, 81, 83, 88}, 21: {161, 11, 76, 178, 24}, 22: {130, 6, 135, 10, 15, 18, 23, 25, 154, 29, 160, 162, 35, 166, 173, 174, 182, 186, 189, 195, 75, 77, 81, 83, 88}, 23: {128, 163, 78, 179, 26}, 24: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 25: {34, 194, 165, 134, 171, 12, 80, 188, 21, 181, 87, 28, 158}, 26: {130, 6, 135, 10, 15, 18, 23, 25, 154, 29, 160, 162, 35, 166, 173, 174, 182, 186, 189, 195, 75, 77, 81, 83, 88}, 27: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 28: {32, 19, 132, 85}, 29: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 30: {34, 194, 165, 134, 171, 12, 80, 188, 21, 181, 87, 28, 158}, 31: {130, 6, 135, 10, 15, 18, 23, 25, 154, 29, 160, 162, 35, 166, 173, 174, 182, 186, 189, 195, 75, 77, 81, 83, 88}, 32: {43}, 33: {50}, 34: {56}, 35: {59}, 36: {63}, 37: {70}, 38: {1}, 39: {2, 126}, 40: {40, 105, 136, 119, 90}, 41: {69, 37, 137, 42, 106, 139, 117, 149, 58, 91}, 42: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 43: {69, 37, 137, 42, 106, 139, 117, 149, 58, 91}, 44: {94, 140, 46}, 45: {102, 109, 141, 47, 54, 62, 95}, 46: {144, 49, 142, 97}, 47: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 48: {144, 49, 142, 97}, 49: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 50: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 51: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 52: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 53: set(), 54: {69, 37, 137, 42, 106, 139, 117, 149, 58, 91}, 55: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 56: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 57: set(), 58: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 59: {130, 6, 135, 10, 15, 18, 23, 25, 154, 29, 160, 162, 35, 166, 173, 174, 182, 186, 189, 195, 75, 77, 81, 83, 88}, 60: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 61: {152}, 62: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 63: {34, 194, 165, 134, 171, 12, 80, 188, 21, 181, 87, 28, 158}, 64: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 65: {3}, 66: {130, 6, 135, 10, 15, 18, 23, 25, 154, 29, 160, 162, 35, 166, 173, 174, 182, 186, 189, 195, 75, 77, 81, 83, 88}, 67: {161, 11, 76, 178, 24}, 68: {130, 6, 135, 10, 15, 18, 23, 25, 154, 29, 160, 162, 35, 166, 173, 174, 182, 186, 189, 195, 75, 77, 81, 83, 88}, 69: {128, 163, 78, 179, 26}, 70: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 71: {34, 194, 165, 134, 171, 12, 80, 188, 21, 181, 87, 28, 158}, 72: {130, 6, 135, 10, 15, 18, 23, 25, 154, 29, 160, 162, 35, 166, 173, 174, 182, 186, 189, 195, 75, 77, 81, 83, 88}, 73: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 74: {184}, 75: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 76: {130, 6, 135, 10, 15, 18, 23, 25, 154, 29, 160, 162, 35, 166, 173, 174, 182, 186, 189, 195, 75, 77, 81, 83, 88}, 77: {187}, 78: {34, 194, 165, 134, 171, 12, 80, 188, 21, 181, 87, 28, 158}, 79: {130, 6, 135, 10, 15, 18, 23, 25, 154, 29, 160, 162, 35, 166, 173, 174, 182, 186, 189, 195, 75, 77, 81, 83, 88}, 80: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 81: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 82: {192}, 83: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 84: {34, 194, 165, 134, 171, 12, 80, 188, 21, 181, 87, 28, 158}, 85: {130, 6, 135, 10, 15, 18, 23, 25, 154, 29, 160, 162, 35, 166, 173, 174, 182, 186, 189, 195, 75, 77, 81, 83, 88}, 86: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 87: {197}, 88: {129, 131, 133, 8, 138, 13, 14, 143, 16, 145, 146, 147, 20, 148, 22, 150, 151, 153, 27, 155, 157, 30, 159, 33, 164, 38, 167, 170, 44, 172, 51, 180, 183, 57, 185, 60, 190, 191, 64, 193, 196, 198, 71, 73, 74, 79, 82, 86, 92, 98, 104, 107, 110, 118, 123}, 89: {199}})
Equivalent! frozenset({82, 30}) {27, 60}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1f54986c80>, {0: {0}, 1: {5}, 2: {6}, 3: {7}, 4: {8}, 5: {9}, 6: {10}, 7: {11}, 8: {12}, 9: {13}, 10: {14}, 11: {25, 77, 15}, 12: {16}, 13: {4}, 14: {17}, 15: {18}, 16: {32, 19, 85}, 17: {33, 20, 86}, 18: {21}, 19: {22}, 20: {75, 23}, 21: {24, 76}, 22: {25, 162, 77, 15}, 23: {26, 163, 78}, 24: {27, 164, 79}, 25: {80, 28}, 26: {81, 130, 29}, 27: {82}, 28: {32, 19, 85}, 29: {33, 20, 86}, 30: {134}, 31: {135}, 32: {43}, 33: {50}, 34: {56}, 35: {59}, 36: {63}, 37: {70}, 38: {1}, 39: set(), 40: {136}, 41: {137}, 42: {138, 92, 44}, 43: {139}, 44: {140}, 45: {141}, 46: {142}, 47: {143}, 48: {144}, 49: {145}, 50: {64, 146, 110}, 51: {147, 118, 71}, 52: {104, 57, 148}, 53: set(), 54: set(), 55: set(), 56: set(), 57: set(), 58: set(), 59: {81, 154, 29}, 60: {30}, 61: set(), 62: set(), 63: {158}, 64: {159}, 65: {3}, 66: {160, 75}, 67: {161, 76}, 68: {25, 162, 77}, 69: {26, 163, 78}, 70: {27, 164, 79}, 71: {80, 165}, 72: {154, 166, 130}, 73: {155, 131, 167}, 74: set(), 75: set(), 76: {186}, 77: {187}, 78: {188}, 79: {189}, 80: {190}, 81: {191}, 82: set(), 83: set(), 84: {194}, 85: {195}, 86: {196}, 87: {197}, 88: {198}, 89: {199}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 store store
MORE 11 POT: 3
EXACT 12 store store
EXACT 13 getelementptr getelementptr
EXACT 14 add add
EXACT 15 load load
MORE 16 POT: 3
MORE 17 POT: 3
EXACT 18 inttoptr inttoptr
EXACT 19 store store
MORE 20 POT: 2
MORE 21 POT: 2
MORE 22 POT: 4
MORE 23 POT: 3
MORE 24 POT: 3
MORE 25 POT: 2
MORE 26 POT: 3
EXACT 27 store store
MORE 28 POT: 3
MORE 29 POT: 3
EXACT 30 inttoptr inttoptr
EXACT 31 load load
EXACT 32 getelementptr getelementptr
EXACT 33 getelementptr getelementptr
EXACT 34 getelementptr getelementptr
EXACT 35 getelementptr getelementptr
EXACT 36 getelementptr getelementptr
EXACT 37 getelementptr getelementptr
EXACT 38 getelementptr getelementptr
NO MATCH 39
EXACT 40 icmp icmp
EXACT 41 zext zext
MORE 42 POT: 3
EXACT 43 zext zext
EXACT 44 tail tail
EXACT 45 trunc trunc
EXACT 46 xor xor
EXACT 47 store store
EXACT 48 xor xor
EXACT 49 store store
MORE 50 POT: 3
MORE 51 POT: 3
MORE 52 POT: 3
NO MATCH 53
NO MATCH 54
NO MATCH 55
NO MATCH 56
NO MATCH 57
NO MATCH 58
MORE 59 POT: 3
EXACT 60 store store
NO MATCH 61
NO MATCH 62
EXACT 63 inttoptr inttoptr
EXACT 64 store store
EXACT 65 getelementptr getelementptr
MORE 66 POT: 2
MORE 67 POT: 2
MORE 68 POT: 3
MORE 69 POT: 3
MORE 70 POT: 3
MORE 71 POT: 2
MORE 72 POT: 3
MORE 73 POT: 3
NO MATCH 74
NO MATCH 75
EXACT 76 load load
EXACT 77 add add
EXACT 78 inttoptr inttoptr
EXACT 79 load load
EXACT 80 store store
EXACT 81 store store
NO MATCH 82
NO MATCH 83
EXACT 84 inttoptr inttoptr
EXACT 85 load load
EXACT 86 store store
EXACT 87 add add
EXACT 88 store store
EXACT 89 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %EAX = bitcast %union.anon* %3 to i32*
- 3 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 4 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 5 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 6 %4 = load i64, i64* %RBP, align 8
- 7 %5 = add i64 %1, 1
- 8 store i64 %5, i64* %PC, align 8
- 9 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 10 %7 = load i64, i64* %6, align 8
- 11 %8 = add i64 %7, -8
- 12 %9 = inttoptr i64 %8 to i64*
- 13 store i64 %4, i64* %9, align 8
- 14 store i64 %8, i64* %6, align 8
- 15 %10 = load i64, i64* %PC, align 8
- 16 store i64 %8, i64* %RBP, align 8
- 17 %11 = add i64 %7, -16
- 18 %12 = load i64, i64* %RDI, align 8
- 19 %13 = add i64 %10, 7
- 20 store i64 %13, i64* %PC, align 8
- 21 %14 = inttoptr i64 %11 to i64*
- 22 store i64 %12, i64* %14, align 8
- 23 %15 = load i64, i64* %RBP, align 8
- 24 %16 = add i64 %15, -8
- 25 %17 = load i64, i64* %PC, align 8
- 26 %18 = add i64 %17, 4
- 27 store i64 %18, i64* %PC, align 8
- 28 %19 = inttoptr i64 %16 to i64*
- 29 %20 = load i64, i64* %19, align 8
- 30 store i64 %20, i64* %RDI, align 8
- 31 %21 = add i64 %20, 28
- 32 %22 = add i64 %17, 7
- 33 store i64 %22, i64* %PC, align 8
- 34 %23 = inttoptr i64 %21 to i32*
- 35 %24 = load i32, i32* %23, align 4
- 36 %25 = add i32 %24, 1
- 37 %26 = zext i32 %25 to i64
- 38 store i64 %26, i64* %RAX, align 8
- 39 %27 = icmp eq i32 %24, -1
- 40 %28 = icmp eq i32 %25, 0
- 41 %29 = or i1 %27, %28
- 42 %30 = zext i1 %29 to i8
- 43 %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 44 store i8 %30, i8* %31, align 1
- 45 %32 = and i32 %25, 255
- 46 %33 = tail call i32 @llvm.ctpop.i32(i32 %32) #10
- 47 %34 = trunc i32 %33 to i8
- 48 %35 = and i8 %34, 1
- 49 %36 = xor i8 %35, 1
- 50 %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 51 store i8 %36, i8* %37, align 1
- 52 %38 = xor i32 %25, %24
- 53 %39 = lshr i32 %38, 4
- 54 %40 = trunc i32 %39 to i8
- 55 %41 = and i8 %40, 1
- 56 %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 57 store i8 %41, i8* %42, align 1
- 58 %43 = zext i1 %28 to i8
- 59 %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 60 store i8 %43, i8* %44, align 1
- 61 %45 = lshr i32 %25, 31
- 62 %46 = trunc i32 %45 to i8
- 63 %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 64 store i8 %46, i8* %47, align 1
- 65 %48 = lshr i32 %24, 31
- 66 %49 = xor i32 %45, %48
- 67 %50 = add nuw nsw i32 %49, %45
- 68 %51 = icmp eq i32 %50, 2
- 69 %52 = zext i1 %51 to i8
- 70 %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 71 store i8 %52, i8* %53, align 1
- 72 %54 = add i64 %17, 13
- 73 store i64 %54, i64* %PC, align 8
- 74 store i32 %25, i32* %23, align 4
- 75 %55 = load i64, i64* %RBP, align 8
- 76 %56 = add i64 %55, -8
- 77 %57 = load i64, i64* %PC, align 8
- 78 %58 = add i64 %57, 4
- 79 store i64 %58, i64* %PC, align 8
- 80 %59 = inttoptr i64 %56 to i64*
- 81 %60 = load i64, i64* %59, align 8
- 82 store i64 %60, i64* %RDI, align 8
- 83 %61 = load i32, i32* %EAX, align 4
- 84 %62 = add i64 %60, 24
- 85 %63 = add i64 %57, 7
- 86 store i64 %63, i64* %PC, align 8
- 87 %64 = inttoptr i64 %62 to i32*
- 88 %65 = load i32, i32* %64, align 4
- 89 %66 = sub i32 %61, %65
- 90 %67 = icmp ult i32 %61, %65
- 91 %68 = zext i1 %67 to i8
- 92 store i8 %68, i8* %31, align 1
- 93 %69 = and i32 %66, 255
- 94 %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #10
- 95 %71 = trunc i32 %70 to i8
- 96 %72 = and i8 %71, 1
- 97 %73 = xor i8 %72, 1
- 98 store i8 %73, i8* %37, align 1
- 99 %74 = xor i32 %65, %61
- 100 %75 = xor i32 %74, %66
- 101 %76 = lshr i32 %75, 4
- 102 %77 = trunc i32 %76 to i8
- 103 %78 = and i8 %77, 1
- 104 store i8 %78, i8* %42, align 1
- 105 %79 = icmp eq i32 %66, 0
- 106 %80 = zext i1 %79 to i8
- 107 store i8 %80, i8* %44, align 1
- 108 %81 = lshr i32 %66, 31
- 109 %82 = trunc i32 %81 to i8
- 110 store i8 %82, i8* %47, align 1
- 111 %83 = lshr i32 %61, 31
- 112 %84 = lshr i32 %65, 31
- 113 %85 = xor i32 %84, %83
- 114 %86 = xor i32 %81, %83
- 115 %87 = add nuw nsw i32 %86, %85
- 116 %88 = icmp eq i32 %87, 2
- 117 %89 = zext i1 %88 to i8
- 118 store i8 %89, i8* %53, align 1
- 119 %90 = icmp ne i8 %82, 0
- 120 %91 = xor i1 %90, %88
- 121 %.v = select i1 %91, i64 51, i64 13
- 122 %92 = add i64 %57, %.v
- 123 store i64 %92, i64* %PC, align 8
- 124 \<badref\> = br i1 %91, label %block_400708, label %block_4006e2
- 125 %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 126 %CL = bitcast %union.anon* %93 to i8*
- 127 %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 128 %94 = add i64 %92, 4
- 129 store i64 %94, i64* %PC, align 8
- 130 %95 = load i64, i64* %59, align 8
- 131 store i64 %95, i64* %RAX, align 8
- 132 %96 = add i64 %92, 7
- 133 store i64 %96, i64* %PC, align 8
- 134 %97 = inttoptr i64 %95 to i8*
- 135 %98 = load i8, i8* %97, align 1
- 136 %99 = icmp eq i8 %98, 0
- 137 %100 = zext i1 %99 to i8
- 138 store i8 0, i8* %31, align 1
- 139 %101 = zext i1 %99 to i32
- 140 %102 = tail call i32 @llvm.ctpop.i32(i32 %101) #10
- 141 %103 = trunc i32 %102 to i8
- 142 %104 = xor i8 %103, 1
- 143 store i8 %104, i8* %37, align 1
- 144 %105 = xor i8 %100, 1
- 145 store i8 %105, i8* %44, align 1
- 146 store i8 0, i8* %47, align 1
- 147 store i8 0, i8* %53, align 1
- 148 store i8 0, i8* %42, align 1
- 149 %106 = zext i1 %99 to i64
- 150 store i64 %106, i64* %RDX, align 8
- 151 store i8 %100, i8* %CL, align 1
- 152 %107 = add i64 %92, 25
- 153 store i64 %107, i64* %PC, align 8
- 154 %108 = load i64, i64* %59, align 8
- 155 store i64 %108, i64* %RAX, align 8
- 156 %109 = add i64 %92, 27
- 157 store i64 %109, i64* %PC, align 8
- 158 %110 = inttoptr i64 %108 to i8*
- 159 store i8 %100, i8* %110, align 1
- 160 %111 = load i64, i64* %RBP, align 8
- 161 %112 = add i64 %111, -8
- 162 %113 = load i64, i64* %PC, align 8
- 163 %114 = add i64 %113, 4
- 164 store i64 %114, i64* %PC, align 8
- 165 %115 = inttoptr i64 %112 to i64*
- 166 %116 = load i64, i64* %115, align 8
- 167 store i64 %116, i64* %RAX, align 8
- 168 %117 = add i64 %116, 28
- 169 %118 = add i64 %113, 11
- 170 store i64 %118, i64* %PC, align 8
- 171 %119 = inttoptr i64 %117 to i32*
- 172 store i32 0, i32* %119, align 4
- 173 %.pre = load i64, i64* %RBP, align 8
- 174 %.pre1 = load i64, i64* %PC, align 8
- 175 \<badref\> = br label %block_400708
- 176 %120 = phi i64 [ %.pre1, %block_4006e2 ], [ %92, %block_4006c0 ]
- 177 %121 = phi i64 [ %.pre, %block_4006e2 ], [ %55, %block_4006c0 ]
- 178 %122 = add i64 %121, -8
- 179 %123 = add i64 %120, 4
- 180 store i64 %123, i64* %PC, align 8
- 181 %124 = inttoptr i64 %122 to i64*
- 182 %125 = load i64, i64* %124, align 8
- 183 store i64 %125, i64* %RAX, align 8
- 184 %126 = add i64 %120, 5
- 185 store i64 %126, i64* %PC, align 8
- 186 %127 = load i64, i64* %6, align 8
- 187 %128 = add i64 %127, 8
- 188 %129 = inttoptr i64 %127 to i64*
- 189 %130 = load i64, i64* %129, align 8
- 190 store i64 %130, i64* %RBP, align 8
- 191 store i64 %128, i64* %6, align 8
- 192 %131 = add i64 %120, 6
- 193 store i64 %131, i64* %PC, align 8
- 194 %132 = inttoptr i64 %128 to i64*
- 195 %133 = load i64, i64* %132, align 8
- 196 store i64 %133, i64* %PC, align 8
- 197 %134 = add i64 %127, 16
- 198 store i64 %134, i64* %6, align 8
- 199 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1f54986e18>, {0: {0}, 1: {38}, 2: {39}, 3: {65}, 4: {13}, 5: {1}, 6: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 7: {3}, 8: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 9: {5}, 10: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 11: {67, 21, 7}, 12: {71, 8, 78, 18, 84, 25, 30, 63}, 13: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 14: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 15: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 16: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 17: {14}, 18: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 19: {16, 28}, 20: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 21: {71, 8, 78, 18, 84, 25, 30, 63}, 22: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 23: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 24: {67, 21, 7}, 25: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 26: {69, 23}, 27: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 28: {71, 8, 78, 18, 84, 25, 30, 63}, 29: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 30: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 31: set(), 32: {16, 28}, 33: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 34: {71, 8, 78, 18, 84, 25, 30, 63}, 35: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 36: {3}, 37: {41, 43, 54}, 38: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 39: set(), 40: {40}, 41: set(), 42: {41, 43, 54}, 43: {32}, 44: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 45: set(), 46: {44}, 47: {45}, 48: set(), 49: {48, 46}, 50: {33}, 51: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 52: set(), 53: set(), 54: {45}, 55: set(), 56: {34}, 57: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 58: {41, 43, 54}, 59: {35}, 60: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 61: set(), 62: {45}, 63: {36}, 64: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 65: set(), 66: set(), 67: set(), 68: set(), 69: {41, 43, 54}, 70: {37}, 71: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 72: set(), 73: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 74: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 75: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 76: {67, 21, 7}, 77: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 78: {69, 23}, 79: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 80: {71, 8, 78, 18, 84, 25, 30, 63}, 81: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 82: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 83: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 84: set(), 85: {16, 28}, 86: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 87: {71, 8, 78, 18, 84, 25, 30, 63}, 88: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 89: set(), 90: {40}, 91: {41, 43, 54}, 92: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 93: set(), 94: {44}, 95: {45}, 96: set(), 97: {48, 46}, 98: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 99: set(), 100: set(), 101: set(), 102: {45}, 103: set(), 104: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 105: {40}, 106: {41, 43, 54}, 107: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 108: set(), 109: {45}, 110: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 111: set(), 112: set(), 113: set(), 114: set(), 115: set(), 116: set(), 117: {41, 43, 54}, 118: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 119: {40}, 120: set(), 121: set(), 122: set(), 123: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 124: set(), 125: set(), 126: {39}, 127: set(), 128: {69, 23}, 129: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 130: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 131: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 132: {16, 28}, 133: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 134: {71, 8, 78, 18, 84, 25, 30, 63}, 135: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 136: {40}, 137: {41, 43, 54}, 138: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 139: {41, 43, 54}, 140: {44}, 141: {45}, 142: {48, 46}, 143: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 144: {48, 46}, 145: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 146: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 147: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 148: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 149: {41, 43, 54}, 150: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 151: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 152: {61}, 153: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 154: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 155: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 156: set(), 157: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 158: {71, 8, 78, 18, 84, 25, 30, 63}, 159: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 160: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 161: {67, 21, 7}, 162: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 163: {69, 23}, 164: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 165: {71, 8, 78, 18, 84, 25, 30, 63}, 166: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 167: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 168: set(), 169: set(), 170: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 171: {71, 8, 78, 18, 84, 25, 30, 63}, 172: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 173: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 174: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 175: set(), 176: set(), 177: set(), 178: {67, 21, 7}, 179: {69, 23}, 180: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 181: {71, 8, 78, 18, 84, 25, 30, 63}, 182: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 183: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 184: {74}, 185: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 186: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 187: {77}, 188: {71, 8, 78, 18, 84, 25, 30, 63}, 189: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 190: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 191: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 192: {82}, 193: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 194: {71, 8, 78, 18, 84, 25, 30, 63}, 195: {2, 66, 68, 6, 72, 11, 76, 15, 79, 20, 85, 22, 26, 59, 31}, 196: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 197: {87}, 198: {4, 9, 10, 12, 17, 19, 24, 27, 29, 42, 47, 49, 50, 51, 52, 55, 56, 58, 60, 62, 64, 70, 73, 75, 80, 81, 83, 86, 88}, 199: {89}})
Equivalent! frozenset({27, 60}) {82, 30}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1f54986e18>, {0: {0}, 1: {38}, 2: set(), 3: {65}, 4: {13}, 5: {1}, 6: {2}, 7: {3}, 8: {4}, 9: {5}, 10: {6}, 11: {7}, 12: {8}, 13: {9}, 14: {10}, 15: {11, 22}, 16: {12}, 17: {14}, 18: {15}, 19: {16, 28}, 20: {17, 29}, 21: {18}, 22: {19}, 23: {20}, 24: {21}, 25: {11, 68, 22}, 26: {69, 23}, 27: {24, 70}, 28: {25}, 29: {26, 59}, 30: {60}, 31: set(), 32: {16, 28}, 33: {17, 29}, 34: set(), 35: set(), 36: set(), 37: set(), 38: set(), 39: set(), 40: set(), 41: set(), 42: set(), 43: {32}, 44: set(), 45: set(), 46: set(), 47: set(), 48: set(), 49: set(), 50: {33}, 51: set(), 52: set(), 53: set(), 54: set(), 55: set(), 56: {34}, 57: set(), 58: set(), 59: {35}, 60: set(), 61: set(), 62: set(), 63: {36}, 64: set(), 65: set(), 66: set(), 67: set(), 68: set(), 69: set(), 70: {37}, 71: set(), 72: set(), 73: set(), 74: set(), 75: {66, 20}, 76: {67, 21}, 77: {11, 68, 22}, 78: {69, 23}, 79: {24, 70}, 80: {25, 71}, 81: {26, 59}, 82: {27}, 83: set(), 84: set(), 85: {16, 28}, 86: {17, 29}, 87: set(), 88: set(), 89: set(), 90: set(), 91: set(), 92: set(), 93: set(), 94: set(), 95: set(), 96: set(), 97: set(), 98: set(), 99: set(), 100: set(), 101: set(), 102: set(), 103: set(), 104: set(), 105: set(), 106: set(), 107: set(), 108: set(), 109: set(), 110: set(), 111: set(), 112: set(), 113: set(), 114: set(), 115: set(), 116: set(), 117: set(), 118: set(), 119: set(), 120: set(), 121: set(), 122: set(), 123: set(), 124: set(), 125: set(), 126: set(), 127: set(), 128: set(), 129: set(), 130: {72, 26}, 131: {73}, 132: set(), 133: set(), 134: {30}, 135: {31}, 136: {40}, 137: {41}, 138: {42}, 139: {43}, 140: {44}, 141: {45}, 142: {46}, 143: {47}, 144: {48}, 145: {49}, 146: {50}, 147: {51}, 148: {52}, 149: set(), 150: set(), 151: set(), 152: set(), 153: set(), 154: {72, 59}, 155: {73}, 156: set(), 157: set(), 158: {63}, 159: {64}, 160: {66}, 161: {67}, 162: {68, 22}, 163: {69, 23}, 164: {24, 70}, 165: {71}, 166: {72}, 167: {73}, 168: set(), 169: set(), 170: set(), 171: set(), 172: set(), 173: set(), 174: set(), 175: set(), 176: set(), 177: set(), 178: set(), 179: set(), 180: set(), 181: set(), 182: set(), 183: set(), 184: set(), 185: set(), 186: {76}, 187: {77}, 188: {78}, 189: {79}, 190: {80}, 191: {81}, 192: set(), 193: set(), 194: {84}, 195: {85}, 196: {86}, 197: {87}, 198: {88}, 199: {89}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
NO MATCH 2
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 store store
EXACT 9 getelementptr getelementptr
EXACT 10 load load
EXACT 11 add add
EXACT 12 inttoptr inttoptr
EXACT 13 store store
EXACT 14 store store
MORE 15 POT: 2
EXACT 16 store store
EXACT 17 add add
EXACT 18 load load
MORE 19 POT: 2
MORE 20 POT: 2
EXACT 21 inttoptr inttoptr
EXACT 22 store store
EXACT 23 load load
EXACT 24 add add
MORE 25 POT: 3
MORE 26 POT: 2
MORE 27 POT: 2
EXACT 28 inttoptr inttoptr
MORE 29 POT: 2
EXACT 30 store store
NO MATCH 31
MORE 32 POT: 2
MORE 33 POT: 2
NO MATCH 34
NO MATCH 35
NO MATCH 36
NO MATCH 37
NO MATCH 38
NO MATCH 39
NO MATCH 40
NO MATCH 41
NO MATCH 42
EXACT 43 getelementptr getelementptr
NO MATCH 44
NO MATCH 45
NO MATCH 46
NO MATCH 47
NO MATCH 48
NO MATCH 49
EXACT 50 getelementptr getelementptr
NO MATCH 51
NO MATCH 52
NO MATCH 53
NO MATCH 54
NO MATCH 55
EXACT 56 getelementptr getelementptr
NO MATCH 57
NO MATCH 58
EXACT 59 getelementptr getelementptr
NO MATCH 60
NO MATCH 61
NO MATCH 62
EXACT 63 getelementptr getelementptr
NO MATCH 64
NO MATCH 65
NO MATCH 66
NO MATCH 67
NO MATCH 68
NO MATCH 69
EXACT 70 getelementptr getelementptr
NO MATCH 71
NO MATCH 72
NO MATCH 73
NO MATCH 74
MORE 75 POT: 2
MORE 76 POT: 2
MORE 77 POT: 3
MORE 78 POT: 2
MORE 79 POT: 2
MORE 80 POT: 2
MORE 81 POT: 2
EXACT 82 store store
NO MATCH 83
NO MATCH 84
MORE 85 POT: 2
MORE 86 POT: 2
NO MATCH 87
NO MATCH 88
NO MATCH 89
NO MATCH 90
NO MATCH 91
NO MATCH 92
NO MATCH 93
NO MATCH 94
NO MATCH 95
NO MATCH 96
NO MATCH 97
NO MATCH 98
NO MATCH 99
NO MATCH 100
NO MATCH 101
NO MATCH 102
NO MATCH 103
NO MATCH 104
NO MATCH 105
NO MATCH 106
NO MATCH 107
NO MATCH 108
NO MATCH 109
NO MATCH 110
NO MATCH 111
NO MATCH 112
NO MATCH 113
NO MATCH 114
NO MATCH 115
NO MATCH 116
NO MATCH 117
NO MATCH 118
NO MATCH 119
NO MATCH 120
NO MATCH 121
NO MATCH 122
NO MATCH 123
NO MATCH 124
NO MATCH 125
NO MATCH 126
NO MATCH 127
NO MATCH 128
NO MATCH 129
MORE 130 POT: 2
EXACT 131 store store
NO MATCH 132
NO MATCH 133
EXACT 134 inttoptr inttoptr
EXACT 135 load load
EXACT 136 icmp icmp
EXACT 137 zext zext
EXACT 138 store store
EXACT 139 zext zext
EXACT 140 tail tail
EXACT 141 trunc trunc
EXACT 142 xor xor
EXACT 143 store store
EXACT 144 xor xor
EXACT 145 store store
EXACT 146 store store
EXACT 147 store store
EXACT 148 store store
NO MATCH 149
NO MATCH 150
NO MATCH 151
NO MATCH 152
NO MATCH 153
MORE 154 POT: 2
EXACT 155 store store
NO MATCH 156
NO MATCH 157
EXACT 158 inttoptr inttoptr
EXACT 159 store store
EXACT 160 load load
EXACT 161 add add
MORE 162 POT: 2
MORE 163 POT: 2
MORE 164 POT: 2
EXACT 165 inttoptr inttoptr
EXACT 166 load load
EXACT 167 store store
NO MATCH 168
NO MATCH 169
NO MATCH 170
NO MATCH 171
NO MATCH 172
NO MATCH 173
NO MATCH 174
NO MATCH 175
NO MATCH 176
NO MATCH 177
NO MATCH 178
NO MATCH 179
NO MATCH 180
NO MATCH 181
NO MATCH 182
NO MATCH 183
NO MATCH 184
NO MATCH 185
EXACT 186 load load
EXACT 187 add add
EXACT 188 inttoptr inttoptr
EXACT 189 load load
EXACT 190 store store
EXACT 191 store store
NO MATCH 192
NO MATCH 193
EXACT 194 inttoptr inttoptr
EXACT 195 load load
EXACT 196 store store
EXACT 197 add add
EXACT 198 store store
EXACT 199 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%RDI.i26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%11 = add i64 %7, -16', '%12 = load i64, i64* %RDI.i26, align 8', '%14 = inttoptr i64 %11 to i64*', 'store i64 %12, i64* %14, align 8', 'store i64 %20, i64* %RDI.i26, align 8', '%25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%33 = zext i1 %31 to i32', '%34 = tail call i32 @llvm.ctpop.i32(i32 %33)', '%35 = trunc i32 %34 to i8', '%36 = xor i8 %35, 1', 'store i8 %36, i8* %25, align 1', '%37 = xor i8 %32, 1', 'store i8 %37, i8* %27, align 1', 'store i64 %40, i64* %RDI.i26, align 8', '%42 = inttoptr i64 %40 to i8*', 'store i8 %32, i8* %42, align 1', '%50 = load i64, i64* %6, align 8', '%51 = add i64 %50, 8', '%52 = inttoptr i64 %50 to i64*', '%53 = load i64, i64* %52, align 8', 'store i64 %53, i64* %RBP.i, align 8', 'store i64 %51, i64* %6, align 8', '%55 = inttoptr i64 %51 to i64*', '%56 = load i64, i64* %55, align 8', 'store i64 %56, i64* %3, align 8', '%57 = add i64 %50, 16', 'store i64 %57, i64* %6, align 8'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Keep: %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %RDI.i26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %11 = add i64 %7, -16
Found line to remove! %12 = load i64, i64* %RDI.i26, align 8
Keep: %13 = add i64 %10, 7
Keep: store i64 %13, i64* %3, align 8
Found line to remove! %14 = inttoptr i64 %11 to i64*
Found line to remove! store i64 %12, i64* %14, align 8
Keep: %15 = load i64, i64* %RBP.i, align 8
Keep: %16 = add i64 %15, -8
Keep: %17 = load i64, i64* %3, align 8
Keep: %18 = add i64 %17, 4
Keep: store i64 %18, i64* %3, align 8
Keep: %19 = inttoptr i64 %16 to i64*
Keep: %20 = load i64, i64* %19, align 8
Found line to remove! store i64 %20, i64* %RDI.i26, align 8
Keep: %21 = add i64 %17, 7
Keep: store i64 %21, i64* %3, align 8
Keep: %22 = inttoptr i64 %20 to i8*
Keep: %23 = load i8, i8* %22, align 1
Keep: %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Keep: %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Keep: %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Keep: %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Keep: %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %AL.i19 = bitcast %union.anon* %30 to i8*
Keep: %31 = icmp eq i8 %23, 0
Keep: %32 = zext i1 %31 to i8
Keep: store i8 0, i8* %24, align 1
Found line to remove! %33 = zext i1 %31 to i32
Found line to remove! %34 = tail call i32 @llvm.ctpop.i32(i32 %33)
Found line to remove! %35 = trunc i32 %34 to i8
Found line to remove! %36 = xor i8 %35, 1
Found line to remove! store i8 %36, i8* %25, align 1
Found line to remove! %37 = xor i8 %32, 1
Found line to remove! store i8 %37, i8* %27, align 1
Keep: store i8 0, i8* %28, align 1
Keep: store i8 0, i8* %29, align 1
Keep: store i8 0, i8* %26, align 1
Keep: %RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Keep: %38 = zext i1 %31 to i64
Keep: store i64 %38, i64* %RCX.i, align 8
Keep: store i8 %32, i8* %AL.i19, align 1
Keep: %39 = add i64 %17, 23
Keep: store i64 %39, i64* %3, align 8
Keep: %40 = load i64, i64* %19, align 8
Found line to remove! store i64 %40, i64* %RDI.i26, align 8
Keep: %41 = add i64 %17, 25
Keep: store i64 %41, i64* %3, align 8
Found line to remove! %42 = inttoptr i64 %40 to i8*
Found line to remove! store i8 %32, i8* %42, align 1
Keep: %RAX.i = getelementptr inbounds %union.anon, %union.anon* %30, i64 0, i32 0
Keep: %43 = load i64, i64* %RBP.i, align 8
Keep: %44 = add i64 %43, -8
Keep: %45 = load i64, i64* %3, align 8
Keep: %46 = add i64 %45, 4
Keep: store i64 %46, i64* %3, align 8
Keep: %47 = inttoptr i64 %44 to i64*
Keep: %48 = load i64, i64* %47, align 8
Keep: store i64 %48, i64* %RAX.i, align 8
Keep: %49 = add i64 %45, 5
Keep: store i64 %49, i64* %3, align 8
Found line to remove! %50 = load i64, i64* %6, align 8
Found line to remove! %51 = add i64 %50, 8
Found line to remove! %52 = inttoptr i64 %50 to i64*
Found line to remove! %53 = load i64, i64* %52, align 8
Found line to remove! store i64 %53, i64* %RBP.i, align 8
Found line to remove! store i64 %51, i64* %6, align 8
Keep: %54 = add i64 %45, 6
Keep: store i64 %54, i64* %3, align 8
Found line to remove! %55 = inttoptr i64 %51 to i64*
Found line to remove! %56 = load i64, i64* %55, align 8
Found line to remove! store i64 %56, i64* %3, align 8
Found line to remove! %57 = add i64 %50, 16
Found line to remove! store i64 %57, i64* %6, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%RDI.i26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%11 = add i64 %7, -16', '%12 = load i64, i64* %RDI.i26, align 8', '%14 = inttoptr i64 %11 to i64*', 'store i64 %12, i64* %14, align 8', 'store i64 %20, i64* %RDI.i26, align 8', '%25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%33 = zext i1 %31 to i32', '%34 = tail call i32 @llvm.ctpop.i32(i32 %33)', '%35 = trunc i32 %34 to i8', '%36 = xor i8 %35, 1', 'store i8 %36, i8* %25, align 1', '%37 = xor i8 %32, 1', 'store i8 %37, i8* %27, align 1', 'store i64 %40, i64* %RDI.i26, align 8', '%42 = inttoptr i64 %40 to i8*', 'store i8 %32, i8* %42, align 1', '%50 = load i64, i64* %6, align 8', '%51 = add i64 %50, 8', '%52 = inttoptr i64 %50 to i64*', '%53 = load i64, i64* %52, align 8', 'store i64 %53, i64* %RBP.i, align 8', 'store i64 %51, i64* %6, align 8', '%55 = inttoptr i64 %51 to i64*', '%56 = load i64, i64* %55, align 8', 'store i64 %56, i64* %3, align 8', '%57 = add i64 %50, 16', 'store i64 %57, i64* %6, align 8'])
TO REMOVE: dict_keys(['store i64 %95, i64* %RAX, align 8', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%4 = load i64, i64* %RBP, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %PC, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%101 = zext i1 %99 to i32', '%102 = tail call i32 @llvm.ctpop.i32(i32 %101) #10', '%103 = trunc i32 %102 to i8', '%104 = xor i8 %103, 1', 'store i8 %104, i8* %37, align 1', '%105 = xor i8 %100, 1', 'store i8 %105, i8* %44, align 1', '%12 = load i64, i64* %RDI, align 8', 'store i64 %8, i64* %RBP, align 8', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', 'store i64 %12, i64* %14, align 8', '%14 = inttoptr i64 %11 to i64*', '%11 = add i64 %7, -16', 'store i8 0, i8* %42, align 1', 'store i8 0, i8* %47, align 1', 'store i64 %108, i64* %RAX, align 8', 'store i8 0, i8* %53, align 1', '%110 = inttoptr i64 %108 to i8*', 'store i64 %20, i64* %RDI, align 8', 'store i8 %100, i8* %110, align 1', 'store i64 %116, i64* %RAX, align 8', 'store i8 0, i8* %31, align 1', '%8 = add i64 %7, -8', '%127 = load i64, i64* %6, align 8', '%128 = add i64 %127, 8', '%129 = inttoptr i64 %127 to i64*', '%130 = load i64, i64* %129, align 8', 'store i64 %130, i64* %RBP, align 8', 'store i64 %128, i64* %6, align 8', '%9 = inttoptr i64 %8 to i64*', '%132 = inttoptr i64 %128 to i64*', '%133 = load i64, i64* %132, align 8', 'store i64 %133, i64* %PC, align 8', '%134 = add i64 %127, 16', 'store i64 %134, i64* %6, align 8', 'store i64 %60, i64* %RDI, align 8'])
Keep: block_400610:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %AL = bitcast %union.anon* %3 to i8*
Keep: %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Keep: %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %PC, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Keep: %10 = load i64, i64* %PC, align 8/home/ubuntu/Install/llvm/llvm.4.0.0.install/bin/opt: /tmp/tmp5gp8v0mm-target.ll:1687:27: error: use of undefined value '%RDI'
store i64 %var_2_39, i64* %RDI, align 8
                          ^

Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -16
Found line to remove! %12 = load i64, i64* %RDI, align 8
Keep: %13 = add i64 %10, 7
Keep: store i64 %13, i64* %PC, align 8
Found line to remove! %14 = inttoptr i64 %11 to i64*
Found line to remove! store i64 %12, i64* %14, align 8
Keep: %15 = load i64, i64* %RBP, align 8
Keep: %16 = add i64 %15, -8
Keep: %17 = load i64, i64* %PC, align 8
Keep: %18 = add i64 %17, 4
Keep: store i64 %18, i64* %PC, align 8
Keep: %19 = inttoptr i64 %16 to i64*
Keep: %20 = load i64, i64* %19, align 8
Found line to remove! store i64 %20, i64* %RDI, align 8
Keep: %21 = add i64 %17, 7
Keep: store i64 %21, i64* %PC, align 8
Keep: %22 = inttoptr i64 %20 to i8*
Keep: %23 = load i8, i8* %22, align 1
Keep: %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Keep: %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Keep: %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Keep: %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Keep: %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Keep: %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Keep: %30 = icmp eq i8 %23, 0
Keep: %31 = zext i1 %30 to i8
Keep: store i8 0, i8* %24, align 1
Keep: %32 = zext i1 %30 to i32
Keep: %33 = tail call i32 @llvm.ctpop.i32(i32 %32) #10
Keep: %34 = trunc i32 %33 to i8
Keep: %35 = xor i8 %34, 1
Keep: store i8 %35, i8* %25, align 1
Keep: %36 = xor i8 %31, 1
Keep: store i8 %36, i8* %27, align 1
Keep: store i8 0, i8* %28, align 1
Keep: store i8 0, i8* %29, align 1
Keep: store i8 0, i8* %26, align 1
Keep: %37 = zext i1 %30 to i64
Keep: store i64 %37, i64* %RCX, align 8
Keep: store i8 %31, i8* %AL, align 1
Keep: %38 = add i64 %17, 23
Keep: store i64 %38, i64* %PC, align 8
Keep: %39 = load i64, i64* %19, align 8
Keep: store i64 %39, i64* %RDI, align 8
Keep: %40 = add i64 %17, 25
Keep: store i64 %40, i64* %PC, align 8
Keep: %41 = inttoptr i64 %39 to i8*
Keep: store i8 %31, i8* %41, align 1
Keep: %42 = load i64, i64* %RBP, align 8
Keep: %43 = add i64 %42, -8
Keep: %44 = load i64, i64* %PC, align 8
Keep: %45 = add i64 %44, 4
Keep: store i64 %45, i64* %PC, align 8
Keep: %46 = inttoptr i64 %43 to i64*
Keep: %47 = load i64, i64* %46, align 8
Keep: store i64 %47, i64* %RAX, align 8
Keep: %48 = add i64 %44, 5
Keep: store i64 %48, i64* %PC, align 8
Keep: %49 = load i64, i64* %6, align 8
Keep: %50 = add i64 %49, 8
Keep: %51 = inttoptr i64 %49 to i64*
Keep: %52 = load i64, i64* %51, align 8
Keep: store i64 %52, i64* %RBP, align 8
Keep: store i64 %50, i64* %6, align 8
Keep: %53 = add i64 %44, 6
Keep: store i64 %53, i64* %PC, align 8
Keep: %54 = inttoptr i64 %50 to i64*
Keep: %55 = load i64, i64* %54, align 8
Keep: store i64 %55, i64* %PC, align 8
Keep: %56 = add i64 %49, 16
Keep: store i64 %56, i64* %6, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['store i64 %95, i64* %RAX, align 8', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%4 = load i64, i64* %RBP, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %PC, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%101 = zext i1 %99 to i32', '%102 = tail call i32 @llvm.ctpop.i32(i32 %101) #10', '%103 = trunc i32 %102 to i8', '%104 = xor i8 %103, 1', 'store i8 %104, i8* %37, align 1', '%105 = xor i8 %100, 1', 'store i8 %105, i8* %44, align 1', '%12 = load i64, i64* %RDI, align 8', 'store i64 %8, i64* %RBP, align 8', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', 'store i64 %12, i64* %14, align 8', '%14 = inttoptr i64 %11 to i64*', '%11 = add i64 %7, -16', 'store i8 0, i8* %42, align 1', 'store i8 0, i8* %47, align 1', 'store i64 %108, i64* %RAX, align 8', 'store i8 0, i8* %53, align 1', '%110 = inttoptr i64 %108 to i8*', 'store i64 %20, i64* %RDI, align 8', 'store i8 %100, i8* %110, align 1', 'store i64 %116, i64* %RAX, align 8', 'store i8 0, i8* %31, align 1', '%8 = add i64 %7, -8', '%127 = load i64, i64* %6, align 8', '%128 = add i64 %127, 8', '%129 = inttoptr i64 %127 to i64*', '%130 = load i64, i64* %129, align 8', 'store i64 %130, i64* %RBP, align 8', 'store i64 %128, i64* %6, align 8', '%9 = inttoptr i64 %8 to i64*', '%132 = inttoptr i64 %128 to i64*', '%133 = load i64, i64* %132, align 8', 'store i64 %133, i64* %PC, align 8', '%134 = add i64 %127, 16', 'store i64 %134, i64* %6, align 8', 'store i64 %60, i64* %RDI, align 8'])
[x] Failed to do opt
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/Shootout-methcall/toggle_activate/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/Shootout-methcall/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
Traceback (most recent call last):
  File "/usr/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/usr/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/ubuntu/Github/llir-matcher/matcher/match.py", line 728, in <module>
    matcher.do_match()
  File "/home/ubuntu/Github/llir-matcher/matcher/match.py", line 101, in do_match
    self.do_opt()
  File "/home/ubuntu/Github/llir-matcher/matcher/match.py", line 585, in do_opt
    env=MYENV)
  File "/usr/lib/python3.6/subprocess.py", line 311, in check_call
    raise CalledProcessError(retcode, cmd)
subprocess.CalledProcessError: Command '/home/ubuntu/Install/llvm/llvm.4.0.0.install/bin/opt -S -inline /tmp/tmp5gp8v0mm-target.ll -o /tmp/tmp5gp8v0mm-target.ll' returned non-zero exit status 1.
