; ModuleID = 'binary/test.mcsema.calls_renamed.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_4003c8__init_type = type <{ [23 x i8] }>
%seg_4003e0__plt_type = type <{ [32 x i8] }>
%seg_400400__text_type = type <{ [6322 x i8] }>
%seg_401cb4__fini_type = type <{ [9 x i8] }>
%seg_401cc0__rodata_type = type <{ [4 x i8] }>
%seg_401cc4__eh_frame_hdr_type = type <{ [108 x i8] }>
%seg_401d30__eh_frame_type = type <{ [424 x i8] }>
%seg_602df0__init_array_type = type <{ i64, i64 }>
%seg_602ff0__got_type = type <{ i64, i64 }>
%seg_603000__got_plt_type = type <{ [24 x i8], i64 }>
%seg_603020__data_type = type <{ [16 x i8], [36 x i8] }>
%seg_603060__bss_type = type <{ [16 x i8], [16 x i8], [1024 x i8], [1024 x i8], [1024 x i8], [80 x i8], [960 x i8], [64 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_4003c8__init = internal constant %seg_4003c8__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05%, \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_4003e0__plt = internal constant %seg_4003e0__plt_type <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%\22, \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_400400__text = internal constant %seg_400400__text_type <{ [6322 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0\B0\1C@\00H\C7\C1@\1C@\00H\C7\C7\10\1B@\00\FF\15\C6+ \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B8X0`\00H=X0`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BFX0`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BEX0`\00UH\81\EEX0`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BFX0`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=\A9+ \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05\97+ \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\89}\F8H\89u\F0\83<%p0`\00\00\0F\85\15\00\00\00\E8M\01\00\00\E8\98\02\00\00\C7\04%p0`\00\01\00\00\00\C7E\EC\00\00\00\00\83}\EC\10\0F\8D-\00\00\00H\8BE\F0\8BM\EC\81\C1\BC\00\00\00Hc\D1\0F\B6\0C\10HcE\EC\89\0C\85\800`\00\8BE\EC\83\C0\01\89E\EC\E9\C9\FF\FF\FF\C7E\EC\00\00\00\00\83}\EC3\0F\8D\22\00\00\00\8BE\EC\83\C0\10Hc\C8\C7\04\8D\800`\00\00\00\00\00\8BE\EC\83\C0\01\89E\EC\E9\D4\FF\FF\FF\C7E\EC\00\00\00\00\81}\EC\BC\00\00\00\0F\8D*\00\00\00H\8BE\F0HcM\EC\0F\B6\14\08\8Bu\EC\83\C6CHc\C6\89\14\85\800`\00\8BE\EC\83\C0\01\89E\EC\E9\C9\FF\FF\FF\C7E\EC\00\00\00\00\81}\EC\FF\00\00\00\0F\8D,\00\00\00HcE\ECHc\04\85\800`\00\8B\0C\85\804`\00HcE\EC\89\0C\85\800`\00\8BE\EC\83\C0\01\89E\EC\E9\C7\FF\FF\FF\E8\F9\02\00\00\C7E\EC\00\00\00\00\81}\EC\BC\00\00\00\0F\8D+\00\00\00\8BE\EC\83\C0CHc\C8\8B\04\8D\800`\00\88\C2H\8BM\F8Hcu\EC\88\141\8BE\EC\83\C0\01\89E\EC\E9\C8\FF\FF\FFH\83\C4 ]\C3\0F\1F@\00UH\89\E5\C7E\F8\01\00\00\00\C7\04%\A08`\00\00\00\00\00\C7E\FC\00\00\00\00\83}\FC\08\0F\8D^\00\00\00\8BE\F8HcM\FC\89\04\8D\808`\00\8BE\FCHcM\FCHc\0C\8D\808`\00\89\04\8D\804`\00HcM\FC\83<\8D00`\00\00\0F\84\11\00\00\00\8BE\F83\04%\A08`\00\89\04%\A08`\00\8BE\F8\C1\E0\01\89E\F8\8BE\FC\83\C0\01\89E\FC\E9\98\FF\FF\FFHc\04%\A08`\00\C7\04\85\804`\00\08\00\00\00\8BM\F8\C1\F9\01\89M\F8\C7E\FC\09\00\00\00\81}\FC\FF\00\00\00\0F\8D\8A\00\00\00\8BE\FC\83\E8\01Hc\C8\8B\04\8D\808`\00;E\F8\0F\8C/\00\00\00\8B\04%\A08`\00\8BM\FC\83\E9\01Hc\D1\8B\0C\95\808`\003M\F8\C1\E1\011\C8HcU\FC\89\04\95\808`\00\E9\1E\00\00\00\8BE\FC\83\E8\01Hc\C8\8B\04\8D\808`\00\C1\E0\01HcM\FC\89\04\8D\808`\00\8BE\FCHcM\FCHc\0C\8D\808`\00\89\04\8D\804`\00\8BE\FC\83\C0\01\89E\FC\E9i\FF\FF\FF\C7\04%\804`\00\FF\FF\FF\FF]\C3\0F\1F@\00UH\89\E5\C7\04%\80<`\00\02\00\00\00\C7\04%\84<`\00\01\00\00\00\C7E\FC\02\00\00\00\83}\FC\10\0F\8F\F3\00\00\00HcE\FC\C7\04\85\80<`\00\01\00\00\00\8BM\FC\83\E9\01\89M\F8\83}\F8\00\0F\8E\90\00\00\00HcE\F8\83<\85\80<`\00\00\0F\84P\00\00\00\B8\FF\00\00\00\8BM\F8\83\E9\01Hc\D1\8B\0C\95\80<`\00HcU\F8Hc\14\95\80<`\00\8B4\95\804`\00\03u\FC\89E\F4\89\F0\99\8Bu\F4\F7\FEHc\FA3\0C\BD\808`\00Hc}\F8\89\0C\BD\80<`\00\E9\1B\00\00\00\8BE\F8\83\E8\01Hc\C8\8B\04\8D\80<`\00HcM\F8\89\04\8D\80<`\00\E9\00\00\00\00\8BE\F8\83\C0\FF\89E\F8\E9f\FF\FF\FF\B8\FF\00\00\00Hc\0C%\80<`\00\8B\14\8D\804`\00\03U\FC\89E\F0\89\D0\99\8Bu\F0\F7\FEHc\CA\8B\14\8D\808`\00\89\14%\80<`\00\8BE\FC\83\C0\01\89E\FC\E9\03\FF\FF\FF\C7E\FC\00\00\00\00\83}\FC\10\0F\8F,\00\00\00HcE\FCHc\04\85\80<`\00\8B\0C\85\804`\00HcE\FC\89\0C\85\80<`\00\8BE\FC\83\C0\01\89E\FC\E9\CA\FF\FF\FF]\C3\0F\1F\00UH\89\E5H\81\EC0\0A\00\00\C7\85,\FA\FF\FF\00\00\00\00\C7\85(\FA\FF\FF\00\00\00\00\C7E\FC\01\00\00\00\83}\FC\10\0F\8F\D6\00\00\00HcE\FC\C7\84\850\FA\FF\FF\00\00\00\00\C7E\F8\00\00\00\00\81}\F8\FF\00\00\00\0F\8Dk\00\00\00HcE\F8\83<\85\800`\00\FF\0F\84F\00\00\00\B8\FF\00\00\00HcM\F8\8B\14\8D\800`\00\8Bu\FC\0F\AFu\F8\01\F2\89\85|\F5\FF\FF\89\D0\99\8B\B5|\F5\FF\FF\F7\FEHc\CA\8B\14\8D\808`\00HcM\FC3\94\8D0\FA\FF\FF\89\94\8D0\FA\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\88\FF\FF\FFHcE\FC\83\BC\850\FA\FF\FF\00\0F\84\0A\00\00\00\C7\85(\FA\FF\FF\01\00\00\00HcE\FCHc\84\850\FA\FF\FF\8B\0C\85\804`\00HcE\FC\89\8C\850\FA\FF\FF\8BE\FC\83\C0\01\89E\FC\E9 \FF\FF\FF\83\BD(\FA\FF\FF\00\0F\84\AA\0D\00\00\C7\85 \FB\FF\FF\00\00\00\00\8B\854\FA\FF\FF\89\85$\FB\FF\FF\C7\85p\FB\FF\FF\00\00\00\00\C7\85\B0\FB\FF\FF\01\00\00\00\C7E\FC\01\00\00\00\83}\FC\10\0F\8D,\00\00\00HcE\FC\C7\84\85p\FB\FF\FF\FF\FF\FF\FFHcE\FC\C7\84\85\B0\FB\FF\FF\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\CA\FF\FF\FF\C7\85\D0\FA\FF\FF\00\00\00\00\C7\85\D4\FA\FF\FF\00\00\00\00\C7\85\80\FA\FF\FF\FF\FF\FF\FF\C7\85\84\FA\FF\FF\00\00\00\00\C7E\F4\00\00\00\00\8BE\F4\83\C0\01\89E\F4HcM\F4\83\BC\8D \FB\FF\FF\FF\0F\85\AE\00\00\00HcE\F4\8B\8C\85\D0\FA\FF\FF\8BU\F4\83\C2\01Hc\C2\89\8C\85\D0\FA\FF\FF\C7E\FC\00\00\00\00\8BE\FCHcM\F4;\84\8D\D0\FA\FF\FF\0F\8Fs\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\89\C2H\01\CAHcM\FC\8B4\8A\8B}\F4\83\C7\01Hc\CFH\C1\E1\06H\89\C2H\01\CAHcM\FC\894\8AHcM\F4H\C1\E1\06H\89\C2H\01\CAHcM\FCHc\0C\8A\8B4\8D\804`\00HcM\F4H\C1\E1\06H\01\C8HcM\FC\894\88\8BE\FC\83\C0\01\89E\FC\E9y\FF\FF\FF\E9\B8\02\00\00\8BE\F4\83\E8\01\89E\F01\C0\88\C1HcU\F0\83\BC\95 \FB\FF\FF\FF\88\8D{\F5\FF\FF\0F\85\0D\00\00\00\83}\F0\00\0F\9F\C0\88\85{\F5\FF\FF\8A\85{\F5\FF\FF\A8\01\0F\85\05\00\00\00\E9\0E\00\00\00\8BE\F0\83\C0\FF\89E\F0\E9\B6\FF\FF\FF\83}\F0\00\0F\8EW\00\00\00\8BE\F0\89E\F8\8BE\F8\83\C0\FF\89E\F8HcM\F8\83\BC\8D \FB\FF\FF\FF\0F\84\22\00\00\00HcE\F0\8B\8C\85\80\FA\FF\FFHcE\F8;\8C\85\80\FA\FF\FF\0F\8D\06\00\00\00\8BE\F8\89E\F0\E9\00\00\00\00\83}\F8\00\0F\8F\B4\FF\FF\FF\E9\00\00\00\00HcE\F4\8B\8C\85\D0\FA\FF\FFHcE\F0\8B\94\85\D0\FA\FF\FF\03U\F4+U\F09\D1\0F\8E \00\00\00HcE\F4\8B\8C\85\D0\FA\FF\FF\8BU\F4\83\C2\01Hc\C2\89\8C\85\D0\FA\FF\FF\E9!\00\00\00HcE\F0\8B\8C\85\D0\FA\FF\FF\03M\F4+M\F0\8BU\F4\83\C2\01Hc\C2\89\8C\85\D0\FA\FF\FF\C7E\FC\00\00\00\00\83}\FC\10\0F\8D0\00\00\00H\8D\85p\FB\FF\FF\8BM\F4\83\C1\01Hc\D1H\C1\E2\06H\01\D0HcU\FC\C7\04\90\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\C6\FF\FF\FF\C7E\FC\00\00\00\00\8BE\FCHcM\F0;\84\8D\D0\FA\FF\FF\0F\8F\AD\00\00\00H\8D\85p\FB\FF\FFHcM\F0H\C1\E1\06H\01\C8HcM\FC\83<\88\FF\0F\84z\00\00\00H\8D\85p\FB\FF\FF\B9\FF\00\00\00HcU\F4\8B\B4\95 \FB\FF\FF\81\C6\FF\00\00\00HcU\F0+\B4\95 \FB\FF\FFHcU\F0H\C1\E2\06H\89\C7H\01\D7HcU\FC\034\97H\89\85p\F5\FF\FF\89\F0\99\F7\F9Hc\FA\8B\0C\BD\808`\00\8BU\F4\83\C2\01Hc\FAH\C1\E7\06L\8B\85p\F5\FF\FFI\01\F8\8BU\FC\03U\F4+U\F0Hc\FAA\89\0C\B8\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9?\FF\FF\FF\C7E\FC\00\00\00\00\8BE\FCHcM\F4;\84\8D\D0\FA\FF\FF\0F\8Fv\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\89\C2H\01\CAHcM\FC\8B4\8A\8B}\F4\83\C7\01Hc\CFH\C1\E1\06H\89\C2H\01\CAHcM\FC34\8A\894\8AHcM\F4H\C1\E1\06H\89\C2H\01\CAHcM\FCHc\0C\8A\8B4\8D\804`\00HcM\F4H\C1\E1\06H\01\C8HcM\FC\894\88\8BE\FC\83\C0\01\89E\FC\E9v\FF\FF\FF\E9\00\00\00\00\8BE\F4\8BM\F4\83\C1\01Hc\D1+\84\95\D0\FA\FF\FF\8BM\F4\83\C1\01Hc\D1\89\84\95\80\FA\FF\FF\83}\F4\10\0F\8Dd\01\00\00\8BE\F4\83\C0\01Hc\C8\83\BC\8D0\FA\FF\FF\FF\0F\84-\00\00\00\8BE\F4\83\C0\01Hc\C8Hc\8C\8D0\FA\FF\FF\8B\04\8D\808`\00\8BU\F4\83\C2\01Hc\CA\89\84\8D \FB\FF\FF\E9\14\00\00\00\8BE\F4\83\C0\01Hc\C8\C7\84\8D \FB\FF\FF\00\00\00\00\C7E\FC\01\00\00\00\8BE\FC\8BM\F4\83\C1\01Hc\D1;\84\95\D0\FA\FF\FF\0F\8F\C4\00\00\00\8BE\F4\83\C0\01+E\FCHc\C8\83\BC\8D0\FA\FF\FF\FF\0F\84\97\00\00\00H\8D\85p\FB\FF\FF\8BM\F4\83\C1\01Hc\D1H\C1\E2\06H\01\D0HcU\FC\83<\90\00\0F\84r\00\00\00\B8\FF\00\00\00H\8D\8Dp\FB\FF\FF\8BU\F4\83\C2\01+U\FCHc\F2\8B\94\B50\FA\FF\FF\8B}\F4\83\C7\01Hc\F7H\C1\E6\06H\01\F1Hcu\FCHc\0C\B1\03\14\8D\804`\00\89\85l\F5\FF\FF\89\D0\99\8B\BDl\F5\FF\FF\F7\FFHc\CA\8B\14\8D\808`\00D\8BE\F4A\83\C0\01Ic\C83\94\8D \FB\FF\FF\89\94\8D \FB\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9#\FF\FF\FF\8BE\F4\83\C0\01Hc\C8Hc\8C\8D \FB\FF\FF\8B\04\8D\804`\00\8BU\F4\83\C2\01Hc\CA\89\84\8D \FB\FF\FF\E9\00\00\00\001\C0\88\C1\83}\F4\10\88\8Dk\F5\FF\FF\0F\8D\1A\00\00\00\8BE\F4\83\C0\01Hc\C8\83\BC\8D\D0\FA\FF\FF\08\0F\9E\C2\88\95k\F5\FF\FF\8A\85k\F5\FF\FF\A8\01\0F\85\AD\FA\FF\FF\8BE\F4\83\C0\01\89E\F4HcM\F4\83\BC\8D\D0\FA\FF\FF\08\0F\8F1\07\00\00\C7E\FC\00\00\00\00\8BE\FCHcM\F4;\84\8D\D0\FA\FF\FF\0F\8FD\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\89\C2H\01\CAHcM\FCHc\0C\8A\8B4\8D\804`\00HcM\F4H\C1\E1\06H\01\C8HcM\FC\894\88\8BE\FC\83\C0\01\89E\FC\E9\A8\FF\FF\FF\C7E\FC\01\00\00\00\8BE\FCHcM\F4;\84\8D\D0\FA\FF\FF\0F\8F2\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\01\C8HcM\FC\8B\14\88HcE\FC\89\94\85\80\F5\FF\FF\8BE\FC\83\C0\01\89E\FC\E9\BA\FF\FF\FF\C7\85,\FA\FF\FF\00\00\00\00\C7E\FC\01\00\00\00\81}\FC\FF\00\00\00\0F\8F\E2\00\00\00\C7E\F0\01\00\00\00\C7E\F8\01\00\00\00\8BE\F8HcM\F4;\84\8D\D0\FA\FF\FF\0F\8Fm\00\00\00HcE\F8\83\BC\85\80\F5\FF\FF\FF\0F\84H\00\00\00\B8\FF\00\00\00HcM\F8\8B\94\8D\80\F5\FF\FF\03U\F8\89\85d\F5\FF\FF\89\D0\99\8B\B5d\F5\FF\FF\F7\FEHcM\F8\89\94\8D\80\F5\FF\FFHcM\F8Hc\8C\8D\80\F5\FF\FF\8B\14\8D\808`\003U\F0\89U\F0\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\7F\FF\FF\FF\83}\F0\00\0F\856\00\00\00\B8\FF\00\00\00\8BM\FCHc\95,\FA\FF\FF\89\8C\95\00\FA\FF\FF+E\FCHc\95,\FA\FF\FF\89\84\95\E0\F9\FF\FF\8B\85,\FA\FF\FF\83\C0\01\89\85,\FA\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\11\FF\FF\FF\8B\85,\FA\FF\FFHcM\F4;\84\8D\D0\FA\FF\FF\0F\85\F9\04\00\00\C7E\FC\01\00\00\00\8BE\FCHcM\F4;\84\8D\D0\FA\FF\FF\0F\8F+\02\00\00HcE\FC\83\BC\850\FA\FF\FF\FF\0F\84d\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\01\C8HcM\FC\83<\88\FF\0F\84D\00\00\00H\8D\85p\FB\FF\FFHcM\FCHc\8C\8D0\FA\FF\FF\8B\14\8D\808`\00HcM\F4H\C1\E1\06H\01\C8HcM\FCHc\04\883\14\85\808`\00HcE\FC\89\94\85\B0\F9\FF\FF\E9\D1\00\00\00HcE\FC\83\BC\850\FA\FF\FF\FF\0F\84C\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\01\C8HcM\FC\83<\88\FF\0F\85#\00\00\00HcE\FCHc\84\850\FA\FF\FF\8B\0C\85\808`\00HcE\FC\89\8C\85\B0\F9\FF\FF\E9w\00\00\00HcE\FC\83\BC\850\FA\FF\FF\FF\0F\85Q\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\01\C8HcM\FC\83<\88\FF\0F\841\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\01\C8HcM\FCHc\04\88\8B\14\85\808`\00HcE\FC\89\94\85\B0\F9\FF\FF\E9\0F\00\00\00HcE\FC\C7\84\85\B0\F9\FF\FF\00\00\00\00\E9\00\00\00\00\E9\00\00\00\00\C7E\F8\01\00\00\00\8BE\F8;E\FC\0F\8D\A5\00\00\00HcE\F8\83\BC\850\FA\FF\FF\FF\0F\84\80\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\01\C8\8BU\FC+U\F8Hc\CA\83<\88\FF\0F\84[\00\00\00\B8\FF\00\00\00H\8D\8Dp\FB\FF\FFHcU\F4H\C1\E2\06H\01\D1\8Bu\FC+u\F8Hc\D6\8B4\91HcM\F8\03\B4\8D0\FA\FF\FF\89\85`\F5\FF\FF\89\F0\99\8B\B5`\F5\FF\FF\F7\FEHc\CA\8B\14\8D\808`\00HcM\FC3\94\8D\B0\F9\FF\FF\89\94\8D\B0\F9\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9O\FF\FF\FFHcE\FCHc\84\85\B0\F9\FF\FF\8B\0C\85\804`\00HcE\FC\89\8C\85\B0\F9\FF\FF\8BE\FC\83\C0\01\89E\FC\E9\C1\FD\FF\FF\C7E\FC\00\00\00\00\81}\FC\FF\00\00\00\0F\8Df\00\00\00HcE\FC\C7\84\85\B0\F5\FF\FF\00\00\00\00HcE\FC\83<\85\800`\00\FF\0F\84#\00\00\00HcE\FCHc\04\85\800`\00\8B\0C\85\808`\00HcE\FC\89\0C\85\800`\00\E9\0F\00\00\00HcE\FC\C7\04\85\800`\00\00\00\00\00\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\8D\FF\FF\FF\C7E\FC\00\00\00\00\8BE\FCHcM\F4;\84\8D\D0\FA\FF\FF\0F\8D\19\02\00\00HcE\FCHc\84\85\E0\F9\FF\FF\C7\84\85\B0\F5\FF\FF\01\00\00\00\C7E\F8\01\00\00\00\8BE\F8HcM\F4;\84\8D\D0\FA\FF\FF\0F\8F{\00\00\00HcE\F8\83\BC\85\B0\F9\FF\FF\FF\0F\84V\00\00\00\B8\FF\00\00\00HcM\F8\8B\94\8D\B0\F9\FF\FF\8Bu\F8HcM\FC\0F\AF\B4\8D\00\FA\FF\FF\01\F2\89\85\5C\F5\FF\FF\89\D0\99\8B\B5\5C\F5\FF\FF\F7\FEHc\CA\8B\14\8D\808`\00HcM\FCHc\8C\8D\E0\F9\FF\FF3\94\8D\B0\F5\FF\FF\89\94\8D\B0\F5\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9q\FF\FF\FFHcE\FCHc\84\85\E0\F9\FF\FF\83\BC\85\B0\F5\FF\FF\00\0F\84?\01\00\00HcE\FCHc\84\85\E0\F9\FF\FFHc\84\85\B0\F5\FF\FF\8B\0C\85\804`\00HcE\FCHc\84\85\E0\F9\FF\FF\89\8C\85\B0\F5\FF\FF\C7E\F0\00\00\00\00\C7E\F8\00\00\00\00\8BE\F8HcM\F4;\84\8D\D0\FA\FF\FF\0F\8Dh\00\00\00\8BE\F8;E\FC\0F\84I\00\00\00\B8\FF\00\00\00HcM\F8\8B\94\8D\E0\F9\FF\FFHcM\FC\03\94\8D\00\FA\FF\FF\89\85X\F5\FF\FF\89\D0\99\8B\B5X\F5\FF\FF\F7\FEHc\CA\8B\14\8D\808`\00\83\F2\01Hc\CA\8B\14\8D\804`\00\03U\F0\89U\F0\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\84\FF\FF\FF\B8\FF\00\00\00\8BM\F0\89\85T\F5\FF\FF\89\C8\99\8B\8DT\F5\FF\FF\F7\F9\89U\F0Hcu\FCHc\B4\B5\E0\F9\FF\FF\8B\94\B5\B0\F5\FF\FF+U\F0\81\C2\FF\00\00\00\89\D0\99\F7\F9Hc\F2\8B\14\B5\808`\00Hcu\FCHc\B4\B5\E0\F9\FF\FF\89\94\B5\B0\F5\FF\FFHcu\FCHc\B4\B5\E0\F9\FF\FF\8B\94\B5\B0\F5\FF\FFHcu\FCHc\B4\B5\E0\F9\FF\FF3\14\B5\800`\00\89\14\B5\800`\00\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\D3\FD\FF\FF\E9p\00\00\00\C7E\FC\00\00\00\00\81}\FC\FF\00\00\00\0F\8DW\00\00\00HcE\FC\83<\85\800`\00\FF\0F\84#\00\00\00HcE\FCHc\04\85\800`\00\8B\0C\85\808`\00HcE\FC\89\0C\85\800`\00\E9\0F\00\00\00HcE\FC\C7\04\85\800`\00\00\00\00\00\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\9C\FF\FF\FF\E9\00\00\00\00\E9p\00\00\00\C7E\FC\00\00\00\00\81}\FC\FF\00\00\00\0F\8DW\00\00\00HcE\FC\83<\85\800`\00\FF\0F\84#\00\00\00HcE\FCHc\04\85\800`\00\8B\0C\85\808`\00HcE\FC\89\0C\85\800`\00\E9\0F\00\00\00HcE\FC\C7\04\85\800`\00\00\00\00\00\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\9C\FF\FF\FF\E9\00\00\00\00\E9p\00\00\00\C7E\FC\00\00\00\00\81}\FC\FF\00\00\00\0F\8DW\00\00\00HcE\FC\83<\85\800`\00\FF\0F\84#\00\00\00HcE\FCHc\04\85\800`\00\8B\0C\85\808`\00HcE\FC\89\0C\85\800`\00\E9\0F\00\00\00HcE\FC\C7\04\85\800`\00\00\00\00\00\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\9C\FF\FF\FF\E9\00\00\00\00H\81\C40\0A\00\00]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\89}\F8H\89u\F0\83<%p0`\00\00\0F\85\15\00\00\00\E8\ED\ED\FF\FF\E88\EF\FF\FF\C7\04%p0`\00\01\00\00\00\C7E\EC\00\00\00\00\83}\EC3\0F\8D\1D\00\00\00HcE\EC\C7\04\85\D0<`\00\00\00\00\00\8BE\EC\83\C0\01\89E\EC\E9\D9\FF\FF\FF\C7E\EC\00\00\00\00\81}\EC\BC\00\00\00\0F\8D*\00\00\00H\8BE\F0HcM\EC\0F\B6\14\08\8Bu\EC\83\C63Hc\C6\89\14\85\D0<`\00\8BE\EC\83\C0\01\89E\EC\E9\C9\FF\FF\FF\E8\8C\00\00\00\C7E\EC\00\00\00\00\81}\EC\BC\00\00\00\0F\8D$\00\00\00H\8BE\F0HcM\EC\8A\14\08H\8BE\F8HcM\EC\88\14\08\8BE\EC\83\C0\01\89E\EC\E9\CF\FF\FF\FF\C7E\EC\00\00\00\00\83}\EC\10\0F\8D.\00\00\00HcE\EC\8B\0C\85\90@`\00\88\CAH\8BE\F8\8BM\EC\81\C1\BC\00\00\00Hc\F1\88\140\8BE\EC\83\C0\01\89E\EC\E9\C8\FF\FF\FFH\83\C4 ]\C3ffffff.\0F\1F\84\00\00\00\00\00UH\89\E5\C7E\FC\00\00\00\00\83}\FC\10\0F\8D\1D\00\00\00HcE\FC\C7\04\85\90@`\00\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\D9\FF\FF\FF\C7E\FC\EE\00\00\00\83}\FC\00\0F\8CJ\01\00\00HcE\FC\8B\0C\85\D0<`\003\0C%\CC@`\00Hc\C1\8B\0C\85\804`\00\89M\F4\83}\F4\FF\0F\84\C9\00\00\00\C7E\F8\0F\00\00\00\83}\F8\00\0F\8E\88\00\00\00HcE\F8\83<\85\80<`\00\FF\0F\84H\00\00\00\B8\FF\00\00\00\8BM\F8\83\E9\01Hc\D1\8B\0C\95\90@`\00HcU\F8\8B4\95\80<`\00\03u\F4\89E\F0\89\F0\99\8Bu\F0\F7\FEHc\FA3\0C\BD\808`\00Hc}\F8\89\0C\BD\90@`\00\E9\1B\00\00\00\8BE\F8\83\E8\01Hc\C8\8B\04\8D\90@`\00HcM\F8\89\04\8D\90@`\00\E9\00\00\00\00\8BE\F8\83\C0\FF\89E\F8\E9n\FF\FF\FF\B8\FF\00\00\00\8B\0C%\80<`\00\03M\F4\89E\EC\89\C8\99\8BM\EC\F7\F9Hc\F2\8B\14\B5\808`\00\89\14%\90@`\00\E9E\00\00\00\C7E\F8\0F\00\00\00\83}\F8\00\0F\8E)\00\00\00\8BE\F8\83\E8\01Hc\C8\8B\04\8D\90@`\00HcM\F8\89\04\8D\90@`\00\8BE\F8\83\C0\FF\89E\F8\E9\CD\FF\FF\FF\C7\04%\90@`\00\00\00\00\00\E9\00\00\00\00\8BE\FC\83\C0\FF\89E\FC\E9\AC\FE\FF\FF]\C3\90UH\89\E5H\81\EC\B0\01\00\00\C7E\FC\00\00\00\00\C7\85\5C\FE\FF\FF\00\00\00\00\81\BD\5C\FE\FF\FF\F0I\02\00\0F\8D\F5\00\00\00\C7\85X\FE\FF\FF\00\00\00\00\81\BDX\FE\FF\FF\BC\00\00\00\0F\8D/\00\00\00\E8\95\E8\FF\FFH%\FF\00\00\00\88\C1Hc\85X\FE\FF\FF\88\8C\050\FF\FF\FF\8B\85X\FE\FF\FF\83\C0\01\89\85X\FE\FF\FF\E9\C1\FF\FF\FFH\8D\B50\FF\FF\FFH\8D\BD`\FE\FF\FF\E8\B8\FC\FF\FF\E8S\E8\FF\FFH\83\E0\7F\89\C1\89\8DT\FE\FF\FF\C7\85X\FE\FF\FF\00\00\00\00\8B\85X\FE\FF\FF;\85T\FE\FF\FF\0F\8DE\00\00\00\E8&\E8\FF\FFH%\FF\00\00\00\88\C1\88\8DS\FE\FF\FF\E8\13\E8\FF\FF\BA\CC\00\00\00\89\D6H\99H\F7\FE\8A\8DS\FE\FF\FF\88\8C\15`\FE\FF\FF\8B\85X\FE\FF\FF\83\C0\01\89\85X\FE\FF\FF\E9\A9\FF\FF\FFH\8D\B5`\FE\FF\FFH\8D\BD0\FF\FF\FF\E8\D3\E8\FF\FF\8B\85\5C\FE\FF\FF\83\C0\01\89\85\5C\FE\FF\FF\E9\FB\FE\FF\FF1\C0H\81\C4\B0\01\00\00]\C3\0F\1F@\00AWAVI\89\D7AUATL\8D%\9E\11 \00UH\8D-\9E\11 \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8W\E7\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_401cb4__fini = internal constant %seg_401cb4__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_401cc0__rodata = internal constant %seg_401cc0__rodata_type <{ [4 x i8] c"\01\00\02\00" }>
@seg_401cc4__eh_frame_hdr = internal constant %seg_401cc4__eh_frame_hdr_type <{ [108 x i8] c"\01\1B\03;h\00\00\00\0C\00\00\00\1C\E7\FF\FF\C4\00\00\00<\E7\FF\FF\84\00\00\00l\E7\FF\FF\B0\00\00\00,\E8\FF\FF\EC\00\00\00\9C\E9\FF\FF\08\01\00\00\EC\EA\FF\FF$\01\00\00L\EC\FF\FF@\01\00\00\8C\FB\FF\FF\5C\01\00\00\BC\FC\FF\FFx\01\00\00L\FE\FF\FF\94\01\00\00|\FF\FF\FF\B4\01\00\00\EC\FF\FF\FF\FC\01\00\00" }>
@seg_401d30__eh_frame = internal constant %seg_401d30__eh_frame_type <{ [424 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00\B0\E6\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00\B4\E6\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00P\E6\FF\FF \00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\008\E7\FF\FFl\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00\8C\E8\FF\FFL\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\90\00\00\00\C0\E9\FF\FF]\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\AC\00\00\00\04\EB\FF\FF6\0F\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\00\00\00(\FA\FF\FF!\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\00\00\00<\FB\FF\FF\8F\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\1C\00\00\00\00\01\00\00\B0\FC\FF\FF,\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\00\00\00\00D\00\00\00 \01\00\00\C0\FD\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00h\01\00\00\E8\FD\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_602df0__init_array = internal global %seg_602df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4004e0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004b0___do_global_dtors_aux to i64) }>
@seg_602ff0__got = internal global %seg_602ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_603000__got_plt = internal global %seg_603000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 ()* @random to i64) }>
@seg_603020__data = internal global %seg_603020__data_type <{ [16 x i8] zeroinitializer, [36 x i8] c"\01\00\00\00\00\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00" }>
@seg_603060__bss = internal global %seg_603060__bss_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004e0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004b0___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_401cb0___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_401c40___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @rsenc_204_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @rsdec_204_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @sub_401850_rsenc_204_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4007b0_gen_poly_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4004f0_rsdec_204_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400440_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400910_decode_rs_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400660_generate_gf_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401980_encode_rs_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4003c8__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @random() #13

; Function Attrs: noinline
define %struct.Memory* @sub_401b10_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401b10:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 5
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %ECX = bitcast %union.anon* %19 to i32*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 7
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %EDX = bitcast %union.anon* %22 to i32*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %RAX = bitcast %union.anon* %25 to i64*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 5
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RCX = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 7
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RDX = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 9
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RSI = bitcast %union.anon* %34 to i64*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 11
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %RDI = bitcast %union.anon* %37 to i64*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %39 = getelementptr inbounds %struct.GPR, %struct.GPR* %38, i32 0, i32 13
  %40 = getelementptr inbounds %struct.Reg, %struct.Reg* %39, i32 0, i32 0
  %RSP = bitcast %union.anon* %40 to i64*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %42 = getelementptr inbounds %struct.GPR, %struct.GPR* %41, i32 0, i32 15
  %43 = getelementptr inbounds %struct.Reg, %struct.Reg* %42, i32 0, i32 0
  %RBP = bitcast %union.anon* %43 to i64*
  %44 = load i64, i64* %RBP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 1
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = load i64, i64* %RSP
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC
  store i64 %51, i64* %RBP, align 8, !tbaa !2428
  %54 = load i64, i64* %RSP
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 7
  store i64 %56, i64* %PC
  %57 = sub i64 %54, 432
  store i64 %57, i64* %RSP, align 8, !tbaa !2428
  %58 = icmp ult i64 %54, 432
  %59 = zext i1 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %59, i8* %60, align 1, !tbaa !2432
  %61 = trunc i64 %57 to i32
  %62 = and i32 %61, 255
  %63 = call i32 @llvm.ctpop.i32(i32 %62) #16
  %64 = trunc i32 %63 to i8
  %65 = and i8 %64, 1
  %66 = xor i8 %65, 1
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %66, i8* %67, align 1, !tbaa !2446
  %68 = xor i64 432, %54
  %69 = xor i64 %68, %57
  %70 = lshr i64 %69, 4
  %71 = trunc i64 %70 to i8
  %72 = and i8 %71, 1
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %72, i8* %73, align 1, !tbaa !2447
  %74 = icmp eq i64 %57, 0
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %75, i8* %76, align 1, !tbaa !2448
  %77 = lshr i64 %57, 63
  %78 = trunc i64 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %78, i8* %79, align 1, !tbaa !2449
  %80 = lshr i64 %54, 63
  %81 = xor i64 %77, %80
  %82 = add nuw nsw i64 %81, %80
  %83 = icmp eq i64 %82, 2
  %84 = zext i1 %83 to i8
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %84, i8* %85, align 1, !tbaa !2450
  %86 = load i64, i64* %RBP
  %87 = sub i64 %86, 4
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 7
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %87 to i32*
  store i32 0, i32* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 420
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 10
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %92 to i32*
  store i32 0, i32* %95
  br label %block_401b2c

block_401bc5:                                     ; preds = %block_401bb3
  %96 = load i64, i64* %PC
  %97 = sub i64 %96, 6101
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 5
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 5
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %97, i64* %106, align 8, !tbaa !2428
  %107 = load i64, i64* %PC
  %108 = call %struct.Memory* @ext_6040d8_random(%struct.State* %0, i64 %107, %struct.Memory* %MEMORY.0)
  %109 = load i64, i64* %RAX
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 6
  store i64 %111, i64* %PC
  %112 = and i64 255, %109
  store i64 %112, i64* %RAX, align 8, !tbaa !2428
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %113, align 1, !tbaa !2432
  %114 = trunc i64 %112 to i32
  %115 = and i32 %114, 255
  %116 = call i32 @llvm.ctpop.i32(i32 %115) #16
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  %119 = xor i8 %118, 1
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %119, i8* %120, align 1, !tbaa !2446
  %121 = icmp eq i64 %112, 0
  %122 = zext i1 %121 to i8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %122, i8* %123, align 1, !tbaa !2448
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %124, align 1, !tbaa !2449
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %125, align 1, !tbaa !2450
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %126, align 1, !tbaa !2447
  %127 = load i8, i8* %AL
  %128 = zext i8 %127 to i64
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 2
  store i64 %130, i64* %PC
  store i8 %127, i8* %CL, align 1, !tbaa !2451
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 429
  %133 = load i8, i8* %CL
  %134 = zext i8 %133 to i64
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 6
  store i64 %136, i64* %PC
  %137 = inttoptr i64 %132 to i8*
  store i8 %133, i8* %137
  %138 = load i64, i64* %PC
  %139 = sub i64 %138, 6120
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 5
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 5
  store i64 %143, i64* %PC
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %145 = load i64, i64* %144, align 8, !tbaa !2428
  %146 = add i64 %145, -8
  %147 = inttoptr i64 %146 to i64*
  store i64 %141, i64* %147
  store i64 %146, i64* %144, align 8, !tbaa !2428
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %139, i64* %148, align 8, !tbaa !2428
  %149 = load i64, i64* %PC
  %150 = call %struct.Memory* @ext_6040d8_random(%struct.State* %0, i64 %149, %struct.Memory* %108)
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 5
  store i64 %152, i64* %PC
  store i64 204, i64* %RDX, align 8, !tbaa !2428
  %153 = load i32, i32* %EDX
  %154 = zext i32 %153 to i64
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 2
  store i64 %156, i64* %PC
  %157 = and i64 %154, 4294967295
  store i64 %157, i64* %RSI, align 8, !tbaa !2428
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 2
  store i64 %159, i64* %PC
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %162 = load i64, i64* %161, align 8, !tbaa !2428
  %163 = ashr i64 %162, 63
  store i64 %163, i64* %160, align 8, !tbaa !2428
  %164 = load i64, i64* %RSI
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 3
  store i64 %166, i64* %PC
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %168 = load i64, i64* %167, align 8, !tbaa !2428
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %170 = load i64, i64* %169, align 8, !tbaa !2428
  %171 = sext i64 %164 to i128
  %172 = and i128 %171, -18446744073709551616
  %173 = zext i64 %170 to i128
  %174 = shl nuw i128 %173, 64
  %175 = zext i64 %168 to i128
  %176 = or i128 %174, %175
  %177 = zext i64 %164 to i128
  %178 = or i128 %172, %177
  %179 = sdiv i128 %176, %178
  %180 = trunc i128 %179 to i64
  %181 = and i128 %179, 18446744073709551615
  %182 = sext i64 %180 to i128
  %183 = and i128 %182, -18446744073709551616
  %184 = or i128 %183, %181
  %185 = icmp eq i128 %179, %184
  br i1 %185, label %190, label %186

; <label>:186:                                    ; preds = %block_401bc5
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %188 = load i64, i64* %187, align 8, !tbaa !2428
  %189 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %188, %struct.Memory* %150) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:190:                                    ; preds = %block_401bc5
  %191 = srem i128 %176, %178
  %192 = trunc i128 %191 to i64
  store i64 %180, i64* %167, align 8, !tbaa !2428
  store i64 %192, i64* %169, align 8, !tbaa !2428
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %193, align 1, !tbaa !2432
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %194, align 1, !tbaa !2446
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %195, align 1, !tbaa !2447
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %196, align 1, !tbaa !2448
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %197, align 1, !tbaa !2449
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %186, %190
  %199 = phi %struct.Memory* [ %189, %186 ], [ %150, %190 ]
  %200 = load i64, i64* %RBP
  %201 = sub i64 %200, 429
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 6
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i8*
  %205 = load i8, i8* %204
  store i8 %205, i8* %CL, align 1, !tbaa !2451
  %206 = load i64, i64* %RBP
  %207 = load i64, i64* %RDX
  %208 = add i64 %206, -416
  %209 = add i64 %208, %207
  %210 = load i8, i8* %CL
  %211 = zext i8 %210 to i64
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 7
  store i64 %213, i64* %PC
  %214 = inttoptr i64 %209 to i8*
  store i8 %210, i8* %214
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 424
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 6
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i32*
  %220 = load i32, i32* %219
  %221 = zext i32 %220 to i64
  store i64 %221, i64* %RAX, align 8, !tbaa !2428
  %222 = load i64, i64* %RAX
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 3
  store i64 %224, i64* %PC
  %225 = trunc i64 %222 to i32
  %226 = add i32 1, %225
  %227 = zext i32 %226 to i64
  store i64 %227, i64* %RAX, align 8, !tbaa !2428
  %228 = icmp ult i32 %226, %225
  %229 = icmp ult i32 %226, 1
  %230 = or i1 %228, %229
  %231 = zext i1 %230 to i8
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %231, i8* %232, align 1, !tbaa !2432
  %233 = and i32 %226, 255
  %234 = call i32 @llvm.ctpop.i32(i32 %233) #16
  %235 = trunc i32 %234 to i8
  %236 = and i8 %235, 1
  %237 = xor i8 %236, 1
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %237, i8* %238, align 1, !tbaa !2446
  %239 = xor i64 1, %222
  %240 = trunc i64 %239 to i32
  %241 = xor i32 %240, %226
  %242 = lshr i32 %241, 4
  %243 = trunc i32 %242 to i8
  %244 = and i8 %243, 1
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %244, i8* %245, align 1, !tbaa !2447
  %246 = icmp eq i32 %226, 0
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %247, i8* %248, align 1, !tbaa !2448
  %249 = lshr i32 %226, 31
  %250 = trunc i32 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %250, i8* %251, align 1, !tbaa !2449
  %252 = lshr i32 %225, 31
  %253 = xor i32 %249, %252
  %254 = add nuw nsw i32 %253, %249
  %255 = icmp eq i32 %254, 2
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %256, i8* %257, align 1, !tbaa !2450
  %258 = load i64, i64* %RBP
  %259 = sub i64 %258, 424
  %260 = load i32, i32* %EAX
  %261 = zext i32 %260 to i64
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 6
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %259 to i32*
  store i32 %260, i32* %264
  %265 = load i64, i64* %PC
  %266 = sub i64 %265, 82
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 5
  store i64 %268, i64* %PC
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %266, i64* %269, align 8, !tbaa !2428
  br label %block_401bb3

block_401b56:                                     ; preds = %block_401b46
  %270 = load i64, i64* %PC
  %271 = sub i64 %270, 5990
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 5
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 5
  store i64 %275, i64* %PC
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %277 = load i64, i64* %276, align 8, !tbaa !2428
  %278 = add i64 %277, -8
  %279 = inttoptr i64 %278 to i64*
  store i64 %273, i64* %279
  store i64 %278, i64* %276, align 8, !tbaa !2428
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %271, i64* %280, align 8, !tbaa !2428
  %281 = load i64, i64* %PC
  %282 = call %struct.Memory* @ext_6040d8_random(%struct.State* %0, i64 %281, %struct.Memory* %MEMORY.2)
  %283 = load i64, i64* %RAX
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 6
  store i64 %285, i64* %PC
  %286 = and i64 255, %283
  store i64 %286, i64* %RAX, align 8, !tbaa !2428
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %287, align 1, !tbaa !2432
  %288 = trunc i64 %286 to i32
  %289 = and i32 %288, 255
  %290 = call i32 @llvm.ctpop.i32(i32 %289) #16
  %291 = trunc i32 %290 to i8
  %292 = and i8 %291, 1
  %293 = xor i8 %292, 1
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %293, i8* %294, align 1, !tbaa !2446
  %295 = icmp eq i64 %286, 0
  %296 = zext i1 %295 to i8
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %296, i8* %297, align 1, !tbaa !2448
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %298, align 1, !tbaa !2449
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %299, align 1, !tbaa !2450
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %300, align 1, !tbaa !2447
  %301 = load i8, i8* %AL
  %302 = zext i8 %301 to i64
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 2
  store i64 %304, i64* %PC
  store i8 %301, i8* %CL, align 1, !tbaa !2451
  %305 = load i64, i64* %RBP
  %306 = sub i64 %305, 424
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 7
  store i64 %308, i64* %PC
  %309 = inttoptr i64 %306 to i32*
  %310 = load i32, i32* %309
  %311 = sext i32 %310 to i64
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = load i64, i64* %RAX
  %314 = add i64 %312, -208
  %315 = add i64 %314, %313
  %316 = load i8, i8* %CL
  %317 = zext i8 %316 to i64
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 7
  store i64 %319, i64* %PC
  %320 = inttoptr i64 %315 to i8*
  store i8 %316, i8* %320
  %321 = load i64, i64* %RBP
  %322 = sub i64 %321, 424
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 6
  store i64 %324, i64* %PC
  %325 = inttoptr i64 %322 to i32*
  %326 = load i32, i32* %325
  %327 = zext i32 %326 to i64
  store i64 %327, i64* %RAX, align 8, !tbaa !2428
  %328 = load i64, i64* %RAX
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 3
  store i64 %330, i64* %PC
  %331 = trunc i64 %328 to i32
  %332 = add i32 1, %331
  %333 = zext i32 %332 to i64
  store i64 %333, i64* %RAX, align 8, !tbaa !2428
  %334 = icmp ult i32 %332, %331
  %335 = icmp ult i32 %332, 1
  %336 = or i1 %334, %335
  %337 = zext i1 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %337, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %332, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = xor i64 1, %328
  %346 = trunc i64 %345 to i32
  %347 = xor i32 %346, %332
  %348 = lshr i32 %347, 4
  %349 = trunc i32 %348 to i8
  %350 = and i8 %349, 1
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %350, i8* %351, align 1, !tbaa !2447
  %352 = icmp eq i32 %332, 0
  %353 = zext i1 %352 to i8
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %353, i8* %354, align 1, !tbaa !2448
  %355 = lshr i32 %332, 31
  %356 = trunc i32 %355 to i8
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %356, i8* %357, align 1, !tbaa !2449
  %358 = lshr i32 %331, 31
  %359 = xor i32 %355, %358
  %360 = add nuw nsw i32 %359, %355
  %361 = icmp eq i32 %360, 2
  %362 = zext i1 %361 to i8
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %362, i8* %363, align 1, !tbaa !2450
  %364 = load i64, i64* %RBP
  %365 = sub i64 %364, 424
  %366 = load i32, i32* %EAX
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 6
  store i64 %369, i64* %PC
  %370 = inttoptr i64 %365 to i32*
  store i32 %366, i32* %370
  %371 = load i64, i64* %PC
  %372 = sub i64 %371, 58
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 5
  store i64 %374, i64* %PC
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %372, i64* %375, align 8, !tbaa !2428
  br label %block_401b46

block_401bb3:                                     ; preds = %block_401b85, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %MEMORY.0 = phi %struct.Memory* [ %732, %block_401b85 ], [ %199, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %376 = load i64, i64* %RBP
  %377 = sub i64 %376, 424
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 6
  store i64 %379, i64* %PC
  %380 = inttoptr i64 %377 to i32*
  %381 = load i32, i32* %380
  %382 = zext i32 %381 to i64
  store i64 %382, i64* %RAX, align 8, !tbaa !2428
  %383 = load i32, i32* %EAX
  %384 = zext i32 %383 to i64
  %385 = load i64, i64* %RBP
  %386 = sub i64 %385, 428
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 6
  store i64 %388, i64* %PC
  %389 = inttoptr i64 %386 to i32*
  %390 = load i32, i32* %389
  %391 = sub i32 %383, %390
  %392 = icmp ult i32 %383, %390
  %393 = zext i1 %392 to i8
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %393, i8* %394, align 1, !tbaa !2432
  %395 = and i32 %391, 255
  %396 = call i32 @llvm.ctpop.i32(i32 %395) #16
  %397 = trunc i32 %396 to i8
  %398 = and i8 %397, 1
  %399 = xor i8 %398, 1
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %399, i8* %400, align 1, !tbaa !2446
  %401 = xor i32 %390, %383
  %402 = xor i32 %401, %391
  %403 = lshr i32 %402, 4
  %404 = trunc i32 %403 to i8
  %405 = and i8 %404, 1
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %405, i8* %406, align 1, !tbaa !2447
  %407 = icmp eq i32 %391, 0
  %408 = zext i1 %407 to i8
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %408, i8* %409, align 1, !tbaa !2448
  %410 = lshr i32 %391, 31
  %411 = trunc i32 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %411, i8* %412, align 1, !tbaa !2449
  %413 = lshr i32 %383, 31
  %414 = lshr i32 %390, 31
  %415 = xor i32 %414, %413
  %416 = xor i32 %410, %413
  %417 = add nuw nsw i32 %416, %415
  %418 = icmp eq i32 %417, 2
  %419 = zext i1 %418 to i8
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %419, i8* %420, align 1, !tbaa !2450
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 75
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 6
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 6
  store i64 %426, i64* %PC
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %428 = load i8, i8* %427, align 1, !tbaa !2449
  %429 = icmp ne i8 %428, 0
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %431 = load i8, i8* %430, align 1, !tbaa !2450
  %432 = icmp ne i8 %431, 0
  %433 = xor i1 %429, %432
  %434 = xor i1 %433, true
  %435 = zext i1 %434 to i8
  store i8 %435, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %437 = select i1 %433, i64 %424, i64 %422
  store i64 %437, i64* %436, align 8, !tbaa !2428
  %438 = load i8, i8* %BRANCH_TAKEN
  %439 = icmp eq i8 %438, 1
  br i1 %439, label %block_401c0a, label %block_401bc5

block_401b3c:                                     ; preds = %block_401b2c
  %440 = load i64, i64* %RBP
  %441 = sub i64 %440, 424
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 10
  store i64 %443, i64* %PC
  %444 = inttoptr i64 %441 to i32*
  store i32 0, i32* %444
  br label %block_401b46

block_401b2c:                                     ; preds = %block_401c0a, %block_401b10
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401b10 ], [ %518, %block_401c0a ]
  %445 = load i64, i64* %RBP
  %446 = sub i64 %445, 420
  %447 = load i64, i64* %PC
  %448 = add i64 %447, 10
  store i64 %448, i64* %PC
  %449 = inttoptr i64 %446 to i32*
  %450 = load i32, i32* %449
  %451 = sub i32 %450, 150000
  %452 = icmp ult i32 %450, 150000
  %453 = zext i1 %452 to i8
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %453, i8* %454, align 1, !tbaa !2432
  %455 = and i32 %451, 255
  %456 = call i32 @llvm.ctpop.i32(i32 %455) #16
  %457 = trunc i32 %456 to i8
  %458 = and i8 %457, 1
  %459 = xor i8 %458, 1
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %459, i8* %460, align 1, !tbaa !2446
  %461 = xor i32 %450, 150000
  %462 = xor i32 %461, %451
  %463 = lshr i32 %462, 4
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %465, i8* %466, align 1, !tbaa !2447
  %467 = icmp eq i32 %451, 0
  %468 = zext i1 %467 to i8
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %468, i8* %469, align 1, !tbaa !2448
  %470 = lshr i32 %451, 31
  %471 = trunc i32 %470 to i8
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %471, i8* %472, align 1, !tbaa !2449
  %473 = lshr i32 %450, 31
  %474 = xor i32 %470, %473
  %475 = add nuw nsw i32 %474, %473
  %476 = icmp eq i32 %475, 2
  %477 = zext i1 %476 to i8
  %478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %477, i8* %478, align 1, !tbaa !2450
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 251
  %481 = load i64, i64* %PC
  %482 = add i64 %481, 6
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 6
  store i64 %484, i64* %PC
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %486 = load i8, i8* %485, align 1, !tbaa !2449
  %487 = icmp ne i8 %486, 0
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %489 = load i8, i8* %488, align 1, !tbaa !2450
  %490 = icmp ne i8 %489, 0
  %491 = xor i1 %487, %490
  %492 = xor i1 %491, true
  %493 = zext i1 %492 to i8
  store i8 %493, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %495 = select i1 %491, i64 %482, i64 %480
  store i64 %495, i64* %494, align 8, !tbaa !2428
  %496 = load i8, i8* %BRANCH_TAKEN
  %497 = icmp eq i8 %496, 1
  br i1 %497, label %block_401c31, label %block_401b3c

block_401c0a:                                     ; preds = %block_401bb3
  %498 = load i64, i64* %RBP
  %499 = sub i64 %498, 416
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 7
  store i64 %501, i64* %PC
  store i64 %499, i64* %RSI, align 8, !tbaa !2428
  %502 = load i64, i64* %RBP
  %503 = sub i64 %502, 208
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 7
  store i64 %505, i64* %PC
  store i64 %503, i64* %RDI, align 8, !tbaa !2428
  %506 = load i64, i64* %PC
  %507 = sub i64 %506, 5928
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 5
  %510 = load i64, i64* %PC
  %511 = add i64 %510, 5
  store i64 %511, i64* %PC
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %513 = load i64, i64* %512, align 8, !tbaa !2428
  %514 = add i64 %513, -8
  %515 = inttoptr i64 %514 to i64*
  store i64 %509, i64* %515
  store i64 %514, i64* %512, align 8, !tbaa !2428
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %507, i64* %516, align 8, !tbaa !2428
  %517 = load i64, i64* %PC
  %518 = call %struct.Memory* @sub_4004f0_rsdec_204_renamed_(%struct.State* %0, i64 %517, %struct.Memory* %MEMORY.0)
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 420
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 6
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  %524 = load i32, i32* %523
  %525 = zext i32 %524 to i64
  store i64 %525, i64* %RAX, align 8, !tbaa !2428
  %526 = load i64, i64* %RAX
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 3
  store i64 %528, i64* %PC
  %529 = trunc i64 %526 to i32
  %530 = add i32 1, %529
  %531 = zext i32 %530 to i64
  store i64 %531, i64* %RAX, align 8, !tbaa !2428
  %532 = icmp ult i32 %530, %529
  %533 = icmp ult i32 %530, 1
  %534 = or i1 %532, %533
  %535 = zext i1 %534 to i8
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %535, i8* %536, align 1, !tbaa !2432
  %537 = and i32 %530, 255
  %538 = call i32 @llvm.ctpop.i32(i32 %537) #16
  %539 = trunc i32 %538 to i8
  %540 = and i8 %539, 1
  %541 = xor i8 %540, 1
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %541, i8* %542, align 1, !tbaa !2446
  %543 = xor i64 1, %526
  %544 = trunc i64 %543 to i32
  %545 = xor i32 %544, %530
  %546 = lshr i32 %545, 4
  %547 = trunc i32 %546 to i8
  %548 = and i8 %547, 1
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %548, i8* %549, align 1, !tbaa !2447
  %550 = icmp eq i32 %530, 0
  %551 = zext i1 %550 to i8
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %551, i8* %552, align 1, !tbaa !2448
  %553 = lshr i32 %530, 31
  %554 = trunc i32 %553 to i8
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %554, i8* %555, align 1, !tbaa !2449
  %556 = lshr i32 %529, 31
  %557 = xor i32 %553, %556
  %558 = add nuw nsw i32 %557, %553
  %559 = icmp eq i32 %558, 2
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %560, i8* %561, align 1, !tbaa !2450
  %562 = load i64, i64* %RBP
  %563 = sub i64 %562, 420
  %564 = load i32, i32* %EAX
  %565 = zext i32 %564 to i64
  %566 = load i64, i64* %PC
  %567 = add i64 %566, 6
  store i64 %567, i64* %PC
  %568 = inttoptr i64 %563 to i32*
  store i32 %564, i32* %568
  %569 = load i64, i64* %PC
  %570 = sub i64 %569, 256
  %571 = load i64, i64* %PC
  %572 = add i64 %571, 5
  store i64 %572, i64* %PC
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %570, i64* %573, align 8, !tbaa !2428
  br label %block_401b2c

block_401c31:                                     ; preds = %block_401b2c
  %574 = load i64, i64* %RAX
  %575 = load i32, i32* %EAX
  %576 = zext i32 %575 to i64
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 2
  store i64 %578, i64* %PC
  %579 = xor i64 %576, %574
  %580 = trunc i64 %579 to i32
  %581 = and i64 %579, 4294967295
  store i64 %581, i64* %RAX, align 8, !tbaa !2428
  %582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %582, align 1, !tbaa !2432
  %583 = and i32 %580, 255
  %584 = call i32 @llvm.ctpop.i32(i32 %583) #16
  %585 = trunc i32 %584 to i8
  %586 = and i8 %585, 1
  %587 = xor i8 %586, 1
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %587, i8* %588, align 1, !tbaa !2446
  %589 = icmp eq i32 %580, 0
  %590 = zext i1 %589 to i8
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %590, i8* %591, align 1, !tbaa !2448
  %592 = lshr i32 %580, 31
  %593 = trunc i32 %592 to i8
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %593, i8* %594, align 1, !tbaa !2449
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %595, align 1, !tbaa !2450
  %596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %596, align 1, !tbaa !2447
  %597 = load i64, i64* %RSP
  %598 = load i64, i64* %PC
  %599 = add i64 %598, 7
  store i64 %599, i64* %PC
  %600 = add i64 432, %597
  store i64 %600, i64* %RSP, align 8, !tbaa !2428
  %601 = icmp ult i64 %600, %597
  %602 = icmp ult i64 %600, 432
  %603 = or i1 %601, %602
  %604 = zext i1 %603 to i8
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %604, i8* %605, align 1, !tbaa !2432
  %606 = trunc i64 %600 to i32
  %607 = and i32 %606, 255
  %608 = call i32 @llvm.ctpop.i32(i32 %607) #16
  %609 = trunc i32 %608 to i8
  %610 = and i8 %609, 1
  %611 = xor i8 %610, 1
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %611, i8* %612, align 1, !tbaa !2446
  %613 = xor i64 432, %597
  %614 = xor i64 %613, %600
  %615 = lshr i64 %614, 4
  %616 = trunc i64 %615 to i8
  %617 = and i8 %616, 1
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %617, i8* %618, align 1, !tbaa !2447
  %619 = icmp eq i64 %600, 0
  %620 = zext i1 %619 to i8
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %620, i8* %621, align 1, !tbaa !2448
  %622 = lshr i64 %600, 63
  %623 = trunc i64 %622 to i8
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %623, i8* %624, align 1, !tbaa !2449
  %625 = lshr i64 %597, 63
  %626 = xor i64 %622, %625
  %627 = add nuw nsw i64 %626, %622
  %628 = icmp eq i64 %627, 2
  %629 = zext i1 %628 to i8
  %630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %629, i8* %630, align 1, !tbaa !2450
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 1
  store i64 %632, i64* %PC
  %633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %634 = load i64, i64* %633, align 8, !tbaa !2428
  %635 = add i64 %634, 8
  %636 = inttoptr i64 %634 to i64*
  %637 = load i64, i64* %636
  store i64 %637, i64* %RBP, align 8, !tbaa !2428
  store i64 %635, i64* %633, align 8, !tbaa !2428
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 1
  store i64 %639, i64* %PC
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %642 = load i64, i64* %641, align 8, !tbaa !2428
  %643 = inttoptr i64 %642 to i64*
  %644 = load i64, i64* %643
  store i64 %644, i64* %640, align 8, !tbaa !2428
  %645 = add i64 %642, 8
  store i64 %645, i64* %641, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_401b46:                                     ; preds = %block_401b3c, %block_401b56
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_401b3c ], [ %282, %block_401b56 ]
  %646 = load i64, i64* %RBP
  %647 = sub i64 %646, 424
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 10
  store i64 %649, i64* %PC
  %650 = inttoptr i64 %647 to i32*
  %651 = load i32, i32* %650
  %652 = sub i32 %651, 188
  %653 = icmp ult i32 %651, 188
  %654 = zext i1 %653 to i8
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %654, i8* %655, align 1, !tbaa !2432
  %656 = and i32 %652, 255
  %657 = call i32 @llvm.ctpop.i32(i32 %656) #16
  %658 = trunc i32 %657 to i8
  %659 = and i8 %658, 1
  %660 = xor i8 %659, 1
  %661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %660, i8* %661, align 1, !tbaa !2446
  %662 = xor i32 %651, 188
  %663 = xor i32 %662, %652
  %664 = lshr i32 %663, 4
  %665 = trunc i32 %664 to i8
  %666 = and i8 %665, 1
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %666, i8* %667, align 1, !tbaa !2447
  %668 = icmp eq i32 %652, 0
  %669 = zext i1 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %669, i8* %670, align 1, !tbaa !2448
  %671 = lshr i32 %652, 31
  %672 = trunc i32 %671 to i8
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %672, i8* %673, align 1, !tbaa !2449
  %674 = lshr i32 %651, 31
  %675 = xor i32 %671, %674
  %676 = add nuw nsw i32 %675, %674
  %677 = icmp eq i32 %676, 2
  %678 = zext i1 %677 to i8
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %678, i8* %679, align 1, !tbaa !2450
  %680 = load i64, i64* %PC
  %681 = add i64 %680, 53
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 6
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 6
  store i64 %685, i64* %PC
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %687 = load i8, i8* %686, align 1, !tbaa !2449
  %688 = icmp ne i8 %687, 0
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %690 = load i8, i8* %689, align 1, !tbaa !2450
  %691 = icmp ne i8 %690, 0
  %692 = xor i1 %688, %691
  %693 = xor i1 %692, true
  %694 = zext i1 %693 to i8
  store i8 %694, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %696 = select i1 %692, i64 %683, i64 %681
  store i64 %696, i64* %695, align 8, !tbaa !2428
  %697 = load i8, i8* %BRANCH_TAKEN
  %698 = icmp eq i8 %697, 1
  br i1 %698, label %block_401b85, label %block_401b56

block_401b85:                                     ; preds = %block_401b46
  %699 = load i64, i64* %RBP
  %700 = sub i64 %699, 208
  %701 = load i64, i64* %PC
  %702 = add i64 %701, 7
  store i64 %702, i64* %PC
  store i64 %700, i64* %RSI, align 8, !tbaa !2428
  %703 = load i64, i64* %RBP
  %704 = sub i64 %703, 416
  %705 = load i64, i64* %PC
  %706 = add i64 %705, 7
  store i64 %706, i64* %PC
  store i64 %704, i64* %RDI, align 8, !tbaa !2428
  %707 = load i64, i64* %PC
  %708 = sub i64 %707, 835
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 5
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 5
  store i64 %712, i64* %PC
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %714 = load i64, i64* %713, align 8, !tbaa !2428
  %715 = add i64 %714, -8
  %716 = inttoptr i64 %715 to i64*
  store i64 %710, i64* %716
  store i64 %715, i64* %713, align 8, !tbaa !2428
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %708, i64* %717, align 8, !tbaa !2428
  %718 = load i64, i64* %PC
  %719 = call %struct.Memory* @sub_401850_rsenc_204_renamed_(%struct.State* %0, i64 %718, %struct.Memory* %MEMORY.2)
  %720 = load i64, i64* %PC
  %721 = sub i64 %720, 6056
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 5
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 5
  store i64 %725, i64* %PC
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %727 = load i64, i64* %726, align 8, !tbaa !2428
  %728 = add i64 %727, -8
  %729 = inttoptr i64 %728 to i64*
  store i64 %723, i64* %729
  store i64 %728, i64* %726, align 8, !tbaa !2428
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %721, i64* %730, align 8, !tbaa !2428
  %731 = load i64, i64* %PC
  %732 = call %struct.Memory* @ext_6040d8_random(%struct.State* %0, i64 %731, %struct.Memory* %719)
  %733 = load i64, i64* %RAX
  %734 = load i64, i64* %PC
  %735 = add i64 %734, 4
  store i64 %735, i64* %PC
  %736 = and i64 127, %733
  store i64 %736, i64* %RAX, align 8, !tbaa !2428
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %737, align 1, !tbaa !2432
  %738 = trunc i64 %736 to i32
  %739 = and i32 %738, 255
  %740 = call i32 @llvm.ctpop.i32(i32 %739) #16
  %741 = trunc i32 %740 to i8
  %742 = and i8 %741, 1
  %743 = xor i8 %742, 1
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %743, i8* %744, align 1, !tbaa !2446
  %745 = icmp eq i64 %736, 0
  %746 = zext i1 %745 to i8
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %746, i8* %747, align 1, !tbaa !2448
  %748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %748, align 1, !tbaa !2449
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %749, align 1, !tbaa !2450
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %750, align 1, !tbaa !2447
  %751 = load i32, i32* %EAX
  %752 = zext i32 %751 to i64
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 2
  store i64 %754, i64* %PC
  %755 = and i64 %752, 4294967295
  store i64 %755, i64* %RCX, align 8, !tbaa !2428
  %756 = load i64, i64* %RBP
  %757 = sub i64 %756, 428
  %758 = load i32, i32* %ECX
  %759 = zext i32 %758 to i64
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 6
  store i64 %761, i64* %PC
  %762 = inttoptr i64 %757 to i32*
  store i32 %758, i32* %762
  %763 = load i64, i64* %RBP
  %764 = sub i64 %763, 424
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 10
  store i64 %766, i64* %PC
  %767 = inttoptr i64 %764 to i32*
  store i32 0, i32* %767
  br label %block_401bb3
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007b0_gen_poly(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4007b0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = load i64, i64* %RBP
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 1
  store i64 %41, i64* %PC
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %43 = load i64, i64* %42, align 8, !tbaa !2428
  %44 = add i64 %43, -8
  %45 = inttoptr i64 %44 to i64*
  store i64 %39, i64* %45
  store i64 %44, i64* %42, align 8, !tbaa !2428
  %46 = load i64, i64* %RSP
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 3
  store i64 %48, i64* %PC
  store i64 %46, i64* %RBP, align 8, !tbaa !2428
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 11
  store i64 %50, i64* %PC
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104) to i32*)
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 11
  store i64 %52, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3108) to i32*)
  %53 = load i64, i64* %RBP
  %54 = sub i64 %53, 4
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 7
  store i64 %56, i64* %PC
  %57 = inttoptr i64 %54 to i32*
  store i32 2, i32* %57
  br label %block_4007d1

block_40087a:                                     ; preds = %block_40085f, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_40085f ], [ %468, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ]
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 5
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 5
  store i64 %61, i64* %PC
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %59, i64* %62, align 8, !tbaa !2428
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 3
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i32*
  %68 = load i32, i32* %67
  %69 = zext i32 %68 to i64
  store i64 %69, i64* %RAX, align 8, !tbaa !2428
  %70 = load i64, i64* %RAX
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 3
  store i64 %72, i64* %PC
  %73 = trunc i64 %70 to i32
  %74 = add i32 -1, %73
  %75 = zext i32 %74 to i64
  store i64 %75, i64* %RAX, align 8, !tbaa !2428
  %76 = icmp ult i32 %74, %73
  %77 = icmp ult i32 %74, -1
  %78 = or i1 %76, %77
  %79 = zext i1 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %79, i8* %80, align 1, !tbaa !2432
  %81 = and i32 %74, 255
  %82 = call i32 @llvm.ctpop.i32(i32 %81) #16
  %83 = trunc i32 %82 to i8
  %84 = and i8 %83, 1
  %85 = xor i8 %84, 1
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %85, i8* %86, align 1, !tbaa !2446
  %87 = xor i64 -1, %70
  %88 = trunc i64 %87 to i32
  %89 = xor i32 %88, %74
  %90 = lshr i32 %89, 4
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %92, i8* %93, align 1, !tbaa !2447
  %94 = icmp eq i32 %74, 0
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %95, i8* %96, align 1, !tbaa !2448
  %97 = lshr i32 %74, 31
  %98 = trunc i32 %97 to i8
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %98, i8* %99, align 1, !tbaa !2449
  %100 = lshr i32 %73, 31
  %101 = xor i32 %97, %100
  %102 = xor i32 %97, 1
  %103 = add nuw nsw i32 %101, %102
  %104 = icmp eq i32 %103, 2
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %105, i8* %106, align 1, !tbaa !2450
  %107 = load i64, i64* %RBP
  %108 = sub i64 %107, 8
  %109 = load i32, i32* %EAX
  %110 = zext i32 %109 to i64
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = inttoptr i64 %108 to i32*
  store i32 %109, i32* %113
  %114 = load i64, i64* %PC
  %115 = sub i64 %114, 149
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 5
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %115, i64* %118, align 8, !tbaa !2428
  br label %block_4007f3

block_4008d5:                                     ; preds = %block_4008ce, %block_4008df
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_4008ce ], [ %MEMORY.1, %block_4008df ]
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 4
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %120 to i32*
  %124 = load i32, i32* %123
  %125 = sub i32 %124, 16
  %126 = icmp ult i32 %124, 16
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2432
  %129 = and i32 %125, 255
  %130 = call i32 @llvm.ctpop.i32(i32 %129) #16
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %133, i8* %134, align 1, !tbaa !2446
  %135 = xor i32 %124, 16
  %136 = xor i32 %135, %125
  %137 = lshr i32 %136, 4
  %138 = trunc i32 %137 to i8
  %139 = and i8 %138, 1
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %139, i8* %140, align 1, !tbaa !2447
  %141 = icmp eq i32 %125, 0
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %142, i8* %143, align 1, !tbaa !2448
  %144 = lshr i32 %125, 31
  %145 = trunc i32 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %145, i8* %146, align 1, !tbaa !2449
  %147 = lshr i32 %124, 31
  %148 = xor i32 %144, %147
  %149 = add nuw nsw i32 %148, %147
  %150 = icmp eq i32 %149, 2
  %151 = zext i1 %150 to i8
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %151, i8* %152, align 1, !tbaa !2450
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 50
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 6
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 6
  store i64 %158, i64* %PC
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %160 = load i8, i8* %159, align 1, !tbaa !2448
  %161 = icmp eq i8 %160, 0
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %163 = load i8, i8* %162, align 1, !tbaa !2449
  %164 = icmp ne i8 %163, 0
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %166 = load i8, i8* %165, align 1, !tbaa !2450
  %167 = icmp ne i8 %166, 0
  %168 = xor i1 %164, %167
  %169 = xor i1 %168, true
  %170 = and i1 %161, %169
  %171 = zext i1 %170 to i8
  store i8 %171, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %173 = select i1 %170, i64 %154, i64 %156
  store i64 %173, i64* %172, align 8, !tbaa !2428
  %174 = load i8, i8* %BRANCH_TAKEN
  %175 = icmp eq i8 %174, 1
  br i1 %175, label %block_40090b, label %block_4008df

block_4007f3:                                     ; preds = %block_4007db, %block_40087a
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.3, %block_4007db ], [ %MEMORY.0, %block_40087a ]
  %176 = load i64, i64* %RBP
  %177 = sub i64 %176, 8
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %177 to i32*
  %181 = load i32, i32* %180
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %182, align 1, !tbaa !2432
  %183 = and i32 %181, 255
  %184 = call i32 @llvm.ctpop.i32(i32 %183) #16
  %185 = trunc i32 %184 to i8
  %186 = and i8 %185, 1
  %187 = xor i8 %186, 1
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %187, i8* %188, align 1, !tbaa !2446
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %189, align 1, !tbaa !2447
  %190 = icmp eq i32 %181, 0
  %191 = zext i1 %190 to i8
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %191, i8* %192, align 1, !tbaa !2448
  %193 = lshr i32 %181, 31
  %194 = trunc i32 %193 to i8
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %194, i8* %195, align 1, !tbaa !2449
  %196 = lshr i32 %181, 31
  %197 = xor i32 %193, %196
  %198 = add nuw nsw i32 %197, %196
  %199 = icmp eq i32 %198, 2
  %200 = zext i1 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %200, i8* %201, align 1, !tbaa !2450
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 150
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 6
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 6
  store i64 %207, i64* %PC
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %209 = load i8, i8* %208, align 1, !tbaa !2448
  %210 = icmp ne i8 %209, 0
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %212 = load i8, i8* %211, align 1, !tbaa !2449
  %213 = icmp ne i8 %212, 0
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %215 = load i8, i8* %214, align 1, !tbaa !2450
  %216 = icmp ne i8 %215, 0
  %217 = xor i1 %213, %216
  %218 = or i1 %210, %217
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %221 = select i1 %218, i64 %203, i64 %205
  store i64 %221, i64* %220, align 8, !tbaa !2428
  %222 = load i8, i8* %BRANCH_TAKEN
  %223 = icmp eq i8 %222, 1
  br i1 %223, label %block_40088d, label %block_4007fd

block_4007d1:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_4007b0
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_4007b0 ], [ %734, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %224 = load i64, i64* %RBP
  %225 = sub i64 %224, 4
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 4
  store i64 %227, i64* %PC
  %228 = inttoptr i64 %225 to i32*
  %229 = load i32, i32* %228
  %230 = sub i32 %229, 16
  %231 = icmp ult i32 %229, 16
  %232 = zext i1 %231 to i8
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %232, i8* %233, align 1, !tbaa !2432
  %234 = and i32 %230, 255
  %235 = call i32 @llvm.ctpop.i32(i32 %234) #16
  %236 = trunc i32 %235 to i8
  %237 = and i8 %236, 1
  %238 = xor i8 %237, 1
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %238, i8* %239, align 1, !tbaa !2446
  %240 = xor i32 %229, 16
  %241 = xor i32 %240, %230
  %242 = lshr i32 %241, 4
  %243 = trunc i32 %242 to i8
  %244 = and i8 %243, 1
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %244, i8* %245, align 1, !tbaa !2447
  %246 = icmp eq i32 %230, 0
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %247, i8* %248, align 1, !tbaa !2448
  %249 = lshr i32 %230, 31
  %250 = trunc i32 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %250, i8* %251, align 1, !tbaa !2449
  %252 = lshr i32 %229, 31
  %253 = xor i32 %249, %252
  %254 = add nuw nsw i32 %253, %252
  %255 = icmp eq i32 %254, 2
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %256, i8* %257, align 1, !tbaa !2450
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 249
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 6
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 6
  store i64 %263, i64* %PC
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %265 = load i8, i8* %264, align 1, !tbaa !2448
  %266 = icmp eq i8 %265, 0
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %268 = load i8, i8* %267, align 1, !tbaa !2449
  %269 = icmp ne i8 %268, 0
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %271 = load i8, i8* %270, align 1, !tbaa !2450
  %272 = icmp ne i8 %271, 0
  %273 = xor i1 %269, %272
  %274 = xor i1 %273, true
  %275 = and i1 %266, %274
  %276 = zext i1 %275 to i8
  store i8 %276, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %278 = select i1 %275, i64 %259, i64 %261
  store i64 %278, i64* %277, align 8, !tbaa !2428
  %279 = load i8, i8* %BRANCH_TAKEN
  %280 = icmp eq i8 %279, 1
  %281 = load i64, i64* %RBP
  %282 = sub i64 %281, 4
  %283 = load i64, i64* %PC
  br i1 %280, label %block_4008ce, label %block_4007db

block_40080f:                                     ; preds = %block_4007fd
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 5
  store i64 %285, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %286 = load i64, i64* %RBP
  %287 = sub i64 %286, 8
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 3
  store i64 %289, i64* %PC
  %290 = inttoptr i64 %287 to i32*
  %291 = load i32, i32* %290
  %292 = zext i32 %291 to i64
  store i64 %292, i64* %RCX, align 8, !tbaa !2428
  %293 = load i64, i64* %RCX
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 3
  store i64 %295, i64* %PC
  %296 = trunc i64 %293 to i32
  %297 = sub i32 %296, 1
  %298 = zext i32 %297 to i64
  store i64 %298, i64* %RCX, align 8, !tbaa !2428
  %299 = icmp ult i32 %296, 1
  %300 = zext i1 %299 to i8
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %300, i8* %301, align 1, !tbaa !2432
  %302 = and i32 %297, 255
  %303 = call i32 @llvm.ctpop.i32(i32 %302) #16
  %304 = trunc i32 %303 to i8
  %305 = and i8 %304, 1
  %306 = xor i8 %305, 1
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %306, i8* %307, align 1, !tbaa !2446
  %308 = xor i64 1, %293
  %309 = trunc i64 %308 to i32
  %310 = xor i32 %309, %297
  %311 = lshr i32 %310, 4
  %312 = trunc i32 %311 to i8
  %313 = and i8 %312, 1
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %313, i8* %314, align 1, !tbaa !2447
  %315 = icmp eq i32 %297, 0
  %316 = zext i1 %315 to i8
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %316, i8* %317, align 1, !tbaa !2448
  %318 = lshr i32 %297, 31
  %319 = trunc i32 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %319, i8* %320, align 1, !tbaa !2449
  %321 = lshr i32 %296, 31
  %322 = xor i32 %318, %321
  %323 = add nuw nsw i32 %322, %321
  %324 = icmp eq i32 %323, 2
  %325 = zext i1 %324 to i8
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %325, i8* %326, align 1, !tbaa !2450
  %327 = load i32, i32* %ECX
  %328 = zext i32 %327 to i64
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 3
  store i64 %330, i64* %PC
  %331 = shl i64 %328, 32
  %332 = ashr exact i64 %331, 32
  store i64 %332, i64* %RDX, align 8, !tbaa !2428
  %333 = load i64, i64* %RDX
  %334 = mul i64 %333, 4
  %335 = add i64 %334, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 7
  store i64 %337, i64* %PC
  %338 = inttoptr i64 %335 to i32*
  %339 = load i32, i32* %338
  %340 = zext i32 %339 to i64
  store i64 %340, i64* %RCX, align 8, !tbaa !2428
  %341 = load i64, i64* %RBP
  %342 = sub i64 %341, 8
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 4
  store i64 %344, i64* %PC
  %345 = inttoptr i64 %342 to i32*
  %346 = load i32, i32* %345
  %347 = sext i32 %346 to i64
  store i64 %347, i64* %RDX, align 8, !tbaa !2428
  %348 = load i64, i64* %RDX
  %349 = mul i64 %348, 4
  %350 = add i64 %349, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 8
  store i64 %352, i64* %PC
  %353 = inttoptr i64 %350 to i32*
  %354 = load i32, i32* %353
  %355 = sext i32 %354 to i64
  store i64 %355, i64* %RDX, align 8, !tbaa !2428
  %356 = load i64, i64* %RDX
  %357 = mul i64 %356, 4
  %358 = add i64 %357, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 7
  store i64 %360, i64* %PC
  %361 = inttoptr i64 %358 to i32*
  %362 = load i32, i32* %361
  %363 = zext i32 %362 to i64
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %364 = load i64, i64* %RSI
  %365 = load i64, i64* %RBP
  %366 = sub i64 %365, 4
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 3
  store i64 %368, i64* %PC
  %369 = trunc i64 %364 to i32
  %370 = inttoptr i64 %366 to i32*
  %371 = load i32, i32* %370
  %372 = add i32 %371, %369
  %373 = zext i32 %372 to i64
  store i64 %373, i64* %RSI, align 8, !tbaa !2428
  %374 = icmp ult i32 %372, %369
  %375 = icmp ult i32 %372, %371
  %376 = or i1 %374, %375
  %377 = zext i1 %376 to i8
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %377, i8* %378, align 1, !tbaa !2432
  %379 = and i32 %372, 255
  %380 = call i32 @llvm.ctpop.i32(i32 %379) #16
  %381 = trunc i32 %380 to i8
  %382 = and i8 %381, 1
  %383 = xor i8 %382, 1
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %383, i8* %384, align 1, !tbaa !2446
  %385 = xor i32 %371, %369
  %386 = xor i32 %385, %372
  %387 = lshr i32 %386, 4
  %388 = trunc i32 %387 to i8
  %389 = and i8 %388, 1
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %389, i8* %390, align 1, !tbaa !2447
  %391 = icmp eq i32 %372, 0
  %392 = zext i1 %391 to i8
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %392, i8* %393, align 1, !tbaa !2448
  %394 = lshr i32 %372, 31
  %395 = trunc i32 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %395, i8* %396, align 1, !tbaa !2449
  %397 = lshr i32 %369, 31
  %398 = lshr i32 %371, 31
  %399 = xor i32 %394, %397
  %400 = xor i32 %394, %398
  %401 = add nuw nsw i32 %399, %400
  %402 = icmp eq i32 %401, 2
  %403 = zext i1 %402 to i8
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %403, i8* %404, align 1, !tbaa !2450
  %405 = load i64, i64* %RBP
  %406 = sub i64 %405, 12
  %407 = load i32, i32* %EAX
  %408 = zext i32 %407 to i64
  %409 = load i64, i64* %PC
  %410 = add i64 %409, 3
  store i64 %410, i64* %PC
  %411 = inttoptr i64 %406 to i32*
  store i32 %407, i32* %411
  %412 = load i32, i32* %ESI
  %413 = zext i32 %412 to i64
  %414 = load i64, i64* %PC
  %415 = add i64 %414, 2
  store i64 %415, i64* %PC
  %416 = and i64 %413, 4294967295
  store i64 %416, i64* %RAX, align 8, !tbaa !2428
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 1
  store i64 %418, i64* %PC
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %421 = bitcast %union.anon* %420 to i32*
  %422 = load i32, i32* %421, align 8, !tbaa !2452
  %423 = sext i32 %422 to i64
  %424 = lshr i64 %423, 32
  store i64 %424, i64* %419, align 8, !tbaa !2428
  %425 = load i64, i64* %RBP
  %426 = sub i64 %425, 12
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 3
  store i64 %428, i64* %PC
  %429 = inttoptr i64 %426 to i32*
  %430 = load i32, i32* %429
  %431 = zext i32 %430 to i64
  store i64 %431, i64* %RSI, align 8, !tbaa !2428
  %432 = load i32, i32* %ESI
  %433 = zext i32 %432 to i64
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 2
  store i64 %435, i64* %PC
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %437 = bitcast %union.anon* %436 to i32*
  %438 = load i32, i32* %437, align 8, !tbaa !2452
  %439 = zext i32 %438 to i64
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %441 = bitcast %union.anon* %440 to i32*
  %442 = load i32, i32* %441, align 8, !tbaa !2452
  %443 = zext i32 %442 to i64
  %444 = shl i64 %433, 32
  %445 = ashr exact i64 %444, 32
  %446 = shl nuw i64 %443, 32
  %447 = or i64 %446, %439
  %448 = sdiv i64 %447, %445
  %449 = shl i64 %448, 32
  %450 = ashr exact i64 %449, 32
  %451 = icmp eq i64 %448, %450
  br i1 %451, label %456, label %452

; <label>:452:                                    ; preds = %block_40080f
  %453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %454 = load i64, i64* %453, align 8, !tbaa !2428
  %455 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %454, %struct.Memory* %MEMORY.2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:456:                                    ; preds = %block_40080f
  %457 = srem i64 %447, %445
  %458 = getelementptr inbounds %union.anon, %union.anon* %436, i64 0, i32 0
  %459 = and i64 %448, 4294967295
  store i64 %459, i64* %458, align 8, !tbaa !2428
  %460 = getelementptr inbounds %union.anon, %union.anon* %440, i64 0, i32 0
  %461 = and i64 %457, 4294967295
  store i64 %461, i64* %460, align 8, !tbaa !2428
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %462, align 1, !tbaa !2432
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %463, align 1, !tbaa !2446
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %464, align 1, !tbaa !2447
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %465, align 1, !tbaa !2448
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %466, align 1, !tbaa !2449
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %467, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %452, %456
  %468 = phi %struct.Memory* [ %455, %452 ], [ %MEMORY.2, %456 ]
  %469 = load i32, i32* %EDX
  %470 = zext i32 %469 to i64
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 3
  store i64 %472, i64* %PC
  %473 = shl i64 %470, 32
  %474 = ashr exact i64 %473, 32
  store i64 %474, i64* %RDI, align 8, !tbaa !2428
  %475 = load i64, i64* %RCX
  %476 = load i64, i64* %RDI
  %477 = mul i64 %476, 4
  %478 = add i64 %477, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 7
  store i64 %480, i64* %PC
  %481 = trunc i64 %475 to i32
  %482 = inttoptr i64 %478 to i32*
  %483 = load i32, i32* %482
  %484 = xor i32 %483, %481
  %485 = zext i32 %484 to i64
  store i64 %485, i64* %RCX, align 8, !tbaa !2428
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %486, align 1, !tbaa !2432
  %487 = and i32 %484, 255
  %488 = call i32 @llvm.ctpop.i32(i32 %487) #16
  %489 = trunc i32 %488 to i8
  %490 = and i8 %489, 1
  %491 = xor i8 %490, 1
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %491, i8* %492, align 1, !tbaa !2446
  %493 = icmp eq i32 %484, 0
  %494 = zext i1 %493 to i8
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %494, i8* %495, align 1, !tbaa !2448
  %496 = lshr i32 %484, 31
  %497 = trunc i32 %496 to i8
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %497, i8* %498, align 1, !tbaa !2449
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %499, align 1, !tbaa !2450
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %500, align 1, !tbaa !2447
  %501 = load i64, i64* %RBP
  %502 = sub i64 %501, 8
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 4
  store i64 %504, i64* %PC
  %505 = inttoptr i64 %502 to i32*
  %506 = load i32, i32* %505
  %507 = sext i32 %506 to i64
  store i64 %507, i64* %RDI, align 8, !tbaa !2428
  %508 = load i64, i64* %RDI
  %509 = mul i64 %508, 4
  %510 = add i64 %509, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %511 = load i32, i32* %ECX
  %512 = zext i32 %511 to i64
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 7
  store i64 %514, i64* %PC
  %515 = inttoptr i64 %510 to i32*
  store i32 %511, i32* %515
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 32
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 5
  store i64 %519, i64* %PC
  %520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %517, i64* %520, align 8, !tbaa !2428
  br label %block_40087a

block_4008df:                                     ; preds = %block_4008d5
  %521 = load i64, i64* %RBP
  %522 = sub i64 %521, 4
  %523 = load i64, i64* %PC
  %524 = add i64 %523, 4
  store i64 %524, i64* %PC
  %525 = inttoptr i64 %522 to i32*
  %526 = load i32, i32* %525
  %527 = sext i32 %526 to i64
  store i64 %527, i64* %RAX, align 8, !tbaa !2428
  %528 = load i64, i64* %RAX
  %529 = mul i64 %528, 4
  %530 = add i64 %529, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %531 = load i64, i64* %PC
  %532 = add i64 %531, 8
  store i64 %532, i64* %PC
  %533 = inttoptr i64 %530 to i32*
  %534 = load i32, i32* %533
  %535 = sext i32 %534 to i64
  store i64 %535, i64* %RAX, align 8, !tbaa !2428
  %536 = load i64, i64* %RAX
  %537 = mul i64 %536, 4
  %538 = add i64 %537, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 7
  store i64 %540, i64* %PC
  %541 = inttoptr i64 %538 to i32*
  %542 = load i32, i32* %541
  %543 = zext i32 %542 to i64
  store i64 %543, i64* %RCX, align 8, !tbaa !2428
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 4
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i32*
  %549 = load i32, i32* %548
  %550 = sext i32 %549 to i64
  store i64 %550, i64* %RAX, align 8, !tbaa !2428
  %551 = load i64, i64* %RAX
  %552 = mul i64 %551, 4
  %553 = add i64 %552, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %554 = load i32, i32* %ECX
  %555 = zext i32 %554 to i64
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 7
  store i64 %557, i64* %PC
  %558 = inttoptr i64 %553 to i32*
  store i32 %554, i32* %558
  %559 = load i64, i64* %RBP
  %560 = sub i64 %559, 4
  %561 = load i64, i64* %PC
  %562 = add i64 %561, 3
  store i64 %562, i64* %PC
  %563 = inttoptr i64 %560 to i32*
  %564 = load i32, i32* %563
  %565 = zext i32 %564 to i64
  store i64 %565, i64* %RAX, align 8, !tbaa !2428
  %566 = load i64, i64* %RAX
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 3
  store i64 %568, i64* %PC
  %569 = trunc i64 %566 to i32
  %570 = add i32 1, %569
  %571 = zext i32 %570 to i64
  store i64 %571, i64* %RAX, align 8, !tbaa !2428
  %572 = icmp ult i32 %570, %569
  %573 = icmp ult i32 %570, 1
  %574 = or i1 %572, %573
  %575 = zext i1 %574 to i8
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %575, i8* %576, align 1, !tbaa !2432
  %577 = and i32 %570, 255
  %578 = call i32 @llvm.ctpop.i32(i32 %577) #16
  %579 = trunc i32 %578 to i8
  %580 = and i8 %579, 1
  %581 = xor i8 %580, 1
  %582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %581, i8* %582, align 1, !tbaa !2446
  %583 = xor i64 1, %566
  %584 = trunc i64 %583 to i32
  %585 = xor i32 %584, %570
  %586 = lshr i32 %585, 4
  %587 = trunc i32 %586 to i8
  %588 = and i8 %587, 1
  %589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %588, i8* %589, align 1, !tbaa !2447
  %590 = icmp eq i32 %570, 0
  %591 = zext i1 %590 to i8
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %591, i8* %592, align 1, !tbaa !2448
  %593 = lshr i32 %570, 31
  %594 = trunc i32 %593 to i8
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %594, i8* %595, align 1, !tbaa !2449
  %596 = lshr i32 %569, 31
  %597 = xor i32 %593, %596
  %598 = add nuw nsw i32 %597, %593
  %599 = icmp eq i32 %598, 2
  %600 = zext i1 %599 to i8
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %600, i8* %601, align 1, !tbaa !2450
  %602 = load i64, i64* %RBP
  %603 = sub i64 %602, 4
  %604 = load i32, i32* %EAX
  %605 = zext i32 %604 to i64
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 3
  store i64 %607, i64* %PC
  %608 = inttoptr i64 %603 to i32*
  store i32 %604, i32* %608
  %609 = load i64, i64* %PC
  %610 = sub i64 %609, 49
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 5
  store i64 %612, i64* %PC
  %613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %610, i64* %613, align 8, !tbaa !2428
  br label %block_4008d5

block_4008ce:                                     ; preds = %block_4007d1
  %614 = add i64 %283, 7
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %282 to i32*
  store i32 0, i32* %615
  br label %block_4008d5

block_40088d:                                     ; preds = %block_4007f3
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 5
  store i64 %617, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %618 = load i64, i64* %PC
  %619 = add i64 %618, 8
  store i64 %619, i64* %PC
  %620 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104) to i32*)
  %621 = sext i32 %620 to i64
  store i64 %621, i64* %RCX, align 8, !tbaa !2428
  %622 = load i64, i64* %RCX
  %623 = mul i64 %622, 4
  %624 = add i64 %623, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 7
  store i64 %626, i64* %PC
  %627 = inttoptr i64 %624 to i32*
  %628 = load i32, i32* %627
  %629 = zext i32 %628 to i64
  store i64 %629, i64* %RDX, align 8, !tbaa !2428
  %630 = load i64, i64* %RDX
  %631 = load i64, i64* %RBP
  %632 = sub i64 %631, 4
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 3
  store i64 %634, i64* %PC
  %635 = trunc i64 %630 to i32
  %636 = inttoptr i64 %632 to i32*
  %637 = load i32, i32* %636
  %638 = add i32 %637, %635
  %639 = zext i32 %638 to i64
  store i64 %639, i64* %RDX, align 8, !tbaa !2428
  %640 = icmp ult i32 %638, %635
  %641 = icmp ult i32 %638, %637
  %642 = or i1 %640, %641
  %643 = zext i1 %642 to i8
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %643, i8* %644, align 1, !tbaa !2432
  %645 = and i32 %638, 255
  %646 = call i32 @llvm.ctpop.i32(i32 %645) #16
  %647 = trunc i32 %646 to i8
  %648 = and i8 %647, 1
  %649 = xor i8 %648, 1
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %649, i8* %650, align 1, !tbaa !2446
  %651 = xor i32 %637, %635
  %652 = xor i32 %651, %638
  %653 = lshr i32 %652, 4
  %654 = trunc i32 %653 to i8
  %655 = and i8 %654, 1
  %656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %655, i8* %656, align 1, !tbaa !2447
  %657 = icmp eq i32 %638, 0
  %658 = zext i1 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %658, i8* %659, align 1, !tbaa !2448
  %660 = lshr i32 %638, 31
  %661 = trunc i32 %660 to i8
  %662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %661, i8* %662, align 1, !tbaa !2449
  %663 = lshr i32 %635, 31
  %664 = lshr i32 %637, 31
  %665 = xor i32 %660, %663
  %666 = xor i32 %660, %664
  %667 = add nuw nsw i32 %665, %666
  %668 = icmp eq i32 %667, 2
  %669 = zext i1 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %669, i8* %670, align 1, !tbaa !2450
  %671 = load i64, i64* %RBP
  %672 = sub i64 %671, 16
  %673 = load i32, i32* %EAX
  %674 = zext i32 %673 to i64
  %675 = load i64, i64* %PC
  %676 = add i64 %675, 3
  store i64 %676, i64* %PC
  %677 = inttoptr i64 %672 to i32*
  store i32 %673, i32* %677
  %678 = load i32, i32* %EDX
  %679 = zext i32 %678 to i64
  %680 = load i64, i64* %PC
  %681 = add i64 %680, 2
  store i64 %681, i64* %PC
  %682 = and i64 %679, 4294967295
  store i64 %682, i64* %RAX, align 8, !tbaa !2428
  %683 = load i64, i64* %PC
  %684 = add i64 %683, 1
  store i64 %684, i64* %PC
  %685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %687 = bitcast %union.anon* %686 to i32*
  %688 = load i32, i32* %687, align 8, !tbaa !2452
  %689 = sext i32 %688 to i64
  %690 = lshr i64 %689, 32
  store i64 %690, i64* %685, align 8, !tbaa !2428
  %691 = load i64, i64* %RBP
  %692 = sub i64 %691, 16
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 3
  store i64 %694, i64* %PC
  %695 = inttoptr i64 %692 to i32*
  %696 = load i32, i32* %695
  %697 = zext i32 %696 to i64
  store i64 %697, i64* %RSI, align 8, !tbaa !2428
  %698 = load i32, i32* %ESI
  %699 = zext i32 %698 to i64
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 2
  store i64 %701, i64* %PC
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %703 = bitcast %union.anon* %702 to i32*
  %704 = load i32, i32* %703, align 8, !tbaa !2452
  %705 = zext i32 %704 to i64
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %707 = bitcast %union.anon* %706 to i32*
  %708 = load i32, i32* %707, align 8, !tbaa !2452
  %709 = zext i32 %708 to i64
  %710 = shl i64 %699, 32
  %711 = ashr exact i64 %710, 32
  %712 = shl nuw i64 %709, 32
  %713 = or i64 %712, %705
  %714 = sdiv i64 %713, %711
  %715 = shl i64 %714, 32
  %716 = ashr exact i64 %715, 32
  %717 = icmp eq i64 %714, %716
  br i1 %717, label %722, label %718

; <label>:718:                                    ; preds = %block_40088d
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %720 = load i64, i64* %719, align 8, !tbaa !2428
  %721 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %720, %struct.Memory* %MEMORY.2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:722:                                    ; preds = %block_40088d
  %723 = srem i64 %713, %711
  %724 = getelementptr inbounds %union.anon, %union.anon* %702, i64 0, i32 0
  %725 = and i64 %714, 4294967295
  store i64 %725, i64* %724, align 8, !tbaa !2428
  %726 = getelementptr inbounds %union.anon, %union.anon* %706, i64 0, i32 0
  %727 = and i64 %723, 4294967295
  store i64 %727, i64* %726, align 8, !tbaa !2428
  %728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %728, align 1, !tbaa !2432
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %729, align 1, !tbaa !2446
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %730, align 1, !tbaa !2447
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %731, align 1, !tbaa !2448
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %732, align 1, !tbaa !2449
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %733, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %718, %722
  %734 = phi %struct.Memory* [ %721, %718 ], [ %MEMORY.2, %722 ]
  %735 = load i32, i32* %EDX
  %736 = zext i32 %735 to i64
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 3
  store i64 %738, i64* %PC
  %739 = shl i64 %736, 32
  %740 = ashr exact i64 %739, 32
  store i64 %740, i64* %RCX, align 8, !tbaa !2428
  %741 = load i64, i64* %RCX
  %742 = mul i64 %741, 4
  %743 = add i64 %742, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %744 = load i64, i64* %PC
  %745 = add i64 %744, 7
  store i64 %745, i64* %PC
  %746 = inttoptr i64 %743 to i32*
  %747 = load i32, i32* %746
  %748 = zext i32 %747 to i64
  store i64 %748, i64* %RDX, align 8, !tbaa !2428
  %749 = load i32, i32* %EDX
  %750 = zext i32 %749 to i64
  %751 = load i64, i64* %PC
  %752 = add i64 %751, 7
  store i64 %752, i64* %PC
  store i32 %749, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104) to i32*)
  %753 = load i64, i64* %RBP
  %754 = sub i64 %753, 4
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 3
  store i64 %756, i64* %PC
  %757 = inttoptr i64 %754 to i32*
  %758 = load i32, i32* %757
  %759 = zext i32 %758 to i64
  store i64 %759, i64* %RAX, align 8, !tbaa !2428
  %760 = load i64, i64* %RAX
  %761 = load i64, i64* %PC
  %762 = add i64 %761, 3
  store i64 %762, i64* %PC
  %763 = trunc i64 %760 to i32
  %764 = add i32 1, %763
  %765 = zext i32 %764 to i64
  store i64 %765, i64* %RAX, align 8, !tbaa !2428
  %766 = icmp ult i32 %764, %763
  %767 = icmp ult i32 %764, 1
  %768 = or i1 %766, %767
  %769 = zext i1 %768 to i8
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %769, i8* %770, align 1, !tbaa !2432
  %771 = and i32 %764, 255
  %772 = call i32 @llvm.ctpop.i32(i32 %771) #16
  %773 = trunc i32 %772 to i8
  %774 = and i8 %773, 1
  %775 = xor i8 %774, 1
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %775, i8* %776, align 1, !tbaa !2446
  %777 = xor i64 1, %760
  %778 = trunc i64 %777 to i32
  %779 = xor i32 %778, %764
  %780 = lshr i32 %779, 4
  %781 = trunc i32 %780 to i8
  %782 = and i8 %781, 1
  %783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %782, i8* %783, align 1, !tbaa !2447
  %784 = icmp eq i32 %764, 0
  %785 = zext i1 %784 to i8
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %785, i8* %786, align 1, !tbaa !2448
  %787 = lshr i32 %764, 31
  %788 = trunc i32 %787 to i8
  %789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %788, i8* %789, align 1, !tbaa !2449
  %790 = lshr i32 %763, 31
  %791 = xor i32 %787, %790
  %792 = add nuw nsw i32 %791, %787
  %793 = icmp eq i32 %792, 2
  %794 = zext i1 %793 to i8
  %795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %794, i8* %795, align 1, !tbaa !2450
  %796 = load i64, i64* %RBP
  %797 = sub i64 %796, 4
  %798 = load i32, i32* %EAX
  %799 = zext i32 %798 to i64
  %800 = load i64, i64* %PC
  %801 = add i64 %800, 3
  store i64 %801, i64* %PC
  %802 = inttoptr i64 %797 to i32*
  store i32 %798, i32* %802
  %803 = load i64, i64* %PC
  %804 = sub i64 %803, 248
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 5
  store i64 %806, i64* %PC
  %807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %804, i64* %807, align 8, !tbaa !2428
  br label %block_4007d1

block_40090b:                                     ; preds = %block_4008d5
  %808 = load i64, i64* %PC
  %809 = add i64 %808, 1
  store i64 %809, i64* %PC
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %811 = load i64, i64* %810, align 8, !tbaa !2428
  %812 = add i64 %811, 8
  %813 = inttoptr i64 %811 to i64*
  %814 = load i64, i64* %813
  store i64 %814, i64* %RBP, align 8, !tbaa !2428
  store i64 %812, i64* %810, align 8, !tbaa !2428
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 1
  store i64 %816, i64* %PC
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %819 = load i64, i64* %818, align 8, !tbaa !2428
  %820 = inttoptr i64 %819 to i64*
  %821 = load i64, i64* %820
  store i64 %821, i64* %817, align 8, !tbaa !2428
  %822 = add i64 %819, 8
  store i64 %822, i64* %818, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_40085f:                                     ; preds = %block_4007fd
  %823 = load i64, i64* %RBP
  %824 = sub i64 %823, 8
  %825 = load i64, i64* %PC
  %826 = add i64 %825, 3
  store i64 %826, i64* %PC
  %827 = inttoptr i64 %824 to i32*
  %828 = load i32, i32* %827
  %829 = zext i32 %828 to i64
  store i64 %829, i64* %RAX, align 8, !tbaa !2428
  %830 = load i64, i64* %RAX
  %831 = load i64, i64* %PC
  %832 = add i64 %831, 3
  store i64 %832, i64* %PC
  %833 = trunc i64 %830 to i32
  %834 = sub i32 %833, 1
  %835 = zext i32 %834 to i64
  store i64 %835, i64* %RAX, align 8, !tbaa !2428
  %836 = icmp ult i32 %833, 1
  %837 = zext i1 %836 to i8
  %838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %837, i8* %838, align 1, !tbaa !2432
  %839 = and i32 %834, 255
  %840 = call i32 @llvm.ctpop.i32(i32 %839) #16
  %841 = trunc i32 %840 to i8
  %842 = and i8 %841, 1
  %843 = xor i8 %842, 1
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %843, i8* %844, align 1, !tbaa !2446
  %845 = xor i64 1, %830
  %846 = trunc i64 %845 to i32
  %847 = xor i32 %846, %834
  %848 = lshr i32 %847, 4
  %849 = trunc i32 %848 to i8
  %850 = and i8 %849, 1
  %851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %850, i8* %851, align 1, !tbaa !2447
  %852 = icmp eq i32 %834, 0
  %853 = zext i1 %852 to i8
  %854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %853, i8* %854, align 1, !tbaa !2448
  %855 = lshr i32 %834, 31
  %856 = trunc i32 %855 to i8
  %857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %856, i8* %857, align 1, !tbaa !2449
  %858 = lshr i32 %833, 31
  %859 = xor i32 %855, %858
  %860 = add nuw nsw i32 %859, %858
  %861 = icmp eq i32 %860, 2
  %862 = zext i1 %861 to i8
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %862, i8* %863, align 1, !tbaa !2450
  %864 = load i32, i32* %EAX
  %865 = zext i32 %864 to i64
  %866 = load i64, i64* %PC
  %867 = add i64 %866, 3
  store i64 %867, i64* %PC
  %868 = shl i64 %865, 32
  %869 = ashr exact i64 %868, 32
  store i64 %869, i64* %RCX, align 8, !tbaa !2428
  %870 = load i64, i64* %RCX
  %871 = mul i64 %870, 4
  %872 = add i64 %871, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 7
  store i64 %874, i64* %PC
  %875 = inttoptr i64 %872 to i32*
  %876 = load i32, i32* %875
  %877 = zext i32 %876 to i64
  store i64 %877, i64* %RAX, align 8, !tbaa !2428
  %878 = load i64, i64* %RBP
  %879 = sub i64 %878, 8
  %880 = load i64, i64* %PC
  %881 = add i64 %880, 4
  store i64 %881, i64* %PC
  %882 = inttoptr i64 %879 to i32*
  %883 = load i32, i32* %882
  %884 = sext i32 %883 to i64
  store i64 %884, i64* %RCX, align 8, !tbaa !2428
  %885 = load i64, i64* %RCX
  %886 = mul i64 %885, 4
  %887 = add i64 %886, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %888 = load i32, i32* %EAX
  %889 = zext i32 %888 to i64
  %890 = load i64, i64* %PC
  %891 = add i64 %890, 7
  store i64 %891, i64* %PC
  %892 = inttoptr i64 %887 to i32*
  store i32 %888, i32* %892
  br label %block_40087a

block_4007fd:                                     ; preds = %block_4007f3
  %893 = load i64, i64* %RBP
  %894 = sub i64 %893, 8
  %895 = load i64, i64* %PC
  %896 = add i64 %895, 4
  store i64 %896, i64* %PC
  %897 = inttoptr i64 %894 to i32*
  %898 = load i32, i32* %897
  %899 = sext i32 %898 to i64
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = load i64, i64* %RAX
  %901 = mul i64 %900, 4
  %902 = add i64 %901, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 8
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %902 to i32*
  %906 = load i32, i32* %905
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %907, align 1, !tbaa !2432
  %908 = and i32 %906, 255
  %909 = call i32 @llvm.ctpop.i32(i32 %908) #16
  %910 = trunc i32 %909 to i8
  %911 = and i8 %910, 1
  %912 = xor i8 %911, 1
  %913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %912, i8* %913, align 1, !tbaa !2446
  %914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %914, align 1, !tbaa !2447
  %915 = icmp eq i32 %906, 0
  %916 = zext i1 %915 to i8
  %917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %916, i8* %917, align 1, !tbaa !2448
  %918 = lshr i32 %906, 31
  %919 = trunc i32 %918 to i8
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %919, i8* %920, align 1, !tbaa !2449
  %921 = lshr i32 %906, 31
  %922 = xor i32 %918, %921
  %923 = add nuw nsw i32 %922, %921
  %924 = icmp eq i32 %923, 2
  %925 = zext i1 %924 to i8
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %925, i8* %926, align 1, !tbaa !2450
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 86
  %929 = load i64, i64* %PC
  %930 = add i64 %929, 6
  %931 = load i64, i64* %PC
  %932 = add i64 %931, 6
  store i64 %932, i64* %PC
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %934 = load i8, i8* %933, align 1, !tbaa !2448
  store i8 %934, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %936 = icmp ne i8 %934, 0
  %937 = select i1 %936, i64 %928, i64 %930
  store i64 %937, i64* %935, align 8, !tbaa !2428
  %938 = load i8, i8* %BRANCH_TAKEN
  %939 = icmp eq i8 %938, 1
  br i1 %939, label %block_40085f, label %block_40080f

block_4007db:                                     ; preds = %block_4007d1
  %940 = add i64 %283, 4
  store i64 %940, i64* %PC
  %941 = inttoptr i64 %282 to i32*
  %942 = load i32, i32* %941
  %943 = sext i32 %942 to i64
  store i64 %943, i64* %RAX, align 8, !tbaa !2428
  %944 = load i64, i64* %RAX
  %945 = mul i64 %944, 4
  %946 = add i64 %945, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %947 = load i64, i64* %PC
  %948 = add i64 %947, 11
  store i64 %948, i64* %PC
  %949 = inttoptr i64 %946 to i32*
  store i32 1, i32* %949
  %950 = load i64, i64* %RBP
  %951 = sub i64 %950, 4
  %952 = load i64, i64* %PC
  %953 = add i64 %952, 3
  store i64 %953, i64* %PC
  %954 = inttoptr i64 %951 to i32*
  %955 = load i32, i32* %954
  %956 = zext i32 %955 to i64
  store i64 %956, i64* %RCX, align 8, !tbaa !2428
  %957 = load i64, i64* %RCX
  %958 = load i64, i64* %PC
  %959 = add i64 %958, 3
  store i64 %959, i64* %PC
  %960 = trunc i64 %957 to i32
  %961 = sub i32 %960, 1
  %962 = zext i32 %961 to i64
  store i64 %962, i64* %RCX, align 8, !tbaa !2428
  %963 = icmp ult i32 %960, 1
  %964 = zext i1 %963 to i8
  %965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %964, i8* %965, align 1, !tbaa !2432
  %966 = and i32 %961, 255
  %967 = call i32 @llvm.ctpop.i32(i32 %966) #16
  %968 = trunc i32 %967 to i8
  %969 = and i8 %968, 1
  %970 = xor i8 %969, 1
  %971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %970, i8* %971, align 1, !tbaa !2446
  %972 = xor i64 1, %957
  %973 = trunc i64 %972 to i32
  %974 = xor i32 %973, %961
  %975 = lshr i32 %974, 4
  %976 = trunc i32 %975 to i8
  %977 = and i8 %976, 1
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %977, i8* %978, align 1, !tbaa !2447
  %979 = icmp eq i32 %961, 0
  %980 = zext i1 %979 to i8
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %980, i8* %981, align 1, !tbaa !2448
  %982 = lshr i32 %961, 31
  %983 = trunc i32 %982 to i8
  %984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %983, i8* %984, align 1, !tbaa !2449
  %985 = lshr i32 %960, 31
  %986 = xor i32 %982, %985
  %987 = add nuw nsw i32 %986, %985
  %988 = icmp eq i32 %987, 2
  %989 = zext i1 %988 to i8
  %990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %989, i8* %990, align 1, !tbaa !2450
  %991 = load i64, i64* %RBP
  %992 = sub i64 %991, 8
  %993 = load i32, i32* %ECX
  %994 = zext i32 %993 to i64
  %995 = load i64, i64* %PC
  %996 = add i64 %995, 3
  store i64 %996, i64* %PC
  %997 = inttoptr i64 %992 to i32*
  store i32 %993, i32* %997
  br label %block_4007f3
}

; Function Attrs: noinline
define %struct.Memory* @sub_401850_rsenc_204(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401850:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 7
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 5
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %ECX = bitcast %union.anon* %19 to i32*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 7
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %EDX = bitcast %union.anon* %22 to i32*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 9
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %ESI = bitcast %union.anon* %25 to i32*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 1
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RAX = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 5
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RCX = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 7
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RDX = bitcast %union.anon* %34 to i64*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 9
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %RSI = bitcast %union.anon* %37 to i64*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %39 = getelementptr inbounds %struct.GPR, %struct.GPR* %38, i32 0, i32 11
  %40 = getelementptr inbounds %struct.Reg, %struct.Reg* %39, i32 0, i32 0
  %RDI = bitcast %union.anon* %40 to i64*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %42 = getelementptr inbounds %struct.GPR, %struct.GPR* %41, i32 0, i32 13
  %43 = getelementptr inbounds %struct.Reg, %struct.Reg* %42, i32 0, i32 0
  %RSP = bitcast %union.anon* %43 to i64*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %45 = getelementptr inbounds %struct.GPR, %struct.GPR* %44, i32 0, i32 15
  %46 = getelementptr inbounds %struct.Reg, %struct.Reg* %45, i32 0, i32 0
  %RBP = bitcast %union.anon* %46 to i64*
  %47 = load i64, i64* %RBP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 1
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %51 = load i64, i64* %50, align 8, !tbaa !2428
  %52 = add i64 %51, -8
  %53 = inttoptr i64 %52 to i64*
  store i64 %47, i64* %53
  store i64 %52, i64* %50, align 8, !tbaa !2428
  %54 = load i64, i64* %RSP
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 3
  store i64 %56, i64* %PC
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  %57 = load i64, i64* %RSP
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC
  %60 = sub i64 %57, 32
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  %61 = icmp ult i64 %57, 32
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %62, i8* %63, align 1, !tbaa !2432
  %64 = trunc i64 %60 to i32
  %65 = and i32 %64, 255
  %66 = call i32 @llvm.ctpop.i32(i32 %65) #16
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 1
  %69 = xor i8 %68, 1
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %69, i8* %70, align 1, !tbaa !2446
  %71 = xor i64 32, %57
  %72 = xor i64 %71, %60
  %73 = lshr i64 %72, 4
  %74 = trunc i64 %73 to i8
  %75 = and i8 %74, 1
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %75, i8* %76, align 1, !tbaa !2447
  %77 = icmp eq i64 %60, 0
  %78 = zext i1 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %78, i8* %79, align 1, !tbaa !2448
  %80 = lshr i64 %60, 63
  %81 = trunc i64 %80 to i8
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %81, i8* %82, align 1, !tbaa !2449
  %83 = lshr i64 %57, 63
  %84 = xor i64 %80, %83
  %85 = add nuw nsw i64 %84, %83
  %86 = icmp eq i64 %85, 2
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %87, i8* %88, align 1, !tbaa !2450
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 8
  %91 = load i64, i64* %RDI
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 16
  %97 = load i64, i64* %RSI
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 8
  store i64 %102, i64* %PC
  %103 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 16) to i32*)
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %104, align 1, !tbaa !2432
  %105 = and i32 %103, 255
  %106 = call i32 @llvm.ctpop.i32(i32 %105) #16
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %109, i8* %110, align 1, !tbaa !2446
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %111, align 1, !tbaa !2447
  %112 = icmp eq i32 %103, 0
  %113 = zext i1 %112 to i8
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %113, i8* %114, align 1, !tbaa !2448
  %115 = lshr i32 %103, 31
  %116 = trunc i32 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %116, i8* %117, align 1, !tbaa !2449
  %118 = lshr i32 %103, 31
  %119 = xor i32 %115, %118
  %120 = add nuw nsw i32 %119, %118
  %121 = icmp eq i32 %120, 2
  %122 = zext i1 %121 to i8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %122, i8* %123, align 1, !tbaa !2450
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 27
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 6
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 6
  store i64 %129, i64* %PC
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %131 = load i8, i8* %130, align 1, !tbaa !2448
  %132 = icmp eq i8 %131, 0
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %135 = select i1 %132, i64 %125, i64 %127
  store i64 %135, i64* %134, align 8, !tbaa !2428
  %136 = load i8, i8* %BRANCH_TAKEN
  %137 = icmp eq i8 %136, 1
  br i1 %137, label %block_401883, label %block_40186e

block_4018fb:                                     ; preds = %block_401908, %block_4018ef
  %MEMORY.0 = phi %struct.Memory* [ %312, %block_4018ef ], [ %MEMORY.0, %block_401908 ]
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 20
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 7
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %139 to i32*
  %143 = load i32, i32* %142
  %144 = sub i32 %143, 188
  %145 = icmp ult i32 %143, 188
  %146 = zext i1 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %146, i8* %147, align 1, !tbaa !2432
  %148 = and i32 %144, 255
  %149 = call i32 @llvm.ctpop.i32(i32 %148) #16
  %150 = trunc i32 %149 to i8
  %151 = and i8 %150, 1
  %152 = xor i8 %151, 1
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %152, i8* %153, align 1, !tbaa !2446
  %154 = xor i32 %143, 188
  %155 = xor i32 %154, %144
  %156 = lshr i32 %155, 4
  %157 = trunc i32 %156 to i8
  %158 = and i8 %157, 1
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %158, i8* %159, align 1, !tbaa !2447
  %160 = icmp eq i32 %144, 0
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %161, i8* %162, align 1, !tbaa !2448
  %163 = lshr i32 %144, 31
  %164 = trunc i32 %163 to i8
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %164, i8* %165, align 1, !tbaa !2449
  %166 = lshr i32 %143, 31
  %167 = xor i32 %163, %166
  %168 = add nuw nsw i32 %167, %166
  %169 = icmp eq i32 %168, 2
  %170 = zext i1 %169 to i8
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %170, i8* %171, align 1, !tbaa !2450
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 42
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 6
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 6
  store i64 %177, i64* %PC
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %179 = load i8, i8* %178, align 1, !tbaa !2449
  %180 = icmp ne i8 %179, 0
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %182 = load i8, i8* %181, align 1, !tbaa !2450
  %183 = icmp ne i8 %182, 0
  %184 = xor i1 %180, %183
  %185 = xor i1 %184, true
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %188 = select i1 %184, i64 %175, i64 %173
  store i64 %188, i64* %187, align 8, !tbaa !2428
  %189 = load i8, i8* %BRANCH_TAKEN
  %190 = icmp eq i8 %189, 1
  %191 = load i64, i64* %RBP
  br i1 %190, label %block_40192c, label %block_401908

block_4018b8:                                     ; preds = %block_4018c5, %block_4018b1
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_4018b1 ], [ %MEMORY.1, %block_4018c5 ]
  %192 = load i64, i64* %RBP
  %193 = sub i64 %192, 20
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 7
  store i64 %195, i64* %PC
  %196 = inttoptr i64 %193 to i32*
  %197 = load i32, i32* %196
  %198 = sub i32 %197, 188
  %199 = icmp ult i32 %197, 188
  %200 = zext i1 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %200, i8* %201, align 1, !tbaa !2432
  %202 = and i32 %198, 255
  %203 = call i32 @llvm.ctpop.i32(i32 %202) #16
  %204 = trunc i32 %203 to i8
  %205 = and i8 %204, 1
  %206 = xor i8 %205, 1
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %206, i8* %207, align 1, !tbaa !2446
  %208 = xor i32 %197, 188
  %209 = xor i32 %208, %198
  %210 = lshr i32 %209, 4
  %211 = trunc i32 %210 to i8
  %212 = and i8 %211, 1
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %212, i8* %213, align 1, !tbaa !2447
  %214 = icmp eq i32 %198, 0
  %215 = zext i1 %214 to i8
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %215, i8* %216, align 1, !tbaa !2448
  %217 = lshr i32 %198, 31
  %218 = trunc i32 %217 to i8
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %218, i8* %219, align 1, !tbaa !2449
  %220 = lshr i32 %197, 31
  %221 = xor i32 %217, %220
  %222 = add nuw nsw i32 %221, %220
  %223 = icmp eq i32 %222, 2
  %224 = zext i1 %223 to i8
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %224, i8* %225, align 1, !tbaa !2450
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 48
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 6
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 6
  store i64 %231, i64* %PC
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %233 = load i8, i8* %232, align 1, !tbaa !2449
  %234 = icmp ne i8 %233, 0
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %236 = load i8, i8* %235, align 1, !tbaa !2450
  %237 = icmp ne i8 %236, 0
  %238 = xor i1 %234, %237
  %239 = xor i1 %238, true
  %240 = zext i1 %239 to i8
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = select i1 %238, i64 %229, i64 %227
  store i64 %242, i64* %241, align 8, !tbaa !2428
  %243 = load i8, i8* %BRANCH_TAKEN
  %244 = icmp eq i8 %243, 1
  br i1 %244, label %block_4018ef, label %block_4018c5

block_4018b1:                                     ; preds = %block_40188a
  %245 = add i64 %591, 7
  store i64 %245, i64* %PC
  %246 = inttoptr i64 %590 to i32*
  store i32 0, i32* %246
  br label %block_4018b8

block_401933:                                     ; preds = %block_40192c, %block_40193d
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_40192c ], [ %MEMORY.2, %block_40193d ]
  %247 = load i64, i64* %RBP
  %248 = sub i64 %247, 20
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 4
  store i64 %250, i64* %PC
  %251 = inttoptr i64 %248 to i32*
  %252 = load i32, i32* %251
  %253 = sub i32 %252, 16
  %254 = icmp ult i32 %252, 16
  %255 = zext i1 %254 to i8
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %255, i8* %256, align 1, !tbaa !2432
  %257 = and i32 %253, 255
  %258 = call i32 @llvm.ctpop.i32(i32 %257) #16
  %259 = trunc i32 %258 to i8
  %260 = and i8 %259, 1
  %261 = xor i8 %260, 1
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %261, i8* %262, align 1, !tbaa !2446
  %263 = xor i32 %252, 16
  %264 = xor i32 %263, %253
  %265 = lshr i32 %264, 4
  %266 = trunc i32 %265 to i8
  %267 = and i8 %266, 1
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %267, i8* %268, align 1, !tbaa !2447
  %269 = icmp eq i32 %253, 0
  %270 = zext i1 %269 to i8
  %271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %270, i8* %271, align 1, !tbaa !2448
  %272 = lshr i32 %253, 31
  %273 = trunc i32 %272 to i8
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %273, i8* %274, align 1, !tbaa !2449
  %275 = lshr i32 %252, 31
  %276 = xor i32 %272, %275
  %277 = add nuw nsw i32 %276, %275
  %278 = icmp eq i32 %277, 2
  %279 = zext i1 %278 to i8
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %279, i8* %280, align 1, !tbaa !2450
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 52
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 6
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 6
  store i64 %286, i64* %PC
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %288 = load i8, i8* %287, align 1, !tbaa !2449
  %289 = icmp ne i8 %288, 0
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %291 = load i8, i8* %290, align 1, !tbaa !2450
  %292 = icmp ne i8 %291, 0
  %293 = xor i1 %289, %292
  %294 = xor i1 %293, true
  %295 = zext i1 %294 to i8
  store i8 %295, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %297 = select i1 %293, i64 %284, i64 %282
  store i64 %297, i64* %296, align 8, !tbaa !2428
  %298 = load i8, i8* %BRANCH_TAKEN
  %299 = icmp eq i8 %298, 1
  br i1 %299, label %block_40196b, label %block_40193d

block_4018ef:                                     ; preds = %block_4018b8
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 145
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 5
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 5
  store i64 %305, i64* %PC
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %307 = load i64, i64* %306, align 8, !tbaa !2428
  %308 = add i64 %307, -8
  %309 = inttoptr i64 %308 to i64*
  store i64 %303, i64* %309
  store i64 %308, i64* %306, align 8, !tbaa !2428
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %301, i64* %310, align 8, !tbaa !2428
  %311 = load i64, i64* %PC
  %312 = call %struct.Memory* @sub_401980_encode_rs_renamed_(%struct.State* %0, i64 %311, %struct.Memory* %MEMORY.1)
  %313 = load i64, i64* %RBP
  %314 = sub i64 %313, 20
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 7
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %314 to i32*
  store i32 0, i32* %317
  br label %block_4018fb

block_40186e:                                     ; preds = %block_401850
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 4622
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 5
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %325 = load i64, i64* %324, align 8, !tbaa !2428
  %326 = add i64 %325, -8
  %327 = inttoptr i64 %326 to i64*
  store i64 %321, i64* %327
  store i64 %326, i64* %324, align 8, !tbaa !2428
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %328, align 8, !tbaa !2428
  %329 = load i64, i64* %PC
  %330 = call %struct.Memory* @sub_400660_generate_gf_renamed_(%struct.State* %0, i64 %329, %struct.Memory* %2)
  %331 = load i64, i64* %PC
  %332 = sub i64 %331, 4291
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 5
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 5
  store i64 %336, i64* %PC
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %338 = load i64, i64* %337, align 8, !tbaa !2428
  %339 = add i64 %338, -8
  %340 = inttoptr i64 %339 to i64*
  store i64 %334, i64* %340
  store i64 %339, i64* %337, align 8, !tbaa !2428
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %332, i64* %341, align 8, !tbaa !2428
  %342 = load i64, i64* %PC
  %343 = call %struct.Memory* @sub_4007b0_gen_poly_renamed_(%struct.State* %0, i64 %342, %struct.Memory* %330)
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 11
  store i64 %345, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 16) to i32*)
  br label %block_401883

block_40193d:                                     ; preds = %block_401933
  %346 = load i64, i64* %RBP
  %347 = sub i64 %346, 20
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 4
  store i64 %349, i64* %PC
  %350 = inttoptr i64 %347 to i32*
  %351 = load i32, i32* %350
  %352 = sext i32 %351 to i64
  store i64 %352, i64* %RAX, align 8, !tbaa !2428
  %353 = load i64, i64* %RAX
  %354 = mul i64 %353, 4
  %355 = add i64 %354, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 7
  store i64 %357, i64* %PC
  %358 = inttoptr i64 %355 to i32*
  %359 = load i32, i32* %358
  %360 = zext i32 %359 to i64
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = load i8, i8* %CL
  %362 = zext i8 %361 to i64
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 2
  store i64 %364, i64* %PC
  store i8 %361, i8* %DL, align 1, !tbaa !2451
  %365 = load i64, i64* %RBP
  %366 = sub i64 %365, 8
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 4
  store i64 %368, i64* %PC
  %369 = inttoptr i64 %366 to i64*
  %370 = load i64, i64* %369
  store i64 %370, i64* %RAX, align 8, !tbaa !2428
  %371 = load i64, i64* %RBP
  %372 = sub i64 %371, 20
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 3
  store i64 %374, i64* %PC
  %375 = inttoptr i64 %372 to i32*
  %376 = load i32, i32* %375
  %377 = zext i32 %376 to i64
  store i64 %377, i64* %RCX, align 8, !tbaa !2428
  %378 = load i64, i64* %RCX
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 6
  store i64 %380, i64* %PC
  %381 = trunc i64 %378 to i32
  %382 = add i32 188, %381
  %383 = zext i32 %382 to i64
  store i64 %383, i64* %RCX, align 8, !tbaa !2428
  %384 = icmp ult i32 %382, %381
  %385 = icmp ult i32 %382, 188
  %386 = or i1 %384, %385
  %387 = zext i1 %386 to i8
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %387, i8* %388, align 1, !tbaa !2432
  %389 = and i32 %382, 255
  %390 = call i32 @llvm.ctpop.i32(i32 %389) #16
  %391 = trunc i32 %390 to i8
  %392 = and i8 %391, 1
  %393 = xor i8 %392, 1
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %393, i8* %394, align 1, !tbaa !2446
  %395 = xor i64 188, %378
  %396 = trunc i64 %395 to i32
  %397 = xor i32 %396, %382
  %398 = lshr i32 %397, 4
  %399 = trunc i32 %398 to i8
  %400 = and i8 %399, 1
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %400, i8* %401, align 1, !tbaa !2447
  %402 = icmp eq i32 %382, 0
  %403 = zext i1 %402 to i8
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %403, i8* %404, align 1, !tbaa !2448
  %405 = lshr i32 %382, 31
  %406 = trunc i32 %405 to i8
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %406, i8* %407, align 1, !tbaa !2449
  %408 = lshr i32 %381, 31
  %409 = xor i32 %405, %408
  %410 = add nuw nsw i32 %409, %405
  %411 = icmp eq i32 %410, 2
  %412 = zext i1 %411 to i8
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %412, i8* %413, align 1, !tbaa !2450
  %414 = load i32, i32* %ECX
  %415 = zext i32 %414 to i64
  %416 = load i64, i64* %PC
  %417 = add i64 %416, 3
  store i64 %417, i64* %PC
  %418 = shl i64 %415, 32
  %419 = ashr exact i64 %418, 32
  store i64 %419, i64* %RSI, align 8, !tbaa !2428
  %420 = load i64, i64* %RAX
  %421 = load i64, i64* %RSI
  %422 = add i64 %421, %420
  %423 = load i8, i8* %DL
  %424 = zext i8 %423 to i64
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 3
  store i64 %426, i64* %PC
  %427 = inttoptr i64 %422 to i8*
  store i8 %423, i8* %427
  %428 = load i64, i64* %RBP
  %429 = sub i64 %428, 20
  %430 = load i64, i64* %PC
  %431 = add i64 %430, 3
  store i64 %431, i64* %PC
  %432 = inttoptr i64 %429 to i32*
  %433 = load i32, i32* %432
  %434 = zext i32 %433 to i64
  store i64 %434, i64* %RAX, align 8, !tbaa !2428
  %435 = load i64, i64* %RAX
  %436 = load i64, i64* %PC
  %437 = add i64 %436, 3
  store i64 %437, i64* %PC
  %438 = trunc i64 %435 to i32
  %439 = add i32 1, %438
  %440 = zext i32 %439 to i64
  store i64 %440, i64* %RAX, align 8, !tbaa !2428
  %441 = icmp ult i32 %439, %438
  %442 = icmp ult i32 %439, 1
  %443 = or i1 %441, %442
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %444, i8* %445, align 1, !tbaa !2432
  %446 = and i32 %439, 255
  %447 = call i32 @llvm.ctpop.i32(i32 %446) #16
  %448 = trunc i32 %447 to i8
  %449 = and i8 %448, 1
  %450 = xor i8 %449, 1
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %450, i8* %451, align 1, !tbaa !2446
  %452 = xor i64 1, %435
  %453 = trunc i64 %452 to i32
  %454 = xor i32 %453, %439
  %455 = lshr i32 %454, 4
  %456 = trunc i32 %455 to i8
  %457 = and i8 %456, 1
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %457, i8* %458, align 1, !tbaa !2447
  %459 = icmp eq i32 %439, 0
  %460 = zext i1 %459 to i8
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %460, i8* %461, align 1, !tbaa !2448
  %462 = lshr i32 %439, 31
  %463 = trunc i32 %462 to i8
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %463, i8* %464, align 1, !tbaa !2449
  %465 = lshr i32 %438, 31
  %466 = xor i32 %462, %465
  %467 = add nuw nsw i32 %466, %462
  %468 = icmp eq i32 %467, 2
  %469 = zext i1 %468 to i8
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %469, i8* %470, align 1, !tbaa !2450
  %471 = load i64, i64* %RBP
  %472 = sub i64 %471, 20
  %473 = load i32, i32* %EAX
  %474 = zext i32 %473 to i64
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 3
  store i64 %476, i64* %PC
  %477 = inttoptr i64 %472 to i32*
  store i32 %473, i32* %477
  %478 = load i64, i64* %PC
  %479 = sub i64 %478, 51
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 5
  store i64 %481, i64* %PC
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %479, i64* %482, align 8, !tbaa !2428
  br label %block_401933

block_40192c:                                     ; preds = %block_4018fb
  %483 = sub i64 %191, 20
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 7
  store i64 %485, i64* %PC
  %486 = inttoptr i64 %483 to i32*
  store i32 0, i32* %486
  br label %block_401933

block_40196b:                                     ; preds = %block_401933
  %487 = load i64, i64* %RSP
  %488 = load i64, i64* %PC
  %489 = add i64 %488, 4
  store i64 %489, i64* %PC
  %490 = add i64 32, %487
  store i64 %490, i64* %RSP, align 8, !tbaa !2428
  %491 = icmp ult i64 %490, %487
  %492 = icmp ult i64 %490, 32
  %493 = or i1 %491, %492
  %494 = zext i1 %493 to i8
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %494, i8* %495, align 1, !tbaa !2432
  %496 = trunc i64 %490 to i32
  %497 = and i32 %496, 255
  %498 = call i32 @llvm.ctpop.i32(i32 %497) #16
  %499 = trunc i32 %498 to i8
  %500 = and i8 %499, 1
  %501 = xor i8 %500, 1
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %501, i8* %502, align 1, !tbaa !2446
  %503 = xor i64 32, %487
  %504 = xor i64 %503, %490
  %505 = lshr i64 %504, 4
  %506 = trunc i64 %505 to i8
  %507 = and i8 %506, 1
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %507, i8* %508, align 1, !tbaa !2447
  %509 = icmp eq i64 %490, 0
  %510 = zext i1 %509 to i8
  %511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %510, i8* %511, align 1, !tbaa !2448
  %512 = lshr i64 %490, 63
  %513 = trunc i64 %512 to i8
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %513, i8* %514, align 1, !tbaa !2449
  %515 = lshr i64 %487, 63
  %516 = xor i64 %512, %515
  %517 = add nuw nsw i64 %516, %512
  %518 = icmp eq i64 %517, 2
  %519 = zext i1 %518 to i8
  %520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %519, i8* %520, align 1, !tbaa !2450
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 1
  store i64 %522, i64* %PC
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %524 = load i64, i64* %523, align 8, !tbaa !2428
  %525 = add i64 %524, 8
  %526 = inttoptr i64 %524 to i64*
  %527 = load i64, i64* %526
  store i64 %527, i64* %RBP, align 8, !tbaa !2428
  store i64 %525, i64* %523, align 8, !tbaa !2428
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 1
  store i64 %529, i64* %PC
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %532 = load i64, i64* %531, align 8, !tbaa !2428
  %533 = inttoptr i64 %532 to i64*
  %534 = load i64, i64* %533
  store i64 %534, i64* %530, align 8, !tbaa !2428
  %535 = add i64 %532, 8
  store i64 %535, i64* %531, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_40188a:                                     ; preds = %block_401883, %block_401894
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.4, %block_401883 ], [ %MEMORY.3, %block_401894 ]
  %536 = load i64, i64* %RBP
  %537 = sub i64 %536, 20
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 4
  store i64 %539, i64* %PC
  %540 = inttoptr i64 %537 to i32*
  %541 = load i32, i32* %540
  %542 = sub i32 %541, 51
  %543 = icmp ult i32 %541, 51
  %544 = zext i1 %543 to i8
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %544, i8* %545, align 1, !tbaa !2432
  %546 = and i32 %542, 255
  %547 = call i32 @llvm.ctpop.i32(i32 %546) #16
  %548 = trunc i32 %547 to i8
  %549 = and i8 %548, 1
  %550 = xor i8 %549, 1
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %550, i8* %551, align 1, !tbaa !2446
  %552 = xor i32 %541, 51
  %553 = xor i32 %552, %542
  %554 = lshr i32 %553, 4
  %555 = trunc i32 %554 to i8
  %556 = and i8 %555, 1
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %556, i8* %557, align 1, !tbaa !2447
  %558 = icmp eq i32 %542, 0
  %559 = zext i1 %558 to i8
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %559, i8* %560, align 1, !tbaa !2448
  %561 = lshr i32 %542, 31
  %562 = trunc i32 %561 to i8
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %562, i8* %563, align 1, !tbaa !2449
  %564 = lshr i32 %541, 31
  %565 = xor i32 %561, %564
  %566 = add nuw nsw i32 %565, %564
  %567 = icmp eq i32 %566, 2
  %568 = zext i1 %567 to i8
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %568, i8* %569, align 1, !tbaa !2450
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 35
  %572 = load i64, i64* %PC
  %573 = add i64 %572, 6
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 6
  store i64 %575, i64* %PC
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %577 = load i8, i8* %576, align 1, !tbaa !2449
  %578 = icmp ne i8 %577, 0
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %580 = load i8, i8* %579, align 1, !tbaa !2450
  %581 = icmp ne i8 %580, 0
  %582 = xor i1 %578, %581
  %583 = xor i1 %582, true
  %584 = zext i1 %583 to i8
  store i8 %584, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %586 = select i1 %582, i64 %573, i64 %571
  store i64 %586, i64* %585, align 8, !tbaa !2428
  %587 = load i8, i8* %BRANCH_TAKEN
  %588 = icmp eq i8 %587, 1
  %589 = load i64, i64* %RBP
  %590 = sub i64 %589, 20
  %591 = load i64, i64* %PC
  br i1 %588, label %block_4018b1, label %block_401894

block_401908:                                     ; preds = %block_4018fb
  %592 = sub i64 %191, 16
  %593 = load i64, i64* %PC
  %594 = add i64 %593, 4
  store i64 %594, i64* %PC
  %595 = inttoptr i64 %592 to i64*
  %596 = load i64, i64* %595
  store i64 %596, i64* %RAX, align 8, !tbaa !2428
  %597 = load i64, i64* %RBP
  %598 = sub i64 %597, 20
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 4
  store i64 %600, i64* %PC
  %601 = inttoptr i64 %598 to i32*
  %602 = load i32, i32* %601
  %603 = sext i32 %602 to i64
  store i64 %603, i64* %RCX, align 8, !tbaa !2428
  %604 = load i64, i64* %RAX
  %605 = load i64, i64* %RCX
  %606 = add i64 %605, %604
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 3
  store i64 %608, i64* %PC
  %609 = inttoptr i64 %606 to i8*
  %610 = load i8, i8* %609
  store i8 %610, i8* %DL, align 1, !tbaa !2451
  %611 = load i64, i64* %RBP
  %612 = sub i64 %611, 8
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 4
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to i64*
  %616 = load i64, i64* %615
  store i64 %616, i64* %RAX, align 8, !tbaa !2428
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 20
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 4
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  %622 = load i32, i32* %621
  %623 = sext i32 %622 to i64
  store i64 %623, i64* %RCX, align 8, !tbaa !2428
  %624 = load i64, i64* %RAX
  %625 = load i64, i64* %RCX
  %626 = add i64 %625, %624
  %627 = load i8, i8* %DL
  %628 = zext i8 %627 to i64
  %629 = load i64, i64* %PC
  %630 = add i64 %629, 3
  store i64 %630, i64* %PC
  %631 = inttoptr i64 %626 to i8*
  store i8 %627, i8* %631
  %632 = load i64, i64* %RBP
  %633 = sub i64 %632, 20
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 3
  store i64 %635, i64* %PC
  %636 = inttoptr i64 %633 to i32*
  %637 = load i32, i32* %636
  %638 = zext i32 %637 to i64
  store i64 %638, i64* %RAX, align 8, !tbaa !2428
  %639 = load i64, i64* %RAX
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 3
  store i64 %641, i64* %PC
  %642 = trunc i64 %639 to i32
  %643 = add i32 1, %642
  %644 = zext i32 %643 to i64
  store i64 %644, i64* %RAX, align 8, !tbaa !2428
  %645 = icmp ult i32 %643, %642
  %646 = icmp ult i32 %643, 1
  %647 = or i1 %645, %646
  %648 = zext i1 %647 to i8
  %649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %648, i8* %649, align 1, !tbaa !2432
  %650 = and i32 %643, 255
  %651 = call i32 @llvm.ctpop.i32(i32 %650) #16
  %652 = trunc i32 %651 to i8
  %653 = and i8 %652, 1
  %654 = xor i8 %653, 1
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %654, i8* %655, align 1, !tbaa !2446
  %656 = xor i64 1, %639
  %657 = trunc i64 %656 to i32
  %658 = xor i32 %657, %643
  %659 = lshr i32 %658, 4
  %660 = trunc i32 %659 to i8
  %661 = and i8 %660, 1
  %662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %661, i8* %662, align 1, !tbaa !2447
  %663 = icmp eq i32 %643, 0
  %664 = zext i1 %663 to i8
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %664, i8* %665, align 1, !tbaa !2448
  %666 = lshr i32 %643, 31
  %667 = trunc i32 %666 to i8
  %668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %667, i8* %668, align 1, !tbaa !2449
  %669 = lshr i32 %642, 31
  %670 = xor i32 %666, %669
  %671 = add nuw nsw i32 %670, %666
  %672 = icmp eq i32 %671, 2
  %673 = zext i1 %672 to i8
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %673, i8* %674, align 1, !tbaa !2450
  %675 = load i64, i64* %RBP
  %676 = sub i64 %675, 20
  %677 = load i32, i32* %EAX
  %678 = zext i32 %677 to i64
  %679 = load i64, i64* %PC
  %680 = add i64 %679, 3
  store i64 %680, i64* %PC
  %681 = inttoptr i64 %676 to i32*
  store i32 %677, i32* %681
  %682 = load i64, i64* %PC
  %683 = sub i64 %682, 44
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 5
  store i64 %685, i64* %PC
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %683, i64* %686, align 8, !tbaa !2428
  br label %block_4018fb

block_4018c5:                                     ; preds = %block_4018b8
  %687 = load i64, i64* %RBP
  %688 = sub i64 %687, 16
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 4
  store i64 %690, i64* %PC
  %691 = inttoptr i64 %688 to i64*
  %692 = load i64, i64* %691
  store i64 %692, i64* %RAX, align 8, !tbaa !2428
  %693 = load i64, i64* %RBP
  %694 = sub i64 %693, 20
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 4
  store i64 %696, i64* %PC
  %697 = inttoptr i64 %694 to i32*
  %698 = load i32, i32* %697
  %699 = sext i32 %698 to i64
  store i64 %699, i64* %RCX, align 8, !tbaa !2428
  %700 = load i64, i64* %RAX
  %701 = load i64, i64* %RCX
  %702 = add i64 %701, %700
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 4
  store i64 %704, i64* %PC
  %705 = inttoptr i64 %702 to i8*
  %706 = load i8, i8* %705
  %707 = zext i8 %706 to i64
  store i64 %707, i64* %RDX, align 8, !tbaa !2428
  %708 = load i64, i64* %RBP
  %709 = sub i64 %708, 20
  %710 = load i64, i64* %PC
  %711 = add i64 %710, 3
  store i64 %711, i64* %PC
  %712 = inttoptr i64 %709 to i32*
  %713 = load i32, i32* %712
  %714 = zext i32 %713 to i64
  store i64 %714, i64* %RSI, align 8, !tbaa !2428
  %715 = load i64, i64* %RSI
  %716 = load i64, i64* %PC
  %717 = add i64 %716, 3
  store i64 %717, i64* %PC
  %718 = trunc i64 %715 to i32
  %719 = add i32 51, %718
  %720 = zext i32 %719 to i64
  store i64 %720, i64* %RSI, align 8, !tbaa !2428
  %721 = icmp ult i32 %719, %718
  %722 = icmp ult i32 %719, 51
  %723 = or i1 %721, %722
  %724 = zext i1 %723 to i8
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %724, i8* %725, align 1, !tbaa !2432
  %726 = and i32 %719, 255
  %727 = call i32 @llvm.ctpop.i32(i32 %726) #16
  %728 = trunc i32 %727 to i8
  %729 = and i8 %728, 1
  %730 = xor i8 %729, 1
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %730, i8* %731, align 1, !tbaa !2446
  %732 = xor i64 51, %715
  %733 = trunc i64 %732 to i32
  %734 = xor i32 %733, %719
  %735 = lshr i32 %734, 4
  %736 = trunc i32 %735 to i8
  %737 = and i8 %736, 1
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %737, i8* %738, align 1, !tbaa !2447
  %739 = icmp eq i32 %719, 0
  %740 = zext i1 %739 to i8
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %740, i8* %741, align 1, !tbaa !2448
  %742 = lshr i32 %719, 31
  %743 = trunc i32 %742 to i8
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %743, i8* %744, align 1, !tbaa !2449
  %745 = lshr i32 %718, 31
  %746 = xor i32 %742, %745
  %747 = add nuw nsw i32 %746, %742
  %748 = icmp eq i32 %747, 2
  %749 = zext i1 %748 to i8
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %749, i8* %750, align 1, !tbaa !2450
  %751 = load i32, i32* %ESI
  %752 = zext i32 %751 to i64
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 3
  store i64 %754, i64* %PC
  %755 = shl i64 %752, 32
  %756 = ashr exact i64 %755, 32
  store i64 %756, i64* %RAX, align 8, !tbaa !2428
  %757 = load i64, i64* %RAX
  %758 = mul i64 %757, 4
  %759 = add i64 %758, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3184)
  %760 = load i32, i32* %EDX
  %761 = zext i32 %760 to i64
  %762 = load i64, i64* %PC
  %763 = add i64 %762, 7
  store i64 %763, i64* %PC
  %764 = inttoptr i64 %759 to i32*
  store i32 %760, i32* %764
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 20
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 3
  store i64 %768, i64* %PC
  %769 = inttoptr i64 %766 to i32*
  %770 = load i32, i32* %769
  %771 = zext i32 %770 to i64
  store i64 %771, i64* %RAX, align 8, !tbaa !2428
  %772 = load i64, i64* %RAX
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 3
  store i64 %774, i64* %PC
  %775 = trunc i64 %772 to i32
  %776 = add i32 1, %775
  %777 = zext i32 %776 to i64
  store i64 %777, i64* %RAX, align 8, !tbaa !2428
  %778 = icmp ult i32 %776, %775
  %779 = icmp ult i32 %776, 1
  %780 = or i1 %778, %779
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %781, i8* %782, align 1, !tbaa !2432
  %783 = and i32 %776, 255
  %784 = call i32 @llvm.ctpop.i32(i32 %783) #16
  %785 = trunc i32 %784 to i8
  %786 = and i8 %785, 1
  %787 = xor i8 %786, 1
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %787, i8* %788, align 1, !tbaa !2446
  %789 = xor i64 1, %772
  %790 = trunc i64 %789 to i32
  %791 = xor i32 %790, %776
  %792 = lshr i32 %791, 4
  %793 = trunc i32 %792 to i8
  %794 = and i8 %793, 1
  %795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %794, i8* %795, align 1, !tbaa !2447
  %796 = icmp eq i32 %776, 0
  %797 = zext i1 %796 to i8
  %798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %797, i8* %798, align 1, !tbaa !2448
  %799 = lshr i32 %776, 31
  %800 = trunc i32 %799 to i8
  %801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %800, i8* %801, align 1, !tbaa !2449
  %802 = lshr i32 %775, 31
  %803 = xor i32 %799, %802
  %804 = add nuw nsw i32 %803, %799
  %805 = icmp eq i32 %804, 2
  %806 = zext i1 %805 to i8
  %807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %806, i8* %807, align 1, !tbaa !2450
  %808 = load i64, i64* %RBP
  %809 = sub i64 %808, 20
  %810 = load i32, i32* %EAX
  %811 = zext i32 %810 to i64
  %812 = load i64, i64* %PC
  %813 = add i64 %812, 3
  store i64 %813, i64* %PC
  %814 = inttoptr i64 %809 to i32*
  store i32 %810, i32* %814
  %815 = load i64, i64* %PC
  %816 = sub i64 %815, 50
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 5
  store i64 %818, i64* %PC
  %819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %816, i64* %819, align 8, !tbaa !2428
  br label %block_4018b8

block_401894:                                     ; preds = %block_40188a
  %820 = add i64 %591, 4
  store i64 %820, i64* %PC
  %821 = inttoptr i64 %590 to i32*
  %822 = load i32, i32* %821
  %823 = sext i32 %822 to i64
  store i64 %823, i64* %RAX, align 8, !tbaa !2428
  %824 = load i64, i64* %RAX
  %825 = mul i64 %824, 4
  %826 = add i64 %825, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3184)
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 11
  store i64 %828, i64* %PC
  %829 = inttoptr i64 %826 to i32*
  store i32 0, i32* %829
  %830 = load i64, i64* %RBP
  %831 = sub i64 %830, 20
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 3
  store i64 %833, i64* %PC
  %834 = inttoptr i64 %831 to i32*
  %835 = load i32, i32* %834
  %836 = zext i32 %835 to i64
  store i64 %836, i64* %RAX, align 8, !tbaa !2428
  %837 = load i64, i64* %RAX
  %838 = load i64, i64* %PC
  %839 = add i64 %838, 3
  store i64 %839, i64* %PC
  %840 = trunc i64 %837 to i32
  %841 = add i32 1, %840
  %842 = zext i32 %841 to i64
  store i64 %842, i64* %RAX, align 8, !tbaa !2428
  %843 = icmp ult i32 %841, %840
  %844 = icmp ult i32 %841, 1
  %845 = or i1 %843, %844
  %846 = zext i1 %845 to i8
  %847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %846, i8* %847, align 1, !tbaa !2432
  %848 = and i32 %841, 255
  %849 = call i32 @llvm.ctpop.i32(i32 %848) #16
  %850 = trunc i32 %849 to i8
  %851 = and i8 %850, 1
  %852 = xor i8 %851, 1
  %853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %852, i8* %853, align 1, !tbaa !2446
  %854 = xor i64 1, %837
  %855 = trunc i64 %854 to i32
  %856 = xor i32 %855, %841
  %857 = lshr i32 %856, 4
  %858 = trunc i32 %857 to i8
  %859 = and i8 %858, 1
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %859, i8* %860, align 1, !tbaa !2447
  %861 = icmp eq i32 %841, 0
  %862 = zext i1 %861 to i8
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %862, i8* %863, align 1, !tbaa !2448
  %864 = lshr i32 %841, 31
  %865 = trunc i32 %864 to i8
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %865, i8* %866, align 1, !tbaa !2449
  %867 = lshr i32 %840, 31
  %868 = xor i32 %864, %867
  %869 = add nuw nsw i32 %868, %864
  %870 = icmp eq i32 %869, 2
  %871 = zext i1 %870 to i8
  %872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %871, i8* %872, align 1, !tbaa !2450
  %873 = load i64, i64* %RBP
  %874 = sub i64 %873, 20
  %875 = load i32, i32* %EAX
  %876 = zext i32 %875 to i64
  %877 = load i64, i64* %PC
  %878 = add i64 %877, 3
  store i64 %878, i64* %PC
  %879 = inttoptr i64 %874 to i32*
  store i32 %875, i32* %879
  %880 = load i64, i64* %PC
  %881 = sub i64 %880, 34
  %882 = load i64, i64* %PC
  %883 = add i64 %882, 5
  store i64 %883, i64* %PC
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %881, i64* %884, align 8, !tbaa !2428
  br label %block_40188a

block_401883:                                     ; preds = %block_40186e, %block_401850
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_401850 ], [ %343, %block_40186e ]
  %885 = load i64, i64* %RBP
  %886 = sub i64 %885, 20
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 7
  store i64 %888, i64* %PC
  %889 = inttoptr i64 %886 to i32*
  store i32 0, i32* %889
  br label %block_40188a
}

; Function Attrs: noinline
define %struct.Memory* @sub_400470_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400470:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 6303832, i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, 6303832
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, 6303832
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 6303832, %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %36, 63
  %63 = xor i64 %59, %62
  %64 = add nuw nsw i64 %63, %62
  %65 = icmp eq i64 %64, 2
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %66, i8* %67, align 1, !tbaa !2450
  %68 = load i64, i64* %RSP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 3
  store i64 %70, i64* %PC
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  %71 = load i64, i64* %RSI
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = ashr i64 %71, 2
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  %77 = ashr i64 %74, 1
  store i64 %77, i64* %RSI, align 8, !tbaa !2428
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %76, i8* %78, align 1, !tbaa !2451
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %80 = trunc i64 %77 to i32
  %81 = and i32 %80, 255
  %82 = call i32 @llvm.ctpop.i32(i32 %81) #16
  %83 = trunc i32 %82 to i8
  %84 = and i8 %83, 1
  %85 = xor i8 %84, 1
  store i8 %85, i8* %79, align 1, !tbaa !2451
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %86, align 1, !tbaa !2451
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %88 = icmp eq i64 %77, 0
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %87, align 1, !tbaa !2451
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %91 = lshr i64 %77, 63
  %92 = trunc i64 %91 to i8
  store i8 %92, i8* %90, align 1, !tbaa !2451
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %93, align 1, !tbaa !2451
  %94 = load i64, i64* %RSI
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 3
  store i64 %96, i64* %PC
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = lshr i64 %97, 62
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = lshr i64 %100, 1
  store i64 %103, i64* %RAX, align 8, !tbaa !2428
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %102, i8* %104, align 1, !tbaa !2451
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %106 = trunc i64 %103 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  store i8 %111, i8* %105, align 1, !tbaa !2451
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %112, align 1, !tbaa !2451
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %114 = icmp eq i64 %103, 0
  %115 = zext i1 %114 to i8
  store i8 %115, i8* %113, align 1, !tbaa !2451
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %116, align 1, !tbaa !2451
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = load i64, i64* %RSI
  %119 = load i64, i64* %RAX
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 3
  store i64 %121, i64* %PC
  %122 = add i64 %119, %118
  store i64 %122, i64* %RSI, align 8, !tbaa !2428
  %123 = icmp ult i64 %122, %118
  %124 = icmp ult i64 %122, %119
  %125 = or i1 %123, %124
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %126, i8* %127, align 1, !tbaa !2432
  %128 = trunc i64 %122 to i32
  %129 = and i32 %128, 255
  %130 = call i32 @llvm.ctpop.i32(i32 %129) #16
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %133, i8* %134, align 1, !tbaa !2446
  %135 = xor i64 %119, %118
  %136 = xor i64 %135, %122
  %137 = lshr i64 %136, 4
  %138 = trunc i64 %137 to i8
  %139 = and i8 %138, 1
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %139, i8* %140, align 1, !tbaa !2447
  %141 = icmp eq i64 %122, 0
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %142, i8* %143, align 1, !tbaa !2448
  %144 = lshr i64 %122, 63
  %145 = trunc i64 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %145, i8* %146, align 1, !tbaa !2449
  %147 = lshr i64 %118, 63
  %148 = lshr i64 %119, 63
  %149 = xor i64 %144, %147
  %150 = xor i64 %144, %148
  %151 = add nuw nsw i64 %149, %150
  %152 = icmp eq i64 %151, 2
  %153 = zext i1 %152 to i8
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %153, i8* %154, align 1, !tbaa !2450
  %155 = load i64, i64* %RSI
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 3
  store i64 %157, i64* %PC
  %158 = trunc i64 %155 to i8
  %159 = and i8 %158, 1
  %160 = ashr i64 %155, 1
  store i64 %160, i64* %RSI, align 8, !tbaa !2428
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %159, i8* %161, align 1, !tbaa !2451
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %163 = trunc i64 %160 to i32
  %164 = and i32 %163, 255
  %165 = call i32 @llvm.ctpop.i32(i32 %164) #16
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = xor i8 %167, 1
  store i8 %168, i8* %162, align 1, !tbaa !2451
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %169, align 1, !tbaa !2451
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %171 = icmp eq i64 %160, 0
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %170, align 1, !tbaa !2451
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %174 = lshr i64 %160, 63
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %173, align 1, !tbaa !2451
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %176, align 1, !tbaa !2451
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 23
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 2
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 2
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %184 = load i8, i8* %183, align 1, !tbaa !2448
  store i8 %184, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %186 = icmp ne i8 %184, 0
  %187 = select i1 %186, i64 %178, i64 %180
  store i64 %187, i64* %185, align 8, !tbaa !2428
  %188 = load i8, i8* %BRANCH_TAKEN
  %189 = icmp eq i8 %188, 1
  br i1 %189, label %block_4004a8, label %block_400493

block_40049d:                                     ; preds = %block_400493
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 1
  store i64 %191, i64* %PC
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %193 = load i64, i64* %192, align 8, !tbaa !2428
  %194 = add i64 %193, 8
  %195 = inttoptr i64 %193 to i64*
  %196 = load i64, i64* %195
  store i64 %196, i64* %RBP, align 8, !tbaa !2428
  store i64 %194, i64* %192, align 8, !tbaa !2428
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 5
  store i64 %198, i64* %PC
  store i64 6303832, i64* %RDI, align 8, !tbaa !2428
  %199 = load i64, i64* %RAX
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 2
  store i64 %201, i64* %PC
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %199, i64* %202, align 8, !tbaa !2428
  %203 = load i64, i64* %PC
  switch i64 %203, label %269 [
    i64 4195498, label %block_4004aa
    i64 4195493, label %block_4004a5
  ]

block_4004aa:                                     ; preds = %block_40049d
  %204 = load i64, i64* %RAX
  %205 = load i64, i64* %RAX
  %206 = add i64 %205, %204
  %207 = load i16, i16* %AX
  %208 = zext i16 %207 to i64
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 6
  store i64 %210, i64* %PC
  %211 = load i64, i64* %PC
  %212 = tail call %struct.Memory* @sub_4004b0___do_global_dtors_aux(%struct.State* %0, i64 %211, %struct.Memory* %2)
  ret %struct.Memory* %212

block_400493:                                     ; preds = %block_400470
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 5
  store i64 %214, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %215 = load i64, i64* %RAX
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 3
  store i64 %218, i64* %PC
  %219 = and i64 %216, %215
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %220, align 1, !tbaa !2432
  %221 = trunc i64 %219 to i32
  %222 = and i32 %221, 255
  %223 = call i32 @llvm.ctpop.i32(i32 %222) #16
  %224 = trunc i32 %223 to i8
  %225 = and i8 %224, 1
  %226 = xor i8 %225, 1
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %226, i8* %227, align 1, !tbaa !2446
  %228 = icmp eq i64 %219, 0
  %229 = zext i1 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %229, i8* %230, align 1, !tbaa !2448
  %231 = lshr i64 %219, 63
  %232 = trunc i64 %231 to i8
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %232, i8* %233, align 1, !tbaa !2449
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %234, align 1, !tbaa !2450
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %235, align 1, !tbaa !2447
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 13
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 2
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 2
  store i64 %241, i64* %PC
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %243 = load i8, i8* %242, align 1, !tbaa !2448
  store i8 %243, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %245 = icmp ne i8 %243, 0
  %246 = select i1 %245, i64 %237, i64 %239
  store i64 %246, i64* %244, align 8, !tbaa !2428
  %247 = load i8, i8* %BRANCH_TAKEN
  %248 = icmp eq i8 %247, 1
  br i1 %248, label %block_4004a8, label %block_40049d

block_4004a8:                                     ; preds = %block_4004a5, %block_400493, %block_400470
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400470 ], [ %2, %block_400493 ], [ %2, %block_4004a5 ]
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 1
  store i64 %250, i64* %PC
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %252 = load i64, i64* %251, align 8, !tbaa !2428
  %253 = add i64 %252, 8
  %254 = inttoptr i64 %252 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RBP, align 8, !tbaa !2428
  store i64 %253, i64* %251, align 8, !tbaa !2428
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 1
  store i64 %257, i64* %PC
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %260 = load i64, i64* %259, align 8, !tbaa !2428
  %261 = inttoptr i64 %260 to i64*
  %262 = load i64, i64* %261
  store i64 %262, i64* %258, align 8, !tbaa !2428
  %263 = add i64 %260, 8
  store i64 %263, i64* %259, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4004a5:                                     ; preds = %block_40049d
  %264 = load i64, i64* %RAX
  %265 = load i32, i32* %EAX
  %266 = zext i32 %265 to i64
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 3
  store i64 %268, i64* %PC
  br label %block_4004a8

; <label>:269:                                    ; preds = %block_40049d
  %270 = load i64, i64* %PC
  %271 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %270, %struct.Memory* %2)
  ret %struct.Memory* %271
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004e0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_400470_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_401980_encode_rs(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401980:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = load i64, i64* %RBP
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 1
  store i64 %41, i64* %PC
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %43 = load i64, i64* %42, align 8, !tbaa !2428
  %44 = add i64 %43, -8
  %45 = inttoptr i64 %44 to i64*
  store i64 %39, i64* %45
  store i64 %44, i64* %42, align 8, !tbaa !2428
  %46 = load i64, i64* %RSP
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 3
  store i64 %48, i64* %PC
  store i64 %46, i64* %RBP, align 8, !tbaa !2428
  %49 = load i64, i64* %RBP
  %50 = sub i64 %49, 4
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 7
  store i64 %52, i64* %PC
  %53 = inttoptr i64 %50 to i32*
  store i32 0, i32* %53
  br label %block_40198b

block_401a72:                                     ; preds = %block_401a57, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.5, %block_401a57 ], [ %293, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ]
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 5
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 5
  store i64 %57, i64* %PC
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %55, i64* %58, align 8, !tbaa !2428
  %59 = load i64, i64* %RBP
  %60 = sub i64 %59, 8
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  %63 = inttoptr i64 %60 to i32*
  %64 = load i32, i32* %63
  %65 = zext i32 %64 to i64
  store i64 %65, i64* %RAX, align 8, !tbaa !2428
  %66 = load i64, i64* %RAX
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  %69 = trunc i64 %66 to i32
  %70 = add i32 -1, %69
  %71 = zext i32 %70 to i64
  store i64 %71, i64* %RAX, align 8, !tbaa !2428
  %72 = icmp ult i32 %70, %69
  %73 = icmp ult i32 %70, -1
  %74 = or i1 %72, %73
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %75, i8* %76, align 1, !tbaa !2432
  %77 = and i32 %70, 255
  %78 = call i32 @llvm.ctpop.i32(i32 %77) #16
  %79 = trunc i32 %78 to i8
  %80 = and i8 %79, 1
  %81 = xor i8 %80, 1
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %81, i8* %82, align 1, !tbaa !2446
  %83 = xor i64 -1, %66
  %84 = trunc i64 %83 to i32
  %85 = xor i32 %84, %70
  %86 = lshr i32 %85, 4
  %87 = trunc i32 %86 to i8
  %88 = and i8 %87, 1
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %88, i8* %89, align 1, !tbaa !2447
  %90 = icmp eq i32 %70, 0
  %91 = zext i1 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %91, i8* %92, align 1, !tbaa !2448
  %93 = lshr i32 %70, 31
  %94 = trunc i32 %93 to i8
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %94, i8* %95, align 1, !tbaa !2449
  %96 = lshr i32 %69, 31
  %97 = xor i32 %93, %96
  %98 = xor i32 %93, 1
  %99 = add nuw nsw i32 %97, %98
  %100 = icmp eq i32 %99, 2
  %101 = zext i1 %100 to i8
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %101, i8* %102, align 1, !tbaa !2450
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 8
  %105 = load i32, i32* %EAX
  %106 = zext i32 %105 to i64
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  %109 = inttoptr i64 %104 to i32*
  store i32 %105, i32* %109
  %110 = load i64, i64* %PC
  %111 = sub i64 %110, 141
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 5
  store i64 %113, i64* %PC
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %111, i64* %114, align 8, !tbaa !2428
  br label %block_4019f3

block_401aef:                                     ; preds = %block_401abc
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 11
  store i64 %116, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144) to i32*)
  br label %block_401afa

block_401a0f:                                     ; preds = %block_4019fd
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 5
  store i64 %118, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 8
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %120 to i32*
  %124 = load i32, i32* %123
  %125 = zext i32 %124 to i64
  store i64 %125, i64* %RCX, align 8, !tbaa !2428
  %126 = load i64, i64* %RCX
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 3
  store i64 %128, i64* %PC
  %129 = trunc i64 %126 to i32
  %130 = sub i32 %129, 1
  %131 = zext i32 %130 to i64
  store i64 %131, i64* %RCX, align 8, !tbaa !2428
  %132 = icmp ult i32 %129, 1
  %133 = zext i1 %132 to i8
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %133, i8* %134, align 1, !tbaa !2432
  %135 = and i32 %130, 255
  %136 = call i32 @llvm.ctpop.i32(i32 %135) #16
  %137 = trunc i32 %136 to i8
  %138 = and i8 %137, 1
  %139 = xor i8 %138, 1
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %139, i8* %140, align 1, !tbaa !2446
  %141 = xor i64 1, %126
  %142 = trunc i64 %141 to i32
  %143 = xor i32 %142, %130
  %144 = lshr i32 %143, 4
  %145 = trunc i32 %144 to i8
  %146 = and i8 %145, 1
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %146, i8* %147, align 1, !tbaa !2447
  %148 = icmp eq i32 %130, 0
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %149, i8* %150, align 1, !tbaa !2448
  %151 = lshr i32 %130, 31
  %152 = trunc i32 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %152, i8* %153, align 1, !tbaa !2449
  %154 = lshr i32 %129, 31
  %155 = xor i32 %151, %154
  %156 = add nuw nsw i32 %155, %154
  %157 = icmp eq i32 %156, 2
  %158 = zext i1 %157 to i8
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %158, i8* %159, align 1, !tbaa !2450
  %160 = load i32, i32* %ECX
  %161 = zext i32 %160 to i64
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 3
  store i64 %163, i64* %PC
  %164 = shl i64 %161, 32
  %165 = ashr exact i64 %164, 32
  store i64 %165, i64* %RDX, align 8, !tbaa !2428
  %166 = load i64, i64* %RDX
  %167 = mul i64 %166, 4
  %168 = add i64 %167, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 7
  store i64 %170, i64* %PC
  %171 = inttoptr i64 %168 to i32*
  %172 = load i32, i32* %171
  %173 = zext i32 %172 to i64
  store i64 %173, i64* %RCX, align 8, !tbaa !2428
  %174 = load i64, i64* %RBP
  %175 = sub i64 %174, 8
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 4
  store i64 %177, i64* %PC
  %178 = inttoptr i64 %175 to i32*
  %179 = load i32, i32* %178
  %180 = sext i32 %179 to i64
  store i64 %180, i64* %RDX, align 8, !tbaa !2428
  %181 = load i64, i64* %RDX
  %182 = mul i64 %181, 4
  %183 = add i64 %182, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 7
  store i64 %185, i64* %PC
  %186 = inttoptr i64 %183 to i32*
  %187 = load i32, i32* %186
  %188 = zext i32 %187 to i64
  store i64 %188, i64* %RSI, align 8, !tbaa !2428
  %189 = load i64, i64* %RSI
  %190 = load i64, i64* %RBP
  %191 = sub i64 %190, 12
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC
  %194 = trunc i64 %189 to i32
  %195 = inttoptr i64 %191 to i32*
  %196 = load i32, i32* %195
  %197 = add i32 %196, %194
  %198 = zext i32 %197 to i64
  store i64 %198, i64* %RSI, align 8, !tbaa !2428
  %199 = icmp ult i32 %197, %194
  %200 = icmp ult i32 %197, %196
  %201 = or i1 %199, %200
  %202 = zext i1 %201 to i8
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %202, i8* %203, align 1, !tbaa !2432
  %204 = and i32 %197, 255
  %205 = call i32 @llvm.ctpop.i32(i32 %204) #16
  %206 = trunc i32 %205 to i8
  %207 = and i8 %206, 1
  %208 = xor i8 %207, 1
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %208, i8* %209, align 1, !tbaa !2446
  %210 = xor i32 %196, %194
  %211 = xor i32 %210, %197
  %212 = lshr i32 %211, 4
  %213 = trunc i32 %212 to i8
  %214 = and i8 %213, 1
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %214, i8* %215, align 1, !tbaa !2447
  %216 = icmp eq i32 %197, 0
  %217 = zext i1 %216 to i8
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %217, i8* %218, align 1, !tbaa !2448
  %219 = lshr i32 %197, 31
  %220 = trunc i32 %219 to i8
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %220, i8* %221, align 1, !tbaa !2449
  %222 = lshr i32 %194, 31
  %223 = lshr i32 %196, 31
  %224 = xor i32 %219, %222
  %225 = xor i32 %219, %223
  %226 = add nuw nsw i32 %224, %225
  %227 = icmp eq i32 %226, 2
  %228 = zext i1 %227 to i8
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %228, i8* %229, align 1, !tbaa !2450
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 16
  %232 = load i32, i32* %EAX
  %233 = zext i32 %232 to i64
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 3
  store i64 %235, i64* %PC
  %236 = inttoptr i64 %231 to i32*
  store i32 %232, i32* %236
  %237 = load i32, i32* %ESI
  %238 = zext i32 %237 to i64
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 2
  store i64 %240, i64* %PC
  %241 = and i64 %238, 4294967295
  store i64 %241, i64* %RAX, align 8, !tbaa !2428
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 1
  store i64 %243, i64* %PC
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %246 = bitcast %union.anon* %245 to i32*
  %247 = load i32, i32* %246, align 8, !tbaa !2452
  %248 = sext i32 %247 to i64
  %249 = lshr i64 %248, 32
  store i64 %249, i64* %244, align 8, !tbaa !2428
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 16
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 3
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to i32*
  %255 = load i32, i32* %254
  %256 = zext i32 %255 to i64
  store i64 %256, i64* %RSI, align 8, !tbaa !2428
  %257 = load i32, i32* %ESI
  %258 = zext i32 %257 to i64
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 2
  store i64 %260, i64* %PC
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %262 = bitcast %union.anon* %261 to i32*
  %263 = load i32, i32* %262, align 8, !tbaa !2452
  %264 = zext i32 %263 to i64
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %266 = bitcast %union.anon* %265 to i32*
  %267 = load i32, i32* %266, align 8, !tbaa !2452
  %268 = zext i32 %267 to i64
  %269 = shl i64 %258, 32
  %270 = ashr exact i64 %269, 32
  %271 = shl nuw i64 %268, 32
  %272 = or i64 %271, %264
  %273 = sdiv i64 %272, %270
  %274 = shl i64 %273, 32
  %275 = ashr exact i64 %274, 32
  %276 = icmp eq i64 %273, %275
  br i1 %276, label %281, label %277

; <label>:277:                                    ; preds = %block_401a0f
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %279 = load i64, i64* %278, align 8, !tbaa !2428
  %280 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %279, %struct.Memory* %MEMORY.5) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:281:                                    ; preds = %block_401a0f
  %282 = srem i64 %272, %270
  %283 = getelementptr inbounds %union.anon, %union.anon* %261, i64 0, i32 0
  %284 = and i64 %273, 4294967295
  store i64 %284, i64* %283, align 8, !tbaa !2428
  %285 = getelementptr inbounds %union.anon, %union.anon* %265, i64 0, i32 0
  %286 = and i64 %282, 4294967295
  store i64 %286, i64* %285, align 8, !tbaa !2428
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %287, align 1, !tbaa !2432
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %288, align 1, !tbaa !2446
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %289, align 1, !tbaa !2447
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %290, align 1, !tbaa !2448
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %291, align 1, !tbaa !2449
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %292, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %277, %281
  %293 = phi %struct.Memory* [ %280, %277 ], [ %MEMORY.5, %281 ]
  %294 = load i32, i32* %EDX
  %295 = zext i32 %294 to i64
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 3
  store i64 %297, i64* %PC
  %298 = shl i64 %295, 32
  %299 = ashr exact i64 %298, 32
  store i64 %299, i64* %RDI, align 8, !tbaa !2428
  %300 = load i64, i64* %RCX
  %301 = load i64, i64* %RDI
  %302 = mul i64 %301, 4
  %303 = add i64 %302, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 7
  store i64 %305, i64* %PC
  %306 = trunc i64 %300 to i32
  %307 = inttoptr i64 %303 to i32*
  %308 = load i32, i32* %307
  %309 = xor i32 %308, %306
  %310 = zext i32 %309 to i64
  store i64 %310, i64* %RCX, align 8, !tbaa !2428
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %311, align 1, !tbaa !2432
  %312 = and i32 %309, 255
  %313 = call i32 @llvm.ctpop.i32(i32 %312) #16
  %314 = trunc i32 %313 to i8
  %315 = and i8 %314, 1
  %316 = xor i8 %315, 1
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %316, i8* %317, align 1, !tbaa !2446
  %318 = icmp eq i32 %309, 0
  %319 = zext i1 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %319, i8* %320, align 1, !tbaa !2448
  %321 = lshr i32 %309, 31
  %322 = trunc i32 %321 to i8
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %322, i8* %323, align 1, !tbaa !2449
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %324, align 1, !tbaa !2450
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %325, align 1, !tbaa !2447
  %326 = load i64, i64* %RBP
  %327 = sub i64 %326, 8
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 4
  store i64 %329, i64* %PC
  %330 = inttoptr i64 %327 to i32*
  %331 = load i32, i32* %330
  %332 = sext i32 %331 to i64
  store i64 %332, i64* %RDI, align 8, !tbaa !2428
  %333 = load i64, i64* %RDI
  %334 = mul i64 %333, 4
  %335 = add i64 %334, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %336 = load i32, i32* %ECX
  %337 = zext i32 %336 to i64
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 7
  store i64 %339, i64* %PC
  %340 = inttoptr i64 %335 to i32*
  store i32 %336, i32* %340
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 32
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 5
  store i64 %344, i64* %PC
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %342, i64* %345, align 8, !tbaa !2428
  br label %block_401a72

block_401abc:                                     ; preds = %block_4019c3, %block_401ac6
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_4019c3 ], [ %MEMORY.1, %block_401ac6 ]
  %346 = load i64, i64* %RBP
  %347 = sub i64 %346, 8
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 4
  store i64 %349, i64* %PC
  %350 = inttoptr i64 %347 to i32*
  %351 = load i32, i32* %350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %352, align 1, !tbaa !2432
  %353 = and i32 %351, 255
  %354 = call i32 @llvm.ctpop.i32(i32 %353) #16
  %355 = trunc i32 %354 to i8
  %356 = and i8 %355, 1
  %357 = xor i8 %356, 1
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %357, i8* %358, align 1, !tbaa !2446
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %359, align 1, !tbaa !2447
  %360 = icmp eq i32 %351, 0
  %361 = zext i1 %360 to i8
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %361, i8* %362, align 1, !tbaa !2448
  %363 = lshr i32 %351, 31
  %364 = trunc i32 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %364, i8* %365, align 1, !tbaa !2449
  %366 = lshr i32 %351, 31
  %367 = xor i32 %363, %366
  %368 = add nuw nsw i32 %367, %366
  %369 = icmp eq i32 %368, 2
  %370 = zext i1 %369 to i8
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %370, i8* %371, align 1, !tbaa !2450
  %372 = load i64, i64* %PC
  %373 = add i64 %372, 47
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 6
  %376 = load i64, i64* %PC
  %377 = add i64 %376, 6
  store i64 %377, i64* %PC
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %379 = load i8, i8* %378, align 1, !tbaa !2448
  %380 = icmp ne i8 %379, 0
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %382 = load i8, i8* %381, align 1, !tbaa !2449
  %383 = icmp ne i8 %382, 0
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %385 = load i8, i8* %384, align 1, !tbaa !2450
  %386 = icmp ne i8 %385, 0
  %387 = xor i1 %383, %386
  %388 = or i1 %380, %387
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %391 = select i1 %388, i64 %373, i64 %375
  store i64 %391, i64* %390, align 8, !tbaa !2428
  %392 = load i8, i8* %BRANCH_TAKEN
  %393 = icmp eq i8 %392, 1
  br i1 %393, label %block_401aef, label %block_401ac6

block_4019fd:                                     ; preds = %block_4019f3
  %394 = load i64, i64* %RBP
  %395 = sub i64 %394, 8
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 4
  store i64 %397, i64* %PC
  %398 = inttoptr i64 %395 to i32*
  %399 = load i32, i32* %398
  %400 = sext i32 %399 to i64
  store i64 %400, i64* %RAX, align 8, !tbaa !2428
  %401 = load i64, i64* %RAX
  %402 = mul i64 %401, 4
  %403 = add i64 %402, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 8
  store i64 %405, i64* %PC
  %406 = inttoptr i64 %403 to i32*
  %407 = load i32, i32* %406
  %408 = sub i32 %407, -1
  %409 = icmp ult i32 %407, -1
  %410 = zext i1 %409 to i8
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %410, i8* %411, align 1, !tbaa !2432
  %412 = and i32 %408, 255
  %413 = call i32 @llvm.ctpop.i32(i32 %412) #16
  %414 = trunc i32 %413 to i8
  %415 = and i8 %414, 1
  %416 = xor i8 %415, 1
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %416, i8* %417, align 1, !tbaa !2446
  %418 = xor i32 %407, -1
  %419 = xor i32 %418, %408
  %420 = lshr i32 %419, 4
  %421 = trunc i32 %420 to i8
  %422 = and i8 %421, 1
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %422, i8* %423, align 1, !tbaa !2447
  %424 = icmp eq i32 %408, 0
  %425 = zext i1 %424 to i8
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %425, i8* %426, align 1, !tbaa !2448
  %427 = lshr i32 %408, 31
  %428 = trunc i32 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %428, i8* %429, align 1, !tbaa !2449
  %430 = lshr i32 %407, 31
  %431 = xor i32 %430, 1
  %432 = xor i32 %427, %430
  %433 = add nuw nsw i32 %432, %431
  %434 = icmp eq i32 %433, 2
  %435 = zext i1 %434 to i8
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %435, i8* %436, align 1, !tbaa !2450
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 78
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 6
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 6
  store i64 %442, i64* %PC
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %444 = load i8, i8* %443, align 1, !tbaa !2448
  store i8 %444, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %446 = icmp ne i8 %444, 0
  %447 = select i1 %446, i64 %438, i64 %440
  store i64 %447, i64* %445, align 8, !tbaa !2428
  %448 = load i8, i8* %BRANCH_TAKEN
  %449 = icmp eq i8 %448, 1
  br i1 %449, label %block_401a57, label %block_401a0f

block_401afa:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_401aef
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_401aef ], [ %1110, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 5
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 5
  store i64 %453, i64* %PC
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %451, i64* %454, align 8, !tbaa !2428
  %455 = load i64, i64* %RBP
  %456 = sub i64 %455, 4
  %457 = load i64, i64* %PC
  %458 = add i64 %457, 3
  store i64 %458, i64* %PC
  %459 = inttoptr i64 %456 to i32*
  %460 = load i32, i32* %459
  %461 = zext i32 %460 to i64
  store i64 %461, i64* %RAX, align 8, !tbaa !2428
  %462 = load i64, i64* %RAX
  %463 = load i64, i64* %PC
  %464 = add i64 %463, 3
  store i64 %464, i64* %PC
  %465 = trunc i64 %462 to i32
  %466 = add i32 -1, %465
  %467 = zext i32 %466 to i64
  store i64 %467, i64* %RAX, align 8, !tbaa !2428
  %468 = icmp ult i32 %466, %465
  %469 = icmp ult i32 %466, -1
  %470 = or i1 %468, %469
  %471 = zext i1 %470 to i8
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %471, i8* %472, align 1, !tbaa !2432
  %473 = and i32 %466, 255
  %474 = call i32 @llvm.ctpop.i32(i32 %473) #16
  %475 = trunc i32 %474 to i8
  %476 = and i8 %475, 1
  %477 = xor i8 %476, 1
  %478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %477, i8* %478, align 1, !tbaa !2446
  %479 = xor i64 -1, %462
  %480 = trunc i64 %479 to i32
  %481 = xor i32 %480, %466
  %482 = lshr i32 %481, 4
  %483 = trunc i32 %482 to i8
  %484 = and i8 %483, 1
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %484, i8* %485, align 1, !tbaa !2447
  %486 = icmp eq i32 %466, 0
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %487, i8* %488, align 1, !tbaa !2448
  %489 = lshr i32 %466, 31
  %490 = trunc i32 %489 to i8
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %490, i8* %491, align 1, !tbaa !2449
  %492 = lshr i32 %465, 31
  %493 = xor i32 %489, %492
  %494 = xor i32 %489, 1
  %495 = add nuw nsw i32 %493, %494
  %496 = icmp eq i32 %495, 2
  %497 = zext i1 %496 to i8
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %497, i8* %498, align 1, !tbaa !2450
  %499 = load i64, i64* %RBP
  %500 = sub i64 %499, 4
  %501 = load i32, i32* %EAX
  %502 = zext i32 %501 to i64
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 3
  store i64 %504, i64* %PC
  %505 = inttoptr i64 %500 to i32*
  store i32 %501, i32* %505
  %506 = load i64, i64* %PC
  %507 = sub i64 %506, 335
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 5
  store i64 %509, i64* %PC
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %507, i64* %510, align 8, !tbaa !2428
  br label %block_4019b9

block_401ac6:                                     ; preds = %block_401abc
  %511 = load i64, i64* %RBP
  %512 = sub i64 %511, 8
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 3
  store i64 %514, i64* %PC
  %515 = inttoptr i64 %512 to i32*
  %516 = load i32, i32* %515
  %517 = zext i32 %516 to i64
  store i64 %517, i64* %RAX, align 8, !tbaa !2428
  %518 = load i64, i64* %RAX
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 3
  store i64 %520, i64* %PC
  %521 = trunc i64 %518 to i32
  %522 = sub i32 %521, 1
  %523 = zext i32 %522 to i64
  store i64 %523, i64* %RAX, align 8, !tbaa !2428
  %524 = icmp ult i32 %521, 1
  %525 = zext i1 %524 to i8
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %525, i8* %526, align 1, !tbaa !2432
  %527 = and i32 %522, 255
  %528 = call i32 @llvm.ctpop.i32(i32 %527) #16
  %529 = trunc i32 %528 to i8
  %530 = and i8 %529, 1
  %531 = xor i8 %530, 1
  %532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %531, i8* %532, align 1, !tbaa !2446
  %533 = xor i64 1, %518
  %534 = trunc i64 %533 to i32
  %535 = xor i32 %534, %522
  %536 = lshr i32 %535, 4
  %537 = trunc i32 %536 to i8
  %538 = and i8 %537, 1
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %538, i8* %539, align 1, !tbaa !2447
  %540 = icmp eq i32 %522, 0
  %541 = zext i1 %540 to i8
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %541, i8* %542, align 1, !tbaa !2448
  %543 = lshr i32 %522, 31
  %544 = trunc i32 %543 to i8
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %544, i8* %545, align 1, !tbaa !2449
  %546 = lshr i32 %521, 31
  %547 = xor i32 %543, %546
  %548 = add nuw nsw i32 %547, %546
  %549 = icmp eq i32 %548, 2
  %550 = zext i1 %549 to i8
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %550, i8* %551, align 1, !tbaa !2450
  %552 = load i32, i32* %EAX
  %553 = zext i32 %552 to i64
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 3
  store i64 %555, i64* %PC
  %556 = shl i64 %553, 32
  %557 = ashr exact i64 %556, 32
  store i64 %557, i64* %RCX, align 8, !tbaa !2428
  %558 = load i64, i64* %RCX
  %559 = mul i64 %558, 4
  %560 = add i64 %559, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %561 = load i64, i64* %PC
  %562 = add i64 %561, 7
  store i64 %562, i64* %PC
  %563 = inttoptr i64 %560 to i32*
  %564 = load i32, i32* %563
  %565 = zext i32 %564 to i64
  store i64 %565, i64* %RAX, align 8, !tbaa !2428
  %566 = load i64, i64* %RBP
  %567 = sub i64 %566, 8
  %568 = load i64, i64* %PC
  %569 = add i64 %568, 4
  store i64 %569, i64* %PC
  %570 = inttoptr i64 %567 to i32*
  %571 = load i32, i32* %570
  %572 = sext i32 %571 to i64
  store i64 %572, i64* %RCX, align 8, !tbaa !2428
  %573 = load i64, i64* %RCX
  %574 = mul i64 %573, 4
  %575 = add i64 %574, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %576 = load i32, i32* %EAX
  %577 = zext i32 %576 to i64
  %578 = load i64, i64* %PC
  %579 = add i64 %578, 7
  store i64 %579, i64* %PC
  %580 = inttoptr i64 %575 to i32*
  store i32 %576, i32* %580
  %581 = load i64, i64* %RBP
  %582 = sub i64 %581, 8
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 3
  store i64 %584, i64* %PC
  %585 = inttoptr i64 %582 to i32*
  %586 = load i32, i32* %585
  %587 = zext i32 %586 to i64
  store i64 %587, i64* %RAX, align 8, !tbaa !2428
  %588 = load i64, i64* %RAX
  %589 = load i64, i64* %PC
  %590 = add i64 %589, 3
  store i64 %590, i64* %PC
  %591 = trunc i64 %588 to i32
  %592 = add i32 -1, %591
  %593 = zext i32 %592 to i64
  store i64 %593, i64* %RAX, align 8, !tbaa !2428
  %594 = icmp ult i32 %592, %591
  %595 = icmp ult i32 %592, -1
  %596 = or i1 %594, %595
  %597 = zext i1 %596 to i8
  %598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %597, i8* %598, align 1, !tbaa !2432
  %599 = and i32 %592, 255
  %600 = call i32 @llvm.ctpop.i32(i32 %599) #16
  %601 = trunc i32 %600 to i8
  %602 = and i8 %601, 1
  %603 = xor i8 %602, 1
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %603, i8* %604, align 1, !tbaa !2446
  %605 = xor i64 -1, %588
  %606 = trunc i64 %605 to i32
  %607 = xor i32 %606, %592
  %608 = lshr i32 %607, 4
  %609 = trunc i32 %608 to i8
  %610 = and i8 %609, 1
  %611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %610, i8* %611, align 1, !tbaa !2447
  %612 = icmp eq i32 %592, 0
  %613 = zext i1 %612 to i8
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %613, i8* %614, align 1, !tbaa !2448
  %615 = lshr i32 %592, 31
  %616 = trunc i32 %615 to i8
  %617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %616, i8* %617, align 1, !tbaa !2449
  %618 = lshr i32 %591, 31
  %619 = xor i32 %615, %618
  %620 = xor i32 %615, 1
  %621 = add nuw nsw i32 %619, %620
  %622 = icmp eq i32 %621, 2
  %623 = zext i1 %622 to i8
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %623, i8* %624, align 1, !tbaa !2450
  %625 = load i64, i64* %RBP
  %626 = sub i64 %625, 8
  %627 = load i32, i32* %EAX
  %628 = zext i32 %627 to i64
  %629 = load i64, i64* %PC
  %630 = add i64 %629, 3
  store i64 %630, i64* %PC
  %631 = inttoptr i64 %626 to i32*
  store i32 %627, i32* %631
  %632 = load i64, i64* %PC
  %633 = sub i64 %632, 46
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 5
  store i64 %635, i64* %PC
  %636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %633, i64* %636, align 8, !tbaa !2428
  br label %block_401abc

block_4019b2:                                     ; preds = %block_40198b
  %637 = add i64 %929, 7
  store i64 %637, i64* %PC
  %638 = inttoptr i64 %928 to i32*
  store i32 238, i32* %638
  br label %block_4019b9

block_4019c3:                                     ; preds = %block_4019b9
  %639 = load i64, i64* %RBP
  %640 = sub i64 %639, 4
  %641 = load i64, i64* %PC
  %642 = add i64 %641, 4
  store i64 %642, i64* %PC
  %643 = inttoptr i64 %640 to i32*
  %644 = load i32, i32* %643
  %645 = sext i32 %644 to i64
  store i64 %645, i64* %RAX, align 8, !tbaa !2428
  %646 = load i64, i64* %RAX
  %647 = mul i64 %646, 4
  %648 = add i64 %647, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3184)
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 7
  store i64 %650, i64* %PC
  %651 = inttoptr i64 %648 to i32*
  %652 = load i32, i32* %651
  %653 = zext i32 %652 to i64
  store i64 %653, i64* %RCX, align 8, !tbaa !2428
  %654 = load i64, i64* %RCX
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 7
  store i64 %656, i64* %PC
  %657 = trunc i64 %654 to i32
  %658 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4204) to i32*)
  %659 = xor i32 %658, %657
  %660 = zext i32 %659 to i64
  store i64 %660, i64* %RCX, align 8, !tbaa !2428
  %661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %661, align 1, !tbaa !2432
  %662 = and i32 %659, 255
  %663 = call i32 @llvm.ctpop.i32(i32 %662) #16
  %664 = trunc i32 %663 to i8
  %665 = and i8 %664, 1
  %666 = xor i8 %665, 1
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %666, i8* %667, align 1, !tbaa !2446
  %668 = icmp eq i32 %659, 0
  %669 = zext i1 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %669, i8* %670, align 1, !tbaa !2448
  %671 = lshr i32 %659, 31
  %672 = trunc i32 %671 to i8
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %672, i8* %673, align 1, !tbaa !2449
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %674, align 1, !tbaa !2450
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %675, align 1, !tbaa !2447
  %676 = load i32, i32* %ECX
  %677 = zext i32 %676 to i64
  %678 = load i64, i64* %PC
  %679 = add i64 %678, 3
  store i64 %679, i64* %PC
  %680 = shl i64 %677, 32
  %681 = ashr exact i64 %680, 32
  store i64 %681, i64* %RAX, align 8, !tbaa !2428
  %682 = load i64, i64* %RAX
  %683 = mul i64 %682, 4
  %684 = add i64 %683, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %685 = load i64, i64* %PC
  %686 = add i64 %685, 7
  store i64 %686, i64* %PC
  %687 = inttoptr i64 %684 to i32*
  %688 = load i32, i32* %687
  %689 = zext i32 %688 to i64
  store i64 %689, i64* %RCX, align 8, !tbaa !2428
  %690 = load i64, i64* %RBP
  %691 = sub i64 %690, 12
  %692 = load i32, i32* %ECX
  %693 = zext i32 %692 to i64
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 3
  store i64 %695, i64* %PC
  %696 = inttoptr i64 %691 to i32*
  store i32 %692, i32* %696
  %697 = load i64, i64* %RBP
  %698 = sub i64 %697, 12
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 4
  store i64 %700, i64* %PC
  %701 = inttoptr i64 %698 to i32*
  %702 = load i32, i32* %701
  %703 = sub i32 %702, -1
  %704 = icmp ult i32 %702, -1
  %705 = zext i1 %704 to i8
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %705, i8* %706, align 1, !tbaa !2432
  %707 = and i32 %703, 255
  %708 = call i32 @llvm.ctpop.i32(i32 %707) #16
  %709 = trunc i32 %708 to i8
  %710 = and i8 %709, 1
  %711 = xor i8 %710, 1
  %712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %711, i8* %712, align 1, !tbaa !2446
  %713 = xor i32 %702, -1
  %714 = xor i32 %713, %703
  %715 = lshr i32 %714, 4
  %716 = trunc i32 %715 to i8
  %717 = and i8 %716, 1
  %718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %717, i8* %718, align 1, !tbaa !2447
  %719 = icmp eq i32 %703, 0
  %720 = zext i1 %719 to i8
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %720, i8* %721, align 1, !tbaa !2448
  %722 = lshr i32 %703, 31
  %723 = trunc i32 %722 to i8
  %724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %723, i8* %724, align 1, !tbaa !2449
  %725 = lshr i32 %702, 31
  %726 = xor i32 %725, 1
  %727 = xor i32 %722, %725
  %728 = add nuw nsw i32 %727, %726
  %729 = icmp eq i32 %728, 2
  %730 = zext i1 %729 to i8
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %730, i8* %731, align 1, !tbaa !2450
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 207
  %734 = load i64, i64* %PC
  %735 = add i64 %734, 6
  %736 = load i64, i64* %PC
  %737 = add i64 %736, 6
  store i64 %737, i64* %PC
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %739 = load i8, i8* %738, align 1, !tbaa !2448
  store i8 %739, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %741 = icmp ne i8 %739, 0
  %742 = select i1 %741, i64 %733, i64 %735
  store i64 %742, i64* %740, align 8, !tbaa !2428
  %743 = load i8, i8* %BRANCH_TAKEN
  %744 = icmp eq i8 %743, 1
  %745 = load i64, i64* %RBP
  %746 = sub i64 %745, 8
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 7
  store i64 %748, i64* %PC
  %749 = inttoptr i64 %746 to i32*
  store i32 15, i32* %749
  br i1 %744, label %block_401abc, label %block_4019f3

block_401995:                                     ; preds = %block_40198b
  %750 = add i64 %929, 4
  store i64 %750, i64* %PC
  %751 = inttoptr i64 %928 to i32*
  %752 = load i32, i32* %751
  %753 = sext i32 %752 to i64
  store i64 %753, i64* %RAX, align 8, !tbaa !2428
  %754 = load i64, i64* %RAX
  %755 = mul i64 %754, 4
  %756 = add i64 %755, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 11
  store i64 %758, i64* %PC
  %759 = inttoptr i64 %756 to i32*
  store i32 0, i32* %759
  %760 = load i64, i64* %RBP
  %761 = sub i64 %760, 4
  %762 = load i64, i64* %PC
  %763 = add i64 %762, 3
  store i64 %763, i64* %PC
  %764 = inttoptr i64 %761 to i32*
  %765 = load i32, i32* %764
  %766 = zext i32 %765 to i64
  store i64 %766, i64* %RAX, align 8, !tbaa !2428
  %767 = load i64, i64* %RAX
  %768 = load i64, i64* %PC
  %769 = add i64 %768, 3
  store i64 %769, i64* %PC
  %770 = trunc i64 %767 to i32
  %771 = add i32 1, %770
  %772 = zext i32 %771 to i64
  store i64 %772, i64* %RAX, align 8, !tbaa !2428
  %773 = icmp ult i32 %771, %770
  %774 = icmp ult i32 %771, 1
  %775 = or i1 %773, %774
  %776 = zext i1 %775 to i8
  %777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %776, i8* %777, align 1, !tbaa !2432
  %778 = and i32 %771, 255
  %779 = call i32 @llvm.ctpop.i32(i32 %778) #16
  %780 = trunc i32 %779 to i8
  %781 = and i8 %780, 1
  %782 = xor i8 %781, 1
  %783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %782, i8* %783, align 1, !tbaa !2446
  %784 = xor i64 1, %767
  %785 = trunc i64 %784 to i32
  %786 = xor i32 %785, %771
  %787 = lshr i32 %786, 4
  %788 = trunc i32 %787 to i8
  %789 = and i8 %788, 1
  %790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %789, i8* %790, align 1, !tbaa !2447
  %791 = icmp eq i32 %771, 0
  %792 = zext i1 %791 to i8
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %792, i8* %793, align 1, !tbaa !2448
  %794 = lshr i32 %771, 31
  %795 = trunc i32 %794 to i8
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %795, i8* %796, align 1, !tbaa !2449
  %797 = lshr i32 %770, 31
  %798 = xor i32 %794, %797
  %799 = add nuw nsw i32 %798, %794
  %800 = icmp eq i32 %799, 2
  %801 = zext i1 %800 to i8
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %801, i8* %802, align 1, !tbaa !2450
  %803 = load i64, i64* %RBP
  %804 = sub i64 %803, 4
  %805 = load i32, i32* %EAX
  %806 = zext i32 %805 to i64
  %807 = load i64, i64* %PC
  %808 = add i64 %807, 3
  store i64 %808, i64* %PC
  %809 = inttoptr i64 %804 to i32*
  store i32 %805, i32* %809
  %810 = load i64, i64* %PC
  %811 = sub i64 %810, 34
  %812 = load i64, i64* %PC
  %813 = add i64 %812, 5
  store i64 %813, i64* %PC
  %814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %811, i64* %814, align 8, !tbaa !2428
  br label %block_40198b

block_401b0d:                                     ; preds = %block_4019b9
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 1
  store i64 %816, i64* %PC
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %818 = load i64, i64* %817, align 8, !tbaa !2428
  %819 = add i64 %818, 8
  %820 = inttoptr i64 %818 to i64*
  %821 = load i64, i64* %820
  store i64 %821, i64* %RBP, align 8, !tbaa !2428
  store i64 %819, i64* %817, align 8, !tbaa !2428
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 1
  store i64 %823, i64* %PC
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %826 = load i64, i64* %825, align 8, !tbaa !2428
  %827 = inttoptr i64 %826 to i64*
  %828 = load i64, i64* %827
  store i64 %828, i64* %824, align 8, !tbaa !2428
  %829 = add i64 %826, 8
  store i64 %829, i64* %825, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.3

block_4019b9:                                     ; preds = %block_4019b2, %block_401afa
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.4, %block_4019b2 ], [ %MEMORY.2, %block_401afa ]
  %830 = load i64, i64* %RBP
  %831 = sub i64 %830, 4
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 4
  store i64 %833, i64* %PC
  %834 = inttoptr i64 %831 to i32*
  %835 = load i32, i32* %834
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %836, align 1, !tbaa !2432
  %837 = and i32 %835, 255
  %838 = call i32 @llvm.ctpop.i32(i32 %837) #16
  %839 = trunc i32 %838 to i8
  %840 = and i8 %839, 1
  %841 = xor i8 %840, 1
  %842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %841, i8* %842, align 1, !tbaa !2446
  %843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %843, align 1, !tbaa !2447
  %844 = icmp eq i32 %835, 0
  %845 = zext i1 %844 to i8
  %846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %845, i8* %846, align 1, !tbaa !2448
  %847 = lshr i32 %835, 31
  %848 = trunc i32 %847 to i8
  %849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %848, i8* %849, align 1, !tbaa !2449
  %850 = lshr i32 %835, 31
  %851 = xor i32 %847, %850
  %852 = add nuw nsw i32 %851, %850
  %853 = icmp eq i32 %852, 2
  %854 = zext i1 %853 to i8
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %854, i8* %855, align 1, !tbaa !2450
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 336
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 6
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 6
  store i64 %861, i64* %PC
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %863 = load i8, i8* %862, align 1, !tbaa !2449
  %864 = icmp ne i8 %863, 0
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %866 = load i8, i8* %865, align 1, !tbaa !2450
  %867 = icmp ne i8 %866, 0
  %868 = xor i1 %864, %867
  %869 = zext i1 %868 to i8
  store i8 %869, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %871 = select i1 %868, i64 %857, i64 %859
  store i64 %871, i64* %870, align 8, !tbaa !2428
  %872 = load i8, i8* %BRANCH_TAKEN
  %873 = icmp eq i8 %872, 1
  br i1 %873, label %block_401b0d, label %block_4019c3

block_40198b:                                     ; preds = %block_401995, %block_401980
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_401980 ], [ %MEMORY.4, %block_401995 ]
  %874 = load i64, i64* %RBP
  %875 = sub i64 %874, 4
  %876 = load i64, i64* %PC
  %877 = add i64 %876, 4
  store i64 %877, i64* %PC
  %878 = inttoptr i64 %875 to i32*
  %879 = load i32, i32* %878
  %880 = sub i32 %879, 16
  %881 = icmp ult i32 %879, 16
  %882 = zext i1 %881 to i8
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %882, i8* %883, align 1, !tbaa !2432
  %884 = and i32 %880, 255
  %885 = call i32 @llvm.ctpop.i32(i32 %884) #16
  %886 = trunc i32 %885 to i8
  %887 = and i8 %886, 1
  %888 = xor i8 %887, 1
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %888, i8* %889, align 1, !tbaa !2446
  %890 = xor i32 %879, 16
  %891 = xor i32 %890, %880
  %892 = lshr i32 %891, 4
  %893 = trunc i32 %892 to i8
  %894 = and i8 %893, 1
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %894, i8* %895, align 1, !tbaa !2447
  %896 = icmp eq i32 %880, 0
  %897 = zext i1 %896 to i8
  %898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %897, i8* %898, align 1, !tbaa !2448
  %899 = lshr i32 %880, 31
  %900 = trunc i32 %899 to i8
  %901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %900, i8* %901, align 1, !tbaa !2449
  %902 = lshr i32 %879, 31
  %903 = xor i32 %899, %902
  %904 = add nuw nsw i32 %903, %902
  %905 = icmp eq i32 %904, 2
  %906 = zext i1 %905 to i8
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %906, i8* %907, align 1, !tbaa !2450
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 35
  %910 = load i64, i64* %PC
  %911 = add i64 %910, 6
  %912 = load i64, i64* %PC
  %913 = add i64 %912, 6
  store i64 %913, i64* %PC
  %914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %915 = load i8, i8* %914, align 1, !tbaa !2449
  %916 = icmp ne i8 %915, 0
  %917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %918 = load i8, i8* %917, align 1, !tbaa !2450
  %919 = icmp ne i8 %918, 0
  %920 = xor i1 %916, %919
  %921 = xor i1 %920, true
  %922 = zext i1 %921 to i8
  store i8 %922, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %924 = select i1 %920, i64 %911, i64 %909
  store i64 %924, i64* %923, align 8, !tbaa !2428
  %925 = load i8, i8* %BRANCH_TAKEN
  %926 = icmp eq i8 %925, 1
  %927 = load i64, i64* %RBP
  %928 = sub i64 %927, 4
  %929 = load i64, i64* %PC
  br i1 %926, label %block_4019b2, label %block_401995

block_401a57:                                     ; preds = %block_4019fd
  %930 = load i64, i64* %RBP
  %931 = sub i64 %930, 8
  %932 = load i64, i64* %PC
  %933 = add i64 %932, 3
  store i64 %933, i64* %PC
  %934 = inttoptr i64 %931 to i32*
  %935 = load i32, i32* %934
  %936 = zext i32 %935 to i64
  store i64 %936, i64* %RAX, align 8, !tbaa !2428
  %937 = load i64, i64* %RAX
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 3
  store i64 %939, i64* %PC
  %940 = trunc i64 %937 to i32
  %941 = sub i32 %940, 1
  %942 = zext i32 %941 to i64
  store i64 %942, i64* %RAX, align 8, !tbaa !2428
  %943 = icmp ult i32 %940, 1
  %944 = zext i1 %943 to i8
  %945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %944, i8* %945, align 1, !tbaa !2432
  %946 = and i32 %941, 255
  %947 = call i32 @llvm.ctpop.i32(i32 %946) #16
  %948 = trunc i32 %947 to i8
  %949 = and i8 %948, 1
  %950 = xor i8 %949, 1
  %951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %950, i8* %951, align 1, !tbaa !2446
  %952 = xor i64 1, %937
  %953 = trunc i64 %952 to i32
  %954 = xor i32 %953, %941
  %955 = lshr i32 %954, 4
  %956 = trunc i32 %955 to i8
  %957 = and i8 %956, 1
  %958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %957, i8* %958, align 1, !tbaa !2447
  %959 = icmp eq i32 %941, 0
  %960 = zext i1 %959 to i8
  %961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %960, i8* %961, align 1, !tbaa !2448
  %962 = lshr i32 %941, 31
  %963 = trunc i32 %962 to i8
  %964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %963, i8* %964, align 1, !tbaa !2449
  %965 = lshr i32 %940, 31
  %966 = xor i32 %962, %965
  %967 = add nuw nsw i32 %966, %965
  %968 = icmp eq i32 %967, 2
  %969 = zext i1 %968 to i8
  %970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %969, i8* %970, align 1, !tbaa !2450
  %971 = load i32, i32* %EAX
  %972 = zext i32 %971 to i64
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 3
  store i64 %974, i64* %PC
  %975 = shl i64 %972, 32
  %976 = ashr exact i64 %975, 32
  store i64 %976, i64* %RCX, align 8, !tbaa !2428
  %977 = load i64, i64* %RCX
  %978 = mul i64 %977, 4
  %979 = add i64 %978, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %980 = load i64, i64* %PC
  %981 = add i64 %980, 7
  store i64 %981, i64* %PC
  %982 = inttoptr i64 %979 to i32*
  %983 = load i32, i32* %982
  %984 = zext i32 %983 to i64
  store i64 %984, i64* %RAX, align 8, !tbaa !2428
  %985 = load i64, i64* %RBP
  %986 = sub i64 %985, 8
  %987 = load i64, i64* %PC
  %988 = add i64 %987, 4
  store i64 %988, i64* %PC
  %989 = inttoptr i64 %986 to i32*
  %990 = load i32, i32* %989
  %991 = sext i32 %990 to i64
  store i64 %991, i64* %RCX, align 8, !tbaa !2428
  %992 = load i64, i64* %RCX
  %993 = mul i64 %992, 4
  %994 = add i64 %993, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %995 = load i32, i32* %EAX
  %996 = zext i32 %995 to i64
  %997 = load i64, i64* %PC
  %998 = add i64 %997, 7
  store i64 %998, i64* %PC
  %999 = inttoptr i64 %994 to i32*
  store i32 %995, i32* %999
  br label %block_401a72

block_401a85:                                     ; preds = %block_4019f3
  %1000 = load i64, i64* %PC
  %1001 = add i64 %1000, 5
  store i64 %1001, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %1002 = load i64, i64* %PC
  %1003 = add i64 %1002, 7
  store i64 %1003, i64* %PC
  %1004 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104) to i32*)
  %1005 = zext i32 %1004 to i64
  store i64 %1005, i64* %RCX, align 8, !tbaa !2428
  %1006 = load i64, i64* %RCX
  %1007 = load i64, i64* %RBP
  %1008 = sub i64 %1007, 12
  %1009 = load i64, i64* %PC
  %1010 = add i64 %1009, 3
  store i64 %1010, i64* %PC
  %1011 = trunc i64 %1006 to i32
  %1012 = inttoptr i64 %1008 to i32*
  %1013 = load i32, i32* %1012
  %1014 = add i32 %1013, %1011
  %1015 = zext i32 %1014 to i64
  store i64 %1015, i64* %RCX, align 8, !tbaa !2428
  %1016 = icmp ult i32 %1014, %1011
  %1017 = icmp ult i32 %1014, %1013
  %1018 = or i1 %1016, %1017
  %1019 = zext i1 %1018 to i8
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1019, i8* %1020, align 1, !tbaa !2432
  %1021 = and i32 %1014, 255
  %1022 = call i32 @llvm.ctpop.i32(i32 %1021) #16
  %1023 = trunc i32 %1022 to i8
  %1024 = and i8 %1023, 1
  %1025 = xor i8 %1024, 1
  %1026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1025, i8* %1026, align 1, !tbaa !2446
  %1027 = xor i32 %1013, %1011
  %1028 = xor i32 %1027, %1014
  %1029 = lshr i32 %1028, 4
  %1030 = trunc i32 %1029 to i8
  %1031 = and i8 %1030, 1
  %1032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1031, i8* %1032, align 1, !tbaa !2447
  %1033 = icmp eq i32 %1014, 0
  %1034 = zext i1 %1033 to i8
  %1035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1034, i8* %1035, align 1, !tbaa !2448
  %1036 = lshr i32 %1014, 31
  %1037 = trunc i32 %1036 to i8
  %1038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1037, i8* %1038, align 1, !tbaa !2449
  %1039 = lshr i32 %1011, 31
  %1040 = lshr i32 %1013, 31
  %1041 = xor i32 %1036, %1039
  %1042 = xor i32 %1036, %1040
  %1043 = add nuw nsw i32 %1041, %1042
  %1044 = icmp eq i32 %1043, 2
  %1045 = zext i1 %1044 to i8
  %1046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1045, i8* %1046, align 1, !tbaa !2450
  %1047 = load i64, i64* %RBP
  %1048 = sub i64 %1047, 20
  %1049 = load i32, i32* %EAX
  %1050 = zext i32 %1049 to i64
  %1051 = load i64, i64* %PC
  %1052 = add i64 %1051, 3
  store i64 %1052, i64* %PC
  %1053 = inttoptr i64 %1048 to i32*
  store i32 %1049, i32* %1053
  %1054 = load i32, i32* %ECX
  %1055 = zext i32 %1054 to i64
  %1056 = load i64, i64* %PC
  %1057 = add i64 %1056, 2
  store i64 %1057, i64* %PC
  %1058 = and i64 %1055, 4294967295
  store i64 %1058, i64* %RAX, align 8, !tbaa !2428
  %1059 = load i64, i64* %PC
  %1060 = add i64 %1059, 1
  store i64 %1060, i64* %PC
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1063 = bitcast %union.anon* %1062 to i32*
  %1064 = load i32, i32* %1063, align 8, !tbaa !2452
  %1065 = sext i32 %1064 to i64
  %1066 = lshr i64 %1065, 32
  store i64 %1066, i64* %1061, align 8, !tbaa !2428
  %1067 = load i64, i64* %RBP
  %1068 = sub i64 %1067, 20
  %1069 = load i64, i64* %PC
  %1070 = add i64 %1069, 3
  store i64 %1070, i64* %PC
  %1071 = inttoptr i64 %1068 to i32*
  %1072 = load i32, i32* %1071
  %1073 = zext i32 %1072 to i64
  store i64 %1073, i64* %RCX, align 8, !tbaa !2428
  %1074 = load i32, i32* %ECX
  %1075 = zext i32 %1074 to i64
  %1076 = load i64, i64* %PC
  %1077 = add i64 %1076, 2
  store i64 %1077, i64* %PC
  %1078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1079 = bitcast %union.anon* %1078 to i32*
  %1080 = load i32, i32* %1079, align 8, !tbaa !2452
  %1081 = zext i32 %1080 to i64
  %1082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %1083 = bitcast %union.anon* %1082 to i32*
  %1084 = load i32, i32* %1083, align 8, !tbaa !2452
  %1085 = zext i32 %1084 to i64
  %1086 = shl i64 %1075, 32
  %1087 = ashr exact i64 %1086, 32
  %1088 = shl nuw i64 %1085, 32
  %1089 = or i64 %1088, %1081
  %1090 = sdiv i64 %1089, %1087
  %1091 = shl i64 %1090, 32
  %1092 = ashr exact i64 %1091, 32
  %1093 = icmp eq i64 %1090, %1092
  br i1 %1093, label %1098, label %1094

; <label>:1094:                                   ; preds = %block_401a85
  %1095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1096 = load i64, i64* %1095, align 8, !tbaa !2428
  %1097 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1096, %struct.Memory* %MEMORY.5) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:1098:                                   ; preds = %block_401a85
  %1099 = srem i64 %1089, %1087
  %1100 = getelementptr inbounds %union.anon, %union.anon* %1078, i64 0, i32 0
  %1101 = and i64 %1090, 4294967295
  store i64 %1101, i64* %1100, align 8, !tbaa !2428
  %1102 = getelementptr inbounds %union.anon, %union.anon* %1082, i64 0, i32 0
  %1103 = and i64 %1099, 4294967295
  store i64 %1103, i64* %1102, align 8, !tbaa !2428
  %1104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1104, align 1, !tbaa !2432
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1105, align 1, !tbaa !2446
  %1106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1106, align 1, !tbaa !2447
  %1107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1107, align 1, !tbaa !2448
  %1108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1108, align 1, !tbaa !2449
  %1109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1109, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %1094, %1098
  %1110 = phi %struct.Memory* [ %1097, %1094 ], [ %MEMORY.5, %1098 ]
  %1111 = load i32, i32* %EDX
  %1112 = zext i32 %1111 to i64
  %1113 = load i64, i64* %PC
  %1114 = add i64 %1113, 3
  store i64 %1114, i64* %PC
  %1115 = shl i64 %1112, 32
  %1116 = ashr exact i64 %1115, 32
  store i64 %1116, i64* %RSI, align 8, !tbaa !2428
  %1117 = load i64, i64* %RSI
  %1118 = mul i64 %1117, 4
  %1119 = add i64 %1118, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %1120 = load i64, i64* %PC
  %1121 = add i64 %1120, 7
  store i64 %1121, i64* %PC
  %1122 = inttoptr i64 %1119 to i32*
  %1123 = load i32, i32* %1122
  %1124 = zext i32 %1123 to i64
  store i64 %1124, i64* %RDX, align 8, !tbaa !2428
  %1125 = load i32, i32* %EDX
  %1126 = zext i32 %1125 to i64
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 7
  store i64 %1128, i64* %PC
  store i32 %1125, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144) to i32*)
  %1129 = load i64, i64* %PC
  %1130 = add i64 %1129, 74
  %1131 = load i64, i64* %PC
  %1132 = add i64 %1131, 5
  store i64 %1132, i64* %PC
  %1133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1130, i64* %1133, align 8, !tbaa !2428
  br label %block_401afa

block_4019f3:                                     ; preds = %block_4019c3, %block_401a72
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.3, %block_4019c3 ], [ %MEMORY.0, %block_401a72 ]
  %1134 = load i64, i64* %RBP
  %1135 = sub i64 %1134, 8
  %1136 = load i64, i64* %PC
  %1137 = add i64 %1136, 4
  store i64 %1137, i64* %PC
  %1138 = inttoptr i64 %1135 to i32*
  %1139 = load i32, i32* %1138
  %1140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1140, align 1, !tbaa !2432
  %1141 = and i32 %1139, 255
  %1142 = call i32 @llvm.ctpop.i32(i32 %1141) #16
  %1143 = trunc i32 %1142 to i8
  %1144 = and i8 %1143, 1
  %1145 = xor i8 %1144, 1
  %1146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1145, i8* %1146, align 1, !tbaa !2446
  %1147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1147, align 1, !tbaa !2447
  %1148 = icmp eq i32 %1139, 0
  %1149 = zext i1 %1148 to i8
  %1150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1149, i8* %1150, align 1, !tbaa !2448
  %1151 = lshr i32 %1139, 31
  %1152 = trunc i32 %1151 to i8
  %1153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1152, i8* %1153, align 1, !tbaa !2449
  %1154 = lshr i32 %1139, 31
  %1155 = xor i32 %1151, %1154
  %1156 = add nuw nsw i32 %1155, %1154
  %1157 = icmp eq i32 %1156, 2
  %1158 = zext i1 %1157 to i8
  %1159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1158, i8* %1159, align 1, !tbaa !2450
  %1160 = load i64, i64* %PC
  %1161 = add i64 %1160, 142
  %1162 = load i64, i64* %PC
  %1163 = add i64 %1162, 6
  %1164 = load i64, i64* %PC
  %1165 = add i64 %1164, 6
  store i64 %1165, i64* %PC
  %1166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1167 = load i8, i8* %1166, align 1, !tbaa !2448
  %1168 = icmp ne i8 %1167, 0
  %1169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1170 = load i8, i8* %1169, align 1, !tbaa !2449
  %1171 = icmp ne i8 %1170, 0
  %1172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1173 = load i8, i8* %1172, align 1, !tbaa !2450
  %1174 = icmp ne i8 %1173, 0
  %1175 = xor i1 %1171, %1174
  %1176 = or i1 %1168, %1175
  %1177 = zext i1 %1176 to i8
  store i8 %1177, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1179 = select i1 %1176, i64 %1161, i64 %1163
  store i64 %1179, i64* %1178, align 8, !tbaa !2428
  %1180 = load i8, i8* %BRANCH_TAKEN
  %1181 = icmp eq i8 %1180, 1
  br i1 %1181, label %block_401a85, label %block_4019fd
}

; Function Attrs: noinline
define %struct.Memory* @sub_400910_decode_rs(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400910:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 7
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %17 = bitcast %union.anon* %16 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %17, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EAX = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %ECX = bitcast %union.anon* %23 to i32*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %EDX = bitcast %union.anon* %26 to i32*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %ESI = bitcast %union.anon* %29 to i32*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %EDI = bitcast %union.anon* %32 to i32*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 17
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R8D = bitcast %union.anon* %35 to i32*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 1
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RAX = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 5
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RCX = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 7
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %RDX = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 9
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %RSI = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 11
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %RDI = bitcast %union.anon* %50 to i64*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 13
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %RSP = bitcast %union.anon* %53 to i64*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %55 = getelementptr inbounds %struct.GPR, %struct.GPR* %54, i32 0, i32 15
  %56 = getelementptr inbounds %struct.Reg, %struct.Reg* %55, i32 0, i32 0
  %RBP = bitcast %union.anon* %56 to i64*
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %58 = getelementptr inbounds %struct.GPR, %struct.GPR* %57, i32 0, i32 17
  %59 = getelementptr inbounds %struct.Reg, %struct.Reg* %58, i32 0, i32 0
  %R8 = bitcast %union.anon* %59 to i64*
  %60 = load i64, i64* %RBP
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 1
  store i64 %62, i64* %PC
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %64 = load i64, i64* %63, align 8, !tbaa !2428
  %65 = add i64 %64, -8
  %66 = inttoptr i64 %65 to i64*
  store i64 %60, i64* %66
  store i64 %65, i64* %63, align 8, !tbaa !2428
  %67 = load i64, i64* %RSP
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 3
  store i64 %69, i64* %PC
  store i64 %67, i64* %RBP, align 8, !tbaa !2428
  %70 = load i64, i64* %RSP
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 7
  store i64 %72, i64* %PC
  %73 = sub i64 %70, 2608
  store i64 %73, i64* %RSP, align 8, !tbaa !2428
  %74 = icmp ult i64 %70, 2608
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %75, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %73 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = xor i64 2608, %70
  %85 = xor i64 %84, %73
  %86 = lshr i64 %85, 4
  %87 = trunc i64 %86 to i8
  %88 = and i8 %87, 1
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %88, i8* %89, align 1, !tbaa !2447
  %90 = icmp eq i64 %73, 0
  %91 = zext i1 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %91, i8* %92, align 1, !tbaa !2448
  %93 = lshr i64 %73, 63
  %94 = trunc i64 %93 to i8
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %94, i8* %95, align 1, !tbaa !2449
  %96 = lshr i64 %70, 63
  %97 = xor i64 %93, %96
  %98 = add nuw nsw i64 %97, %96
  %99 = icmp eq i64 %98, 2
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %100, i8* %101, align 1, !tbaa !2450
  %102 = load i64, i64* %RBP
  %103 = sub i64 %102, 1492
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 10
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  store i32 0, i32* %106
  %107 = load i64, i64* %RBP
  %108 = sub i64 %107, 1496
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 10
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %108 to i32*
  store i32 0, i32* %111
  %112 = load i64, i64* %RBP
  %113 = sub i64 %112, 4
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 7
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %113 to i32*
  store i32 1, i32* %116
  br label %block_400936

block_400ffe:                                     ; preds = %block_400fcb, %block_400fe4
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.40, %block_400fcb ], [ %MEMORY.40, %block_400fe4 ]
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 2709
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 6
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i8*
  %122 = load i8, i8* %121
  store i8 %122, i8* %AL, align 1, !tbaa !2451
  %123 = load i8, i8* %AL
  %124 = zext i8 %123 to i64
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 2
  store i64 %126, i64* %PC
  %127 = and i64 1, %124
  %128 = trunc i64 %127 to i8
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %129, align 1, !tbaa !2432
  %130 = trunc i64 %127 to i32
  %131 = and i32 %130, 255
  %132 = call i32 @llvm.ctpop.i32(i32 %131) #16
  %133 = trunc i32 %132 to i8
  %134 = and i8 %133, 1
  %135 = xor i8 %134, 1
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %135, i8* %136, align 1, !tbaa !2446
  %137 = icmp eq i8 %128, 0
  %138 = zext i1 %137 to i8
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %138, i8* %139, align 1, !tbaa !2448
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %140, align 1, !tbaa !2449
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %141, align 1, !tbaa !2450
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %142, align 1, !tbaa !2447
  %143 = load i64, i64* %PC
  %144 = sub i64 %143, 1357
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 6
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 6
  store i64 %148, i64* %PC
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %150 = load i8, i8* %149, align 1, !tbaa !2448
  %151 = icmp eq i8 %150, 0
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %154 = select i1 %151, i64 %144, i64 %146
  store i64 %154, i64* %153, align 8, !tbaa !2428
  %155 = load i8, i8* %BRANCH_TAKEN
  %156 = icmp eq i8 %155, 1
  br i1 %156, label %block_400ab9, label %block_40100c

block_4013f1:                                     ; preds = %block_401371, %block_40135f, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit6
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.54, %block_40135f ], [ %MEMORY.54, %block_401371 ], [ %1970, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit6 ]
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 5
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 5
  store i64 %160, i64* %PC
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %158, i64* %161, align 8, !tbaa !2428
  %162 = load i64, i64* %RBP
  %163 = sub i64 %162, 8
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 3
  store i64 %165, i64* %PC
  %166 = inttoptr i64 %163 to i32*
  %167 = load i32, i32* %166
  %168 = zext i32 %167 to i64
  store i64 %168, i64* %RAX, align 8, !tbaa !2428
  %169 = load i64, i64* %RAX
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 3
  store i64 %171, i64* %PC
  %172 = trunc i64 %169 to i32
  %173 = add i32 1, %172
  %174 = zext i32 %173 to i64
  store i64 %174, i64* %RAX, align 8, !tbaa !2428
  %175 = icmp ult i32 %173, %172
  %176 = icmp ult i32 %173, 1
  %177 = or i1 %175, %176
  %178 = zext i1 %177 to i8
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %178, i8* %179, align 1, !tbaa !2432
  %180 = and i32 %173, 255
  %181 = call i32 @llvm.ctpop.i32(i32 %180) #16
  %182 = trunc i32 %181 to i8
  %183 = and i8 %182, 1
  %184 = xor i8 %183, 1
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %184, i8* %185, align 1, !tbaa !2446
  %186 = xor i64 1, %169
  %187 = trunc i64 %186 to i32
  %188 = xor i32 %187, %173
  %189 = lshr i32 %188, 4
  %190 = trunc i32 %189 to i8
  %191 = and i8 %190, 1
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %191, i8* %192, align 1, !tbaa !2447
  %193 = icmp eq i32 %173, 0
  %194 = zext i1 %193 to i8
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %194, i8* %195, align 1, !tbaa !2448
  %196 = lshr i32 %173, 31
  %197 = trunc i32 %196 to i8
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %197, i8* %198, align 1, !tbaa !2449
  %199 = lshr i32 %172, 31
  %200 = xor i32 %196, %199
  %201 = add nuw nsw i32 %200, %196
  %202 = icmp eq i32 %201, 2
  %203 = zext i1 %202 to i8
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %203, i8* %204, align 1, !tbaa !2450
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 8
  %207 = load i32, i32* %EAX
  %208 = zext i32 %207 to i64
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 3
  store i64 %210, i64* %PC
  %211 = inttoptr i64 %206 to i32*
  store i32 %207, i32* %211
  %212 = load i64, i64* %PC
  %213 = sub i64 %212, 172
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  store i64 %215, i64* %PC
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %213, i64* %216, align 8, !tbaa !2428
  br label %block_401353

block_400be5:                                     ; preds = %block_400c22, %block_400bdf
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.25, %block_400bdf ], [ %MEMORY.53, %block_400c22 ]
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 8
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 3
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %218 to i32*
  %222 = load i32, i32* %221
  %223 = zext i32 %222 to i64
  store i64 %223, i64* %RAX, align 8, !tbaa !2428
  %224 = load i64, i64* %RAX
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC
  %227 = trunc i64 %224 to i32
  %228 = add i32 -1, %227
  %229 = zext i32 %228 to i64
  store i64 %229, i64* %RAX, align 8, !tbaa !2428
  %230 = icmp ult i32 %228, %227
  %231 = icmp ult i32 %228, -1
  %232 = or i1 %230, %231
  %233 = zext i1 %232 to i8
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %233, i8* %234, align 1, !tbaa !2432
  %235 = and i32 %228, 255
  %236 = call i32 @llvm.ctpop.i32(i32 %235) #16
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %239, i8* %240, align 1, !tbaa !2446
  %241 = xor i64 -1, %224
  %242 = trunc i64 %241 to i32
  %243 = xor i32 %242, %228
  %244 = lshr i32 %243, 4
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %246, i8* %247, align 1, !tbaa !2447
  %248 = icmp eq i32 %228, 0
  %249 = zext i1 %248 to i8
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %249, i8* %250, align 1, !tbaa !2448
  %251 = lshr i32 %228, 31
  %252 = trunc i32 %251 to i8
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %252, i8* %253, align 1, !tbaa !2449
  %254 = lshr i32 %227, 31
  %255 = xor i32 %251, %254
  %256 = xor i32 %251, 1
  %257 = add nuw nsw i32 %255, %256
  %258 = icmp eq i32 %257, 2
  %259 = zext i1 %258 to i8
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %259, i8* %260, align 1, !tbaa !2450
  %261 = load i64, i64* %RBP
  %262 = sub i64 %261, 8
  %263 = load i32, i32* %EAX
  %264 = zext i32 %263 to i64
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 3
  store i64 %266, i64* %PC
  %267 = inttoptr i64 %262 to i32*
  store i32 %263, i32* %267
  %268 = load i64, i64* %RBP
  %269 = sub i64 %268, 8
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 4
  store i64 %271, i64* %PC
  %272 = inttoptr i64 %269 to i32*
  %273 = load i32, i32* %272
  %274 = sext i32 %273 to i64
  store i64 %274, i64* %RCX, align 8, !tbaa !2428
  %275 = load i64, i64* %RBP
  %276 = load i64, i64* %RCX
  %277 = mul i64 %276, 4
  %278 = add i64 %275, -1248
  %279 = add i64 %278, %277
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 8
  store i64 %281, i64* %PC
  %282 = inttoptr i64 %279 to i32*
  %283 = load i32, i32* %282
  %284 = sub i32 %283, -1
  %285 = icmp ult i32 %283, -1
  %286 = zext i1 %285 to i8
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %286, i8* %287, align 1, !tbaa !2432
  %288 = and i32 %284, 255
  %289 = call i32 @llvm.ctpop.i32(i32 %288) #16
  %290 = trunc i32 %289 to i8
  %291 = and i8 %290, 1
  %292 = xor i8 %291, 1
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %292, i8* %293, align 1, !tbaa !2446
  %294 = xor i32 %283, -1
  %295 = xor i32 %294, %284
  %296 = lshr i32 %295, 4
  %297 = trunc i32 %296 to i8
  %298 = and i8 %297, 1
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %298, i8* %299, align 1, !tbaa !2447
  %300 = icmp eq i32 %284, 0
  %301 = zext i1 %300 to i8
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %301, i8* %302, align 1, !tbaa !2448
  %303 = lshr i32 %284, 31
  %304 = trunc i32 %303 to i8
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %304, i8* %305, align 1, !tbaa !2449
  %306 = lshr i32 %283, 31
  %307 = xor i32 %306, 1
  %308 = xor i32 %303, %306
  %309 = add nuw nsw i32 %308, %307
  %310 = icmp eq i32 %309, 2
  %311 = zext i1 %310 to i8
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %311, i8* %312, align 1, !tbaa !2450
  %313 = load i64, i64* %PC
  %314 = add i64 %313, 40
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 6
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 6
  store i64 %318, i64* %PC
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %320 = load i8, i8* %319, align 1, !tbaa !2448
  store i8 %320, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %322 = icmp ne i8 %320, 0
  %323 = select i1 %322, i64 %314, i64 %316
  store i64 %323, i64* %321, align 8, !tbaa !2428
  %324 = load i8, i8* %BRANCH_TAKEN
  %325 = icmp eq i8 %324, 1
  br i1 %325, label %block_400c22, label %block_400c00

block_400fe4:                                     ; preds = %block_400fcb
  %326 = load i64, i64* %RBP
  %327 = sub i64 %326, 12
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 3
  store i64 %329, i64* %PC
  %330 = inttoptr i64 %327 to i32*
  %331 = load i32, i32* %330
  %332 = zext i32 %331 to i64
  store i64 %332, i64* %RAX, align 8, !tbaa !2428
  %333 = load i64, i64* %RAX
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 3
  store i64 %335, i64* %PC
  %336 = trunc i64 %333 to i32
  %337 = add i32 1, %336
  %338 = zext i32 %337 to i64
  store i64 %338, i64* %RAX, align 8, !tbaa !2428
  %339 = icmp ult i32 %337, %336
  %340 = icmp ult i32 %337, 1
  %341 = or i1 %339, %340
  %342 = zext i1 %341 to i8
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %342, i8* %343, align 1, !tbaa !2432
  %344 = and i32 %337, 255
  %345 = call i32 @llvm.ctpop.i32(i32 %344) #16
  %346 = trunc i32 %345 to i8
  %347 = and i8 %346, 1
  %348 = xor i8 %347, 1
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %348, i8* %349, align 1, !tbaa !2446
  %350 = xor i64 1, %333
  %351 = trunc i64 %350 to i32
  %352 = xor i32 %351, %337
  %353 = lshr i32 %352, 4
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %355, i8* %356, align 1, !tbaa !2447
  %357 = icmp eq i32 %337, 0
  %358 = zext i1 %357 to i8
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %358, i8* %359, align 1, !tbaa !2448
  %360 = lshr i32 %337, 31
  %361 = trunc i32 %360 to i8
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %361, i8* %362, align 1, !tbaa !2449
  %363 = lshr i32 %336, 31
  %364 = xor i32 %360, %363
  %365 = add nuw nsw i32 %364, %360
  %366 = icmp eq i32 %365, 2
  %367 = zext i1 %366 to i8
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %367, i8* %368, align 1, !tbaa !2450
  %369 = load i32, i32* %EAX
  %370 = zext i32 %369 to i64
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 3
  store i64 %372, i64* %PC
  %373 = shl i64 %370, 32
  %374 = ashr exact i64 %373, 32
  store i64 %374, i64* %RCX, align 8, !tbaa !2428
  %375 = load i64, i64* %RBP
  %376 = load i64, i64* %RCX
  %377 = mul i64 %376, 4
  %378 = add i64 %375, -1328
  %379 = add i64 %378, %377
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 8
  store i64 %381, i64* %PC
  %382 = inttoptr i64 %379 to i32*
  %383 = load i32, i32* %382
  %384 = sub i32 %383, 8
  %385 = icmp ult i32 %383, 8
  %386 = zext i1 %385 to i8
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %386, i8* %387, align 1, !tbaa !2432
  %388 = and i32 %384, 255
  %389 = call i32 @llvm.ctpop.i32(i32 %388) #16
  %390 = trunc i32 %389 to i8
  %391 = and i8 %390, 1
  %392 = xor i8 %391, 1
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %392, i8* %393, align 1, !tbaa !2446
  %394 = xor i32 %383, 8
  %395 = xor i32 %394, %384
  %396 = lshr i32 %395, 4
  %397 = trunc i32 %396 to i8
  %398 = and i8 %397, 1
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %398, i8* %399, align 1, !tbaa !2447
  %400 = icmp eq i32 %384, 0
  %401 = zext i1 %400 to i8
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %401, i8* %402, align 1, !tbaa !2448
  %403 = lshr i32 %384, 31
  %404 = trunc i32 %403 to i8
  %405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %404, i8* %405, align 1, !tbaa !2449
  %406 = lshr i32 %383, 31
  %407 = xor i32 %403, %406
  %408 = add nuw nsw i32 %407, %406
  %409 = icmp eq i32 %408, 2
  %410 = zext i1 %409 to i8
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %410, i8* %411, align 1, !tbaa !2450
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 3
  store i64 %413, i64* %PC
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %415 = load i8, i8* %414, align 1, !tbaa !2448
  %416 = icmp ne i8 %415, 0
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %418 = load i8, i8* %417, align 1, !tbaa !2449
  %419 = icmp ne i8 %418, 0
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %421 = load i8, i8* %420, align 1, !tbaa !2450
  %422 = icmp ne i8 %421, 0
  %423 = xor i1 %419, %422
  %424 = or i1 %416, %423
  %425 = zext i1 %424 to i8
  store i8 %425, i8* %DL, align 1, !tbaa !2451
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 2709
  %428 = load i8, i8* %DL
  %429 = zext i8 %428 to i64
  %430 = load i64, i64* %PC
  %431 = add i64 %430, 6
  store i64 %431, i64* %PC
  %432 = inttoptr i64 %427 to i8*
  store i8 %428, i8* %432
  br label %block_400ffe

block_4015dc:                                     ; preds = %block_4015c8
  %433 = load i64, i64* %RBP
  %434 = sub i64 %433, 8
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 3
  store i64 %436, i64* %PC
  %437 = inttoptr i64 %434 to i32*
  %438 = load i32, i32* %437
  %439 = zext i32 %438 to i64
  store i64 %439, i64* %RAX, align 8, !tbaa !2428
  %440 = load i32, i32* %EAX
  %441 = zext i32 %440 to i64
  %442 = load i64, i64* %RBP
  %443 = sub i64 %442, 4
  %444 = load i64, i64* %PC
  %445 = add i64 %444, 3
  store i64 %445, i64* %PC
  %446 = inttoptr i64 %443 to i32*
  %447 = load i32, i32* %446
  %448 = sub i32 %440, %447
  %449 = icmp ult i32 %440, %447
  %450 = zext i1 %449 to i8
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %450, i8* %451, align 1, !tbaa !2432
  %452 = and i32 %448, 255
  %453 = call i32 @llvm.ctpop.i32(i32 %452) #16
  %454 = trunc i32 %453 to i8
  %455 = and i8 %454, 1
  %456 = xor i8 %455, 1
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %456, i8* %457, align 1, !tbaa !2446
  %458 = xor i32 %447, %440
  %459 = xor i32 %458, %448
  %460 = lshr i32 %459, 4
  %461 = trunc i32 %460 to i8
  %462 = and i8 %461, 1
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %462, i8* %463, align 1, !tbaa !2447
  %464 = icmp eq i32 %448, 0
  %465 = zext i1 %464 to i8
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %465, i8* %466, align 1, !tbaa !2448
  %467 = lshr i32 %448, 31
  %468 = trunc i32 %467 to i8
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %468, i8* %469, align 1, !tbaa !2449
  %470 = lshr i32 %440, 31
  %471 = lshr i32 %447, 31
  %472 = xor i32 %471, %470
  %473 = xor i32 %467, %470
  %474 = add nuw nsw i32 %473, %472
  %475 = icmp eq i32 %474, 2
  %476 = zext i1 %475 to i8
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %476, i8* %477, align 1, !tbaa !2450
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 79
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 6
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 6
  store i64 %483, i64* %PC
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %485 = load i8, i8* %484, align 1, !tbaa !2448
  store i8 %485, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %487 = icmp ne i8 %485, 0
  %488 = select i1 %487, i64 %479, i64 %481
  store i64 %488, i64* %486, align 8, !tbaa !2428
  %489 = load i8, i8* %BRANCH_TAKEN
  %490 = icmp eq i8 %489, 1
  br i1 %490, label %block_401631, label %block_4015e8

block_4017d4:                                     ; preds = %block_401825, %block_4017cd
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.15, %block_4017cd ], [ %MEMORY.50, %block_401825 ]
  %491 = load i64, i64* %RBP
  %492 = sub i64 %491, 4
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 7
  store i64 %494, i64* %PC
  %495 = inttoptr i64 %492 to i32*
  %496 = load i32, i32* %495
  %497 = sub i32 %496, 255
  %498 = icmp ult i32 %496, 255
  %499 = zext i1 %498 to i8
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %499, i8* %500, align 1, !tbaa !2432
  %501 = and i32 %497, 255
  %502 = call i32 @llvm.ctpop.i32(i32 %501) #16
  %503 = trunc i32 %502 to i8
  %504 = and i8 %503, 1
  %505 = xor i8 %504, 1
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %505, i8* %506, align 1, !tbaa !2446
  %507 = xor i32 %496, 255
  %508 = xor i32 %507, %497
  %509 = lshr i32 %508, 4
  %510 = trunc i32 %509 to i8
  %511 = and i8 %510, 1
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %511, i8* %512, align 1, !tbaa !2447
  %513 = icmp eq i32 %497, 0
  %514 = zext i1 %513 to i8
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %514, i8* %515, align 1, !tbaa !2448
  %516 = lshr i32 %497, 31
  %517 = trunc i32 %516 to i8
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %517, i8* %518, align 1, !tbaa !2449
  %519 = lshr i32 %496, 31
  %520 = xor i32 %516, %519
  %521 = add nuw nsw i32 %520, %519
  %522 = icmp eq i32 %521, 2
  %523 = zext i1 %522 to i8
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %523, i8* %524, align 1, !tbaa !2450
  %525 = load i64, i64* %PC
  %526 = add i64 %525, 93
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 6
  %529 = load i64, i64* %PC
  %530 = add i64 %529, 6
  store i64 %530, i64* %PC
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %532 = load i8, i8* %531, align 1, !tbaa !2449
  %533 = icmp ne i8 %532, 0
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %535 = load i8, i8* %534, align 1, !tbaa !2450
  %536 = icmp ne i8 %535, 0
  %537 = xor i1 %533, %536
  %538 = xor i1 %537, true
  %539 = zext i1 %538 to i8
  store i8 %539, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %541 = select i1 %537, i64 %528, i64 %526
  store i64 %541, i64* %540, align 8, !tbaa !2428
  %542 = load i8, i8* %BRANCH_TAKEN
  %543 = icmp eq i8 %542, 1
  br i1 %543, label %block_401838, label %block_4017e1

block_4017c8:                                     ; preds = %block_401753, %block_4017c3
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.8, %block_4017c3 ], [ %MEMORY.36, %block_401753 ]
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 117
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 5
  store i64 %547, i64* %PC
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %545, i64* %548, align 8, !tbaa !2428
  br label %block_40183d

block_400bdf:                                     ; preds = %block_400bc2
  %549 = load i64, i64* %RBP
  %550 = sub i64 %549, 16
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  %553 = inttoptr i64 %550 to i32*
  %554 = load i32, i32* %553
  %555 = zext i32 %554 to i64
  store i64 %555, i64* %RAX, align 8, !tbaa !2428
  %556 = load i64, i64* %RBP
  %557 = sub i64 %556, 8
  %558 = load i32, i32* %EAX
  %559 = zext i32 %558 to i64
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 3
  store i64 %561, i64* %PC
  %562 = inttoptr i64 %557 to i32*
  store i32 %558, i32* %562
  br label %block_400be5

block_4009ea:                                     ; preds = %block_4009e0, %block_4009ce
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.10, %block_4009ce ], [ %MEMORY.10, %block_4009e0 ]
  %563 = load i64, i64* %RBP
  %564 = sub i64 %563, 4
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 4
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %564 to i32*
  %568 = load i32, i32* %567
  %569 = sext i32 %568 to i64
  store i64 %569, i64* %RAX, align 8, !tbaa !2428
  %570 = load i64, i64* %RBP
  %571 = load i64, i64* %RAX
  %572 = mul i64 %571, 4
  %573 = add i64 %570, -1488
  %574 = add i64 %573, %572
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 8
  store i64 %576, i64* %PC
  %577 = inttoptr i64 %574 to i32*
  %578 = load i32, i32* %577
  %579 = sext i32 %578 to i64
  store i64 %579, i64* %RAX, align 8, !tbaa !2428
  %580 = load i64, i64* %RAX
  %581 = mul i64 %580, 4
  %582 = add i64 %581, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 7
  store i64 %584, i64* %PC
  %585 = inttoptr i64 %582 to i32*
  %586 = load i32, i32* %585
  %587 = zext i32 %586 to i64
  store i64 %587, i64* %RCX, align 8, !tbaa !2428
  %588 = load i64, i64* %RBP
  %589 = sub i64 %588, 4
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %589 to i32*
  %593 = load i32, i32* %592
  %594 = sext i32 %593 to i64
  store i64 %594, i64* %RAX, align 8, !tbaa !2428
  %595 = load i64, i64* %RBP
  %596 = load i64, i64* %RAX
  %597 = mul i64 %596, 4
  %598 = add i64 %595, -1488
  %599 = add i64 %598, %597
  %600 = load i32, i32* %ECX
  %601 = zext i32 %600 to i64
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 7
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %599 to i32*
  store i32 %600, i32* %604
  %605 = load i64, i64* %RBP
  %606 = sub i64 %605, 4
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 3
  store i64 %608, i64* %PC
  %609 = inttoptr i64 %606 to i32*
  %610 = load i32, i32* %609
  %611 = zext i32 %610 to i64
  store i64 %611, i64* %RAX, align 8, !tbaa !2428
  %612 = load i64, i64* %RAX
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 3
  store i64 %614, i64* %PC
  %615 = trunc i64 %612 to i32
  %616 = add i32 1, %615
  %617 = zext i32 %616 to i64
  store i64 %617, i64* %RAX, align 8, !tbaa !2428
  %618 = icmp ult i32 %616, %615
  %619 = icmp ult i32 %616, 1
  %620 = or i1 %618, %619
  %621 = zext i1 %620 to i8
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %621, i8* %622, align 1, !tbaa !2432
  %623 = and i32 %616, 255
  %624 = call i32 @llvm.ctpop.i32(i32 %623) #16
  %625 = trunc i32 %624 to i8
  %626 = and i8 %625, 1
  %627 = xor i8 %626, 1
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %627, i8* %628, align 1, !tbaa !2446
  %629 = xor i64 1, %612
  %630 = trunc i64 %629 to i32
  %631 = xor i32 %630, %616
  %632 = lshr i32 %631, 4
  %633 = trunc i32 %632 to i8
  %634 = and i8 %633, 1
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %634, i8* %635, align 1, !tbaa !2447
  %636 = icmp eq i32 %616, 0
  %637 = zext i1 %636 to i8
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %637, i8* %638, align 1, !tbaa !2448
  %639 = lshr i32 %616, 31
  %640 = trunc i32 %639 to i8
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %640, i8* %641, align 1, !tbaa !2449
  %642 = lshr i32 %615, 31
  %643 = xor i32 %639, %642
  %644 = add nuw nsw i32 %643, %639
  %645 = icmp eq i32 %644, 2
  %646 = zext i1 %645 to i8
  %647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %646, i8* %647, align 1, !tbaa !2450
  %648 = load i64, i64* %RBP
  %649 = sub i64 %648, 4
  %650 = load i32, i32* %EAX
  %651 = zext i32 %650 to i64
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 3
  store i64 %653, i64* %PC
  %654 = inttoptr i64 %649 to i32*
  store i32 %650, i32* %654
  %655 = load i64, i64* %PC
  %656 = sub i64 %655, 219
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 5
  store i64 %658, i64* %PC
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %656, i64* %659, align 8, !tbaa !2428
  br label %block_400936

block_400dbf:                                     ; preds = %block_400dab
  %660 = load i64, i64* %RBP
  %661 = sub i64 %660, 1168
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 7
  store i64 %663, i64* %PC
  store i64 %661, i64* %RAX, align 8, !tbaa !2428
  %664 = load i64, i64* %RBP
  %665 = sub i64 %664, 12
  %666 = load i64, i64* %PC
  %667 = add i64 %666, 4
  store i64 %667, i64* %PC
  %668 = inttoptr i64 %665 to i32*
  %669 = load i32, i32* %668
  %670 = sext i32 %669 to i64
  store i64 %670, i64* %RCX, align 8, !tbaa !2428
  %671 = load i64, i64* %RCX
  %672 = load i64, i64* %PC
  %673 = add i64 %672, 4
  store i64 %673, i64* %PC
  %674 = shl i64 %671, 5
  %675 = icmp slt i64 %674, 0
  %676 = shl i64 %674, 1
  store i64 %676, i64* %RCX, align 8, !tbaa !2428
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %678 = zext i1 %675 to i8
  store i8 %678, i8* %677, align 1, !tbaa !2451
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %680 = trunc i64 %676 to i32
  %681 = and i32 %680, 254
  %682 = call i32 @llvm.ctpop.i32(i32 %681) #16
  %683 = trunc i32 %682 to i8
  %684 = and i8 %683, 1
  %685 = xor i8 %684, 1
  store i8 %685, i8* %679, align 1, !tbaa !2451
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %686, align 1, !tbaa !2451
  %687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %688 = icmp eq i64 %676, 0
  %689 = zext i1 %688 to i8
  store i8 %689, i8* %687, align 1, !tbaa !2451
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %691 = lshr i64 %676, 63
  %692 = trunc i64 %691 to i8
  store i8 %692, i8* %690, align 1, !tbaa !2451
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %693, align 1, !tbaa !2451
  %694 = load i64, i64* %RAX
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 3
  store i64 %696, i64* %PC
  store i64 %694, i64* %RDX, align 8, !tbaa !2428
  %697 = load i64, i64* %RDX
  %698 = load i64, i64* %RCX
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 3
  store i64 %700, i64* %PC
  %701 = add i64 %698, %697
  store i64 %701, i64* %RDX, align 8, !tbaa !2428
  %702 = icmp ult i64 %701, %697
  %703 = icmp ult i64 %701, %698
  %704 = or i1 %702, %703
  %705 = zext i1 %704 to i8
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %705, i8* %706, align 1, !tbaa !2432
  %707 = trunc i64 %701 to i32
  %708 = and i32 %707, 255
  %709 = call i32 @llvm.ctpop.i32(i32 %708) #16
  %710 = trunc i32 %709 to i8
  %711 = and i8 %710, 1
  %712 = xor i8 %711, 1
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %712, i8* %713, align 1, !tbaa !2446
  %714 = xor i64 %698, %697
  %715 = xor i64 %714, %701
  %716 = lshr i64 %715, 4
  %717 = trunc i64 %716 to i8
  %718 = and i8 %717, 1
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %718, i8* %719, align 1, !tbaa !2447
  %720 = icmp eq i64 %701, 0
  %721 = zext i1 %720 to i8
  %722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %721, i8* %722, align 1, !tbaa !2448
  %723 = lshr i64 %701, 63
  %724 = trunc i64 %723 to i8
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %724, i8* %725, align 1, !tbaa !2449
  %726 = lshr i64 %697, 63
  %727 = lshr i64 %698, 63
  %728 = xor i64 %723, %726
  %729 = xor i64 %723, %727
  %730 = add nuw nsw i64 %728, %729
  %731 = icmp eq i64 %730, 2
  %732 = zext i1 %731 to i8
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %732, i8* %733, align 1, !tbaa !2450
  %734 = load i64, i64* %RBP
  %735 = sub i64 %734, 4
  %736 = load i64, i64* %PC
  %737 = add i64 %736, 4
  store i64 %737, i64* %PC
  %738 = inttoptr i64 %735 to i32*
  %739 = load i32, i32* %738
  %740 = sext i32 %739 to i64
  store i64 %740, i64* %RCX, align 8, !tbaa !2428
  %741 = load i64, i64* %RDX
  %742 = load i64, i64* %RCX
  %743 = mul i64 %742, 4
  %744 = add i64 %743, %741
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 3
  store i64 %746, i64* %PC
  %747 = inttoptr i64 %744 to i32*
  %748 = load i32, i32* %747
  %749 = zext i32 %748 to i64
  store i64 %749, i64* %RSI, align 8, !tbaa !2428
  %750 = load i64, i64* %RBP
  %751 = sub i64 %750, 12
  %752 = load i64, i64* %PC
  %753 = add i64 %752, 3
  store i64 %753, i64* %PC
  %754 = inttoptr i64 %751 to i32*
  %755 = load i32, i32* %754
  %756 = zext i32 %755 to i64
  store i64 %756, i64* %RDI, align 8, !tbaa !2428
  %757 = load i64, i64* %RDI
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 3
  store i64 %759, i64* %PC
  %760 = trunc i64 %757 to i32
  %761 = add i32 1, %760
  %762 = zext i32 %761 to i64
  store i64 %762, i64* %RDI, align 8, !tbaa !2428
  %763 = icmp ult i32 %761, %760
  %764 = icmp ult i32 %761, 1
  %765 = or i1 %763, %764
  %766 = zext i1 %765 to i8
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %766, i8* %767, align 1, !tbaa !2432
  %768 = and i32 %761, 255
  %769 = call i32 @llvm.ctpop.i32(i32 %768) #16
  %770 = trunc i32 %769 to i8
  %771 = and i8 %770, 1
  %772 = xor i8 %771, 1
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %772, i8* %773, align 1, !tbaa !2446
  %774 = xor i64 1, %757
  %775 = trunc i64 %774 to i32
  %776 = xor i32 %775, %761
  %777 = lshr i32 %776, 4
  %778 = trunc i32 %777 to i8
  %779 = and i8 %778, 1
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %779, i8* %780, align 1, !tbaa !2447
  %781 = icmp eq i32 %761, 0
  %782 = zext i1 %781 to i8
  %783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %782, i8* %783, align 1, !tbaa !2448
  %784 = lshr i32 %761, 31
  %785 = trunc i32 %784 to i8
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %785, i8* %786, align 1, !tbaa !2449
  %787 = lshr i32 %760, 31
  %788 = xor i32 %784, %787
  %789 = add nuw nsw i32 %788, %784
  %790 = icmp eq i32 %789, 2
  %791 = zext i1 %790 to i8
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %791, i8* %792, align 1, !tbaa !2450
  %793 = load i32, i32* %EDI
  %794 = zext i32 %793 to i64
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 3
  store i64 %796, i64* %PC
  %797 = shl i64 %794, 32
  %798 = ashr exact i64 %797, 32
  store i64 %798, i64* %RCX, align 8, !tbaa !2428
  %799 = load i64, i64* %RCX
  %800 = load i64, i64* %PC
  %801 = add i64 %800, 4
  store i64 %801, i64* %PC
  %802 = shl i64 %799, 5
  %803 = icmp slt i64 %802, 0
  %804 = shl i64 %802, 1
  store i64 %804, i64* %RCX, align 8, !tbaa !2428
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %806 = zext i1 %803 to i8
  store i8 %806, i8* %805, align 1, !tbaa !2451
  %807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %808 = trunc i64 %804 to i32
  %809 = and i32 %808, 254
  %810 = call i32 @llvm.ctpop.i32(i32 %809) #16
  %811 = trunc i32 %810 to i8
  %812 = and i8 %811, 1
  %813 = xor i8 %812, 1
  store i8 %813, i8* %807, align 1, !tbaa !2451
  %814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %814, align 1, !tbaa !2451
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %816 = icmp eq i64 %804, 0
  %817 = zext i1 %816 to i8
  store i8 %817, i8* %815, align 1, !tbaa !2451
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %819 = lshr i64 %804, 63
  %820 = trunc i64 %819 to i8
  store i8 %820, i8* %818, align 1, !tbaa !2451
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %821, align 1, !tbaa !2451
  %822 = load i64, i64* %RAX
  %823 = load i64, i64* %PC
  %824 = add i64 %823, 3
  store i64 %824, i64* %PC
  store i64 %822, i64* %RDX, align 8, !tbaa !2428
  %825 = load i64, i64* %RDX
  %826 = load i64, i64* %RCX
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 3
  store i64 %828, i64* %PC
  %829 = add i64 %826, %825
  store i64 %829, i64* %RDX, align 8, !tbaa !2428
  %830 = icmp ult i64 %829, %825
  %831 = icmp ult i64 %829, %826
  %832 = or i1 %830, %831
  %833 = zext i1 %832 to i8
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %833, i8* %834, align 1, !tbaa !2432
  %835 = trunc i64 %829 to i32
  %836 = and i32 %835, 255
  %837 = call i32 @llvm.ctpop.i32(i32 %836) #16
  %838 = trunc i32 %837 to i8
  %839 = and i8 %838, 1
  %840 = xor i8 %839, 1
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %840, i8* %841, align 1, !tbaa !2446
  %842 = xor i64 %826, %825
  %843 = xor i64 %842, %829
  %844 = lshr i64 %843, 4
  %845 = trunc i64 %844 to i8
  %846 = and i8 %845, 1
  %847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %846, i8* %847, align 1, !tbaa !2447
  %848 = icmp eq i64 %829, 0
  %849 = zext i1 %848 to i8
  %850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %849, i8* %850, align 1, !tbaa !2448
  %851 = lshr i64 %829, 63
  %852 = trunc i64 %851 to i8
  %853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %852, i8* %853, align 1, !tbaa !2449
  %854 = lshr i64 %825, 63
  %855 = lshr i64 %826, 63
  %856 = xor i64 %851, %854
  %857 = xor i64 %851, %855
  %858 = add nuw nsw i64 %856, %857
  %859 = icmp eq i64 %858, 2
  %860 = zext i1 %859 to i8
  %861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %860, i8* %861, align 1, !tbaa !2450
  %862 = load i64, i64* %RBP
  %863 = sub i64 %862, 4
  %864 = load i64, i64* %PC
  %865 = add i64 %864, 4
  store i64 %865, i64* %PC
  %866 = inttoptr i64 %863 to i32*
  %867 = load i32, i32* %866
  %868 = sext i32 %867 to i64
  store i64 %868, i64* %RCX, align 8, !tbaa !2428
  %869 = load i64, i64* %RSI
  %870 = load i64, i64* %RDX
  %871 = load i64, i64* %RCX
  %872 = mul i64 %871, 4
  %873 = add i64 %872, %870
  %874 = load i64, i64* %PC
  %875 = add i64 %874, 3
  store i64 %875, i64* %PC
  %876 = trunc i64 %869 to i32
  %877 = inttoptr i64 %873 to i32*
  %878 = load i32, i32* %877
  %879 = xor i32 %878, %876
  %880 = zext i32 %879 to i64
  store i64 %880, i64* %RSI, align 8, !tbaa !2428
  %881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %881, align 1, !tbaa !2432
  %882 = and i32 %879, 255
  %883 = call i32 @llvm.ctpop.i32(i32 %882) #16
  %884 = trunc i32 %883 to i8
  %885 = and i8 %884, 1
  %886 = xor i8 %885, 1
  %887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %886, i8* %887, align 1, !tbaa !2446
  %888 = icmp eq i32 %879, 0
  %889 = zext i1 %888 to i8
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %889, i8* %890, align 1, !tbaa !2448
  %891 = lshr i32 %879, 31
  %892 = trunc i32 %891 to i8
  %893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %892, i8* %893, align 1, !tbaa !2449
  %894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %894, align 1, !tbaa !2450
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %895, align 1, !tbaa !2447
  %896 = load i64, i64* %RDX
  %897 = load i64, i64* %RCX
  %898 = mul i64 %897, 4
  %899 = add i64 %898, %896
  %900 = load i32, i32* %ESI
  %901 = zext i32 %900 to i64
  %902 = load i64, i64* %PC
  %903 = add i64 %902, 3
  store i64 %903, i64* %PC
  %904 = inttoptr i64 %899 to i32*
  store i32 %900, i32* %904
  %905 = load i64, i64* %RBP
  %906 = sub i64 %905, 12
  %907 = load i64, i64* %PC
  %908 = add i64 %907, 4
  store i64 %908, i64* %PC
  %909 = inttoptr i64 %906 to i32*
  %910 = load i32, i32* %909
  %911 = sext i32 %910 to i64
  store i64 %911, i64* %RCX, align 8, !tbaa !2428
  %912 = load i64, i64* %RCX
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 4
  store i64 %914, i64* %PC
  %915 = shl i64 %912, 5
  %916 = icmp slt i64 %915, 0
  %917 = shl i64 %915, 1
  store i64 %917, i64* %RCX, align 8, !tbaa !2428
  %918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %919 = zext i1 %916 to i8
  store i8 %919, i8* %918, align 1, !tbaa !2451
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %921 = trunc i64 %917 to i32
  %922 = and i32 %921, 254
  %923 = call i32 @llvm.ctpop.i32(i32 %922) #16
  %924 = trunc i32 %923 to i8
  %925 = and i8 %924, 1
  %926 = xor i8 %925, 1
  store i8 %926, i8* %920, align 1, !tbaa !2451
  %927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %927, align 1, !tbaa !2451
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %929 = icmp eq i64 %917, 0
  %930 = zext i1 %929 to i8
  store i8 %930, i8* %928, align 1, !tbaa !2451
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %932 = lshr i64 %917, 63
  %933 = trunc i64 %932 to i8
  store i8 %933, i8* %931, align 1, !tbaa !2451
  %934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %934, align 1, !tbaa !2451
  %935 = load i64, i64* %RAX
  %936 = load i64, i64* %PC
  %937 = add i64 %936, 3
  store i64 %937, i64* %PC
  store i64 %935, i64* %RDX, align 8, !tbaa !2428
  %938 = load i64, i64* %RDX
  %939 = load i64, i64* %RCX
  %940 = load i64, i64* %PC
  %941 = add i64 %940, 3
  store i64 %941, i64* %PC
  %942 = add i64 %939, %938
  store i64 %942, i64* %RDX, align 8, !tbaa !2428
  %943 = icmp ult i64 %942, %938
  %944 = icmp ult i64 %942, %939
  %945 = or i1 %943, %944
  %946 = zext i1 %945 to i8
  %947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %946, i8* %947, align 1, !tbaa !2432
  %948 = trunc i64 %942 to i32
  %949 = and i32 %948, 255
  %950 = call i32 @llvm.ctpop.i32(i32 %949) #16
  %951 = trunc i32 %950 to i8
  %952 = and i8 %951, 1
  %953 = xor i8 %952, 1
  %954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %953, i8* %954, align 1, !tbaa !2446
  %955 = xor i64 %939, %938
  %956 = xor i64 %955, %942
  %957 = lshr i64 %956, 4
  %958 = trunc i64 %957 to i8
  %959 = and i8 %958, 1
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %959, i8* %960, align 1, !tbaa !2447
  %961 = icmp eq i64 %942, 0
  %962 = zext i1 %961 to i8
  %963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %962, i8* %963, align 1, !tbaa !2448
  %964 = lshr i64 %942, 63
  %965 = trunc i64 %964 to i8
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %965, i8* %966, align 1, !tbaa !2449
  %967 = lshr i64 %938, 63
  %968 = lshr i64 %939, 63
  %969 = xor i64 %964, %967
  %970 = xor i64 %964, %968
  %971 = add nuw nsw i64 %969, %970
  %972 = icmp eq i64 %971, 2
  %973 = zext i1 %972 to i8
  %974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %973, i8* %974, align 1, !tbaa !2450
  %975 = load i64, i64* %RBP
  %976 = sub i64 %975, 4
  %977 = load i64, i64* %PC
  %978 = add i64 %977, 4
  store i64 %978, i64* %PC
  %979 = inttoptr i64 %976 to i32*
  %980 = load i32, i32* %979
  %981 = sext i32 %980 to i64
  store i64 %981, i64* %RCX, align 8, !tbaa !2428
  %982 = load i64, i64* %RDX
  %983 = load i64, i64* %RCX
  %984 = mul i64 %983, 4
  %985 = add i64 %984, %982
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 4
  store i64 %987, i64* %PC
  %988 = inttoptr i64 %985 to i32*
  %989 = load i32, i32* %988
  %990 = sext i32 %989 to i64
  store i64 %990, i64* %RCX, align 8, !tbaa !2428
  %991 = load i64, i64* %RCX
  %992 = mul i64 %991, 4
  %993 = add i64 %992, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 7
  store i64 %995, i64* %PC
  %996 = inttoptr i64 %993 to i32*
  %997 = load i32, i32* %996
  %998 = zext i32 %997 to i64
  store i64 %998, i64* %RSI, align 8, !tbaa !2428
  %999 = load i64, i64* %RBP
  %1000 = sub i64 %999, 12
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 4
  store i64 %1002, i64* %PC
  %1003 = inttoptr i64 %1000 to i32*
  %1004 = load i32, i32* %1003
  %1005 = sext i32 %1004 to i64
  store i64 %1005, i64* %RCX, align 8, !tbaa !2428
  %1006 = load i64, i64* %RCX
  %1007 = load i64, i64* %PC
  %1008 = add i64 %1007, 4
  store i64 %1008, i64* %PC
  %1009 = shl i64 %1006, 5
  %1010 = icmp slt i64 %1009, 0
  %1011 = shl i64 %1009, 1
  store i64 %1011, i64* %RCX, align 8, !tbaa !2428
  %1012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1013 = zext i1 %1010 to i8
  store i8 %1013, i8* %1012, align 1, !tbaa !2451
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1015 = trunc i64 %1011 to i32
  %1016 = and i32 %1015, 254
  %1017 = call i32 @llvm.ctpop.i32(i32 %1016) #16
  %1018 = trunc i32 %1017 to i8
  %1019 = and i8 %1018, 1
  %1020 = xor i8 %1019, 1
  store i8 %1020, i8* %1014, align 1, !tbaa !2451
  %1021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1021, align 1, !tbaa !2451
  %1022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1023 = icmp eq i64 %1011, 0
  %1024 = zext i1 %1023 to i8
  store i8 %1024, i8* %1022, align 1, !tbaa !2451
  %1025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1026 = lshr i64 %1011, 63
  %1027 = trunc i64 %1026 to i8
  store i8 %1027, i8* %1025, align 1, !tbaa !2451
  %1028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1028, align 1, !tbaa !2451
  %1029 = load i64, i64* %RAX
  %1030 = load i64, i64* %RCX
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 3
  store i64 %1032, i64* %PC
  %1033 = add i64 %1030, %1029
  store i64 %1033, i64* %RAX, align 8, !tbaa !2428
  %1034 = icmp ult i64 %1033, %1029
  %1035 = icmp ult i64 %1033, %1030
  %1036 = or i1 %1034, %1035
  %1037 = zext i1 %1036 to i8
  %1038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1037, i8* %1038, align 1, !tbaa !2432
  %1039 = trunc i64 %1033 to i32
  %1040 = and i32 %1039, 255
  %1041 = call i32 @llvm.ctpop.i32(i32 %1040) #16
  %1042 = trunc i32 %1041 to i8
  %1043 = and i8 %1042, 1
  %1044 = xor i8 %1043, 1
  %1045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1044, i8* %1045, align 1, !tbaa !2446
  %1046 = xor i64 %1030, %1029
  %1047 = xor i64 %1046, %1033
  %1048 = lshr i64 %1047, 4
  %1049 = trunc i64 %1048 to i8
  %1050 = and i8 %1049, 1
  %1051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1050, i8* %1051, align 1, !tbaa !2447
  %1052 = icmp eq i64 %1033, 0
  %1053 = zext i1 %1052 to i8
  %1054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1053, i8* %1054, align 1, !tbaa !2448
  %1055 = lshr i64 %1033, 63
  %1056 = trunc i64 %1055 to i8
  %1057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1056, i8* %1057, align 1, !tbaa !2449
  %1058 = lshr i64 %1029, 63
  %1059 = lshr i64 %1030, 63
  %1060 = xor i64 %1055, %1058
  %1061 = xor i64 %1055, %1059
  %1062 = add nuw nsw i64 %1060, %1061
  %1063 = icmp eq i64 %1062, 2
  %1064 = zext i1 %1063 to i8
  %1065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1064, i8* %1065, align 1, !tbaa !2450
  %1066 = load i64, i64* %RBP
  %1067 = sub i64 %1066, 4
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 4
  store i64 %1069, i64* %PC
  %1070 = inttoptr i64 %1067 to i32*
  %1071 = load i32, i32* %1070
  %1072 = sext i32 %1071 to i64
  store i64 %1072, i64* %RCX, align 8, !tbaa !2428
  %1073 = load i64, i64* %RAX
  %1074 = load i64, i64* %RCX
  %1075 = mul i64 %1074, 4
  %1076 = add i64 %1075, %1073
  %1077 = load i32, i32* %ESI
  %1078 = zext i32 %1077 to i64
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 3
  store i64 %1080, i64* %PC
  %1081 = inttoptr i64 %1076 to i32*
  store i32 %1077, i32* %1081
  %1082 = load i64, i64* %RBP
  %1083 = sub i64 %1082, 4
  %1084 = load i64, i64* %PC
  %1085 = add i64 %1084, 3
  store i64 %1085, i64* %PC
  %1086 = inttoptr i64 %1083 to i32*
  %1087 = load i32, i32* %1086
  %1088 = zext i32 %1087 to i64
  store i64 %1088, i64* %RAX, align 8, !tbaa !2428
  %1089 = load i64, i64* %RAX
  %1090 = load i64, i64* %PC
  %1091 = add i64 %1090, 3
  store i64 %1091, i64* %PC
  %1092 = trunc i64 %1089 to i32
  %1093 = add i32 1, %1092
  %1094 = zext i32 %1093 to i64
  store i64 %1094, i64* %RAX, align 8, !tbaa !2428
  %1095 = icmp ult i32 %1093, %1092
  %1096 = icmp ult i32 %1093, 1
  %1097 = or i1 %1095, %1096
  %1098 = zext i1 %1097 to i8
  %1099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1098, i8* %1099, align 1, !tbaa !2432
  %1100 = and i32 %1093, 255
  %1101 = call i32 @llvm.ctpop.i32(i32 %1100) #16
  %1102 = trunc i32 %1101 to i8
  %1103 = and i8 %1102, 1
  %1104 = xor i8 %1103, 1
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1104, i8* %1105, align 1, !tbaa !2446
  %1106 = xor i64 1, %1089
  %1107 = trunc i64 %1106 to i32
  %1108 = xor i32 %1107, %1093
  %1109 = lshr i32 %1108, 4
  %1110 = trunc i32 %1109 to i8
  %1111 = and i8 %1110, 1
  %1112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1111, i8* %1112, align 1, !tbaa !2447
  %1113 = icmp eq i32 %1093, 0
  %1114 = zext i1 %1113 to i8
  %1115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1114, i8* %1115, align 1, !tbaa !2448
  %1116 = lshr i32 %1093, 31
  %1117 = trunc i32 %1116 to i8
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1117, i8* %1118, align 1, !tbaa !2449
  %1119 = lshr i32 %1092, 31
  %1120 = xor i32 %1116, %1119
  %1121 = add nuw nsw i32 %1120, %1116
  %1122 = icmp eq i32 %1121, 2
  %1123 = zext i1 %1122 to i8
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1123, i8* %1124, align 1, !tbaa !2450
  %1125 = load i64, i64* %RBP
  %1126 = sub i64 %1125, 4
  %1127 = load i32, i32* %EAX
  %1128 = zext i32 %1127 to i64
  %1129 = load i64, i64* %PC
  %1130 = add i64 %1129, 3
  store i64 %1130, i64* %PC
  %1131 = inttoptr i64 %1126 to i32*
  store i32 %1127, i32* %1131
  %1132 = load i64, i64* %PC
  %1133 = sub i64 %1132, 133
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 5
  store i64 %1135, i64* %PC
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1133, i64* %1136, align 8, !tbaa !2428
  br label %block_400dab

block_4009bb:                                     ; preds = %block_400963, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.10, %block_400963 ], [ %2636, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5 ]
  %1137 = load i64, i64* %PC
  %1138 = add i64 %1137, 5
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 5
  store i64 %1140, i64* %PC
  %1141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1138, i64* %1141, align 8, !tbaa !2428
  %1142 = load i64, i64* %RBP
  %1143 = sub i64 %1142, 8
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 3
  store i64 %1145, i64* %PC
  %1146 = inttoptr i64 %1143 to i32*
  %1147 = load i32, i32* %1146
  %1148 = zext i32 %1147 to i64
  store i64 %1148, i64* %RAX, align 8, !tbaa !2428
  %1149 = load i64, i64* %RAX
  %1150 = load i64, i64* %PC
  %1151 = add i64 %1150, 3
  store i64 %1151, i64* %PC
  %1152 = trunc i64 %1149 to i32
  %1153 = add i32 1, %1152
  %1154 = zext i32 %1153 to i64
  store i64 %1154, i64* %RAX, align 8, !tbaa !2428
  %1155 = icmp ult i32 %1153, %1152
  %1156 = icmp ult i32 %1153, 1
  %1157 = or i1 %1155, %1156
  %1158 = zext i1 %1157 to i8
  %1159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1158, i8* %1159, align 1, !tbaa !2432
  %1160 = and i32 %1153, 255
  %1161 = call i32 @llvm.ctpop.i32(i32 %1160) #16
  %1162 = trunc i32 %1161 to i8
  %1163 = and i8 %1162, 1
  %1164 = xor i8 %1163, 1
  %1165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1164, i8* %1165, align 1, !tbaa !2446
  %1166 = xor i64 1, %1149
  %1167 = trunc i64 %1166 to i32
  %1168 = xor i32 %1167, %1153
  %1169 = lshr i32 %1168, 4
  %1170 = trunc i32 %1169 to i8
  %1171 = and i8 %1170, 1
  %1172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1171, i8* %1172, align 1, !tbaa !2447
  %1173 = icmp eq i32 %1153, 0
  %1174 = zext i1 %1173 to i8
  %1175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1174, i8* %1175, align 1, !tbaa !2448
  %1176 = lshr i32 %1153, 31
  %1177 = trunc i32 %1176 to i8
  %1178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1177, i8* %1178, align 1, !tbaa !2449
  %1179 = lshr i32 %1152, 31
  %1180 = xor i32 %1176, %1179
  %1181 = add nuw nsw i32 %1180, %1176
  %1182 = icmp eq i32 %1181, 2
  %1183 = zext i1 %1182 to i8
  %1184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1183, i8* %1184, align 1, !tbaa !2450
  %1185 = load i64, i64* %RBP
  %1186 = sub i64 %1185, 8
  %1187 = load i32, i32* %EAX
  %1188 = zext i32 %1187 to i64
  %1189 = load i64, i64* %PC
  %1190 = add i64 %1189, 3
  store i64 %1190, i64* %PC
  %1191 = inttoptr i64 %1186 to i32*
  store i32 %1187, i32* %1191
  %1192 = load i64, i64* %PC
  %1193 = sub i64 %1192, 115
  %1194 = load i64, i64* %PC
  %1195 = add i64 %1194, 5
  store i64 %1195, i64* %PC
  %1196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1193, i64* %1196, align 8, !tbaa !2428
  br label %block_400956

block_4016f7:                                     ; preds = %block_4016ea
  %1197 = load i64, i64* %RBP
  %1198 = sub i64 %1197, 4
  %1199 = load i64, i64* %PC
  %1200 = add i64 %1199, 4
  store i64 %1200, i64* %PC
  %1201 = inttoptr i64 %1198 to i32*
  %1202 = load i32, i32* %1201
  %1203 = sext i32 %1202 to i64
  store i64 %1203, i64* %RAX, align 8, !tbaa !2428
  %1204 = load i64, i64* %RAX
  %1205 = mul i64 %1204, 4
  %1206 = add i64 %1205, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 8
  store i64 %1208, i64* %PC
  %1209 = inttoptr i64 %1206 to i32*
  %1210 = load i32, i32* %1209
  %1211 = sub i32 %1210, -1
  %1212 = icmp ult i32 %1210, -1
  %1213 = zext i1 %1212 to i8
  %1214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1213, i8* %1214, align 1, !tbaa !2432
  %1215 = and i32 %1211, 255
  %1216 = call i32 @llvm.ctpop.i32(i32 %1215) #16
  %1217 = trunc i32 %1216 to i8
  %1218 = and i8 %1217, 1
  %1219 = xor i8 %1218, 1
  %1220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1219, i8* %1220, align 1, !tbaa !2446
  %1221 = xor i32 %1210, -1
  %1222 = xor i32 %1221, %1211
  %1223 = lshr i32 %1222, 4
  %1224 = trunc i32 %1223 to i8
  %1225 = and i8 %1224, 1
  %1226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1225, i8* %1226, align 1, !tbaa !2447
  %1227 = icmp eq i32 %1211, 0
  %1228 = zext i1 %1227 to i8
  %1229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1228, i8* %1229, align 1, !tbaa !2448
  %1230 = lshr i32 %1211, 31
  %1231 = trunc i32 %1230 to i8
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1231, i8* %1232, align 1, !tbaa !2449
  %1233 = lshr i32 %1210, 31
  %1234 = xor i32 %1233, 1
  %1235 = xor i32 %1230, %1233
  %1236 = add nuw nsw i32 %1235, %1234
  %1237 = icmp eq i32 %1236, 2
  %1238 = zext i1 %1237 to i8
  %1239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1238, i8* %1239, align 1, !tbaa !2450
  %1240 = load i64, i64* %PC
  %1241 = add i64 %1240, 41
  %1242 = load i64, i64* %PC
  %1243 = add i64 %1242, 6
  %1244 = load i64, i64* %PC
  %1245 = add i64 %1244, 6
  store i64 %1245, i64* %PC
  %1246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1247 = load i8, i8* %1246, align 1, !tbaa !2448
  store i8 %1247, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1249 = icmp ne i8 %1247, 0
  %1250 = select i1 %1249, i64 %1241, i64 %1243
  store i64 %1250, i64* %1248, align 8, !tbaa !2428
  %1251 = load i8, i8* %BRANCH_TAKEN
  %1252 = icmp eq i8 %1251, 1
  %1253 = load i64, i64* %RBP
  %1254 = sub i64 %1253, 4
  %1255 = load i64, i64* %PC
  %1256 = add i64 %1255, 4
  store i64 %1256, i64* %PC
  %1257 = inttoptr i64 %1254 to i32*
  %1258 = load i32, i32* %1257
  %1259 = sext i32 %1258 to i64
  store i64 %1259, i64* %RAX, align 8, !tbaa !2428
  %1260 = load i64, i64* %RAX
  %1261 = mul i64 %1260, 4
  %1262 = add i64 %1261, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %1263 = load i64, i64* %PC
  br i1 %1252, label %block_40172c, label %block_401709

block_400ba7:                                     ; preds = %block_400b8b
  %1264 = load i64, i64* %RBP
  %1265 = sub i64 %1264, 16
  %1266 = load i64, i64* %PC
  %1267 = add i64 %1266, 4
  store i64 %1267, i64* %PC
  %1268 = inttoptr i64 %1265 to i32*
  %1269 = load i32, i32* %1268
  %1270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1270, align 1, !tbaa !2432
  %1271 = and i32 %1269, 255
  %1272 = call i32 @llvm.ctpop.i32(i32 %1271) #16
  %1273 = trunc i32 %1272 to i8
  %1274 = and i8 %1273, 1
  %1275 = xor i8 %1274, 1
  %1276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1275, i8* %1276, align 1, !tbaa !2446
  %1277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1277, align 1, !tbaa !2447
  %1278 = icmp eq i32 %1269, 0
  %1279 = zext i1 %1278 to i8
  %1280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1279, i8* %1280, align 1, !tbaa !2448
  %1281 = lshr i32 %1269, 31
  %1282 = trunc i32 %1281 to i8
  %1283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1282, i8* %1283, align 1, !tbaa !2449
  %1284 = lshr i32 %1269, 31
  %1285 = xor i32 %1281, %1284
  %1286 = add nuw nsw i32 %1285, %1284
  %1287 = icmp eq i32 %1286, 2
  %1288 = zext i1 %1287 to i8
  %1289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1288, i8* %1289, align 1, !tbaa !2450
  %1290 = load i64, i64* %PC
  %1291 = add i64 %1290, 3
  store i64 %1291, i64* %PC
  %1292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1293 = load i8, i8* %1292, align 1, !tbaa !2448
  %1294 = icmp eq i8 %1293, 0
  %1295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1296 = load i8, i8* %1295, align 1, !tbaa !2449
  %1297 = icmp ne i8 %1296, 0
  %1298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1299 = load i8, i8* %1298, align 1, !tbaa !2450
  %1300 = icmp ne i8 %1299, 0
  %1301 = xor i1 %1297, %1300
  %1302 = xor i1 %1301, true
  %1303 = and i1 %1294, %1302
  %1304 = zext i1 %1303 to i8
  store i8 %1304, i8* %AL, align 1, !tbaa !2451
  %1305 = load i64, i64* %RBP
  %1306 = sub i64 %1305, 2693
  %1307 = load i8, i8* %AL
  %1308 = zext i8 %1307 to i64
  %1309 = load i64, i64* %PC
  %1310 = add i64 %1309, 6
  store i64 %1310, i64* %PC
  %1311 = inttoptr i64 %1306 to i8*
  store i8 %1307, i8* %1311
  br label %block_400bb4

block_400da4:                                     ; preds = %block_400ce3
  %1312 = sub i64 %7120, 4
  %1313 = load i64, i64* %PC
  %1314 = add i64 %1313, 7
  store i64 %1314, i64* %PC
  %1315 = inttoptr i64 %1312 to i32*
  store i32 0, i32* %1315
  br label %block_400dab

block_4017a1:                                     ; preds = %block_40176c
  %1316 = add i64 %2762, 11
  store i64 %1316, i64* %PC
  %1317 = inttoptr i64 %2761 to i32*
  store i32 0, i32* %1317
  br label %block_4017b0

block_401644:                                     ; preds = %block_4015c8
  %1318 = load i64, i64* %PC
  %1319 = add i64 %1318, 5
  store i64 %1319, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %1320 = load i64, i64* %RBP
  %1321 = sub i64 %1320, 16
  %1322 = load i64, i64* %PC
  %1323 = add i64 %1322, 3
  store i64 %1323, i64* %PC
  %1324 = inttoptr i64 %1321 to i32*
  %1325 = load i32, i32* %1324
  %1326 = zext i32 %1325 to i64
  store i64 %1326, i64* %RCX, align 8, !tbaa !2428
  %1327 = load i64, i64* %RBP
  %1328 = sub i64 %1327, 2732
  %1329 = load i32, i32* %EAX
  %1330 = zext i32 %1329 to i64
  %1331 = load i64, i64* %PC
  %1332 = add i64 %1331, 6
  store i64 %1332, i64* %PC
  %1333 = inttoptr i64 %1328 to i32*
  store i32 %1329, i32* %1333
  %1334 = load i32, i32* %ECX
  %1335 = zext i32 %1334 to i64
  %1336 = load i64, i64* %PC
  %1337 = add i64 %1336, 2
  store i64 %1337, i64* %PC
  %1338 = and i64 %1335, 4294967295
  store i64 %1338, i64* %RAX, align 8, !tbaa !2428
  %1339 = load i64, i64* %PC
  %1340 = add i64 %1339, 1
  store i64 %1340, i64* %PC
  %1341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1343 = bitcast %union.anon* %1342 to i32*
  %1344 = load i32, i32* %1343, align 8, !tbaa !2452
  %1345 = sext i32 %1344 to i64
  %1346 = lshr i64 %1345, 32
  store i64 %1346, i64* %1341, align 8, !tbaa !2428
  %1347 = load i64, i64* %RBP
  %1348 = sub i64 %1347, 2732
  %1349 = load i64, i64* %PC
  %1350 = add i64 %1349, 6
  store i64 %1350, i64* %PC
  %1351 = inttoptr i64 %1348 to i32*
  %1352 = load i32, i32* %1351
  %1353 = zext i32 %1352 to i64
  store i64 %1353, i64* %RCX, align 8, !tbaa !2428
  %1354 = load i32, i32* %ECX
  %1355 = zext i32 %1354 to i64
  %1356 = load i64, i64* %PC
  %1357 = add i64 %1356, 2
  store i64 %1357, i64* %PC
  %1358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1359 = bitcast %union.anon* %1358 to i32*
  %1360 = load i32, i32* %1359, align 8, !tbaa !2452
  %1361 = zext i32 %1360 to i64
  %1362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %1363 = bitcast %union.anon* %1362 to i32*
  %1364 = load i32, i32* %1363, align 8, !tbaa !2452
  %1365 = zext i32 %1364 to i64
  %1366 = shl i64 %1355, 32
  %1367 = ashr exact i64 %1366, 32
  %1368 = shl nuw i64 %1365, 32
  %1369 = or i64 %1368, %1361
  %1370 = sdiv i64 %1369, %1367
  %1371 = shl i64 %1370, 32
  %1372 = ashr exact i64 %1371, 32
  %1373 = icmp eq i64 %1370, %1372
  br i1 %1373, label %1378, label %1374

; <label>:1374:                                   ; preds = %block_401644
  %1375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1376 = load i64, i64* %1375, align 8, !tbaa !2428
  %1377 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1376, %struct.Memory* %MEMORY.51) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit8

; <label>:1378:                                   ; preds = %block_401644
  %1379 = srem i64 %1369, %1367
  %1380 = getelementptr inbounds %union.anon, %union.anon* %1358, i64 0, i32 0
  %1381 = and i64 %1370, 4294967295
  store i64 %1381, i64* %1380, align 8, !tbaa !2428
  %1382 = getelementptr inbounds %union.anon, %union.anon* %1362, i64 0, i32 0
  %1383 = and i64 %1379, 4294967295
  store i64 %1383, i64* %1382, align 8, !tbaa !2428
  %1384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1384, align 1, !tbaa !2432
  %1385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1385, align 1, !tbaa !2446
  %1386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1386, align 1, !tbaa !2447
  %1387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1387, align 1, !tbaa !2448
  %1388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1388, align 1, !tbaa !2449
  %1389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1389, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit8

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit8: ; preds = %1374, %1378
  %1390 = phi %struct.Memory* [ %1377, %1374 ], [ %MEMORY.51, %1378 ]
  %1391 = load i64, i64* %RBP
  %1392 = sub i64 %1391, 16
  %1393 = load i32, i32* %EDX
  %1394 = zext i32 %1393 to i64
  %1395 = load i64, i64* %PC
  %1396 = add i64 %1395, 3
  store i64 %1396, i64* %PC
  %1397 = inttoptr i64 %1392 to i32*
  store i32 %1393, i32* %1397
  %1398 = load i64, i64* %RBP
  %1399 = sub i64 %1398, 4
  %1400 = load i64, i64* %PC
  %1401 = add i64 %1400, 4
  store i64 %1401, i64* %PC
  %1402 = inttoptr i64 %1399 to i32*
  %1403 = load i32, i32* %1402
  %1404 = sext i32 %1403 to i64
  store i64 %1404, i64* %RSI, align 8, !tbaa !2428
  %1405 = load i64, i64* %RBP
  %1406 = load i64, i64* %RSI
  %1407 = mul i64 %1406, 4
  %1408 = add i64 %1405, -1568
  %1409 = add i64 %1408, %1407
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 8
  store i64 %1411, i64* %PC
  %1412 = inttoptr i64 %1409 to i32*
  %1413 = load i32, i32* %1412
  %1414 = sext i32 %1413 to i64
  store i64 %1414, i64* %RSI, align 8, !tbaa !2428
  %1415 = load i64, i64* %RBP
  %1416 = load i64, i64* %RSI
  %1417 = mul i64 %1416, 4
  %1418 = add i64 %1415, -2640
  %1419 = add i64 %1418, %1417
  %1420 = load i64, i64* %PC
  %1421 = add i64 %1420, 7
  store i64 %1421, i64* %PC
  %1422 = inttoptr i64 %1419 to i32*
  %1423 = load i32, i32* %1422
  %1424 = zext i32 %1423 to i64
  store i64 %1424, i64* %RDX, align 8, !tbaa !2428
  %1425 = load i64, i64* %RDX
  %1426 = load i64, i64* %RBP
  %1427 = sub i64 %1426, 16
  %1428 = load i64, i64* %PC
  %1429 = add i64 %1428, 3
  store i64 %1429, i64* %PC
  %1430 = trunc i64 %1425 to i32
  %1431 = inttoptr i64 %1427 to i32*
  %1432 = load i32, i32* %1431
  %1433 = sub i32 %1430, %1432
  %1434 = zext i32 %1433 to i64
  store i64 %1434, i64* %RDX, align 8, !tbaa !2428
  %1435 = icmp ult i32 %1430, %1432
  %1436 = zext i1 %1435 to i8
  %1437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1436, i8* %1437, align 1, !tbaa !2432
  %1438 = and i32 %1433, 255
  %1439 = call i32 @llvm.ctpop.i32(i32 %1438) #16
  %1440 = trunc i32 %1439 to i8
  %1441 = and i8 %1440, 1
  %1442 = xor i8 %1441, 1
  %1443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1442, i8* %1443, align 1, !tbaa !2446
  %1444 = xor i32 %1432, %1430
  %1445 = xor i32 %1444, %1433
  %1446 = lshr i32 %1445, 4
  %1447 = trunc i32 %1446 to i8
  %1448 = and i8 %1447, 1
  %1449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1448, i8* %1449, align 1, !tbaa !2447
  %1450 = icmp eq i32 %1433, 0
  %1451 = zext i1 %1450 to i8
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1451, i8* %1452, align 1, !tbaa !2448
  %1453 = lshr i32 %1433, 31
  %1454 = trunc i32 %1453 to i8
  %1455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1454, i8* %1455, align 1, !tbaa !2449
  %1456 = lshr i32 %1430, 31
  %1457 = lshr i32 %1432, 31
  %1458 = xor i32 %1457, %1456
  %1459 = xor i32 %1453, %1456
  %1460 = add nuw nsw i32 %1459, %1458
  %1461 = icmp eq i32 %1460, 2
  %1462 = zext i1 %1461 to i8
  %1463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1462, i8* %1463, align 1, !tbaa !2450
  %1464 = load i64, i64* %RDX
  %1465 = load i64, i64* %PC
  %1466 = add i64 %1465, 6
  store i64 %1466, i64* %PC
  %1467 = trunc i64 %1464 to i32
  %1468 = add i32 255, %1467
  %1469 = zext i32 %1468 to i64
  store i64 %1469, i64* %RDX, align 8, !tbaa !2428
  %1470 = icmp ult i32 %1468, %1467
  %1471 = icmp ult i32 %1468, 255
  %1472 = or i1 %1470, %1471
  %1473 = zext i1 %1472 to i8
  %1474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1473, i8* %1474, align 1, !tbaa !2432
  %1475 = and i32 %1468, 255
  %1476 = call i32 @llvm.ctpop.i32(i32 %1475) #16
  %1477 = trunc i32 %1476 to i8
  %1478 = and i8 %1477, 1
  %1479 = xor i8 %1478, 1
  %1480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1479, i8* %1480, align 1, !tbaa !2446
  %1481 = xor i64 255, %1464
  %1482 = trunc i64 %1481 to i32
  %1483 = xor i32 %1482, %1468
  %1484 = lshr i32 %1483, 4
  %1485 = trunc i32 %1484 to i8
  %1486 = and i8 %1485, 1
  %1487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1486, i8* %1487, align 1, !tbaa !2447
  %1488 = icmp eq i32 %1468, 0
  %1489 = zext i1 %1488 to i8
  %1490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1489, i8* %1490, align 1, !tbaa !2448
  %1491 = lshr i32 %1468, 31
  %1492 = trunc i32 %1491 to i8
  %1493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1492, i8* %1493, align 1, !tbaa !2449
  %1494 = lshr i32 %1467, 31
  %1495 = xor i32 %1491, %1494
  %1496 = add nuw nsw i32 %1495, %1491
  %1497 = icmp eq i32 %1496, 2
  %1498 = zext i1 %1497 to i8
  %1499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1498, i8* %1499, align 1, !tbaa !2450
  %1500 = load i32, i32* %EDX
  %1501 = zext i32 %1500 to i64
  %1502 = load i64, i64* %PC
  %1503 = add i64 %1502, 2
  store i64 %1503, i64* %PC
  %1504 = and i64 %1501, 4294967295
  store i64 %1504, i64* %RAX, align 8, !tbaa !2428
  %1505 = load i64, i64* %PC
  %1506 = add i64 %1505, 1
  store i64 %1506, i64* %PC
  %1507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1509 = bitcast %union.anon* %1508 to i32*
  %1510 = load i32, i32* %1509, align 8, !tbaa !2452
  %1511 = sext i32 %1510 to i64
  %1512 = lshr i64 %1511, 32
  store i64 %1512, i64* %1507, align 8, !tbaa !2428
  %1513 = load i32, i32* %ECX
  %1514 = zext i32 %1513 to i64
  %1515 = load i64, i64* %PC
  %1516 = add i64 %1515, 2
  store i64 %1516, i64* %PC
  %1517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1518 = bitcast %union.anon* %1517 to i32*
  %1519 = load i32, i32* %1518, align 8, !tbaa !2452
  %1520 = zext i32 %1519 to i64
  %1521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %1522 = bitcast %union.anon* %1521 to i32*
  %1523 = load i32, i32* %1522, align 8, !tbaa !2452
  %1524 = zext i32 %1523 to i64
  %1525 = shl i64 %1514, 32
  %1526 = ashr exact i64 %1525, 32
  %1527 = shl nuw i64 %1524, 32
  %1528 = or i64 %1527, %1520
  %1529 = sdiv i64 %1528, %1526
  %1530 = shl i64 %1529, 32
  %1531 = ashr exact i64 %1530, 32
  %1532 = icmp eq i64 %1529, %1531
  br i1 %1532, label %1537, label %1533

; <label>:1533:                                   ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit8
  %1534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1535 = load i64, i64* %1534, align 8, !tbaa !2428
  %1536 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1535, %struct.Memory* %1390) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7

; <label>:1537:                                   ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit8
  %1538 = srem i64 %1528, %1526
  %1539 = getelementptr inbounds %union.anon, %union.anon* %1517, i64 0, i32 0
  %1540 = and i64 %1529, 4294967295
  store i64 %1540, i64* %1539, align 8, !tbaa !2428
  %1541 = getelementptr inbounds %union.anon, %union.anon* %1521, i64 0, i32 0
  %1542 = and i64 %1538, 4294967295
  store i64 %1542, i64* %1541, align 8, !tbaa !2428
  %1543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1543, align 1, !tbaa !2432
  %1544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1544, align 1, !tbaa !2446
  %1545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1545, align 1, !tbaa !2447
  %1546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1546, align 1, !tbaa !2448
  %1547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1547, align 1, !tbaa !2449
  %1548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1548, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7: ; preds = %1533, %1537
  %1549 = phi %struct.Memory* [ %1536, %1533 ], [ %1390, %1537 ]
  %1550 = load i32, i32* %EDX
  %1551 = zext i32 %1550 to i64
  %1552 = load i64, i64* %PC
  %1553 = add i64 %1552, 3
  store i64 %1553, i64* %PC
  %1554 = shl i64 %1551, 32
  %1555 = ashr exact i64 %1554, 32
  store i64 %1555, i64* %RSI, align 8, !tbaa !2428
  %1556 = load i64, i64* %RSI
  %1557 = mul i64 %1556, 4
  %1558 = add i64 %1557, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %1559 = load i64, i64* %PC
  %1560 = add i64 %1559, 7
  store i64 %1560, i64* %PC
  %1561 = inttoptr i64 %1558 to i32*
  %1562 = load i32, i32* %1561
  %1563 = zext i32 %1562 to i64
  store i64 %1563, i64* %RDX, align 8, !tbaa !2428
  %1564 = load i64, i64* %RBP
  %1565 = sub i64 %1564, 4
  %1566 = load i64, i64* %PC
  %1567 = add i64 %1566, 4
  store i64 %1567, i64* %PC
  %1568 = inttoptr i64 %1565 to i32*
  %1569 = load i32, i32* %1568
  %1570 = sext i32 %1569 to i64
  store i64 %1570, i64* %RSI, align 8, !tbaa !2428
  %1571 = load i64, i64* %RBP
  %1572 = load i64, i64* %RSI
  %1573 = mul i64 %1572, 4
  %1574 = add i64 %1571, -1568
  %1575 = add i64 %1574, %1573
  %1576 = load i64, i64* %PC
  %1577 = add i64 %1576, 8
  store i64 %1577, i64* %PC
  %1578 = inttoptr i64 %1575 to i32*
  %1579 = load i32, i32* %1578
  %1580 = sext i32 %1579 to i64
  store i64 %1580, i64* %RSI, align 8, !tbaa !2428
  %1581 = load i64, i64* %RBP
  %1582 = load i64, i64* %RSI
  %1583 = mul i64 %1582, 4
  %1584 = add i64 %1581, -2640
  %1585 = add i64 %1584, %1583
  %1586 = load i32, i32* %EDX
  %1587 = zext i32 %1586 to i64
  %1588 = load i64, i64* %PC
  %1589 = add i64 %1588, 7
  store i64 %1589, i64* %PC
  %1590 = inttoptr i64 %1585 to i32*
  store i32 %1586, i32* %1590
  %1591 = load i64, i64* %RBP
  %1592 = sub i64 %1591, 4
  %1593 = load i64, i64* %PC
  %1594 = add i64 %1593, 4
  store i64 %1594, i64* %PC
  %1595 = inttoptr i64 %1592 to i32*
  %1596 = load i32, i32* %1595
  %1597 = sext i32 %1596 to i64
  store i64 %1597, i64* %RSI, align 8, !tbaa !2428
  %1598 = load i64, i64* %RBP
  %1599 = load i64, i64* %RSI
  %1600 = mul i64 %1599, 4
  %1601 = add i64 %1598, -1568
  %1602 = add i64 %1601, %1600
  %1603 = load i64, i64* %PC
  %1604 = add i64 %1603, 8
  store i64 %1604, i64* %PC
  %1605 = inttoptr i64 %1602 to i32*
  %1606 = load i32, i32* %1605
  %1607 = sext i32 %1606 to i64
  store i64 %1607, i64* %RSI, align 8, !tbaa !2428
  %1608 = load i64, i64* %RBP
  %1609 = load i64, i64* %RSI
  %1610 = mul i64 %1609, 4
  %1611 = add i64 %1608, -2640
  %1612 = add i64 %1611, %1610
  %1613 = load i64, i64* %PC
  %1614 = add i64 %1613, 7
  store i64 %1614, i64* %PC
  %1615 = inttoptr i64 %1612 to i32*
  %1616 = load i32, i32* %1615
  %1617 = zext i32 %1616 to i64
  store i64 %1617, i64* %RDX, align 8, !tbaa !2428
  %1618 = load i64, i64* %RBP
  %1619 = sub i64 %1618, 4
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 4
  store i64 %1621, i64* %PC
  %1622 = inttoptr i64 %1619 to i32*
  %1623 = load i32, i32* %1622
  %1624 = sext i32 %1623 to i64
  store i64 %1624, i64* %RSI, align 8, !tbaa !2428
  %1625 = load i64, i64* %RBP
  %1626 = load i64, i64* %RSI
  %1627 = mul i64 %1626, 4
  %1628 = add i64 %1625, -1568
  %1629 = add i64 %1628, %1627
  %1630 = load i64, i64* %PC
  %1631 = add i64 %1630, 8
  store i64 %1631, i64* %PC
  %1632 = inttoptr i64 %1629 to i32*
  %1633 = load i32, i32* %1632
  %1634 = sext i32 %1633 to i64
  store i64 %1634, i64* %RSI, align 8, !tbaa !2428
  %1635 = load i64, i64* %RDX
  %1636 = load i64, i64* %RSI
  %1637 = mul i64 %1636, 4
  %1638 = add i64 %1637, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %1639 = load i64, i64* %PC
  %1640 = add i64 %1639, 7
  store i64 %1640, i64* %PC
  %1641 = trunc i64 %1635 to i32
  %1642 = inttoptr i64 %1638 to i32*
  %1643 = load i32, i32* %1642
  %1644 = xor i32 %1643, %1641
  %1645 = zext i32 %1644 to i64
  store i64 %1645, i64* %RDX, align 8, !tbaa !2428
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1646, align 1, !tbaa !2432
  %1647 = and i32 %1644, 255
  %1648 = call i32 @llvm.ctpop.i32(i32 %1647) #16
  %1649 = trunc i32 %1648 to i8
  %1650 = and i8 %1649, 1
  %1651 = xor i8 %1650, 1
  %1652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1651, i8* %1652, align 1, !tbaa !2446
  %1653 = icmp eq i32 %1644, 0
  %1654 = zext i1 %1653 to i8
  %1655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1654, i8* %1655, align 1, !tbaa !2448
  %1656 = lshr i32 %1644, 31
  %1657 = trunc i32 %1656 to i8
  %1658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1657, i8* %1658, align 1, !tbaa !2449
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1659, align 1, !tbaa !2450
  %1660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1660, align 1, !tbaa !2447
  %1661 = load i64, i64* %RSI
  %1662 = mul i64 %1661, 4
  %1663 = add i64 %1662, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %1664 = load i32, i32* %EDX
  %1665 = zext i32 %1664 to i64
  %1666 = load i64, i64* %PC
  %1667 = add i64 %1666, 7
  store i64 %1667, i64* %PC
  %1668 = inttoptr i64 %1663 to i32*
  store i32 %1664, i32* %1668
  br label %block_4016cb

block_400bc2:                                     ; preds = %block_400bb4
  %1669 = load i64, i64* %PC
  %1670 = add i64 %1669, 19
  %1671 = load i64, i64* %PC
  %1672 = add i64 %1671, 5
  store i64 %1672, i64* %PC
  %1673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1670, i64* %1673, align 8, !tbaa !2428
  %1674 = load i64, i64* %RBP
  %1675 = sub i64 %1674, 16
  %1676 = load i64, i64* %PC
  %1677 = add i64 %1676, 4
  store i64 %1677, i64* %PC
  %1678 = inttoptr i64 %1675 to i32*
  %1679 = load i32, i32* %1678
  %1680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1680, align 1, !tbaa !2432
  %1681 = and i32 %1679, 255
  %1682 = call i32 @llvm.ctpop.i32(i32 %1681) #16
  %1683 = trunc i32 %1682 to i8
  %1684 = and i8 %1683, 1
  %1685 = xor i8 %1684, 1
  %1686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1685, i8* %1686, align 1, !tbaa !2446
  %1687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1687, align 1, !tbaa !2447
  %1688 = icmp eq i32 %1679, 0
  %1689 = zext i1 %1688 to i8
  %1690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1689, i8* %1690, align 1, !tbaa !2448
  %1691 = lshr i32 %1679, 31
  %1692 = trunc i32 %1691 to i8
  %1693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1692, i8* %1693, align 1, !tbaa !2449
  %1694 = lshr i32 %1679, 31
  %1695 = xor i32 %1691, %1694
  %1696 = add nuw nsw i32 %1695, %1694
  %1697 = icmp eq i32 %1696, 2
  %1698 = zext i1 %1697 to i8
  %1699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1698, i8* %1699, align 1, !tbaa !2450
  %1700 = load i64, i64* %PC
  %1701 = add i64 %1700, 93
  %1702 = load i64, i64* %PC
  %1703 = add i64 %1702, 6
  %1704 = load i64, i64* %PC
  %1705 = add i64 %1704, 6
  store i64 %1705, i64* %PC
  %1706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1707 = load i8, i8* %1706, align 1, !tbaa !2448
  %1708 = icmp ne i8 %1707, 0
  %1709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1710 = load i8, i8* %1709, align 1, !tbaa !2449
  %1711 = icmp ne i8 %1710, 0
  %1712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1713 = load i8, i8* %1712, align 1, !tbaa !2450
  %1714 = icmp ne i8 %1713, 0
  %1715 = xor i1 %1711, %1714
  %1716 = or i1 %1708, %1715
  %1717 = zext i1 %1716 to i8
  store i8 %1717, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1719 = select i1 %1716, i64 %1701, i64 %1703
  store i64 %1719, i64* %1718, align 8, !tbaa !2428
  %1720 = load i8, i8* %BRANCH_TAKEN
  %1721 = icmp eq i8 %1720, 1
  br i1 %1721, label %block_400c36, label %block_400bdf

block_401396:                                     ; preds = %block_401371
  %1722 = load i64, i64* %PC
  %1723 = add i64 %1722, 5
  store i64 %1723, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %1724 = load i64, i64* %RBP
  %1725 = sub i64 %1724, 1168
  %1726 = load i64, i64* %PC
  %1727 = add i64 %1726, 7
  store i64 %1727, i64* %PC
  store i64 %1725, i64* %RCX, align 8, !tbaa !2428
  %1728 = load i64, i64* %RBP
  %1729 = sub i64 %1728, 12
  %1730 = load i64, i64* %PC
  %1731 = add i64 %1730, 4
  store i64 %1731, i64* %PC
  %1732 = inttoptr i64 %1729 to i32*
  %1733 = load i32, i32* %1732
  %1734 = sext i32 %1733 to i64
  store i64 %1734, i64* %RDX, align 8, !tbaa !2428
  %1735 = load i64, i64* %RDX
  %1736 = load i64, i64* %PC
  %1737 = add i64 %1736, 4
  store i64 %1737, i64* %PC
  %1738 = shl i64 %1735, 5
  %1739 = icmp slt i64 %1738, 0
  %1740 = shl i64 %1738, 1
  store i64 %1740, i64* %RDX, align 8, !tbaa !2428
  %1741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1742 = zext i1 %1739 to i8
  store i8 %1742, i8* %1741, align 1, !tbaa !2451
  %1743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1744 = trunc i64 %1740 to i32
  %1745 = and i32 %1744, 254
  %1746 = call i32 @llvm.ctpop.i32(i32 %1745) #16
  %1747 = trunc i32 %1746 to i8
  %1748 = and i8 %1747, 1
  %1749 = xor i8 %1748, 1
  store i8 %1749, i8* %1743, align 1, !tbaa !2451
  %1750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1750, align 1, !tbaa !2451
  %1751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1752 = icmp eq i64 %1740, 0
  %1753 = zext i1 %1752 to i8
  store i8 %1753, i8* %1751, align 1, !tbaa !2451
  %1754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1755 = lshr i64 %1740, 63
  %1756 = trunc i64 %1755 to i8
  store i8 %1756, i8* %1754, align 1, !tbaa !2451
  %1757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1757, align 1, !tbaa !2451
  %1758 = load i64, i64* %RCX
  %1759 = load i64, i64* %RDX
  %1760 = load i64, i64* %PC
  %1761 = add i64 %1760, 3
  store i64 %1761, i64* %PC
  %1762 = add i64 %1759, %1758
  store i64 %1762, i64* %RCX, align 8, !tbaa !2428
  %1763 = icmp ult i64 %1762, %1758
  %1764 = icmp ult i64 %1762, %1759
  %1765 = or i1 %1763, %1764
  %1766 = zext i1 %1765 to i8
  %1767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1766, i8* %1767, align 1, !tbaa !2432
  %1768 = trunc i64 %1762 to i32
  %1769 = and i32 %1768, 255
  %1770 = call i32 @llvm.ctpop.i32(i32 %1769) #16
  %1771 = trunc i32 %1770 to i8
  %1772 = and i8 %1771, 1
  %1773 = xor i8 %1772, 1
  %1774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1773, i8* %1774, align 1, !tbaa !2446
  %1775 = xor i64 %1759, %1758
  %1776 = xor i64 %1775, %1762
  %1777 = lshr i64 %1776, 4
  %1778 = trunc i64 %1777 to i8
  %1779 = and i8 %1778, 1
  %1780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1779, i8* %1780, align 1, !tbaa !2447
  %1781 = icmp eq i64 %1762, 0
  %1782 = zext i1 %1781 to i8
  %1783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1782, i8* %1783, align 1, !tbaa !2448
  %1784 = lshr i64 %1762, 63
  %1785 = trunc i64 %1784 to i8
  %1786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1785, i8* %1786, align 1, !tbaa !2449
  %1787 = lshr i64 %1758, 63
  %1788 = lshr i64 %1759, 63
  %1789 = xor i64 %1784, %1787
  %1790 = xor i64 %1784, %1788
  %1791 = add nuw nsw i64 %1789, %1790
  %1792 = icmp eq i64 %1791, 2
  %1793 = zext i1 %1792 to i8
  %1794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1793, i8* %1794, align 1, !tbaa !2450
  %1795 = load i64, i64* %RBP
  %1796 = sub i64 %1795, 4
  %1797 = load i64, i64* %PC
  %1798 = add i64 %1797, 3
  store i64 %1798, i64* %PC
  %1799 = inttoptr i64 %1796 to i32*
  %1800 = load i32, i32* %1799
  %1801 = zext i32 %1800 to i64
  store i64 %1801, i64* %RSI, align 8, !tbaa !2428
  %1802 = load i64, i64* %RSI
  %1803 = load i64, i64* %RBP
  %1804 = sub i64 %1803, 8
  %1805 = load i64, i64* %PC
  %1806 = add i64 %1805, 3
  store i64 %1806, i64* %PC
  %1807 = trunc i64 %1802 to i32
  %1808 = inttoptr i64 %1804 to i32*
  %1809 = load i32, i32* %1808
  %1810 = sub i32 %1807, %1809
  %1811 = zext i32 %1810 to i64
  store i64 %1811, i64* %RSI, align 8, !tbaa !2428
  %1812 = icmp ult i32 %1807, %1809
  %1813 = zext i1 %1812 to i8
  %1814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1813, i8* %1814, align 1, !tbaa !2432
  %1815 = and i32 %1810, 255
  %1816 = call i32 @llvm.ctpop.i32(i32 %1815) #16
  %1817 = trunc i32 %1816 to i8
  %1818 = and i8 %1817, 1
  %1819 = xor i8 %1818, 1
  %1820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1819, i8* %1820, align 1, !tbaa !2446
  %1821 = xor i32 %1809, %1807
  %1822 = xor i32 %1821, %1810
  %1823 = lshr i32 %1822, 4
  %1824 = trunc i32 %1823 to i8
  %1825 = and i8 %1824, 1
  %1826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1825, i8* %1826, align 1, !tbaa !2447
  %1827 = icmp eq i32 %1810, 0
  %1828 = zext i1 %1827 to i8
  %1829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1828, i8* %1829, align 1, !tbaa !2448
  %1830 = lshr i32 %1810, 31
  %1831 = trunc i32 %1830 to i8
  %1832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1831, i8* %1832, align 1, !tbaa !2449
  %1833 = lshr i32 %1807, 31
  %1834 = lshr i32 %1809, 31
  %1835 = xor i32 %1834, %1833
  %1836 = xor i32 %1830, %1833
  %1837 = add nuw nsw i32 %1836, %1835
  %1838 = icmp eq i32 %1837, 2
  %1839 = zext i1 %1838 to i8
  %1840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1839, i8* %1840, align 1, !tbaa !2450
  %1841 = load i32, i32* %ESI
  %1842 = zext i32 %1841 to i64
  %1843 = load i64, i64* %PC
  %1844 = add i64 %1843, 3
  store i64 %1844, i64* %PC
  %1845 = shl i64 %1842, 32
  %1846 = ashr exact i64 %1845, 32
  store i64 %1846, i64* %RDX, align 8, !tbaa !2428
  %1847 = load i64, i64* %RCX
  %1848 = load i64, i64* %RDX
  %1849 = mul i64 %1848, 4
  %1850 = add i64 %1849, %1847
  %1851 = load i64, i64* %PC
  %1852 = add i64 %1851, 3
  store i64 %1852, i64* %PC
  %1853 = inttoptr i64 %1850 to i32*
  %1854 = load i32, i32* %1853
  %1855 = zext i32 %1854 to i64
  store i64 %1855, i64* %RSI, align 8, !tbaa !2428
  %1856 = load i64, i64* %RBP
  %1857 = sub i64 %1856, 8
  %1858 = load i64, i64* %PC
  %1859 = add i64 %1858, 4
  store i64 %1859, i64* %PC
  %1860 = inttoptr i64 %1857 to i32*
  %1861 = load i32, i32* %1860
  %1862 = sext i32 %1861 to i64
  store i64 %1862, i64* %RCX, align 8, !tbaa !2428
  %1863 = load i64, i64* %RSI
  %1864 = load i64, i64* %RBP
  %1865 = load i64, i64* %RCX
  %1866 = mul i64 %1865, 4
  %1867 = add i64 %1864, -1488
  %1868 = add i64 %1867, %1866
  %1869 = load i64, i64* %PC
  %1870 = add i64 %1869, 7
  store i64 %1870, i64* %PC
  %1871 = trunc i64 %1863 to i32
  %1872 = inttoptr i64 %1868 to i32*
  %1873 = load i32, i32* %1872
  %1874 = add i32 %1873, %1871
  %1875 = zext i32 %1874 to i64
  store i64 %1875, i64* %RSI, align 8, !tbaa !2428
  %1876 = icmp ult i32 %1874, %1871
  %1877 = icmp ult i32 %1874, %1873
  %1878 = or i1 %1876, %1877
  %1879 = zext i1 %1878 to i8
  %1880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1879, i8* %1880, align 1, !tbaa !2432
  %1881 = and i32 %1874, 255
  %1882 = call i32 @llvm.ctpop.i32(i32 %1881) #16
  %1883 = trunc i32 %1882 to i8
  %1884 = and i8 %1883, 1
  %1885 = xor i8 %1884, 1
  %1886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1885, i8* %1886, align 1, !tbaa !2446
  %1887 = xor i32 %1873, %1871
  %1888 = xor i32 %1887, %1874
  %1889 = lshr i32 %1888, 4
  %1890 = trunc i32 %1889 to i8
  %1891 = and i8 %1890, 1
  %1892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1891, i8* %1892, align 1, !tbaa !2447
  %1893 = icmp eq i32 %1874, 0
  %1894 = zext i1 %1893 to i8
  %1895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1894, i8* %1895, align 1, !tbaa !2448
  %1896 = lshr i32 %1874, 31
  %1897 = trunc i32 %1896 to i8
  %1898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1897, i8* %1898, align 1, !tbaa !2449
  %1899 = lshr i32 %1871, 31
  %1900 = lshr i32 %1873, 31
  %1901 = xor i32 %1896, %1899
  %1902 = xor i32 %1896, %1900
  %1903 = add nuw nsw i32 %1901, %1902
  %1904 = icmp eq i32 %1903, 2
  %1905 = zext i1 %1904 to i8
  %1906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1905, i8* %1906, align 1, !tbaa !2450
  %1907 = load i64, i64* %RBP
  %1908 = sub i64 %1907, 2720
  %1909 = load i32, i32* %EAX
  %1910 = zext i32 %1909 to i64
  %1911 = load i64, i64* %PC
  %1912 = add i64 %1911, 6
  store i64 %1912, i64* %PC
  %1913 = inttoptr i64 %1908 to i32*
  store i32 %1909, i32* %1913
  %1914 = load i32, i32* %ESI
  %1915 = zext i32 %1914 to i64
  %1916 = load i64, i64* %PC
  %1917 = add i64 %1916, 2
  store i64 %1917, i64* %PC
  %1918 = and i64 %1915, 4294967295
  store i64 %1918, i64* %RAX, align 8, !tbaa !2428
  %1919 = load i64, i64* %PC
  %1920 = add i64 %1919, 1
  store i64 %1920, i64* %PC
  %1921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1923 = bitcast %union.anon* %1922 to i32*
  %1924 = load i32, i32* %1923, align 8, !tbaa !2452
  %1925 = sext i32 %1924 to i64
  %1926 = lshr i64 %1925, 32
  store i64 %1926, i64* %1921, align 8, !tbaa !2428
  %1927 = load i64, i64* %RBP
  %1928 = sub i64 %1927, 2720
  %1929 = load i64, i64* %PC
  %1930 = add i64 %1929, 6
  store i64 %1930, i64* %PC
  %1931 = inttoptr i64 %1928 to i32*
  %1932 = load i32, i32* %1931
  %1933 = zext i32 %1932 to i64
  store i64 %1933, i64* %RSI, align 8, !tbaa !2428
  %1934 = load i32, i32* %ESI
  %1935 = zext i32 %1934 to i64
  %1936 = load i64, i64* %PC
  %1937 = add i64 %1936, 2
  store i64 %1937, i64* %PC
  %1938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1939 = bitcast %union.anon* %1938 to i32*
  %1940 = load i32, i32* %1939, align 8, !tbaa !2452
  %1941 = zext i32 %1940 to i64
  %1942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %1943 = bitcast %union.anon* %1942 to i32*
  %1944 = load i32, i32* %1943, align 8, !tbaa !2452
  %1945 = zext i32 %1944 to i64
  %1946 = shl i64 %1935, 32
  %1947 = ashr exact i64 %1946, 32
  %1948 = shl nuw i64 %1945, 32
  %1949 = or i64 %1948, %1941
  %1950 = sdiv i64 %1949, %1947
  %1951 = shl i64 %1950, 32
  %1952 = ashr exact i64 %1951, 32
  %1953 = icmp eq i64 %1950, %1952
  br i1 %1953, label %1958, label %1954

; <label>:1954:                                   ; preds = %block_401396
  %1955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1956 = load i64, i64* %1955, align 8, !tbaa !2428
  %1957 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1956, %struct.Memory* %MEMORY.54) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit6

; <label>:1958:                                   ; preds = %block_401396
  %1959 = srem i64 %1949, %1947
  %1960 = getelementptr inbounds %union.anon, %union.anon* %1938, i64 0, i32 0
  %1961 = and i64 %1950, 4294967295
  store i64 %1961, i64* %1960, align 8, !tbaa !2428
  %1962 = getelementptr inbounds %union.anon, %union.anon* %1942, i64 0, i32 0
  %1963 = and i64 %1959, 4294967295
  store i64 %1963, i64* %1962, align 8, !tbaa !2428
  %1964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1964, align 1, !tbaa !2432
  %1965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1965, align 1, !tbaa !2446
  %1966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1966, align 1, !tbaa !2447
  %1967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1967, align 1, !tbaa !2448
  %1968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1968, align 1, !tbaa !2449
  %1969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1969, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit6

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit6: ; preds = %1954, %1958
  %1970 = phi %struct.Memory* [ %1957, %1954 ], [ %MEMORY.54, %1958 ]
  %1971 = load i32, i32* %EDX
  %1972 = zext i32 %1971 to i64
  %1973 = load i64, i64* %PC
  %1974 = add i64 %1973, 3
  store i64 %1974, i64* %PC
  %1975 = shl i64 %1972, 32
  %1976 = ashr exact i64 %1975, 32
  store i64 %1976, i64* %RCX, align 8, !tbaa !2428
  %1977 = load i64, i64* %RCX
  %1978 = mul i64 %1977, 4
  %1979 = add i64 %1978, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %1980 = load i64, i64* %PC
  %1981 = add i64 %1980, 7
  store i64 %1981, i64* %PC
  %1982 = inttoptr i64 %1979 to i32*
  %1983 = load i32, i32* %1982
  %1984 = zext i32 %1983 to i64
  store i64 %1984, i64* %RDX, align 8, !tbaa !2428
  %1985 = load i64, i64* %RBP
  %1986 = sub i64 %1985, 4
  %1987 = load i64, i64* %PC
  %1988 = add i64 %1987, 4
  store i64 %1988, i64* %PC
  %1989 = inttoptr i64 %1986 to i32*
  %1990 = load i32, i32* %1989
  %1991 = sext i32 %1990 to i64
  store i64 %1991, i64* %RCX, align 8, !tbaa !2428
  %1992 = load i64, i64* %RDX
  %1993 = load i64, i64* %RBP
  %1994 = load i64, i64* %RCX
  %1995 = mul i64 %1994, 4
  %1996 = add i64 %1993, -1616
  %1997 = add i64 %1996, %1995
  %1998 = load i64, i64* %PC
  %1999 = add i64 %1998, 7
  store i64 %1999, i64* %PC
  %2000 = trunc i64 %1992 to i32
  %2001 = inttoptr i64 %1997 to i32*
  %2002 = load i32, i32* %2001
  %2003 = xor i32 %2002, %2000
  %2004 = zext i32 %2003 to i64
  store i64 %2004, i64* %RDX, align 8, !tbaa !2428
  %2005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2005, align 1, !tbaa !2432
  %2006 = and i32 %2003, 255
  %2007 = call i32 @llvm.ctpop.i32(i32 %2006) #16
  %2008 = trunc i32 %2007 to i8
  %2009 = and i8 %2008, 1
  %2010 = xor i8 %2009, 1
  %2011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2010, i8* %2011, align 1, !tbaa !2446
  %2012 = icmp eq i32 %2003, 0
  %2013 = zext i1 %2012 to i8
  %2014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2013, i8* %2014, align 1, !tbaa !2448
  %2015 = lshr i32 %2003, 31
  %2016 = trunc i32 %2015 to i8
  %2017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2016, i8* %2017, align 1, !tbaa !2449
  %2018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2018, align 1, !tbaa !2450
  %2019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2019, align 1, !tbaa !2447
  %2020 = load i64, i64* %RBP
  %2021 = load i64, i64* %RCX
  %2022 = mul i64 %2021, 4
  %2023 = add i64 %2020, -1616
  %2024 = add i64 %2023, %2022
  %2025 = load i32, i32* %EDX
  %2026 = zext i32 %2025 to i64
  %2027 = load i64, i64* %PC
  %2028 = add i64 %2027, 7
  store i64 %2028, i64* %PC
  %2029 = inttoptr i64 %2024 to i32*
  store i32 %2025, i32* %2029
  br label %block_4013f1

block_400f90:                                     ; preds = %block_400edf, %block_400ef9, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.27, %block_400edf ], [ %MEMORY.27, %block_400ef9 ], [ %4128, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2 ]
  %2030 = load i64, i64* %PC
  %2031 = add i64 %2030, 5
  %2032 = load i64, i64* %PC
  %2033 = add i64 %2032, 5
  store i64 %2033, i64* %PC
  %2034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2031, i64* %2034, align 8, !tbaa !2428
  %2035 = load i64, i64* %RBP
  %2036 = sub i64 %2035, 4
  %2037 = load i64, i64* %PC
  %2038 = add i64 %2037, 3
  store i64 %2038, i64* %PC
  %2039 = inttoptr i64 %2036 to i32*
  %2040 = load i32, i32* %2039
  %2041 = zext i32 %2040 to i64
  store i64 %2041, i64* %RAX, align 8, !tbaa !2428
  %2042 = load i64, i64* %RAX
  %2043 = load i64, i64* %PC
  %2044 = add i64 %2043, 3
  store i64 %2044, i64* %PC
  %2045 = trunc i64 %2042 to i32
  %2046 = add i32 1, %2045
  %2047 = zext i32 %2046 to i64
  store i64 %2047, i64* %RAX, align 8, !tbaa !2428
  %2048 = icmp ult i32 %2046, %2045
  %2049 = icmp ult i32 %2046, 1
  %2050 = or i1 %2048, %2049
  %2051 = zext i1 %2050 to i8
  %2052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2051, i8* %2052, align 1, !tbaa !2432
  %2053 = and i32 %2046, 255
  %2054 = call i32 @llvm.ctpop.i32(i32 %2053) #16
  %2055 = trunc i32 %2054 to i8
  %2056 = and i8 %2055, 1
  %2057 = xor i8 %2056, 1
  %2058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2057, i8* %2058, align 1, !tbaa !2446
  %2059 = xor i64 1, %2042
  %2060 = trunc i64 %2059 to i32
  %2061 = xor i32 %2060, %2046
  %2062 = lshr i32 %2061, 4
  %2063 = trunc i32 %2062 to i8
  %2064 = and i8 %2063, 1
  %2065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2064, i8* %2065, align 1, !tbaa !2447
  %2066 = icmp eq i32 %2046, 0
  %2067 = zext i1 %2066 to i8
  %2068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2067, i8* %2068, align 1, !tbaa !2448
  %2069 = lshr i32 %2046, 31
  %2070 = trunc i32 %2069 to i8
  %2071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2070, i8* %2071, align 1, !tbaa !2449
  %2072 = lshr i32 %2045, 31
  %2073 = xor i32 %2069, %2072
  %2074 = add nuw nsw i32 %2073, %2069
  %2075 = icmp eq i32 %2074, 2
  %2076 = zext i1 %2075 to i8
  %2077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2076, i8* %2077, align 1, !tbaa !2450
  %2078 = load i64, i64* %RBP
  %2079 = sub i64 %2078, 4
  %2080 = load i32, i32* %EAX
  %2081 = zext i32 %2080 to i64
  %2082 = load i64, i64* %PC
  %2083 = add i64 %2082, 3
  store i64 %2083, i64* %PC
  %2084 = inttoptr i64 %2079 to i32*
  store i32 %2080, i32* %2084
  %2085 = load i64, i64* %PC
  %2086 = sub i64 %2085, 216
  %2087 = load i64, i64* %PC
  %2088 = add i64 %2087, 5
  store i64 %2088, i64* %PC
  %2089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2086, i64* %2089, align 8, !tbaa !2428
  br label %block_400ec6

block_4009ce:                                     ; preds = %block_400956
  %2090 = sub i64 %2909, 4
  %2091 = load i64, i64* %PC
  %2092 = add i64 %2091, 4
  store i64 %2092, i64* %PC
  %2093 = inttoptr i64 %2090 to i32*
  %2094 = load i32, i32* %2093
  %2095 = sext i32 %2094 to i64
  store i64 %2095, i64* %RAX, align 8, !tbaa !2428
  %2096 = load i64, i64* %RBP
  %2097 = load i64, i64* %RAX
  %2098 = mul i64 %2097, 4
  %2099 = add i64 %2096, -1488
  %2100 = add i64 %2099, %2098
  %2101 = load i64, i64* %PC
  %2102 = add i64 %2101, 8
  store i64 %2102, i64* %PC
  %2103 = inttoptr i64 %2100 to i32*
  %2104 = load i32, i32* %2103
  %2105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2105, align 1, !tbaa !2432
  %2106 = and i32 %2104, 255
  %2107 = call i32 @llvm.ctpop.i32(i32 %2106) #16
  %2108 = trunc i32 %2107 to i8
  %2109 = and i8 %2108, 1
  %2110 = xor i8 %2109, 1
  %2111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2110, i8* %2111, align 1, !tbaa !2446
  %2112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2112, align 1, !tbaa !2447
  %2113 = icmp eq i32 %2104, 0
  %2114 = zext i1 %2113 to i8
  %2115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2114, i8* %2115, align 1, !tbaa !2448
  %2116 = lshr i32 %2104, 31
  %2117 = trunc i32 %2116 to i8
  %2118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2117, i8* %2118, align 1, !tbaa !2449
  %2119 = lshr i32 %2104, 31
  %2120 = xor i32 %2116, %2119
  %2121 = add nuw nsw i32 %2120, %2119
  %2122 = icmp eq i32 %2121, 2
  %2123 = zext i1 %2122 to i8
  %2124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2123, i8* %2124, align 1, !tbaa !2450
  %2125 = load i64, i64* %PC
  %2126 = add i64 %2125, 16
  %2127 = load i64, i64* %PC
  %2128 = add i64 %2127, 6
  %2129 = load i64, i64* %PC
  %2130 = add i64 %2129, 6
  store i64 %2130, i64* %PC
  %2131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2132 = load i8, i8* %2131, align 1, !tbaa !2448
  store i8 %2132, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2134 = icmp ne i8 %2132, 0
  %2135 = select i1 %2134, i64 %2126, i64 %2128
  store i64 %2135, i64* %2133, align 8, !tbaa !2428
  %2136 = load i8, i8* %BRANCH_TAKEN
  %2137 = icmp eq i8 %2136, 1
  br i1 %2137, label %block_4009ea, label %block_4009e0

block_40158c:                                     ; preds = %block_401572
  %2138 = load i64, i64* %RBP
  %2139 = sub i64 %2138, 4
  %2140 = load i64, i64* %PC
  %2141 = add i64 %2140, 4
  store i64 %2141, i64* %PC
  %2142 = inttoptr i64 %2139 to i32*
  %2143 = load i32, i32* %2142
  %2144 = sext i32 %2143 to i64
  store i64 %2144, i64* %RAX, align 8, !tbaa !2428
  %2145 = load i64, i64* %RBP
  %2146 = load i64, i64* %RAX
  %2147 = mul i64 %2146, 4
  %2148 = add i64 %2145, -1568
  %2149 = add i64 %2148, %2147
  %2150 = load i64, i64* %PC
  %2151 = add i64 %2150, 8
  store i64 %2151, i64* %PC
  %2152 = inttoptr i64 %2149 to i32*
  %2153 = load i32, i32* %2152
  %2154 = sext i32 %2153 to i64
  store i64 %2154, i64* %RAX, align 8, !tbaa !2428
  %2155 = load i64, i64* %RBP
  %2156 = load i64, i64* %RAX
  %2157 = mul i64 %2156, 4
  %2158 = add i64 %2155, -2640
  %2159 = add i64 %2158, %2157
  %2160 = load i64, i64* %PC
  %2161 = add i64 %2160, 8
  store i64 %2161, i64* %PC
  %2162 = inttoptr i64 %2159 to i32*
  %2163 = load i32, i32* %2162
  %2164 = sext i32 %2163 to i64
  store i64 %2164, i64* %RAX, align 8, !tbaa !2428
  %2165 = load i64, i64* %RAX
  %2166 = mul i64 %2165, 4
  %2167 = add i64 %2166, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %2168 = load i64, i64* %PC
  %2169 = add i64 %2168, 7
  store i64 %2169, i64* %PC
  %2170 = inttoptr i64 %2167 to i32*
  %2171 = load i32, i32* %2170
  %2172 = zext i32 %2171 to i64
  store i64 %2172, i64* %RCX, align 8, !tbaa !2428
  %2173 = load i64, i64* %RBP
  %2174 = sub i64 %2173, 4
  %2175 = load i64, i64* %PC
  %2176 = add i64 %2175, 4
  store i64 %2176, i64* %PC
  %2177 = inttoptr i64 %2174 to i32*
  %2178 = load i32, i32* %2177
  %2179 = sext i32 %2178 to i64
  store i64 %2179, i64* %RAX, align 8, !tbaa !2428
  %2180 = load i64, i64* %RBP
  %2181 = load i64, i64* %RAX
  %2182 = mul i64 %2181, 4
  %2183 = add i64 %2180, -1568
  %2184 = add i64 %2183, %2182
  %2185 = load i64, i64* %PC
  %2186 = add i64 %2185, 8
  store i64 %2186, i64* %PC
  %2187 = inttoptr i64 %2184 to i32*
  %2188 = load i32, i32* %2187
  %2189 = sext i32 %2188 to i64
  store i64 %2189, i64* %RAX, align 8, !tbaa !2428
  %2190 = load i64, i64* %RBP
  %2191 = load i64, i64* %RAX
  %2192 = mul i64 %2191, 4
  %2193 = add i64 %2190, -2640
  %2194 = add i64 %2193, %2192
  %2195 = load i32, i32* %ECX
  %2196 = zext i32 %2195 to i64
  %2197 = load i64, i64* %PC
  %2198 = add i64 %2197, 7
  store i64 %2198, i64* %PC
  %2199 = inttoptr i64 %2194 to i32*
  store i32 %2195, i32* %2199
  %2200 = load i64, i64* %RBP
  %2201 = sub i64 %2200, 16
  %2202 = load i64, i64* %PC
  %2203 = add i64 %2202, 7
  store i64 %2203, i64* %PC
  %2204 = inttoptr i64 %2201 to i32*
  store i32 0, i32* %2204
  %2205 = load i64, i64* %RBP
  %2206 = sub i64 %2205, 8
  %2207 = load i64, i64* %PC
  %2208 = add i64 %2207, 7
  store i64 %2208, i64* %PC
  %2209 = inttoptr i64 %2206 to i32*
  store i32 0, i32* %2209
  br label %block_4015c8

block_40118a:                                     ; preds = %block_401180
  %2210 = load i64, i64* %PC
  %2211 = add i64 %2210, 5
  store i64 %2211, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %2212 = load i64, i64* %RBP
  %2213 = sub i64 %2212, 4
  %2214 = load i64, i64* %PC
  %2215 = add i64 %2214, 3
  store i64 %2215, i64* %PC
  %2216 = inttoptr i64 %2213 to i32*
  %2217 = load i32, i32* %2216
  %2218 = zext i32 %2217 to i64
  store i64 %2218, i64* %RCX, align 8, !tbaa !2428
  %2219 = load i64, i64* %RBP
  %2220 = sub i64 %2219, 1492
  %2221 = load i64, i64* %PC
  %2222 = add i64 %2221, 7
  store i64 %2222, i64* %PC
  %2223 = inttoptr i64 %2220 to i32*
  %2224 = load i32, i32* %2223
  %2225 = sext i32 %2224 to i64
  store i64 %2225, i64* %RDX, align 8, !tbaa !2428
  %2226 = load i64, i64* %RBP
  %2227 = load i64, i64* %RDX
  %2228 = mul i64 %2227, 4
  %2229 = add i64 %2226, -1536
  %2230 = add i64 %2229, %2228
  %2231 = load i32, i32* %ECX
  %2232 = zext i32 %2231 to i64
  %2233 = load i64, i64* %PC
  %2234 = add i64 %2233, 7
  store i64 %2234, i64* %PC
  %2235 = inttoptr i64 %2230 to i32*
  store i32 %2231, i32* %2235
  %2236 = load i64, i64* %RAX
  %2237 = load i64, i64* %RBP
  %2238 = sub i64 %2237, 4
  %2239 = load i64, i64* %PC
  %2240 = add i64 %2239, 3
  store i64 %2240, i64* %PC
  %2241 = trunc i64 %2236 to i32
  %2242 = inttoptr i64 %2238 to i32*
  %2243 = load i32, i32* %2242
  %2244 = sub i32 %2241, %2243
  %2245 = zext i32 %2244 to i64
  store i64 %2245, i64* %RAX, align 8, !tbaa !2428
  %2246 = icmp ult i32 %2241, %2243
  %2247 = zext i1 %2246 to i8
  %2248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2247, i8* %2248, align 1, !tbaa !2432
  %2249 = and i32 %2244, 255
  %2250 = call i32 @llvm.ctpop.i32(i32 %2249) #16
  %2251 = trunc i32 %2250 to i8
  %2252 = and i8 %2251, 1
  %2253 = xor i8 %2252, 1
  %2254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2253, i8* %2254, align 1, !tbaa !2446
  %2255 = xor i32 %2243, %2241
  %2256 = xor i32 %2255, %2244
  %2257 = lshr i32 %2256, 4
  %2258 = trunc i32 %2257 to i8
  %2259 = and i8 %2258, 1
  %2260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2259, i8* %2260, align 1, !tbaa !2447
  %2261 = icmp eq i32 %2244, 0
  %2262 = zext i1 %2261 to i8
  %2263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2262, i8* %2263, align 1, !tbaa !2448
  %2264 = lshr i32 %2244, 31
  %2265 = trunc i32 %2264 to i8
  %2266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2265, i8* %2266, align 1, !tbaa !2449
  %2267 = lshr i32 %2241, 31
  %2268 = lshr i32 %2243, 31
  %2269 = xor i32 %2268, %2267
  %2270 = xor i32 %2264, %2267
  %2271 = add nuw nsw i32 %2270, %2269
  %2272 = icmp eq i32 %2271, 2
  %2273 = zext i1 %2272 to i8
  %2274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2273, i8* %2274, align 1, !tbaa !2450
  %2275 = load i64, i64* %RBP
  %2276 = sub i64 %2275, 1492
  %2277 = load i64, i64* %PC
  %2278 = add i64 %2277, 7
  store i64 %2278, i64* %PC
  %2279 = inttoptr i64 %2276 to i32*
  %2280 = load i32, i32* %2279
  %2281 = sext i32 %2280 to i64
  store i64 %2281, i64* %RDX, align 8, !tbaa !2428
  %2282 = load i64, i64* %RBP
  %2283 = load i64, i64* %RDX
  %2284 = mul i64 %2283, 4
  %2285 = add i64 %2282, -1568
  %2286 = add i64 %2285, %2284
  %2287 = load i32, i32* %EAX
  %2288 = zext i32 %2287 to i64
  %2289 = load i64, i64* %PC
  %2290 = add i64 %2289, 7
  store i64 %2290, i64* %PC
  %2291 = inttoptr i64 %2286 to i32*
  store i32 %2287, i32* %2291
  %2292 = load i64, i64* %RBP
  %2293 = sub i64 %2292, 1492
  %2294 = load i64, i64* %PC
  %2295 = add i64 %2294, 6
  store i64 %2295, i64* %PC
  %2296 = inttoptr i64 %2293 to i32*
  %2297 = load i32, i32* %2296
  %2298 = zext i32 %2297 to i64
  store i64 %2298, i64* %RAX, align 8, !tbaa !2428
  %2299 = load i64, i64* %RAX
  %2300 = load i64, i64* %PC
  %2301 = add i64 %2300, 3
  store i64 %2301, i64* %PC
  %2302 = trunc i64 %2299 to i32
  %2303 = add i32 1, %2302
  %2304 = zext i32 %2303 to i64
  store i64 %2304, i64* %RAX, align 8, !tbaa !2428
  %2305 = icmp ult i32 %2303, %2302
  %2306 = icmp ult i32 %2303, 1
  %2307 = or i1 %2305, %2306
  %2308 = zext i1 %2307 to i8
  %2309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2308, i8* %2309, align 1, !tbaa !2432
  %2310 = and i32 %2303, 255
  %2311 = call i32 @llvm.ctpop.i32(i32 %2310) #16
  %2312 = trunc i32 %2311 to i8
  %2313 = and i8 %2312, 1
  %2314 = xor i8 %2313, 1
  %2315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2314, i8* %2315, align 1, !tbaa !2446
  %2316 = xor i64 1, %2299
  %2317 = trunc i64 %2316 to i32
  %2318 = xor i32 %2317, %2303
  %2319 = lshr i32 %2318, 4
  %2320 = trunc i32 %2319 to i8
  %2321 = and i8 %2320, 1
  %2322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2321, i8* %2322, align 1, !tbaa !2447
  %2323 = icmp eq i32 %2303, 0
  %2324 = zext i1 %2323 to i8
  %2325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2324, i8* %2325, align 1, !tbaa !2448
  %2326 = lshr i32 %2303, 31
  %2327 = trunc i32 %2326 to i8
  %2328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2327, i8* %2328, align 1, !tbaa !2449
  %2329 = lshr i32 %2302, 31
  %2330 = xor i32 %2326, %2329
  %2331 = add nuw nsw i32 %2330, %2326
  %2332 = icmp eq i32 %2331, 2
  %2333 = zext i1 %2332 to i8
  %2334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2333, i8* %2334, align 1, !tbaa !2450
  %2335 = load i64, i64* %RBP
  %2336 = sub i64 %2335, 1492
  %2337 = load i32, i32* %EAX
  %2338 = zext i32 %2337 to i64
  %2339 = load i64, i64* %PC
  %2340 = add i64 %2339, 6
  store i64 %2340, i64* %PC
  %2341 = inttoptr i64 %2336 to i32*
  store i32 %2337, i32* %2341
  br label %block_4011c0

block_400b82:                                     ; preds = %block_400ab9
  %2342 = add i64 %6288, 3
  store i64 %2342, i64* %PC
  %2343 = inttoptr i64 %6287 to i32*
  %2344 = load i32, i32* %2343
  %2345 = zext i32 %2344 to i64
  store i64 %2345, i64* %RAX, align 8, !tbaa !2428
  %2346 = load i64, i64* %RAX
  %2347 = load i64, i64* %PC
  %2348 = add i64 %2347, 3
  store i64 %2348, i64* %PC
  %2349 = trunc i64 %2346 to i32
  %2350 = sub i32 %2349, 1
  %2351 = zext i32 %2350 to i64
  store i64 %2351, i64* %RAX, align 8, !tbaa !2428
  %2352 = icmp ult i32 %2349, 1
  %2353 = zext i1 %2352 to i8
  %2354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2353, i8* %2354, align 1, !tbaa !2432
  %2355 = and i32 %2350, 255
  %2356 = call i32 @llvm.ctpop.i32(i32 %2355) #16
  %2357 = trunc i32 %2356 to i8
  %2358 = and i8 %2357, 1
  %2359 = xor i8 %2358, 1
  %2360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2359, i8* %2360, align 1, !tbaa !2446
  %2361 = xor i64 1, %2346
  %2362 = trunc i64 %2361 to i32
  %2363 = xor i32 %2362, %2350
  %2364 = lshr i32 %2363, 4
  %2365 = trunc i32 %2364 to i8
  %2366 = and i8 %2365, 1
  %2367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2366, i8* %2367, align 1, !tbaa !2447
  %2368 = icmp eq i32 %2350, 0
  %2369 = zext i1 %2368 to i8
  %2370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2369, i8* %2370, align 1, !tbaa !2448
  %2371 = lshr i32 %2350, 31
  %2372 = trunc i32 %2371 to i8
  %2373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2372, i8* %2373, align 1, !tbaa !2449
  %2374 = lshr i32 %2349, 31
  %2375 = xor i32 %2371, %2374
  %2376 = add nuw nsw i32 %2375, %2374
  %2377 = icmp eq i32 %2376, 2
  %2378 = zext i1 %2377 to i8
  %2379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2378, i8* %2379, align 1, !tbaa !2450
  %2380 = load i64, i64* %RBP
  %2381 = sub i64 %2380, 16
  %2382 = load i32, i32* %EAX
  %2383 = zext i32 %2382 to i64
  %2384 = load i64, i64* %PC
  %2385 = add i64 %2384, 3
  store i64 %2385, i64* %PC
  %2386 = inttoptr i64 %2381 to i32*
  store i32 %2382, i32* %2386
  br label %block_400b8b

block_40175f:                                     ; preds = %block_40100c, %block_4017b0
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.0, %block_40100c ], [ %MEMORY.9, %block_4017b0 ]
  %2387 = load i64, i64* %RBP
  %2388 = sub i64 %2387, 4
  %2389 = load i64, i64* %PC
  %2390 = add i64 %2389, 7
  store i64 %2390, i64* %PC
  %2391 = inttoptr i64 %2388 to i32*
  %2392 = load i32, i32* %2391
  %2393 = sub i32 %2392, 255
  %2394 = icmp ult i32 %2392, 255
  %2395 = zext i1 %2394 to i8
  %2396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2395, i8* %2396, align 1, !tbaa !2432
  %2397 = and i32 %2393, 255
  %2398 = call i32 @llvm.ctpop.i32(i32 %2397) #16
  %2399 = trunc i32 %2398 to i8
  %2400 = and i8 %2399, 1
  %2401 = xor i8 %2400, 1
  %2402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2401, i8* %2402, align 1, !tbaa !2446
  %2403 = xor i32 %2392, 255
  %2404 = xor i32 %2403, %2393
  %2405 = lshr i32 %2404, 4
  %2406 = trunc i32 %2405 to i8
  %2407 = and i8 %2406, 1
  %2408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2407, i8* %2408, align 1, !tbaa !2447
  %2409 = icmp eq i32 %2393, 0
  %2410 = zext i1 %2409 to i8
  %2411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2410, i8* %2411, align 1, !tbaa !2448
  %2412 = lshr i32 %2393, 31
  %2413 = trunc i32 %2412 to i8
  %2414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2413, i8* %2414, align 1, !tbaa !2449
  %2415 = lshr i32 %2392, 31
  %2416 = xor i32 %2412, %2415
  %2417 = add nuw nsw i32 %2416, %2415
  %2418 = icmp eq i32 %2417, 2
  %2419 = zext i1 %2418 to i8
  %2420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2419, i8* %2420, align 1, !tbaa !2450
  %2421 = load i64, i64* %PC
  %2422 = add i64 %2421, 93
  %2423 = load i64, i64* %PC
  %2424 = add i64 %2423, 6
  %2425 = load i64, i64* %PC
  %2426 = add i64 %2425, 6
  store i64 %2426, i64* %PC
  %2427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2428 = load i8, i8* %2427, align 1, !tbaa !2449
  %2429 = icmp ne i8 %2428, 0
  %2430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2431 = load i8, i8* %2430, align 1, !tbaa !2450
  %2432 = icmp ne i8 %2431, 0
  %2433 = xor i1 %2429, %2432
  %2434 = xor i1 %2433, true
  %2435 = zext i1 %2434 to i8
  store i8 %2435, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2437 = select i1 %2433, i64 %2424, i64 %2422
  store i64 %2437, i64* %2436, align 8, !tbaa !2428
  %2438 = load i8, i8* %BRANCH_TAKEN
  %2439 = icmp eq i8 %2438, 1
  br i1 %2439, label %block_4017c3, label %block_40176c

block_401180:                                     ; preds = %block_4010ff
  %2440 = sub i64 %5513, 16
  %2441 = load i64, i64* %PC
  %2442 = add i64 %2441, 4
  store i64 %2442, i64* %PC
  %2443 = inttoptr i64 %2440 to i32*
  %2444 = load i32, i32* %2443
  %2445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2445, align 1, !tbaa !2432
  %2446 = and i32 %2444, 255
  %2447 = call i32 @llvm.ctpop.i32(i32 %2446) #16
  %2448 = trunc i32 %2447 to i8
  %2449 = and i8 %2448, 1
  %2450 = xor i8 %2449, 1
  %2451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2450, i8* %2451, align 1, !tbaa !2446
  %2452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2452, align 1, !tbaa !2447
  %2453 = icmp eq i32 %2444, 0
  %2454 = zext i1 %2453 to i8
  %2455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2454, i8* %2455, align 1, !tbaa !2448
  %2456 = lshr i32 %2444, 31
  %2457 = trunc i32 %2456 to i8
  %2458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2457, i8* %2458, align 1, !tbaa !2449
  %2459 = lshr i32 %2444, 31
  %2460 = xor i32 %2456, %2459
  %2461 = add nuw nsw i32 %2460, %2459
  %2462 = icmp eq i32 %2461, 2
  %2463 = zext i1 %2462 to i8
  %2464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2463, i8* %2464, align 1, !tbaa !2450
  %2465 = load i64, i64* %PC
  %2466 = add i64 %2465, 60
  %2467 = load i64, i64* %PC
  %2468 = add i64 %2467, 6
  %2469 = load i64, i64* %PC
  %2470 = add i64 %2469, 6
  store i64 %2470, i64* %PC
  %2471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2472 = load i8, i8* %2471, align 1, !tbaa !2448
  %2473 = icmp eq i8 %2472, 0
  %2474 = zext i1 %2473 to i8
  store i8 %2474, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2476 = select i1 %2473, i64 %2466, i64 %2468
  store i64 %2476, i64* %2475, align 8, !tbaa !2428
  %2477 = load i8, i8* %BRANCH_TAKEN
  %2478 = icmp eq i8 %2477, 1
  br i1 %2478, label %block_4011c0, label %block_40118a

block_400975:                                     ; preds = %block_400963
  %2479 = load i64, i64* %PC
  %2480 = add i64 %2479, 5
  store i64 %2480, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %2481 = load i64, i64* %RBP
  %2482 = sub i64 %2481, 8
  %2483 = load i64, i64* %PC
  %2484 = add i64 %2483, 4
  store i64 %2484, i64* %PC
  %2485 = inttoptr i64 %2482 to i32*
  %2486 = load i32, i32* %2485
  %2487 = sext i32 %2486 to i64
  store i64 %2487, i64* %RCX, align 8, !tbaa !2428
  %2488 = load i64, i64* %RCX
  %2489 = mul i64 %2488, 4
  %2490 = add i64 %2489, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %2491 = load i64, i64* %PC
  %2492 = add i64 %2491, 7
  store i64 %2492, i64* %PC
  %2493 = inttoptr i64 %2490 to i32*
  %2494 = load i32, i32* %2493
  %2495 = zext i32 %2494 to i64
  store i64 %2495, i64* %RDX, align 8, !tbaa !2428
  %2496 = load i64, i64* %RBP
  %2497 = sub i64 %2496, 4
  %2498 = load i64, i64* %PC
  %2499 = add i64 %2498, 3
  store i64 %2499, i64* %PC
  %2500 = inttoptr i64 %2497 to i32*
  %2501 = load i32, i32* %2500
  %2502 = zext i32 %2501 to i64
  store i64 %2502, i64* %RSI, align 8, !tbaa !2428
  %2503 = load i64, i64* %RSI
  %2504 = load i64, i64* %RBP
  %2505 = sub i64 %2504, 8
  %2506 = load i64, i64* %PC
  %2507 = add i64 %2506, 4
  store i64 %2507, i64* %PC
  %2508 = inttoptr i64 %2505 to i32*
  %2509 = load i32, i32* %2508
  %2510 = shl i64 %2503, 32
  %2511 = ashr exact i64 %2510, 32
  %2512 = sext i32 %2509 to i64
  %2513 = mul nsw i64 %2512, %2511
  %2514 = trunc i64 %2513 to i32
  %2515 = and i64 %2513, 4294967295
  store i64 %2515, i64* %RSI, align 8, !tbaa !2428
  %2516 = shl i64 %2513, 32
  %2517 = ashr exact i64 %2516, 32
  %2518 = icmp ne i64 %2517, %2513
  %2519 = zext i1 %2518 to i8
  %2520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2519, i8* %2520, align 1, !tbaa !2432
  %2521 = and i32 %2514, 255
  %2522 = call i32 @llvm.ctpop.i32(i32 %2521) #16
  %2523 = trunc i32 %2522 to i8
  %2524 = and i8 %2523, 1
  %2525 = xor i8 %2524, 1
  %2526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2525, i8* %2526, align 1, !tbaa !2446
  %2527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2527, align 1, !tbaa !2447
  %2528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2528, align 1, !tbaa !2448
  %2529 = lshr i32 %2514, 31
  %2530 = trunc i32 %2529 to i8
  %2531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2530, i8* %2531, align 1, !tbaa !2449
  %2532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2519, i8* %2532, align 1, !tbaa !2450
  %2533 = load i64, i64* %RDX
  %2534 = load i32, i32* %ESI
  %2535 = zext i32 %2534 to i64
  %2536 = load i64, i64* %PC
  %2537 = add i64 %2536, 2
  store i64 %2537, i64* %PC
  %2538 = trunc i64 %2533 to i32
  %2539 = add i32 %2534, %2538
  %2540 = zext i32 %2539 to i64
  store i64 %2540, i64* %RDX, align 8, !tbaa !2428
  %2541 = icmp ult i32 %2539, %2538
  %2542 = icmp ult i32 %2539, %2534
  %2543 = or i1 %2541, %2542
  %2544 = zext i1 %2543 to i8
  %2545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2544, i8* %2545, align 1, !tbaa !2432
  %2546 = and i32 %2539, 255
  %2547 = call i32 @llvm.ctpop.i32(i32 %2546) #16
  %2548 = trunc i32 %2547 to i8
  %2549 = and i8 %2548, 1
  %2550 = xor i8 %2549, 1
  %2551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2550, i8* %2551, align 1, !tbaa !2446
  %2552 = xor i64 %2535, %2533
  %2553 = trunc i64 %2552 to i32
  %2554 = xor i32 %2553, %2539
  %2555 = lshr i32 %2554, 4
  %2556 = trunc i32 %2555 to i8
  %2557 = and i8 %2556, 1
  %2558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2557, i8* %2558, align 1, !tbaa !2447
  %2559 = icmp eq i32 %2539, 0
  %2560 = zext i1 %2559 to i8
  %2561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2560, i8* %2561, align 1, !tbaa !2448
  %2562 = lshr i32 %2539, 31
  %2563 = trunc i32 %2562 to i8
  %2564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2563, i8* %2564, align 1, !tbaa !2449
  %2565 = lshr i32 %2538, 31
  %2566 = lshr i32 %2534, 31
  %2567 = xor i32 %2562, %2565
  %2568 = xor i32 %2562, %2566
  %2569 = add nuw nsw i32 %2567, %2568
  %2570 = icmp eq i32 %2569, 2
  %2571 = zext i1 %2570 to i8
  %2572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2571, i8* %2572, align 1, !tbaa !2450
  %2573 = load i64, i64* %RBP
  %2574 = sub i64 %2573, 2692
  %2575 = load i32, i32* %EAX
  %2576 = zext i32 %2575 to i64
  %2577 = load i64, i64* %PC
  %2578 = add i64 %2577, 6
  store i64 %2578, i64* %PC
  %2579 = inttoptr i64 %2574 to i32*
  store i32 %2575, i32* %2579
  %2580 = load i32, i32* %EDX
  %2581 = zext i32 %2580 to i64
  %2582 = load i64, i64* %PC
  %2583 = add i64 %2582, 2
  store i64 %2583, i64* %PC
  %2584 = and i64 %2581, 4294967295
  store i64 %2584, i64* %RAX, align 8, !tbaa !2428
  %2585 = load i64, i64* %PC
  %2586 = add i64 %2585, 1
  store i64 %2586, i64* %PC
  %2587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %2588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %2589 = bitcast %union.anon* %2588 to i32*
  %2590 = load i32, i32* %2589, align 8, !tbaa !2452
  %2591 = sext i32 %2590 to i64
  %2592 = lshr i64 %2591, 32
  store i64 %2592, i64* %2587, align 8, !tbaa !2428
  %2593 = load i64, i64* %RBP
  %2594 = sub i64 %2593, 2692
  %2595 = load i64, i64* %PC
  %2596 = add i64 %2595, 6
  store i64 %2596, i64* %PC
  %2597 = inttoptr i64 %2594 to i32*
  %2598 = load i32, i32* %2597
  %2599 = zext i32 %2598 to i64
  store i64 %2599, i64* %RSI, align 8, !tbaa !2428
  %2600 = load i32, i32* %ESI
  %2601 = zext i32 %2600 to i64
  %2602 = load i64, i64* %PC
  %2603 = add i64 %2602, 2
  store i64 %2603, i64* %PC
  %2604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %2605 = bitcast %union.anon* %2604 to i32*
  %2606 = load i32, i32* %2605, align 8, !tbaa !2452
  %2607 = zext i32 %2606 to i64
  %2608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %2609 = bitcast %union.anon* %2608 to i32*
  %2610 = load i32, i32* %2609, align 8, !tbaa !2452
  %2611 = zext i32 %2610 to i64
  %2612 = shl i64 %2601, 32
  %2613 = ashr exact i64 %2612, 32
  %2614 = shl nuw i64 %2611, 32
  %2615 = or i64 %2614, %2607
  %2616 = sdiv i64 %2615, %2613
  %2617 = shl i64 %2616, 32
  %2618 = ashr exact i64 %2617, 32
  %2619 = icmp eq i64 %2616, %2618
  br i1 %2619, label %2624, label %2620

; <label>:2620:                                   ; preds = %block_400975
  %2621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2622 = load i64, i64* %2621, align 8, !tbaa !2428
  %2623 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2622, %struct.Memory* %MEMORY.10) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5

; <label>:2624:                                   ; preds = %block_400975
  %2625 = srem i64 %2615, %2613
  %2626 = getelementptr inbounds %union.anon, %union.anon* %2604, i64 0, i32 0
  %2627 = and i64 %2616, 4294967295
  store i64 %2627, i64* %2626, align 8, !tbaa !2428
  %2628 = getelementptr inbounds %union.anon, %union.anon* %2608, i64 0, i32 0
  %2629 = and i64 %2625, 4294967295
  store i64 %2629, i64* %2628, align 8, !tbaa !2428
  %2630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2630, align 1, !tbaa !2432
  %2631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %2631, align 1, !tbaa !2446
  %2632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2632, align 1, !tbaa !2447
  %2633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2633, align 1, !tbaa !2448
  %2634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2634, align 1, !tbaa !2449
  %2635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2635, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5: ; preds = %2620, %2624
  %2636 = phi %struct.Memory* [ %2623, %2620 ], [ %MEMORY.10, %2624 ]
  %2637 = load i32, i32* %EDX
  %2638 = zext i32 %2637 to i64
  %2639 = load i64, i64* %PC
  %2640 = add i64 %2639, 3
  store i64 %2640, i64* %PC
  %2641 = shl i64 %2638, 32
  %2642 = ashr exact i64 %2641, 32
  store i64 %2642, i64* %RCX, align 8, !tbaa !2428
  %2643 = load i64, i64* %RCX
  %2644 = mul i64 %2643, 4
  %2645 = add i64 %2644, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %2646 = load i64, i64* %PC
  %2647 = add i64 %2646, 7
  store i64 %2647, i64* %PC
  %2648 = inttoptr i64 %2645 to i32*
  %2649 = load i32, i32* %2648
  %2650 = zext i32 %2649 to i64
  store i64 %2650, i64* %RDX, align 8, !tbaa !2428
  %2651 = load i64, i64* %RBP
  %2652 = sub i64 %2651, 4
  %2653 = load i64, i64* %PC
  %2654 = add i64 %2653, 4
  store i64 %2654, i64* %PC
  %2655 = inttoptr i64 %2652 to i32*
  %2656 = load i32, i32* %2655
  %2657 = sext i32 %2656 to i64
  store i64 %2657, i64* %RCX, align 8, !tbaa !2428
  %2658 = load i64, i64* %RDX
  %2659 = load i64, i64* %RBP
  %2660 = load i64, i64* %RCX
  %2661 = mul i64 %2660, 4
  %2662 = add i64 %2659, -1488
  %2663 = add i64 %2662, %2661
  %2664 = load i64, i64* %PC
  %2665 = add i64 %2664, 7
  store i64 %2665, i64* %PC
  %2666 = trunc i64 %2658 to i32
  %2667 = inttoptr i64 %2663 to i32*
  %2668 = load i32, i32* %2667
  %2669 = xor i32 %2668, %2666
  %2670 = zext i32 %2669 to i64
  store i64 %2670, i64* %RDX, align 8, !tbaa !2428
  %2671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2671, align 1, !tbaa !2432
  %2672 = and i32 %2669, 255
  %2673 = call i32 @llvm.ctpop.i32(i32 %2672) #16
  %2674 = trunc i32 %2673 to i8
  %2675 = and i8 %2674, 1
  %2676 = xor i8 %2675, 1
  %2677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2676, i8* %2677, align 1, !tbaa !2446
  %2678 = icmp eq i32 %2669, 0
  %2679 = zext i1 %2678 to i8
  %2680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2679, i8* %2680, align 1, !tbaa !2448
  %2681 = lshr i32 %2669, 31
  %2682 = trunc i32 %2681 to i8
  %2683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2682, i8* %2683, align 1, !tbaa !2449
  %2684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2684, align 1, !tbaa !2450
  %2685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2685, align 1, !tbaa !2447
  %2686 = load i64, i64* %RBP
  %2687 = load i64, i64* %RCX
  %2688 = mul i64 %2687, 4
  %2689 = add i64 %2686, -1488
  %2690 = add i64 %2689, %2688
  %2691 = load i32, i32* %EDX
  %2692 = zext i32 %2691 to i64
  %2693 = load i64, i64* %PC
  %2694 = add i64 %2693, 7
  store i64 %2694, i64* %PC
  %2695 = inttoptr i64 %2690 to i32*
  store i32 %2691, i32* %2695
  br label %block_4009bb

block_40176c:                                     ; preds = %block_40175f
  %2696 = load i64, i64* %RBP
  %2697 = sub i64 %2696, 4
  %2698 = load i64, i64* %PC
  %2699 = add i64 %2698, 4
  store i64 %2699, i64* %PC
  %2700 = inttoptr i64 %2697 to i32*
  %2701 = load i32, i32* %2700
  %2702 = sext i32 %2701 to i64
  store i64 %2702, i64* %RAX, align 8, !tbaa !2428
  %2703 = load i64, i64* %RAX
  %2704 = mul i64 %2703, 4
  %2705 = add i64 %2704, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %2706 = load i64, i64* %PC
  %2707 = add i64 %2706, 8
  store i64 %2707, i64* %PC
  %2708 = inttoptr i64 %2705 to i32*
  %2709 = load i32, i32* %2708
  %2710 = sub i32 %2709, -1
  %2711 = icmp ult i32 %2709, -1
  %2712 = zext i1 %2711 to i8
  %2713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2712, i8* %2713, align 1, !tbaa !2432
  %2714 = and i32 %2710, 255
  %2715 = call i32 @llvm.ctpop.i32(i32 %2714) #16
  %2716 = trunc i32 %2715 to i8
  %2717 = and i8 %2716, 1
  %2718 = xor i8 %2717, 1
  %2719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2718, i8* %2719, align 1, !tbaa !2446
  %2720 = xor i32 %2709, -1
  %2721 = xor i32 %2720, %2710
  %2722 = lshr i32 %2721, 4
  %2723 = trunc i32 %2722 to i8
  %2724 = and i8 %2723, 1
  %2725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2724, i8* %2725, align 1, !tbaa !2447
  %2726 = icmp eq i32 %2710, 0
  %2727 = zext i1 %2726 to i8
  %2728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2727, i8* %2728, align 1, !tbaa !2448
  %2729 = lshr i32 %2710, 31
  %2730 = trunc i32 %2729 to i8
  %2731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2730, i8* %2731, align 1, !tbaa !2449
  %2732 = lshr i32 %2709, 31
  %2733 = xor i32 %2732, 1
  %2734 = xor i32 %2729, %2732
  %2735 = add nuw nsw i32 %2734, %2733
  %2736 = icmp eq i32 %2735, 2
  %2737 = zext i1 %2736 to i8
  %2738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2737, i8* %2738, align 1, !tbaa !2450
  %2739 = load i64, i64* %PC
  %2740 = add i64 %2739, 41
  %2741 = load i64, i64* %PC
  %2742 = add i64 %2741, 6
  %2743 = load i64, i64* %PC
  %2744 = add i64 %2743, 6
  store i64 %2744, i64* %PC
  %2745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2746 = load i8, i8* %2745, align 1, !tbaa !2448
  store i8 %2746, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2748 = icmp ne i8 %2746, 0
  %2749 = select i1 %2748, i64 %2740, i64 %2742
  store i64 %2749, i64* %2747, align 8, !tbaa !2428
  %2750 = load i8, i8* %BRANCH_TAKEN
  %2751 = icmp eq i8 %2750, 1
  %2752 = load i64, i64* %RBP
  %2753 = sub i64 %2752, 4
  %2754 = load i64, i64* %PC
  %2755 = add i64 %2754, 4
  store i64 %2755, i64* %PC
  %2756 = inttoptr i64 %2753 to i32*
  %2757 = load i32, i32* %2756
  %2758 = sext i32 %2757 to i64
  store i64 %2758, i64* %RAX, align 8, !tbaa !2428
  %2759 = load i64, i64* %RAX
  %2760 = mul i64 %2759, 4
  %2761 = add i64 %2760, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %2762 = load i64, i64* %PC
  br i1 %2751, label %block_4017a1, label %block_40177e

block_4016e3:                                     ; preds = %block_4011d3
  %2763 = inttoptr i64 %6813 to i32*
  store i32 0, i32* %2763
  br label %block_4016ea

block_401709:                                     ; preds = %block_4016f7
  %2764 = add i64 %1263, 8
  store i64 %2764, i64* %PC
  %2765 = inttoptr i64 %1262 to i32*
  %2766 = load i32, i32* %2765
  %2767 = sext i32 %2766 to i64
  store i64 %2767, i64* %RAX, align 8, !tbaa !2428
  %2768 = load i64, i64* %RAX
  %2769 = mul i64 %2768, 4
  %2770 = add i64 %2769, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %2771 = load i64, i64* %PC
  %2772 = add i64 %2771, 7
  store i64 %2772, i64* %PC
  %2773 = inttoptr i64 %2770 to i32*
  %2774 = load i32, i32* %2773
  %2775 = zext i32 %2774 to i64
  store i64 %2775, i64* %RCX, align 8, !tbaa !2428
  %2776 = load i64, i64* %RBP
  %2777 = sub i64 %2776, 4
  %2778 = load i64, i64* %PC
  %2779 = add i64 %2778, 4
  store i64 %2779, i64* %PC
  %2780 = inttoptr i64 %2777 to i32*
  %2781 = load i32, i32* %2780
  %2782 = sext i32 %2781 to i64
  store i64 %2782, i64* %RAX, align 8, !tbaa !2428
  %2783 = load i64, i64* %RAX
  %2784 = mul i64 %2783, 4
  %2785 = add i64 %2784, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %2786 = load i32, i32* %ECX
  %2787 = zext i32 %2786 to i64
  %2788 = load i64, i64* %PC
  %2789 = add i64 %2788, 7
  store i64 %2789, i64* %PC
  %2790 = inttoptr i64 %2785 to i32*
  store i32 %2786, i32* %2790
  %2791 = load i64, i64* %PC
  %2792 = add i64 %2791, 20
  %2793 = load i64, i64* %PC
  %2794 = add i64 %2793, 5
  store i64 %2794, i64* %PC
  %2795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2792, i64* %2795, align 8, !tbaa !2428
  br label %block_40173b

block_4017b0:                                     ; preds = %block_40177e, %block_4017a1
  %MEMORY.9 = phi %struct.Memory* [ %MEMORY.8, %block_4017a1 ], [ %MEMORY.8, %block_40177e ]
  %2796 = load i64, i64* %PC
  %2797 = add i64 %2796, 5
  %2798 = load i64, i64* %PC
  %2799 = add i64 %2798, 5
  store i64 %2799, i64* %PC
  %2800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2797, i64* %2800, align 8, !tbaa !2428
  %2801 = load i64, i64* %RBP
  %2802 = sub i64 %2801, 4
  %2803 = load i64, i64* %PC
  %2804 = add i64 %2803, 3
  store i64 %2804, i64* %PC
  %2805 = inttoptr i64 %2802 to i32*
  %2806 = load i32, i32* %2805
  %2807 = zext i32 %2806 to i64
  store i64 %2807, i64* %RAX, align 8, !tbaa !2428
  %2808 = load i64, i64* %RAX
  %2809 = load i64, i64* %PC
  %2810 = add i64 %2809, 3
  store i64 %2810, i64* %PC
  %2811 = trunc i64 %2808 to i32
  %2812 = add i32 1, %2811
  %2813 = zext i32 %2812 to i64
  store i64 %2813, i64* %RAX, align 8, !tbaa !2428
  %2814 = icmp ult i32 %2812, %2811
  %2815 = icmp ult i32 %2812, 1
  %2816 = or i1 %2814, %2815
  %2817 = zext i1 %2816 to i8
  %2818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2817, i8* %2818, align 1, !tbaa !2432
  %2819 = and i32 %2812, 255
  %2820 = call i32 @llvm.ctpop.i32(i32 %2819) #16
  %2821 = trunc i32 %2820 to i8
  %2822 = and i8 %2821, 1
  %2823 = xor i8 %2822, 1
  %2824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2823, i8* %2824, align 1, !tbaa !2446
  %2825 = xor i64 1, %2808
  %2826 = trunc i64 %2825 to i32
  %2827 = xor i32 %2826, %2812
  %2828 = lshr i32 %2827, 4
  %2829 = trunc i32 %2828 to i8
  %2830 = and i8 %2829, 1
  %2831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2830, i8* %2831, align 1, !tbaa !2447
  %2832 = icmp eq i32 %2812, 0
  %2833 = zext i1 %2832 to i8
  %2834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2833, i8* %2834, align 1, !tbaa !2448
  %2835 = lshr i32 %2812, 31
  %2836 = trunc i32 %2835 to i8
  %2837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2836, i8* %2837, align 1, !tbaa !2449
  %2838 = lshr i32 %2811, 31
  %2839 = xor i32 %2835, %2838
  %2840 = add nuw nsw i32 %2839, %2835
  %2841 = icmp eq i32 %2840, 2
  %2842 = zext i1 %2841 to i8
  %2843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2842, i8* %2843, align 1, !tbaa !2450
  %2844 = load i64, i64* %RBP
  %2845 = sub i64 %2844, 4
  %2846 = load i32, i32* %EAX
  %2847 = zext i32 %2846 to i64
  %2848 = load i64, i64* %PC
  %2849 = add i64 %2848, 3
  store i64 %2849, i64* %PC
  %2850 = inttoptr i64 %2845 to i32*
  store i32 %2846, i32* %2850
  %2851 = load i64, i64* %PC
  %2852 = sub i64 %2851, 95
  %2853 = load i64, i64* %PC
  %2854 = add i64 %2853, 5
  store i64 %2854, i64* %PC
  %2855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2852, i64* %2855, align 8, !tbaa !2428
  br label %block_40175f

block_400956:                                     ; preds = %block_400940, %block_4009bb
  %MEMORY.10 = phi %struct.Memory* [ %MEMORY.15, %block_400940 ], [ %MEMORY.6, %block_4009bb ]
  %2856 = load i64, i64* %RBP
  %2857 = sub i64 %2856, 8
  %2858 = load i64, i64* %PC
  %2859 = add i64 %2858, 7
  store i64 %2859, i64* %PC
  %2860 = inttoptr i64 %2857 to i32*
  %2861 = load i32, i32* %2860
  %2862 = sub i32 %2861, 255
  %2863 = icmp ult i32 %2861, 255
  %2864 = zext i1 %2863 to i8
  %2865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2864, i8* %2865, align 1, !tbaa !2432
  %2866 = and i32 %2862, 255
  %2867 = call i32 @llvm.ctpop.i32(i32 %2866) #16
  %2868 = trunc i32 %2867 to i8
  %2869 = and i8 %2868, 1
  %2870 = xor i8 %2869, 1
  %2871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2870, i8* %2871, align 1, !tbaa !2446
  %2872 = xor i32 %2861, 255
  %2873 = xor i32 %2872, %2862
  %2874 = lshr i32 %2873, 4
  %2875 = trunc i32 %2874 to i8
  %2876 = and i8 %2875, 1
  %2877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2876, i8* %2877, align 1, !tbaa !2447
  %2878 = icmp eq i32 %2862, 0
  %2879 = zext i1 %2878 to i8
  %2880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2879, i8* %2880, align 1, !tbaa !2448
  %2881 = lshr i32 %2862, 31
  %2882 = trunc i32 %2881 to i8
  %2883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2882, i8* %2883, align 1, !tbaa !2449
  %2884 = lshr i32 %2861, 31
  %2885 = xor i32 %2881, %2884
  %2886 = add nuw nsw i32 %2885, %2884
  %2887 = icmp eq i32 %2886, 2
  %2888 = zext i1 %2887 to i8
  %2889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2888, i8* %2889, align 1, !tbaa !2450
  %2890 = load i64, i64* %PC
  %2891 = add i64 %2890, 113
  %2892 = load i64, i64* %PC
  %2893 = add i64 %2892, 6
  %2894 = load i64, i64* %PC
  %2895 = add i64 %2894, 6
  store i64 %2895, i64* %PC
  %2896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2897 = load i8, i8* %2896, align 1, !tbaa !2449
  %2898 = icmp ne i8 %2897, 0
  %2899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2900 = load i8, i8* %2899, align 1, !tbaa !2450
  %2901 = icmp ne i8 %2900, 0
  %2902 = xor i1 %2898, %2901
  %2903 = xor i1 %2902, true
  %2904 = zext i1 %2903 to i8
  store i8 %2904, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2906 = select i1 %2902, i64 %2893, i64 %2891
  store i64 %2906, i64* %2905, align 8, !tbaa !2428
  %2907 = load i8, i8* %BRANCH_TAKEN
  %2908 = icmp eq i8 %2907, 1
  %2909 = load i64, i64* %RBP
  br i1 %2908, label %block_4009ce, label %block_400963

block_40174e:                                     ; preds = %block_4016ea
  %2910 = load i64, i64* %PC
  %2911 = add i64 %2910, 5
  %2912 = load i64, i64* %PC
  %2913 = add i64 %2912, 5
  store i64 %2913, i64* %PC
  %2914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2911, i64* %2914, align 8, !tbaa !2428
  br label %block_401753

block_4015e8:                                     ; preds = %block_4015dc
  %2915 = load i64, i64* %PC
  %2916 = add i64 %2915, 5
  store i64 %2916, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %2917 = load i64, i64* %RBP
  %2918 = sub i64 %2917, 8
  %2919 = load i64, i64* %PC
  %2920 = add i64 %2919, 4
  store i64 %2920, i64* %PC
  %2921 = inttoptr i64 %2918 to i32*
  %2922 = load i32, i32* %2921
  %2923 = sext i32 %2922 to i64
  store i64 %2923, i64* %RCX, align 8, !tbaa !2428
  %2924 = load i64, i64* %RBP
  %2925 = load i64, i64* %RCX
  %2926 = mul i64 %2925, 4
  %2927 = add i64 %2924, -1568
  %2928 = add i64 %2927, %2926
  %2929 = load i64, i64* %PC
  %2930 = add i64 %2929, 7
  store i64 %2930, i64* %PC
  %2931 = inttoptr i64 %2928 to i32*
  %2932 = load i32, i32* %2931
  %2933 = zext i32 %2932 to i64
  store i64 %2933, i64* %RDX, align 8, !tbaa !2428
  %2934 = load i64, i64* %RBP
  %2935 = sub i64 %2934, 4
  %2936 = load i64, i64* %PC
  %2937 = add i64 %2936, 4
  store i64 %2937, i64* %PC
  %2938 = inttoptr i64 %2935 to i32*
  %2939 = load i32, i32* %2938
  %2940 = sext i32 %2939 to i64
  store i64 %2940, i64* %RCX, align 8, !tbaa !2428
  %2941 = load i64, i64* %RDX
  %2942 = load i64, i64* %RBP
  %2943 = load i64, i64* %RCX
  %2944 = mul i64 %2943, 4
  %2945 = add i64 %2942, -1536
  %2946 = add i64 %2945, %2944
  %2947 = load i64, i64* %PC
  %2948 = add i64 %2947, 7
  store i64 %2948, i64* %PC
  %2949 = trunc i64 %2941 to i32
  %2950 = inttoptr i64 %2946 to i32*
  %2951 = load i32, i32* %2950
  %2952 = add i32 %2951, %2949
  %2953 = zext i32 %2952 to i64
  store i64 %2953, i64* %RDX, align 8, !tbaa !2428
  %2954 = icmp ult i32 %2952, %2949
  %2955 = icmp ult i32 %2952, %2951
  %2956 = or i1 %2954, %2955
  %2957 = zext i1 %2956 to i8
  %2958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2957, i8* %2958, align 1, !tbaa !2432
  %2959 = and i32 %2952, 255
  %2960 = call i32 @llvm.ctpop.i32(i32 %2959) #16
  %2961 = trunc i32 %2960 to i8
  %2962 = and i8 %2961, 1
  %2963 = xor i8 %2962, 1
  %2964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2963, i8* %2964, align 1, !tbaa !2446
  %2965 = xor i32 %2951, %2949
  %2966 = xor i32 %2965, %2952
  %2967 = lshr i32 %2966, 4
  %2968 = trunc i32 %2967 to i8
  %2969 = and i8 %2968, 1
  %2970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2969, i8* %2970, align 1, !tbaa !2447
  %2971 = icmp eq i32 %2952, 0
  %2972 = zext i1 %2971 to i8
  %2973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2972, i8* %2973, align 1, !tbaa !2448
  %2974 = lshr i32 %2952, 31
  %2975 = trunc i32 %2974 to i8
  %2976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2975, i8* %2976, align 1, !tbaa !2449
  %2977 = lshr i32 %2949, 31
  %2978 = lshr i32 %2951, 31
  %2979 = xor i32 %2974, %2977
  %2980 = xor i32 %2974, %2978
  %2981 = add nuw nsw i32 %2979, %2980
  %2982 = icmp eq i32 %2981, 2
  %2983 = zext i1 %2982 to i8
  %2984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2983, i8* %2984, align 1, !tbaa !2450
  %2985 = load i64, i64* %RBP
  %2986 = sub i64 %2985, 2728
  %2987 = load i32, i32* %EAX
  %2988 = zext i32 %2987 to i64
  %2989 = load i64, i64* %PC
  %2990 = add i64 %2989, 6
  store i64 %2990, i64* %PC
  %2991 = inttoptr i64 %2986 to i32*
  store i32 %2987, i32* %2991
  %2992 = load i32, i32* %EDX
  %2993 = zext i32 %2992 to i64
  %2994 = load i64, i64* %PC
  %2995 = add i64 %2994, 2
  store i64 %2995, i64* %PC
  %2996 = and i64 %2993, 4294967295
  store i64 %2996, i64* %RAX, align 8, !tbaa !2428
  %2997 = load i64, i64* %PC
  %2998 = add i64 %2997, 1
  store i64 %2998, i64* %PC
  %2999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %3001 = bitcast %union.anon* %3000 to i32*
  %3002 = load i32, i32* %3001, align 8, !tbaa !2452
  %3003 = sext i32 %3002 to i64
  %3004 = lshr i64 %3003, 32
  store i64 %3004, i64* %2999, align 8, !tbaa !2428
  %3005 = load i64, i64* %RBP
  %3006 = sub i64 %3005, 2728
  %3007 = load i64, i64* %PC
  %3008 = add i64 %3007, 6
  store i64 %3008, i64* %PC
  %3009 = inttoptr i64 %3006 to i32*
  %3010 = load i32, i32* %3009
  %3011 = zext i32 %3010 to i64
  store i64 %3011, i64* %RSI, align 8, !tbaa !2428
  %3012 = load i32, i32* %ESI
  %3013 = zext i32 %3012 to i64
  %3014 = load i64, i64* %PC
  %3015 = add i64 %3014, 2
  store i64 %3015, i64* %PC
  %3016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %3017 = bitcast %union.anon* %3016 to i32*
  %3018 = load i32, i32* %3017, align 8, !tbaa !2452
  %3019 = zext i32 %3018 to i64
  %3020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %3021 = bitcast %union.anon* %3020 to i32*
  %3022 = load i32, i32* %3021, align 8, !tbaa !2452
  %3023 = zext i32 %3022 to i64
  %3024 = shl i64 %3013, 32
  %3025 = ashr exact i64 %3024, 32
  %3026 = shl nuw i64 %3023, 32
  %3027 = or i64 %3026, %3019
  %3028 = sdiv i64 %3027, %3025
  %3029 = shl i64 %3028, 32
  %3030 = ashr exact i64 %3029, 32
  %3031 = icmp eq i64 %3028, %3030
  br i1 %3031, label %3036, label %3032

; <label>:3032:                                   ; preds = %block_4015e8
  %3033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3034 = load i64, i64* %3033, align 8, !tbaa !2428
  %3035 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3034, %struct.Memory* %MEMORY.51) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

; <label>:3036:                                   ; preds = %block_4015e8
  %3037 = srem i64 %3027, %3025
  %3038 = getelementptr inbounds %union.anon, %union.anon* %3016, i64 0, i32 0
  %3039 = and i64 %3028, 4294967295
  store i64 %3039, i64* %3038, align 8, !tbaa !2428
  %3040 = getelementptr inbounds %union.anon, %union.anon* %3020, i64 0, i32 0
  %3041 = and i64 %3037, 4294967295
  store i64 %3041, i64* %3040, align 8, !tbaa !2428
  %3042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3042, align 1, !tbaa !2432
  %3043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %3043, align 1, !tbaa !2446
  %3044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3044, align 1, !tbaa !2447
  %3045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3045, align 1, !tbaa !2448
  %3046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %3046, align 1, !tbaa !2449
  %3047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3047, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4: ; preds = %3032, %3036
  %3048 = phi %struct.Memory* [ %3035, %3032 ], [ %MEMORY.51, %3036 ]
  %3049 = load i32, i32* %EDX
  %3050 = zext i32 %3049 to i64
  %3051 = load i64, i64* %PC
  %3052 = add i64 %3051, 3
  store i64 %3052, i64* %PC
  %3053 = shl i64 %3050, 32
  %3054 = ashr exact i64 %3053, 32
  store i64 %3054, i64* %RCX, align 8, !tbaa !2428
  %3055 = load i64, i64* %RCX
  %3056 = mul i64 %3055, 4
  %3057 = add i64 %3056, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %3058 = load i64, i64* %PC
  %3059 = add i64 %3058, 7
  store i64 %3059, i64* %PC
  %3060 = inttoptr i64 %3057 to i32*
  %3061 = load i32, i32* %3060
  %3062 = zext i32 %3061 to i64
  store i64 %3062, i64* %RDX, align 8, !tbaa !2428
  %3063 = load i64, i64* %RDX
  %3064 = load i64, i64* %PC
  %3065 = add i64 %3064, 3
  store i64 %3065, i64* %PC
  %3066 = xor i64 1, %3063
  %3067 = trunc i64 %3066 to i32
  %3068 = and i64 %3066, 4294967295
  store i64 %3068, i64* %RDX, align 8, !tbaa !2428
  %3069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3069, align 1, !tbaa !2432
  %3070 = and i32 %3067, 255
  %3071 = call i32 @llvm.ctpop.i32(i32 %3070) #16
  %3072 = trunc i32 %3071 to i8
  %3073 = and i8 %3072, 1
  %3074 = xor i8 %3073, 1
  %3075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3074, i8* %3075, align 1, !tbaa !2446
  %3076 = icmp eq i32 %3067, 0
  %3077 = zext i1 %3076 to i8
  %3078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3077, i8* %3078, align 1, !tbaa !2448
  %3079 = lshr i32 %3067, 31
  %3080 = trunc i32 %3079 to i8
  %3081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3080, i8* %3081, align 1, !tbaa !2449
  %3082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3082, align 1, !tbaa !2450
  %3083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3083, align 1, !tbaa !2447
  %3084 = load i32, i32* %EDX
  %3085 = zext i32 %3084 to i64
  %3086 = load i64, i64* %PC
  %3087 = add i64 %3086, 3
  store i64 %3087, i64* %PC
  %3088 = shl i64 %3085, 32
  %3089 = ashr exact i64 %3088, 32
  store i64 %3089, i64* %RCX, align 8, !tbaa !2428
  %3090 = load i64, i64* %RCX
  %3091 = mul i64 %3090, 4
  %3092 = add i64 %3091, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %3093 = load i64, i64* %PC
  %3094 = add i64 %3093, 7
  store i64 %3094, i64* %PC
  %3095 = inttoptr i64 %3092 to i32*
  %3096 = load i32, i32* %3095
  %3097 = zext i32 %3096 to i64
  store i64 %3097, i64* %RDX, align 8, !tbaa !2428
  %3098 = load i64, i64* %RDX
  %3099 = load i64, i64* %RBP
  %3100 = sub i64 %3099, 16
  %3101 = load i64, i64* %PC
  %3102 = add i64 %3101, 3
  store i64 %3102, i64* %PC
  %3103 = trunc i64 %3098 to i32
  %3104 = inttoptr i64 %3100 to i32*
  %3105 = load i32, i32* %3104
  %3106 = add i32 %3105, %3103
  %3107 = zext i32 %3106 to i64
  store i64 %3107, i64* %RDX, align 8, !tbaa !2428
  %3108 = icmp ult i32 %3106, %3103
  %3109 = icmp ult i32 %3106, %3105
  %3110 = or i1 %3108, %3109
  %3111 = zext i1 %3110 to i8
  %3112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3111, i8* %3112, align 1, !tbaa !2432
  %3113 = and i32 %3106, 255
  %3114 = call i32 @llvm.ctpop.i32(i32 %3113) #16
  %3115 = trunc i32 %3114 to i8
  %3116 = and i8 %3115, 1
  %3117 = xor i8 %3116, 1
  %3118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3117, i8* %3118, align 1, !tbaa !2446
  %3119 = xor i32 %3105, %3103
  %3120 = xor i32 %3119, %3106
  %3121 = lshr i32 %3120, 4
  %3122 = trunc i32 %3121 to i8
  %3123 = and i8 %3122, 1
  %3124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3123, i8* %3124, align 1, !tbaa !2447
  %3125 = icmp eq i32 %3106, 0
  %3126 = zext i1 %3125 to i8
  %3127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3126, i8* %3127, align 1, !tbaa !2448
  %3128 = lshr i32 %3106, 31
  %3129 = trunc i32 %3128 to i8
  %3130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3129, i8* %3130, align 1, !tbaa !2449
  %3131 = lshr i32 %3103, 31
  %3132 = lshr i32 %3105, 31
  %3133 = xor i32 %3128, %3131
  %3134 = xor i32 %3128, %3132
  %3135 = add nuw nsw i32 %3133, %3134
  %3136 = icmp eq i32 %3135, 2
  %3137 = zext i1 %3136 to i8
  %3138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3137, i8* %3138, align 1, !tbaa !2450
  %3139 = load i64, i64* %RBP
  %3140 = sub i64 %3139, 16
  %3141 = load i32, i32* %EDX
  %3142 = zext i32 %3141 to i64
  %3143 = load i64, i64* %PC
  %3144 = add i64 %3143, 3
  store i64 %3144, i64* %PC
  %3145 = inttoptr i64 %3140 to i32*
  store i32 %3141, i32* %3145
  br label %block_401631

block_40134c:                                     ; preds = %block_401237, %block_401347
  %MEMORY.11 = phi %struct.Memory* [ %MEMORY.13, %block_401347 ], [ %MEMORY.16, %block_401237 ]
  %3146 = load i64, i64* %RBP
  %3147 = sub i64 %3146, 8
  %3148 = load i64, i64* %PC
  %3149 = add i64 %3148, 7
  store i64 %3149, i64* %PC
  %3150 = inttoptr i64 %3147 to i32*
  store i32 1, i32* %3150
  br label %block_401353

block_401437:                                     ; preds = %block_401497, %block_401430
  %MEMORY.12 = phi %struct.Memory* [ %MEMORY.16, %block_401430 ], [ %MEMORY.52, %block_401497 ]
  %3151 = load i64, i64* %RBP
  %3152 = sub i64 %3151, 4
  %3153 = load i64, i64* %PC
  %3154 = add i64 %3153, 7
  store i64 %3154, i64* %PC
  %3155 = inttoptr i64 %3152 to i32*
  %3156 = load i32, i32* %3155
  %3157 = sub i32 %3156, 255
  %3158 = icmp ult i32 %3156, 255
  %3159 = zext i1 %3158 to i8
  %3160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3159, i8* %3160, align 1, !tbaa !2432
  %3161 = and i32 %3157, 255
  %3162 = call i32 @llvm.ctpop.i32(i32 %3161) #16
  %3163 = trunc i32 %3162 to i8
  %3164 = and i8 %3163, 1
  %3165 = xor i8 %3164, 1
  %3166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3165, i8* %3166, align 1, !tbaa !2446
  %3167 = xor i32 %3156, 255
  %3168 = xor i32 %3167, %3157
  %3169 = lshr i32 %3168, 4
  %3170 = trunc i32 %3169 to i8
  %3171 = and i8 %3170, 1
  %3172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3171, i8* %3172, align 1, !tbaa !2447
  %3173 = icmp eq i32 %3157, 0
  %3174 = zext i1 %3173 to i8
  %3175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3174, i8* %3175, align 1, !tbaa !2448
  %3176 = lshr i32 %3157, 31
  %3177 = trunc i32 %3176 to i8
  %3178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3177, i8* %3178, align 1, !tbaa !2449
  %3179 = lshr i32 %3156, 31
  %3180 = xor i32 %3176, %3179
  %3181 = add nuw nsw i32 %3180, %3179
  %3182 = icmp eq i32 %3181, 2
  %3183 = zext i1 %3182 to i8
  %3184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3183, i8* %3184, align 1, !tbaa !2450
  %3185 = load i64, i64* %PC
  %3186 = add i64 %3185, 108
  %3187 = load i64, i64* %PC
  %3188 = add i64 %3187, 6
  %3189 = load i64, i64* %PC
  %3190 = add i64 %3189, 6
  store i64 %3190, i64* %PC
  %3191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3192 = load i8, i8* %3191, align 1, !tbaa !2449
  %3193 = icmp ne i8 %3192, 0
  %3194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3195 = load i8, i8* %3194, align 1, !tbaa !2450
  %3196 = icmp ne i8 %3195, 0
  %3197 = xor i1 %3193, %3196
  %3198 = xor i1 %3197, true
  %3199 = zext i1 %3198 to i8
  store i8 %3199, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3201 = select i1 %3197, i64 %3188, i64 %3186
  store i64 %3201, i64* %3200, align 8, !tbaa !2428
  %3202 = load i8, i8* %BRANCH_TAKEN
  %3203 = icmp eq i8 %3202, 1
  %3204 = load i64, i64* %RBP
  %3205 = sub i64 %3204, 4
  %3206 = load i64, i64* %PC
  br i1 %3203, label %block_4014aa, label %block_401444

block_401347:                                     ; preds = %block_4012ad, %block_401342
  %MEMORY.13 = phi %struct.Memory* [ %MEMORY.18, %block_401342 ], [ %MEMORY.34, %block_4012ad ]
  %3207 = load i64, i64* %PC
  %3208 = add i64 %3207, 5
  %3209 = load i64, i64* %PC
  %3210 = add i64 %3209, 5
  store i64 %3210, i64* %PC
  %3211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3208, i64* %3211, align 8, !tbaa !2428
  br label %block_40134c

block_400940:                                     ; preds = %block_400936
  %3212 = sub i64 %3353, 4
  %3213 = load i64, i64* %PC
  %3214 = add i64 %3213, 4
  store i64 %3214, i64* %PC
  %3215 = inttoptr i64 %3212 to i32*
  %3216 = load i32, i32* %3215
  %3217 = sext i32 %3216 to i64
  store i64 %3217, i64* %RAX, align 8, !tbaa !2428
  %3218 = load i64, i64* %RBP
  %3219 = load i64, i64* %RAX
  %3220 = mul i64 %3219, 4
  %3221 = add i64 %3218, -1488
  %3222 = add i64 %3221, %3220
  %3223 = load i64, i64* %PC
  %3224 = add i64 %3223, 11
  store i64 %3224, i64* %PC
  %3225 = inttoptr i64 %3222 to i32*
  store i32 0, i32* %3225
  %3226 = load i64, i64* %RBP
  %3227 = sub i64 %3226, 8
  %3228 = load i64, i64* %PC
  %3229 = add i64 %3228, 7
  store i64 %3229, i64* %PC
  %3230 = inttoptr i64 %3227 to i32*
  store i32 0, i32* %3230
  br label %block_400956

block_400b7d:                                     ; preds = %block_400af6
  %3231 = load i64, i64* %PC
  %3232 = add i64 %3231, 701
  %3233 = load i64, i64* %PC
  %3234 = add i64 %3233, 5
  store i64 %3234, i64* %PC
  %3235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3232, i64* %3235, align 8, !tbaa !2428
  br label %block_400e3a

block_40173b:                                     ; preds = %block_40172c, %block_401709
  %MEMORY.14 = phi %struct.Memory* [ %MEMORY.44, %block_40172c ], [ %MEMORY.44, %block_401709 ]
  %3236 = load i64, i64* %PC
  %3237 = add i64 %3236, 5
  %3238 = load i64, i64* %PC
  %3239 = add i64 %3238, 5
  store i64 %3239, i64* %PC
  %3240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3237, i64* %3240, align 8, !tbaa !2428
  %3241 = load i64, i64* %RBP
  %3242 = sub i64 %3241, 4
  %3243 = load i64, i64* %PC
  %3244 = add i64 %3243, 3
  store i64 %3244, i64* %PC
  %3245 = inttoptr i64 %3242 to i32*
  %3246 = load i32, i32* %3245
  %3247 = zext i32 %3246 to i64
  store i64 %3247, i64* %RAX, align 8, !tbaa !2428
  %3248 = load i64, i64* %RAX
  %3249 = load i64, i64* %PC
  %3250 = add i64 %3249, 3
  store i64 %3250, i64* %PC
  %3251 = trunc i64 %3248 to i32
  %3252 = add i32 1, %3251
  %3253 = zext i32 %3252 to i64
  store i64 %3253, i64* %RAX, align 8, !tbaa !2428
  %3254 = icmp ult i32 %3252, %3251
  %3255 = icmp ult i32 %3252, 1
  %3256 = or i1 %3254, %3255
  %3257 = zext i1 %3256 to i8
  %3258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3257, i8* %3258, align 1, !tbaa !2432
  %3259 = and i32 %3252, 255
  %3260 = call i32 @llvm.ctpop.i32(i32 %3259) #16
  %3261 = trunc i32 %3260 to i8
  %3262 = and i8 %3261, 1
  %3263 = xor i8 %3262, 1
  %3264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3263, i8* %3264, align 1, !tbaa !2446
  %3265 = xor i64 1, %3248
  %3266 = trunc i64 %3265 to i32
  %3267 = xor i32 %3266, %3252
  %3268 = lshr i32 %3267, 4
  %3269 = trunc i32 %3268 to i8
  %3270 = and i8 %3269, 1
  %3271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3270, i8* %3271, align 1, !tbaa !2447
  %3272 = icmp eq i32 %3252, 0
  %3273 = zext i1 %3272 to i8
  %3274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3273, i8* %3274, align 1, !tbaa !2448
  %3275 = lshr i32 %3252, 31
  %3276 = trunc i32 %3275 to i8
  %3277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3276, i8* %3277, align 1, !tbaa !2449
  %3278 = lshr i32 %3251, 31
  %3279 = xor i32 %3275, %3278
  %3280 = add nuw nsw i32 %3279, %3275
  %3281 = icmp eq i32 %3280, 2
  %3282 = zext i1 %3281 to i8
  %3283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3282, i8* %3283, align 1, !tbaa !2450
  %3284 = load i64, i64* %RBP
  %3285 = sub i64 %3284, 4
  %3286 = load i32, i32* %EAX
  %3287 = zext i32 %3286 to i64
  %3288 = load i64, i64* %PC
  %3289 = add i64 %3288, 3
  store i64 %3289, i64* %PC
  %3290 = inttoptr i64 %3285 to i32*
  store i32 %3286, i32* %3290
  %3291 = load i64, i64* %PC
  %3292 = sub i64 %3291, 95
  %3293 = load i64, i64* %PC
  %3294 = add i64 %3293, 5
  store i64 %3294, i64* %PC
  %3295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3292, i64* %3295, align 8, !tbaa !2428
  br label %block_4016ea

block_400936:                                     ; preds = %block_4009ea, %block_400910
  %MEMORY.15 = phi %struct.Memory* [ %2, %block_400910 ], [ %MEMORY.5, %block_4009ea ]
  %3296 = load i64, i64* %RBP
  %3297 = sub i64 %3296, 4
  %3298 = load i64, i64* %PC
  %3299 = add i64 %3298, 4
  store i64 %3299, i64* %PC
  %3300 = inttoptr i64 %3297 to i32*
  %3301 = load i32, i32* %3300
  %3302 = sub i32 %3301, 16
  %3303 = icmp ult i32 %3301, 16
  %3304 = zext i1 %3303 to i8
  %3305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3304, i8* %3305, align 1, !tbaa !2432
  %3306 = and i32 %3302, 255
  %3307 = call i32 @llvm.ctpop.i32(i32 %3306) #16
  %3308 = trunc i32 %3307 to i8
  %3309 = and i8 %3308, 1
  %3310 = xor i8 %3309, 1
  %3311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3310, i8* %3311, align 1, !tbaa !2446
  %3312 = xor i32 %3301, 16
  %3313 = xor i32 %3312, %3302
  %3314 = lshr i32 %3313, 4
  %3315 = trunc i32 %3314 to i8
  %3316 = and i8 %3315, 1
  %3317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3316, i8* %3317, align 1, !tbaa !2447
  %3318 = icmp eq i32 %3302, 0
  %3319 = zext i1 %3318 to i8
  %3320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3319, i8* %3320, align 1, !tbaa !2448
  %3321 = lshr i32 %3302, 31
  %3322 = trunc i32 %3321 to i8
  %3323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3322, i8* %3323, align 1, !tbaa !2449
  %3324 = lshr i32 %3301, 31
  %3325 = xor i32 %3321, %3324
  %3326 = add nuw nsw i32 %3325, %3324
  %3327 = icmp eq i32 %3326, 2
  %3328 = zext i1 %3327 to i8
  %3329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3328, i8* %3329, align 1, !tbaa !2450
  %3330 = load i64, i64* %PC
  %3331 = add i64 %3330, 220
  %3332 = load i64, i64* %PC
  %3333 = add i64 %3332, 6
  %3334 = load i64, i64* %PC
  %3335 = add i64 %3334, 6
  store i64 %3335, i64* %PC
  %3336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3337 = load i8, i8* %3336, align 1, !tbaa !2448
  %3338 = icmp eq i8 %3337, 0
  %3339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3340 = load i8, i8* %3339, align 1, !tbaa !2449
  %3341 = icmp ne i8 %3340, 0
  %3342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3343 = load i8, i8* %3342, align 1, !tbaa !2450
  %3344 = icmp ne i8 %3343, 0
  %3345 = xor i1 %3341, %3344
  %3346 = xor i1 %3345, true
  %3347 = and i1 %3338, %3346
  %3348 = zext i1 %3347 to i8
  store i8 %3348, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3350 = select i1 %3347, i64 %3331, i64 %3333
  store i64 %3350, i64* %3349, align 8, !tbaa !2428
  %3351 = load i8, i8* %BRANCH_TAKEN
  %3352 = icmp eq i8 %3351, 1
  %3353 = load i64, i64* %RBP
  br i1 %3352, label %block_400a16, label %block_400940

block_4011f1:                                     ; preds = %block_401404, %block_4011ea
  %MEMORY.16 = phi %struct.Memory* [ %MEMORY.37, %block_4011ea ], [ %MEMORY.54, %block_401404 ]
  %3354 = load i64, i64* %RBP
  %3355 = sub i64 %3354, 4
  %3356 = load i64, i64* %PC
  %3357 = add i64 %3356, 3
  store i64 %3357, i64* %PC
  %3358 = inttoptr i64 %3355 to i32*
  %3359 = load i32, i32* %3358
  %3360 = zext i32 %3359 to i64
  store i64 %3360, i64* %RAX, align 8, !tbaa !2428
  %3361 = load i64, i64* %RBP
  %3362 = sub i64 %3361, 12
  %3363 = load i64, i64* %PC
  %3364 = add i64 %3363, 4
  store i64 %3364, i64* %PC
  %3365 = inttoptr i64 %3362 to i32*
  %3366 = load i32, i32* %3365
  %3367 = sext i32 %3366 to i64
  store i64 %3367, i64* %RCX, align 8, !tbaa !2428
  %3368 = load i32, i32* %EAX
  %3369 = zext i32 %3368 to i64
  %3370 = load i64, i64* %RBP
  %3371 = load i64, i64* %RCX
  %3372 = mul i64 %3371, 4
  %3373 = add i64 %3370, -1328
  %3374 = add i64 %3373, %3372
  %3375 = load i64, i64* %PC
  %3376 = add i64 %3375, 7
  store i64 %3376, i64* %PC
  %3377 = inttoptr i64 %3374 to i32*
  %3378 = load i32, i32* %3377
  %3379 = sub i32 %3368, %3378
  %3380 = icmp ult i32 %3368, %3378
  %3381 = zext i1 %3380 to i8
  %3382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3381, i8* %3382, align 1, !tbaa !2432
  %3383 = and i32 %3379, 255
  %3384 = call i32 @llvm.ctpop.i32(i32 %3383) #16
  %3385 = trunc i32 %3384 to i8
  %3386 = and i8 %3385, 1
  %3387 = xor i8 %3386, 1
  %3388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3387, i8* %3388, align 1, !tbaa !2446
  %3389 = xor i32 %3378, %3368
  %3390 = xor i32 %3389, %3379
  %3391 = lshr i32 %3390, 4
  %3392 = trunc i32 %3391 to i8
  %3393 = and i8 %3392, 1
  %3394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3393, i8* %3394, align 1, !tbaa !2447
  %3395 = icmp eq i32 %3379, 0
  %3396 = zext i1 %3395 to i8
  %3397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3396, i8* %3397, align 1, !tbaa !2448
  %3398 = lshr i32 %3379, 31
  %3399 = trunc i32 %3398 to i8
  %3400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3399, i8* %3400, align 1, !tbaa !2449
  %3401 = lshr i32 %3368, 31
  %3402 = lshr i32 %3378, 31
  %3403 = xor i32 %3402, %3401
  %3404 = xor i32 %3398, %3401
  %3405 = add nuw nsw i32 %3404, %3403
  %3406 = icmp eq i32 %3405, 2
  %3407 = zext i1 %3406 to i8
  %3408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3407, i8* %3408, align 1, !tbaa !2450
  %3409 = load i64, i64* %PC
  %3410 = add i64 %3409, 561
  %3411 = load i64, i64* %PC
  %3412 = add i64 %3411, 6
  %3413 = load i64, i64* %PC
  %3414 = add i64 %3413, 6
  store i64 %3414, i64* %PC
  %3415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3416 = load i8, i8* %3415, align 1, !tbaa !2448
  %3417 = icmp eq i8 %3416, 0
  %3418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3419 = load i8, i8* %3418, align 1, !tbaa !2449
  %3420 = icmp ne i8 %3419, 0
  %3421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3422 = load i8, i8* %3421, align 1, !tbaa !2450
  %3423 = icmp ne i8 %3422, 0
  %3424 = xor i1 %3420, %3423
  %3425 = xor i1 %3424, true
  %3426 = and i1 %3417, %3425
  %3427 = zext i1 %3426 to i8
  store i8 %3427, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3429 = select i1 %3426, i64 %3410, i64 %3412
  store i64 %3429, i64* %3428, align 8, !tbaa !2428
  %3430 = load i8, i8* %BRANCH_TAKEN
  %3431 = icmp eq i8 %3430, 1
  %3432 = load i64, i64* %RBP
  %3433 = sub i64 %3432, 4
  %3434 = load i64, i64* %PC
  br i1 %3431, label %block_401430, label %block_401205

block_401333:                                     ; preds = %block_4012e2, %block_4012d0
  %MEMORY.17 = phi %struct.Memory* [ %MEMORY.28, %block_4012d0 ], [ %MEMORY.28, %block_4012e2 ]
  %3435 = load i64, i64* %RBP
  %3436 = sub i64 %3435, 4
  %3437 = load i64, i64* %PC
  %3438 = add i64 %3437, 4
  store i64 %3438, i64* %PC
  %3439 = inttoptr i64 %3436 to i32*
  %3440 = load i32, i32* %3439
  %3441 = sext i32 %3440 to i64
  store i64 %3441, i64* %RAX, align 8, !tbaa !2428
  %3442 = load i64, i64* %RBP
  %3443 = load i64, i64* %RAX
  %3444 = mul i64 %3443, 4
  %3445 = add i64 %3442, -1616
  %3446 = add i64 %3445, %3444
  %3447 = load i64, i64* %PC
  %3448 = add i64 %3447, 11
  store i64 %3448, i64* %PC
  %3449 = inttoptr i64 %3446 to i32*
  store i32 0, i32* %3449
  br label %block_401342

block_401342:                                     ; preds = %block_401302, %block_401333
  %MEMORY.18 = phi %struct.Memory* [ %MEMORY.17, %block_401333 ], [ %MEMORY.28, %block_401302 ]
  %3450 = load i64, i64* %PC
  %3451 = add i64 %3450, 5
  %3452 = load i64, i64* %PC
  %3453 = add i64 %3452, 5
  store i64 %3453, i64* %PC
  %3454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3451, i64* %3454, align 8, !tbaa !2428
  br label %block_401347

block_40172c:                                     ; preds = %block_4016f7
  %3455 = add i64 %1263, 11
  store i64 %3455, i64* %PC
  %3456 = inttoptr i64 %1262 to i32*
  store i32 0, i32* %3456
  br label %block_40173b

block_4014e3:                                     ; preds = %block_40155f, %block_4014c5
  %MEMORY.19 = phi %struct.Memory* [ %MEMORY.45, %block_4014c5 ], [ %MEMORY.49, %block_40155f ]
  %3457 = load i64, i64* %RBP
  %3458 = sub i64 %3457, 8
  %3459 = load i64, i64* %PC
  %3460 = add i64 %3459, 3
  store i64 %3460, i64* %PC
  %3461 = inttoptr i64 %3458 to i32*
  %3462 = load i32, i32* %3461
  %3463 = zext i32 %3462 to i64
  store i64 %3463, i64* %RAX, align 8, !tbaa !2428
  %3464 = load i64, i64* %RBP
  %3465 = sub i64 %3464, 12
  %3466 = load i64, i64* %PC
  %3467 = add i64 %3466, 4
  store i64 %3467, i64* %PC
  %3468 = inttoptr i64 %3465 to i32*
  %3469 = load i32, i32* %3468
  %3470 = sext i32 %3469 to i64
  store i64 %3470, i64* %RCX, align 8, !tbaa !2428
  %3471 = load i32, i32* %EAX
  %3472 = zext i32 %3471 to i64
  %3473 = load i64, i64* %RBP
  %3474 = load i64, i64* %RCX
  %3475 = mul i64 %3474, 4
  %3476 = add i64 %3473, -1328
  %3477 = add i64 %3476, %3475
  %3478 = load i64, i64* %PC
  %3479 = add i64 %3478, 7
  store i64 %3479, i64* %PC
  %3480 = inttoptr i64 %3477 to i32*
  %3481 = load i32, i32* %3480
  %3482 = sub i32 %3471, %3481
  %3483 = icmp ult i32 %3471, %3481
  %3484 = zext i1 %3483 to i8
  %3485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3484, i8* %3485, align 1, !tbaa !2432
  %3486 = and i32 %3482, 255
  %3487 = call i32 @llvm.ctpop.i32(i32 %3486) #16
  %3488 = trunc i32 %3487 to i8
  %3489 = and i8 %3488, 1
  %3490 = xor i8 %3489, 1
  %3491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3490, i8* %3491, align 1, !tbaa !2446
  %3492 = xor i32 %3481, %3471
  %3493 = xor i32 %3492, %3482
  %3494 = lshr i32 %3493, 4
  %3495 = trunc i32 %3494 to i8
  %3496 = and i8 %3495, 1
  %3497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3496, i8* %3497, align 1, !tbaa !2447
  %3498 = icmp eq i32 %3482, 0
  %3499 = zext i1 %3498 to i8
  %3500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3499, i8* %3500, align 1, !tbaa !2448
  %3501 = lshr i32 %3482, 31
  %3502 = trunc i32 %3501 to i8
  %3503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3502, i8* %3503, align 1, !tbaa !2449
  %3504 = lshr i32 %3471, 31
  %3505 = lshr i32 %3481, 31
  %3506 = xor i32 %3505, %3504
  %3507 = xor i32 %3501, %3504
  %3508 = add nuw nsw i32 %3507, %3506
  %3509 = icmp eq i32 %3508, 2
  %3510 = zext i1 %3509 to i8
  %3511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3510, i8* %3511, align 1, !tbaa !2450
  %3512 = load i64, i64* %PC
  %3513 = add i64 %3512, 129
  %3514 = load i64, i64* %PC
  %3515 = add i64 %3514, 6
  %3516 = load i64, i64* %PC
  %3517 = add i64 %3516, 6
  store i64 %3517, i64* %PC
  %3518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3519 = load i8, i8* %3518, align 1, !tbaa !2448
  %3520 = icmp eq i8 %3519, 0
  %3521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3522 = load i8, i8* %3521, align 1, !tbaa !2449
  %3523 = icmp ne i8 %3522, 0
  %3524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3525 = load i8, i8* %3524, align 1, !tbaa !2450
  %3526 = icmp ne i8 %3525, 0
  %3527 = xor i1 %3523, %3526
  %3528 = xor i1 %3527, true
  %3529 = and i1 %3520, %3528
  %3530 = zext i1 %3529 to i8
  store i8 %3530, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3532 = select i1 %3529, i64 %3513, i64 %3515
  store i64 %3532, i64* %3531, align 8, !tbaa !2428
  %3533 = load i8, i8* %BRANCH_TAKEN
  %3534 = icmp eq i8 %3533, 1
  %3535 = load i64, i64* %RBP
  br i1 %3534, label %block_401572, label %block_4014f7

block_401631:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4, %block_4015dc
  %MEMORY.20 = phi %struct.Memory* [ %MEMORY.51, %block_4015dc ], [ %3048, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4 ]
  %3536 = load i64, i64* %PC
  %3537 = add i64 %3536, 5
  %3538 = load i64, i64* %PC
  %3539 = add i64 %3538, 5
  store i64 %3539, i64* %PC
  %3540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3537, i64* %3540, align 8, !tbaa !2428
  %3541 = load i64, i64* %RBP
  %3542 = sub i64 %3541, 8
  %3543 = load i64, i64* %PC
  %3544 = add i64 %3543, 3
  store i64 %3544, i64* %PC
  %3545 = inttoptr i64 %3542 to i32*
  %3546 = load i32, i32* %3545
  %3547 = zext i32 %3546 to i64
  store i64 %3547, i64* %RAX, align 8, !tbaa !2428
  %3548 = load i64, i64* %RAX
  %3549 = load i64, i64* %PC
  %3550 = add i64 %3549, 3
  store i64 %3550, i64* %PC
  %3551 = trunc i64 %3548 to i32
  %3552 = add i32 1, %3551
  %3553 = zext i32 %3552 to i64
  store i64 %3553, i64* %RAX, align 8, !tbaa !2428
  %3554 = icmp ult i32 %3552, %3551
  %3555 = icmp ult i32 %3552, 1
  %3556 = or i1 %3554, %3555
  %3557 = zext i1 %3556 to i8
  %3558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3557, i8* %3558, align 1, !tbaa !2432
  %3559 = and i32 %3552, 255
  %3560 = call i32 @llvm.ctpop.i32(i32 %3559) #16
  %3561 = trunc i32 %3560 to i8
  %3562 = and i8 %3561, 1
  %3563 = xor i8 %3562, 1
  %3564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3563, i8* %3564, align 1, !tbaa !2446
  %3565 = xor i64 1, %3548
  %3566 = trunc i64 %3565 to i32
  %3567 = xor i32 %3566, %3552
  %3568 = lshr i32 %3567, 4
  %3569 = trunc i32 %3568 to i8
  %3570 = and i8 %3569, 1
  %3571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3570, i8* %3571, align 1, !tbaa !2447
  %3572 = icmp eq i32 %3552, 0
  %3573 = zext i1 %3572 to i8
  %3574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3573, i8* %3574, align 1, !tbaa !2448
  %3575 = lshr i32 %3552, 31
  %3576 = trunc i32 %3575 to i8
  %3577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3576, i8* %3577, align 1, !tbaa !2449
  %3578 = lshr i32 %3551, 31
  %3579 = xor i32 %3575, %3578
  %3580 = add nuw nsw i32 %3579, %3575
  %3581 = icmp eq i32 %3580, 2
  %3582 = zext i1 %3581 to i8
  %3583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3582, i8* %3583, align 1, !tbaa !2450
  %3584 = load i64, i64* %RBP
  %3585 = sub i64 %3584, 8
  %3586 = load i32, i32* %EAX
  %3587 = zext i32 %3586 to i64
  %3588 = load i64, i64* %PC
  %3589 = add i64 %3588, 3
  store i64 %3589, i64* %PC
  %3590 = inttoptr i64 %3585 to i32*
  store i32 %3586, i32* %3590
  %3591 = load i64, i64* %PC
  %3592 = sub i64 %3591, 119
  %3593 = load i64, i64* %PC
  %3594 = add i64 %3593, 5
  store i64 %3594, i64* %PC
  %3595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3592, i64* %3595, align 8, !tbaa !2428
  br label %block_4015c8

block_401125:                                     ; preds = %block_401113
  %3596 = load i64, i64* %PC
  %3597 = add i64 %3596, 5
  store i64 %3597, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %3598 = load i64, i64* %RBP
  %3599 = sub i64 %3598, 8
  %3600 = load i64, i64* %PC
  %3601 = add i64 %3600, 4
  store i64 %3601, i64* %PC
  %3602 = inttoptr i64 %3599 to i32*
  %3603 = load i32, i32* %3602
  %3604 = sext i32 %3603 to i64
  store i64 %3604, i64* %RCX, align 8, !tbaa !2428
  %3605 = load i64, i64* %RBP
  %3606 = load i64, i64* %RCX
  %3607 = mul i64 %3606, 4
  %3608 = add i64 %3605, -2688
  %3609 = add i64 %3608, %3607
  %3610 = load i64, i64* %PC
  %3611 = add i64 %3610, 7
  store i64 %3611, i64* %PC
  %3612 = inttoptr i64 %3609 to i32*
  %3613 = load i32, i32* %3612
  %3614 = zext i32 %3613 to i64
  store i64 %3614, i64* %RDX, align 8, !tbaa !2428
  %3615 = load i64, i64* %RDX
  %3616 = load i64, i64* %RBP
  %3617 = sub i64 %3616, 8
  %3618 = load i64, i64* %PC
  %3619 = add i64 %3618, 3
  store i64 %3619, i64* %PC
  %3620 = trunc i64 %3615 to i32
  %3621 = inttoptr i64 %3617 to i32*
  %3622 = load i32, i32* %3621
  %3623 = add i32 %3622, %3620
  %3624 = zext i32 %3623 to i64
  store i64 %3624, i64* %RDX, align 8, !tbaa !2428
  %3625 = icmp ult i32 %3623, %3620
  %3626 = icmp ult i32 %3623, %3622
  %3627 = or i1 %3625, %3626
  %3628 = zext i1 %3627 to i8
  %3629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3628, i8* %3629, align 1, !tbaa !2432
  %3630 = and i32 %3623, 255
  %3631 = call i32 @llvm.ctpop.i32(i32 %3630) #16
  %3632 = trunc i32 %3631 to i8
  %3633 = and i8 %3632, 1
  %3634 = xor i8 %3633, 1
  %3635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3634, i8* %3635, align 1, !tbaa !2446
  %3636 = xor i32 %3622, %3620
  %3637 = xor i32 %3636, %3623
  %3638 = lshr i32 %3637, 4
  %3639 = trunc i32 %3638 to i8
  %3640 = and i8 %3639, 1
  %3641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3640, i8* %3641, align 1, !tbaa !2447
  %3642 = icmp eq i32 %3623, 0
  %3643 = zext i1 %3642 to i8
  %3644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3643, i8* %3644, align 1, !tbaa !2448
  %3645 = lshr i32 %3623, 31
  %3646 = trunc i32 %3645 to i8
  %3647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3646, i8* %3647, align 1, !tbaa !2449
  %3648 = lshr i32 %3620, 31
  %3649 = lshr i32 %3622, 31
  %3650 = xor i32 %3645, %3648
  %3651 = xor i32 %3645, %3649
  %3652 = add nuw nsw i32 %3650, %3651
  %3653 = icmp eq i32 %3652, 2
  %3654 = zext i1 %3653 to i8
  %3655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3654, i8* %3655, align 1, !tbaa !2450
  %3656 = load i64, i64* %RBP
  %3657 = sub i64 %3656, 2716
  %3658 = load i32, i32* %EAX
  %3659 = zext i32 %3658 to i64
  %3660 = load i64, i64* %PC
  %3661 = add i64 %3660, 6
  store i64 %3661, i64* %PC
  %3662 = inttoptr i64 %3657 to i32*
  store i32 %3658, i32* %3662
  %3663 = load i32, i32* %EDX
  %3664 = zext i32 %3663 to i64
  %3665 = load i64, i64* %PC
  %3666 = add i64 %3665, 2
  store i64 %3666, i64* %PC
  %3667 = and i64 %3664, 4294967295
  store i64 %3667, i64* %RAX, align 8, !tbaa !2428
  %3668 = load i64, i64* %PC
  %3669 = add i64 %3668, 1
  store i64 %3669, i64* %PC
  %3670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %3672 = bitcast %union.anon* %3671 to i32*
  %3673 = load i32, i32* %3672, align 8, !tbaa !2452
  %3674 = sext i32 %3673 to i64
  %3675 = lshr i64 %3674, 32
  store i64 %3675, i64* %3670, align 8, !tbaa !2428
  %3676 = load i64, i64* %RBP
  %3677 = sub i64 %3676, 2716
  %3678 = load i64, i64* %PC
  %3679 = add i64 %3678, 6
  store i64 %3679, i64* %PC
  %3680 = inttoptr i64 %3677 to i32*
  %3681 = load i32, i32* %3680
  %3682 = zext i32 %3681 to i64
  store i64 %3682, i64* %RSI, align 8, !tbaa !2428
  %3683 = load i32, i32* %ESI
  %3684 = zext i32 %3683 to i64
  %3685 = load i64, i64* %PC
  %3686 = add i64 %3685, 2
  store i64 %3686, i64* %PC
  %3687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %3688 = bitcast %union.anon* %3687 to i32*
  %3689 = load i32, i32* %3688, align 8, !tbaa !2452
  %3690 = zext i32 %3689 to i64
  %3691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %3692 = bitcast %union.anon* %3691 to i32*
  %3693 = load i32, i32* %3692, align 8, !tbaa !2452
  %3694 = zext i32 %3693 to i64
  %3695 = shl i64 %3684, 32
  %3696 = ashr exact i64 %3695, 32
  %3697 = shl nuw i64 %3694, 32
  %3698 = or i64 %3697, %3690
  %3699 = sdiv i64 %3698, %3696
  %3700 = shl i64 %3699, 32
  %3701 = ashr exact i64 %3700, 32
  %3702 = icmp eq i64 %3699, %3701
  br i1 %3702, label %3707, label %3703

; <label>:3703:                                   ; preds = %block_401125
  %3704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3705 = load i64, i64* %3704, align 8, !tbaa !2428
  %3706 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3705, %struct.Memory* %MEMORY.23) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

; <label>:3707:                                   ; preds = %block_401125
  %3708 = srem i64 %3698, %3696
  %3709 = getelementptr inbounds %union.anon, %union.anon* %3687, i64 0, i32 0
  %3710 = and i64 %3699, 4294967295
  store i64 %3710, i64* %3709, align 8, !tbaa !2428
  %3711 = getelementptr inbounds %union.anon, %union.anon* %3691, i64 0, i32 0
  %3712 = and i64 %3708, 4294967295
  store i64 %3712, i64* %3711, align 8, !tbaa !2428
  %3713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3713, align 1, !tbaa !2432
  %3714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %3714, align 1, !tbaa !2446
  %3715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3715, align 1, !tbaa !2447
  %3716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3716, align 1, !tbaa !2448
  %3717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %3717, align 1, !tbaa !2449
  %3718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3718, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3: ; preds = %3703, %3707
  %3719 = phi %struct.Memory* [ %3706, %3703 ], [ %MEMORY.23, %3707 ]
  %3720 = load i64, i64* %RBP
  %3721 = sub i64 %3720, 8
  %3722 = load i64, i64* %PC
  %3723 = add i64 %3722, 4
  store i64 %3723, i64* %PC
  %3724 = inttoptr i64 %3721 to i32*
  %3725 = load i32, i32* %3724
  %3726 = sext i32 %3725 to i64
  store i64 %3726, i64* %RCX, align 8, !tbaa !2428
  %3727 = load i64, i64* %RBP
  %3728 = load i64, i64* %RCX
  %3729 = mul i64 %3728, 4
  %3730 = add i64 %3727, -2688
  %3731 = add i64 %3730, %3729
  %3732 = load i32, i32* %EDX
  %3733 = zext i32 %3732 to i64
  %3734 = load i64, i64* %PC
  %3735 = add i64 %3734, 7
  store i64 %3735, i64* %PC
  %3736 = inttoptr i64 %3731 to i32*
  store i32 %3732, i32* %3736
  %3737 = load i64, i64* %RBP
  %3738 = sub i64 %3737, 8
  %3739 = load i64, i64* %PC
  %3740 = add i64 %3739, 4
  store i64 %3740, i64* %PC
  %3741 = inttoptr i64 %3738 to i32*
  %3742 = load i32, i32* %3741
  %3743 = sext i32 %3742 to i64
  store i64 %3743, i64* %RCX, align 8, !tbaa !2428
  %3744 = load i64, i64* %RBP
  %3745 = load i64, i64* %RCX
  %3746 = mul i64 %3745, 4
  %3747 = add i64 %3744, -2688
  %3748 = add i64 %3747, %3746
  %3749 = load i64, i64* %PC
  %3750 = add i64 %3749, 8
  store i64 %3750, i64* %PC
  %3751 = inttoptr i64 %3748 to i32*
  %3752 = load i32, i32* %3751
  %3753 = sext i32 %3752 to i64
  store i64 %3753, i64* %RCX, align 8, !tbaa !2428
  %3754 = load i64, i64* %RCX
  %3755 = mul i64 %3754, 4
  %3756 = add i64 %3755, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %3757 = load i64, i64* %PC
  %3758 = add i64 %3757, 7
  store i64 %3758, i64* %PC
  %3759 = inttoptr i64 %3756 to i32*
  %3760 = load i32, i32* %3759
  %3761 = zext i32 %3760 to i64
  store i64 %3761, i64* %RDX, align 8, !tbaa !2428
  %3762 = load i64, i64* %RDX
  %3763 = load i64, i64* %RBP
  %3764 = sub i64 %3763, 16
  %3765 = load i64, i64* %PC
  %3766 = add i64 %3765, 3
  store i64 %3766, i64* %PC
  %3767 = trunc i64 %3762 to i32
  %3768 = inttoptr i64 %3764 to i32*
  %3769 = load i32, i32* %3768
  %3770 = xor i32 %3769, %3767
  %3771 = zext i32 %3770 to i64
  store i64 %3771, i64* %RDX, align 8, !tbaa !2428
  %3772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3772, align 1, !tbaa !2432
  %3773 = and i32 %3770, 255
  %3774 = call i32 @llvm.ctpop.i32(i32 %3773) #16
  %3775 = trunc i32 %3774 to i8
  %3776 = and i8 %3775, 1
  %3777 = xor i8 %3776, 1
  %3778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3777, i8* %3778, align 1, !tbaa !2446
  %3779 = icmp eq i32 %3770, 0
  %3780 = zext i1 %3779 to i8
  %3781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3780, i8* %3781, align 1, !tbaa !2448
  %3782 = lshr i32 %3770, 31
  %3783 = trunc i32 %3782 to i8
  %3784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3783, i8* %3784, align 1, !tbaa !2449
  %3785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3785, align 1, !tbaa !2450
  %3786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3786, align 1, !tbaa !2447
  %3787 = load i64, i64* %RBP
  %3788 = sub i64 %3787, 16
  %3789 = load i32, i32* %EDX
  %3790 = zext i32 %3789 to i64
  %3791 = load i64, i64* %PC
  %3792 = add i64 %3791, 3
  store i64 %3792, i64* %PC
  %3793 = inttoptr i64 %3788 to i32*
  store i32 %3789, i32* %3793
  br label %block_40116d

block_400f1e:                                     ; preds = %block_400ef9
  %3794 = load i64, i64* %PC
  %3795 = add i64 %3794, 5
  store i64 %3795, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %3796 = load i64, i64* %RBP
  %3797 = sub i64 %3796, 1168
  %3798 = load i64, i64* %PC
  %3799 = add i64 %3798, 7
  store i64 %3799, i64* %PC
  store i64 %3797, i64* %RCX, align 8, !tbaa !2428
  %3800 = load i64, i64* %RBP
  %3801 = sub i64 %3800, 12
  %3802 = load i64, i64* %PC
  %3803 = add i64 %3802, 3
  store i64 %3803, i64* %PC
  %3804 = inttoptr i64 %3801 to i32*
  %3805 = load i32, i32* %3804
  %3806 = zext i32 %3805 to i64
  store i64 %3806, i64* %RDX, align 8, !tbaa !2428
  %3807 = load i64, i64* %RDX
  %3808 = load i64, i64* %PC
  %3809 = add i64 %3808, 3
  store i64 %3809, i64* %PC
  %3810 = trunc i64 %3807 to i32
  %3811 = add i32 1, %3810
  %3812 = zext i32 %3811 to i64
  store i64 %3812, i64* %RDX, align 8, !tbaa !2428
  %3813 = icmp ult i32 %3811, %3810
  %3814 = icmp ult i32 %3811, 1
  %3815 = or i1 %3813, %3814
  %3816 = zext i1 %3815 to i8
  %3817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3816, i8* %3817, align 1, !tbaa !2432
  %3818 = and i32 %3811, 255
  %3819 = call i32 @llvm.ctpop.i32(i32 %3818) #16
  %3820 = trunc i32 %3819 to i8
  %3821 = and i8 %3820, 1
  %3822 = xor i8 %3821, 1
  %3823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3822, i8* %3823, align 1, !tbaa !2446
  %3824 = xor i64 1, %3807
  %3825 = trunc i64 %3824 to i32
  %3826 = xor i32 %3825, %3811
  %3827 = lshr i32 %3826, 4
  %3828 = trunc i32 %3827 to i8
  %3829 = and i8 %3828, 1
  %3830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3829, i8* %3830, align 1, !tbaa !2447
  %3831 = icmp eq i32 %3811, 0
  %3832 = zext i1 %3831 to i8
  %3833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3832, i8* %3833, align 1, !tbaa !2448
  %3834 = lshr i32 %3811, 31
  %3835 = trunc i32 %3834 to i8
  %3836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3835, i8* %3836, align 1, !tbaa !2449
  %3837 = lshr i32 %3810, 31
  %3838 = xor i32 %3834, %3837
  %3839 = add nuw nsw i32 %3838, %3834
  %3840 = icmp eq i32 %3839, 2
  %3841 = zext i1 %3840 to i8
  %3842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3841, i8* %3842, align 1, !tbaa !2450
  %3843 = load i64, i64* %RDX
  %3844 = load i64, i64* %RBP
  %3845 = sub i64 %3844, 4
  %3846 = load i64, i64* %PC
  %3847 = add i64 %3846, 3
  store i64 %3847, i64* %PC
  %3848 = trunc i64 %3843 to i32
  %3849 = inttoptr i64 %3845 to i32*
  %3850 = load i32, i32* %3849
  %3851 = sub i32 %3848, %3850
  %3852 = zext i32 %3851 to i64
  store i64 %3852, i64* %RDX, align 8, !tbaa !2428
  %3853 = icmp ult i32 %3848, %3850
  %3854 = zext i1 %3853 to i8
  %3855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3854, i8* %3855, align 1, !tbaa !2432
  %3856 = and i32 %3851, 255
  %3857 = call i32 @llvm.ctpop.i32(i32 %3856) #16
  %3858 = trunc i32 %3857 to i8
  %3859 = and i8 %3858, 1
  %3860 = xor i8 %3859, 1
  %3861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3860, i8* %3861, align 1, !tbaa !2446
  %3862 = xor i32 %3850, %3848
  %3863 = xor i32 %3862, %3851
  %3864 = lshr i32 %3863, 4
  %3865 = trunc i32 %3864 to i8
  %3866 = and i8 %3865, 1
  %3867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3866, i8* %3867, align 1, !tbaa !2447
  %3868 = icmp eq i32 %3851, 0
  %3869 = zext i1 %3868 to i8
  %3870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3869, i8* %3870, align 1, !tbaa !2448
  %3871 = lshr i32 %3851, 31
  %3872 = trunc i32 %3871 to i8
  %3873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3872, i8* %3873, align 1, !tbaa !2449
  %3874 = lshr i32 %3848, 31
  %3875 = lshr i32 %3850, 31
  %3876 = xor i32 %3875, %3874
  %3877 = xor i32 %3871, %3874
  %3878 = add nuw nsw i32 %3877, %3876
  %3879 = icmp eq i32 %3878, 2
  %3880 = zext i1 %3879 to i8
  %3881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3880, i8* %3881, align 1, !tbaa !2450
  %3882 = load i32, i32* %EDX
  %3883 = zext i32 %3882 to i64
  %3884 = load i64, i64* %PC
  %3885 = add i64 %3884, 3
  store i64 %3885, i64* %PC
  %3886 = shl i64 %3883, 32
  %3887 = ashr exact i64 %3886, 32
  store i64 %3887, i64* %RSI, align 8, !tbaa !2428
  %3888 = load i64, i64* %RBP
  %3889 = load i64, i64* %RSI
  %3890 = mul i64 %3889, 4
  %3891 = add i64 %3888, -1488
  %3892 = add i64 %3891, %3890
  %3893 = load i64, i64* %PC
  %3894 = add i64 %3893, 7
  store i64 %3894, i64* %PC
  %3895 = inttoptr i64 %3892 to i32*
  %3896 = load i32, i32* %3895
  %3897 = zext i32 %3896 to i64
  store i64 %3897, i64* %RDX, align 8, !tbaa !2428
  %3898 = load i64, i64* %RBP
  %3899 = sub i64 %3898, 12
  %3900 = load i64, i64* %PC
  %3901 = add i64 %3900, 3
  store i64 %3901, i64* %PC
  %3902 = inttoptr i64 %3899 to i32*
  %3903 = load i32, i32* %3902
  %3904 = zext i32 %3903 to i64
  store i64 %3904, i64* %RDI, align 8, !tbaa !2428
  %3905 = load i64, i64* %RDI
  %3906 = load i64, i64* %PC
  %3907 = add i64 %3906, 3
  store i64 %3907, i64* %PC
  %3908 = trunc i64 %3905 to i32
  %3909 = add i32 1, %3908
  %3910 = zext i32 %3909 to i64
  store i64 %3910, i64* %RDI, align 8, !tbaa !2428
  %3911 = icmp ult i32 %3909, %3908
  %3912 = icmp ult i32 %3909, 1
  %3913 = or i1 %3911, %3912
  %3914 = zext i1 %3913 to i8
  %3915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3914, i8* %3915, align 1, !tbaa !2432
  %3916 = and i32 %3909, 255
  %3917 = call i32 @llvm.ctpop.i32(i32 %3916) #16
  %3918 = trunc i32 %3917 to i8
  %3919 = and i8 %3918, 1
  %3920 = xor i8 %3919, 1
  %3921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3920, i8* %3921, align 1, !tbaa !2446
  %3922 = xor i64 1, %3905
  %3923 = trunc i64 %3922 to i32
  %3924 = xor i32 %3923, %3909
  %3925 = lshr i32 %3924, 4
  %3926 = trunc i32 %3925 to i8
  %3927 = and i8 %3926, 1
  %3928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3927, i8* %3928, align 1, !tbaa !2447
  %3929 = icmp eq i32 %3909, 0
  %3930 = zext i1 %3929 to i8
  %3931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3930, i8* %3931, align 1, !tbaa !2448
  %3932 = lshr i32 %3909, 31
  %3933 = trunc i32 %3932 to i8
  %3934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3933, i8* %3934, align 1, !tbaa !2449
  %3935 = lshr i32 %3908, 31
  %3936 = xor i32 %3932, %3935
  %3937 = add nuw nsw i32 %3936, %3932
  %3938 = icmp eq i32 %3937, 2
  %3939 = zext i1 %3938 to i8
  %3940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3939, i8* %3940, align 1, !tbaa !2450
  %3941 = load i32, i32* %EDI
  %3942 = zext i32 %3941 to i64
  %3943 = load i64, i64* %PC
  %3944 = add i64 %3943, 3
  store i64 %3944, i64* %PC
  %3945 = shl i64 %3942, 32
  %3946 = ashr exact i64 %3945, 32
  store i64 %3946, i64* %RSI, align 8, !tbaa !2428
  %3947 = load i64, i64* %RSI
  %3948 = load i64, i64* %PC
  %3949 = add i64 %3948, 4
  store i64 %3949, i64* %PC
  %3950 = shl i64 %3947, 5
  %3951 = icmp slt i64 %3950, 0
  %3952 = shl i64 %3950, 1
  store i64 %3952, i64* %RSI, align 8, !tbaa !2428
  %3953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3954 = zext i1 %3951 to i8
  store i8 %3954, i8* %3953, align 1, !tbaa !2451
  %3955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3956 = trunc i64 %3952 to i32
  %3957 = and i32 %3956, 254
  %3958 = call i32 @llvm.ctpop.i32(i32 %3957) #16
  %3959 = trunc i32 %3958 to i8
  %3960 = and i8 %3959, 1
  %3961 = xor i8 %3960, 1
  store i8 %3961, i8* %3955, align 1, !tbaa !2451
  %3962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3962, align 1, !tbaa !2451
  %3963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3964 = icmp eq i64 %3952, 0
  %3965 = zext i1 %3964 to i8
  store i8 %3965, i8* %3963, align 1, !tbaa !2451
  %3966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3967 = lshr i64 %3952, 63
  %3968 = trunc i64 %3967 to i8
  store i8 %3968, i8* %3966, align 1, !tbaa !2451
  %3969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3969, align 1, !tbaa !2451
  %3970 = load i64, i64* %RCX
  %3971 = load i64, i64* %RSI
  %3972 = load i64, i64* %PC
  %3973 = add i64 %3972, 3
  store i64 %3973, i64* %PC
  %3974 = add i64 %3971, %3970
  store i64 %3974, i64* %RCX, align 8, !tbaa !2428
  %3975 = icmp ult i64 %3974, %3970
  %3976 = icmp ult i64 %3974, %3971
  %3977 = or i1 %3975, %3976
  %3978 = zext i1 %3977 to i8
  %3979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3978, i8* %3979, align 1, !tbaa !2432
  %3980 = trunc i64 %3974 to i32
  %3981 = and i32 %3980, 255
  %3982 = call i32 @llvm.ctpop.i32(i32 %3981) #16
  %3983 = trunc i32 %3982 to i8
  %3984 = and i8 %3983, 1
  %3985 = xor i8 %3984, 1
  %3986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3985, i8* %3986, align 1, !tbaa !2446
  %3987 = xor i64 %3971, %3970
  %3988 = xor i64 %3987, %3974
  %3989 = lshr i64 %3988, 4
  %3990 = trunc i64 %3989 to i8
  %3991 = and i8 %3990, 1
  %3992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3991, i8* %3992, align 1, !tbaa !2447
  %3993 = icmp eq i64 %3974, 0
  %3994 = zext i1 %3993 to i8
  %3995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3994, i8* %3995, align 1, !tbaa !2448
  %3996 = lshr i64 %3974, 63
  %3997 = trunc i64 %3996 to i8
  %3998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3997, i8* %3998, align 1, !tbaa !2449
  %3999 = lshr i64 %3970, 63
  %4000 = lshr i64 %3971, 63
  %4001 = xor i64 %3996, %3999
  %4002 = xor i64 %3996, %4000
  %4003 = add nuw nsw i64 %4001, %4002
  %4004 = icmp eq i64 %4003, 2
  %4005 = zext i1 %4004 to i8
  %4006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4005, i8* %4006, align 1, !tbaa !2450
  %4007 = load i64, i64* %RBP
  %4008 = sub i64 %4007, 4
  %4009 = load i64, i64* %PC
  %4010 = add i64 %4009, 4
  store i64 %4010, i64* %PC
  %4011 = inttoptr i64 %4008 to i32*
  %4012 = load i32, i32* %4011
  %4013 = sext i32 %4012 to i64
  store i64 %4013, i64* %RSI, align 8, !tbaa !2428
  %4014 = load i64, i64* %RCX
  %4015 = load i64, i64* %RSI
  %4016 = mul i64 %4015, 4
  %4017 = add i64 %4016, %4014
  %4018 = load i64, i64* %PC
  %4019 = add i64 %4018, 4
  store i64 %4019, i64* %PC
  %4020 = inttoptr i64 %4017 to i32*
  %4021 = load i32, i32* %4020
  %4022 = sext i32 %4021 to i64
  store i64 %4022, i64* %RCX, align 8, !tbaa !2428
  %4023 = load i64, i64* %RDX
  %4024 = load i64, i64* %RCX
  %4025 = mul i64 %4024, 4
  %4026 = add i64 %4025, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %4027 = load i64, i64* %PC
  %4028 = add i64 %4027, 7
  store i64 %4028, i64* %PC
  %4029 = trunc i64 %4023 to i32
  %4030 = inttoptr i64 %4026 to i32*
  %4031 = load i32, i32* %4030
  %4032 = add i32 %4031, %4029
  %4033 = zext i32 %4032 to i64
  store i64 %4033, i64* %RDX, align 8, !tbaa !2428
  %4034 = icmp ult i32 %4032, %4029
  %4035 = icmp ult i32 %4032, %4031
  %4036 = or i1 %4034, %4035
  %4037 = zext i1 %4036 to i8
  %4038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4037, i8* %4038, align 1, !tbaa !2432
  %4039 = and i32 %4032, 255
  %4040 = call i32 @llvm.ctpop.i32(i32 %4039) #16
  %4041 = trunc i32 %4040 to i8
  %4042 = and i8 %4041, 1
  %4043 = xor i8 %4042, 1
  %4044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4043, i8* %4044, align 1, !tbaa !2446
  %4045 = xor i32 %4031, %4029
  %4046 = xor i32 %4045, %4032
  %4047 = lshr i32 %4046, 4
  %4048 = trunc i32 %4047 to i8
  %4049 = and i8 %4048, 1
  %4050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4049, i8* %4050, align 1, !tbaa !2447
  %4051 = icmp eq i32 %4032, 0
  %4052 = zext i1 %4051 to i8
  %4053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4052, i8* %4053, align 1, !tbaa !2448
  %4054 = lshr i32 %4032, 31
  %4055 = trunc i32 %4054 to i8
  %4056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4055, i8* %4056, align 1, !tbaa !2449
  %4057 = lshr i32 %4029, 31
  %4058 = lshr i32 %4031, 31
  %4059 = xor i32 %4054, %4057
  %4060 = xor i32 %4054, %4058
  %4061 = add nuw nsw i32 %4059, %4060
  %4062 = icmp eq i32 %4061, 2
  %4063 = zext i1 %4062 to i8
  %4064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4063, i8* %4064, align 1, !tbaa !2450
  %4065 = load i64, i64* %RBP
  %4066 = sub i64 %4065, 2708
  %4067 = load i32, i32* %EAX
  %4068 = zext i32 %4067 to i64
  %4069 = load i64, i64* %PC
  %4070 = add i64 %4069, 6
  store i64 %4070, i64* %PC
  %4071 = inttoptr i64 %4066 to i32*
  store i32 %4067, i32* %4071
  %4072 = load i32, i32* %EDX
  %4073 = zext i32 %4072 to i64
  %4074 = load i64, i64* %PC
  %4075 = add i64 %4074, 2
  store i64 %4075, i64* %PC
  %4076 = and i64 %4073, 4294967295
  store i64 %4076, i64* %RAX, align 8, !tbaa !2428
  %4077 = load i64, i64* %PC
  %4078 = add i64 %4077, 1
  store i64 %4078, i64* %PC
  %4079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %4081 = bitcast %union.anon* %4080 to i32*
  %4082 = load i32, i32* %4081, align 8, !tbaa !2452
  %4083 = sext i32 %4082 to i64
  %4084 = lshr i64 %4083, 32
  store i64 %4084, i64* %4079, align 8, !tbaa !2428
  %4085 = load i64, i64* %RBP
  %4086 = sub i64 %4085, 2708
  %4087 = load i64, i64* %PC
  %4088 = add i64 %4087, 6
  store i64 %4088, i64* %PC
  %4089 = inttoptr i64 %4086 to i32*
  %4090 = load i32, i32* %4089
  %4091 = zext i32 %4090 to i64
  store i64 %4091, i64* %RDI, align 8, !tbaa !2428
  %4092 = load i32, i32* %EDI
  %4093 = zext i32 %4092 to i64
  %4094 = load i64, i64* %PC
  %4095 = add i64 %4094, 2
  store i64 %4095, i64* %PC
  %4096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %4097 = bitcast %union.anon* %4096 to i32*
  %4098 = load i32, i32* %4097, align 8, !tbaa !2452
  %4099 = zext i32 %4098 to i64
  %4100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %4101 = bitcast %union.anon* %4100 to i32*
  %4102 = load i32, i32* %4101, align 8, !tbaa !2452
  %4103 = zext i32 %4102 to i64
  %4104 = shl i64 %4093, 32
  %4105 = ashr exact i64 %4104, 32
  %4106 = shl nuw i64 %4103, 32
  %4107 = or i64 %4106, %4099
  %4108 = sdiv i64 %4107, %4105
  %4109 = shl i64 %4108, 32
  %4110 = ashr exact i64 %4109, 32
  %4111 = icmp eq i64 %4108, %4110
  br i1 %4111, label %4116, label %4112

; <label>:4112:                                   ; preds = %block_400f1e
  %4113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4114 = load i64, i64* %4113, align 8, !tbaa !2428
  %4115 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4114, %struct.Memory* %MEMORY.27) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

; <label>:4116:                                   ; preds = %block_400f1e
  %4117 = srem i64 %4107, %4105
  %4118 = getelementptr inbounds %union.anon, %union.anon* %4096, i64 0, i32 0
  %4119 = and i64 %4108, 4294967295
  store i64 %4119, i64* %4118, align 8, !tbaa !2428
  %4120 = getelementptr inbounds %union.anon, %union.anon* %4100, i64 0, i32 0
  %4121 = and i64 %4117, 4294967295
  store i64 %4121, i64* %4120, align 8, !tbaa !2428
  %4122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4122, align 1, !tbaa !2432
  %4123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %4123, align 1, !tbaa !2446
  %4124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4124, align 1, !tbaa !2447
  %4125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4125, align 1, !tbaa !2448
  %4126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %4126, align 1, !tbaa !2449
  %4127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4127, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2: ; preds = %4112, %4116
  %4128 = phi %struct.Memory* [ %4115, %4112 ], [ %MEMORY.27, %4116 ]
  %4129 = load i32, i32* %EDX
  %4130 = zext i32 %4129 to i64
  %4131 = load i64, i64* %PC
  %4132 = add i64 %4131, 3
  store i64 %4132, i64* %PC
  %4133 = shl i64 %4130, 32
  %4134 = ashr exact i64 %4133, 32
  store i64 %4134, i64* %RCX, align 8, !tbaa !2428
  %4135 = load i64, i64* %RCX
  %4136 = mul i64 %4135, 4
  %4137 = add i64 %4136, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %4138 = load i64, i64* %PC
  %4139 = add i64 %4138, 7
  store i64 %4139, i64* %PC
  %4140 = inttoptr i64 %4137 to i32*
  %4141 = load i32, i32* %4140
  %4142 = zext i32 %4141 to i64
  store i64 %4142, i64* %RDX, align 8, !tbaa !2428
  %4143 = bitcast i32* %R8D to i64*
  %4144 = load i64, i64* %RBP
  %4145 = sub i64 %4144, 12
  %4146 = load i64, i64* %PC
  %4147 = add i64 %4146, 4
  store i64 %4147, i64* %PC
  %4148 = inttoptr i64 %4145 to i32*
  %4149 = load i32, i32* %4148
  %4150 = zext i32 %4149 to i64
  store i64 %4150, i64* %4143, align 8, !tbaa !2428
  %4151 = bitcast i32* %R8D to i64*
  %4152 = load i32, i32* %R8D
  %4153 = zext i32 %4152 to i64
  %4154 = load i64, i64* %PC
  %4155 = add i64 %4154, 4
  store i64 %4155, i64* %PC
  %4156 = add i32 1, %4152
  %4157 = zext i32 %4156 to i64
  store i64 %4157, i64* %4151, align 8, !tbaa !2428
  %4158 = icmp ult i32 %4156, %4152
  %4159 = icmp ult i32 %4156, 1
  %4160 = or i1 %4158, %4159
  %4161 = zext i1 %4160 to i8
  %4162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4161, i8* %4162, align 1, !tbaa !2432
  %4163 = and i32 %4156, 255
  %4164 = call i32 @llvm.ctpop.i32(i32 %4163) #16
  %4165 = trunc i32 %4164 to i8
  %4166 = and i8 %4165, 1
  %4167 = xor i8 %4166, 1
  %4168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4167, i8* %4168, align 1, !tbaa !2446
  %4169 = xor i64 1, %4153
  %4170 = trunc i64 %4169 to i32
  %4171 = xor i32 %4170, %4156
  %4172 = lshr i32 %4171, 4
  %4173 = trunc i32 %4172 to i8
  %4174 = and i8 %4173, 1
  %4175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4174, i8* %4175, align 1, !tbaa !2447
  %4176 = icmp eq i32 %4156, 0
  %4177 = zext i1 %4176 to i8
  %4178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4177, i8* %4178, align 1, !tbaa !2448
  %4179 = lshr i32 %4156, 31
  %4180 = trunc i32 %4179 to i8
  %4181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4180, i8* %4181, align 1, !tbaa !2449
  %4182 = lshr i32 %4152, 31
  %4183 = xor i32 %4179, %4182
  %4184 = add nuw nsw i32 %4183, %4179
  %4185 = icmp eq i32 %4184, 2
  %4186 = zext i1 %4185 to i8
  %4187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4186, i8* %4187, align 1, !tbaa !2450
  %4188 = load i32, i32* %R8D
  %4189 = zext i32 %4188 to i64
  %4190 = load i64, i64* %PC
  %4191 = add i64 %4190, 3
  store i64 %4191, i64* %PC
  %4192 = shl i64 %4189, 32
  %4193 = ashr exact i64 %4192, 32
  store i64 %4193, i64* %RCX, align 8, !tbaa !2428
  %4194 = load i64, i64* %RDX
  %4195 = load i64, i64* %RBP
  %4196 = load i64, i64* %RCX
  %4197 = mul i64 %4196, 4
  %4198 = add i64 %4195, -1248
  %4199 = add i64 %4198, %4197
  %4200 = load i64, i64* %PC
  %4201 = add i64 %4200, 7
  store i64 %4201, i64* %PC
  %4202 = trunc i64 %4194 to i32
  %4203 = inttoptr i64 %4199 to i32*
  %4204 = load i32, i32* %4203
  %4205 = xor i32 %4204, %4202
  %4206 = zext i32 %4205 to i64
  store i64 %4206, i64* %RDX, align 8, !tbaa !2428
  %4207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4207, align 1, !tbaa !2432
  %4208 = and i32 %4205, 255
  %4209 = call i32 @llvm.ctpop.i32(i32 %4208) #16
  %4210 = trunc i32 %4209 to i8
  %4211 = and i8 %4210, 1
  %4212 = xor i8 %4211, 1
  %4213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4212, i8* %4213, align 1, !tbaa !2446
  %4214 = icmp eq i32 %4205, 0
  %4215 = zext i1 %4214 to i8
  %4216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4215, i8* %4216, align 1, !tbaa !2448
  %4217 = lshr i32 %4205, 31
  %4218 = trunc i32 %4217 to i8
  %4219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4218, i8* %4219, align 1, !tbaa !2449
  %4220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4220, align 1, !tbaa !2450
  %4221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4221, align 1, !tbaa !2447
  %4222 = load i64, i64* %RBP
  %4223 = load i64, i64* %RCX
  %4224 = mul i64 %4223, 4
  %4225 = add i64 %4222, -1248
  %4226 = add i64 %4225, %4224
  %4227 = load i32, i32* %EDX
  %4228 = zext i32 %4227 to i64
  %4229 = load i64, i64* %PC
  %4230 = add i64 %4229, 7
  store i64 %4230, i64* %PC
  %4231 = inttoptr i64 %4226 to i32*
  store i32 %4227, i32* %4231
  br label %block_400f90

block_401113:                                     ; preds = %block_4010ff
  %4232 = sub i64 %5513, 8
  %4233 = load i64, i64* %PC
  %4234 = add i64 %4233, 4
  store i64 %4234, i64* %PC
  %4235 = inttoptr i64 %4232 to i32*
  %4236 = load i32, i32* %4235
  %4237 = sext i32 %4236 to i64
  store i64 %4237, i64* %RAX, align 8, !tbaa !2428
  %4238 = load i64, i64* %RBP
  %4239 = load i64, i64* %RAX
  %4240 = mul i64 %4239, 4
  %4241 = add i64 %4238, -2688
  %4242 = add i64 %4241, %4240
  %4243 = load i64, i64* %PC
  %4244 = add i64 %4243, 8
  store i64 %4244, i64* %PC
  %4245 = inttoptr i64 %4242 to i32*
  %4246 = load i32, i32* %4245
  %4247 = sub i32 %4246, -1
  %4248 = icmp ult i32 %4246, -1
  %4249 = zext i1 %4248 to i8
  %4250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4249, i8* %4250, align 1, !tbaa !2432
  %4251 = and i32 %4247, 255
  %4252 = call i32 @llvm.ctpop.i32(i32 %4251) #16
  %4253 = trunc i32 %4252 to i8
  %4254 = and i8 %4253, 1
  %4255 = xor i8 %4254, 1
  %4256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4255, i8* %4256, align 1, !tbaa !2446
  %4257 = xor i32 %4246, -1
  %4258 = xor i32 %4257, %4247
  %4259 = lshr i32 %4258, 4
  %4260 = trunc i32 %4259 to i8
  %4261 = and i8 %4260, 1
  %4262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4261, i8* %4262, align 1, !tbaa !2447
  %4263 = icmp eq i32 %4247, 0
  %4264 = zext i1 %4263 to i8
  %4265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4264, i8* %4265, align 1, !tbaa !2448
  %4266 = lshr i32 %4247, 31
  %4267 = trunc i32 %4266 to i8
  %4268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4267, i8* %4268, align 1, !tbaa !2449
  %4269 = lshr i32 %4246, 31
  %4270 = xor i32 %4269, 1
  %4271 = xor i32 %4266, %4269
  %4272 = add nuw nsw i32 %4271, %4270
  %4273 = icmp eq i32 %4272, 2
  %4274 = zext i1 %4273 to i8
  %4275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4274, i8* %4275, align 1, !tbaa !2450
  %4276 = load i64, i64* %PC
  %4277 = add i64 %4276, 78
  %4278 = load i64, i64* %PC
  %4279 = add i64 %4278, 6
  %4280 = load i64, i64* %PC
  %4281 = add i64 %4280, 6
  store i64 %4281, i64* %PC
  %4282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4283 = load i8, i8* %4282, align 1, !tbaa !2448
  store i8 %4283, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4285 = icmp ne i8 %4283, 0
  %4286 = select i1 %4285, i64 %4277, i64 %4279
  store i64 %4286, i64* %4284, align 8, !tbaa !2428
  %4287 = load i8, i8* %BRANCH_TAKEN
  %4288 = icmp eq i8 %4287, 1
  br i1 %4288, label %block_40116d, label %block_401125

block_401509:                                     ; preds = %block_4014f7
  %4289 = load i64, i64* %PC
  %4290 = add i64 %4289, 5
  store i64 %4290, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %4291 = load i64, i64* %RBP
  %4292 = sub i64 %4291, 8
  %4293 = load i64, i64* %PC
  %4294 = add i64 %4293, 4
  store i64 %4294, i64* %PC
  %4295 = inttoptr i64 %4292 to i32*
  %4296 = load i32, i32* %4295
  %4297 = sext i32 %4296 to i64
  store i64 %4297, i64* %RCX, align 8, !tbaa !2428
  %4298 = load i64, i64* %RBP
  %4299 = load i64, i64* %RCX
  %4300 = mul i64 %4299, 4
  %4301 = add i64 %4298, -1616
  %4302 = add i64 %4301, %4300
  %4303 = load i64, i64* %PC
  %4304 = add i64 %4303, 7
  store i64 %4304, i64* %PC
  %4305 = inttoptr i64 %4302 to i32*
  %4306 = load i32, i32* %4305
  %4307 = zext i32 %4306 to i64
  store i64 %4307, i64* %RDX, align 8, !tbaa !2428
  %4308 = load i64, i64* %RBP
  %4309 = sub i64 %4308, 8
  %4310 = load i64, i64* %PC
  %4311 = add i64 %4310, 3
  store i64 %4311, i64* %PC
  %4312 = inttoptr i64 %4309 to i32*
  %4313 = load i32, i32* %4312
  %4314 = zext i32 %4313 to i64
  store i64 %4314, i64* %RSI, align 8, !tbaa !2428
  %4315 = load i64, i64* %RBP
  %4316 = sub i64 %4315, 4
  %4317 = load i64, i64* %PC
  %4318 = add i64 %4317, 4
  store i64 %4318, i64* %PC
  %4319 = inttoptr i64 %4316 to i32*
  %4320 = load i32, i32* %4319
  %4321 = sext i32 %4320 to i64
  store i64 %4321, i64* %RCX, align 8, !tbaa !2428
  %4322 = load i64, i64* %RSI
  %4323 = load i64, i64* %RBP
  %4324 = load i64, i64* %RCX
  %4325 = mul i64 %4324, 4
  %4326 = add i64 %4323, -1536
  %4327 = add i64 %4326, %4325
  %4328 = load i64, i64* %PC
  %4329 = add i64 %4328, 8
  store i64 %4329, i64* %PC
  %4330 = inttoptr i64 %4327 to i32*
  %4331 = load i32, i32* %4330
  %4332 = shl i64 %4322, 32
  %4333 = ashr exact i64 %4332, 32
  %4334 = sext i32 %4331 to i64
  %4335 = mul nsw i64 %4334, %4333
  %4336 = trunc i64 %4335 to i32
  %4337 = and i64 %4335, 4294967295
  store i64 %4337, i64* %RSI, align 8, !tbaa !2428
  %4338 = shl i64 %4335, 32
  %4339 = ashr exact i64 %4338, 32
  %4340 = icmp ne i64 %4339, %4335
  %4341 = zext i1 %4340 to i8
  %4342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4341, i8* %4342, align 1, !tbaa !2432
  %4343 = and i32 %4336, 255
  %4344 = call i32 @llvm.ctpop.i32(i32 %4343) #16
  %4345 = trunc i32 %4344 to i8
  %4346 = and i8 %4345, 1
  %4347 = xor i8 %4346, 1
  %4348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4347, i8* %4348, align 1, !tbaa !2446
  %4349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4349, align 1, !tbaa !2447
  %4350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4350, align 1, !tbaa !2448
  %4351 = lshr i32 %4336, 31
  %4352 = trunc i32 %4351 to i8
  %4353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4352, i8* %4353, align 1, !tbaa !2449
  %4354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4341, i8* %4354, align 1, !tbaa !2450
  %4355 = load i64, i64* %RDX
  %4356 = load i32, i32* %ESI
  %4357 = zext i32 %4356 to i64
  %4358 = load i64, i64* %PC
  %4359 = add i64 %4358, 2
  store i64 %4359, i64* %PC
  %4360 = trunc i64 %4355 to i32
  %4361 = add i32 %4356, %4360
  %4362 = zext i32 %4361 to i64
  store i64 %4362, i64* %RDX, align 8, !tbaa !2428
  %4363 = icmp ult i32 %4361, %4360
  %4364 = icmp ult i32 %4361, %4356
  %4365 = or i1 %4363, %4364
  %4366 = zext i1 %4365 to i8
  %4367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4366, i8* %4367, align 1, !tbaa !2432
  %4368 = and i32 %4361, 255
  %4369 = call i32 @llvm.ctpop.i32(i32 %4368) #16
  %4370 = trunc i32 %4369 to i8
  %4371 = and i8 %4370, 1
  %4372 = xor i8 %4371, 1
  %4373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4372, i8* %4373, align 1, !tbaa !2446
  %4374 = xor i64 %4357, %4355
  %4375 = trunc i64 %4374 to i32
  %4376 = xor i32 %4375, %4361
  %4377 = lshr i32 %4376, 4
  %4378 = trunc i32 %4377 to i8
  %4379 = and i8 %4378, 1
  %4380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4379, i8* %4380, align 1, !tbaa !2447
  %4381 = icmp eq i32 %4361, 0
  %4382 = zext i1 %4381 to i8
  %4383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4382, i8* %4383, align 1, !tbaa !2448
  %4384 = lshr i32 %4361, 31
  %4385 = trunc i32 %4384 to i8
  %4386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4385, i8* %4386, align 1, !tbaa !2449
  %4387 = lshr i32 %4360, 31
  %4388 = lshr i32 %4356, 31
  %4389 = xor i32 %4384, %4387
  %4390 = xor i32 %4384, %4388
  %4391 = add nuw nsw i32 %4389, %4390
  %4392 = icmp eq i32 %4391, 2
  %4393 = zext i1 %4392 to i8
  %4394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4393, i8* %4394, align 1, !tbaa !2450
  %4395 = load i64, i64* %RBP
  %4396 = sub i64 %4395, 2724
  %4397 = load i32, i32* %EAX
  %4398 = zext i32 %4397 to i64
  %4399 = load i64, i64* %PC
  %4400 = add i64 %4399, 6
  store i64 %4400, i64* %PC
  %4401 = inttoptr i64 %4396 to i32*
  store i32 %4397, i32* %4401
  %4402 = load i32, i32* %EDX
  %4403 = zext i32 %4402 to i64
  %4404 = load i64, i64* %PC
  %4405 = add i64 %4404, 2
  store i64 %4405, i64* %PC
  %4406 = and i64 %4403, 4294967295
  store i64 %4406, i64* %RAX, align 8, !tbaa !2428
  %4407 = load i64, i64* %PC
  %4408 = add i64 %4407, 1
  store i64 %4408, i64* %PC
  %4409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %4411 = bitcast %union.anon* %4410 to i32*
  %4412 = load i32, i32* %4411, align 8, !tbaa !2452
  %4413 = sext i32 %4412 to i64
  %4414 = lshr i64 %4413, 32
  store i64 %4414, i64* %4409, align 8, !tbaa !2428
  %4415 = load i64, i64* %RBP
  %4416 = sub i64 %4415, 2724
  %4417 = load i64, i64* %PC
  %4418 = add i64 %4417, 6
  store i64 %4418, i64* %PC
  %4419 = inttoptr i64 %4416 to i32*
  %4420 = load i32, i32* %4419
  %4421 = zext i32 %4420 to i64
  store i64 %4421, i64* %RSI, align 8, !tbaa !2428
  %4422 = load i32, i32* %ESI
  %4423 = zext i32 %4422 to i64
  %4424 = load i64, i64* %PC
  %4425 = add i64 %4424, 2
  store i64 %4425, i64* %PC
  %4426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %4427 = bitcast %union.anon* %4426 to i32*
  %4428 = load i32, i32* %4427, align 8, !tbaa !2452
  %4429 = zext i32 %4428 to i64
  %4430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %4431 = bitcast %union.anon* %4430 to i32*
  %4432 = load i32, i32* %4431, align 8, !tbaa !2452
  %4433 = zext i32 %4432 to i64
  %4434 = shl i64 %4423, 32
  %4435 = ashr exact i64 %4434, 32
  %4436 = shl nuw i64 %4433, 32
  %4437 = or i64 %4436, %4429
  %4438 = sdiv i64 %4437, %4435
  %4439 = shl i64 %4438, 32
  %4440 = ashr exact i64 %4439, 32
  %4441 = icmp eq i64 %4438, %4440
  br i1 %4441, label %4446, label %4442

; <label>:4442:                                   ; preds = %block_401509
  %4443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4444 = load i64, i64* %4443, align 8, !tbaa !2428
  %4445 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4444, %struct.Memory* %MEMORY.19) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:4446:                                   ; preds = %block_401509
  %4447 = srem i64 %4437, %4435
  %4448 = getelementptr inbounds %union.anon, %union.anon* %4426, i64 0, i32 0
  %4449 = and i64 %4438, 4294967295
  store i64 %4449, i64* %4448, align 8, !tbaa !2428
  %4450 = getelementptr inbounds %union.anon, %union.anon* %4430, i64 0, i32 0
  %4451 = and i64 %4447, 4294967295
  store i64 %4451, i64* %4450, align 8, !tbaa !2428
  %4452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4452, align 1, !tbaa !2432
  %4453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %4453, align 1, !tbaa !2446
  %4454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4454, align 1, !tbaa !2447
  %4455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4455, align 1, !tbaa !2448
  %4456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %4456, align 1, !tbaa !2449
  %4457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4457, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %4442, %4446
  %4458 = phi %struct.Memory* [ %4445, %4442 ], [ %MEMORY.19, %4446 ]
  %4459 = load i32, i32* %EDX
  %4460 = zext i32 %4459 to i64
  %4461 = load i64, i64* %PC
  %4462 = add i64 %4461, 3
  store i64 %4462, i64* %PC
  %4463 = shl i64 %4460, 32
  %4464 = ashr exact i64 %4463, 32
  store i64 %4464, i64* %RCX, align 8, !tbaa !2428
  %4465 = load i64, i64* %RCX
  %4466 = mul i64 %4465, 4
  %4467 = add i64 %4466, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %4468 = load i64, i64* %PC
  %4469 = add i64 %4468, 7
  store i64 %4469, i64* %PC
  %4470 = inttoptr i64 %4467 to i32*
  %4471 = load i32, i32* %4470
  %4472 = zext i32 %4471 to i64
  store i64 %4472, i64* %RDX, align 8, !tbaa !2428
  %4473 = load i64, i64* %RBP
  %4474 = sub i64 %4473, 4
  %4475 = load i64, i64* %PC
  %4476 = add i64 %4475, 4
  store i64 %4476, i64* %PC
  %4477 = inttoptr i64 %4474 to i32*
  %4478 = load i32, i32* %4477
  %4479 = sext i32 %4478 to i64
  store i64 %4479, i64* %RCX, align 8, !tbaa !2428
  %4480 = load i64, i64* %RBP
  %4481 = load i64, i64* %RCX
  %4482 = mul i64 %4481, 4
  %4483 = add i64 %4480, -1568
  %4484 = add i64 %4483, %4482
  %4485 = load i64, i64* %PC
  %4486 = add i64 %4485, 8
  store i64 %4486, i64* %PC
  %4487 = inttoptr i64 %4484 to i32*
  %4488 = load i32, i32* %4487
  %4489 = sext i32 %4488 to i64
  store i64 %4489, i64* %RCX, align 8, !tbaa !2428
  %4490 = load i64, i64* %RDX
  %4491 = load i64, i64* %RBP
  %4492 = load i64, i64* %RCX
  %4493 = mul i64 %4492, 4
  %4494 = add i64 %4491, -2640
  %4495 = add i64 %4494, %4493
  %4496 = load i64, i64* %PC
  %4497 = add i64 %4496, 7
  store i64 %4497, i64* %PC
  %4498 = trunc i64 %4490 to i32
  %4499 = inttoptr i64 %4495 to i32*
  %4500 = load i32, i32* %4499
  %4501 = xor i32 %4500, %4498
  %4502 = zext i32 %4501 to i64
  store i64 %4502, i64* %RDX, align 8, !tbaa !2428
  %4503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4503, align 1, !tbaa !2432
  %4504 = and i32 %4501, 255
  %4505 = call i32 @llvm.ctpop.i32(i32 %4504) #16
  %4506 = trunc i32 %4505 to i8
  %4507 = and i8 %4506, 1
  %4508 = xor i8 %4507, 1
  %4509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4508, i8* %4509, align 1, !tbaa !2446
  %4510 = icmp eq i32 %4501, 0
  %4511 = zext i1 %4510 to i8
  %4512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4511, i8* %4512, align 1, !tbaa !2448
  %4513 = lshr i32 %4501, 31
  %4514 = trunc i32 %4513 to i8
  %4515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4514, i8* %4515, align 1, !tbaa !2449
  %4516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4516, align 1, !tbaa !2450
  %4517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4517, align 1, !tbaa !2447
  %4518 = load i64, i64* %RBP
  %4519 = load i64, i64* %RCX
  %4520 = mul i64 %4519, 4
  %4521 = add i64 %4518, -2640
  %4522 = add i64 %4521, %4520
  %4523 = load i32, i32* %EDX
  %4524 = zext i32 %4523 to i64
  %4525 = load i64, i64* %PC
  %4526 = add i64 %4525, 7
  store i64 %4526, i64* %PC
  %4527 = inttoptr i64 %4522 to i32*
  store i32 %4523, i32* %4527
  br label %block_40155f

block_4009e0:                                     ; preds = %block_4009ce
  %4528 = load i64, i64* %RBP
  %4529 = sub i64 %4528, 1496
  %4530 = load i64, i64* %PC
  %4531 = add i64 %4530, 10
  store i64 %4531, i64* %PC
  %4532 = inttoptr i64 %4529 to i32*
  store i32 1, i32* %4532
  br label %block_4009ea

block_4014f7:                                     ; preds = %block_4014e3
  %4533 = sub i64 %3535, 8
  %4534 = load i64, i64* %PC
  %4535 = add i64 %4534, 4
  store i64 %4535, i64* %PC
  %4536 = inttoptr i64 %4533 to i32*
  %4537 = load i32, i32* %4536
  %4538 = sext i32 %4537 to i64
  store i64 %4538, i64* %RAX, align 8, !tbaa !2428
  %4539 = load i64, i64* %RBP
  %4540 = load i64, i64* %RAX
  %4541 = mul i64 %4540, 4
  %4542 = add i64 %4539, -1616
  %4543 = add i64 %4542, %4541
  %4544 = load i64, i64* %PC
  %4545 = add i64 %4544, 8
  store i64 %4545, i64* %PC
  %4546 = inttoptr i64 %4543 to i32*
  %4547 = load i32, i32* %4546
  %4548 = sub i32 %4547, -1
  %4549 = icmp ult i32 %4547, -1
  %4550 = zext i1 %4549 to i8
  %4551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4550, i8* %4551, align 1, !tbaa !2432
  %4552 = and i32 %4548, 255
  %4553 = call i32 @llvm.ctpop.i32(i32 %4552) #16
  %4554 = trunc i32 %4553 to i8
  %4555 = and i8 %4554, 1
  %4556 = xor i8 %4555, 1
  %4557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4556, i8* %4557, align 1, !tbaa !2446
  %4558 = xor i32 %4547, -1
  %4559 = xor i32 %4558, %4548
  %4560 = lshr i32 %4559, 4
  %4561 = trunc i32 %4560 to i8
  %4562 = and i8 %4561, 1
  %4563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4562, i8* %4563, align 1, !tbaa !2447
  %4564 = icmp eq i32 %4548, 0
  %4565 = zext i1 %4564 to i8
  %4566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4565, i8* %4566, align 1, !tbaa !2448
  %4567 = lshr i32 %4548, 31
  %4568 = trunc i32 %4567 to i8
  %4569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4568, i8* %4569, align 1, !tbaa !2449
  %4570 = lshr i32 %4547, 31
  %4571 = xor i32 %4570, 1
  %4572 = xor i32 %4567, %4570
  %4573 = add nuw nsw i32 %4572, %4571
  %4574 = icmp eq i32 %4573, 2
  %4575 = zext i1 %4574 to i8
  %4576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4575, i8* %4576, align 1, !tbaa !2450
  %4577 = load i64, i64* %PC
  %4578 = add i64 %4577, 92
  %4579 = load i64, i64* %PC
  %4580 = add i64 %4579, 6
  %4581 = load i64, i64* %PC
  %4582 = add i64 %4581, 6
  store i64 %4582, i64* %PC
  %4583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4584 = load i8, i8* %4583, align 1, !tbaa !2448
  store i8 %4584, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4586 = icmp ne i8 %4584, 0
  %4587 = select i1 %4586, i64 %4578, i64 %4580
  store i64 %4587, i64* %4585, align 8, !tbaa !2428
  %4588 = load i8, i8* %BRANCH_TAKEN
  %4589 = icmp eq i8 %4588, 1
  br i1 %4589, label %block_40155f, label %block_401509

block_401302:                                     ; preds = %block_4012e2
  %4590 = load i64, i64* %RBP
  %4591 = sub i64 %4590, 1168
  %4592 = load i64, i64* %PC
  %4593 = add i64 %4592, 7
  store i64 %4593, i64* %PC
  store i64 %4591, i64* %RAX, align 8, !tbaa !2428
  %4594 = load i64, i64* %RBP
  %4595 = sub i64 %4594, 12
  %4596 = load i64, i64* %PC
  %4597 = add i64 %4596, 4
  store i64 %4597, i64* %PC
  %4598 = inttoptr i64 %4595 to i32*
  %4599 = load i32, i32* %4598
  %4600 = sext i32 %4599 to i64
  store i64 %4600, i64* %RCX, align 8, !tbaa !2428
  %4601 = load i64, i64* %RCX
  %4602 = load i64, i64* %PC
  %4603 = add i64 %4602, 4
  store i64 %4603, i64* %PC
  %4604 = shl i64 %4601, 5
  %4605 = icmp slt i64 %4604, 0
  %4606 = shl i64 %4604, 1
  store i64 %4606, i64* %RCX, align 8, !tbaa !2428
  %4607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4608 = zext i1 %4605 to i8
  store i8 %4608, i8* %4607, align 1, !tbaa !2451
  %4609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4610 = trunc i64 %4606 to i32
  %4611 = and i32 %4610, 254
  %4612 = call i32 @llvm.ctpop.i32(i32 %4611) #16
  %4613 = trunc i32 %4612 to i8
  %4614 = and i8 %4613, 1
  %4615 = xor i8 %4614, 1
  store i8 %4615, i8* %4609, align 1, !tbaa !2451
  %4616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4616, align 1, !tbaa !2451
  %4617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4618 = icmp eq i64 %4606, 0
  %4619 = zext i1 %4618 to i8
  store i8 %4619, i8* %4617, align 1, !tbaa !2451
  %4620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4621 = lshr i64 %4606, 63
  %4622 = trunc i64 %4621 to i8
  store i8 %4622, i8* %4620, align 1, !tbaa !2451
  %4623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4623, align 1, !tbaa !2451
  %4624 = load i64, i64* %RAX
  %4625 = load i64, i64* %RCX
  %4626 = load i64, i64* %PC
  %4627 = add i64 %4626, 3
  store i64 %4627, i64* %PC
  %4628 = add i64 %4625, %4624
  store i64 %4628, i64* %RAX, align 8, !tbaa !2428
  %4629 = icmp ult i64 %4628, %4624
  %4630 = icmp ult i64 %4628, %4625
  %4631 = or i1 %4629, %4630
  %4632 = zext i1 %4631 to i8
  %4633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4632, i8* %4633, align 1, !tbaa !2432
  %4634 = trunc i64 %4628 to i32
  %4635 = and i32 %4634, 255
  %4636 = call i32 @llvm.ctpop.i32(i32 %4635) #16
  %4637 = trunc i32 %4636 to i8
  %4638 = and i8 %4637, 1
  %4639 = xor i8 %4638, 1
  %4640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4639, i8* %4640, align 1, !tbaa !2446
  %4641 = xor i64 %4625, %4624
  %4642 = xor i64 %4641, %4628
  %4643 = lshr i64 %4642, 4
  %4644 = trunc i64 %4643 to i8
  %4645 = and i8 %4644, 1
  %4646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4645, i8* %4646, align 1, !tbaa !2447
  %4647 = icmp eq i64 %4628, 0
  %4648 = zext i1 %4647 to i8
  %4649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4648, i8* %4649, align 1, !tbaa !2448
  %4650 = lshr i64 %4628, 63
  %4651 = trunc i64 %4650 to i8
  %4652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4651, i8* %4652, align 1, !tbaa !2449
  %4653 = lshr i64 %4624, 63
  %4654 = lshr i64 %4625, 63
  %4655 = xor i64 %4650, %4653
  %4656 = xor i64 %4650, %4654
  %4657 = add nuw nsw i64 %4655, %4656
  %4658 = icmp eq i64 %4657, 2
  %4659 = zext i1 %4658 to i8
  %4660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4659, i8* %4660, align 1, !tbaa !2450
  %4661 = load i64, i64* %RBP
  %4662 = sub i64 %4661, 4
  %4663 = load i64, i64* %PC
  %4664 = add i64 %4663, 4
  store i64 %4664, i64* %PC
  %4665 = inttoptr i64 %4662 to i32*
  %4666 = load i32, i32* %4665
  %4667 = sext i32 %4666 to i64
  store i64 %4667, i64* %RCX, align 8, !tbaa !2428
  %4668 = load i64, i64* %RAX
  %4669 = load i64, i64* %RCX
  %4670 = mul i64 %4669, 4
  %4671 = add i64 %4670, %4668
  %4672 = load i64, i64* %PC
  %4673 = add i64 %4672, 4
  store i64 %4673, i64* %PC
  %4674 = inttoptr i64 %4671 to i32*
  %4675 = load i32, i32* %4674
  %4676 = sext i32 %4675 to i64
  store i64 %4676, i64* %RAX, align 8, !tbaa !2428
  %4677 = load i64, i64* %RAX
  %4678 = mul i64 %4677, 4
  %4679 = add i64 %4678, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %4680 = load i64, i64* %PC
  %4681 = add i64 %4680, 7
  store i64 %4681, i64* %PC
  %4682 = inttoptr i64 %4679 to i32*
  %4683 = load i32, i32* %4682
  %4684 = zext i32 %4683 to i64
  store i64 %4684, i64* %RDX, align 8, !tbaa !2428
  %4685 = load i64, i64* %RBP
  %4686 = sub i64 %4685, 4
  %4687 = load i64, i64* %PC
  %4688 = add i64 %4687, 4
  store i64 %4688, i64* %PC
  %4689 = inttoptr i64 %4686 to i32*
  %4690 = load i32, i32* %4689
  %4691 = sext i32 %4690 to i64
  store i64 %4691, i64* %RAX, align 8, !tbaa !2428
  %4692 = load i64, i64* %RBP
  %4693 = load i64, i64* %RAX
  %4694 = mul i64 %4693, 4
  %4695 = add i64 %4692, -1616
  %4696 = add i64 %4695, %4694
  %4697 = load i32, i32* %EDX
  %4698 = zext i32 %4697 to i64
  %4699 = load i64, i64* %PC
  %4700 = add i64 %4699, 7
  store i64 %4700, i64* %PC
  %4701 = inttoptr i64 %4696 to i32*
  store i32 %4697, i32* %4701
  %4702 = load i64, i64* %PC
  %4703 = add i64 %4702, 20
  %4704 = load i64, i64* %PC
  %4705 = add i64 %4704, 5
  store i64 %4705, i64* %PC
  %4706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4703, i64* %4706, align 8, !tbaa !2428
  br label %block_401342

block_400dab:                                     ; preds = %block_400da4, %block_400dbf
  %MEMORY.21 = phi %struct.Memory* [ %MEMORY.35, %block_400da4 ], [ %MEMORY.21, %block_400dbf ]
  %4707 = load i64, i64* %RBP
  %4708 = sub i64 %4707, 4
  %4709 = load i64, i64* %PC
  %4710 = add i64 %4709, 3
  store i64 %4710, i64* %PC
  %4711 = inttoptr i64 %4708 to i32*
  %4712 = load i32, i32* %4711
  %4713 = zext i32 %4712 to i64
  store i64 %4713, i64* %RAX, align 8, !tbaa !2428
  %4714 = load i64, i64* %RBP
  %4715 = sub i64 %4714, 12
  %4716 = load i64, i64* %PC
  %4717 = add i64 %4716, 4
  store i64 %4717, i64* %PC
  %4718 = inttoptr i64 %4715 to i32*
  %4719 = load i32, i32* %4718
  %4720 = sext i32 %4719 to i64
  store i64 %4720, i64* %RCX, align 8, !tbaa !2428
  %4721 = load i32, i32* %EAX
  %4722 = zext i32 %4721 to i64
  %4723 = load i64, i64* %RBP
  %4724 = load i64, i64* %RCX
  %4725 = mul i64 %4724, 4
  %4726 = add i64 %4723, -1328
  %4727 = add i64 %4726, %4725
  %4728 = load i64, i64* %PC
  %4729 = add i64 %4728, 7
  store i64 %4729, i64* %PC
  %4730 = inttoptr i64 %4727 to i32*
  %4731 = load i32, i32* %4730
  %4732 = sub i32 %4721, %4731
  %4733 = icmp ult i32 %4721, %4731
  %4734 = zext i1 %4733 to i8
  %4735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4734, i8* %4735, align 1, !tbaa !2432
  %4736 = and i32 %4732, 255
  %4737 = call i32 @llvm.ctpop.i32(i32 %4736) #16
  %4738 = trunc i32 %4737 to i8
  %4739 = and i8 %4738, 1
  %4740 = xor i8 %4739, 1
  %4741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4740, i8* %4741, align 1, !tbaa !2446
  %4742 = xor i32 %4731, %4721
  %4743 = xor i32 %4742, %4732
  %4744 = lshr i32 %4743, 4
  %4745 = trunc i32 %4744 to i8
  %4746 = and i8 %4745, 1
  %4747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4746, i8* %4747, align 1, !tbaa !2447
  %4748 = icmp eq i32 %4732, 0
  %4749 = zext i1 %4748 to i8
  %4750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4749, i8* %4750, align 1, !tbaa !2448
  %4751 = lshr i32 %4732, 31
  %4752 = trunc i32 %4751 to i8
  %4753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4752, i8* %4753, align 1, !tbaa !2449
  %4754 = lshr i32 %4721, 31
  %4755 = lshr i32 %4731, 31
  %4756 = xor i32 %4755, %4754
  %4757 = xor i32 %4751, %4754
  %4758 = add nuw nsw i32 %4757, %4756
  %4759 = icmp eq i32 %4758, 2
  %4760 = zext i1 %4759 to i8
  %4761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4760, i8* %4761, align 1, !tbaa !2450
  %4762 = load i64, i64* %PC
  %4763 = add i64 %4762, 124
  %4764 = load i64, i64* %PC
  %4765 = add i64 %4764, 6
  %4766 = load i64, i64* %PC
  %4767 = add i64 %4766, 6
  store i64 %4767, i64* %PC
  %4768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4769 = load i8, i8* %4768, align 1, !tbaa !2448
  %4770 = icmp eq i8 %4769, 0
  %4771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4772 = load i8, i8* %4771, align 1, !tbaa !2449
  %4773 = icmp ne i8 %4772, 0
  %4774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4775 = load i8, i8* %4774, align 1, !tbaa !2450
  %4776 = icmp ne i8 %4775, 0
  %4777 = xor i1 %4773, %4776
  %4778 = xor i1 %4777, true
  %4779 = and i1 %4770, %4778
  %4780 = zext i1 %4779 to i8
  store i8 %4780, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4782 = select i1 %4779, i64 %4763, i64 %4765
  store i64 %4782, i64* %4781, align 8, !tbaa !2428
  %4783 = load i8, i8* %BRANCH_TAKEN
  %4784 = icmp eq i8 %4783, 1
  br i1 %4784, label %block_400e35, label %block_400dbf

block_400ef9:                                     ; preds = %block_400edf
  %4785 = load i64, i64* %RBP
  %4786 = sub i64 %4785, 1168
  %4787 = load i64, i64* %PC
  %4788 = add i64 %4787, 7
  store i64 %4788, i64* %PC
  store i64 %4786, i64* %RAX, align 8, !tbaa !2428
  %4789 = load i64, i64* %RBP
  %4790 = sub i64 %4789, 12
  %4791 = load i64, i64* %PC
  %4792 = add i64 %4791, 3
  store i64 %4792, i64* %PC
  %4793 = inttoptr i64 %4790 to i32*
  %4794 = load i32, i32* %4793
  %4795 = zext i32 %4794 to i64
  store i64 %4795, i64* %RCX, align 8, !tbaa !2428
  %4796 = load i64, i64* %RCX
  %4797 = load i64, i64* %PC
  %4798 = add i64 %4797, 3
  store i64 %4798, i64* %PC
  %4799 = trunc i64 %4796 to i32
  %4800 = add i32 1, %4799
  %4801 = zext i32 %4800 to i64
  store i64 %4801, i64* %RCX, align 8, !tbaa !2428
  %4802 = icmp ult i32 %4800, %4799
  %4803 = icmp ult i32 %4800, 1
  %4804 = or i1 %4802, %4803
  %4805 = zext i1 %4804 to i8
  %4806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4805, i8* %4806, align 1, !tbaa !2432
  %4807 = and i32 %4800, 255
  %4808 = call i32 @llvm.ctpop.i32(i32 %4807) #16
  %4809 = trunc i32 %4808 to i8
  %4810 = and i8 %4809, 1
  %4811 = xor i8 %4810, 1
  %4812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4811, i8* %4812, align 1, !tbaa !2446
  %4813 = xor i64 1, %4796
  %4814 = trunc i64 %4813 to i32
  %4815 = xor i32 %4814, %4800
  %4816 = lshr i32 %4815, 4
  %4817 = trunc i32 %4816 to i8
  %4818 = and i8 %4817, 1
  %4819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4818, i8* %4819, align 1, !tbaa !2447
  %4820 = icmp eq i32 %4800, 0
  %4821 = zext i1 %4820 to i8
  %4822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4821, i8* %4822, align 1, !tbaa !2448
  %4823 = lshr i32 %4800, 31
  %4824 = trunc i32 %4823 to i8
  %4825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4824, i8* %4825, align 1, !tbaa !2449
  %4826 = lshr i32 %4799, 31
  %4827 = xor i32 %4823, %4826
  %4828 = add nuw nsw i32 %4827, %4823
  %4829 = icmp eq i32 %4828, 2
  %4830 = zext i1 %4829 to i8
  %4831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4830, i8* %4831, align 1, !tbaa !2450
  %4832 = load i32, i32* %ECX
  %4833 = zext i32 %4832 to i64
  %4834 = load i64, i64* %PC
  %4835 = add i64 %4834, 3
  store i64 %4835, i64* %PC
  %4836 = shl i64 %4833, 32
  %4837 = ashr exact i64 %4836, 32
  store i64 %4837, i64* %RDX, align 8, !tbaa !2428
  %4838 = load i64, i64* %RDX
  %4839 = load i64, i64* %PC
  %4840 = add i64 %4839, 4
  store i64 %4840, i64* %PC
  %4841 = shl i64 %4838, 5
  %4842 = icmp slt i64 %4841, 0
  %4843 = shl i64 %4841, 1
  store i64 %4843, i64* %RDX, align 8, !tbaa !2428
  %4844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4845 = zext i1 %4842 to i8
  store i8 %4845, i8* %4844, align 1, !tbaa !2451
  %4846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4847 = trunc i64 %4843 to i32
  %4848 = and i32 %4847, 254
  %4849 = call i32 @llvm.ctpop.i32(i32 %4848) #16
  %4850 = trunc i32 %4849 to i8
  %4851 = and i8 %4850, 1
  %4852 = xor i8 %4851, 1
  store i8 %4852, i8* %4846, align 1, !tbaa !2451
  %4853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4853, align 1, !tbaa !2451
  %4854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4855 = icmp eq i64 %4843, 0
  %4856 = zext i1 %4855 to i8
  store i8 %4856, i8* %4854, align 1, !tbaa !2451
  %4857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4858 = lshr i64 %4843, 63
  %4859 = trunc i64 %4858 to i8
  store i8 %4859, i8* %4857, align 1, !tbaa !2451
  %4860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4860, align 1, !tbaa !2451
  %4861 = load i64, i64* %RAX
  %4862 = load i64, i64* %RDX
  %4863 = load i64, i64* %PC
  %4864 = add i64 %4863, 3
  store i64 %4864, i64* %PC
  %4865 = add i64 %4862, %4861
  store i64 %4865, i64* %RAX, align 8, !tbaa !2428
  %4866 = icmp ult i64 %4865, %4861
  %4867 = icmp ult i64 %4865, %4862
  %4868 = or i1 %4866, %4867
  %4869 = zext i1 %4868 to i8
  %4870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4869, i8* %4870, align 1, !tbaa !2432
  %4871 = trunc i64 %4865 to i32
  %4872 = and i32 %4871, 255
  %4873 = call i32 @llvm.ctpop.i32(i32 %4872) #16
  %4874 = trunc i32 %4873 to i8
  %4875 = and i8 %4874, 1
  %4876 = xor i8 %4875, 1
  %4877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4876, i8* %4877, align 1, !tbaa !2446
  %4878 = xor i64 %4862, %4861
  %4879 = xor i64 %4878, %4865
  %4880 = lshr i64 %4879, 4
  %4881 = trunc i64 %4880 to i8
  %4882 = and i8 %4881, 1
  %4883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4882, i8* %4883, align 1, !tbaa !2447
  %4884 = icmp eq i64 %4865, 0
  %4885 = zext i1 %4884 to i8
  %4886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4885, i8* %4886, align 1, !tbaa !2448
  %4887 = lshr i64 %4865, 63
  %4888 = trunc i64 %4887 to i8
  %4889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4888, i8* %4889, align 1, !tbaa !2449
  %4890 = lshr i64 %4861, 63
  %4891 = lshr i64 %4862, 63
  %4892 = xor i64 %4887, %4890
  %4893 = xor i64 %4887, %4891
  %4894 = add nuw nsw i64 %4892, %4893
  %4895 = icmp eq i64 %4894, 2
  %4896 = zext i1 %4895 to i8
  %4897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4896, i8* %4897, align 1, !tbaa !2450
  %4898 = load i64, i64* %RBP
  %4899 = sub i64 %4898, 4
  %4900 = load i64, i64* %PC
  %4901 = add i64 %4900, 4
  store i64 %4901, i64* %PC
  %4902 = inttoptr i64 %4899 to i32*
  %4903 = load i32, i32* %4902
  %4904 = sext i32 %4903 to i64
  store i64 %4904, i64* %RDX, align 8, !tbaa !2428
  %4905 = load i64, i64* %RAX
  %4906 = load i64, i64* %RDX
  %4907 = mul i64 %4906, 4
  %4908 = add i64 %4907, %4905
  %4909 = load i64, i64* %PC
  %4910 = add i64 %4909, 4
  store i64 %4910, i64* %PC
  %4911 = inttoptr i64 %4908 to i32*
  %4912 = load i32, i32* %4911
  %4913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4913, align 1, !tbaa !2432
  %4914 = and i32 %4912, 255
  %4915 = call i32 @llvm.ctpop.i32(i32 %4914) #16
  %4916 = trunc i32 %4915 to i8
  %4917 = and i8 %4916, 1
  %4918 = xor i8 %4917, 1
  %4919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4918, i8* %4919, align 1, !tbaa !2446
  %4920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4920, align 1, !tbaa !2447
  %4921 = icmp eq i32 %4912, 0
  %4922 = zext i1 %4921 to i8
  %4923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4922, i8* %4923, align 1, !tbaa !2448
  %4924 = lshr i32 %4912, 31
  %4925 = trunc i32 %4924 to i8
  %4926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4925, i8* %4926, align 1, !tbaa !2449
  %4927 = lshr i32 %4912, 31
  %4928 = xor i32 %4924, %4927
  %4929 = add nuw nsw i32 %4928, %4927
  %4930 = icmp eq i32 %4929, 2
  %4931 = zext i1 %4930 to i8
  %4932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4931, i8* %4932, align 1, !tbaa !2450
  %4933 = load i64, i64* %PC
  %4934 = add i64 %4933, 120
  %4935 = load i64, i64* %PC
  %4936 = add i64 %4935, 6
  %4937 = load i64, i64* %PC
  %4938 = add i64 %4937, 6
  store i64 %4938, i64* %PC
  %4939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4940 = load i8, i8* %4939, align 1, !tbaa !2448
  store i8 %4940, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4942 = icmp ne i8 %4940, 0
  %4943 = select i1 %4942, i64 %4934, i64 %4936
  store i64 %4943, i64* %4941, align 8, !tbaa !2428
  %4944 = load i8, i8* %BRANCH_TAKEN
  %4945 = icmp eq i8 %4944, 1
  br i1 %4945, label %block_400f90, label %block_400f1e

block_401572:                                     ; preds = %block_4014e3
  %4946 = sub i64 %3535, 4
  %4947 = load i64, i64* %PC
  %4948 = add i64 %4947, 4
  store i64 %4948, i64* %PC
  %4949 = inttoptr i64 %4946 to i32*
  %4950 = load i32, i32* %4949
  %4951 = sext i32 %4950 to i64
  store i64 %4951, i64* %RAX, align 8, !tbaa !2428
  %4952 = load i64, i64* %RBP
  %4953 = load i64, i64* %RAX
  %4954 = mul i64 %4953, 4
  %4955 = add i64 %4952, -1568
  %4956 = add i64 %4955, %4954
  %4957 = load i64, i64* %PC
  %4958 = add i64 %4957, 8
  store i64 %4958, i64* %PC
  %4959 = inttoptr i64 %4956 to i32*
  %4960 = load i32, i32* %4959
  %4961 = sext i32 %4960 to i64
  store i64 %4961, i64* %RAX, align 8, !tbaa !2428
  %4962 = load i64, i64* %RBP
  %4963 = load i64, i64* %RAX
  %4964 = mul i64 %4963, 4
  %4965 = add i64 %4962, -2640
  %4966 = add i64 %4965, %4964
  %4967 = load i64, i64* %PC
  %4968 = add i64 %4967, 8
  store i64 %4968, i64* %PC
  %4969 = inttoptr i64 %4966 to i32*
  %4970 = load i32, i32* %4969
  %4971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4971, align 1, !tbaa !2432
  %4972 = and i32 %4970, 255
  %4973 = call i32 @llvm.ctpop.i32(i32 %4972) #16
  %4974 = trunc i32 %4973 to i8
  %4975 = and i8 %4974, 1
  %4976 = xor i8 %4975, 1
  %4977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4976, i8* %4977, align 1, !tbaa !2446
  %4978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4978, align 1, !tbaa !2447
  %4979 = icmp eq i32 %4970, 0
  %4980 = zext i1 %4979 to i8
  %4981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4980, i8* %4981, align 1, !tbaa !2448
  %4982 = lshr i32 %4970, 31
  %4983 = trunc i32 %4982 to i8
  %4984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4983, i8* %4984, align 1, !tbaa !2449
  %4985 = lshr i32 %4970, 31
  %4986 = xor i32 %4982, %4985
  %4987 = add nuw nsw i32 %4986, %4985
  %4988 = icmp eq i32 %4987, 2
  %4989 = zext i1 %4988 to i8
  %4990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4989, i8* %4990, align 1, !tbaa !2450
  %4991 = load i64, i64* %PC
  %4992 = add i64 %4991, 325
  %4993 = load i64, i64* %PC
  %4994 = add i64 %4993, 6
  %4995 = load i64, i64* %PC
  %4996 = add i64 %4995, 6
  store i64 %4996, i64* %PC
  %4997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4998 = load i8, i8* %4997, align 1, !tbaa !2448
  store i8 %4998, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5000 = icmp ne i8 %4998, 0
  %5001 = select i1 %5000, i64 %4992, i64 %4994
  store i64 %5001, i64* %4999, align 8, !tbaa !2428
  %5002 = load i8, i8* %BRANCH_TAKEN
  %5003 = icmp eq i8 %5002, 1
  br i1 %5003, label %block_4016cb, label %block_40158c

block_400cf7:                                     ; preds = %block_400ce3
  %5004 = sub i64 %7120, 1168
  %5005 = load i64, i64* %PC
  %5006 = add i64 %5005, 7
  store i64 %5006, i64* %PC
  store i64 %5004, i64* %RAX, align 8, !tbaa !2428
  %5007 = load i64, i64* %RBP
  %5008 = sub i64 %5007, 16
  %5009 = load i64, i64* %PC
  %5010 = add i64 %5009, 4
  store i64 %5010, i64* %PC
  %5011 = inttoptr i64 %5008 to i32*
  %5012 = load i32, i32* %5011
  %5013 = sext i32 %5012 to i64
  store i64 %5013, i64* %RCX, align 8, !tbaa !2428
  %5014 = load i64, i64* %RCX
  %5015 = load i64, i64* %PC
  %5016 = add i64 %5015, 4
  store i64 %5016, i64* %PC
  %5017 = shl i64 %5014, 5
  %5018 = icmp slt i64 %5017, 0
  %5019 = shl i64 %5017, 1
  store i64 %5019, i64* %RCX, align 8, !tbaa !2428
  %5020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5021 = zext i1 %5018 to i8
  store i8 %5021, i8* %5020, align 1, !tbaa !2451
  %5022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5023 = trunc i64 %5019 to i32
  %5024 = and i32 %5023, 254
  %5025 = call i32 @llvm.ctpop.i32(i32 %5024) #16
  %5026 = trunc i32 %5025 to i8
  %5027 = and i8 %5026, 1
  %5028 = xor i8 %5027, 1
  store i8 %5028, i8* %5022, align 1, !tbaa !2451
  %5029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5029, align 1, !tbaa !2451
  %5030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5031 = icmp eq i64 %5019, 0
  %5032 = zext i1 %5031 to i8
  store i8 %5032, i8* %5030, align 1, !tbaa !2451
  %5033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5034 = lshr i64 %5019, 63
  %5035 = trunc i64 %5034 to i8
  store i8 %5035, i8* %5033, align 1, !tbaa !2451
  %5036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5036, align 1, !tbaa !2451
  %5037 = load i64, i64* %RAX
  %5038 = load i64, i64* %RCX
  %5039 = load i64, i64* %PC
  %5040 = add i64 %5039, 3
  store i64 %5040, i64* %PC
  %5041 = add i64 %5038, %5037
  store i64 %5041, i64* %RAX, align 8, !tbaa !2428
  %5042 = icmp ult i64 %5041, %5037
  %5043 = icmp ult i64 %5041, %5038
  %5044 = or i1 %5042, %5043
  %5045 = zext i1 %5044 to i8
  %5046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5045, i8* %5046, align 1, !tbaa !2432
  %5047 = trunc i64 %5041 to i32
  %5048 = and i32 %5047, 255
  %5049 = call i32 @llvm.ctpop.i32(i32 %5048) #16
  %5050 = trunc i32 %5049 to i8
  %5051 = and i8 %5050, 1
  %5052 = xor i8 %5051, 1
  %5053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5052, i8* %5053, align 1, !tbaa !2446
  %5054 = xor i64 %5038, %5037
  %5055 = xor i64 %5054, %5041
  %5056 = lshr i64 %5055, 4
  %5057 = trunc i64 %5056 to i8
  %5058 = and i8 %5057, 1
  %5059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5058, i8* %5059, align 1, !tbaa !2447
  %5060 = icmp eq i64 %5041, 0
  %5061 = zext i1 %5060 to i8
  %5062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5061, i8* %5062, align 1, !tbaa !2448
  %5063 = lshr i64 %5041, 63
  %5064 = trunc i64 %5063 to i8
  %5065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5064, i8* %5065, align 1, !tbaa !2449
  %5066 = lshr i64 %5037, 63
  %5067 = lshr i64 %5038, 63
  %5068 = xor i64 %5063, %5066
  %5069 = xor i64 %5063, %5067
  %5070 = add nuw nsw i64 %5068, %5069
  %5071 = icmp eq i64 %5070, 2
  %5072 = zext i1 %5071 to i8
  %5073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5072, i8* %5073, align 1, !tbaa !2450
  %5074 = load i64, i64* %RBP
  %5075 = sub i64 %5074, 4
  %5076 = load i64, i64* %PC
  %5077 = add i64 %5076, 4
  store i64 %5077, i64* %PC
  %5078 = inttoptr i64 %5075 to i32*
  %5079 = load i32, i32* %5078
  %5080 = sext i32 %5079 to i64
  store i64 %5080, i64* %RCX, align 8, !tbaa !2428
  %5081 = load i64, i64* %RAX
  %5082 = load i64, i64* %RCX
  %5083 = mul i64 %5082, 4
  %5084 = add i64 %5083, %5081
  %5085 = load i64, i64* %PC
  %5086 = add i64 %5085, 4
  store i64 %5086, i64* %PC
  %5087 = inttoptr i64 %5084 to i32*
  %5088 = load i32, i32* %5087
  %5089 = sub i32 %5088, -1
  %5090 = icmp ult i32 %5088, -1
  %5091 = zext i1 %5090 to i8
  %5092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5091, i8* %5092, align 1, !tbaa !2432
  %5093 = and i32 %5089, 255
  %5094 = call i32 @llvm.ctpop.i32(i32 %5093) #16
  %5095 = trunc i32 %5094 to i8
  %5096 = and i8 %5095, 1
  %5097 = xor i8 %5096, 1
  %5098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5097, i8* %5098, align 1, !tbaa !2446
  %5099 = xor i32 %5088, -1
  %5100 = xor i32 %5099, %5089
  %5101 = lshr i32 %5100, 4
  %5102 = trunc i32 %5101 to i8
  %5103 = and i8 %5102, 1
  %5104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5103, i8* %5104, align 1, !tbaa !2447
  %5105 = icmp eq i32 %5089, 0
  %5106 = zext i1 %5105 to i8
  %5107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5106, i8* %5107, align 1, !tbaa !2448
  %5108 = lshr i32 %5089, 31
  %5109 = trunc i32 %5108 to i8
  %5110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5109, i8* %5110, align 1, !tbaa !2449
  %5111 = lshr i32 %5088, 31
  %5112 = xor i32 %5111, 1
  %5113 = xor i32 %5108, %5111
  %5114 = add nuw nsw i32 %5113, %5112
  %5115 = icmp eq i32 %5114, 2
  %5116 = zext i1 %5115 to i8
  %5117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5116, i8* %5117, align 1, !tbaa !2450
  %5118 = load i64, i64* %PC
  %5119 = add i64 %5118, 128
  %5120 = load i64, i64* %PC
  %5121 = add i64 %5120, 6
  %5122 = load i64, i64* %PC
  %5123 = add i64 %5122, 6
  store i64 %5123, i64* %PC
  %5124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5125 = load i8, i8* %5124, align 1, !tbaa !2448
  store i8 %5125, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5127 = icmp ne i8 %5125, 0
  %5128 = select i1 %5127, i64 %5119, i64 %5121
  store i64 %5128, i64* %5126, align 8, !tbaa !2428
  %5129 = load i8, i8* %BRANCH_TAKEN
  %5130 = icmp eq i8 %5129, 1
  br i1 %5130, label %block_400d91, label %block_400d17

block_400fa3:                                     ; preds = %block_400ec6
  %5131 = load i32, i32* %EAX
  %5132 = zext i32 %5131 to i64
  %5133 = load i64, i64* %PC
  %5134 = add i64 %5133, 3
  store i64 %5134, i64* %PC
  %5135 = shl i64 %5132, 32
  %5136 = ashr exact i64 %5135, 32
  store i64 %5136, i64* %RCX, align 8, !tbaa !2428
  %5137 = load i64, i64* %RBP
  %5138 = load i64, i64* %RCX
  %5139 = mul i64 %5138, 4
  %5140 = add i64 %5137, -1248
  %5141 = add i64 %5140, %5139
  %5142 = load i64, i64* %PC
  %5143 = add i64 %5142, 8
  store i64 %5143, i64* %PC
  %5144 = inttoptr i64 %5141 to i32*
  %5145 = load i32, i32* %5144
  %5146 = sext i32 %5145 to i64
  store i64 %5146, i64* %RCX, align 8, !tbaa !2428
  %5147 = load i64, i64* %RCX
  %5148 = mul i64 %5147, 4
  %5149 = add i64 %5148, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %5150 = load i64, i64* %PC
  %5151 = add i64 %5150, 7
  store i64 %5151, i64* %PC
  %5152 = inttoptr i64 %5149 to i32*
  %5153 = load i32, i32* %5152
  %5154 = zext i32 %5153 to i64
  store i64 %5154, i64* %RAX, align 8, !tbaa !2428
  %5155 = load i64, i64* %RBP
  %5156 = sub i64 %5155, 12
  %5157 = load i64, i64* %PC
  %5158 = add i64 %5157, 3
  store i64 %5158, i64* %PC
  %5159 = inttoptr i64 %5156 to i32*
  %5160 = load i32, i32* %5159
  %5161 = zext i32 %5160 to i64
  store i64 %5161, i64* %RDX, align 8, !tbaa !2428
  %5162 = load i64, i64* %RDX
  %5163 = load i64, i64* %PC
  %5164 = add i64 %5163, 3
  store i64 %5164, i64* %PC
  %5165 = trunc i64 %5162 to i32
  %5166 = add i32 1, %5165
  %5167 = zext i32 %5166 to i64
  store i64 %5167, i64* %RDX, align 8, !tbaa !2428
  %5168 = icmp ult i32 %5166, %5165
  %5169 = icmp ult i32 %5166, 1
  %5170 = or i1 %5168, %5169
  %5171 = zext i1 %5170 to i8
  %5172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5171, i8* %5172, align 1, !tbaa !2432
  %5173 = and i32 %5166, 255
  %5174 = call i32 @llvm.ctpop.i32(i32 %5173) #16
  %5175 = trunc i32 %5174 to i8
  %5176 = and i8 %5175, 1
  %5177 = xor i8 %5176, 1
  %5178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5177, i8* %5178, align 1, !tbaa !2446
  %5179 = xor i64 1, %5162
  %5180 = trunc i64 %5179 to i32
  %5181 = xor i32 %5180, %5166
  %5182 = lshr i32 %5181, 4
  %5183 = trunc i32 %5182 to i8
  %5184 = and i8 %5183, 1
  %5185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5184, i8* %5185, align 1, !tbaa !2447
  %5186 = icmp eq i32 %5166, 0
  %5187 = zext i1 %5186 to i8
  %5188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5187, i8* %5188, align 1, !tbaa !2448
  %5189 = lshr i32 %5166, 31
  %5190 = trunc i32 %5189 to i8
  %5191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5190, i8* %5191, align 1, !tbaa !2449
  %5192 = lshr i32 %5165, 31
  %5193 = xor i32 %5189, %5192
  %5194 = add nuw nsw i32 %5193, %5189
  %5195 = icmp eq i32 %5194, 2
  %5196 = zext i1 %5195 to i8
  %5197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5196, i8* %5197, align 1, !tbaa !2450
  %5198 = load i32, i32* %EDX
  %5199 = zext i32 %5198 to i64
  %5200 = load i64, i64* %PC
  %5201 = add i64 %5200, 3
  store i64 %5201, i64* %PC
  %5202 = shl i64 %5199, 32
  %5203 = ashr exact i64 %5202, 32
  store i64 %5203, i64* %RCX, align 8, !tbaa !2428
  %5204 = load i64, i64* %RBP
  %5205 = load i64, i64* %RCX
  %5206 = mul i64 %5205, 4
  %5207 = add i64 %5204, -1248
  %5208 = add i64 %5207, %5206
  %5209 = load i32, i32* %EAX
  %5210 = zext i32 %5209 to i64
  %5211 = load i64, i64* %PC
  %5212 = add i64 %5211, 7
  store i64 %5212, i64* %PC
  %5213 = inttoptr i64 %5208 to i32*
  store i32 %5209, i32* %5213
  br label %block_400fcb

block_4010f1:                                     ; preds = %block_4010e4
  %5214 = sub i64 %7368, 16
  %5215 = load i64, i64* %PC
  %5216 = add i64 %5215, 7
  store i64 %5216, i64* %PC
  %5217 = inttoptr i64 %5214 to i32*
  store i32 1, i32* %5217
  %5218 = load i64, i64* %RBP
  %5219 = sub i64 %5218, 8
  %5220 = load i64, i64* %PC
  %5221 = add i64 %5220, 7
  store i64 %5221, i64* %PC
  %5222 = inttoptr i64 %5219 to i32*
  store i32 1, i32* %5222
  br label %block_4010ff

block_400d91:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_400cf7
  %MEMORY.22 = phi %struct.Memory* [ %MEMORY.35, %block_400cf7 ], [ %8022, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %5223 = load i64, i64* %PC
  %5224 = add i64 %5223, 5
  %5225 = load i64, i64* %PC
  %5226 = add i64 %5225, 5
  store i64 %5226, i64* %PC
  %5227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5224, i64* %5227, align 8, !tbaa !2428
  %5228 = load i64, i64* %RBP
  %5229 = sub i64 %5228, 4
  %5230 = load i64, i64* %PC
  %5231 = add i64 %5230, 3
  store i64 %5231, i64* %PC
  %5232 = inttoptr i64 %5229 to i32*
  %5233 = load i32, i32* %5232
  %5234 = zext i32 %5233 to i64
  store i64 %5234, i64* %RAX, align 8, !tbaa !2428
  %5235 = load i64, i64* %RAX
  %5236 = load i64, i64* %PC
  %5237 = add i64 %5236, 3
  store i64 %5237, i64* %PC
  %5238 = trunc i64 %5235 to i32
  %5239 = add i32 1, %5238
  %5240 = zext i32 %5239 to i64
  store i64 %5240, i64* %RAX, align 8, !tbaa !2428
  %5241 = icmp ult i32 %5239, %5238
  %5242 = icmp ult i32 %5239, 1
  %5243 = or i1 %5241, %5242
  %5244 = zext i1 %5243 to i8
  %5245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5244, i8* %5245, align 1, !tbaa !2432
  %5246 = and i32 %5239, 255
  %5247 = call i32 @llvm.ctpop.i32(i32 %5246) #16
  %5248 = trunc i32 %5247 to i8
  %5249 = and i8 %5248, 1
  %5250 = xor i8 %5249, 1
  %5251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5250, i8* %5251, align 1, !tbaa !2446
  %5252 = xor i64 1, %5235
  %5253 = trunc i64 %5252 to i32
  %5254 = xor i32 %5253, %5239
  %5255 = lshr i32 %5254, 4
  %5256 = trunc i32 %5255 to i8
  %5257 = and i8 %5256, 1
  %5258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5257, i8* %5258, align 1, !tbaa !2447
  %5259 = icmp eq i32 %5239, 0
  %5260 = zext i1 %5259 to i8
  %5261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5260, i8* %5261, align 1, !tbaa !2448
  %5262 = lshr i32 %5239, 31
  %5263 = trunc i32 %5262 to i8
  %5264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5263, i8* %5264, align 1, !tbaa !2449
  %5265 = lshr i32 %5238, 31
  %5266 = xor i32 %5262, %5265
  %5267 = add nuw nsw i32 %5266, %5262
  %5268 = icmp eq i32 %5267, 2
  %5269 = zext i1 %5268 to i8
  %5270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5269, i8* %5270, align 1, !tbaa !2450
  %5271 = load i64, i64* %RBP
  %5272 = sub i64 %5271, 4
  %5273 = load i32, i32* %EAX
  %5274 = zext i32 %5273 to i64
  %5275 = load i64, i64* %PC
  %5276 = add i64 %5275, 3
  store i64 %5276, i64* %PC
  %5277 = inttoptr i64 %5272 to i32*
  store i32 %5273, i32* %5277
  %5278 = load i64, i64* %PC
  %5279 = sub i64 %5278, 188
  %5280 = load i64, i64* %PC
  %5281 = add i64 %5280, 5
  store i64 %5281, i64* %PC
  %5282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5279, i64* %5282, align 8, !tbaa !2428
  br label %block_400ce3

block_400edf:                                     ; preds = %block_400ec6
  %5283 = load i64, i64* %RAX
  %5284 = load i64, i64* %RBP
  %5285 = sub i64 %5284, 4
  %5286 = load i64, i64* %PC
  %5287 = add i64 %5286, 3
  store i64 %5287, i64* %PC
  %5288 = trunc i64 %5283 to i32
  %5289 = inttoptr i64 %5285 to i32*
  %5290 = load i32, i32* %5289
  %5291 = sub i32 %5288, %5290
  %5292 = zext i32 %5291 to i64
  store i64 %5292, i64* %RAX, align 8, !tbaa !2428
  %5293 = icmp ult i32 %5288, %5290
  %5294 = zext i1 %5293 to i8
  %5295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5294, i8* %5295, align 1, !tbaa !2432
  %5296 = and i32 %5291, 255
  %5297 = call i32 @llvm.ctpop.i32(i32 %5296) #16
  %5298 = trunc i32 %5297 to i8
  %5299 = and i8 %5298, 1
  %5300 = xor i8 %5299, 1
  %5301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5300, i8* %5301, align 1, !tbaa !2446
  %5302 = xor i32 %5290, %5288
  %5303 = xor i32 %5302, %5291
  %5304 = lshr i32 %5303, 4
  %5305 = trunc i32 %5304 to i8
  %5306 = and i8 %5305, 1
  %5307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5306, i8* %5307, align 1, !tbaa !2447
  %5308 = icmp eq i32 %5291, 0
  %5309 = zext i1 %5308 to i8
  %5310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5309, i8* %5310, align 1, !tbaa !2448
  %5311 = lshr i32 %5291, 31
  %5312 = trunc i32 %5311 to i8
  %5313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5312, i8* %5313, align 1, !tbaa !2449
  %5314 = lshr i32 %5288, 31
  %5315 = lshr i32 %5290, 31
  %5316 = xor i32 %5315, %5314
  %5317 = xor i32 %5311, %5314
  %5318 = add nuw nsw i32 %5317, %5316
  %5319 = icmp eq i32 %5318, 2
  %5320 = zext i1 %5319 to i8
  %5321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5320, i8* %5321, align 1, !tbaa !2450
  %5322 = load i32, i32* %EAX
  %5323 = zext i32 %5322 to i64
  %5324 = load i64, i64* %PC
  %5325 = add i64 %5324, 3
  store i64 %5325, i64* %PC
  %5326 = shl i64 %5323, 32
  %5327 = ashr exact i64 %5326, 32
  store i64 %5327, i64* %RCX, align 8, !tbaa !2428
  %5328 = load i64, i64* %RBP
  %5329 = load i64, i64* %RCX
  %5330 = mul i64 %5329, 4
  %5331 = add i64 %5328, -1488
  %5332 = add i64 %5331, %5330
  %5333 = load i64, i64* %PC
  %5334 = add i64 %5333, 8
  store i64 %5334, i64* %PC
  %5335 = inttoptr i64 %5332 to i32*
  %5336 = load i32, i32* %5335
  %5337 = sub i32 %5336, -1
  %5338 = icmp ult i32 %5336, -1
  %5339 = zext i1 %5338 to i8
  %5340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5339, i8* %5340, align 1, !tbaa !2432
  %5341 = and i32 %5337, 255
  %5342 = call i32 @llvm.ctpop.i32(i32 %5341) #16
  %5343 = trunc i32 %5342 to i8
  %5344 = and i8 %5343, 1
  %5345 = xor i8 %5344, 1
  %5346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5345, i8* %5346, align 1, !tbaa !2446
  %5347 = xor i32 %5336, -1
  %5348 = xor i32 %5347, %5337
  %5349 = lshr i32 %5348, 4
  %5350 = trunc i32 %5349 to i8
  %5351 = and i8 %5350, 1
  %5352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5351, i8* %5352, align 1, !tbaa !2447
  %5353 = icmp eq i32 %5337, 0
  %5354 = zext i1 %5353 to i8
  %5355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5354, i8* %5355, align 1, !tbaa !2448
  %5356 = lshr i32 %5337, 31
  %5357 = trunc i32 %5356 to i8
  %5358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5357, i8* %5358, align 1, !tbaa !2449
  %5359 = lshr i32 %5336, 31
  %5360 = xor i32 %5359, 1
  %5361 = xor i32 %5356, %5359
  %5362 = add nuw nsw i32 %5361, %5360
  %5363 = icmp eq i32 %5362, 2
  %5364 = zext i1 %5363 to i8
  %5365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5364, i8* %5365, align 1, !tbaa !2450
  %5366 = load i64, i64* %PC
  %5367 = add i64 %5366, 157
  %5368 = load i64, i64* %PC
  %5369 = add i64 %5368, 6
  %5370 = load i64, i64* %PC
  %5371 = add i64 %5370, 6
  store i64 %5371, i64* %PC
  %5372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5373 = load i8, i8* %5372, align 1, !tbaa !2448
  store i8 %5373, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5375 = icmp ne i8 %5373, 0
  %5376 = select i1 %5375, i64 %5367, i64 %5369
  store i64 %5376, i64* %5374, align 8, !tbaa !2428
  %5377 = load i8, i8* %BRANCH_TAKEN
  %5378 = icmp eq i8 %5377, 1
  br i1 %5378, label %block_400f90, label %block_400ef9

block_400bc7:                                     ; preds = %block_400bb4
  %5379 = load i64, i64* %RBP
  %5380 = sub i64 %5379, 16
  %5381 = load i64, i64* %PC
  %5382 = add i64 %5381, 3
  store i64 %5382, i64* %PC
  %5383 = inttoptr i64 %5380 to i32*
  %5384 = load i32, i32* %5383
  %5385 = zext i32 %5384 to i64
  store i64 %5385, i64* %RAX, align 8, !tbaa !2428
  %5386 = load i64, i64* %RAX
  %5387 = load i64, i64* %PC
  %5388 = add i64 %5387, 3
  store i64 %5388, i64* %PC
  %5389 = trunc i64 %5386 to i32
  %5390 = add i32 -1, %5389
  %5391 = zext i32 %5390 to i64
  store i64 %5391, i64* %RAX, align 8, !tbaa !2428
  %5392 = icmp ult i32 %5390, %5389
  %5393 = icmp ult i32 %5390, -1
  %5394 = or i1 %5392, %5393
  %5395 = zext i1 %5394 to i8
  %5396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5395, i8* %5396, align 1, !tbaa !2432
  %5397 = and i32 %5390, 255
  %5398 = call i32 @llvm.ctpop.i32(i32 %5397) #16
  %5399 = trunc i32 %5398 to i8
  %5400 = and i8 %5399, 1
  %5401 = xor i8 %5400, 1
  %5402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5401, i8* %5402, align 1, !tbaa !2446
  %5403 = xor i64 -1, %5386
  %5404 = trunc i64 %5403 to i32
  %5405 = xor i32 %5404, %5390
  %5406 = lshr i32 %5405, 4
  %5407 = trunc i32 %5406 to i8
  %5408 = and i8 %5407, 1
  %5409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5408, i8* %5409, align 1, !tbaa !2447
  %5410 = icmp eq i32 %5390, 0
  %5411 = zext i1 %5410 to i8
  %5412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5411, i8* %5412, align 1, !tbaa !2448
  %5413 = lshr i32 %5390, 31
  %5414 = trunc i32 %5413 to i8
  %5415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5414, i8* %5415, align 1, !tbaa !2449
  %5416 = lshr i32 %5389, 31
  %5417 = xor i32 %5413, %5416
  %5418 = xor i32 %5413, 1
  %5419 = add nuw nsw i32 %5417, %5418
  %5420 = icmp eq i32 %5419, 2
  %5421 = zext i1 %5420 to i8
  %5422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5421, i8* %5422, align 1, !tbaa !2450
  %5423 = load i64, i64* %RBP
  %5424 = sub i64 %5423, 16
  %5425 = load i32, i32* %EAX
  %5426 = zext i32 %5425 to i64
  %5427 = load i64, i64* %PC
  %5428 = add i64 %5427, 3
  store i64 %5428, i64* %PC
  %5429 = inttoptr i64 %5424 to i32*
  store i32 %5425, i32* %5429
  %5430 = load i64, i64* %PC
  %5431 = sub i64 %5430, 69
  %5432 = load i64, i64* %PC
  %5433 = add i64 %5432, 5
  store i64 %5433, i64* %PC
  %5434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5431, i64* %5434, align 8, !tbaa !2428
  br label %block_400b8b

block_4010ff:                                     ; preds = %block_40116d, %block_4010f1
  %MEMORY.23 = phi %struct.Memory* [ %MEMORY.37, %block_4010f1 ], [ %MEMORY.24, %block_40116d ]
  %5435 = load i64, i64* %RBP
  %5436 = sub i64 %5435, 8
  %5437 = load i64, i64* %PC
  %5438 = add i64 %5437, 3
  store i64 %5438, i64* %PC
  %5439 = inttoptr i64 %5436 to i32*
  %5440 = load i32, i32* %5439
  %5441 = zext i32 %5440 to i64
  store i64 %5441, i64* %RAX, align 8, !tbaa !2428
  %5442 = load i64, i64* %RBP
  %5443 = sub i64 %5442, 12
  %5444 = load i64, i64* %PC
  %5445 = add i64 %5444, 4
  store i64 %5445, i64* %PC
  %5446 = inttoptr i64 %5443 to i32*
  %5447 = load i32, i32* %5446
  %5448 = sext i32 %5447 to i64
  store i64 %5448, i64* %RCX, align 8, !tbaa !2428
  %5449 = load i32, i32* %EAX
  %5450 = zext i32 %5449 to i64
  %5451 = load i64, i64* %RBP
  %5452 = load i64, i64* %RCX
  %5453 = mul i64 %5452, 4
  %5454 = add i64 %5451, -1328
  %5455 = add i64 %5454, %5453
  %5456 = load i64, i64* %PC
  %5457 = add i64 %5456, 7
  store i64 %5457, i64* %PC
  %5458 = inttoptr i64 %5455 to i32*
  %5459 = load i32, i32* %5458
  %5460 = sub i32 %5449, %5459
  %5461 = icmp ult i32 %5449, %5459
  %5462 = zext i1 %5461 to i8
  %5463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5462, i8* %5463, align 1, !tbaa !2432
  %5464 = and i32 %5460, 255
  %5465 = call i32 @llvm.ctpop.i32(i32 %5464) #16
  %5466 = trunc i32 %5465 to i8
  %5467 = and i8 %5466, 1
  %5468 = xor i8 %5467, 1
  %5469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5468, i8* %5469, align 1, !tbaa !2446
  %5470 = xor i32 %5459, %5449
  %5471 = xor i32 %5470, %5460
  %5472 = lshr i32 %5471, 4
  %5473 = trunc i32 %5472 to i8
  %5474 = and i8 %5473, 1
  %5475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5474, i8* %5475, align 1, !tbaa !2447
  %5476 = icmp eq i32 %5460, 0
  %5477 = zext i1 %5476 to i8
  %5478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5477, i8* %5478, align 1, !tbaa !2448
  %5479 = lshr i32 %5460, 31
  %5480 = trunc i32 %5479 to i8
  %5481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5480, i8* %5481, align 1, !tbaa !2449
  %5482 = lshr i32 %5449, 31
  %5483 = lshr i32 %5459, 31
  %5484 = xor i32 %5483, %5482
  %5485 = xor i32 %5479, %5482
  %5486 = add nuw nsw i32 %5485, %5484
  %5487 = icmp eq i32 %5486, 2
  %5488 = zext i1 %5487 to i8
  %5489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5488, i8* %5489, align 1, !tbaa !2450
  %5490 = load i64, i64* %PC
  %5491 = add i64 %5490, 115
  %5492 = load i64, i64* %PC
  %5493 = add i64 %5492, 6
  %5494 = load i64, i64* %PC
  %5495 = add i64 %5494, 6
  store i64 %5495, i64* %PC
  %5496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5497 = load i8, i8* %5496, align 1, !tbaa !2448
  %5498 = icmp eq i8 %5497, 0
  %5499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5500 = load i8, i8* %5499, align 1, !tbaa !2449
  %5501 = icmp ne i8 %5500, 0
  %5502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5503 = load i8, i8* %5502, align 1, !tbaa !2450
  %5504 = icmp ne i8 %5503, 0
  %5505 = xor i1 %5501, %5504
  %5506 = xor i1 %5505, true
  %5507 = and i1 %5498, %5506
  %5508 = zext i1 %5507 to i8
  store i8 %5508, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5510 = select i1 %5507, i64 %5491, i64 %5493
  store i64 %5510, i64* %5509, align 8, !tbaa !2428
  %5511 = load i8, i8* %BRANCH_TAKEN
  %5512 = icmp eq i8 %5511, 1
  %5513 = load i64, i64* %RBP
  br i1 %5512, label %block_401180, label %block_401113

block_4016de:                                     ; preds = %block_4014b1
  %5514 = load i64, i64* %PC
  %5515 = add i64 %5514, 117
  %5516 = load i64, i64* %PC
  %5517 = add i64 %5516, 5
  store i64 %5517, i64* %PC
  %5518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5515, i64* %5518, align 8, !tbaa !2428
  br label %block_401753

block_4017f3:                                     ; preds = %block_4017e1
  %5519 = add i64 %6042, 8
  store i64 %5519, i64* %PC
  %5520 = inttoptr i64 %6041 to i32*
  %5521 = load i32, i32* %5520
  %5522 = sext i32 %5521 to i64
  store i64 %5522, i64* %RAX, align 8, !tbaa !2428
  %5523 = load i64, i64* %RAX
  %5524 = mul i64 %5523, 4
  %5525 = add i64 %5524, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %5526 = load i64, i64* %PC
  %5527 = add i64 %5526, 7
  store i64 %5527, i64* %PC
  %5528 = inttoptr i64 %5525 to i32*
  %5529 = load i32, i32* %5528
  %5530 = zext i32 %5529 to i64
  store i64 %5530, i64* %RCX, align 8, !tbaa !2428
  %5531 = load i64, i64* %RBP
  %5532 = sub i64 %5531, 4
  %5533 = load i64, i64* %PC
  %5534 = add i64 %5533, 4
  store i64 %5534, i64* %PC
  %5535 = inttoptr i64 %5532 to i32*
  %5536 = load i32, i32* %5535
  %5537 = sext i32 %5536 to i64
  store i64 %5537, i64* %RAX, align 8, !tbaa !2428
  %5538 = load i64, i64* %RAX
  %5539 = mul i64 %5538, 4
  %5540 = add i64 %5539, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %5541 = load i32, i32* %ECX
  %5542 = zext i32 %5541 to i64
  %5543 = load i64, i64* %PC
  %5544 = add i64 %5543, 7
  store i64 %5544, i64* %PC
  %5545 = inttoptr i64 %5540 to i32*
  store i32 %5541, i32* %5545
  %5546 = load i64, i64* %PC
  %5547 = add i64 %5546, 20
  %5548 = load i64, i64* %PC
  %5549 = add i64 %5548, 5
  store i64 %5549, i64* %PC
  %5550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5547, i64* %5550, align 8, !tbaa !2428
  br label %block_401825

block_40116d:                                     ; preds = %block_401113, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %MEMORY.24 = phi %struct.Memory* [ %MEMORY.23, %block_401113 ], [ %3719, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3 ]
  %5551 = load i64, i64* %PC
  %5552 = add i64 %5551, 5
  %5553 = load i64, i64* %PC
  %5554 = add i64 %5553, 5
  store i64 %5554, i64* %PC
  %5555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5552, i64* %5555, align 8, !tbaa !2428
  %5556 = load i64, i64* %RBP
  %5557 = sub i64 %5556, 8
  %5558 = load i64, i64* %PC
  %5559 = add i64 %5558, 3
  store i64 %5559, i64* %PC
  %5560 = inttoptr i64 %5557 to i32*
  %5561 = load i32, i32* %5560
  %5562 = zext i32 %5561 to i64
  store i64 %5562, i64* %RAX, align 8, !tbaa !2428
  %5563 = load i64, i64* %RAX
  %5564 = load i64, i64* %PC
  %5565 = add i64 %5564, 3
  store i64 %5565, i64* %PC
  %5566 = trunc i64 %5563 to i32
  %5567 = add i32 1, %5566
  %5568 = zext i32 %5567 to i64
  store i64 %5568, i64* %RAX, align 8, !tbaa !2428
  %5569 = icmp ult i32 %5567, %5566
  %5570 = icmp ult i32 %5567, 1
  %5571 = or i1 %5569, %5570
  %5572 = zext i1 %5571 to i8
  %5573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5572, i8* %5573, align 1, !tbaa !2432
  %5574 = and i32 %5567, 255
  %5575 = call i32 @llvm.ctpop.i32(i32 %5574) #16
  %5576 = trunc i32 %5575 to i8
  %5577 = and i8 %5576, 1
  %5578 = xor i8 %5577, 1
  %5579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5578, i8* %5579, align 1, !tbaa !2446
  %5580 = xor i64 1, %5563
  %5581 = trunc i64 %5580 to i32
  %5582 = xor i32 %5581, %5567
  %5583 = lshr i32 %5582, 4
  %5584 = trunc i32 %5583 to i8
  %5585 = and i8 %5584, 1
  %5586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5585, i8* %5586, align 1, !tbaa !2447
  %5587 = icmp eq i32 %5567, 0
  %5588 = zext i1 %5587 to i8
  %5589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5588, i8* %5589, align 1, !tbaa !2448
  %5590 = lshr i32 %5567, 31
  %5591 = trunc i32 %5590 to i8
  %5592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5591, i8* %5592, align 1, !tbaa !2449
  %5593 = lshr i32 %5566, 31
  %5594 = xor i32 %5590, %5593
  %5595 = add nuw nsw i32 %5594, %5590
  %5596 = icmp eq i32 %5595, 2
  %5597 = zext i1 %5596 to i8
  %5598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5597, i8* %5598, align 1, !tbaa !2450
  %5599 = load i64, i64* %RBP
  %5600 = sub i64 %5599, 8
  %5601 = load i32, i32* %EAX
  %5602 = zext i32 %5601 to i64
  %5603 = load i64, i64* %PC
  %5604 = add i64 %5603, 3
  store i64 %5604, i64* %PC
  %5605 = inttoptr i64 %5600 to i32*
  store i32 %5601, i32* %5605
  %5606 = load i64, i64* %PC
  %5607 = sub i64 %5606, 124
  %5608 = load i64, i64* %PC
  %5609 = add i64 %5608, 5
  store i64 %5609, i64* %PC
  %5610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5607, i64* %5610, align 8, !tbaa !2428
  br label %block_4010ff

block_400cdc:                                     ; preds = %block_400ca2
  %5611 = sub i64 %6585, 4
  %5612 = load i64, i64* %PC
  %5613 = add i64 %5612, 7
  store i64 %5613, i64* %PC
  %5614 = inttoptr i64 %5611 to i32*
  store i32 0, i32* %5614
  br label %block_400ce3

block_4010d3:                                     ; preds = %block_40108d
  %5615 = sub i64 %6899, 1492
  %5616 = load i64, i64* %PC
  %5617 = add i64 %5616, 10
  store i64 %5617, i64* %PC
  %5618 = inttoptr i64 %5615 to i32*
  store i32 0, i32* %5618
  %5619 = load i64, i64* %RBP
  %5620 = sub i64 %5619, 4
  %5621 = load i64, i64* %PC
  %5622 = add i64 %5621, 7
  store i64 %5622, i64* %PC
  %5623 = inttoptr i64 %5620 to i32*
  store i32 1, i32* %5623
  br label %block_4010e4

block_400bb4:                                     ; preds = %block_400b8b, %block_400ba7
  %MEMORY.25 = phi %struct.Memory* [ %MEMORY.42, %block_400b8b ], [ %MEMORY.42, %block_400ba7 ]
  %5624 = load i64, i64* %RBP
  %5625 = sub i64 %5624, 2693
  %5626 = load i64, i64* %PC
  %5627 = add i64 %5626, 6
  store i64 %5627, i64* %PC
  %5628 = inttoptr i64 %5625 to i8*
  %5629 = load i8, i8* %5628
  store i8 %5629, i8* %AL, align 1, !tbaa !2451
  %5630 = load i8, i8* %AL
  %5631 = zext i8 %5630 to i64
  %5632 = load i64, i64* %PC
  %5633 = add i64 %5632, 2
  store i64 %5633, i64* %PC
  %5634 = and i64 1, %5631
  %5635 = trunc i64 %5634 to i8
  %5636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5636, align 1, !tbaa !2432
  %5637 = trunc i64 %5634 to i32
  %5638 = and i32 %5637, 255
  %5639 = call i32 @llvm.ctpop.i32(i32 %5638) #16
  %5640 = trunc i32 %5639 to i8
  %5641 = and i8 %5640, 1
  %5642 = xor i8 %5641, 1
  %5643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5642, i8* %5643, align 1, !tbaa !2446
  %5644 = icmp eq i8 %5635, 0
  %5645 = zext i1 %5644 to i8
  %5646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5645, i8* %5646, align 1, !tbaa !2448
  %5647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %5647, align 1, !tbaa !2449
  %5648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5648, align 1, !tbaa !2450
  %5649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5649, align 1, !tbaa !2447
  %5650 = load i64, i64* %PC
  %5651 = add i64 %5650, 11
  %5652 = load i64, i64* %PC
  %5653 = add i64 %5652, 6
  %5654 = load i64, i64* %PC
  %5655 = add i64 %5654, 6
  store i64 %5655, i64* %PC
  %5656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5657 = load i8, i8* %5656, align 1, !tbaa !2448
  %5658 = icmp eq i8 %5657, 0
  %5659 = zext i1 %5658 to i8
  store i8 %5659, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5661 = select i1 %5658, i64 %5651, i64 %5653
  store i64 %5661, i64* %5660, align 8, !tbaa !2428
  %5662 = load i8, i8* %BRANCH_TAKEN
  %5663 = icmp eq i8 %5662, 1
  br i1 %5663, label %block_400bc7, label %block_400bc2

block_4016cb:                                     ; preds = %block_401572, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7
  %MEMORY.26 = phi %struct.Memory* [ %MEMORY.19, %block_401572 ], [ %1549, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7 ]
  %5664 = load i64, i64* %PC
  %5665 = add i64 %5664, 5
  %5666 = load i64, i64* %PC
  %5667 = add i64 %5666, 5
  store i64 %5667, i64* %PC
  %5668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5665, i64* %5668, align 8, !tbaa !2428
  %5669 = load i64, i64* %RBP
  %5670 = sub i64 %5669, 4
  %5671 = load i64, i64* %PC
  %5672 = add i64 %5671, 3
  store i64 %5672, i64* %PC
  %5673 = inttoptr i64 %5670 to i32*
  %5674 = load i32, i32* %5673
  %5675 = zext i32 %5674 to i64
  store i64 %5675, i64* %RAX, align 8, !tbaa !2428
  %5676 = load i64, i64* %RAX
  %5677 = load i64, i64* %PC
  %5678 = add i64 %5677, 3
  store i64 %5678, i64* %PC
  %5679 = trunc i64 %5676 to i32
  %5680 = add i32 1, %5679
  %5681 = zext i32 %5680 to i64
  store i64 %5681, i64* %RAX, align 8, !tbaa !2428
  %5682 = icmp ult i32 %5680, %5679
  %5683 = icmp ult i32 %5680, 1
  %5684 = or i1 %5682, %5683
  %5685 = zext i1 %5684 to i8
  %5686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5685, i8* %5686, align 1, !tbaa !2432
  %5687 = and i32 %5680, 255
  %5688 = call i32 @llvm.ctpop.i32(i32 %5687) #16
  %5689 = trunc i32 %5688 to i8
  %5690 = and i8 %5689, 1
  %5691 = xor i8 %5690, 1
  %5692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5691, i8* %5692, align 1, !tbaa !2446
  %5693 = xor i64 1, %5676
  %5694 = trunc i64 %5693 to i32
  %5695 = xor i32 %5694, %5680
  %5696 = lshr i32 %5695, 4
  %5697 = trunc i32 %5696 to i8
  %5698 = and i8 %5697, 1
  %5699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5698, i8* %5699, align 1, !tbaa !2447
  %5700 = icmp eq i32 %5680, 0
  %5701 = zext i1 %5700 to i8
  %5702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5701, i8* %5702, align 1, !tbaa !2448
  %5703 = lshr i32 %5680, 31
  %5704 = trunc i32 %5703 to i8
  %5705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5704, i8* %5705, align 1, !tbaa !2449
  %5706 = lshr i32 %5679, 31
  %5707 = xor i32 %5703, %5706
  %5708 = add nuw nsw i32 %5707, %5703
  %5709 = icmp eq i32 %5708, 2
  %5710 = zext i1 %5709 to i8
  %5711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5710, i8* %5711, align 1, !tbaa !2450
  %5712 = load i64, i64* %RBP
  %5713 = sub i64 %5712, 4
  %5714 = load i32, i32* %EAX
  %5715 = zext i32 %5714 to i64
  %5716 = load i64, i64* %PC
  %5717 = add i64 %5716, 3
  store i64 %5717, i64* %PC
  %5718 = inttoptr i64 %5713 to i32*
  store i32 %5714, i32* %5718
  %5719 = load i64, i64* %PC
  %5720 = sub i64 %5719, 552
  %5721 = load i64, i64* %PC
  %5722 = add i64 %5721, 5
  store i64 %5722, i64* %PC
  %5723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5720, i64* %5723, align 8, !tbaa !2428
  br label %block_4014b1

block_400ec6:                                     ; preds = %block_400ebf, %block_400f90
  %MEMORY.27 = phi %struct.Memory* [ %MEMORY.29, %block_400ebf ], [ %MEMORY.7, %block_400f90 ]
  %5724 = load i64, i64* %RBP
  %5725 = sub i64 %5724, 4
  %5726 = load i64, i64* %PC
  %5727 = add i64 %5726, 3
  store i64 %5727, i64* %PC
  %5728 = inttoptr i64 %5725 to i32*
  %5729 = load i32, i32* %5728
  %5730 = zext i32 %5729 to i64
  store i64 %5730, i64* %RAX, align 8, !tbaa !2428
  %5731 = load i64, i64* %RBP
  %5732 = sub i64 %5731, 12
  %5733 = load i64, i64* %PC
  %5734 = add i64 %5733, 3
  store i64 %5734, i64* %PC
  %5735 = inttoptr i64 %5732 to i32*
  %5736 = load i32, i32* %5735
  %5737 = zext i32 %5736 to i64
  store i64 %5737, i64* %RCX, align 8, !tbaa !2428
  %5738 = load i64, i64* %RCX
  %5739 = load i64, i64* %PC
  %5740 = add i64 %5739, 3
  store i64 %5740, i64* %PC
  %5741 = trunc i64 %5738 to i32
  %5742 = add i32 1, %5741
  %5743 = zext i32 %5742 to i64
  store i64 %5743, i64* %RCX, align 8, !tbaa !2428
  %5744 = icmp ult i32 %5742, %5741
  %5745 = icmp ult i32 %5742, 1
  %5746 = or i1 %5744, %5745
  %5747 = zext i1 %5746 to i8
  %5748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5747, i8* %5748, align 1, !tbaa !2432
  %5749 = and i32 %5742, 255
  %5750 = call i32 @llvm.ctpop.i32(i32 %5749) #16
  %5751 = trunc i32 %5750 to i8
  %5752 = and i8 %5751, 1
  %5753 = xor i8 %5752, 1
  %5754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5753, i8* %5754, align 1, !tbaa !2446
  %5755 = xor i64 1, %5738
  %5756 = trunc i64 %5755 to i32
  %5757 = xor i32 %5756, %5742
  %5758 = lshr i32 %5757, 4
  %5759 = trunc i32 %5758 to i8
  %5760 = and i8 %5759, 1
  %5761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5760, i8* %5761, align 1, !tbaa !2447
  %5762 = icmp eq i32 %5742, 0
  %5763 = zext i1 %5762 to i8
  %5764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5763, i8* %5764, align 1, !tbaa !2448
  %5765 = lshr i32 %5742, 31
  %5766 = trunc i32 %5765 to i8
  %5767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5766, i8* %5767, align 1, !tbaa !2449
  %5768 = lshr i32 %5741, 31
  %5769 = xor i32 %5765, %5768
  %5770 = add nuw nsw i32 %5769, %5765
  %5771 = icmp eq i32 %5770, 2
  %5772 = zext i1 %5771 to i8
  %5773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5772, i8* %5773, align 1, !tbaa !2450
  %5774 = load i32, i32* %ECX
  %5775 = zext i32 %5774 to i64
  %5776 = load i64, i64* %PC
  %5777 = add i64 %5776, 3
  store i64 %5777, i64* %PC
  %5778 = shl i64 %5775, 32
  %5779 = ashr exact i64 %5778, 32
  store i64 %5779, i64* %RDX, align 8, !tbaa !2428
  %5780 = load i32, i32* %EAX
  %5781 = zext i32 %5780 to i64
  %5782 = load i64, i64* %RBP
  %5783 = load i64, i64* %RDX
  %5784 = mul i64 %5783, 4
  %5785 = add i64 %5782, -1328
  %5786 = add i64 %5785, %5784
  %5787 = load i64, i64* %PC
  %5788 = add i64 %5787, 7
  store i64 %5788, i64* %PC
  %5789 = inttoptr i64 %5786 to i32*
  %5790 = load i32, i32* %5789
  %5791 = sub i32 %5780, %5790
  %5792 = icmp ult i32 %5780, %5790
  %5793 = zext i1 %5792 to i8
  %5794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5793, i8* %5794, align 1, !tbaa !2432
  %5795 = and i32 %5791, 255
  %5796 = call i32 @llvm.ctpop.i32(i32 %5795) #16
  %5797 = trunc i32 %5796 to i8
  %5798 = and i8 %5797, 1
  %5799 = xor i8 %5798, 1
  %5800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5799, i8* %5800, align 1, !tbaa !2446
  %5801 = xor i32 %5790, %5780
  %5802 = xor i32 %5801, %5791
  %5803 = lshr i32 %5802, 4
  %5804 = trunc i32 %5803 to i8
  %5805 = and i8 %5804, 1
  %5806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5805, i8* %5806, align 1, !tbaa !2447
  %5807 = icmp eq i32 %5791, 0
  %5808 = zext i1 %5807 to i8
  %5809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5808, i8* %5809, align 1, !tbaa !2448
  %5810 = lshr i32 %5791, 31
  %5811 = trunc i32 %5810 to i8
  %5812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5811, i8* %5812, align 1, !tbaa !2449
  %5813 = lshr i32 %5780, 31
  %5814 = lshr i32 %5790, 31
  %5815 = xor i32 %5814, %5813
  %5816 = xor i32 %5810, %5813
  %5817 = add nuw nsw i32 %5816, %5815
  %5818 = icmp eq i32 %5817, 2
  %5819 = zext i1 %5818 to i8
  %5820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5819, i8* %5820, align 1, !tbaa !2450
  %5821 = load i64, i64* %PC
  %5822 = add i64 %5821, 202
  %5823 = load i64, i64* %PC
  %5824 = add i64 %5823, 6
  %5825 = load i64, i64* %PC
  %5826 = add i64 %5825, 6
  store i64 %5826, i64* %PC
  %5827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5828 = load i8, i8* %5827, align 1, !tbaa !2448
  %5829 = icmp eq i8 %5828, 0
  %5830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5831 = load i8, i8* %5830, align 1, !tbaa !2449
  %5832 = icmp ne i8 %5831, 0
  %5833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5834 = load i8, i8* %5833, align 1, !tbaa !2450
  %5835 = icmp ne i8 %5834, 0
  %5836 = xor i1 %5832, %5835
  %5837 = xor i1 %5836, true
  %5838 = and i1 %5829, %5837
  %5839 = zext i1 %5838 to i8
  store i8 %5839, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5841 = select i1 %5838, i64 %5822, i64 %5824
  store i64 %5841, i64* %5840, align 8, !tbaa !2428
  %5842 = load i8, i8* %BRANCH_TAKEN
  %5843 = icmp eq i8 %5842, 1
  %5844 = load i64, i64* %RBP
  %5845 = sub i64 %5844, 12
  %5846 = load i64, i64* %PC
  %5847 = add i64 %5846, 3
  store i64 %5847, i64* %PC
  %5848 = inttoptr i64 %5845 to i32*
  %5849 = load i32, i32* %5848
  %5850 = zext i32 %5849 to i64
  store i64 %5850, i64* %RAX, align 8, !tbaa !2428
  %5851 = load i64, i64* %RAX
  %5852 = load i64, i64* %PC
  %5853 = add i64 %5852, 3
  store i64 %5853, i64* %PC
  %5854 = trunc i64 %5851 to i32
  %5855 = add i32 1, %5854
  %5856 = zext i32 %5855 to i64
  store i64 %5856, i64* %RAX, align 8, !tbaa !2428
  %5857 = icmp ult i32 %5855, %5854
  %5858 = icmp ult i32 %5855, 1
  %5859 = or i1 %5857, %5858
  %5860 = zext i1 %5859 to i8
  %5861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5860, i8* %5861, align 1, !tbaa !2432
  %5862 = and i32 %5855, 255
  %5863 = call i32 @llvm.ctpop.i32(i32 %5862) #16
  %5864 = trunc i32 %5863 to i8
  %5865 = and i8 %5864, 1
  %5866 = xor i8 %5865, 1
  %5867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5866, i8* %5867, align 1, !tbaa !2446
  %5868 = xor i64 1, %5851
  %5869 = trunc i64 %5868 to i32
  %5870 = xor i32 %5869, %5855
  %5871 = lshr i32 %5870, 4
  %5872 = trunc i32 %5871 to i8
  %5873 = and i8 %5872, 1
  %5874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5873, i8* %5874, align 1, !tbaa !2447
  %5875 = icmp eq i32 %5855, 0
  %5876 = zext i1 %5875 to i8
  %5877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5876, i8* %5877, align 1, !tbaa !2448
  %5878 = lshr i32 %5855, 31
  %5879 = trunc i32 %5878 to i8
  %5880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5879, i8* %5880, align 1, !tbaa !2449
  %5881 = lshr i32 %5854, 31
  %5882 = xor i32 %5878, %5881
  %5883 = add nuw nsw i32 %5882, %5878
  %5884 = icmp eq i32 %5883, 2
  %5885 = zext i1 %5884 to i8
  %5886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5885, i8* %5886, align 1, !tbaa !2450
  br i1 %5843, label %block_400fa3, label %block_400edf

block_4012d0:                                     ; preds = %block_40127b, %block_40128d
  %MEMORY.28 = phi %struct.Memory* [ %MEMORY.34, %block_40127b ], [ %MEMORY.34, %block_40128d ]
  %5887 = load i64, i64* %RBP
  %5888 = sub i64 %5887, 4
  %5889 = load i64, i64* %PC
  %5890 = add i64 %5889, 4
  store i64 %5890, i64* %PC
  %5891 = inttoptr i64 %5888 to i32*
  %5892 = load i32, i32* %5891
  %5893 = sext i32 %5892 to i64
  store i64 %5893, i64* %RAX, align 8, !tbaa !2428
  %5894 = load i64, i64* %RBP
  %5895 = load i64, i64* %RAX
  %5896 = mul i64 %5895, 4
  %5897 = add i64 %5894, -1488
  %5898 = add i64 %5897, %5896
  %5899 = load i64, i64* %PC
  %5900 = add i64 %5899, 8
  store i64 %5900, i64* %PC
  %5901 = inttoptr i64 %5898 to i32*
  %5902 = load i32, i32* %5901
  %5903 = sub i32 %5902, -1
  %5904 = icmp ult i32 %5902, -1
  %5905 = zext i1 %5904 to i8
  %5906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5905, i8* %5906, align 1, !tbaa !2432
  %5907 = and i32 %5903, 255
  %5908 = call i32 @llvm.ctpop.i32(i32 %5907) #16
  %5909 = trunc i32 %5908 to i8
  %5910 = and i8 %5909, 1
  %5911 = xor i8 %5910, 1
  %5912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5911, i8* %5912, align 1, !tbaa !2446
  %5913 = xor i32 %5902, -1
  %5914 = xor i32 %5913, %5903
  %5915 = lshr i32 %5914, 4
  %5916 = trunc i32 %5915 to i8
  %5917 = and i8 %5916, 1
  %5918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5917, i8* %5918, align 1, !tbaa !2447
  %5919 = icmp eq i32 %5903, 0
  %5920 = zext i1 %5919 to i8
  %5921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5920, i8* %5921, align 1, !tbaa !2448
  %5922 = lshr i32 %5903, 31
  %5923 = trunc i32 %5922 to i8
  %5924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5923, i8* %5924, align 1, !tbaa !2449
  %5925 = lshr i32 %5902, 31
  %5926 = xor i32 %5925, 1
  %5927 = xor i32 %5922, %5925
  %5928 = add nuw nsw i32 %5927, %5926
  %5929 = icmp eq i32 %5928, 2
  %5930 = zext i1 %5929 to i8
  %5931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5930, i8* %5931, align 1, !tbaa !2450
  %5932 = load i64, i64* %PC
  %5933 = add i64 %5932, 87
  %5934 = load i64, i64* %PC
  %5935 = add i64 %5934, 6
  %5936 = load i64, i64* %PC
  %5937 = add i64 %5936, 6
  store i64 %5937, i64* %PC
  %5938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5939 = load i8, i8* %5938, align 1, !tbaa !2448
  %5940 = icmp eq i8 %5939, 0
  %5941 = zext i1 %5940 to i8
  store i8 %5941, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5943 = select i1 %5940, i64 %5933, i64 %5935
  store i64 %5943, i64* %5942, align 8, !tbaa !2428
  %5944 = load i8, i8* %BRANCH_TAKEN
  %5945 = icmp eq i8 %5944, 1
  br i1 %5945, label %block_401333, label %block_4012e2

block_4014c5:                                     ; preds = %block_4014b1
  %5946 = load i64, i64* %RBP
  %5947 = sub i64 %5946, 4
  %5948 = load i64, i64* %PC
  %5949 = add i64 %5948, 4
  store i64 %5949, i64* %PC
  %5950 = inttoptr i64 %5947 to i32*
  %5951 = load i32, i32* %5950
  %5952 = sext i32 %5951 to i64
  store i64 %5952, i64* %RAX, align 8, !tbaa !2428
  %5953 = load i64, i64* %RBP
  %5954 = load i64, i64* %RAX
  %5955 = mul i64 %5954, 4
  %5956 = add i64 %5953, -1568
  %5957 = add i64 %5956, %5955
  %5958 = load i64, i64* %PC
  %5959 = add i64 %5958, 8
  store i64 %5959, i64* %PC
  %5960 = inttoptr i64 %5957 to i32*
  %5961 = load i32, i32* %5960
  %5962 = sext i32 %5961 to i64
  store i64 %5962, i64* %RAX, align 8, !tbaa !2428
  %5963 = load i64, i64* %RBP
  %5964 = load i64, i64* %RAX
  %5965 = mul i64 %5964, 4
  %5966 = add i64 %5963, -2640
  %5967 = add i64 %5966, %5965
  %5968 = load i64, i64* %PC
  %5969 = add i64 %5968, 11
  store i64 %5969, i64* %PC
  %5970 = inttoptr i64 %5967 to i32*
  store i32 1, i32* %5970
  %5971 = load i64, i64* %RBP
  %5972 = sub i64 %5971, 8
  %5973 = load i64, i64* %PC
  %5974 = add i64 %5973, 7
  store i64 %5974, i64* %PC
  %5975 = inttoptr i64 %5972 to i32*
  store i32 1, i32* %5975
  br label %block_4014e3

block_4017e1:                                     ; preds = %block_4017d4
  %5976 = load i64, i64* %RBP
  %5977 = sub i64 %5976, 4
  %5978 = load i64, i64* %PC
  %5979 = add i64 %5978, 4
  store i64 %5979, i64* %PC
  %5980 = inttoptr i64 %5977 to i32*
  %5981 = load i32, i32* %5980
  %5982 = sext i32 %5981 to i64
  store i64 %5982, i64* %RAX, align 8, !tbaa !2428
  %5983 = load i64, i64* %RAX
  %5984 = mul i64 %5983, 4
  %5985 = add i64 %5984, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %5986 = load i64, i64* %PC
  %5987 = add i64 %5986, 8
  store i64 %5987, i64* %PC
  %5988 = inttoptr i64 %5985 to i32*
  %5989 = load i32, i32* %5988
  %5990 = sub i32 %5989, -1
  %5991 = icmp ult i32 %5989, -1
  %5992 = zext i1 %5991 to i8
  %5993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5992, i8* %5993, align 1, !tbaa !2432
  %5994 = and i32 %5990, 255
  %5995 = call i32 @llvm.ctpop.i32(i32 %5994) #16
  %5996 = trunc i32 %5995 to i8
  %5997 = and i8 %5996, 1
  %5998 = xor i8 %5997, 1
  %5999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5998, i8* %5999, align 1, !tbaa !2446
  %6000 = xor i32 %5989, -1
  %6001 = xor i32 %6000, %5990
  %6002 = lshr i32 %6001, 4
  %6003 = trunc i32 %6002 to i8
  %6004 = and i8 %6003, 1
  %6005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6004, i8* %6005, align 1, !tbaa !2447
  %6006 = icmp eq i32 %5990, 0
  %6007 = zext i1 %6006 to i8
  %6008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6007, i8* %6008, align 1, !tbaa !2448
  %6009 = lshr i32 %5990, 31
  %6010 = trunc i32 %6009 to i8
  %6011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6010, i8* %6011, align 1, !tbaa !2449
  %6012 = lshr i32 %5989, 31
  %6013 = xor i32 %6012, 1
  %6014 = xor i32 %6009, %6012
  %6015 = add nuw nsw i32 %6014, %6013
  %6016 = icmp eq i32 %6015, 2
  %6017 = zext i1 %6016 to i8
  %6018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6017, i8* %6018, align 1, !tbaa !2450
  %6019 = load i64, i64* %PC
  %6020 = add i64 %6019, 41
  %6021 = load i64, i64* %PC
  %6022 = add i64 %6021, 6
  %6023 = load i64, i64* %PC
  %6024 = add i64 %6023, 6
  store i64 %6024, i64* %PC
  %6025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6026 = load i8, i8* %6025, align 1, !tbaa !2448
  store i8 %6026, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6028 = icmp ne i8 %6026, 0
  %6029 = select i1 %6028, i64 %6020, i64 %6022
  store i64 %6029, i64* %6027, align 8, !tbaa !2428
  %6030 = load i8, i8* %BRANCH_TAKEN
  %6031 = icmp eq i8 %6030, 1
  %6032 = load i64, i64* %RBP
  %6033 = sub i64 %6032, 4
  %6034 = load i64, i64* %PC
  %6035 = add i64 %6034, 4
  store i64 %6035, i64* %PC
  %6036 = inttoptr i64 %6033 to i32*
  %6037 = load i32, i32* %6036
  %6038 = sext i32 %6037 to i64
  store i64 %6038, i64* %RAX, align 8, !tbaa !2428
  %6039 = load i64, i64* %RAX
  %6040 = mul i64 %6039, 4
  %6041 = add i64 %6040, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %6042 = load i64, i64* %PC
  br i1 %6031, label %block_401816, label %block_4017f3

block_400ebf:                                     ; preds = %block_400e7e, %block_400eab
  %MEMORY.29 = phi %struct.Memory* [ %MEMORY.43, %block_400eab ], [ %MEMORY.43, %block_400e7e ]
  %6043 = load i64, i64* %RBP
  %6044 = sub i64 %6043, 4
  %6045 = load i64, i64* %PC
  %6046 = add i64 %6045, 7
  store i64 %6046, i64* %PC
  %6047 = inttoptr i64 %6044 to i32*
  store i32 1, i32* %6047
  br label %block_400ec6

block_40128d:                                     ; preds = %block_40127b
  %6048 = load i64, i64* %RBP
  %6049 = sub i64 %6048, 1168
  %6050 = load i64, i64* %PC
  %6051 = add i64 %6050, 7
  store i64 %6051, i64* %PC
  store i64 %6049, i64* %RAX, align 8, !tbaa !2428
  %6052 = load i64, i64* %RBP
  %6053 = sub i64 %6052, 12
  %6054 = load i64, i64* %PC
  %6055 = add i64 %6054, 4
  store i64 %6055, i64* %PC
  %6056 = inttoptr i64 %6053 to i32*
  %6057 = load i32, i32* %6056
  %6058 = sext i32 %6057 to i64
  store i64 %6058, i64* %RCX, align 8, !tbaa !2428
  %6059 = load i64, i64* %RCX
  %6060 = load i64, i64* %PC
  %6061 = add i64 %6060, 4
  store i64 %6061, i64* %PC
  %6062 = shl i64 %6059, 5
  %6063 = icmp slt i64 %6062, 0
  %6064 = shl i64 %6062, 1
  store i64 %6064, i64* %RCX, align 8, !tbaa !2428
  %6065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6066 = zext i1 %6063 to i8
  store i8 %6066, i8* %6065, align 1, !tbaa !2451
  %6067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6068 = trunc i64 %6064 to i32
  %6069 = and i32 %6068, 254
  %6070 = call i32 @llvm.ctpop.i32(i32 %6069) #16
  %6071 = trunc i32 %6070 to i8
  %6072 = and i8 %6071, 1
  %6073 = xor i8 %6072, 1
  store i8 %6073, i8* %6067, align 1, !tbaa !2451
  %6074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6074, align 1, !tbaa !2451
  %6075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6076 = icmp eq i64 %6064, 0
  %6077 = zext i1 %6076 to i8
  store i8 %6077, i8* %6075, align 1, !tbaa !2451
  %6078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6079 = lshr i64 %6064, 63
  %6080 = trunc i64 %6079 to i8
  store i8 %6080, i8* %6078, align 1, !tbaa !2451
  %6081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6081, align 1, !tbaa !2451
  %6082 = load i64, i64* %RAX
  %6083 = load i64, i64* %RCX
  %6084 = load i64, i64* %PC
  %6085 = add i64 %6084, 3
  store i64 %6085, i64* %PC
  %6086 = add i64 %6083, %6082
  store i64 %6086, i64* %RAX, align 8, !tbaa !2428
  %6087 = icmp ult i64 %6086, %6082
  %6088 = icmp ult i64 %6086, %6083
  %6089 = or i1 %6087, %6088
  %6090 = zext i1 %6089 to i8
  %6091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6090, i8* %6091, align 1, !tbaa !2432
  %6092 = trunc i64 %6086 to i32
  %6093 = and i32 %6092, 255
  %6094 = call i32 @llvm.ctpop.i32(i32 %6093) #16
  %6095 = trunc i32 %6094 to i8
  %6096 = and i8 %6095, 1
  %6097 = xor i8 %6096, 1
  %6098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6097, i8* %6098, align 1, !tbaa !2446
  %6099 = xor i64 %6083, %6082
  %6100 = xor i64 %6099, %6086
  %6101 = lshr i64 %6100, 4
  %6102 = trunc i64 %6101 to i8
  %6103 = and i8 %6102, 1
  %6104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6103, i8* %6104, align 1, !tbaa !2447
  %6105 = icmp eq i64 %6086, 0
  %6106 = zext i1 %6105 to i8
  %6107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6106, i8* %6107, align 1, !tbaa !2448
  %6108 = lshr i64 %6086, 63
  %6109 = trunc i64 %6108 to i8
  %6110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6109, i8* %6110, align 1, !tbaa !2449
  %6111 = lshr i64 %6082, 63
  %6112 = lshr i64 %6083, 63
  %6113 = xor i64 %6108, %6111
  %6114 = xor i64 %6108, %6112
  %6115 = add nuw nsw i64 %6113, %6114
  %6116 = icmp eq i64 %6115, 2
  %6117 = zext i1 %6116 to i8
  %6118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6117, i8* %6118, align 1, !tbaa !2450
  %6119 = load i64, i64* %RBP
  %6120 = sub i64 %6119, 4
  %6121 = load i64, i64* %PC
  %6122 = add i64 %6121, 4
  store i64 %6122, i64* %PC
  %6123 = inttoptr i64 %6120 to i32*
  %6124 = load i32, i32* %6123
  %6125 = sext i32 %6124 to i64
  store i64 %6125, i64* %RCX, align 8, !tbaa !2428
  %6126 = load i64, i64* %RAX
  %6127 = load i64, i64* %RCX
  %6128 = mul i64 %6127, 4
  %6129 = add i64 %6128, %6126
  %6130 = load i64, i64* %PC
  %6131 = add i64 %6130, 4
  store i64 %6131, i64* %PC
  %6132 = inttoptr i64 %6129 to i32*
  %6133 = load i32, i32* %6132
  %6134 = sub i32 %6133, -1
  %6135 = icmp ult i32 %6133, -1
  %6136 = zext i1 %6135 to i8
  %6137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6136, i8* %6137, align 1, !tbaa !2432
  %6138 = and i32 %6134, 255
  %6139 = call i32 @llvm.ctpop.i32(i32 %6138) #16
  %6140 = trunc i32 %6139 to i8
  %6141 = and i8 %6140, 1
  %6142 = xor i8 %6141, 1
  %6143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6142, i8* %6143, align 1, !tbaa !2446
  %6144 = xor i32 %6133, -1
  %6145 = xor i32 %6144, %6134
  %6146 = lshr i32 %6145, 4
  %6147 = trunc i32 %6146 to i8
  %6148 = and i8 %6147, 1
  %6149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6148, i8* %6149, align 1, !tbaa !2447
  %6150 = icmp eq i32 %6134, 0
  %6151 = zext i1 %6150 to i8
  %6152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6151, i8* %6152, align 1, !tbaa !2448
  %6153 = lshr i32 %6134, 31
  %6154 = trunc i32 %6153 to i8
  %6155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6154, i8* %6155, align 1, !tbaa !2449
  %6156 = lshr i32 %6133, 31
  %6157 = xor i32 %6156, 1
  %6158 = xor i32 %6153, %6156
  %6159 = add nuw nsw i32 %6158, %6157
  %6160 = icmp eq i32 %6159, 2
  %6161 = zext i1 %6160 to i8
  %6162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6161, i8* %6162, align 1, !tbaa !2450
  %6163 = load i64, i64* %PC
  %6164 = add i64 %6163, 41
  %6165 = load i64, i64* %PC
  %6166 = add i64 %6165, 6
  %6167 = load i64, i64* %PC
  %6168 = add i64 %6167, 6
  store i64 %6168, i64* %PC
  %6169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6170 = load i8, i8* %6169, align 1, !tbaa !2448
  %6171 = icmp eq i8 %6170, 0
  %6172 = zext i1 %6171 to i8
  store i8 %6172, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6174 = select i1 %6171, i64 %6164, i64 %6166
  store i64 %6174, i64* %6173, align 8, !tbaa !2428
  %6175 = load i8, i8* %BRANCH_TAKEN
  %6176 = icmp eq i8 %6175, 1
  br i1 %6176, label %block_4012d0, label %block_4012ad

block_400ab9:                                     ; preds = %block_400a8a, %block_400ffe
  %MEMORY.30 = phi %struct.Memory* [ %MEMORY.38, %block_400a8a ], [ %MEMORY.0, %block_400ffe ]
  %6177 = load i64, i64* %RBP
  %6178 = sub i64 %6177, 12
  %6179 = load i64, i64* %PC
  %6180 = add i64 %6179, 3
  store i64 %6180, i64* %PC
  %6181 = inttoptr i64 %6178 to i32*
  %6182 = load i32, i32* %6181
  %6183 = zext i32 %6182 to i64
  store i64 %6183, i64* %RAX, align 8, !tbaa !2428
  %6184 = load i64, i64* %RAX
  %6185 = load i64, i64* %PC
  %6186 = add i64 %6185, 3
  store i64 %6186, i64* %PC
  %6187 = trunc i64 %6184 to i32
  %6188 = add i32 1, %6187
  %6189 = zext i32 %6188 to i64
  store i64 %6189, i64* %RAX, align 8, !tbaa !2428
  %6190 = icmp ult i32 %6188, %6187
  %6191 = icmp ult i32 %6188, 1
  %6192 = or i1 %6190, %6191
  %6193 = zext i1 %6192 to i8
  %6194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6193, i8* %6194, align 1, !tbaa !2432
  %6195 = and i32 %6188, 255
  %6196 = call i32 @llvm.ctpop.i32(i32 %6195) #16
  %6197 = trunc i32 %6196 to i8
  %6198 = and i8 %6197, 1
  %6199 = xor i8 %6198, 1
  %6200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6199, i8* %6200, align 1, !tbaa !2446
  %6201 = xor i64 1, %6184
  %6202 = trunc i64 %6201 to i32
  %6203 = xor i32 %6202, %6188
  %6204 = lshr i32 %6203, 4
  %6205 = trunc i32 %6204 to i8
  %6206 = and i8 %6205, 1
  %6207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6206, i8* %6207, align 1, !tbaa !2447
  %6208 = icmp eq i32 %6188, 0
  %6209 = zext i1 %6208 to i8
  %6210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6209, i8* %6210, align 1, !tbaa !2448
  %6211 = lshr i32 %6188, 31
  %6212 = trunc i32 %6211 to i8
  %6213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6212, i8* %6213, align 1, !tbaa !2449
  %6214 = lshr i32 %6187, 31
  %6215 = xor i32 %6211, %6214
  %6216 = add nuw nsw i32 %6215, %6211
  %6217 = icmp eq i32 %6216, 2
  %6218 = zext i1 %6217 to i8
  %6219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6218, i8* %6219, align 1, !tbaa !2450
  %6220 = load i64, i64* %RBP
  %6221 = sub i64 %6220, 12
  %6222 = load i32, i32* %EAX
  %6223 = zext i32 %6222 to i64
  %6224 = load i64, i64* %PC
  %6225 = add i64 %6224, 3
  store i64 %6225, i64* %PC
  %6226 = inttoptr i64 %6221 to i32*
  store i32 %6222, i32* %6226
  %6227 = load i64, i64* %RBP
  %6228 = sub i64 %6227, 12
  %6229 = load i64, i64* %PC
  %6230 = add i64 %6229, 4
  store i64 %6230, i64* %PC
  %6231 = inttoptr i64 %6228 to i32*
  %6232 = load i32, i32* %6231
  %6233 = sext i32 %6232 to i64
  store i64 %6233, i64* %RCX, align 8, !tbaa !2428
  %6234 = load i64, i64* %RBP
  %6235 = load i64, i64* %RCX
  %6236 = mul i64 %6235, 4
  %6237 = add i64 %6234, -1248
  %6238 = add i64 %6237, %6236
  %6239 = load i64, i64* %PC
  %6240 = add i64 %6239, 8
  store i64 %6240, i64* %PC
  %6241 = inttoptr i64 %6238 to i32*
  %6242 = load i32, i32* %6241
  %6243 = sub i32 %6242, -1
  %6244 = icmp ult i32 %6242, -1
  %6245 = zext i1 %6244 to i8
  %6246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6245, i8* %6246, align 1, !tbaa !2432
  %6247 = and i32 %6243, 255
  %6248 = call i32 @llvm.ctpop.i32(i32 %6247) #16
  %6249 = trunc i32 %6248 to i8
  %6250 = and i8 %6249, 1
  %6251 = xor i8 %6250, 1
  %6252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6251, i8* %6252, align 1, !tbaa !2446
  %6253 = xor i32 %6242, -1
  %6254 = xor i32 %6253, %6243
  %6255 = lshr i32 %6254, 4
  %6256 = trunc i32 %6255 to i8
  %6257 = and i8 %6256, 1
  %6258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6257, i8* %6258, align 1, !tbaa !2447
  %6259 = icmp eq i32 %6243, 0
  %6260 = zext i1 %6259 to i8
  %6261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6260, i8* %6261, align 1, !tbaa !2448
  %6262 = lshr i32 %6243, 31
  %6263 = trunc i32 %6262 to i8
  %6264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6263, i8* %6264, align 1, !tbaa !2449
  %6265 = lshr i32 %6242, 31
  %6266 = xor i32 %6265, 1
  %6267 = xor i32 %6262, %6265
  %6268 = add nuw nsw i32 %6267, %6266
  %6269 = icmp eq i32 %6268, 2
  %6270 = zext i1 %6269 to i8
  %6271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6270, i8* %6271, align 1, !tbaa !2450
  %6272 = load i64, i64* %PC
  %6273 = add i64 %6272, 180
  %6274 = load i64, i64* %PC
  %6275 = add i64 %6274, 6
  %6276 = load i64, i64* %PC
  %6277 = add i64 %6276, 6
  store i64 %6277, i64* %PC
  %6278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6279 = load i8, i8* %6278, align 1, !tbaa !2448
  %6280 = icmp eq i8 %6279, 0
  %6281 = zext i1 %6280 to i8
  store i8 %6281, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6283 = select i1 %6280, i64 %6273, i64 %6275
  store i64 %6283, i64* %6282, align 8, !tbaa !2428
  %6284 = load i8, i8* %BRANCH_TAKEN
  %6285 = icmp eq i8 %6284, 1
  %6286 = load i64, i64* %RBP
  %6287 = sub i64 %6286, 12
  %6288 = load i64, i64* %PC
  br i1 %6285, label %block_400b82, label %block_400ad4

block_4012ad:                                     ; preds = %block_40128d
  %6289 = load i64, i64* %RBP
  %6290 = sub i64 %6289, 4
  %6291 = load i64, i64* %PC
  %6292 = add i64 %6291, 4
  store i64 %6292, i64* %PC
  %6293 = inttoptr i64 %6290 to i32*
  %6294 = load i32, i32* %6293
  %6295 = sext i32 %6294 to i64
  store i64 %6295, i64* %RAX, align 8, !tbaa !2428
  %6296 = load i64, i64* %RBP
  %6297 = load i64, i64* %RAX
  %6298 = mul i64 %6297, 4
  %6299 = add i64 %6296, -1488
  %6300 = add i64 %6299, %6298
  %6301 = load i64, i64* %PC
  %6302 = add i64 %6301, 8
  store i64 %6302, i64* %PC
  %6303 = inttoptr i64 %6300 to i32*
  %6304 = load i32, i32* %6303
  %6305 = sext i32 %6304 to i64
  store i64 %6305, i64* %RAX, align 8, !tbaa !2428
  %6306 = load i64, i64* %RAX
  %6307 = mul i64 %6306, 4
  %6308 = add i64 %6307, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %6309 = load i64, i64* %PC
  %6310 = add i64 %6309, 7
  store i64 %6310, i64* %PC
  %6311 = inttoptr i64 %6308 to i32*
  %6312 = load i32, i32* %6311
  %6313 = zext i32 %6312 to i64
  store i64 %6313, i64* %RCX, align 8, !tbaa !2428
  %6314 = load i64, i64* %RBP
  %6315 = sub i64 %6314, 4
  %6316 = load i64, i64* %PC
  %6317 = add i64 %6316, 4
  store i64 %6317, i64* %PC
  %6318 = inttoptr i64 %6315 to i32*
  %6319 = load i32, i32* %6318
  %6320 = sext i32 %6319 to i64
  store i64 %6320, i64* %RAX, align 8, !tbaa !2428
  %6321 = load i64, i64* %RBP
  %6322 = load i64, i64* %RAX
  %6323 = mul i64 %6322, 4
  %6324 = add i64 %6321, -1616
  %6325 = add i64 %6324, %6323
  %6326 = load i32, i32* %ECX
  %6327 = zext i32 %6326 to i64
  %6328 = load i64, i64* %PC
  %6329 = add i64 %6328, 7
  store i64 %6329, i64* %PC
  %6330 = inttoptr i64 %6325 to i32*
  store i32 %6326, i32* %6330
  %6331 = load i64, i64* %PC
  %6332 = add i64 %6331, 124
  %6333 = load i64, i64* %PC
  %6334 = add i64 %6333, 5
  store i64 %6334, i64* %PC
  %6335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6332, i64* %6335, align 8, !tbaa !2428
  br label %block_401347

block_4017c3:                                     ; preds = %block_40175f
  %6336 = load i64, i64* %PC
  %6337 = add i64 %6336, 5
  %6338 = load i64, i64* %PC
  %6339 = add i64 %6338, 5
  store i64 %6339, i64* %PC
  %6340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6337, i64* %6340, align 8, !tbaa !2428
  br label %block_4017c8

block_400cac:                                     ; preds = %block_400ca2
  %6341 = sub i64 %6585, 1168
  %6342 = load i64, i64* %PC
  %6343 = add i64 %6342, 7
  store i64 %6343, i64* %PC
  store i64 %6341, i64* %RAX, align 8, !tbaa !2428
  %6344 = load i64, i64* %RBP
  %6345 = sub i64 %6344, 12
  %6346 = load i64, i64* %PC
  %6347 = add i64 %6346, 3
  store i64 %6347, i64* %PC
  %6348 = inttoptr i64 %6345 to i32*
  %6349 = load i32, i32* %6348
  %6350 = zext i32 %6349 to i64
  store i64 %6350, i64* %RCX, align 8, !tbaa !2428
  %6351 = load i64, i64* %RCX
  %6352 = load i64, i64* %PC
  %6353 = add i64 %6352, 3
  store i64 %6353, i64* %PC
  %6354 = trunc i64 %6351 to i32
  %6355 = add i32 1, %6354
  %6356 = zext i32 %6355 to i64
  store i64 %6356, i64* %RCX, align 8, !tbaa !2428
  %6357 = icmp ult i32 %6355, %6354
  %6358 = icmp ult i32 %6355, 1
  %6359 = or i1 %6357, %6358
  %6360 = zext i1 %6359 to i8
  %6361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6360, i8* %6361, align 1, !tbaa !2432
  %6362 = and i32 %6355, 255
  %6363 = call i32 @llvm.ctpop.i32(i32 %6362) #16
  %6364 = trunc i32 %6363 to i8
  %6365 = and i8 %6364, 1
  %6366 = xor i8 %6365, 1
  %6367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6366, i8* %6367, align 1, !tbaa !2446
  %6368 = xor i64 1, %6351
  %6369 = trunc i64 %6368 to i32
  %6370 = xor i32 %6369, %6355
  %6371 = lshr i32 %6370, 4
  %6372 = trunc i32 %6371 to i8
  %6373 = and i8 %6372, 1
  %6374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6373, i8* %6374, align 1, !tbaa !2447
  %6375 = icmp eq i32 %6355, 0
  %6376 = zext i1 %6375 to i8
  %6377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6376, i8* %6377, align 1, !tbaa !2448
  %6378 = lshr i32 %6355, 31
  %6379 = trunc i32 %6378 to i8
  %6380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6379, i8* %6380, align 1, !tbaa !2449
  %6381 = lshr i32 %6354, 31
  %6382 = xor i32 %6378, %6381
  %6383 = add nuw nsw i32 %6382, %6378
  %6384 = icmp eq i32 %6383, 2
  %6385 = zext i1 %6384 to i8
  %6386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6385, i8* %6386, align 1, !tbaa !2450
  %6387 = load i32, i32* %ECX
  %6388 = zext i32 %6387 to i64
  %6389 = load i64, i64* %PC
  %6390 = add i64 %6389, 3
  store i64 %6390, i64* %PC
  %6391 = shl i64 %6388, 32
  %6392 = ashr exact i64 %6391, 32
  store i64 %6392, i64* %RDX, align 8, !tbaa !2428
  %6393 = load i64, i64* %RDX
  %6394 = load i64, i64* %PC
  %6395 = add i64 %6394, 4
  store i64 %6395, i64* %PC
  %6396 = shl i64 %6393, 5
  %6397 = icmp slt i64 %6396, 0
  %6398 = shl i64 %6396, 1
  store i64 %6398, i64* %RDX, align 8, !tbaa !2428
  %6399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6400 = zext i1 %6397 to i8
  store i8 %6400, i8* %6399, align 1, !tbaa !2451
  %6401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6402 = trunc i64 %6398 to i32
  %6403 = and i32 %6402, 254
  %6404 = call i32 @llvm.ctpop.i32(i32 %6403) #16
  %6405 = trunc i32 %6404 to i8
  %6406 = and i8 %6405, 1
  %6407 = xor i8 %6406, 1
  store i8 %6407, i8* %6401, align 1, !tbaa !2451
  %6408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6408, align 1, !tbaa !2451
  %6409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6410 = icmp eq i64 %6398, 0
  %6411 = zext i1 %6410 to i8
  store i8 %6411, i8* %6409, align 1, !tbaa !2451
  %6412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6413 = lshr i64 %6398, 63
  %6414 = trunc i64 %6413 to i8
  store i8 %6414, i8* %6412, align 1, !tbaa !2451
  %6415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6415, align 1, !tbaa !2451
  %6416 = load i64, i64* %RAX
  %6417 = load i64, i64* %RDX
  %6418 = load i64, i64* %PC
  %6419 = add i64 %6418, 3
  store i64 %6419, i64* %PC
  %6420 = add i64 %6417, %6416
  store i64 %6420, i64* %RAX, align 8, !tbaa !2428
  %6421 = icmp ult i64 %6420, %6416
  %6422 = icmp ult i64 %6420, %6417
  %6423 = or i1 %6421, %6422
  %6424 = zext i1 %6423 to i8
  %6425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6424, i8* %6425, align 1, !tbaa !2432
  %6426 = trunc i64 %6420 to i32
  %6427 = and i32 %6426, 255
  %6428 = call i32 @llvm.ctpop.i32(i32 %6427) #16
  %6429 = trunc i32 %6428 to i8
  %6430 = and i8 %6429, 1
  %6431 = xor i8 %6430, 1
  %6432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6431, i8* %6432, align 1, !tbaa !2446
  %6433 = xor i64 %6417, %6416
  %6434 = xor i64 %6433, %6420
  %6435 = lshr i64 %6434, 4
  %6436 = trunc i64 %6435 to i8
  %6437 = and i8 %6436, 1
  %6438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6437, i8* %6438, align 1, !tbaa !2447
  %6439 = icmp eq i64 %6420, 0
  %6440 = zext i1 %6439 to i8
  %6441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6440, i8* %6441, align 1, !tbaa !2448
  %6442 = lshr i64 %6420, 63
  %6443 = trunc i64 %6442 to i8
  %6444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6443, i8* %6444, align 1, !tbaa !2449
  %6445 = lshr i64 %6416, 63
  %6446 = lshr i64 %6417, 63
  %6447 = xor i64 %6442, %6445
  %6448 = xor i64 %6442, %6446
  %6449 = add nuw nsw i64 %6447, %6448
  %6450 = icmp eq i64 %6449, 2
  %6451 = zext i1 %6450 to i8
  %6452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6451, i8* %6452, align 1, !tbaa !2450
  %6453 = load i64, i64* %RBP
  %6454 = sub i64 %6453, 4
  %6455 = load i64, i64* %PC
  %6456 = add i64 %6455, 4
  store i64 %6456, i64* %PC
  %6457 = inttoptr i64 %6454 to i32*
  %6458 = load i32, i32* %6457
  %6459 = sext i32 %6458 to i64
  store i64 %6459, i64* %RDX, align 8, !tbaa !2428
  %6460 = load i64, i64* %RAX
  %6461 = load i64, i64* %RDX
  %6462 = mul i64 %6461, 4
  %6463 = add i64 %6462, %6460
  %6464 = load i64, i64* %PC
  %6465 = add i64 %6464, 7
  store i64 %6465, i64* %PC
  %6466 = inttoptr i64 %6463 to i32*
  store i32 0, i32* %6466
  %6467 = load i64, i64* %RBP
  %6468 = sub i64 %6467, 4
  %6469 = load i64, i64* %PC
  %6470 = add i64 %6469, 3
  store i64 %6470, i64* %PC
  %6471 = inttoptr i64 %6468 to i32*
  %6472 = load i32, i32* %6471
  %6473 = zext i32 %6472 to i64
  store i64 %6473, i64* %RAX, align 8, !tbaa !2428
  %6474 = load i64, i64* %RAX
  %6475 = load i64, i64* %PC
  %6476 = add i64 %6475, 3
  store i64 %6476, i64* %PC
  %6477 = trunc i64 %6474 to i32
  %6478 = add i32 1, %6477
  %6479 = zext i32 %6478 to i64
  store i64 %6479, i64* %RAX, align 8, !tbaa !2428
  %6480 = icmp ult i32 %6478, %6477
  %6481 = icmp ult i32 %6478, 1
  %6482 = or i1 %6480, %6481
  %6483 = zext i1 %6482 to i8
  %6484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6483, i8* %6484, align 1, !tbaa !2432
  %6485 = and i32 %6478, 255
  %6486 = call i32 @llvm.ctpop.i32(i32 %6485) #16
  %6487 = trunc i32 %6486 to i8
  %6488 = and i8 %6487, 1
  %6489 = xor i8 %6488, 1
  %6490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6489, i8* %6490, align 1, !tbaa !2446
  %6491 = xor i64 1, %6474
  %6492 = trunc i64 %6491 to i32
  %6493 = xor i32 %6492, %6478
  %6494 = lshr i32 %6493, 4
  %6495 = trunc i32 %6494 to i8
  %6496 = and i8 %6495, 1
  %6497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6496, i8* %6497, align 1, !tbaa !2447
  %6498 = icmp eq i32 %6478, 0
  %6499 = zext i1 %6498 to i8
  %6500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6499, i8* %6500, align 1, !tbaa !2448
  %6501 = lshr i32 %6478, 31
  %6502 = trunc i32 %6501 to i8
  %6503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6502, i8* %6503, align 1, !tbaa !2449
  %6504 = lshr i32 %6477, 31
  %6505 = xor i32 %6501, %6504
  %6506 = add nuw nsw i32 %6505, %6501
  %6507 = icmp eq i32 %6506, 2
  %6508 = zext i1 %6507 to i8
  %6509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6508, i8* %6509, align 1, !tbaa !2450
  %6510 = load i64, i64* %RBP
  %6511 = sub i64 %6510, 4
  %6512 = load i32, i32* %EAX
  %6513 = zext i32 %6512 to i64
  %6514 = load i64, i64* %PC
  %6515 = add i64 %6514, 3
  store i64 %6515, i64* %PC
  %6516 = inttoptr i64 %6511 to i32*
  store i32 %6512, i32* %6516
  %6517 = load i64, i64* %PC
  %6518 = sub i64 %6517, 53
  %6519 = load i64, i64* %PC
  %6520 = add i64 %6519, 5
  store i64 %6520, i64* %PC
  %6521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6518, i64* %6521, align 8, !tbaa !2428
  br label %block_400ca2

block_4017cd:                                     ; preds = %block_400a16
  %6522 = sub i64 %11099, 4
  %6523 = load i64, i64* %PC
  %6524 = add i64 %6523, 7
  store i64 %6524, i64* %PC
  %6525 = inttoptr i64 %6522 to i32*
  store i32 0, i32* %6525
  br label %block_4017d4

block_400eab:                                     ; preds = %block_400e67
  %6526 = sub i64 %7278, 1248
  %6527 = load i64, i64* %PC
  %6528 = add i64 %6527, 11
  store i64 %6528, i64* %PC
  %6529 = inttoptr i64 %6526 to i32*
  store i32 0, i32* %6529
  br label %block_400ebf

block_4014aa:                                     ; preds = %block_401437
  %6530 = add i64 %3206, 7
  store i64 %6530, i64* %PC
  %6531 = inttoptr i64 %3205 to i32*
  store i32 0, i32* %6531
  br label %block_4014b1

block_400ca2:                                     ; preds = %block_400c9b, %block_400cac
  %MEMORY.31 = phi %struct.Memory* [ %MEMORY.32, %block_400c9b ], [ %MEMORY.31, %block_400cac ]
  %6532 = load i64, i64* %RBP
  %6533 = sub i64 %6532, 4
  %6534 = load i64, i64* %PC
  %6535 = add i64 %6534, 4
  store i64 %6535, i64* %PC
  %6536 = inttoptr i64 %6533 to i32*
  %6537 = load i32, i32* %6536
  %6538 = sub i32 %6537, 16
  %6539 = icmp ult i32 %6537, 16
  %6540 = zext i1 %6539 to i8
  %6541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6540, i8* %6541, align 1, !tbaa !2432
  %6542 = and i32 %6538, 255
  %6543 = call i32 @llvm.ctpop.i32(i32 %6542) #16
  %6544 = trunc i32 %6543 to i8
  %6545 = and i8 %6544, 1
  %6546 = xor i8 %6545, 1
  %6547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6546, i8* %6547, align 1, !tbaa !2446
  %6548 = xor i32 %6537, 16
  %6549 = xor i32 %6548, %6538
  %6550 = lshr i32 %6549, 4
  %6551 = trunc i32 %6550 to i8
  %6552 = and i8 %6551, 1
  %6553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6552, i8* %6553, align 1, !tbaa !2447
  %6554 = icmp eq i32 %6538, 0
  %6555 = zext i1 %6554 to i8
  %6556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6555, i8* %6556, align 1, !tbaa !2448
  %6557 = lshr i32 %6538, 31
  %6558 = trunc i32 %6557 to i8
  %6559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6558, i8* %6559, align 1, !tbaa !2449
  %6560 = lshr i32 %6537, 31
  %6561 = xor i32 %6557, %6560
  %6562 = add nuw nsw i32 %6561, %6560
  %6563 = icmp eq i32 %6562, 2
  %6564 = zext i1 %6563 to i8
  %6565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6564, i8* %6565, align 1, !tbaa !2450
  %6566 = load i64, i64* %PC
  %6567 = add i64 %6566, 54
  %6568 = load i64, i64* %PC
  %6569 = add i64 %6568, 6
  %6570 = load i64, i64* %PC
  %6571 = add i64 %6570, 6
  store i64 %6571, i64* %PC
  %6572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6573 = load i8, i8* %6572, align 1, !tbaa !2449
  %6574 = icmp ne i8 %6573, 0
  %6575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6576 = load i8, i8* %6575, align 1, !tbaa !2450
  %6577 = icmp ne i8 %6576, 0
  %6578 = xor i1 %6574, %6577
  %6579 = xor i1 %6578, true
  %6580 = zext i1 %6579 to i8
  store i8 %6580, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6582 = select i1 %6578, i64 %6569, i64 %6567
  store i64 %6582, i64* %6581, align 8, !tbaa !2428
  %6583 = load i8, i8* %BRANCH_TAKEN
  %6584 = icmp eq i8 %6583, 1
  %6585 = load i64, i64* %RBP
  br i1 %6584, label %block_400cdc, label %block_400cac

block_4010a1:                                     ; preds = %block_40108d
  %6586 = sub i64 %6899, 1168
  %6587 = load i64, i64* %PC
  %6588 = add i64 %6587, 7
  store i64 %6588, i64* %PC
  store i64 %6586, i64* %RAX, align 8, !tbaa !2428
  %6589 = load i64, i64* %RBP
  %6590 = sub i64 %6589, 12
  %6591 = load i64, i64* %PC
  %6592 = add i64 %6591, 4
  store i64 %6592, i64* %PC
  %6593 = inttoptr i64 %6590 to i32*
  %6594 = load i32, i32* %6593
  %6595 = sext i32 %6594 to i64
  store i64 %6595, i64* %RCX, align 8, !tbaa !2428
  %6596 = load i64, i64* %RCX
  %6597 = load i64, i64* %PC
  %6598 = add i64 %6597, 4
  store i64 %6598, i64* %PC
  %6599 = shl i64 %6596, 5
  %6600 = icmp slt i64 %6599, 0
  %6601 = shl i64 %6599, 1
  store i64 %6601, i64* %RCX, align 8, !tbaa !2428
  %6602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6603 = zext i1 %6600 to i8
  store i8 %6603, i8* %6602, align 1, !tbaa !2451
  %6604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6605 = trunc i64 %6601 to i32
  %6606 = and i32 %6605, 254
  %6607 = call i32 @llvm.ctpop.i32(i32 %6606) #16
  %6608 = trunc i32 %6607 to i8
  %6609 = and i8 %6608, 1
  %6610 = xor i8 %6609, 1
  store i8 %6610, i8* %6604, align 1, !tbaa !2451
  %6611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6611, align 1, !tbaa !2451
  %6612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6613 = icmp eq i64 %6601, 0
  %6614 = zext i1 %6613 to i8
  store i8 %6614, i8* %6612, align 1, !tbaa !2451
  %6615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6616 = lshr i64 %6601, 63
  %6617 = trunc i64 %6616 to i8
  store i8 %6617, i8* %6615, align 1, !tbaa !2451
  %6618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6618, align 1, !tbaa !2451
  %6619 = load i64, i64* %RAX
  %6620 = load i64, i64* %RCX
  %6621 = load i64, i64* %PC
  %6622 = add i64 %6621, 3
  store i64 %6622, i64* %PC
  %6623 = add i64 %6620, %6619
  store i64 %6623, i64* %RAX, align 8, !tbaa !2428
  %6624 = icmp ult i64 %6623, %6619
  %6625 = icmp ult i64 %6623, %6620
  %6626 = or i1 %6624, %6625
  %6627 = zext i1 %6626 to i8
  %6628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6627, i8* %6628, align 1, !tbaa !2432
  %6629 = trunc i64 %6623 to i32
  %6630 = and i32 %6629, 255
  %6631 = call i32 @llvm.ctpop.i32(i32 %6630) #16
  %6632 = trunc i32 %6631 to i8
  %6633 = and i8 %6632, 1
  %6634 = xor i8 %6633, 1
  %6635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6634, i8* %6635, align 1, !tbaa !2446
  %6636 = xor i64 %6620, %6619
  %6637 = xor i64 %6636, %6623
  %6638 = lshr i64 %6637, 4
  %6639 = trunc i64 %6638 to i8
  %6640 = and i8 %6639, 1
  %6641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6640, i8* %6641, align 1, !tbaa !2447
  %6642 = icmp eq i64 %6623, 0
  %6643 = zext i1 %6642 to i8
  %6644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6643, i8* %6644, align 1, !tbaa !2448
  %6645 = lshr i64 %6623, 63
  %6646 = trunc i64 %6645 to i8
  %6647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6646, i8* %6647, align 1, !tbaa !2449
  %6648 = lshr i64 %6619, 63
  %6649 = lshr i64 %6620, 63
  %6650 = xor i64 %6645, %6648
  %6651 = xor i64 %6645, %6649
  %6652 = add nuw nsw i64 %6650, %6651
  %6653 = icmp eq i64 %6652, 2
  %6654 = zext i1 %6653 to i8
  %6655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6654, i8* %6655, align 1, !tbaa !2450
  %6656 = load i64, i64* %RBP
  %6657 = sub i64 %6656, 4
  %6658 = load i64, i64* %PC
  %6659 = add i64 %6658, 4
  store i64 %6659, i64* %PC
  %6660 = inttoptr i64 %6657 to i32*
  %6661 = load i32, i32* %6660
  %6662 = sext i32 %6661 to i64
  store i64 %6662, i64* %RCX, align 8, !tbaa !2428
  %6663 = load i64, i64* %RAX
  %6664 = load i64, i64* %RCX
  %6665 = mul i64 %6664, 4
  %6666 = add i64 %6665, %6663
  %6667 = load i64, i64* %PC
  %6668 = add i64 %6667, 3
  store i64 %6668, i64* %PC
  %6669 = inttoptr i64 %6666 to i32*
  %6670 = load i32, i32* %6669
  %6671 = zext i32 %6670 to i64
  store i64 %6671, i64* %RDX, align 8, !tbaa !2428
  %6672 = load i64, i64* %RBP
  %6673 = sub i64 %6672, 4
  %6674 = load i64, i64* %PC
  %6675 = add i64 %6674, 4
  store i64 %6675, i64* %PC
  %6676 = inttoptr i64 %6673 to i32*
  %6677 = load i32, i32* %6676
  %6678 = sext i32 %6677 to i64
  store i64 %6678, i64* %RAX, align 8, !tbaa !2428
  %6679 = load i64, i64* %RBP
  %6680 = load i64, i64* %RAX
  %6681 = mul i64 %6680, 4
  %6682 = add i64 %6679, -2688
  %6683 = add i64 %6682, %6681
  %6684 = load i32, i32* %EDX
  %6685 = zext i32 %6684 to i64
  %6686 = load i64, i64* %PC
  %6687 = add i64 %6686, 7
  store i64 %6687, i64* %PC
  %6688 = inttoptr i64 %6683 to i32*
  store i32 %6684, i32* %6688
  %6689 = load i64, i64* %RBP
  %6690 = sub i64 %6689, 4
  %6691 = load i64, i64* %PC
  %6692 = add i64 %6691, 3
  store i64 %6692, i64* %PC
  %6693 = inttoptr i64 %6690 to i32*
  %6694 = load i32, i32* %6693
  %6695 = zext i32 %6694 to i64
  store i64 %6695, i64* %RAX, align 8, !tbaa !2428
  %6696 = load i64, i64* %RAX
  %6697 = load i64, i64* %PC
  %6698 = add i64 %6697, 3
  store i64 %6698, i64* %PC
  %6699 = trunc i64 %6696 to i32
  %6700 = add i32 1, %6699
  %6701 = zext i32 %6700 to i64
  store i64 %6701, i64* %RAX, align 8, !tbaa !2428
  %6702 = icmp ult i32 %6700, %6699
  %6703 = icmp ult i32 %6700, 1
  %6704 = or i1 %6702, %6703
  %6705 = zext i1 %6704 to i8
  %6706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6705, i8* %6706, align 1, !tbaa !2432
  %6707 = and i32 %6700, 255
  %6708 = call i32 @llvm.ctpop.i32(i32 %6707) #16
  %6709 = trunc i32 %6708 to i8
  %6710 = and i8 %6709, 1
  %6711 = xor i8 %6710, 1
  %6712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6711, i8* %6712, align 1, !tbaa !2446
  %6713 = xor i64 1, %6696
  %6714 = trunc i64 %6713 to i32
  %6715 = xor i32 %6714, %6700
  %6716 = lshr i32 %6715, 4
  %6717 = trunc i32 %6716 to i8
  %6718 = and i8 %6717, 1
  %6719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6718, i8* %6719, align 1, !tbaa !2447
  %6720 = icmp eq i32 %6700, 0
  %6721 = zext i1 %6720 to i8
  %6722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6721, i8* %6722, align 1, !tbaa !2448
  %6723 = lshr i32 %6700, 31
  %6724 = trunc i32 %6723 to i8
  %6725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6724, i8* %6725, align 1, !tbaa !2449
  %6726 = lshr i32 %6699, 31
  %6727 = xor i32 %6723, %6726
  %6728 = add nuw nsw i32 %6727, %6723
  %6729 = icmp eq i32 %6728, 2
  %6730 = zext i1 %6729 to i8
  %6731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6730, i8* %6731, align 1, !tbaa !2450
  %6732 = load i64, i64* %RBP
  %6733 = sub i64 %6732, 4
  %6734 = load i32, i32* %EAX
  %6735 = zext i32 %6734 to i64
  %6736 = load i64, i64* %PC
  %6737 = add i64 %6736, 3
  store i64 %6737, i64* %PC
  %6738 = inttoptr i64 %6733 to i32*
  store i32 %6734, i32* %6738
  %6739 = load i64, i64* %PC
  %6740 = sub i64 %6739, 65
  %6741 = load i64, i64* %PC
  %6742 = add i64 %6741, 5
  store i64 %6742, i64* %PC
  %6743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6740, i64* %6743, align 8, !tbaa !2428
  br label %block_40108d

block_4011d3:                                     ; preds = %block_4010e4
  %6744 = sub i64 %7368, 1492
  %6745 = load i64, i64* %PC
  %6746 = add i64 %6745, 6
  store i64 %6746, i64* %PC
  %6747 = inttoptr i64 %6744 to i32*
  %6748 = load i32, i32* %6747
  %6749 = zext i32 %6748 to i64
  store i64 %6749, i64* %RAX, align 8, !tbaa !2428
  %6750 = load i64, i64* %RBP
  %6751 = sub i64 %6750, 12
  %6752 = load i64, i64* %PC
  %6753 = add i64 %6752, 4
  store i64 %6753, i64* %PC
  %6754 = inttoptr i64 %6751 to i32*
  %6755 = load i32, i32* %6754
  %6756 = sext i32 %6755 to i64
  store i64 %6756, i64* %RCX, align 8, !tbaa !2428
  %6757 = load i32, i32* %EAX
  %6758 = zext i32 %6757 to i64
  %6759 = load i64, i64* %RBP
  %6760 = load i64, i64* %RCX
  %6761 = mul i64 %6760, 4
  %6762 = add i64 %6759, -1328
  %6763 = add i64 %6762, %6761
  %6764 = load i64, i64* %PC
  %6765 = add i64 %6764, 7
  store i64 %6765, i64* %PC
  %6766 = inttoptr i64 %6763 to i32*
  %6767 = load i32, i32* %6766
  %6768 = sub i32 %6757, %6767
  %6769 = icmp ult i32 %6757, %6767
  %6770 = zext i1 %6769 to i8
  %6771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6770, i8* %6771, align 1, !tbaa !2432
  %6772 = and i32 %6768, 255
  %6773 = call i32 @llvm.ctpop.i32(i32 %6772) #16
  %6774 = trunc i32 %6773 to i8
  %6775 = and i8 %6774, 1
  %6776 = xor i8 %6775, 1
  %6777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6776, i8* %6777, align 1, !tbaa !2446
  %6778 = xor i32 %6767, %6757
  %6779 = xor i32 %6778, %6768
  %6780 = lshr i32 %6779, 4
  %6781 = trunc i32 %6780 to i8
  %6782 = and i8 %6781, 1
  %6783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6782, i8* %6783, align 1, !tbaa !2447
  %6784 = icmp eq i32 %6768, 0
  %6785 = zext i1 %6784 to i8
  %6786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6785, i8* %6786, align 1, !tbaa !2448
  %6787 = lshr i32 %6768, 31
  %6788 = trunc i32 %6787 to i8
  %6789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6788, i8* %6789, align 1, !tbaa !2449
  %6790 = lshr i32 %6757, 31
  %6791 = lshr i32 %6767, 31
  %6792 = xor i32 %6791, %6790
  %6793 = xor i32 %6787, %6790
  %6794 = add nuw nsw i32 %6793, %6792
  %6795 = icmp eq i32 %6794, 2
  %6796 = zext i1 %6795 to i8
  %6797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6796, i8* %6797, align 1, !tbaa !2450
  %6798 = load i64, i64* %PC
  %6799 = add i64 %6798, 1279
  %6800 = load i64, i64* %PC
  %6801 = add i64 %6800, 6
  %6802 = load i64, i64* %PC
  %6803 = add i64 %6802, 6
  store i64 %6803, i64* %PC
  %6804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6805 = load i8, i8* %6804, align 1, !tbaa !2448
  %6806 = icmp eq i8 %6805, 0
  %6807 = zext i1 %6806 to i8
  store i8 %6807, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6809 = select i1 %6806, i64 %6799, i64 %6801
  store i64 %6809, i64* %6808, align 8, !tbaa !2428
  %6810 = load i8, i8* %BRANCH_TAKEN
  %6811 = icmp eq i8 %6810, 1
  %6812 = load i64, i64* %RBP
  %6813 = sub i64 %6812, 4
  %6814 = load i64, i64* %PC
  %6815 = add i64 %6814, 7
  store i64 %6815, i64* %PC
  br i1 %6811, label %block_4016e3, label %block_4011ea

block_400c9b:                                     ; preds = %block_400c7a, %block_400c5a
  %MEMORY.32 = phi %struct.Memory* [ %MEMORY.46, %block_400c7a ], [ %MEMORY.46, %block_400c5a ]
  %6816 = load i64, i64* %RBP
  %6817 = sub i64 %6816, 4
  %6818 = load i64, i64* %PC
  %6819 = add i64 %6818, 7
  store i64 %6819, i64* %PC
  %6820 = inttoptr i64 %6817 to i32*
  store i32 0, i32* %6820
  br label %block_400ca2

block_40108d:                                     ; preds = %block_401086, %block_4010a1
  %MEMORY.33 = phi %struct.Memory* [ %MEMORY.48, %block_401086 ], [ %MEMORY.33, %block_4010a1 ]
  %6821 = load i64, i64* %RBP
  %6822 = sub i64 %6821, 4
  %6823 = load i64, i64* %PC
  %6824 = add i64 %6823, 3
  store i64 %6824, i64* %PC
  %6825 = inttoptr i64 %6822 to i32*
  %6826 = load i32, i32* %6825
  %6827 = zext i32 %6826 to i64
  store i64 %6827, i64* %RAX, align 8, !tbaa !2428
  %6828 = load i64, i64* %RBP
  %6829 = sub i64 %6828, 12
  %6830 = load i64, i64* %PC
  %6831 = add i64 %6830, 4
  store i64 %6831, i64* %PC
  %6832 = inttoptr i64 %6829 to i32*
  %6833 = load i32, i32* %6832
  %6834 = sext i32 %6833 to i64
  store i64 %6834, i64* %RCX, align 8, !tbaa !2428
  %6835 = load i32, i32* %EAX
  %6836 = zext i32 %6835 to i64
  %6837 = load i64, i64* %RBP
  %6838 = load i64, i64* %RCX
  %6839 = mul i64 %6838, 4
  %6840 = add i64 %6837, -1328
  %6841 = add i64 %6840, %6839
  %6842 = load i64, i64* %PC
  %6843 = add i64 %6842, 7
  store i64 %6843, i64* %PC
  %6844 = inttoptr i64 %6841 to i32*
  %6845 = load i32, i32* %6844
  %6846 = sub i32 %6835, %6845
  %6847 = icmp ult i32 %6835, %6845
  %6848 = zext i1 %6847 to i8
  %6849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6848, i8* %6849, align 1, !tbaa !2432
  %6850 = and i32 %6846, 255
  %6851 = call i32 @llvm.ctpop.i32(i32 %6850) #16
  %6852 = trunc i32 %6851 to i8
  %6853 = and i8 %6852, 1
  %6854 = xor i8 %6853, 1
  %6855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6854, i8* %6855, align 1, !tbaa !2446
  %6856 = xor i32 %6845, %6835
  %6857 = xor i32 %6856, %6846
  %6858 = lshr i32 %6857, 4
  %6859 = trunc i32 %6858 to i8
  %6860 = and i8 %6859, 1
  %6861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6860, i8* %6861, align 1, !tbaa !2447
  %6862 = icmp eq i32 %6846, 0
  %6863 = zext i1 %6862 to i8
  %6864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6863, i8* %6864, align 1, !tbaa !2448
  %6865 = lshr i32 %6846, 31
  %6866 = trunc i32 %6865 to i8
  %6867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6866, i8* %6867, align 1, !tbaa !2449
  %6868 = lshr i32 %6835, 31
  %6869 = lshr i32 %6845, 31
  %6870 = xor i32 %6869, %6868
  %6871 = xor i32 %6865, %6868
  %6872 = add nuw nsw i32 %6871, %6870
  %6873 = icmp eq i32 %6872, 2
  %6874 = zext i1 %6873 to i8
  %6875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6874, i8* %6875, align 1, !tbaa !2450
  %6876 = load i64, i64* %PC
  %6877 = add i64 %6876, 56
  %6878 = load i64, i64* %PC
  %6879 = add i64 %6878, 6
  %6880 = load i64, i64* %PC
  %6881 = add i64 %6880, 6
  store i64 %6881, i64* %PC
  %6882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6883 = load i8, i8* %6882, align 1, !tbaa !2448
  %6884 = icmp eq i8 %6883, 0
  %6885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6886 = load i8, i8* %6885, align 1, !tbaa !2449
  %6887 = icmp ne i8 %6886, 0
  %6888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6889 = load i8, i8* %6888, align 1, !tbaa !2450
  %6890 = icmp ne i8 %6889, 0
  %6891 = xor i1 %6887, %6890
  %6892 = xor i1 %6891, true
  %6893 = and i1 %6884, %6892
  %6894 = zext i1 %6893 to i8
  store i8 %6894, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6896 = select i1 %6893, i64 %6877, i64 %6879
  store i64 %6896, i64* %6895, align 8, !tbaa !2428
  %6897 = load i8, i8* %BRANCH_TAKEN
  %6898 = icmp eq i8 %6897, 1
  %6899 = load i64, i64* %RBP
  br i1 %6898, label %block_4010d3, label %block_4010a1

block_401488:                                     ; preds = %block_401444
  %6900 = add i64 %8332, 11
  store i64 %6900, i64* %PC
  %6901 = inttoptr i64 %8331 to i32*
  store i32 0, i32* %6901
  br label %block_401497

block_400e7e:                                     ; preds = %block_400e67
  %6902 = sub i64 %7278, 1488
  %6903 = load i64, i64* %PC
  %6904 = add i64 %6903, 8
  store i64 %6904, i64* %PC
  %6905 = inttoptr i64 %6902 to i32*
  %6906 = load i32, i32* %6905
  %6907 = sext i32 %6906 to i64
  store i64 %6907, i64* %RCX, align 8, !tbaa !2428
  %6908 = load i64, i64* %RCX
  %6909 = mul i64 %6908, 4
  %6910 = add i64 %6909, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %6911 = load i64, i64* %PC
  %6912 = add i64 %6911, 7
  store i64 %6912, i64* %PC
  %6913 = inttoptr i64 %6910 to i32*
  %6914 = load i32, i32* %6913
  %6915 = zext i32 %6914 to i64
  store i64 %6915, i64* %RAX, align 8, !tbaa !2428
  %6916 = load i64, i64* %RBP
  %6917 = sub i64 %6916, 12
  %6918 = load i64, i64* %PC
  %6919 = add i64 %6918, 3
  store i64 %6919, i64* %PC
  %6920 = inttoptr i64 %6917 to i32*
  %6921 = load i32, i32* %6920
  %6922 = zext i32 %6921 to i64
  store i64 %6922, i64* %RDX, align 8, !tbaa !2428
  %6923 = load i64, i64* %RDX
  %6924 = load i64, i64* %PC
  %6925 = add i64 %6924, 3
  store i64 %6925, i64* %PC
  %6926 = trunc i64 %6923 to i32
  %6927 = add i32 1, %6926
  %6928 = zext i32 %6927 to i64
  store i64 %6928, i64* %RDX, align 8, !tbaa !2428
  %6929 = icmp ult i32 %6927, %6926
  %6930 = icmp ult i32 %6927, 1
  %6931 = or i1 %6929, %6930
  %6932 = zext i1 %6931 to i8
  %6933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6932, i8* %6933, align 1, !tbaa !2432
  %6934 = and i32 %6927, 255
  %6935 = call i32 @llvm.ctpop.i32(i32 %6934) #16
  %6936 = trunc i32 %6935 to i8
  %6937 = and i8 %6936, 1
  %6938 = xor i8 %6937, 1
  %6939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6938, i8* %6939, align 1, !tbaa !2446
  %6940 = xor i64 1, %6923
  %6941 = trunc i64 %6940 to i32
  %6942 = xor i32 %6941, %6927
  %6943 = lshr i32 %6942, 4
  %6944 = trunc i32 %6943 to i8
  %6945 = and i8 %6944, 1
  %6946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6945, i8* %6946, align 1, !tbaa !2447
  %6947 = icmp eq i32 %6927, 0
  %6948 = zext i1 %6947 to i8
  %6949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6948, i8* %6949, align 1, !tbaa !2448
  %6950 = lshr i32 %6927, 31
  %6951 = trunc i32 %6950 to i8
  %6952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6951, i8* %6952, align 1, !tbaa !2449
  %6953 = lshr i32 %6926, 31
  %6954 = xor i32 %6950, %6953
  %6955 = add nuw nsw i32 %6954, %6950
  %6956 = icmp eq i32 %6955, 2
  %6957 = zext i1 %6956 to i8
  %6958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6957, i8* %6958, align 1, !tbaa !2450
  %6959 = load i32, i32* %EDX
  %6960 = zext i32 %6959 to i64
  %6961 = load i64, i64* %PC
  %6962 = add i64 %6961, 3
  store i64 %6962, i64* %PC
  %6963 = shl i64 %6960, 32
  %6964 = ashr exact i64 %6963, 32
  store i64 %6964, i64* %RCX, align 8, !tbaa !2428
  %6965 = load i64, i64* %RBP
  %6966 = load i64, i64* %RCX
  %6967 = mul i64 %6966, 4
  %6968 = add i64 %6965, -1248
  %6969 = add i64 %6968, %6967
  %6970 = load i32, i32* %EAX
  %6971 = zext i32 %6970 to i64
  %6972 = load i64, i64* %PC
  %6973 = add i64 %6972, 7
  store i64 %6973, i64* %PC
  %6974 = inttoptr i64 %6969 to i32*
  store i32 %6970, i32* %6974
  %6975 = load i64, i64* %PC
  %6976 = add i64 %6975, 25
  %6977 = load i64, i64* %PC
  %6978 = add i64 %6977, 5
  store i64 %6978, i64* %PC
  %6979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6976, i64* %6979, align 8, !tbaa !2428
  br label %block_400ebf

block_401086:                                     ; preds = %block_40102e
  %6980 = sub i64 %10543, 4
  %6981 = load i64, i64* %PC
  %6982 = add i64 %6981, 7
  store i64 %6982, i64* %PC
  %6983 = inttoptr i64 %6980 to i32*
  store i32 1, i32* %6983
  br label %block_40108d

block_40127b:                                     ; preds = %block_401205, %block_401217
  %MEMORY.34 = phi %struct.Memory* [ %MEMORY.16, %block_401205 ], [ %MEMORY.16, %block_401217 ]
  %6984 = load i64, i64* %RBP
  %6985 = sub i64 %6984, 4
  %6986 = load i64, i64* %PC
  %6987 = add i64 %6986, 4
  store i64 %6987, i64* %PC
  %6988 = inttoptr i64 %6985 to i32*
  %6989 = load i32, i32* %6988
  %6990 = sext i32 %6989 to i64
  store i64 %6990, i64* %RAX, align 8, !tbaa !2428
  %6991 = load i64, i64* %RBP
  %6992 = load i64, i64* %RAX
  %6993 = mul i64 %6992, 4
  %6994 = add i64 %6991, -1488
  %6995 = add i64 %6994, %6993
  %6996 = load i64, i64* %PC
  %6997 = add i64 %6996, 8
  store i64 %6997, i64* %PC
  %6998 = inttoptr i64 %6995 to i32*
  %6999 = load i32, i32* %6998
  %7000 = sub i32 %6999, -1
  %7001 = icmp ult i32 %6999, -1
  %7002 = zext i1 %7001 to i8
  %7003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7002, i8* %7003, align 1, !tbaa !2432
  %7004 = and i32 %7000, 255
  %7005 = call i32 @llvm.ctpop.i32(i32 %7004) #16
  %7006 = trunc i32 %7005 to i8
  %7007 = and i8 %7006, 1
  %7008 = xor i8 %7007, 1
  %7009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7008, i8* %7009, align 1, !tbaa !2446
  %7010 = xor i32 %6999, -1
  %7011 = xor i32 %7010, %7000
  %7012 = lshr i32 %7011, 4
  %7013 = trunc i32 %7012 to i8
  %7014 = and i8 %7013, 1
  %7015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7014, i8* %7015, align 1, !tbaa !2447
  %7016 = icmp eq i32 %7000, 0
  %7017 = zext i1 %7016 to i8
  %7018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7017, i8* %7018, align 1, !tbaa !2448
  %7019 = lshr i32 %7000, 31
  %7020 = trunc i32 %7019 to i8
  %7021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7020, i8* %7021, align 1, !tbaa !2449
  %7022 = lshr i32 %6999, 31
  %7023 = xor i32 %7022, 1
  %7024 = xor i32 %7019, %7022
  %7025 = add nuw nsw i32 %7024, %7023
  %7026 = icmp eq i32 %7025, 2
  %7027 = zext i1 %7026 to i8
  %7028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7027, i8* %7028, align 1, !tbaa !2450
  %7029 = load i64, i64* %PC
  %7030 = add i64 %7029, 73
  %7031 = load i64, i64* %PC
  %7032 = add i64 %7031, 6
  %7033 = load i64, i64* %PC
  %7034 = add i64 %7033, 6
  store i64 %7034, i64* %PC
  %7035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7036 = load i8, i8* %7035, align 1, !tbaa !2448
  store i8 %7036, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7038 = icmp ne i8 %7036, 0
  %7039 = select i1 %7038, i64 %7030, i64 %7032
  store i64 %7039, i64* %7037, align 8, !tbaa !2428
  %7040 = load i8, i8* %BRANCH_TAKEN
  %7041 = icmp eq i8 %7040, 1
  br i1 %7041, label %block_4012d0, label %block_40128d

block_400ce3:                                     ; preds = %block_400cdc, %block_400d91
  %MEMORY.35 = phi %struct.Memory* [ %MEMORY.31, %block_400cdc ], [ %MEMORY.22, %block_400d91 ]
  %7042 = load i64, i64* %RBP
  %7043 = sub i64 %7042, 4
  %7044 = load i64, i64* %PC
  %7045 = add i64 %7044, 3
  store i64 %7045, i64* %PC
  %7046 = inttoptr i64 %7043 to i32*
  %7047 = load i32, i32* %7046
  %7048 = zext i32 %7047 to i64
  store i64 %7048, i64* %RAX, align 8, !tbaa !2428
  %7049 = load i64, i64* %RBP
  %7050 = sub i64 %7049, 16
  %7051 = load i64, i64* %PC
  %7052 = add i64 %7051, 4
  store i64 %7052, i64* %PC
  %7053 = inttoptr i64 %7050 to i32*
  %7054 = load i32, i32* %7053
  %7055 = sext i32 %7054 to i64
  store i64 %7055, i64* %RCX, align 8, !tbaa !2428
  %7056 = load i32, i32* %EAX
  %7057 = zext i32 %7056 to i64
  %7058 = load i64, i64* %RBP
  %7059 = load i64, i64* %RCX
  %7060 = mul i64 %7059, 4
  %7061 = add i64 %7058, -1328
  %7062 = add i64 %7061, %7060
  %7063 = load i64, i64* %PC
  %7064 = add i64 %7063, 7
  store i64 %7064, i64* %PC
  %7065 = inttoptr i64 %7062 to i32*
  %7066 = load i32, i32* %7065
  %7067 = sub i32 %7056, %7066
  %7068 = icmp ult i32 %7056, %7066
  %7069 = zext i1 %7068 to i8
  %7070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7069, i8* %7070, align 1, !tbaa !2432
  %7071 = and i32 %7067, 255
  %7072 = call i32 @llvm.ctpop.i32(i32 %7071) #16
  %7073 = trunc i32 %7072 to i8
  %7074 = and i8 %7073, 1
  %7075 = xor i8 %7074, 1
  %7076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7075, i8* %7076, align 1, !tbaa !2446
  %7077 = xor i32 %7066, %7056
  %7078 = xor i32 %7077, %7067
  %7079 = lshr i32 %7078, 4
  %7080 = trunc i32 %7079 to i8
  %7081 = and i8 %7080, 1
  %7082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7081, i8* %7082, align 1, !tbaa !2447
  %7083 = icmp eq i32 %7067, 0
  %7084 = zext i1 %7083 to i8
  %7085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7084, i8* %7085, align 1, !tbaa !2448
  %7086 = lshr i32 %7067, 31
  %7087 = trunc i32 %7086 to i8
  %7088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7087, i8* %7088, align 1, !tbaa !2449
  %7089 = lshr i32 %7056, 31
  %7090 = lshr i32 %7066, 31
  %7091 = xor i32 %7090, %7089
  %7092 = xor i32 %7086, %7089
  %7093 = add nuw nsw i32 %7092, %7091
  %7094 = icmp eq i32 %7093, 2
  %7095 = zext i1 %7094 to i8
  %7096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7095, i8* %7096, align 1, !tbaa !2450
  %7097 = load i64, i64* %PC
  %7098 = add i64 %7097, 179
  %7099 = load i64, i64* %PC
  %7100 = add i64 %7099, 6
  %7101 = load i64, i64* %PC
  %7102 = add i64 %7101, 6
  store i64 %7102, i64* %PC
  %7103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7104 = load i8, i8* %7103, align 1, !tbaa !2448
  %7105 = icmp eq i8 %7104, 0
  %7106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7107 = load i8, i8* %7106, align 1, !tbaa !2449
  %7108 = icmp ne i8 %7107, 0
  %7109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7110 = load i8, i8* %7109, align 1, !tbaa !2450
  %7111 = icmp ne i8 %7110, 0
  %7112 = xor i1 %7108, %7111
  %7113 = xor i1 %7112, true
  %7114 = and i1 %7105, %7113
  %7115 = zext i1 %7114 to i8
  store i8 %7115, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7117 = select i1 %7114, i64 %7098, i64 %7100
  store i64 %7117, i64* %7116, align 8, !tbaa !2428
  %7118 = load i8, i8* %BRANCH_TAKEN
  %7119 = icmp eq i8 %7118, 1
  %7120 = load i64, i64* %RBP
  br i1 %7119, label %block_400da4, label %block_400cf7

block_401753:                                     ; preds = %block_4016de, %block_40174e
  %MEMORY.36 = phi %struct.Memory* [ %MEMORY.44, %block_40174e ], [ %MEMORY.45, %block_4016de ]
  %7121 = load i64, i64* %PC
  %7122 = add i64 %7121, 117
  %7123 = load i64, i64* %PC
  %7124 = add i64 %7123, 5
  store i64 %7124, i64* %PC
  %7125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7122, i64* %7125, align 8, !tbaa !2428
  br label %block_4017c8

block_400e67:                                     ; preds = %block_400e3a
  %7126 = load i64, i64* %RBP
  %7127 = sub i64 %7126, 12
  %7128 = load i64, i64* %PC
  %7129 = add i64 %7128, 3
  store i64 %7129, i64* %PC
  %7130 = inttoptr i64 %7127 to i32*
  %7131 = load i32, i32* %7130
  %7132 = zext i32 %7131 to i64
  store i64 %7132, i64* %RAX, align 8, !tbaa !2428
  %7133 = load i64, i64* %RAX
  %7134 = load i64, i64* %PC
  %7135 = add i64 %7134, 3
  store i64 %7135, i64* %PC
  %7136 = trunc i64 %7133 to i32
  %7137 = add i32 1, %7136
  %7138 = zext i32 %7137 to i64
  store i64 %7138, i64* %RAX, align 8, !tbaa !2428
  %7139 = icmp ult i32 %7137, %7136
  %7140 = icmp ult i32 %7137, 1
  %7141 = or i1 %7139, %7140
  %7142 = zext i1 %7141 to i8
  %7143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7142, i8* %7143, align 1, !tbaa !2432
  %7144 = and i32 %7137, 255
  %7145 = call i32 @llvm.ctpop.i32(i32 %7144) #16
  %7146 = trunc i32 %7145 to i8
  %7147 = and i8 %7146, 1
  %7148 = xor i8 %7147, 1
  %7149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7148, i8* %7149, align 1, !tbaa !2446
  %7150 = xor i64 1, %7133
  %7151 = trunc i64 %7150 to i32
  %7152 = xor i32 %7151, %7137
  %7153 = lshr i32 %7152, 4
  %7154 = trunc i32 %7153 to i8
  %7155 = and i8 %7154, 1
  %7156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7155, i8* %7156, align 1, !tbaa !2447
  %7157 = icmp eq i32 %7137, 0
  %7158 = zext i1 %7157 to i8
  %7159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7158, i8* %7159, align 1, !tbaa !2448
  %7160 = lshr i32 %7137, 31
  %7161 = trunc i32 %7160 to i8
  %7162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7161, i8* %7162, align 1, !tbaa !2449
  %7163 = lshr i32 %7136, 31
  %7164 = xor i32 %7160, %7163
  %7165 = add nuw nsw i32 %7164, %7160
  %7166 = icmp eq i32 %7165, 2
  %7167 = zext i1 %7166 to i8
  %7168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7167, i8* %7168, align 1, !tbaa !2450
  %7169 = load i32, i32* %EAX
  %7170 = zext i32 %7169 to i64
  %7171 = load i64, i64* %PC
  %7172 = add i64 %7171, 3
  store i64 %7172, i64* %PC
  %7173 = shl i64 %7170, 32
  %7174 = ashr exact i64 %7173, 32
  store i64 %7174, i64* %RCX, align 8, !tbaa !2428
  %7175 = load i64, i64* %RBP
  %7176 = load i64, i64* %RCX
  %7177 = mul i64 %7176, 4
  %7178 = add i64 %7175, -1488
  %7179 = add i64 %7178, %7177
  %7180 = load i64, i64* %PC
  %7181 = add i64 %7180, 8
  store i64 %7181, i64* %PC
  %7182 = inttoptr i64 %7179 to i32*
  %7183 = load i32, i32* %7182
  %7184 = sub i32 %7183, -1
  %7185 = icmp ult i32 %7183, -1
  %7186 = zext i1 %7185 to i8
  %7187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7186, i8* %7187, align 1, !tbaa !2432
  %7188 = and i32 %7184, 255
  %7189 = call i32 @llvm.ctpop.i32(i32 %7188) #16
  %7190 = trunc i32 %7189 to i8
  %7191 = and i8 %7190, 1
  %7192 = xor i8 %7191, 1
  %7193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7192, i8* %7193, align 1, !tbaa !2446
  %7194 = xor i32 %7183, -1
  %7195 = xor i32 %7194, %7184
  %7196 = lshr i32 %7195, 4
  %7197 = trunc i32 %7196 to i8
  %7198 = and i8 %7197, 1
  %7199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7198, i8* %7199, align 1, !tbaa !2447
  %7200 = icmp eq i32 %7184, 0
  %7201 = zext i1 %7200 to i8
  %7202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7201, i8* %7202, align 1, !tbaa !2448
  %7203 = lshr i32 %7184, 31
  %7204 = trunc i32 %7203 to i8
  %7205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7204, i8* %7205, align 1, !tbaa !2449
  %7206 = lshr i32 %7183, 31
  %7207 = xor i32 %7206, 1
  %7208 = xor i32 %7203, %7206
  %7209 = add nuw nsw i32 %7208, %7207
  %7210 = icmp eq i32 %7209, 2
  %7211 = zext i1 %7210 to i8
  %7212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7211, i8* %7212, align 1, !tbaa !2450
  %7213 = load i64, i64* %PC
  %7214 = add i64 %7213, 51
  %7215 = load i64, i64* %PC
  %7216 = add i64 %7215, 6
  %7217 = load i64, i64* %PC
  %7218 = add i64 %7217, 6
  store i64 %7218, i64* %PC
  %7219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7220 = load i8, i8* %7219, align 1, !tbaa !2448
  store i8 %7220, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7222 = icmp ne i8 %7220, 0
  %7223 = select i1 %7222, i64 %7214, i64 %7216
  store i64 %7223, i64* %7221, align 8, !tbaa !2428
  %7224 = load i8, i8* %BRANCH_TAKEN
  %7225 = icmp eq i8 %7224, 1
  %7226 = load i64, i64* %RBP
  %7227 = sub i64 %7226, 12
  %7228 = load i64, i64* %PC
  %7229 = add i64 %7228, 3
  store i64 %7229, i64* %PC
  %7230 = inttoptr i64 %7227 to i32*
  %7231 = load i32, i32* %7230
  %7232 = zext i32 %7231 to i64
  store i64 %7232, i64* %RAX, align 8, !tbaa !2428
  %7233 = load i64, i64* %RAX
  %7234 = load i64, i64* %PC
  %7235 = add i64 %7234, 3
  store i64 %7235, i64* %PC
  %7236 = trunc i64 %7233 to i32
  %7237 = add i32 1, %7236
  %7238 = zext i32 %7237 to i64
  store i64 %7238, i64* %RAX, align 8, !tbaa !2428
  %7239 = icmp ult i32 %7237, %7236
  %7240 = icmp ult i32 %7237, 1
  %7241 = or i1 %7239, %7240
  %7242 = zext i1 %7241 to i8
  %7243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7242, i8* %7243, align 1, !tbaa !2432
  %7244 = and i32 %7237, 255
  %7245 = call i32 @llvm.ctpop.i32(i32 %7244) #16
  %7246 = trunc i32 %7245 to i8
  %7247 = and i8 %7246, 1
  %7248 = xor i8 %7247, 1
  %7249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7248, i8* %7249, align 1, !tbaa !2446
  %7250 = xor i64 1, %7233
  %7251 = trunc i64 %7250 to i32
  %7252 = xor i32 %7251, %7237
  %7253 = lshr i32 %7252, 4
  %7254 = trunc i32 %7253 to i8
  %7255 = and i8 %7254, 1
  %7256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7255, i8* %7256, align 1, !tbaa !2447
  %7257 = icmp eq i32 %7237, 0
  %7258 = zext i1 %7257 to i8
  %7259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7258, i8* %7259, align 1, !tbaa !2448
  %7260 = lshr i32 %7237, 31
  %7261 = trunc i32 %7260 to i8
  %7262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7261, i8* %7262, align 1, !tbaa !2449
  %7263 = lshr i32 %7236, 31
  %7264 = xor i32 %7260, %7263
  %7265 = add nuw nsw i32 %7264, %7260
  %7266 = icmp eq i32 %7265, 2
  %7267 = zext i1 %7266 to i8
  %7268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7267, i8* %7268, align 1, !tbaa !2450
  %7269 = load i32, i32* %EAX
  %7270 = zext i32 %7269 to i64
  %7271 = load i64, i64* %PC
  %7272 = add i64 %7271, 3
  store i64 %7272, i64* %PC
  %7273 = shl i64 %7270, 32
  %7274 = ashr exact i64 %7273, 32
  store i64 %7274, i64* %RCX, align 8, !tbaa !2428
  %7275 = load i64, i64* %RBP
  %7276 = load i64, i64* %RCX
  %7277 = mul i64 %7276, 4
  %7278 = add i64 %7277, %7275
  br i1 %7225, label %block_400eab, label %block_400e7e

block_401465:                                     ; preds = %block_401444
  %7279 = add i64 %8332, 8
  store i64 %7279, i64* %PC
  %7280 = inttoptr i64 %8331 to i32*
  %7281 = load i32, i32* %7280
  %7282 = sext i32 %7281 to i64
  store i64 %7282, i64* %RAX, align 8, !tbaa !2428
  %7283 = load i64, i64* %RAX
  %7284 = mul i64 %7283, 4
  %7285 = add i64 %7284, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %7286 = load i64, i64* %PC
  %7287 = add i64 %7286, 7
  store i64 %7287, i64* %PC
  %7288 = inttoptr i64 %7285 to i32*
  %7289 = load i32, i32* %7288
  %7290 = zext i32 %7289 to i64
  store i64 %7290, i64* %RCX, align 8, !tbaa !2428
  %7291 = load i64, i64* %RBP
  %7292 = sub i64 %7291, 4
  %7293 = load i64, i64* %PC
  %7294 = add i64 %7293, 4
  store i64 %7294, i64* %PC
  %7295 = inttoptr i64 %7292 to i32*
  %7296 = load i32, i32* %7295
  %7297 = sext i32 %7296 to i64
  store i64 %7297, i64* %RAX, align 8, !tbaa !2428
  %7298 = load i64, i64* %RAX
  %7299 = mul i64 %7298, 4
  %7300 = add i64 %7299, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %7301 = load i32, i32* %ECX
  %7302 = zext i32 %7301 to i64
  %7303 = load i64, i64* %PC
  %7304 = add i64 %7303, 7
  store i64 %7304, i64* %PC
  %7305 = inttoptr i64 %7300 to i32*
  store i32 %7301, i32* %7305
  %7306 = load i64, i64* %PC
  %7307 = add i64 %7306, 20
  %7308 = load i64, i64* %PC
  %7309 = add i64 %7308, 5
  store i64 %7309, i64* %PC
  %7310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7307, i64* %7310, align 8, !tbaa !2428
  br label %block_401497

block_4010e4:                                     ; preds = %block_4011c0, %block_4010d3
  %MEMORY.37 = phi %struct.Memory* [ %MEMORY.33, %block_4010d3 ], [ %MEMORY.39, %block_4011c0 ]
  %7311 = load i64, i64* %RBP
  %7312 = sub i64 %7311, 4
  %7313 = load i64, i64* %PC
  %7314 = add i64 %7313, 7
  store i64 %7314, i64* %PC
  %7315 = inttoptr i64 %7312 to i32*
  %7316 = load i32, i32* %7315
  %7317 = sub i32 %7316, 255
  %7318 = icmp ult i32 %7316, 255
  %7319 = zext i1 %7318 to i8
  %7320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7319, i8* %7320, align 1, !tbaa !2432
  %7321 = and i32 %7317, 255
  %7322 = call i32 @llvm.ctpop.i32(i32 %7321) #16
  %7323 = trunc i32 %7322 to i8
  %7324 = and i8 %7323, 1
  %7325 = xor i8 %7324, 1
  %7326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7325, i8* %7326, align 1, !tbaa !2446
  %7327 = xor i32 %7316, 255
  %7328 = xor i32 %7327, %7317
  %7329 = lshr i32 %7328, 4
  %7330 = trunc i32 %7329 to i8
  %7331 = and i8 %7330, 1
  %7332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7331, i8* %7332, align 1, !tbaa !2447
  %7333 = icmp eq i32 %7317, 0
  %7334 = zext i1 %7333 to i8
  %7335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7334, i8* %7335, align 1, !tbaa !2448
  %7336 = lshr i32 %7317, 31
  %7337 = trunc i32 %7336 to i8
  %7338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7337, i8* %7338, align 1, !tbaa !2449
  %7339 = lshr i32 %7316, 31
  %7340 = xor i32 %7336, %7339
  %7341 = add nuw nsw i32 %7340, %7339
  %7342 = icmp eq i32 %7341, 2
  %7343 = zext i1 %7342 to i8
  %7344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7343, i8* %7344, align 1, !tbaa !2450
  %7345 = load i64, i64* %PC
  %7346 = add i64 %7345, 232
  %7347 = load i64, i64* %PC
  %7348 = add i64 %7347, 6
  %7349 = load i64, i64* %PC
  %7350 = add i64 %7349, 6
  store i64 %7350, i64* %PC
  %7351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7352 = load i8, i8* %7351, align 1, !tbaa !2448
  %7353 = icmp eq i8 %7352, 0
  %7354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7355 = load i8, i8* %7354, align 1, !tbaa !2449
  %7356 = icmp ne i8 %7355, 0
  %7357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7358 = load i8, i8* %7357, align 1, !tbaa !2450
  %7359 = icmp ne i8 %7358, 0
  %7360 = xor i1 %7356, %7359
  %7361 = xor i1 %7360, true
  %7362 = and i1 %7353, %7361
  %7363 = zext i1 %7362 to i8
  store i8 %7363, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7365 = select i1 %7362, i64 %7346, i64 %7348
  store i64 %7365, i64* %7364, align 8, !tbaa !2428
  %7366 = load i8, i8* %BRANCH_TAKEN
  %7367 = icmp eq i8 %7366, 1
  %7368 = load i64, i64* %RBP
  br i1 %7367, label %block_4011d3, label %block_4010f1

block_400a5e:                                     ; preds = %block_400a54
  %7369 = sub i64 %7586, 4
  %7370 = load i64, i64* %PC
  %7371 = add i64 %7370, 4
  store i64 %7371, i64* %PC
  %7372 = inttoptr i64 %7369 to i32*
  %7373 = load i32, i32* %7372
  %7374 = sext i32 %7373 to i64
  store i64 %7374, i64* %RAX, align 8, !tbaa !2428
  %7375 = load i64, i64* %RBP
  %7376 = load i64, i64* %RAX
  %7377 = mul i64 %7376, 4
  %7378 = add i64 %7375, -1168
  %7379 = add i64 %7378, %7377
  %7380 = load i64, i64* %PC
  %7381 = add i64 %7380, 11
  store i64 %7381, i64* %PC
  %7382 = inttoptr i64 %7379 to i32*
  store i32 -1, i32* %7382
  %7383 = load i64, i64* %RBP
  %7384 = sub i64 %7383, 4
  %7385 = load i64, i64* %PC
  %7386 = add i64 %7385, 4
  store i64 %7386, i64* %PC
  %7387 = inttoptr i64 %7384 to i32*
  %7388 = load i32, i32* %7387
  %7389 = sext i32 %7388 to i64
  store i64 %7389, i64* %RAX, align 8, !tbaa !2428
  %7390 = load i64, i64* %RBP
  %7391 = load i64, i64* %RAX
  %7392 = mul i64 %7391, 4
  %7393 = add i64 %7390, -1104
  %7394 = add i64 %7393, %7392
  %7395 = load i64, i64* %PC
  %7396 = add i64 %7395, 11
  store i64 %7396, i64* %PC
  %7397 = inttoptr i64 %7394 to i32*
  store i32 0, i32* %7397
  %7398 = load i64, i64* %RBP
  %7399 = sub i64 %7398, 4
  %7400 = load i64, i64* %PC
  %7401 = add i64 %7400, 3
  store i64 %7401, i64* %PC
  %7402 = inttoptr i64 %7399 to i32*
  %7403 = load i32, i32* %7402
  %7404 = zext i32 %7403 to i64
  store i64 %7404, i64* %RAX, align 8, !tbaa !2428
  %7405 = load i64, i64* %RAX
  %7406 = load i64, i64* %PC
  %7407 = add i64 %7406, 3
  store i64 %7407, i64* %PC
  %7408 = trunc i64 %7405 to i32
  %7409 = add i32 1, %7408
  %7410 = zext i32 %7409 to i64
  store i64 %7410, i64* %RAX, align 8, !tbaa !2428
  %7411 = icmp ult i32 %7409, %7408
  %7412 = icmp ult i32 %7409, 1
  %7413 = or i1 %7411, %7412
  %7414 = zext i1 %7413 to i8
  %7415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7414, i8* %7415, align 1, !tbaa !2432
  %7416 = and i32 %7409, 255
  %7417 = call i32 @llvm.ctpop.i32(i32 %7416) #16
  %7418 = trunc i32 %7417 to i8
  %7419 = and i8 %7418, 1
  %7420 = xor i8 %7419, 1
  %7421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7420, i8* %7421, align 1, !tbaa !2446
  %7422 = xor i64 1, %7405
  %7423 = trunc i64 %7422 to i32
  %7424 = xor i32 %7423, %7409
  %7425 = lshr i32 %7424, 4
  %7426 = trunc i32 %7425 to i8
  %7427 = and i8 %7426, 1
  %7428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7427, i8* %7428, align 1, !tbaa !2447
  %7429 = icmp eq i32 %7409, 0
  %7430 = zext i1 %7429 to i8
  %7431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7430, i8* %7431, align 1, !tbaa !2448
  %7432 = lshr i32 %7409, 31
  %7433 = trunc i32 %7432 to i8
  %7434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7433, i8* %7434, align 1, !tbaa !2449
  %7435 = lshr i32 %7408, 31
  %7436 = xor i32 %7432, %7435
  %7437 = add nuw nsw i32 %7436, %7432
  %7438 = icmp eq i32 %7437, 2
  %7439 = zext i1 %7438 to i8
  %7440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7439, i8* %7440, align 1, !tbaa !2450
  %7441 = load i64, i64* %RBP
  %7442 = sub i64 %7441, 4
  %7443 = load i32, i32* %EAX
  %7444 = zext i32 %7443 to i64
  %7445 = load i64, i64* %PC
  %7446 = add i64 %7445, 3
  store i64 %7446, i64* %PC
  %7447 = inttoptr i64 %7442 to i32*
  store i32 %7443, i32* %7447
  %7448 = load i64, i64* %PC
  %7449 = sub i64 %7448, 49
  %7450 = load i64, i64* %PC
  %7451 = add i64 %7450, 5
  store i64 %7451, i64* %PC
  %7452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7449, i64* %7452, align 8, !tbaa !2428
  br label %block_400a54

block_400c5a:                                     ; preds = %block_400c36
  %7453 = sub i64 %10073, 12
  %7454 = load i64, i64* %PC
  %7455 = add i64 %7454, 4
  store i64 %7455, i64* %PC
  %7456 = inttoptr i64 %7453 to i32*
  %7457 = load i32, i32* %7456
  %7458 = sext i32 %7457 to i64
  store i64 %7458, i64* %RAX, align 8, !tbaa !2428
  %7459 = load i64, i64* %RBP
  %7460 = load i64, i64* %RAX
  %7461 = mul i64 %7460, 4
  %7462 = add i64 %7459, -1328
  %7463 = add i64 %7462, %7461
  %7464 = load i64, i64* %PC
  %7465 = add i64 %7464, 7
  store i64 %7465, i64* %PC
  %7466 = inttoptr i64 %7463 to i32*
  %7467 = load i32, i32* %7466
  %7468 = zext i32 %7467 to i64
  store i64 %7468, i64* %RCX, align 8, !tbaa !2428
  %7469 = load i64, i64* %RBP
  %7470 = sub i64 %7469, 12
  %7471 = load i64, i64* %PC
  %7472 = add i64 %7471, 3
  store i64 %7472, i64* %PC
  %7473 = inttoptr i64 %7470 to i32*
  %7474 = load i32, i32* %7473
  %7475 = zext i32 %7474 to i64
  store i64 %7475, i64* %RDX, align 8, !tbaa !2428
  %7476 = load i64, i64* %RDX
  %7477 = load i64, i64* %PC
  %7478 = add i64 %7477, 3
  store i64 %7478, i64* %PC
  %7479 = trunc i64 %7476 to i32
  %7480 = add i32 1, %7479
  %7481 = zext i32 %7480 to i64
  store i64 %7481, i64* %RDX, align 8, !tbaa !2428
  %7482 = icmp ult i32 %7480, %7479
  %7483 = icmp ult i32 %7480, 1
  %7484 = or i1 %7482, %7483
  %7485 = zext i1 %7484 to i8
  %7486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7485, i8* %7486, align 1, !tbaa !2432
  %7487 = and i32 %7480, 255
  %7488 = call i32 @llvm.ctpop.i32(i32 %7487) #16
  %7489 = trunc i32 %7488 to i8
  %7490 = and i8 %7489, 1
  %7491 = xor i8 %7490, 1
  %7492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7491, i8* %7492, align 1, !tbaa !2446
  %7493 = xor i64 1, %7476
  %7494 = trunc i64 %7493 to i32
  %7495 = xor i32 %7494, %7480
  %7496 = lshr i32 %7495, 4
  %7497 = trunc i32 %7496 to i8
  %7498 = and i8 %7497, 1
  %7499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7498, i8* %7499, align 1, !tbaa !2447
  %7500 = icmp eq i32 %7480, 0
  %7501 = zext i1 %7500 to i8
  %7502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7501, i8* %7502, align 1, !tbaa !2448
  %7503 = lshr i32 %7480, 31
  %7504 = trunc i32 %7503 to i8
  %7505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7504, i8* %7505, align 1, !tbaa !2449
  %7506 = lshr i32 %7479, 31
  %7507 = xor i32 %7503, %7506
  %7508 = add nuw nsw i32 %7507, %7503
  %7509 = icmp eq i32 %7508, 2
  %7510 = zext i1 %7509 to i8
  %7511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7510, i8* %7511, align 1, !tbaa !2450
  %7512 = load i32, i32* %EDX
  %7513 = zext i32 %7512 to i64
  %7514 = load i64, i64* %PC
  %7515 = add i64 %7514, 3
  store i64 %7515, i64* %PC
  %7516 = shl i64 %7513, 32
  %7517 = ashr exact i64 %7516, 32
  store i64 %7517, i64* %RAX, align 8, !tbaa !2428
  %7518 = load i64, i64* %RBP
  %7519 = load i64, i64* %RAX
  %7520 = mul i64 %7519, 4
  %7521 = add i64 %7518, -1328
  %7522 = add i64 %7521, %7520
  %7523 = load i32, i32* %ECX
  %7524 = zext i32 %7523 to i64
  %7525 = load i64, i64* %PC
  %7526 = add i64 %7525, 7
  store i64 %7526, i64* %PC
  %7527 = inttoptr i64 %7522 to i32*
  store i32 %7523, i32* %7527
  %7528 = load i64, i64* %PC
  %7529 = add i64 %7528, 38
  %7530 = load i64, i64* %PC
  %7531 = add i64 %7530, 5
  store i64 %7531, i64* %PC
  %7532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7529, i64* %7532, align 8, !tbaa !2428
  br label %block_400c9b

block_400a54:                                     ; preds = %block_400a23, %block_400a5e
  %MEMORY.38 = phi %struct.Memory* [ %MEMORY.15, %block_400a23 ], [ %MEMORY.38, %block_400a5e ]
  %7533 = load i64, i64* %RBP
  %7534 = sub i64 %7533, 4
  %7535 = load i64, i64* %PC
  %7536 = add i64 %7535, 4
  store i64 %7536, i64* %PC
  %7537 = inttoptr i64 %7534 to i32*
  %7538 = load i32, i32* %7537
  %7539 = sub i32 %7538, 16
  %7540 = icmp ult i32 %7538, 16
  %7541 = zext i1 %7540 to i8
  %7542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7541, i8* %7542, align 1, !tbaa !2432
  %7543 = and i32 %7539, 255
  %7544 = call i32 @llvm.ctpop.i32(i32 %7543) #16
  %7545 = trunc i32 %7544 to i8
  %7546 = and i8 %7545, 1
  %7547 = xor i8 %7546, 1
  %7548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7547, i8* %7548, align 1, !tbaa !2446
  %7549 = xor i32 %7538, 16
  %7550 = xor i32 %7549, %7539
  %7551 = lshr i32 %7550, 4
  %7552 = trunc i32 %7551 to i8
  %7553 = and i8 %7552, 1
  %7554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7553, i8* %7554, align 1, !tbaa !2447
  %7555 = icmp eq i32 %7539, 0
  %7556 = zext i1 %7555 to i8
  %7557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7556, i8* %7557, align 1, !tbaa !2448
  %7558 = lshr i32 %7539, 31
  %7559 = trunc i32 %7558 to i8
  %7560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7559, i8* %7560, align 1, !tbaa !2449
  %7561 = lshr i32 %7538, 31
  %7562 = xor i32 %7558, %7561
  %7563 = add nuw nsw i32 %7562, %7561
  %7564 = icmp eq i32 %7563, 2
  %7565 = zext i1 %7564 to i8
  %7566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7565, i8* %7566, align 1, !tbaa !2450
  %7567 = load i64, i64* %PC
  %7568 = add i64 %7567, 50
  %7569 = load i64, i64* %PC
  %7570 = add i64 %7569, 6
  %7571 = load i64, i64* %PC
  %7572 = add i64 %7571, 6
  store i64 %7572, i64* %PC
  %7573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7574 = load i8, i8* %7573, align 1, !tbaa !2449
  %7575 = icmp ne i8 %7574, 0
  %7576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7577 = load i8, i8* %7576, align 1, !tbaa !2450
  %7578 = icmp ne i8 %7577, 0
  %7579 = xor i1 %7575, %7578
  %7580 = xor i1 %7579, true
  %7581 = zext i1 %7580 to i8
  store i8 %7581, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7583 = select i1 %7579, i64 %7570, i64 %7568
  store i64 %7583, i64* %7582, align 8, !tbaa !2428
  %7584 = load i8, i8* %BRANCH_TAKEN
  %7585 = icmp eq i8 %7584, 1
  %7586 = load i64, i64* %RBP
  br i1 %7585, label %block_400a8a, label %block_400a5e

block_4011c0:                                     ; preds = %block_401180, %block_40118a
  %MEMORY.39 = phi %struct.Memory* [ %MEMORY.23, %block_401180 ], [ %MEMORY.23, %block_40118a ]
  %7587 = load i64, i64* %PC
  %7588 = add i64 %7587, 5
  %7589 = load i64, i64* %PC
  %7590 = add i64 %7589, 5
  store i64 %7590, i64* %PC
  %7591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7588, i64* %7591, align 8, !tbaa !2428
  %7592 = load i64, i64* %RBP
  %7593 = sub i64 %7592, 4
  %7594 = load i64, i64* %PC
  %7595 = add i64 %7594, 3
  store i64 %7595, i64* %PC
  %7596 = inttoptr i64 %7593 to i32*
  %7597 = load i32, i32* %7596
  %7598 = zext i32 %7597 to i64
  store i64 %7598, i64* %RAX, align 8, !tbaa !2428
  %7599 = load i64, i64* %RAX
  %7600 = load i64, i64* %PC
  %7601 = add i64 %7600, 3
  store i64 %7601, i64* %PC
  %7602 = trunc i64 %7599 to i32
  %7603 = add i32 1, %7602
  %7604 = zext i32 %7603 to i64
  store i64 %7604, i64* %RAX, align 8, !tbaa !2428
  %7605 = icmp ult i32 %7603, %7602
  %7606 = icmp ult i32 %7603, 1
  %7607 = or i1 %7605, %7606
  %7608 = zext i1 %7607 to i8
  %7609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7608, i8* %7609, align 1, !tbaa !2432
  %7610 = and i32 %7603, 255
  %7611 = call i32 @llvm.ctpop.i32(i32 %7610) #16
  %7612 = trunc i32 %7611 to i8
  %7613 = and i8 %7612, 1
  %7614 = xor i8 %7613, 1
  %7615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7614, i8* %7615, align 1, !tbaa !2446
  %7616 = xor i64 1, %7599
  %7617 = trunc i64 %7616 to i32
  %7618 = xor i32 %7617, %7603
  %7619 = lshr i32 %7618, 4
  %7620 = trunc i32 %7619 to i8
  %7621 = and i8 %7620, 1
  %7622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7621, i8* %7622, align 1, !tbaa !2447
  %7623 = icmp eq i32 %7603, 0
  %7624 = zext i1 %7623 to i8
  %7625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7624, i8* %7625, align 1, !tbaa !2448
  %7626 = lshr i32 %7603, 31
  %7627 = trunc i32 %7626 to i8
  %7628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7627, i8* %7628, align 1, !tbaa !2449
  %7629 = lshr i32 %7602, 31
  %7630 = xor i32 %7626, %7629
  %7631 = add nuw nsw i32 %7630, %7626
  %7632 = icmp eq i32 %7631, 2
  %7633 = zext i1 %7632 to i8
  %7634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7633, i8* %7634, align 1, !tbaa !2450
  %7635 = load i64, i64* %RBP
  %7636 = sub i64 %7635, 4
  %7637 = load i32, i32* %EAX
  %7638 = zext i32 %7637 to i64
  %7639 = load i64, i64* %PC
  %7640 = add i64 %7639, 3
  store i64 %7640, i64* %PC
  %7641 = inttoptr i64 %7636 to i32*
  store i32 %7637, i32* %7641
  %7642 = load i64, i64* %PC
  %7643 = sub i64 %7642, 234
  %7644 = load i64, i64* %PC
  %7645 = add i64 %7644, 5
  store i64 %7645, i64* %PC
  %7646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7643, i64* %7646, align 8, !tbaa !2428
  br label %block_4010e4

block_400fcb:                                     ; preds = %block_400e3a, %block_400fa3
  %MEMORY.40 = phi %struct.Memory* [ %MEMORY.43, %block_400e3a ], [ %MEMORY.27, %block_400fa3 ]
  %7647 = load i64, i64* %PC
  %7648 = add i64 %7647, 5
  %7649 = load i64, i64* %PC
  %7650 = add i64 %7649, 5
  store i64 %7650, i64* %PC
  %7651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7648, i64* %7651, align 8, !tbaa !2428
  %7652 = load i64, i64* %RAX
  %7653 = load i32, i32* %EAX
  %7654 = zext i32 %7653 to i64
  %7655 = load i64, i64* %PC
  %7656 = add i64 %7655, 2
  store i64 %7656, i64* %PC
  %7657 = xor i64 %7654, %7652
  %7658 = trunc i64 %7657 to i32
  %7659 = and i64 %7657, 4294967295
  store i64 %7659, i64* %RAX, align 8, !tbaa !2428
  %7660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7660, align 1, !tbaa !2432
  %7661 = and i32 %7658, 255
  %7662 = call i32 @llvm.ctpop.i32(i32 %7661) #16
  %7663 = trunc i32 %7662 to i8
  %7664 = and i8 %7663, 1
  %7665 = xor i8 %7664, 1
  %7666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7665, i8* %7666, align 1, !tbaa !2446
  %7667 = icmp eq i32 %7658, 0
  %7668 = zext i1 %7667 to i8
  %7669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7668, i8* %7669, align 1, !tbaa !2448
  %7670 = lshr i32 %7658, 31
  %7671 = trunc i32 %7670 to i8
  %7672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7671, i8* %7672, align 1, !tbaa !2449
  %7673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7673, align 1, !tbaa !2450
  %7674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7674, align 1, !tbaa !2447
  %7675 = load i8, i8* %AL
  %7676 = zext i8 %7675 to i64
  %7677 = load i64, i64* %PC
  %7678 = add i64 %7677, 2
  store i64 %7678, i64* %PC
  store i8 %7675, i8* %CL, align 1, !tbaa !2451
  %7679 = load i64, i64* %RBP
  %7680 = sub i64 %7679, 12
  %7681 = load i64, i64* %PC
  %7682 = add i64 %7681, 4
  store i64 %7682, i64* %PC
  %7683 = inttoptr i64 %7680 to i32*
  %7684 = load i32, i32* %7683
  %7685 = sub i32 %7684, 16
  %7686 = icmp ult i32 %7684, 16
  %7687 = zext i1 %7686 to i8
  %7688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7687, i8* %7688, align 1, !tbaa !2432
  %7689 = and i32 %7685, 255
  %7690 = call i32 @llvm.ctpop.i32(i32 %7689) #16
  %7691 = trunc i32 %7690 to i8
  %7692 = and i8 %7691, 1
  %7693 = xor i8 %7692, 1
  %7694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7693, i8* %7694, align 1, !tbaa !2446
  %7695 = xor i32 %7684, 16
  %7696 = xor i32 %7695, %7685
  %7697 = lshr i32 %7696, 4
  %7698 = trunc i32 %7697 to i8
  %7699 = and i8 %7698, 1
  %7700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7699, i8* %7700, align 1, !tbaa !2447
  %7701 = icmp eq i32 %7685, 0
  %7702 = zext i1 %7701 to i8
  %7703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7702, i8* %7703, align 1, !tbaa !2448
  %7704 = lshr i32 %7685, 31
  %7705 = trunc i32 %7704 to i8
  %7706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7705, i8* %7706, align 1, !tbaa !2449
  %7707 = lshr i32 %7684, 31
  %7708 = xor i32 %7704, %7707
  %7709 = add nuw nsw i32 %7708, %7707
  %7710 = icmp eq i32 %7709, 2
  %7711 = zext i1 %7710 to i8
  %7712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7711, i8* %7712, align 1, !tbaa !2450
  %7713 = load i64, i64* %RBP
  %7714 = sub i64 %7713, 2709
  %7715 = load i8, i8* %CL
  %7716 = zext i8 %7715 to i64
  %7717 = load i64, i64* %PC
  %7718 = add i64 %7717, 6
  store i64 %7718, i64* %PC
  %7719 = inttoptr i64 %7714 to i8*
  store i8 %7715, i8* %7719
  %7720 = load i64, i64* %PC
  %7721 = add i64 %7720, 32
  %7722 = load i64, i64* %PC
  %7723 = add i64 %7722, 6
  %7724 = load i64, i64* %PC
  %7725 = add i64 %7724, 6
  store i64 %7725, i64* %PC
  %7726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7727 = load i8, i8* %7726, align 1, !tbaa !2449
  %7728 = icmp ne i8 %7727, 0
  %7729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7730 = load i8, i8* %7729, align 1, !tbaa !2450
  %7731 = icmp ne i8 %7730, 0
  %7732 = xor i1 %7728, %7731
  %7733 = xor i1 %7732, true
  %7734 = zext i1 %7733 to i8
  store i8 %7734, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7736 = select i1 %7732, i64 %7723, i64 %7721
  store i64 %7736, i64* %7735, align 8, !tbaa !2428
  %7737 = load i8, i8* %BRANCH_TAKEN
  %7738 = icmp eq i8 %7737, 1
  br i1 %7738, label %block_400ffe, label %block_400fe4

block_400d17:                                     ; preds = %block_400cf7
  %7739 = load i64, i64* %RBP
  %7740 = sub i64 %7739, 1168
  %7741 = load i64, i64* %PC
  %7742 = add i64 %7741, 7
  store i64 %7742, i64* %PC
  store i64 %7740, i64* %RAX, align 8, !tbaa !2428
  %7743 = load i64, i64* %PC
  %7744 = add i64 %7743, 5
  store i64 %7744, i64* %PC
  store i64 255, i64* %RCX, align 8, !tbaa !2428
  %7745 = load i64, i64* %RBP
  %7746 = sub i64 %7745, 12
  %7747 = load i64, i64* %PC
  %7748 = add i64 %7747, 4
  store i64 %7748, i64* %PC
  %7749 = inttoptr i64 %7746 to i32*
  %7750 = load i32, i32* %7749
  %7751 = sext i32 %7750 to i64
  store i64 %7751, i64* %RDX, align 8, !tbaa !2428
  %7752 = load i64, i64* %RBP
  %7753 = load i64, i64* %RDX
  %7754 = mul i64 %7753, 4
  %7755 = add i64 %7752, -1248
  %7756 = add i64 %7755, %7754
  %7757 = load i64, i64* %PC
  %7758 = add i64 %7757, 7
  store i64 %7758, i64* %PC
  %7759 = inttoptr i64 %7756 to i32*
  %7760 = load i32, i32* %7759
  %7761 = zext i32 %7760 to i64
  store i64 %7761, i64* %RSI, align 8, !tbaa !2428
  %7762 = load i64, i64* %RSI
  %7763 = load i64, i64* %PC
  %7764 = add i64 %7763, 6
  store i64 %7764, i64* %PC
  %7765 = trunc i64 %7762 to i32
  %7766 = add i32 255, %7765
  %7767 = zext i32 %7766 to i64
  store i64 %7767, i64* %RSI, align 8, !tbaa !2428
  %7768 = icmp ult i32 %7766, %7765
  %7769 = icmp ult i32 %7766, 255
  %7770 = or i1 %7768, %7769
  %7771 = zext i1 %7770 to i8
  %7772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7771, i8* %7772, align 1, !tbaa !2432
  %7773 = and i32 %7766, 255
  %7774 = call i32 @llvm.ctpop.i32(i32 %7773) #16
  %7775 = trunc i32 %7774 to i8
  %7776 = and i8 %7775, 1
  %7777 = xor i8 %7776, 1
  %7778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7777, i8* %7778, align 1, !tbaa !2446
  %7779 = xor i64 255, %7762
  %7780 = trunc i64 %7779 to i32
  %7781 = xor i32 %7780, %7766
  %7782 = lshr i32 %7781, 4
  %7783 = trunc i32 %7782 to i8
  %7784 = and i8 %7783, 1
  %7785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7784, i8* %7785, align 1, !tbaa !2447
  %7786 = icmp eq i32 %7766, 0
  %7787 = zext i1 %7786 to i8
  %7788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7787, i8* %7788, align 1, !tbaa !2448
  %7789 = lshr i32 %7766, 31
  %7790 = trunc i32 %7789 to i8
  %7791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7790, i8* %7791, align 1, !tbaa !2449
  %7792 = lshr i32 %7765, 31
  %7793 = xor i32 %7789, %7792
  %7794 = add nuw nsw i32 %7793, %7789
  %7795 = icmp eq i32 %7794, 2
  %7796 = zext i1 %7795 to i8
  %7797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7796, i8* %7797, align 1, !tbaa !2450
  %7798 = load i64, i64* %RBP
  %7799 = sub i64 %7798, 16
  %7800 = load i64, i64* %PC
  %7801 = add i64 %7800, 4
  store i64 %7801, i64* %PC
  %7802 = inttoptr i64 %7799 to i32*
  %7803 = load i32, i32* %7802
  %7804 = sext i32 %7803 to i64
  store i64 %7804, i64* %RDX, align 8, !tbaa !2428
  %7805 = load i64, i64* %RSI
  %7806 = load i64, i64* %RBP
  %7807 = load i64, i64* %RDX
  %7808 = mul i64 %7807, 4
  %7809 = add i64 %7806, -1248
  %7810 = add i64 %7809, %7808
  %7811 = load i64, i64* %PC
  %7812 = add i64 %7811, 7
  store i64 %7812, i64* %PC
  %7813 = trunc i64 %7805 to i32
  %7814 = inttoptr i64 %7810 to i32*
  %7815 = load i32, i32* %7814
  %7816 = sub i32 %7813, %7815
  %7817 = zext i32 %7816 to i64
  store i64 %7817, i64* %RSI, align 8, !tbaa !2428
  %7818 = icmp ult i32 %7813, %7815
  %7819 = zext i1 %7818 to i8
  %7820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7819, i8* %7820, align 1, !tbaa !2432
  %7821 = and i32 %7816, 255
  %7822 = call i32 @llvm.ctpop.i32(i32 %7821) #16
  %7823 = trunc i32 %7822 to i8
  %7824 = and i8 %7823, 1
  %7825 = xor i8 %7824, 1
  %7826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7825, i8* %7826, align 1, !tbaa !2446
  %7827 = xor i32 %7815, %7813
  %7828 = xor i32 %7827, %7816
  %7829 = lshr i32 %7828, 4
  %7830 = trunc i32 %7829 to i8
  %7831 = and i8 %7830, 1
  %7832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7831, i8* %7832, align 1, !tbaa !2447
  %7833 = icmp eq i32 %7816, 0
  %7834 = zext i1 %7833 to i8
  %7835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7834, i8* %7835, align 1, !tbaa !2448
  %7836 = lshr i32 %7816, 31
  %7837 = trunc i32 %7836 to i8
  %7838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7837, i8* %7838, align 1, !tbaa !2449
  %7839 = lshr i32 %7813, 31
  %7840 = lshr i32 %7815, 31
  %7841 = xor i32 %7840, %7839
  %7842 = xor i32 %7836, %7839
  %7843 = add nuw nsw i32 %7842, %7841
  %7844 = icmp eq i32 %7843, 2
  %7845 = zext i1 %7844 to i8
  %7846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7845, i8* %7846, align 1, !tbaa !2450
  %7847 = load i64, i64* %RBP
  %7848 = sub i64 %7847, 16
  %7849 = load i64, i64* %PC
  %7850 = add i64 %7849, 4
  store i64 %7850, i64* %PC
  %7851 = inttoptr i64 %7848 to i32*
  %7852 = load i32, i32* %7851
  %7853 = sext i32 %7852 to i64
  store i64 %7853, i64* %RDX, align 8, !tbaa !2428
  %7854 = load i64, i64* %RDX
  %7855 = load i64, i64* %PC
  %7856 = add i64 %7855, 4
  store i64 %7856, i64* %PC
  %7857 = shl i64 %7854, 5
  %7858 = icmp slt i64 %7857, 0
  %7859 = shl i64 %7857, 1
  store i64 %7859, i64* %RDX, align 8, !tbaa !2428
  %7860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7861 = zext i1 %7858 to i8
  store i8 %7861, i8* %7860, align 1, !tbaa !2451
  %7862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7863 = trunc i64 %7859 to i32
  %7864 = and i32 %7863, 254
  %7865 = call i32 @llvm.ctpop.i32(i32 %7864) #16
  %7866 = trunc i32 %7865 to i8
  %7867 = and i8 %7866, 1
  %7868 = xor i8 %7867, 1
  store i8 %7868, i8* %7862, align 1, !tbaa !2451
  %7869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7869, align 1, !tbaa !2451
  %7870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7871 = icmp eq i64 %7859, 0
  %7872 = zext i1 %7871 to i8
  store i8 %7872, i8* %7870, align 1, !tbaa !2451
  %7873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7874 = lshr i64 %7859, 63
  %7875 = trunc i64 %7874 to i8
  store i8 %7875, i8* %7873, align 1, !tbaa !2451
  %7876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7876, align 1, !tbaa !2451
  %7877 = load i64, i64* %RAX
  %7878 = load i64, i64* %PC
  %7879 = add i64 %7878, 3
  store i64 %7879, i64* %PC
  store i64 %7877, i64* %RDI, align 8, !tbaa !2428
  %7880 = load i64, i64* %RDI
  %7881 = load i64, i64* %RDX
  %7882 = load i64, i64* %PC
  %7883 = add i64 %7882, 3
  store i64 %7883, i64* %PC
  %7884 = add i64 %7881, %7880
  store i64 %7884, i64* %RDI, align 8, !tbaa !2428
  %7885 = icmp ult i64 %7884, %7880
  %7886 = icmp ult i64 %7884, %7881
  %7887 = or i1 %7885, %7886
  %7888 = zext i1 %7887 to i8
  %7889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7888, i8* %7889, align 1, !tbaa !2432
  %7890 = trunc i64 %7884 to i32
  %7891 = and i32 %7890, 255
  %7892 = call i32 @llvm.ctpop.i32(i32 %7891) #16
  %7893 = trunc i32 %7892 to i8
  %7894 = and i8 %7893, 1
  %7895 = xor i8 %7894, 1
  %7896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7895, i8* %7896, align 1, !tbaa !2446
  %7897 = xor i64 %7881, %7880
  %7898 = xor i64 %7897, %7884
  %7899 = lshr i64 %7898, 4
  %7900 = trunc i64 %7899 to i8
  %7901 = and i8 %7900, 1
  %7902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7901, i8* %7902, align 1, !tbaa !2447
  %7903 = icmp eq i64 %7884, 0
  %7904 = zext i1 %7903 to i8
  %7905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7904, i8* %7905, align 1, !tbaa !2448
  %7906 = lshr i64 %7884, 63
  %7907 = trunc i64 %7906 to i8
  %7908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7907, i8* %7908, align 1, !tbaa !2449
  %7909 = lshr i64 %7880, 63
  %7910 = lshr i64 %7881, 63
  %7911 = xor i64 %7906, %7909
  %7912 = xor i64 %7906, %7910
  %7913 = add nuw nsw i64 %7911, %7912
  %7914 = icmp eq i64 %7913, 2
  %7915 = zext i1 %7914 to i8
  %7916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7915, i8* %7916, align 1, !tbaa !2450
  %7917 = load i64, i64* %RBP
  %7918 = sub i64 %7917, 4
  %7919 = load i64, i64* %PC
  %7920 = add i64 %7919, 4
  store i64 %7920, i64* %PC
  %7921 = inttoptr i64 %7918 to i32*
  %7922 = load i32, i32* %7921
  %7923 = sext i32 %7922 to i64
  store i64 %7923, i64* %RDX, align 8, !tbaa !2428
  %7924 = load i64, i64* %RSI
  %7925 = load i64, i64* %RDI
  %7926 = load i64, i64* %RDX
  %7927 = mul i64 %7926, 4
  %7928 = add i64 %7927, %7925
  %7929 = load i64, i64* %PC
  %7930 = add i64 %7929, 3
  store i64 %7930, i64* %PC
  %7931 = trunc i64 %7924 to i32
  %7932 = inttoptr i64 %7928 to i32*
  %7933 = load i32, i32* %7932
  %7934 = add i32 %7933, %7931
  %7935 = zext i32 %7934 to i64
  store i64 %7935, i64* %RSI, align 8, !tbaa !2428
  %7936 = icmp ult i32 %7934, %7931
  %7937 = icmp ult i32 %7934, %7933
  %7938 = or i1 %7936, %7937
  %7939 = zext i1 %7938 to i8
  %7940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7939, i8* %7940, align 1, !tbaa !2432
  %7941 = and i32 %7934, 255
  %7942 = call i32 @llvm.ctpop.i32(i32 %7941) #16
  %7943 = trunc i32 %7942 to i8
  %7944 = and i8 %7943, 1
  %7945 = xor i8 %7944, 1
  %7946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7945, i8* %7946, align 1, !tbaa !2446
  %7947 = xor i32 %7933, %7931
  %7948 = xor i32 %7947, %7934
  %7949 = lshr i32 %7948, 4
  %7950 = trunc i32 %7949 to i8
  %7951 = and i8 %7950, 1
  %7952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7951, i8* %7952, align 1, !tbaa !2447
  %7953 = icmp eq i32 %7934, 0
  %7954 = zext i1 %7953 to i8
  %7955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7954, i8* %7955, align 1, !tbaa !2448
  %7956 = lshr i32 %7934, 31
  %7957 = trunc i32 %7956 to i8
  %7958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7957, i8* %7958, align 1, !tbaa !2449
  %7959 = lshr i32 %7931, 31
  %7960 = lshr i32 %7933, 31
  %7961 = xor i32 %7956, %7959
  %7962 = xor i32 %7956, %7960
  %7963 = add nuw nsw i32 %7961, %7962
  %7964 = icmp eq i32 %7963, 2
  %7965 = zext i1 %7964 to i8
  %7966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7965, i8* %7966, align 1, !tbaa !2450
  %7967 = load i64, i64* %RBP
  %7968 = sub i64 %7967, 2704
  %7969 = load i64, i64* %RAX
  %7970 = load i64, i64* %PC
  %7971 = add i64 %7970, 7
  store i64 %7971, i64* %PC
  %7972 = inttoptr i64 %7968 to i64*
  store i64 %7969, i64* %7972
  %7973 = load i32, i32* %ESI
  %7974 = zext i32 %7973 to i64
  %7975 = load i64, i64* %PC
  %7976 = add i64 %7975, 2
  store i64 %7976, i64* %PC
  %7977 = and i64 %7974, 4294967295
  store i64 %7977, i64* %RAX, align 8, !tbaa !2428
  %7978 = load i64, i64* %PC
  %7979 = add i64 %7978, 1
  store i64 %7979, i64* %PC
  %7980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7982 = bitcast %union.anon* %7981 to i32*
  %7983 = load i32, i32* %7982, align 8, !tbaa !2452
  %7984 = sext i32 %7983 to i64
  %7985 = lshr i64 %7984, 32
  store i64 %7985, i64* %7980, align 8, !tbaa !2428
  %7986 = load i32, i32* %ECX
  %7987 = zext i32 %7986 to i64
  %7988 = load i64, i64* %PC
  %7989 = add i64 %7988, 2
  store i64 %7989, i64* %PC
  %7990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7991 = bitcast %union.anon* %7990 to i32*
  %7992 = load i32, i32* %7991, align 8, !tbaa !2452
  %7993 = zext i32 %7992 to i64
  %7994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %7995 = bitcast %union.anon* %7994 to i32*
  %7996 = load i32, i32* %7995, align 8, !tbaa !2452
  %7997 = zext i32 %7996 to i64
  %7998 = shl i64 %7987, 32
  %7999 = ashr exact i64 %7998, 32
  %8000 = shl nuw i64 %7997, 32
  %8001 = or i64 %8000, %7993
  %8002 = sdiv i64 %8001, %7999
  %8003 = shl i64 %8002, 32
  %8004 = ashr exact i64 %8003, 32
  %8005 = icmp eq i64 %8002, %8004
  br i1 %8005, label %8010, label %8006

; <label>:8006:                                   ; preds = %block_400d17
  %8007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8008 = load i64, i64* %8007, align 8, !tbaa !2428
  %8009 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8008, %struct.Memory* %MEMORY.35) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:8010:                                   ; preds = %block_400d17
  %8011 = srem i64 %8001, %7999
  %8012 = getelementptr inbounds %union.anon, %union.anon* %7990, i64 0, i32 0
  %8013 = and i64 %8002, 4294967295
  store i64 %8013, i64* %8012, align 8, !tbaa !2428
  %8014 = getelementptr inbounds %union.anon, %union.anon* %7994, i64 0, i32 0
  %8015 = and i64 %8011, 4294967295
  store i64 %8015, i64* %8014, align 8, !tbaa !2428
  %8016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8016, align 1, !tbaa !2432
  %8017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %8017, align 1, !tbaa !2446
  %8018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8018, align 1, !tbaa !2447
  %8019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8019, align 1, !tbaa !2448
  %8020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8020, align 1, !tbaa !2449
  %8021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8021, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %8006, %8010
  %8022 = phi %struct.Memory* [ %8009, %8006 ], [ %MEMORY.35, %8010 ]
  %8023 = load i32, i32* %EDX
  %8024 = zext i32 %8023 to i64
  %8025 = load i64, i64* %PC
  %8026 = add i64 %8025, 3
  store i64 %8026, i64* %PC
  %8027 = shl i64 %8024, 32
  %8028 = ashr exact i64 %8027, 32
  store i64 %8028, i64* %RDI, align 8, !tbaa !2428
  %8029 = load i64, i64* %RDI
  %8030 = mul i64 %8029, 4
  %8031 = add i64 %8030, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %8032 = load i64, i64* %PC
  %8033 = add i64 %8032, 7
  store i64 %8033, i64* %PC
  %8034 = inttoptr i64 %8031 to i32*
  %8035 = load i32, i32* %8034
  %8036 = zext i32 %8035 to i64
  store i64 %8036, i64* %RCX, align 8, !tbaa !2428
  %8037 = load i64, i64* %RBP
  %8038 = sub i64 %8037, 12
  %8039 = load i64, i64* %PC
  %8040 = add i64 %8039, 3
  store i64 %8040, i64* %PC
  %8041 = inttoptr i64 %8038 to i32*
  %8042 = load i32, i32* %8041
  %8043 = zext i32 %8042 to i64
  store i64 %8043, i64* %RDX, align 8, !tbaa !2428
  %8044 = load i64, i64* %RDX
  %8045 = load i64, i64* %PC
  %8046 = add i64 %8045, 3
  store i64 %8046, i64* %PC
  %8047 = trunc i64 %8044 to i32
  %8048 = add i32 1, %8047
  %8049 = zext i32 %8048 to i64
  store i64 %8049, i64* %RDX, align 8, !tbaa !2428
  %8050 = icmp ult i32 %8048, %8047
  %8051 = icmp ult i32 %8048, 1
  %8052 = or i1 %8050, %8051
  %8053 = zext i1 %8052 to i8
  %8054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8053, i8* %8054, align 1, !tbaa !2432
  %8055 = and i32 %8048, 255
  %8056 = call i32 @llvm.ctpop.i32(i32 %8055) #16
  %8057 = trunc i32 %8056 to i8
  %8058 = and i8 %8057, 1
  %8059 = xor i8 %8058, 1
  %8060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8059, i8* %8060, align 1, !tbaa !2446
  %8061 = xor i64 1, %8044
  %8062 = trunc i64 %8061 to i32
  %8063 = xor i32 %8062, %8048
  %8064 = lshr i32 %8063, 4
  %8065 = trunc i32 %8064 to i8
  %8066 = and i8 %8065, 1
  %8067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8066, i8* %8067, align 1, !tbaa !2447
  %8068 = icmp eq i32 %8048, 0
  %8069 = zext i1 %8068 to i8
  %8070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8069, i8* %8070, align 1, !tbaa !2448
  %8071 = lshr i32 %8048, 31
  %8072 = trunc i32 %8071 to i8
  %8073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8072, i8* %8073, align 1, !tbaa !2449
  %8074 = lshr i32 %8047, 31
  %8075 = xor i32 %8071, %8074
  %8076 = add nuw nsw i32 %8075, %8071
  %8077 = icmp eq i32 %8076, 2
  %8078 = zext i1 %8077 to i8
  %8079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8078, i8* %8079, align 1, !tbaa !2450
  %8080 = load i32, i32* %EDX
  %8081 = zext i32 %8080 to i64
  %8082 = load i64, i64* %PC
  %8083 = add i64 %8082, 3
  store i64 %8083, i64* %PC
  %8084 = shl i64 %8081, 32
  %8085 = ashr exact i64 %8084, 32
  store i64 %8085, i64* %RDI, align 8, !tbaa !2428
  %8086 = load i64, i64* %RDI
  %8087 = load i64, i64* %PC
  %8088 = add i64 %8087, 4
  store i64 %8088, i64* %PC
  %8089 = shl i64 %8086, 5
  %8090 = icmp slt i64 %8089, 0
  %8091 = shl i64 %8089, 1
  store i64 %8091, i64* %RDI, align 8, !tbaa !2428
  %8092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8093 = zext i1 %8090 to i8
  store i8 %8093, i8* %8092, align 1, !tbaa !2451
  %8094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8095 = trunc i64 %8091 to i32
  %8096 = and i32 %8095, 254
  %8097 = call i32 @llvm.ctpop.i32(i32 %8096) #16
  %8098 = trunc i32 %8097 to i8
  %8099 = and i8 %8098, 1
  %8100 = xor i8 %8099, 1
  store i8 %8100, i8* %8094, align 1, !tbaa !2451
  %8101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8101, align 1, !tbaa !2451
  %8102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8103 = icmp eq i64 %8091, 0
  %8104 = zext i1 %8103 to i8
  store i8 %8104, i8* %8102, align 1, !tbaa !2451
  %8105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8106 = lshr i64 %8091, 63
  %8107 = trunc i64 %8106 to i8
  store i8 %8107, i8* %8105, align 1, !tbaa !2451
  %8108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8108, align 1, !tbaa !2451
  %8109 = load i64, i64* %RBP
  %8110 = sub i64 %8109, 2704
  %8111 = load i64, i64* %PC
  %8112 = add i64 %8111, 7
  store i64 %8112, i64* %PC
  %8113 = inttoptr i64 %8110 to i64*
  %8114 = load i64, i64* %8113
  store i64 %8114, i64* %R8, align 8, !tbaa !2428
  %8115 = load i64, i64* %R8
  %8116 = load i64, i64* %RDI
  %8117 = load i64, i64* %PC
  %8118 = add i64 %8117, 3
  store i64 %8118, i64* %PC
  %8119 = add i64 %8116, %8115
  store i64 %8119, i64* %R8, align 8, !tbaa !2428
  %8120 = icmp ult i64 %8119, %8115
  %8121 = icmp ult i64 %8119, %8116
  %8122 = or i1 %8120, %8121
  %8123 = zext i1 %8122 to i8
  %8124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8123, i8* %8124, align 1, !tbaa !2432
  %8125 = trunc i64 %8119 to i32
  %8126 = and i32 %8125, 255
  %8127 = call i32 @llvm.ctpop.i32(i32 %8126) #16
  %8128 = trunc i32 %8127 to i8
  %8129 = and i8 %8128, 1
  %8130 = xor i8 %8129, 1
  %8131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8130, i8* %8131, align 1, !tbaa !2446
  %8132 = xor i64 %8116, %8115
  %8133 = xor i64 %8132, %8119
  %8134 = lshr i64 %8133, 4
  %8135 = trunc i64 %8134 to i8
  %8136 = and i8 %8135, 1
  %8137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8136, i8* %8137, align 1, !tbaa !2447
  %8138 = icmp eq i64 %8119, 0
  %8139 = zext i1 %8138 to i8
  %8140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8139, i8* %8140, align 1, !tbaa !2448
  %8141 = lshr i64 %8119, 63
  %8142 = trunc i64 %8141 to i8
  %8143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8142, i8* %8143, align 1, !tbaa !2449
  %8144 = lshr i64 %8115, 63
  %8145 = lshr i64 %8116, 63
  %8146 = xor i64 %8141, %8144
  %8147 = xor i64 %8141, %8145
  %8148 = add nuw nsw i64 %8146, %8147
  %8149 = icmp eq i64 %8148, 2
  %8150 = zext i1 %8149 to i8
  %8151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8150, i8* %8151, align 1, !tbaa !2450
  %8152 = load i64, i64* %RBP
  %8153 = sub i64 %8152, 4
  %8154 = load i64, i64* %PC
  %8155 = add i64 %8154, 3
  store i64 %8155, i64* %PC
  %8156 = inttoptr i64 %8153 to i32*
  %8157 = load i32, i32* %8156
  %8158 = zext i32 %8157 to i64
  store i64 %8158, i64* %RDX, align 8, !tbaa !2428
  %8159 = load i64, i64* %RDX
  %8160 = load i64, i64* %RBP
  %8161 = sub i64 %8160, 12
  %8162 = load i64, i64* %PC
  %8163 = add i64 %8162, 3
  store i64 %8163, i64* %PC
  %8164 = trunc i64 %8159 to i32
  %8165 = inttoptr i64 %8161 to i32*
  %8166 = load i32, i32* %8165
  %8167 = add i32 %8166, %8164
  %8168 = zext i32 %8167 to i64
  store i64 %8168, i64* %RDX, align 8, !tbaa !2428
  %8169 = icmp ult i32 %8167, %8164
  %8170 = icmp ult i32 %8167, %8166
  %8171 = or i1 %8169, %8170
  %8172 = zext i1 %8171 to i8
  %8173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8172, i8* %8173, align 1, !tbaa !2432
  %8174 = and i32 %8167, 255
  %8175 = call i32 @llvm.ctpop.i32(i32 %8174) #16
  %8176 = trunc i32 %8175 to i8
  %8177 = and i8 %8176, 1
  %8178 = xor i8 %8177, 1
  %8179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8178, i8* %8179, align 1, !tbaa !2446
  %8180 = xor i32 %8166, %8164
  %8181 = xor i32 %8180, %8167
  %8182 = lshr i32 %8181, 4
  %8183 = trunc i32 %8182 to i8
  %8184 = and i8 %8183, 1
  %8185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8184, i8* %8185, align 1, !tbaa !2447
  %8186 = icmp eq i32 %8167, 0
  %8187 = zext i1 %8186 to i8
  %8188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8187, i8* %8188, align 1, !tbaa !2448
  %8189 = lshr i32 %8167, 31
  %8190 = trunc i32 %8189 to i8
  %8191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8190, i8* %8191, align 1, !tbaa !2449
  %8192 = lshr i32 %8164, 31
  %8193 = lshr i32 %8166, 31
  %8194 = xor i32 %8189, %8192
  %8195 = xor i32 %8189, %8193
  %8196 = add nuw nsw i32 %8194, %8195
  %8197 = icmp eq i32 %8196, 2
  %8198 = zext i1 %8197 to i8
  %8199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8198, i8* %8199, align 1, !tbaa !2450
  %8200 = load i64, i64* %RDX
  %8201 = load i64, i64* %RBP
  %8202 = sub i64 %8201, 16
  %8203 = load i64, i64* %PC
  %8204 = add i64 %8203, 3
  store i64 %8204, i64* %PC
  %8205 = trunc i64 %8200 to i32
  %8206 = inttoptr i64 %8202 to i32*
  %8207 = load i32, i32* %8206
  %8208 = sub i32 %8205, %8207
  %8209 = zext i32 %8208 to i64
  store i64 %8209, i64* %RDX, align 8, !tbaa !2428
  %8210 = icmp ult i32 %8205, %8207
  %8211 = zext i1 %8210 to i8
  %8212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8211, i8* %8212, align 1, !tbaa !2432
  %8213 = and i32 %8208, 255
  %8214 = call i32 @llvm.ctpop.i32(i32 %8213) #16
  %8215 = trunc i32 %8214 to i8
  %8216 = and i8 %8215, 1
  %8217 = xor i8 %8216, 1
  %8218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8217, i8* %8218, align 1, !tbaa !2446
  %8219 = xor i32 %8207, %8205
  %8220 = xor i32 %8219, %8208
  %8221 = lshr i32 %8220, 4
  %8222 = trunc i32 %8221 to i8
  %8223 = and i8 %8222, 1
  %8224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8223, i8* %8224, align 1, !tbaa !2447
  %8225 = icmp eq i32 %8208, 0
  %8226 = zext i1 %8225 to i8
  %8227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8226, i8* %8227, align 1, !tbaa !2448
  %8228 = lshr i32 %8208, 31
  %8229 = trunc i32 %8228 to i8
  %8230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8229, i8* %8230, align 1, !tbaa !2449
  %8231 = lshr i32 %8205, 31
  %8232 = lshr i32 %8207, 31
  %8233 = xor i32 %8232, %8231
  %8234 = xor i32 %8228, %8231
  %8235 = add nuw nsw i32 %8234, %8233
  %8236 = icmp eq i32 %8235, 2
  %8237 = zext i1 %8236 to i8
  %8238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8237, i8* %8238, align 1, !tbaa !2450
  %8239 = load i32, i32* %EDX
  %8240 = zext i32 %8239 to i64
  %8241 = load i64, i64* %PC
  %8242 = add i64 %8241, 3
  store i64 %8242, i64* %PC
  %8243 = shl i64 %8240, 32
  %8244 = ashr exact i64 %8243, 32
  store i64 %8244, i64* %RDI, align 8, !tbaa !2428
  %8245 = load i64, i64* %R8
  %8246 = load i64, i64* %RDI
  %8247 = mul i64 %8246, 4
  %8248 = add i64 %8247, %8245
  %8249 = load i32, i32* %ECX
  %8250 = zext i32 %8249 to i64
  %8251 = load i64, i64* %PC
  %8252 = add i64 %8251, 4
  store i64 %8252, i64* %PC
  %8253 = inttoptr i64 %8248 to i32*
  store i32 %8249, i32* %8253
  br label %block_400d91

block_401444:                                     ; preds = %block_401437
  %8254 = add i64 %3206, 4
  store i64 %8254, i64* %PC
  %8255 = inttoptr i64 %3205 to i32*
  %8256 = load i32, i32* %8255
  %8257 = sext i32 %8256 to i64
  store i64 %8257, i64* %RAX, align 8, !tbaa !2428
  %8258 = load i64, i64* %RBP
  %8259 = load i64, i64* %RAX
  %8260 = mul i64 %8259, 4
  %8261 = add i64 %8258, -2640
  %8262 = add i64 %8261, %8260
  %8263 = load i64, i64* %PC
  %8264 = add i64 %8263, 11
  store i64 %8264, i64* %PC
  %8265 = inttoptr i64 %8262 to i32*
  store i32 0, i32* %8265
  %8266 = load i64, i64* %RBP
  %8267 = sub i64 %8266, 4
  %8268 = load i64, i64* %PC
  %8269 = add i64 %8268, 4
  store i64 %8269, i64* %PC
  %8270 = inttoptr i64 %8267 to i32*
  %8271 = load i32, i32* %8270
  %8272 = sext i32 %8271 to i64
  store i64 %8272, i64* %RAX, align 8, !tbaa !2428
  %8273 = load i64, i64* %RAX
  %8274 = mul i64 %8273, 4
  %8275 = add i64 %8274, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %8276 = load i64, i64* %PC
  %8277 = add i64 %8276, 8
  store i64 %8277, i64* %PC
  %8278 = inttoptr i64 %8275 to i32*
  %8279 = load i32, i32* %8278
  %8280 = sub i32 %8279, -1
  %8281 = icmp ult i32 %8279, -1
  %8282 = zext i1 %8281 to i8
  %8283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8282, i8* %8283, align 1, !tbaa !2432
  %8284 = and i32 %8280, 255
  %8285 = call i32 @llvm.ctpop.i32(i32 %8284) #16
  %8286 = trunc i32 %8285 to i8
  %8287 = and i8 %8286, 1
  %8288 = xor i8 %8287, 1
  %8289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8288, i8* %8289, align 1, !tbaa !2446
  %8290 = xor i32 %8279, -1
  %8291 = xor i32 %8290, %8280
  %8292 = lshr i32 %8291, 4
  %8293 = trunc i32 %8292 to i8
  %8294 = and i8 %8293, 1
  %8295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8294, i8* %8295, align 1, !tbaa !2447
  %8296 = icmp eq i32 %8280, 0
  %8297 = zext i1 %8296 to i8
  %8298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8297, i8* %8298, align 1, !tbaa !2448
  %8299 = lshr i32 %8280, 31
  %8300 = trunc i32 %8299 to i8
  %8301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8300, i8* %8301, align 1, !tbaa !2449
  %8302 = lshr i32 %8279, 31
  %8303 = xor i32 %8302, 1
  %8304 = xor i32 %8299, %8302
  %8305 = add nuw nsw i32 %8304, %8303
  %8306 = icmp eq i32 %8305, 2
  %8307 = zext i1 %8306 to i8
  %8308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8307, i8* %8308, align 1, !tbaa !2450
  %8309 = load i64, i64* %PC
  %8310 = add i64 %8309, 41
  %8311 = load i64, i64* %PC
  %8312 = add i64 %8311, 6
  %8313 = load i64, i64* %PC
  %8314 = add i64 %8313, 6
  store i64 %8314, i64* %PC
  %8315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8316 = load i8, i8* %8315, align 1, !tbaa !2448
  store i8 %8316, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8318 = icmp ne i8 %8316, 0
  %8319 = select i1 %8318, i64 %8310, i64 %8312
  store i64 %8319, i64* %8317, align 8, !tbaa !2428
  %8320 = load i8, i8* %BRANCH_TAKEN
  %8321 = icmp eq i8 %8320, 1
  %8322 = load i64, i64* %RBP
  %8323 = sub i64 %8322, 4
  %8324 = load i64, i64* %PC
  %8325 = add i64 %8324, 4
  store i64 %8325, i64* %PC
  %8326 = inttoptr i64 %8323 to i32*
  %8327 = load i32, i32* %8326
  %8328 = sext i32 %8327 to i64
  store i64 %8328, i64* %RAX, align 8, !tbaa !2428
  %8329 = load i64, i64* %RAX
  %8330 = mul i64 %8329, 4
  %8331 = add i64 %8330, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %8332 = load i64, i64* %PC
  br i1 %8321, label %block_401488, label %block_401465

block_400a8a:                                     ; preds = %block_400a54
  %8333 = sub i64 %7586, 1328
  %8334 = load i64, i64* %PC
  %8335 = add i64 %8334, 10
  store i64 %8335, i64* %PC
  %8336 = inttoptr i64 %8333 to i32*
  store i32 0, i32* %8336
  %8337 = load i64, i64* %RBP
  %8338 = sub i64 %8337, 1324
  %8339 = load i64, i64* %PC
  %8340 = add i64 %8339, 10
  store i64 %8340, i64* %PC
  %8341 = inttoptr i64 %8338 to i32*
  store i32 0, i32* %8341
  %8342 = load i64, i64* %RBP
  %8343 = sub i64 %8342, 1408
  %8344 = load i64, i64* %PC
  %8345 = add i64 %8344, 10
  store i64 %8345, i64* %PC
  %8346 = inttoptr i64 %8343 to i32*
  store i32 -1, i32* %8346
  %8347 = load i64, i64* %RBP
  %8348 = sub i64 %8347, 1404
  %8349 = load i64, i64* %PC
  %8350 = add i64 %8349, 10
  store i64 %8350, i64* %PC
  %8351 = inttoptr i64 %8348 to i32*
  store i32 0, i32* %8351
  %8352 = load i64, i64* %RBP
  %8353 = sub i64 %8352, 12
  %8354 = load i64, i64* %PC
  %8355 = add i64 %8354, 7
  store i64 %8355, i64* %PC
  %8356 = inttoptr i64 %8353 to i32*
  store i32 0, i32* %8356
  br label %block_400ab9

block_40183d:                                     ; preds = %block_401838, %block_4017c8
  %MEMORY.41 = phi %struct.Memory* [ %MEMORY.3, %block_401838 ], [ %MEMORY.4, %block_4017c8 ]
  %8357 = load i64, i64* %RSP
  %8358 = load i64, i64* %PC
  %8359 = add i64 %8358, 7
  store i64 %8359, i64* %PC
  %8360 = add i64 2608, %8357
  store i64 %8360, i64* %RSP, align 8, !tbaa !2428
  %8361 = icmp ult i64 %8360, %8357
  %8362 = icmp ult i64 %8360, 2608
  %8363 = or i1 %8361, %8362
  %8364 = zext i1 %8363 to i8
  %8365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8364, i8* %8365, align 1, !tbaa !2432
  %8366 = trunc i64 %8360 to i32
  %8367 = and i32 %8366, 255
  %8368 = call i32 @llvm.ctpop.i32(i32 %8367) #16
  %8369 = trunc i32 %8368 to i8
  %8370 = and i8 %8369, 1
  %8371 = xor i8 %8370, 1
  %8372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8371, i8* %8372, align 1, !tbaa !2446
  %8373 = xor i64 2608, %8357
  %8374 = xor i64 %8373, %8360
  %8375 = lshr i64 %8374, 4
  %8376 = trunc i64 %8375 to i8
  %8377 = and i8 %8376, 1
  %8378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8377, i8* %8378, align 1, !tbaa !2447
  %8379 = icmp eq i64 %8360, 0
  %8380 = zext i1 %8379 to i8
  %8381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8380, i8* %8381, align 1, !tbaa !2448
  %8382 = lshr i64 %8360, 63
  %8383 = trunc i64 %8382 to i8
  %8384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8383, i8* %8384, align 1, !tbaa !2449
  %8385 = lshr i64 %8357, 63
  %8386 = xor i64 %8382, %8385
  %8387 = add nuw nsw i64 %8386, %8382
  %8388 = icmp eq i64 %8387, 2
  %8389 = zext i1 %8388 to i8
  %8390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8389, i8* %8390, align 1, !tbaa !2450
  %8391 = load i64, i64* %PC
  %8392 = add i64 %8391, 1
  store i64 %8392, i64* %PC
  %8393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8394 = load i64, i64* %8393, align 8, !tbaa !2428
  %8395 = add i64 %8394, 8
  %8396 = inttoptr i64 %8394 to i64*
  %8397 = load i64, i64* %8396
  store i64 %8397, i64* %RBP, align 8, !tbaa !2428
  store i64 %8395, i64* %8393, align 8, !tbaa !2428
  %8398 = load i64, i64* %PC
  %8399 = add i64 %8398, 1
  store i64 %8399, i64* %PC
  %8400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8402 = load i64, i64* %8401, align 8, !tbaa !2428
  %8403 = inttoptr i64 %8402 to i64*
  %8404 = load i64, i64* %8403
  store i64 %8404, i64* %8400, align 8, !tbaa !2428
  %8405 = add i64 %8402, 8
  store i64 %8405, i64* %8401, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.41

block_400b8b:                                     ; preds = %block_400bc7, %block_400b82
  %MEMORY.42 = phi %struct.Memory* [ %MEMORY.30, %block_400b82 ], [ %MEMORY.25, %block_400bc7 ]
  %8406 = load i64, i64* %RAX
  %8407 = load i32, i32* %EAX
  %8408 = zext i32 %8407 to i64
  %8409 = load i64, i64* %PC
  %8410 = add i64 %8409, 2
  store i64 %8410, i64* %PC
  %8411 = xor i64 %8408, %8406
  %8412 = trunc i64 %8411 to i32
  %8413 = and i64 %8411, 4294967295
  store i64 %8413, i64* %RAX, align 8, !tbaa !2428
  %8414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8414, align 1, !tbaa !2432
  %8415 = and i32 %8412, 255
  %8416 = call i32 @llvm.ctpop.i32(i32 %8415) #16
  %8417 = trunc i32 %8416 to i8
  %8418 = and i8 %8417, 1
  %8419 = xor i8 %8418, 1
  %8420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8419, i8* %8420, align 1, !tbaa !2446
  %8421 = icmp eq i32 %8412, 0
  %8422 = zext i1 %8421 to i8
  %8423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8422, i8* %8423, align 1, !tbaa !2448
  %8424 = lshr i32 %8412, 31
  %8425 = trunc i32 %8424 to i8
  %8426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8425, i8* %8426, align 1, !tbaa !2449
  %8427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8427, align 1, !tbaa !2450
  %8428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8428, align 1, !tbaa !2447
  %8429 = load i8, i8* %AL
  %8430 = zext i8 %8429 to i64
  %8431 = load i64, i64* %PC
  %8432 = add i64 %8431, 2
  store i64 %8432, i64* %PC
  store i8 %8429, i8* %CL, align 1, !tbaa !2451
  %8433 = load i64, i64* %RBP
  %8434 = sub i64 %8433, 16
  %8435 = load i64, i64* %PC
  %8436 = add i64 %8435, 4
  store i64 %8436, i64* %PC
  %8437 = inttoptr i64 %8434 to i32*
  %8438 = load i32, i32* %8437
  %8439 = sext i32 %8438 to i64
  store i64 %8439, i64* %RDX, align 8, !tbaa !2428
  %8440 = load i64, i64* %RBP
  %8441 = load i64, i64* %RDX
  %8442 = mul i64 %8441, 4
  %8443 = add i64 %8440, -1248
  %8444 = add i64 %8443, %8442
  %8445 = load i64, i64* %PC
  %8446 = add i64 %8445, 8
  store i64 %8446, i64* %PC
  %8447 = inttoptr i64 %8444 to i32*
  %8448 = load i32, i32* %8447
  %8449 = sub i32 %8448, -1
  %8450 = icmp ult i32 %8448, -1
  %8451 = zext i1 %8450 to i8
  %8452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8451, i8* %8452, align 1, !tbaa !2432
  %8453 = and i32 %8449, 255
  %8454 = call i32 @llvm.ctpop.i32(i32 %8453) #16
  %8455 = trunc i32 %8454 to i8
  %8456 = and i8 %8455, 1
  %8457 = xor i8 %8456, 1
  %8458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8457, i8* %8458, align 1, !tbaa !2446
  %8459 = xor i32 %8448, -1
  %8460 = xor i32 %8459, %8449
  %8461 = lshr i32 %8460, 4
  %8462 = trunc i32 %8461 to i8
  %8463 = and i8 %8462, 1
  %8464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8463, i8* %8464, align 1, !tbaa !2447
  %8465 = icmp eq i32 %8449, 0
  %8466 = zext i1 %8465 to i8
  %8467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8466, i8* %8467, align 1, !tbaa !2448
  %8468 = lshr i32 %8449, 31
  %8469 = trunc i32 %8468 to i8
  %8470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8469, i8* %8470, align 1, !tbaa !2449
  %8471 = lshr i32 %8448, 31
  %8472 = xor i32 %8471, 1
  %8473 = xor i32 %8468, %8471
  %8474 = add nuw nsw i32 %8473, %8472
  %8475 = icmp eq i32 %8474, 2
  %8476 = zext i1 %8475 to i8
  %8477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8476, i8* %8477, align 1, !tbaa !2450
  %8478 = load i64, i64* %RBP
  %8479 = sub i64 %8478, 2693
  %8480 = load i8, i8* %CL
  %8481 = zext i8 %8480 to i64
  %8482 = load i64, i64* %PC
  %8483 = add i64 %8482, 6
  store i64 %8483, i64* %PC
  %8484 = inttoptr i64 %8479 to i8*
  store i8 %8480, i8* %8484
  %8485 = load i64, i64* %PC
  %8486 = add i64 %8485, 19
  %8487 = load i64, i64* %PC
  %8488 = add i64 %8487, 6
  %8489 = load i64, i64* %PC
  %8490 = add i64 %8489, 6
  store i64 %8490, i64* %PC
  %8491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8492 = load i8, i8* %8491, align 1, !tbaa !2448
  %8493 = icmp eq i8 %8492, 0
  %8494 = zext i1 %8493 to i8
  store i8 %8494, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8496 = select i1 %8493, i64 %8486, i64 %8488
  store i64 %8496, i64* %8495, align 8, !tbaa !2428
  %8497 = load i8, i8* %BRANCH_TAKEN
  %8498 = icmp eq i8 %8497, 1
  br i1 %8498, label %block_400bb4, label %block_400ba7

block_40135f:                                     ; preds = %block_401353
  %8499 = sub i64 %11418, 8
  %8500 = load i64, i64* %PC
  %8501 = add i64 %8500, 4
  store i64 %8501, i64* %PC
  %8502 = inttoptr i64 %8499 to i32*
  %8503 = load i32, i32* %8502
  %8504 = sext i32 %8503 to i64
  store i64 %8504, i64* %RAX, align 8, !tbaa !2428
  %8505 = load i64, i64* %RBP
  %8506 = load i64, i64* %RAX
  %8507 = mul i64 %8506, 4
  %8508 = add i64 %8505, -1488
  %8509 = add i64 %8508, %8507
  %8510 = load i64, i64* %PC
  %8511 = add i64 %8510, 8
  store i64 %8511, i64* %PC
  %8512 = inttoptr i64 %8509 to i32*
  %8513 = load i32, i32* %8512
  %8514 = sub i32 %8513, -1
  %8515 = icmp ult i32 %8513, -1
  %8516 = zext i1 %8515 to i8
  %8517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8516, i8* %8517, align 1, !tbaa !2432
  %8518 = and i32 %8514, 255
  %8519 = call i32 @llvm.ctpop.i32(i32 %8518) #16
  %8520 = trunc i32 %8519 to i8
  %8521 = and i8 %8520, 1
  %8522 = xor i8 %8521, 1
  %8523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8522, i8* %8523, align 1, !tbaa !2446
  %8524 = xor i32 %8513, -1
  %8525 = xor i32 %8524, %8514
  %8526 = lshr i32 %8525, 4
  %8527 = trunc i32 %8526 to i8
  %8528 = and i8 %8527, 1
  %8529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8528, i8* %8529, align 1, !tbaa !2447
  %8530 = icmp eq i32 %8514, 0
  %8531 = zext i1 %8530 to i8
  %8532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8531, i8* %8532, align 1, !tbaa !2448
  %8533 = lshr i32 %8514, 31
  %8534 = trunc i32 %8533 to i8
  %8535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8534, i8* %8535, align 1, !tbaa !2449
  %8536 = lshr i32 %8513, 31
  %8537 = xor i32 %8536, 1
  %8538 = xor i32 %8533, %8536
  %8539 = add nuw nsw i32 %8538, %8537
  %8540 = icmp eq i32 %8539, 2
  %8541 = zext i1 %8540 to i8
  %8542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8541, i8* %8542, align 1, !tbaa !2450
  %8543 = load i64, i64* %PC
  %8544 = add i64 %8543, 134
  %8545 = load i64, i64* %PC
  %8546 = add i64 %8545, 6
  %8547 = load i64, i64* %PC
  %8548 = add i64 %8547, 6
  store i64 %8548, i64* %PC
  %8549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8550 = load i8, i8* %8549, align 1, !tbaa !2448
  store i8 %8550, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8552 = icmp ne i8 %8550, 0
  %8553 = select i1 %8552, i64 %8544, i64 %8546
  store i64 %8553, i64* %8551, align 8, !tbaa !2428
  %8554 = load i8, i8* %BRANCH_TAKEN
  %8555 = icmp eq i8 %8554, 1
  br i1 %8555, label %block_4013f1, label %block_401371

block_400e3a:                                     ; preds = %block_400e35, %block_400b7d
  %MEMORY.43 = phi %struct.Memory* [ %MEMORY.21, %block_400e35 ], [ %MEMORY.47, %block_400b7d ]
  %8556 = load i64, i64* %RBP
  %8557 = sub i64 %8556, 12
  %8558 = load i64, i64* %PC
  %8559 = add i64 %8558, 3
  store i64 %8559, i64* %PC
  %8560 = inttoptr i64 %8557 to i32*
  %8561 = load i32, i32* %8560
  %8562 = zext i32 %8561 to i64
  store i64 %8562, i64* %RAX, align 8, !tbaa !2428
  %8563 = load i64, i64* %RBP
  %8564 = sub i64 %8563, 12
  %8565 = load i64, i64* %PC
  %8566 = add i64 %8565, 3
  store i64 %8566, i64* %PC
  %8567 = inttoptr i64 %8564 to i32*
  %8568 = load i32, i32* %8567
  %8569 = zext i32 %8568 to i64
  store i64 %8569, i64* %RCX, align 8, !tbaa !2428
  %8570 = load i64, i64* %RCX
  %8571 = load i64, i64* %PC
  %8572 = add i64 %8571, 3
  store i64 %8572, i64* %PC
  %8573 = trunc i64 %8570 to i32
  %8574 = add i32 1, %8573
  %8575 = zext i32 %8574 to i64
  store i64 %8575, i64* %RCX, align 8, !tbaa !2428
  %8576 = icmp ult i32 %8574, %8573
  %8577 = icmp ult i32 %8574, 1
  %8578 = or i1 %8576, %8577
  %8579 = zext i1 %8578 to i8
  %8580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8579, i8* %8580, align 1, !tbaa !2432
  %8581 = and i32 %8574, 255
  %8582 = call i32 @llvm.ctpop.i32(i32 %8581) #16
  %8583 = trunc i32 %8582 to i8
  %8584 = and i8 %8583, 1
  %8585 = xor i8 %8584, 1
  %8586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8585, i8* %8586, align 1, !tbaa !2446
  %8587 = xor i64 1, %8570
  %8588 = trunc i64 %8587 to i32
  %8589 = xor i32 %8588, %8574
  %8590 = lshr i32 %8589, 4
  %8591 = trunc i32 %8590 to i8
  %8592 = and i8 %8591, 1
  %8593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8592, i8* %8593, align 1, !tbaa !2447
  %8594 = icmp eq i32 %8574, 0
  %8595 = zext i1 %8594 to i8
  %8596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8595, i8* %8596, align 1, !tbaa !2448
  %8597 = lshr i32 %8574, 31
  %8598 = trunc i32 %8597 to i8
  %8599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8598, i8* %8599, align 1, !tbaa !2449
  %8600 = lshr i32 %8573, 31
  %8601 = xor i32 %8597, %8600
  %8602 = add nuw nsw i32 %8601, %8597
  %8603 = icmp eq i32 %8602, 2
  %8604 = zext i1 %8603 to i8
  %8605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8604, i8* %8605, align 1, !tbaa !2450
  %8606 = load i32, i32* %ECX
  %8607 = zext i32 %8606 to i64
  %8608 = load i64, i64* %PC
  %8609 = add i64 %8608, 3
  store i64 %8609, i64* %PC
  %8610 = shl i64 %8607, 32
  %8611 = ashr exact i64 %8610, 32
  store i64 %8611, i64* %RDX, align 8, !tbaa !2428
  %8612 = load i64, i64* %RAX
  %8613 = load i64, i64* %RBP
  %8614 = load i64, i64* %RDX
  %8615 = mul i64 %8614, 4
  %8616 = add i64 %8613, -1328
  %8617 = add i64 %8616, %8615
  %8618 = load i64, i64* %PC
  %8619 = add i64 %8618, 7
  store i64 %8619, i64* %PC
  %8620 = trunc i64 %8612 to i32
  %8621 = inttoptr i64 %8617 to i32*
  %8622 = load i32, i32* %8621
  %8623 = sub i32 %8620, %8622
  %8624 = zext i32 %8623 to i64
  store i64 %8624, i64* %RAX, align 8, !tbaa !2428
  %8625 = icmp ult i32 %8620, %8622
  %8626 = zext i1 %8625 to i8
  %8627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8626, i8* %8627, align 1, !tbaa !2432
  %8628 = and i32 %8623, 255
  %8629 = call i32 @llvm.ctpop.i32(i32 %8628) #16
  %8630 = trunc i32 %8629 to i8
  %8631 = and i8 %8630, 1
  %8632 = xor i8 %8631, 1
  %8633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8632, i8* %8633, align 1, !tbaa !2446
  %8634 = xor i32 %8622, %8620
  %8635 = xor i32 %8634, %8623
  %8636 = lshr i32 %8635, 4
  %8637 = trunc i32 %8636 to i8
  %8638 = and i8 %8637, 1
  %8639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8638, i8* %8639, align 1, !tbaa !2447
  %8640 = icmp eq i32 %8623, 0
  %8641 = zext i1 %8640 to i8
  %8642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8641, i8* %8642, align 1, !tbaa !2448
  %8643 = lshr i32 %8623, 31
  %8644 = trunc i32 %8643 to i8
  %8645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8644, i8* %8645, align 1, !tbaa !2449
  %8646 = lshr i32 %8620, 31
  %8647 = lshr i32 %8622, 31
  %8648 = xor i32 %8647, %8646
  %8649 = xor i32 %8643, %8646
  %8650 = add nuw nsw i32 %8649, %8648
  %8651 = icmp eq i32 %8650, 2
  %8652 = zext i1 %8651 to i8
  %8653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8652, i8* %8653, align 1, !tbaa !2450
  %8654 = load i64, i64* %RBP
  %8655 = sub i64 %8654, 12
  %8656 = load i64, i64* %PC
  %8657 = add i64 %8656, 3
  store i64 %8657, i64* %PC
  %8658 = inttoptr i64 %8655 to i32*
  %8659 = load i32, i32* %8658
  %8660 = zext i32 %8659 to i64
  store i64 %8660, i64* %RCX, align 8, !tbaa !2428
  %8661 = load i64, i64* %RCX
  %8662 = load i64, i64* %PC
  %8663 = add i64 %8662, 3
  store i64 %8663, i64* %PC
  %8664 = trunc i64 %8661 to i32
  %8665 = add i32 1, %8664
  %8666 = zext i32 %8665 to i64
  store i64 %8666, i64* %RCX, align 8, !tbaa !2428
  %8667 = icmp ult i32 %8665, %8664
  %8668 = icmp ult i32 %8665, 1
  %8669 = or i1 %8667, %8668
  %8670 = zext i1 %8669 to i8
  %8671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8670, i8* %8671, align 1, !tbaa !2432
  %8672 = and i32 %8665, 255
  %8673 = call i32 @llvm.ctpop.i32(i32 %8672) #16
  %8674 = trunc i32 %8673 to i8
  %8675 = and i8 %8674, 1
  %8676 = xor i8 %8675, 1
  %8677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8676, i8* %8677, align 1, !tbaa !2446
  %8678 = xor i64 1, %8661
  %8679 = trunc i64 %8678 to i32
  %8680 = xor i32 %8679, %8665
  %8681 = lshr i32 %8680, 4
  %8682 = trunc i32 %8681 to i8
  %8683 = and i8 %8682, 1
  %8684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8683, i8* %8684, align 1, !tbaa !2447
  %8685 = icmp eq i32 %8665, 0
  %8686 = zext i1 %8685 to i8
  %8687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8686, i8* %8687, align 1, !tbaa !2448
  %8688 = lshr i32 %8665, 31
  %8689 = trunc i32 %8688 to i8
  %8690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8689, i8* %8690, align 1, !tbaa !2449
  %8691 = lshr i32 %8664, 31
  %8692 = xor i32 %8688, %8691
  %8693 = add nuw nsw i32 %8692, %8688
  %8694 = icmp eq i32 %8693, 2
  %8695 = zext i1 %8694 to i8
  %8696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8695, i8* %8696, align 1, !tbaa !2450
  %8697 = load i32, i32* %ECX
  %8698 = zext i32 %8697 to i64
  %8699 = load i64, i64* %PC
  %8700 = add i64 %8699, 3
  store i64 %8700, i64* %PC
  %8701 = shl i64 %8698, 32
  %8702 = ashr exact i64 %8701, 32
  store i64 %8702, i64* %RDX, align 8, !tbaa !2428
  %8703 = load i64, i64* %RBP
  %8704 = load i64, i64* %RDX
  %8705 = mul i64 %8704, 4
  %8706 = add i64 %8703, -1408
  %8707 = add i64 %8706, %8705
  %8708 = load i32, i32* %EAX
  %8709 = zext i32 %8708 to i64
  %8710 = load i64, i64* %PC
  %8711 = add i64 %8710, 7
  store i64 %8711, i64* %PC
  %8712 = inttoptr i64 %8707 to i32*
  store i32 %8708, i32* %8712
  %8713 = load i64, i64* %RBP
  %8714 = sub i64 %8713, 12
  %8715 = load i64, i64* %PC
  %8716 = add i64 %8715, 4
  store i64 %8716, i64* %PC
  %8717 = inttoptr i64 %8714 to i32*
  %8718 = load i32, i32* %8717
  %8719 = sub i32 %8718, 16
  %8720 = icmp ult i32 %8718, 16
  %8721 = zext i1 %8720 to i8
  %8722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8721, i8* %8722, align 1, !tbaa !2432
  %8723 = and i32 %8719, 255
  %8724 = call i32 @llvm.ctpop.i32(i32 %8723) #16
  %8725 = trunc i32 %8724 to i8
  %8726 = and i8 %8725, 1
  %8727 = xor i8 %8726, 1
  %8728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8727, i8* %8728, align 1, !tbaa !2446
  %8729 = xor i32 %8718, 16
  %8730 = xor i32 %8729, %8719
  %8731 = lshr i32 %8730, 4
  %8732 = trunc i32 %8731 to i8
  %8733 = and i8 %8732, 1
  %8734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8733, i8* %8734, align 1, !tbaa !2447
  %8735 = icmp eq i32 %8719, 0
  %8736 = zext i1 %8735 to i8
  %8737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8736, i8* %8737, align 1, !tbaa !2448
  %8738 = lshr i32 %8719, 31
  %8739 = trunc i32 %8738 to i8
  %8740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8739, i8* %8740, align 1, !tbaa !2449
  %8741 = lshr i32 %8718, 31
  %8742 = xor i32 %8738, %8741
  %8743 = add nuw nsw i32 %8742, %8741
  %8744 = icmp eq i32 %8743, 2
  %8745 = zext i1 %8744 to i8
  %8746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8745, i8* %8746, align 1, !tbaa !2450
  %8747 = load i64, i64* %PC
  %8748 = add i64 %8747, 362
  %8749 = load i64, i64* %PC
  %8750 = add i64 %8749, 6
  %8751 = load i64, i64* %PC
  %8752 = add i64 %8751, 6
  store i64 %8752, i64* %PC
  %8753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8754 = load i8, i8* %8753, align 1, !tbaa !2449
  %8755 = icmp ne i8 %8754, 0
  %8756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8757 = load i8, i8* %8756, align 1, !tbaa !2450
  %8758 = icmp ne i8 %8757, 0
  %8759 = xor i1 %8755, %8758
  %8760 = xor i1 %8759, true
  %8761 = zext i1 %8760 to i8
  store i8 %8761, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8763 = select i1 %8759, i64 %8750, i64 %8748
  store i64 %8763, i64* %8762, align 8, !tbaa !2428
  %8764 = load i8, i8* %BRANCH_TAKEN
  %8765 = icmp eq i8 %8764, 1
  br i1 %8765, label %block_400fcb, label %block_400e67

block_4016ea:                                     ; preds = %block_40173b, %block_4016e3
  %MEMORY.44 = phi %struct.Memory* [ %MEMORY.37, %block_4016e3 ], [ %MEMORY.14, %block_40173b ]
  %8766 = load i64, i64* %RBP
  %8767 = sub i64 %8766, 4
  %8768 = load i64, i64* %PC
  %8769 = add i64 %8768, 7
  store i64 %8769, i64* %PC
  %8770 = inttoptr i64 %8767 to i32*
  %8771 = load i32, i32* %8770
  %8772 = sub i32 %8771, 255
  %8773 = icmp ult i32 %8771, 255
  %8774 = zext i1 %8773 to i8
  %8775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8774, i8* %8775, align 1, !tbaa !2432
  %8776 = and i32 %8772, 255
  %8777 = call i32 @llvm.ctpop.i32(i32 %8776) #16
  %8778 = trunc i32 %8777 to i8
  %8779 = and i8 %8778, 1
  %8780 = xor i8 %8779, 1
  %8781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8780, i8* %8781, align 1, !tbaa !2446
  %8782 = xor i32 %8771, 255
  %8783 = xor i32 %8782, %8772
  %8784 = lshr i32 %8783, 4
  %8785 = trunc i32 %8784 to i8
  %8786 = and i8 %8785, 1
  %8787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8786, i8* %8787, align 1, !tbaa !2447
  %8788 = icmp eq i32 %8772, 0
  %8789 = zext i1 %8788 to i8
  %8790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8789, i8* %8790, align 1, !tbaa !2448
  %8791 = lshr i32 %8772, 31
  %8792 = trunc i32 %8791 to i8
  %8793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8792, i8* %8793, align 1, !tbaa !2449
  %8794 = lshr i32 %8771, 31
  %8795 = xor i32 %8791, %8794
  %8796 = add nuw nsw i32 %8795, %8794
  %8797 = icmp eq i32 %8796, 2
  %8798 = zext i1 %8797 to i8
  %8799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8798, i8* %8799, align 1, !tbaa !2450
  %8800 = load i64, i64* %PC
  %8801 = add i64 %8800, 93
  %8802 = load i64, i64* %PC
  %8803 = add i64 %8802, 6
  %8804 = load i64, i64* %PC
  %8805 = add i64 %8804, 6
  store i64 %8805, i64* %PC
  %8806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8807 = load i8, i8* %8806, align 1, !tbaa !2449
  %8808 = icmp ne i8 %8807, 0
  %8809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8810 = load i8, i8* %8809, align 1, !tbaa !2450
  %8811 = icmp ne i8 %8810, 0
  %8812 = xor i1 %8808, %8811
  %8813 = xor i1 %8812, true
  %8814 = zext i1 %8813 to i8
  store i8 %8814, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8816 = select i1 %8812, i64 %8803, i64 %8801
  store i64 %8816, i64* %8815, align 8, !tbaa !2428
  %8817 = load i8, i8* %BRANCH_TAKEN
  %8818 = icmp eq i8 %8817, 1
  br i1 %8818, label %block_40174e, label %block_4016f7

block_400c7a:                                     ; preds = %block_400c36
  %8819 = sub i64 %10073, 16
  %8820 = load i64, i64* %PC
  %8821 = add i64 %8820, 4
  store i64 %8821, i64* %PC
  %8822 = inttoptr i64 %8819 to i32*
  %8823 = load i32, i32* %8822
  %8824 = sext i32 %8823 to i64
  store i64 %8824, i64* %RAX, align 8, !tbaa !2428
  %8825 = load i64, i64* %RBP
  %8826 = load i64, i64* %RAX
  %8827 = mul i64 %8826, 4
  %8828 = add i64 %8825, -1328
  %8829 = add i64 %8828, %8827
  %8830 = load i64, i64* %PC
  %8831 = add i64 %8830, 7
  store i64 %8831, i64* %PC
  %8832 = inttoptr i64 %8829 to i32*
  %8833 = load i32, i32* %8832
  %8834 = zext i32 %8833 to i64
  store i64 %8834, i64* %RCX, align 8, !tbaa !2428
  %8835 = load i64, i64* %RCX
  %8836 = load i64, i64* %RBP
  %8837 = sub i64 %8836, 12
  %8838 = load i64, i64* %PC
  %8839 = add i64 %8838, 3
  store i64 %8839, i64* %PC
  %8840 = trunc i64 %8835 to i32
  %8841 = inttoptr i64 %8837 to i32*
  %8842 = load i32, i32* %8841
  %8843 = add i32 %8842, %8840
  %8844 = zext i32 %8843 to i64
  store i64 %8844, i64* %RCX, align 8, !tbaa !2428
  %8845 = icmp ult i32 %8843, %8840
  %8846 = icmp ult i32 %8843, %8842
  %8847 = or i1 %8845, %8846
  %8848 = zext i1 %8847 to i8
  %8849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8848, i8* %8849, align 1, !tbaa !2432
  %8850 = and i32 %8843, 255
  %8851 = call i32 @llvm.ctpop.i32(i32 %8850) #16
  %8852 = trunc i32 %8851 to i8
  %8853 = and i8 %8852, 1
  %8854 = xor i8 %8853, 1
  %8855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8854, i8* %8855, align 1, !tbaa !2446
  %8856 = xor i32 %8842, %8840
  %8857 = xor i32 %8856, %8843
  %8858 = lshr i32 %8857, 4
  %8859 = trunc i32 %8858 to i8
  %8860 = and i8 %8859, 1
  %8861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8860, i8* %8861, align 1, !tbaa !2447
  %8862 = icmp eq i32 %8843, 0
  %8863 = zext i1 %8862 to i8
  %8864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8863, i8* %8864, align 1, !tbaa !2448
  %8865 = lshr i32 %8843, 31
  %8866 = trunc i32 %8865 to i8
  %8867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8866, i8* %8867, align 1, !tbaa !2449
  %8868 = lshr i32 %8840, 31
  %8869 = lshr i32 %8842, 31
  %8870 = xor i32 %8865, %8868
  %8871 = xor i32 %8865, %8869
  %8872 = add nuw nsw i32 %8870, %8871
  %8873 = icmp eq i32 %8872, 2
  %8874 = zext i1 %8873 to i8
  %8875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8874, i8* %8875, align 1, !tbaa !2450
  %8876 = load i64, i64* %RCX
  %8877 = load i64, i64* %RBP
  %8878 = sub i64 %8877, 16
  %8879 = load i64, i64* %PC
  %8880 = add i64 %8879, 3
  store i64 %8880, i64* %PC
  %8881 = trunc i64 %8876 to i32
  %8882 = inttoptr i64 %8878 to i32*
  %8883 = load i32, i32* %8882
  %8884 = sub i32 %8881, %8883
  %8885 = zext i32 %8884 to i64
  store i64 %8885, i64* %RCX, align 8, !tbaa !2428
  %8886 = icmp ult i32 %8881, %8883
  %8887 = zext i1 %8886 to i8
  %8888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8887, i8* %8888, align 1, !tbaa !2432
  %8889 = and i32 %8884, 255
  %8890 = call i32 @llvm.ctpop.i32(i32 %8889) #16
  %8891 = trunc i32 %8890 to i8
  %8892 = and i8 %8891, 1
  %8893 = xor i8 %8892, 1
  %8894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8893, i8* %8894, align 1, !tbaa !2446
  %8895 = xor i32 %8883, %8881
  %8896 = xor i32 %8895, %8884
  %8897 = lshr i32 %8896, 4
  %8898 = trunc i32 %8897 to i8
  %8899 = and i8 %8898, 1
  %8900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8899, i8* %8900, align 1, !tbaa !2447
  %8901 = icmp eq i32 %8884, 0
  %8902 = zext i1 %8901 to i8
  %8903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8902, i8* %8903, align 1, !tbaa !2448
  %8904 = lshr i32 %8884, 31
  %8905 = trunc i32 %8904 to i8
  %8906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8905, i8* %8906, align 1, !tbaa !2449
  %8907 = lshr i32 %8881, 31
  %8908 = lshr i32 %8883, 31
  %8909 = xor i32 %8908, %8907
  %8910 = xor i32 %8904, %8907
  %8911 = add nuw nsw i32 %8910, %8909
  %8912 = icmp eq i32 %8911, 2
  %8913 = zext i1 %8912 to i8
  %8914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8913, i8* %8914, align 1, !tbaa !2450
  %8915 = load i64, i64* %RBP
  %8916 = sub i64 %8915, 12
  %8917 = load i64, i64* %PC
  %8918 = add i64 %8917, 3
  store i64 %8918, i64* %PC
  %8919 = inttoptr i64 %8916 to i32*
  %8920 = load i32, i32* %8919
  %8921 = zext i32 %8920 to i64
  store i64 %8921, i64* %RDX, align 8, !tbaa !2428
  %8922 = load i64, i64* %RDX
  %8923 = load i64, i64* %PC
  %8924 = add i64 %8923, 3
  store i64 %8924, i64* %PC
  %8925 = trunc i64 %8922 to i32
  %8926 = add i32 1, %8925
  %8927 = zext i32 %8926 to i64
  store i64 %8927, i64* %RDX, align 8, !tbaa !2428
  %8928 = icmp ult i32 %8926, %8925
  %8929 = icmp ult i32 %8926, 1
  %8930 = or i1 %8928, %8929
  %8931 = zext i1 %8930 to i8
  %8932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8931, i8* %8932, align 1, !tbaa !2432
  %8933 = and i32 %8926, 255
  %8934 = call i32 @llvm.ctpop.i32(i32 %8933) #16
  %8935 = trunc i32 %8934 to i8
  %8936 = and i8 %8935, 1
  %8937 = xor i8 %8936, 1
  %8938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8937, i8* %8938, align 1, !tbaa !2446
  %8939 = xor i64 1, %8922
  %8940 = trunc i64 %8939 to i32
  %8941 = xor i32 %8940, %8926
  %8942 = lshr i32 %8941, 4
  %8943 = trunc i32 %8942 to i8
  %8944 = and i8 %8943, 1
  %8945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8944, i8* %8945, align 1, !tbaa !2447
  %8946 = icmp eq i32 %8926, 0
  %8947 = zext i1 %8946 to i8
  %8948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8947, i8* %8948, align 1, !tbaa !2448
  %8949 = lshr i32 %8926, 31
  %8950 = trunc i32 %8949 to i8
  %8951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8950, i8* %8951, align 1, !tbaa !2449
  %8952 = lshr i32 %8925, 31
  %8953 = xor i32 %8949, %8952
  %8954 = add nuw nsw i32 %8953, %8949
  %8955 = icmp eq i32 %8954, 2
  %8956 = zext i1 %8955 to i8
  %8957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8956, i8* %8957, align 1, !tbaa !2450
  %8958 = load i32, i32* %EDX
  %8959 = zext i32 %8958 to i64
  %8960 = load i64, i64* %PC
  %8961 = add i64 %8960, 3
  store i64 %8961, i64* %PC
  %8962 = shl i64 %8959, 32
  %8963 = ashr exact i64 %8962, 32
  store i64 %8963, i64* %RAX, align 8, !tbaa !2428
  %8964 = load i64, i64* %RBP
  %8965 = load i64, i64* %RAX
  %8966 = mul i64 %8965, 4
  %8967 = add i64 %8964, -1328
  %8968 = add i64 %8967, %8966
  %8969 = load i32, i32* %ECX
  %8970 = zext i32 %8969 to i64
  %8971 = load i64, i64* %PC
  %8972 = add i64 %8971, 7
  store i64 %8972, i64* %PC
  %8973 = inttoptr i64 %8968 to i32*
  store i32 %8969, i32* %8973
  br label %block_400c9b

block_401838:                                     ; preds = %block_4017d4
  %8974 = load i64, i64* %PC
  %8975 = add i64 %8974, 5
  %8976 = load i64, i64* %PC
  %8977 = add i64 %8976, 5
  store i64 %8977, i64* %PC
  %8978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8975, i64* %8978, align 8, !tbaa !2428
  br label %block_40183d

block_400b0a:                                     ; preds = %block_400af6
  %8979 = load i64, i64* %RBP
  %8980 = sub i64 %8979, 1168
  %8981 = load i64, i64* %PC
  %8982 = add i64 %8981, 7
  store i64 %8982, i64* %PC
  store i64 %8980, i64* %RAX, align 8, !tbaa !2428
  %8983 = load i64, i64* %RBP
  %8984 = sub i64 %8983, 12
  %8985 = load i64, i64* %PC
  %8986 = add i64 %8985, 4
  store i64 %8986, i64* %PC
  %8987 = inttoptr i64 %8984 to i32*
  %8988 = load i32, i32* %8987
  %8989 = sext i32 %8988 to i64
  store i64 %8989, i64* %RCX, align 8, !tbaa !2428
  %8990 = load i64, i64* %RCX
  %8991 = load i64, i64* %PC
  %8992 = add i64 %8991, 4
  store i64 %8992, i64* %PC
  %8993 = shl i64 %8990, 5
  %8994 = icmp slt i64 %8993, 0
  %8995 = shl i64 %8993, 1
  store i64 %8995, i64* %RCX, align 8, !tbaa !2428
  %8996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8997 = zext i1 %8994 to i8
  store i8 %8997, i8* %8996, align 1, !tbaa !2451
  %8998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8999 = trunc i64 %8995 to i32
  %9000 = and i32 %8999, 254
  %9001 = call i32 @llvm.ctpop.i32(i32 %9000) #16
  %9002 = trunc i32 %9001 to i8
  %9003 = and i8 %9002, 1
  %9004 = xor i8 %9003, 1
  store i8 %9004, i8* %8998, align 1, !tbaa !2451
  %9005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9005, align 1, !tbaa !2451
  %9006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9007 = icmp eq i64 %8995, 0
  %9008 = zext i1 %9007 to i8
  store i8 %9008, i8* %9006, align 1, !tbaa !2451
  %9009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9010 = lshr i64 %8995, 63
  %9011 = trunc i64 %9010 to i8
  store i8 %9011, i8* %9009, align 1, !tbaa !2451
  %9012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9012, align 1, !tbaa !2451
  %9013 = load i64, i64* %RAX
  %9014 = load i64, i64* %PC
  %9015 = add i64 %9014, 3
  store i64 %9015, i64* %PC
  store i64 %9013, i64* %RDX, align 8, !tbaa !2428
  %9016 = load i64, i64* %RDX
  %9017 = load i64, i64* %RCX
  %9018 = load i64, i64* %PC
  %9019 = add i64 %9018, 3
  store i64 %9019, i64* %PC
  %9020 = add i64 %9017, %9016
  store i64 %9020, i64* %RDX, align 8, !tbaa !2428
  %9021 = icmp ult i64 %9020, %9016
  %9022 = icmp ult i64 %9020, %9017
  %9023 = or i1 %9021, %9022
  %9024 = zext i1 %9023 to i8
  %9025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9024, i8* %9025, align 1, !tbaa !2432
  %9026 = trunc i64 %9020 to i32
  %9027 = and i32 %9026, 255
  %9028 = call i32 @llvm.ctpop.i32(i32 %9027) #16
  %9029 = trunc i32 %9028 to i8
  %9030 = and i8 %9029, 1
  %9031 = xor i8 %9030, 1
  %9032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9031, i8* %9032, align 1, !tbaa !2446
  %9033 = xor i64 %9017, %9016
  %9034 = xor i64 %9033, %9020
  %9035 = lshr i64 %9034, 4
  %9036 = trunc i64 %9035 to i8
  %9037 = and i8 %9036, 1
  %9038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9037, i8* %9038, align 1, !tbaa !2447
  %9039 = icmp eq i64 %9020, 0
  %9040 = zext i1 %9039 to i8
  %9041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9040, i8* %9041, align 1, !tbaa !2448
  %9042 = lshr i64 %9020, 63
  %9043 = trunc i64 %9042 to i8
  %9044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9043, i8* %9044, align 1, !tbaa !2449
  %9045 = lshr i64 %9016, 63
  %9046 = lshr i64 %9017, 63
  %9047 = xor i64 %9042, %9045
  %9048 = xor i64 %9042, %9046
  %9049 = add nuw nsw i64 %9047, %9048
  %9050 = icmp eq i64 %9049, 2
  %9051 = zext i1 %9050 to i8
  %9052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9051, i8* %9052, align 1, !tbaa !2450
  %9053 = load i64, i64* %RBP
  %9054 = sub i64 %9053, 4
  %9055 = load i64, i64* %PC
  %9056 = add i64 %9055, 4
  store i64 %9056, i64* %PC
  %9057 = inttoptr i64 %9054 to i32*
  %9058 = load i32, i32* %9057
  %9059 = sext i32 %9058 to i64
  store i64 %9059, i64* %RCX, align 8, !tbaa !2428
  %9060 = load i64, i64* %RDX
  %9061 = load i64, i64* %RCX
  %9062 = mul i64 %9061, 4
  %9063 = add i64 %9062, %9060
  %9064 = load i64, i64* %PC
  %9065 = add i64 %9064, 3
  store i64 %9065, i64* %PC
  %9066 = inttoptr i64 %9063 to i32*
  %9067 = load i32, i32* %9066
  %9068 = zext i32 %9067 to i64
  store i64 %9068, i64* %RSI, align 8, !tbaa !2428
  %9069 = load i64, i64* %RBP
  %9070 = sub i64 %9069, 12
  %9071 = load i64, i64* %PC
  %9072 = add i64 %9071, 3
  store i64 %9072, i64* %PC
  %9073 = inttoptr i64 %9070 to i32*
  %9074 = load i32, i32* %9073
  %9075 = zext i32 %9074 to i64
  store i64 %9075, i64* %RDI, align 8, !tbaa !2428
  %9076 = load i64, i64* %RDI
  %9077 = load i64, i64* %PC
  %9078 = add i64 %9077, 3
  store i64 %9078, i64* %PC
  %9079 = trunc i64 %9076 to i32
  %9080 = add i32 1, %9079
  %9081 = zext i32 %9080 to i64
  store i64 %9081, i64* %RDI, align 8, !tbaa !2428
  %9082 = icmp ult i32 %9080, %9079
  %9083 = icmp ult i32 %9080, 1
  %9084 = or i1 %9082, %9083
  %9085 = zext i1 %9084 to i8
  %9086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9085, i8* %9086, align 1, !tbaa !2432
  %9087 = and i32 %9080, 255
  %9088 = call i32 @llvm.ctpop.i32(i32 %9087) #16
  %9089 = trunc i32 %9088 to i8
  %9090 = and i8 %9089, 1
  %9091 = xor i8 %9090, 1
  %9092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9091, i8* %9092, align 1, !tbaa !2446
  %9093 = xor i64 1, %9076
  %9094 = trunc i64 %9093 to i32
  %9095 = xor i32 %9094, %9080
  %9096 = lshr i32 %9095, 4
  %9097 = trunc i32 %9096 to i8
  %9098 = and i8 %9097, 1
  %9099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9098, i8* %9099, align 1, !tbaa !2447
  %9100 = icmp eq i32 %9080, 0
  %9101 = zext i1 %9100 to i8
  %9102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9101, i8* %9102, align 1, !tbaa !2448
  %9103 = lshr i32 %9080, 31
  %9104 = trunc i32 %9103 to i8
  %9105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9104, i8* %9105, align 1, !tbaa !2449
  %9106 = lshr i32 %9079, 31
  %9107 = xor i32 %9103, %9106
  %9108 = add nuw nsw i32 %9107, %9103
  %9109 = icmp eq i32 %9108, 2
  %9110 = zext i1 %9109 to i8
  %9111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9110, i8* %9111, align 1, !tbaa !2450
  %9112 = load i32, i32* %EDI
  %9113 = zext i32 %9112 to i64
  %9114 = load i64, i64* %PC
  %9115 = add i64 %9114, 3
  store i64 %9115, i64* %PC
  %9116 = shl i64 %9113, 32
  %9117 = ashr exact i64 %9116, 32
  store i64 %9117, i64* %RCX, align 8, !tbaa !2428
  %9118 = load i64, i64* %RCX
  %9119 = load i64, i64* %PC
  %9120 = add i64 %9119, 4
  store i64 %9120, i64* %PC
  %9121 = shl i64 %9118, 5
  %9122 = icmp slt i64 %9121, 0
  %9123 = shl i64 %9121, 1
  store i64 %9123, i64* %RCX, align 8, !tbaa !2428
  %9124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9125 = zext i1 %9122 to i8
  store i8 %9125, i8* %9124, align 1, !tbaa !2451
  %9126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %9127 = trunc i64 %9123 to i32
  %9128 = and i32 %9127, 254
  %9129 = call i32 @llvm.ctpop.i32(i32 %9128) #16
  %9130 = trunc i32 %9129 to i8
  %9131 = and i8 %9130, 1
  %9132 = xor i8 %9131, 1
  store i8 %9132, i8* %9126, align 1, !tbaa !2451
  %9133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9133, align 1, !tbaa !2451
  %9134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9135 = icmp eq i64 %9123, 0
  %9136 = zext i1 %9135 to i8
  store i8 %9136, i8* %9134, align 1, !tbaa !2451
  %9137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9138 = lshr i64 %9123, 63
  %9139 = trunc i64 %9138 to i8
  store i8 %9139, i8* %9137, align 1, !tbaa !2451
  %9140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9140, align 1, !tbaa !2451
  %9141 = load i64, i64* %RAX
  %9142 = load i64, i64* %PC
  %9143 = add i64 %9142, 3
  store i64 %9143, i64* %PC
  store i64 %9141, i64* %RDX, align 8, !tbaa !2428
  %9144 = load i64, i64* %RDX
  %9145 = load i64, i64* %RCX
  %9146 = load i64, i64* %PC
  %9147 = add i64 %9146, 3
  store i64 %9147, i64* %PC
  %9148 = add i64 %9145, %9144
  store i64 %9148, i64* %RDX, align 8, !tbaa !2428
  %9149 = icmp ult i64 %9148, %9144
  %9150 = icmp ult i64 %9148, %9145
  %9151 = or i1 %9149, %9150
  %9152 = zext i1 %9151 to i8
  %9153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9152, i8* %9153, align 1, !tbaa !2432
  %9154 = trunc i64 %9148 to i32
  %9155 = and i32 %9154, 255
  %9156 = call i32 @llvm.ctpop.i32(i32 %9155) #16
  %9157 = trunc i32 %9156 to i8
  %9158 = and i8 %9157, 1
  %9159 = xor i8 %9158, 1
  %9160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9159, i8* %9160, align 1, !tbaa !2446
  %9161 = xor i64 %9145, %9144
  %9162 = xor i64 %9161, %9148
  %9163 = lshr i64 %9162, 4
  %9164 = trunc i64 %9163 to i8
  %9165 = and i8 %9164, 1
  %9166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9165, i8* %9166, align 1, !tbaa !2447
  %9167 = icmp eq i64 %9148, 0
  %9168 = zext i1 %9167 to i8
  %9169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9168, i8* %9169, align 1, !tbaa !2448
  %9170 = lshr i64 %9148, 63
  %9171 = trunc i64 %9170 to i8
  %9172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9171, i8* %9172, align 1, !tbaa !2449
  %9173 = lshr i64 %9144, 63
  %9174 = lshr i64 %9145, 63
  %9175 = xor i64 %9170, %9173
  %9176 = xor i64 %9170, %9174
  %9177 = add nuw nsw i64 %9175, %9176
  %9178 = icmp eq i64 %9177, 2
  %9179 = zext i1 %9178 to i8
  %9180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9179, i8* %9180, align 1, !tbaa !2450
  %9181 = load i64, i64* %RBP
  %9182 = sub i64 %9181, 4
  %9183 = load i64, i64* %PC
  %9184 = add i64 %9183, 4
  store i64 %9184, i64* %PC
  %9185 = inttoptr i64 %9182 to i32*
  %9186 = load i32, i32* %9185
  %9187 = sext i32 %9186 to i64
  store i64 %9187, i64* %RCX, align 8, !tbaa !2428
  %9188 = load i64, i64* %RDX
  %9189 = load i64, i64* %RCX
  %9190 = mul i64 %9189, 4
  %9191 = add i64 %9190, %9188
  %9192 = load i32, i32* %ESI
  %9193 = zext i32 %9192 to i64
  %9194 = load i64, i64* %PC
  %9195 = add i64 %9194, 3
  store i64 %9195, i64* %PC
  %9196 = inttoptr i64 %9191 to i32*
  store i32 %9192, i32* %9196
  %9197 = load i64, i64* %RBP
  %9198 = sub i64 %9197, 12
  %9199 = load i64, i64* %PC
  %9200 = add i64 %9199, 4
  store i64 %9200, i64* %PC
  %9201 = inttoptr i64 %9198 to i32*
  %9202 = load i32, i32* %9201
  %9203 = sext i32 %9202 to i64
  store i64 %9203, i64* %RCX, align 8, !tbaa !2428
  %9204 = load i64, i64* %RCX
  %9205 = load i64, i64* %PC
  %9206 = add i64 %9205, 4
  store i64 %9206, i64* %PC
  %9207 = shl i64 %9204, 5
  %9208 = icmp slt i64 %9207, 0
  %9209 = shl i64 %9207, 1
  store i64 %9209, i64* %RCX, align 8, !tbaa !2428
  %9210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9211 = zext i1 %9208 to i8
  store i8 %9211, i8* %9210, align 1, !tbaa !2451
  %9212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %9213 = trunc i64 %9209 to i32
  %9214 = and i32 %9213, 254
  %9215 = call i32 @llvm.ctpop.i32(i32 %9214) #16
  %9216 = trunc i32 %9215 to i8
  %9217 = and i8 %9216, 1
  %9218 = xor i8 %9217, 1
  store i8 %9218, i8* %9212, align 1, !tbaa !2451
  %9219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9219, align 1, !tbaa !2451
  %9220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9221 = icmp eq i64 %9209, 0
  %9222 = zext i1 %9221 to i8
  store i8 %9222, i8* %9220, align 1, !tbaa !2451
  %9223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9224 = lshr i64 %9209, 63
  %9225 = trunc i64 %9224 to i8
  store i8 %9225, i8* %9223, align 1, !tbaa !2451
  %9226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9226, align 1, !tbaa !2451
  %9227 = load i64, i64* %RAX
  %9228 = load i64, i64* %PC
  %9229 = add i64 %9228, 3
  store i64 %9229, i64* %PC
  store i64 %9227, i64* %RDX, align 8, !tbaa !2428
  %9230 = load i64, i64* %RDX
  %9231 = load i64, i64* %RCX
  %9232 = load i64, i64* %PC
  %9233 = add i64 %9232, 3
  store i64 %9233, i64* %PC
  %9234 = add i64 %9231, %9230
  store i64 %9234, i64* %RDX, align 8, !tbaa !2428
  %9235 = icmp ult i64 %9234, %9230
  %9236 = icmp ult i64 %9234, %9231
  %9237 = or i1 %9235, %9236
  %9238 = zext i1 %9237 to i8
  %9239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9238, i8* %9239, align 1, !tbaa !2432
  %9240 = trunc i64 %9234 to i32
  %9241 = and i32 %9240, 255
  %9242 = call i32 @llvm.ctpop.i32(i32 %9241) #16
  %9243 = trunc i32 %9242 to i8
  %9244 = and i8 %9243, 1
  %9245 = xor i8 %9244, 1
  %9246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9245, i8* %9246, align 1, !tbaa !2446
  %9247 = xor i64 %9231, %9230
  %9248 = xor i64 %9247, %9234
  %9249 = lshr i64 %9248, 4
  %9250 = trunc i64 %9249 to i8
  %9251 = and i8 %9250, 1
  %9252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9251, i8* %9252, align 1, !tbaa !2447
  %9253 = icmp eq i64 %9234, 0
  %9254 = zext i1 %9253 to i8
  %9255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9254, i8* %9255, align 1, !tbaa !2448
  %9256 = lshr i64 %9234, 63
  %9257 = trunc i64 %9256 to i8
  %9258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9257, i8* %9258, align 1, !tbaa !2449
  %9259 = lshr i64 %9230, 63
  %9260 = lshr i64 %9231, 63
  %9261 = xor i64 %9256, %9259
  %9262 = xor i64 %9256, %9260
  %9263 = add nuw nsw i64 %9261, %9262
  %9264 = icmp eq i64 %9263, 2
  %9265 = zext i1 %9264 to i8
  %9266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9265, i8* %9266, align 1, !tbaa !2450
  %9267 = load i64, i64* %RBP
  %9268 = sub i64 %9267, 4
  %9269 = load i64, i64* %PC
  %9270 = add i64 %9269, 4
  store i64 %9270, i64* %PC
  %9271 = inttoptr i64 %9268 to i32*
  %9272 = load i32, i32* %9271
  %9273 = sext i32 %9272 to i64
  store i64 %9273, i64* %RCX, align 8, !tbaa !2428
  %9274 = load i64, i64* %RDX
  %9275 = load i64, i64* %RCX
  %9276 = mul i64 %9275, 4
  %9277 = add i64 %9276, %9274
  %9278 = load i64, i64* %PC
  %9279 = add i64 %9278, 4
  store i64 %9279, i64* %PC
  %9280 = inttoptr i64 %9277 to i32*
  %9281 = load i32, i32* %9280
  %9282 = sext i32 %9281 to i64
  store i64 %9282, i64* %RCX, align 8, !tbaa !2428
  %9283 = load i64, i64* %RCX
  %9284 = mul i64 %9283, 4
  %9285 = add i64 %9284, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %9286 = load i64, i64* %PC
  %9287 = add i64 %9286, 7
  store i64 %9287, i64* %PC
  %9288 = inttoptr i64 %9285 to i32*
  %9289 = load i32, i32* %9288
  %9290 = zext i32 %9289 to i64
  store i64 %9290, i64* %RSI, align 8, !tbaa !2428
  %9291 = load i64, i64* %RBP
  %9292 = sub i64 %9291, 12
  %9293 = load i64, i64* %PC
  %9294 = add i64 %9293, 4
  store i64 %9294, i64* %PC
  %9295 = inttoptr i64 %9292 to i32*
  %9296 = load i32, i32* %9295
  %9297 = sext i32 %9296 to i64
  store i64 %9297, i64* %RCX, align 8, !tbaa !2428
  %9298 = load i64, i64* %RCX
  %9299 = load i64, i64* %PC
  %9300 = add i64 %9299, 4
  store i64 %9300, i64* %PC
  %9301 = shl i64 %9298, 5
  %9302 = icmp slt i64 %9301, 0
  %9303 = shl i64 %9301, 1
  store i64 %9303, i64* %RCX, align 8, !tbaa !2428
  %9304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9305 = zext i1 %9302 to i8
  store i8 %9305, i8* %9304, align 1, !tbaa !2451
  %9306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %9307 = trunc i64 %9303 to i32
  %9308 = and i32 %9307, 254
  %9309 = call i32 @llvm.ctpop.i32(i32 %9308) #16
  %9310 = trunc i32 %9309 to i8
  %9311 = and i8 %9310, 1
  %9312 = xor i8 %9311, 1
  store i8 %9312, i8* %9306, align 1, !tbaa !2451
  %9313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9313, align 1, !tbaa !2451
  %9314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9315 = icmp eq i64 %9303, 0
  %9316 = zext i1 %9315 to i8
  store i8 %9316, i8* %9314, align 1, !tbaa !2451
  %9317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9318 = lshr i64 %9303, 63
  %9319 = trunc i64 %9318 to i8
  store i8 %9319, i8* %9317, align 1, !tbaa !2451
  %9320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9320, align 1, !tbaa !2451
  %9321 = load i64, i64* %RAX
  %9322 = load i64, i64* %RCX
  %9323 = load i64, i64* %PC
  %9324 = add i64 %9323, 3
  store i64 %9324, i64* %PC
  %9325 = add i64 %9322, %9321
  store i64 %9325, i64* %RAX, align 8, !tbaa !2428
  %9326 = icmp ult i64 %9325, %9321
  %9327 = icmp ult i64 %9325, %9322
  %9328 = or i1 %9326, %9327
  %9329 = zext i1 %9328 to i8
  %9330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9329, i8* %9330, align 1, !tbaa !2432
  %9331 = trunc i64 %9325 to i32
  %9332 = and i32 %9331, 255
  %9333 = call i32 @llvm.ctpop.i32(i32 %9332) #16
  %9334 = trunc i32 %9333 to i8
  %9335 = and i8 %9334, 1
  %9336 = xor i8 %9335, 1
  %9337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9336, i8* %9337, align 1, !tbaa !2446
  %9338 = xor i64 %9322, %9321
  %9339 = xor i64 %9338, %9325
  %9340 = lshr i64 %9339, 4
  %9341 = trunc i64 %9340 to i8
  %9342 = and i8 %9341, 1
  %9343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9342, i8* %9343, align 1, !tbaa !2447
  %9344 = icmp eq i64 %9325, 0
  %9345 = zext i1 %9344 to i8
  %9346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9345, i8* %9346, align 1, !tbaa !2448
  %9347 = lshr i64 %9325, 63
  %9348 = trunc i64 %9347 to i8
  %9349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9348, i8* %9349, align 1, !tbaa !2449
  %9350 = lshr i64 %9321, 63
  %9351 = lshr i64 %9322, 63
  %9352 = xor i64 %9347, %9350
  %9353 = xor i64 %9347, %9351
  %9354 = add nuw nsw i64 %9352, %9353
  %9355 = icmp eq i64 %9354, 2
  %9356 = zext i1 %9355 to i8
  %9357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9356, i8* %9357, align 1, !tbaa !2450
  %9358 = load i64, i64* %RBP
  %9359 = sub i64 %9358, 4
  %9360 = load i64, i64* %PC
  %9361 = add i64 %9360, 4
  store i64 %9361, i64* %PC
  %9362 = inttoptr i64 %9359 to i32*
  %9363 = load i32, i32* %9362
  %9364 = sext i32 %9363 to i64
  store i64 %9364, i64* %RCX, align 8, !tbaa !2428
  %9365 = load i64, i64* %RAX
  %9366 = load i64, i64* %RCX
  %9367 = mul i64 %9366, 4
  %9368 = add i64 %9367, %9365
  %9369 = load i32, i32* %ESI
  %9370 = zext i32 %9369 to i64
  %9371 = load i64, i64* %PC
  %9372 = add i64 %9371, 3
  store i64 %9372, i64* %PC
  %9373 = inttoptr i64 %9368 to i32*
  store i32 %9369, i32* %9373
  %9374 = load i64, i64* %RBP
  %9375 = sub i64 %9374, 4
  %9376 = load i64, i64* %PC
  %9377 = add i64 %9376, 3
  store i64 %9377, i64* %PC
  %9378 = inttoptr i64 %9375 to i32*
  %9379 = load i32, i32* %9378
  %9380 = zext i32 %9379 to i64
  store i64 %9380, i64* %RAX, align 8, !tbaa !2428
  %9381 = load i64, i64* %RAX
  %9382 = load i64, i64* %PC
  %9383 = add i64 %9382, 3
  store i64 %9383, i64* %PC
  %9384 = trunc i64 %9381 to i32
  %9385 = add i32 1, %9384
  %9386 = zext i32 %9385 to i64
  store i64 %9386, i64* %RAX, align 8, !tbaa !2428
  %9387 = icmp ult i32 %9385, %9384
  %9388 = icmp ult i32 %9385, 1
  %9389 = or i1 %9387, %9388
  %9390 = zext i1 %9389 to i8
  %9391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9390, i8* %9391, align 1, !tbaa !2432
  %9392 = and i32 %9385, 255
  %9393 = call i32 @llvm.ctpop.i32(i32 %9392) #16
  %9394 = trunc i32 %9393 to i8
  %9395 = and i8 %9394, 1
  %9396 = xor i8 %9395, 1
  %9397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9396, i8* %9397, align 1, !tbaa !2446
  %9398 = xor i64 1, %9381
  %9399 = trunc i64 %9398 to i32
  %9400 = xor i32 %9399, %9385
  %9401 = lshr i32 %9400, 4
  %9402 = trunc i32 %9401 to i8
  %9403 = and i8 %9402, 1
  %9404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9403, i8* %9404, align 1, !tbaa !2447
  %9405 = icmp eq i32 %9385, 0
  %9406 = zext i1 %9405 to i8
  %9407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9406, i8* %9407, align 1, !tbaa !2448
  %9408 = lshr i32 %9385, 31
  %9409 = trunc i32 %9408 to i8
  %9410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9409, i8* %9410, align 1, !tbaa !2449
  %9411 = lshr i32 %9384, 31
  %9412 = xor i32 %9408, %9411
  %9413 = add nuw nsw i32 %9412, %9408
  %9414 = icmp eq i32 %9413, 2
  %9415 = zext i1 %9414 to i8
  %9416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9415, i8* %9416, align 1, !tbaa !2450
  %9417 = load i64, i64* %RBP
  %9418 = sub i64 %9417, 4
  %9419 = load i32, i32* %EAX
  %9420 = zext i32 %9419 to i64
  %9421 = load i64, i64* %PC
  %9422 = add i64 %9421, 3
  store i64 %9422, i64* %PC
  %9423 = inttoptr i64 %9418 to i32*
  store i32 %9419, i32* %9423
  %9424 = load i64, i64* %PC
  %9425 = sub i64 %9424, 130
  %9426 = load i64, i64* %PC
  %9427 = add i64 %9426, 5
  store i64 %9427, i64* %PC
  %9428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9425, i64* %9428, align 8, !tbaa !2428
  br label %block_400af6

block_401816:                                     ; preds = %block_4017e1
  %9429 = add i64 %6042, 11
  store i64 %9429, i64* %PC
  %9430 = inttoptr i64 %6041 to i32*
  store i32 0, i32* %9430
  br label %block_401825

block_401042:                                     ; preds = %block_40102e
  %9431 = sub i64 %10543, 1168
  %9432 = load i64, i64* %PC
  %9433 = add i64 %9432, 7
  store i64 %9433, i64* %PC
  store i64 %9431, i64* %RAX, align 8, !tbaa !2428
  %9434 = load i64, i64* %RBP
  %9435 = sub i64 %9434, 12
  %9436 = load i64, i64* %PC
  %9437 = add i64 %9436, 4
  store i64 %9437, i64* %PC
  %9438 = inttoptr i64 %9435 to i32*
  %9439 = load i32, i32* %9438
  %9440 = sext i32 %9439 to i64
  store i64 %9440, i64* %RCX, align 8, !tbaa !2428
  %9441 = load i64, i64* %RCX
  %9442 = load i64, i64* %PC
  %9443 = add i64 %9442, 4
  store i64 %9443, i64* %PC
  %9444 = shl i64 %9441, 5
  %9445 = icmp slt i64 %9444, 0
  %9446 = shl i64 %9444, 1
  store i64 %9446, i64* %RCX, align 8, !tbaa !2428
  %9447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9448 = zext i1 %9445 to i8
  store i8 %9448, i8* %9447, align 1, !tbaa !2451
  %9449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %9450 = trunc i64 %9446 to i32
  %9451 = and i32 %9450, 254
  %9452 = call i32 @llvm.ctpop.i32(i32 %9451) #16
  %9453 = trunc i32 %9452 to i8
  %9454 = and i8 %9453, 1
  %9455 = xor i8 %9454, 1
  store i8 %9455, i8* %9449, align 1, !tbaa !2451
  %9456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9456, align 1, !tbaa !2451
  %9457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9458 = icmp eq i64 %9446, 0
  %9459 = zext i1 %9458 to i8
  store i8 %9459, i8* %9457, align 1, !tbaa !2451
  %9460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9461 = lshr i64 %9446, 63
  %9462 = trunc i64 %9461 to i8
  store i8 %9462, i8* %9460, align 1, !tbaa !2451
  %9463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9463, align 1, !tbaa !2451
  %9464 = load i64, i64* %RAX
  %9465 = load i64, i64* %PC
  %9466 = add i64 %9465, 3
  store i64 %9466, i64* %PC
  store i64 %9464, i64* %RDX, align 8, !tbaa !2428
  %9467 = load i64, i64* %RDX
  %9468 = load i64, i64* %RCX
  %9469 = load i64, i64* %PC
  %9470 = add i64 %9469, 3
  store i64 %9470, i64* %PC
  %9471 = add i64 %9468, %9467
  store i64 %9471, i64* %RDX, align 8, !tbaa !2428
  %9472 = icmp ult i64 %9471, %9467
  %9473 = icmp ult i64 %9471, %9468
  %9474 = or i1 %9472, %9473
  %9475 = zext i1 %9474 to i8
  %9476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9475, i8* %9476, align 1, !tbaa !2432
  %9477 = trunc i64 %9471 to i32
  %9478 = and i32 %9477, 255
  %9479 = call i32 @llvm.ctpop.i32(i32 %9478) #16
  %9480 = trunc i32 %9479 to i8
  %9481 = and i8 %9480, 1
  %9482 = xor i8 %9481, 1
  %9483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9482, i8* %9483, align 1, !tbaa !2446
  %9484 = xor i64 %9468, %9467
  %9485 = xor i64 %9484, %9471
  %9486 = lshr i64 %9485, 4
  %9487 = trunc i64 %9486 to i8
  %9488 = and i8 %9487, 1
  %9489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9488, i8* %9489, align 1, !tbaa !2447
  %9490 = icmp eq i64 %9471, 0
  %9491 = zext i1 %9490 to i8
  %9492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9491, i8* %9492, align 1, !tbaa !2448
  %9493 = lshr i64 %9471, 63
  %9494 = trunc i64 %9493 to i8
  %9495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9494, i8* %9495, align 1, !tbaa !2449
  %9496 = lshr i64 %9467, 63
  %9497 = lshr i64 %9468, 63
  %9498 = xor i64 %9493, %9496
  %9499 = xor i64 %9493, %9497
  %9500 = add nuw nsw i64 %9498, %9499
  %9501 = icmp eq i64 %9500, 2
  %9502 = zext i1 %9501 to i8
  %9503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9502, i8* %9503, align 1, !tbaa !2450
  %9504 = load i64, i64* %RBP
  %9505 = sub i64 %9504, 4
  %9506 = load i64, i64* %PC
  %9507 = add i64 %9506, 4
  store i64 %9507, i64* %PC
  %9508 = inttoptr i64 %9505 to i32*
  %9509 = load i32, i32* %9508
  %9510 = sext i32 %9509 to i64
  store i64 %9510, i64* %RCX, align 8, !tbaa !2428
  %9511 = load i64, i64* %RDX
  %9512 = load i64, i64* %RCX
  %9513 = mul i64 %9512, 4
  %9514 = add i64 %9513, %9511
  %9515 = load i64, i64* %PC
  %9516 = add i64 %9515, 4
  store i64 %9516, i64* %PC
  %9517 = inttoptr i64 %9514 to i32*
  %9518 = load i32, i32* %9517
  %9519 = sext i32 %9518 to i64
  store i64 %9519, i64* %RCX, align 8, !tbaa !2428
  %9520 = load i64, i64* %RCX
  %9521 = mul i64 %9520, 4
  %9522 = add i64 %9521, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %9523 = load i64, i64* %PC
  %9524 = add i64 %9523, 7
  store i64 %9524, i64* %PC
  %9525 = inttoptr i64 %9522 to i32*
  %9526 = load i32, i32* %9525
  %9527 = zext i32 %9526 to i64
  store i64 %9527, i64* %RSI, align 8, !tbaa !2428
  %9528 = load i64, i64* %RBP
  %9529 = sub i64 %9528, 12
  %9530 = load i64, i64* %PC
  %9531 = add i64 %9530, 4
  store i64 %9531, i64* %PC
  %9532 = inttoptr i64 %9529 to i32*
  %9533 = load i32, i32* %9532
  %9534 = sext i32 %9533 to i64
  store i64 %9534, i64* %RCX, align 8, !tbaa !2428
  %9535 = load i64, i64* %RCX
  %9536 = load i64, i64* %PC
  %9537 = add i64 %9536, 4
  store i64 %9537, i64* %PC
  %9538 = shl i64 %9535, 5
  %9539 = icmp slt i64 %9538, 0
  %9540 = shl i64 %9538, 1
  store i64 %9540, i64* %RCX, align 8, !tbaa !2428
  %9541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9542 = zext i1 %9539 to i8
  store i8 %9542, i8* %9541, align 1, !tbaa !2451
  %9543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %9544 = trunc i64 %9540 to i32
  %9545 = and i32 %9544, 254
  %9546 = call i32 @llvm.ctpop.i32(i32 %9545) #16
  %9547 = trunc i32 %9546 to i8
  %9548 = and i8 %9547, 1
  %9549 = xor i8 %9548, 1
  store i8 %9549, i8* %9543, align 1, !tbaa !2451
  %9550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9550, align 1, !tbaa !2451
  %9551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9552 = icmp eq i64 %9540, 0
  %9553 = zext i1 %9552 to i8
  store i8 %9553, i8* %9551, align 1, !tbaa !2451
  %9554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9555 = lshr i64 %9540, 63
  %9556 = trunc i64 %9555 to i8
  store i8 %9556, i8* %9554, align 1, !tbaa !2451
  %9557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9557, align 1, !tbaa !2451
  %9558 = load i64, i64* %RAX
  %9559 = load i64, i64* %RCX
  %9560 = load i64, i64* %PC
  %9561 = add i64 %9560, 3
  store i64 %9561, i64* %PC
  %9562 = add i64 %9559, %9558
  store i64 %9562, i64* %RAX, align 8, !tbaa !2428
  %9563 = icmp ult i64 %9562, %9558
  %9564 = icmp ult i64 %9562, %9559
  %9565 = or i1 %9563, %9564
  %9566 = zext i1 %9565 to i8
  %9567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9566, i8* %9567, align 1, !tbaa !2432
  %9568 = trunc i64 %9562 to i32
  %9569 = and i32 %9568, 255
  %9570 = call i32 @llvm.ctpop.i32(i32 %9569) #16
  %9571 = trunc i32 %9570 to i8
  %9572 = and i8 %9571, 1
  %9573 = xor i8 %9572, 1
  %9574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9573, i8* %9574, align 1, !tbaa !2446
  %9575 = xor i64 %9559, %9558
  %9576 = xor i64 %9575, %9562
  %9577 = lshr i64 %9576, 4
  %9578 = trunc i64 %9577 to i8
  %9579 = and i8 %9578, 1
  %9580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9579, i8* %9580, align 1, !tbaa !2447
  %9581 = icmp eq i64 %9562, 0
  %9582 = zext i1 %9581 to i8
  %9583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9582, i8* %9583, align 1, !tbaa !2448
  %9584 = lshr i64 %9562, 63
  %9585 = trunc i64 %9584 to i8
  %9586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9585, i8* %9586, align 1, !tbaa !2449
  %9587 = lshr i64 %9558, 63
  %9588 = lshr i64 %9559, 63
  %9589 = xor i64 %9584, %9587
  %9590 = xor i64 %9584, %9588
  %9591 = add nuw nsw i64 %9589, %9590
  %9592 = icmp eq i64 %9591, 2
  %9593 = zext i1 %9592 to i8
  %9594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9593, i8* %9594, align 1, !tbaa !2450
  %9595 = load i64, i64* %RBP
  %9596 = sub i64 %9595, 4
  %9597 = load i64, i64* %PC
  %9598 = add i64 %9597, 4
  store i64 %9598, i64* %PC
  %9599 = inttoptr i64 %9596 to i32*
  %9600 = load i32, i32* %9599
  %9601 = sext i32 %9600 to i64
  store i64 %9601, i64* %RCX, align 8, !tbaa !2428
  %9602 = load i64, i64* %RAX
  %9603 = load i64, i64* %RCX
  %9604 = mul i64 %9603, 4
  %9605 = add i64 %9604, %9602
  %9606 = load i32, i32* %ESI
  %9607 = zext i32 %9606 to i64
  %9608 = load i64, i64* %PC
  %9609 = add i64 %9608, 3
  store i64 %9609, i64* %PC
  %9610 = inttoptr i64 %9605 to i32*
  store i32 %9606, i32* %9610
  %9611 = load i64, i64* %RBP
  %9612 = sub i64 %9611, 4
  %9613 = load i64, i64* %PC
  %9614 = add i64 %9613, 3
  store i64 %9614, i64* %PC
  %9615 = inttoptr i64 %9612 to i32*
  %9616 = load i32, i32* %9615
  %9617 = zext i32 %9616 to i64
  store i64 %9617, i64* %RAX, align 8, !tbaa !2428
  %9618 = load i64, i64* %RAX
  %9619 = load i64, i64* %PC
  %9620 = add i64 %9619, 3
  store i64 %9620, i64* %PC
  %9621 = trunc i64 %9618 to i32
  %9622 = add i32 1, %9621
  %9623 = zext i32 %9622 to i64
  store i64 %9623, i64* %RAX, align 8, !tbaa !2428
  %9624 = icmp ult i32 %9622, %9621
  %9625 = icmp ult i32 %9622, 1
  %9626 = or i1 %9624, %9625
  %9627 = zext i1 %9626 to i8
  %9628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9627, i8* %9628, align 1, !tbaa !2432
  %9629 = and i32 %9622, 255
  %9630 = call i32 @llvm.ctpop.i32(i32 %9629) #16
  %9631 = trunc i32 %9630 to i8
  %9632 = and i8 %9631, 1
  %9633 = xor i8 %9632, 1
  %9634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9633, i8* %9634, align 1, !tbaa !2446
  %9635 = xor i64 1, %9618
  %9636 = trunc i64 %9635 to i32
  %9637 = xor i32 %9636, %9622
  %9638 = lshr i32 %9637, 4
  %9639 = trunc i32 %9638 to i8
  %9640 = and i8 %9639, 1
  %9641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9640, i8* %9641, align 1, !tbaa !2447
  %9642 = icmp eq i32 %9622, 0
  %9643 = zext i1 %9642 to i8
  %9644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9643, i8* %9644, align 1, !tbaa !2448
  %9645 = lshr i32 %9622, 31
  %9646 = trunc i32 %9645 to i8
  %9647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9646, i8* %9647, align 1, !tbaa !2449
  %9648 = lshr i32 %9621, 31
  %9649 = xor i32 %9645, %9648
  %9650 = add nuw nsw i32 %9649, %9645
  %9651 = icmp eq i32 %9650, 2
  %9652 = zext i1 %9651 to i8
  %9653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9652, i8* %9653, align 1, !tbaa !2450
  %9654 = load i64, i64* %RBP
  %9655 = sub i64 %9654, 4
  %9656 = load i32, i32* %EAX
  %9657 = zext i32 %9656 to i64
  %9658 = load i64, i64* %PC
  %9659 = add i64 %9658, 3
  store i64 %9659, i64* %PC
  %9660 = inttoptr i64 %9655 to i32*
  store i32 %9656, i32* %9660
  %9661 = load i64, i64* %PC
  %9662 = sub i64 %9661, 83
  %9663 = load i64, i64* %PC
  %9664 = add i64 %9663, 5
  store i64 %9664, i64* %PC
  %9665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9662, i64* %9665, align 8, !tbaa !2428
  br label %block_40102e

block_401237:                                     ; preds = %block_401217
  %9666 = load i64, i64* %RBP
  %9667 = sub i64 %9666, 1168
  %9668 = load i64, i64* %PC
  %9669 = add i64 %9668, 7
  store i64 %9669, i64* %PC
  store i64 %9667, i64* %RAX, align 8, !tbaa !2428
  %9670 = load i64, i64* %RBP
  %9671 = sub i64 %9670, 4
  %9672 = load i64, i64* %PC
  %9673 = add i64 %9672, 4
  store i64 %9673, i64* %PC
  %9674 = inttoptr i64 %9671 to i32*
  %9675 = load i32, i32* %9674
  %9676 = sext i32 %9675 to i64
  store i64 %9676, i64* %RCX, align 8, !tbaa !2428
  %9677 = load i64, i64* %RBP
  %9678 = load i64, i64* %RCX
  %9679 = mul i64 %9678, 4
  %9680 = add i64 %9677, -1488
  %9681 = add i64 %9680, %9679
  %9682 = load i64, i64* %PC
  %9683 = add i64 %9682, 8
  store i64 %9683, i64* %PC
  %9684 = inttoptr i64 %9681 to i32*
  %9685 = load i32, i32* %9684
  %9686 = sext i32 %9685 to i64
  store i64 %9686, i64* %RCX, align 8, !tbaa !2428
  %9687 = load i64, i64* %RCX
  %9688 = mul i64 %9687, 4
  %9689 = add i64 %9688, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %9690 = load i64, i64* %PC
  %9691 = add i64 %9690, 7
  store i64 %9691, i64* %PC
  %9692 = inttoptr i64 %9689 to i32*
  %9693 = load i32, i32* %9692
  %9694 = zext i32 %9693 to i64
  store i64 %9694, i64* %RDX, align 8, !tbaa !2428
  %9695 = load i64, i64* %RBP
  %9696 = sub i64 %9695, 12
  %9697 = load i64, i64* %PC
  %9698 = add i64 %9697, 4
  store i64 %9698, i64* %PC
  %9699 = inttoptr i64 %9696 to i32*
  %9700 = load i32, i32* %9699
  %9701 = sext i32 %9700 to i64
  store i64 %9701, i64* %RCX, align 8, !tbaa !2428
  %9702 = load i64, i64* %RCX
  %9703 = load i64, i64* %PC
  %9704 = add i64 %9703, 4
  store i64 %9704, i64* %PC
  %9705 = shl i64 %9702, 5
  %9706 = icmp slt i64 %9705, 0
  %9707 = shl i64 %9705, 1
  store i64 %9707, i64* %RCX, align 8, !tbaa !2428
  %9708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9709 = zext i1 %9706 to i8
  store i8 %9709, i8* %9708, align 1, !tbaa !2451
  %9710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %9711 = trunc i64 %9707 to i32
  %9712 = and i32 %9711, 254
  %9713 = call i32 @llvm.ctpop.i32(i32 %9712) #16
  %9714 = trunc i32 %9713 to i8
  %9715 = and i8 %9714, 1
  %9716 = xor i8 %9715, 1
  store i8 %9716, i8* %9710, align 1, !tbaa !2451
  %9717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9717, align 1, !tbaa !2451
  %9718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9719 = icmp eq i64 %9707, 0
  %9720 = zext i1 %9719 to i8
  store i8 %9720, i8* %9718, align 1, !tbaa !2451
  %9721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9722 = lshr i64 %9707, 63
  %9723 = trunc i64 %9722 to i8
  store i8 %9723, i8* %9721, align 1, !tbaa !2451
  %9724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9724, align 1, !tbaa !2451
  %9725 = load i64, i64* %RAX
  %9726 = load i64, i64* %RCX
  %9727 = load i64, i64* %PC
  %9728 = add i64 %9727, 3
  store i64 %9728, i64* %PC
  %9729 = add i64 %9726, %9725
  store i64 %9729, i64* %RAX, align 8, !tbaa !2428
  %9730 = icmp ult i64 %9729, %9725
  %9731 = icmp ult i64 %9729, %9726
  %9732 = or i1 %9730, %9731
  %9733 = zext i1 %9732 to i8
  %9734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9733, i8* %9734, align 1, !tbaa !2432
  %9735 = trunc i64 %9729 to i32
  %9736 = and i32 %9735, 255
  %9737 = call i32 @llvm.ctpop.i32(i32 %9736) #16
  %9738 = trunc i32 %9737 to i8
  %9739 = and i8 %9738, 1
  %9740 = xor i8 %9739, 1
  %9741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9740, i8* %9741, align 1, !tbaa !2446
  %9742 = xor i64 %9726, %9725
  %9743 = xor i64 %9742, %9729
  %9744 = lshr i64 %9743, 4
  %9745 = trunc i64 %9744 to i8
  %9746 = and i8 %9745, 1
  %9747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9746, i8* %9747, align 1, !tbaa !2447
  %9748 = icmp eq i64 %9729, 0
  %9749 = zext i1 %9748 to i8
  %9750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9749, i8* %9750, align 1, !tbaa !2448
  %9751 = lshr i64 %9729, 63
  %9752 = trunc i64 %9751 to i8
  %9753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9752, i8* %9753, align 1, !tbaa !2449
  %9754 = lshr i64 %9725, 63
  %9755 = lshr i64 %9726, 63
  %9756 = xor i64 %9751, %9754
  %9757 = xor i64 %9751, %9755
  %9758 = add nuw nsw i64 %9756, %9757
  %9759 = icmp eq i64 %9758, 2
  %9760 = zext i1 %9759 to i8
  %9761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9760, i8* %9761, align 1, !tbaa !2450
  %9762 = load i64, i64* %RBP
  %9763 = sub i64 %9762, 4
  %9764 = load i64, i64* %PC
  %9765 = add i64 %9764, 4
  store i64 %9765, i64* %PC
  %9766 = inttoptr i64 %9763 to i32*
  %9767 = load i32, i32* %9766
  %9768 = sext i32 %9767 to i64
  store i64 %9768, i64* %RCX, align 8, !tbaa !2428
  %9769 = load i64, i64* %RAX
  %9770 = load i64, i64* %RCX
  %9771 = mul i64 %9770, 4
  %9772 = add i64 %9771, %9769
  %9773 = load i64, i64* %PC
  %9774 = add i64 %9773, 4
  store i64 %9774, i64* %PC
  %9775 = inttoptr i64 %9772 to i32*
  %9776 = load i32, i32* %9775
  %9777 = sext i32 %9776 to i64
  store i64 %9777, i64* %RAX, align 8, !tbaa !2428
  %9778 = load i64, i64* %RDX
  %9779 = load i64, i64* %RAX
  %9780 = mul i64 %9779, 4
  %9781 = add i64 %9780, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %9782 = load i64, i64* %PC
  %9783 = add i64 %9782, 7
  store i64 %9783, i64* %PC
  %9784 = trunc i64 %9778 to i32
  %9785 = inttoptr i64 %9781 to i32*
  %9786 = load i32, i32* %9785
  %9787 = xor i32 %9786, %9784
  %9788 = zext i32 %9787 to i64
  store i64 %9788, i64* %RDX, align 8, !tbaa !2428
  %9789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9789, align 1, !tbaa !2432
  %9790 = and i32 %9787, 255
  %9791 = call i32 @llvm.ctpop.i32(i32 %9790) #16
  %9792 = trunc i32 %9791 to i8
  %9793 = and i8 %9792, 1
  %9794 = xor i8 %9793, 1
  %9795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9794, i8* %9795, align 1, !tbaa !2446
  %9796 = icmp eq i32 %9787, 0
  %9797 = zext i1 %9796 to i8
  %9798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9797, i8* %9798, align 1, !tbaa !2448
  %9799 = lshr i32 %9787, 31
  %9800 = trunc i32 %9799 to i8
  %9801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9800, i8* %9801, align 1, !tbaa !2449
  %9802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9802, align 1, !tbaa !2450
  %9803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9803, align 1, !tbaa !2447
  %9804 = load i64, i64* %RBP
  %9805 = sub i64 %9804, 4
  %9806 = load i64, i64* %PC
  %9807 = add i64 %9806, 4
  store i64 %9807, i64* %PC
  %9808 = inttoptr i64 %9805 to i32*
  %9809 = load i32, i32* %9808
  %9810 = sext i32 %9809 to i64
  store i64 %9810, i64* %RAX, align 8, !tbaa !2428
  %9811 = load i64, i64* %RBP
  %9812 = load i64, i64* %RAX
  %9813 = mul i64 %9812, 4
  %9814 = add i64 %9811, -1616
  %9815 = add i64 %9814, %9813
  %9816 = load i32, i32* %EDX
  %9817 = zext i32 %9816 to i64
  %9818 = load i64, i64* %PC
  %9819 = add i64 %9818, 7
  store i64 %9819, i64* %PC
  %9820 = inttoptr i64 %9815 to i32*
  store i32 %9816, i32* %9820
  %9821 = load i64, i64* %PC
  %9822 = add i64 %9821, 214
  %9823 = load i64, i64* %PC
  %9824 = add i64 %9823, 5
  store i64 %9824, i64* %PC
  %9825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9822, i64* %9825, align 8, !tbaa !2428
  br label %block_40134c

block_4014b1:                                     ; preds = %block_4014aa, %block_4016cb
  %MEMORY.45 = phi %struct.Memory* [ %MEMORY.12, %block_4014aa ], [ %MEMORY.26, %block_4016cb ]
  %9826 = load i64, i64* %RBP
  %9827 = sub i64 %9826, 4
  %9828 = load i64, i64* %PC
  %9829 = add i64 %9828, 3
  store i64 %9829, i64* %PC
  %9830 = inttoptr i64 %9827 to i32*
  %9831 = load i32, i32* %9830
  %9832 = zext i32 %9831 to i64
  store i64 %9832, i64* %RAX, align 8, !tbaa !2428
  %9833 = load i64, i64* %RBP
  %9834 = sub i64 %9833, 12
  %9835 = load i64, i64* %PC
  %9836 = add i64 %9835, 4
  store i64 %9836, i64* %PC
  %9837 = inttoptr i64 %9834 to i32*
  %9838 = load i32, i32* %9837
  %9839 = sext i32 %9838 to i64
  store i64 %9839, i64* %RCX, align 8, !tbaa !2428
  %9840 = load i32, i32* %EAX
  %9841 = zext i32 %9840 to i64
  %9842 = load i64, i64* %RBP
  %9843 = load i64, i64* %RCX
  %9844 = mul i64 %9843, 4
  %9845 = add i64 %9842, -1328
  %9846 = add i64 %9845, %9844
  %9847 = load i64, i64* %PC
  %9848 = add i64 %9847, 7
  store i64 %9848, i64* %PC
  %9849 = inttoptr i64 %9846 to i32*
  %9850 = load i32, i32* %9849
  %9851 = sub i32 %9840, %9850
  %9852 = icmp ult i32 %9840, %9850
  %9853 = zext i1 %9852 to i8
  %9854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9853, i8* %9854, align 1, !tbaa !2432
  %9855 = and i32 %9851, 255
  %9856 = call i32 @llvm.ctpop.i32(i32 %9855) #16
  %9857 = trunc i32 %9856 to i8
  %9858 = and i8 %9857, 1
  %9859 = xor i8 %9858, 1
  %9860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9859, i8* %9860, align 1, !tbaa !2446
  %9861 = xor i32 %9850, %9840
  %9862 = xor i32 %9861, %9851
  %9863 = lshr i32 %9862, 4
  %9864 = trunc i32 %9863 to i8
  %9865 = and i8 %9864, 1
  %9866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9865, i8* %9866, align 1, !tbaa !2447
  %9867 = icmp eq i32 %9851, 0
  %9868 = zext i1 %9867 to i8
  %9869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9868, i8* %9869, align 1, !tbaa !2448
  %9870 = lshr i32 %9851, 31
  %9871 = trunc i32 %9870 to i8
  %9872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9871, i8* %9872, align 1, !tbaa !2449
  %9873 = lshr i32 %9840, 31
  %9874 = lshr i32 %9850, 31
  %9875 = xor i32 %9874, %9873
  %9876 = xor i32 %9870, %9873
  %9877 = add nuw nsw i32 %9876, %9875
  %9878 = icmp eq i32 %9877, 2
  %9879 = zext i1 %9878 to i8
  %9880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9879, i8* %9880, align 1, !tbaa !2450
  %9881 = load i64, i64* %PC
  %9882 = add i64 %9881, 543
  %9883 = load i64, i64* %PC
  %9884 = add i64 %9883, 6
  %9885 = load i64, i64* %PC
  %9886 = add i64 %9885, 6
  store i64 %9886, i64* %PC
  %9887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9888 = load i8, i8* %9887, align 1, !tbaa !2449
  %9889 = icmp ne i8 %9888, 0
  %9890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9891 = load i8, i8* %9890, align 1, !tbaa !2450
  %9892 = icmp ne i8 %9891, 0
  %9893 = xor i1 %9889, %9892
  %9894 = xor i1 %9893, true
  %9895 = zext i1 %9894 to i8
  store i8 %9895, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9897 = select i1 %9893, i64 %9884, i64 %9882
  store i64 %9897, i64* %9896, align 8, !tbaa !2428
  %9898 = load i8, i8* %BRANCH_TAKEN
  %9899 = icmp eq i8 %9898, 1
  br i1 %9899, label %block_4016de, label %block_4014c5

block_400c36:                                     ; preds = %block_400c31, %block_400bc2
  %MEMORY.46 = phi %struct.Memory* [ %MEMORY.25, %block_400bc2 ], [ %MEMORY.53, %block_400c31 ]
  %9900 = load i64, i64* %RBP
  %9901 = sub i64 %9900, 12
  %9902 = load i64, i64* %PC
  %9903 = add i64 %9902, 4
  store i64 %9903, i64* %PC
  %9904 = inttoptr i64 %9901 to i32*
  %9905 = load i32, i32* %9904
  %9906 = sext i32 %9905 to i64
  store i64 %9906, i64* %RAX, align 8, !tbaa !2428
  %9907 = load i64, i64* %RBP
  %9908 = load i64, i64* %RAX
  %9909 = mul i64 %9908, 4
  %9910 = add i64 %9907, -1328
  %9911 = add i64 %9910, %9909
  %9912 = load i64, i64* %PC
  %9913 = add i64 %9912, 7
  store i64 %9913, i64* %PC
  %9914 = inttoptr i64 %9911 to i32*
  %9915 = load i32, i32* %9914
  %9916 = zext i32 %9915 to i64
  store i64 %9916, i64* %RCX, align 8, !tbaa !2428
  %9917 = load i64, i64* %RBP
  %9918 = sub i64 %9917, 16
  %9919 = load i64, i64* %PC
  %9920 = add i64 %9919, 4
  store i64 %9920, i64* %PC
  %9921 = inttoptr i64 %9918 to i32*
  %9922 = load i32, i32* %9921
  %9923 = sext i32 %9922 to i64
  store i64 %9923, i64* %RAX, align 8, !tbaa !2428
  %9924 = load i64, i64* %RBP
  %9925 = load i64, i64* %RAX
  %9926 = mul i64 %9925, 4
  %9927 = add i64 %9924, -1328
  %9928 = add i64 %9927, %9926
  %9929 = load i64, i64* %PC
  %9930 = add i64 %9929, 7
  store i64 %9930, i64* %PC
  %9931 = inttoptr i64 %9928 to i32*
  %9932 = load i32, i32* %9931
  %9933 = zext i32 %9932 to i64
  store i64 %9933, i64* %RDX, align 8, !tbaa !2428
  %9934 = load i64, i64* %RDX
  %9935 = load i64, i64* %RBP
  %9936 = sub i64 %9935, 12
  %9937 = load i64, i64* %PC
  %9938 = add i64 %9937, 3
  store i64 %9938, i64* %PC
  %9939 = trunc i64 %9934 to i32
  %9940 = inttoptr i64 %9936 to i32*
  %9941 = load i32, i32* %9940
  %9942 = add i32 %9941, %9939
  %9943 = zext i32 %9942 to i64
  store i64 %9943, i64* %RDX, align 8, !tbaa !2428
  %9944 = icmp ult i32 %9942, %9939
  %9945 = icmp ult i32 %9942, %9941
  %9946 = or i1 %9944, %9945
  %9947 = zext i1 %9946 to i8
  %9948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9947, i8* %9948, align 1, !tbaa !2432
  %9949 = and i32 %9942, 255
  %9950 = call i32 @llvm.ctpop.i32(i32 %9949) #16
  %9951 = trunc i32 %9950 to i8
  %9952 = and i8 %9951, 1
  %9953 = xor i8 %9952, 1
  %9954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9953, i8* %9954, align 1, !tbaa !2446
  %9955 = xor i32 %9941, %9939
  %9956 = xor i32 %9955, %9942
  %9957 = lshr i32 %9956, 4
  %9958 = trunc i32 %9957 to i8
  %9959 = and i8 %9958, 1
  %9960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9959, i8* %9960, align 1, !tbaa !2447
  %9961 = icmp eq i32 %9942, 0
  %9962 = zext i1 %9961 to i8
  %9963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9962, i8* %9963, align 1, !tbaa !2448
  %9964 = lshr i32 %9942, 31
  %9965 = trunc i32 %9964 to i8
  %9966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9965, i8* %9966, align 1, !tbaa !2449
  %9967 = lshr i32 %9939, 31
  %9968 = lshr i32 %9941, 31
  %9969 = xor i32 %9964, %9967
  %9970 = xor i32 %9964, %9968
  %9971 = add nuw nsw i32 %9969, %9970
  %9972 = icmp eq i32 %9971, 2
  %9973 = zext i1 %9972 to i8
  %9974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9973, i8* %9974, align 1, !tbaa !2450
  %9975 = load i64, i64* %RDX
  %9976 = load i64, i64* %RBP
  %9977 = sub i64 %9976, 16
  %9978 = load i64, i64* %PC
  %9979 = add i64 %9978, 3
  store i64 %9979, i64* %PC
  %9980 = trunc i64 %9975 to i32
  %9981 = inttoptr i64 %9977 to i32*
  %9982 = load i32, i32* %9981
  %9983 = sub i32 %9980, %9982
  %9984 = zext i32 %9983 to i64
  store i64 %9984, i64* %RDX, align 8, !tbaa !2428
  %9985 = icmp ult i32 %9980, %9982
  %9986 = zext i1 %9985 to i8
  %9987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9986, i8* %9987, align 1, !tbaa !2432
  %9988 = and i32 %9983, 255
  %9989 = call i32 @llvm.ctpop.i32(i32 %9988) #16
  %9990 = trunc i32 %9989 to i8
  %9991 = and i8 %9990, 1
  %9992 = xor i8 %9991, 1
  %9993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9992, i8* %9993, align 1, !tbaa !2446
  %9994 = xor i32 %9982, %9980
  %9995 = xor i32 %9994, %9983
  %9996 = lshr i32 %9995, 4
  %9997 = trunc i32 %9996 to i8
  %9998 = and i8 %9997, 1
  %9999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9998, i8* %9999, align 1, !tbaa !2447
  %10000 = icmp eq i32 %9983, 0
  %10001 = zext i1 %10000 to i8
  %10002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10001, i8* %10002, align 1, !tbaa !2448
  %10003 = lshr i32 %9983, 31
  %10004 = trunc i32 %10003 to i8
  %10005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10004, i8* %10005, align 1, !tbaa !2449
  %10006 = lshr i32 %9980, 31
  %10007 = lshr i32 %9982, 31
  %10008 = xor i32 %10007, %10006
  %10009 = xor i32 %10003, %10006
  %10010 = add nuw nsw i32 %10009, %10008
  %10011 = icmp eq i32 %10010, 2
  %10012 = zext i1 %10011 to i8
  %10013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10012, i8* %10013, align 1, !tbaa !2450
  %10014 = load i32, i32* %ECX
  %10015 = zext i32 %10014 to i64
  %10016 = load i32, i32* %EDX
  %10017 = zext i32 %10016 to i64
  %10018 = load i64, i64* %PC
  %10019 = add i64 %10018, 2
  store i64 %10019, i64* %PC
  %10020 = sub i32 %10014, %10016
  %10021 = icmp ult i32 %10014, %10016
  %10022 = zext i1 %10021 to i8
  %10023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10022, i8* %10023, align 1, !tbaa !2432
  %10024 = and i32 %10020, 255
  %10025 = call i32 @llvm.ctpop.i32(i32 %10024) #16
  %10026 = trunc i32 %10025 to i8
  %10027 = and i8 %10026, 1
  %10028 = xor i8 %10027, 1
  %10029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10028, i8* %10029, align 1, !tbaa !2446
  %10030 = xor i64 %10017, %10015
  %10031 = trunc i64 %10030 to i32
  %10032 = xor i32 %10031, %10020
  %10033 = lshr i32 %10032, 4
  %10034 = trunc i32 %10033 to i8
  %10035 = and i8 %10034, 1
  %10036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10035, i8* %10036, align 1, !tbaa !2447
  %10037 = icmp eq i32 %10020, 0
  %10038 = zext i1 %10037 to i8
  %10039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10038, i8* %10039, align 1, !tbaa !2448
  %10040 = lshr i32 %10020, 31
  %10041 = trunc i32 %10040 to i8
  %10042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10041, i8* %10042, align 1, !tbaa !2449
  %10043 = lshr i32 %10014, 31
  %10044 = lshr i32 %10016, 31
  %10045 = xor i32 %10044, %10043
  %10046 = xor i32 %10040, %10043
  %10047 = add nuw nsw i32 %10046, %10045
  %10048 = icmp eq i32 %10047, 2
  %10049 = zext i1 %10048 to i8
  %10050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10049, i8* %10050, align 1, !tbaa !2450
  %10051 = load i64, i64* %PC
  %10052 = add i64 %10051, 38
  %10053 = load i64, i64* %PC
  %10054 = add i64 %10053, 6
  %10055 = load i64, i64* %PC
  %10056 = add i64 %10055, 6
  store i64 %10056, i64* %PC
  %10057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10058 = load i8, i8* %10057, align 1, !tbaa !2448
  %10059 = icmp ne i8 %10058, 0
  %10060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10061 = load i8, i8* %10060, align 1, !tbaa !2449
  %10062 = icmp ne i8 %10061, 0
  %10063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %10064 = load i8, i8* %10063, align 1, !tbaa !2450
  %10065 = icmp ne i8 %10064, 0
  %10066 = xor i1 %10062, %10065
  %10067 = or i1 %10059, %10066
  %10068 = zext i1 %10067 to i8
  store i8 %10068, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %10069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10070 = select i1 %10067, i64 %10052, i64 %10054
  store i64 %10070, i64* %10069, align 8, !tbaa !2428
  %10071 = load i8, i8* %BRANCH_TAKEN
  %10072 = icmp eq i8 %10071, 1
  %10073 = load i64, i64* %RBP
  br i1 %10072, label %block_400c7a, label %block_400c5a

block_400e35:                                     ; preds = %block_400dab
  %10074 = load i64, i64* %PC
  %10075 = add i64 %10074, 5
  %10076 = load i64, i64* %PC
  %10077 = add i64 %10076, 5
  store i64 %10077, i64* %PC
  %10078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10075, i64* %10078, align 8, !tbaa !2428
  br label %block_400e3a

block_400c31:                                     ; preds = %block_400c22
  %10079 = load i64, i64* %PC
  %10080 = add i64 %10079, 5
  %10081 = load i64, i64* %PC
  %10082 = add i64 %10081, 5
  store i64 %10082, i64* %PC
  %10083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10080, i64* %10083, align 8, !tbaa !2428
  br label %block_400c36

block_4012e2:                                     ; preds = %block_4012d0
  %10084 = load i64, i64* %RBP
  %10085 = sub i64 %10084, 1168
  %10086 = load i64, i64* %PC
  %10087 = add i64 %10086, 7
  store i64 %10087, i64* %PC
  store i64 %10085, i64* %RAX, align 8, !tbaa !2428
  %10088 = load i64, i64* %RBP
  %10089 = sub i64 %10088, 12
  %10090 = load i64, i64* %PC
  %10091 = add i64 %10090, 4
  store i64 %10091, i64* %PC
  %10092 = inttoptr i64 %10089 to i32*
  %10093 = load i32, i32* %10092
  %10094 = sext i32 %10093 to i64
  store i64 %10094, i64* %RCX, align 8, !tbaa !2428
  %10095 = load i64, i64* %RCX
  %10096 = load i64, i64* %PC
  %10097 = add i64 %10096, 4
  store i64 %10097, i64* %PC
  %10098 = shl i64 %10095, 5
  %10099 = icmp slt i64 %10098, 0
  %10100 = shl i64 %10098, 1
  store i64 %10100, i64* %RCX, align 8, !tbaa !2428
  %10101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %10102 = zext i1 %10099 to i8
  store i8 %10102, i8* %10101, align 1, !tbaa !2451
  %10103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %10104 = trunc i64 %10100 to i32
  %10105 = and i32 %10104, 254
  %10106 = call i32 @llvm.ctpop.i32(i32 %10105) #16
  %10107 = trunc i32 %10106 to i8
  %10108 = and i8 %10107, 1
  %10109 = xor i8 %10108, 1
  store i8 %10109, i8* %10103, align 1, !tbaa !2451
  %10110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10110, align 1, !tbaa !2451
  %10111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10112 = icmp eq i64 %10100, 0
  %10113 = zext i1 %10112 to i8
  store i8 %10113, i8* %10111, align 1, !tbaa !2451
  %10114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10115 = lshr i64 %10100, 63
  %10116 = trunc i64 %10115 to i8
  store i8 %10116, i8* %10114, align 1, !tbaa !2451
  %10117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %10117, align 1, !tbaa !2451
  %10118 = load i64, i64* %RAX
  %10119 = load i64, i64* %RCX
  %10120 = load i64, i64* %PC
  %10121 = add i64 %10120, 3
  store i64 %10121, i64* %PC
  %10122 = add i64 %10119, %10118
  store i64 %10122, i64* %RAX, align 8, !tbaa !2428
  %10123 = icmp ult i64 %10122, %10118
  %10124 = icmp ult i64 %10122, %10119
  %10125 = or i1 %10123, %10124
  %10126 = zext i1 %10125 to i8
  %10127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10126, i8* %10127, align 1, !tbaa !2432
  %10128 = trunc i64 %10122 to i32
  %10129 = and i32 %10128, 255
  %10130 = call i32 @llvm.ctpop.i32(i32 %10129) #16
  %10131 = trunc i32 %10130 to i8
  %10132 = and i8 %10131, 1
  %10133 = xor i8 %10132, 1
  %10134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10133, i8* %10134, align 1, !tbaa !2446
  %10135 = xor i64 %10119, %10118
  %10136 = xor i64 %10135, %10122
  %10137 = lshr i64 %10136, 4
  %10138 = trunc i64 %10137 to i8
  %10139 = and i8 %10138, 1
  %10140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10139, i8* %10140, align 1, !tbaa !2447
  %10141 = icmp eq i64 %10122, 0
  %10142 = zext i1 %10141 to i8
  %10143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10142, i8* %10143, align 1, !tbaa !2448
  %10144 = lshr i64 %10122, 63
  %10145 = trunc i64 %10144 to i8
  %10146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10145, i8* %10146, align 1, !tbaa !2449
  %10147 = lshr i64 %10118, 63
  %10148 = lshr i64 %10119, 63
  %10149 = xor i64 %10144, %10147
  %10150 = xor i64 %10144, %10148
  %10151 = add nuw nsw i64 %10149, %10150
  %10152 = icmp eq i64 %10151, 2
  %10153 = zext i1 %10152 to i8
  %10154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10153, i8* %10154, align 1, !tbaa !2450
  %10155 = load i64, i64* %RBP
  %10156 = sub i64 %10155, 4
  %10157 = load i64, i64* %PC
  %10158 = add i64 %10157, 4
  store i64 %10158, i64* %PC
  %10159 = inttoptr i64 %10156 to i32*
  %10160 = load i32, i32* %10159
  %10161 = sext i32 %10160 to i64
  store i64 %10161, i64* %RCX, align 8, !tbaa !2428
  %10162 = load i64, i64* %RAX
  %10163 = load i64, i64* %RCX
  %10164 = mul i64 %10163, 4
  %10165 = add i64 %10164, %10162
  %10166 = load i64, i64* %PC
  %10167 = add i64 %10166, 4
  store i64 %10167, i64* %PC
  %10168 = inttoptr i64 %10165 to i32*
  %10169 = load i32, i32* %10168
  %10170 = sub i32 %10169, -1
  %10171 = icmp ult i32 %10169, -1
  %10172 = zext i1 %10171 to i8
  %10173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10172, i8* %10173, align 1, !tbaa !2432
  %10174 = and i32 %10170, 255
  %10175 = call i32 @llvm.ctpop.i32(i32 %10174) #16
  %10176 = trunc i32 %10175 to i8
  %10177 = and i8 %10176, 1
  %10178 = xor i8 %10177, 1
  %10179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10178, i8* %10179, align 1, !tbaa !2446
  %10180 = xor i32 %10169, -1
  %10181 = xor i32 %10180, %10170
  %10182 = lshr i32 %10181, 4
  %10183 = trunc i32 %10182 to i8
  %10184 = and i8 %10183, 1
  %10185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10184, i8* %10185, align 1, !tbaa !2447
  %10186 = icmp eq i32 %10170, 0
  %10187 = zext i1 %10186 to i8
  %10188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10187, i8* %10188, align 1, !tbaa !2448
  %10189 = lshr i32 %10170, 31
  %10190 = trunc i32 %10189 to i8
  %10191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10190, i8* %10191, align 1, !tbaa !2449
  %10192 = lshr i32 %10169, 31
  %10193 = xor i32 %10192, 1
  %10194 = xor i32 %10189, %10192
  %10195 = add nuw nsw i32 %10194, %10193
  %10196 = icmp eq i32 %10195, 2
  %10197 = zext i1 %10196 to i8
  %10198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10197, i8* %10198, align 1, !tbaa !2450
  %10199 = load i64, i64* %PC
  %10200 = add i64 %10199, 55
  %10201 = load i64, i64* %PC
  %10202 = add i64 %10201, 6
  %10203 = load i64, i64* %PC
  %10204 = add i64 %10203, 6
  store i64 %10204, i64* %PC
  %10205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10206 = load i8, i8* %10205, align 1, !tbaa !2448
  store i8 %10206, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %10207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10208 = icmp ne i8 %10206, 0
  %10209 = select i1 %10208, i64 %10200, i64 %10202
  store i64 %10209, i64* %10207, align 8, !tbaa !2428
  %10210 = load i8, i8* %BRANCH_TAKEN
  %10211 = icmp eq i8 %10210, 1
  br i1 %10211, label %block_401333, label %block_401302

block_401430:                                     ; preds = %block_4011f1
  %10212 = add i64 %3434, 7
  store i64 %10212, i64* %PC
  %10213 = inttoptr i64 %3433 to i32*
  store i32 0, i32* %10213
  br label %block_401437

block_401371:                                     ; preds = %block_40135f
  %10214 = load i64, i64* %RBP
  %10215 = sub i64 %10214, 1168
  %10216 = load i64, i64* %PC
  %10217 = add i64 %10216, 7
  store i64 %10217, i64* %PC
  store i64 %10215, i64* %RAX, align 8, !tbaa !2428
  %10218 = load i64, i64* %RBP
  %10219 = sub i64 %10218, 12
  %10220 = load i64, i64* %PC
  %10221 = add i64 %10220, 4
  store i64 %10221, i64* %PC
  %10222 = inttoptr i64 %10219 to i32*
  %10223 = load i32, i32* %10222
  %10224 = sext i32 %10223 to i64
  store i64 %10224, i64* %RCX, align 8, !tbaa !2428
  %10225 = load i64, i64* %RCX
  %10226 = load i64, i64* %PC
  %10227 = add i64 %10226, 4
  store i64 %10227, i64* %PC
  %10228 = shl i64 %10225, 5
  %10229 = icmp slt i64 %10228, 0
  %10230 = shl i64 %10228, 1
  store i64 %10230, i64* %RCX, align 8, !tbaa !2428
  %10231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %10232 = zext i1 %10229 to i8
  store i8 %10232, i8* %10231, align 1, !tbaa !2451
  %10233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %10234 = trunc i64 %10230 to i32
  %10235 = and i32 %10234, 254
  %10236 = call i32 @llvm.ctpop.i32(i32 %10235) #16
  %10237 = trunc i32 %10236 to i8
  %10238 = and i8 %10237, 1
  %10239 = xor i8 %10238, 1
  store i8 %10239, i8* %10233, align 1, !tbaa !2451
  %10240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10240, align 1, !tbaa !2451
  %10241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10242 = icmp eq i64 %10230, 0
  %10243 = zext i1 %10242 to i8
  store i8 %10243, i8* %10241, align 1, !tbaa !2451
  %10244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10245 = lshr i64 %10230, 63
  %10246 = trunc i64 %10245 to i8
  store i8 %10246, i8* %10244, align 1, !tbaa !2451
  %10247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %10247, align 1, !tbaa !2451
  %10248 = load i64, i64* %RAX
  %10249 = load i64, i64* %RCX
  %10250 = load i64, i64* %PC
  %10251 = add i64 %10250, 3
  store i64 %10251, i64* %PC
  %10252 = add i64 %10249, %10248
  store i64 %10252, i64* %RAX, align 8, !tbaa !2428
  %10253 = icmp ult i64 %10252, %10248
  %10254 = icmp ult i64 %10252, %10249
  %10255 = or i1 %10253, %10254
  %10256 = zext i1 %10255 to i8
  %10257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10256, i8* %10257, align 1, !tbaa !2432
  %10258 = trunc i64 %10252 to i32
  %10259 = and i32 %10258, 255
  %10260 = call i32 @llvm.ctpop.i32(i32 %10259) #16
  %10261 = trunc i32 %10260 to i8
  %10262 = and i8 %10261, 1
  %10263 = xor i8 %10262, 1
  %10264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10263, i8* %10264, align 1, !tbaa !2446
  %10265 = xor i64 %10249, %10248
  %10266 = xor i64 %10265, %10252
  %10267 = lshr i64 %10266, 4
  %10268 = trunc i64 %10267 to i8
  %10269 = and i8 %10268, 1
  %10270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10269, i8* %10270, align 1, !tbaa !2447
  %10271 = icmp eq i64 %10252, 0
  %10272 = zext i1 %10271 to i8
  %10273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10272, i8* %10273, align 1, !tbaa !2448
  %10274 = lshr i64 %10252, 63
  %10275 = trunc i64 %10274 to i8
  %10276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10275, i8* %10276, align 1, !tbaa !2449
  %10277 = lshr i64 %10248, 63
  %10278 = lshr i64 %10249, 63
  %10279 = xor i64 %10274, %10277
  %10280 = xor i64 %10274, %10278
  %10281 = add nuw nsw i64 %10279, %10280
  %10282 = icmp eq i64 %10281, 2
  %10283 = zext i1 %10282 to i8
  %10284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10283, i8* %10284, align 1, !tbaa !2450
  %10285 = load i64, i64* %RBP
  %10286 = sub i64 %10285, 4
  %10287 = load i64, i64* %PC
  %10288 = add i64 %10287, 3
  store i64 %10288, i64* %PC
  %10289 = inttoptr i64 %10286 to i32*
  %10290 = load i32, i32* %10289
  %10291 = zext i32 %10290 to i64
  store i64 %10291, i64* %RDX, align 8, !tbaa !2428
  %10292 = load i64, i64* %RDX
  %10293 = load i64, i64* %RBP
  %10294 = sub i64 %10293, 8
  %10295 = load i64, i64* %PC
  %10296 = add i64 %10295, 3
  store i64 %10296, i64* %PC
  %10297 = trunc i64 %10292 to i32
  %10298 = inttoptr i64 %10294 to i32*
  %10299 = load i32, i32* %10298
  %10300 = sub i32 %10297, %10299
  %10301 = zext i32 %10300 to i64
  store i64 %10301, i64* %RDX, align 8, !tbaa !2428
  %10302 = icmp ult i32 %10297, %10299
  %10303 = zext i1 %10302 to i8
  %10304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10303, i8* %10304, align 1, !tbaa !2432
  %10305 = and i32 %10300, 255
  %10306 = call i32 @llvm.ctpop.i32(i32 %10305) #16
  %10307 = trunc i32 %10306 to i8
  %10308 = and i8 %10307, 1
  %10309 = xor i8 %10308, 1
  %10310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10309, i8* %10310, align 1, !tbaa !2446
  %10311 = xor i32 %10299, %10297
  %10312 = xor i32 %10311, %10300
  %10313 = lshr i32 %10312, 4
  %10314 = trunc i32 %10313 to i8
  %10315 = and i8 %10314, 1
  %10316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10315, i8* %10316, align 1, !tbaa !2447
  %10317 = icmp eq i32 %10300, 0
  %10318 = zext i1 %10317 to i8
  %10319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10318, i8* %10319, align 1, !tbaa !2448
  %10320 = lshr i32 %10300, 31
  %10321 = trunc i32 %10320 to i8
  %10322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10321, i8* %10322, align 1, !tbaa !2449
  %10323 = lshr i32 %10297, 31
  %10324 = lshr i32 %10299, 31
  %10325 = xor i32 %10324, %10323
  %10326 = xor i32 %10320, %10323
  %10327 = add nuw nsw i32 %10326, %10325
  %10328 = icmp eq i32 %10327, 2
  %10329 = zext i1 %10328 to i8
  %10330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10329, i8* %10330, align 1, !tbaa !2450
  %10331 = load i32, i32* %EDX
  %10332 = zext i32 %10331 to i64
  %10333 = load i64, i64* %PC
  %10334 = add i64 %10333, 3
  store i64 %10334, i64* %PC
  %10335 = shl i64 %10332, 32
  %10336 = ashr exact i64 %10335, 32
  store i64 %10336, i64* %RCX, align 8, !tbaa !2428
  %10337 = load i64, i64* %RAX
  %10338 = load i64, i64* %RCX
  %10339 = mul i64 %10338, 4
  %10340 = add i64 %10339, %10337
  %10341 = load i64, i64* %PC
  %10342 = add i64 %10341, 4
  store i64 %10342, i64* %PC
  %10343 = inttoptr i64 %10340 to i32*
  %10344 = load i32, i32* %10343
  %10345 = sub i32 %10344, -1
  %10346 = icmp ult i32 %10344, -1
  %10347 = zext i1 %10346 to i8
  %10348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10347, i8* %10348, align 1, !tbaa !2432
  %10349 = and i32 %10345, 255
  %10350 = call i32 @llvm.ctpop.i32(i32 %10349) #16
  %10351 = trunc i32 %10350 to i8
  %10352 = and i8 %10351, 1
  %10353 = xor i8 %10352, 1
  %10354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10353, i8* %10354, align 1, !tbaa !2446
  %10355 = xor i32 %10344, -1
  %10356 = xor i32 %10355, %10345
  %10357 = lshr i32 %10356, 4
  %10358 = trunc i32 %10357 to i8
  %10359 = and i8 %10358, 1
  %10360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10359, i8* %10360, align 1, !tbaa !2447
  %10361 = icmp eq i32 %10345, 0
  %10362 = zext i1 %10361 to i8
  %10363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10362, i8* %10363, align 1, !tbaa !2448
  %10364 = lshr i32 %10345, 31
  %10365 = trunc i32 %10364 to i8
  %10366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10365, i8* %10366, align 1, !tbaa !2449
  %10367 = lshr i32 %10344, 31
  %10368 = xor i32 %10367, 1
  %10369 = xor i32 %10364, %10367
  %10370 = add nuw nsw i32 %10369, %10368
  %10371 = icmp eq i32 %10370, 2
  %10372 = zext i1 %10371 to i8
  %10373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10372, i8* %10373, align 1, !tbaa !2450
  %10374 = load i64, i64* %PC
  %10375 = add i64 %10374, 97
  %10376 = load i64, i64* %PC
  %10377 = add i64 %10376, 6
  %10378 = load i64, i64* %PC
  %10379 = add i64 %10378, 6
  store i64 %10379, i64* %PC
  %10380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10381 = load i8, i8* %10380, align 1, !tbaa !2448
  store i8 %10381, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %10382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10383 = icmp ne i8 %10381, 0
  %10384 = select i1 %10383, i64 %10375, i64 %10377
  store i64 %10384, i64* %10382, align 8, !tbaa !2428
  %10385 = load i8, i8* %BRANCH_TAKEN
  %10386 = icmp eq i8 %10385, 1
  br i1 %10386, label %block_4013f1, label %block_401396

block_400af6:                                     ; preds = %block_400ad4, %block_400b0a
  %MEMORY.47 = phi %struct.Memory* [ %MEMORY.30, %block_400ad4 ], [ %MEMORY.47, %block_400b0a ]
  %10387 = load i64, i64* %RBP
  %10388 = sub i64 %10387, 4
  %10389 = load i64, i64* %PC
  %10390 = add i64 %10389, 3
  store i64 %10390, i64* %PC
  %10391 = inttoptr i64 %10388 to i32*
  %10392 = load i32, i32* %10391
  %10393 = zext i32 %10392 to i64
  store i64 %10393, i64* %RAX, align 8, !tbaa !2428
  %10394 = load i64, i64* %RBP
  %10395 = sub i64 %10394, 12
  %10396 = load i64, i64* %PC
  %10397 = add i64 %10396, 4
  store i64 %10397, i64* %PC
  %10398 = inttoptr i64 %10395 to i32*
  %10399 = load i32, i32* %10398
  %10400 = sext i32 %10399 to i64
  store i64 %10400, i64* %RCX, align 8, !tbaa !2428
  %10401 = load i32, i32* %EAX
  %10402 = zext i32 %10401 to i64
  %10403 = load i64, i64* %RBP
  %10404 = load i64, i64* %RCX
  %10405 = mul i64 %10404, 4
  %10406 = add i64 %10403, -1328
  %10407 = add i64 %10406, %10405
  %10408 = load i64, i64* %PC
  %10409 = add i64 %10408, 7
  store i64 %10409, i64* %PC
  %10410 = inttoptr i64 %10407 to i32*
  %10411 = load i32, i32* %10410
  %10412 = sub i32 %10401, %10411
  %10413 = icmp ult i32 %10401, %10411
  %10414 = zext i1 %10413 to i8
  %10415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10414, i8* %10415, align 1, !tbaa !2432
  %10416 = and i32 %10412, 255
  %10417 = call i32 @llvm.ctpop.i32(i32 %10416) #16
  %10418 = trunc i32 %10417 to i8
  %10419 = and i8 %10418, 1
  %10420 = xor i8 %10419, 1
  %10421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10420, i8* %10421, align 1, !tbaa !2446
  %10422 = xor i32 %10411, %10401
  %10423 = xor i32 %10422, %10412
  %10424 = lshr i32 %10423, 4
  %10425 = trunc i32 %10424 to i8
  %10426 = and i8 %10425, 1
  %10427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10426, i8* %10427, align 1, !tbaa !2447
  %10428 = icmp eq i32 %10412, 0
  %10429 = zext i1 %10428 to i8
  %10430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10429, i8* %10430, align 1, !tbaa !2448
  %10431 = lshr i32 %10412, 31
  %10432 = trunc i32 %10431 to i8
  %10433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10432, i8* %10433, align 1, !tbaa !2449
  %10434 = lshr i32 %10401, 31
  %10435 = lshr i32 %10411, 31
  %10436 = xor i32 %10435, %10434
  %10437 = xor i32 %10431, %10434
  %10438 = add nuw nsw i32 %10437, %10436
  %10439 = icmp eq i32 %10438, 2
  %10440 = zext i1 %10439 to i8
  %10441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10440, i8* %10441, align 1, !tbaa !2450
  %10442 = load i64, i64* %PC
  %10443 = add i64 %10442, 121
  %10444 = load i64, i64* %PC
  %10445 = add i64 %10444, 6
  %10446 = load i64, i64* %PC
  %10447 = add i64 %10446, 6
  store i64 %10447, i64* %PC
  %10448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10449 = load i8, i8* %10448, align 1, !tbaa !2448
  %10450 = icmp eq i8 %10449, 0
  %10451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10452 = load i8, i8* %10451, align 1, !tbaa !2449
  %10453 = icmp ne i8 %10452, 0
  %10454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %10455 = load i8, i8* %10454, align 1, !tbaa !2450
  %10456 = icmp ne i8 %10455, 0
  %10457 = xor i1 %10453, %10456
  %10458 = xor i1 %10457, true
  %10459 = and i1 %10450, %10458
  %10460 = zext i1 %10459 to i8
  store i8 %10460, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %10461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10462 = select i1 %10459, i64 %10443, i64 %10445
  store i64 %10462, i64* %10461, align 8, !tbaa !2428
  %10463 = load i8, i8* %BRANCH_TAKEN
  %10464 = icmp eq i8 %10463, 1
  br i1 %10464, label %block_400b7d, label %block_400b0a

block_40102e:                                     ; preds = %block_40100c, %block_401042
  %MEMORY.48 = phi %struct.Memory* [ %MEMORY.0, %block_40100c ], [ %MEMORY.48, %block_401042 ]
  %10465 = load i64, i64* %RBP
  %10466 = sub i64 %10465, 4
  %10467 = load i64, i64* %PC
  %10468 = add i64 %10467, 3
  store i64 %10468, i64* %PC
  %10469 = inttoptr i64 %10466 to i32*
  %10470 = load i32, i32* %10469
  %10471 = zext i32 %10470 to i64
  store i64 %10471, i64* %RAX, align 8, !tbaa !2428
  %10472 = load i64, i64* %RBP
  %10473 = sub i64 %10472, 12
  %10474 = load i64, i64* %PC
  %10475 = add i64 %10474, 4
  store i64 %10475, i64* %PC
  %10476 = inttoptr i64 %10473 to i32*
  %10477 = load i32, i32* %10476
  %10478 = sext i32 %10477 to i64
  store i64 %10478, i64* %RCX, align 8, !tbaa !2428
  %10479 = load i32, i32* %EAX
  %10480 = zext i32 %10479 to i64
  %10481 = load i64, i64* %RBP
  %10482 = load i64, i64* %RCX
  %10483 = mul i64 %10482, 4
  %10484 = add i64 %10481, -1328
  %10485 = add i64 %10484, %10483
  %10486 = load i64, i64* %PC
  %10487 = add i64 %10486, 7
  store i64 %10487, i64* %PC
  %10488 = inttoptr i64 %10485 to i32*
  %10489 = load i32, i32* %10488
  %10490 = sub i32 %10479, %10489
  %10491 = icmp ult i32 %10479, %10489
  %10492 = zext i1 %10491 to i8
  %10493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10492, i8* %10493, align 1, !tbaa !2432
  %10494 = and i32 %10490, 255
  %10495 = call i32 @llvm.ctpop.i32(i32 %10494) #16
  %10496 = trunc i32 %10495 to i8
  %10497 = and i8 %10496, 1
  %10498 = xor i8 %10497, 1
  %10499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10498, i8* %10499, align 1, !tbaa !2446
  %10500 = xor i32 %10489, %10479
  %10501 = xor i32 %10500, %10490
  %10502 = lshr i32 %10501, 4
  %10503 = trunc i32 %10502 to i8
  %10504 = and i8 %10503, 1
  %10505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10504, i8* %10505, align 1, !tbaa !2447
  %10506 = icmp eq i32 %10490, 0
  %10507 = zext i1 %10506 to i8
  %10508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10507, i8* %10508, align 1, !tbaa !2448
  %10509 = lshr i32 %10490, 31
  %10510 = trunc i32 %10509 to i8
  %10511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10510, i8* %10511, align 1, !tbaa !2449
  %10512 = lshr i32 %10479, 31
  %10513 = lshr i32 %10489, 31
  %10514 = xor i32 %10513, %10512
  %10515 = xor i32 %10509, %10512
  %10516 = add nuw nsw i32 %10515, %10514
  %10517 = icmp eq i32 %10516, 2
  %10518 = zext i1 %10517 to i8
  %10519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10518, i8* %10519, align 1, !tbaa !2450
  %10520 = load i64, i64* %PC
  %10521 = add i64 %10520, 74
  %10522 = load i64, i64* %PC
  %10523 = add i64 %10522, 6
  %10524 = load i64, i64* %PC
  %10525 = add i64 %10524, 6
  store i64 %10525, i64* %PC
  %10526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10527 = load i8, i8* %10526, align 1, !tbaa !2448
  %10528 = icmp eq i8 %10527, 0
  %10529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10530 = load i8, i8* %10529, align 1, !tbaa !2449
  %10531 = icmp ne i8 %10530, 0
  %10532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %10533 = load i8, i8* %10532, align 1, !tbaa !2450
  %10534 = icmp ne i8 %10533, 0
  %10535 = xor i1 %10531, %10534
  %10536 = xor i1 %10535, true
  %10537 = and i1 %10528, %10536
  %10538 = zext i1 %10537 to i8
  store i8 %10538, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %10539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10540 = select i1 %10537, i64 %10521, i64 %10523
  store i64 %10540, i64* %10539, align 8, !tbaa !2428
  %10541 = load i8, i8* %BRANCH_TAKEN
  %10542 = icmp eq i8 %10541, 1
  %10543 = load i64, i64* %RBP
  br i1 %10542, label %block_401086, label %block_401042

block_40155f:                                     ; preds = %block_4014f7, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  %MEMORY.49 = phi %struct.Memory* [ %MEMORY.19, %block_4014f7 ], [ %4458, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ]
  %10544 = load i64, i64* %PC
  %10545 = add i64 %10544, 5
  %10546 = load i64, i64* %PC
  %10547 = add i64 %10546, 5
  store i64 %10547, i64* %PC
  %10548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10545, i64* %10548, align 8, !tbaa !2428
  %10549 = load i64, i64* %RBP
  %10550 = sub i64 %10549, 8
  %10551 = load i64, i64* %PC
  %10552 = add i64 %10551, 3
  store i64 %10552, i64* %PC
  %10553 = inttoptr i64 %10550 to i32*
  %10554 = load i32, i32* %10553
  %10555 = zext i32 %10554 to i64
  store i64 %10555, i64* %RAX, align 8, !tbaa !2428
  %10556 = load i64, i64* %RAX
  %10557 = load i64, i64* %PC
  %10558 = add i64 %10557, 3
  store i64 %10558, i64* %PC
  %10559 = trunc i64 %10556 to i32
  %10560 = add i32 1, %10559
  %10561 = zext i32 %10560 to i64
  store i64 %10561, i64* %RAX, align 8, !tbaa !2428
  %10562 = icmp ult i32 %10560, %10559
  %10563 = icmp ult i32 %10560, 1
  %10564 = or i1 %10562, %10563
  %10565 = zext i1 %10564 to i8
  %10566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10565, i8* %10566, align 1, !tbaa !2432
  %10567 = and i32 %10560, 255
  %10568 = call i32 @llvm.ctpop.i32(i32 %10567) #16
  %10569 = trunc i32 %10568 to i8
  %10570 = and i8 %10569, 1
  %10571 = xor i8 %10570, 1
  %10572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10571, i8* %10572, align 1, !tbaa !2446
  %10573 = xor i64 1, %10556
  %10574 = trunc i64 %10573 to i32
  %10575 = xor i32 %10574, %10560
  %10576 = lshr i32 %10575, 4
  %10577 = trunc i32 %10576 to i8
  %10578 = and i8 %10577, 1
  %10579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10578, i8* %10579, align 1, !tbaa !2447
  %10580 = icmp eq i32 %10560, 0
  %10581 = zext i1 %10580 to i8
  %10582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10581, i8* %10582, align 1, !tbaa !2448
  %10583 = lshr i32 %10560, 31
  %10584 = trunc i32 %10583 to i8
  %10585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10584, i8* %10585, align 1, !tbaa !2449
  %10586 = lshr i32 %10559, 31
  %10587 = xor i32 %10583, %10586
  %10588 = add nuw nsw i32 %10587, %10583
  %10589 = icmp eq i32 %10588, 2
  %10590 = zext i1 %10589 to i8
  %10591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10590, i8* %10591, align 1, !tbaa !2450
  %10592 = load i64, i64* %RBP
  %10593 = sub i64 %10592, 8
  %10594 = load i32, i32* %EAX
  %10595 = zext i32 %10594 to i64
  %10596 = load i64, i64* %PC
  %10597 = add i64 %10596, 3
  store i64 %10597, i64* %PC
  %10598 = inttoptr i64 %10593 to i32*
  store i32 %10594, i32* %10598
  %10599 = load i64, i64* %PC
  %10600 = sub i64 %10599, 138
  %10601 = load i64, i64* %PC
  %10602 = add i64 %10601, 5
  store i64 %10602, i64* %PC
  %10603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10600, i64* %10603, align 8, !tbaa !2428
  br label %block_4014e3

block_40177e:                                     ; preds = %block_40176c
  %10604 = add i64 %2762, 8
  store i64 %10604, i64* %PC
  %10605 = inttoptr i64 %2761 to i32*
  %10606 = load i32, i32* %10605
  %10607 = sext i32 %10606 to i64
  store i64 %10607, i64* %RAX, align 8, !tbaa !2428
  %10608 = load i64, i64* %RAX
  %10609 = mul i64 %10608, 4
  %10610 = add i64 %10609, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %10611 = load i64, i64* %PC
  %10612 = add i64 %10611, 7
  store i64 %10612, i64* %PC
  %10613 = inttoptr i64 %10610 to i32*
  %10614 = load i32, i32* %10613
  %10615 = zext i32 %10614 to i64
  store i64 %10615, i64* %RCX, align 8, !tbaa !2428
  %10616 = load i64, i64* %RBP
  %10617 = sub i64 %10616, 4
  %10618 = load i64, i64* %PC
  %10619 = add i64 %10618, 4
  store i64 %10619, i64* %PC
  %10620 = inttoptr i64 %10617 to i32*
  %10621 = load i32, i32* %10620
  %10622 = sext i32 %10621 to i64
  store i64 %10622, i64* %RAX, align 8, !tbaa !2428
  %10623 = load i64, i64* %RAX
  %10624 = mul i64 %10623, 4
  %10625 = add i64 %10624, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %10626 = load i32, i32* %ECX
  %10627 = zext i32 %10626 to i64
  %10628 = load i64, i64* %PC
  %10629 = add i64 %10628, 7
  store i64 %10629, i64* %PC
  %10630 = inttoptr i64 %10625 to i32*
  store i32 %10626, i32* %10630
  %10631 = load i64, i64* %PC
  %10632 = add i64 %10631, 20
  %10633 = load i64, i64* %PC
  %10634 = add i64 %10633, 5
  store i64 %10634, i64* %PC
  %10635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10632, i64* %10635, align 8, !tbaa !2428
  br label %block_4017b0

block_401825:                                     ; preds = %block_401816, %block_4017f3
  %MEMORY.50 = phi %struct.Memory* [ %MEMORY.3, %block_401816 ], [ %MEMORY.3, %block_4017f3 ]
  %10636 = load i64, i64* %PC
  %10637 = add i64 %10636, 5
  %10638 = load i64, i64* %PC
  %10639 = add i64 %10638, 5
  store i64 %10639, i64* %PC
  %10640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10637, i64* %10640, align 8, !tbaa !2428
  %10641 = load i64, i64* %RBP
  %10642 = sub i64 %10641, 4
  %10643 = load i64, i64* %PC
  %10644 = add i64 %10643, 3
  store i64 %10644, i64* %PC
  %10645 = inttoptr i64 %10642 to i32*
  %10646 = load i32, i32* %10645
  %10647 = zext i32 %10646 to i64
  store i64 %10647, i64* %RAX, align 8, !tbaa !2428
  %10648 = load i64, i64* %RAX
  %10649 = load i64, i64* %PC
  %10650 = add i64 %10649, 3
  store i64 %10650, i64* %PC
  %10651 = trunc i64 %10648 to i32
  %10652 = add i32 1, %10651
  %10653 = zext i32 %10652 to i64
  store i64 %10653, i64* %RAX, align 8, !tbaa !2428
  %10654 = icmp ult i32 %10652, %10651
  %10655 = icmp ult i32 %10652, 1
  %10656 = or i1 %10654, %10655
  %10657 = zext i1 %10656 to i8
  %10658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10657, i8* %10658, align 1, !tbaa !2432
  %10659 = and i32 %10652, 255
  %10660 = call i32 @llvm.ctpop.i32(i32 %10659) #16
  %10661 = trunc i32 %10660 to i8
  %10662 = and i8 %10661, 1
  %10663 = xor i8 %10662, 1
  %10664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10663, i8* %10664, align 1, !tbaa !2446
  %10665 = xor i64 1, %10648
  %10666 = trunc i64 %10665 to i32
  %10667 = xor i32 %10666, %10652
  %10668 = lshr i32 %10667, 4
  %10669 = trunc i32 %10668 to i8
  %10670 = and i8 %10669, 1
  %10671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10670, i8* %10671, align 1, !tbaa !2447
  %10672 = icmp eq i32 %10652, 0
  %10673 = zext i1 %10672 to i8
  %10674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10673, i8* %10674, align 1, !tbaa !2448
  %10675 = lshr i32 %10652, 31
  %10676 = trunc i32 %10675 to i8
  %10677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10676, i8* %10677, align 1, !tbaa !2449
  %10678 = lshr i32 %10651, 31
  %10679 = xor i32 %10675, %10678
  %10680 = add nuw nsw i32 %10679, %10675
  %10681 = icmp eq i32 %10680, 2
  %10682 = zext i1 %10681 to i8
  %10683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10682, i8* %10683, align 1, !tbaa !2450
  %10684 = load i64, i64* %RBP
  %10685 = sub i64 %10684, 4
  %10686 = load i32, i32* %EAX
  %10687 = zext i32 %10686 to i64
  %10688 = load i64, i64* %PC
  %10689 = add i64 %10688, 3
  store i64 %10689, i64* %PC
  %10690 = inttoptr i64 %10685 to i32*
  store i32 %10686, i32* %10690
  %10691 = load i64, i64* %PC
  %10692 = sub i64 %10691, 95
  %10693 = load i64, i64* %PC
  %10694 = add i64 %10693, 5
  store i64 %10694, i64* %PC
  %10695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10692, i64* %10695, align 8, !tbaa !2428
  br label %block_4017d4

block_400963:                                     ; preds = %block_400956
  %10696 = sub i64 %2909, 8
  %10697 = load i64, i64* %PC
  %10698 = add i64 %10697, 4
  store i64 %10698, i64* %PC
  %10699 = inttoptr i64 %10696 to i32*
  %10700 = load i32, i32* %10699
  %10701 = sext i32 %10700 to i64
  store i64 %10701, i64* %RAX, align 8, !tbaa !2428
  %10702 = load i64, i64* %RAX
  %10703 = mul i64 %10702, 4
  %10704 = add i64 %10703, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %10705 = load i64, i64* %PC
  %10706 = add i64 %10705, 8
  store i64 %10706, i64* %PC
  %10707 = inttoptr i64 %10704 to i32*
  %10708 = load i32, i32* %10707
  %10709 = sub i32 %10708, -1
  %10710 = icmp ult i32 %10708, -1
  %10711 = zext i1 %10710 to i8
  %10712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10711, i8* %10712, align 1, !tbaa !2432
  %10713 = and i32 %10709, 255
  %10714 = call i32 @llvm.ctpop.i32(i32 %10713) #16
  %10715 = trunc i32 %10714 to i8
  %10716 = and i8 %10715, 1
  %10717 = xor i8 %10716, 1
  %10718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10717, i8* %10718, align 1, !tbaa !2446
  %10719 = xor i32 %10708, -1
  %10720 = xor i32 %10719, %10709
  %10721 = lshr i32 %10720, 4
  %10722 = trunc i32 %10721 to i8
  %10723 = and i8 %10722, 1
  %10724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10723, i8* %10724, align 1, !tbaa !2447
  %10725 = icmp eq i32 %10709, 0
  %10726 = zext i1 %10725 to i8
  %10727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10726, i8* %10727, align 1, !tbaa !2448
  %10728 = lshr i32 %10709, 31
  %10729 = trunc i32 %10728 to i8
  %10730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10729, i8* %10730, align 1, !tbaa !2449
  %10731 = lshr i32 %10708, 31
  %10732 = xor i32 %10731, 1
  %10733 = xor i32 %10728, %10731
  %10734 = add nuw nsw i32 %10733, %10732
  %10735 = icmp eq i32 %10734, 2
  %10736 = zext i1 %10735 to i8
  %10737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10736, i8* %10737, align 1, !tbaa !2450
  %10738 = load i64, i64* %PC
  %10739 = add i64 %10738, 76
  %10740 = load i64, i64* %PC
  %10741 = add i64 %10740, 6
  %10742 = load i64, i64* %PC
  %10743 = add i64 %10742, 6
  store i64 %10743, i64* %PC
  %10744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10745 = load i8, i8* %10744, align 1, !tbaa !2448
  store i8 %10745, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %10746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10747 = icmp ne i8 %10745, 0
  %10748 = select i1 %10747, i64 %10739, i64 %10741
  store i64 %10748, i64* %10746, align 8, !tbaa !2428
  %10749 = load i8, i8* %BRANCH_TAKEN
  %10750 = icmp eq i8 %10749, 1
  br i1 %10750, label %block_4009bb, label %block_400975

block_4015c8:                                     ; preds = %block_401631, %block_40158c
  %MEMORY.51 = phi %struct.Memory* [ %MEMORY.19, %block_40158c ], [ %MEMORY.20, %block_401631 ]
  %10751 = load i64, i64* %RBP
  %10752 = sub i64 %10751, 8
  %10753 = load i64, i64* %PC
  %10754 = add i64 %10753, 3
  store i64 %10754, i64* %PC
  %10755 = inttoptr i64 %10752 to i32*
  %10756 = load i32, i32* %10755
  %10757 = zext i32 %10756 to i64
  store i64 %10757, i64* %RAX, align 8, !tbaa !2428
  %10758 = load i64, i64* %RBP
  %10759 = sub i64 %10758, 12
  %10760 = load i64, i64* %PC
  %10761 = add i64 %10760, 4
  store i64 %10761, i64* %PC
  %10762 = inttoptr i64 %10759 to i32*
  %10763 = load i32, i32* %10762
  %10764 = sext i32 %10763 to i64
  store i64 %10764, i64* %RCX, align 8, !tbaa !2428
  %10765 = load i32, i32* %EAX
  %10766 = zext i32 %10765 to i64
  %10767 = load i64, i64* %RBP
  %10768 = load i64, i64* %RCX
  %10769 = mul i64 %10768, 4
  %10770 = add i64 %10767, -1328
  %10771 = add i64 %10770, %10769
  %10772 = load i64, i64* %PC
  %10773 = add i64 %10772, 7
  store i64 %10773, i64* %PC
  %10774 = inttoptr i64 %10771 to i32*
  %10775 = load i32, i32* %10774
  %10776 = sub i32 %10765, %10775
  %10777 = icmp ult i32 %10765, %10775
  %10778 = zext i1 %10777 to i8
  %10779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10778, i8* %10779, align 1, !tbaa !2432
  %10780 = and i32 %10776, 255
  %10781 = call i32 @llvm.ctpop.i32(i32 %10780) #16
  %10782 = trunc i32 %10781 to i8
  %10783 = and i8 %10782, 1
  %10784 = xor i8 %10783, 1
  %10785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10784, i8* %10785, align 1, !tbaa !2446
  %10786 = xor i32 %10775, %10765
  %10787 = xor i32 %10786, %10776
  %10788 = lshr i32 %10787, 4
  %10789 = trunc i32 %10788 to i8
  %10790 = and i8 %10789, 1
  %10791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10790, i8* %10791, align 1, !tbaa !2447
  %10792 = icmp eq i32 %10776, 0
  %10793 = zext i1 %10792 to i8
  %10794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10793, i8* %10794, align 1, !tbaa !2448
  %10795 = lshr i32 %10776, 31
  %10796 = trunc i32 %10795 to i8
  %10797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10796, i8* %10797, align 1, !tbaa !2449
  %10798 = lshr i32 %10765, 31
  %10799 = lshr i32 %10775, 31
  %10800 = xor i32 %10799, %10798
  %10801 = xor i32 %10795, %10798
  %10802 = add nuw nsw i32 %10801, %10800
  %10803 = icmp eq i32 %10802, 2
  %10804 = zext i1 %10803 to i8
  %10805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10804, i8* %10805, align 1, !tbaa !2450
  %10806 = load i64, i64* %PC
  %10807 = add i64 %10806, 110
  %10808 = load i64, i64* %PC
  %10809 = add i64 %10808, 6
  %10810 = load i64, i64* %PC
  %10811 = add i64 %10810, 6
  store i64 %10811, i64* %PC
  %10812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10813 = load i8, i8* %10812, align 1, !tbaa !2449
  %10814 = icmp ne i8 %10813, 0
  %10815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %10816 = load i8, i8* %10815, align 1, !tbaa !2450
  %10817 = icmp ne i8 %10816, 0
  %10818 = xor i1 %10814, %10817
  %10819 = xor i1 %10818, true
  %10820 = zext i1 %10819 to i8
  store i8 %10820, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %10821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10822 = select i1 %10818, i64 %10809, i64 %10807
  store i64 %10822, i64* %10821, align 8, !tbaa !2428
  %10823 = load i8, i8* %BRANCH_TAKEN
  %10824 = icmp eq i8 %10823, 1
  br i1 %10824, label %block_401644, label %block_4015dc

block_400a23:                                     ; preds = %block_400a16
  %10825 = sub i64 %11099, 1248
  %10826 = load i64, i64* %PC
  %10827 = add i64 %10826, 10
  store i64 %10827, i64* %PC
  %10828 = inttoptr i64 %10825 to i32*
  store i32 0, i32* %10828
  %10829 = load i64, i64* %RBP
  %10830 = sub i64 %10829, 1484
  %10831 = load i64, i64* %PC
  %10832 = add i64 %10831, 6
  store i64 %10832, i64* %PC
  %10833 = inttoptr i64 %10830 to i32*
  %10834 = load i32, i32* %10833
  %10835 = zext i32 %10834 to i64
  store i64 %10835, i64* %RAX, align 8, !tbaa !2428
  %10836 = load i64, i64* %RBP
  %10837 = sub i64 %10836, 1244
  %10838 = load i32, i32* %EAX
  %10839 = zext i32 %10838 to i64
  %10840 = load i64, i64* %PC
  %10841 = add i64 %10840, 6
  store i64 %10841, i64* %PC
  %10842 = inttoptr i64 %10837 to i32*
  store i32 %10838, i32* %10842
  %10843 = load i64, i64* %RBP
  %10844 = sub i64 %10843, 1168
  %10845 = load i64, i64* %PC
  %10846 = add i64 %10845, 10
  store i64 %10846, i64* %PC
  %10847 = inttoptr i64 %10844 to i32*
  store i32 0, i32* %10847
  %10848 = load i64, i64* %RBP
  %10849 = sub i64 %10848, 1104
  %10850 = load i64, i64* %PC
  %10851 = add i64 %10850, 10
  store i64 %10851, i64* %PC
  %10852 = inttoptr i64 %10849 to i32*
  store i32 1, i32* %10852
  %10853 = load i64, i64* %RBP
  %10854 = sub i64 %10853, 4
  %10855 = load i64, i64* %PC
  %10856 = add i64 %10855, 7
  store i64 %10856, i64* %PC
  %10857 = inttoptr i64 %10854 to i32*
  store i32 1, i32* %10857
  br label %block_400a54

block_401497:                                     ; preds = %block_401465, %block_401488
  %MEMORY.52 = phi %struct.Memory* [ %MEMORY.12, %block_401488 ], [ %MEMORY.12, %block_401465 ]
  %10858 = load i64, i64* %PC
  %10859 = add i64 %10858, 5
  %10860 = load i64, i64* %PC
  %10861 = add i64 %10860, 5
  store i64 %10861, i64* %PC
  %10862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10859, i64* %10862, align 8, !tbaa !2428
  %10863 = load i64, i64* %RBP
  %10864 = sub i64 %10863, 4
  %10865 = load i64, i64* %PC
  %10866 = add i64 %10865, 3
  store i64 %10866, i64* %PC
  %10867 = inttoptr i64 %10864 to i32*
  %10868 = load i32, i32* %10867
  %10869 = zext i32 %10868 to i64
  store i64 %10869, i64* %RAX, align 8, !tbaa !2428
  %10870 = load i64, i64* %RAX
  %10871 = load i64, i64* %PC
  %10872 = add i64 %10871, 3
  store i64 %10872, i64* %PC
  %10873 = trunc i64 %10870 to i32
  %10874 = add i32 1, %10873
  %10875 = zext i32 %10874 to i64
  store i64 %10875, i64* %RAX, align 8, !tbaa !2428
  %10876 = icmp ult i32 %10874, %10873
  %10877 = icmp ult i32 %10874, 1
  %10878 = or i1 %10876, %10877
  %10879 = zext i1 %10878 to i8
  %10880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10879, i8* %10880, align 1, !tbaa !2432
  %10881 = and i32 %10874, 255
  %10882 = call i32 @llvm.ctpop.i32(i32 %10881) #16
  %10883 = trunc i32 %10882 to i8
  %10884 = and i8 %10883, 1
  %10885 = xor i8 %10884, 1
  %10886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10885, i8* %10886, align 1, !tbaa !2446
  %10887 = xor i64 1, %10870
  %10888 = trunc i64 %10887 to i32
  %10889 = xor i32 %10888, %10874
  %10890 = lshr i32 %10889, 4
  %10891 = trunc i32 %10890 to i8
  %10892 = and i8 %10891, 1
  %10893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10892, i8* %10893, align 1, !tbaa !2447
  %10894 = icmp eq i32 %10874, 0
  %10895 = zext i1 %10894 to i8
  %10896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10895, i8* %10896, align 1, !tbaa !2448
  %10897 = lshr i32 %10874, 31
  %10898 = trunc i32 %10897 to i8
  %10899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10898, i8* %10899, align 1, !tbaa !2449
  %10900 = lshr i32 %10873, 31
  %10901 = xor i32 %10897, %10900
  %10902 = add nuw nsw i32 %10901, %10897
  %10903 = icmp eq i32 %10902, 2
  %10904 = zext i1 %10903 to i8
  %10905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10904, i8* %10905, align 1, !tbaa !2450
  %10906 = load i64, i64* %RBP
  %10907 = sub i64 %10906, 4
  %10908 = load i32, i32* %EAX
  %10909 = zext i32 %10908 to i64
  %10910 = load i64, i64* %PC
  %10911 = add i64 %10910, 3
  store i64 %10911, i64* %PC
  %10912 = inttoptr i64 %10907 to i32*
  store i32 %10908, i32* %10912
  %10913 = load i64, i64* %PC
  %10914 = sub i64 %10913, 110
  %10915 = load i64, i64* %PC
  %10916 = add i64 %10915, 5
  store i64 %10916, i64* %PC
  %10917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10914, i64* %10917, align 8, !tbaa !2428
  br label %block_401437

block_400c1c:                                     ; preds = %block_400c00
  %10918 = load i64, i64* %RBP
  %10919 = sub i64 %10918, 8
  %10920 = load i64, i64* %PC
  %10921 = add i64 %10920, 3
  store i64 %10921, i64* %PC
  %10922 = inttoptr i64 %10919 to i32*
  %10923 = load i32, i32* %10922
  %10924 = zext i32 %10923 to i64
  store i64 %10924, i64* %RAX, align 8, !tbaa !2428
  %10925 = load i64, i64* %RBP
  %10926 = sub i64 %10925, 16
  %10927 = load i32, i32* %EAX
  %10928 = zext i32 %10927 to i64
  %10929 = load i64, i64* %PC
  %10930 = add i64 %10929, 3
  store i64 %10930, i64* %PC
  %10931 = inttoptr i64 %10926 to i32*
  store i32 %10927, i32* %10931
  br label %block_400c22

block_401217:                                     ; preds = %block_401205
  %10932 = load i64, i64* %RBP
  %10933 = sub i64 %10932, 1168
  %10934 = load i64, i64* %PC
  %10935 = add i64 %10934, 7
  store i64 %10935, i64* %PC
  store i64 %10933, i64* %RAX, align 8, !tbaa !2428
  %10936 = load i64, i64* %RBP
  %10937 = sub i64 %10936, 12
  %10938 = load i64, i64* %PC
  %10939 = add i64 %10938, 4
  store i64 %10939, i64* %PC
  %10940 = inttoptr i64 %10937 to i32*
  %10941 = load i32, i32* %10940
  %10942 = sext i32 %10941 to i64
  store i64 %10942, i64* %RCX, align 8, !tbaa !2428
  %10943 = load i64, i64* %RCX
  %10944 = load i64, i64* %PC
  %10945 = add i64 %10944, 4
  store i64 %10945, i64* %PC
  %10946 = shl i64 %10943, 5
  %10947 = icmp slt i64 %10946, 0
  %10948 = shl i64 %10946, 1
  store i64 %10948, i64* %RCX, align 8, !tbaa !2428
  %10949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %10950 = zext i1 %10947 to i8
  store i8 %10950, i8* %10949, align 1, !tbaa !2451
  %10951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %10952 = trunc i64 %10948 to i32
  %10953 = and i32 %10952, 254
  %10954 = call i32 @llvm.ctpop.i32(i32 %10953) #16
  %10955 = trunc i32 %10954 to i8
  %10956 = and i8 %10955, 1
  %10957 = xor i8 %10956, 1
  store i8 %10957, i8* %10951, align 1, !tbaa !2451
  %10958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10958, align 1, !tbaa !2451
  %10959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10960 = icmp eq i64 %10948, 0
  %10961 = zext i1 %10960 to i8
  store i8 %10961, i8* %10959, align 1, !tbaa !2451
  %10962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10963 = lshr i64 %10948, 63
  %10964 = trunc i64 %10963 to i8
  store i8 %10964, i8* %10962, align 1, !tbaa !2451
  %10965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %10965, align 1, !tbaa !2451
  %10966 = load i64, i64* %RAX
  %10967 = load i64, i64* %RCX
  %10968 = load i64, i64* %PC
  %10969 = add i64 %10968, 3
  store i64 %10969, i64* %PC
  %10970 = add i64 %10967, %10966
  store i64 %10970, i64* %RAX, align 8, !tbaa !2428
  %10971 = icmp ult i64 %10970, %10966
  %10972 = icmp ult i64 %10970, %10967
  %10973 = or i1 %10971, %10972
  %10974 = zext i1 %10973 to i8
  %10975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10974, i8* %10975, align 1, !tbaa !2432
  %10976 = trunc i64 %10970 to i32
  %10977 = and i32 %10976, 255
  %10978 = call i32 @llvm.ctpop.i32(i32 %10977) #16
  %10979 = trunc i32 %10978 to i8
  %10980 = and i8 %10979, 1
  %10981 = xor i8 %10980, 1
  %10982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10981, i8* %10982, align 1, !tbaa !2446
  %10983 = xor i64 %10967, %10966
  %10984 = xor i64 %10983, %10970
  %10985 = lshr i64 %10984, 4
  %10986 = trunc i64 %10985 to i8
  %10987 = and i8 %10986, 1
  %10988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10987, i8* %10988, align 1, !tbaa !2447
  %10989 = icmp eq i64 %10970, 0
  %10990 = zext i1 %10989 to i8
  %10991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10990, i8* %10991, align 1, !tbaa !2448
  %10992 = lshr i64 %10970, 63
  %10993 = trunc i64 %10992 to i8
  %10994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10993, i8* %10994, align 1, !tbaa !2449
  %10995 = lshr i64 %10966, 63
  %10996 = lshr i64 %10967, 63
  %10997 = xor i64 %10992, %10995
  %10998 = xor i64 %10992, %10996
  %10999 = add nuw nsw i64 %10997, %10998
  %11000 = icmp eq i64 %10999, 2
  %11001 = zext i1 %11000 to i8
  %11002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11001, i8* %11002, align 1, !tbaa !2450
  %11003 = load i64, i64* %RBP
  %11004 = sub i64 %11003, 4
  %11005 = load i64, i64* %PC
  %11006 = add i64 %11005, 4
  store i64 %11006, i64* %PC
  %11007 = inttoptr i64 %11004 to i32*
  %11008 = load i32, i32* %11007
  %11009 = sext i32 %11008 to i64
  store i64 %11009, i64* %RCX, align 8, !tbaa !2428
  %11010 = load i64, i64* %RAX
  %11011 = load i64, i64* %RCX
  %11012 = mul i64 %11011, 4
  %11013 = add i64 %11012, %11010
  %11014 = load i64, i64* %PC
  %11015 = add i64 %11014, 4
  store i64 %11015, i64* %PC
  %11016 = inttoptr i64 %11013 to i32*
  %11017 = load i32, i32* %11016
  %11018 = sub i32 %11017, -1
  %11019 = icmp ult i32 %11017, -1
  %11020 = zext i1 %11019 to i8
  %11021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11020, i8* %11021, align 1, !tbaa !2432
  %11022 = and i32 %11018, 255
  %11023 = call i32 @llvm.ctpop.i32(i32 %11022) #16
  %11024 = trunc i32 %11023 to i8
  %11025 = and i8 %11024, 1
  %11026 = xor i8 %11025, 1
  %11027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11026, i8* %11027, align 1, !tbaa !2446
  %11028 = xor i32 %11017, -1
  %11029 = xor i32 %11028, %11018
  %11030 = lshr i32 %11029, 4
  %11031 = trunc i32 %11030 to i8
  %11032 = and i8 %11031, 1
  %11033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11032, i8* %11033, align 1, !tbaa !2447
  %11034 = icmp eq i32 %11018, 0
  %11035 = zext i1 %11034 to i8
  %11036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11035, i8* %11036, align 1, !tbaa !2448
  %11037 = lshr i32 %11018, 31
  %11038 = trunc i32 %11037 to i8
  %11039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11038, i8* %11039, align 1, !tbaa !2449
  %11040 = lshr i32 %11017, 31
  %11041 = xor i32 %11040, 1
  %11042 = xor i32 %11037, %11040
  %11043 = add nuw nsw i32 %11042, %11041
  %11044 = icmp eq i32 %11043, 2
  %11045 = zext i1 %11044 to i8
  %11046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11045, i8* %11046, align 1, !tbaa !2450
  %11047 = load i64, i64* %PC
  %11048 = add i64 %11047, 74
  %11049 = load i64, i64* %PC
  %11050 = add i64 %11049, 6
  %11051 = load i64, i64* %PC
  %11052 = add i64 %11051, 6
  store i64 %11052, i64* %PC
  %11053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11054 = load i8, i8* %11053, align 1, !tbaa !2448
  store i8 %11054, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11056 = icmp ne i8 %11054, 0
  %11057 = select i1 %11056, i64 %11048, i64 %11050
  store i64 %11057, i64* %11055, align 8, !tbaa !2428
  %11058 = load i8, i8* %BRANCH_TAKEN
  %11059 = icmp eq i8 %11058, 1
  br i1 %11059, label %block_40127b, label %block_401237

block_4011ea:                                     ; preds = %block_4011d3
  %11060 = inttoptr i64 %6813 to i32*
  store i32 1, i32* %11060
  br label %block_4011f1

block_400a16:                                     ; preds = %block_400936
  %11061 = sub i64 %3353, 1496
  %11062 = load i64, i64* %PC
  %11063 = add i64 %11062, 7
  store i64 %11063, i64* %PC
  %11064 = inttoptr i64 %11061 to i32*
  %11065 = load i32, i32* %11064
  %11066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %11066, align 1, !tbaa !2432
  %11067 = and i32 %11065, 255
  %11068 = call i32 @llvm.ctpop.i32(i32 %11067) #16
  %11069 = trunc i32 %11068 to i8
  %11070 = and i8 %11069, 1
  %11071 = xor i8 %11070, 1
  %11072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11071, i8* %11072, align 1, !tbaa !2446
  %11073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11073, align 1, !tbaa !2447
  %11074 = icmp eq i32 %11065, 0
  %11075 = zext i1 %11074 to i8
  %11076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11075, i8* %11076, align 1, !tbaa !2448
  %11077 = lshr i32 %11065, 31
  %11078 = trunc i32 %11077 to i8
  %11079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11078, i8* %11079, align 1, !tbaa !2449
  %11080 = lshr i32 %11065, 31
  %11081 = xor i32 %11077, %11080
  %11082 = add nuw nsw i32 %11081, %11080
  %11083 = icmp eq i32 %11082, 2
  %11084 = zext i1 %11083 to i8
  %11085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11084, i8* %11085, align 1, !tbaa !2450
  %11086 = load i64, i64* %PC
  %11087 = add i64 %11086, 3504
  %11088 = load i64, i64* %PC
  %11089 = add i64 %11088, 6
  %11090 = load i64, i64* %PC
  %11091 = add i64 %11090, 6
  store i64 %11091, i64* %PC
  %11092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11093 = load i8, i8* %11092, align 1, !tbaa !2448
  store i8 %11093, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11095 = icmp ne i8 %11093, 0
  %11096 = select i1 %11095, i64 %11087, i64 %11089
  store i64 %11096, i64* %11094, align 8, !tbaa !2428
  %11097 = load i8, i8* %BRANCH_TAKEN
  %11098 = icmp eq i8 %11097, 1
  %11099 = load i64, i64* %RBP
  br i1 %11098, label %block_4017cd, label %block_400a23

block_400ad4:                                     ; preds = %block_400ab9
  %11100 = add i64 %6288, 4
  store i64 %11100, i64* %PC
  %11101 = inttoptr i64 %6287 to i32*
  %11102 = load i32, i32* %11101
  %11103 = sext i32 %11102 to i64
  store i64 %11103, i64* %RAX, align 8, !tbaa !2428
  %11104 = load i64, i64* %RBP
  %11105 = load i64, i64* %RAX
  %11106 = mul i64 %11105, 4
  %11107 = add i64 %11104, -1328
  %11108 = add i64 %11107, %11106
  %11109 = load i64, i64* %PC
  %11110 = add i64 %11109, 7
  store i64 %11110, i64* %PC
  %11111 = inttoptr i64 %11108 to i32*
  %11112 = load i32, i32* %11111
  %11113 = zext i32 %11112 to i64
  store i64 %11113, i64* %RCX, align 8, !tbaa !2428
  %11114 = load i64, i64* %RBP
  %11115 = sub i64 %11114, 12
  %11116 = load i64, i64* %PC
  %11117 = add i64 %11116, 3
  store i64 %11117, i64* %PC
  %11118 = inttoptr i64 %11115 to i32*
  %11119 = load i32, i32* %11118
  %11120 = zext i32 %11119 to i64
  store i64 %11120, i64* %RDX, align 8, !tbaa !2428
  %11121 = load i64, i64* %RDX
  %11122 = load i64, i64* %PC
  %11123 = add i64 %11122, 3
  store i64 %11123, i64* %PC
  %11124 = trunc i64 %11121 to i32
  %11125 = add i32 1, %11124
  %11126 = zext i32 %11125 to i64
  store i64 %11126, i64* %RDX, align 8, !tbaa !2428
  %11127 = icmp ult i32 %11125, %11124
  %11128 = icmp ult i32 %11125, 1
  %11129 = or i1 %11127, %11128
  %11130 = zext i1 %11129 to i8
  %11131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11130, i8* %11131, align 1, !tbaa !2432
  %11132 = and i32 %11125, 255
  %11133 = call i32 @llvm.ctpop.i32(i32 %11132) #16
  %11134 = trunc i32 %11133 to i8
  %11135 = and i8 %11134, 1
  %11136 = xor i8 %11135, 1
  %11137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11136, i8* %11137, align 1, !tbaa !2446
  %11138 = xor i64 1, %11121
  %11139 = trunc i64 %11138 to i32
  %11140 = xor i32 %11139, %11125
  %11141 = lshr i32 %11140, 4
  %11142 = trunc i32 %11141 to i8
  %11143 = and i8 %11142, 1
  %11144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11143, i8* %11144, align 1, !tbaa !2447
  %11145 = icmp eq i32 %11125, 0
  %11146 = zext i1 %11145 to i8
  %11147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11146, i8* %11147, align 1, !tbaa !2448
  %11148 = lshr i32 %11125, 31
  %11149 = trunc i32 %11148 to i8
  %11150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11149, i8* %11150, align 1, !tbaa !2449
  %11151 = lshr i32 %11124, 31
  %11152 = xor i32 %11148, %11151
  %11153 = add nuw nsw i32 %11152, %11148
  %11154 = icmp eq i32 %11153, 2
  %11155 = zext i1 %11154 to i8
  %11156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11155, i8* %11156, align 1, !tbaa !2450
  %11157 = load i32, i32* %EDX
  %11158 = zext i32 %11157 to i64
  %11159 = load i64, i64* %PC
  %11160 = add i64 %11159, 3
  store i64 %11160, i64* %PC
  %11161 = shl i64 %11158, 32
  %11162 = ashr exact i64 %11161, 32
  store i64 %11162, i64* %RAX, align 8, !tbaa !2428
  %11163 = load i64, i64* %RBP
  %11164 = load i64, i64* %RAX
  %11165 = mul i64 %11164, 4
  %11166 = add i64 %11163, -1328
  %11167 = add i64 %11166, %11165
  %11168 = load i32, i32* %ECX
  %11169 = zext i32 %11168 to i64
  %11170 = load i64, i64* %PC
  %11171 = add i64 %11170, 7
  store i64 %11171, i64* %PC
  %11172 = inttoptr i64 %11167 to i32*
  store i32 %11168, i32* %11172
  %11173 = load i64, i64* %RBP
  %11174 = sub i64 %11173, 4
  %11175 = load i64, i64* %PC
  %11176 = add i64 %11175, 7
  store i64 %11176, i64* %PC
  %11177 = inttoptr i64 %11174 to i32*
  store i32 0, i32* %11177
  br label %block_400af6

block_400c22:                                     ; preds = %block_400c00, %block_400c1c, %block_400be5
  %MEMORY.53 = phi %struct.Memory* [ %MEMORY.2, %block_400be5 ], [ %MEMORY.2, %block_400c00 ], [ %MEMORY.2, %block_400c1c ]
  %11178 = load i64, i64* %PC
  %11179 = add i64 %11178, 5
  %11180 = load i64, i64* %PC
  %11181 = add i64 %11180, 5
  store i64 %11181, i64* %PC
  %11182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11179, i64* %11182, align 8, !tbaa !2428
  %11183 = load i64, i64* %RBP
  %11184 = sub i64 %11183, 8
  %11185 = load i64, i64* %PC
  %11186 = add i64 %11185, 4
  store i64 %11186, i64* %PC
  %11187 = inttoptr i64 %11184 to i32*
  %11188 = load i32, i32* %11187
  %11189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %11189, align 1, !tbaa !2432
  %11190 = and i32 %11188, 255
  %11191 = call i32 @llvm.ctpop.i32(i32 %11190) #16
  %11192 = trunc i32 %11191 to i8
  %11193 = and i8 %11192, 1
  %11194 = xor i8 %11193, 1
  %11195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11194, i8* %11195, align 1, !tbaa !2446
  %11196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11196, align 1, !tbaa !2447
  %11197 = icmp eq i32 %11188, 0
  %11198 = zext i1 %11197 to i8
  %11199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11198, i8* %11199, align 1, !tbaa !2448
  %11200 = lshr i32 %11188, 31
  %11201 = trunc i32 %11200 to i8
  %11202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11201, i8* %11202, align 1, !tbaa !2449
  %11203 = lshr i32 %11188, 31
  %11204 = xor i32 %11200, %11203
  %11205 = add nuw nsw i32 %11204, %11203
  %11206 = icmp eq i32 %11205, 2
  %11207 = zext i1 %11206 to i8
  %11208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11207, i8* %11208, align 1, !tbaa !2450
  %11209 = load i64, i64* %PC
  %11210 = sub i64 %11209, 70
  %11211 = load i64, i64* %PC
  %11212 = add i64 %11211, 6
  %11213 = load i64, i64* %PC
  %11214 = add i64 %11213, 6
  store i64 %11214, i64* %PC
  %11215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11216 = load i8, i8* %11215, align 1, !tbaa !2448
  %11217 = icmp eq i8 %11216, 0
  %11218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %11219 = load i8, i8* %11218, align 1, !tbaa !2449
  %11220 = icmp ne i8 %11219, 0
  %11221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11222 = load i8, i8* %11221, align 1, !tbaa !2450
  %11223 = icmp ne i8 %11222, 0
  %11224 = xor i1 %11220, %11223
  %11225 = xor i1 %11224, true
  %11226 = and i1 %11217, %11225
  %11227 = zext i1 %11226 to i8
  store i8 %11227, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11229 = select i1 %11226, i64 %11210, i64 %11212
  store i64 %11229, i64* %11228, align 8, !tbaa !2428
  %11230 = load i8, i8* %BRANCH_TAKEN
  %11231 = icmp eq i8 %11230, 1
  br i1 %11231, label %block_400be5, label %block_400c31

block_40100c:                                     ; preds = %block_400ffe
  %11232 = load i64, i64* %RBP
  %11233 = sub i64 %11232, 12
  %11234 = load i64, i64* %PC
  %11235 = add i64 %11234, 3
  store i64 %11235, i64* %PC
  %11236 = inttoptr i64 %11233 to i32*
  %11237 = load i32, i32* %11236
  %11238 = zext i32 %11237 to i64
  store i64 %11238, i64* %RAX, align 8, !tbaa !2428
  %11239 = load i64, i64* %RAX
  %11240 = load i64, i64* %PC
  %11241 = add i64 %11240, 3
  store i64 %11241, i64* %PC
  %11242 = trunc i64 %11239 to i32
  %11243 = add i32 1, %11242
  %11244 = zext i32 %11243 to i64
  store i64 %11244, i64* %RAX, align 8, !tbaa !2428
  %11245 = icmp ult i32 %11243, %11242
  %11246 = icmp ult i32 %11243, 1
  %11247 = or i1 %11245, %11246
  %11248 = zext i1 %11247 to i8
  %11249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11248, i8* %11249, align 1, !tbaa !2432
  %11250 = and i32 %11243, 255
  %11251 = call i32 @llvm.ctpop.i32(i32 %11250) #16
  %11252 = trunc i32 %11251 to i8
  %11253 = and i8 %11252, 1
  %11254 = xor i8 %11253, 1
  %11255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11254, i8* %11255, align 1, !tbaa !2446
  %11256 = xor i64 1, %11239
  %11257 = trunc i64 %11256 to i32
  %11258 = xor i32 %11257, %11243
  %11259 = lshr i32 %11258, 4
  %11260 = trunc i32 %11259 to i8
  %11261 = and i8 %11260, 1
  %11262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11261, i8* %11262, align 1, !tbaa !2447
  %11263 = icmp eq i32 %11243, 0
  %11264 = zext i1 %11263 to i8
  %11265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11264, i8* %11265, align 1, !tbaa !2448
  %11266 = lshr i32 %11243, 31
  %11267 = trunc i32 %11266 to i8
  %11268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11267, i8* %11268, align 1, !tbaa !2449
  %11269 = lshr i32 %11242, 31
  %11270 = xor i32 %11266, %11269
  %11271 = add nuw nsw i32 %11270, %11266
  %11272 = icmp eq i32 %11271, 2
  %11273 = zext i1 %11272 to i8
  %11274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11273, i8* %11274, align 1, !tbaa !2450
  %11275 = load i64, i64* %RBP
  %11276 = sub i64 %11275, 12
  %11277 = load i32, i32* %EAX
  %11278 = zext i32 %11277 to i64
  %11279 = load i64, i64* %PC
  %11280 = add i64 %11279, 3
  store i64 %11280, i64* %PC
  %11281 = inttoptr i64 %11276 to i32*
  store i32 %11277, i32* %11281
  %11282 = load i64, i64* %RBP
  %11283 = sub i64 %11282, 12
  %11284 = load i64, i64* %PC
  %11285 = add i64 %11284, 4
  store i64 %11285, i64* %PC
  %11286 = inttoptr i64 %11283 to i32*
  %11287 = load i32, i32* %11286
  %11288 = sext i32 %11287 to i64
  store i64 %11288, i64* %RCX, align 8, !tbaa !2428
  %11289 = load i64, i64* %RBP
  %11290 = load i64, i64* %RCX
  %11291 = mul i64 %11290, 4
  %11292 = add i64 %11289, -1328
  %11293 = add i64 %11292, %11291
  %11294 = load i64, i64* %PC
  %11295 = add i64 %11294, 8
  store i64 %11295, i64* %PC
  %11296 = inttoptr i64 %11293 to i32*
  %11297 = load i32, i32* %11296
  %11298 = sub i32 %11297, 8
  %11299 = icmp ult i32 %11297, 8
  %11300 = zext i1 %11299 to i8
  %11301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11300, i8* %11301, align 1, !tbaa !2432
  %11302 = and i32 %11298, 255
  %11303 = call i32 @llvm.ctpop.i32(i32 %11302) #16
  %11304 = trunc i32 %11303 to i8
  %11305 = and i8 %11304, 1
  %11306 = xor i8 %11305, 1
  %11307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11306, i8* %11307, align 1, !tbaa !2446
  %11308 = xor i32 %11297, 8
  %11309 = xor i32 %11308, %11298
  %11310 = lshr i32 %11309, 4
  %11311 = trunc i32 %11310 to i8
  %11312 = and i8 %11311, 1
  %11313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11312, i8* %11313, align 1, !tbaa !2447
  %11314 = icmp eq i32 %11298, 0
  %11315 = zext i1 %11314 to i8
  %11316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11315, i8* %11316, align 1, !tbaa !2448
  %11317 = lshr i32 %11298, 31
  %11318 = trunc i32 %11317 to i8
  %11319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11318, i8* %11319, align 1, !tbaa !2449
  %11320 = lshr i32 %11297, 31
  %11321 = xor i32 %11317, %11320
  %11322 = add nuw nsw i32 %11321, %11320
  %11323 = icmp eq i32 %11322, 2
  %11324 = zext i1 %11323 to i8
  %11325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11324, i8* %11325, align 1, !tbaa !2450
  %11326 = load i64, i64* %PC
  %11327 = add i64 %11326, 1847
  %11328 = load i64, i64* %PC
  %11329 = add i64 %11328, 6
  %11330 = load i64, i64* %PC
  %11331 = add i64 %11330, 6
  store i64 %11331, i64* %PC
  %11332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11333 = load i8, i8* %11332, align 1, !tbaa !2448
  %11334 = icmp eq i8 %11333, 0
  %11335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %11336 = load i8, i8* %11335, align 1, !tbaa !2449
  %11337 = icmp ne i8 %11336, 0
  %11338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11339 = load i8, i8* %11338, align 1, !tbaa !2450
  %11340 = icmp ne i8 %11339, 0
  %11341 = xor i1 %11337, %11340
  %11342 = xor i1 %11341, true
  %11343 = and i1 %11334, %11342
  %11344 = zext i1 %11343 to i8
  store i8 %11344, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11346 = select i1 %11343, i64 %11327, i64 %11329
  store i64 %11346, i64* %11345, align 8, !tbaa !2428
  %11347 = load i8, i8* %BRANCH_TAKEN
  %11348 = icmp eq i8 %11347, 1
  %11349 = load i64, i64* %RBP
  %11350 = sub i64 %11349, 4
  %11351 = load i64, i64* %PC
  %11352 = add i64 %11351, 7
  store i64 %11352, i64* %PC
  %11353 = inttoptr i64 %11350 to i32*
  store i32 0, i32* %11353
  br i1 %11348, label %block_40175f, label %block_40102e

block_401353:                                     ; preds = %block_40134c, %block_4013f1
  %MEMORY.54 = phi %struct.Memory* [ %MEMORY.11, %block_40134c ], [ %MEMORY.1, %block_4013f1 ]
  %11354 = load i64, i64* %RBP
  %11355 = sub i64 %11354, 8
  %11356 = load i64, i64* %PC
  %11357 = add i64 %11356, 3
  store i64 %11357, i64* %PC
  %11358 = inttoptr i64 %11355 to i32*
  %11359 = load i32, i32* %11358
  %11360 = zext i32 %11359 to i64
  store i64 %11360, i64* %RAX, align 8, !tbaa !2428
  %11361 = load i32, i32* %EAX
  %11362 = zext i32 %11361 to i64
  %11363 = load i64, i64* %RBP
  %11364 = sub i64 %11363, 4
  %11365 = load i64, i64* %PC
  %11366 = add i64 %11365, 3
  store i64 %11366, i64* %PC
  %11367 = inttoptr i64 %11364 to i32*
  %11368 = load i32, i32* %11367
  %11369 = sub i32 %11361, %11368
  %11370 = icmp ult i32 %11361, %11368
  %11371 = zext i1 %11370 to i8
  %11372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11371, i8* %11372, align 1, !tbaa !2432
  %11373 = and i32 %11369, 255
  %11374 = call i32 @llvm.ctpop.i32(i32 %11373) #16
  %11375 = trunc i32 %11374 to i8
  %11376 = and i8 %11375, 1
  %11377 = xor i8 %11376, 1
  %11378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11377, i8* %11378, align 1, !tbaa !2446
  %11379 = xor i32 %11368, %11361
  %11380 = xor i32 %11379, %11369
  %11381 = lshr i32 %11380, 4
  %11382 = trunc i32 %11381 to i8
  %11383 = and i8 %11382, 1
  %11384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11383, i8* %11384, align 1, !tbaa !2447
  %11385 = icmp eq i32 %11369, 0
  %11386 = zext i1 %11385 to i8
  %11387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11386, i8* %11387, align 1, !tbaa !2448
  %11388 = lshr i32 %11369, 31
  %11389 = trunc i32 %11388 to i8
  %11390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11389, i8* %11390, align 1, !tbaa !2449
  %11391 = lshr i32 %11361, 31
  %11392 = lshr i32 %11368, 31
  %11393 = xor i32 %11392, %11391
  %11394 = xor i32 %11388, %11391
  %11395 = add nuw nsw i32 %11394, %11393
  %11396 = icmp eq i32 %11395, 2
  %11397 = zext i1 %11396 to i8
  %11398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11397, i8* %11398, align 1, !tbaa !2450
  %11399 = load i64, i64* %PC
  %11400 = add i64 %11399, 171
  %11401 = load i64, i64* %PC
  %11402 = add i64 %11401, 6
  %11403 = load i64, i64* %PC
  %11404 = add i64 %11403, 6
  store i64 %11404, i64* %PC
  %11405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %11406 = load i8, i8* %11405, align 1, !tbaa !2449
  %11407 = icmp ne i8 %11406, 0
  %11408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11409 = load i8, i8* %11408, align 1, !tbaa !2450
  %11410 = icmp ne i8 %11409, 0
  %11411 = xor i1 %11407, %11410
  %11412 = xor i1 %11411, true
  %11413 = zext i1 %11412 to i8
  store i8 %11413, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11415 = select i1 %11411, i64 %11402, i64 %11400
  store i64 %11415, i64* %11414, align 8, !tbaa !2428
  %11416 = load i8, i8* %BRANCH_TAKEN
  %11417 = icmp eq i8 %11416, 1
  %11418 = load i64, i64* %RBP
  br i1 %11417, label %block_401404, label %block_40135f

block_401205:                                     ; preds = %block_4011f1
  %11419 = add i64 %3434, 4
  store i64 %11419, i64* %PC
  %11420 = inttoptr i64 %3433 to i32*
  %11421 = load i32, i32* %11420
  %11422 = sext i32 %11421 to i64
  store i64 %11422, i64* %RAX, align 8, !tbaa !2428
  %11423 = load i64, i64* %RBP
  %11424 = load i64, i64* %RAX
  %11425 = mul i64 %11424, 4
  %11426 = add i64 %11423, -1488
  %11427 = add i64 %11426, %11425
  %11428 = load i64, i64* %PC
  %11429 = add i64 %11428, 8
  store i64 %11429, i64* %PC
  %11430 = inttoptr i64 %11427 to i32*
  %11431 = load i32, i32* %11430
  %11432 = sub i32 %11431, -1
  %11433 = icmp ult i32 %11431, -1
  %11434 = zext i1 %11433 to i8
  %11435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11434, i8* %11435, align 1, !tbaa !2432
  %11436 = and i32 %11432, 255
  %11437 = call i32 @llvm.ctpop.i32(i32 %11436) #16
  %11438 = trunc i32 %11437 to i8
  %11439 = and i8 %11438, 1
  %11440 = xor i8 %11439, 1
  %11441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11440, i8* %11441, align 1, !tbaa !2446
  %11442 = xor i32 %11431, -1
  %11443 = xor i32 %11442, %11432
  %11444 = lshr i32 %11443, 4
  %11445 = trunc i32 %11444 to i8
  %11446 = and i8 %11445, 1
  %11447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11446, i8* %11447, align 1, !tbaa !2447
  %11448 = icmp eq i32 %11432, 0
  %11449 = zext i1 %11448 to i8
  %11450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11449, i8* %11450, align 1, !tbaa !2448
  %11451 = lshr i32 %11432, 31
  %11452 = trunc i32 %11451 to i8
  %11453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11452, i8* %11453, align 1, !tbaa !2449
  %11454 = lshr i32 %11431, 31
  %11455 = xor i32 %11454, 1
  %11456 = xor i32 %11451, %11454
  %11457 = add nuw nsw i32 %11456, %11455
  %11458 = icmp eq i32 %11457, 2
  %11459 = zext i1 %11458 to i8
  %11460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11459, i8* %11460, align 1, !tbaa !2450
  %11461 = load i64, i64* %PC
  %11462 = add i64 %11461, 106
  %11463 = load i64, i64* %PC
  %11464 = add i64 %11463, 6
  %11465 = load i64, i64* %PC
  %11466 = add i64 %11465, 6
  store i64 %11466, i64* %PC
  %11467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11468 = load i8, i8* %11467, align 1, !tbaa !2448
  store i8 %11468, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11470 = icmp ne i8 %11468, 0
  %11471 = select i1 %11470, i64 %11462, i64 %11464
  store i64 %11471, i64* %11469, align 8, !tbaa !2428
  %11472 = load i8, i8* %BRANCH_TAKEN
  %11473 = icmp eq i8 %11472, 1
  br i1 %11473, label %block_40127b, label %block_401217

block_401404:                                     ; preds = %block_401353
  %11474 = sub i64 %11418, 4
  %11475 = load i64, i64* %PC
  %11476 = add i64 %11475, 4
  store i64 %11476, i64* %PC
  %11477 = inttoptr i64 %11474 to i32*
  %11478 = load i32, i32* %11477
  %11479 = sext i32 %11478 to i64
  store i64 %11479, i64* %RAX, align 8, !tbaa !2428
  %11480 = load i64, i64* %RBP
  %11481 = load i64, i64* %RAX
  %11482 = mul i64 %11481, 4
  %11483 = add i64 %11480, -1616
  %11484 = add i64 %11483, %11482
  %11485 = load i64, i64* %PC
  %11486 = add i64 %11485, 8
  store i64 %11486, i64* %PC
  %11487 = inttoptr i64 %11484 to i32*
  %11488 = load i32, i32* %11487
  %11489 = sext i32 %11488 to i64
  store i64 %11489, i64* %RAX, align 8, !tbaa !2428
  %11490 = load i64, i64* %RAX
  %11491 = mul i64 %11490, 4
  %11492 = add i64 %11491, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %11493 = load i64, i64* %PC
  %11494 = add i64 %11493, 7
  store i64 %11494, i64* %PC
  %11495 = inttoptr i64 %11492 to i32*
  %11496 = load i32, i32* %11495
  %11497 = zext i32 %11496 to i64
  store i64 %11497, i64* %RCX, align 8, !tbaa !2428
  %11498 = load i64, i64* %RBP
  %11499 = sub i64 %11498, 4
  %11500 = load i64, i64* %PC
  %11501 = add i64 %11500, 4
  store i64 %11501, i64* %PC
  %11502 = inttoptr i64 %11499 to i32*
  %11503 = load i32, i32* %11502
  %11504 = sext i32 %11503 to i64
  store i64 %11504, i64* %RAX, align 8, !tbaa !2428
  %11505 = load i64, i64* %RBP
  %11506 = load i64, i64* %RAX
  %11507 = mul i64 %11506, 4
  %11508 = add i64 %11505, -1616
  %11509 = add i64 %11508, %11507
  %11510 = load i32, i32* %ECX
  %11511 = zext i32 %11510 to i64
  %11512 = load i64, i64* %PC
  %11513 = add i64 %11512, 7
  store i64 %11513, i64* %PC
  %11514 = inttoptr i64 %11509 to i32*
  store i32 %11510, i32* %11514
  %11515 = load i64, i64* %RBP
  %11516 = sub i64 %11515, 4
  %11517 = load i64, i64* %PC
  %11518 = add i64 %11517, 3
  store i64 %11518, i64* %PC
  %11519 = inttoptr i64 %11516 to i32*
  %11520 = load i32, i32* %11519
  %11521 = zext i32 %11520 to i64
  store i64 %11521, i64* %RAX, align 8, !tbaa !2428
  %11522 = load i64, i64* %RAX
  %11523 = load i64, i64* %PC
  %11524 = add i64 %11523, 3
  store i64 %11524, i64* %PC
  %11525 = trunc i64 %11522 to i32
  %11526 = add i32 1, %11525
  %11527 = zext i32 %11526 to i64
  store i64 %11527, i64* %RAX, align 8, !tbaa !2428
  %11528 = icmp ult i32 %11526, %11525
  %11529 = icmp ult i32 %11526, 1
  %11530 = or i1 %11528, %11529
  %11531 = zext i1 %11530 to i8
  %11532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11531, i8* %11532, align 1, !tbaa !2432
  %11533 = and i32 %11526, 255
  %11534 = call i32 @llvm.ctpop.i32(i32 %11533) #16
  %11535 = trunc i32 %11534 to i8
  %11536 = and i8 %11535, 1
  %11537 = xor i8 %11536, 1
  %11538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11537, i8* %11538, align 1, !tbaa !2446
  %11539 = xor i64 1, %11522
  %11540 = trunc i64 %11539 to i32
  %11541 = xor i32 %11540, %11526
  %11542 = lshr i32 %11541, 4
  %11543 = trunc i32 %11542 to i8
  %11544 = and i8 %11543, 1
  %11545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11544, i8* %11545, align 1, !tbaa !2447
  %11546 = icmp eq i32 %11526, 0
  %11547 = zext i1 %11546 to i8
  %11548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11547, i8* %11548, align 1, !tbaa !2448
  %11549 = lshr i32 %11526, 31
  %11550 = trunc i32 %11549 to i8
  %11551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11550, i8* %11551, align 1, !tbaa !2449
  %11552 = lshr i32 %11525, 31
  %11553 = xor i32 %11549, %11552
  %11554 = add nuw nsw i32 %11553, %11549
  %11555 = icmp eq i32 %11554, 2
  %11556 = zext i1 %11555 to i8
  %11557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11556, i8* %11557, align 1, !tbaa !2450
  %11558 = load i64, i64* %RBP
  %11559 = sub i64 %11558, 4
  %11560 = load i32, i32* %EAX
  %11561 = zext i32 %11560 to i64
  %11562 = load i64, i64* %PC
  %11563 = add i64 %11562, 3
  store i64 %11563, i64* %PC
  %11564 = inttoptr i64 %11559 to i32*
  store i32 %11560, i32* %11564
  %11565 = load i64, i64* %PC
  %11566 = sub i64 %11565, 570
  %11567 = load i64, i64* %PC
  %11568 = add i64 %11567, 5
  store i64 %11568, i64* %PC
  %11569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11566, i64* %11569, align 8, !tbaa !2428
  br label %block_4011f1

block_400c00:                                     ; preds = %block_400be5
  %11570 = load i64, i64* %RBP
  %11571 = sub i64 %11570, 16
  %11572 = load i64, i64* %PC
  %11573 = add i64 %11572, 4
  store i64 %11573, i64* %PC
  %11574 = inttoptr i64 %11571 to i32*
  %11575 = load i32, i32* %11574
  %11576 = sext i32 %11575 to i64
  store i64 %11576, i64* %RAX, align 8, !tbaa !2428
  %11577 = load i64, i64* %RBP
  %11578 = load i64, i64* %RAX
  %11579 = mul i64 %11578, 4
  %11580 = add i64 %11577, -1408
  %11581 = add i64 %11580, %11579
  %11582 = load i64, i64* %PC
  %11583 = add i64 %11582, 7
  store i64 %11583, i64* %PC
  %11584 = inttoptr i64 %11581 to i32*
  %11585 = load i32, i32* %11584
  %11586 = zext i32 %11585 to i64
  store i64 %11586, i64* %RCX, align 8, !tbaa !2428
  %11587 = load i64, i64* %RBP
  %11588 = sub i64 %11587, 8
  %11589 = load i64, i64* %PC
  %11590 = add i64 %11589, 4
  store i64 %11590, i64* %PC
  %11591 = inttoptr i64 %11588 to i32*
  %11592 = load i32, i32* %11591
  %11593 = sext i32 %11592 to i64
  store i64 %11593, i64* %RAX, align 8, !tbaa !2428
  %11594 = load i32, i32* %ECX
  %11595 = zext i32 %11594 to i64
  %11596 = load i64, i64* %RBP
  %11597 = load i64, i64* %RAX
  %11598 = mul i64 %11597, 4
  %11599 = add i64 %11596, -1408
  %11600 = add i64 %11599, %11598
  %11601 = load i64, i64* %PC
  %11602 = add i64 %11601, 7
  store i64 %11602, i64* %PC
  %11603 = inttoptr i64 %11600 to i32*
  %11604 = load i32, i32* %11603
  %11605 = sub i32 %11594, %11604
  %11606 = icmp ult i32 %11594, %11604
  %11607 = zext i1 %11606 to i8
  %11608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11607, i8* %11608, align 1, !tbaa !2432
  %11609 = and i32 %11605, 255
  %11610 = call i32 @llvm.ctpop.i32(i32 %11609) #16
  %11611 = trunc i32 %11610 to i8
  %11612 = and i8 %11611, 1
  %11613 = xor i8 %11612, 1
  %11614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11613, i8* %11614, align 1, !tbaa !2446
  %11615 = xor i32 %11604, %11594
  %11616 = xor i32 %11615, %11605
  %11617 = lshr i32 %11616, 4
  %11618 = trunc i32 %11617 to i8
  %11619 = and i8 %11618, 1
  %11620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11619, i8* %11620, align 1, !tbaa !2447
  %11621 = icmp eq i32 %11605, 0
  %11622 = zext i1 %11621 to i8
  %11623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11622, i8* %11623, align 1, !tbaa !2448
  %11624 = lshr i32 %11605, 31
  %11625 = trunc i32 %11624 to i8
  %11626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11625, i8* %11626, align 1, !tbaa !2449
  %11627 = lshr i32 %11594, 31
  %11628 = lshr i32 %11604, 31
  %11629 = xor i32 %11628, %11627
  %11630 = xor i32 %11624, %11627
  %11631 = add nuw nsw i32 %11630, %11629
  %11632 = icmp eq i32 %11631, 2
  %11633 = zext i1 %11632 to i8
  %11634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11633, i8* %11634, align 1, !tbaa !2450
  %11635 = load i64, i64* %PC
  %11636 = add i64 %11635, 12
  %11637 = load i64, i64* %PC
  %11638 = add i64 %11637, 6
  %11639 = load i64, i64* %PC
  %11640 = add i64 %11639, 6
  store i64 %11640, i64* %PC
  %11641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %11642 = load i8, i8* %11641, align 1, !tbaa !2449
  %11643 = icmp ne i8 %11642, 0
  %11644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11645 = load i8, i8* %11644, align 1, !tbaa !2450
  %11646 = icmp ne i8 %11645, 0
  %11647 = xor i1 %11643, %11646
  %11648 = xor i1 %11647, true
  %11649 = zext i1 %11648 to i8
  store i8 %11649, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11651 = select i1 %11647, i64 %11638, i64 %11636
  store i64 %11651, i64* %11650, align 8, !tbaa !2428
  %11652 = load i8, i8* %BRANCH_TAKEN
  %11653 = icmp eq i8 %11652, 1
  br i1 %11653, label %block_400c22, label %block_400c1c
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004f0_rsdec_204(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004f0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 7
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 5
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %ECX = bitcast %union.anon* %19 to i32*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 7
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %EDX = bitcast %union.anon* %22 to i32*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 9
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %ESI = bitcast %union.anon* %25 to i32*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 1
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RAX = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 5
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RCX = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 7
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RDX = bitcast %union.anon* %34 to i64*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 9
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %RSI = bitcast %union.anon* %37 to i64*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %39 = getelementptr inbounds %struct.GPR, %struct.GPR* %38, i32 0, i32 11
  %40 = getelementptr inbounds %struct.Reg, %struct.Reg* %39, i32 0, i32 0
  %RDI = bitcast %union.anon* %40 to i64*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %42 = getelementptr inbounds %struct.GPR, %struct.GPR* %41, i32 0, i32 13
  %43 = getelementptr inbounds %struct.Reg, %struct.Reg* %42, i32 0, i32 0
  %RSP = bitcast %union.anon* %43 to i64*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %45 = getelementptr inbounds %struct.GPR, %struct.GPR* %44, i32 0, i32 15
  %46 = getelementptr inbounds %struct.Reg, %struct.Reg* %45, i32 0, i32 0
  %RBP = bitcast %union.anon* %46 to i64*
  %47 = load i64, i64* %RBP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 1
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %51 = load i64, i64* %50, align 8, !tbaa !2428
  %52 = add i64 %51, -8
  %53 = inttoptr i64 %52 to i64*
  store i64 %47, i64* %53
  store i64 %52, i64* %50, align 8, !tbaa !2428
  %54 = load i64, i64* %RSP
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 3
  store i64 %56, i64* %PC
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  %57 = load i64, i64* %RSP
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC
  %60 = sub i64 %57, 32
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  %61 = icmp ult i64 %57, 32
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %62, i8* %63, align 1, !tbaa !2432
  %64 = trunc i64 %60 to i32
  %65 = and i32 %64, 255
  %66 = call i32 @llvm.ctpop.i32(i32 %65) #16
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 1
  %69 = xor i8 %68, 1
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %69, i8* %70, align 1, !tbaa !2446
  %71 = xor i64 32, %57
  %72 = xor i64 %71, %60
  %73 = lshr i64 %72, 4
  %74 = trunc i64 %73 to i8
  %75 = and i8 %74, 1
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %75, i8* %76, align 1, !tbaa !2447
  %77 = icmp eq i64 %60, 0
  %78 = zext i1 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %78, i8* %79, align 1, !tbaa !2448
  %80 = lshr i64 %60, 63
  %81 = trunc i64 %80 to i8
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %81, i8* %82, align 1, !tbaa !2449
  %83 = lshr i64 %57, 63
  %84 = xor i64 %80, %83
  %85 = add nuw nsw i64 %84, %83
  %86 = icmp eq i64 %85, 2
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %87, i8* %88, align 1, !tbaa !2450
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 8
  %91 = load i64, i64* %RDI
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 16
  %97 = load i64, i64* %RSI
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 8
  store i64 %102, i64* %PC
  %103 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 16) to i32*)
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %104, align 1, !tbaa !2432
  %105 = and i32 %103, 255
  %106 = call i32 @llvm.ctpop.i32(i32 %105) #16
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %109, i8* %110, align 1, !tbaa !2446
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %111, align 1, !tbaa !2447
  %112 = icmp eq i32 %103, 0
  %113 = zext i1 %112 to i8
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %113, i8* %114, align 1, !tbaa !2448
  %115 = lshr i32 %103, 31
  %116 = trunc i32 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %116, i8* %117, align 1, !tbaa !2449
  %118 = lshr i32 %103, 31
  %119 = xor i32 %115, %118
  %120 = add nuw nsw i32 %119, %118
  %121 = icmp eq i32 %120, 2
  %122 = zext i1 %121 to i8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %122, i8* %123, align 1, !tbaa !2450
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 27
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 6
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 6
  store i64 %129, i64* %PC
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %131 = load i8, i8* %130, align 1, !tbaa !2448
  %132 = icmp eq i8 %131, 0
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %135 = select i1 %132, i64 %125, i64 %127
  store i64 %135, i64* %134, align 8, !tbaa !2428
  %136 = load i8, i8* %BRANCH_TAKEN
  %137 = icmp eq i8 %136, 1
  br i1 %137, label %block_400523, label %block_40050e

block_400612:                                     ; preds = %block_4005d9
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 766
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 5
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 5
  store i64 %143, i64* %PC
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %145 = load i64, i64* %144, align 8, !tbaa !2428
  %146 = add i64 %145, -8
  %147 = inttoptr i64 %146 to i64*
  store i64 %141, i64* %147
  store i64 %146, i64* %144, align 8, !tbaa !2428
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %139, i64* %148, align 8, !tbaa !2428
  %149 = load i64, i64* %PC
  %150 = call %struct.Memory* @sub_400910_decode_rs_renamed_(%struct.State* %0, i64 %149, %struct.Memory* %MEMORY.0)
  %151 = load i64, i64* %RBP
  %152 = sub i64 %151, 20
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 7
  store i64 %154, i64* %PC
  %155 = inttoptr i64 %152 to i32*
  store i32 0, i32* %155
  br label %block_40061e

block_4005d9:                                     ; preds = %block_4005e6, %block_4005d2
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_4005d2 ], [ %MEMORY.0, %block_4005e6 ]
  %156 = load i64, i64* %RBP
  %157 = sub i64 %156, 20
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 7
  store i64 %159, i64* %PC
  %160 = inttoptr i64 %157 to i32*
  %161 = load i32, i32* %160
  %162 = sub i32 %161, 255
  %163 = icmp ult i32 %161, 255
  %164 = zext i1 %163 to i8
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %164, i8* %165, align 1, !tbaa !2432
  %166 = and i32 %162, 255
  %167 = call i32 @llvm.ctpop.i32(i32 %166) #16
  %168 = trunc i32 %167 to i8
  %169 = and i8 %168, 1
  %170 = xor i8 %169, 1
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %170, i8* %171, align 1, !tbaa !2446
  %172 = xor i32 %161, 255
  %173 = xor i32 %172, %162
  %174 = lshr i32 %173, 4
  %175 = trunc i32 %174 to i8
  %176 = and i8 %175, 1
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %176, i8* %177, align 1, !tbaa !2447
  %178 = icmp eq i32 %162, 0
  %179 = zext i1 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %179, i8* %180, align 1, !tbaa !2448
  %181 = lshr i32 %162, 31
  %182 = trunc i32 %181 to i8
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %182, i8* %183, align 1, !tbaa !2449
  %184 = lshr i32 %161, 31
  %185 = xor i32 %181, %184
  %186 = add nuw nsw i32 %185, %184
  %187 = icmp eq i32 %186, 2
  %188 = zext i1 %187 to i8
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %188, i8* %189, align 1, !tbaa !2450
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 50
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 6
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 6
  store i64 %195, i64* %PC
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %197 = load i8, i8* %196, align 1, !tbaa !2449
  %198 = icmp ne i8 %197, 0
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %200 = load i8, i8* %199, align 1, !tbaa !2450
  %201 = icmp ne i8 %200, 0
  %202 = xor i1 %198, %201
  %203 = xor i1 %202, true
  %204 = zext i1 %203 to i8
  store i8 %204, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %206 = select i1 %202, i64 %193, i64 %191
  store i64 %206, i64* %205, align 8, !tbaa !2428
  %207 = load i8, i8* %BRANCH_TAKEN
  %208 = icmp eq i8 %207, 1
  br i1 %208, label %block_400612, label %block_4005e6

block_40061e:                                     ; preds = %block_40062b, %block_400612
  %MEMORY.1 = phi %struct.Memory* [ %150, %block_400612 ], [ %MEMORY.1, %block_40062b ]
  %209 = load i64, i64* %RBP
  %210 = sub i64 %209, 20
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 7
  store i64 %212, i64* %PC
  %213 = inttoptr i64 %210 to i32*
  %214 = load i32, i32* %213
  %215 = sub i32 %214, 188
  %216 = icmp ult i32 %214, 188
  %217 = zext i1 %216 to i8
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %217, i8* %218, align 1, !tbaa !2432
  %219 = and i32 %215, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = xor i32 %214, 188
  %226 = xor i32 %225, %215
  %227 = lshr i32 %226, 4
  %228 = trunc i32 %227 to i8
  %229 = and i8 %228, 1
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %229, i8* %230, align 1, !tbaa !2447
  %231 = icmp eq i32 %215, 0
  %232 = zext i1 %231 to i8
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %232, i8* %233, align 1, !tbaa !2448
  %234 = lshr i32 %215, 31
  %235 = trunc i32 %234 to i8
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %235, i8* %236, align 1, !tbaa !2449
  %237 = lshr i32 %214, 31
  %238 = xor i32 %234, %237
  %239 = add nuw nsw i32 %238, %237
  %240 = icmp eq i32 %239, 2
  %241 = zext i1 %240 to i8
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %241, i8* %242, align 1, !tbaa !2450
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 49
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 6
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 6
  store i64 %248, i64* %PC
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %250 = load i8, i8* %249, align 1, !tbaa !2449
  %251 = icmp ne i8 %250, 0
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %253 = load i8, i8* %252, align 1, !tbaa !2450
  %254 = icmp ne i8 %253, 0
  %255 = xor i1 %251, %254
  %256 = xor i1 %255, true
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %259 = select i1 %255, i64 %246, i64 %244
  store i64 %259, i64* %258, align 8, !tbaa !2428
  %260 = load i8, i8* %BRANCH_TAKEN
  %261 = icmp eq i8 %260, 1
  br i1 %261, label %block_400656, label %block_40062b

block_4005d2:                                     ; preds = %block_40059b
  %262 = sub i64 %319, 20
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 7
  store i64 %264, i64* %PC
  %265 = inttoptr i64 %262 to i32*
  store i32 0, i32* %265
  br label %block_4005d9

block_40059b:                                     ; preds = %block_4005a8, %block_400594
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.4, %block_400594 ], [ %MEMORY.2, %block_4005a8 ]
  %266 = load i64, i64* %RBP
  %267 = sub i64 %266, 20
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 7
  store i64 %269, i64* %PC
  %270 = inttoptr i64 %267 to i32*
  %271 = load i32, i32* %270
  %272 = sub i32 %271, 188
  %273 = icmp ult i32 %271, 188
  %274 = zext i1 %273 to i8
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %274, i8* %275, align 1, !tbaa !2432
  %276 = and i32 %272, 255
  %277 = call i32 @llvm.ctpop.i32(i32 %276) #16
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = xor i8 %279, 1
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %280, i8* %281, align 1, !tbaa !2446
  %282 = xor i32 %271, 188
  %283 = xor i32 %282, %272
  %284 = lshr i32 %283, 4
  %285 = trunc i32 %284 to i8
  %286 = and i8 %285, 1
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %286, i8* %287, align 1, !tbaa !2447
  %288 = icmp eq i32 %272, 0
  %289 = zext i1 %288 to i8
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %289, i8* %290, align 1, !tbaa !2448
  %291 = lshr i32 %272, 31
  %292 = trunc i32 %291 to i8
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %292, i8* %293, align 1, !tbaa !2449
  %294 = lshr i32 %271, 31
  %295 = xor i32 %291, %294
  %296 = add nuw nsw i32 %295, %294
  %297 = icmp eq i32 %296, 2
  %298 = zext i1 %297 to i8
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %298, i8* %299, align 1, !tbaa !2450
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 48
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 6
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 6
  store i64 %305, i64* %PC
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %307 = load i8, i8* %306, align 1, !tbaa !2449
  %308 = icmp ne i8 %307, 0
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %310 = load i8, i8* %309, align 1, !tbaa !2450
  %311 = icmp ne i8 %310, 0
  %312 = xor i1 %308, %311
  %313 = xor i1 %312, true
  %314 = zext i1 %313 to i8
  store i8 %314, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %316 = select i1 %312, i64 %303, i64 %301
  store i64 %316, i64* %315, align 8, !tbaa !2428
  %317 = load i8, i8* %BRANCH_TAKEN
  %318 = icmp eq i8 %317, 1
  %319 = load i64, i64* %RBP
  br i1 %318, label %block_4005d2, label %block_4005a8

block_400656:                                     ; preds = %block_40061e
  %320 = load i64, i64* %RSP
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 4
  store i64 %322, i64* %PC
  %323 = add i64 32, %320
  store i64 %323, i64* %RSP, align 8, !tbaa !2428
  %324 = icmp ult i64 %323, %320
  %325 = icmp ult i64 %323, 32
  %326 = or i1 %324, %325
  %327 = zext i1 %326 to i8
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %327, i8* %328, align 1, !tbaa !2432
  %329 = trunc i64 %323 to i32
  %330 = and i32 %329, 255
  %331 = call i32 @llvm.ctpop.i32(i32 %330) #16
  %332 = trunc i32 %331 to i8
  %333 = and i8 %332, 1
  %334 = xor i8 %333, 1
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %334, i8* %335, align 1, !tbaa !2446
  %336 = xor i64 32, %320
  %337 = xor i64 %336, %323
  %338 = lshr i64 %337, 4
  %339 = trunc i64 %338 to i8
  %340 = and i8 %339, 1
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %340, i8* %341, align 1, !tbaa !2447
  %342 = icmp eq i64 %323, 0
  %343 = zext i1 %342 to i8
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %343, i8* %344, align 1, !tbaa !2448
  %345 = lshr i64 %323, 63
  %346 = trunc i64 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %346, i8* %347, align 1, !tbaa !2449
  %348 = lshr i64 %320, 63
  %349 = xor i64 %345, %348
  %350 = add nuw nsw i64 %349, %345
  %351 = icmp eq i64 %350, 2
  %352 = zext i1 %351 to i8
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %352, i8* %353, align 1, !tbaa !2450
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 1
  store i64 %355, i64* %PC
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %357 = load i64, i64* %356, align 8, !tbaa !2428
  %358 = add i64 %357, 8
  %359 = inttoptr i64 %357 to i64*
  %360 = load i64, i64* %359
  store i64 %360, i64* %RBP, align 8, !tbaa !2428
  store i64 %358, i64* %356, align 8, !tbaa !2428
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 1
  store i64 %362, i64* %PC
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %365 = load i64, i64* %364, align 8, !tbaa !2428
  %366 = inttoptr i64 %365 to i64*
  %367 = load i64, i64* %366
  store i64 %367, i64* %363, align 8, !tbaa !2428
  %368 = add i64 %365, 8
  store i64 %368, i64* %364, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400572:                                     ; preds = %block_400568
  %369 = add i64 %882, 3
  store i64 %369, i64* %PC
  %370 = inttoptr i64 %881 to i32*
  %371 = load i32, i32* %370
  %372 = zext i32 %371 to i64
  store i64 %372, i64* %RAX, align 8, !tbaa !2428
  %373 = load i64, i64* %RAX
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 3
  store i64 %375, i64* %PC
  %376 = trunc i64 %373 to i32
  %377 = add i32 16, %376
  %378 = zext i32 %377 to i64
  store i64 %378, i64* %RAX, align 8, !tbaa !2428
  %379 = icmp ult i32 %377, %376
  %380 = icmp ult i32 %377, 16
  %381 = or i1 %379, %380
  %382 = zext i1 %381 to i8
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %382, i8* %383, align 1, !tbaa !2432
  %384 = and i32 %377, 255
  %385 = call i32 @llvm.ctpop.i32(i32 %384) #16
  %386 = trunc i32 %385 to i8
  %387 = and i8 %386, 1
  %388 = xor i8 %387, 1
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %388, i8* %389, align 1, !tbaa !2446
  %390 = xor i64 16, %373
  %391 = trunc i64 %390 to i32
  %392 = xor i32 %391, %377
  %393 = lshr i32 %392, 4
  %394 = trunc i32 %393 to i8
  %395 = and i8 %394, 1
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %395, i8* %396, align 1, !tbaa !2447
  %397 = icmp eq i32 %377, 0
  %398 = zext i1 %397 to i8
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %398, i8* %399, align 1, !tbaa !2448
  %400 = lshr i32 %377, 31
  %401 = trunc i32 %400 to i8
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %401, i8* %402, align 1, !tbaa !2449
  %403 = lshr i32 %376, 31
  %404 = xor i32 %400, %403
  %405 = add nuw nsw i32 %404, %400
  %406 = icmp eq i32 %405, 2
  %407 = zext i1 %406 to i8
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %407, i8* %408, align 1, !tbaa !2450
  %409 = load i32, i32* %EAX
  %410 = zext i32 %409 to i64
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 3
  store i64 %412, i64* %PC
  %413 = shl i64 %410, 32
  %414 = ashr exact i64 %413, 32
  store i64 %414, i64* %RCX, align 8, !tbaa !2428
  %415 = load i64, i64* %RCX
  %416 = mul i64 %415, 4
  %417 = add i64 %416, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 11
  store i64 %419, i64* %PC
  %420 = inttoptr i64 %417 to i32*
  store i32 0, i32* %420
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 20
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 3
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  %426 = load i32, i32* %425
  %427 = zext i32 %426 to i64
  store i64 %427, i64* %RAX, align 8, !tbaa !2428
  %428 = load i64, i64* %RAX
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 3
  store i64 %430, i64* %PC
  %431 = trunc i64 %428 to i32
  %432 = add i32 1, %431
  %433 = zext i32 %432 to i64
  store i64 %433, i64* %RAX, align 8, !tbaa !2428
  %434 = icmp ult i32 %432, %431
  %435 = icmp ult i32 %432, 1
  %436 = or i1 %434, %435
  %437 = zext i1 %436 to i8
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %437, i8* %438, align 1, !tbaa !2432
  %439 = and i32 %432, 255
  %440 = call i32 @llvm.ctpop.i32(i32 %439) #16
  %441 = trunc i32 %440 to i8
  %442 = and i8 %441, 1
  %443 = xor i8 %442, 1
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %443, i8* %444, align 1, !tbaa !2446
  %445 = xor i64 1, %428
  %446 = trunc i64 %445 to i32
  %447 = xor i32 %446, %432
  %448 = lshr i32 %447, 4
  %449 = trunc i32 %448 to i8
  %450 = and i8 %449, 1
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %450, i8* %451, align 1, !tbaa !2447
  %452 = icmp eq i32 %432, 0
  %453 = zext i1 %452 to i8
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %453, i8* %454, align 1, !tbaa !2448
  %455 = lshr i32 %432, 31
  %456 = trunc i32 %455 to i8
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %456, i8* %457, align 1, !tbaa !2449
  %458 = lshr i32 %431, 31
  %459 = xor i32 %455, %458
  %460 = add nuw nsw i32 %459, %455
  %461 = icmp eq i32 %460, 2
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %462, i8* %463, align 1, !tbaa !2450
  %464 = load i64, i64* %RBP
  %465 = sub i64 %464, 20
  %466 = load i32, i32* %EAX
  %467 = zext i32 %466 to i64
  %468 = load i64, i64* %PC
  %469 = add i64 %468, 3
  store i64 %469, i64* %PC
  %470 = inttoptr i64 %465 to i32*
  store i32 %466, i32* %470
  %471 = load i64, i64* %PC
  %472 = sub i64 %471, 39
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 5
  store i64 %474, i64* %PC
  %475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %472, i64* %475, align 8, !tbaa !2428
  br label %block_400568

block_400534:                                     ; preds = %block_40052a
  %476 = sub i64 %826, 16
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 4
  store i64 %478, i64* %PC
  %479 = inttoptr i64 %476 to i64*
  %480 = load i64, i64* %479
  store i64 %480, i64* %RAX, align 8, !tbaa !2428
  %481 = load i64, i64* %RBP
  %482 = sub i64 %481, 20
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 3
  store i64 %484, i64* %PC
  %485 = inttoptr i64 %482 to i32*
  %486 = load i32, i32* %485
  %487 = zext i32 %486 to i64
  store i64 %487, i64* %RCX, align 8, !tbaa !2428
  %488 = load i64, i64* %RCX
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 6
  store i64 %490, i64* %PC
  %491 = trunc i64 %488 to i32
  %492 = add i32 188, %491
  %493 = zext i32 %492 to i64
  store i64 %493, i64* %RCX, align 8, !tbaa !2428
  %494 = icmp ult i32 %492, %491
  %495 = icmp ult i32 %492, 188
  %496 = or i1 %494, %495
  %497 = zext i1 %496 to i8
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %497, i8* %498, align 1, !tbaa !2432
  %499 = and i32 %492, 255
  %500 = call i32 @llvm.ctpop.i32(i32 %499) #16
  %501 = trunc i32 %500 to i8
  %502 = and i8 %501, 1
  %503 = xor i8 %502, 1
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %503, i8* %504, align 1, !tbaa !2446
  %505 = xor i64 188, %488
  %506 = trunc i64 %505 to i32
  %507 = xor i32 %506, %492
  %508 = lshr i32 %507, 4
  %509 = trunc i32 %508 to i8
  %510 = and i8 %509, 1
  %511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %510, i8* %511, align 1, !tbaa !2447
  %512 = icmp eq i32 %492, 0
  %513 = zext i1 %512 to i8
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %513, i8* %514, align 1, !tbaa !2448
  %515 = lshr i32 %492, 31
  %516 = trunc i32 %515 to i8
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %516, i8* %517, align 1, !tbaa !2449
  %518 = lshr i32 %491, 31
  %519 = xor i32 %515, %518
  %520 = add nuw nsw i32 %519, %515
  %521 = icmp eq i32 %520, 2
  %522 = zext i1 %521 to i8
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %522, i8* %523, align 1, !tbaa !2450
  %524 = load i32, i32* %ECX
  %525 = zext i32 %524 to i64
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = shl i64 %525, 32
  %529 = ashr exact i64 %528, 32
  store i64 %529, i64* %RDX, align 8, !tbaa !2428
  %530 = load i64, i64* %RAX
  %531 = load i64, i64* %RDX
  %532 = add i64 %531, %530
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 4
  store i64 %534, i64* %PC
  %535 = inttoptr i64 %532 to i8*
  %536 = load i8, i8* %535
  %537 = zext i8 %536 to i64
  store i64 %537, i64* %RCX, align 8, !tbaa !2428
  %538 = load i64, i64* %RBP
  %539 = sub i64 %538, 20
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 4
  store i64 %541, i64* %PC
  %542 = inttoptr i64 %539 to i32*
  %543 = load i32, i32* %542
  %544 = sext i32 %543 to i64
  store i64 %544, i64* %RAX, align 8, !tbaa !2428
  %545 = load i64, i64* %RAX
  %546 = mul i64 %545, 4
  %547 = add i64 %546, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %548 = load i32, i32* %ECX
  %549 = zext i32 %548 to i64
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 7
  store i64 %551, i64* %PC
  %552 = inttoptr i64 %547 to i32*
  store i32 %548, i32* %552
  %553 = load i64, i64* %RBP
  %554 = sub i64 %553, 20
  %555 = load i64, i64* %PC
  %556 = add i64 %555, 3
  store i64 %556, i64* %PC
  %557 = inttoptr i64 %554 to i32*
  %558 = load i32, i32* %557
  %559 = zext i32 %558 to i64
  store i64 %559, i64* %RAX, align 8, !tbaa !2428
  %560 = load i64, i64* %RAX
  %561 = load i64, i64* %PC
  %562 = add i64 %561, 3
  store i64 %562, i64* %PC
  %563 = trunc i64 %560 to i32
  %564 = add i32 1, %563
  %565 = zext i32 %564 to i64
  store i64 %565, i64* %RAX, align 8, !tbaa !2428
  %566 = icmp ult i32 %564, %563
  %567 = icmp ult i32 %564, 1
  %568 = or i1 %566, %567
  %569 = zext i1 %568 to i8
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %569, i8* %570, align 1, !tbaa !2432
  %571 = and i32 %564, 255
  %572 = call i32 @llvm.ctpop.i32(i32 %571) #16
  %573 = trunc i32 %572 to i8
  %574 = and i8 %573, 1
  %575 = xor i8 %574, 1
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %575, i8* %576, align 1, !tbaa !2446
  %577 = xor i64 1, %560
  %578 = trunc i64 %577 to i32
  %579 = xor i32 %578, %564
  %580 = lshr i32 %579, 4
  %581 = trunc i32 %580 to i8
  %582 = and i8 %581, 1
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %582, i8* %583, align 1, !tbaa !2447
  %584 = icmp eq i32 %564, 0
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %585, i8* %586, align 1, !tbaa !2448
  %587 = lshr i32 %564, 31
  %588 = trunc i32 %587 to i8
  %589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %588, i8* %589, align 1, !tbaa !2449
  %590 = lshr i32 %563, 31
  %591 = xor i32 %587, %590
  %592 = add nuw nsw i32 %591, %587
  %593 = icmp eq i32 %592, 2
  %594 = zext i1 %593 to i8
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %594, i8* %595, align 1, !tbaa !2450
  %596 = load i64, i64* %RBP
  %597 = sub i64 %596, 20
  %598 = load i32, i32* %EAX
  %599 = zext i32 %598 to i64
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 3
  store i64 %601, i64* %PC
  %602 = inttoptr i64 %597 to i32*
  store i32 %598, i32* %602
  %603 = load i64, i64* %PC
  %604 = sub i64 %603, 50
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 5
  store i64 %606, i64* %PC
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %604, i64* %607, align 8, !tbaa !2428
  br label %block_40052a

block_40050e:                                     ; preds = %block_4004f0
  %608 = load i64, i64* %PC
  %609 = add i64 %608, 338
  %610 = load i64, i64* %PC
  %611 = add i64 %610, 5
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 5
  store i64 %613, i64* %PC
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %615 = load i64, i64* %614, align 8, !tbaa !2428
  %616 = add i64 %615, -8
  %617 = inttoptr i64 %616 to i64*
  store i64 %611, i64* %617
  store i64 %616, i64* %614, align 8, !tbaa !2428
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %609, i64* %618, align 8, !tbaa !2428
  %619 = load i64, i64* %PC
  %620 = call %struct.Memory* @sub_400660_generate_gf_renamed_(%struct.State* %0, i64 %619, %struct.Memory* %2)
  %621 = load i64, i64* %PC
  %622 = add i64 %621, 669
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 5
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 5
  store i64 %626, i64* %PC
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %628 = load i64, i64* %627, align 8, !tbaa !2428
  %629 = add i64 %628, -8
  %630 = inttoptr i64 %629 to i64*
  store i64 %624, i64* %630
  store i64 %629, i64* %627, align 8, !tbaa !2428
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %622, i64* %631, align 8, !tbaa !2428
  %632 = load i64, i64* %PC
  %633 = call %struct.Memory* @sub_4007b0_gen_poly_renamed_(%struct.State* %0, i64 %632, %struct.Memory* %620)
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 11
  store i64 %635, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 16) to i32*)
  br label %block_400523

block_40062b:                                     ; preds = %block_40061e
  %636 = load i64, i64* %RBP
  %637 = sub i64 %636, 20
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 3
  store i64 %639, i64* %PC
  %640 = inttoptr i64 %637 to i32*
  %641 = load i32, i32* %640
  %642 = zext i32 %641 to i64
  store i64 %642, i64* %RAX, align 8, !tbaa !2428
  %643 = load i64, i64* %RAX
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 3
  store i64 %645, i64* %PC
  %646 = trunc i64 %643 to i32
  %647 = add i32 67, %646
  %648 = zext i32 %647 to i64
  store i64 %648, i64* %RAX, align 8, !tbaa !2428
  %649 = icmp ult i32 %647, %646
  %650 = icmp ult i32 %647, 67
  %651 = or i1 %649, %650
  %652 = zext i1 %651 to i8
  %653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %652, i8* %653, align 1, !tbaa !2432
  %654 = and i32 %647, 255
  %655 = call i32 @llvm.ctpop.i32(i32 %654) #16
  %656 = trunc i32 %655 to i8
  %657 = and i8 %656, 1
  %658 = xor i8 %657, 1
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %658, i8* %659, align 1, !tbaa !2446
  %660 = xor i64 67, %643
  %661 = trunc i64 %660 to i32
  %662 = xor i32 %661, %647
  %663 = lshr i32 %662, 4
  %664 = trunc i32 %663 to i8
  %665 = and i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %665, i8* %666, align 1, !tbaa !2447
  %667 = icmp eq i32 %647, 0
  %668 = zext i1 %667 to i8
  %669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %668, i8* %669, align 1, !tbaa !2448
  %670 = lshr i32 %647, 31
  %671 = trunc i32 %670 to i8
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %671, i8* %672, align 1, !tbaa !2449
  %673 = lshr i32 %646, 31
  %674 = xor i32 %670, %673
  %675 = add nuw nsw i32 %674, %670
  %676 = icmp eq i32 %675, 2
  %677 = zext i1 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %677, i8* %678, align 1, !tbaa !2450
  %679 = load i32, i32* %EAX
  %680 = zext i32 %679 to i64
  %681 = load i64, i64* %PC
  %682 = add i64 %681, 3
  store i64 %682, i64* %PC
  %683 = shl i64 %680, 32
  %684 = ashr exact i64 %683, 32
  store i64 %684, i64* %RCX, align 8, !tbaa !2428
  %685 = load i64, i64* %RCX
  %686 = mul i64 %685, 4
  %687 = add i64 %686, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 7
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %687 to i32*
  %691 = load i32, i32* %690
  %692 = zext i32 %691 to i64
  store i64 %692, i64* %RAX, align 8, !tbaa !2428
  %693 = load i8, i8* %AL
  %694 = zext i8 %693 to i64
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 2
  store i64 %696, i64* %PC
  store i8 %693, i8* %DL, align 1, !tbaa !2451
  %697 = load i64, i64* %RBP
  %698 = sub i64 %697, 8
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 4
  store i64 %700, i64* %PC
  %701 = inttoptr i64 %698 to i64*
  %702 = load i64, i64* %701
  store i64 %702, i64* %RCX, align 8, !tbaa !2428
  %703 = load i64, i64* %RBP
  %704 = sub i64 %703, 20
  %705 = load i64, i64* %PC
  %706 = add i64 %705, 4
  store i64 %706, i64* %PC
  %707 = inttoptr i64 %704 to i32*
  %708 = load i32, i32* %707
  %709 = sext i32 %708 to i64
  store i64 %709, i64* %RSI, align 8, !tbaa !2428
  %710 = load i64, i64* %RCX
  %711 = load i64, i64* %RSI
  %712 = add i64 %711, %710
  %713 = load i8, i8* %DL
  %714 = zext i8 %713 to i64
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 3
  store i64 %716, i64* %PC
  %717 = inttoptr i64 %712 to i8*
  store i8 %713, i8* %717
  %718 = load i64, i64* %RBP
  %719 = sub i64 %718, 20
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 3
  store i64 %721, i64* %PC
  %722 = inttoptr i64 %719 to i32*
  %723 = load i32, i32* %722
  %724 = zext i32 %723 to i64
  store i64 %724, i64* %RAX, align 8, !tbaa !2428
  %725 = load i64, i64* %RAX
  %726 = load i64, i64* %PC
  %727 = add i64 %726, 3
  store i64 %727, i64* %PC
  %728 = trunc i64 %725 to i32
  %729 = add i32 1, %728
  %730 = zext i32 %729 to i64
  store i64 %730, i64* %RAX, align 8, !tbaa !2428
  %731 = icmp ult i32 %729, %728
  %732 = icmp ult i32 %729, 1
  %733 = or i1 %731, %732
  %734 = zext i1 %733 to i8
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %734, i8* %735, align 1, !tbaa !2432
  %736 = and i32 %729, 255
  %737 = call i32 @llvm.ctpop.i32(i32 %736) #16
  %738 = trunc i32 %737 to i8
  %739 = and i8 %738, 1
  %740 = xor i8 %739, 1
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %740, i8* %741, align 1, !tbaa !2446
  %742 = xor i64 1, %725
  %743 = trunc i64 %742 to i32
  %744 = xor i32 %743, %729
  %745 = lshr i32 %744, 4
  %746 = trunc i32 %745 to i8
  %747 = and i8 %746, 1
  %748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %747, i8* %748, align 1, !tbaa !2447
  %749 = icmp eq i32 %729, 0
  %750 = zext i1 %749 to i8
  %751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %750, i8* %751, align 1, !tbaa !2448
  %752 = lshr i32 %729, 31
  %753 = trunc i32 %752 to i8
  %754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %753, i8* %754, align 1, !tbaa !2449
  %755 = lshr i32 %728, 31
  %756 = xor i32 %752, %755
  %757 = add nuw nsw i32 %756, %752
  %758 = icmp eq i32 %757, 2
  %759 = zext i1 %758 to i8
  %760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %759, i8* %760, align 1, !tbaa !2450
  %761 = load i64, i64* %RBP
  %762 = sub i64 %761, 20
  %763 = load i32, i32* %EAX
  %764 = zext i32 %763 to i64
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 3
  store i64 %766, i64* %PC
  %767 = inttoptr i64 %762 to i32*
  store i32 %763, i32* %767
  %768 = load i64, i64* %PC
  %769 = sub i64 %768, 51
  %770 = load i64, i64* %PC
  %771 = add i64 %770, 5
  store i64 %771, i64* %PC
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %769, i64* %772, align 8, !tbaa !2428
  br label %block_40061e

block_40052a:                                     ; preds = %block_400523, %block_400534
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.5, %block_400523 ], [ %MEMORY.3, %block_400534 ]
  %773 = load i64, i64* %RBP
  %774 = sub i64 %773, 20
  %775 = load i64, i64* %PC
  %776 = add i64 %775, 4
  store i64 %776, i64* %PC
  %777 = inttoptr i64 %774 to i32*
  %778 = load i32, i32* %777
  %779 = sub i32 %778, 16
  %780 = icmp ult i32 %778, 16
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %781, i8* %782, align 1, !tbaa !2432
  %783 = and i32 %779, 255
  %784 = call i32 @llvm.ctpop.i32(i32 %783) #16
  %785 = trunc i32 %784 to i8
  %786 = and i8 %785, 1
  %787 = xor i8 %786, 1
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %787, i8* %788, align 1, !tbaa !2446
  %789 = xor i32 %778, 16
  %790 = xor i32 %789, %779
  %791 = lshr i32 %790, 4
  %792 = trunc i32 %791 to i8
  %793 = and i8 %792, 1
  %794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %793, i8* %794, align 1, !tbaa !2447
  %795 = icmp eq i32 %779, 0
  %796 = zext i1 %795 to i8
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %796, i8* %797, align 1, !tbaa !2448
  %798 = lshr i32 %779, 31
  %799 = trunc i32 %798 to i8
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %799, i8* %800, align 1, !tbaa !2449
  %801 = lshr i32 %778, 31
  %802 = xor i32 %798, %801
  %803 = add nuw nsw i32 %802, %801
  %804 = icmp eq i32 %803, 2
  %805 = zext i1 %804 to i8
  %806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %805, i8* %806, align 1, !tbaa !2450
  %807 = load i64, i64* %PC
  %808 = add i64 %807, 51
  %809 = load i64, i64* %PC
  %810 = add i64 %809, 6
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 6
  store i64 %812, i64* %PC
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %814 = load i8, i8* %813, align 1, !tbaa !2449
  %815 = icmp ne i8 %814, 0
  %816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %817 = load i8, i8* %816, align 1, !tbaa !2450
  %818 = icmp ne i8 %817, 0
  %819 = xor i1 %815, %818
  %820 = xor i1 %819, true
  %821 = zext i1 %820 to i8
  store i8 %821, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %823 = select i1 %819, i64 %810, i64 %808
  store i64 %823, i64* %822, align 8, !tbaa !2428
  %824 = load i8, i8* %BRANCH_TAKEN
  %825 = icmp eq i8 %824, 1
  %826 = load i64, i64* %RBP
  br i1 %825, label %block_400561, label %block_400534

block_400568:                                     ; preds = %block_400561, %block_400572
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.3, %block_400561 ], [ %MEMORY.4, %block_400572 ]
  %827 = load i64, i64* %RBP
  %828 = sub i64 %827, 20
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 4
  store i64 %830, i64* %PC
  %831 = inttoptr i64 %828 to i32*
  %832 = load i32, i32* %831
  %833 = sub i32 %832, 51
  %834 = icmp ult i32 %832, 51
  %835 = zext i1 %834 to i8
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %835, i8* %836, align 1, !tbaa !2432
  %837 = and i32 %833, 255
  %838 = call i32 @llvm.ctpop.i32(i32 %837) #16
  %839 = trunc i32 %838 to i8
  %840 = and i8 %839, 1
  %841 = xor i8 %840, 1
  %842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %841, i8* %842, align 1, !tbaa !2446
  %843 = xor i32 %832, 51
  %844 = xor i32 %843, %833
  %845 = lshr i32 %844, 4
  %846 = trunc i32 %845 to i8
  %847 = and i8 %846, 1
  %848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %847, i8* %848, align 1, !tbaa !2447
  %849 = icmp eq i32 %833, 0
  %850 = zext i1 %849 to i8
  %851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %850, i8* %851, align 1, !tbaa !2448
  %852 = lshr i32 %833, 31
  %853 = trunc i32 %852 to i8
  %854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %853, i8* %854, align 1, !tbaa !2449
  %855 = lshr i32 %832, 31
  %856 = xor i32 %852, %855
  %857 = add nuw nsw i32 %856, %855
  %858 = icmp eq i32 %857, 2
  %859 = zext i1 %858 to i8
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %859, i8* %860, align 1, !tbaa !2450
  %861 = load i64, i64* %PC
  %862 = add i64 %861, 40
  %863 = load i64, i64* %PC
  %864 = add i64 %863, 6
  %865 = load i64, i64* %PC
  %866 = add i64 %865, 6
  store i64 %866, i64* %PC
  %867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %868 = load i8, i8* %867, align 1, !tbaa !2449
  %869 = icmp ne i8 %868, 0
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %871 = load i8, i8* %870, align 1, !tbaa !2450
  %872 = icmp ne i8 %871, 0
  %873 = xor i1 %869, %872
  %874 = xor i1 %873, true
  %875 = zext i1 %874 to i8
  store i8 %875, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %877 = select i1 %873, i64 %864, i64 %862
  store i64 %877, i64* %876, align 8, !tbaa !2428
  %878 = load i8, i8* %BRANCH_TAKEN
  %879 = icmp eq i8 %878, 1
  %880 = load i64, i64* %RBP
  %881 = sub i64 %880, 20
  %882 = load i64, i64* %PC
  br i1 %879, label %block_400594, label %block_400572

block_400594:                                     ; preds = %block_400568
  %883 = add i64 %882, 7
  store i64 %883, i64* %PC
  %884 = inttoptr i64 %881 to i32*
  store i32 0, i32* %884
  br label %block_40059b

block_4005a8:                                     ; preds = %block_40059b
  %885 = sub i64 %319, 16
  %886 = load i64, i64* %PC
  %887 = add i64 %886, 4
  store i64 %887, i64* %PC
  %888 = inttoptr i64 %885 to i64*
  %889 = load i64, i64* %888
  store i64 %889, i64* %RAX, align 8, !tbaa !2428
  %890 = load i64, i64* %RBP
  %891 = sub i64 %890, 20
  %892 = load i64, i64* %PC
  %893 = add i64 %892, 4
  store i64 %893, i64* %PC
  %894 = inttoptr i64 %891 to i32*
  %895 = load i32, i32* %894
  %896 = sext i32 %895 to i64
  store i64 %896, i64* %RCX, align 8, !tbaa !2428
  %897 = load i64, i64* %RAX
  %898 = load i64, i64* %RCX
  %899 = add i64 %898, %897
  %900 = load i64, i64* %PC
  %901 = add i64 %900, 4
  store i64 %901, i64* %PC
  %902 = inttoptr i64 %899 to i8*
  %903 = load i8, i8* %902
  %904 = zext i8 %903 to i64
  store i64 %904, i64* %RDX, align 8, !tbaa !2428
  %905 = load i64, i64* %RBP
  %906 = sub i64 %905, 20
  %907 = load i64, i64* %PC
  %908 = add i64 %907, 3
  store i64 %908, i64* %PC
  %909 = inttoptr i64 %906 to i32*
  %910 = load i32, i32* %909
  %911 = zext i32 %910 to i64
  store i64 %911, i64* %RSI, align 8, !tbaa !2428
  %912 = load i64, i64* %RSI
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 3
  store i64 %914, i64* %PC
  %915 = trunc i64 %912 to i32
  %916 = add i32 67, %915
  %917 = zext i32 %916 to i64
  store i64 %917, i64* %RSI, align 8, !tbaa !2428
  %918 = icmp ult i32 %916, %915
  %919 = icmp ult i32 %916, 67
  %920 = or i1 %918, %919
  %921 = zext i1 %920 to i8
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %921, i8* %922, align 1, !tbaa !2432
  %923 = and i32 %916, 255
  %924 = call i32 @llvm.ctpop.i32(i32 %923) #16
  %925 = trunc i32 %924 to i8
  %926 = and i8 %925, 1
  %927 = xor i8 %926, 1
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %927, i8* %928, align 1, !tbaa !2446
  %929 = xor i64 67, %912
  %930 = trunc i64 %929 to i32
  %931 = xor i32 %930, %916
  %932 = lshr i32 %931, 4
  %933 = trunc i32 %932 to i8
  %934 = and i8 %933, 1
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %934, i8* %935, align 1, !tbaa !2447
  %936 = icmp eq i32 %916, 0
  %937 = zext i1 %936 to i8
  %938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %937, i8* %938, align 1, !tbaa !2448
  %939 = lshr i32 %916, 31
  %940 = trunc i32 %939 to i8
  %941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %940, i8* %941, align 1, !tbaa !2449
  %942 = lshr i32 %915, 31
  %943 = xor i32 %939, %942
  %944 = add nuw nsw i32 %943, %939
  %945 = icmp eq i32 %944, 2
  %946 = zext i1 %945 to i8
  %947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %946, i8* %947, align 1, !tbaa !2450
  %948 = load i32, i32* %ESI
  %949 = zext i32 %948 to i64
  %950 = load i64, i64* %PC
  %951 = add i64 %950, 3
  store i64 %951, i64* %PC
  %952 = shl i64 %949, 32
  %953 = ashr exact i64 %952, 32
  store i64 %953, i64* %RAX, align 8, !tbaa !2428
  %954 = load i64, i64* %RAX
  %955 = mul i64 %954, 4
  %956 = add i64 %955, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %957 = load i32, i32* %EDX
  %958 = zext i32 %957 to i64
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 7
  store i64 %960, i64* %PC
  %961 = inttoptr i64 %956 to i32*
  store i32 %957, i32* %961
  %962 = load i64, i64* %RBP
  %963 = sub i64 %962, 20
  %964 = load i64, i64* %PC
  %965 = add i64 %964, 3
  store i64 %965, i64* %PC
  %966 = inttoptr i64 %963 to i32*
  %967 = load i32, i32* %966
  %968 = zext i32 %967 to i64
  store i64 %968, i64* %RAX, align 8, !tbaa !2428
  %969 = load i64, i64* %RAX
  %970 = load i64, i64* %PC
  %971 = add i64 %970, 3
  store i64 %971, i64* %PC
  %972 = trunc i64 %969 to i32
  %973 = add i32 1, %972
  %974 = zext i32 %973 to i64
  store i64 %974, i64* %RAX, align 8, !tbaa !2428
  %975 = icmp ult i32 %973, %972
  %976 = icmp ult i32 %973, 1
  %977 = or i1 %975, %976
  %978 = zext i1 %977 to i8
  %979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %978, i8* %979, align 1, !tbaa !2432
  %980 = and i32 %973, 255
  %981 = call i32 @llvm.ctpop.i32(i32 %980) #16
  %982 = trunc i32 %981 to i8
  %983 = and i8 %982, 1
  %984 = xor i8 %983, 1
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %984, i8* %985, align 1, !tbaa !2446
  %986 = xor i64 1, %969
  %987 = trunc i64 %986 to i32
  %988 = xor i32 %987, %973
  %989 = lshr i32 %988, 4
  %990 = trunc i32 %989 to i8
  %991 = and i8 %990, 1
  %992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %991, i8* %992, align 1, !tbaa !2447
  %993 = icmp eq i32 %973, 0
  %994 = zext i1 %993 to i8
  %995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %994, i8* %995, align 1, !tbaa !2448
  %996 = lshr i32 %973, 31
  %997 = trunc i32 %996 to i8
  %998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %997, i8* %998, align 1, !tbaa !2449
  %999 = lshr i32 %972, 31
  %1000 = xor i32 %996, %999
  %1001 = add nuw nsw i32 %1000, %996
  %1002 = icmp eq i32 %1001, 2
  %1003 = zext i1 %1002 to i8
  %1004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1003, i8* %1004, align 1, !tbaa !2450
  %1005 = load i64, i64* %RBP
  %1006 = sub i64 %1005, 20
  %1007 = load i32, i32* %EAX
  %1008 = zext i32 %1007 to i64
  %1009 = load i64, i64* %PC
  %1010 = add i64 %1009, 3
  store i64 %1010, i64* %PC
  %1011 = inttoptr i64 %1006 to i32*
  store i32 %1007, i32* %1011
  %1012 = load i64, i64* %PC
  %1013 = sub i64 %1012, 50
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 5
  store i64 %1015, i64* %PC
  %1016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1013, i64* %1016, align 8, !tbaa !2428
  br label %block_40059b

block_400523:                                     ; preds = %block_40050e, %block_4004f0
  %MEMORY.5 = phi %struct.Memory* [ %2, %block_4004f0 ], [ %633, %block_40050e ]
  %1017 = load i64, i64* %RBP
  %1018 = sub i64 %1017, 20
  %1019 = load i64, i64* %PC
  %1020 = add i64 %1019, 7
  store i64 %1020, i64* %PC
  %1021 = inttoptr i64 %1018 to i32*
  store i32 0, i32* %1021
  br label %block_40052a

block_4005e6:                                     ; preds = %block_4005d9
  %1022 = load i64, i64* %RBP
  %1023 = sub i64 %1022, 20
  %1024 = load i64, i64* %PC
  %1025 = add i64 %1024, 4
  store i64 %1025, i64* %PC
  %1026 = inttoptr i64 %1023 to i32*
  %1027 = load i32, i32* %1026
  %1028 = sext i32 %1027 to i64
  store i64 %1028, i64* %RAX, align 8, !tbaa !2428
  %1029 = load i64, i64* %RAX
  %1030 = mul i64 %1029, 4
  %1031 = add i64 %1030, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 8
  store i64 %1033, i64* %PC
  %1034 = inttoptr i64 %1031 to i32*
  %1035 = load i32, i32* %1034
  %1036 = sext i32 %1035 to i64
  store i64 %1036, i64* %RAX, align 8, !tbaa !2428
  %1037 = load i64, i64* %RAX
  %1038 = mul i64 %1037, 4
  %1039 = add i64 %1038, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %1040 = load i64, i64* %PC
  %1041 = add i64 %1040, 7
  store i64 %1041, i64* %PC
  %1042 = inttoptr i64 %1039 to i32*
  %1043 = load i32, i32* %1042
  %1044 = zext i32 %1043 to i64
  store i64 %1044, i64* %RCX, align 8, !tbaa !2428
  %1045 = load i64, i64* %RBP
  %1046 = sub i64 %1045, 20
  %1047 = load i64, i64* %PC
  %1048 = add i64 %1047, 4
  store i64 %1048, i64* %PC
  %1049 = inttoptr i64 %1046 to i32*
  %1050 = load i32, i32* %1049
  %1051 = sext i32 %1050 to i64
  store i64 %1051, i64* %RAX, align 8, !tbaa !2428
  %1052 = load i64, i64* %RAX
  %1053 = mul i64 %1052, 4
  %1054 = add i64 %1053, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %1055 = load i32, i32* %ECX
  %1056 = zext i32 %1055 to i64
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 7
  store i64 %1058, i64* %PC
  %1059 = inttoptr i64 %1054 to i32*
  store i32 %1055, i32* %1059
  %1060 = load i64, i64* %RBP
  %1061 = sub i64 %1060, 20
  %1062 = load i64, i64* %PC
  %1063 = add i64 %1062, 3
  store i64 %1063, i64* %PC
  %1064 = inttoptr i64 %1061 to i32*
  %1065 = load i32, i32* %1064
  %1066 = zext i32 %1065 to i64
  store i64 %1066, i64* %RAX, align 8, !tbaa !2428
  %1067 = load i64, i64* %RAX
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 3
  store i64 %1069, i64* %PC
  %1070 = trunc i64 %1067 to i32
  %1071 = add i32 1, %1070
  %1072 = zext i32 %1071 to i64
  store i64 %1072, i64* %RAX, align 8, !tbaa !2428
  %1073 = icmp ult i32 %1071, %1070
  %1074 = icmp ult i32 %1071, 1
  %1075 = or i1 %1073, %1074
  %1076 = zext i1 %1075 to i8
  %1077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1076, i8* %1077, align 1, !tbaa !2432
  %1078 = and i32 %1071, 255
  %1079 = call i32 @llvm.ctpop.i32(i32 %1078) #16
  %1080 = trunc i32 %1079 to i8
  %1081 = and i8 %1080, 1
  %1082 = xor i8 %1081, 1
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1082, i8* %1083, align 1, !tbaa !2446
  %1084 = xor i64 1, %1067
  %1085 = trunc i64 %1084 to i32
  %1086 = xor i32 %1085, %1071
  %1087 = lshr i32 %1086, 4
  %1088 = trunc i32 %1087 to i8
  %1089 = and i8 %1088, 1
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1089, i8* %1090, align 1, !tbaa !2447
  %1091 = icmp eq i32 %1071, 0
  %1092 = zext i1 %1091 to i8
  %1093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1092, i8* %1093, align 1, !tbaa !2448
  %1094 = lshr i32 %1071, 31
  %1095 = trunc i32 %1094 to i8
  %1096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1095, i8* %1096, align 1, !tbaa !2449
  %1097 = lshr i32 %1070, 31
  %1098 = xor i32 %1094, %1097
  %1099 = add nuw nsw i32 %1098, %1094
  %1100 = icmp eq i32 %1099, 2
  %1101 = zext i1 %1100 to i8
  %1102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1101, i8* %1102, align 1, !tbaa !2450
  %1103 = load i64, i64* %RBP
  %1104 = sub i64 %1103, 20
  %1105 = load i32, i32* %EAX
  %1106 = zext i32 %1105 to i64
  %1107 = load i64, i64* %PC
  %1108 = add i64 %1107, 3
  store i64 %1108, i64* %PC
  %1109 = inttoptr i64 %1104 to i32*
  store i32 %1105, i32* %1109
  %1110 = load i64, i64* %PC
  %1111 = sub i64 %1110, 52
  %1112 = load i64, i64* %PC
  %1113 = add i64 %1112, 5
  store i64 %1113, i64* %PC
  %1114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1111, i64* %1114, align 8, !tbaa !2428
  br label %block_4005d9

block_400561:                                     ; preds = %block_40052a
  %1115 = sub i64 %826, 20
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 7
  store i64 %1117, i64* %PC
  %1118 = inttoptr i64 %1115 to i32*
  store i32 0, i32* %1118
  br label %block_400568
}

; Function Attrs: noinline
define %struct.Memory* @sub_400430__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400430:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c40___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401c40:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_602df0__init_array_type* @seg_602df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_602df0__init_array_type* @seg_602df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2448
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2449
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2447
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2448
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2449
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2450
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2451
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2451
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2451
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2451
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 6308
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_4003c8__init_proc_renamed_(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2432
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2448
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2449
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2450
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2447
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2448
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_401c96, label %block_401c76

block_401c96:                                     ; preds = %block_401c80, %block_401c40
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_401c40 ], [ %387, %block_401c80 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2447
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2450
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401c76:                                     ; preds = %block_401c40
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2450
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2447
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_401c80

block_401c80:                                     ; preds = %block_401c80, %block_401c76
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_401c76 ], [ %387, %block_401c80 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2448
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2449
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2432
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2447
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2448
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2449
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2450
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2448
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_401c80, label %block_401c96
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004b0___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004b0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* getelementptr inbounds (%seg_603060__bss_type, %seg_603060__bss_type* @seg_603060__bss, i32 0, i32 0, i32 0)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2447
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2448
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_4004d0, label %block_4004b9

block_4004d0:                                     ; preds = %block_4004b0
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4004b9:                                     ; preds = %block_4004b0
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_400440_deregister_tm_clones_renamed_(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* getelementptr inbounds (%seg_603060__bss_type, %seg_603060__bss_type* @seg_603060__bss, i32 0, i32 0, i32 0)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_4003c8__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4003c8:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602ff0__got_type* @seg_602ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2450
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2447
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_4003da, label %block_4003d8

block_4003d8:                                     ; preds = %block_4003c8
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_4003da

block_4003da:                                     ; preds = %block_4003d8, %block_4003c8
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4003c8 ], [ %92, %block_4003d8 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2447
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2448
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2450
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_401cb4__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401cb4:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2449
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2450
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400400__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400400:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2432
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2450
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2447
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2450
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2447
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_401cb0___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_401c40___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_602ff0__got_type, %seg_602ff0__got_type* @seg_602ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_6040d0___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_401cb0___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401cb0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400440_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400440:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 6303832, i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, 6303832
  %37 = icmp ult i64 %33, 6303832
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 6303832, %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %33, 63
  %60 = xor i64 %56, %59
  %61 = add nuw nsw i64 %60, %59
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %63, i8* %64, align 1, !tbaa !2450
  %65 = load i64, i64* %RSP
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %RBP, align 8, !tbaa !2428
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 25
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_400468, label %block_400451

block_40045b:                                     ; preds = %block_400451
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  store i64 6303832, i64* %RDI, align 8, !tbaa !2428
  %90 = load i64, i64* %RAX
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 2
  store i64 %92, i64* %PC
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %90, i64* %93, align 8, !tbaa !2428
  %94 = load i64, i64* %PC
  switch i64 %94, label %162 [
    i64 4195434, label %block_40046a
    i64 4195427, label %block_400463
  ]

block_400451:                                     ; preds = %block_400440
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 5
  store i64 %96, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 3
  store i64 %100, i64* %PC
  %101 = and i64 %98, %97
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %102, align 1, !tbaa !2432
  %103 = trunc i64 %101 to i32
  %104 = and i32 %103, 255
  %105 = call i32 @llvm.ctpop.i32(i32 %104) #16
  %106 = trunc i32 %105 to i8
  %107 = and i8 %106, 1
  %108 = xor i8 %107, 1
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %108, i8* %109, align 1, !tbaa !2446
  %110 = icmp eq i64 %101, 0
  %111 = zext i1 %110 to i8
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %111, i8* %112, align 1, !tbaa !2448
  %113 = lshr i64 %101, 63
  %114 = trunc i64 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %114, i8* %115, align 1, !tbaa !2449
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %116, align 1, !tbaa !2450
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %117, align 1, !tbaa !2447
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 15
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 2
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 2
  store i64 %123, i64* %PC
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %125 = load i8, i8* %124, align 1, !tbaa !2448
  store i8 %125, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %127 = icmp ne i8 %125, 0
  %128 = select i1 %127, i64 %119, i64 %121
  store i64 %128, i64* %126, align 8, !tbaa !2428
  %129 = load i8, i8* %BRANCH_TAKEN
  %130 = icmp eq i8 %129, 1
  br i1 %130, label %block_400468, label %block_40045b

block_400468:                                     ; preds = %block_400463, %block_400451, %block_400440
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400440 ], [ %2, %block_400451 ], [ %2, %block_400463 ]
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 1
  store i64 %132, i64* %PC
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %134 = load i64, i64* %133, align 8, !tbaa !2428
  %135 = add i64 %134, 8
  %136 = inttoptr i64 %134 to i64*
  %137 = load i64, i64* %136
  store i64 %137, i64* %RBP, align 8, !tbaa !2428
  store i64 %135, i64* %133, align 8, !tbaa !2428
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 1
  store i64 %139, i64* %PC
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %142 = load i64, i64* %141, align 8, !tbaa !2428
  %143 = inttoptr i64 %142 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %140, align 8, !tbaa !2428
  %145 = add i64 %142, 8
  store i64 %145, i64* %141, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40046a:                                     ; preds = %block_40045b
  %146 = load i64, i64* %RAX
  %147 = load i64, i64* %RAX
  %148 = add i64 %147, %146
  %149 = load i16, i16* %AX
  %150 = zext i16 %149 to i64
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 6
  store i64 %152, i64* %PC
  %153 = load i64, i64* %PC
  %154 = tail call %struct.Memory* @sub_400470_register_tm_clones(%struct.State* %0, i64 %153, %struct.Memory* %2)
  ret %struct.Memory* %154

block_400463:                                     ; preds = %block_40045b
  %155 = load i64, i64* %RAX
  %156 = load i64, i64* %RAX
  %157 = add i64 %156, %155
  %158 = load i32, i32* %EAX
  %159 = zext i32 %158 to i64
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 5
  store i64 %161, i64* %PC
  br label %block_400468

; <label>:162:                                    ; preds = %block_40045b
  %163 = load i64, i64* %PC
  %164 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %163, %struct.Memory* %2)
  ret %struct.Memory* %164
}

; Function Attrs: noinline
define %struct.Memory* @sub_400660_generate_gf(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400660:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 7
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 8
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 7
  store i64 %40, i64* %PC
  %41 = inttoptr i64 %38 to i32*
  store i32 1, i32* %41
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 11
  store i64 %43, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2112) to i32*)
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 4
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 7
  store i64 %47, i64* %PC
  %48 = inttoptr i64 %45 to i32*
  store i32 0, i32* %48
  br label %block_40067d

block_40077b:                                     ; preds = %block_40072e, %block_40075d
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_40075d ], [ %MEMORY.2, %block_40072e ]
  %49 = load i64, i64* %RBP
  %50 = sub i64 %49, 4
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  %53 = inttoptr i64 %50 to i32*
  %54 = load i32, i32* %53
  %55 = zext i32 %54 to i64
  store i64 %55, i64* %RAX, align 8, !tbaa !2428
  %56 = load i64, i64* %RBP
  %57 = sub i64 %56, 4
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC
  %60 = inttoptr i64 %57 to i32*
  %61 = load i32, i32* %60
  %62 = sext i32 %61 to i64
  store i64 %62, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = mul i64 %63, 4
  %65 = add i64 %64, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 8
  store i64 %67, i64* %PC
  %68 = inttoptr i64 %65 to i32*
  %69 = load i32, i32* %68
  %70 = sext i32 %69 to i64
  store i64 %70, i64* %RCX, align 8, !tbaa !2428
  %71 = load i64, i64* %RCX
  %72 = mul i64 %71, 4
  %73 = add i64 %72, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %74 = load i32, i32* %EAX
  %75 = zext i32 %74 to i64
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 7
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %73 to i32*
  store i32 %74, i32* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 4
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 3
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i32*
  %84 = load i32, i32* %83
  %85 = zext i32 %84 to i64
  store i64 %85, i64* %RAX, align 8, !tbaa !2428
  %86 = load i64, i64* %RAX
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 3
  store i64 %88, i64* %PC
  %89 = trunc i64 %86 to i32
  %90 = add i32 1, %89
  %91 = zext i32 %90 to i64
  store i64 %91, i64* %RAX, align 8, !tbaa !2428
  %92 = icmp ult i32 %90, %89
  %93 = icmp ult i32 %90, 1
  %94 = or i1 %92, %93
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %95, i8* %96, align 1, !tbaa !2432
  %97 = and i32 %90, 255
  %98 = call i32 @llvm.ctpop.i32(i32 %97) #16
  %99 = trunc i32 %98 to i8
  %100 = and i8 %99, 1
  %101 = xor i8 %100, 1
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %101, i8* %102, align 1, !tbaa !2446
  %103 = xor i64 1, %86
  %104 = trunc i64 %103 to i32
  %105 = xor i32 %104, %90
  %106 = lshr i32 %105, 4
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %108, i8* %109, align 1, !tbaa !2447
  %110 = icmp eq i32 %90, 0
  %111 = zext i1 %110 to i8
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %111, i8* %112, align 1, !tbaa !2448
  %113 = lshr i32 %90, 31
  %114 = trunc i32 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %114, i8* %115, align 1, !tbaa !2449
  %116 = lshr i32 %89, 31
  %117 = xor i32 %113, %116
  %118 = add nuw nsw i32 %117, %113
  %119 = icmp eq i32 %118, 2
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %120, i8* %121, align 1, !tbaa !2450
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 4
  %124 = load i32, i32* %EAX
  %125 = zext i32 %124 to i64
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 3
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %123 to i32*
  store i32 %124, i32* %128
  %129 = load i64, i64* %PC
  %130 = sub i64 %129, 146
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 5
  store i64 %132, i64* %PC
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %130, i64* %133, align 8, !tbaa !2428
  br label %block_400708

block_40075d:                                     ; preds = %block_400715
  %134 = load i64, i64* %RBP
  %135 = sub i64 %134, 4
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 3
  store i64 %137, i64* %PC
  %138 = inttoptr i64 %135 to i32*
  %139 = load i32, i32* %138
  %140 = zext i32 %139 to i64
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = load i64, i64* %RAX
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 3
  store i64 %143, i64* %PC
  %144 = trunc i64 %141 to i32
  %145 = sub i32 %144, 1
  %146 = zext i32 %145 to i64
  store i64 %146, i64* %RAX, align 8, !tbaa !2428
  %147 = icmp ult i32 %144, 1
  %148 = zext i1 %147 to i8
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %148, i8* %149, align 1, !tbaa !2432
  %150 = and i32 %145, 255
  %151 = call i32 @llvm.ctpop.i32(i32 %150) #16
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = xor i8 %153, 1
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %154, i8* %155, align 1, !tbaa !2446
  %156 = xor i64 1, %141
  %157 = trunc i64 %156 to i32
  %158 = xor i32 %157, %145
  %159 = lshr i32 %158, 4
  %160 = trunc i32 %159 to i8
  %161 = and i8 %160, 1
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %161, i8* %162, align 1, !tbaa !2447
  %163 = icmp eq i32 %145, 0
  %164 = zext i1 %163 to i8
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %164, i8* %165, align 1, !tbaa !2448
  %166 = lshr i32 %145, 31
  %167 = trunc i32 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %167, i8* %168, align 1, !tbaa !2449
  %169 = lshr i32 %144, 31
  %170 = xor i32 %166, %169
  %171 = add nuw nsw i32 %170, %169
  %172 = icmp eq i32 %171, 2
  %173 = zext i1 %172 to i8
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %173, i8* %174, align 1, !tbaa !2450
  %175 = load i32, i32* %EAX
  %176 = zext i32 %175 to i64
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 3
  store i64 %178, i64* %PC
  %179 = shl i64 %176, 32
  %180 = ashr exact i64 %179, 32
  store i64 %180, i64* %RCX, align 8, !tbaa !2428
  %181 = load i64, i64* %RCX
  %182 = mul i64 %181, 4
  %183 = add i64 %182, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 7
  store i64 %185, i64* %PC
  %186 = inttoptr i64 %183 to i32*
  %187 = load i32, i32* %186
  %188 = zext i32 %187 to i64
  store i64 %188, i64* %RAX, align 8, !tbaa !2428
  %189 = load i64, i64* %RAX
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 3
  store i64 %191, i64* %PC
  %192 = trunc i64 %189 to i32
  %193 = shl i32 %192, 1
  %194 = icmp slt i32 %192, 0
  %195 = icmp slt i32 %193, 0
  %196 = xor i1 %194, %195
  %197 = zext i32 %193 to i64
  store i64 %197, i64* %RAX, align 8, !tbaa !2428
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %199 = zext i1 %194 to i8
  store i8 %199, i8* %198, align 1, !tbaa !2451
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %201 = and i32 %193, 254
  %202 = call i32 @llvm.ctpop.i32(i32 %201) #16
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %200, align 1, !tbaa !2451
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %206, align 1, !tbaa !2451
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %208 = icmp eq i32 %193, 0
  %209 = zext i1 %208 to i8
  store i8 %209, i8* %207, align 1, !tbaa !2451
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %211 = lshr i32 %193, 31
  %212 = trunc i32 %211 to i8
  store i8 %212, i8* %210, align 1, !tbaa !2451
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %214 = zext i1 %196 to i8
  store i8 %214, i8* %213, align 1, !tbaa !2451
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 4
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i32*
  %220 = load i32, i32* %219
  %221 = sext i32 %220 to i64
  store i64 %221, i64* %RCX, align 8, !tbaa !2428
  %222 = load i64, i64* %RCX
  %223 = mul i64 %222, 4
  %224 = add i64 %223, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %225 = load i32, i32* %EAX
  %226 = zext i32 %225 to i64
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %224 to i32*
  store i32 %225, i32* %229
  br label %block_40077b

block_4006ce:                                     ; preds = %block_400687, %block_4006bd
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_400687 ], [ %MEMORY.3, %block_4006bd ]
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 8
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RAX, align 8, !tbaa !2428
  %237 = load i64, i64* %RAX
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 3
  store i64 %239, i64* %PC
  %240 = trunc i64 %237 to i32
  %241 = shl i32 %240, 1
  %242 = icmp slt i32 %240, 0
  %243 = icmp slt i32 %241, 0
  %244 = xor i1 %242, %243
  %245 = zext i32 %241 to i64
  store i64 %245, i64* %RAX, align 8, !tbaa !2428
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %247 = zext i1 %242 to i8
  store i8 %247, i8* %246, align 1, !tbaa !2451
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %249 = and i32 %241, 254
  %250 = call i32 @llvm.ctpop.i32(i32 %249) #16
  %251 = trunc i32 %250 to i8
  %252 = and i8 %251, 1
  %253 = xor i8 %252, 1
  store i8 %253, i8* %248, align 1, !tbaa !2451
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %254, align 1, !tbaa !2451
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %256 = icmp eq i32 %241, 0
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %255, align 1, !tbaa !2451
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %259 = lshr i32 %241, 31
  %260 = trunc i32 %259 to i8
  store i8 %260, i8* %258, align 1, !tbaa !2451
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %262 = zext i1 %244 to i8
  store i8 %262, i8* %261, align 1, !tbaa !2451
  %263 = load i64, i64* %RBP
  %264 = sub i64 %263, 8
  %265 = load i32, i32* %EAX
  %266 = zext i32 %265 to i64
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 3
  store i64 %268, i64* %PC
  %269 = inttoptr i64 %264 to i32*
  store i32 %265, i32* %269
  %270 = load i64, i64* %RBP
  %271 = sub i64 %270, 4
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 3
  store i64 %273, i64* %PC
  %274 = inttoptr i64 %271 to i32*
  %275 = load i32, i32* %274
  %276 = zext i32 %275 to i64
  store i64 %276, i64* %RAX, align 8, !tbaa !2428
  %277 = load i64, i64* %RAX
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 3
  store i64 %279, i64* %PC
  %280 = trunc i64 %277 to i32
  %281 = add i32 1, %280
  %282 = zext i32 %281 to i64
  store i64 %282, i64* %RAX, align 8, !tbaa !2428
  %283 = icmp ult i32 %281, %280
  %284 = icmp ult i32 %281, 1
  %285 = or i1 %283, %284
  %286 = zext i1 %285 to i8
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %286, i8* %287, align 1, !tbaa !2432
  %288 = and i32 %281, 255
  %289 = call i32 @llvm.ctpop.i32(i32 %288) #16
  %290 = trunc i32 %289 to i8
  %291 = and i8 %290, 1
  %292 = xor i8 %291, 1
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %292, i8* %293, align 1, !tbaa !2446
  %294 = xor i64 1, %277
  %295 = trunc i64 %294 to i32
  %296 = xor i32 %295, %281
  %297 = lshr i32 %296, 4
  %298 = trunc i32 %297 to i8
  %299 = and i8 %298, 1
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %299, i8* %300, align 1, !tbaa !2447
  %301 = icmp eq i32 %281, 0
  %302 = zext i1 %301 to i8
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %302, i8* %303, align 1, !tbaa !2448
  %304 = lshr i32 %281, 31
  %305 = trunc i32 %304 to i8
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %305, i8* %306, align 1, !tbaa !2449
  %307 = lshr i32 %280, 31
  %308 = xor i32 %304, %307
  %309 = add nuw nsw i32 %308, %304
  %310 = icmp eq i32 %309, 2
  %311 = zext i1 %310 to i8
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %311, i8* %312, align 1, !tbaa !2450
  %313 = load i64, i64* %RBP
  %314 = sub i64 %313, 4
  %315 = load i32, i32* %EAX
  %316 = zext i32 %315 to i64
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 3
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %314 to i32*
  store i32 %315, i32* %319
  %320 = load i64, i64* %PC
  %321 = sub i64 %320, 99
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 5
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %321, i64* %324, align 8, !tbaa !2428
  br label %block_40067d

block_40072e:                                     ; preds = %block_400715
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  %327 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2112) to i32*)
  %328 = zext i32 %327 to i64
  store i64 %328, i64* %RAX, align 8, !tbaa !2428
  %329 = load i64, i64* %RBP
  %330 = sub i64 %329, 4
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 3
  store i64 %332, i64* %PC
  %333 = inttoptr i64 %330 to i32*
  %334 = load i32, i32* %333
  %335 = zext i32 %334 to i64
  store i64 %335, i64* %RCX, align 8, !tbaa !2428
  %336 = load i64, i64* %RCX
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 3
  store i64 %338, i64* %PC
  %339 = trunc i64 %336 to i32
  %340 = sub i32 %339, 1
  %341 = zext i32 %340 to i64
  store i64 %341, i64* %RCX, align 8, !tbaa !2428
  %342 = icmp ult i32 %339, 1
  %343 = zext i1 %342 to i8
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %343, i8* %344, align 1, !tbaa !2432
  %345 = and i32 %340, 255
  %346 = call i32 @llvm.ctpop.i32(i32 %345) #16
  %347 = trunc i32 %346 to i8
  %348 = and i8 %347, 1
  %349 = xor i8 %348, 1
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %349, i8* %350, align 1, !tbaa !2446
  %351 = xor i64 1, %336
  %352 = trunc i64 %351 to i32
  %353 = xor i32 %352, %340
  %354 = lshr i32 %353, 4
  %355 = trunc i32 %354 to i8
  %356 = and i8 %355, 1
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %356, i8* %357, align 1, !tbaa !2447
  %358 = icmp eq i32 %340, 0
  %359 = zext i1 %358 to i8
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %359, i8* %360, align 1, !tbaa !2448
  %361 = lshr i32 %340, 31
  %362 = trunc i32 %361 to i8
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %362, i8* %363, align 1, !tbaa !2449
  %364 = lshr i32 %339, 31
  %365 = xor i32 %361, %364
  %366 = add nuw nsw i32 %365, %364
  %367 = icmp eq i32 %366, 2
  %368 = zext i1 %367 to i8
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %368, i8* %369, align 1, !tbaa !2450
  %370 = load i32, i32* %ECX
  %371 = zext i32 %370 to i64
  %372 = load i64, i64* %PC
  %373 = add i64 %372, 3
  store i64 %373, i64* %PC
  %374 = shl i64 %371, 32
  %375 = ashr exact i64 %374, 32
  store i64 %375, i64* %RDX, align 8, !tbaa !2428
  %376 = load i64, i64* %RDX
  %377 = mul i64 %376, 4
  %378 = add i64 %377, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 7
  store i64 %380, i64* %PC
  %381 = inttoptr i64 %378 to i32*
  %382 = load i32, i32* %381
  %383 = zext i32 %382 to i64
  store i64 %383, i64* %RCX, align 8, !tbaa !2428
  %384 = load i64, i64* %RCX
  %385 = load i64, i64* %RBP
  %386 = sub i64 %385, 8
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 3
  store i64 %388, i64* %PC
  %389 = trunc i64 %384 to i32
  %390 = inttoptr i64 %386 to i32*
  %391 = load i32, i32* %390
  %392 = xor i32 %391, %389
  %393 = zext i32 %392 to i64
  store i64 %393, i64* %RCX, align 8, !tbaa !2428
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %394, align 1, !tbaa !2432
  %395 = and i32 %392, 255
  %396 = call i32 @llvm.ctpop.i32(i32 %395) #16
  %397 = trunc i32 %396 to i8
  %398 = and i8 %397, 1
  %399 = xor i8 %398, 1
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %399, i8* %400, align 1, !tbaa !2446
  %401 = icmp eq i32 %392, 0
  %402 = zext i1 %401 to i8
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %402, i8* %403, align 1, !tbaa !2448
  %404 = lshr i32 %392, 31
  %405 = trunc i32 %404 to i8
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %405, i8* %406, align 1, !tbaa !2449
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %407, align 1, !tbaa !2450
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %408, align 1, !tbaa !2447
  %409 = load i64, i64* %RCX
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 3
  store i64 %411, i64* %PC
  %412 = trunc i64 %409 to i32
  %413 = shl i32 %412, 1
  %414 = icmp slt i32 %412, 0
  %415 = icmp slt i32 %413, 0
  %416 = xor i1 %414, %415
  %417 = zext i32 %413 to i64
  store i64 %417, i64* %RCX, align 8, !tbaa !2428
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %419 = zext i1 %414 to i8
  store i8 %419, i8* %418, align 1, !tbaa !2451
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %421 = and i32 %413, 254
  %422 = call i32 @llvm.ctpop.i32(i32 %421) #16
  %423 = trunc i32 %422 to i8
  %424 = and i8 %423, 1
  %425 = xor i8 %424, 1
  store i8 %425, i8* %420, align 1, !tbaa !2451
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %426, align 1, !tbaa !2451
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %428 = icmp eq i32 %413, 0
  %429 = zext i1 %428 to i8
  store i8 %429, i8* %427, align 1, !tbaa !2451
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %431 = lshr i32 %413, 31
  %432 = trunc i32 %431 to i8
  store i8 %432, i8* %430, align 1, !tbaa !2451
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %434 = zext i1 %416 to i8
  store i8 %434, i8* %433, align 1, !tbaa !2451
  %435 = load i64, i64* %RAX
  %436 = load i32, i32* %ECX
  %437 = zext i32 %436 to i64
  %438 = load i64, i64* %PC
  %439 = add i64 %438, 2
  store i64 %439, i64* %PC
  %440 = xor i64 %437, %435
  %441 = trunc i64 %440 to i32
  %442 = and i64 %440, 4294967295
  store i64 %442, i64* %RAX, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %443, align 1, !tbaa !2432
  %444 = and i32 %441, 255
  %445 = call i32 @llvm.ctpop.i32(i32 %444) #16
  %446 = trunc i32 %445 to i8
  %447 = and i8 %446, 1
  %448 = xor i8 %447, 1
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %448, i8* %449, align 1, !tbaa !2446
  %450 = icmp eq i32 %441, 0
  %451 = zext i1 %450 to i8
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %451, i8* %452, align 1, !tbaa !2448
  %453 = lshr i32 %441, 31
  %454 = trunc i32 %453 to i8
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %454, i8* %455, align 1, !tbaa !2449
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %456, align 1, !tbaa !2450
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %457, align 1, !tbaa !2447
  %458 = load i64, i64* %RBP
  %459 = sub i64 %458, 4
  %460 = load i64, i64* %PC
  %461 = add i64 %460, 4
  store i64 %461, i64* %PC
  %462 = inttoptr i64 %459 to i32*
  %463 = load i32, i32* %462
  %464 = sext i32 %463 to i64
  store i64 %464, i64* %RDX, align 8, !tbaa !2428
  %465 = load i64, i64* %RDX
  %466 = mul i64 %465, 4
  %467 = add i64 %466, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %468 = load i32, i32* %EAX
  %469 = zext i32 %468 to i64
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 7
  store i64 %471, i64* %PC
  %472 = inttoptr i64 %467 to i32*
  store i32 %468, i32* %472
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 35
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 5
  store i64 %476, i64* %PC
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %474, i64* %477, align 8, !tbaa !2428
  br label %block_40077b

block_400715:                                     ; preds = %block_400708
  %478 = load i64, i64* %RBP
  %479 = sub i64 %478, 4
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 3
  store i64 %481, i64* %PC
  %482 = inttoptr i64 %479 to i32*
  %483 = load i32, i32* %482
  %484 = zext i32 %483 to i64
  store i64 %484, i64* %RAX, align 8, !tbaa !2428
  %485 = load i64, i64* %RAX
  %486 = load i64, i64* %PC
  %487 = add i64 %486, 3
  store i64 %487, i64* %PC
  %488 = trunc i64 %485 to i32
  %489 = sub i32 %488, 1
  %490 = zext i32 %489 to i64
  store i64 %490, i64* %RAX, align 8, !tbaa !2428
  %491 = icmp ult i32 %488, 1
  %492 = zext i1 %491 to i8
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %492, i8* %493, align 1, !tbaa !2432
  %494 = and i32 %489, 255
  %495 = call i32 @llvm.ctpop.i32(i32 %494) #16
  %496 = trunc i32 %495 to i8
  %497 = and i8 %496, 1
  %498 = xor i8 %497, 1
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %498, i8* %499, align 1, !tbaa !2446
  %500 = xor i64 1, %485
  %501 = trunc i64 %500 to i32
  %502 = xor i32 %501, %489
  %503 = lshr i32 %502, 4
  %504 = trunc i32 %503 to i8
  %505 = and i8 %504, 1
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %505, i8* %506, align 1, !tbaa !2447
  %507 = icmp eq i32 %489, 0
  %508 = zext i1 %507 to i8
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %508, i8* %509, align 1, !tbaa !2448
  %510 = lshr i32 %489, 31
  %511 = trunc i32 %510 to i8
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %511, i8* %512, align 1, !tbaa !2449
  %513 = lshr i32 %488, 31
  %514 = xor i32 %510, %513
  %515 = add nuw nsw i32 %514, %513
  %516 = icmp eq i32 %515, 2
  %517 = zext i1 %516 to i8
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %517, i8* %518, align 1, !tbaa !2450
  %519 = load i32, i32* %EAX
  %520 = zext i32 %519 to i64
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 3
  store i64 %522, i64* %PC
  %523 = shl i64 %520, 32
  %524 = ashr exact i64 %523, 32
  store i64 %524, i64* %RCX, align 8, !tbaa !2428
  %525 = load i64, i64* %RCX
  %526 = mul i64 %525, 4
  %527 = add i64 %526, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 7
  store i64 %529, i64* %PC
  %530 = inttoptr i64 %527 to i32*
  %531 = load i32, i32* %530
  %532 = zext i32 %531 to i64
  store i64 %532, i64* %RAX, align 8, !tbaa !2428
  %533 = load i32, i32* %EAX
  %534 = zext i32 %533 to i64
  %535 = load i64, i64* %RBP
  %536 = sub i64 %535, 8
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 3
  store i64 %538, i64* %PC
  %539 = inttoptr i64 %536 to i32*
  %540 = load i32, i32* %539
  %541 = sub i32 %533, %540
  %542 = icmp ult i32 %533, %540
  %543 = zext i1 %542 to i8
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %543, i8* %544, align 1, !tbaa !2432
  %545 = and i32 %541, 255
  %546 = call i32 @llvm.ctpop.i32(i32 %545) #16
  %547 = trunc i32 %546 to i8
  %548 = and i8 %547, 1
  %549 = xor i8 %548, 1
  %550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %549, i8* %550, align 1, !tbaa !2446
  %551 = xor i32 %540, %533
  %552 = xor i32 %551, %541
  %553 = lshr i32 %552, 4
  %554 = trunc i32 %553 to i8
  %555 = and i8 %554, 1
  %556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %555, i8* %556, align 1, !tbaa !2447
  %557 = icmp eq i32 %541, 0
  %558 = zext i1 %557 to i8
  %559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %558, i8* %559, align 1, !tbaa !2448
  %560 = lshr i32 %541, 31
  %561 = trunc i32 %560 to i8
  %562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %561, i8* %562, align 1, !tbaa !2449
  %563 = lshr i32 %533, 31
  %564 = lshr i32 %540, 31
  %565 = xor i32 %564, %563
  %566 = xor i32 %560, %563
  %567 = add nuw nsw i32 %566, %565
  %568 = icmp eq i32 %567, 2
  %569 = zext i1 %568 to i8
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %569, i8* %570, align 1, !tbaa !2450
  %571 = load i64, i64* %PC
  %572 = add i64 %571, 53
  %573 = load i64, i64* %PC
  %574 = add i64 %573, 6
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 6
  store i64 %576, i64* %PC
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %578 = load i8, i8* %577, align 1, !tbaa !2449
  %579 = icmp ne i8 %578, 0
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %581 = load i8, i8* %580, align 1, !tbaa !2450
  %582 = icmp ne i8 %581, 0
  %583 = xor i1 %579, %582
  %584 = zext i1 %583 to i8
  store i8 %584, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %586 = select i1 %583, i64 %572, i64 %574
  store i64 %586, i64* %585, align 8, !tbaa !2428
  %587 = load i8, i8* %BRANCH_TAKEN
  %588 = icmp eq i8 %587, 1
  br i1 %588, label %block_40075d, label %block_40072e

block_400708:                                     ; preds = %block_4006e5, %block_40077b
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.3, %block_4006e5 ], [ %MEMORY.0, %block_40077b ]
  %589 = load i64, i64* %RBP
  %590 = sub i64 %589, 4
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 7
  store i64 %592, i64* %PC
  %593 = inttoptr i64 %590 to i32*
  %594 = load i32, i32* %593
  %595 = sub i32 %594, 255
  %596 = icmp ult i32 %594, 255
  %597 = zext i1 %596 to i8
  %598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %597, i8* %598, align 1, !tbaa !2432
  %599 = and i32 %595, 255
  %600 = call i32 @llvm.ctpop.i32(i32 %599) #16
  %601 = trunc i32 %600 to i8
  %602 = and i8 %601, 1
  %603 = xor i8 %602, 1
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %603, i8* %604, align 1, !tbaa !2446
  %605 = xor i32 %594, 255
  %606 = xor i32 %605, %595
  %607 = lshr i32 %606, 4
  %608 = trunc i32 %607 to i8
  %609 = and i8 %608, 1
  %610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %609, i8* %610, align 1, !tbaa !2447
  %611 = icmp eq i32 %595, 0
  %612 = zext i1 %611 to i8
  %613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %612, i8* %613, align 1, !tbaa !2448
  %614 = lshr i32 %595, 31
  %615 = trunc i32 %614 to i8
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %615, i8* %616, align 1, !tbaa !2449
  %617 = lshr i32 %594, 31
  %618 = xor i32 %614, %617
  %619 = add nuw nsw i32 %618, %617
  %620 = icmp eq i32 %619, 2
  %621 = zext i1 %620 to i8
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %621, i8* %622, align 1, !tbaa !2450
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 144
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 6
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 6
  store i64 %628, i64* %PC
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %630 = load i8, i8* %629, align 1, !tbaa !2449
  %631 = icmp ne i8 %630, 0
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %633 = load i8, i8* %632, align 1, !tbaa !2450
  %634 = icmp ne i8 %633, 0
  %635 = xor i1 %631, %634
  %636 = xor i1 %635, true
  %637 = zext i1 %636 to i8
  store i8 %637, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %639 = select i1 %635, i64 %626, i64 %624
  store i64 %639, i64* %638, align 8, !tbaa !2428
  %640 = load i8, i8* %BRANCH_TAKEN
  %641 = icmp eq i8 %640, 1
  br i1 %641, label %block_40079f, label %block_400715

block_40067d:                                     ; preds = %block_4006ce, %block_400660
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_400660 ], [ %MEMORY.1, %block_4006ce ]
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 4
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i32*
  %647 = load i32, i32* %646
  %648 = sub i32 %647, 8
  %649 = icmp ult i32 %647, 8
  %650 = zext i1 %649 to i8
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %650, i8* %651, align 1, !tbaa !2432
  %652 = and i32 %648, 255
  %653 = call i32 @llvm.ctpop.i32(i32 %652) #16
  %654 = trunc i32 %653 to i8
  %655 = and i8 %654, 1
  %656 = xor i8 %655, 1
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %656, i8* %657, align 1, !tbaa !2446
  %658 = xor i32 %647, 8
  %659 = xor i32 %658, %648
  %660 = lshr i32 %659, 4
  %661 = trunc i32 %660 to i8
  %662 = and i8 %661, 1
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %662, i8* %663, align 1, !tbaa !2447
  %664 = icmp eq i32 %648, 0
  %665 = zext i1 %664 to i8
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %665, i8* %666, align 1, !tbaa !2448
  %667 = lshr i32 %648, 31
  %668 = trunc i32 %667 to i8
  %669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %668, i8* %669, align 1, !tbaa !2449
  %670 = lshr i32 %647, 31
  %671 = xor i32 %667, %670
  %672 = add nuw nsw i32 %671, %670
  %673 = icmp eq i32 %672, 2
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %674, i8* %675, align 1, !tbaa !2450
  %676 = load i64, i64* %PC
  %677 = add i64 %676, 100
  %678 = load i64, i64* %PC
  %679 = add i64 %678, 6
  %680 = load i64, i64* %PC
  %681 = add i64 %680, 6
  store i64 %681, i64* %PC
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %683 = load i8, i8* %682, align 1, !tbaa !2449
  %684 = icmp ne i8 %683, 0
  %685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %686 = load i8, i8* %685, align 1, !tbaa !2450
  %687 = icmp ne i8 %686, 0
  %688 = xor i1 %684, %687
  %689 = xor i1 %688, true
  %690 = zext i1 %689 to i8
  store i8 %690, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %692 = select i1 %688, i64 %679, i64 %677
  store i64 %692, i64* %691, align 8, !tbaa !2428
  %693 = load i8, i8* %BRANCH_TAKEN
  %694 = icmp eq i8 %693, 1
  br i1 %694, label %block_4006e5, label %block_400687

block_4006e5:                                     ; preds = %block_40067d
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 8
  store i64 %696, i64* %PC
  %697 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2112) to i32*)
  %698 = sext i32 %697 to i64
  store i64 %698, i64* %RAX, align 8, !tbaa !2428
  %699 = load i64, i64* %RAX
  %700 = mul i64 %699, 4
  %701 = add i64 %700, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 11
  store i64 %703, i64* %PC
  %704 = inttoptr i64 %701 to i32*
  store i32 8, i32* %704
  %705 = load i64, i64* %RBP
  %706 = sub i64 %705, 8
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 3
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %706 to i32*
  %710 = load i32, i32* %709
  %711 = zext i32 %710 to i64
  store i64 %711, i64* %RCX, align 8, !tbaa !2428
  %712 = load i64, i64* %RCX
  %713 = load i64, i64* %PC
  %714 = add i64 %713, 3
  store i64 %714, i64* %PC
  %715 = shl i64 %712, 32
  %716 = ashr i64 %715, 33
  %717 = trunc i64 %712 to i8
  %718 = and i8 %717, 1
  %719 = trunc i64 %716 to i32
  %720 = and i64 %716, 4294967295
  store i64 %720, i64* %RCX, align 8, !tbaa !2428
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %718, i8* %721, align 1, !tbaa !2451
  %722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %723 = and i32 %719, 255
  %724 = call i32 @llvm.ctpop.i32(i32 %723) #16
  %725 = trunc i32 %724 to i8
  %726 = and i8 %725, 1
  %727 = xor i8 %726, 1
  store i8 %727, i8* %722, align 1, !tbaa !2451
  %728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %728, align 1, !tbaa !2451
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %730 = icmp eq i32 %719, 0
  %731 = zext i1 %730 to i8
  store i8 %731, i8* %729, align 1, !tbaa !2451
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %733 = lshr i32 %719, 31
  %734 = trunc i32 %733 to i8
  store i8 %734, i8* %732, align 1, !tbaa !2451
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %735, align 1, !tbaa !2451
  %736 = load i64, i64* %RBP
  %737 = sub i64 %736, 8
  %738 = load i32, i32* %ECX
  %739 = zext i32 %738 to i64
  %740 = load i64, i64* %PC
  %741 = add i64 %740, 3
  store i64 %741, i64* %PC
  %742 = inttoptr i64 %737 to i32*
  store i32 %738, i32* %742
  %743 = load i64, i64* %RBP
  %744 = sub i64 %743, 4
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 7
  store i64 %746, i64* %PC
  %747 = inttoptr i64 %744 to i32*
  store i32 9, i32* %747
  br label %block_400708

block_40079f:                                     ; preds = %block_400708
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 11
  store i64 %749, i64* %PC
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056) to i32*)
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 1
  store i64 %751, i64* %PC
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %753 = load i64, i64* %752, align 8, !tbaa !2428
  %754 = add i64 %753, 8
  %755 = inttoptr i64 %753 to i64*
  %756 = load i64, i64* %755
  store i64 %756, i64* %RBP, align 8, !tbaa !2428
  store i64 %754, i64* %752, align 8, !tbaa !2428
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 1
  store i64 %758, i64* %PC
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %761 = load i64, i64* %760, align 8, !tbaa !2428
  %762 = inttoptr i64 %761 to i64*
  %763 = load i64, i64* %762
  store i64 %763, i64* %759, align 8, !tbaa !2428
  %764 = add i64 %761, 8
  store i64 %764, i64* %760, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_4006bd:                                     ; preds = %block_400687
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 8
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 3
  store i64 %768, i64* %PC
  %769 = inttoptr i64 %766 to i32*
  %770 = load i32, i32* %769
  %771 = zext i32 %770 to i64
  store i64 %771, i64* %RAX, align 8, !tbaa !2428
  %772 = load i64, i64* %RAX
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 7
  store i64 %774, i64* %PC
  %775 = trunc i64 %772 to i32
  %776 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2112) to i32*)
  %777 = xor i32 %776, %775
  %778 = zext i32 %777 to i64
  store i64 %778, i64* %RAX, align 8, !tbaa !2428
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %779, align 1, !tbaa !2432
  %780 = and i32 %777, 255
  %781 = call i32 @llvm.ctpop.i32(i32 %780) #16
  %782 = trunc i32 %781 to i8
  %783 = and i8 %782, 1
  %784 = xor i8 %783, 1
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %784, i8* %785, align 1, !tbaa !2446
  %786 = icmp eq i32 %777, 0
  %787 = zext i1 %786 to i8
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %787, i8* %788, align 1, !tbaa !2448
  %789 = lshr i32 %777, 31
  %790 = trunc i32 %789 to i8
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %790, i8* %791, align 1, !tbaa !2449
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %792, align 1, !tbaa !2450
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %793, align 1, !tbaa !2447
  %794 = load i32, i32* %EAX
  %795 = zext i32 %794 to i64
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 7
  store i64 %797, i64* %PC
  store i32 %794, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2112) to i32*)
  br label %block_4006ce

block_400687:                                     ; preds = %block_40067d
  %798 = load i64, i64* %RBP
  %799 = sub i64 %798, 8
  %800 = load i64, i64* %PC
  %801 = add i64 %800, 3
  store i64 %801, i64* %PC
  %802 = inttoptr i64 %799 to i32*
  %803 = load i32, i32* %802
  %804 = zext i32 %803 to i64
  store i64 %804, i64* %RAX, align 8, !tbaa !2428
  %805 = load i64, i64* %RBP
  %806 = sub i64 %805, 4
  %807 = load i64, i64* %PC
  %808 = add i64 %807, 4
  store i64 %808, i64* %PC
  %809 = inttoptr i64 %806 to i32*
  %810 = load i32, i32* %809
  %811 = sext i32 %810 to i64
  store i64 %811, i64* %RCX, align 8, !tbaa !2428
  %812 = load i64, i64* %RCX
  %813 = mul i64 %812, 4
  %814 = add i64 %813, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %815 = load i32, i32* %EAX
  %816 = zext i32 %815 to i64
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 7
  store i64 %818, i64* %PC
  %819 = inttoptr i64 %814 to i32*
  store i32 %815, i32* %819
  %820 = load i64, i64* %RBP
  %821 = sub i64 %820, 4
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 3
  store i64 %823, i64* %PC
  %824 = inttoptr i64 %821 to i32*
  %825 = load i32, i32* %824
  %826 = zext i32 %825 to i64
  store i64 %826, i64* %RAX, align 8, !tbaa !2428
  %827 = load i64, i64* %RBP
  %828 = sub i64 %827, 4
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 4
  store i64 %830, i64* %PC
  %831 = inttoptr i64 %828 to i32*
  %832 = load i32, i32* %831
  %833 = sext i32 %832 to i64
  store i64 %833, i64* %RCX, align 8, !tbaa !2428
  %834 = load i64, i64* %RCX
  %835 = mul i64 %834, 4
  %836 = add i64 %835, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 8
  store i64 %838, i64* %PC
  %839 = inttoptr i64 %836 to i32*
  %840 = load i32, i32* %839
  %841 = sext i32 %840 to i64
  store i64 %841, i64* %RCX, align 8, !tbaa !2428
  %842 = load i64, i64* %RCX
  %843 = mul i64 %842, 4
  %844 = add i64 %843, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %845 = load i32, i32* %EAX
  %846 = zext i32 %845 to i64
  %847 = load i64, i64* %PC
  %848 = add i64 %847, 7
  store i64 %848, i64* %PC
  %849 = inttoptr i64 %844 to i32*
  store i32 %845, i32* %849
  %850 = load i64, i64* %RBP
  %851 = sub i64 %850, 4
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 4
  store i64 %853, i64* %PC
  %854 = inttoptr i64 %851 to i32*
  %855 = load i32, i32* %854
  %856 = sext i32 %855 to i64
  store i64 %856, i64* %RCX, align 8, !tbaa !2428
  %857 = load i64, i64* %RCX
  %858 = mul i64 %857, 4
  %859 = add i64 %858, add (i64 ptrtoint (%seg_603020__data_type* @seg_603020__data to i64), i64 16)
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 8
  store i64 %861, i64* %PC
  %862 = inttoptr i64 %859 to i32*
  %863 = load i32, i32* %862
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %864, align 1, !tbaa !2432
  %865 = and i32 %863, 255
  %866 = call i32 @llvm.ctpop.i32(i32 %865) #16
  %867 = trunc i32 %866 to i8
  %868 = and i8 %867, 1
  %869 = xor i8 %868, 1
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %869, i8* %870, align 1, !tbaa !2446
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %871, align 1, !tbaa !2447
  %872 = icmp eq i32 %863, 0
  %873 = zext i1 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %873, i8* %874, align 1, !tbaa !2448
  %875 = lshr i32 %863, 31
  %876 = trunc i32 %875 to i8
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %876, i8* %877, align 1, !tbaa !2449
  %878 = lshr i32 %863, 31
  %879 = xor i32 %875, %878
  %880 = add nuw nsw i32 %879, %878
  %881 = icmp eq i32 %880, 2
  %882 = zext i1 %881 to i8
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %882, i8* %883, align 1, !tbaa !2450
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 23
  %886 = load i64, i64* %PC
  %887 = add i64 %886, 6
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 6
  store i64 %889, i64* %PC
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %891 = load i8, i8* %890, align 1, !tbaa !2448
  store i8 %891, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %893 = icmp ne i8 %891, 0
  %894 = select i1 %893, i64 %885, i64 %887
  store i64 %894, i64* %892, align 8, !tbaa !2428
  %895 = load i8, i8* %BRANCH_TAKEN
  %896 = icmp eq i8 %895, 1
  br i1 %896, label %block_4006ce, label %block_4006bd
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4004e0_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4004e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4004e0_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4004e0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4004b0___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4004b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4004b0___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4004b0___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6040d8_random(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @random to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_401cb0___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401cb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_401cb0___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401cb0___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_401c40___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401c40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_401c40___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401c40___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401b10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401b10_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6040d0___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @rsenc_204() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401850;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @rsenc_204_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401850_rsenc_204(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @rsdec_204() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4004f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @rsdec_204_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4004f0_rsdec_204(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401cb4;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401cb4__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4003c8;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4003c8__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_401c40___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_401cb0___libc_csu_fini()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }
attributes #17 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2430, !2430, i64 0}
!2452 = !{!2445, !2445, i64 0}
