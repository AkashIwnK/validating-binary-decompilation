; ModuleID = 'binary/test.mcsema.calls_renamed.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_4003f0__init_type = type <{ [23 x i8] }>
%seg_400410__plt_type = type <{ [32 x i8] }>
%seg_400430__text_type = type <{ [6322 x i8] }>
%seg_401ce4__fini_type = type <{ [9 x i8] }>
%seg_401cf0__rodata_type = type <{ [4 x i8] }>
%seg_401cf4__eh_frame_hdr_type = type <{ [108 x i8] }>
%seg_401d60__eh_frame_type = type <{ [424 x i8] }>
%seg_602de0__init_array_type = type <{ i64, i64 }>
%seg_602ff0__got_type = type <{ i64, i64 }>
%seg_603000__got_plt_type = type <{ [24 x i8], i64 }>
%seg_603020__data_type = type <{ [16 x i8], [36 x i8] }>
%seg_603060__bss_type = type <{ [16 x i8], [16 x i8], [1024 x i8], [1024 x i8], [1024 x i8], [80 x i8], [960 x i8], [64 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_4003f0__init = internal constant %seg_4003f0__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05\FD+ \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_400410__plt = internal constant %seg_400410__plt_type <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%\F2+ \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_400430__text = internal constant %seg_400430__text_type <{ [6322 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0\E0\1C@\00H\C7\C1p\1C@\00H\C7\C7@\1B@\00\FF\15\96+ \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B8X0`\00H=X0`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BFX0`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BEX0`\00UH\81\EEX0`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BFX0`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=y+ \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05g+ \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\89}\F8H\89u\F0\83<%p0`\00\00\0F\85\15\00\00\00\E8M\01\00\00\E8\98\02\00\00\C7\04%p0`\00\01\00\00\00\C7E\EC\00\00\00\00\83}\EC\10\0F\8D-\00\00\00H\8BE\F0\8BM\EC\81\C1\BC\00\00\00Hc\D1\0F\B6\0C\10HcE\EC\89\0C\85\800`\00\8BE\EC\83\C0\01\89E\EC\E9\C9\FF\FF\FF\C7E\EC\00\00\00\00\83}\EC3\0F\8D\22\00\00\00\8BE\EC\83\C0\10Hc\C8\C7\04\8D\800`\00\00\00\00\00\8BE\EC\83\C0\01\89E\EC\E9\D4\FF\FF\FF\C7E\EC\00\00\00\00\81}\EC\BC\00\00\00\0F\8D*\00\00\00H\8BE\F0HcM\EC\0F\B6\14\08\8Bu\EC\83\C6CHc\C6\89\14\85\800`\00\8BE\EC\83\C0\01\89E\EC\E9\C9\FF\FF\FF\C7E\EC\00\00\00\00\81}\EC\FF\00\00\00\0F\8D,\00\00\00HcE\ECHc\04\85\800`\00\8B\0C\85\804`\00HcE\EC\89\0C\85\800`\00\8BE\EC\83\C0\01\89E\EC\E9\C7\FF\FF\FF\E8\F9\02\00\00\C7E\EC\00\00\00\00\81}\EC\BC\00\00\00\0F\8D+\00\00\00\8BE\EC\83\C0CHc\C8\8B\04\8D\800`\00\88\C2H\8BM\F8Hcu\EC\88\141\8BE\EC\83\C0\01\89E\EC\E9\C8\FF\FF\FFH\83\C4 ]\C3\0F\1F@\00UH\89\E5\C7E\F8\01\00\00\00\C7\04%\A08`\00\00\00\00\00\C7E\FC\00\00\00\00\83}\FC\08\0F\8D^\00\00\00\8BE\F8HcM\FC\89\04\8D\808`\00\8BE\FCHcM\FCHc\0C\8D\808`\00\89\04\8D\804`\00HcM\FC\83<\8D00`\00\00\0F\84\11\00\00\00\8BE\F83\04%\A08`\00\89\04%\A08`\00\8BE\F8\C1\E0\01\89E\F8\8BE\FC\83\C0\01\89E\FC\E9\98\FF\FF\FFHc\04%\A08`\00\C7\04\85\804`\00\08\00\00\00\8BM\F8\C1\F9\01\89M\F8\C7E\FC\09\00\00\00\81}\FC\FF\00\00\00\0F\8D\8A\00\00\00\8BE\FC\83\E8\01Hc\C8\8B\04\8D\808`\00;E\F8\0F\8C/\00\00\00\8B\04%\A08`\00\8BM\FC\83\E9\01Hc\D1\8B\0C\95\808`\003M\F8\C1\E1\011\C8HcU\FC\89\04\95\808`\00\E9\1E\00\00\00\8BE\FC\83\E8\01Hc\C8\8B\04\8D\808`\00\C1\E0\01HcM\FC\89\04\8D\808`\00\8BE\FCHcM\FCHc\0C\8D\808`\00\89\04\8D\804`\00\8BE\FC\83\C0\01\89E\FC\E9i\FF\FF\FF\C7\04%\804`\00\FF\FF\FF\FF]\C3\0F\1F@\00UH\89\E5\C7\04%\80<`\00\02\00\00\00\C7\04%\84<`\00\01\00\00\00\C7E\FC\02\00\00\00\83}\FC\10\0F\8F\F3\00\00\00HcE\FC\C7\04\85\80<`\00\01\00\00\00\8BM\FC\83\E9\01\89M\F8\83}\F8\00\0F\8E\90\00\00\00HcE\F8\83<\85\80<`\00\00\0F\84P\00\00\00\B8\FF\00\00\00\8BM\F8\83\E9\01Hc\D1\8B\0C\95\80<`\00HcU\F8Hc\14\95\80<`\00\8B4\95\804`\00\03u\FC\89E\F4\89\F0\99\8Bu\F4\F7\FEHc\FA3\0C\BD\808`\00Hc}\F8\89\0C\BD\80<`\00\E9\1B\00\00\00\8BE\F8\83\E8\01Hc\C8\8B\04\8D\80<`\00HcM\F8\89\04\8D\80<`\00\E9\00\00\00\00\8BE\F8\83\C0\FF\89E\F8\E9f\FF\FF\FF\B8\FF\00\00\00Hc\0C%\80<`\00\8B\14\8D\804`\00\03U\FC\89E\F0\89\D0\99\8Bu\F0\F7\FEHc\CA\8B\14\8D\808`\00\89\14%\80<`\00\8BE\FC\83\C0\01\89E\FC\E9\03\FF\FF\FF\C7E\FC\00\00\00\00\83}\FC\10\0F\8F,\00\00\00HcE\FCHc\04\85\80<`\00\8B\0C\85\804`\00HcE\FC\89\0C\85\80<`\00\8BE\FC\83\C0\01\89E\FC\E9\CA\FF\FF\FF]\C3\0F\1F\00UH\89\E5H\81\EC0\0A\00\00\C7\85,\FA\FF\FF\00\00\00\00\C7\85(\FA\FF\FF\00\00\00\00\C7E\FC\01\00\00\00\83}\FC\10\0F\8F\D6\00\00\00HcE\FC\C7\84\850\FA\FF\FF\00\00\00\00\C7E\F8\00\00\00\00\81}\F8\FF\00\00\00\0F\8Dk\00\00\00HcE\F8\83<\85\800`\00\FF\0F\84F\00\00\00\B8\FF\00\00\00HcM\F8\8B\14\8D\800`\00\8Bu\FC\0F\AFu\F8\01\F2\89\85|\F5\FF\FF\89\D0\99\8B\B5|\F5\FF\FF\F7\FEHc\CA\8B\14\8D\808`\00HcM\FC3\94\8D0\FA\FF\FF\89\94\8D0\FA\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\88\FF\FF\FFHcE\FC\83\BC\850\FA\FF\FF\00\0F\84\0A\00\00\00\C7\85(\FA\FF\FF\01\00\00\00HcE\FCHc\84\850\FA\FF\FF\8B\0C\85\804`\00HcE\FC\89\8C\850\FA\FF\FF\8BE\FC\83\C0\01\89E\FC\E9 \FF\FF\FF\83\BD(\FA\FF\FF\00\0F\84\AA\0D\00\00\C7\85 \FB\FF\FF\00\00\00\00\8B\854\FA\FF\FF\89\85$\FB\FF\FF\C7\85p\FB\FF\FF\00\00\00\00\C7\85\B0\FB\FF\FF\01\00\00\00\C7E\FC\01\00\00\00\83}\FC\10\0F\8D,\00\00\00HcE\FC\C7\84\85p\FB\FF\FF\FF\FF\FF\FFHcE\FC\C7\84\85\B0\FB\FF\FF\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\CA\FF\FF\FF\C7\85\D0\FA\FF\FF\00\00\00\00\C7\85\D4\FA\FF\FF\00\00\00\00\C7\85\80\FA\FF\FF\FF\FF\FF\FF\C7\85\84\FA\FF\FF\00\00\00\00\C7E\F4\00\00\00\00\8BE\F4\83\C0\01\89E\F4HcM\F4\83\BC\8D \FB\FF\FF\FF\0F\85\AE\00\00\00HcE\F4\8B\8C\85\D0\FA\FF\FF\8BU\F4\83\C2\01Hc\C2\89\8C\85\D0\FA\FF\FF\C7E\FC\00\00\00\00\8BE\FCHcM\F4;\84\8D\D0\FA\FF\FF\0F\8Fs\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\89\C2H\01\CAHcM\FC\8B4\8A\8B}\F4\83\C7\01Hc\CFH\C1\E1\06H\89\C2H\01\CAHcM\FC\894\8AHcM\F4H\C1\E1\06H\89\C2H\01\CAHcM\FCHc\0C\8A\8B4\8D\804`\00HcM\F4H\C1\E1\06H\01\C8HcM\FC\894\88\8BE\FC\83\C0\01\89E\FC\E9y\FF\FF\FF\E9\B8\02\00\00\8BE\F4\83\E8\01\89E\F01\C0\88\C1HcU\F0\83\BC\95 \FB\FF\FF\FF\88\8D{\F5\FF\FF\0F\85\0D\00\00\00\83}\F0\00\0F\9F\C0\88\85{\F5\FF\FF\8A\85{\F5\FF\FF\A8\01\0F\85\05\00\00\00\E9\0E\00\00\00\8BE\F0\83\C0\FF\89E\F0\E9\B6\FF\FF\FF\83}\F0\00\0F\8EW\00\00\00\8BE\F0\89E\F8\8BE\F8\83\C0\FF\89E\F8HcM\F8\83\BC\8D \FB\FF\FF\FF\0F\84\22\00\00\00HcE\F0\8B\8C\85\80\FA\FF\FFHcE\F8;\8C\85\80\FA\FF\FF\0F\8D\06\00\00\00\8BE\F8\89E\F0\E9\00\00\00\00\83}\F8\00\0F\8F\B4\FF\FF\FF\E9\00\00\00\00HcE\F4\8B\8C\85\D0\FA\FF\FFHcE\F0\8B\94\85\D0\FA\FF\FF\03U\F4+U\F09\D1\0F\8E \00\00\00HcE\F4\8B\8C\85\D0\FA\FF\FF\8BU\F4\83\C2\01Hc\C2\89\8C\85\D0\FA\FF\FF\E9!\00\00\00HcE\F0\8B\8C\85\D0\FA\FF\FF\03M\F4+M\F0\8BU\F4\83\C2\01Hc\C2\89\8C\85\D0\FA\FF\FF\C7E\FC\00\00\00\00\83}\FC\10\0F\8D0\00\00\00H\8D\85p\FB\FF\FF\8BM\F4\83\C1\01Hc\D1H\C1\E2\06H\01\D0HcU\FC\C7\04\90\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\C6\FF\FF\FF\C7E\FC\00\00\00\00\8BE\FCHcM\F0;\84\8D\D0\FA\FF\FF\0F\8F\AD\00\00\00H\8D\85p\FB\FF\FFHcM\F0H\C1\E1\06H\01\C8HcM\FC\83<\88\FF\0F\84z\00\00\00H\8D\85p\FB\FF\FF\B9\FF\00\00\00HcU\F4\8B\B4\95 \FB\FF\FF\81\C6\FF\00\00\00HcU\F0+\B4\95 \FB\FF\FFHcU\F0H\C1\E2\06H\89\C7H\01\D7HcU\FC\034\97H\89\85p\F5\FF\FF\89\F0\99\F7\F9Hc\FA\8B\0C\BD\808`\00\8BU\F4\83\C2\01Hc\FAH\C1\E7\06L\8B\85p\F5\FF\FFI\01\F8\8BU\FC\03U\F4+U\F0Hc\FAA\89\0C\B8\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9?\FF\FF\FF\C7E\FC\00\00\00\00\8BE\FCHcM\F4;\84\8D\D0\FA\FF\FF\0F\8Fv\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\89\C2H\01\CAHcM\FC\8B4\8A\8B}\F4\83\C7\01Hc\CFH\C1\E1\06H\89\C2H\01\CAHcM\FC34\8A\894\8AHcM\F4H\C1\E1\06H\89\C2H\01\CAHcM\FCHc\0C\8A\8B4\8D\804`\00HcM\F4H\C1\E1\06H\01\C8HcM\FC\894\88\8BE\FC\83\C0\01\89E\FC\E9v\FF\FF\FF\E9\00\00\00\00\8BE\F4\8BM\F4\83\C1\01Hc\D1+\84\95\D0\FA\FF\FF\8BM\F4\83\C1\01Hc\D1\89\84\95\80\FA\FF\FF\83}\F4\10\0F\8Dd\01\00\00\8BE\F4\83\C0\01Hc\C8\83\BC\8D0\FA\FF\FF\FF\0F\84-\00\00\00\8BE\F4\83\C0\01Hc\C8Hc\8C\8D0\FA\FF\FF\8B\04\8D\808`\00\8BU\F4\83\C2\01Hc\CA\89\84\8D \FB\FF\FF\E9\14\00\00\00\8BE\F4\83\C0\01Hc\C8\C7\84\8D \FB\FF\FF\00\00\00\00\C7E\FC\01\00\00\00\8BE\FC\8BM\F4\83\C1\01Hc\D1;\84\95\D0\FA\FF\FF\0F\8F\C4\00\00\00\8BE\F4\83\C0\01+E\FCHc\C8\83\BC\8D0\FA\FF\FF\FF\0F\84\97\00\00\00H\8D\85p\FB\FF\FF\8BM\F4\83\C1\01Hc\D1H\C1\E2\06H\01\D0HcU\FC\83<\90\00\0F\84r\00\00\00\B8\FF\00\00\00H\8D\8Dp\FB\FF\FF\8BU\F4\83\C2\01+U\FCHc\F2\8B\94\B50\FA\FF\FF\8B}\F4\83\C7\01Hc\F7H\C1\E6\06H\01\F1Hcu\FCHc\0C\B1\03\14\8D\804`\00\89\85l\F5\FF\FF\89\D0\99\8B\BDl\F5\FF\FF\F7\FFHc\CA\8B\14\8D\808`\00D\8BE\F4A\83\C0\01Ic\C83\94\8D \FB\FF\FF\89\94\8D \FB\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9#\FF\FF\FF\8BE\F4\83\C0\01Hc\C8Hc\8C\8D \FB\FF\FF\8B\04\8D\804`\00\8BU\F4\83\C2\01Hc\CA\89\84\8D \FB\FF\FF\E9\00\00\00\001\C0\88\C1\83}\F4\10\88\8Dk\F5\FF\FF\0F\8D\1A\00\00\00\8BE\F4\83\C0\01Hc\C8\83\BC\8D\D0\FA\FF\FF\08\0F\9E\C2\88\95k\F5\FF\FF\8A\85k\F5\FF\FF\A8\01\0F\85\AD\FA\FF\FF\8BE\F4\83\C0\01\89E\F4HcM\F4\83\BC\8D\D0\FA\FF\FF\08\0F\8F1\07\00\00\C7E\FC\00\00\00\00\8BE\FCHcM\F4;\84\8D\D0\FA\FF\FF\0F\8FD\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\89\C2H\01\CAHcM\FCHc\0C\8A\8B4\8D\804`\00HcM\F4H\C1\E1\06H\01\C8HcM\FC\894\88\8BE\FC\83\C0\01\89E\FC\E9\A8\FF\FF\FF\C7E\FC\01\00\00\00\8BE\FCHcM\F4;\84\8D\D0\FA\FF\FF\0F\8F2\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\01\C8HcM\FC\8B\14\88HcE\FC\89\94\85\80\F5\FF\FF\8BE\FC\83\C0\01\89E\FC\E9\BA\FF\FF\FF\C7\85,\FA\FF\FF\00\00\00\00\C7E\FC\01\00\00\00\81}\FC\FF\00\00\00\0F\8F\E2\00\00\00\C7E\F0\01\00\00\00\C7E\F8\01\00\00\00\8BE\F8HcM\F4;\84\8D\D0\FA\FF\FF\0F\8Fm\00\00\00HcE\F8\83\BC\85\80\F5\FF\FF\FF\0F\84H\00\00\00\B8\FF\00\00\00HcM\F8\8B\94\8D\80\F5\FF\FF\03U\F8\89\85d\F5\FF\FF\89\D0\99\8B\B5d\F5\FF\FF\F7\FEHcM\F8\89\94\8D\80\F5\FF\FFHcM\F8Hc\8C\8D\80\F5\FF\FF\8B\14\8D\808`\003U\F0\89U\F0\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\7F\FF\FF\FF\83}\F0\00\0F\856\00\00\00\B8\FF\00\00\00\8BM\FCHc\95,\FA\FF\FF\89\8C\95\00\FA\FF\FF+E\FCHc\95,\FA\FF\FF\89\84\95\E0\F9\FF\FF\8B\85,\FA\FF\FF\83\C0\01\89\85,\FA\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\11\FF\FF\FF\8B\85,\FA\FF\FFHcM\F4;\84\8D\D0\FA\FF\FF\0F\85\F9\04\00\00\C7E\FC\01\00\00\00\8BE\FCHcM\F4;\84\8D\D0\FA\FF\FF\0F\8F+\02\00\00HcE\FC\83\BC\850\FA\FF\FF\FF\0F\84d\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\01\C8HcM\FC\83<\88\FF\0F\84D\00\00\00H\8D\85p\FB\FF\FFHcM\FCHc\8C\8D0\FA\FF\FF\8B\14\8D\808`\00HcM\F4H\C1\E1\06H\01\C8HcM\FCHc\04\883\14\85\808`\00HcE\FC\89\94\85\B0\F9\FF\FF\E9\D1\00\00\00HcE\FC\83\BC\850\FA\FF\FF\FF\0F\84C\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\01\C8HcM\FC\83<\88\FF\0F\85#\00\00\00HcE\FCHc\84\850\FA\FF\FF\8B\0C\85\808`\00HcE\FC\89\8C\85\B0\F9\FF\FF\E9w\00\00\00HcE\FC\83\BC\850\FA\FF\FF\FF\0F\85Q\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\01\C8HcM\FC\83<\88\FF\0F\841\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\01\C8HcM\FCHc\04\88\8B\14\85\808`\00HcE\FC\89\94\85\B0\F9\FF\FF\E9\0F\00\00\00HcE\FC\C7\84\85\B0\F9\FF\FF\00\00\00\00\E9\00\00\00\00\E9\00\00\00\00\C7E\F8\01\00\00\00\8BE\F8;E\FC\0F\8D\A5\00\00\00HcE\F8\83\BC\850\FA\FF\FF\FF\0F\84\80\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\01\C8\8BU\FC+U\F8Hc\CA\83<\88\FF\0F\84[\00\00\00\B8\FF\00\00\00H\8D\8Dp\FB\FF\FFHcU\F4H\C1\E2\06H\01\D1\8Bu\FC+u\F8Hc\D6\8B4\91HcM\F8\03\B4\8D0\FA\FF\FF\89\85`\F5\FF\FF\89\F0\99\8B\B5`\F5\FF\FF\F7\FEHc\CA\8B\14\8D\808`\00HcM\FC3\94\8D\B0\F9\FF\FF\89\94\8D\B0\F9\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9O\FF\FF\FFHcE\FCHc\84\85\B0\F9\FF\FF\8B\0C\85\804`\00HcE\FC\89\8C\85\B0\F9\FF\FF\8BE\FC\83\C0\01\89E\FC\E9\C1\FD\FF\FF\C7E\FC\00\00\00\00\81}\FC\FF\00\00\00\0F\8Df\00\00\00HcE\FC\C7\84\85\B0\F5\FF\FF\00\00\00\00HcE\FC\83<\85\800`\00\FF\0F\84#\00\00\00HcE\FCHc\04\85\800`\00\8B\0C\85\808`\00HcE\FC\89\0C\85\800`\00\E9\0F\00\00\00HcE\FC\C7\04\85\800`\00\00\00\00\00\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\8D\FF\FF\FF\C7E\FC\00\00\00\00\8BE\FCHcM\F4;\84\8D\D0\FA\FF\FF\0F\8D\19\02\00\00HcE\FCHc\84\85\E0\F9\FF\FF\C7\84\85\B0\F5\FF\FF\01\00\00\00\C7E\F8\01\00\00\00\8BE\F8HcM\F4;\84\8D\D0\FA\FF\FF\0F\8F{\00\00\00HcE\F8\83\BC\85\B0\F9\FF\FF\FF\0F\84V\00\00\00\B8\FF\00\00\00HcM\F8\8B\94\8D\B0\F9\FF\FF\8Bu\F8HcM\FC\0F\AF\B4\8D\00\FA\FF\FF\01\F2\89\85\5C\F5\FF\FF\89\D0\99\8B\B5\5C\F5\FF\FF\F7\FEHc\CA\8B\14\8D\808`\00HcM\FCHc\8C\8D\E0\F9\FF\FF3\94\8D\B0\F5\FF\FF\89\94\8D\B0\F5\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9q\FF\FF\FFHcE\FCHc\84\85\E0\F9\FF\FF\83\BC\85\B0\F5\FF\FF\00\0F\84?\01\00\00HcE\FCHc\84\85\E0\F9\FF\FFHc\84\85\B0\F5\FF\FF\8B\0C\85\804`\00HcE\FCHc\84\85\E0\F9\FF\FF\89\8C\85\B0\F5\FF\FF\C7E\F0\00\00\00\00\C7E\F8\00\00\00\00\8BE\F8HcM\F4;\84\8D\D0\FA\FF\FF\0F\8Dh\00\00\00\8BE\F8;E\FC\0F\84I\00\00\00\B8\FF\00\00\00HcM\F8\8B\94\8D\E0\F9\FF\FFHcM\FC\03\94\8D\00\FA\FF\FF\89\85X\F5\FF\FF\89\D0\99\8B\B5X\F5\FF\FF\F7\FEHc\CA\8B\14\8D\808`\00\83\F2\01Hc\CA\8B\14\8D\804`\00\03U\F0\89U\F0\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\84\FF\FF\FF\B8\FF\00\00\00\8BM\F0\89\85T\F5\FF\FF\89\C8\99\8B\8DT\F5\FF\FF\F7\F9\89U\F0Hcu\FCHc\B4\B5\E0\F9\FF\FF\8B\94\B5\B0\F5\FF\FF+U\F0\81\C2\FF\00\00\00\89\D0\99\F7\F9Hc\F2\8B\14\B5\808`\00Hcu\FCHc\B4\B5\E0\F9\FF\FF\89\94\B5\B0\F5\FF\FFHcu\FCHc\B4\B5\E0\F9\FF\FF\8B\94\B5\B0\F5\FF\FFHcu\FCHc\B4\B5\E0\F9\FF\FF3\14\B5\800`\00\89\14\B5\800`\00\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\D3\FD\FF\FF\E9p\00\00\00\C7E\FC\00\00\00\00\81}\FC\FF\00\00\00\0F\8DW\00\00\00HcE\FC\83<\85\800`\00\FF\0F\84#\00\00\00HcE\FCHc\04\85\800`\00\8B\0C\85\808`\00HcE\FC\89\0C\85\800`\00\E9\0F\00\00\00HcE\FC\C7\04\85\800`\00\00\00\00\00\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\9C\FF\FF\FF\E9\00\00\00\00\E9p\00\00\00\C7E\FC\00\00\00\00\81}\FC\FF\00\00\00\0F\8DW\00\00\00HcE\FC\83<\85\800`\00\FF\0F\84#\00\00\00HcE\FCHc\04\85\800`\00\8B\0C\85\808`\00HcE\FC\89\0C\85\800`\00\E9\0F\00\00\00HcE\FC\C7\04\85\800`\00\00\00\00\00\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\9C\FF\FF\FF\E9\00\00\00\00\E9p\00\00\00\C7E\FC\00\00\00\00\81}\FC\FF\00\00\00\0F\8DW\00\00\00HcE\FC\83<\85\800`\00\FF\0F\84#\00\00\00HcE\FCHc\04\85\800`\00\8B\0C\85\808`\00HcE\FC\89\0C\85\800`\00\E9\0F\00\00\00HcE\FC\C7\04\85\800`\00\00\00\00\00\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\9C\FF\FF\FF\E9\00\00\00\00H\81\C40\0A\00\00]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\89}\F8H\89u\F0\83<%p0`\00\00\0F\85\15\00\00\00\E8\ED\ED\FF\FF\E88\EF\FF\FF\C7\04%p0`\00\01\00\00\00\C7E\EC\00\00\00\00\83}\EC3\0F\8D\1D\00\00\00HcE\EC\C7\04\85\D0<`\00\00\00\00\00\8BE\EC\83\C0\01\89E\EC\E9\D9\FF\FF\FF\C7E\EC\00\00\00\00\81}\EC\BC\00\00\00\0F\8D*\00\00\00H\8BE\F0HcM\EC\0F\B6\14\08\8Bu\EC\83\C63Hc\C6\89\14\85\D0<`\00\8BE\EC\83\C0\01\89E\EC\E9\C9\FF\FF\FF\E8\8C\00\00\00\C7E\EC\00\00\00\00\81}\EC\BC\00\00\00\0F\8D$\00\00\00H\8BE\F0HcM\EC\8A\14\08H\8BE\F8HcM\EC\88\14\08\8BE\EC\83\C0\01\89E\EC\E9\CF\FF\FF\FF\C7E\EC\00\00\00\00\83}\EC\10\0F\8D.\00\00\00HcE\EC\8B\0C\85\90@`\00\88\CAH\8BE\F8\8BM\EC\81\C1\BC\00\00\00Hc\F1\88\140\8BE\EC\83\C0\01\89E\EC\E9\C8\FF\FF\FFH\83\C4 ]\C3ffffff.\0F\1F\84\00\00\00\00\00UH\89\E5\C7E\FC\00\00\00\00\83}\FC\10\0F\8D\1D\00\00\00HcE\FC\C7\04\85\90@`\00\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\D9\FF\FF\FF\C7E\FC\EE\00\00\00\83}\FC\00\0F\8CJ\01\00\00HcE\FC\8B\0C\85\D0<`\003\0C%\CC@`\00Hc\C1\8B\0C\85\804`\00\89M\F4\83}\F4\FF\0F\84\C9\00\00\00\C7E\F8\0F\00\00\00\83}\F8\00\0F\8E\88\00\00\00HcE\F8\83<\85\80<`\00\FF\0F\84H\00\00\00\B8\FF\00\00\00\8BM\F8\83\E9\01Hc\D1\8B\0C\95\90@`\00HcU\F8\8B4\95\80<`\00\03u\F4\89E\F0\89\F0\99\8Bu\F0\F7\FEHc\FA3\0C\BD\808`\00Hc}\F8\89\0C\BD\90@`\00\E9\1B\00\00\00\8BE\F8\83\E8\01Hc\C8\8B\04\8D\90@`\00HcM\F8\89\04\8D\90@`\00\E9\00\00\00\00\8BE\F8\83\C0\FF\89E\F8\E9n\FF\FF\FF\B8\FF\00\00\00\8B\0C%\80<`\00\03M\F4\89E\EC\89\C8\99\8BM\EC\F7\F9Hc\F2\8B\14\B5\808`\00\89\14%\90@`\00\E9E\00\00\00\C7E\F8\0F\00\00\00\83}\F8\00\0F\8E)\00\00\00\8BE\F8\83\E8\01Hc\C8\8B\04\8D\90@`\00HcM\F8\89\04\8D\90@`\00\8BE\F8\83\C0\FF\89E\F8\E9\CD\FF\FF\FF\C7\04%\90@`\00\00\00\00\00\E9\00\00\00\00\8BE\FC\83\C0\FF\89E\FC\E9\AC\FE\FF\FF]\C3\90UH\89\E5H\81\EC\B0\01\00\00\C7E\FC\00\00\00\00\C7\85\5C\FE\FF\FF\00\00\00\00\81\BD\5C\FE\FF\FF\F0I\02\00\0F\8D\F5\00\00\00\C7\85X\FE\FF\FF\00\00\00\00\81\BDX\FE\FF\FF\BC\00\00\00\0F\8D/\00\00\00\E8\95\E8\FF\FFH%\FF\00\00\00\88\C1Hc\85X\FE\FF\FF\88\8C\050\FF\FF\FF\8B\85X\FE\FF\FF\83\C0\01\89\85X\FE\FF\FF\E9\C1\FF\FF\FFH\8D\B50\FF\FF\FFH\8D\BD`\FE\FF\FF\E8\B8\FC\FF\FF\E8S\E8\FF\FFH\83\E0\7F\89\C1\89\8DT\FE\FF\FF\C7\85X\FE\FF\FF\00\00\00\00\8B\85X\FE\FF\FF;\85T\FE\FF\FF\0F\8DE\00\00\00\E8&\E8\FF\FFH%\FF\00\00\00\88\C1\88\8DS\FE\FF\FF\E8\13\E8\FF\FF\BA\CC\00\00\00\89\D6H\99H\F7\FE\8A\8DS\FE\FF\FF\88\8C\15`\FE\FF\FF\8B\85X\FE\FF\FF\83\C0\01\89\85X\FE\FF\FF\E9\A9\FF\FF\FFH\8D\B5`\FE\FF\FFH\8D\BD0\FF\FF\FF\E8\D3\E8\FF\FF\8B\85\5C\FE\FF\FF\83\C0\01\89\85\5C\FE\FF\FF\E9\FB\FE\FF\FF1\C0H\81\C4\B0\01\00\00]\C3\0F\1F@\00AWAVI\89\D7AUATL\8D%^\11 \00UH\8D-^\11 \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8O\E7\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_401ce4__fini = internal constant %seg_401ce4__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_401cf0__rodata = internal constant %seg_401cf0__rodata_type <{ [4 x i8] c"\01\00\02\00" }>
@seg_401cf4__eh_frame_hdr = internal constant %seg_401cf4__eh_frame_hdr_type <{ [108 x i8] c"\01\1B\03;h\00\00\00\0C\00\00\00\1C\E7\FF\FF\C4\00\00\00<\E7\FF\FF\84\00\00\00l\E7\FF\FF\B0\00\00\00,\E8\FF\FF\EC\00\00\00\9C\E9\FF\FF\08\01\00\00\EC\EA\FF\FF$\01\00\00L\EC\FF\FF@\01\00\00\8C\FB\FF\FF\5C\01\00\00\BC\FC\FF\FFx\01\00\00L\FE\FF\FF\94\01\00\00|\FF\FF\FF\B4\01\00\00\EC\FF\FF\FF\FC\01\00\00" }>
@seg_401d60__eh_frame = internal constant %seg_401d60__eh_frame_type <{ [424 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00\B0\E6\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00\B4\E6\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00P\E6\FF\FF \00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\008\E7\FF\FFl\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00\8C\E8\FF\FFL\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\90\00\00\00\C0\E9\FF\FF]\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\AC\00\00\00\04\EB\FF\FF6\0F\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\00\00\00(\FA\FF\FF!\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\00\00\00<\FB\FF\FF\8F\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\1C\00\00\00\00\01\00\00\B0\FC\FF\FF,\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\00\00\00\00D\00\00\00 \01\00\00\C0\FD\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00h\01\00\00\E8\FD\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_602de0__init_array = internal global %seg_602de0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400510_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004e0___do_global_dtors_aux to i64) }>
@seg_602ff0__got = internal global %seg_602ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_603000__got_plt = internal global %seg_603000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 ()* @random to i64) }>
@seg_603020__data = internal global %seg_603020__data_type <{ [16 x i8] zeroinitializer, [36 x i8] c"\01\00\00\00\00\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00" }>
@seg_603060__bss = internal global %seg_603060__bss_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400510_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004e0___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_401ce0___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_401c70___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @rsenc_204_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @rsdec_204_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @sub_400470_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400690_generate_gf_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4019b0_encode_rs_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4007e0_gen_poly_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401880_rsenc_204_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4003f0__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400520_rsdec_204_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400940_decode_rs_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @random() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
define %struct.Memory* @sub_400940_decode_rs(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400940:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 7
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %17 = bitcast %union.anon* %16 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %17, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EAX = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %ECX = bitcast %union.anon* %23 to i32*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %EDX = bitcast %union.anon* %26 to i32*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %ESI = bitcast %union.anon* %29 to i32*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %EDI = bitcast %union.anon* %32 to i32*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 17
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R8D = bitcast %union.anon* %35 to i32*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 1
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RAX = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 5
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RCX = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 7
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %RDX = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 9
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %RSI = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 11
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %RDI = bitcast %union.anon* %50 to i64*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 13
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %RSP = bitcast %union.anon* %53 to i64*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %55 = getelementptr inbounds %struct.GPR, %struct.GPR* %54, i32 0, i32 15
  %56 = getelementptr inbounds %struct.Reg, %struct.Reg* %55, i32 0, i32 0
  %RBP = bitcast %union.anon* %56 to i64*
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %58 = getelementptr inbounds %struct.GPR, %struct.GPR* %57, i32 0, i32 17
  %59 = getelementptr inbounds %struct.Reg, %struct.Reg* %58, i32 0, i32 0
  %R8 = bitcast %union.anon* %59 to i64*
  %60 = load i64, i64* %RBP
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 1
  store i64 %62, i64* %PC
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %64 = load i64, i64* %63, align 8, !tbaa !2428
  %65 = add i64 %64, -8
  %66 = inttoptr i64 %65 to i64*
  store i64 %60, i64* %66
  store i64 %65, i64* %63, align 8, !tbaa !2428
  %67 = load i64, i64* %RSP
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 3
  store i64 %69, i64* %PC
  store i64 %67, i64* %RBP, align 8, !tbaa !2428
  %70 = load i64, i64* %RSP
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 7
  store i64 %72, i64* %PC
  %73 = sub i64 %70, 2608
  store i64 %73, i64* %RSP, align 8, !tbaa !2428
  %74 = icmp ult i64 %70, 2608
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %75, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %73 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = xor i64 2608, %70
  %85 = xor i64 %84, %73
  %86 = lshr i64 %85, 4
  %87 = trunc i64 %86 to i8
  %88 = and i8 %87, 1
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %88, i8* %89, align 1, !tbaa !2447
  %90 = icmp eq i64 %73, 0
  %91 = zext i1 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %91, i8* %92, align 1, !tbaa !2448
  %93 = lshr i64 %73, 63
  %94 = trunc i64 %93 to i8
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %94, i8* %95, align 1, !tbaa !2449
  %96 = lshr i64 %70, 63
  %97 = xor i64 %93, %96
  %98 = add nuw nsw i64 %97, %96
  %99 = icmp eq i64 %98, 2
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %100, i8* %101, align 1, !tbaa !2450
  %102 = load i64, i64* %RBP
  %103 = sub i64 %102, 1492
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 10
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  store i32 0, i32* %106
  %107 = load i64, i64* %RBP
  %108 = sub i64 %107, 1496
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 10
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %108 to i32*
  store i32 0, i32* %111
  %112 = load i64, i64* %RBP
  %113 = sub i64 %112, 4
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 7
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %113 to i32*
  store i32 1, i32* %116
  br label %block_400966

block_4017f8:                                     ; preds = %block_401783, %block_4017f3
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.24, %block_4017f3 ], [ %MEMORY.22, %block_401783 ]
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 117
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  store i64 %120, i64* %PC
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %118, i64* %121, align 8, !tbaa !2428
  br label %block_40186d

block_400def:                                     ; preds = %block_400ddb
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 1168
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 7
  store i64 %125, i64* %PC
  store i64 %123, i64* %RAX, align 8, !tbaa !2428
  %126 = load i64, i64* %RBP
  %127 = sub i64 %126, 12
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %127 to i32*
  %131 = load i32, i32* %130
  %132 = sext i32 %131 to i64
  store i64 %132, i64* %RCX, align 8, !tbaa !2428
  %133 = load i64, i64* %RCX
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 4
  store i64 %135, i64* %PC
  %136 = shl i64 %133, 5
  %137 = icmp slt i64 %136, 0
  %138 = shl i64 %136, 1
  store i64 %138, i64* %RCX, align 8, !tbaa !2428
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %140 = zext i1 %137 to i8
  store i8 %140, i8* %139, align 1, !tbaa !2451
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %142 = trunc i64 %138 to i32
  %143 = and i32 %142, 254
  %144 = call i32 @llvm.ctpop.i32(i32 %143) #16
  %145 = trunc i32 %144 to i8
  %146 = and i8 %145, 1
  %147 = xor i8 %146, 1
  store i8 %147, i8* %141, align 1, !tbaa !2451
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %148, align 1, !tbaa !2451
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %150 = icmp eq i64 %138, 0
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %149, align 1, !tbaa !2451
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %153 = lshr i64 %138, 63
  %154 = trunc i64 %153 to i8
  store i8 %154, i8* %152, align 1, !tbaa !2451
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %155, align 1, !tbaa !2451
  %156 = load i64, i64* %RAX
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  store i64 %156, i64* %RDX, align 8, !tbaa !2428
  %159 = load i64, i64* %RDX
  %160 = load i64, i64* %RCX
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 3
  store i64 %162, i64* %PC
  %163 = add i64 %160, %159
  store i64 %163, i64* %RDX, align 8, !tbaa !2428
  %164 = icmp ult i64 %163, %159
  %165 = icmp ult i64 %163, %160
  %166 = or i1 %164, %165
  %167 = zext i1 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %167, i8* %168, align 1, !tbaa !2432
  %169 = trunc i64 %163 to i32
  %170 = and i32 %169, 255
  %171 = call i32 @llvm.ctpop.i32(i32 %170) #16
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %174, i8* %175, align 1, !tbaa !2446
  %176 = xor i64 %160, %159
  %177 = xor i64 %176, %163
  %178 = lshr i64 %177, 4
  %179 = trunc i64 %178 to i8
  %180 = and i8 %179, 1
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %180, i8* %181, align 1, !tbaa !2447
  %182 = icmp eq i64 %163, 0
  %183 = zext i1 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %183, i8* %184, align 1, !tbaa !2448
  %185 = lshr i64 %163, 63
  %186 = trunc i64 %185 to i8
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %186, i8* %187, align 1, !tbaa !2449
  %188 = lshr i64 %159, 63
  %189 = lshr i64 %160, 63
  %190 = xor i64 %185, %188
  %191 = xor i64 %185, %189
  %192 = add nuw nsw i64 %190, %191
  %193 = icmp eq i64 %192, 2
  %194 = zext i1 %193 to i8
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %194, i8* %195, align 1, !tbaa !2450
  %196 = load i64, i64* %RBP
  %197 = sub i64 %196, 4
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %197 to i32*
  %201 = load i32, i32* %200
  %202 = sext i32 %201 to i64
  store i64 %202, i64* %RCX, align 8, !tbaa !2428
  %203 = load i64, i64* %RDX
  %204 = load i64, i64* %RCX
  %205 = mul i64 %204, 4
  %206 = add i64 %205, %203
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 3
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i32*
  %210 = load i32, i32* %209
  %211 = zext i32 %210 to i64
  store i64 %211, i64* %RSI, align 8, !tbaa !2428
  %212 = load i64, i64* %RBP
  %213 = sub i64 %212, 12
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = inttoptr i64 %213 to i32*
  %217 = load i32, i32* %216
  %218 = zext i32 %217 to i64
  store i64 %218, i64* %RDI, align 8, !tbaa !2428
  %219 = load i64, i64* %RDI
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 3
  store i64 %221, i64* %PC
  %222 = trunc i64 %219 to i32
  %223 = add i32 1, %222
  %224 = zext i32 %223 to i64
  store i64 %224, i64* %RDI, align 8, !tbaa !2428
  %225 = icmp ult i32 %223, %222
  %226 = icmp ult i32 %223, 1
  %227 = or i1 %225, %226
  %228 = zext i1 %227 to i8
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %228, i8* %229, align 1, !tbaa !2432
  %230 = and i32 %223, 255
  %231 = call i32 @llvm.ctpop.i32(i32 %230) #16
  %232 = trunc i32 %231 to i8
  %233 = and i8 %232, 1
  %234 = xor i8 %233, 1
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %234, i8* %235, align 1, !tbaa !2446
  %236 = xor i64 1, %219
  %237 = trunc i64 %236 to i32
  %238 = xor i32 %237, %223
  %239 = lshr i32 %238, 4
  %240 = trunc i32 %239 to i8
  %241 = and i8 %240, 1
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %241, i8* %242, align 1, !tbaa !2447
  %243 = icmp eq i32 %223, 0
  %244 = zext i1 %243 to i8
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %244, i8* %245, align 1, !tbaa !2448
  %246 = lshr i32 %223, 31
  %247 = trunc i32 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %247, i8* %248, align 1, !tbaa !2449
  %249 = lshr i32 %222, 31
  %250 = xor i32 %246, %249
  %251 = add nuw nsw i32 %250, %246
  %252 = icmp eq i32 %251, 2
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %253, i8* %254, align 1, !tbaa !2450
  %255 = load i32, i32* %EDI
  %256 = zext i32 %255 to i64
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  %259 = shl i64 %256, 32
  %260 = ashr exact i64 %259, 32
  store i64 %260, i64* %RCX, align 8, !tbaa !2428
  %261 = load i64, i64* %RCX
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 4
  store i64 %263, i64* %PC
  %264 = shl i64 %261, 5
  %265 = icmp slt i64 %264, 0
  %266 = shl i64 %264, 1
  store i64 %266, i64* %RCX, align 8, !tbaa !2428
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %268 = zext i1 %265 to i8
  store i8 %268, i8* %267, align 1, !tbaa !2451
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %270 = trunc i64 %266 to i32
  %271 = and i32 %270, 254
  %272 = call i32 @llvm.ctpop.i32(i32 %271) #16
  %273 = trunc i32 %272 to i8
  %274 = and i8 %273, 1
  %275 = xor i8 %274, 1
  store i8 %275, i8* %269, align 1, !tbaa !2451
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %276, align 1, !tbaa !2451
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %278 = icmp eq i64 %266, 0
  %279 = zext i1 %278 to i8
  store i8 %279, i8* %277, align 1, !tbaa !2451
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %281 = lshr i64 %266, 63
  %282 = trunc i64 %281 to i8
  store i8 %282, i8* %280, align 1, !tbaa !2451
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %283, align 1, !tbaa !2451
  %284 = load i64, i64* %RAX
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 3
  store i64 %286, i64* %PC
  store i64 %284, i64* %RDX, align 8, !tbaa !2428
  %287 = load i64, i64* %RDX
  %288 = load i64, i64* %RCX
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 3
  store i64 %290, i64* %PC
  %291 = add i64 %288, %287
  store i64 %291, i64* %RDX, align 8, !tbaa !2428
  %292 = icmp ult i64 %291, %287
  %293 = icmp ult i64 %291, %288
  %294 = or i1 %292, %293
  %295 = zext i1 %294 to i8
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %295, i8* %296, align 1, !tbaa !2432
  %297 = trunc i64 %291 to i32
  %298 = and i32 %297, 255
  %299 = call i32 @llvm.ctpop.i32(i32 %298) #16
  %300 = trunc i32 %299 to i8
  %301 = and i8 %300, 1
  %302 = xor i8 %301, 1
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %302, i8* %303, align 1, !tbaa !2446
  %304 = xor i64 %288, %287
  %305 = xor i64 %304, %291
  %306 = lshr i64 %305, 4
  %307 = trunc i64 %306 to i8
  %308 = and i8 %307, 1
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %308, i8* %309, align 1, !tbaa !2447
  %310 = icmp eq i64 %291, 0
  %311 = zext i1 %310 to i8
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %311, i8* %312, align 1, !tbaa !2448
  %313 = lshr i64 %291, 63
  %314 = trunc i64 %313 to i8
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %314, i8* %315, align 1, !tbaa !2449
  %316 = lshr i64 %287, 63
  %317 = lshr i64 %288, 63
  %318 = xor i64 %313, %316
  %319 = xor i64 %313, %317
  %320 = add nuw nsw i64 %318, %319
  %321 = icmp eq i64 %320, 2
  %322 = zext i1 %321 to i8
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %322, i8* %323, align 1, !tbaa !2450
  %324 = load i64, i64* %RBP
  %325 = sub i64 %324, 4
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 4
  store i64 %327, i64* %PC
  %328 = inttoptr i64 %325 to i32*
  %329 = load i32, i32* %328
  %330 = sext i32 %329 to i64
  store i64 %330, i64* %RCX, align 8, !tbaa !2428
  %331 = load i64, i64* %RSI
  %332 = load i64, i64* %RDX
  %333 = load i64, i64* %RCX
  %334 = mul i64 %333, 4
  %335 = add i64 %334, %332
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 3
  store i64 %337, i64* %PC
  %338 = trunc i64 %331 to i32
  %339 = inttoptr i64 %335 to i32*
  %340 = load i32, i32* %339
  %341 = xor i32 %340, %338
  %342 = zext i32 %341 to i64
  store i64 %342, i64* %RSI, align 8, !tbaa !2428
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %343, align 1, !tbaa !2432
  %344 = and i32 %341, 255
  %345 = call i32 @llvm.ctpop.i32(i32 %344) #16
  %346 = trunc i32 %345 to i8
  %347 = and i8 %346, 1
  %348 = xor i8 %347, 1
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %348, i8* %349, align 1, !tbaa !2446
  %350 = icmp eq i32 %341, 0
  %351 = zext i1 %350 to i8
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %351, i8* %352, align 1, !tbaa !2448
  %353 = lshr i32 %341, 31
  %354 = trunc i32 %353 to i8
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %354, i8* %355, align 1, !tbaa !2449
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %356, align 1, !tbaa !2450
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %357, align 1, !tbaa !2447
  %358 = load i64, i64* %RDX
  %359 = load i64, i64* %RCX
  %360 = mul i64 %359, 4
  %361 = add i64 %360, %358
  %362 = load i32, i32* %ESI
  %363 = zext i32 %362 to i64
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  %366 = inttoptr i64 %361 to i32*
  store i32 %362, i32* %366
  %367 = load i64, i64* %RBP
  %368 = sub i64 %367, 12
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 4
  store i64 %370, i64* %PC
  %371 = inttoptr i64 %368 to i32*
  %372 = load i32, i32* %371
  %373 = sext i32 %372 to i64
  store i64 %373, i64* %RCX, align 8, !tbaa !2428
  %374 = load i64, i64* %RCX
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  store i64 %376, i64* %PC
  %377 = shl i64 %374, 5
  %378 = icmp slt i64 %377, 0
  %379 = shl i64 %377, 1
  store i64 %379, i64* %RCX, align 8, !tbaa !2428
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %381 = zext i1 %378 to i8
  store i8 %381, i8* %380, align 1, !tbaa !2451
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %383 = trunc i64 %379 to i32
  %384 = and i32 %383, 254
  %385 = call i32 @llvm.ctpop.i32(i32 %384) #16
  %386 = trunc i32 %385 to i8
  %387 = and i8 %386, 1
  %388 = xor i8 %387, 1
  store i8 %388, i8* %382, align 1, !tbaa !2451
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %389, align 1, !tbaa !2451
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %391 = icmp eq i64 %379, 0
  %392 = zext i1 %391 to i8
  store i8 %392, i8* %390, align 1, !tbaa !2451
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %394 = lshr i64 %379, 63
  %395 = trunc i64 %394 to i8
  store i8 %395, i8* %393, align 1, !tbaa !2451
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %396, align 1, !tbaa !2451
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  store i64 %397, i64* %RDX, align 8, !tbaa !2428
  %400 = load i64, i64* %RDX
  %401 = load i64, i64* %RCX
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 3
  store i64 %403, i64* %PC
  %404 = add i64 %401, %400
  store i64 %404, i64* %RDX, align 8, !tbaa !2428
  %405 = icmp ult i64 %404, %400
  %406 = icmp ult i64 %404, %401
  %407 = or i1 %405, %406
  %408 = zext i1 %407 to i8
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %408, i8* %409, align 1, !tbaa !2432
  %410 = trunc i64 %404 to i32
  %411 = and i32 %410, 255
  %412 = call i32 @llvm.ctpop.i32(i32 %411) #16
  %413 = trunc i32 %412 to i8
  %414 = and i8 %413, 1
  %415 = xor i8 %414, 1
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %415, i8* %416, align 1, !tbaa !2446
  %417 = xor i64 %401, %400
  %418 = xor i64 %417, %404
  %419 = lshr i64 %418, 4
  %420 = trunc i64 %419 to i8
  %421 = and i8 %420, 1
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %421, i8* %422, align 1, !tbaa !2447
  %423 = icmp eq i64 %404, 0
  %424 = zext i1 %423 to i8
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %424, i8* %425, align 1, !tbaa !2448
  %426 = lshr i64 %404, 63
  %427 = trunc i64 %426 to i8
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %427, i8* %428, align 1, !tbaa !2449
  %429 = lshr i64 %400, 63
  %430 = lshr i64 %401, 63
  %431 = xor i64 %426, %429
  %432 = xor i64 %426, %430
  %433 = add nuw nsw i64 %431, %432
  %434 = icmp eq i64 %433, 2
  %435 = zext i1 %434 to i8
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %435, i8* %436, align 1, !tbaa !2450
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 4
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 4
  store i64 %440, i64* %PC
  %441 = inttoptr i64 %438 to i32*
  %442 = load i32, i32* %441
  %443 = sext i32 %442 to i64
  store i64 %443, i64* %RCX, align 8, !tbaa !2428
  %444 = load i64, i64* %RDX
  %445 = load i64, i64* %RCX
  %446 = mul i64 %445, 4
  %447 = add i64 %446, %444
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i32*
  %451 = load i32, i32* %450
  %452 = sext i32 %451 to i64
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %453 = load i64, i64* %RCX
  %454 = mul i64 %453, 4
  %455 = add i64 %454, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 7
  store i64 %457, i64* %PC
  %458 = inttoptr i64 %455 to i32*
  %459 = load i32, i32* %458
  %460 = zext i32 %459 to i64
  store i64 %460, i64* %RSI, align 8, !tbaa !2428
  %461 = load i64, i64* %RBP
  %462 = sub i64 %461, 12
  %463 = load i64, i64* %PC
  %464 = add i64 %463, 4
  store i64 %464, i64* %PC
  %465 = inttoptr i64 %462 to i32*
  %466 = load i32, i32* %465
  %467 = sext i32 %466 to i64
  store i64 %467, i64* %RCX, align 8, !tbaa !2428
  %468 = load i64, i64* %RCX
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 4
  store i64 %470, i64* %PC
  %471 = shl i64 %468, 5
  %472 = icmp slt i64 %471, 0
  %473 = shl i64 %471, 1
  store i64 %473, i64* %RCX, align 8, !tbaa !2428
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %475 = zext i1 %472 to i8
  store i8 %475, i8* %474, align 1, !tbaa !2451
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %477 = trunc i64 %473 to i32
  %478 = and i32 %477, 254
  %479 = call i32 @llvm.ctpop.i32(i32 %478) #16
  %480 = trunc i32 %479 to i8
  %481 = and i8 %480, 1
  %482 = xor i8 %481, 1
  store i8 %482, i8* %476, align 1, !tbaa !2451
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %483, align 1, !tbaa !2451
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %485 = icmp eq i64 %473, 0
  %486 = zext i1 %485 to i8
  store i8 %486, i8* %484, align 1, !tbaa !2451
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %488 = lshr i64 %473, 63
  %489 = trunc i64 %488 to i8
  store i8 %489, i8* %487, align 1, !tbaa !2451
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %490, align 1, !tbaa !2451
  %491 = load i64, i64* %RAX
  %492 = load i64, i64* %RCX
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 3
  store i64 %494, i64* %PC
  %495 = add i64 %492, %491
  store i64 %495, i64* %RAX, align 8, !tbaa !2428
  %496 = icmp ult i64 %495, %491
  %497 = icmp ult i64 %495, %492
  %498 = or i1 %496, %497
  %499 = zext i1 %498 to i8
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %499, i8* %500, align 1, !tbaa !2432
  %501 = trunc i64 %495 to i32
  %502 = and i32 %501, 255
  %503 = call i32 @llvm.ctpop.i32(i32 %502) #16
  %504 = trunc i32 %503 to i8
  %505 = and i8 %504, 1
  %506 = xor i8 %505, 1
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %506, i8* %507, align 1, !tbaa !2446
  %508 = xor i64 %492, %491
  %509 = xor i64 %508, %495
  %510 = lshr i64 %509, 4
  %511 = trunc i64 %510 to i8
  %512 = and i8 %511, 1
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %512, i8* %513, align 1, !tbaa !2447
  %514 = icmp eq i64 %495, 0
  %515 = zext i1 %514 to i8
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %515, i8* %516, align 1, !tbaa !2448
  %517 = lshr i64 %495, 63
  %518 = trunc i64 %517 to i8
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %518, i8* %519, align 1, !tbaa !2449
  %520 = lshr i64 %491, 63
  %521 = lshr i64 %492, 63
  %522 = xor i64 %517, %520
  %523 = xor i64 %517, %521
  %524 = add nuw nsw i64 %522, %523
  %525 = icmp eq i64 %524, 2
  %526 = zext i1 %525 to i8
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %526, i8* %527, align 1, !tbaa !2450
  %528 = load i64, i64* %RBP
  %529 = sub i64 %528, 4
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 4
  store i64 %531, i64* %PC
  %532 = inttoptr i64 %529 to i32*
  %533 = load i32, i32* %532
  %534 = sext i32 %533 to i64
  store i64 %534, i64* %RCX, align 8, !tbaa !2428
  %535 = load i64, i64* %RAX
  %536 = load i64, i64* %RCX
  %537 = mul i64 %536, 4
  %538 = add i64 %537, %535
  %539 = load i32, i32* %ESI
  %540 = zext i32 %539 to i64
  %541 = load i64, i64* %PC
  %542 = add i64 %541, 3
  store i64 %542, i64* %PC
  %543 = inttoptr i64 %538 to i32*
  store i32 %539, i32* %543
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 4
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 3
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i32*
  %549 = load i32, i32* %548
  %550 = zext i32 %549 to i64
  store i64 %550, i64* %RAX, align 8, !tbaa !2428
  %551 = load i64, i64* %RAX
  %552 = load i64, i64* %PC
  %553 = add i64 %552, 3
  store i64 %553, i64* %PC
  %554 = trunc i64 %551 to i32
  %555 = add i32 1, %554
  %556 = zext i32 %555 to i64
  store i64 %556, i64* %RAX, align 8, !tbaa !2428
  %557 = icmp ult i32 %555, %554
  %558 = icmp ult i32 %555, 1
  %559 = or i1 %557, %558
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = and i32 %555, 255
  %563 = call i32 @llvm.ctpop.i32(i32 %562) #16
  %564 = trunc i32 %563 to i8
  %565 = and i8 %564, 1
  %566 = xor i8 %565, 1
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %566, i8* %567, align 1, !tbaa !2446
  %568 = xor i64 1, %551
  %569 = trunc i64 %568 to i32
  %570 = xor i32 %569, %555
  %571 = lshr i32 %570, 4
  %572 = trunc i32 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i32 %555, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i32 %555, 31
  %579 = trunc i32 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i32 %554, 31
  %582 = xor i32 %578, %581
  %583 = add nuw nsw i32 %582, %578
  %584 = icmp eq i32 %583, 2
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 4
  %589 = load i32, i32* %EAX
  %590 = zext i32 %589 to i64
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 3
  store i64 %592, i64* %PC
  %593 = inttoptr i64 %588 to i32*
  store i32 %589, i32* %593
  %594 = load i64, i64* %PC
  %595 = sub i64 %594, 133
  %596 = load i64, i64* %PC
  %597 = add i64 %596, 5
  store i64 %597, i64* %PC
  %598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %595, i64* %598, align 8, !tbaa !2428
  br label %block_400ddb

block_4009eb:                                     ; preds = %block_400993, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit8
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.10, %block_400993 ], [ %816, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit8 ]
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 5
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 5
  store i64 %602, i64* %PC
  %603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %600, i64* %603, align 8, !tbaa !2428
  %604 = load i64, i64* %RBP
  %605 = sub i64 %604, 8
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 3
  store i64 %607, i64* %PC
  %608 = inttoptr i64 %605 to i32*
  %609 = load i32, i32* %608
  %610 = zext i32 %609 to i64
  store i64 %610, i64* %RAX, align 8, !tbaa !2428
  %611 = load i64, i64* %RAX
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 3
  store i64 %613, i64* %PC
  %614 = trunc i64 %611 to i32
  %615 = add i32 1, %614
  %616 = zext i32 %615 to i64
  store i64 %616, i64* %RAX, align 8, !tbaa !2428
  %617 = icmp ult i32 %615, %614
  %618 = icmp ult i32 %615, 1
  %619 = or i1 %617, %618
  %620 = zext i1 %619 to i8
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %620, i8* %621, align 1, !tbaa !2432
  %622 = and i32 %615, 255
  %623 = call i32 @llvm.ctpop.i32(i32 %622) #16
  %624 = trunc i32 %623 to i8
  %625 = and i8 %624, 1
  %626 = xor i8 %625, 1
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %626, i8* %627, align 1, !tbaa !2446
  %628 = xor i64 1, %611
  %629 = trunc i64 %628 to i32
  %630 = xor i32 %629, %615
  %631 = lshr i32 %630, 4
  %632 = trunc i32 %631 to i8
  %633 = and i8 %632, 1
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %633, i8* %634, align 1, !tbaa !2447
  %635 = icmp eq i32 %615, 0
  %636 = zext i1 %635 to i8
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %636, i8* %637, align 1, !tbaa !2448
  %638 = lshr i32 %615, 31
  %639 = trunc i32 %638 to i8
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %639, i8* %640, align 1, !tbaa !2449
  %641 = lshr i32 %614, 31
  %642 = xor i32 %638, %641
  %643 = add nuw nsw i32 %642, %638
  %644 = icmp eq i32 %643, 2
  %645 = zext i1 %644 to i8
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %645, i8* %646, align 1, !tbaa !2450
  %647 = load i64, i64* %RBP
  %648 = sub i64 %647, 8
  %649 = load i32, i32* %EAX
  %650 = zext i32 %649 to i64
  %651 = load i64, i64* %PC
  %652 = add i64 %651, 3
  store i64 %652, i64* %PC
  %653 = inttoptr i64 %648 to i32*
  store i32 %649, i32* %653
  %654 = load i64, i64* %PC
  %655 = sub i64 %654, 115
  %656 = load i64, i64* %PC
  %657 = add i64 %656, 5
  store i64 %657, i64* %PC
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %655, i64* %658, align 8, !tbaa !2428
  br label %block_400986

block_4009a5:                                     ; preds = %block_400993
  %659 = load i64, i64* %PC
  %660 = add i64 %659, 5
  store i64 %660, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %661 = load i64, i64* %RBP
  %662 = sub i64 %661, 8
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 4
  store i64 %664, i64* %PC
  %665 = inttoptr i64 %662 to i32*
  %666 = load i32, i32* %665
  %667 = sext i32 %666 to i64
  store i64 %667, i64* %RCX, align 8, !tbaa !2428
  %668 = load i64, i64* %RCX
  %669 = mul i64 %668, 4
  %670 = add i64 %669, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 7
  store i64 %672, i64* %PC
  %673 = inttoptr i64 %670 to i32*
  %674 = load i32, i32* %673
  %675 = zext i32 %674 to i64
  store i64 %675, i64* %RDX, align 8, !tbaa !2428
  %676 = load i64, i64* %RBP
  %677 = sub i64 %676, 4
  %678 = load i64, i64* %PC
  %679 = add i64 %678, 3
  store i64 %679, i64* %PC
  %680 = inttoptr i64 %677 to i32*
  %681 = load i32, i32* %680
  %682 = zext i32 %681 to i64
  store i64 %682, i64* %RSI, align 8, !tbaa !2428
  %683 = load i64, i64* %RSI
  %684 = load i64, i64* %RBP
  %685 = sub i64 %684, 8
  %686 = load i64, i64* %PC
  %687 = add i64 %686, 4
  store i64 %687, i64* %PC
  %688 = inttoptr i64 %685 to i32*
  %689 = load i32, i32* %688
  %690 = shl i64 %683, 32
  %691 = ashr exact i64 %690, 32
  %692 = sext i32 %689 to i64
  %693 = mul nsw i64 %692, %691
  %694 = trunc i64 %693 to i32
  %695 = and i64 %693, 4294967295
  store i64 %695, i64* %RSI, align 8, !tbaa !2428
  %696 = shl i64 %693, 32
  %697 = ashr exact i64 %696, 32
  %698 = icmp ne i64 %697, %693
  %699 = zext i1 %698 to i8
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %699, i8* %700, align 1, !tbaa !2432
  %701 = and i32 %694, 255
  %702 = call i32 @llvm.ctpop.i32(i32 %701) #16
  %703 = trunc i32 %702 to i8
  %704 = and i8 %703, 1
  %705 = xor i8 %704, 1
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %705, i8* %706, align 1, !tbaa !2446
  %707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %707, align 1, !tbaa !2447
  %708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %708, align 1, !tbaa !2448
  %709 = lshr i32 %694, 31
  %710 = trunc i32 %709 to i8
  %711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %710, i8* %711, align 1, !tbaa !2449
  %712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %699, i8* %712, align 1, !tbaa !2450
  %713 = load i64, i64* %RDX
  %714 = load i32, i32* %ESI
  %715 = zext i32 %714 to i64
  %716 = load i64, i64* %PC
  %717 = add i64 %716, 2
  store i64 %717, i64* %PC
  %718 = trunc i64 %713 to i32
  %719 = add i32 %714, %718
  %720 = zext i32 %719 to i64
  store i64 %720, i64* %RDX, align 8, !tbaa !2428
  %721 = icmp ult i32 %719, %718
  %722 = icmp ult i32 %719, %714
  %723 = or i1 %721, %722
  %724 = zext i1 %723 to i8
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %724, i8* %725, align 1, !tbaa !2432
  %726 = and i32 %719, 255
  %727 = call i32 @llvm.ctpop.i32(i32 %726) #16
  %728 = trunc i32 %727 to i8
  %729 = and i8 %728, 1
  %730 = xor i8 %729, 1
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %730, i8* %731, align 1, !tbaa !2446
  %732 = xor i64 %715, %713
  %733 = trunc i64 %732 to i32
  %734 = xor i32 %733, %719
  %735 = lshr i32 %734, 4
  %736 = trunc i32 %735 to i8
  %737 = and i8 %736, 1
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %737, i8* %738, align 1, !tbaa !2447
  %739 = icmp eq i32 %719, 0
  %740 = zext i1 %739 to i8
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %740, i8* %741, align 1, !tbaa !2448
  %742 = lshr i32 %719, 31
  %743 = trunc i32 %742 to i8
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %743, i8* %744, align 1, !tbaa !2449
  %745 = lshr i32 %718, 31
  %746 = lshr i32 %714, 31
  %747 = xor i32 %742, %745
  %748 = xor i32 %742, %746
  %749 = add nuw nsw i32 %747, %748
  %750 = icmp eq i32 %749, 2
  %751 = zext i1 %750 to i8
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %751, i8* %752, align 1, !tbaa !2450
  %753 = load i64, i64* %RBP
  %754 = sub i64 %753, 2692
  %755 = load i32, i32* %EAX
  %756 = zext i32 %755 to i64
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 6
  store i64 %758, i64* %PC
  %759 = inttoptr i64 %754 to i32*
  store i32 %755, i32* %759
  %760 = load i32, i32* %EDX
  %761 = zext i32 %760 to i64
  %762 = load i64, i64* %PC
  %763 = add i64 %762, 2
  store i64 %763, i64* %PC
  %764 = and i64 %761, 4294967295
  store i64 %764, i64* %RAX, align 8, !tbaa !2428
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 1
  store i64 %766, i64* %PC
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %769 = bitcast %union.anon* %768 to i32*
  %770 = load i32, i32* %769, align 8, !tbaa !2452
  %771 = sext i32 %770 to i64
  %772 = lshr i64 %771, 32
  store i64 %772, i64* %767, align 8, !tbaa !2428
  %773 = load i64, i64* %RBP
  %774 = sub i64 %773, 2692
  %775 = load i64, i64* %PC
  %776 = add i64 %775, 6
  store i64 %776, i64* %PC
  %777 = inttoptr i64 %774 to i32*
  %778 = load i32, i32* %777
  %779 = zext i32 %778 to i64
  store i64 %779, i64* %RSI, align 8, !tbaa !2428
  %780 = load i32, i32* %ESI
  %781 = zext i32 %780 to i64
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 2
  store i64 %783, i64* %PC
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %785 = bitcast %union.anon* %784 to i32*
  %786 = load i32, i32* %785, align 8, !tbaa !2452
  %787 = zext i32 %786 to i64
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %789 = bitcast %union.anon* %788 to i32*
  %790 = load i32, i32* %789, align 8, !tbaa !2452
  %791 = zext i32 %790 to i64
  %792 = shl i64 %781, 32
  %793 = ashr exact i64 %792, 32
  %794 = shl nuw i64 %791, 32
  %795 = or i64 %794, %787
  %796 = sdiv i64 %795, %793
  %797 = shl i64 %796, 32
  %798 = ashr exact i64 %797, 32
  %799 = icmp eq i64 %796, %798
  br i1 %799, label %804, label %800

; <label>:800:                                    ; preds = %block_4009a5
  %801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %802 = load i64, i64* %801, align 8, !tbaa !2428
  %803 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %802, %struct.Memory* %MEMORY.10) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit8

; <label>:804:                                    ; preds = %block_4009a5
  %805 = srem i64 %795, %793
  %806 = getelementptr inbounds %union.anon, %union.anon* %784, i64 0, i32 0
  %807 = and i64 %796, 4294967295
  store i64 %807, i64* %806, align 8, !tbaa !2428
  %808 = getelementptr inbounds %union.anon, %union.anon* %788, i64 0, i32 0
  %809 = and i64 %805, 4294967295
  store i64 %809, i64* %808, align 8, !tbaa !2428
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %810, align 1, !tbaa !2432
  %811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %811, align 1, !tbaa !2446
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %812, align 1, !tbaa !2447
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %813, align 1, !tbaa !2448
  %814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %814, align 1, !tbaa !2449
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %815, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit8

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit8: ; preds = %800, %804
  %816 = phi %struct.Memory* [ %803, %800 ], [ %MEMORY.10, %804 ]
  %817 = load i32, i32* %EDX
  %818 = zext i32 %817 to i64
  %819 = load i64, i64* %PC
  %820 = add i64 %819, 3
  store i64 %820, i64* %PC
  %821 = shl i64 %818, 32
  %822 = ashr exact i64 %821, 32
  store i64 %822, i64* %RCX, align 8, !tbaa !2428
  %823 = load i64, i64* %RCX
  %824 = mul i64 %823, 4
  %825 = add i64 %824, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %826 = load i64, i64* %PC
  %827 = add i64 %826, 7
  store i64 %827, i64* %PC
  %828 = inttoptr i64 %825 to i32*
  %829 = load i32, i32* %828
  %830 = zext i32 %829 to i64
  store i64 %830, i64* %RDX, align 8, !tbaa !2428
  %831 = load i64, i64* %RBP
  %832 = sub i64 %831, 4
  %833 = load i64, i64* %PC
  %834 = add i64 %833, 4
  store i64 %834, i64* %PC
  %835 = inttoptr i64 %832 to i32*
  %836 = load i32, i32* %835
  %837 = sext i32 %836 to i64
  store i64 %837, i64* %RCX, align 8, !tbaa !2428
  %838 = load i64, i64* %RDX
  %839 = load i64, i64* %RBP
  %840 = load i64, i64* %RCX
  %841 = mul i64 %840, 4
  %842 = add i64 %839, -1488
  %843 = add i64 %842, %841
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 7
  store i64 %845, i64* %PC
  %846 = trunc i64 %838 to i32
  %847 = inttoptr i64 %843 to i32*
  %848 = load i32, i32* %847
  %849 = xor i32 %848, %846
  %850 = zext i32 %849 to i64
  store i64 %850, i64* %RDX, align 8, !tbaa !2428
  %851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %851, align 1, !tbaa !2432
  %852 = and i32 %849, 255
  %853 = call i32 @llvm.ctpop.i32(i32 %852) #16
  %854 = trunc i32 %853 to i8
  %855 = and i8 %854, 1
  %856 = xor i8 %855, 1
  %857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %856, i8* %857, align 1, !tbaa !2446
  %858 = icmp eq i32 %849, 0
  %859 = zext i1 %858 to i8
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %859, i8* %860, align 1, !tbaa !2448
  %861 = lshr i32 %849, 31
  %862 = trunc i32 %861 to i8
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %862, i8* %863, align 1, !tbaa !2449
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %864, align 1, !tbaa !2450
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %865, align 1, !tbaa !2447
  %866 = load i64, i64* %RBP
  %867 = load i64, i64* %RCX
  %868 = mul i64 %867, 4
  %869 = add i64 %866, -1488
  %870 = add i64 %869, %868
  %871 = load i32, i32* %EDX
  %872 = zext i32 %871 to i64
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 7
  store i64 %874, i64* %PC
  %875 = inttoptr i64 %870 to i32*
  store i32 %871, i32* %875
  br label %block_4009eb

block_400bd7:                                     ; preds = %block_400bbb
  %876 = load i64, i64* %RBP
  %877 = sub i64 %876, 16
  %878 = load i64, i64* %PC
  %879 = add i64 %878, 4
  store i64 %879, i64* %PC
  %880 = inttoptr i64 %877 to i32*
  %881 = load i32, i32* %880
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %882, align 1, !tbaa !2432
  %883 = and i32 %881, 255
  %884 = call i32 @llvm.ctpop.i32(i32 %883) #16
  %885 = trunc i32 %884 to i8
  %886 = and i8 %885, 1
  %887 = xor i8 %886, 1
  %888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %887, i8* %888, align 1, !tbaa !2446
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %889, align 1, !tbaa !2447
  %890 = icmp eq i32 %881, 0
  %891 = zext i1 %890 to i8
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %891, i8* %892, align 1, !tbaa !2448
  %893 = lshr i32 %881, 31
  %894 = trunc i32 %893 to i8
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %894, i8* %895, align 1, !tbaa !2449
  %896 = lshr i32 %881, 31
  %897 = xor i32 %893, %896
  %898 = add nuw nsw i32 %897, %896
  %899 = icmp eq i32 %898, 2
  %900 = zext i1 %899 to i8
  %901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %900, i8* %901, align 1, !tbaa !2450
  %902 = load i64, i64* %PC
  %903 = add i64 %902, 3
  store i64 %903, i64* %PC
  %904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %905 = load i8, i8* %904, align 1, !tbaa !2448
  %906 = icmp eq i8 %905, 0
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %908 = load i8, i8* %907, align 1, !tbaa !2449
  %909 = icmp ne i8 %908, 0
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %911 = load i8, i8* %910, align 1, !tbaa !2450
  %912 = icmp ne i8 %911, 0
  %913 = xor i1 %909, %912
  %914 = xor i1 %913, true
  %915 = and i1 %906, %914
  %916 = zext i1 %915 to i8
  store i8 %916, i8* %AL, align 1, !tbaa !2451
  %917 = load i64, i64* %RBP
  %918 = sub i64 %917, 2693
  %919 = load i8, i8* %AL
  %920 = zext i8 %919 to i64
  %921 = load i64, i64* %PC
  %922 = add i64 %921, 6
  store i64 %922, i64* %PC
  %923 = inttoptr i64 %918 to i8*
  store i8 %919, i8* %923
  br label %block_400be4

block_400dd4:                                     ; preds = %block_400d13
  %924 = sub i64 %5812, 4
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 7
  store i64 %926, i64* %PC
  %927 = inttoptr i64 %924 to i32*
  store i32 0, i32* %927
  br label %block_400ddb

block_4017d1:                                     ; preds = %block_40179c
  %928 = add i64 %1554, 11
  store i64 %928, i64* %PC
  %929 = inttoptr i64 %1553 to i32*
  store i32 0, i32* %929
  br label %block_4017e0

block_400c61:                                     ; preds = %block_400c52
  %930 = load i64, i64* %PC
  %931 = add i64 %930, 5
  %932 = load i64, i64* %PC
  %933 = add i64 %932, 5
  store i64 %933, i64* %PC
  %934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %931, i64* %934, align 8, !tbaa !2428
  br label %block_400c66

block_400bf2:                                     ; preds = %block_400be4
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 19
  %937 = load i64, i64* %PC
  %938 = add i64 %937, 5
  store i64 %938, i64* %PC
  %939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %936, i64* %939, align 8, !tbaa !2428
  %940 = load i64, i64* %RBP
  %941 = sub i64 %940, 16
  %942 = load i64, i64* %PC
  %943 = add i64 %942, 4
  store i64 %943, i64* %PC
  %944 = inttoptr i64 %941 to i32*
  %945 = load i32, i32* %944
  %946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %946, align 1, !tbaa !2432
  %947 = and i32 %945, 255
  %948 = call i32 @llvm.ctpop.i32(i32 %947) #16
  %949 = trunc i32 %948 to i8
  %950 = and i8 %949, 1
  %951 = xor i8 %950, 1
  %952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %951, i8* %952, align 1, !tbaa !2446
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %953, align 1, !tbaa !2447
  %954 = icmp eq i32 %945, 0
  %955 = zext i1 %954 to i8
  %956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %955, i8* %956, align 1, !tbaa !2448
  %957 = lshr i32 %945, 31
  %958 = trunc i32 %957 to i8
  %959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %958, i8* %959, align 1, !tbaa !2449
  %960 = lshr i32 %945, 31
  %961 = xor i32 %957, %960
  %962 = add nuw nsw i32 %961, %960
  %963 = icmp eq i32 %962, 2
  %964 = zext i1 %963 to i8
  %965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %964, i8* %965, align 1, !tbaa !2450
  %966 = load i64, i64* %PC
  %967 = add i64 %966, 93
  %968 = load i64, i64* %PC
  %969 = add i64 %968, 6
  %970 = load i64, i64* %PC
  %971 = add i64 %970, 6
  store i64 %971, i64* %PC
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %973 = load i8, i8* %972, align 1, !tbaa !2448
  %974 = icmp ne i8 %973, 0
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %976 = load i8, i8* %975, align 1, !tbaa !2449
  %977 = icmp ne i8 %976, 0
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %979 = load i8, i8* %978, align 1, !tbaa !2450
  %980 = icmp ne i8 %979, 0
  %981 = xor i1 %977, %980
  %982 = or i1 %974, %981
  %983 = zext i1 %982 to i8
  store i8 %983, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %985 = select i1 %982, i64 %967, i64 %969
  store i64 %985, i64* %984, align 8, !tbaa !2428
  %986 = load i8, i8* %BRANCH_TAKEN
  %987 = icmp eq i8 %986, 1
  br i1 %987, label %block_400c66, label %block_400c0f

block_4013c6:                                     ; preds = %block_4013a1
  %988 = load i64, i64* %PC
  %989 = add i64 %988, 5
  store i64 %989, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %990 = load i64, i64* %RBP
  %991 = sub i64 %990, 1168
  %992 = load i64, i64* %PC
  %993 = add i64 %992, 7
  store i64 %993, i64* %PC
  store i64 %991, i64* %RCX, align 8, !tbaa !2428
  %994 = load i64, i64* %RBP
  %995 = sub i64 %994, 12
  %996 = load i64, i64* %PC
  %997 = add i64 %996, 4
  store i64 %997, i64* %PC
  %998 = inttoptr i64 %995 to i32*
  %999 = load i32, i32* %998
  %1000 = sext i32 %999 to i64
  store i64 %1000, i64* %RDX, align 8, !tbaa !2428
  %1001 = load i64, i64* %RDX
  %1002 = load i64, i64* %PC
  %1003 = add i64 %1002, 4
  store i64 %1003, i64* %PC
  %1004 = shl i64 %1001, 5
  %1005 = icmp slt i64 %1004, 0
  %1006 = shl i64 %1004, 1
  store i64 %1006, i64* %RDX, align 8, !tbaa !2428
  %1007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1008 = zext i1 %1005 to i8
  store i8 %1008, i8* %1007, align 1, !tbaa !2451
  %1009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1010 = trunc i64 %1006 to i32
  %1011 = and i32 %1010, 254
  %1012 = call i32 @llvm.ctpop.i32(i32 %1011) #16
  %1013 = trunc i32 %1012 to i8
  %1014 = and i8 %1013, 1
  %1015 = xor i8 %1014, 1
  store i8 %1015, i8* %1009, align 1, !tbaa !2451
  %1016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1016, align 1, !tbaa !2451
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1018 = icmp eq i64 %1006, 0
  %1019 = zext i1 %1018 to i8
  store i8 %1019, i8* %1017, align 1, !tbaa !2451
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1021 = lshr i64 %1006, 63
  %1022 = trunc i64 %1021 to i8
  store i8 %1022, i8* %1020, align 1, !tbaa !2451
  %1023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1023, align 1, !tbaa !2451
  %1024 = load i64, i64* %RCX
  %1025 = load i64, i64* %RDX
  %1026 = load i64, i64* %PC
  %1027 = add i64 %1026, 3
  store i64 %1027, i64* %PC
  %1028 = add i64 %1025, %1024
  store i64 %1028, i64* %RCX, align 8, !tbaa !2428
  %1029 = icmp ult i64 %1028, %1024
  %1030 = icmp ult i64 %1028, %1025
  %1031 = or i1 %1029, %1030
  %1032 = zext i1 %1031 to i8
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1032, i8* %1033, align 1, !tbaa !2432
  %1034 = trunc i64 %1028 to i32
  %1035 = and i32 %1034, 255
  %1036 = call i32 @llvm.ctpop.i32(i32 %1035) #16
  %1037 = trunc i32 %1036 to i8
  %1038 = and i8 %1037, 1
  %1039 = xor i8 %1038, 1
  %1040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1039, i8* %1040, align 1, !tbaa !2446
  %1041 = xor i64 %1025, %1024
  %1042 = xor i64 %1041, %1028
  %1043 = lshr i64 %1042, 4
  %1044 = trunc i64 %1043 to i8
  %1045 = and i8 %1044, 1
  %1046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1045, i8* %1046, align 1, !tbaa !2447
  %1047 = icmp eq i64 %1028, 0
  %1048 = zext i1 %1047 to i8
  %1049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1048, i8* %1049, align 1, !tbaa !2448
  %1050 = lshr i64 %1028, 63
  %1051 = trunc i64 %1050 to i8
  %1052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1051, i8* %1052, align 1, !tbaa !2449
  %1053 = lshr i64 %1024, 63
  %1054 = lshr i64 %1025, 63
  %1055 = xor i64 %1050, %1053
  %1056 = xor i64 %1050, %1054
  %1057 = add nuw nsw i64 %1055, %1056
  %1058 = icmp eq i64 %1057, 2
  %1059 = zext i1 %1058 to i8
  %1060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1059, i8* %1060, align 1, !tbaa !2450
  %1061 = load i64, i64* %RBP
  %1062 = sub i64 %1061, 4
  %1063 = load i64, i64* %PC
  %1064 = add i64 %1063, 3
  store i64 %1064, i64* %PC
  %1065 = inttoptr i64 %1062 to i32*
  %1066 = load i32, i32* %1065
  %1067 = zext i32 %1066 to i64
  store i64 %1067, i64* %RSI, align 8, !tbaa !2428
  %1068 = load i64, i64* %RSI
  %1069 = load i64, i64* %RBP
  %1070 = sub i64 %1069, 8
  %1071 = load i64, i64* %PC
  %1072 = add i64 %1071, 3
  store i64 %1072, i64* %PC
  %1073 = trunc i64 %1068 to i32
  %1074 = inttoptr i64 %1070 to i32*
  %1075 = load i32, i32* %1074
  %1076 = sub i32 %1073, %1075
  %1077 = zext i32 %1076 to i64
  store i64 %1077, i64* %RSI, align 8, !tbaa !2428
  %1078 = icmp ult i32 %1073, %1075
  %1079 = zext i1 %1078 to i8
  %1080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1079, i8* %1080, align 1, !tbaa !2432
  %1081 = and i32 %1076, 255
  %1082 = call i32 @llvm.ctpop.i32(i32 %1081) #16
  %1083 = trunc i32 %1082 to i8
  %1084 = and i8 %1083, 1
  %1085 = xor i8 %1084, 1
  %1086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1085, i8* %1086, align 1, !tbaa !2446
  %1087 = xor i32 %1075, %1073
  %1088 = xor i32 %1087, %1076
  %1089 = lshr i32 %1088, 4
  %1090 = trunc i32 %1089 to i8
  %1091 = and i8 %1090, 1
  %1092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1091, i8* %1092, align 1, !tbaa !2447
  %1093 = icmp eq i32 %1076, 0
  %1094 = zext i1 %1093 to i8
  %1095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1094, i8* %1095, align 1, !tbaa !2448
  %1096 = lshr i32 %1076, 31
  %1097 = trunc i32 %1096 to i8
  %1098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1097, i8* %1098, align 1, !tbaa !2449
  %1099 = lshr i32 %1073, 31
  %1100 = lshr i32 %1075, 31
  %1101 = xor i32 %1100, %1099
  %1102 = xor i32 %1096, %1099
  %1103 = add nuw nsw i32 %1102, %1101
  %1104 = icmp eq i32 %1103, 2
  %1105 = zext i1 %1104 to i8
  %1106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1105, i8* %1106, align 1, !tbaa !2450
  %1107 = load i32, i32* %ESI
  %1108 = zext i32 %1107 to i64
  %1109 = load i64, i64* %PC
  %1110 = add i64 %1109, 3
  store i64 %1110, i64* %PC
  %1111 = shl i64 %1108, 32
  %1112 = ashr exact i64 %1111, 32
  store i64 %1112, i64* %RDX, align 8, !tbaa !2428
  %1113 = load i64, i64* %RCX
  %1114 = load i64, i64* %RDX
  %1115 = mul i64 %1114, 4
  %1116 = add i64 %1115, %1113
  %1117 = load i64, i64* %PC
  %1118 = add i64 %1117, 3
  store i64 %1118, i64* %PC
  %1119 = inttoptr i64 %1116 to i32*
  %1120 = load i32, i32* %1119
  %1121 = zext i32 %1120 to i64
  store i64 %1121, i64* %RSI, align 8, !tbaa !2428
  %1122 = load i64, i64* %RBP
  %1123 = sub i64 %1122, 8
  %1124 = load i64, i64* %PC
  %1125 = add i64 %1124, 4
  store i64 %1125, i64* %PC
  %1126 = inttoptr i64 %1123 to i32*
  %1127 = load i32, i32* %1126
  %1128 = sext i32 %1127 to i64
  store i64 %1128, i64* %RCX, align 8, !tbaa !2428
  %1129 = load i64, i64* %RSI
  %1130 = load i64, i64* %RBP
  %1131 = load i64, i64* %RCX
  %1132 = mul i64 %1131, 4
  %1133 = add i64 %1130, -1488
  %1134 = add i64 %1133, %1132
  %1135 = load i64, i64* %PC
  %1136 = add i64 %1135, 7
  store i64 %1136, i64* %PC
  %1137 = trunc i64 %1129 to i32
  %1138 = inttoptr i64 %1134 to i32*
  %1139 = load i32, i32* %1138
  %1140 = add i32 %1139, %1137
  %1141 = zext i32 %1140 to i64
  store i64 %1141, i64* %RSI, align 8, !tbaa !2428
  %1142 = icmp ult i32 %1140, %1137
  %1143 = icmp ult i32 %1140, %1139
  %1144 = or i1 %1142, %1143
  %1145 = zext i1 %1144 to i8
  %1146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1145, i8* %1146, align 1, !tbaa !2432
  %1147 = and i32 %1140, 255
  %1148 = call i32 @llvm.ctpop.i32(i32 %1147) #16
  %1149 = trunc i32 %1148 to i8
  %1150 = and i8 %1149, 1
  %1151 = xor i8 %1150, 1
  %1152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1151, i8* %1152, align 1, !tbaa !2446
  %1153 = xor i32 %1139, %1137
  %1154 = xor i32 %1153, %1140
  %1155 = lshr i32 %1154, 4
  %1156 = trunc i32 %1155 to i8
  %1157 = and i8 %1156, 1
  %1158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1157, i8* %1158, align 1, !tbaa !2447
  %1159 = icmp eq i32 %1140, 0
  %1160 = zext i1 %1159 to i8
  %1161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1160, i8* %1161, align 1, !tbaa !2448
  %1162 = lshr i32 %1140, 31
  %1163 = trunc i32 %1162 to i8
  %1164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1163, i8* %1164, align 1, !tbaa !2449
  %1165 = lshr i32 %1137, 31
  %1166 = lshr i32 %1139, 31
  %1167 = xor i32 %1162, %1165
  %1168 = xor i32 %1162, %1166
  %1169 = add nuw nsw i32 %1167, %1168
  %1170 = icmp eq i32 %1169, 2
  %1171 = zext i1 %1170 to i8
  %1172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1171, i8* %1172, align 1, !tbaa !2450
  %1173 = load i64, i64* %RBP
  %1174 = sub i64 %1173, 2720
  %1175 = load i32, i32* %EAX
  %1176 = zext i32 %1175 to i64
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 6
  store i64 %1178, i64* %PC
  %1179 = inttoptr i64 %1174 to i32*
  store i32 %1175, i32* %1179
  %1180 = load i32, i32* %ESI
  %1181 = zext i32 %1180 to i64
  %1182 = load i64, i64* %PC
  %1183 = add i64 %1182, 2
  store i64 %1183, i64* %PC
  %1184 = and i64 %1181, 4294967295
  store i64 %1184, i64* %RAX, align 8, !tbaa !2428
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 1
  store i64 %1186, i64* %PC
  %1187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1189 = bitcast %union.anon* %1188 to i32*
  %1190 = load i32, i32* %1189, align 8, !tbaa !2452
  %1191 = sext i32 %1190 to i64
  %1192 = lshr i64 %1191, 32
  store i64 %1192, i64* %1187, align 8, !tbaa !2428
  %1193 = load i64, i64* %RBP
  %1194 = sub i64 %1193, 2720
  %1195 = load i64, i64* %PC
  %1196 = add i64 %1195, 6
  store i64 %1196, i64* %PC
  %1197 = inttoptr i64 %1194 to i32*
  %1198 = load i32, i32* %1197
  %1199 = zext i32 %1198 to i64
  store i64 %1199, i64* %RSI, align 8, !tbaa !2428
  %1200 = load i32, i32* %ESI
  %1201 = zext i32 %1200 to i64
  %1202 = load i64, i64* %PC
  %1203 = add i64 %1202, 2
  store i64 %1203, i64* %PC
  %1204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1205 = bitcast %union.anon* %1204 to i32*
  %1206 = load i32, i32* %1205, align 8, !tbaa !2452
  %1207 = zext i32 %1206 to i64
  %1208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %1209 = bitcast %union.anon* %1208 to i32*
  %1210 = load i32, i32* %1209, align 8, !tbaa !2452
  %1211 = zext i32 %1210 to i64
  %1212 = shl i64 %1201, 32
  %1213 = ashr exact i64 %1212, 32
  %1214 = shl nuw i64 %1211, 32
  %1215 = or i64 %1214, %1207
  %1216 = sdiv i64 %1215, %1213
  %1217 = shl i64 %1216, 32
  %1218 = ashr exact i64 %1217, 32
  %1219 = icmp eq i64 %1216, %1218
  br i1 %1219, label %1224, label %1220

; <label>:1220:                                   ; preds = %block_4013c6
  %1221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1222 = load i64, i64* %1221, align 8, !tbaa !2428
  %1223 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1222, %struct.Memory* %MEMORY.42) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7

; <label>:1224:                                   ; preds = %block_4013c6
  %1225 = srem i64 %1215, %1213
  %1226 = getelementptr inbounds %union.anon, %union.anon* %1204, i64 0, i32 0
  %1227 = and i64 %1216, 4294967295
  store i64 %1227, i64* %1226, align 8, !tbaa !2428
  %1228 = getelementptr inbounds %union.anon, %union.anon* %1208, i64 0, i32 0
  %1229 = and i64 %1225, 4294967295
  store i64 %1229, i64* %1228, align 8, !tbaa !2428
  %1230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1230, align 1, !tbaa !2432
  %1231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1231, align 1, !tbaa !2446
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1232, align 1, !tbaa !2447
  %1233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1233, align 1, !tbaa !2448
  %1234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1234, align 1, !tbaa !2449
  %1235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1235, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7: ; preds = %1220, %1224
  %1236 = phi %struct.Memory* [ %1223, %1220 ], [ %MEMORY.42, %1224 ]
  %1237 = load i32, i32* %EDX
  %1238 = zext i32 %1237 to i64
  %1239 = load i64, i64* %PC
  %1240 = add i64 %1239, 3
  store i64 %1240, i64* %PC
  %1241 = shl i64 %1238, 32
  %1242 = ashr exact i64 %1241, 32
  store i64 %1242, i64* %RCX, align 8, !tbaa !2428
  %1243 = load i64, i64* %RCX
  %1244 = mul i64 %1243, 4
  %1245 = add i64 %1244, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %1246 = load i64, i64* %PC
  %1247 = add i64 %1246, 7
  store i64 %1247, i64* %PC
  %1248 = inttoptr i64 %1245 to i32*
  %1249 = load i32, i32* %1248
  %1250 = zext i32 %1249 to i64
  store i64 %1250, i64* %RDX, align 8, !tbaa !2428
  %1251 = load i64, i64* %RBP
  %1252 = sub i64 %1251, 4
  %1253 = load i64, i64* %PC
  %1254 = add i64 %1253, 4
  store i64 %1254, i64* %PC
  %1255 = inttoptr i64 %1252 to i32*
  %1256 = load i32, i32* %1255
  %1257 = sext i32 %1256 to i64
  store i64 %1257, i64* %RCX, align 8, !tbaa !2428
  %1258 = load i64, i64* %RDX
  %1259 = load i64, i64* %RBP
  %1260 = load i64, i64* %RCX
  %1261 = mul i64 %1260, 4
  %1262 = add i64 %1259, -1616
  %1263 = add i64 %1262, %1261
  %1264 = load i64, i64* %PC
  %1265 = add i64 %1264, 7
  store i64 %1265, i64* %PC
  %1266 = trunc i64 %1258 to i32
  %1267 = inttoptr i64 %1263 to i32*
  %1268 = load i32, i32* %1267
  %1269 = xor i32 %1268, %1266
  %1270 = zext i32 %1269 to i64
  store i64 %1270, i64* %RDX, align 8, !tbaa !2428
  %1271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1271, align 1, !tbaa !2432
  %1272 = and i32 %1269, 255
  %1273 = call i32 @llvm.ctpop.i32(i32 %1272) #16
  %1274 = trunc i32 %1273 to i8
  %1275 = and i8 %1274, 1
  %1276 = xor i8 %1275, 1
  %1277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1276, i8* %1277, align 1, !tbaa !2446
  %1278 = icmp eq i32 %1269, 0
  %1279 = zext i1 %1278 to i8
  %1280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1279, i8* %1280, align 1, !tbaa !2448
  %1281 = lshr i32 %1269, 31
  %1282 = trunc i32 %1281 to i8
  %1283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1282, i8* %1283, align 1, !tbaa !2449
  %1284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1284, align 1, !tbaa !2450
  %1285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1285, align 1, !tbaa !2447
  %1286 = load i64, i64* %RBP
  %1287 = load i64, i64* %RCX
  %1288 = mul i64 %1287, 4
  %1289 = add i64 %1286, -1616
  %1290 = add i64 %1289, %1288
  %1291 = load i32, i32* %EDX
  %1292 = zext i32 %1291 to i64
  %1293 = load i64, i64* %PC
  %1294 = add i64 %1293, 7
  store i64 %1294, i64* %PC
  %1295 = inttoptr i64 %1290 to i32*
  store i32 %1291, i32* %1295
  br label %block_401421

block_400fc0:                                     ; preds = %block_400f0f, %block_400f29, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.16, %block_400f0f ], [ %MEMORY.16, %block_400f29 ], [ %2650, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5 ]
  %1296 = load i64, i64* %PC
  %1297 = add i64 %1296, 5
  %1298 = load i64, i64* %PC
  %1299 = add i64 %1298, 5
  store i64 %1299, i64* %PC
  %1300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1297, i64* %1300, align 8, !tbaa !2428
  %1301 = load i64, i64* %RBP
  %1302 = sub i64 %1301, 4
  %1303 = load i64, i64* %PC
  %1304 = add i64 %1303, 3
  store i64 %1304, i64* %PC
  %1305 = inttoptr i64 %1302 to i32*
  %1306 = load i32, i32* %1305
  %1307 = zext i32 %1306 to i64
  store i64 %1307, i64* %RAX, align 8, !tbaa !2428
  %1308 = load i64, i64* %RAX
  %1309 = load i64, i64* %PC
  %1310 = add i64 %1309, 3
  store i64 %1310, i64* %PC
  %1311 = trunc i64 %1308 to i32
  %1312 = add i32 1, %1311
  %1313 = zext i32 %1312 to i64
  store i64 %1313, i64* %RAX, align 8, !tbaa !2428
  %1314 = icmp ult i32 %1312, %1311
  %1315 = icmp ult i32 %1312, 1
  %1316 = or i1 %1314, %1315
  %1317 = zext i1 %1316 to i8
  %1318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1317, i8* %1318, align 1, !tbaa !2432
  %1319 = and i32 %1312, 255
  %1320 = call i32 @llvm.ctpop.i32(i32 %1319) #16
  %1321 = trunc i32 %1320 to i8
  %1322 = and i8 %1321, 1
  %1323 = xor i8 %1322, 1
  %1324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1323, i8* %1324, align 1, !tbaa !2446
  %1325 = xor i64 1, %1308
  %1326 = trunc i64 %1325 to i32
  %1327 = xor i32 %1326, %1312
  %1328 = lshr i32 %1327, 4
  %1329 = trunc i32 %1328 to i8
  %1330 = and i8 %1329, 1
  %1331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1330, i8* %1331, align 1, !tbaa !2447
  %1332 = icmp eq i32 %1312, 0
  %1333 = zext i1 %1332 to i8
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1333, i8* %1334, align 1, !tbaa !2448
  %1335 = lshr i32 %1312, 31
  %1336 = trunc i32 %1335 to i8
  %1337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1336, i8* %1337, align 1, !tbaa !2449
  %1338 = lshr i32 %1311, 31
  %1339 = xor i32 %1335, %1338
  %1340 = add nuw nsw i32 %1339, %1335
  %1341 = icmp eq i32 %1340, 2
  %1342 = zext i1 %1341 to i8
  %1343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1342, i8* %1343, align 1, !tbaa !2450
  %1344 = load i64, i64* %RBP
  %1345 = sub i64 %1344, 4
  %1346 = load i32, i32* %EAX
  %1347 = zext i32 %1346 to i64
  %1348 = load i64, i64* %PC
  %1349 = add i64 %1348, 3
  store i64 %1349, i64* %PC
  %1350 = inttoptr i64 %1345 to i32*
  store i32 %1346, i32* %1350
  %1351 = load i64, i64* %PC
  %1352 = sub i64 %1351, 216
  %1353 = load i64, i64* %PC
  %1354 = add i64 %1353, 5
  store i64 %1354, i64* %PC
  %1355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1352, i64* %1355, align 8, !tbaa !2428
  br label %block_400ef6

block_4011ba:                                     ; preds = %block_4011b0
  %1356 = load i64, i64* %PC
  %1357 = add i64 %1356, 5
  store i64 %1357, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %1358 = load i64, i64* %RBP
  %1359 = sub i64 %1358, 4
  %1360 = load i64, i64* %PC
  %1361 = add i64 %1360, 3
  store i64 %1361, i64* %PC
  %1362 = inttoptr i64 %1359 to i32*
  %1363 = load i32, i32* %1362
  %1364 = zext i32 %1363 to i64
  store i64 %1364, i64* %RCX, align 8, !tbaa !2428
  %1365 = load i64, i64* %RBP
  %1366 = sub i64 %1365, 1492
  %1367 = load i64, i64* %PC
  %1368 = add i64 %1367, 7
  store i64 %1368, i64* %PC
  %1369 = inttoptr i64 %1366 to i32*
  %1370 = load i32, i32* %1369
  %1371 = sext i32 %1370 to i64
  store i64 %1371, i64* %RDX, align 8, !tbaa !2428
  %1372 = load i64, i64* %RBP
  %1373 = load i64, i64* %RDX
  %1374 = mul i64 %1373, 4
  %1375 = add i64 %1372, -1536
  %1376 = add i64 %1375, %1374
  %1377 = load i32, i32* %ECX
  %1378 = zext i32 %1377 to i64
  %1379 = load i64, i64* %PC
  %1380 = add i64 %1379, 7
  store i64 %1380, i64* %PC
  %1381 = inttoptr i64 %1376 to i32*
  store i32 %1377, i32* %1381
  %1382 = load i64, i64* %RAX
  %1383 = load i64, i64* %RBP
  %1384 = sub i64 %1383, 4
  %1385 = load i64, i64* %PC
  %1386 = add i64 %1385, 3
  store i64 %1386, i64* %PC
  %1387 = trunc i64 %1382 to i32
  %1388 = inttoptr i64 %1384 to i32*
  %1389 = load i32, i32* %1388
  %1390 = sub i32 %1387, %1389
  %1391 = zext i32 %1390 to i64
  store i64 %1391, i64* %RAX, align 8, !tbaa !2428
  %1392 = icmp ult i32 %1387, %1389
  %1393 = zext i1 %1392 to i8
  %1394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1393, i8* %1394, align 1, !tbaa !2432
  %1395 = and i32 %1390, 255
  %1396 = call i32 @llvm.ctpop.i32(i32 %1395) #16
  %1397 = trunc i32 %1396 to i8
  %1398 = and i8 %1397, 1
  %1399 = xor i8 %1398, 1
  %1400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1399, i8* %1400, align 1, !tbaa !2446
  %1401 = xor i32 %1389, %1387
  %1402 = xor i32 %1401, %1390
  %1403 = lshr i32 %1402, 4
  %1404 = trunc i32 %1403 to i8
  %1405 = and i8 %1404, 1
  %1406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1405, i8* %1406, align 1, !tbaa !2447
  %1407 = icmp eq i32 %1390, 0
  %1408 = zext i1 %1407 to i8
  %1409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1408, i8* %1409, align 1, !tbaa !2448
  %1410 = lshr i32 %1390, 31
  %1411 = trunc i32 %1410 to i8
  %1412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1411, i8* %1412, align 1, !tbaa !2449
  %1413 = lshr i32 %1387, 31
  %1414 = lshr i32 %1389, 31
  %1415 = xor i32 %1414, %1413
  %1416 = xor i32 %1410, %1413
  %1417 = add nuw nsw i32 %1416, %1415
  %1418 = icmp eq i32 %1417, 2
  %1419 = zext i1 %1418 to i8
  %1420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1419, i8* %1420, align 1, !tbaa !2450
  %1421 = load i64, i64* %RBP
  %1422 = sub i64 %1421, 1492
  %1423 = load i64, i64* %PC
  %1424 = add i64 %1423, 7
  store i64 %1424, i64* %PC
  %1425 = inttoptr i64 %1422 to i32*
  %1426 = load i32, i32* %1425
  %1427 = sext i32 %1426 to i64
  store i64 %1427, i64* %RDX, align 8, !tbaa !2428
  %1428 = load i64, i64* %RBP
  %1429 = load i64, i64* %RDX
  %1430 = mul i64 %1429, 4
  %1431 = add i64 %1428, -1568
  %1432 = add i64 %1431, %1430
  %1433 = load i32, i32* %EAX
  %1434 = zext i32 %1433 to i64
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 7
  store i64 %1436, i64* %PC
  %1437 = inttoptr i64 %1432 to i32*
  store i32 %1433, i32* %1437
  %1438 = load i64, i64* %RBP
  %1439 = sub i64 %1438, 1492
  %1440 = load i64, i64* %PC
  %1441 = add i64 %1440, 6
  store i64 %1441, i64* %PC
  %1442 = inttoptr i64 %1439 to i32*
  %1443 = load i32, i32* %1442
  %1444 = zext i32 %1443 to i64
  store i64 %1444, i64* %RAX, align 8, !tbaa !2428
  %1445 = load i64, i64* %RAX
  %1446 = load i64, i64* %PC
  %1447 = add i64 %1446, 3
  store i64 %1447, i64* %PC
  %1448 = trunc i64 %1445 to i32
  %1449 = add i32 1, %1448
  %1450 = zext i32 %1449 to i64
  store i64 %1450, i64* %RAX, align 8, !tbaa !2428
  %1451 = icmp ult i32 %1449, %1448
  %1452 = icmp ult i32 %1449, 1
  %1453 = or i1 %1451, %1452
  %1454 = zext i1 %1453 to i8
  %1455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1454, i8* %1455, align 1, !tbaa !2432
  %1456 = and i32 %1449, 255
  %1457 = call i32 @llvm.ctpop.i32(i32 %1456) #16
  %1458 = trunc i32 %1457 to i8
  %1459 = and i8 %1458, 1
  %1460 = xor i8 %1459, 1
  %1461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1460, i8* %1461, align 1, !tbaa !2446
  %1462 = xor i64 1, %1445
  %1463 = trunc i64 %1462 to i32
  %1464 = xor i32 %1463, %1449
  %1465 = lshr i32 %1464, 4
  %1466 = trunc i32 %1465 to i8
  %1467 = and i8 %1466, 1
  %1468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1467, i8* %1468, align 1, !tbaa !2447
  %1469 = icmp eq i32 %1449, 0
  %1470 = zext i1 %1469 to i8
  %1471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1470, i8* %1471, align 1, !tbaa !2448
  %1472 = lshr i32 %1449, 31
  %1473 = trunc i32 %1472 to i8
  %1474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1473, i8* %1474, align 1, !tbaa !2449
  %1475 = lshr i32 %1448, 31
  %1476 = xor i32 %1472, %1475
  %1477 = add nuw nsw i32 %1476, %1472
  %1478 = icmp eq i32 %1477, 2
  %1479 = zext i1 %1478 to i8
  %1480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1479, i8* %1480, align 1, !tbaa !2450
  %1481 = load i64, i64* %RBP
  %1482 = sub i64 %1481, 1492
  %1483 = load i32, i32* %EAX
  %1484 = zext i32 %1483 to i64
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 6
  store i64 %1486, i64* %PC
  %1487 = inttoptr i64 %1482 to i32*
  store i32 %1483, i32* %1487
  br label %block_4011f0

block_40179c:                                     ; preds = %block_40178f
  %1488 = load i64, i64* %RBP
  %1489 = sub i64 %1488, 4
  %1490 = load i64, i64* %PC
  %1491 = add i64 %1490, 4
  store i64 %1491, i64* %PC
  %1492 = inttoptr i64 %1489 to i32*
  %1493 = load i32, i32* %1492
  %1494 = sext i32 %1493 to i64
  store i64 %1494, i64* %RAX, align 8, !tbaa !2428
  %1495 = load i64, i64* %RAX
  %1496 = mul i64 %1495, 4
  %1497 = add i64 %1496, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %1498 = load i64, i64* %PC
  %1499 = add i64 %1498, 8
  store i64 %1499, i64* %PC
  %1500 = inttoptr i64 %1497 to i32*
  %1501 = load i32, i32* %1500
  %1502 = sub i32 %1501, -1
  %1503 = icmp ult i32 %1501, -1
  %1504 = zext i1 %1503 to i8
  %1505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1504, i8* %1505, align 1, !tbaa !2432
  %1506 = and i32 %1502, 255
  %1507 = call i32 @llvm.ctpop.i32(i32 %1506) #16
  %1508 = trunc i32 %1507 to i8
  %1509 = and i8 %1508, 1
  %1510 = xor i8 %1509, 1
  %1511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1510, i8* %1511, align 1, !tbaa !2446
  %1512 = xor i32 %1501, -1
  %1513 = xor i32 %1512, %1502
  %1514 = lshr i32 %1513, 4
  %1515 = trunc i32 %1514 to i8
  %1516 = and i8 %1515, 1
  %1517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1516, i8* %1517, align 1, !tbaa !2447
  %1518 = icmp eq i32 %1502, 0
  %1519 = zext i1 %1518 to i8
  %1520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1519, i8* %1520, align 1, !tbaa !2448
  %1521 = lshr i32 %1502, 31
  %1522 = trunc i32 %1521 to i8
  %1523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1522, i8* %1523, align 1, !tbaa !2449
  %1524 = lshr i32 %1501, 31
  %1525 = xor i32 %1524, 1
  %1526 = xor i32 %1521, %1524
  %1527 = add nuw nsw i32 %1526, %1525
  %1528 = icmp eq i32 %1527, 2
  %1529 = zext i1 %1528 to i8
  %1530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1529, i8* %1530, align 1, !tbaa !2450
  %1531 = load i64, i64* %PC
  %1532 = add i64 %1531, 41
  %1533 = load i64, i64* %PC
  %1534 = add i64 %1533, 6
  %1535 = load i64, i64* %PC
  %1536 = add i64 %1535, 6
  store i64 %1536, i64* %PC
  %1537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1538 = load i8, i8* %1537, align 1, !tbaa !2448
  store i8 %1538, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1540 = icmp ne i8 %1538, 0
  %1541 = select i1 %1540, i64 %1532, i64 %1534
  store i64 %1541, i64* %1539, align 8, !tbaa !2428
  %1542 = load i8, i8* %BRANCH_TAKEN
  %1543 = icmp eq i8 %1542, 1
  %1544 = load i64, i64* %RBP
  %1545 = sub i64 %1544, 4
  %1546 = load i64, i64* %PC
  %1547 = add i64 %1546, 4
  store i64 %1547, i64* %PC
  %1548 = inttoptr i64 %1545 to i32*
  %1549 = load i32, i32* %1548
  %1550 = sext i32 %1549 to i64
  store i64 %1550, i64* %RAX, align 8, !tbaa !2428
  %1551 = load i64, i64* %RAX
  %1552 = mul i64 %1551, 4
  %1553 = add i64 %1552, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %1554 = load i64, i64* %PC
  br i1 %1543, label %block_4017d1, label %block_4017ae

block_40177e:                                     ; preds = %block_40171a
  %1555 = load i64, i64* %PC
  %1556 = add i64 %1555, 5
  %1557 = load i64, i64* %PC
  %1558 = add i64 %1557, 5
  store i64 %1558, i64* %PC
  %1559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1556, i64* %1559, align 8, !tbaa !2428
  br label %block_401783

block_401377:                                     ; preds = %block_4012dd, %block_401372
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.8, %block_401372 ], [ %MEMORY.21, %block_4012dd ]
  %1560 = load i64, i64* %PC
  %1561 = add i64 %1560, 5
  %1562 = load i64, i64* %PC
  %1563 = add i64 %1562, 5
  store i64 %1563, i64* %PC
  %1564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1561, i64* %1564, align 8, !tbaa !2428
  br label %block_40137c

block_400bb2:                                     ; preds = %block_400ae9
  %1565 = add i64 %4863, 3
  store i64 %1565, i64* %PC
  %1566 = inttoptr i64 %4862 to i32*
  %1567 = load i32, i32* %1566
  %1568 = zext i32 %1567 to i64
  store i64 %1568, i64* %RAX, align 8, !tbaa !2428
  %1569 = load i64, i64* %RAX
  %1570 = load i64, i64* %PC
  %1571 = add i64 %1570, 3
  store i64 %1571, i64* %PC
  %1572 = trunc i64 %1569 to i32
  %1573 = sub i32 %1572, 1
  %1574 = zext i32 %1573 to i64
  store i64 %1574, i64* %RAX, align 8, !tbaa !2428
  %1575 = icmp ult i32 %1572, 1
  %1576 = zext i1 %1575 to i8
  %1577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1576, i8* %1577, align 1, !tbaa !2432
  %1578 = and i32 %1573, 255
  %1579 = call i32 @llvm.ctpop.i32(i32 %1578) #16
  %1580 = trunc i32 %1579 to i8
  %1581 = and i8 %1580, 1
  %1582 = xor i8 %1581, 1
  %1583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1582, i8* %1583, align 1, !tbaa !2446
  %1584 = xor i64 1, %1569
  %1585 = trunc i64 %1584 to i32
  %1586 = xor i32 %1585, %1573
  %1587 = lshr i32 %1586, 4
  %1588 = trunc i32 %1587 to i8
  %1589 = and i8 %1588, 1
  %1590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1589, i8* %1590, align 1, !tbaa !2447
  %1591 = icmp eq i32 %1573, 0
  %1592 = zext i1 %1591 to i8
  %1593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1592, i8* %1593, align 1, !tbaa !2448
  %1594 = lshr i32 %1573, 31
  %1595 = trunc i32 %1594 to i8
  %1596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1595, i8* %1596, align 1, !tbaa !2449
  %1597 = lshr i32 %1572, 31
  %1598 = xor i32 %1594, %1597
  %1599 = add nuw nsw i32 %1598, %1597
  %1600 = icmp eq i32 %1599, 2
  %1601 = zext i1 %1600 to i8
  %1602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1601, i8* %1602, align 1, !tbaa !2450
  %1603 = load i64, i64* %RBP
  %1604 = sub i64 %1603, 16
  %1605 = load i32, i32* %EAX
  %1606 = zext i32 %1605 to i64
  %1607 = load i64, i64* %PC
  %1608 = add i64 %1607, 3
  store i64 %1608, i64* %PC
  %1609 = inttoptr i64 %1604 to i32*
  store i32 %1605, i32* %1609
  br label %block_400bbb

block_400bad:                                     ; preds = %block_400b26
  %1610 = load i64, i64* %PC
  %1611 = add i64 %1610, 701
  %1612 = load i64, i64* %PC
  %1613 = add i64 %1612, 5
  store i64 %1613, i64* %PC
  %1614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1611, i64* %1614, align 8, !tbaa !2428
  br label %block_400e6a

block_40176b:                                     ; preds = %block_401739, %block_40175c
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.32, %block_40175c ], [ %MEMORY.32, %block_401739 ]
  %1615 = load i64, i64* %PC
  %1616 = add i64 %1615, 5
  %1617 = load i64, i64* %PC
  %1618 = add i64 %1617, 5
  store i64 %1618, i64* %PC
  %1619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1616, i64* %1619, align 8, !tbaa !2428
  %1620 = load i64, i64* %RBP
  %1621 = sub i64 %1620, 4
  %1622 = load i64, i64* %PC
  %1623 = add i64 %1622, 3
  store i64 %1623, i64* %PC
  %1624 = inttoptr i64 %1621 to i32*
  %1625 = load i32, i32* %1624
  %1626 = zext i32 %1625 to i64
  store i64 %1626, i64* %RAX, align 8, !tbaa !2428
  %1627 = load i64, i64* %RAX
  %1628 = load i64, i64* %PC
  %1629 = add i64 %1628, 3
  store i64 %1629, i64* %PC
  %1630 = trunc i64 %1627 to i32
  %1631 = add i32 1, %1630
  %1632 = zext i32 %1631 to i64
  store i64 %1632, i64* %RAX, align 8, !tbaa !2428
  %1633 = icmp ult i32 %1631, %1630
  %1634 = icmp ult i32 %1631, 1
  %1635 = or i1 %1633, %1634
  %1636 = zext i1 %1635 to i8
  %1637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1636, i8* %1637, align 1, !tbaa !2432
  %1638 = and i32 %1631, 255
  %1639 = call i32 @llvm.ctpop.i32(i32 %1638) #16
  %1640 = trunc i32 %1639 to i8
  %1641 = and i8 %1640, 1
  %1642 = xor i8 %1641, 1
  %1643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1642, i8* %1643, align 1, !tbaa !2446
  %1644 = xor i64 1, %1627
  %1645 = trunc i64 %1644 to i32
  %1646 = xor i32 %1645, %1631
  %1647 = lshr i32 %1646, 4
  %1648 = trunc i32 %1647 to i8
  %1649 = and i8 %1648, 1
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1649, i8* %1650, align 1, !tbaa !2447
  %1651 = icmp eq i32 %1631, 0
  %1652 = zext i1 %1651 to i8
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1652, i8* %1653, align 1, !tbaa !2448
  %1654 = lshr i32 %1631, 31
  %1655 = trunc i32 %1654 to i8
  %1656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1655, i8* %1656, align 1, !tbaa !2449
  %1657 = lshr i32 %1630, 31
  %1658 = xor i32 %1654, %1657
  %1659 = add nuw nsw i32 %1658, %1654
  %1660 = icmp eq i32 %1659, 2
  %1661 = zext i1 %1660 to i8
  %1662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1661, i8* %1662, align 1, !tbaa !2450
  %1663 = load i64, i64* %RBP
  %1664 = sub i64 %1663, 4
  %1665 = load i32, i32* %EAX
  %1666 = zext i32 %1665 to i64
  %1667 = load i64, i64* %PC
  %1668 = add i64 %1667, 3
  store i64 %1668, i64* %PC
  %1669 = inttoptr i64 %1664 to i32*
  store i32 %1665, i32* %1669
  %1670 = load i64, i64* %PC
  %1671 = sub i64 %1670, 95
  %1672 = load i64, i64* %PC
  %1673 = add i64 %1672, 5
  store i64 %1673, i64* %PC
  %1674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1671, i64* %1674, align 8, !tbaa !2428
  br label %block_40171a

block_400966:                                     ; preds = %block_400a1a, %block_400940
  %MEMORY.5 = phi %struct.Memory* [ %2, %block_400940 ], [ %MEMORY.50, %block_400a1a ]
  %1675 = load i64, i64* %RBP
  %1676 = sub i64 %1675, 4
  %1677 = load i64, i64* %PC
  %1678 = add i64 %1677, 4
  store i64 %1678, i64* %PC
  %1679 = inttoptr i64 %1676 to i32*
  %1680 = load i32, i32* %1679
  %1681 = sub i32 %1680, 16
  %1682 = icmp ult i32 %1680, 16
  %1683 = zext i1 %1682 to i8
  %1684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1683, i8* %1684, align 1, !tbaa !2432
  %1685 = and i32 %1681, 255
  %1686 = call i32 @llvm.ctpop.i32(i32 %1685) #16
  %1687 = trunc i32 %1686 to i8
  %1688 = and i8 %1687, 1
  %1689 = xor i8 %1688, 1
  %1690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1689, i8* %1690, align 1, !tbaa !2446
  %1691 = xor i32 %1680, 16
  %1692 = xor i32 %1691, %1681
  %1693 = lshr i32 %1692, 4
  %1694 = trunc i32 %1693 to i8
  %1695 = and i8 %1694, 1
  %1696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1695, i8* %1696, align 1, !tbaa !2447
  %1697 = icmp eq i32 %1681, 0
  %1698 = zext i1 %1697 to i8
  %1699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1698, i8* %1699, align 1, !tbaa !2448
  %1700 = lshr i32 %1681, 31
  %1701 = trunc i32 %1700 to i8
  %1702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1701, i8* %1702, align 1, !tbaa !2449
  %1703 = lshr i32 %1680, 31
  %1704 = xor i32 %1700, %1703
  %1705 = add nuw nsw i32 %1704, %1703
  %1706 = icmp eq i32 %1705, 2
  %1707 = zext i1 %1706 to i8
  %1708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1707, i8* %1708, align 1, !tbaa !2450
  %1709 = load i64, i64* %PC
  %1710 = add i64 %1709, 220
  %1711 = load i64, i64* %PC
  %1712 = add i64 %1711, 6
  %1713 = load i64, i64* %PC
  %1714 = add i64 %1713, 6
  store i64 %1714, i64* %PC
  %1715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1716 = load i8, i8* %1715, align 1, !tbaa !2448
  %1717 = icmp eq i8 %1716, 0
  %1718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1719 = load i8, i8* %1718, align 1, !tbaa !2449
  %1720 = icmp ne i8 %1719, 0
  %1721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1722 = load i8, i8* %1721, align 1, !tbaa !2450
  %1723 = icmp ne i8 %1722, 0
  %1724 = xor i1 %1720, %1723
  %1725 = xor i1 %1724, true
  %1726 = and i1 %1717, %1725
  %1727 = zext i1 %1726 to i8
  store i8 %1727, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1729 = select i1 %1726, i64 %1710, i64 %1712
  store i64 %1729, i64* %1728, align 8, !tbaa !2428
  %1730 = load i8, i8* %BRANCH_TAKEN
  %1731 = icmp eq i8 %1730, 1
  %1732 = load i64, i64* %RBP
  br i1 %1731, label %block_400a46, label %block_400970

block_400bbb:                                     ; preds = %block_400bf7, %block_400bb2
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.20, %block_400bb2 ], [ %MEMORY.14, %block_400bf7 ]
  %1733 = load i64, i64* %RAX
  %1734 = load i32, i32* %EAX
  %1735 = zext i32 %1734 to i64
  %1736 = load i64, i64* %PC
  %1737 = add i64 %1736, 2
  store i64 %1737, i64* %PC
  %1738 = xor i64 %1735, %1733
  %1739 = trunc i64 %1738 to i32
  %1740 = and i64 %1738, 4294967295
  store i64 %1740, i64* %RAX, align 8, !tbaa !2428
  %1741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1741, align 1, !tbaa !2432
  %1742 = and i32 %1739, 255
  %1743 = call i32 @llvm.ctpop.i32(i32 %1742) #16
  %1744 = trunc i32 %1743 to i8
  %1745 = and i8 %1744, 1
  %1746 = xor i8 %1745, 1
  %1747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1746, i8* %1747, align 1, !tbaa !2446
  %1748 = icmp eq i32 %1739, 0
  %1749 = zext i1 %1748 to i8
  %1750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1749, i8* %1750, align 1, !tbaa !2448
  %1751 = lshr i32 %1739, 31
  %1752 = trunc i32 %1751 to i8
  %1753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1752, i8* %1753, align 1, !tbaa !2449
  %1754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1754, align 1, !tbaa !2450
  %1755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1755, align 1, !tbaa !2447
  %1756 = load i8, i8* %AL
  %1757 = zext i8 %1756 to i64
  %1758 = load i64, i64* %PC
  %1759 = add i64 %1758, 2
  store i64 %1759, i64* %PC
  store i8 %1756, i8* %CL, align 1, !tbaa !2451
  %1760 = load i64, i64* %RBP
  %1761 = sub i64 %1760, 16
  %1762 = load i64, i64* %PC
  %1763 = add i64 %1762, 4
  store i64 %1763, i64* %PC
  %1764 = inttoptr i64 %1761 to i32*
  %1765 = load i32, i32* %1764
  %1766 = sext i32 %1765 to i64
  store i64 %1766, i64* %RDX, align 8, !tbaa !2428
  %1767 = load i64, i64* %RBP
  %1768 = load i64, i64* %RDX
  %1769 = mul i64 %1768, 4
  %1770 = add i64 %1767, -1248
  %1771 = add i64 %1770, %1769
  %1772 = load i64, i64* %PC
  %1773 = add i64 %1772, 8
  store i64 %1773, i64* %PC
  %1774 = inttoptr i64 %1771 to i32*
  %1775 = load i32, i32* %1774
  %1776 = sub i32 %1775, -1
  %1777 = icmp ult i32 %1775, -1
  %1778 = zext i1 %1777 to i8
  %1779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1778, i8* %1779, align 1, !tbaa !2432
  %1780 = and i32 %1776, 255
  %1781 = call i32 @llvm.ctpop.i32(i32 %1780) #16
  %1782 = trunc i32 %1781 to i8
  %1783 = and i8 %1782, 1
  %1784 = xor i8 %1783, 1
  %1785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1784, i8* %1785, align 1, !tbaa !2446
  %1786 = xor i32 %1775, -1
  %1787 = xor i32 %1786, %1776
  %1788 = lshr i32 %1787, 4
  %1789 = trunc i32 %1788 to i8
  %1790 = and i8 %1789, 1
  %1791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1790, i8* %1791, align 1, !tbaa !2447
  %1792 = icmp eq i32 %1776, 0
  %1793 = zext i1 %1792 to i8
  %1794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1793, i8* %1794, align 1, !tbaa !2448
  %1795 = lshr i32 %1776, 31
  %1796 = trunc i32 %1795 to i8
  %1797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1796, i8* %1797, align 1, !tbaa !2449
  %1798 = lshr i32 %1775, 31
  %1799 = xor i32 %1798, 1
  %1800 = xor i32 %1795, %1798
  %1801 = add nuw nsw i32 %1800, %1799
  %1802 = icmp eq i32 %1801, 2
  %1803 = zext i1 %1802 to i8
  %1804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1803, i8* %1804, align 1, !tbaa !2450
  %1805 = load i64, i64* %RBP
  %1806 = sub i64 %1805, 2693
  %1807 = load i8, i8* %CL
  %1808 = zext i8 %1807 to i64
  %1809 = load i64, i64* %PC
  %1810 = add i64 %1809, 6
  store i64 %1810, i64* %PC
  %1811 = inttoptr i64 %1806 to i8*
  store i8 %1807, i8* %1811
  %1812 = load i64, i64* %PC
  %1813 = add i64 %1812, 19
  %1814 = load i64, i64* %PC
  %1815 = add i64 %1814, 6
  %1816 = load i64, i64* %PC
  %1817 = add i64 %1816, 6
  store i64 %1817, i64* %PC
  %1818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1819 = load i8, i8* %1818, align 1, !tbaa !2448
  %1820 = icmp eq i8 %1819, 0
  %1821 = zext i1 %1820 to i8
  store i8 %1821, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1823 = select i1 %1820, i64 %1813, i64 %1815
  store i64 %1823, i64* %1822, align 8, !tbaa !2428
  %1824 = load i8, i8* %BRANCH_TAKEN
  %1825 = icmp eq i8 %1824, 1
  br i1 %1825, label %block_400be4, label %block_400bd7

block_40138f:                                     ; preds = %block_401383
  %1826 = sub i64 %9697, 8
  %1827 = load i64, i64* %PC
  %1828 = add i64 %1827, 4
  store i64 %1828, i64* %PC
  %1829 = inttoptr i64 %1826 to i32*
  %1830 = load i32, i32* %1829
  %1831 = sext i32 %1830 to i64
  store i64 %1831, i64* %RAX, align 8, !tbaa !2428
  %1832 = load i64, i64* %RBP
  %1833 = load i64, i64* %RAX
  %1834 = mul i64 %1833, 4
  %1835 = add i64 %1832, -1488
  %1836 = add i64 %1835, %1834
  %1837 = load i64, i64* %PC
  %1838 = add i64 %1837, 8
  store i64 %1838, i64* %PC
  %1839 = inttoptr i64 %1836 to i32*
  %1840 = load i32, i32* %1839
  %1841 = sub i32 %1840, -1
  %1842 = icmp ult i32 %1840, -1
  %1843 = zext i1 %1842 to i8
  %1844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1843, i8* %1844, align 1, !tbaa !2432
  %1845 = and i32 %1841, 255
  %1846 = call i32 @llvm.ctpop.i32(i32 %1845) #16
  %1847 = trunc i32 %1846 to i8
  %1848 = and i8 %1847, 1
  %1849 = xor i8 %1848, 1
  %1850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1849, i8* %1850, align 1, !tbaa !2446
  %1851 = xor i32 %1840, -1
  %1852 = xor i32 %1851, %1841
  %1853 = lshr i32 %1852, 4
  %1854 = trunc i32 %1853 to i8
  %1855 = and i8 %1854, 1
  %1856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1855, i8* %1856, align 1, !tbaa !2447
  %1857 = icmp eq i32 %1841, 0
  %1858 = zext i1 %1857 to i8
  %1859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1858, i8* %1859, align 1, !tbaa !2448
  %1860 = lshr i32 %1841, 31
  %1861 = trunc i32 %1860 to i8
  %1862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1861, i8* %1862, align 1, !tbaa !2449
  %1863 = lshr i32 %1840, 31
  %1864 = xor i32 %1863, 1
  %1865 = xor i32 %1860, %1863
  %1866 = add nuw nsw i32 %1865, %1864
  %1867 = icmp eq i32 %1866, 2
  %1868 = zext i1 %1867 to i8
  %1869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1868, i8* %1869, align 1, !tbaa !2450
  %1870 = load i64, i64* %PC
  %1871 = add i64 %1870, 134
  %1872 = load i64, i64* %PC
  %1873 = add i64 %1872, 6
  %1874 = load i64, i64* %PC
  %1875 = add i64 %1874, 6
  store i64 %1875, i64* %PC
  %1876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1877 = load i8, i8* %1876, align 1, !tbaa !2448
  store i8 %1877, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1879 = icmp ne i8 %1877, 0
  %1880 = select i1 %1879, i64 %1871, i64 %1873
  store i64 %1880, i64* %1878, align 8, !tbaa !2428
  %1881 = load i8, i8* %BRANCH_TAKEN
  %1882 = icmp eq i8 %1881, 1
  br i1 %1882, label %block_401421, label %block_4013a1

block_401363:                                     ; preds = %block_401300, %block_401312
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.54, %block_401300 ], [ %MEMORY.54, %block_401312 ]
  %1883 = load i64, i64* %RBP
  %1884 = sub i64 %1883, 4
  %1885 = load i64, i64* %PC
  %1886 = add i64 %1885, 4
  store i64 %1886, i64* %PC
  %1887 = inttoptr i64 %1884 to i32*
  %1888 = load i32, i32* %1887
  %1889 = sext i32 %1888 to i64
  store i64 %1889, i64* %RAX, align 8, !tbaa !2428
  %1890 = load i64, i64* %RBP
  %1891 = load i64, i64* %RAX
  %1892 = mul i64 %1891, 4
  %1893 = add i64 %1890, -1616
  %1894 = add i64 %1893, %1892
  %1895 = load i64, i64* %PC
  %1896 = add i64 %1895, 11
  store i64 %1896, i64* %PC
  %1897 = inttoptr i64 %1894 to i32*
  store i32 0, i32* %1897
  br label %block_401372

block_401372:                                     ; preds = %block_401332, %block_401363
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.7, %block_401363 ], [ %MEMORY.54, %block_401332 ]
  %1898 = load i64, i64* %PC
  %1899 = add i64 %1898, 5
  %1900 = load i64, i64* %PC
  %1901 = add i64 %1900, 5
  store i64 %1901, i64* %PC
  %1902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1899, i64* %1902, align 8, !tbaa !2428
  br label %block_401377

block_40175c:                                     ; preds = %block_401727
  %1903 = add i64 %2315, 11
  store i64 %1903, i64* %PC
  %1904 = inttoptr i64 %2314 to i32*
  store i32 0, i32* %1904
  br label %block_40176b

block_4017e0:                                     ; preds = %block_4017ae, %block_4017d1
  %MEMORY.9 = phi %struct.Memory* [ %MEMORY.24, %block_4017d1 ], [ %MEMORY.24, %block_4017ae ]
  %1905 = load i64, i64* %PC
  %1906 = add i64 %1905, 5
  %1907 = load i64, i64* %PC
  %1908 = add i64 %1907, 5
  store i64 %1908, i64* %PC
  %1909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1906, i64* %1909, align 8, !tbaa !2428
  %1910 = load i64, i64* %RBP
  %1911 = sub i64 %1910, 4
  %1912 = load i64, i64* %PC
  %1913 = add i64 %1912, 3
  store i64 %1913, i64* %PC
  %1914 = inttoptr i64 %1911 to i32*
  %1915 = load i32, i32* %1914
  %1916 = zext i32 %1915 to i64
  store i64 %1916, i64* %RAX, align 8, !tbaa !2428
  %1917 = load i64, i64* %RAX
  %1918 = load i64, i64* %PC
  %1919 = add i64 %1918, 3
  store i64 %1919, i64* %PC
  %1920 = trunc i64 %1917 to i32
  %1921 = add i32 1, %1920
  %1922 = zext i32 %1921 to i64
  store i64 %1922, i64* %RAX, align 8, !tbaa !2428
  %1923 = icmp ult i32 %1921, %1920
  %1924 = icmp ult i32 %1921, 1
  %1925 = or i1 %1923, %1924
  %1926 = zext i1 %1925 to i8
  %1927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1926, i8* %1927, align 1, !tbaa !2432
  %1928 = and i32 %1921, 255
  %1929 = call i32 @llvm.ctpop.i32(i32 %1928) #16
  %1930 = trunc i32 %1929 to i8
  %1931 = and i8 %1930, 1
  %1932 = xor i8 %1931, 1
  %1933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1932, i8* %1933, align 1, !tbaa !2446
  %1934 = xor i64 1, %1917
  %1935 = trunc i64 %1934 to i32
  %1936 = xor i32 %1935, %1921
  %1937 = lshr i32 %1936, 4
  %1938 = trunc i32 %1937 to i8
  %1939 = and i8 %1938, 1
  %1940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1939, i8* %1940, align 1, !tbaa !2447
  %1941 = icmp eq i32 %1921, 0
  %1942 = zext i1 %1941 to i8
  %1943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1942, i8* %1943, align 1, !tbaa !2448
  %1944 = lshr i32 %1921, 31
  %1945 = trunc i32 %1944 to i8
  %1946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1945, i8* %1946, align 1, !tbaa !2449
  %1947 = lshr i32 %1920, 31
  %1948 = xor i32 %1944, %1947
  %1949 = add nuw nsw i32 %1948, %1944
  %1950 = icmp eq i32 %1949, 2
  %1951 = zext i1 %1950 to i8
  %1952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1951, i8* %1952, align 1, !tbaa !2450
  %1953 = load i64, i64* %RBP
  %1954 = sub i64 %1953, 4
  %1955 = load i32, i32* %EAX
  %1956 = zext i32 %1955 to i64
  %1957 = load i64, i64* %PC
  %1958 = add i64 %1957, 3
  store i64 %1958, i64* %PC
  %1959 = inttoptr i64 %1954 to i32*
  store i32 %1955, i32* %1959
  %1960 = load i64, i64* %PC
  %1961 = sub i64 %1960, 95
  %1962 = load i64, i64* %PC
  %1963 = add i64 %1962, 5
  store i64 %1963, i64* %PC
  %1964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1961, i64* %1964, align 8, !tbaa !2428
  br label %block_40178f

block_400986:                                     ; preds = %block_400970, %block_4009eb
  %MEMORY.10 = phi %struct.Memory* [ %MEMORY.5, %block_400970 ], [ %MEMORY.1, %block_4009eb ]
  %1965 = load i64, i64* %RBP
  %1966 = sub i64 %1965, 8
  %1967 = load i64, i64* %PC
  %1968 = add i64 %1967, 7
  store i64 %1968, i64* %PC
  %1969 = inttoptr i64 %1966 to i32*
  %1970 = load i32, i32* %1969
  %1971 = sub i32 %1970, 255
  %1972 = icmp ult i32 %1970, 255
  %1973 = zext i1 %1972 to i8
  %1974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1973, i8* %1974, align 1, !tbaa !2432
  %1975 = and i32 %1971, 255
  %1976 = call i32 @llvm.ctpop.i32(i32 %1975) #16
  %1977 = trunc i32 %1976 to i8
  %1978 = and i8 %1977, 1
  %1979 = xor i8 %1978, 1
  %1980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1979, i8* %1980, align 1, !tbaa !2446
  %1981 = xor i32 %1970, 255
  %1982 = xor i32 %1981, %1971
  %1983 = lshr i32 %1982, 4
  %1984 = trunc i32 %1983 to i8
  %1985 = and i8 %1984, 1
  %1986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1985, i8* %1986, align 1, !tbaa !2447
  %1987 = icmp eq i32 %1971, 0
  %1988 = zext i1 %1987 to i8
  %1989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1988, i8* %1989, align 1, !tbaa !2448
  %1990 = lshr i32 %1971, 31
  %1991 = trunc i32 %1990 to i8
  %1992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1991, i8* %1992, align 1, !tbaa !2449
  %1993 = lshr i32 %1970, 31
  %1994 = xor i32 %1990, %1993
  %1995 = add nuw nsw i32 %1994, %1993
  %1996 = icmp eq i32 %1995, 2
  %1997 = zext i1 %1996 to i8
  %1998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1997, i8* %1998, align 1, !tbaa !2450
  %1999 = load i64, i64* %PC
  %2000 = add i64 %1999, 113
  %2001 = load i64, i64* %PC
  %2002 = add i64 %2001, 6
  %2003 = load i64, i64* %PC
  %2004 = add i64 %2003, 6
  store i64 %2004, i64* %PC
  %2005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2006 = load i8, i8* %2005, align 1, !tbaa !2449
  %2007 = icmp ne i8 %2006, 0
  %2008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2009 = load i8, i8* %2008, align 1, !tbaa !2450
  %2010 = icmp ne i8 %2009, 0
  %2011 = xor i1 %2007, %2010
  %2012 = xor i1 %2011, true
  %2013 = zext i1 %2012 to i8
  store i8 %2013, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2015 = select i1 %2011, i64 %2002, i64 %2000
  store i64 %2015, i64* %2014, align 8, !tbaa !2428
  %2016 = load i8, i8* %BRANCH_TAKEN
  %2017 = icmp eq i8 %2016, 1
  %2018 = load i64, i64* %RBP
  br i1 %2017, label %block_4009fe, label %block_400993

block_401739:                                     ; preds = %block_401727
  %2019 = add i64 %2315, 8
  store i64 %2019, i64* %PC
  %2020 = inttoptr i64 %2314 to i32*
  %2021 = load i32, i32* %2020
  %2022 = sext i32 %2021 to i64
  store i64 %2022, i64* %RAX, align 8, !tbaa !2428
  %2023 = load i64, i64* %RAX
  %2024 = mul i64 %2023, 4
  %2025 = add i64 %2024, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %2026 = load i64, i64* %PC
  %2027 = add i64 %2026, 7
  store i64 %2027, i64* %PC
  %2028 = inttoptr i64 %2025 to i32*
  %2029 = load i32, i32* %2028
  %2030 = zext i32 %2029 to i64
  store i64 %2030, i64* %RCX, align 8, !tbaa !2428
  %2031 = load i64, i64* %RBP
  %2032 = sub i64 %2031, 4
  %2033 = load i64, i64* %PC
  %2034 = add i64 %2033, 4
  store i64 %2034, i64* %PC
  %2035 = inttoptr i64 %2032 to i32*
  %2036 = load i32, i32* %2035
  %2037 = sext i32 %2036 to i64
  store i64 %2037, i64* %RAX, align 8, !tbaa !2428
  %2038 = load i64, i64* %RAX
  %2039 = mul i64 %2038, 4
  %2040 = add i64 %2039, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %2041 = load i32, i32* %ECX
  %2042 = zext i32 %2041 to i64
  %2043 = load i64, i64* %PC
  %2044 = add i64 %2043, 7
  store i64 %2044, i64* %PC
  %2045 = inttoptr i64 %2040 to i32*
  store i32 %2041, i32* %2045
  %2046 = load i64, i64* %PC
  %2047 = add i64 %2046, 20
  %2048 = load i64, i64* %PC
  %2049 = add i64 %2048, 5
  store i64 %2049, i64* %PC
  %2050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2047, i64* %2050, align 8, !tbaa !2428
  br label %block_40176b

block_401155:                                     ; preds = %block_401143
  %2051 = load i64, i64* %PC
  %2052 = add i64 %2051, 5
  store i64 %2052, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %2053 = load i64, i64* %RBP
  %2054 = sub i64 %2053, 8
  %2055 = load i64, i64* %PC
  %2056 = add i64 %2055, 4
  store i64 %2056, i64* %PC
  %2057 = inttoptr i64 %2054 to i32*
  %2058 = load i32, i32* %2057
  %2059 = sext i32 %2058 to i64
  store i64 %2059, i64* %RCX, align 8, !tbaa !2428
  %2060 = load i64, i64* %RBP
  %2061 = load i64, i64* %RCX
  %2062 = mul i64 %2061, 4
  %2063 = add i64 %2060, -2688
  %2064 = add i64 %2063, %2062
  %2065 = load i64, i64* %PC
  %2066 = add i64 %2065, 7
  store i64 %2066, i64* %PC
  %2067 = inttoptr i64 %2064 to i32*
  %2068 = load i32, i32* %2067
  %2069 = zext i32 %2068 to i64
  store i64 %2069, i64* %RDX, align 8, !tbaa !2428
  %2070 = load i64, i64* %RDX
  %2071 = load i64, i64* %RBP
  %2072 = sub i64 %2071, 8
  %2073 = load i64, i64* %PC
  %2074 = add i64 %2073, 3
  store i64 %2074, i64* %PC
  %2075 = trunc i64 %2070 to i32
  %2076 = inttoptr i64 %2072 to i32*
  %2077 = load i32, i32* %2076
  %2078 = add i32 %2077, %2075
  %2079 = zext i32 %2078 to i64
  store i64 %2079, i64* %RDX, align 8, !tbaa !2428
  %2080 = icmp ult i32 %2078, %2075
  %2081 = icmp ult i32 %2078, %2077
  %2082 = or i1 %2080, %2081
  %2083 = zext i1 %2082 to i8
  %2084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2083, i8* %2084, align 1, !tbaa !2432
  %2085 = and i32 %2078, 255
  %2086 = call i32 @llvm.ctpop.i32(i32 %2085) #16
  %2087 = trunc i32 %2086 to i8
  %2088 = and i8 %2087, 1
  %2089 = xor i8 %2088, 1
  %2090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2089, i8* %2090, align 1, !tbaa !2446
  %2091 = xor i32 %2077, %2075
  %2092 = xor i32 %2091, %2078
  %2093 = lshr i32 %2092, 4
  %2094 = trunc i32 %2093 to i8
  %2095 = and i8 %2094, 1
  %2096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2095, i8* %2096, align 1, !tbaa !2447
  %2097 = icmp eq i32 %2078, 0
  %2098 = zext i1 %2097 to i8
  %2099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2098, i8* %2099, align 1, !tbaa !2448
  %2100 = lshr i32 %2078, 31
  %2101 = trunc i32 %2100 to i8
  %2102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2101, i8* %2102, align 1, !tbaa !2449
  %2103 = lshr i32 %2075, 31
  %2104 = lshr i32 %2077, 31
  %2105 = xor i32 %2100, %2103
  %2106 = xor i32 %2100, %2104
  %2107 = add nuw nsw i32 %2105, %2106
  %2108 = icmp eq i32 %2107, 2
  %2109 = zext i1 %2108 to i8
  %2110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2109, i8* %2110, align 1, !tbaa !2450
  %2111 = load i64, i64* %RBP
  %2112 = sub i64 %2111, 2716
  %2113 = load i32, i32* %EAX
  %2114 = zext i32 %2113 to i64
  %2115 = load i64, i64* %PC
  %2116 = add i64 %2115, 6
  store i64 %2116, i64* %PC
  %2117 = inttoptr i64 %2112 to i32*
  store i32 %2113, i32* %2117
  %2118 = load i32, i32* %EDX
  %2119 = zext i32 %2118 to i64
  %2120 = load i64, i64* %PC
  %2121 = add i64 %2120, 2
  store i64 %2121, i64* %PC
  %2122 = and i64 %2119, 4294967295
  store i64 %2122, i64* %RAX, align 8, !tbaa !2428
  %2123 = load i64, i64* %PC
  %2124 = add i64 %2123, 1
  store i64 %2124, i64* %PC
  %2125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %2126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %2127 = bitcast %union.anon* %2126 to i32*
  %2128 = load i32, i32* %2127, align 8, !tbaa !2452
  %2129 = sext i32 %2128 to i64
  %2130 = lshr i64 %2129, 32
  store i64 %2130, i64* %2125, align 8, !tbaa !2428
  %2131 = load i64, i64* %RBP
  %2132 = sub i64 %2131, 2716
  %2133 = load i64, i64* %PC
  %2134 = add i64 %2133, 6
  store i64 %2134, i64* %PC
  %2135 = inttoptr i64 %2132 to i32*
  %2136 = load i32, i32* %2135
  %2137 = zext i32 %2136 to i64
  store i64 %2137, i64* %RSI, align 8, !tbaa !2428
  %2138 = load i32, i32* %ESI
  %2139 = zext i32 %2138 to i64
  %2140 = load i64, i64* %PC
  %2141 = add i64 %2140, 2
  store i64 %2141, i64* %PC
  %2142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %2143 = bitcast %union.anon* %2142 to i32*
  %2144 = load i32, i32* %2143, align 8, !tbaa !2452
  %2145 = zext i32 %2144 to i64
  %2146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %2147 = bitcast %union.anon* %2146 to i32*
  %2148 = load i32, i32* %2147, align 8, !tbaa !2452
  %2149 = zext i32 %2148 to i64
  %2150 = shl i64 %2139, 32
  %2151 = ashr exact i64 %2150, 32
  %2152 = shl nuw i64 %2149, 32
  %2153 = or i64 %2152, %2145
  %2154 = sdiv i64 %2153, %2151
  %2155 = shl i64 %2154, 32
  %2156 = ashr exact i64 %2155, 32
  %2157 = icmp eq i64 %2154, %2156
  br i1 %2157, label %2162, label %2158

; <label>:2158:                                   ; preds = %block_401155
  %2159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2160 = load i64, i64* %2159, align 8, !tbaa !2428
  %2161 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2160, %struct.Memory* %MEMORY.13) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit6

; <label>:2162:                                   ; preds = %block_401155
  %2163 = srem i64 %2153, %2151
  %2164 = getelementptr inbounds %union.anon, %union.anon* %2142, i64 0, i32 0
  %2165 = and i64 %2154, 4294967295
  store i64 %2165, i64* %2164, align 8, !tbaa !2428
  %2166 = getelementptr inbounds %union.anon, %union.anon* %2146, i64 0, i32 0
  %2167 = and i64 %2163, 4294967295
  store i64 %2167, i64* %2166, align 8, !tbaa !2428
  %2168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2168, align 1, !tbaa !2432
  %2169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %2169, align 1, !tbaa !2446
  %2170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2170, align 1, !tbaa !2447
  %2171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2171, align 1, !tbaa !2448
  %2172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2172, align 1, !tbaa !2449
  %2173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2173, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit6

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit6: ; preds = %2158, %2162
  %2174 = phi %struct.Memory* [ %2161, %2158 ], [ %MEMORY.13, %2162 ]
  %2175 = load i64, i64* %RBP
  %2176 = sub i64 %2175, 8
  %2177 = load i64, i64* %PC
  %2178 = add i64 %2177, 4
  store i64 %2178, i64* %PC
  %2179 = inttoptr i64 %2176 to i32*
  %2180 = load i32, i32* %2179
  %2181 = sext i32 %2180 to i64
  store i64 %2181, i64* %RCX, align 8, !tbaa !2428
  %2182 = load i64, i64* %RBP
  %2183 = load i64, i64* %RCX
  %2184 = mul i64 %2183, 4
  %2185 = add i64 %2182, -2688
  %2186 = add i64 %2185, %2184
  %2187 = load i32, i32* %EDX
  %2188 = zext i32 %2187 to i64
  %2189 = load i64, i64* %PC
  %2190 = add i64 %2189, 7
  store i64 %2190, i64* %PC
  %2191 = inttoptr i64 %2186 to i32*
  store i32 %2187, i32* %2191
  %2192 = load i64, i64* %RBP
  %2193 = sub i64 %2192, 8
  %2194 = load i64, i64* %PC
  %2195 = add i64 %2194, 4
  store i64 %2195, i64* %PC
  %2196 = inttoptr i64 %2193 to i32*
  %2197 = load i32, i32* %2196
  %2198 = sext i32 %2197 to i64
  store i64 %2198, i64* %RCX, align 8, !tbaa !2428
  %2199 = load i64, i64* %RBP
  %2200 = load i64, i64* %RCX
  %2201 = mul i64 %2200, 4
  %2202 = add i64 %2199, -2688
  %2203 = add i64 %2202, %2201
  %2204 = load i64, i64* %PC
  %2205 = add i64 %2204, 8
  store i64 %2205, i64* %PC
  %2206 = inttoptr i64 %2203 to i32*
  %2207 = load i32, i32* %2206
  %2208 = sext i32 %2207 to i64
  store i64 %2208, i64* %RCX, align 8, !tbaa !2428
  %2209 = load i64, i64* %RCX
  %2210 = mul i64 %2209, 4
  %2211 = add i64 %2210, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %2212 = load i64, i64* %PC
  %2213 = add i64 %2212, 7
  store i64 %2213, i64* %PC
  %2214 = inttoptr i64 %2211 to i32*
  %2215 = load i32, i32* %2214
  %2216 = zext i32 %2215 to i64
  store i64 %2216, i64* %RDX, align 8, !tbaa !2428
  %2217 = load i64, i64* %RDX
  %2218 = load i64, i64* %RBP
  %2219 = sub i64 %2218, 16
  %2220 = load i64, i64* %PC
  %2221 = add i64 %2220, 3
  store i64 %2221, i64* %PC
  %2222 = trunc i64 %2217 to i32
  %2223 = inttoptr i64 %2219 to i32*
  %2224 = load i32, i32* %2223
  %2225 = xor i32 %2224, %2222
  %2226 = zext i32 %2225 to i64
  store i64 %2226, i64* %RDX, align 8, !tbaa !2428
  %2227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2227, align 1, !tbaa !2432
  %2228 = and i32 %2225, 255
  %2229 = call i32 @llvm.ctpop.i32(i32 %2228) #16
  %2230 = trunc i32 %2229 to i8
  %2231 = and i8 %2230, 1
  %2232 = xor i8 %2231, 1
  %2233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2232, i8* %2233, align 1, !tbaa !2446
  %2234 = icmp eq i32 %2225, 0
  %2235 = zext i1 %2234 to i8
  %2236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2235, i8* %2236, align 1, !tbaa !2448
  %2237 = lshr i32 %2225, 31
  %2238 = trunc i32 %2237 to i8
  %2239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2238, i8* %2239, align 1, !tbaa !2449
  %2240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2240, align 1, !tbaa !2450
  %2241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2241, align 1, !tbaa !2447
  %2242 = load i64, i64* %RBP
  %2243 = sub i64 %2242, 16
  %2244 = load i32, i32* %EDX
  %2245 = zext i32 %2244 to i64
  %2246 = load i64, i64* %PC
  %2247 = add i64 %2246, 3
  store i64 %2247, i64* %PC
  %2248 = inttoptr i64 %2243 to i32*
  store i32 %2244, i32* %2248
  br label %block_40119d

block_401727:                                     ; preds = %block_40171a
  %2249 = load i64, i64* %RBP
  %2250 = sub i64 %2249, 4
  %2251 = load i64, i64* %PC
  %2252 = add i64 %2251, 4
  store i64 %2252, i64* %PC
  %2253 = inttoptr i64 %2250 to i32*
  %2254 = load i32, i32* %2253
  %2255 = sext i32 %2254 to i64
  store i64 %2255, i64* %RAX, align 8, !tbaa !2428
  %2256 = load i64, i64* %RAX
  %2257 = mul i64 %2256, 4
  %2258 = add i64 %2257, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %2259 = load i64, i64* %PC
  %2260 = add i64 %2259, 8
  store i64 %2260, i64* %PC
  %2261 = inttoptr i64 %2258 to i32*
  %2262 = load i32, i32* %2261
  %2263 = sub i32 %2262, -1
  %2264 = icmp ult i32 %2262, -1
  %2265 = zext i1 %2264 to i8
  %2266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2265, i8* %2266, align 1, !tbaa !2432
  %2267 = and i32 %2263, 255
  %2268 = call i32 @llvm.ctpop.i32(i32 %2267) #16
  %2269 = trunc i32 %2268 to i8
  %2270 = and i8 %2269, 1
  %2271 = xor i8 %2270, 1
  %2272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2271, i8* %2272, align 1, !tbaa !2446
  %2273 = xor i32 %2262, -1
  %2274 = xor i32 %2273, %2263
  %2275 = lshr i32 %2274, 4
  %2276 = trunc i32 %2275 to i8
  %2277 = and i8 %2276, 1
  %2278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2277, i8* %2278, align 1, !tbaa !2447
  %2279 = icmp eq i32 %2263, 0
  %2280 = zext i1 %2279 to i8
  %2281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2280, i8* %2281, align 1, !tbaa !2448
  %2282 = lshr i32 %2263, 31
  %2283 = trunc i32 %2282 to i8
  %2284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2283, i8* %2284, align 1, !tbaa !2449
  %2285 = lshr i32 %2262, 31
  %2286 = xor i32 %2285, 1
  %2287 = xor i32 %2282, %2285
  %2288 = add nuw nsw i32 %2287, %2286
  %2289 = icmp eq i32 %2288, 2
  %2290 = zext i1 %2289 to i8
  %2291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2290, i8* %2291, align 1, !tbaa !2450
  %2292 = load i64, i64* %PC
  %2293 = add i64 %2292, 41
  %2294 = load i64, i64* %PC
  %2295 = add i64 %2294, 6
  %2296 = load i64, i64* %PC
  %2297 = add i64 %2296, 6
  store i64 %2297, i64* %PC
  %2298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2299 = load i8, i8* %2298, align 1, !tbaa !2448
  store i8 %2299, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2301 = icmp ne i8 %2299, 0
  %2302 = select i1 %2301, i64 %2293, i64 %2295
  store i64 %2302, i64* %2300, align 8, !tbaa !2428
  %2303 = load i8, i8* %BRANCH_TAKEN
  %2304 = icmp eq i8 %2303, 1
  %2305 = load i64, i64* %RBP
  %2306 = sub i64 %2305, 4
  %2307 = load i64, i64* %PC
  %2308 = add i64 %2307, 4
  store i64 %2308, i64* %PC
  %2309 = inttoptr i64 %2306 to i32*
  %2310 = load i32, i32* %2309
  %2311 = sext i32 %2310 to i64
  store i64 %2311, i64* %RAX, align 8, !tbaa !2428
  %2312 = load i64, i64* %RAX
  %2313 = mul i64 %2312, 4
  %2314 = add i64 %2313, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %2315 = load i64, i64* %PC
  br i1 %2304, label %block_40175c, label %block_401739

block_400f4e:                                     ; preds = %block_400f29
  %2316 = load i64, i64* %PC
  %2317 = add i64 %2316, 5
  store i64 %2317, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %2318 = load i64, i64* %RBP
  %2319 = sub i64 %2318, 1168
  %2320 = load i64, i64* %PC
  %2321 = add i64 %2320, 7
  store i64 %2321, i64* %PC
  store i64 %2319, i64* %RCX, align 8, !tbaa !2428
  %2322 = load i64, i64* %RBP
  %2323 = sub i64 %2322, 12
  %2324 = load i64, i64* %PC
  %2325 = add i64 %2324, 3
  store i64 %2325, i64* %PC
  %2326 = inttoptr i64 %2323 to i32*
  %2327 = load i32, i32* %2326
  %2328 = zext i32 %2327 to i64
  store i64 %2328, i64* %RDX, align 8, !tbaa !2428
  %2329 = load i64, i64* %RDX
  %2330 = load i64, i64* %PC
  %2331 = add i64 %2330, 3
  store i64 %2331, i64* %PC
  %2332 = trunc i64 %2329 to i32
  %2333 = add i32 1, %2332
  %2334 = zext i32 %2333 to i64
  store i64 %2334, i64* %RDX, align 8, !tbaa !2428
  %2335 = icmp ult i32 %2333, %2332
  %2336 = icmp ult i32 %2333, 1
  %2337 = or i1 %2335, %2336
  %2338 = zext i1 %2337 to i8
  %2339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2338, i8* %2339, align 1, !tbaa !2432
  %2340 = and i32 %2333, 255
  %2341 = call i32 @llvm.ctpop.i32(i32 %2340) #16
  %2342 = trunc i32 %2341 to i8
  %2343 = and i8 %2342, 1
  %2344 = xor i8 %2343, 1
  %2345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2344, i8* %2345, align 1, !tbaa !2446
  %2346 = xor i64 1, %2329
  %2347 = trunc i64 %2346 to i32
  %2348 = xor i32 %2347, %2333
  %2349 = lshr i32 %2348, 4
  %2350 = trunc i32 %2349 to i8
  %2351 = and i8 %2350, 1
  %2352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2351, i8* %2352, align 1, !tbaa !2447
  %2353 = icmp eq i32 %2333, 0
  %2354 = zext i1 %2353 to i8
  %2355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2354, i8* %2355, align 1, !tbaa !2448
  %2356 = lshr i32 %2333, 31
  %2357 = trunc i32 %2356 to i8
  %2358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2357, i8* %2358, align 1, !tbaa !2449
  %2359 = lshr i32 %2332, 31
  %2360 = xor i32 %2356, %2359
  %2361 = add nuw nsw i32 %2360, %2356
  %2362 = icmp eq i32 %2361, 2
  %2363 = zext i1 %2362 to i8
  %2364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2363, i8* %2364, align 1, !tbaa !2450
  %2365 = load i64, i64* %RDX
  %2366 = load i64, i64* %RBP
  %2367 = sub i64 %2366, 4
  %2368 = load i64, i64* %PC
  %2369 = add i64 %2368, 3
  store i64 %2369, i64* %PC
  %2370 = trunc i64 %2365 to i32
  %2371 = inttoptr i64 %2367 to i32*
  %2372 = load i32, i32* %2371
  %2373 = sub i32 %2370, %2372
  %2374 = zext i32 %2373 to i64
  store i64 %2374, i64* %RDX, align 8, !tbaa !2428
  %2375 = icmp ult i32 %2370, %2372
  %2376 = zext i1 %2375 to i8
  %2377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2376, i8* %2377, align 1, !tbaa !2432
  %2378 = and i32 %2373, 255
  %2379 = call i32 @llvm.ctpop.i32(i32 %2378) #16
  %2380 = trunc i32 %2379 to i8
  %2381 = and i8 %2380, 1
  %2382 = xor i8 %2381, 1
  %2383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2382, i8* %2383, align 1, !tbaa !2446
  %2384 = xor i32 %2372, %2370
  %2385 = xor i32 %2384, %2373
  %2386 = lshr i32 %2385, 4
  %2387 = trunc i32 %2386 to i8
  %2388 = and i8 %2387, 1
  %2389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2388, i8* %2389, align 1, !tbaa !2447
  %2390 = icmp eq i32 %2373, 0
  %2391 = zext i1 %2390 to i8
  %2392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2391, i8* %2392, align 1, !tbaa !2448
  %2393 = lshr i32 %2373, 31
  %2394 = trunc i32 %2393 to i8
  %2395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2394, i8* %2395, align 1, !tbaa !2449
  %2396 = lshr i32 %2370, 31
  %2397 = lshr i32 %2372, 31
  %2398 = xor i32 %2397, %2396
  %2399 = xor i32 %2393, %2396
  %2400 = add nuw nsw i32 %2399, %2398
  %2401 = icmp eq i32 %2400, 2
  %2402 = zext i1 %2401 to i8
  %2403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2402, i8* %2403, align 1, !tbaa !2450
  %2404 = load i32, i32* %EDX
  %2405 = zext i32 %2404 to i64
  %2406 = load i64, i64* %PC
  %2407 = add i64 %2406, 3
  store i64 %2407, i64* %PC
  %2408 = shl i64 %2405, 32
  %2409 = ashr exact i64 %2408, 32
  store i64 %2409, i64* %RSI, align 8, !tbaa !2428
  %2410 = load i64, i64* %RBP
  %2411 = load i64, i64* %RSI
  %2412 = mul i64 %2411, 4
  %2413 = add i64 %2410, -1488
  %2414 = add i64 %2413, %2412
  %2415 = load i64, i64* %PC
  %2416 = add i64 %2415, 7
  store i64 %2416, i64* %PC
  %2417 = inttoptr i64 %2414 to i32*
  %2418 = load i32, i32* %2417
  %2419 = zext i32 %2418 to i64
  store i64 %2419, i64* %RDX, align 8, !tbaa !2428
  %2420 = load i64, i64* %RBP
  %2421 = sub i64 %2420, 12
  %2422 = load i64, i64* %PC
  %2423 = add i64 %2422, 3
  store i64 %2423, i64* %PC
  %2424 = inttoptr i64 %2421 to i32*
  %2425 = load i32, i32* %2424
  %2426 = zext i32 %2425 to i64
  store i64 %2426, i64* %RDI, align 8, !tbaa !2428
  %2427 = load i64, i64* %RDI
  %2428 = load i64, i64* %PC
  %2429 = add i64 %2428, 3
  store i64 %2429, i64* %PC
  %2430 = trunc i64 %2427 to i32
  %2431 = add i32 1, %2430
  %2432 = zext i32 %2431 to i64
  store i64 %2432, i64* %RDI, align 8, !tbaa !2428
  %2433 = icmp ult i32 %2431, %2430
  %2434 = icmp ult i32 %2431, 1
  %2435 = or i1 %2433, %2434
  %2436 = zext i1 %2435 to i8
  %2437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2436, i8* %2437, align 1, !tbaa !2432
  %2438 = and i32 %2431, 255
  %2439 = call i32 @llvm.ctpop.i32(i32 %2438) #16
  %2440 = trunc i32 %2439 to i8
  %2441 = and i8 %2440, 1
  %2442 = xor i8 %2441, 1
  %2443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2442, i8* %2443, align 1, !tbaa !2446
  %2444 = xor i64 1, %2427
  %2445 = trunc i64 %2444 to i32
  %2446 = xor i32 %2445, %2431
  %2447 = lshr i32 %2446, 4
  %2448 = trunc i32 %2447 to i8
  %2449 = and i8 %2448, 1
  %2450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2449, i8* %2450, align 1, !tbaa !2447
  %2451 = icmp eq i32 %2431, 0
  %2452 = zext i1 %2451 to i8
  %2453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2452, i8* %2453, align 1, !tbaa !2448
  %2454 = lshr i32 %2431, 31
  %2455 = trunc i32 %2454 to i8
  %2456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2455, i8* %2456, align 1, !tbaa !2449
  %2457 = lshr i32 %2430, 31
  %2458 = xor i32 %2454, %2457
  %2459 = add nuw nsw i32 %2458, %2454
  %2460 = icmp eq i32 %2459, 2
  %2461 = zext i1 %2460 to i8
  %2462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2461, i8* %2462, align 1, !tbaa !2450
  %2463 = load i32, i32* %EDI
  %2464 = zext i32 %2463 to i64
  %2465 = load i64, i64* %PC
  %2466 = add i64 %2465, 3
  store i64 %2466, i64* %PC
  %2467 = shl i64 %2464, 32
  %2468 = ashr exact i64 %2467, 32
  store i64 %2468, i64* %RSI, align 8, !tbaa !2428
  %2469 = load i64, i64* %RSI
  %2470 = load i64, i64* %PC
  %2471 = add i64 %2470, 4
  store i64 %2471, i64* %PC
  %2472 = shl i64 %2469, 5
  %2473 = icmp slt i64 %2472, 0
  %2474 = shl i64 %2472, 1
  store i64 %2474, i64* %RSI, align 8, !tbaa !2428
  %2475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2476 = zext i1 %2473 to i8
  store i8 %2476, i8* %2475, align 1, !tbaa !2451
  %2477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2478 = trunc i64 %2474 to i32
  %2479 = and i32 %2478, 254
  %2480 = call i32 @llvm.ctpop.i32(i32 %2479) #16
  %2481 = trunc i32 %2480 to i8
  %2482 = and i8 %2481, 1
  %2483 = xor i8 %2482, 1
  store i8 %2483, i8* %2477, align 1, !tbaa !2451
  %2484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2484, align 1, !tbaa !2451
  %2485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2486 = icmp eq i64 %2474, 0
  %2487 = zext i1 %2486 to i8
  store i8 %2487, i8* %2485, align 1, !tbaa !2451
  %2488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2489 = lshr i64 %2474, 63
  %2490 = trunc i64 %2489 to i8
  store i8 %2490, i8* %2488, align 1, !tbaa !2451
  %2491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2491, align 1, !tbaa !2451
  %2492 = load i64, i64* %RCX
  %2493 = load i64, i64* %RSI
  %2494 = load i64, i64* %PC
  %2495 = add i64 %2494, 3
  store i64 %2495, i64* %PC
  %2496 = add i64 %2493, %2492
  store i64 %2496, i64* %RCX, align 8, !tbaa !2428
  %2497 = icmp ult i64 %2496, %2492
  %2498 = icmp ult i64 %2496, %2493
  %2499 = or i1 %2497, %2498
  %2500 = zext i1 %2499 to i8
  %2501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2500, i8* %2501, align 1, !tbaa !2432
  %2502 = trunc i64 %2496 to i32
  %2503 = and i32 %2502, 255
  %2504 = call i32 @llvm.ctpop.i32(i32 %2503) #16
  %2505 = trunc i32 %2504 to i8
  %2506 = and i8 %2505, 1
  %2507 = xor i8 %2506, 1
  %2508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2507, i8* %2508, align 1, !tbaa !2446
  %2509 = xor i64 %2493, %2492
  %2510 = xor i64 %2509, %2496
  %2511 = lshr i64 %2510, 4
  %2512 = trunc i64 %2511 to i8
  %2513 = and i8 %2512, 1
  %2514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2513, i8* %2514, align 1, !tbaa !2447
  %2515 = icmp eq i64 %2496, 0
  %2516 = zext i1 %2515 to i8
  %2517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2516, i8* %2517, align 1, !tbaa !2448
  %2518 = lshr i64 %2496, 63
  %2519 = trunc i64 %2518 to i8
  %2520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2519, i8* %2520, align 1, !tbaa !2449
  %2521 = lshr i64 %2492, 63
  %2522 = lshr i64 %2493, 63
  %2523 = xor i64 %2518, %2521
  %2524 = xor i64 %2518, %2522
  %2525 = add nuw nsw i64 %2523, %2524
  %2526 = icmp eq i64 %2525, 2
  %2527 = zext i1 %2526 to i8
  %2528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2527, i8* %2528, align 1, !tbaa !2450
  %2529 = load i64, i64* %RBP
  %2530 = sub i64 %2529, 4
  %2531 = load i64, i64* %PC
  %2532 = add i64 %2531, 4
  store i64 %2532, i64* %PC
  %2533 = inttoptr i64 %2530 to i32*
  %2534 = load i32, i32* %2533
  %2535 = sext i32 %2534 to i64
  store i64 %2535, i64* %RSI, align 8, !tbaa !2428
  %2536 = load i64, i64* %RCX
  %2537 = load i64, i64* %RSI
  %2538 = mul i64 %2537, 4
  %2539 = add i64 %2538, %2536
  %2540 = load i64, i64* %PC
  %2541 = add i64 %2540, 4
  store i64 %2541, i64* %PC
  %2542 = inttoptr i64 %2539 to i32*
  %2543 = load i32, i32* %2542
  %2544 = sext i32 %2543 to i64
  store i64 %2544, i64* %RCX, align 8, !tbaa !2428
  %2545 = load i64, i64* %RDX
  %2546 = load i64, i64* %RCX
  %2547 = mul i64 %2546, 4
  %2548 = add i64 %2547, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %2549 = load i64, i64* %PC
  %2550 = add i64 %2549, 7
  store i64 %2550, i64* %PC
  %2551 = trunc i64 %2545 to i32
  %2552 = inttoptr i64 %2548 to i32*
  %2553 = load i32, i32* %2552
  %2554 = add i32 %2553, %2551
  %2555 = zext i32 %2554 to i64
  store i64 %2555, i64* %RDX, align 8, !tbaa !2428
  %2556 = icmp ult i32 %2554, %2551
  %2557 = icmp ult i32 %2554, %2553
  %2558 = or i1 %2556, %2557
  %2559 = zext i1 %2558 to i8
  %2560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2559, i8* %2560, align 1, !tbaa !2432
  %2561 = and i32 %2554, 255
  %2562 = call i32 @llvm.ctpop.i32(i32 %2561) #16
  %2563 = trunc i32 %2562 to i8
  %2564 = and i8 %2563, 1
  %2565 = xor i8 %2564, 1
  %2566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2565, i8* %2566, align 1, !tbaa !2446
  %2567 = xor i32 %2553, %2551
  %2568 = xor i32 %2567, %2554
  %2569 = lshr i32 %2568, 4
  %2570 = trunc i32 %2569 to i8
  %2571 = and i8 %2570, 1
  %2572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2571, i8* %2572, align 1, !tbaa !2447
  %2573 = icmp eq i32 %2554, 0
  %2574 = zext i1 %2573 to i8
  %2575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2574, i8* %2575, align 1, !tbaa !2448
  %2576 = lshr i32 %2554, 31
  %2577 = trunc i32 %2576 to i8
  %2578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2577, i8* %2578, align 1, !tbaa !2449
  %2579 = lshr i32 %2551, 31
  %2580 = lshr i32 %2553, 31
  %2581 = xor i32 %2576, %2579
  %2582 = xor i32 %2576, %2580
  %2583 = add nuw nsw i32 %2581, %2582
  %2584 = icmp eq i32 %2583, 2
  %2585 = zext i1 %2584 to i8
  %2586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2585, i8* %2586, align 1, !tbaa !2450
  %2587 = load i64, i64* %RBP
  %2588 = sub i64 %2587, 2708
  %2589 = load i32, i32* %EAX
  %2590 = zext i32 %2589 to i64
  %2591 = load i64, i64* %PC
  %2592 = add i64 %2591, 6
  store i64 %2592, i64* %PC
  %2593 = inttoptr i64 %2588 to i32*
  store i32 %2589, i32* %2593
  %2594 = load i32, i32* %EDX
  %2595 = zext i32 %2594 to i64
  %2596 = load i64, i64* %PC
  %2597 = add i64 %2596, 2
  store i64 %2597, i64* %PC
  %2598 = and i64 %2595, 4294967295
  store i64 %2598, i64* %RAX, align 8, !tbaa !2428
  %2599 = load i64, i64* %PC
  %2600 = add i64 %2599, 1
  store i64 %2600, i64* %PC
  %2601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %2602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %2603 = bitcast %union.anon* %2602 to i32*
  %2604 = load i32, i32* %2603, align 8, !tbaa !2452
  %2605 = sext i32 %2604 to i64
  %2606 = lshr i64 %2605, 32
  store i64 %2606, i64* %2601, align 8, !tbaa !2428
  %2607 = load i64, i64* %RBP
  %2608 = sub i64 %2607, 2708
  %2609 = load i64, i64* %PC
  %2610 = add i64 %2609, 6
  store i64 %2610, i64* %PC
  %2611 = inttoptr i64 %2608 to i32*
  %2612 = load i32, i32* %2611
  %2613 = zext i32 %2612 to i64
  store i64 %2613, i64* %RDI, align 8, !tbaa !2428
  %2614 = load i32, i32* %EDI
  %2615 = zext i32 %2614 to i64
  %2616 = load i64, i64* %PC
  %2617 = add i64 %2616, 2
  store i64 %2617, i64* %PC
  %2618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %2619 = bitcast %union.anon* %2618 to i32*
  %2620 = load i32, i32* %2619, align 8, !tbaa !2452
  %2621 = zext i32 %2620 to i64
  %2622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %2623 = bitcast %union.anon* %2622 to i32*
  %2624 = load i32, i32* %2623, align 8, !tbaa !2452
  %2625 = zext i32 %2624 to i64
  %2626 = shl i64 %2615, 32
  %2627 = ashr exact i64 %2626, 32
  %2628 = shl nuw i64 %2625, 32
  %2629 = or i64 %2628, %2621
  %2630 = sdiv i64 %2629, %2627
  %2631 = shl i64 %2630, 32
  %2632 = ashr exact i64 %2631, 32
  %2633 = icmp eq i64 %2630, %2632
  br i1 %2633, label %2638, label %2634

; <label>:2634:                                   ; preds = %block_400f4e
  %2635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2636 = load i64, i64* %2635, align 8, !tbaa !2428
  %2637 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2636, %struct.Memory* %MEMORY.16) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5

; <label>:2638:                                   ; preds = %block_400f4e
  %2639 = srem i64 %2629, %2627
  %2640 = getelementptr inbounds %union.anon, %union.anon* %2618, i64 0, i32 0
  %2641 = and i64 %2630, 4294967295
  store i64 %2641, i64* %2640, align 8, !tbaa !2428
  %2642 = getelementptr inbounds %union.anon, %union.anon* %2622, i64 0, i32 0
  %2643 = and i64 %2639, 4294967295
  store i64 %2643, i64* %2642, align 8, !tbaa !2428
  %2644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2644, align 1, !tbaa !2432
  %2645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %2645, align 1, !tbaa !2446
  %2646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2646, align 1, !tbaa !2447
  %2647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2647, align 1, !tbaa !2448
  %2648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2648, align 1, !tbaa !2449
  %2649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2649, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5: ; preds = %2634, %2638
  %2650 = phi %struct.Memory* [ %2637, %2634 ], [ %MEMORY.16, %2638 ]
  %2651 = load i32, i32* %EDX
  %2652 = zext i32 %2651 to i64
  %2653 = load i64, i64* %PC
  %2654 = add i64 %2653, 3
  store i64 %2654, i64* %PC
  %2655 = shl i64 %2652, 32
  %2656 = ashr exact i64 %2655, 32
  store i64 %2656, i64* %RCX, align 8, !tbaa !2428
  %2657 = load i64, i64* %RCX
  %2658 = mul i64 %2657, 4
  %2659 = add i64 %2658, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %2660 = load i64, i64* %PC
  %2661 = add i64 %2660, 7
  store i64 %2661, i64* %PC
  %2662 = inttoptr i64 %2659 to i32*
  %2663 = load i32, i32* %2662
  %2664 = zext i32 %2663 to i64
  store i64 %2664, i64* %RDX, align 8, !tbaa !2428
  %2665 = bitcast i32* %R8D to i64*
  %2666 = load i64, i64* %RBP
  %2667 = sub i64 %2666, 12
  %2668 = load i64, i64* %PC
  %2669 = add i64 %2668, 4
  store i64 %2669, i64* %PC
  %2670 = inttoptr i64 %2667 to i32*
  %2671 = load i32, i32* %2670
  %2672 = zext i32 %2671 to i64
  store i64 %2672, i64* %2665, align 8, !tbaa !2428
  %2673 = bitcast i32* %R8D to i64*
  %2674 = load i32, i32* %R8D
  %2675 = zext i32 %2674 to i64
  %2676 = load i64, i64* %PC
  %2677 = add i64 %2676, 4
  store i64 %2677, i64* %PC
  %2678 = add i32 1, %2674
  %2679 = zext i32 %2678 to i64
  store i64 %2679, i64* %2673, align 8, !tbaa !2428
  %2680 = icmp ult i32 %2678, %2674
  %2681 = icmp ult i32 %2678, 1
  %2682 = or i1 %2680, %2681
  %2683 = zext i1 %2682 to i8
  %2684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2683, i8* %2684, align 1, !tbaa !2432
  %2685 = and i32 %2678, 255
  %2686 = call i32 @llvm.ctpop.i32(i32 %2685) #16
  %2687 = trunc i32 %2686 to i8
  %2688 = and i8 %2687, 1
  %2689 = xor i8 %2688, 1
  %2690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2689, i8* %2690, align 1, !tbaa !2446
  %2691 = xor i64 1, %2675
  %2692 = trunc i64 %2691 to i32
  %2693 = xor i32 %2692, %2678
  %2694 = lshr i32 %2693, 4
  %2695 = trunc i32 %2694 to i8
  %2696 = and i8 %2695, 1
  %2697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2696, i8* %2697, align 1, !tbaa !2447
  %2698 = icmp eq i32 %2678, 0
  %2699 = zext i1 %2698 to i8
  %2700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2699, i8* %2700, align 1, !tbaa !2448
  %2701 = lshr i32 %2678, 31
  %2702 = trunc i32 %2701 to i8
  %2703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2702, i8* %2703, align 1, !tbaa !2449
  %2704 = lshr i32 %2674, 31
  %2705 = xor i32 %2701, %2704
  %2706 = add nuw nsw i32 %2705, %2701
  %2707 = icmp eq i32 %2706, 2
  %2708 = zext i1 %2707 to i8
  %2709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2708, i8* %2709, align 1, !tbaa !2450
  %2710 = load i32, i32* %R8D
  %2711 = zext i32 %2710 to i64
  %2712 = load i64, i64* %PC
  %2713 = add i64 %2712, 3
  store i64 %2713, i64* %PC
  %2714 = shl i64 %2711, 32
  %2715 = ashr exact i64 %2714, 32
  store i64 %2715, i64* %RCX, align 8, !tbaa !2428
  %2716 = load i64, i64* %RDX
  %2717 = load i64, i64* %RBP
  %2718 = load i64, i64* %RCX
  %2719 = mul i64 %2718, 4
  %2720 = add i64 %2717, -1248
  %2721 = add i64 %2720, %2719
  %2722 = load i64, i64* %PC
  %2723 = add i64 %2722, 7
  store i64 %2723, i64* %PC
  %2724 = trunc i64 %2716 to i32
  %2725 = inttoptr i64 %2721 to i32*
  %2726 = load i32, i32* %2725
  %2727 = xor i32 %2726, %2724
  %2728 = zext i32 %2727 to i64
  store i64 %2728, i64* %RDX, align 8, !tbaa !2428
  %2729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2729, align 1, !tbaa !2432
  %2730 = and i32 %2727, 255
  %2731 = call i32 @llvm.ctpop.i32(i32 %2730) #16
  %2732 = trunc i32 %2731 to i8
  %2733 = and i8 %2732, 1
  %2734 = xor i8 %2733, 1
  %2735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2734, i8* %2735, align 1, !tbaa !2446
  %2736 = icmp eq i32 %2727, 0
  %2737 = zext i1 %2736 to i8
  %2738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2737, i8* %2738, align 1, !tbaa !2448
  %2739 = lshr i32 %2727, 31
  %2740 = trunc i32 %2739 to i8
  %2741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2740, i8* %2741, align 1, !tbaa !2449
  %2742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2742, align 1, !tbaa !2450
  %2743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2743, align 1, !tbaa !2447
  %2744 = load i64, i64* %RBP
  %2745 = load i64, i64* %RCX
  %2746 = mul i64 %2745, 4
  %2747 = add i64 %2744, -1248
  %2748 = add i64 %2747, %2746
  %2749 = load i32, i32* %EDX
  %2750 = zext i32 %2749 to i64
  %2751 = load i64, i64* %PC
  %2752 = add i64 %2751, 7
  store i64 %2752, i64* %PC
  %2753 = inttoptr i64 %2748 to i32*
  store i32 %2749, i32* %2753
  br label %block_400fc0

block_401143:                                     ; preds = %block_40112f
  %2754 = sub i64 %3579, 8
  %2755 = load i64, i64* %PC
  %2756 = add i64 %2755, 4
  store i64 %2756, i64* %PC
  %2757 = inttoptr i64 %2754 to i32*
  %2758 = load i32, i32* %2757
  %2759 = sext i32 %2758 to i64
  store i64 %2759, i64* %RAX, align 8, !tbaa !2428
  %2760 = load i64, i64* %RBP
  %2761 = load i64, i64* %RAX
  %2762 = mul i64 %2761, 4
  %2763 = add i64 %2760, -2688
  %2764 = add i64 %2763, %2762
  %2765 = load i64, i64* %PC
  %2766 = add i64 %2765, 8
  store i64 %2766, i64* %PC
  %2767 = inttoptr i64 %2764 to i32*
  %2768 = load i32, i32* %2767
  %2769 = sub i32 %2768, -1
  %2770 = icmp ult i32 %2768, -1
  %2771 = zext i1 %2770 to i8
  %2772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2771, i8* %2772, align 1, !tbaa !2432
  %2773 = and i32 %2769, 255
  %2774 = call i32 @llvm.ctpop.i32(i32 %2773) #16
  %2775 = trunc i32 %2774 to i8
  %2776 = and i8 %2775, 1
  %2777 = xor i8 %2776, 1
  %2778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2777, i8* %2778, align 1, !tbaa !2446
  %2779 = xor i32 %2768, -1
  %2780 = xor i32 %2779, %2769
  %2781 = lshr i32 %2780, 4
  %2782 = trunc i32 %2781 to i8
  %2783 = and i8 %2782, 1
  %2784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2783, i8* %2784, align 1, !tbaa !2447
  %2785 = icmp eq i32 %2769, 0
  %2786 = zext i1 %2785 to i8
  %2787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2786, i8* %2787, align 1, !tbaa !2448
  %2788 = lshr i32 %2769, 31
  %2789 = trunc i32 %2788 to i8
  %2790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2789, i8* %2790, align 1, !tbaa !2449
  %2791 = lshr i32 %2768, 31
  %2792 = xor i32 %2791, 1
  %2793 = xor i32 %2788, %2791
  %2794 = add nuw nsw i32 %2793, %2792
  %2795 = icmp eq i32 %2794, 2
  %2796 = zext i1 %2795 to i8
  %2797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2796, i8* %2797, align 1, !tbaa !2450
  %2798 = load i64, i64* %PC
  %2799 = add i64 %2798, 78
  %2800 = load i64, i64* %PC
  %2801 = add i64 %2800, 6
  %2802 = load i64, i64* %PC
  %2803 = add i64 %2802, 6
  store i64 %2803, i64* %PC
  %2804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2805 = load i8, i8* %2804, align 1, !tbaa !2448
  store i8 %2805, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2807 = icmp ne i8 %2805, 0
  %2808 = select i1 %2807, i64 %2799, i64 %2801
  store i64 %2808, i64* %2806, align 8, !tbaa !2428
  %2809 = load i8, i8* %BRANCH_TAKEN
  %2810 = icmp eq i8 %2809, 1
  br i1 %2810, label %block_40119d, label %block_401155

block_401539:                                     ; preds = %block_401527
  %2811 = load i64, i64* %PC
  %2812 = add i64 %2811, 5
  store i64 %2812, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %2813 = load i64, i64* %RBP
  %2814 = sub i64 %2813, 8
  %2815 = load i64, i64* %PC
  %2816 = add i64 %2815, 4
  store i64 %2816, i64* %PC
  %2817 = inttoptr i64 %2814 to i32*
  %2818 = load i32, i32* %2817
  %2819 = sext i32 %2818 to i64
  store i64 %2819, i64* %RCX, align 8, !tbaa !2428
  %2820 = load i64, i64* %RBP
  %2821 = load i64, i64* %RCX
  %2822 = mul i64 %2821, 4
  %2823 = add i64 %2820, -1616
  %2824 = add i64 %2823, %2822
  %2825 = load i64, i64* %PC
  %2826 = add i64 %2825, 7
  store i64 %2826, i64* %PC
  %2827 = inttoptr i64 %2824 to i32*
  %2828 = load i32, i32* %2827
  %2829 = zext i32 %2828 to i64
  store i64 %2829, i64* %RDX, align 8, !tbaa !2428
  %2830 = load i64, i64* %RBP
  %2831 = sub i64 %2830, 8
  %2832 = load i64, i64* %PC
  %2833 = add i64 %2832, 3
  store i64 %2833, i64* %PC
  %2834 = inttoptr i64 %2831 to i32*
  %2835 = load i32, i32* %2834
  %2836 = zext i32 %2835 to i64
  store i64 %2836, i64* %RSI, align 8, !tbaa !2428
  %2837 = load i64, i64* %RBP
  %2838 = sub i64 %2837, 4
  %2839 = load i64, i64* %PC
  %2840 = add i64 %2839, 4
  store i64 %2840, i64* %PC
  %2841 = inttoptr i64 %2838 to i32*
  %2842 = load i32, i32* %2841
  %2843 = sext i32 %2842 to i64
  store i64 %2843, i64* %RCX, align 8, !tbaa !2428
  %2844 = load i64, i64* %RSI
  %2845 = load i64, i64* %RBP
  %2846 = load i64, i64* %RCX
  %2847 = mul i64 %2846, 4
  %2848 = add i64 %2845, -1536
  %2849 = add i64 %2848, %2847
  %2850 = load i64, i64* %PC
  %2851 = add i64 %2850, 8
  store i64 %2851, i64* %PC
  %2852 = inttoptr i64 %2849 to i32*
  %2853 = load i32, i32* %2852
  %2854 = shl i64 %2844, 32
  %2855 = ashr exact i64 %2854, 32
  %2856 = sext i32 %2853 to i64
  %2857 = mul nsw i64 %2856, %2855
  %2858 = trunc i64 %2857 to i32
  %2859 = and i64 %2857, 4294967295
  store i64 %2859, i64* %RSI, align 8, !tbaa !2428
  %2860 = shl i64 %2857, 32
  %2861 = ashr exact i64 %2860, 32
  %2862 = icmp ne i64 %2861, %2857
  %2863 = zext i1 %2862 to i8
  %2864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2863, i8* %2864, align 1, !tbaa !2432
  %2865 = and i32 %2858, 255
  %2866 = call i32 @llvm.ctpop.i32(i32 %2865) #16
  %2867 = trunc i32 %2866 to i8
  %2868 = and i8 %2867, 1
  %2869 = xor i8 %2868, 1
  %2870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2869, i8* %2870, align 1, !tbaa !2446
  %2871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2871, align 1, !tbaa !2447
  %2872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2872, align 1, !tbaa !2448
  %2873 = lshr i32 %2858, 31
  %2874 = trunc i32 %2873 to i8
  %2875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2874, i8* %2875, align 1, !tbaa !2449
  %2876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2863, i8* %2876, align 1, !tbaa !2450
  %2877 = load i64, i64* %RDX
  %2878 = load i32, i32* %ESI
  %2879 = zext i32 %2878 to i64
  %2880 = load i64, i64* %PC
  %2881 = add i64 %2880, 2
  store i64 %2881, i64* %PC
  %2882 = trunc i64 %2877 to i32
  %2883 = add i32 %2878, %2882
  %2884 = zext i32 %2883 to i64
  store i64 %2884, i64* %RDX, align 8, !tbaa !2428
  %2885 = icmp ult i32 %2883, %2882
  %2886 = icmp ult i32 %2883, %2878
  %2887 = or i1 %2885, %2886
  %2888 = zext i1 %2887 to i8
  %2889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2888, i8* %2889, align 1, !tbaa !2432
  %2890 = and i32 %2883, 255
  %2891 = call i32 @llvm.ctpop.i32(i32 %2890) #16
  %2892 = trunc i32 %2891 to i8
  %2893 = and i8 %2892, 1
  %2894 = xor i8 %2893, 1
  %2895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2894, i8* %2895, align 1, !tbaa !2446
  %2896 = xor i64 %2879, %2877
  %2897 = trunc i64 %2896 to i32
  %2898 = xor i32 %2897, %2883
  %2899 = lshr i32 %2898, 4
  %2900 = trunc i32 %2899 to i8
  %2901 = and i8 %2900, 1
  %2902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2901, i8* %2902, align 1, !tbaa !2447
  %2903 = icmp eq i32 %2883, 0
  %2904 = zext i1 %2903 to i8
  %2905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2904, i8* %2905, align 1, !tbaa !2448
  %2906 = lshr i32 %2883, 31
  %2907 = trunc i32 %2906 to i8
  %2908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2907, i8* %2908, align 1, !tbaa !2449
  %2909 = lshr i32 %2882, 31
  %2910 = lshr i32 %2878, 31
  %2911 = xor i32 %2906, %2909
  %2912 = xor i32 %2906, %2910
  %2913 = add nuw nsw i32 %2911, %2912
  %2914 = icmp eq i32 %2913, 2
  %2915 = zext i1 %2914 to i8
  %2916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2915, i8* %2916, align 1, !tbaa !2450
  %2917 = load i64, i64* %RBP
  %2918 = sub i64 %2917, 2724
  %2919 = load i32, i32* %EAX
  %2920 = zext i32 %2919 to i64
  %2921 = load i64, i64* %PC
  %2922 = add i64 %2921, 6
  store i64 %2922, i64* %PC
  %2923 = inttoptr i64 %2918 to i32*
  store i32 %2919, i32* %2923
  %2924 = load i32, i32* %EDX
  %2925 = zext i32 %2924 to i64
  %2926 = load i64, i64* %PC
  %2927 = add i64 %2926, 2
  store i64 %2927, i64* %PC
  %2928 = and i64 %2925, 4294967295
  store i64 %2928, i64* %RAX, align 8, !tbaa !2428
  %2929 = load i64, i64* %PC
  %2930 = add i64 %2929, 1
  store i64 %2930, i64* %PC
  %2931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %2932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %2933 = bitcast %union.anon* %2932 to i32*
  %2934 = load i32, i32* %2933, align 8, !tbaa !2452
  %2935 = sext i32 %2934 to i64
  %2936 = lshr i64 %2935, 32
  store i64 %2936, i64* %2931, align 8, !tbaa !2428
  %2937 = load i64, i64* %RBP
  %2938 = sub i64 %2937, 2724
  %2939 = load i64, i64* %PC
  %2940 = add i64 %2939, 6
  store i64 %2940, i64* %PC
  %2941 = inttoptr i64 %2938 to i32*
  %2942 = load i32, i32* %2941
  %2943 = zext i32 %2942 to i64
  store i64 %2943, i64* %RSI, align 8, !tbaa !2428
  %2944 = load i32, i32* %ESI
  %2945 = zext i32 %2944 to i64
  %2946 = load i64, i64* %PC
  %2947 = add i64 %2946, 2
  store i64 %2947, i64* %PC
  %2948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %2949 = bitcast %union.anon* %2948 to i32*
  %2950 = load i32, i32* %2949, align 8, !tbaa !2452
  %2951 = zext i32 %2950 to i64
  %2952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %2953 = bitcast %union.anon* %2952 to i32*
  %2954 = load i32, i32* %2953, align 8, !tbaa !2452
  %2955 = zext i32 %2954 to i64
  %2956 = shl i64 %2945, 32
  %2957 = ashr exact i64 %2956, 32
  %2958 = shl nuw i64 %2955, 32
  %2959 = or i64 %2958, %2951
  %2960 = sdiv i64 %2959, %2957
  %2961 = shl i64 %2960, 32
  %2962 = ashr exact i64 %2961, 32
  %2963 = icmp eq i64 %2960, %2962
  br i1 %2963, label %2968, label %2964

; <label>:2964:                                   ; preds = %block_401539
  %2965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2966 = load i64, i64* %2965, align 8, !tbaa !2428
  %2967 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2966, %struct.Memory* %MEMORY.34) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

; <label>:2968:                                   ; preds = %block_401539
  %2969 = srem i64 %2959, %2957
  %2970 = getelementptr inbounds %union.anon, %union.anon* %2948, i64 0, i32 0
  %2971 = and i64 %2960, 4294967295
  store i64 %2971, i64* %2970, align 8, !tbaa !2428
  %2972 = getelementptr inbounds %union.anon, %union.anon* %2952, i64 0, i32 0
  %2973 = and i64 %2969, 4294967295
  store i64 %2973, i64* %2972, align 8, !tbaa !2428
  %2974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2974, align 1, !tbaa !2432
  %2975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %2975, align 1, !tbaa !2446
  %2976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2976, align 1, !tbaa !2447
  %2977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2977, align 1, !tbaa !2448
  %2978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2978, align 1, !tbaa !2449
  %2979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2979, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4: ; preds = %2964, %2968
  %2980 = phi %struct.Memory* [ %2967, %2964 ], [ %MEMORY.34, %2968 ]
  %2981 = load i32, i32* %EDX
  %2982 = zext i32 %2981 to i64
  %2983 = load i64, i64* %PC
  %2984 = add i64 %2983, 3
  store i64 %2984, i64* %PC
  %2985 = shl i64 %2982, 32
  %2986 = ashr exact i64 %2985, 32
  store i64 %2986, i64* %RCX, align 8, !tbaa !2428
  %2987 = load i64, i64* %RCX
  %2988 = mul i64 %2987, 4
  %2989 = add i64 %2988, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %2990 = load i64, i64* %PC
  %2991 = add i64 %2990, 7
  store i64 %2991, i64* %PC
  %2992 = inttoptr i64 %2989 to i32*
  %2993 = load i32, i32* %2992
  %2994 = zext i32 %2993 to i64
  store i64 %2994, i64* %RDX, align 8, !tbaa !2428
  %2995 = load i64, i64* %RBP
  %2996 = sub i64 %2995, 4
  %2997 = load i64, i64* %PC
  %2998 = add i64 %2997, 4
  store i64 %2998, i64* %PC
  %2999 = inttoptr i64 %2996 to i32*
  %3000 = load i32, i32* %2999
  %3001 = sext i32 %3000 to i64
  store i64 %3001, i64* %RCX, align 8, !tbaa !2428
  %3002 = load i64, i64* %RBP
  %3003 = load i64, i64* %RCX
  %3004 = mul i64 %3003, 4
  %3005 = add i64 %3002, -1568
  %3006 = add i64 %3005, %3004
  %3007 = load i64, i64* %PC
  %3008 = add i64 %3007, 8
  store i64 %3008, i64* %PC
  %3009 = inttoptr i64 %3006 to i32*
  %3010 = load i32, i32* %3009
  %3011 = sext i32 %3010 to i64
  store i64 %3011, i64* %RCX, align 8, !tbaa !2428
  %3012 = load i64, i64* %RDX
  %3013 = load i64, i64* %RBP
  %3014 = load i64, i64* %RCX
  %3015 = mul i64 %3014, 4
  %3016 = add i64 %3013, -2640
  %3017 = add i64 %3016, %3015
  %3018 = load i64, i64* %PC
  %3019 = add i64 %3018, 7
  store i64 %3019, i64* %PC
  %3020 = trunc i64 %3012 to i32
  %3021 = inttoptr i64 %3017 to i32*
  %3022 = load i32, i32* %3021
  %3023 = xor i32 %3022, %3020
  %3024 = zext i32 %3023 to i64
  store i64 %3024, i64* %RDX, align 8, !tbaa !2428
  %3025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3025, align 1, !tbaa !2432
  %3026 = and i32 %3023, 255
  %3027 = call i32 @llvm.ctpop.i32(i32 %3026) #16
  %3028 = trunc i32 %3027 to i8
  %3029 = and i8 %3028, 1
  %3030 = xor i8 %3029, 1
  %3031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3030, i8* %3031, align 1, !tbaa !2446
  %3032 = icmp eq i32 %3023, 0
  %3033 = zext i1 %3032 to i8
  %3034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3033, i8* %3034, align 1, !tbaa !2448
  %3035 = lshr i32 %3023, 31
  %3036 = trunc i32 %3035 to i8
  %3037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3036, i8* %3037, align 1, !tbaa !2449
  %3038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3038, align 1, !tbaa !2450
  %3039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3039, align 1, !tbaa !2447
  %3040 = load i64, i64* %RBP
  %3041 = load i64, i64* %RCX
  %3042 = mul i64 %3041, 4
  %3043 = add i64 %3040, -2640
  %3044 = add i64 %3043, %3042
  %3045 = load i32, i32* %EDX
  %3046 = zext i32 %3045 to i64
  %3047 = load i64, i64* %PC
  %3048 = add i64 %3047, 7
  store i64 %3048, i64* %PC
  %3049 = inttoptr i64 %3044 to i32*
  store i32 %3045, i32* %3049
  br label %block_40158f

block_400ddb:                                     ; preds = %block_400dd4, %block_400def
  %MEMORY.11 = phi %struct.Memory* [ %MEMORY.23, %block_400dd4 ], [ %MEMORY.11, %block_400def ]
  %3050 = load i64, i64* %RBP
  %3051 = sub i64 %3050, 4
  %3052 = load i64, i64* %PC
  %3053 = add i64 %3052, 3
  store i64 %3053, i64* %PC
  %3054 = inttoptr i64 %3051 to i32*
  %3055 = load i32, i32* %3054
  %3056 = zext i32 %3055 to i64
  store i64 %3056, i64* %RAX, align 8, !tbaa !2428
  %3057 = load i64, i64* %RBP
  %3058 = sub i64 %3057, 12
  %3059 = load i64, i64* %PC
  %3060 = add i64 %3059, 4
  store i64 %3060, i64* %PC
  %3061 = inttoptr i64 %3058 to i32*
  %3062 = load i32, i32* %3061
  %3063 = sext i32 %3062 to i64
  store i64 %3063, i64* %RCX, align 8, !tbaa !2428
  %3064 = load i32, i32* %EAX
  %3065 = zext i32 %3064 to i64
  %3066 = load i64, i64* %RBP
  %3067 = load i64, i64* %RCX
  %3068 = mul i64 %3067, 4
  %3069 = add i64 %3066, -1328
  %3070 = add i64 %3069, %3068
  %3071 = load i64, i64* %PC
  %3072 = add i64 %3071, 7
  store i64 %3072, i64* %PC
  %3073 = inttoptr i64 %3070 to i32*
  %3074 = load i32, i32* %3073
  %3075 = sub i32 %3064, %3074
  %3076 = icmp ult i32 %3064, %3074
  %3077 = zext i1 %3076 to i8
  %3078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3077, i8* %3078, align 1, !tbaa !2432
  %3079 = and i32 %3075, 255
  %3080 = call i32 @llvm.ctpop.i32(i32 %3079) #16
  %3081 = trunc i32 %3080 to i8
  %3082 = and i8 %3081, 1
  %3083 = xor i8 %3082, 1
  %3084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3083, i8* %3084, align 1, !tbaa !2446
  %3085 = xor i32 %3074, %3064
  %3086 = xor i32 %3085, %3075
  %3087 = lshr i32 %3086, 4
  %3088 = trunc i32 %3087 to i8
  %3089 = and i8 %3088, 1
  %3090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3089, i8* %3090, align 1, !tbaa !2447
  %3091 = icmp eq i32 %3075, 0
  %3092 = zext i1 %3091 to i8
  %3093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3092, i8* %3093, align 1, !tbaa !2448
  %3094 = lshr i32 %3075, 31
  %3095 = trunc i32 %3094 to i8
  %3096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3095, i8* %3096, align 1, !tbaa !2449
  %3097 = lshr i32 %3064, 31
  %3098 = lshr i32 %3074, 31
  %3099 = xor i32 %3098, %3097
  %3100 = xor i32 %3094, %3097
  %3101 = add nuw nsw i32 %3100, %3099
  %3102 = icmp eq i32 %3101, 2
  %3103 = zext i1 %3102 to i8
  %3104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3103, i8* %3104, align 1, !tbaa !2450
  %3105 = load i64, i64* %PC
  %3106 = add i64 %3105, 124
  %3107 = load i64, i64* %PC
  %3108 = add i64 %3107, 6
  %3109 = load i64, i64* %PC
  %3110 = add i64 %3109, 6
  store i64 %3110, i64* %PC
  %3111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3112 = load i8, i8* %3111, align 1, !tbaa !2448
  %3113 = icmp eq i8 %3112, 0
  %3114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3115 = load i8, i8* %3114, align 1, !tbaa !2449
  %3116 = icmp ne i8 %3115, 0
  %3117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3118 = load i8, i8* %3117, align 1, !tbaa !2450
  %3119 = icmp ne i8 %3118, 0
  %3120 = xor i1 %3116, %3119
  %3121 = xor i1 %3120, true
  %3122 = and i1 %3113, %3121
  %3123 = zext i1 %3122 to i8
  store i8 %3123, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3125 = select i1 %3122, i64 %3106, i64 %3108
  store i64 %3125, i64* %3124, align 8, !tbaa !2428
  %3126 = load i8, i8* %BRANCH_TAKEN
  %3127 = icmp eq i8 %3126, 1
  br i1 %3127, label %block_400e65, label %block_400def

block_400f29:                                     ; preds = %block_400f0f
  %3128 = load i64, i64* %RBP
  %3129 = sub i64 %3128, 1168
  %3130 = load i64, i64* %PC
  %3131 = add i64 %3130, 7
  store i64 %3131, i64* %PC
  store i64 %3129, i64* %RAX, align 8, !tbaa !2428
  %3132 = load i64, i64* %RBP
  %3133 = sub i64 %3132, 12
  %3134 = load i64, i64* %PC
  %3135 = add i64 %3134, 3
  store i64 %3135, i64* %PC
  %3136 = inttoptr i64 %3133 to i32*
  %3137 = load i32, i32* %3136
  %3138 = zext i32 %3137 to i64
  store i64 %3138, i64* %RCX, align 8, !tbaa !2428
  %3139 = load i64, i64* %RCX
  %3140 = load i64, i64* %PC
  %3141 = add i64 %3140, 3
  store i64 %3141, i64* %PC
  %3142 = trunc i64 %3139 to i32
  %3143 = add i32 1, %3142
  %3144 = zext i32 %3143 to i64
  store i64 %3144, i64* %RCX, align 8, !tbaa !2428
  %3145 = icmp ult i32 %3143, %3142
  %3146 = icmp ult i32 %3143, 1
  %3147 = or i1 %3145, %3146
  %3148 = zext i1 %3147 to i8
  %3149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3148, i8* %3149, align 1, !tbaa !2432
  %3150 = and i32 %3143, 255
  %3151 = call i32 @llvm.ctpop.i32(i32 %3150) #16
  %3152 = trunc i32 %3151 to i8
  %3153 = and i8 %3152, 1
  %3154 = xor i8 %3153, 1
  %3155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3154, i8* %3155, align 1, !tbaa !2446
  %3156 = xor i64 1, %3139
  %3157 = trunc i64 %3156 to i32
  %3158 = xor i32 %3157, %3143
  %3159 = lshr i32 %3158, 4
  %3160 = trunc i32 %3159 to i8
  %3161 = and i8 %3160, 1
  %3162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3161, i8* %3162, align 1, !tbaa !2447
  %3163 = icmp eq i32 %3143, 0
  %3164 = zext i1 %3163 to i8
  %3165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3164, i8* %3165, align 1, !tbaa !2448
  %3166 = lshr i32 %3143, 31
  %3167 = trunc i32 %3166 to i8
  %3168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3167, i8* %3168, align 1, !tbaa !2449
  %3169 = lshr i32 %3142, 31
  %3170 = xor i32 %3166, %3169
  %3171 = add nuw nsw i32 %3170, %3166
  %3172 = icmp eq i32 %3171, 2
  %3173 = zext i1 %3172 to i8
  %3174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3173, i8* %3174, align 1, !tbaa !2450
  %3175 = load i32, i32* %ECX
  %3176 = zext i32 %3175 to i64
  %3177 = load i64, i64* %PC
  %3178 = add i64 %3177, 3
  store i64 %3178, i64* %PC
  %3179 = shl i64 %3176, 32
  %3180 = ashr exact i64 %3179, 32
  store i64 %3180, i64* %RDX, align 8, !tbaa !2428
  %3181 = load i64, i64* %RDX
  %3182 = load i64, i64* %PC
  %3183 = add i64 %3182, 4
  store i64 %3183, i64* %PC
  %3184 = shl i64 %3181, 5
  %3185 = icmp slt i64 %3184, 0
  %3186 = shl i64 %3184, 1
  store i64 %3186, i64* %RDX, align 8, !tbaa !2428
  %3187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3188 = zext i1 %3185 to i8
  store i8 %3188, i8* %3187, align 1, !tbaa !2451
  %3189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3190 = trunc i64 %3186 to i32
  %3191 = and i32 %3190, 254
  %3192 = call i32 @llvm.ctpop.i32(i32 %3191) #16
  %3193 = trunc i32 %3192 to i8
  %3194 = and i8 %3193, 1
  %3195 = xor i8 %3194, 1
  store i8 %3195, i8* %3189, align 1, !tbaa !2451
  %3196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3196, align 1, !tbaa !2451
  %3197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3198 = icmp eq i64 %3186, 0
  %3199 = zext i1 %3198 to i8
  store i8 %3199, i8* %3197, align 1, !tbaa !2451
  %3200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3201 = lshr i64 %3186, 63
  %3202 = trunc i64 %3201 to i8
  store i8 %3202, i8* %3200, align 1, !tbaa !2451
  %3203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3203, align 1, !tbaa !2451
  %3204 = load i64, i64* %RAX
  %3205 = load i64, i64* %RDX
  %3206 = load i64, i64* %PC
  %3207 = add i64 %3206, 3
  store i64 %3207, i64* %PC
  %3208 = add i64 %3205, %3204
  store i64 %3208, i64* %RAX, align 8, !tbaa !2428
  %3209 = icmp ult i64 %3208, %3204
  %3210 = icmp ult i64 %3208, %3205
  %3211 = or i1 %3209, %3210
  %3212 = zext i1 %3211 to i8
  %3213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3212, i8* %3213, align 1, !tbaa !2432
  %3214 = trunc i64 %3208 to i32
  %3215 = and i32 %3214, 255
  %3216 = call i32 @llvm.ctpop.i32(i32 %3215) #16
  %3217 = trunc i32 %3216 to i8
  %3218 = and i8 %3217, 1
  %3219 = xor i8 %3218, 1
  %3220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3219, i8* %3220, align 1, !tbaa !2446
  %3221 = xor i64 %3205, %3204
  %3222 = xor i64 %3221, %3208
  %3223 = lshr i64 %3222, 4
  %3224 = trunc i64 %3223 to i8
  %3225 = and i8 %3224, 1
  %3226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3225, i8* %3226, align 1, !tbaa !2447
  %3227 = icmp eq i64 %3208, 0
  %3228 = zext i1 %3227 to i8
  %3229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3228, i8* %3229, align 1, !tbaa !2448
  %3230 = lshr i64 %3208, 63
  %3231 = trunc i64 %3230 to i8
  %3232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3231, i8* %3232, align 1, !tbaa !2449
  %3233 = lshr i64 %3204, 63
  %3234 = lshr i64 %3205, 63
  %3235 = xor i64 %3230, %3233
  %3236 = xor i64 %3230, %3234
  %3237 = add nuw nsw i64 %3235, %3236
  %3238 = icmp eq i64 %3237, 2
  %3239 = zext i1 %3238 to i8
  %3240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3239, i8* %3240, align 1, !tbaa !2450
  %3241 = load i64, i64* %RBP
  %3242 = sub i64 %3241, 4
  %3243 = load i64, i64* %PC
  %3244 = add i64 %3243, 4
  store i64 %3244, i64* %PC
  %3245 = inttoptr i64 %3242 to i32*
  %3246 = load i32, i32* %3245
  %3247 = sext i32 %3246 to i64
  store i64 %3247, i64* %RDX, align 8, !tbaa !2428
  %3248 = load i64, i64* %RAX
  %3249 = load i64, i64* %RDX
  %3250 = mul i64 %3249, 4
  %3251 = add i64 %3250, %3248
  %3252 = load i64, i64* %PC
  %3253 = add i64 %3252, 4
  store i64 %3253, i64* %PC
  %3254 = inttoptr i64 %3251 to i32*
  %3255 = load i32, i32* %3254
  %3256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3256, align 1, !tbaa !2432
  %3257 = and i32 %3255, 255
  %3258 = call i32 @llvm.ctpop.i32(i32 %3257) #16
  %3259 = trunc i32 %3258 to i8
  %3260 = and i8 %3259, 1
  %3261 = xor i8 %3260, 1
  %3262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3261, i8* %3262, align 1, !tbaa !2446
  %3263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3263, align 1, !tbaa !2447
  %3264 = icmp eq i32 %3255, 0
  %3265 = zext i1 %3264 to i8
  %3266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3265, i8* %3266, align 1, !tbaa !2448
  %3267 = lshr i32 %3255, 31
  %3268 = trunc i32 %3267 to i8
  %3269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3268, i8* %3269, align 1, !tbaa !2449
  %3270 = lshr i32 %3255, 31
  %3271 = xor i32 %3267, %3270
  %3272 = add nuw nsw i32 %3271, %3270
  %3273 = icmp eq i32 %3272, 2
  %3274 = zext i1 %3273 to i8
  %3275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3274, i8* %3275, align 1, !tbaa !2450
  %3276 = load i64, i64* %PC
  %3277 = add i64 %3276, 120
  %3278 = load i64, i64* %PC
  %3279 = add i64 %3278, 6
  %3280 = load i64, i64* %PC
  %3281 = add i64 %3280, 6
  store i64 %3281, i64* %PC
  %3282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3283 = load i8, i8* %3282, align 1, !tbaa !2448
  store i8 %3283, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3285 = icmp ne i8 %3283, 0
  %3286 = select i1 %3285, i64 %3277, i64 %3279
  store i64 %3286, i64* %3284, align 8, !tbaa !2428
  %3287 = load i8, i8* %BRANCH_TAKEN
  %3288 = icmp eq i8 %3287, 1
  br i1 %3288, label %block_400fc0, label %block_400f4e

block_400dc1:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3, %block_400d27
  %MEMORY.12 = phi %struct.Memory* [ %MEMORY.23, %block_400d27 ], [ %5276, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3 ]
  %3289 = load i64, i64* %PC
  %3290 = add i64 %3289, 5
  %3291 = load i64, i64* %PC
  %3292 = add i64 %3291, 5
  store i64 %3292, i64* %PC
  %3293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3290, i64* %3293, align 8, !tbaa !2428
  %3294 = load i64, i64* %RBP
  %3295 = sub i64 %3294, 4
  %3296 = load i64, i64* %PC
  %3297 = add i64 %3296, 3
  store i64 %3297, i64* %PC
  %3298 = inttoptr i64 %3295 to i32*
  %3299 = load i32, i32* %3298
  %3300 = zext i32 %3299 to i64
  store i64 %3300, i64* %RAX, align 8, !tbaa !2428
  %3301 = load i64, i64* %RAX
  %3302 = load i64, i64* %PC
  %3303 = add i64 %3302, 3
  store i64 %3303, i64* %PC
  %3304 = trunc i64 %3301 to i32
  %3305 = add i32 1, %3304
  %3306 = zext i32 %3305 to i64
  store i64 %3306, i64* %RAX, align 8, !tbaa !2428
  %3307 = icmp ult i32 %3305, %3304
  %3308 = icmp ult i32 %3305, 1
  %3309 = or i1 %3307, %3308
  %3310 = zext i1 %3309 to i8
  %3311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3310, i8* %3311, align 1, !tbaa !2432
  %3312 = and i32 %3305, 255
  %3313 = call i32 @llvm.ctpop.i32(i32 %3312) #16
  %3314 = trunc i32 %3313 to i8
  %3315 = and i8 %3314, 1
  %3316 = xor i8 %3315, 1
  %3317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3316, i8* %3317, align 1, !tbaa !2446
  %3318 = xor i64 1, %3301
  %3319 = trunc i64 %3318 to i32
  %3320 = xor i32 %3319, %3305
  %3321 = lshr i32 %3320, 4
  %3322 = trunc i32 %3321 to i8
  %3323 = and i8 %3322, 1
  %3324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3323, i8* %3324, align 1, !tbaa !2447
  %3325 = icmp eq i32 %3305, 0
  %3326 = zext i1 %3325 to i8
  %3327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3326, i8* %3327, align 1, !tbaa !2448
  %3328 = lshr i32 %3305, 31
  %3329 = trunc i32 %3328 to i8
  %3330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3329, i8* %3330, align 1, !tbaa !2449
  %3331 = lshr i32 %3304, 31
  %3332 = xor i32 %3328, %3331
  %3333 = add nuw nsw i32 %3332, %3328
  %3334 = icmp eq i32 %3333, 2
  %3335 = zext i1 %3334 to i8
  %3336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3335, i8* %3336, align 1, !tbaa !2450
  %3337 = load i64, i64* %RBP
  %3338 = sub i64 %3337, 4
  %3339 = load i32, i32* %EAX
  %3340 = zext i32 %3339 to i64
  %3341 = load i64, i64* %PC
  %3342 = add i64 %3341, 3
  store i64 %3342, i64* %PC
  %3343 = inttoptr i64 %3338 to i32*
  store i32 %3339, i32* %3343
  %3344 = load i64, i64* %PC
  %3345 = sub i64 %3344, 188
  %3346 = load i64, i64* %PC
  %3347 = add i64 %3346, 5
  store i64 %3347, i64* %PC
  %3348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3345, i64* %3348, align 8, !tbaa !2428
  br label %block_400d13

block_400f0f:                                     ; preds = %block_400ef6
  %3349 = load i64, i64* %RAX
  %3350 = load i64, i64* %RBP
  %3351 = sub i64 %3350, 4
  %3352 = load i64, i64* %PC
  %3353 = add i64 %3352, 3
  store i64 %3353, i64* %PC
  %3354 = trunc i64 %3349 to i32
  %3355 = inttoptr i64 %3351 to i32*
  %3356 = load i32, i32* %3355
  %3357 = sub i32 %3354, %3356
  %3358 = zext i32 %3357 to i64
  store i64 %3358, i64* %RAX, align 8, !tbaa !2428
  %3359 = icmp ult i32 %3354, %3356
  %3360 = zext i1 %3359 to i8
  %3361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3360, i8* %3361, align 1, !tbaa !2432
  %3362 = and i32 %3357, 255
  %3363 = call i32 @llvm.ctpop.i32(i32 %3362) #16
  %3364 = trunc i32 %3363 to i8
  %3365 = and i8 %3364, 1
  %3366 = xor i8 %3365, 1
  %3367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3366, i8* %3367, align 1, !tbaa !2446
  %3368 = xor i32 %3356, %3354
  %3369 = xor i32 %3368, %3357
  %3370 = lshr i32 %3369, 4
  %3371 = trunc i32 %3370 to i8
  %3372 = and i8 %3371, 1
  %3373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3372, i8* %3373, align 1, !tbaa !2447
  %3374 = icmp eq i32 %3357, 0
  %3375 = zext i1 %3374 to i8
  %3376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3375, i8* %3376, align 1, !tbaa !2448
  %3377 = lshr i32 %3357, 31
  %3378 = trunc i32 %3377 to i8
  %3379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3378, i8* %3379, align 1, !tbaa !2449
  %3380 = lshr i32 %3354, 31
  %3381 = lshr i32 %3356, 31
  %3382 = xor i32 %3381, %3380
  %3383 = xor i32 %3377, %3380
  %3384 = add nuw nsw i32 %3383, %3382
  %3385 = icmp eq i32 %3384, 2
  %3386 = zext i1 %3385 to i8
  %3387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3386, i8* %3387, align 1, !tbaa !2450
  %3388 = load i32, i32* %EAX
  %3389 = zext i32 %3388 to i64
  %3390 = load i64, i64* %PC
  %3391 = add i64 %3390, 3
  store i64 %3391, i64* %PC
  %3392 = shl i64 %3389, 32
  %3393 = ashr exact i64 %3392, 32
  store i64 %3393, i64* %RCX, align 8, !tbaa !2428
  %3394 = load i64, i64* %RBP
  %3395 = load i64, i64* %RCX
  %3396 = mul i64 %3395, 4
  %3397 = add i64 %3394, -1488
  %3398 = add i64 %3397, %3396
  %3399 = load i64, i64* %PC
  %3400 = add i64 %3399, 8
  store i64 %3400, i64* %PC
  %3401 = inttoptr i64 %3398 to i32*
  %3402 = load i32, i32* %3401
  %3403 = sub i32 %3402, -1
  %3404 = icmp ult i32 %3402, -1
  %3405 = zext i1 %3404 to i8
  %3406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3405, i8* %3406, align 1, !tbaa !2432
  %3407 = and i32 %3403, 255
  %3408 = call i32 @llvm.ctpop.i32(i32 %3407) #16
  %3409 = trunc i32 %3408 to i8
  %3410 = and i8 %3409, 1
  %3411 = xor i8 %3410, 1
  %3412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3411, i8* %3412, align 1, !tbaa !2446
  %3413 = xor i32 %3402, -1
  %3414 = xor i32 %3413, %3403
  %3415 = lshr i32 %3414, 4
  %3416 = trunc i32 %3415 to i8
  %3417 = and i8 %3416, 1
  %3418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3417, i8* %3418, align 1, !tbaa !2447
  %3419 = icmp eq i32 %3403, 0
  %3420 = zext i1 %3419 to i8
  %3421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3420, i8* %3421, align 1, !tbaa !2448
  %3422 = lshr i32 %3403, 31
  %3423 = trunc i32 %3422 to i8
  %3424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3423, i8* %3424, align 1, !tbaa !2449
  %3425 = lshr i32 %3402, 31
  %3426 = xor i32 %3425, 1
  %3427 = xor i32 %3422, %3425
  %3428 = add nuw nsw i32 %3427, %3426
  %3429 = icmp eq i32 %3428, 2
  %3430 = zext i1 %3429 to i8
  %3431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3430, i8* %3431, align 1, !tbaa !2450
  %3432 = load i64, i64* %PC
  %3433 = add i64 %3432, 157
  %3434 = load i64, i64* %PC
  %3435 = add i64 %3434, 6
  %3436 = load i64, i64* %PC
  %3437 = add i64 %3436, 6
  store i64 %3437, i64* %PC
  %3438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3439 = load i8, i8* %3438, align 1, !tbaa !2448
  store i8 %3439, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3441 = icmp ne i8 %3439, 0
  %3442 = select i1 %3441, i64 %3433, i64 %3435
  store i64 %3442, i64* %3440, align 8, !tbaa !2428
  %3443 = load i8, i8* %BRANCH_TAKEN
  %3444 = icmp eq i8 %3443, 1
  br i1 %3444, label %block_400fc0, label %block_400f29

block_400bf7:                                     ; preds = %block_400be4
  %3445 = load i64, i64* %RBP
  %3446 = sub i64 %3445, 16
  %3447 = load i64, i64* %PC
  %3448 = add i64 %3447, 3
  store i64 %3448, i64* %PC
  %3449 = inttoptr i64 %3446 to i32*
  %3450 = load i32, i32* %3449
  %3451 = zext i32 %3450 to i64
  store i64 %3451, i64* %RAX, align 8, !tbaa !2428
  %3452 = load i64, i64* %RAX
  %3453 = load i64, i64* %PC
  %3454 = add i64 %3453, 3
  store i64 %3454, i64* %PC
  %3455 = trunc i64 %3452 to i32
  %3456 = add i32 -1, %3455
  %3457 = zext i32 %3456 to i64
  store i64 %3457, i64* %RAX, align 8, !tbaa !2428
  %3458 = icmp ult i32 %3456, %3455
  %3459 = icmp ult i32 %3456, -1
  %3460 = or i1 %3458, %3459
  %3461 = zext i1 %3460 to i8
  %3462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3461, i8* %3462, align 1, !tbaa !2432
  %3463 = and i32 %3456, 255
  %3464 = call i32 @llvm.ctpop.i32(i32 %3463) #16
  %3465 = trunc i32 %3464 to i8
  %3466 = and i8 %3465, 1
  %3467 = xor i8 %3466, 1
  %3468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3467, i8* %3468, align 1, !tbaa !2446
  %3469 = xor i64 -1, %3452
  %3470 = trunc i64 %3469 to i32
  %3471 = xor i32 %3470, %3456
  %3472 = lshr i32 %3471, 4
  %3473 = trunc i32 %3472 to i8
  %3474 = and i8 %3473, 1
  %3475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3474, i8* %3475, align 1, !tbaa !2447
  %3476 = icmp eq i32 %3456, 0
  %3477 = zext i1 %3476 to i8
  %3478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3477, i8* %3478, align 1, !tbaa !2448
  %3479 = lshr i32 %3456, 31
  %3480 = trunc i32 %3479 to i8
  %3481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3480, i8* %3481, align 1, !tbaa !2449
  %3482 = lshr i32 %3455, 31
  %3483 = xor i32 %3479, %3482
  %3484 = xor i32 %3479, 1
  %3485 = add nuw nsw i32 %3483, %3484
  %3486 = icmp eq i32 %3485, 2
  %3487 = zext i1 %3486 to i8
  %3488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3487, i8* %3488, align 1, !tbaa !2450
  %3489 = load i64, i64* %RBP
  %3490 = sub i64 %3489, 16
  %3491 = load i32, i32* %EAX
  %3492 = zext i32 %3491 to i64
  %3493 = load i64, i64* %PC
  %3494 = add i64 %3493, 3
  store i64 %3494, i64* %PC
  %3495 = inttoptr i64 %3490 to i32*
  store i32 %3491, i32* %3495
  %3496 = load i64, i64* %PC
  %3497 = sub i64 %3496, 69
  %3498 = load i64, i64* %PC
  %3499 = add i64 %3498, 5
  store i64 %3499, i64* %PC
  %3500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3497, i64* %3500, align 8, !tbaa !2428
  br label %block_400bbb

block_40112f:                                     ; preds = %block_40119d, %block_401121
  %MEMORY.13 = phi %struct.Memory* [ %MEMORY.25, %block_401121 ], [ %MEMORY.45, %block_40119d ]
  %3501 = load i64, i64* %RBP
  %3502 = sub i64 %3501, 8
  %3503 = load i64, i64* %PC
  %3504 = add i64 %3503, 3
  store i64 %3504, i64* %PC
  %3505 = inttoptr i64 %3502 to i32*
  %3506 = load i32, i32* %3505
  %3507 = zext i32 %3506 to i64
  store i64 %3507, i64* %RAX, align 8, !tbaa !2428
  %3508 = load i64, i64* %RBP
  %3509 = sub i64 %3508, 12
  %3510 = load i64, i64* %PC
  %3511 = add i64 %3510, 4
  store i64 %3511, i64* %PC
  %3512 = inttoptr i64 %3509 to i32*
  %3513 = load i32, i32* %3512
  %3514 = sext i32 %3513 to i64
  store i64 %3514, i64* %RCX, align 8, !tbaa !2428
  %3515 = load i32, i32* %EAX
  %3516 = zext i32 %3515 to i64
  %3517 = load i64, i64* %RBP
  %3518 = load i64, i64* %RCX
  %3519 = mul i64 %3518, 4
  %3520 = add i64 %3517, -1328
  %3521 = add i64 %3520, %3519
  %3522 = load i64, i64* %PC
  %3523 = add i64 %3522, 7
  store i64 %3523, i64* %PC
  %3524 = inttoptr i64 %3521 to i32*
  %3525 = load i32, i32* %3524
  %3526 = sub i32 %3515, %3525
  %3527 = icmp ult i32 %3515, %3525
  %3528 = zext i1 %3527 to i8
  %3529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3528, i8* %3529, align 1, !tbaa !2432
  %3530 = and i32 %3526, 255
  %3531 = call i32 @llvm.ctpop.i32(i32 %3530) #16
  %3532 = trunc i32 %3531 to i8
  %3533 = and i8 %3532, 1
  %3534 = xor i8 %3533, 1
  %3535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3534, i8* %3535, align 1, !tbaa !2446
  %3536 = xor i32 %3525, %3515
  %3537 = xor i32 %3536, %3526
  %3538 = lshr i32 %3537, 4
  %3539 = trunc i32 %3538 to i8
  %3540 = and i8 %3539, 1
  %3541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3540, i8* %3541, align 1, !tbaa !2447
  %3542 = icmp eq i32 %3526, 0
  %3543 = zext i1 %3542 to i8
  %3544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3543, i8* %3544, align 1, !tbaa !2448
  %3545 = lshr i32 %3526, 31
  %3546 = trunc i32 %3545 to i8
  %3547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3546, i8* %3547, align 1, !tbaa !2449
  %3548 = lshr i32 %3515, 31
  %3549 = lshr i32 %3525, 31
  %3550 = xor i32 %3549, %3548
  %3551 = xor i32 %3545, %3548
  %3552 = add nuw nsw i32 %3551, %3550
  %3553 = icmp eq i32 %3552, 2
  %3554 = zext i1 %3553 to i8
  %3555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3554, i8* %3555, align 1, !tbaa !2450
  %3556 = load i64, i64* %PC
  %3557 = add i64 %3556, 115
  %3558 = load i64, i64* %PC
  %3559 = add i64 %3558, 6
  %3560 = load i64, i64* %PC
  %3561 = add i64 %3560, 6
  store i64 %3561, i64* %PC
  %3562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3563 = load i8, i8* %3562, align 1, !tbaa !2448
  %3564 = icmp eq i8 %3563, 0
  %3565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3566 = load i8, i8* %3565, align 1, !tbaa !2449
  %3567 = icmp ne i8 %3566, 0
  %3568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3569 = load i8, i8* %3568, align 1, !tbaa !2450
  %3570 = icmp ne i8 %3569, 0
  %3571 = xor i1 %3567, %3570
  %3572 = xor i1 %3571, true
  %3573 = and i1 %3564, %3572
  %3574 = zext i1 %3573 to i8
  store i8 %3574, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3576 = select i1 %3573, i64 %3557, i64 %3559
  store i64 %3576, i64* %3575, align 8, !tbaa !2428
  %3577 = load i8, i8* %BRANCH_TAKEN
  %3578 = icmp eq i8 %3577, 1
  %3579 = load i64, i64* %RBP
  br i1 %3578, label %block_4011b0, label %block_401143

block_40170e:                                     ; preds = %block_4014e1
  %3580 = load i64, i64* %PC
  %3581 = add i64 %3580, 117
  %3582 = load i64, i64* %PC
  %3583 = add i64 %3582, 5
  store i64 %3583, i64* %PC
  %3584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3581, i64* %3584, align 8, !tbaa !2428
  br label %block_401783

block_401103:                                     ; preds = %block_4010bd
  %3585 = sub i64 %6967, 1492
  %3586 = load i64, i64* %PC
  %3587 = add i64 %3586, 10
  store i64 %3587, i64* %PC
  %3588 = inttoptr i64 %3585 to i32*
  store i32 0, i32* %3588
  %3589 = load i64, i64* %RBP
  %3590 = sub i64 %3589, 4
  %3591 = load i64, i64* %PC
  %3592 = add i64 %3591, 7
  store i64 %3592, i64* %PC
  %3593 = inttoptr i64 %3590 to i32*
  store i32 1, i32* %3593
  br label %block_401114

block_400fd3:                                     ; preds = %block_400ef6
  %3594 = load i32, i32* %EAX
  %3595 = zext i32 %3594 to i64
  %3596 = load i64, i64* %PC
  %3597 = add i64 %3596, 3
  store i64 %3597, i64* %PC
  %3598 = shl i64 %3595, 32
  %3599 = ashr exact i64 %3598, 32
  store i64 %3599, i64* %RCX, align 8, !tbaa !2428
  %3600 = load i64, i64* %RBP
  %3601 = load i64, i64* %RCX
  %3602 = mul i64 %3601, 4
  %3603 = add i64 %3600, -1248
  %3604 = add i64 %3603, %3602
  %3605 = load i64, i64* %PC
  %3606 = add i64 %3605, 8
  store i64 %3606, i64* %PC
  %3607 = inttoptr i64 %3604 to i32*
  %3608 = load i32, i32* %3607
  %3609 = sext i32 %3608 to i64
  store i64 %3609, i64* %RCX, align 8, !tbaa !2428
  %3610 = load i64, i64* %RCX
  %3611 = mul i64 %3610, 4
  %3612 = add i64 %3611, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %3613 = load i64, i64* %PC
  %3614 = add i64 %3613, 7
  store i64 %3614, i64* %PC
  %3615 = inttoptr i64 %3612 to i32*
  %3616 = load i32, i32* %3615
  %3617 = zext i32 %3616 to i64
  store i64 %3617, i64* %RAX, align 8, !tbaa !2428
  %3618 = load i64, i64* %RBP
  %3619 = sub i64 %3618, 12
  %3620 = load i64, i64* %PC
  %3621 = add i64 %3620, 3
  store i64 %3621, i64* %PC
  %3622 = inttoptr i64 %3619 to i32*
  %3623 = load i32, i32* %3622
  %3624 = zext i32 %3623 to i64
  store i64 %3624, i64* %RDX, align 8, !tbaa !2428
  %3625 = load i64, i64* %RDX
  %3626 = load i64, i64* %PC
  %3627 = add i64 %3626, 3
  store i64 %3627, i64* %PC
  %3628 = trunc i64 %3625 to i32
  %3629 = add i32 1, %3628
  %3630 = zext i32 %3629 to i64
  store i64 %3630, i64* %RDX, align 8, !tbaa !2428
  %3631 = icmp ult i32 %3629, %3628
  %3632 = icmp ult i32 %3629, 1
  %3633 = or i1 %3631, %3632
  %3634 = zext i1 %3633 to i8
  %3635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3634, i8* %3635, align 1, !tbaa !2432
  %3636 = and i32 %3629, 255
  %3637 = call i32 @llvm.ctpop.i32(i32 %3636) #16
  %3638 = trunc i32 %3637 to i8
  %3639 = and i8 %3638, 1
  %3640 = xor i8 %3639, 1
  %3641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3640, i8* %3641, align 1, !tbaa !2446
  %3642 = xor i64 1, %3625
  %3643 = trunc i64 %3642 to i32
  %3644 = xor i32 %3643, %3629
  %3645 = lshr i32 %3644, 4
  %3646 = trunc i32 %3645 to i8
  %3647 = and i8 %3646, 1
  %3648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3647, i8* %3648, align 1, !tbaa !2447
  %3649 = icmp eq i32 %3629, 0
  %3650 = zext i1 %3649 to i8
  %3651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3650, i8* %3651, align 1, !tbaa !2448
  %3652 = lshr i32 %3629, 31
  %3653 = trunc i32 %3652 to i8
  %3654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3653, i8* %3654, align 1, !tbaa !2449
  %3655 = lshr i32 %3628, 31
  %3656 = xor i32 %3652, %3655
  %3657 = add nuw nsw i32 %3656, %3652
  %3658 = icmp eq i32 %3657, 2
  %3659 = zext i1 %3658 to i8
  %3660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3659, i8* %3660, align 1, !tbaa !2450
  %3661 = load i32, i32* %EDX
  %3662 = zext i32 %3661 to i64
  %3663 = load i64, i64* %PC
  %3664 = add i64 %3663, 3
  store i64 %3664, i64* %PC
  %3665 = shl i64 %3662, 32
  %3666 = ashr exact i64 %3665, 32
  store i64 %3666, i64* %RCX, align 8, !tbaa !2428
  %3667 = load i64, i64* %RBP
  %3668 = load i64, i64* %RCX
  %3669 = mul i64 %3668, 4
  %3670 = add i64 %3667, -1248
  %3671 = add i64 %3670, %3669
  %3672 = load i32, i32* %EAX
  %3673 = zext i32 %3672 to i64
  %3674 = load i64, i64* %PC
  %3675 = add i64 %3674, 7
  store i64 %3675, i64* %PC
  %3676 = inttoptr i64 %3671 to i32*
  store i32 %3672, i32* %3676
  br label %block_400ffb

block_401121:                                     ; preds = %block_401114
  %3677 = sub i64 %6166, 16
  %3678 = load i64, i64* %PC
  %3679 = add i64 %3678, 7
  store i64 %3679, i64* %PC
  %3680 = inttoptr i64 %3677 to i32*
  store i32 1, i32* %3680
  %3681 = load i64, i64* %RBP
  %3682 = sub i64 %3681, 8
  %3683 = load i64, i64* %PC
  %3684 = add i64 %3683, 7
  store i64 %3684, i64* %PC
  %3685 = inttoptr i64 %3682 to i32*
  store i32 1, i32* %3685
  br label %block_40112f

block_400be4:                                     ; preds = %block_400bbb, %block_400bd7
  %MEMORY.14 = phi %struct.Memory* [ %MEMORY.6, %block_400bbb ], [ %MEMORY.6, %block_400bd7 ]
  %3686 = load i64, i64* %RBP
  %3687 = sub i64 %3686, 2693
  %3688 = load i64, i64* %PC
  %3689 = add i64 %3688, 6
  store i64 %3689, i64* %PC
  %3690 = inttoptr i64 %3687 to i8*
  %3691 = load i8, i8* %3690
  store i8 %3691, i8* %AL, align 1, !tbaa !2451
  %3692 = load i8, i8* %AL
  %3693 = zext i8 %3692 to i64
  %3694 = load i64, i64* %PC
  %3695 = add i64 %3694, 2
  store i64 %3695, i64* %PC
  %3696 = and i64 1, %3693
  %3697 = trunc i64 %3696 to i8
  %3698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3698, align 1, !tbaa !2432
  %3699 = trunc i64 %3696 to i32
  %3700 = and i32 %3699, 255
  %3701 = call i32 @llvm.ctpop.i32(i32 %3700) #16
  %3702 = trunc i32 %3701 to i8
  %3703 = and i8 %3702, 1
  %3704 = xor i8 %3703, 1
  %3705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3704, i8* %3705, align 1, !tbaa !2446
  %3706 = icmp eq i8 %3697, 0
  %3707 = zext i1 %3706 to i8
  %3708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3707, i8* %3708, align 1, !tbaa !2448
  %3709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %3709, align 1, !tbaa !2449
  %3710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3710, align 1, !tbaa !2450
  %3711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3711, align 1, !tbaa !2447
  %3712 = load i64, i64* %PC
  %3713 = add i64 %3712, 11
  %3714 = load i64, i64* %PC
  %3715 = add i64 %3714, 6
  %3716 = load i64, i64* %PC
  %3717 = add i64 %3716, 6
  store i64 %3717, i64* %PC
  %3718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3719 = load i8, i8* %3718, align 1, !tbaa !2448
  %3720 = icmp eq i8 %3719, 0
  %3721 = zext i1 %3720 to i8
  store i8 %3721, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3723 = select i1 %3720, i64 %3713, i64 %3715
  store i64 %3723, i64* %3722, align 8, !tbaa !2428
  %3724 = load i8, i8* %BRANCH_TAKEN
  %3725 = icmp eq i8 %3724, 1
  br i1 %3725, label %block_400bf7, label %block_400bf2

block_4016fb:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1, %block_4015a2
  %MEMORY.15 = phi %struct.Memory* [ %MEMORY.34, %block_4015a2 ], [ %6768, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ]
  %3726 = load i64, i64* %PC
  %3727 = add i64 %3726, 5
  %3728 = load i64, i64* %PC
  %3729 = add i64 %3728, 5
  store i64 %3729, i64* %PC
  %3730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3727, i64* %3730, align 8, !tbaa !2428
  %3731 = load i64, i64* %RBP
  %3732 = sub i64 %3731, 4
  %3733 = load i64, i64* %PC
  %3734 = add i64 %3733, 3
  store i64 %3734, i64* %PC
  %3735 = inttoptr i64 %3732 to i32*
  %3736 = load i32, i32* %3735
  %3737 = zext i32 %3736 to i64
  store i64 %3737, i64* %RAX, align 8, !tbaa !2428
  %3738 = load i64, i64* %RAX
  %3739 = load i64, i64* %PC
  %3740 = add i64 %3739, 3
  store i64 %3740, i64* %PC
  %3741 = trunc i64 %3738 to i32
  %3742 = add i32 1, %3741
  %3743 = zext i32 %3742 to i64
  store i64 %3743, i64* %RAX, align 8, !tbaa !2428
  %3744 = icmp ult i32 %3742, %3741
  %3745 = icmp ult i32 %3742, 1
  %3746 = or i1 %3744, %3745
  %3747 = zext i1 %3746 to i8
  %3748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3747, i8* %3748, align 1, !tbaa !2432
  %3749 = and i32 %3742, 255
  %3750 = call i32 @llvm.ctpop.i32(i32 %3749) #16
  %3751 = trunc i32 %3750 to i8
  %3752 = and i8 %3751, 1
  %3753 = xor i8 %3752, 1
  %3754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3753, i8* %3754, align 1, !tbaa !2446
  %3755 = xor i64 1, %3738
  %3756 = trunc i64 %3755 to i32
  %3757 = xor i32 %3756, %3742
  %3758 = lshr i32 %3757, 4
  %3759 = trunc i32 %3758 to i8
  %3760 = and i8 %3759, 1
  %3761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3760, i8* %3761, align 1, !tbaa !2447
  %3762 = icmp eq i32 %3742, 0
  %3763 = zext i1 %3762 to i8
  %3764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3763, i8* %3764, align 1, !tbaa !2448
  %3765 = lshr i32 %3742, 31
  %3766 = trunc i32 %3765 to i8
  %3767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3766, i8* %3767, align 1, !tbaa !2449
  %3768 = lshr i32 %3741, 31
  %3769 = xor i32 %3765, %3768
  %3770 = add nuw nsw i32 %3769, %3765
  %3771 = icmp eq i32 %3770, 2
  %3772 = zext i1 %3771 to i8
  %3773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3772, i8* %3773, align 1, !tbaa !2450
  %3774 = load i64, i64* %RBP
  %3775 = sub i64 %3774, 4
  %3776 = load i32, i32* %EAX
  %3777 = zext i32 %3776 to i64
  %3778 = load i64, i64* %PC
  %3779 = add i64 %3778, 3
  store i64 %3779, i64* %PC
  %3780 = inttoptr i64 %3775 to i32*
  store i32 %3776, i32* %3780
  %3781 = load i64, i64* %PC
  %3782 = sub i64 %3781, 552
  %3783 = load i64, i64* %PC
  %3784 = add i64 %3783, 5
  store i64 %3784, i64* %PC
  %3785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3782, i64* %3785, align 8, !tbaa !2428
  br label %block_4014e1

block_400ef6:                                     ; preds = %block_400eef, %block_400fc0
  %MEMORY.16 = phi %struct.Memory* [ %MEMORY.49, %block_400eef ], [ %MEMORY.2, %block_400fc0 ]
  %3786 = load i64, i64* %RBP
  %3787 = sub i64 %3786, 4
  %3788 = load i64, i64* %PC
  %3789 = add i64 %3788, 3
  store i64 %3789, i64* %PC
  %3790 = inttoptr i64 %3787 to i32*
  %3791 = load i32, i32* %3790
  %3792 = zext i32 %3791 to i64
  store i64 %3792, i64* %RAX, align 8, !tbaa !2428
  %3793 = load i64, i64* %RBP
  %3794 = sub i64 %3793, 12
  %3795 = load i64, i64* %PC
  %3796 = add i64 %3795, 3
  store i64 %3796, i64* %PC
  %3797 = inttoptr i64 %3794 to i32*
  %3798 = load i32, i32* %3797
  %3799 = zext i32 %3798 to i64
  store i64 %3799, i64* %RCX, align 8, !tbaa !2428
  %3800 = load i64, i64* %RCX
  %3801 = load i64, i64* %PC
  %3802 = add i64 %3801, 3
  store i64 %3802, i64* %PC
  %3803 = trunc i64 %3800 to i32
  %3804 = add i32 1, %3803
  %3805 = zext i32 %3804 to i64
  store i64 %3805, i64* %RCX, align 8, !tbaa !2428
  %3806 = icmp ult i32 %3804, %3803
  %3807 = icmp ult i32 %3804, 1
  %3808 = or i1 %3806, %3807
  %3809 = zext i1 %3808 to i8
  %3810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3809, i8* %3810, align 1, !tbaa !2432
  %3811 = and i32 %3804, 255
  %3812 = call i32 @llvm.ctpop.i32(i32 %3811) #16
  %3813 = trunc i32 %3812 to i8
  %3814 = and i8 %3813, 1
  %3815 = xor i8 %3814, 1
  %3816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3815, i8* %3816, align 1, !tbaa !2446
  %3817 = xor i64 1, %3800
  %3818 = trunc i64 %3817 to i32
  %3819 = xor i32 %3818, %3804
  %3820 = lshr i32 %3819, 4
  %3821 = trunc i32 %3820 to i8
  %3822 = and i8 %3821, 1
  %3823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3822, i8* %3823, align 1, !tbaa !2447
  %3824 = icmp eq i32 %3804, 0
  %3825 = zext i1 %3824 to i8
  %3826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3825, i8* %3826, align 1, !tbaa !2448
  %3827 = lshr i32 %3804, 31
  %3828 = trunc i32 %3827 to i8
  %3829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3828, i8* %3829, align 1, !tbaa !2449
  %3830 = lshr i32 %3803, 31
  %3831 = xor i32 %3827, %3830
  %3832 = add nuw nsw i32 %3831, %3827
  %3833 = icmp eq i32 %3832, 2
  %3834 = zext i1 %3833 to i8
  %3835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3834, i8* %3835, align 1, !tbaa !2450
  %3836 = load i32, i32* %ECX
  %3837 = zext i32 %3836 to i64
  %3838 = load i64, i64* %PC
  %3839 = add i64 %3838, 3
  store i64 %3839, i64* %PC
  %3840 = shl i64 %3837, 32
  %3841 = ashr exact i64 %3840, 32
  store i64 %3841, i64* %RDX, align 8, !tbaa !2428
  %3842 = load i32, i32* %EAX
  %3843 = zext i32 %3842 to i64
  %3844 = load i64, i64* %RBP
  %3845 = load i64, i64* %RDX
  %3846 = mul i64 %3845, 4
  %3847 = add i64 %3844, -1328
  %3848 = add i64 %3847, %3846
  %3849 = load i64, i64* %PC
  %3850 = add i64 %3849, 7
  store i64 %3850, i64* %PC
  %3851 = inttoptr i64 %3848 to i32*
  %3852 = load i32, i32* %3851
  %3853 = sub i32 %3842, %3852
  %3854 = icmp ult i32 %3842, %3852
  %3855 = zext i1 %3854 to i8
  %3856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3855, i8* %3856, align 1, !tbaa !2432
  %3857 = and i32 %3853, 255
  %3858 = call i32 @llvm.ctpop.i32(i32 %3857) #16
  %3859 = trunc i32 %3858 to i8
  %3860 = and i8 %3859, 1
  %3861 = xor i8 %3860, 1
  %3862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3861, i8* %3862, align 1, !tbaa !2446
  %3863 = xor i32 %3852, %3842
  %3864 = xor i32 %3863, %3853
  %3865 = lshr i32 %3864, 4
  %3866 = trunc i32 %3865 to i8
  %3867 = and i8 %3866, 1
  %3868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3867, i8* %3868, align 1, !tbaa !2447
  %3869 = icmp eq i32 %3853, 0
  %3870 = zext i1 %3869 to i8
  %3871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3870, i8* %3871, align 1, !tbaa !2448
  %3872 = lshr i32 %3853, 31
  %3873 = trunc i32 %3872 to i8
  %3874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3873, i8* %3874, align 1, !tbaa !2449
  %3875 = lshr i32 %3842, 31
  %3876 = lshr i32 %3852, 31
  %3877 = xor i32 %3876, %3875
  %3878 = xor i32 %3872, %3875
  %3879 = add nuw nsw i32 %3878, %3877
  %3880 = icmp eq i32 %3879, 2
  %3881 = zext i1 %3880 to i8
  %3882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3881, i8* %3882, align 1, !tbaa !2450
  %3883 = load i64, i64* %PC
  %3884 = add i64 %3883, 202
  %3885 = load i64, i64* %PC
  %3886 = add i64 %3885, 6
  %3887 = load i64, i64* %PC
  %3888 = add i64 %3887, 6
  store i64 %3888, i64* %PC
  %3889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3890 = load i8, i8* %3889, align 1, !tbaa !2448
  %3891 = icmp eq i8 %3890, 0
  %3892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3893 = load i8, i8* %3892, align 1, !tbaa !2449
  %3894 = icmp ne i8 %3893, 0
  %3895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3896 = load i8, i8* %3895, align 1, !tbaa !2450
  %3897 = icmp ne i8 %3896, 0
  %3898 = xor i1 %3894, %3897
  %3899 = xor i1 %3898, true
  %3900 = and i1 %3891, %3899
  %3901 = zext i1 %3900 to i8
  store i8 %3901, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3903 = select i1 %3900, i64 %3884, i64 %3886
  store i64 %3903, i64* %3902, align 8, !tbaa !2428
  %3904 = load i8, i8* %BRANCH_TAKEN
  %3905 = icmp eq i8 %3904, 1
  %3906 = load i64, i64* %RBP
  %3907 = sub i64 %3906, 12
  %3908 = load i64, i64* %PC
  %3909 = add i64 %3908, 3
  store i64 %3909, i64* %PC
  %3910 = inttoptr i64 %3907 to i32*
  %3911 = load i32, i32* %3910
  %3912 = zext i32 %3911 to i64
  store i64 %3912, i64* %RAX, align 8, !tbaa !2428
  %3913 = load i64, i64* %RAX
  %3914 = load i64, i64* %PC
  %3915 = add i64 %3914, 3
  store i64 %3915, i64* %PC
  %3916 = trunc i64 %3913 to i32
  %3917 = add i32 1, %3916
  %3918 = zext i32 %3917 to i64
  store i64 %3918, i64* %RAX, align 8, !tbaa !2428
  %3919 = icmp ult i32 %3917, %3916
  %3920 = icmp ult i32 %3917, 1
  %3921 = or i1 %3919, %3920
  %3922 = zext i1 %3921 to i8
  %3923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3922, i8* %3923, align 1, !tbaa !2432
  %3924 = and i32 %3917, 255
  %3925 = call i32 @llvm.ctpop.i32(i32 %3924) #16
  %3926 = trunc i32 %3925 to i8
  %3927 = and i8 %3926, 1
  %3928 = xor i8 %3927, 1
  %3929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3928, i8* %3929, align 1, !tbaa !2446
  %3930 = xor i64 1, %3913
  %3931 = trunc i64 %3930 to i32
  %3932 = xor i32 %3931, %3917
  %3933 = lshr i32 %3932, 4
  %3934 = trunc i32 %3933 to i8
  %3935 = and i8 %3934, 1
  %3936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3935, i8* %3936, align 1, !tbaa !2447
  %3937 = icmp eq i32 %3917, 0
  %3938 = zext i1 %3937 to i8
  %3939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3938, i8* %3939, align 1, !tbaa !2448
  %3940 = lshr i32 %3917, 31
  %3941 = trunc i32 %3940 to i8
  %3942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3941, i8* %3942, align 1, !tbaa !2449
  %3943 = lshr i32 %3916, 31
  %3944 = xor i32 %3940, %3943
  %3945 = add nuw nsw i32 %3944, %3940
  %3946 = icmp eq i32 %3945, 2
  %3947 = zext i1 %3946 to i8
  %3948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3947, i8* %3948, align 1, !tbaa !2450
  br i1 %3905, label %block_400fd3, label %block_400f0f

block_4015a2:                                     ; preds = %block_401513
  %3949 = sub i64 %8450, 4
  %3950 = load i64, i64* %PC
  %3951 = add i64 %3950, 4
  store i64 %3951, i64* %PC
  %3952 = inttoptr i64 %3949 to i32*
  %3953 = load i32, i32* %3952
  %3954 = sext i32 %3953 to i64
  store i64 %3954, i64* %RAX, align 8, !tbaa !2428
  %3955 = load i64, i64* %RBP
  %3956 = load i64, i64* %RAX
  %3957 = mul i64 %3956, 4
  %3958 = add i64 %3955, -1568
  %3959 = add i64 %3958, %3957
  %3960 = load i64, i64* %PC
  %3961 = add i64 %3960, 8
  store i64 %3961, i64* %PC
  %3962 = inttoptr i64 %3959 to i32*
  %3963 = load i32, i32* %3962
  %3964 = sext i32 %3963 to i64
  store i64 %3964, i64* %RAX, align 8, !tbaa !2428
  %3965 = load i64, i64* %RBP
  %3966 = load i64, i64* %RAX
  %3967 = mul i64 %3966, 4
  %3968 = add i64 %3965, -2640
  %3969 = add i64 %3968, %3967
  %3970 = load i64, i64* %PC
  %3971 = add i64 %3970, 8
  store i64 %3971, i64* %PC
  %3972 = inttoptr i64 %3969 to i32*
  %3973 = load i32, i32* %3972
  %3974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3974, align 1, !tbaa !2432
  %3975 = and i32 %3973, 255
  %3976 = call i32 @llvm.ctpop.i32(i32 %3975) #16
  %3977 = trunc i32 %3976 to i8
  %3978 = and i8 %3977, 1
  %3979 = xor i8 %3978, 1
  %3980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3979, i8* %3980, align 1, !tbaa !2446
  %3981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3981, align 1, !tbaa !2447
  %3982 = icmp eq i32 %3973, 0
  %3983 = zext i1 %3982 to i8
  %3984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3983, i8* %3984, align 1, !tbaa !2448
  %3985 = lshr i32 %3973, 31
  %3986 = trunc i32 %3985 to i8
  %3987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3986, i8* %3987, align 1, !tbaa !2449
  %3988 = lshr i32 %3973, 31
  %3989 = xor i32 %3985, %3988
  %3990 = add nuw nsw i32 %3989, %3988
  %3991 = icmp eq i32 %3990, 2
  %3992 = zext i1 %3991 to i8
  %3993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3992, i8* %3993, align 1, !tbaa !2450
  %3994 = load i64, i64* %PC
  %3995 = add i64 %3994, 325
  %3996 = load i64, i64* %PC
  %3997 = add i64 %3996, 6
  %3998 = load i64, i64* %PC
  %3999 = add i64 %3998, 6
  store i64 %3999, i64* %PC
  %4000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4001 = load i8, i8* %4000, align 1, !tbaa !2448
  store i8 %4001, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4003 = icmp ne i8 %4001, 0
  %4004 = select i1 %4003, i64 %3995, i64 %3997
  store i64 %4004, i64* %4002, align 8, !tbaa !2428
  %4005 = load i8, i8* %BRANCH_TAKEN
  %4006 = icmp eq i8 %4005, 1
  br i1 %4006, label %block_4016fb, label %block_4015bc

block_400d27:                                     ; preds = %block_400d13
  %4007 = sub i64 %5812, 1168
  %4008 = load i64, i64* %PC
  %4009 = add i64 %4008, 7
  store i64 %4009, i64* %PC
  store i64 %4007, i64* %RAX, align 8, !tbaa !2428
  %4010 = load i64, i64* %RBP
  %4011 = sub i64 %4010, 16
  %4012 = load i64, i64* %PC
  %4013 = add i64 %4012, 4
  store i64 %4013, i64* %PC
  %4014 = inttoptr i64 %4011 to i32*
  %4015 = load i32, i32* %4014
  %4016 = sext i32 %4015 to i64
  store i64 %4016, i64* %RCX, align 8, !tbaa !2428
  %4017 = load i64, i64* %RCX
  %4018 = load i64, i64* %PC
  %4019 = add i64 %4018, 4
  store i64 %4019, i64* %PC
  %4020 = shl i64 %4017, 5
  %4021 = icmp slt i64 %4020, 0
  %4022 = shl i64 %4020, 1
  store i64 %4022, i64* %RCX, align 8, !tbaa !2428
  %4023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4024 = zext i1 %4021 to i8
  store i8 %4024, i8* %4023, align 1, !tbaa !2451
  %4025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4026 = trunc i64 %4022 to i32
  %4027 = and i32 %4026, 254
  %4028 = call i32 @llvm.ctpop.i32(i32 %4027) #16
  %4029 = trunc i32 %4028 to i8
  %4030 = and i8 %4029, 1
  %4031 = xor i8 %4030, 1
  store i8 %4031, i8* %4025, align 1, !tbaa !2451
  %4032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4032, align 1, !tbaa !2451
  %4033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4034 = icmp eq i64 %4022, 0
  %4035 = zext i1 %4034 to i8
  store i8 %4035, i8* %4033, align 1, !tbaa !2451
  %4036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4037 = lshr i64 %4022, 63
  %4038 = trunc i64 %4037 to i8
  store i8 %4038, i8* %4036, align 1, !tbaa !2451
  %4039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4039, align 1, !tbaa !2451
  %4040 = load i64, i64* %RAX
  %4041 = load i64, i64* %RCX
  %4042 = load i64, i64* %PC
  %4043 = add i64 %4042, 3
  store i64 %4043, i64* %PC
  %4044 = add i64 %4041, %4040
  store i64 %4044, i64* %RAX, align 8, !tbaa !2428
  %4045 = icmp ult i64 %4044, %4040
  %4046 = icmp ult i64 %4044, %4041
  %4047 = or i1 %4045, %4046
  %4048 = zext i1 %4047 to i8
  %4049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4048, i8* %4049, align 1, !tbaa !2432
  %4050 = trunc i64 %4044 to i32
  %4051 = and i32 %4050, 255
  %4052 = call i32 @llvm.ctpop.i32(i32 %4051) #16
  %4053 = trunc i32 %4052 to i8
  %4054 = and i8 %4053, 1
  %4055 = xor i8 %4054, 1
  %4056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4055, i8* %4056, align 1, !tbaa !2446
  %4057 = xor i64 %4041, %4040
  %4058 = xor i64 %4057, %4044
  %4059 = lshr i64 %4058, 4
  %4060 = trunc i64 %4059 to i8
  %4061 = and i8 %4060, 1
  %4062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4061, i8* %4062, align 1, !tbaa !2447
  %4063 = icmp eq i64 %4044, 0
  %4064 = zext i1 %4063 to i8
  %4065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4064, i8* %4065, align 1, !tbaa !2448
  %4066 = lshr i64 %4044, 63
  %4067 = trunc i64 %4066 to i8
  %4068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4067, i8* %4068, align 1, !tbaa !2449
  %4069 = lshr i64 %4040, 63
  %4070 = lshr i64 %4041, 63
  %4071 = xor i64 %4066, %4069
  %4072 = xor i64 %4066, %4070
  %4073 = add nuw nsw i64 %4071, %4072
  %4074 = icmp eq i64 %4073, 2
  %4075 = zext i1 %4074 to i8
  %4076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4075, i8* %4076, align 1, !tbaa !2450
  %4077 = load i64, i64* %RBP
  %4078 = sub i64 %4077, 4
  %4079 = load i64, i64* %PC
  %4080 = add i64 %4079, 4
  store i64 %4080, i64* %PC
  %4081 = inttoptr i64 %4078 to i32*
  %4082 = load i32, i32* %4081
  %4083 = sext i32 %4082 to i64
  store i64 %4083, i64* %RCX, align 8, !tbaa !2428
  %4084 = load i64, i64* %RAX
  %4085 = load i64, i64* %RCX
  %4086 = mul i64 %4085, 4
  %4087 = add i64 %4086, %4084
  %4088 = load i64, i64* %PC
  %4089 = add i64 %4088, 4
  store i64 %4089, i64* %PC
  %4090 = inttoptr i64 %4087 to i32*
  %4091 = load i32, i32* %4090
  %4092 = sub i32 %4091, -1
  %4093 = icmp ult i32 %4091, -1
  %4094 = zext i1 %4093 to i8
  %4095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4094, i8* %4095, align 1, !tbaa !2432
  %4096 = and i32 %4092, 255
  %4097 = call i32 @llvm.ctpop.i32(i32 %4096) #16
  %4098 = trunc i32 %4097 to i8
  %4099 = and i8 %4098, 1
  %4100 = xor i8 %4099, 1
  %4101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4100, i8* %4101, align 1, !tbaa !2446
  %4102 = xor i32 %4091, -1
  %4103 = xor i32 %4102, %4092
  %4104 = lshr i32 %4103, 4
  %4105 = trunc i32 %4104 to i8
  %4106 = and i8 %4105, 1
  %4107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4106, i8* %4107, align 1, !tbaa !2447
  %4108 = icmp eq i32 %4092, 0
  %4109 = zext i1 %4108 to i8
  %4110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4109, i8* %4110, align 1, !tbaa !2448
  %4111 = lshr i32 %4092, 31
  %4112 = trunc i32 %4111 to i8
  %4113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4112, i8* %4113, align 1, !tbaa !2449
  %4114 = lshr i32 %4091, 31
  %4115 = xor i32 %4114, 1
  %4116 = xor i32 %4111, %4114
  %4117 = add nuw nsw i32 %4116, %4115
  %4118 = icmp eq i32 %4117, 2
  %4119 = zext i1 %4118 to i8
  %4120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4119, i8* %4120, align 1, !tbaa !2450
  %4121 = load i64, i64* %PC
  %4122 = add i64 %4121, 128
  %4123 = load i64, i64* %PC
  %4124 = add i64 %4123, 6
  %4125 = load i64, i64* %PC
  %4126 = add i64 %4125, 6
  store i64 %4126, i64* %PC
  %4127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4128 = load i8, i8* %4127, align 1, !tbaa !2448
  store i8 %4128, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4130 = icmp ne i8 %4128, 0
  %4131 = select i1 %4130, i64 %4122, i64 %4124
  store i64 %4131, i64* %4129, align 8, !tbaa !2428
  %4132 = load i8, i8* %BRANCH_TAKEN
  %4133 = icmp eq i8 %4132, 1
  br i1 %4133, label %block_400dc1, label %block_400d47

block_400993:                                     ; preds = %block_400986
  %4134 = sub i64 %2018, 8
  %4135 = load i64, i64* %PC
  %4136 = add i64 %4135, 4
  store i64 %4136, i64* %PC
  %4137 = inttoptr i64 %4134 to i32*
  %4138 = load i32, i32* %4137
  %4139 = sext i32 %4138 to i64
  store i64 %4139, i64* %RAX, align 8, !tbaa !2428
  %4140 = load i64, i64* %RAX
  %4141 = mul i64 %4140, 4
  %4142 = add i64 %4141, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %4143 = load i64, i64* %PC
  %4144 = add i64 %4143, 8
  store i64 %4144, i64* %PC
  %4145 = inttoptr i64 %4142 to i32*
  %4146 = load i32, i32* %4145
  %4147 = sub i32 %4146, -1
  %4148 = icmp ult i32 %4146, -1
  %4149 = zext i1 %4148 to i8
  %4150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4149, i8* %4150, align 1, !tbaa !2432
  %4151 = and i32 %4147, 255
  %4152 = call i32 @llvm.ctpop.i32(i32 %4151) #16
  %4153 = trunc i32 %4152 to i8
  %4154 = and i8 %4153, 1
  %4155 = xor i8 %4154, 1
  %4156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4155, i8* %4156, align 1, !tbaa !2446
  %4157 = xor i32 %4146, -1
  %4158 = xor i32 %4157, %4147
  %4159 = lshr i32 %4158, 4
  %4160 = trunc i32 %4159 to i8
  %4161 = and i8 %4160, 1
  %4162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4161, i8* %4162, align 1, !tbaa !2447
  %4163 = icmp eq i32 %4147, 0
  %4164 = zext i1 %4163 to i8
  %4165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4164, i8* %4165, align 1, !tbaa !2448
  %4166 = lshr i32 %4147, 31
  %4167 = trunc i32 %4166 to i8
  %4168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4167, i8* %4168, align 1, !tbaa !2449
  %4169 = lshr i32 %4146, 31
  %4170 = xor i32 %4169, 1
  %4171 = xor i32 %4166, %4169
  %4172 = add nuw nsw i32 %4171, %4170
  %4173 = icmp eq i32 %4172, 2
  %4174 = zext i1 %4173 to i8
  %4175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4174, i8* %4175, align 1, !tbaa !2450
  %4176 = load i64, i64* %PC
  %4177 = add i64 %4176, 76
  %4178 = load i64, i64* %PC
  %4179 = add i64 %4178, 6
  %4180 = load i64, i64* %PC
  %4181 = add i64 %4180, 6
  store i64 %4181, i64* %PC
  %4182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4183 = load i8, i8* %4182, align 1, !tbaa !2448
  store i8 %4183, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4185 = icmp ne i8 %4183, 0
  %4186 = select i1 %4185, i64 %4177, i64 %4179
  store i64 %4186, i64* %4184, align 8, !tbaa !2428
  %4187 = load i8, i8* %BRANCH_TAKEN
  %4188 = icmp eq i8 %4187, 1
  br i1 %4188, label %block_4009eb, label %block_4009a5

block_4015f8:                                     ; preds = %block_4015bc, %block_401661
  %MEMORY.17 = phi %struct.Memory* [ %MEMORY.34, %block_4015bc ], [ %MEMORY.35, %block_401661 ]
  %4189 = load i64, i64* %RBP
  %4190 = sub i64 %4189, 8
  %4191 = load i64, i64* %PC
  %4192 = add i64 %4191, 3
  store i64 %4192, i64* %PC
  %4193 = inttoptr i64 %4190 to i32*
  %4194 = load i32, i32* %4193
  %4195 = zext i32 %4194 to i64
  store i64 %4195, i64* %RAX, align 8, !tbaa !2428
  %4196 = load i64, i64* %RBP
  %4197 = sub i64 %4196, 12
  %4198 = load i64, i64* %PC
  %4199 = add i64 %4198, 4
  store i64 %4199, i64* %PC
  %4200 = inttoptr i64 %4197 to i32*
  %4201 = load i32, i32* %4200
  %4202 = sext i32 %4201 to i64
  store i64 %4202, i64* %RCX, align 8, !tbaa !2428
  %4203 = load i32, i32* %EAX
  %4204 = zext i32 %4203 to i64
  %4205 = load i64, i64* %RBP
  %4206 = load i64, i64* %RCX
  %4207 = mul i64 %4206, 4
  %4208 = add i64 %4205, -1328
  %4209 = add i64 %4208, %4207
  %4210 = load i64, i64* %PC
  %4211 = add i64 %4210, 7
  store i64 %4211, i64* %PC
  %4212 = inttoptr i64 %4209 to i32*
  %4213 = load i32, i32* %4212
  %4214 = sub i32 %4203, %4213
  %4215 = icmp ult i32 %4203, %4213
  %4216 = zext i1 %4215 to i8
  %4217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4216, i8* %4217, align 1, !tbaa !2432
  %4218 = and i32 %4214, 255
  %4219 = call i32 @llvm.ctpop.i32(i32 %4218) #16
  %4220 = trunc i32 %4219 to i8
  %4221 = and i8 %4220, 1
  %4222 = xor i8 %4221, 1
  %4223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4222, i8* %4223, align 1, !tbaa !2446
  %4224 = xor i32 %4213, %4203
  %4225 = xor i32 %4224, %4214
  %4226 = lshr i32 %4225, 4
  %4227 = trunc i32 %4226 to i8
  %4228 = and i8 %4227, 1
  %4229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4228, i8* %4229, align 1, !tbaa !2447
  %4230 = icmp eq i32 %4214, 0
  %4231 = zext i1 %4230 to i8
  %4232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4231, i8* %4232, align 1, !tbaa !2448
  %4233 = lshr i32 %4214, 31
  %4234 = trunc i32 %4233 to i8
  %4235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4234, i8* %4235, align 1, !tbaa !2449
  %4236 = lshr i32 %4203, 31
  %4237 = lshr i32 %4213, 31
  %4238 = xor i32 %4237, %4236
  %4239 = xor i32 %4233, %4236
  %4240 = add nuw nsw i32 %4239, %4238
  %4241 = icmp eq i32 %4240, 2
  %4242 = zext i1 %4241 to i8
  %4243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4242, i8* %4243, align 1, !tbaa !2450
  %4244 = load i64, i64* %PC
  %4245 = add i64 %4244, 110
  %4246 = load i64, i64* %PC
  %4247 = add i64 %4246, 6
  %4248 = load i64, i64* %PC
  %4249 = add i64 %4248, 6
  store i64 %4249, i64* %PC
  %4250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4251 = load i8, i8* %4250, align 1, !tbaa !2449
  %4252 = icmp ne i8 %4251, 0
  %4253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4254 = load i8, i8* %4253, align 1, !tbaa !2450
  %4255 = icmp ne i8 %4254, 0
  %4256 = xor i1 %4252, %4255
  %4257 = xor i1 %4256, true
  %4258 = zext i1 %4257 to i8
  store i8 %4258, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4260 = select i1 %4256, i64 %4247, i64 %4245
  store i64 %4260, i64* %4259, align 8, !tbaa !2428
  %4261 = load i8, i8* %BRANCH_TAKEN
  %4262 = icmp eq i8 %4261, 1
  br i1 %4262, label %block_401674, label %block_40160c

block_4017f3:                                     ; preds = %block_40178f
  %4263 = load i64, i64* %PC
  %4264 = add i64 %4263, 5
  %4265 = load i64, i64* %PC
  %4266 = add i64 %4265, 5
  store i64 %4266, i64* %PC
  %4267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4264, i64* %4267, align 8, !tbaa !2428
  br label %block_4017f8

block_400cdc:                                     ; preds = %block_400cd2
  %4268 = sub i64 %4512, 1168
  %4269 = load i64, i64* %PC
  %4270 = add i64 %4269, 7
  store i64 %4270, i64* %PC
  store i64 %4268, i64* %RAX, align 8, !tbaa !2428
  %4271 = load i64, i64* %RBP
  %4272 = sub i64 %4271, 12
  %4273 = load i64, i64* %PC
  %4274 = add i64 %4273, 3
  store i64 %4274, i64* %PC
  %4275 = inttoptr i64 %4272 to i32*
  %4276 = load i32, i32* %4275
  %4277 = zext i32 %4276 to i64
  store i64 %4277, i64* %RCX, align 8, !tbaa !2428
  %4278 = load i64, i64* %RCX
  %4279 = load i64, i64* %PC
  %4280 = add i64 %4279, 3
  store i64 %4280, i64* %PC
  %4281 = trunc i64 %4278 to i32
  %4282 = add i32 1, %4281
  %4283 = zext i32 %4282 to i64
  store i64 %4283, i64* %RCX, align 8, !tbaa !2428
  %4284 = icmp ult i32 %4282, %4281
  %4285 = icmp ult i32 %4282, 1
  %4286 = or i1 %4284, %4285
  %4287 = zext i1 %4286 to i8
  %4288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4287, i8* %4288, align 1, !tbaa !2432
  %4289 = and i32 %4282, 255
  %4290 = call i32 @llvm.ctpop.i32(i32 %4289) #16
  %4291 = trunc i32 %4290 to i8
  %4292 = and i8 %4291, 1
  %4293 = xor i8 %4292, 1
  %4294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4293, i8* %4294, align 1, !tbaa !2446
  %4295 = xor i64 1, %4278
  %4296 = trunc i64 %4295 to i32
  %4297 = xor i32 %4296, %4282
  %4298 = lshr i32 %4297, 4
  %4299 = trunc i32 %4298 to i8
  %4300 = and i8 %4299, 1
  %4301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4300, i8* %4301, align 1, !tbaa !2447
  %4302 = icmp eq i32 %4282, 0
  %4303 = zext i1 %4302 to i8
  %4304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4303, i8* %4304, align 1, !tbaa !2448
  %4305 = lshr i32 %4282, 31
  %4306 = trunc i32 %4305 to i8
  %4307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4306, i8* %4307, align 1, !tbaa !2449
  %4308 = lshr i32 %4281, 31
  %4309 = xor i32 %4305, %4308
  %4310 = add nuw nsw i32 %4309, %4305
  %4311 = icmp eq i32 %4310, 2
  %4312 = zext i1 %4311 to i8
  %4313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4312, i8* %4313, align 1, !tbaa !2450
  %4314 = load i32, i32* %ECX
  %4315 = zext i32 %4314 to i64
  %4316 = load i64, i64* %PC
  %4317 = add i64 %4316, 3
  store i64 %4317, i64* %PC
  %4318 = shl i64 %4315, 32
  %4319 = ashr exact i64 %4318, 32
  store i64 %4319, i64* %RDX, align 8, !tbaa !2428
  %4320 = load i64, i64* %RDX
  %4321 = load i64, i64* %PC
  %4322 = add i64 %4321, 4
  store i64 %4322, i64* %PC
  %4323 = shl i64 %4320, 5
  %4324 = icmp slt i64 %4323, 0
  %4325 = shl i64 %4323, 1
  store i64 %4325, i64* %RDX, align 8, !tbaa !2428
  %4326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4327 = zext i1 %4324 to i8
  store i8 %4327, i8* %4326, align 1, !tbaa !2451
  %4328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4329 = trunc i64 %4325 to i32
  %4330 = and i32 %4329, 254
  %4331 = call i32 @llvm.ctpop.i32(i32 %4330) #16
  %4332 = trunc i32 %4331 to i8
  %4333 = and i8 %4332, 1
  %4334 = xor i8 %4333, 1
  store i8 %4334, i8* %4328, align 1, !tbaa !2451
  %4335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4335, align 1, !tbaa !2451
  %4336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4337 = icmp eq i64 %4325, 0
  %4338 = zext i1 %4337 to i8
  store i8 %4338, i8* %4336, align 1, !tbaa !2451
  %4339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4340 = lshr i64 %4325, 63
  %4341 = trunc i64 %4340 to i8
  store i8 %4341, i8* %4339, align 1, !tbaa !2451
  %4342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4342, align 1, !tbaa !2451
  %4343 = load i64, i64* %RAX
  %4344 = load i64, i64* %RDX
  %4345 = load i64, i64* %PC
  %4346 = add i64 %4345, 3
  store i64 %4346, i64* %PC
  %4347 = add i64 %4344, %4343
  store i64 %4347, i64* %RAX, align 8, !tbaa !2428
  %4348 = icmp ult i64 %4347, %4343
  %4349 = icmp ult i64 %4347, %4344
  %4350 = or i1 %4348, %4349
  %4351 = zext i1 %4350 to i8
  %4352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4351, i8* %4352, align 1, !tbaa !2432
  %4353 = trunc i64 %4347 to i32
  %4354 = and i32 %4353, 255
  %4355 = call i32 @llvm.ctpop.i32(i32 %4354) #16
  %4356 = trunc i32 %4355 to i8
  %4357 = and i8 %4356, 1
  %4358 = xor i8 %4357, 1
  %4359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4358, i8* %4359, align 1, !tbaa !2446
  %4360 = xor i64 %4344, %4343
  %4361 = xor i64 %4360, %4347
  %4362 = lshr i64 %4361, 4
  %4363 = trunc i64 %4362 to i8
  %4364 = and i8 %4363, 1
  %4365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4364, i8* %4365, align 1, !tbaa !2447
  %4366 = icmp eq i64 %4347, 0
  %4367 = zext i1 %4366 to i8
  %4368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4367, i8* %4368, align 1, !tbaa !2448
  %4369 = lshr i64 %4347, 63
  %4370 = trunc i64 %4369 to i8
  %4371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4370, i8* %4371, align 1, !tbaa !2449
  %4372 = lshr i64 %4343, 63
  %4373 = lshr i64 %4344, 63
  %4374 = xor i64 %4369, %4372
  %4375 = xor i64 %4369, %4373
  %4376 = add nuw nsw i64 %4374, %4375
  %4377 = icmp eq i64 %4376, 2
  %4378 = zext i1 %4377 to i8
  %4379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4378, i8* %4379, align 1, !tbaa !2450
  %4380 = load i64, i64* %RBP
  %4381 = sub i64 %4380, 4
  %4382 = load i64, i64* %PC
  %4383 = add i64 %4382, 4
  store i64 %4383, i64* %PC
  %4384 = inttoptr i64 %4381 to i32*
  %4385 = load i32, i32* %4384
  %4386 = sext i32 %4385 to i64
  store i64 %4386, i64* %RDX, align 8, !tbaa !2428
  %4387 = load i64, i64* %RAX
  %4388 = load i64, i64* %RDX
  %4389 = mul i64 %4388, 4
  %4390 = add i64 %4389, %4387
  %4391 = load i64, i64* %PC
  %4392 = add i64 %4391, 7
  store i64 %4392, i64* %PC
  %4393 = inttoptr i64 %4390 to i32*
  store i32 0, i32* %4393
  %4394 = load i64, i64* %RBP
  %4395 = sub i64 %4394, 4
  %4396 = load i64, i64* %PC
  %4397 = add i64 %4396, 3
  store i64 %4397, i64* %PC
  %4398 = inttoptr i64 %4395 to i32*
  %4399 = load i32, i32* %4398
  %4400 = zext i32 %4399 to i64
  store i64 %4400, i64* %RAX, align 8, !tbaa !2428
  %4401 = load i64, i64* %RAX
  %4402 = load i64, i64* %PC
  %4403 = add i64 %4402, 3
  store i64 %4403, i64* %PC
  %4404 = trunc i64 %4401 to i32
  %4405 = add i32 1, %4404
  %4406 = zext i32 %4405 to i64
  store i64 %4406, i64* %RAX, align 8, !tbaa !2428
  %4407 = icmp ult i32 %4405, %4404
  %4408 = icmp ult i32 %4405, 1
  %4409 = or i1 %4407, %4408
  %4410 = zext i1 %4409 to i8
  %4411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4410, i8* %4411, align 1, !tbaa !2432
  %4412 = and i32 %4405, 255
  %4413 = call i32 @llvm.ctpop.i32(i32 %4412) #16
  %4414 = trunc i32 %4413 to i8
  %4415 = and i8 %4414, 1
  %4416 = xor i8 %4415, 1
  %4417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4416, i8* %4417, align 1, !tbaa !2446
  %4418 = xor i64 1, %4401
  %4419 = trunc i64 %4418 to i32
  %4420 = xor i32 %4419, %4405
  %4421 = lshr i32 %4420, 4
  %4422 = trunc i32 %4421 to i8
  %4423 = and i8 %4422, 1
  %4424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4423, i8* %4424, align 1, !tbaa !2447
  %4425 = icmp eq i32 %4405, 0
  %4426 = zext i1 %4425 to i8
  %4427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4426, i8* %4427, align 1, !tbaa !2448
  %4428 = lshr i32 %4405, 31
  %4429 = trunc i32 %4428 to i8
  %4430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4429, i8* %4430, align 1, !tbaa !2449
  %4431 = lshr i32 %4404, 31
  %4432 = xor i32 %4428, %4431
  %4433 = add nuw nsw i32 %4432, %4428
  %4434 = icmp eq i32 %4433, 2
  %4435 = zext i1 %4434 to i8
  %4436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4435, i8* %4436, align 1, !tbaa !2450
  %4437 = load i64, i64* %RBP
  %4438 = sub i64 %4437, 4
  %4439 = load i32, i32* %EAX
  %4440 = zext i32 %4439 to i64
  %4441 = load i64, i64* %PC
  %4442 = add i64 %4441, 3
  store i64 %4442, i64* %PC
  %4443 = inttoptr i64 %4438 to i32*
  store i32 %4439, i32* %4443
  %4444 = load i64, i64* %PC
  %4445 = sub i64 %4444, 53
  %4446 = load i64, i64* %PC
  %4447 = add i64 %4446, 5
  store i64 %4447, i64* %PC
  %4448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4445, i64* %4448, align 8, !tbaa !2428
  br label %block_400cd2

block_4017fd:                                     ; preds = %block_400a46
  %4449 = sub i64 %9632, 4
  %4450 = load i64, i64* %PC
  %4451 = add i64 %4450, 7
  store i64 %4451, i64* %PC
  %4452 = inttoptr i64 %4449 to i32*
  store i32 0, i32* %4452
  br label %block_401804

block_400edb:                                     ; preds = %block_400e97
  %4453 = sub i64 %6076, 1248
  %4454 = load i64, i64* %PC
  %4455 = add i64 %4454, 11
  store i64 %4455, i64* %PC
  %4456 = inttoptr i64 %4453 to i32*
  store i32 0, i32* %4456
  br label %block_400eef

block_4014da:                                     ; preds = %block_401467
  %4457 = add i64 %8366, 7
  store i64 %4457, i64* %PC
  %4458 = inttoptr i64 %8365 to i32*
  store i32 0, i32* %4458
  br label %block_4014e1

block_400cd2:                                     ; preds = %block_400ccb, %block_400cdc
  %MEMORY.18 = phi %struct.Memory* [ %MEMORY.53, %block_400ccb ], [ %MEMORY.18, %block_400cdc ]
  %4459 = load i64, i64* %RBP
  %4460 = sub i64 %4459, 4
  %4461 = load i64, i64* %PC
  %4462 = add i64 %4461, 4
  store i64 %4462, i64* %PC
  %4463 = inttoptr i64 %4460 to i32*
  %4464 = load i32, i32* %4463
  %4465 = sub i32 %4464, 16
  %4466 = icmp ult i32 %4464, 16
  %4467 = zext i1 %4466 to i8
  %4468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4467, i8* %4468, align 1, !tbaa !2432
  %4469 = and i32 %4465, 255
  %4470 = call i32 @llvm.ctpop.i32(i32 %4469) #16
  %4471 = trunc i32 %4470 to i8
  %4472 = and i8 %4471, 1
  %4473 = xor i8 %4472, 1
  %4474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4473, i8* %4474, align 1, !tbaa !2446
  %4475 = xor i32 %4464, 16
  %4476 = xor i32 %4475, %4465
  %4477 = lshr i32 %4476, 4
  %4478 = trunc i32 %4477 to i8
  %4479 = and i8 %4478, 1
  %4480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4479, i8* %4480, align 1, !tbaa !2447
  %4481 = icmp eq i32 %4465, 0
  %4482 = zext i1 %4481 to i8
  %4483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4482, i8* %4483, align 1, !tbaa !2448
  %4484 = lshr i32 %4465, 31
  %4485 = trunc i32 %4484 to i8
  %4486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4485, i8* %4486, align 1, !tbaa !2449
  %4487 = lshr i32 %4464, 31
  %4488 = xor i32 %4484, %4487
  %4489 = add nuw nsw i32 %4488, %4487
  %4490 = icmp eq i32 %4489, 2
  %4491 = zext i1 %4490 to i8
  %4492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4491, i8* %4492, align 1, !tbaa !2450
  %4493 = load i64, i64* %PC
  %4494 = add i64 %4493, 54
  %4495 = load i64, i64* %PC
  %4496 = add i64 %4495, 6
  %4497 = load i64, i64* %PC
  %4498 = add i64 %4497, 6
  store i64 %4498, i64* %PC
  %4499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4500 = load i8, i8* %4499, align 1, !tbaa !2449
  %4501 = icmp ne i8 %4500, 0
  %4502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4503 = load i8, i8* %4502, align 1, !tbaa !2450
  %4504 = icmp ne i8 %4503, 0
  %4505 = xor i1 %4501, %4504
  %4506 = xor i1 %4505, true
  %4507 = zext i1 %4506 to i8
  store i8 %4507, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4509 = select i1 %4505, i64 %4496, i64 %4494
  store i64 %4509, i64* %4508, align 8, !tbaa !2428
  %4510 = load i8, i8* %BRANCH_TAKEN
  %4511 = icmp eq i8 %4510, 1
  %4512 = load i64, i64* %RBP
  br i1 %4511, label %block_400d0c, label %block_400cdc

block_4010d1:                                     ; preds = %block_4010bd
  %4513 = sub i64 %6967, 1168
  %4514 = load i64, i64* %PC
  %4515 = add i64 %4514, 7
  store i64 %4515, i64* %PC
  store i64 %4513, i64* %RAX, align 8, !tbaa !2428
  %4516 = load i64, i64* %RBP
  %4517 = sub i64 %4516, 12
  %4518 = load i64, i64* %PC
  %4519 = add i64 %4518, 4
  store i64 %4519, i64* %PC
  %4520 = inttoptr i64 %4517 to i32*
  %4521 = load i32, i32* %4520
  %4522 = sext i32 %4521 to i64
  store i64 %4522, i64* %RCX, align 8, !tbaa !2428
  %4523 = load i64, i64* %RCX
  %4524 = load i64, i64* %PC
  %4525 = add i64 %4524, 4
  store i64 %4525, i64* %PC
  %4526 = shl i64 %4523, 5
  %4527 = icmp slt i64 %4526, 0
  %4528 = shl i64 %4526, 1
  store i64 %4528, i64* %RCX, align 8, !tbaa !2428
  %4529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4530 = zext i1 %4527 to i8
  store i8 %4530, i8* %4529, align 1, !tbaa !2451
  %4531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4532 = trunc i64 %4528 to i32
  %4533 = and i32 %4532, 254
  %4534 = call i32 @llvm.ctpop.i32(i32 %4533) #16
  %4535 = trunc i32 %4534 to i8
  %4536 = and i8 %4535, 1
  %4537 = xor i8 %4536, 1
  store i8 %4537, i8* %4531, align 1, !tbaa !2451
  %4538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4538, align 1, !tbaa !2451
  %4539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4540 = icmp eq i64 %4528, 0
  %4541 = zext i1 %4540 to i8
  store i8 %4541, i8* %4539, align 1, !tbaa !2451
  %4542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4543 = lshr i64 %4528, 63
  %4544 = trunc i64 %4543 to i8
  store i8 %4544, i8* %4542, align 1, !tbaa !2451
  %4545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4545, align 1, !tbaa !2451
  %4546 = load i64, i64* %RAX
  %4547 = load i64, i64* %RCX
  %4548 = load i64, i64* %PC
  %4549 = add i64 %4548, 3
  store i64 %4549, i64* %PC
  %4550 = add i64 %4547, %4546
  store i64 %4550, i64* %RAX, align 8, !tbaa !2428
  %4551 = icmp ult i64 %4550, %4546
  %4552 = icmp ult i64 %4550, %4547
  %4553 = or i1 %4551, %4552
  %4554 = zext i1 %4553 to i8
  %4555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4554, i8* %4555, align 1, !tbaa !2432
  %4556 = trunc i64 %4550 to i32
  %4557 = and i32 %4556, 255
  %4558 = call i32 @llvm.ctpop.i32(i32 %4557) #16
  %4559 = trunc i32 %4558 to i8
  %4560 = and i8 %4559, 1
  %4561 = xor i8 %4560, 1
  %4562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4561, i8* %4562, align 1, !tbaa !2446
  %4563 = xor i64 %4547, %4546
  %4564 = xor i64 %4563, %4550
  %4565 = lshr i64 %4564, 4
  %4566 = trunc i64 %4565 to i8
  %4567 = and i8 %4566, 1
  %4568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4567, i8* %4568, align 1, !tbaa !2447
  %4569 = icmp eq i64 %4550, 0
  %4570 = zext i1 %4569 to i8
  %4571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4570, i8* %4571, align 1, !tbaa !2448
  %4572 = lshr i64 %4550, 63
  %4573 = trunc i64 %4572 to i8
  %4574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4573, i8* %4574, align 1, !tbaa !2449
  %4575 = lshr i64 %4546, 63
  %4576 = lshr i64 %4547, 63
  %4577 = xor i64 %4572, %4575
  %4578 = xor i64 %4572, %4576
  %4579 = add nuw nsw i64 %4577, %4578
  %4580 = icmp eq i64 %4579, 2
  %4581 = zext i1 %4580 to i8
  %4582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4581, i8* %4582, align 1, !tbaa !2450
  %4583 = load i64, i64* %RBP
  %4584 = sub i64 %4583, 4
  %4585 = load i64, i64* %PC
  %4586 = add i64 %4585, 4
  store i64 %4586, i64* %PC
  %4587 = inttoptr i64 %4584 to i32*
  %4588 = load i32, i32* %4587
  %4589 = sext i32 %4588 to i64
  store i64 %4589, i64* %RCX, align 8, !tbaa !2428
  %4590 = load i64, i64* %RAX
  %4591 = load i64, i64* %RCX
  %4592 = mul i64 %4591, 4
  %4593 = add i64 %4592, %4590
  %4594 = load i64, i64* %PC
  %4595 = add i64 %4594, 3
  store i64 %4595, i64* %PC
  %4596 = inttoptr i64 %4593 to i32*
  %4597 = load i32, i32* %4596
  %4598 = zext i32 %4597 to i64
  store i64 %4598, i64* %RDX, align 8, !tbaa !2428
  %4599 = load i64, i64* %RBP
  %4600 = sub i64 %4599, 4
  %4601 = load i64, i64* %PC
  %4602 = add i64 %4601, 4
  store i64 %4602, i64* %PC
  %4603 = inttoptr i64 %4600 to i32*
  %4604 = load i32, i32* %4603
  %4605 = sext i32 %4604 to i64
  store i64 %4605, i64* %RAX, align 8, !tbaa !2428
  %4606 = load i64, i64* %RBP
  %4607 = load i64, i64* %RAX
  %4608 = mul i64 %4607, 4
  %4609 = add i64 %4606, -2688
  %4610 = add i64 %4609, %4608
  %4611 = load i32, i32* %EDX
  %4612 = zext i32 %4611 to i64
  %4613 = load i64, i64* %PC
  %4614 = add i64 %4613, 7
  store i64 %4614, i64* %PC
  %4615 = inttoptr i64 %4610 to i32*
  store i32 %4611, i32* %4615
  %4616 = load i64, i64* %RBP
  %4617 = sub i64 %4616, 4
  %4618 = load i64, i64* %PC
  %4619 = add i64 %4618, 3
  store i64 %4619, i64* %PC
  %4620 = inttoptr i64 %4617 to i32*
  %4621 = load i32, i32* %4620
  %4622 = zext i32 %4621 to i64
  store i64 %4622, i64* %RAX, align 8, !tbaa !2428
  %4623 = load i64, i64* %RAX
  %4624 = load i64, i64* %PC
  %4625 = add i64 %4624, 3
  store i64 %4625, i64* %PC
  %4626 = trunc i64 %4623 to i32
  %4627 = add i32 1, %4626
  %4628 = zext i32 %4627 to i64
  store i64 %4628, i64* %RAX, align 8, !tbaa !2428
  %4629 = icmp ult i32 %4627, %4626
  %4630 = icmp ult i32 %4627, 1
  %4631 = or i1 %4629, %4630
  %4632 = zext i1 %4631 to i8
  %4633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4632, i8* %4633, align 1, !tbaa !2432
  %4634 = and i32 %4627, 255
  %4635 = call i32 @llvm.ctpop.i32(i32 %4634) #16
  %4636 = trunc i32 %4635 to i8
  %4637 = and i8 %4636, 1
  %4638 = xor i8 %4637, 1
  %4639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4638, i8* %4639, align 1, !tbaa !2446
  %4640 = xor i64 1, %4623
  %4641 = trunc i64 %4640 to i32
  %4642 = xor i32 %4641, %4627
  %4643 = lshr i32 %4642, 4
  %4644 = trunc i32 %4643 to i8
  %4645 = and i8 %4644, 1
  %4646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4645, i8* %4646, align 1, !tbaa !2447
  %4647 = icmp eq i32 %4627, 0
  %4648 = zext i1 %4647 to i8
  %4649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4648, i8* %4649, align 1, !tbaa !2448
  %4650 = lshr i32 %4627, 31
  %4651 = trunc i32 %4650 to i8
  %4652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4651, i8* %4652, align 1, !tbaa !2449
  %4653 = lshr i32 %4626, 31
  %4654 = xor i32 %4650, %4653
  %4655 = add nuw nsw i32 %4654, %4650
  %4656 = icmp eq i32 %4655, 2
  %4657 = zext i1 %4656 to i8
  %4658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4657, i8* %4658, align 1, !tbaa !2450
  %4659 = load i64, i64* %RBP
  %4660 = sub i64 %4659, 4
  %4661 = load i32, i32* %EAX
  %4662 = zext i32 %4661 to i64
  %4663 = load i64, i64* %PC
  %4664 = add i64 %4663, 3
  store i64 %4664, i64* %PC
  %4665 = inttoptr i64 %4660 to i32*
  store i32 %4661, i32* %4665
  %4666 = load i64, i64* %PC
  %4667 = sub i64 %4666, 65
  %4668 = load i64, i64* %PC
  %4669 = add i64 %4668, 5
  store i64 %4669, i64* %PC
  %4670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4667, i64* %4670, align 8, !tbaa !2428
  br label %block_4010bd

block_401221:                                     ; preds = %block_401434, %block_40121a
  %MEMORY.19 = phi %struct.Memory* [ %MEMORY.25, %block_40121a ], [ %MEMORY.42, %block_401434 ]
  %4671 = load i64, i64* %RBP
  %4672 = sub i64 %4671, 4
  %4673 = load i64, i64* %PC
  %4674 = add i64 %4673, 3
  store i64 %4674, i64* %PC
  %4675 = inttoptr i64 %4672 to i32*
  %4676 = load i32, i32* %4675
  %4677 = zext i32 %4676 to i64
  store i64 %4677, i64* %RAX, align 8, !tbaa !2428
  %4678 = load i64, i64* %RBP
  %4679 = sub i64 %4678, 12
  %4680 = load i64, i64* %PC
  %4681 = add i64 %4680, 4
  store i64 %4681, i64* %PC
  %4682 = inttoptr i64 %4679 to i32*
  %4683 = load i32, i32* %4682
  %4684 = sext i32 %4683 to i64
  store i64 %4684, i64* %RCX, align 8, !tbaa !2428
  %4685 = load i32, i32* %EAX
  %4686 = zext i32 %4685 to i64
  %4687 = load i64, i64* %RBP
  %4688 = load i64, i64* %RCX
  %4689 = mul i64 %4688, 4
  %4690 = add i64 %4687, -1328
  %4691 = add i64 %4690, %4689
  %4692 = load i64, i64* %PC
  %4693 = add i64 %4692, 7
  store i64 %4693, i64* %PC
  %4694 = inttoptr i64 %4691 to i32*
  %4695 = load i32, i32* %4694
  %4696 = sub i32 %4685, %4695
  %4697 = icmp ult i32 %4685, %4695
  %4698 = zext i1 %4697 to i8
  %4699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4698, i8* %4699, align 1, !tbaa !2432
  %4700 = and i32 %4696, 255
  %4701 = call i32 @llvm.ctpop.i32(i32 %4700) #16
  %4702 = trunc i32 %4701 to i8
  %4703 = and i8 %4702, 1
  %4704 = xor i8 %4703, 1
  %4705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4704, i8* %4705, align 1, !tbaa !2446
  %4706 = xor i32 %4695, %4685
  %4707 = xor i32 %4706, %4696
  %4708 = lshr i32 %4707, 4
  %4709 = trunc i32 %4708 to i8
  %4710 = and i8 %4709, 1
  %4711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4710, i8* %4711, align 1, !tbaa !2447
  %4712 = icmp eq i32 %4696, 0
  %4713 = zext i1 %4712 to i8
  %4714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4713, i8* %4714, align 1, !tbaa !2448
  %4715 = lshr i32 %4696, 31
  %4716 = trunc i32 %4715 to i8
  %4717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4716, i8* %4717, align 1, !tbaa !2449
  %4718 = lshr i32 %4685, 31
  %4719 = lshr i32 %4695, 31
  %4720 = xor i32 %4719, %4718
  %4721 = xor i32 %4715, %4718
  %4722 = add nuw nsw i32 %4721, %4720
  %4723 = icmp eq i32 %4722, 2
  %4724 = zext i1 %4723 to i8
  %4725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4724, i8* %4725, align 1, !tbaa !2450
  %4726 = load i64, i64* %PC
  %4727 = add i64 %4726, 561
  %4728 = load i64, i64* %PC
  %4729 = add i64 %4728, 6
  %4730 = load i64, i64* %PC
  %4731 = add i64 %4730, 6
  store i64 %4731, i64* %PC
  %4732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4733 = load i8, i8* %4732, align 1, !tbaa !2448
  %4734 = icmp eq i8 %4733, 0
  %4735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4736 = load i8, i8* %4735, align 1, !tbaa !2449
  %4737 = icmp ne i8 %4736, 0
  %4738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4739 = load i8, i8* %4738, align 1, !tbaa !2450
  %4740 = icmp ne i8 %4739, 0
  %4741 = xor i1 %4737, %4740
  %4742 = xor i1 %4741, true
  %4743 = and i1 %4734, %4742
  %4744 = zext i1 %4743 to i8
  store i8 %4744, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4746 = select i1 %4743, i64 %4727, i64 %4729
  store i64 %4746, i64* %4745, align 8, !tbaa !2428
  %4747 = load i8, i8* %BRANCH_TAKEN
  %4748 = icmp eq i8 %4747, 1
  %4749 = load i64, i64* %RBP
  %4750 = sub i64 %4749, 4
  %4751 = load i64, i64* %PC
  br i1 %4748, label %block_401460, label %block_401235

block_400ae9:                                     ; preds = %block_40102e, %block_400aba
  %MEMORY.20 = phi %struct.Memory* [ %MEMORY.26, %block_400aba ], [ %MEMORY.43, %block_40102e ]
  %4752 = load i64, i64* %RBP
  %4753 = sub i64 %4752, 12
  %4754 = load i64, i64* %PC
  %4755 = add i64 %4754, 3
  store i64 %4755, i64* %PC
  %4756 = inttoptr i64 %4753 to i32*
  %4757 = load i32, i32* %4756
  %4758 = zext i32 %4757 to i64
  store i64 %4758, i64* %RAX, align 8, !tbaa !2428
  %4759 = load i64, i64* %RAX
  %4760 = load i64, i64* %PC
  %4761 = add i64 %4760, 3
  store i64 %4761, i64* %PC
  %4762 = trunc i64 %4759 to i32
  %4763 = add i32 1, %4762
  %4764 = zext i32 %4763 to i64
  store i64 %4764, i64* %RAX, align 8, !tbaa !2428
  %4765 = icmp ult i32 %4763, %4762
  %4766 = icmp ult i32 %4763, 1
  %4767 = or i1 %4765, %4766
  %4768 = zext i1 %4767 to i8
  %4769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4768, i8* %4769, align 1, !tbaa !2432
  %4770 = and i32 %4763, 255
  %4771 = call i32 @llvm.ctpop.i32(i32 %4770) #16
  %4772 = trunc i32 %4771 to i8
  %4773 = and i8 %4772, 1
  %4774 = xor i8 %4773, 1
  %4775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4774, i8* %4775, align 1, !tbaa !2446
  %4776 = xor i64 1, %4759
  %4777 = trunc i64 %4776 to i32
  %4778 = xor i32 %4777, %4763
  %4779 = lshr i32 %4778, 4
  %4780 = trunc i32 %4779 to i8
  %4781 = and i8 %4780, 1
  %4782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4781, i8* %4782, align 1, !tbaa !2447
  %4783 = icmp eq i32 %4763, 0
  %4784 = zext i1 %4783 to i8
  %4785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4784, i8* %4785, align 1, !tbaa !2448
  %4786 = lshr i32 %4763, 31
  %4787 = trunc i32 %4786 to i8
  %4788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4787, i8* %4788, align 1, !tbaa !2449
  %4789 = lshr i32 %4762, 31
  %4790 = xor i32 %4786, %4789
  %4791 = add nuw nsw i32 %4790, %4786
  %4792 = icmp eq i32 %4791, 2
  %4793 = zext i1 %4792 to i8
  %4794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4793, i8* %4794, align 1, !tbaa !2450
  %4795 = load i64, i64* %RBP
  %4796 = sub i64 %4795, 12
  %4797 = load i32, i32* %EAX
  %4798 = zext i32 %4797 to i64
  %4799 = load i64, i64* %PC
  %4800 = add i64 %4799, 3
  store i64 %4800, i64* %PC
  %4801 = inttoptr i64 %4796 to i32*
  store i32 %4797, i32* %4801
  %4802 = load i64, i64* %RBP
  %4803 = sub i64 %4802, 12
  %4804 = load i64, i64* %PC
  %4805 = add i64 %4804, 4
  store i64 %4805, i64* %PC
  %4806 = inttoptr i64 %4803 to i32*
  %4807 = load i32, i32* %4806
  %4808 = sext i32 %4807 to i64
  store i64 %4808, i64* %RCX, align 8, !tbaa !2428
  %4809 = load i64, i64* %RBP
  %4810 = load i64, i64* %RCX
  %4811 = mul i64 %4810, 4
  %4812 = add i64 %4809, -1248
  %4813 = add i64 %4812, %4811
  %4814 = load i64, i64* %PC
  %4815 = add i64 %4814, 8
  store i64 %4815, i64* %PC
  %4816 = inttoptr i64 %4813 to i32*
  %4817 = load i32, i32* %4816
  %4818 = sub i32 %4817, -1
  %4819 = icmp ult i32 %4817, -1
  %4820 = zext i1 %4819 to i8
  %4821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4820, i8* %4821, align 1, !tbaa !2432
  %4822 = and i32 %4818, 255
  %4823 = call i32 @llvm.ctpop.i32(i32 %4822) #16
  %4824 = trunc i32 %4823 to i8
  %4825 = and i8 %4824, 1
  %4826 = xor i8 %4825, 1
  %4827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4826, i8* %4827, align 1, !tbaa !2446
  %4828 = xor i32 %4817, -1
  %4829 = xor i32 %4828, %4818
  %4830 = lshr i32 %4829, 4
  %4831 = trunc i32 %4830 to i8
  %4832 = and i8 %4831, 1
  %4833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4832, i8* %4833, align 1, !tbaa !2447
  %4834 = icmp eq i32 %4818, 0
  %4835 = zext i1 %4834 to i8
  %4836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4835, i8* %4836, align 1, !tbaa !2448
  %4837 = lshr i32 %4818, 31
  %4838 = trunc i32 %4837 to i8
  %4839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4838, i8* %4839, align 1, !tbaa !2449
  %4840 = lshr i32 %4817, 31
  %4841 = xor i32 %4840, 1
  %4842 = xor i32 %4837, %4840
  %4843 = add nuw nsw i32 %4842, %4841
  %4844 = icmp eq i32 %4843, 2
  %4845 = zext i1 %4844 to i8
  %4846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4845, i8* %4846, align 1, !tbaa !2450
  %4847 = load i64, i64* %PC
  %4848 = add i64 %4847, 180
  %4849 = load i64, i64* %PC
  %4850 = add i64 %4849, 6
  %4851 = load i64, i64* %PC
  %4852 = add i64 %4851, 6
  store i64 %4852, i64* %PC
  %4853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4854 = load i8, i8* %4853, align 1, !tbaa !2448
  %4855 = icmp eq i8 %4854, 0
  %4856 = zext i1 %4855 to i8
  store i8 %4856, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4858 = select i1 %4855, i64 %4848, i64 %4850
  store i64 %4858, i64* %4857, align 8, !tbaa !2428
  %4859 = load i8, i8* %BRANCH_TAKEN
  %4860 = icmp eq i8 %4859, 1
  %4861 = load i64, i64* %RBP
  %4862 = sub i64 %4861, 12
  %4863 = load i64, i64* %PC
  br i1 %4860, label %block_400bb2, label %block_400b04

block_4012bd:                                     ; preds = %block_4012ab
  %4864 = load i64, i64* %RBP
  %4865 = sub i64 %4864, 1168
  %4866 = load i64, i64* %PC
  %4867 = add i64 %4866, 7
  store i64 %4867, i64* %PC
  store i64 %4865, i64* %RAX, align 8, !tbaa !2428
  %4868 = load i64, i64* %RBP
  %4869 = sub i64 %4868, 12
  %4870 = load i64, i64* %PC
  %4871 = add i64 %4870, 4
  store i64 %4871, i64* %PC
  %4872 = inttoptr i64 %4869 to i32*
  %4873 = load i32, i32* %4872
  %4874 = sext i32 %4873 to i64
  store i64 %4874, i64* %RCX, align 8, !tbaa !2428
  %4875 = load i64, i64* %RCX
  %4876 = load i64, i64* %PC
  %4877 = add i64 %4876, 4
  store i64 %4877, i64* %PC
  %4878 = shl i64 %4875, 5
  %4879 = icmp slt i64 %4878, 0
  %4880 = shl i64 %4878, 1
  store i64 %4880, i64* %RCX, align 8, !tbaa !2428
  %4881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4882 = zext i1 %4879 to i8
  store i8 %4882, i8* %4881, align 1, !tbaa !2451
  %4883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4884 = trunc i64 %4880 to i32
  %4885 = and i32 %4884, 254
  %4886 = call i32 @llvm.ctpop.i32(i32 %4885) #16
  %4887 = trunc i32 %4886 to i8
  %4888 = and i8 %4887, 1
  %4889 = xor i8 %4888, 1
  store i8 %4889, i8* %4883, align 1, !tbaa !2451
  %4890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4890, align 1, !tbaa !2451
  %4891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4892 = icmp eq i64 %4880, 0
  %4893 = zext i1 %4892 to i8
  store i8 %4893, i8* %4891, align 1, !tbaa !2451
  %4894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4895 = lshr i64 %4880, 63
  %4896 = trunc i64 %4895 to i8
  store i8 %4896, i8* %4894, align 1, !tbaa !2451
  %4897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4897, align 1, !tbaa !2451
  %4898 = load i64, i64* %RAX
  %4899 = load i64, i64* %RCX
  %4900 = load i64, i64* %PC
  %4901 = add i64 %4900, 3
  store i64 %4901, i64* %PC
  %4902 = add i64 %4899, %4898
  store i64 %4902, i64* %RAX, align 8, !tbaa !2428
  %4903 = icmp ult i64 %4902, %4898
  %4904 = icmp ult i64 %4902, %4899
  %4905 = or i1 %4903, %4904
  %4906 = zext i1 %4905 to i8
  %4907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4906, i8* %4907, align 1, !tbaa !2432
  %4908 = trunc i64 %4902 to i32
  %4909 = and i32 %4908, 255
  %4910 = call i32 @llvm.ctpop.i32(i32 %4909) #16
  %4911 = trunc i32 %4910 to i8
  %4912 = and i8 %4911, 1
  %4913 = xor i8 %4912, 1
  %4914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4913, i8* %4914, align 1, !tbaa !2446
  %4915 = xor i64 %4899, %4898
  %4916 = xor i64 %4915, %4902
  %4917 = lshr i64 %4916, 4
  %4918 = trunc i64 %4917 to i8
  %4919 = and i8 %4918, 1
  %4920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4919, i8* %4920, align 1, !tbaa !2447
  %4921 = icmp eq i64 %4902, 0
  %4922 = zext i1 %4921 to i8
  %4923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4922, i8* %4923, align 1, !tbaa !2448
  %4924 = lshr i64 %4902, 63
  %4925 = trunc i64 %4924 to i8
  %4926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4925, i8* %4926, align 1, !tbaa !2449
  %4927 = lshr i64 %4898, 63
  %4928 = lshr i64 %4899, 63
  %4929 = xor i64 %4924, %4927
  %4930 = xor i64 %4924, %4928
  %4931 = add nuw nsw i64 %4929, %4930
  %4932 = icmp eq i64 %4931, 2
  %4933 = zext i1 %4932 to i8
  %4934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4933, i8* %4934, align 1, !tbaa !2450
  %4935 = load i64, i64* %RBP
  %4936 = sub i64 %4935, 4
  %4937 = load i64, i64* %PC
  %4938 = add i64 %4937, 4
  store i64 %4938, i64* %PC
  %4939 = inttoptr i64 %4936 to i32*
  %4940 = load i32, i32* %4939
  %4941 = sext i32 %4940 to i64
  store i64 %4941, i64* %RCX, align 8, !tbaa !2428
  %4942 = load i64, i64* %RAX
  %4943 = load i64, i64* %RCX
  %4944 = mul i64 %4943, 4
  %4945 = add i64 %4944, %4942
  %4946 = load i64, i64* %PC
  %4947 = add i64 %4946, 4
  store i64 %4947, i64* %PC
  %4948 = inttoptr i64 %4945 to i32*
  %4949 = load i32, i32* %4948
  %4950 = sub i32 %4949, -1
  %4951 = icmp ult i32 %4949, -1
  %4952 = zext i1 %4951 to i8
  %4953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4952, i8* %4953, align 1, !tbaa !2432
  %4954 = and i32 %4950, 255
  %4955 = call i32 @llvm.ctpop.i32(i32 %4954) #16
  %4956 = trunc i32 %4955 to i8
  %4957 = and i8 %4956, 1
  %4958 = xor i8 %4957, 1
  %4959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4958, i8* %4959, align 1, !tbaa !2446
  %4960 = xor i32 %4949, -1
  %4961 = xor i32 %4960, %4950
  %4962 = lshr i32 %4961, 4
  %4963 = trunc i32 %4962 to i8
  %4964 = and i8 %4963, 1
  %4965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4964, i8* %4965, align 1, !tbaa !2447
  %4966 = icmp eq i32 %4950, 0
  %4967 = zext i1 %4966 to i8
  %4968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4967, i8* %4968, align 1, !tbaa !2448
  %4969 = lshr i32 %4950, 31
  %4970 = trunc i32 %4969 to i8
  %4971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4970, i8* %4971, align 1, !tbaa !2449
  %4972 = lshr i32 %4949, 31
  %4973 = xor i32 %4972, 1
  %4974 = xor i32 %4969, %4972
  %4975 = add nuw nsw i32 %4974, %4973
  %4976 = icmp eq i32 %4975, 2
  %4977 = zext i1 %4976 to i8
  %4978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4977, i8* %4978, align 1, !tbaa !2450
  %4979 = load i64, i64* %PC
  %4980 = add i64 %4979, 41
  %4981 = load i64, i64* %PC
  %4982 = add i64 %4981, 6
  %4983 = load i64, i64* %PC
  %4984 = add i64 %4983, 6
  store i64 %4984, i64* %PC
  %4985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4986 = load i8, i8* %4985, align 1, !tbaa !2448
  %4987 = icmp eq i8 %4986, 0
  %4988 = zext i1 %4987 to i8
  store i8 %4988, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4990 = select i1 %4987, i64 %4980, i64 %4982
  store i64 %4990, i64* %4989, align 8, !tbaa !2428
  %4991 = load i8, i8* %BRANCH_TAKEN
  %4992 = icmp eq i8 %4991, 1
  br i1 %4992, label %block_401300, label %block_4012dd

block_400d47:                                     ; preds = %block_400d27
  %4993 = load i64, i64* %RBP
  %4994 = sub i64 %4993, 1168
  %4995 = load i64, i64* %PC
  %4996 = add i64 %4995, 7
  store i64 %4996, i64* %PC
  store i64 %4994, i64* %RAX, align 8, !tbaa !2428
  %4997 = load i64, i64* %PC
  %4998 = add i64 %4997, 5
  store i64 %4998, i64* %PC
  store i64 255, i64* %RCX, align 8, !tbaa !2428
  %4999 = load i64, i64* %RBP
  %5000 = sub i64 %4999, 12
  %5001 = load i64, i64* %PC
  %5002 = add i64 %5001, 4
  store i64 %5002, i64* %PC
  %5003 = inttoptr i64 %5000 to i32*
  %5004 = load i32, i32* %5003
  %5005 = sext i32 %5004 to i64
  store i64 %5005, i64* %RDX, align 8, !tbaa !2428
  %5006 = load i64, i64* %RBP
  %5007 = load i64, i64* %RDX
  %5008 = mul i64 %5007, 4
  %5009 = add i64 %5006, -1248
  %5010 = add i64 %5009, %5008
  %5011 = load i64, i64* %PC
  %5012 = add i64 %5011, 7
  store i64 %5012, i64* %PC
  %5013 = inttoptr i64 %5010 to i32*
  %5014 = load i32, i32* %5013
  %5015 = zext i32 %5014 to i64
  store i64 %5015, i64* %RSI, align 8, !tbaa !2428
  %5016 = load i64, i64* %RSI
  %5017 = load i64, i64* %PC
  %5018 = add i64 %5017, 6
  store i64 %5018, i64* %PC
  %5019 = trunc i64 %5016 to i32
  %5020 = add i32 255, %5019
  %5021 = zext i32 %5020 to i64
  store i64 %5021, i64* %RSI, align 8, !tbaa !2428
  %5022 = icmp ult i32 %5020, %5019
  %5023 = icmp ult i32 %5020, 255
  %5024 = or i1 %5022, %5023
  %5025 = zext i1 %5024 to i8
  %5026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5025, i8* %5026, align 1, !tbaa !2432
  %5027 = and i32 %5020, 255
  %5028 = call i32 @llvm.ctpop.i32(i32 %5027) #16
  %5029 = trunc i32 %5028 to i8
  %5030 = and i8 %5029, 1
  %5031 = xor i8 %5030, 1
  %5032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5031, i8* %5032, align 1, !tbaa !2446
  %5033 = xor i64 255, %5016
  %5034 = trunc i64 %5033 to i32
  %5035 = xor i32 %5034, %5020
  %5036 = lshr i32 %5035, 4
  %5037 = trunc i32 %5036 to i8
  %5038 = and i8 %5037, 1
  %5039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5038, i8* %5039, align 1, !tbaa !2447
  %5040 = icmp eq i32 %5020, 0
  %5041 = zext i1 %5040 to i8
  %5042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5041, i8* %5042, align 1, !tbaa !2448
  %5043 = lshr i32 %5020, 31
  %5044 = trunc i32 %5043 to i8
  %5045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5044, i8* %5045, align 1, !tbaa !2449
  %5046 = lshr i32 %5019, 31
  %5047 = xor i32 %5043, %5046
  %5048 = add nuw nsw i32 %5047, %5043
  %5049 = icmp eq i32 %5048, 2
  %5050 = zext i1 %5049 to i8
  %5051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5050, i8* %5051, align 1, !tbaa !2450
  %5052 = load i64, i64* %RBP
  %5053 = sub i64 %5052, 16
  %5054 = load i64, i64* %PC
  %5055 = add i64 %5054, 4
  store i64 %5055, i64* %PC
  %5056 = inttoptr i64 %5053 to i32*
  %5057 = load i32, i32* %5056
  %5058 = sext i32 %5057 to i64
  store i64 %5058, i64* %RDX, align 8, !tbaa !2428
  %5059 = load i64, i64* %RSI
  %5060 = load i64, i64* %RBP
  %5061 = load i64, i64* %RDX
  %5062 = mul i64 %5061, 4
  %5063 = add i64 %5060, -1248
  %5064 = add i64 %5063, %5062
  %5065 = load i64, i64* %PC
  %5066 = add i64 %5065, 7
  store i64 %5066, i64* %PC
  %5067 = trunc i64 %5059 to i32
  %5068 = inttoptr i64 %5064 to i32*
  %5069 = load i32, i32* %5068
  %5070 = sub i32 %5067, %5069
  %5071 = zext i32 %5070 to i64
  store i64 %5071, i64* %RSI, align 8, !tbaa !2428
  %5072 = icmp ult i32 %5067, %5069
  %5073 = zext i1 %5072 to i8
  %5074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5073, i8* %5074, align 1, !tbaa !2432
  %5075 = and i32 %5070, 255
  %5076 = call i32 @llvm.ctpop.i32(i32 %5075) #16
  %5077 = trunc i32 %5076 to i8
  %5078 = and i8 %5077, 1
  %5079 = xor i8 %5078, 1
  %5080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5079, i8* %5080, align 1, !tbaa !2446
  %5081 = xor i32 %5069, %5067
  %5082 = xor i32 %5081, %5070
  %5083 = lshr i32 %5082, 4
  %5084 = trunc i32 %5083 to i8
  %5085 = and i8 %5084, 1
  %5086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5085, i8* %5086, align 1, !tbaa !2447
  %5087 = icmp eq i32 %5070, 0
  %5088 = zext i1 %5087 to i8
  %5089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5088, i8* %5089, align 1, !tbaa !2448
  %5090 = lshr i32 %5070, 31
  %5091 = trunc i32 %5090 to i8
  %5092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5091, i8* %5092, align 1, !tbaa !2449
  %5093 = lshr i32 %5067, 31
  %5094 = lshr i32 %5069, 31
  %5095 = xor i32 %5094, %5093
  %5096 = xor i32 %5090, %5093
  %5097 = add nuw nsw i32 %5096, %5095
  %5098 = icmp eq i32 %5097, 2
  %5099 = zext i1 %5098 to i8
  %5100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5099, i8* %5100, align 1, !tbaa !2450
  %5101 = load i64, i64* %RBP
  %5102 = sub i64 %5101, 16
  %5103 = load i64, i64* %PC
  %5104 = add i64 %5103, 4
  store i64 %5104, i64* %PC
  %5105 = inttoptr i64 %5102 to i32*
  %5106 = load i32, i32* %5105
  %5107 = sext i32 %5106 to i64
  store i64 %5107, i64* %RDX, align 8, !tbaa !2428
  %5108 = load i64, i64* %RDX
  %5109 = load i64, i64* %PC
  %5110 = add i64 %5109, 4
  store i64 %5110, i64* %PC
  %5111 = shl i64 %5108, 5
  %5112 = icmp slt i64 %5111, 0
  %5113 = shl i64 %5111, 1
  store i64 %5113, i64* %RDX, align 8, !tbaa !2428
  %5114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5115 = zext i1 %5112 to i8
  store i8 %5115, i8* %5114, align 1, !tbaa !2451
  %5116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5117 = trunc i64 %5113 to i32
  %5118 = and i32 %5117, 254
  %5119 = call i32 @llvm.ctpop.i32(i32 %5118) #16
  %5120 = trunc i32 %5119 to i8
  %5121 = and i8 %5120, 1
  %5122 = xor i8 %5121, 1
  store i8 %5122, i8* %5116, align 1, !tbaa !2451
  %5123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5123, align 1, !tbaa !2451
  %5124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5125 = icmp eq i64 %5113, 0
  %5126 = zext i1 %5125 to i8
  store i8 %5126, i8* %5124, align 1, !tbaa !2451
  %5127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5128 = lshr i64 %5113, 63
  %5129 = trunc i64 %5128 to i8
  store i8 %5129, i8* %5127, align 1, !tbaa !2451
  %5130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5130, align 1, !tbaa !2451
  %5131 = load i64, i64* %RAX
  %5132 = load i64, i64* %PC
  %5133 = add i64 %5132, 3
  store i64 %5133, i64* %PC
  store i64 %5131, i64* %RDI, align 8, !tbaa !2428
  %5134 = load i64, i64* %RDI
  %5135 = load i64, i64* %RDX
  %5136 = load i64, i64* %PC
  %5137 = add i64 %5136, 3
  store i64 %5137, i64* %PC
  %5138 = add i64 %5135, %5134
  store i64 %5138, i64* %RDI, align 8, !tbaa !2428
  %5139 = icmp ult i64 %5138, %5134
  %5140 = icmp ult i64 %5138, %5135
  %5141 = or i1 %5139, %5140
  %5142 = zext i1 %5141 to i8
  %5143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5142, i8* %5143, align 1, !tbaa !2432
  %5144 = trunc i64 %5138 to i32
  %5145 = and i32 %5144, 255
  %5146 = call i32 @llvm.ctpop.i32(i32 %5145) #16
  %5147 = trunc i32 %5146 to i8
  %5148 = and i8 %5147, 1
  %5149 = xor i8 %5148, 1
  %5150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5149, i8* %5150, align 1, !tbaa !2446
  %5151 = xor i64 %5135, %5134
  %5152 = xor i64 %5151, %5138
  %5153 = lshr i64 %5152, 4
  %5154 = trunc i64 %5153 to i8
  %5155 = and i8 %5154, 1
  %5156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5155, i8* %5156, align 1, !tbaa !2447
  %5157 = icmp eq i64 %5138, 0
  %5158 = zext i1 %5157 to i8
  %5159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5158, i8* %5159, align 1, !tbaa !2448
  %5160 = lshr i64 %5138, 63
  %5161 = trunc i64 %5160 to i8
  %5162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5161, i8* %5162, align 1, !tbaa !2449
  %5163 = lshr i64 %5134, 63
  %5164 = lshr i64 %5135, 63
  %5165 = xor i64 %5160, %5163
  %5166 = xor i64 %5160, %5164
  %5167 = add nuw nsw i64 %5165, %5166
  %5168 = icmp eq i64 %5167, 2
  %5169 = zext i1 %5168 to i8
  %5170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5169, i8* %5170, align 1, !tbaa !2450
  %5171 = load i64, i64* %RBP
  %5172 = sub i64 %5171, 4
  %5173 = load i64, i64* %PC
  %5174 = add i64 %5173, 4
  store i64 %5174, i64* %PC
  %5175 = inttoptr i64 %5172 to i32*
  %5176 = load i32, i32* %5175
  %5177 = sext i32 %5176 to i64
  store i64 %5177, i64* %RDX, align 8, !tbaa !2428
  %5178 = load i64, i64* %RSI
  %5179 = load i64, i64* %RDI
  %5180 = load i64, i64* %RDX
  %5181 = mul i64 %5180, 4
  %5182 = add i64 %5181, %5179
  %5183 = load i64, i64* %PC
  %5184 = add i64 %5183, 3
  store i64 %5184, i64* %PC
  %5185 = trunc i64 %5178 to i32
  %5186 = inttoptr i64 %5182 to i32*
  %5187 = load i32, i32* %5186
  %5188 = add i32 %5187, %5185
  %5189 = zext i32 %5188 to i64
  store i64 %5189, i64* %RSI, align 8, !tbaa !2428
  %5190 = icmp ult i32 %5188, %5185
  %5191 = icmp ult i32 %5188, %5187
  %5192 = or i1 %5190, %5191
  %5193 = zext i1 %5192 to i8
  %5194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5193, i8* %5194, align 1, !tbaa !2432
  %5195 = and i32 %5188, 255
  %5196 = call i32 @llvm.ctpop.i32(i32 %5195) #16
  %5197 = trunc i32 %5196 to i8
  %5198 = and i8 %5197, 1
  %5199 = xor i8 %5198, 1
  %5200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5199, i8* %5200, align 1, !tbaa !2446
  %5201 = xor i32 %5187, %5185
  %5202 = xor i32 %5201, %5188
  %5203 = lshr i32 %5202, 4
  %5204 = trunc i32 %5203 to i8
  %5205 = and i8 %5204, 1
  %5206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5205, i8* %5206, align 1, !tbaa !2447
  %5207 = icmp eq i32 %5188, 0
  %5208 = zext i1 %5207 to i8
  %5209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5208, i8* %5209, align 1, !tbaa !2448
  %5210 = lshr i32 %5188, 31
  %5211 = trunc i32 %5210 to i8
  %5212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5211, i8* %5212, align 1, !tbaa !2449
  %5213 = lshr i32 %5185, 31
  %5214 = lshr i32 %5187, 31
  %5215 = xor i32 %5210, %5213
  %5216 = xor i32 %5210, %5214
  %5217 = add nuw nsw i32 %5215, %5216
  %5218 = icmp eq i32 %5217, 2
  %5219 = zext i1 %5218 to i8
  %5220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5219, i8* %5220, align 1, !tbaa !2450
  %5221 = load i64, i64* %RBP
  %5222 = sub i64 %5221, 2704
  %5223 = load i64, i64* %RAX
  %5224 = load i64, i64* %PC
  %5225 = add i64 %5224, 7
  store i64 %5225, i64* %PC
  %5226 = inttoptr i64 %5222 to i64*
  store i64 %5223, i64* %5226
  %5227 = load i32, i32* %ESI
  %5228 = zext i32 %5227 to i64
  %5229 = load i64, i64* %PC
  %5230 = add i64 %5229, 2
  store i64 %5230, i64* %PC
  %5231 = and i64 %5228, 4294967295
  store i64 %5231, i64* %RAX, align 8, !tbaa !2428
  %5232 = load i64, i64* %PC
  %5233 = add i64 %5232, 1
  store i64 %5233, i64* %PC
  %5234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %5235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5236 = bitcast %union.anon* %5235 to i32*
  %5237 = load i32, i32* %5236, align 8, !tbaa !2452
  %5238 = sext i32 %5237 to i64
  %5239 = lshr i64 %5238, 32
  store i64 %5239, i64* %5234, align 8, !tbaa !2428
  %5240 = load i32, i32* %ECX
  %5241 = zext i32 %5240 to i64
  %5242 = load i64, i64* %PC
  %5243 = add i64 %5242, 2
  store i64 %5243, i64* %PC
  %5244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5245 = bitcast %union.anon* %5244 to i32*
  %5246 = load i32, i32* %5245, align 8, !tbaa !2452
  %5247 = zext i32 %5246 to i64
  %5248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5249 = bitcast %union.anon* %5248 to i32*
  %5250 = load i32, i32* %5249, align 8, !tbaa !2452
  %5251 = zext i32 %5250 to i64
  %5252 = shl i64 %5241, 32
  %5253 = ashr exact i64 %5252, 32
  %5254 = shl nuw i64 %5251, 32
  %5255 = or i64 %5254, %5247
  %5256 = sdiv i64 %5255, %5253
  %5257 = shl i64 %5256, 32
  %5258 = ashr exact i64 %5257, 32
  %5259 = icmp eq i64 %5256, %5258
  br i1 %5259, label %5264, label %5260

; <label>:5260:                                   ; preds = %block_400d47
  %5261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5262 = load i64, i64* %5261, align 8, !tbaa !2428
  %5263 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5262, %struct.Memory* %MEMORY.23) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

; <label>:5264:                                   ; preds = %block_400d47
  %5265 = srem i64 %5255, %5253
  %5266 = getelementptr inbounds %union.anon, %union.anon* %5244, i64 0, i32 0
  %5267 = and i64 %5256, 4294967295
  store i64 %5267, i64* %5266, align 8, !tbaa !2428
  %5268 = getelementptr inbounds %union.anon, %union.anon* %5248, i64 0, i32 0
  %5269 = and i64 %5265, 4294967295
  store i64 %5269, i64* %5268, align 8, !tbaa !2428
  %5270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5270, align 1, !tbaa !2432
  %5271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %5271, align 1, !tbaa !2446
  %5272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5272, align 1, !tbaa !2447
  %5273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5273, align 1, !tbaa !2448
  %5274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %5274, align 1, !tbaa !2449
  %5275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5275, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3: ; preds = %5260, %5264
  %5276 = phi %struct.Memory* [ %5263, %5260 ], [ %MEMORY.23, %5264 ]
  %5277 = load i32, i32* %EDX
  %5278 = zext i32 %5277 to i64
  %5279 = load i64, i64* %PC
  %5280 = add i64 %5279, 3
  store i64 %5280, i64* %PC
  %5281 = shl i64 %5278, 32
  %5282 = ashr exact i64 %5281, 32
  store i64 %5282, i64* %RDI, align 8, !tbaa !2428
  %5283 = load i64, i64* %RDI
  %5284 = mul i64 %5283, 4
  %5285 = add i64 %5284, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %5286 = load i64, i64* %PC
  %5287 = add i64 %5286, 7
  store i64 %5287, i64* %PC
  %5288 = inttoptr i64 %5285 to i32*
  %5289 = load i32, i32* %5288
  %5290 = zext i32 %5289 to i64
  store i64 %5290, i64* %RCX, align 8, !tbaa !2428
  %5291 = load i64, i64* %RBP
  %5292 = sub i64 %5291, 12
  %5293 = load i64, i64* %PC
  %5294 = add i64 %5293, 3
  store i64 %5294, i64* %PC
  %5295 = inttoptr i64 %5292 to i32*
  %5296 = load i32, i32* %5295
  %5297 = zext i32 %5296 to i64
  store i64 %5297, i64* %RDX, align 8, !tbaa !2428
  %5298 = load i64, i64* %RDX
  %5299 = load i64, i64* %PC
  %5300 = add i64 %5299, 3
  store i64 %5300, i64* %PC
  %5301 = trunc i64 %5298 to i32
  %5302 = add i32 1, %5301
  %5303 = zext i32 %5302 to i64
  store i64 %5303, i64* %RDX, align 8, !tbaa !2428
  %5304 = icmp ult i32 %5302, %5301
  %5305 = icmp ult i32 %5302, 1
  %5306 = or i1 %5304, %5305
  %5307 = zext i1 %5306 to i8
  %5308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5307, i8* %5308, align 1, !tbaa !2432
  %5309 = and i32 %5302, 255
  %5310 = call i32 @llvm.ctpop.i32(i32 %5309) #16
  %5311 = trunc i32 %5310 to i8
  %5312 = and i8 %5311, 1
  %5313 = xor i8 %5312, 1
  %5314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5313, i8* %5314, align 1, !tbaa !2446
  %5315 = xor i64 1, %5298
  %5316 = trunc i64 %5315 to i32
  %5317 = xor i32 %5316, %5302
  %5318 = lshr i32 %5317, 4
  %5319 = trunc i32 %5318 to i8
  %5320 = and i8 %5319, 1
  %5321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5320, i8* %5321, align 1, !tbaa !2447
  %5322 = icmp eq i32 %5302, 0
  %5323 = zext i1 %5322 to i8
  %5324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5323, i8* %5324, align 1, !tbaa !2448
  %5325 = lshr i32 %5302, 31
  %5326 = trunc i32 %5325 to i8
  %5327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5326, i8* %5327, align 1, !tbaa !2449
  %5328 = lshr i32 %5301, 31
  %5329 = xor i32 %5325, %5328
  %5330 = add nuw nsw i32 %5329, %5325
  %5331 = icmp eq i32 %5330, 2
  %5332 = zext i1 %5331 to i8
  %5333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5332, i8* %5333, align 1, !tbaa !2450
  %5334 = load i32, i32* %EDX
  %5335 = zext i32 %5334 to i64
  %5336 = load i64, i64* %PC
  %5337 = add i64 %5336, 3
  store i64 %5337, i64* %PC
  %5338 = shl i64 %5335, 32
  %5339 = ashr exact i64 %5338, 32
  store i64 %5339, i64* %RDI, align 8, !tbaa !2428
  %5340 = load i64, i64* %RDI
  %5341 = load i64, i64* %PC
  %5342 = add i64 %5341, 4
  store i64 %5342, i64* %PC
  %5343 = shl i64 %5340, 5
  %5344 = icmp slt i64 %5343, 0
  %5345 = shl i64 %5343, 1
  store i64 %5345, i64* %RDI, align 8, !tbaa !2428
  %5346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5347 = zext i1 %5344 to i8
  store i8 %5347, i8* %5346, align 1, !tbaa !2451
  %5348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5349 = trunc i64 %5345 to i32
  %5350 = and i32 %5349, 254
  %5351 = call i32 @llvm.ctpop.i32(i32 %5350) #16
  %5352 = trunc i32 %5351 to i8
  %5353 = and i8 %5352, 1
  %5354 = xor i8 %5353, 1
  store i8 %5354, i8* %5348, align 1, !tbaa !2451
  %5355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5355, align 1, !tbaa !2451
  %5356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5357 = icmp eq i64 %5345, 0
  %5358 = zext i1 %5357 to i8
  store i8 %5358, i8* %5356, align 1, !tbaa !2451
  %5359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5360 = lshr i64 %5345, 63
  %5361 = trunc i64 %5360 to i8
  store i8 %5361, i8* %5359, align 1, !tbaa !2451
  %5362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5362, align 1, !tbaa !2451
  %5363 = load i64, i64* %RBP
  %5364 = sub i64 %5363, 2704
  %5365 = load i64, i64* %PC
  %5366 = add i64 %5365, 7
  store i64 %5366, i64* %PC
  %5367 = inttoptr i64 %5364 to i64*
  %5368 = load i64, i64* %5367
  store i64 %5368, i64* %R8, align 8, !tbaa !2428
  %5369 = load i64, i64* %R8
  %5370 = load i64, i64* %RDI
  %5371 = load i64, i64* %PC
  %5372 = add i64 %5371, 3
  store i64 %5372, i64* %PC
  %5373 = add i64 %5370, %5369
  store i64 %5373, i64* %R8, align 8, !tbaa !2428
  %5374 = icmp ult i64 %5373, %5369
  %5375 = icmp ult i64 %5373, %5370
  %5376 = or i1 %5374, %5375
  %5377 = zext i1 %5376 to i8
  %5378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5377, i8* %5378, align 1, !tbaa !2432
  %5379 = trunc i64 %5373 to i32
  %5380 = and i32 %5379, 255
  %5381 = call i32 @llvm.ctpop.i32(i32 %5380) #16
  %5382 = trunc i32 %5381 to i8
  %5383 = and i8 %5382, 1
  %5384 = xor i8 %5383, 1
  %5385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5384, i8* %5385, align 1, !tbaa !2446
  %5386 = xor i64 %5370, %5369
  %5387 = xor i64 %5386, %5373
  %5388 = lshr i64 %5387, 4
  %5389 = trunc i64 %5388 to i8
  %5390 = and i8 %5389, 1
  %5391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5390, i8* %5391, align 1, !tbaa !2447
  %5392 = icmp eq i64 %5373, 0
  %5393 = zext i1 %5392 to i8
  %5394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5393, i8* %5394, align 1, !tbaa !2448
  %5395 = lshr i64 %5373, 63
  %5396 = trunc i64 %5395 to i8
  %5397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5396, i8* %5397, align 1, !tbaa !2449
  %5398 = lshr i64 %5369, 63
  %5399 = lshr i64 %5370, 63
  %5400 = xor i64 %5395, %5398
  %5401 = xor i64 %5395, %5399
  %5402 = add nuw nsw i64 %5400, %5401
  %5403 = icmp eq i64 %5402, 2
  %5404 = zext i1 %5403 to i8
  %5405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5404, i8* %5405, align 1, !tbaa !2450
  %5406 = load i64, i64* %RBP
  %5407 = sub i64 %5406, 4
  %5408 = load i64, i64* %PC
  %5409 = add i64 %5408, 3
  store i64 %5409, i64* %PC
  %5410 = inttoptr i64 %5407 to i32*
  %5411 = load i32, i32* %5410
  %5412 = zext i32 %5411 to i64
  store i64 %5412, i64* %RDX, align 8, !tbaa !2428
  %5413 = load i64, i64* %RDX
  %5414 = load i64, i64* %RBP
  %5415 = sub i64 %5414, 12
  %5416 = load i64, i64* %PC
  %5417 = add i64 %5416, 3
  store i64 %5417, i64* %PC
  %5418 = trunc i64 %5413 to i32
  %5419 = inttoptr i64 %5415 to i32*
  %5420 = load i32, i32* %5419
  %5421 = add i32 %5420, %5418
  %5422 = zext i32 %5421 to i64
  store i64 %5422, i64* %RDX, align 8, !tbaa !2428
  %5423 = icmp ult i32 %5421, %5418
  %5424 = icmp ult i32 %5421, %5420
  %5425 = or i1 %5423, %5424
  %5426 = zext i1 %5425 to i8
  %5427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5426, i8* %5427, align 1, !tbaa !2432
  %5428 = and i32 %5421, 255
  %5429 = call i32 @llvm.ctpop.i32(i32 %5428) #16
  %5430 = trunc i32 %5429 to i8
  %5431 = and i8 %5430, 1
  %5432 = xor i8 %5431, 1
  %5433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5432, i8* %5433, align 1, !tbaa !2446
  %5434 = xor i32 %5420, %5418
  %5435 = xor i32 %5434, %5421
  %5436 = lshr i32 %5435, 4
  %5437 = trunc i32 %5436 to i8
  %5438 = and i8 %5437, 1
  %5439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5438, i8* %5439, align 1, !tbaa !2447
  %5440 = icmp eq i32 %5421, 0
  %5441 = zext i1 %5440 to i8
  %5442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5441, i8* %5442, align 1, !tbaa !2448
  %5443 = lshr i32 %5421, 31
  %5444 = trunc i32 %5443 to i8
  %5445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5444, i8* %5445, align 1, !tbaa !2449
  %5446 = lshr i32 %5418, 31
  %5447 = lshr i32 %5420, 31
  %5448 = xor i32 %5443, %5446
  %5449 = xor i32 %5443, %5447
  %5450 = add nuw nsw i32 %5448, %5449
  %5451 = icmp eq i32 %5450, 2
  %5452 = zext i1 %5451 to i8
  %5453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5452, i8* %5453, align 1, !tbaa !2450
  %5454 = load i64, i64* %RDX
  %5455 = load i64, i64* %RBP
  %5456 = sub i64 %5455, 16
  %5457 = load i64, i64* %PC
  %5458 = add i64 %5457, 3
  store i64 %5458, i64* %PC
  %5459 = trunc i64 %5454 to i32
  %5460 = inttoptr i64 %5456 to i32*
  %5461 = load i32, i32* %5460
  %5462 = sub i32 %5459, %5461
  %5463 = zext i32 %5462 to i64
  store i64 %5463, i64* %RDX, align 8, !tbaa !2428
  %5464 = icmp ult i32 %5459, %5461
  %5465 = zext i1 %5464 to i8
  %5466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5465, i8* %5466, align 1, !tbaa !2432
  %5467 = and i32 %5462, 255
  %5468 = call i32 @llvm.ctpop.i32(i32 %5467) #16
  %5469 = trunc i32 %5468 to i8
  %5470 = and i8 %5469, 1
  %5471 = xor i8 %5470, 1
  %5472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5471, i8* %5472, align 1, !tbaa !2446
  %5473 = xor i32 %5461, %5459
  %5474 = xor i32 %5473, %5462
  %5475 = lshr i32 %5474, 4
  %5476 = trunc i32 %5475 to i8
  %5477 = and i8 %5476, 1
  %5478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5477, i8* %5478, align 1, !tbaa !2447
  %5479 = icmp eq i32 %5462, 0
  %5480 = zext i1 %5479 to i8
  %5481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5480, i8* %5481, align 1, !tbaa !2448
  %5482 = lshr i32 %5462, 31
  %5483 = trunc i32 %5482 to i8
  %5484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5483, i8* %5484, align 1, !tbaa !2449
  %5485 = lshr i32 %5459, 31
  %5486 = lshr i32 %5461, 31
  %5487 = xor i32 %5486, %5485
  %5488 = xor i32 %5482, %5485
  %5489 = add nuw nsw i32 %5488, %5487
  %5490 = icmp eq i32 %5489, 2
  %5491 = zext i1 %5490 to i8
  %5492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5491, i8* %5492, align 1, !tbaa !2450
  %5493 = load i32, i32* %EDX
  %5494 = zext i32 %5493 to i64
  %5495 = load i64, i64* %PC
  %5496 = add i64 %5495, 3
  store i64 %5496, i64* %PC
  %5497 = shl i64 %5494, 32
  %5498 = ashr exact i64 %5497, 32
  store i64 %5498, i64* %RDI, align 8, !tbaa !2428
  %5499 = load i64, i64* %R8
  %5500 = load i64, i64* %RDI
  %5501 = mul i64 %5500, 4
  %5502 = add i64 %5501, %5499
  %5503 = load i32, i32* %ECX
  %5504 = zext i32 %5503 to i64
  %5505 = load i64, i64* %PC
  %5506 = add i64 %5505, 4
  store i64 %5506, i64* %PC
  %5507 = inttoptr i64 %5502 to i32*
  store i32 %5503, i32* %5507
  br label %block_400dc1

block_401474:                                     ; preds = %block_401467
  %5508 = add i64 %8366, 4
  store i64 %5508, i64* %PC
  %5509 = inttoptr i64 %8365 to i32*
  %5510 = load i32, i32* %5509
  %5511 = sext i32 %5510 to i64
  store i64 %5511, i64* %RAX, align 8, !tbaa !2428
  %5512 = load i64, i64* %RBP
  %5513 = load i64, i64* %RAX
  %5514 = mul i64 %5513, 4
  %5515 = add i64 %5512, -2640
  %5516 = add i64 %5515, %5514
  %5517 = load i64, i64* %PC
  %5518 = add i64 %5517, 11
  store i64 %5518, i64* %PC
  %5519 = inttoptr i64 %5516 to i32*
  store i32 0, i32* %5519
  %5520 = load i64, i64* %RBP
  %5521 = sub i64 %5520, 4
  %5522 = load i64, i64* %PC
  %5523 = add i64 %5522, 4
  store i64 %5523, i64* %PC
  %5524 = inttoptr i64 %5521 to i32*
  %5525 = load i32, i32* %5524
  %5526 = sext i32 %5525 to i64
  store i64 %5526, i64* %RAX, align 8, !tbaa !2428
  %5527 = load i64, i64* %RAX
  %5528 = mul i64 %5527, 4
  %5529 = add i64 %5528, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %5530 = load i64, i64* %PC
  %5531 = add i64 %5530, 8
  store i64 %5531, i64* %PC
  %5532 = inttoptr i64 %5529 to i32*
  %5533 = load i32, i32* %5532
  %5534 = sub i32 %5533, -1
  %5535 = icmp ult i32 %5533, -1
  %5536 = zext i1 %5535 to i8
  %5537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5536, i8* %5537, align 1, !tbaa !2432
  %5538 = and i32 %5534, 255
  %5539 = call i32 @llvm.ctpop.i32(i32 %5538) #16
  %5540 = trunc i32 %5539 to i8
  %5541 = and i8 %5540, 1
  %5542 = xor i8 %5541, 1
  %5543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5542, i8* %5543, align 1, !tbaa !2446
  %5544 = xor i32 %5533, -1
  %5545 = xor i32 %5544, %5534
  %5546 = lshr i32 %5545, 4
  %5547 = trunc i32 %5546 to i8
  %5548 = and i8 %5547, 1
  %5549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5548, i8* %5549, align 1, !tbaa !2447
  %5550 = icmp eq i32 %5534, 0
  %5551 = zext i1 %5550 to i8
  %5552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5551, i8* %5552, align 1, !tbaa !2448
  %5553 = lshr i32 %5534, 31
  %5554 = trunc i32 %5553 to i8
  %5555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5554, i8* %5555, align 1, !tbaa !2449
  %5556 = lshr i32 %5533, 31
  %5557 = xor i32 %5556, 1
  %5558 = xor i32 %5553, %5556
  %5559 = add nuw nsw i32 %5558, %5557
  %5560 = icmp eq i32 %5559, 2
  %5561 = zext i1 %5560 to i8
  %5562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5561, i8* %5562, align 1, !tbaa !2450
  %5563 = load i64, i64* %PC
  %5564 = add i64 %5563, 41
  %5565 = load i64, i64* %PC
  %5566 = add i64 %5565, 6
  %5567 = load i64, i64* %PC
  %5568 = add i64 %5567, 6
  store i64 %5568, i64* %PC
  %5569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5570 = load i8, i8* %5569, align 1, !tbaa !2448
  store i8 %5570, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5572 = icmp ne i8 %5570, 0
  %5573 = select i1 %5572, i64 %5564, i64 %5566
  store i64 %5573, i64* %5571, align 8, !tbaa !2428
  %5574 = load i8, i8* %BRANCH_TAKEN
  %5575 = icmp eq i8 %5574, 1
  %5576 = load i64, i64* %RBP
  %5577 = sub i64 %5576, 4
  %5578 = load i64, i64* %PC
  %5579 = add i64 %5578, 4
  store i64 %5579, i64* %PC
  %5580 = inttoptr i64 %5577 to i32*
  %5581 = load i32, i32* %5580
  %5582 = sext i32 %5581 to i64
  store i64 %5582, i64* %RAX, align 8, !tbaa !2428
  %5583 = load i64, i64* %RAX
  %5584 = mul i64 %5583, 4
  %5585 = add i64 %5584, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %5586 = load i64, i64* %PC
  br i1 %5575, label %block_4014b8, label %block_401495

block_4014b8:                                     ; preds = %block_401474
  %5587 = add i64 %5586, 11
  store i64 %5587, i64* %PC
  %5588 = inttoptr i64 %5585 to i32*
  store i32 0, i32* %5588
  br label %block_4014c7

block_400eae:                                     ; preds = %block_400e97
  %5589 = sub i64 %6076, 1488
  %5590 = load i64, i64* %PC
  %5591 = add i64 %5590, 8
  store i64 %5591, i64* %PC
  %5592 = inttoptr i64 %5589 to i32*
  %5593 = load i32, i32* %5592
  %5594 = sext i32 %5593 to i64
  store i64 %5594, i64* %RCX, align 8, !tbaa !2428
  %5595 = load i64, i64* %RCX
  %5596 = mul i64 %5595, 4
  %5597 = add i64 %5596, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %5598 = load i64, i64* %PC
  %5599 = add i64 %5598, 7
  store i64 %5599, i64* %PC
  %5600 = inttoptr i64 %5597 to i32*
  %5601 = load i32, i32* %5600
  %5602 = zext i32 %5601 to i64
  store i64 %5602, i64* %RAX, align 8, !tbaa !2428
  %5603 = load i64, i64* %RBP
  %5604 = sub i64 %5603, 12
  %5605 = load i64, i64* %PC
  %5606 = add i64 %5605, 3
  store i64 %5606, i64* %PC
  %5607 = inttoptr i64 %5604 to i32*
  %5608 = load i32, i32* %5607
  %5609 = zext i32 %5608 to i64
  store i64 %5609, i64* %RDX, align 8, !tbaa !2428
  %5610 = load i64, i64* %RDX
  %5611 = load i64, i64* %PC
  %5612 = add i64 %5611, 3
  store i64 %5612, i64* %PC
  %5613 = trunc i64 %5610 to i32
  %5614 = add i32 1, %5613
  %5615 = zext i32 %5614 to i64
  store i64 %5615, i64* %RDX, align 8, !tbaa !2428
  %5616 = icmp ult i32 %5614, %5613
  %5617 = icmp ult i32 %5614, 1
  %5618 = or i1 %5616, %5617
  %5619 = zext i1 %5618 to i8
  %5620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5619, i8* %5620, align 1, !tbaa !2432
  %5621 = and i32 %5614, 255
  %5622 = call i32 @llvm.ctpop.i32(i32 %5621) #16
  %5623 = trunc i32 %5622 to i8
  %5624 = and i8 %5623, 1
  %5625 = xor i8 %5624, 1
  %5626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5625, i8* %5626, align 1, !tbaa !2446
  %5627 = xor i64 1, %5610
  %5628 = trunc i64 %5627 to i32
  %5629 = xor i32 %5628, %5614
  %5630 = lshr i32 %5629, 4
  %5631 = trunc i32 %5630 to i8
  %5632 = and i8 %5631, 1
  %5633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5632, i8* %5633, align 1, !tbaa !2447
  %5634 = icmp eq i32 %5614, 0
  %5635 = zext i1 %5634 to i8
  %5636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5635, i8* %5636, align 1, !tbaa !2448
  %5637 = lshr i32 %5614, 31
  %5638 = trunc i32 %5637 to i8
  %5639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5638, i8* %5639, align 1, !tbaa !2449
  %5640 = lshr i32 %5613, 31
  %5641 = xor i32 %5637, %5640
  %5642 = add nuw nsw i32 %5641, %5637
  %5643 = icmp eq i32 %5642, 2
  %5644 = zext i1 %5643 to i8
  %5645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5644, i8* %5645, align 1, !tbaa !2450
  %5646 = load i32, i32* %EDX
  %5647 = zext i32 %5646 to i64
  %5648 = load i64, i64* %PC
  %5649 = add i64 %5648, 3
  store i64 %5649, i64* %PC
  %5650 = shl i64 %5647, 32
  %5651 = ashr exact i64 %5650, 32
  store i64 %5651, i64* %RCX, align 8, !tbaa !2428
  %5652 = load i64, i64* %RBP
  %5653 = load i64, i64* %RCX
  %5654 = mul i64 %5653, 4
  %5655 = add i64 %5652, -1248
  %5656 = add i64 %5655, %5654
  %5657 = load i32, i32* %EAX
  %5658 = zext i32 %5657 to i64
  %5659 = load i64, i64* %PC
  %5660 = add i64 %5659, 7
  store i64 %5660, i64* %PC
  %5661 = inttoptr i64 %5656 to i32*
  store i32 %5657, i32* %5661
  %5662 = load i64, i64* %PC
  %5663 = add i64 %5662, 25
  %5664 = load i64, i64* %PC
  %5665 = add i64 %5664, 5
  store i64 %5665, i64* %PC
  %5666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5663, i64* %5666, align 8, !tbaa !2428
  br label %block_400eef

block_4010b6:                                     ; preds = %block_40105e
  %5667 = sub i64 %8970, 4
  %5668 = load i64, i64* %PC
  %5669 = add i64 %5668, 7
  store i64 %5669, i64* %PC
  %5670 = inttoptr i64 %5667 to i32*
  store i32 1, i32* %5670
  br label %block_4010bd

block_4012ab:                                     ; preds = %block_401235, %block_401247
  %MEMORY.21 = phi %struct.Memory* [ %MEMORY.19, %block_401235 ], [ %MEMORY.19, %block_401247 ]
  %5671 = load i64, i64* %RBP
  %5672 = sub i64 %5671, 4
  %5673 = load i64, i64* %PC
  %5674 = add i64 %5673, 4
  store i64 %5674, i64* %PC
  %5675 = inttoptr i64 %5672 to i32*
  %5676 = load i32, i32* %5675
  %5677 = sext i32 %5676 to i64
  store i64 %5677, i64* %RAX, align 8, !tbaa !2428
  %5678 = load i64, i64* %RBP
  %5679 = load i64, i64* %RAX
  %5680 = mul i64 %5679, 4
  %5681 = add i64 %5678, -1488
  %5682 = add i64 %5681, %5680
  %5683 = load i64, i64* %PC
  %5684 = add i64 %5683, 8
  store i64 %5684, i64* %PC
  %5685 = inttoptr i64 %5682 to i32*
  %5686 = load i32, i32* %5685
  %5687 = sub i32 %5686, -1
  %5688 = icmp ult i32 %5686, -1
  %5689 = zext i1 %5688 to i8
  %5690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5689, i8* %5690, align 1, !tbaa !2432
  %5691 = and i32 %5687, 255
  %5692 = call i32 @llvm.ctpop.i32(i32 %5691) #16
  %5693 = trunc i32 %5692 to i8
  %5694 = and i8 %5693, 1
  %5695 = xor i8 %5694, 1
  %5696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5695, i8* %5696, align 1, !tbaa !2446
  %5697 = xor i32 %5686, -1
  %5698 = xor i32 %5697, %5687
  %5699 = lshr i32 %5698, 4
  %5700 = trunc i32 %5699 to i8
  %5701 = and i8 %5700, 1
  %5702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5701, i8* %5702, align 1, !tbaa !2447
  %5703 = icmp eq i32 %5687, 0
  %5704 = zext i1 %5703 to i8
  %5705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5704, i8* %5705, align 1, !tbaa !2448
  %5706 = lshr i32 %5687, 31
  %5707 = trunc i32 %5706 to i8
  %5708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5707, i8* %5708, align 1, !tbaa !2449
  %5709 = lshr i32 %5686, 31
  %5710 = xor i32 %5709, 1
  %5711 = xor i32 %5706, %5709
  %5712 = add nuw nsw i32 %5711, %5710
  %5713 = icmp eq i32 %5712, 2
  %5714 = zext i1 %5713 to i8
  %5715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5714, i8* %5715, align 1, !tbaa !2450
  %5716 = load i64, i64* %PC
  %5717 = add i64 %5716, 73
  %5718 = load i64, i64* %PC
  %5719 = add i64 %5718, 6
  %5720 = load i64, i64* %PC
  %5721 = add i64 %5720, 6
  store i64 %5721, i64* %PC
  %5722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5723 = load i8, i8* %5722, align 1, !tbaa !2448
  store i8 %5723, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5725 = icmp ne i8 %5723, 0
  %5726 = select i1 %5725, i64 %5717, i64 %5719
  store i64 %5726, i64* %5724, align 8, !tbaa !2428
  %5727 = load i8, i8* %BRANCH_TAKEN
  %5728 = icmp eq i8 %5727, 1
  br i1 %5728, label %block_401300, label %block_4012bd

block_401783:                                     ; preds = %block_40170e, %block_40177e
  %MEMORY.22 = phi %struct.Memory* [ %MEMORY.32, %block_40177e ], [ %MEMORY.38, %block_40170e ]
  %5729 = load i64, i64* %PC
  %5730 = add i64 %5729, 117
  %5731 = load i64, i64* %PC
  %5732 = add i64 %5731, 5
  store i64 %5732, i64* %PC
  %5733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5730, i64* %5733, align 8, !tbaa !2428
  br label %block_4017f8

block_400d13:                                     ; preds = %block_400d0c, %block_400dc1
  %MEMORY.23 = phi %struct.Memory* [ %MEMORY.18, %block_400d0c ], [ %MEMORY.12, %block_400dc1 ]
  %5734 = load i64, i64* %RBP
  %5735 = sub i64 %5734, 4
  %5736 = load i64, i64* %PC
  %5737 = add i64 %5736, 3
  store i64 %5737, i64* %PC
  %5738 = inttoptr i64 %5735 to i32*
  %5739 = load i32, i32* %5738
  %5740 = zext i32 %5739 to i64
  store i64 %5740, i64* %RAX, align 8, !tbaa !2428
  %5741 = load i64, i64* %RBP
  %5742 = sub i64 %5741, 16
  %5743 = load i64, i64* %PC
  %5744 = add i64 %5743, 4
  store i64 %5744, i64* %PC
  %5745 = inttoptr i64 %5742 to i32*
  %5746 = load i32, i32* %5745
  %5747 = sext i32 %5746 to i64
  store i64 %5747, i64* %RCX, align 8, !tbaa !2428
  %5748 = load i32, i32* %EAX
  %5749 = zext i32 %5748 to i64
  %5750 = load i64, i64* %RBP
  %5751 = load i64, i64* %RCX
  %5752 = mul i64 %5751, 4
  %5753 = add i64 %5750, -1328
  %5754 = add i64 %5753, %5752
  %5755 = load i64, i64* %PC
  %5756 = add i64 %5755, 7
  store i64 %5756, i64* %PC
  %5757 = inttoptr i64 %5754 to i32*
  %5758 = load i32, i32* %5757
  %5759 = sub i32 %5748, %5758
  %5760 = icmp ult i32 %5748, %5758
  %5761 = zext i1 %5760 to i8
  %5762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5761, i8* %5762, align 1, !tbaa !2432
  %5763 = and i32 %5759, 255
  %5764 = call i32 @llvm.ctpop.i32(i32 %5763) #16
  %5765 = trunc i32 %5764 to i8
  %5766 = and i8 %5765, 1
  %5767 = xor i8 %5766, 1
  %5768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5767, i8* %5768, align 1, !tbaa !2446
  %5769 = xor i32 %5758, %5748
  %5770 = xor i32 %5769, %5759
  %5771 = lshr i32 %5770, 4
  %5772 = trunc i32 %5771 to i8
  %5773 = and i8 %5772, 1
  %5774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5773, i8* %5774, align 1, !tbaa !2447
  %5775 = icmp eq i32 %5759, 0
  %5776 = zext i1 %5775 to i8
  %5777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5776, i8* %5777, align 1, !tbaa !2448
  %5778 = lshr i32 %5759, 31
  %5779 = trunc i32 %5778 to i8
  %5780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5779, i8* %5780, align 1, !tbaa !2449
  %5781 = lshr i32 %5748, 31
  %5782 = lshr i32 %5758, 31
  %5783 = xor i32 %5782, %5781
  %5784 = xor i32 %5778, %5781
  %5785 = add nuw nsw i32 %5784, %5783
  %5786 = icmp eq i32 %5785, 2
  %5787 = zext i1 %5786 to i8
  %5788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5787, i8* %5788, align 1, !tbaa !2450
  %5789 = load i64, i64* %PC
  %5790 = add i64 %5789, 179
  %5791 = load i64, i64* %PC
  %5792 = add i64 %5791, 6
  %5793 = load i64, i64* %PC
  %5794 = add i64 %5793, 6
  store i64 %5794, i64* %PC
  %5795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5796 = load i8, i8* %5795, align 1, !tbaa !2448
  %5797 = icmp eq i8 %5796, 0
  %5798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5799 = load i8, i8* %5798, align 1, !tbaa !2449
  %5800 = icmp ne i8 %5799, 0
  %5801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5802 = load i8, i8* %5801, align 1, !tbaa !2450
  %5803 = icmp ne i8 %5802, 0
  %5804 = xor i1 %5800, %5803
  %5805 = xor i1 %5804, true
  %5806 = and i1 %5797, %5805
  %5807 = zext i1 %5806 to i8
  store i8 %5807, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5809 = select i1 %5806, i64 %5790, i64 %5792
  store i64 %5809, i64* %5808, align 8, !tbaa !2428
  %5810 = load i8, i8* %BRANCH_TAKEN
  %5811 = icmp eq i8 %5810, 1
  %5812 = load i64, i64* %RBP
  br i1 %5811, label %block_400dd4, label %block_400d27

block_4011b0:                                     ; preds = %block_40112f
  %5813 = sub i64 %3579, 16
  %5814 = load i64, i64* %PC
  %5815 = add i64 %5814, 4
  store i64 %5815, i64* %PC
  %5816 = inttoptr i64 %5813 to i32*
  %5817 = load i32, i32* %5816
  %5818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5818, align 1, !tbaa !2432
  %5819 = and i32 %5817, 255
  %5820 = call i32 @llvm.ctpop.i32(i32 %5819) #16
  %5821 = trunc i32 %5820 to i8
  %5822 = and i8 %5821, 1
  %5823 = xor i8 %5822, 1
  %5824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5823, i8* %5824, align 1, !tbaa !2446
  %5825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5825, align 1, !tbaa !2447
  %5826 = icmp eq i32 %5817, 0
  %5827 = zext i1 %5826 to i8
  %5828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5827, i8* %5828, align 1, !tbaa !2448
  %5829 = lshr i32 %5817, 31
  %5830 = trunc i32 %5829 to i8
  %5831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5830, i8* %5831, align 1, !tbaa !2449
  %5832 = lshr i32 %5817, 31
  %5833 = xor i32 %5829, %5832
  %5834 = add nuw nsw i32 %5833, %5832
  %5835 = icmp eq i32 %5834, 2
  %5836 = zext i1 %5835 to i8
  %5837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5836, i8* %5837, align 1, !tbaa !2450
  %5838 = load i64, i64* %PC
  %5839 = add i64 %5838, 60
  %5840 = load i64, i64* %PC
  %5841 = add i64 %5840, 6
  %5842 = load i64, i64* %PC
  %5843 = add i64 %5842, 6
  store i64 %5843, i64* %PC
  %5844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5845 = load i8, i8* %5844, align 1, !tbaa !2448
  %5846 = icmp eq i8 %5845, 0
  %5847 = zext i1 %5846 to i8
  store i8 %5847, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5849 = select i1 %5846, i64 %5839, i64 %5841
  store i64 %5849, i64* %5848, align 8, !tbaa !2428
  %5850 = load i8, i8* %BRANCH_TAKEN
  %5851 = icmp eq i8 %5850, 1
  br i1 %5851, label %block_4011f0, label %block_4011ba

block_40178f:                                     ; preds = %block_40103c, %block_4017e0
  %MEMORY.24 = phi %struct.Memory* [ %MEMORY.43, %block_40103c ], [ %MEMORY.9, %block_4017e0 ]
  %5852 = load i64, i64* %RBP
  %5853 = sub i64 %5852, 4
  %5854 = load i64, i64* %PC
  %5855 = add i64 %5854, 7
  store i64 %5855, i64* %PC
  %5856 = inttoptr i64 %5853 to i32*
  %5857 = load i32, i32* %5856
  %5858 = sub i32 %5857, 255
  %5859 = icmp ult i32 %5857, 255
  %5860 = zext i1 %5859 to i8
  %5861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5860, i8* %5861, align 1, !tbaa !2432
  %5862 = and i32 %5858, 255
  %5863 = call i32 @llvm.ctpop.i32(i32 %5862) #16
  %5864 = trunc i32 %5863 to i8
  %5865 = and i8 %5864, 1
  %5866 = xor i8 %5865, 1
  %5867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5866, i8* %5867, align 1, !tbaa !2446
  %5868 = xor i32 %5857, 255
  %5869 = xor i32 %5868, %5858
  %5870 = lshr i32 %5869, 4
  %5871 = trunc i32 %5870 to i8
  %5872 = and i8 %5871, 1
  %5873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5872, i8* %5873, align 1, !tbaa !2447
  %5874 = icmp eq i32 %5858, 0
  %5875 = zext i1 %5874 to i8
  %5876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5875, i8* %5876, align 1, !tbaa !2448
  %5877 = lshr i32 %5858, 31
  %5878 = trunc i32 %5877 to i8
  %5879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5878, i8* %5879, align 1, !tbaa !2449
  %5880 = lshr i32 %5857, 31
  %5881 = xor i32 %5877, %5880
  %5882 = add nuw nsw i32 %5881, %5880
  %5883 = icmp eq i32 %5882, 2
  %5884 = zext i1 %5883 to i8
  %5885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5884, i8* %5885, align 1, !tbaa !2450
  %5886 = load i64, i64* %PC
  %5887 = add i64 %5886, 93
  %5888 = load i64, i64* %PC
  %5889 = add i64 %5888, 6
  %5890 = load i64, i64* %PC
  %5891 = add i64 %5890, 6
  store i64 %5891, i64* %PC
  %5892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5893 = load i8, i8* %5892, align 1, !tbaa !2449
  %5894 = icmp ne i8 %5893, 0
  %5895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5896 = load i8, i8* %5895, align 1, !tbaa !2450
  %5897 = icmp ne i8 %5896, 0
  %5898 = xor i1 %5894, %5897
  %5899 = xor i1 %5898, true
  %5900 = zext i1 %5899 to i8
  store i8 %5900, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5902 = select i1 %5898, i64 %5889, i64 %5887
  store i64 %5902, i64* %5901, align 8, !tbaa !2428
  %5903 = load i8, i8* %BRANCH_TAKEN
  %5904 = icmp eq i8 %5903, 1
  br i1 %5904, label %block_4017f3, label %block_40179c

block_400970:                                     ; preds = %block_400966
  %5905 = sub i64 %1732, 4
  %5906 = load i64, i64* %PC
  %5907 = add i64 %5906, 4
  store i64 %5907, i64* %PC
  %5908 = inttoptr i64 %5905 to i32*
  %5909 = load i32, i32* %5908
  %5910 = sext i32 %5909 to i64
  store i64 %5910, i64* %RAX, align 8, !tbaa !2428
  %5911 = load i64, i64* %RBP
  %5912 = load i64, i64* %RAX
  %5913 = mul i64 %5912, 4
  %5914 = add i64 %5911, -1488
  %5915 = add i64 %5914, %5913
  %5916 = load i64, i64* %PC
  %5917 = add i64 %5916, 11
  store i64 %5917, i64* %PC
  %5918 = inttoptr i64 %5915 to i32*
  store i32 0, i32* %5918
  %5919 = load i64, i64* %RBP
  %5920 = sub i64 %5919, 8
  %5921 = load i64, i64* %PC
  %5922 = add i64 %5921, 7
  store i64 %5922, i64* %PC
  %5923 = inttoptr i64 %5920 to i32*
  store i32 0, i32* %5923
  br label %block_400986

block_400e97:                                     ; preds = %block_400e6a
  %5924 = load i64, i64* %RBP
  %5925 = sub i64 %5924, 12
  %5926 = load i64, i64* %PC
  %5927 = add i64 %5926, 3
  store i64 %5927, i64* %PC
  %5928 = inttoptr i64 %5925 to i32*
  %5929 = load i32, i32* %5928
  %5930 = zext i32 %5929 to i64
  store i64 %5930, i64* %RAX, align 8, !tbaa !2428
  %5931 = load i64, i64* %RAX
  %5932 = load i64, i64* %PC
  %5933 = add i64 %5932, 3
  store i64 %5933, i64* %PC
  %5934 = trunc i64 %5931 to i32
  %5935 = add i32 1, %5934
  %5936 = zext i32 %5935 to i64
  store i64 %5936, i64* %RAX, align 8, !tbaa !2428
  %5937 = icmp ult i32 %5935, %5934
  %5938 = icmp ult i32 %5935, 1
  %5939 = or i1 %5937, %5938
  %5940 = zext i1 %5939 to i8
  %5941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5940, i8* %5941, align 1, !tbaa !2432
  %5942 = and i32 %5935, 255
  %5943 = call i32 @llvm.ctpop.i32(i32 %5942) #16
  %5944 = trunc i32 %5943 to i8
  %5945 = and i8 %5944, 1
  %5946 = xor i8 %5945, 1
  %5947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5946, i8* %5947, align 1, !tbaa !2446
  %5948 = xor i64 1, %5931
  %5949 = trunc i64 %5948 to i32
  %5950 = xor i32 %5949, %5935
  %5951 = lshr i32 %5950, 4
  %5952 = trunc i32 %5951 to i8
  %5953 = and i8 %5952, 1
  %5954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5953, i8* %5954, align 1, !tbaa !2447
  %5955 = icmp eq i32 %5935, 0
  %5956 = zext i1 %5955 to i8
  %5957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5956, i8* %5957, align 1, !tbaa !2448
  %5958 = lshr i32 %5935, 31
  %5959 = trunc i32 %5958 to i8
  %5960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5959, i8* %5960, align 1, !tbaa !2449
  %5961 = lshr i32 %5934, 31
  %5962 = xor i32 %5958, %5961
  %5963 = add nuw nsw i32 %5962, %5958
  %5964 = icmp eq i32 %5963, 2
  %5965 = zext i1 %5964 to i8
  %5966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5965, i8* %5966, align 1, !tbaa !2450
  %5967 = load i32, i32* %EAX
  %5968 = zext i32 %5967 to i64
  %5969 = load i64, i64* %PC
  %5970 = add i64 %5969, 3
  store i64 %5970, i64* %PC
  %5971 = shl i64 %5968, 32
  %5972 = ashr exact i64 %5971, 32
  store i64 %5972, i64* %RCX, align 8, !tbaa !2428
  %5973 = load i64, i64* %RBP
  %5974 = load i64, i64* %RCX
  %5975 = mul i64 %5974, 4
  %5976 = add i64 %5973, -1488
  %5977 = add i64 %5976, %5975
  %5978 = load i64, i64* %PC
  %5979 = add i64 %5978, 8
  store i64 %5979, i64* %PC
  %5980 = inttoptr i64 %5977 to i32*
  %5981 = load i32, i32* %5980
  %5982 = sub i32 %5981, -1
  %5983 = icmp ult i32 %5981, -1
  %5984 = zext i1 %5983 to i8
  %5985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5984, i8* %5985, align 1, !tbaa !2432
  %5986 = and i32 %5982, 255
  %5987 = call i32 @llvm.ctpop.i32(i32 %5986) #16
  %5988 = trunc i32 %5987 to i8
  %5989 = and i8 %5988, 1
  %5990 = xor i8 %5989, 1
  %5991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5990, i8* %5991, align 1, !tbaa !2446
  %5992 = xor i32 %5981, -1
  %5993 = xor i32 %5992, %5982
  %5994 = lshr i32 %5993, 4
  %5995 = trunc i32 %5994 to i8
  %5996 = and i8 %5995, 1
  %5997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5996, i8* %5997, align 1, !tbaa !2447
  %5998 = icmp eq i32 %5982, 0
  %5999 = zext i1 %5998 to i8
  %6000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5999, i8* %6000, align 1, !tbaa !2448
  %6001 = lshr i32 %5982, 31
  %6002 = trunc i32 %6001 to i8
  %6003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6002, i8* %6003, align 1, !tbaa !2449
  %6004 = lshr i32 %5981, 31
  %6005 = xor i32 %6004, 1
  %6006 = xor i32 %6001, %6004
  %6007 = add nuw nsw i32 %6006, %6005
  %6008 = icmp eq i32 %6007, 2
  %6009 = zext i1 %6008 to i8
  %6010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6009, i8* %6010, align 1, !tbaa !2450
  %6011 = load i64, i64* %PC
  %6012 = add i64 %6011, 51
  %6013 = load i64, i64* %PC
  %6014 = add i64 %6013, 6
  %6015 = load i64, i64* %PC
  %6016 = add i64 %6015, 6
  store i64 %6016, i64* %PC
  %6017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6018 = load i8, i8* %6017, align 1, !tbaa !2448
  store i8 %6018, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6020 = icmp ne i8 %6018, 0
  %6021 = select i1 %6020, i64 %6012, i64 %6014
  store i64 %6021, i64* %6019, align 8, !tbaa !2428
  %6022 = load i8, i8* %BRANCH_TAKEN
  %6023 = icmp eq i8 %6022, 1
  %6024 = load i64, i64* %RBP
  %6025 = sub i64 %6024, 12
  %6026 = load i64, i64* %PC
  %6027 = add i64 %6026, 3
  store i64 %6027, i64* %PC
  %6028 = inttoptr i64 %6025 to i32*
  %6029 = load i32, i32* %6028
  %6030 = zext i32 %6029 to i64
  store i64 %6030, i64* %RAX, align 8, !tbaa !2428
  %6031 = load i64, i64* %RAX
  %6032 = load i64, i64* %PC
  %6033 = add i64 %6032, 3
  store i64 %6033, i64* %PC
  %6034 = trunc i64 %6031 to i32
  %6035 = add i32 1, %6034
  %6036 = zext i32 %6035 to i64
  store i64 %6036, i64* %RAX, align 8, !tbaa !2428
  %6037 = icmp ult i32 %6035, %6034
  %6038 = icmp ult i32 %6035, 1
  %6039 = or i1 %6037, %6038
  %6040 = zext i1 %6039 to i8
  %6041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6040, i8* %6041, align 1, !tbaa !2432
  %6042 = and i32 %6035, 255
  %6043 = call i32 @llvm.ctpop.i32(i32 %6042) #16
  %6044 = trunc i32 %6043 to i8
  %6045 = and i8 %6044, 1
  %6046 = xor i8 %6045, 1
  %6047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6046, i8* %6047, align 1, !tbaa !2446
  %6048 = xor i64 1, %6031
  %6049 = trunc i64 %6048 to i32
  %6050 = xor i32 %6049, %6035
  %6051 = lshr i32 %6050, 4
  %6052 = trunc i32 %6051 to i8
  %6053 = and i8 %6052, 1
  %6054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6053, i8* %6054, align 1, !tbaa !2447
  %6055 = icmp eq i32 %6035, 0
  %6056 = zext i1 %6055 to i8
  %6057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6056, i8* %6057, align 1, !tbaa !2448
  %6058 = lshr i32 %6035, 31
  %6059 = trunc i32 %6058 to i8
  %6060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6059, i8* %6060, align 1, !tbaa !2449
  %6061 = lshr i32 %6034, 31
  %6062 = xor i32 %6058, %6061
  %6063 = add nuw nsw i32 %6062, %6058
  %6064 = icmp eq i32 %6063, 2
  %6065 = zext i1 %6064 to i8
  %6066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6065, i8* %6066, align 1, !tbaa !2450
  %6067 = load i32, i32* %EAX
  %6068 = zext i32 %6067 to i64
  %6069 = load i64, i64* %PC
  %6070 = add i64 %6069, 3
  store i64 %6070, i64* %PC
  %6071 = shl i64 %6068, 32
  %6072 = ashr exact i64 %6071, 32
  store i64 %6072, i64* %RCX, align 8, !tbaa !2428
  %6073 = load i64, i64* %RBP
  %6074 = load i64, i64* %RCX
  %6075 = mul i64 %6074, 4
  %6076 = add i64 %6075, %6073
  br i1 %6023, label %block_400edb, label %block_400eae

block_401495:                                     ; preds = %block_401474
  %6077 = add i64 %5586, 8
  store i64 %6077, i64* %PC
  %6078 = inttoptr i64 %5585 to i32*
  %6079 = load i32, i32* %6078
  %6080 = sext i32 %6079 to i64
  store i64 %6080, i64* %RAX, align 8, !tbaa !2428
  %6081 = load i64, i64* %RAX
  %6082 = mul i64 %6081, 4
  %6083 = add i64 %6082, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %6084 = load i64, i64* %PC
  %6085 = add i64 %6084, 7
  store i64 %6085, i64* %PC
  %6086 = inttoptr i64 %6083 to i32*
  %6087 = load i32, i32* %6086
  %6088 = zext i32 %6087 to i64
  store i64 %6088, i64* %RCX, align 8, !tbaa !2428
  %6089 = load i64, i64* %RBP
  %6090 = sub i64 %6089, 4
  %6091 = load i64, i64* %PC
  %6092 = add i64 %6091, 4
  store i64 %6092, i64* %PC
  %6093 = inttoptr i64 %6090 to i32*
  %6094 = load i32, i32* %6093
  %6095 = sext i32 %6094 to i64
  store i64 %6095, i64* %RAX, align 8, !tbaa !2428
  %6096 = load i64, i64* %RAX
  %6097 = mul i64 %6096, 4
  %6098 = add i64 %6097, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %6099 = load i32, i32* %ECX
  %6100 = zext i32 %6099 to i64
  %6101 = load i64, i64* %PC
  %6102 = add i64 %6101, 7
  store i64 %6102, i64* %PC
  %6103 = inttoptr i64 %6098 to i32*
  store i32 %6099, i32* %6103
  %6104 = load i64, i64* %PC
  %6105 = add i64 %6104, 20
  %6106 = load i64, i64* %PC
  %6107 = add i64 %6106, 5
  store i64 %6107, i64* %PC
  %6108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6105, i64* %6108, align 8, !tbaa !2428
  br label %block_4014c7

block_401114:                                     ; preds = %block_4011f0, %block_401103
  %MEMORY.25 = phi %struct.Memory* [ %MEMORY.29, %block_401103 ], [ %MEMORY.28, %block_4011f0 ]
  %6109 = load i64, i64* %RBP
  %6110 = sub i64 %6109, 4
  %6111 = load i64, i64* %PC
  %6112 = add i64 %6111, 7
  store i64 %6112, i64* %PC
  %6113 = inttoptr i64 %6110 to i32*
  %6114 = load i32, i32* %6113
  %6115 = sub i32 %6114, 255
  %6116 = icmp ult i32 %6114, 255
  %6117 = zext i1 %6116 to i8
  %6118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6117, i8* %6118, align 1, !tbaa !2432
  %6119 = and i32 %6115, 255
  %6120 = call i32 @llvm.ctpop.i32(i32 %6119) #16
  %6121 = trunc i32 %6120 to i8
  %6122 = and i8 %6121, 1
  %6123 = xor i8 %6122, 1
  %6124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6123, i8* %6124, align 1, !tbaa !2446
  %6125 = xor i32 %6114, 255
  %6126 = xor i32 %6125, %6115
  %6127 = lshr i32 %6126, 4
  %6128 = trunc i32 %6127 to i8
  %6129 = and i8 %6128, 1
  %6130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6129, i8* %6130, align 1, !tbaa !2447
  %6131 = icmp eq i32 %6115, 0
  %6132 = zext i1 %6131 to i8
  %6133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6132, i8* %6133, align 1, !tbaa !2448
  %6134 = lshr i32 %6115, 31
  %6135 = trunc i32 %6134 to i8
  %6136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6135, i8* %6136, align 1, !tbaa !2449
  %6137 = lshr i32 %6114, 31
  %6138 = xor i32 %6134, %6137
  %6139 = add nuw nsw i32 %6138, %6137
  %6140 = icmp eq i32 %6139, 2
  %6141 = zext i1 %6140 to i8
  %6142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6141, i8* %6142, align 1, !tbaa !2450
  %6143 = load i64, i64* %PC
  %6144 = add i64 %6143, 232
  %6145 = load i64, i64* %PC
  %6146 = add i64 %6145, 6
  %6147 = load i64, i64* %PC
  %6148 = add i64 %6147, 6
  store i64 %6148, i64* %PC
  %6149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6150 = load i8, i8* %6149, align 1, !tbaa !2448
  %6151 = icmp eq i8 %6150, 0
  %6152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6153 = load i8, i8* %6152, align 1, !tbaa !2449
  %6154 = icmp ne i8 %6153, 0
  %6155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6156 = load i8, i8* %6155, align 1, !tbaa !2450
  %6157 = icmp ne i8 %6156, 0
  %6158 = xor i1 %6154, %6157
  %6159 = xor i1 %6158, true
  %6160 = and i1 %6151, %6159
  %6161 = zext i1 %6160 to i8
  store i8 %6161, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6163 = select i1 %6160, i64 %6144, i64 %6146
  store i64 %6163, i64* %6162, align 8, !tbaa !2428
  %6164 = load i8, i8* %BRANCH_TAKEN
  %6165 = icmp eq i8 %6164, 1
  %6166 = load i64, i64* %RBP
  br i1 %6165, label %block_401203, label %block_401121

block_400a8e:                                     ; preds = %block_400a84
  %6167 = sub i64 %6384, 4
  %6168 = load i64, i64* %PC
  %6169 = add i64 %6168, 4
  store i64 %6169, i64* %PC
  %6170 = inttoptr i64 %6167 to i32*
  %6171 = load i32, i32* %6170
  %6172 = sext i32 %6171 to i64
  store i64 %6172, i64* %RAX, align 8, !tbaa !2428
  %6173 = load i64, i64* %RBP
  %6174 = load i64, i64* %RAX
  %6175 = mul i64 %6174, 4
  %6176 = add i64 %6173, -1168
  %6177 = add i64 %6176, %6175
  %6178 = load i64, i64* %PC
  %6179 = add i64 %6178, 11
  store i64 %6179, i64* %PC
  %6180 = inttoptr i64 %6177 to i32*
  store i32 -1, i32* %6180
  %6181 = load i64, i64* %RBP
  %6182 = sub i64 %6181, 4
  %6183 = load i64, i64* %PC
  %6184 = add i64 %6183, 4
  store i64 %6184, i64* %PC
  %6185 = inttoptr i64 %6182 to i32*
  %6186 = load i32, i32* %6185
  %6187 = sext i32 %6186 to i64
  store i64 %6187, i64* %RAX, align 8, !tbaa !2428
  %6188 = load i64, i64* %RBP
  %6189 = load i64, i64* %RAX
  %6190 = mul i64 %6189, 4
  %6191 = add i64 %6188, -1104
  %6192 = add i64 %6191, %6190
  %6193 = load i64, i64* %PC
  %6194 = add i64 %6193, 11
  store i64 %6194, i64* %PC
  %6195 = inttoptr i64 %6192 to i32*
  store i32 0, i32* %6195
  %6196 = load i64, i64* %RBP
  %6197 = sub i64 %6196, 4
  %6198 = load i64, i64* %PC
  %6199 = add i64 %6198, 3
  store i64 %6199, i64* %PC
  %6200 = inttoptr i64 %6197 to i32*
  %6201 = load i32, i32* %6200
  %6202 = zext i32 %6201 to i64
  store i64 %6202, i64* %RAX, align 8, !tbaa !2428
  %6203 = load i64, i64* %RAX
  %6204 = load i64, i64* %PC
  %6205 = add i64 %6204, 3
  store i64 %6205, i64* %PC
  %6206 = trunc i64 %6203 to i32
  %6207 = add i32 1, %6206
  %6208 = zext i32 %6207 to i64
  store i64 %6208, i64* %RAX, align 8, !tbaa !2428
  %6209 = icmp ult i32 %6207, %6206
  %6210 = icmp ult i32 %6207, 1
  %6211 = or i1 %6209, %6210
  %6212 = zext i1 %6211 to i8
  %6213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6212, i8* %6213, align 1, !tbaa !2432
  %6214 = and i32 %6207, 255
  %6215 = call i32 @llvm.ctpop.i32(i32 %6214) #16
  %6216 = trunc i32 %6215 to i8
  %6217 = and i8 %6216, 1
  %6218 = xor i8 %6217, 1
  %6219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6218, i8* %6219, align 1, !tbaa !2446
  %6220 = xor i64 1, %6203
  %6221 = trunc i64 %6220 to i32
  %6222 = xor i32 %6221, %6207
  %6223 = lshr i32 %6222, 4
  %6224 = trunc i32 %6223 to i8
  %6225 = and i8 %6224, 1
  %6226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6225, i8* %6226, align 1, !tbaa !2447
  %6227 = icmp eq i32 %6207, 0
  %6228 = zext i1 %6227 to i8
  %6229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6228, i8* %6229, align 1, !tbaa !2448
  %6230 = lshr i32 %6207, 31
  %6231 = trunc i32 %6230 to i8
  %6232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6231, i8* %6232, align 1, !tbaa !2449
  %6233 = lshr i32 %6206, 31
  %6234 = xor i32 %6230, %6233
  %6235 = add nuw nsw i32 %6234, %6230
  %6236 = icmp eq i32 %6235, 2
  %6237 = zext i1 %6236 to i8
  %6238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6237, i8* %6238, align 1, !tbaa !2450
  %6239 = load i64, i64* %RBP
  %6240 = sub i64 %6239, 4
  %6241 = load i32, i32* %EAX
  %6242 = zext i32 %6241 to i64
  %6243 = load i64, i64* %PC
  %6244 = add i64 %6243, 3
  store i64 %6244, i64* %PC
  %6245 = inttoptr i64 %6240 to i32*
  store i32 %6241, i32* %6245
  %6246 = load i64, i64* %PC
  %6247 = sub i64 %6246, 49
  %6248 = load i64, i64* %PC
  %6249 = add i64 %6248, 5
  store i64 %6249, i64* %PC
  %6250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6247, i64* %6250, align 8, !tbaa !2428
  br label %block_400a84

block_400c8a:                                     ; preds = %block_400c66
  %6251 = sub i64 %9218, 12
  %6252 = load i64, i64* %PC
  %6253 = add i64 %6252, 4
  store i64 %6253, i64* %PC
  %6254 = inttoptr i64 %6251 to i32*
  %6255 = load i32, i32* %6254
  %6256 = sext i32 %6255 to i64
  store i64 %6256, i64* %RAX, align 8, !tbaa !2428
  %6257 = load i64, i64* %RBP
  %6258 = load i64, i64* %RAX
  %6259 = mul i64 %6258, 4
  %6260 = add i64 %6257, -1328
  %6261 = add i64 %6260, %6259
  %6262 = load i64, i64* %PC
  %6263 = add i64 %6262, 7
  store i64 %6263, i64* %PC
  %6264 = inttoptr i64 %6261 to i32*
  %6265 = load i32, i32* %6264
  %6266 = zext i32 %6265 to i64
  store i64 %6266, i64* %RCX, align 8, !tbaa !2428
  %6267 = load i64, i64* %RBP
  %6268 = sub i64 %6267, 12
  %6269 = load i64, i64* %PC
  %6270 = add i64 %6269, 3
  store i64 %6270, i64* %PC
  %6271 = inttoptr i64 %6268 to i32*
  %6272 = load i32, i32* %6271
  %6273 = zext i32 %6272 to i64
  store i64 %6273, i64* %RDX, align 8, !tbaa !2428
  %6274 = load i64, i64* %RDX
  %6275 = load i64, i64* %PC
  %6276 = add i64 %6275, 3
  store i64 %6276, i64* %PC
  %6277 = trunc i64 %6274 to i32
  %6278 = add i32 1, %6277
  %6279 = zext i32 %6278 to i64
  store i64 %6279, i64* %RDX, align 8, !tbaa !2428
  %6280 = icmp ult i32 %6278, %6277
  %6281 = icmp ult i32 %6278, 1
  %6282 = or i1 %6280, %6281
  %6283 = zext i1 %6282 to i8
  %6284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6283, i8* %6284, align 1, !tbaa !2432
  %6285 = and i32 %6278, 255
  %6286 = call i32 @llvm.ctpop.i32(i32 %6285) #16
  %6287 = trunc i32 %6286 to i8
  %6288 = and i8 %6287, 1
  %6289 = xor i8 %6288, 1
  %6290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6289, i8* %6290, align 1, !tbaa !2446
  %6291 = xor i64 1, %6274
  %6292 = trunc i64 %6291 to i32
  %6293 = xor i32 %6292, %6278
  %6294 = lshr i32 %6293, 4
  %6295 = trunc i32 %6294 to i8
  %6296 = and i8 %6295, 1
  %6297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6296, i8* %6297, align 1, !tbaa !2447
  %6298 = icmp eq i32 %6278, 0
  %6299 = zext i1 %6298 to i8
  %6300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6299, i8* %6300, align 1, !tbaa !2448
  %6301 = lshr i32 %6278, 31
  %6302 = trunc i32 %6301 to i8
  %6303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6302, i8* %6303, align 1, !tbaa !2449
  %6304 = lshr i32 %6277, 31
  %6305 = xor i32 %6301, %6304
  %6306 = add nuw nsw i32 %6305, %6301
  %6307 = icmp eq i32 %6306, 2
  %6308 = zext i1 %6307 to i8
  %6309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6308, i8* %6309, align 1, !tbaa !2450
  %6310 = load i32, i32* %EDX
  %6311 = zext i32 %6310 to i64
  %6312 = load i64, i64* %PC
  %6313 = add i64 %6312, 3
  store i64 %6313, i64* %PC
  %6314 = shl i64 %6311, 32
  %6315 = ashr exact i64 %6314, 32
  store i64 %6315, i64* %RAX, align 8, !tbaa !2428
  %6316 = load i64, i64* %RBP
  %6317 = load i64, i64* %RAX
  %6318 = mul i64 %6317, 4
  %6319 = add i64 %6316, -1328
  %6320 = add i64 %6319, %6318
  %6321 = load i32, i32* %ECX
  %6322 = zext i32 %6321 to i64
  %6323 = load i64, i64* %PC
  %6324 = add i64 %6323, 7
  store i64 %6324, i64* %PC
  %6325 = inttoptr i64 %6320 to i32*
  store i32 %6321, i32* %6325
  %6326 = load i64, i64* %PC
  %6327 = add i64 %6326, 38
  %6328 = load i64, i64* %PC
  %6329 = add i64 %6328, 5
  store i64 %6329, i64* %PC
  %6330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6327, i64* %6330, align 8, !tbaa !2428
  br label %block_400ccb

block_400a84:                                     ; preds = %block_400a53, %block_400a8e
  %MEMORY.26 = phi %struct.Memory* [ %MEMORY.5, %block_400a53 ], [ %MEMORY.26, %block_400a8e ]
  %6331 = load i64, i64* %RBP
  %6332 = sub i64 %6331, 4
  %6333 = load i64, i64* %PC
  %6334 = add i64 %6333, 4
  store i64 %6334, i64* %PC
  %6335 = inttoptr i64 %6332 to i32*
  %6336 = load i32, i32* %6335
  %6337 = sub i32 %6336, 16
  %6338 = icmp ult i32 %6336, 16
  %6339 = zext i1 %6338 to i8
  %6340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6339, i8* %6340, align 1, !tbaa !2432
  %6341 = and i32 %6337, 255
  %6342 = call i32 @llvm.ctpop.i32(i32 %6341) #16
  %6343 = trunc i32 %6342 to i8
  %6344 = and i8 %6343, 1
  %6345 = xor i8 %6344, 1
  %6346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6345, i8* %6346, align 1, !tbaa !2446
  %6347 = xor i32 %6336, 16
  %6348 = xor i32 %6347, %6337
  %6349 = lshr i32 %6348, 4
  %6350 = trunc i32 %6349 to i8
  %6351 = and i8 %6350, 1
  %6352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6351, i8* %6352, align 1, !tbaa !2447
  %6353 = icmp eq i32 %6337, 0
  %6354 = zext i1 %6353 to i8
  %6355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6354, i8* %6355, align 1, !tbaa !2448
  %6356 = lshr i32 %6337, 31
  %6357 = trunc i32 %6356 to i8
  %6358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6357, i8* %6358, align 1, !tbaa !2449
  %6359 = lshr i32 %6336, 31
  %6360 = xor i32 %6356, %6359
  %6361 = add nuw nsw i32 %6360, %6359
  %6362 = icmp eq i32 %6361, 2
  %6363 = zext i1 %6362 to i8
  %6364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6363, i8* %6364, align 1, !tbaa !2450
  %6365 = load i64, i64* %PC
  %6366 = add i64 %6365, 50
  %6367 = load i64, i64* %PC
  %6368 = add i64 %6367, 6
  %6369 = load i64, i64* %PC
  %6370 = add i64 %6369, 6
  store i64 %6370, i64* %PC
  %6371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6372 = load i8, i8* %6371, align 1, !tbaa !2449
  %6373 = icmp ne i8 %6372, 0
  %6374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6375 = load i8, i8* %6374, align 1, !tbaa !2450
  %6376 = icmp ne i8 %6375, 0
  %6377 = xor i1 %6373, %6376
  %6378 = xor i1 %6377, true
  %6379 = zext i1 %6378 to i8
  store i8 %6379, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6381 = select i1 %6377, i64 %6368, i64 %6366
  store i64 %6381, i64* %6380, align 8, !tbaa !2428
  %6382 = load i8, i8* %BRANCH_TAKEN
  %6383 = icmp eq i8 %6382, 1
  %6384 = load i64, i64* %RBP
  br i1 %6383, label %block_400aba, label %block_400a8e

block_400ffb:                                     ; preds = %block_400e6a, %block_400fd3
  %MEMORY.27 = phi %struct.Memory* [ %MEMORY.31, %block_400e6a ], [ %MEMORY.16, %block_400fd3 ]
  %6385 = load i64, i64* %PC
  %6386 = add i64 %6385, 5
  %6387 = load i64, i64* %PC
  %6388 = add i64 %6387, 5
  store i64 %6388, i64* %PC
  %6389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6386, i64* %6389, align 8, !tbaa !2428
  %6390 = load i64, i64* %RAX
  %6391 = load i32, i32* %EAX
  %6392 = zext i32 %6391 to i64
  %6393 = load i64, i64* %PC
  %6394 = add i64 %6393, 2
  store i64 %6394, i64* %PC
  %6395 = xor i64 %6392, %6390
  %6396 = trunc i64 %6395 to i32
  %6397 = and i64 %6395, 4294967295
  store i64 %6397, i64* %RAX, align 8, !tbaa !2428
  %6398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6398, align 1, !tbaa !2432
  %6399 = and i32 %6396, 255
  %6400 = call i32 @llvm.ctpop.i32(i32 %6399) #16
  %6401 = trunc i32 %6400 to i8
  %6402 = and i8 %6401, 1
  %6403 = xor i8 %6402, 1
  %6404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6403, i8* %6404, align 1, !tbaa !2446
  %6405 = icmp eq i32 %6396, 0
  %6406 = zext i1 %6405 to i8
  %6407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6406, i8* %6407, align 1, !tbaa !2448
  %6408 = lshr i32 %6396, 31
  %6409 = trunc i32 %6408 to i8
  %6410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6409, i8* %6410, align 1, !tbaa !2449
  %6411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6411, align 1, !tbaa !2450
  %6412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6412, align 1, !tbaa !2447
  %6413 = load i8, i8* %AL
  %6414 = zext i8 %6413 to i64
  %6415 = load i64, i64* %PC
  %6416 = add i64 %6415, 2
  store i64 %6416, i64* %PC
  store i8 %6413, i8* %CL, align 1, !tbaa !2451
  %6417 = load i64, i64* %RBP
  %6418 = sub i64 %6417, 12
  %6419 = load i64, i64* %PC
  %6420 = add i64 %6419, 4
  store i64 %6420, i64* %PC
  %6421 = inttoptr i64 %6418 to i32*
  %6422 = load i32, i32* %6421
  %6423 = sub i32 %6422, 16
  %6424 = icmp ult i32 %6422, 16
  %6425 = zext i1 %6424 to i8
  %6426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6425, i8* %6426, align 1, !tbaa !2432
  %6427 = and i32 %6423, 255
  %6428 = call i32 @llvm.ctpop.i32(i32 %6427) #16
  %6429 = trunc i32 %6428 to i8
  %6430 = and i8 %6429, 1
  %6431 = xor i8 %6430, 1
  %6432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6431, i8* %6432, align 1, !tbaa !2446
  %6433 = xor i32 %6422, 16
  %6434 = xor i32 %6433, %6423
  %6435 = lshr i32 %6434, 4
  %6436 = trunc i32 %6435 to i8
  %6437 = and i8 %6436, 1
  %6438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6437, i8* %6438, align 1, !tbaa !2447
  %6439 = icmp eq i32 %6423, 0
  %6440 = zext i1 %6439 to i8
  %6441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6440, i8* %6441, align 1, !tbaa !2448
  %6442 = lshr i32 %6423, 31
  %6443 = trunc i32 %6442 to i8
  %6444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6443, i8* %6444, align 1, !tbaa !2449
  %6445 = lshr i32 %6422, 31
  %6446 = xor i32 %6442, %6445
  %6447 = add nuw nsw i32 %6446, %6445
  %6448 = icmp eq i32 %6447, 2
  %6449 = zext i1 %6448 to i8
  %6450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6449, i8* %6450, align 1, !tbaa !2450
  %6451 = load i64, i64* %RBP
  %6452 = sub i64 %6451, 2709
  %6453 = load i8, i8* %CL
  %6454 = zext i8 %6453 to i64
  %6455 = load i64, i64* %PC
  %6456 = add i64 %6455, 6
  store i64 %6456, i64* %PC
  %6457 = inttoptr i64 %6452 to i8*
  store i8 %6453, i8* %6457
  %6458 = load i64, i64* %PC
  %6459 = add i64 %6458, 32
  %6460 = load i64, i64* %PC
  %6461 = add i64 %6460, 6
  %6462 = load i64, i64* %PC
  %6463 = add i64 %6462, 6
  store i64 %6463, i64* %PC
  %6464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6465 = load i8, i8* %6464, align 1, !tbaa !2449
  %6466 = icmp ne i8 %6465, 0
  %6467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6468 = load i8, i8* %6467, align 1, !tbaa !2450
  %6469 = icmp ne i8 %6468, 0
  %6470 = xor i1 %6466, %6469
  %6471 = xor i1 %6470, true
  %6472 = zext i1 %6471 to i8
  store i8 %6472, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6474 = select i1 %6470, i64 %6461, i64 %6459
  store i64 %6474, i64* %6473, align 8, !tbaa !2428
  %6475 = load i8, i8* %BRANCH_TAKEN
  %6476 = icmp eq i8 %6475, 1
  br i1 %6476, label %block_40102e, label %block_401014

block_4011f0:                                     ; preds = %block_4011b0, %block_4011ba
  %MEMORY.28 = phi %struct.Memory* [ %MEMORY.13, %block_4011b0 ], [ %MEMORY.13, %block_4011ba ]
  %6477 = load i64, i64* %PC
  %6478 = add i64 %6477, 5
  %6479 = load i64, i64* %PC
  %6480 = add i64 %6479, 5
  store i64 %6480, i64* %PC
  %6481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6478, i64* %6481, align 8, !tbaa !2428
  %6482 = load i64, i64* %RBP
  %6483 = sub i64 %6482, 4
  %6484 = load i64, i64* %PC
  %6485 = add i64 %6484, 3
  store i64 %6485, i64* %PC
  %6486 = inttoptr i64 %6483 to i32*
  %6487 = load i32, i32* %6486
  %6488 = zext i32 %6487 to i64
  store i64 %6488, i64* %RAX, align 8, !tbaa !2428
  %6489 = load i64, i64* %RAX
  %6490 = load i64, i64* %PC
  %6491 = add i64 %6490, 3
  store i64 %6491, i64* %PC
  %6492 = trunc i64 %6489 to i32
  %6493 = add i32 1, %6492
  %6494 = zext i32 %6493 to i64
  store i64 %6494, i64* %RAX, align 8, !tbaa !2428
  %6495 = icmp ult i32 %6493, %6492
  %6496 = icmp ult i32 %6493, 1
  %6497 = or i1 %6495, %6496
  %6498 = zext i1 %6497 to i8
  %6499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6498, i8* %6499, align 1, !tbaa !2432
  %6500 = and i32 %6493, 255
  %6501 = call i32 @llvm.ctpop.i32(i32 %6500) #16
  %6502 = trunc i32 %6501 to i8
  %6503 = and i8 %6502, 1
  %6504 = xor i8 %6503, 1
  %6505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6504, i8* %6505, align 1, !tbaa !2446
  %6506 = xor i64 1, %6489
  %6507 = trunc i64 %6506 to i32
  %6508 = xor i32 %6507, %6493
  %6509 = lshr i32 %6508, 4
  %6510 = trunc i32 %6509 to i8
  %6511 = and i8 %6510, 1
  %6512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6511, i8* %6512, align 1, !tbaa !2447
  %6513 = icmp eq i32 %6493, 0
  %6514 = zext i1 %6513 to i8
  %6515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6514, i8* %6515, align 1, !tbaa !2448
  %6516 = lshr i32 %6493, 31
  %6517 = trunc i32 %6516 to i8
  %6518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6517, i8* %6518, align 1, !tbaa !2449
  %6519 = lshr i32 %6492, 31
  %6520 = xor i32 %6516, %6519
  %6521 = add nuw nsw i32 %6520, %6516
  %6522 = icmp eq i32 %6521, 2
  %6523 = zext i1 %6522 to i8
  %6524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6523, i8* %6524, align 1, !tbaa !2450
  %6525 = load i64, i64* %RBP
  %6526 = sub i64 %6525, 4
  %6527 = load i32, i32* %EAX
  %6528 = zext i32 %6527 to i64
  %6529 = load i64, i64* %PC
  %6530 = add i64 %6529, 3
  store i64 %6530, i64* %PC
  %6531 = inttoptr i64 %6526 to i32*
  store i32 %6527, i32* %6531
  %6532 = load i64, i64* %PC
  %6533 = sub i64 %6532, 234
  %6534 = load i64, i64* %PC
  %6535 = add i64 %6534, 5
  store i64 %6535, i64* %PC
  %6536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6533, i64* %6536, align 8, !tbaa !2428
  br label %block_401114

block_401674:                                     ; preds = %block_4015f8
  %6537 = load i64, i64* %PC
  %6538 = add i64 %6537, 5
  store i64 %6538, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %6539 = load i64, i64* %RBP
  %6540 = sub i64 %6539, 16
  %6541 = load i64, i64* %PC
  %6542 = add i64 %6541, 3
  store i64 %6542, i64* %PC
  %6543 = inttoptr i64 %6540 to i32*
  %6544 = load i32, i32* %6543
  %6545 = zext i32 %6544 to i64
  store i64 %6545, i64* %RCX, align 8, !tbaa !2428
  %6546 = load i64, i64* %RBP
  %6547 = sub i64 %6546, 2732
  %6548 = load i32, i32* %EAX
  %6549 = zext i32 %6548 to i64
  %6550 = load i64, i64* %PC
  %6551 = add i64 %6550, 6
  store i64 %6551, i64* %PC
  %6552 = inttoptr i64 %6547 to i32*
  store i32 %6548, i32* %6552
  %6553 = load i32, i32* %ECX
  %6554 = zext i32 %6553 to i64
  %6555 = load i64, i64* %PC
  %6556 = add i64 %6555, 2
  store i64 %6556, i64* %PC
  %6557 = and i64 %6554, 4294967295
  store i64 %6557, i64* %RAX, align 8, !tbaa !2428
  %6558 = load i64, i64* %PC
  %6559 = add i64 %6558, 1
  store i64 %6559, i64* %PC
  %6560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6562 = bitcast %union.anon* %6561 to i32*
  %6563 = load i32, i32* %6562, align 8, !tbaa !2452
  %6564 = sext i32 %6563 to i64
  %6565 = lshr i64 %6564, 32
  store i64 %6565, i64* %6560, align 8, !tbaa !2428
  %6566 = load i64, i64* %RBP
  %6567 = sub i64 %6566, 2732
  %6568 = load i64, i64* %PC
  %6569 = add i64 %6568, 6
  store i64 %6569, i64* %PC
  %6570 = inttoptr i64 %6567 to i32*
  %6571 = load i32, i32* %6570
  %6572 = zext i32 %6571 to i64
  store i64 %6572, i64* %RCX, align 8, !tbaa !2428
  %6573 = load i32, i32* %ECX
  %6574 = zext i32 %6573 to i64
  %6575 = load i64, i64* %PC
  %6576 = add i64 %6575, 2
  store i64 %6576, i64* %PC
  %6577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6578 = bitcast %union.anon* %6577 to i32*
  %6579 = load i32, i32* %6578, align 8, !tbaa !2452
  %6580 = zext i32 %6579 to i64
  %6581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %6582 = bitcast %union.anon* %6581 to i32*
  %6583 = load i32, i32* %6582, align 8, !tbaa !2452
  %6584 = zext i32 %6583 to i64
  %6585 = shl i64 %6574, 32
  %6586 = ashr exact i64 %6585, 32
  %6587 = shl nuw i64 %6584, 32
  %6588 = or i64 %6587, %6580
  %6589 = sdiv i64 %6588, %6586
  %6590 = shl i64 %6589, 32
  %6591 = ashr exact i64 %6590, 32
  %6592 = icmp eq i64 %6589, %6591
  br i1 %6592, label %6597, label %6593

; <label>:6593:                                   ; preds = %block_401674
  %6594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6595 = load i64, i64* %6594, align 8, !tbaa !2428
  %6596 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6595, %struct.Memory* %MEMORY.17) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

; <label>:6597:                                   ; preds = %block_401674
  %6598 = srem i64 %6588, %6586
  %6599 = getelementptr inbounds %union.anon, %union.anon* %6577, i64 0, i32 0
  %6600 = and i64 %6589, 4294967295
  store i64 %6600, i64* %6599, align 8, !tbaa !2428
  %6601 = getelementptr inbounds %union.anon, %union.anon* %6581, i64 0, i32 0
  %6602 = and i64 %6598, 4294967295
  store i64 %6602, i64* %6601, align 8, !tbaa !2428
  %6603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6603, align 1, !tbaa !2432
  %6604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %6604, align 1, !tbaa !2446
  %6605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6605, align 1, !tbaa !2447
  %6606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6606, align 1, !tbaa !2448
  %6607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6607, align 1, !tbaa !2449
  %6608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6608, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2: ; preds = %6593, %6597
  %6609 = phi %struct.Memory* [ %6596, %6593 ], [ %MEMORY.17, %6597 ]
  %6610 = load i64, i64* %RBP
  %6611 = sub i64 %6610, 16
  %6612 = load i32, i32* %EDX
  %6613 = zext i32 %6612 to i64
  %6614 = load i64, i64* %PC
  %6615 = add i64 %6614, 3
  store i64 %6615, i64* %PC
  %6616 = inttoptr i64 %6611 to i32*
  store i32 %6612, i32* %6616
  %6617 = load i64, i64* %RBP
  %6618 = sub i64 %6617, 4
  %6619 = load i64, i64* %PC
  %6620 = add i64 %6619, 4
  store i64 %6620, i64* %PC
  %6621 = inttoptr i64 %6618 to i32*
  %6622 = load i32, i32* %6621
  %6623 = sext i32 %6622 to i64
  store i64 %6623, i64* %RSI, align 8, !tbaa !2428
  %6624 = load i64, i64* %RBP
  %6625 = load i64, i64* %RSI
  %6626 = mul i64 %6625, 4
  %6627 = add i64 %6624, -1568
  %6628 = add i64 %6627, %6626
  %6629 = load i64, i64* %PC
  %6630 = add i64 %6629, 8
  store i64 %6630, i64* %PC
  %6631 = inttoptr i64 %6628 to i32*
  %6632 = load i32, i32* %6631
  %6633 = sext i32 %6632 to i64
  store i64 %6633, i64* %RSI, align 8, !tbaa !2428
  %6634 = load i64, i64* %RBP
  %6635 = load i64, i64* %RSI
  %6636 = mul i64 %6635, 4
  %6637 = add i64 %6634, -2640
  %6638 = add i64 %6637, %6636
  %6639 = load i64, i64* %PC
  %6640 = add i64 %6639, 7
  store i64 %6640, i64* %PC
  %6641 = inttoptr i64 %6638 to i32*
  %6642 = load i32, i32* %6641
  %6643 = zext i32 %6642 to i64
  store i64 %6643, i64* %RDX, align 8, !tbaa !2428
  %6644 = load i64, i64* %RDX
  %6645 = load i64, i64* %RBP
  %6646 = sub i64 %6645, 16
  %6647 = load i64, i64* %PC
  %6648 = add i64 %6647, 3
  store i64 %6648, i64* %PC
  %6649 = trunc i64 %6644 to i32
  %6650 = inttoptr i64 %6646 to i32*
  %6651 = load i32, i32* %6650
  %6652 = sub i32 %6649, %6651
  %6653 = zext i32 %6652 to i64
  store i64 %6653, i64* %RDX, align 8, !tbaa !2428
  %6654 = icmp ult i32 %6649, %6651
  %6655 = zext i1 %6654 to i8
  %6656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6655, i8* %6656, align 1, !tbaa !2432
  %6657 = and i32 %6652, 255
  %6658 = call i32 @llvm.ctpop.i32(i32 %6657) #16
  %6659 = trunc i32 %6658 to i8
  %6660 = and i8 %6659, 1
  %6661 = xor i8 %6660, 1
  %6662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6661, i8* %6662, align 1, !tbaa !2446
  %6663 = xor i32 %6651, %6649
  %6664 = xor i32 %6663, %6652
  %6665 = lshr i32 %6664, 4
  %6666 = trunc i32 %6665 to i8
  %6667 = and i8 %6666, 1
  %6668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6667, i8* %6668, align 1, !tbaa !2447
  %6669 = icmp eq i32 %6652, 0
  %6670 = zext i1 %6669 to i8
  %6671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6670, i8* %6671, align 1, !tbaa !2448
  %6672 = lshr i32 %6652, 31
  %6673 = trunc i32 %6672 to i8
  %6674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6673, i8* %6674, align 1, !tbaa !2449
  %6675 = lshr i32 %6649, 31
  %6676 = lshr i32 %6651, 31
  %6677 = xor i32 %6676, %6675
  %6678 = xor i32 %6672, %6675
  %6679 = add nuw nsw i32 %6678, %6677
  %6680 = icmp eq i32 %6679, 2
  %6681 = zext i1 %6680 to i8
  %6682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6681, i8* %6682, align 1, !tbaa !2450
  %6683 = load i64, i64* %RDX
  %6684 = load i64, i64* %PC
  %6685 = add i64 %6684, 6
  store i64 %6685, i64* %PC
  %6686 = trunc i64 %6683 to i32
  %6687 = add i32 255, %6686
  %6688 = zext i32 %6687 to i64
  store i64 %6688, i64* %RDX, align 8, !tbaa !2428
  %6689 = icmp ult i32 %6687, %6686
  %6690 = icmp ult i32 %6687, 255
  %6691 = or i1 %6689, %6690
  %6692 = zext i1 %6691 to i8
  %6693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6692, i8* %6693, align 1, !tbaa !2432
  %6694 = and i32 %6687, 255
  %6695 = call i32 @llvm.ctpop.i32(i32 %6694) #16
  %6696 = trunc i32 %6695 to i8
  %6697 = and i8 %6696, 1
  %6698 = xor i8 %6697, 1
  %6699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6698, i8* %6699, align 1, !tbaa !2446
  %6700 = xor i64 255, %6683
  %6701 = trunc i64 %6700 to i32
  %6702 = xor i32 %6701, %6687
  %6703 = lshr i32 %6702, 4
  %6704 = trunc i32 %6703 to i8
  %6705 = and i8 %6704, 1
  %6706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6705, i8* %6706, align 1, !tbaa !2447
  %6707 = icmp eq i32 %6687, 0
  %6708 = zext i1 %6707 to i8
  %6709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6708, i8* %6709, align 1, !tbaa !2448
  %6710 = lshr i32 %6687, 31
  %6711 = trunc i32 %6710 to i8
  %6712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6711, i8* %6712, align 1, !tbaa !2449
  %6713 = lshr i32 %6686, 31
  %6714 = xor i32 %6710, %6713
  %6715 = add nuw nsw i32 %6714, %6710
  %6716 = icmp eq i32 %6715, 2
  %6717 = zext i1 %6716 to i8
  %6718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6717, i8* %6718, align 1, !tbaa !2450
  %6719 = load i32, i32* %EDX
  %6720 = zext i32 %6719 to i64
  %6721 = load i64, i64* %PC
  %6722 = add i64 %6721, 2
  store i64 %6722, i64* %PC
  %6723 = and i64 %6720, 4294967295
  store i64 %6723, i64* %RAX, align 8, !tbaa !2428
  %6724 = load i64, i64* %PC
  %6725 = add i64 %6724, 1
  store i64 %6725, i64* %PC
  %6726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6728 = bitcast %union.anon* %6727 to i32*
  %6729 = load i32, i32* %6728, align 8, !tbaa !2452
  %6730 = sext i32 %6729 to i64
  %6731 = lshr i64 %6730, 32
  store i64 %6731, i64* %6726, align 8, !tbaa !2428
  %6732 = load i32, i32* %ECX
  %6733 = zext i32 %6732 to i64
  %6734 = load i64, i64* %PC
  %6735 = add i64 %6734, 2
  store i64 %6735, i64* %PC
  %6736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6737 = bitcast %union.anon* %6736 to i32*
  %6738 = load i32, i32* %6737, align 8, !tbaa !2452
  %6739 = zext i32 %6738 to i64
  %6740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %6741 = bitcast %union.anon* %6740 to i32*
  %6742 = load i32, i32* %6741, align 8, !tbaa !2452
  %6743 = zext i32 %6742 to i64
  %6744 = shl i64 %6733, 32
  %6745 = ashr exact i64 %6744, 32
  %6746 = shl nuw i64 %6743, 32
  %6747 = or i64 %6746, %6739
  %6748 = sdiv i64 %6747, %6745
  %6749 = shl i64 %6748, 32
  %6750 = ashr exact i64 %6749, 32
  %6751 = icmp eq i64 %6748, %6750
  br i1 %6751, label %6756, label %6752

; <label>:6752:                                   ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %6753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6754 = load i64, i64* %6753, align 8, !tbaa !2428
  %6755 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6754, %struct.Memory* %6609) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:6756:                                   ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %6757 = srem i64 %6747, %6745
  %6758 = getelementptr inbounds %union.anon, %union.anon* %6736, i64 0, i32 0
  %6759 = and i64 %6748, 4294967295
  store i64 %6759, i64* %6758, align 8, !tbaa !2428
  %6760 = getelementptr inbounds %union.anon, %union.anon* %6740, i64 0, i32 0
  %6761 = and i64 %6757, 4294967295
  store i64 %6761, i64* %6760, align 8, !tbaa !2428
  %6762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6762, align 1, !tbaa !2432
  %6763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %6763, align 1, !tbaa !2446
  %6764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6764, align 1, !tbaa !2447
  %6765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6765, align 1, !tbaa !2448
  %6766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6766, align 1, !tbaa !2449
  %6767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6767, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %6752, %6756
  %6768 = phi %struct.Memory* [ %6755, %6752 ], [ %6609, %6756 ]
  %6769 = load i32, i32* %EDX
  %6770 = zext i32 %6769 to i64
  %6771 = load i64, i64* %PC
  %6772 = add i64 %6771, 3
  store i64 %6772, i64* %PC
  %6773 = shl i64 %6770, 32
  %6774 = ashr exact i64 %6773, 32
  store i64 %6774, i64* %RSI, align 8, !tbaa !2428
  %6775 = load i64, i64* %RSI
  %6776 = mul i64 %6775, 4
  %6777 = add i64 %6776, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %6778 = load i64, i64* %PC
  %6779 = add i64 %6778, 7
  store i64 %6779, i64* %PC
  %6780 = inttoptr i64 %6777 to i32*
  %6781 = load i32, i32* %6780
  %6782 = zext i32 %6781 to i64
  store i64 %6782, i64* %RDX, align 8, !tbaa !2428
  %6783 = load i64, i64* %RBP
  %6784 = sub i64 %6783, 4
  %6785 = load i64, i64* %PC
  %6786 = add i64 %6785, 4
  store i64 %6786, i64* %PC
  %6787 = inttoptr i64 %6784 to i32*
  %6788 = load i32, i32* %6787
  %6789 = sext i32 %6788 to i64
  store i64 %6789, i64* %RSI, align 8, !tbaa !2428
  %6790 = load i64, i64* %RBP
  %6791 = load i64, i64* %RSI
  %6792 = mul i64 %6791, 4
  %6793 = add i64 %6790, -1568
  %6794 = add i64 %6793, %6792
  %6795 = load i64, i64* %PC
  %6796 = add i64 %6795, 8
  store i64 %6796, i64* %PC
  %6797 = inttoptr i64 %6794 to i32*
  %6798 = load i32, i32* %6797
  %6799 = sext i32 %6798 to i64
  store i64 %6799, i64* %RSI, align 8, !tbaa !2428
  %6800 = load i64, i64* %RBP
  %6801 = load i64, i64* %RSI
  %6802 = mul i64 %6801, 4
  %6803 = add i64 %6800, -2640
  %6804 = add i64 %6803, %6802
  %6805 = load i32, i32* %EDX
  %6806 = zext i32 %6805 to i64
  %6807 = load i64, i64* %PC
  %6808 = add i64 %6807, 7
  store i64 %6808, i64* %PC
  %6809 = inttoptr i64 %6804 to i32*
  store i32 %6805, i32* %6809
  %6810 = load i64, i64* %RBP
  %6811 = sub i64 %6810, 4
  %6812 = load i64, i64* %PC
  %6813 = add i64 %6812, 4
  store i64 %6813, i64* %PC
  %6814 = inttoptr i64 %6811 to i32*
  %6815 = load i32, i32* %6814
  %6816 = sext i32 %6815 to i64
  store i64 %6816, i64* %RSI, align 8, !tbaa !2428
  %6817 = load i64, i64* %RBP
  %6818 = load i64, i64* %RSI
  %6819 = mul i64 %6818, 4
  %6820 = add i64 %6817, -1568
  %6821 = add i64 %6820, %6819
  %6822 = load i64, i64* %PC
  %6823 = add i64 %6822, 8
  store i64 %6823, i64* %PC
  %6824 = inttoptr i64 %6821 to i32*
  %6825 = load i32, i32* %6824
  %6826 = sext i32 %6825 to i64
  store i64 %6826, i64* %RSI, align 8, !tbaa !2428
  %6827 = load i64, i64* %RBP
  %6828 = load i64, i64* %RSI
  %6829 = mul i64 %6828, 4
  %6830 = add i64 %6827, -2640
  %6831 = add i64 %6830, %6829
  %6832 = load i64, i64* %PC
  %6833 = add i64 %6832, 7
  store i64 %6833, i64* %PC
  %6834 = inttoptr i64 %6831 to i32*
  %6835 = load i32, i32* %6834
  %6836 = zext i32 %6835 to i64
  store i64 %6836, i64* %RDX, align 8, !tbaa !2428
  %6837 = load i64, i64* %RBP
  %6838 = sub i64 %6837, 4
  %6839 = load i64, i64* %PC
  %6840 = add i64 %6839, 4
  store i64 %6840, i64* %PC
  %6841 = inttoptr i64 %6838 to i32*
  %6842 = load i32, i32* %6841
  %6843 = sext i32 %6842 to i64
  store i64 %6843, i64* %RSI, align 8, !tbaa !2428
  %6844 = load i64, i64* %RBP
  %6845 = load i64, i64* %RSI
  %6846 = mul i64 %6845, 4
  %6847 = add i64 %6844, -1568
  %6848 = add i64 %6847, %6846
  %6849 = load i64, i64* %PC
  %6850 = add i64 %6849, 8
  store i64 %6850, i64* %PC
  %6851 = inttoptr i64 %6848 to i32*
  %6852 = load i32, i32* %6851
  %6853 = sext i32 %6852 to i64
  store i64 %6853, i64* %RSI, align 8, !tbaa !2428
  %6854 = load i64, i64* %RDX
  %6855 = load i64, i64* %RSI
  %6856 = mul i64 %6855, 4
  %6857 = add i64 %6856, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %6858 = load i64, i64* %PC
  %6859 = add i64 %6858, 7
  store i64 %6859, i64* %PC
  %6860 = trunc i64 %6854 to i32
  %6861 = inttoptr i64 %6857 to i32*
  %6862 = load i32, i32* %6861
  %6863 = xor i32 %6862, %6860
  %6864 = zext i32 %6863 to i64
  store i64 %6864, i64* %RDX, align 8, !tbaa !2428
  %6865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6865, align 1, !tbaa !2432
  %6866 = and i32 %6863, 255
  %6867 = call i32 @llvm.ctpop.i32(i32 %6866) #16
  %6868 = trunc i32 %6867 to i8
  %6869 = and i8 %6868, 1
  %6870 = xor i8 %6869, 1
  %6871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6870, i8* %6871, align 1, !tbaa !2446
  %6872 = icmp eq i32 %6863, 0
  %6873 = zext i1 %6872 to i8
  %6874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6873, i8* %6874, align 1, !tbaa !2448
  %6875 = lshr i32 %6863, 31
  %6876 = trunc i32 %6875 to i8
  %6877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6876, i8* %6877, align 1, !tbaa !2449
  %6878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6878, align 1, !tbaa !2450
  %6879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6879, align 1, !tbaa !2447
  %6880 = load i64, i64* %RSI
  %6881 = mul i64 %6880, 4
  %6882 = add i64 %6881, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %6883 = load i32, i32* %EDX
  %6884 = zext i32 %6883 to i64
  %6885 = load i64, i64* %PC
  %6886 = add i64 %6885, 7
  store i64 %6886, i64* %PC
  %6887 = inttoptr i64 %6882 to i32*
  store i32 %6883, i32* %6887
  br label %block_4016fb

block_401713:                                     ; preds = %block_401203
  %6888 = inttoptr i64 %11562 to i32*
  store i32 0, i32* %6888
  br label %block_40171a

block_4010bd:                                     ; preds = %block_4010b6, %block_4010d1
  %MEMORY.29 = phi %struct.Memory* [ %MEMORY.37, %block_4010b6 ], [ %MEMORY.29, %block_4010d1 ]
  %6889 = load i64, i64* %RBP
  %6890 = sub i64 %6889, 4
  %6891 = load i64, i64* %PC
  %6892 = add i64 %6891, 3
  store i64 %6892, i64* %PC
  %6893 = inttoptr i64 %6890 to i32*
  %6894 = load i32, i32* %6893
  %6895 = zext i32 %6894 to i64
  store i64 %6895, i64* %RAX, align 8, !tbaa !2428
  %6896 = load i64, i64* %RBP
  %6897 = sub i64 %6896, 12
  %6898 = load i64, i64* %PC
  %6899 = add i64 %6898, 4
  store i64 %6899, i64* %PC
  %6900 = inttoptr i64 %6897 to i32*
  %6901 = load i32, i32* %6900
  %6902 = sext i32 %6901 to i64
  store i64 %6902, i64* %RCX, align 8, !tbaa !2428
  %6903 = load i32, i32* %EAX
  %6904 = zext i32 %6903 to i64
  %6905 = load i64, i64* %RBP
  %6906 = load i64, i64* %RCX
  %6907 = mul i64 %6906, 4
  %6908 = add i64 %6905, -1328
  %6909 = add i64 %6908, %6907
  %6910 = load i64, i64* %PC
  %6911 = add i64 %6910, 7
  store i64 %6911, i64* %PC
  %6912 = inttoptr i64 %6909 to i32*
  %6913 = load i32, i32* %6912
  %6914 = sub i32 %6903, %6913
  %6915 = icmp ult i32 %6903, %6913
  %6916 = zext i1 %6915 to i8
  %6917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6916, i8* %6917, align 1, !tbaa !2432
  %6918 = and i32 %6914, 255
  %6919 = call i32 @llvm.ctpop.i32(i32 %6918) #16
  %6920 = trunc i32 %6919 to i8
  %6921 = and i8 %6920, 1
  %6922 = xor i8 %6921, 1
  %6923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6922, i8* %6923, align 1, !tbaa !2446
  %6924 = xor i32 %6913, %6903
  %6925 = xor i32 %6924, %6914
  %6926 = lshr i32 %6925, 4
  %6927 = trunc i32 %6926 to i8
  %6928 = and i8 %6927, 1
  %6929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6928, i8* %6929, align 1, !tbaa !2447
  %6930 = icmp eq i32 %6914, 0
  %6931 = zext i1 %6930 to i8
  %6932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6931, i8* %6932, align 1, !tbaa !2448
  %6933 = lshr i32 %6914, 31
  %6934 = trunc i32 %6933 to i8
  %6935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6934, i8* %6935, align 1, !tbaa !2449
  %6936 = lshr i32 %6903, 31
  %6937 = lshr i32 %6913, 31
  %6938 = xor i32 %6937, %6936
  %6939 = xor i32 %6933, %6936
  %6940 = add nuw nsw i32 %6939, %6938
  %6941 = icmp eq i32 %6940, 2
  %6942 = zext i1 %6941 to i8
  %6943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6942, i8* %6943, align 1, !tbaa !2450
  %6944 = load i64, i64* %PC
  %6945 = add i64 %6944, 56
  %6946 = load i64, i64* %PC
  %6947 = add i64 %6946, 6
  %6948 = load i64, i64* %PC
  %6949 = add i64 %6948, 6
  store i64 %6949, i64* %PC
  %6950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6951 = load i8, i8* %6950, align 1, !tbaa !2448
  %6952 = icmp eq i8 %6951, 0
  %6953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6954 = load i8, i8* %6953, align 1, !tbaa !2449
  %6955 = icmp ne i8 %6954, 0
  %6956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6957 = load i8, i8* %6956, align 1, !tbaa !2450
  %6958 = icmp ne i8 %6957, 0
  %6959 = xor i1 %6955, %6958
  %6960 = xor i1 %6959, true
  %6961 = and i1 %6952, %6960
  %6962 = zext i1 %6961 to i8
  store i8 %6962, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6964 = select i1 %6961, i64 %6945, i64 %6947
  store i64 %6964, i64* %6963, align 8, !tbaa !2428
  %6965 = load i8, i8* %BRANCH_TAKEN
  %6966 = icmp eq i8 %6965, 1
  %6967 = load i64, i64* %RBP
  br i1 %6966, label %block_401103, label %block_4010d1

block_400aba:                                     ; preds = %block_400a84
  %6968 = sub i64 %6384, 1328
  %6969 = load i64, i64* %PC
  %6970 = add i64 %6969, 10
  store i64 %6970, i64* %PC
  %6971 = inttoptr i64 %6968 to i32*
  store i32 0, i32* %6971
  %6972 = load i64, i64* %RBP
  %6973 = sub i64 %6972, 1324
  %6974 = load i64, i64* %PC
  %6975 = add i64 %6974, 10
  store i64 %6975, i64* %PC
  %6976 = inttoptr i64 %6973 to i32*
  store i32 0, i32* %6976
  %6977 = load i64, i64* %RBP
  %6978 = sub i64 %6977, 1408
  %6979 = load i64, i64* %PC
  %6980 = add i64 %6979, 10
  store i64 %6980, i64* %PC
  %6981 = inttoptr i64 %6978 to i32*
  store i32 -1, i32* %6981
  %6982 = load i64, i64* %RBP
  %6983 = sub i64 %6982, 1404
  %6984 = load i64, i64* %PC
  %6985 = add i64 %6984, 10
  store i64 %6985, i64* %PC
  %6986 = inttoptr i64 %6983 to i32*
  store i32 0, i32* %6986
  %6987 = load i64, i64* %RBP
  %6988 = sub i64 %6987, 12
  %6989 = load i64, i64* %PC
  %6990 = add i64 %6989, 7
  store i64 %6990, i64* %PC
  %6991 = inttoptr i64 %6988 to i32*
  store i32 0, i32* %6991
  br label %block_400ae9

block_40186d:                                     ; preds = %block_401868, %block_4017f8
  %MEMORY.30 = phi %struct.Memory* [ %MEMORY.52, %block_401868 ], [ %MEMORY.0, %block_4017f8 ]
  %6992 = load i64, i64* %RSP
  %6993 = load i64, i64* %PC
  %6994 = add i64 %6993, 7
  store i64 %6994, i64* %PC
  %6995 = add i64 2608, %6992
  store i64 %6995, i64* %RSP, align 8, !tbaa !2428
  %6996 = icmp ult i64 %6995, %6992
  %6997 = icmp ult i64 %6995, 2608
  %6998 = or i1 %6996, %6997
  %6999 = zext i1 %6998 to i8
  %7000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6999, i8* %7000, align 1, !tbaa !2432
  %7001 = trunc i64 %6995 to i32
  %7002 = and i32 %7001, 255
  %7003 = call i32 @llvm.ctpop.i32(i32 %7002) #16
  %7004 = trunc i32 %7003 to i8
  %7005 = and i8 %7004, 1
  %7006 = xor i8 %7005, 1
  %7007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7006, i8* %7007, align 1, !tbaa !2446
  %7008 = xor i64 2608, %6992
  %7009 = xor i64 %7008, %6995
  %7010 = lshr i64 %7009, 4
  %7011 = trunc i64 %7010 to i8
  %7012 = and i8 %7011, 1
  %7013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7012, i8* %7013, align 1, !tbaa !2447
  %7014 = icmp eq i64 %6995, 0
  %7015 = zext i1 %7014 to i8
  %7016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7015, i8* %7016, align 1, !tbaa !2448
  %7017 = lshr i64 %6995, 63
  %7018 = trunc i64 %7017 to i8
  %7019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7018, i8* %7019, align 1, !tbaa !2449
  %7020 = lshr i64 %6992, 63
  %7021 = xor i64 %7017, %7020
  %7022 = add nuw nsw i64 %7021, %7017
  %7023 = icmp eq i64 %7022, 2
  %7024 = zext i1 %7023 to i8
  %7025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7024, i8* %7025, align 1, !tbaa !2450
  %7026 = load i64, i64* %PC
  %7027 = add i64 %7026, 1
  store i64 %7027, i64* %PC
  %7028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7029 = load i64, i64* %7028, align 8, !tbaa !2428
  %7030 = add i64 %7029, 8
  %7031 = inttoptr i64 %7029 to i64*
  %7032 = load i64, i64* %7031
  store i64 %7032, i64* %RBP, align 8, !tbaa !2428
  store i64 %7030, i64* %7028, align 8, !tbaa !2428
  %7033 = load i64, i64* %PC
  %7034 = add i64 %7033, 1
  store i64 %7034, i64* %PC
  %7035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7037 = load i64, i64* %7036, align 8, !tbaa !2428
  %7038 = inttoptr i64 %7037 to i64*
  %7039 = load i64, i64* %7038
  store i64 %7039, i64* %7035, align 8, !tbaa !2428
  %7040 = add i64 %7037, 8
  store i64 %7040, i64* %7036, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.30

block_401846:                                     ; preds = %block_401811
  %7041 = add i64 %11026, 11
  store i64 %7041, i64* %PC
  %7042 = inttoptr i64 %11025 to i32*
  store i32 0, i32* %7042
  br label %block_401855

block_400b3a:                                     ; preds = %block_400b26
  %7043 = load i64, i64* %RBP
  %7044 = sub i64 %7043, 1168
  %7045 = load i64, i64* %PC
  %7046 = add i64 %7045, 7
  store i64 %7046, i64* %PC
  store i64 %7044, i64* %RAX, align 8, !tbaa !2428
  %7047 = load i64, i64* %RBP
  %7048 = sub i64 %7047, 12
  %7049 = load i64, i64* %PC
  %7050 = add i64 %7049, 4
  store i64 %7050, i64* %PC
  %7051 = inttoptr i64 %7048 to i32*
  %7052 = load i32, i32* %7051
  %7053 = sext i32 %7052 to i64
  store i64 %7053, i64* %RCX, align 8, !tbaa !2428
  %7054 = load i64, i64* %RCX
  %7055 = load i64, i64* %PC
  %7056 = add i64 %7055, 4
  store i64 %7056, i64* %PC
  %7057 = shl i64 %7054, 5
  %7058 = icmp slt i64 %7057, 0
  %7059 = shl i64 %7057, 1
  store i64 %7059, i64* %RCX, align 8, !tbaa !2428
  %7060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7061 = zext i1 %7058 to i8
  store i8 %7061, i8* %7060, align 1, !tbaa !2451
  %7062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7063 = trunc i64 %7059 to i32
  %7064 = and i32 %7063, 254
  %7065 = call i32 @llvm.ctpop.i32(i32 %7064) #16
  %7066 = trunc i32 %7065 to i8
  %7067 = and i8 %7066, 1
  %7068 = xor i8 %7067, 1
  store i8 %7068, i8* %7062, align 1, !tbaa !2451
  %7069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7069, align 1, !tbaa !2451
  %7070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7071 = icmp eq i64 %7059, 0
  %7072 = zext i1 %7071 to i8
  store i8 %7072, i8* %7070, align 1, !tbaa !2451
  %7073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7074 = lshr i64 %7059, 63
  %7075 = trunc i64 %7074 to i8
  store i8 %7075, i8* %7073, align 1, !tbaa !2451
  %7076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7076, align 1, !tbaa !2451
  %7077 = load i64, i64* %RAX
  %7078 = load i64, i64* %PC
  %7079 = add i64 %7078, 3
  store i64 %7079, i64* %PC
  store i64 %7077, i64* %RDX, align 8, !tbaa !2428
  %7080 = load i64, i64* %RDX
  %7081 = load i64, i64* %RCX
  %7082 = load i64, i64* %PC
  %7083 = add i64 %7082, 3
  store i64 %7083, i64* %PC
  %7084 = add i64 %7081, %7080
  store i64 %7084, i64* %RDX, align 8, !tbaa !2428
  %7085 = icmp ult i64 %7084, %7080
  %7086 = icmp ult i64 %7084, %7081
  %7087 = or i1 %7085, %7086
  %7088 = zext i1 %7087 to i8
  %7089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7088, i8* %7089, align 1, !tbaa !2432
  %7090 = trunc i64 %7084 to i32
  %7091 = and i32 %7090, 255
  %7092 = call i32 @llvm.ctpop.i32(i32 %7091) #16
  %7093 = trunc i32 %7092 to i8
  %7094 = and i8 %7093, 1
  %7095 = xor i8 %7094, 1
  %7096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7095, i8* %7096, align 1, !tbaa !2446
  %7097 = xor i64 %7081, %7080
  %7098 = xor i64 %7097, %7084
  %7099 = lshr i64 %7098, 4
  %7100 = trunc i64 %7099 to i8
  %7101 = and i8 %7100, 1
  %7102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7101, i8* %7102, align 1, !tbaa !2447
  %7103 = icmp eq i64 %7084, 0
  %7104 = zext i1 %7103 to i8
  %7105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7104, i8* %7105, align 1, !tbaa !2448
  %7106 = lshr i64 %7084, 63
  %7107 = trunc i64 %7106 to i8
  %7108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7107, i8* %7108, align 1, !tbaa !2449
  %7109 = lshr i64 %7080, 63
  %7110 = lshr i64 %7081, 63
  %7111 = xor i64 %7106, %7109
  %7112 = xor i64 %7106, %7110
  %7113 = add nuw nsw i64 %7111, %7112
  %7114 = icmp eq i64 %7113, 2
  %7115 = zext i1 %7114 to i8
  %7116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7115, i8* %7116, align 1, !tbaa !2450
  %7117 = load i64, i64* %RBP
  %7118 = sub i64 %7117, 4
  %7119 = load i64, i64* %PC
  %7120 = add i64 %7119, 4
  store i64 %7120, i64* %PC
  %7121 = inttoptr i64 %7118 to i32*
  %7122 = load i32, i32* %7121
  %7123 = sext i32 %7122 to i64
  store i64 %7123, i64* %RCX, align 8, !tbaa !2428
  %7124 = load i64, i64* %RDX
  %7125 = load i64, i64* %RCX
  %7126 = mul i64 %7125, 4
  %7127 = add i64 %7126, %7124
  %7128 = load i64, i64* %PC
  %7129 = add i64 %7128, 3
  store i64 %7129, i64* %PC
  %7130 = inttoptr i64 %7127 to i32*
  %7131 = load i32, i32* %7130
  %7132 = zext i32 %7131 to i64
  store i64 %7132, i64* %RSI, align 8, !tbaa !2428
  %7133 = load i64, i64* %RBP
  %7134 = sub i64 %7133, 12
  %7135 = load i64, i64* %PC
  %7136 = add i64 %7135, 3
  store i64 %7136, i64* %PC
  %7137 = inttoptr i64 %7134 to i32*
  %7138 = load i32, i32* %7137
  %7139 = zext i32 %7138 to i64
  store i64 %7139, i64* %RDI, align 8, !tbaa !2428
  %7140 = load i64, i64* %RDI
  %7141 = load i64, i64* %PC
  %7142 = add i64 %7141, 3
  store i64 %7142, i64* %PC
  %7143 = trunc i64 %7140 to i32
  %7144 = add i32 1, %7143
  %7145 = zext i32 %7144 to i64
  store i64 %7145, i64* %RDI, align 8, !tbaa !2428
  %7146 = icmp ult i32 %7144, %7143
  %7147 = icmp ult i32 %7144, 1
  %7148 = or i1 %7146, %7147
  %7149 = zext i1 %7148 to i8
  %7150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7149, i8* %7150, align 1, !tbaa !2432
  %7151 = and i32 %7144, 255
  %7152 = call i32 @llvm.ctpop.i32(i32 %7151) #16
  %7153 = trunc i32 %7152 to i8
  %7154 = and i8 %7153, 1
  %7155 = xor i8 %7154, 1
  %7156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7155, i8* %7156, align 1, !tbaa !2446
  %7157 = xor i64 1, %7140
  %7158 = trunc i64 %7157 to i32
  %7159 = xor i32 %7158, %7144
  %7160 = lshr i32 %7159, 4
  %7161 = trunc i32 %7160 to i8
  %7162 = and i8 %7161, 1
  %7163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7162, i8* %7163, align 1, !tbaa !2447
  %7164 = icmp eq i32 %7144, 0
  %7165 = zext i1 %7164 to i8
  %7166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7165, i8* %7166, align 1, !tbaa !2448
  %7167 = lshr i32 %7144, 31
  %7168 = trunc i32 %7167 to i8
  %7169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7168, i8* %7169, align 1, !tbaa !2449
  %7170 = lshr i32 %7143, 31
  %7171 = xor i32 %7167, %7170
  %7172 = add nuw nsw i32 %7171, %7167
  %7173 = icmp eq i32 %7172, 2
  %7174 = zext i1 %7173 to i8
  %7175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7174, i8* %7175, align 1, !tbaa !2450
  %7176 = load i32, i32* %EDI
  %7177 = zext i32 %7176 to i64
  %7178 = load i64, i64* %PC
  %7179 = add i64 %7178, 3
  store i64 %7179, i64* %PC
  %7180 = shl i64 %7177, 32
  %7181 = ashr exact i64 %7180, 32
  store i64 %7181, i64* %RCX, align 8, !tbaa !2428
  %7182 = load i64, i64* %RCX
  %7183 = load i64, i64* %PC
  %7184 = add i64 %7183, 4
  store i64 %7184, i64* %PC
  %7185 = shl i64 %7182, 5
  %7186 = icmp slt i64 %7185, 0
  %7187 = shl i64 %7185, 1
  store i64 %7187, i64* %RCX, align 8, !tbaa !2428
  %7188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7189 = zext i1 %7186 to i8
  store i8 %7189, i8* %7188, align 1, !tbaa !2451
  %7190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7191 = trunc i64 %7187 to i32
  %7192 = and i32 %7191, 254
  %7193 = call i32 @llvm.ctpop.i32(i32 %7192) #16
  %7194 = trunc i32 %7193 to i8
  %7195 = and i8 %7194, 1
  %7196 = xor i8 %7195, 1
  store i8 %7196, i8* %7190, align 1, !tbaa !2451
  %7197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7197, align 1, !tbaa !2451
  %7198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7199 = icmp eq i64 %7187, 0
  %7200 = zext i1 %7199 to i8
  store i8 %7200, i8* %7198, align 1, !tbaa !2451
  %7201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7202 = lshr i64 %7187, 63
  %7203 = trunc i64 %7202 to i8
  store i8 %7203, i8* %7201, align 1, !tbaa !2451
  %7204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7204, align 1, !tbaa !2451
  %7205 = load i64, i64* %RAX
  %7206 = load i64, i64* %PC
  %7207 = add i64 %7206, 3
  store i64 %7207, i64* %PC
  store i64 %7205, i64* %RDX, align 8, !tbaa !2428
  %7208 = load i64, i64* %RDX
  %7209 = load i64, i64* %RCX
  %7210 = load i64, i64* %PC
  %7211 = add i64 %7210, 3
  store i64 %7211, i64* %PC
  %7212 = add i64 %7209, %7208
  store i64 %7212, i64* %RDX, align 8, !tbaa !2428
  %7213 = icmp ult i64 %7212, %7208
  %7214 = icmp ult i64 %7212, %7209
  %7215 = or i1 %7213, %7214
  %7216 = zext i1 %7215 to i8
  %7217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7216, i8* %7217, align 1, !tbaa !2432
  %7218 = trunc i64 %7212 to i32
  %7219 = and i32 %7218, 255
  %7220 = call i32 @llvm.ctpop.i32(i32 %7219) #16
  %7221 = trunc i32 %7220 to i8
  %7222 = and i8 %7221, 1
  %7223 = xor i8 %7222, 1
  %7224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7223, i8* %7224, align 1, !tbaa !2446
  %7225 = xor i64 %7209, %7208
  %7226 = xor i64 %7225, %7212
  %7227 = lshr i64 %7226, 4
  %7228 = trunc i64 %7227 to i8
  %7229 = and i8 %7228, 1
  %7230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7229, i8* %7230, align 1, !tbaa !2447
  %7231 = icmp eq i64 %7212, 0
  %7232 = zext i1 %7231 to i8
  %7233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7232, i8* %7233, align 1, !tbaa !2448
  %7234 = lshr i64 %7212, 63
  %7235 = trunc i64 %7234 to i8
  %7236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7235, i8* %7236, align 1, !tbaa !2449
  %7237 = lshr i64 %7208, 63
  %7238 = lshr i64 %7209, 63
  %7239 = xor i64 %7234, %7237
  %7240 = xor i64 %7234, %7238
  %7241 = add nuw nsw i64 %7239, %7240
  %7242 = icmp eq i64 %7241, 2
  %7243 = zext i1 %7242 to i8
  %7244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7243, i8* %7244, align 1, !tbaa !2450
  %7245 = load i64, i64* %RBP
  %7246 = sub i64 %7245, 4
  %7247 = load i64, i64* %PC
  %7248 = add i64 %7247, 4
  store i64 %7248, i64* %PC
  %7249 = inttoptr i64 %7246 to i32*
  %7250 = load i32, i32* %7249
  %7251 = sext i32 %7250 to i64
  store i64 %7251, i64* %RCX, align 8, !tbaa !2428
  %7252 = load i64, i64* %RDX
  %7253 = load i64, i64* %RCX
  %7254 = mul i64 %7253, 4
  %7255 = add i64 %7254, %7252
  %7256 = load i32, i32* %ESI
  %7257 = zext i32 %7256 to i64
  %7258 = load i64, i64* %PC
  %7259 = add i64 %7258, 3
  store i64 %7259, i64* %PC
  %7260 = inttoptr i64 %7255 to i32*
  store i32 %7256, i32* %7260
  %7261 = load i64, i64* %RBP
  %7262 = sub i64 %7261, 12
  %7263 = load i64, i64* %PC
  %7264 = add i64 %7263, 4
  store i64 %7264, i64* %PC
  %7265 = inttoptr i64 %7262 to i32*
  %7266 = load i32, i32* %7265
  %7267 = sext i32 %7266 to i64
  store i64 %7267, i64* %RCX, align 8, !tbaa !2428
  %7268 = load i64, i64* %RCX
  %7269 = load i64, i64* %PC
  %7270 = add i64 %7269, 4
  store i64 %7270, i64* %PC
  %7271 = shl i64 %7268, 5
  %7272 = icmp slt i64 %7271, 0
  %7273 = shl i64 %7271, 1
  store i64 %7273, i64* %RCX, align 8, !tbaa !2428
  %7274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7275 = zext i1 %7272 to i8
  store i8 %7275, i8* %7274, align 1, !tbaa !2451
  %7276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7277 = trunc i64 %7273 to i32
  %7278 = and i32 %7277, 254
  %7279 = call i32 @llvm.ctpop.i32(i32 %7278) #16
  %7280 = trunc i32 %7279 to i8
  %7281 = and i8 %7280, 1
  %7282 = xor i8 %7281, 1
  store i8 %7282, i8* %7276, align 1, !tbaa !2451
  %7283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7283, align 1, !tbaa !2451
  %7284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7285 = icmp eq i64 %7273, 0
  %7286 = zext i1 %7285 to i8
  store i8 %7286, i8* %7284, align 1, !tbaa !2451
  %7287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7288 = lshr i64 %7273, 63
  %7289 = trunc i64 %7288 to i8
  store i8 %7289, i8* %7287, align 1, !tbaa !2451
  %7290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7290, align 1, !tbaa !2451
  %7291 = load i64, i64* %RAX
  %7292 = load i64, i64* %PC
  %7293 = add i64 %7292, 3
  store i64 %7293, i64* %PC
  store i64 %7291, i64* %RDX, align 8, !tbaa !2428
  %7294 = load i64, i64* %RDX
  %7295 = load i64, i64* %RCX
  %7296 = load i64, i64* %PC
  %7297 = add i64 %7296, 3
  store i64 %7297, i64* %PC
  %7298 = add i64 %7295, %7294
  store i64 %7298, i64* %RDX, align 8, !tbaa !2428
  %7299 = icmp ult i64 %7298, %7294
  %7300 = icmp ult i64 %7298, %7295
  %7301 = or i1 %7299, %7300
  %7302 = zext i1 %7301 to i8
  %7303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7302, i8* %7303, align 1, !tbaa !2432
  %7304 = trunc i64 %7298 to i32
  %7305 = and i32 %7304, 255
  %7306 = call i32 @llvm.ctpop.i32(i32 %7305) #16
  %7307 = trunc i32 %7306 to i8
  %7308 = and i8 %7307, 1
  %7309 = xor i8 %7308, 1
  %7310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7309, i8* %7310, align 1, !tbaa !2446
  %7311 = xor i64 %7295, %7294
  %7312 = xor i64 %7311, %7298
  %7313 = lshr i64 %7312, 4
  %7314 = trunc i64 %7313 to i8
  %7315 = and i8 %7314, 1
  %7316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7315, i8* %7316, align 1, !tbaa !2447
  %7317 = icmp eq i64 %7298, 0
  %7318 = zext i1 %7317 to i8
  %7319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7318, i8* %7319, align 1, !tbaa !2448
  %7320 = lshr i64 %7298, 63
  %7321 = trunc i64 %7320 to i8
  %7322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7321, i8* %7322, align 1, !tbaa !2449
  %7323 = lshr i64 %7294, 63
  %7324 = lshr i64 %7295, 63
  %7325 = xor i64 %7320, %7323
  %7326 = xor i64 %7320, %7324
  %7327 = add nuw nsw i64 %7325, %7326
  %7328 = icmp eq i64 %7327, 2
  %7329 = zext i1 %7328 to i8
  %7330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7329, i8* %7330, align 1, !tbaa !2450
  %7331 = load i64, i64* %RBP
  %7332 = sub i64 %7331, 4
  %7333 = load i64, i64* %PC
  %7334 = add i64 %7333, 4
  store i64 %7334, i64* %PC
  %7335 = inttoptr i64 %7332 to i32*
  %7336 = load i32, i32* %7335
  %7337 = sext i32 %7336 to i64
  store i64 %7337, i64* %RCX, align 8, !tbaa !2428
  %7338 = load i64, i64* %RDX
  %7339 = load i64, i64* %RCX
  %7340 = mul i64 %7339, 4
  %7341 = add i64 %7340, %7338
  %7342 = load i64, i64* %PC
  %7343 = add i64 %7342, 4
  store i64 %7343, i64* %PC
  %7344 = inttoptr i64 %7341 to i32*
  %7345 = load i32, i32* %7344
  %7346 = sext i32 %7345 to i64
  store i64 %7346, i64* %RCX, align 8, !tbaa !2428
  %7347 = load i64, i64* %RCX
  %7348 = mul i64 %7347, 4
  %7349 = add i64 %7348, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %7350 = load i64, i64* %PC
  %7351 = add i64 %7350, 7
  store i64 %7351, i64* %PC
  %7352 = inttoptr i64 %7349 to i32*
  %7353 = load i32, i32* %7352
  %7354 = zext i32 %7353 to i64
  store i64 %7354, i64* %RSI, align 8, !tbaa !2428
  %7355 = load i64, i64* %RBP
  %7356 = sub i64 %7355, 12
  %7357 = load i64, i64* %PC
  %7358 = add i64 %7357, 4
  store i64 %7358, i64* %PC
  %7359 = inttoptr i64 %7356 to i32*
  %7360 = load i32, i32* %7359
  %7361 = sext i32 %7360 to i64
  store i64 %7361, i64* %RCX, align 8, !tbaa !2428
  %7362 = load i64, i64* %RCX
  %7363 = load i64, i64* %PC
  %7364 = add i64 %7363, 4
  store i64 %7364, i64* %PC
  %7365 = shl i64 %7362, 5
  %7366 = icmp slt i64 %7365, 0
  %7367 = shl i64 %7365, 1
  store i64 %7367, i64* %RCX, align 8, !tbaa !2428
  %7368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7369 = zext i1 %7366 to i8
  store i8 %7369, i8* %7368, align 1, !tbaa !2451
  %7370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7371 = trunc i64 %7367 to i32
  %7372 = and i32 %7371, 254
  %7373 = call i32 @llvm.ctpop.i32(i32 %7372) #16
  %7374 = trunc i32 %7373 to i8
  %7375 = and i8 %7374, 1
  %7376 = xor i8 %7375, 1
  store i8 %7376, i8* %7370, align 1, !tbaa !2451
  %7377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7377, align 1, !tbaa !2451
  %7378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7379 = icmp eq i64 %7367, 0
  %7380 = zext i1 %7379 to i8
  store i8 %7380, i8* %7378, align 1, !tbaa !2451
  %7381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7382 = lshr i64 %7367, 63
  %7383 = trunc i64 %7382 to i8
  store i8 %7383, i8* %7381, align 1, !tbaa !2451
  %7384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7384, align 1, !tbaa !2451
  %7385 = load i64, i64* %RAX
  %7386 = load i64, i64* %RCX
  %7387 = load i64, i64* %PC
  %7388 = add i64 %7387, 3
  store i64 %7388, i64* %PC
  %7389 = add i64 %7386, %7385
  store i64 %7389, i64* %RAX, align 8, !tbaa !2428
  %7390 = icmp ult i64 %7389, %7385
  %7391 = icmp ult i64 %7389, %7386
  %7392 = or i1 %7390, %7391
  %7393 = zext i1 %7392 to i8
  %7394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7393, i8* %7394, align 1, !tbaa !2432
  %7395 = trunc i64 %7389 to i32
  %7396 = and i32 %7395, 255
  %7397 = call i32 @llvm.ctpop.i32(i32 %7396) #16
  %7398 = trunc i32 %7397 to i8
  %7399 = and i8 %7398, 1
  %7400 = xor i8 %7399, 1
  %7401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7400, i8* %7401, align 1, !tbaa !2446
  %7402 = xor i64 %7386, %7385
  %7403 = xor i64 %7402, %7389
  %7404 = lshr i64 %7403, 4
  %7405 = trunc i64 %7404 to i8
  %7406 = and i8 %7405, 1
  %7407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7406, i8* %7407, align 1, !tbaa !2447
  %7408 = icmp eq i64 %7389, 0
  %7409 = zext i1 %7408 to i8
  %7410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7409, i8* %7410, align 1, !tbaa !2448
  %7411 = lshr i64 %7389, 63
  %7412 = trunc i64 %7411 to i8
  %7413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7412, i8* %7413, align 1, !tbaa !2449
  %7414 = lshr i64 %7385, 63
  %7415 = lshr i64 %7386, 63
  %7416 = xor i64 %7411, %7414
  %7417 = xor i64 %7411, %7415
  %7418 = add nuw nsw i64 %7416, %7417
  %7419 = icmp eq i64 %7418, 2
  %7420 = zext i1 %7419 to i8
  %7421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7420, i8* %7421, align 1, !tbaa !2450
  %7422 = load i64, i64* %RBP
  %7423 = sub i64 %7422, 4
  %7424 = load i64, i64* %PC
  %7425 = add i64 %7424, 4
  store i64 %7425, i64* %PC
  %7426 = inttoptr i64 %7423 to i32*
  %7427 = load i32, i32* %7426
  %7428 = sext i32 %7427 to i64
  store i64 %7428, i64* %RCX, align 8, !tbaa !2428
  %7429 = load i64, i64* %RAX
  %7430 = load i64, i64* %RCX
  %7431 = mul i64 %7430, 4
  %7432 = add i64 %7431, %7429
  %7433 = load i32, i32* %ESI
  %7434 = zext i32 %7433 to i64
  %7435 = load i64, i64* %PC
  %7436 = add i64 %7435, 3
  store i64 %7436, i64* %PC
  %7437 = inttoptr i64 %7432 to i32*
  store i32 %7433, i32* %7437
  %7438 = load i64, i64* %RBP
  %7439 = sub i64 %7438, 4
  %7440 = load i64, i64* %PC
  %7441 = add i64 %7440, 3
  store i64 %7441, i64* %PC
  %7442 = inttoptr i64 %7439 to i32*
  %7443 = load i32, i32* %7442
  %7444 = zext i32 %7443 to i64
  store i64 %7444, i64* %RAX, align 8, !tbaa !2428
  %7445 = load i64, i64* %RAX
  %7446 = load i64, i64* %PC
  %7447 = add i64 %7446, 3
  store i64 %7447, i64* %PC
  %7448 = trunc i64 %7445 to i32
  %7449 = add i32 1, %7448
  %7450 = zext i32 %7449 to i64
  store i64 %7450, i64* %RAX, align 8, !tbaa !2428
  %7451 = icmp ult i32 %7449, %7448
  %7452 = icmp ult i32 %7449, 1
  %7453 = or i1 %7451, %7452
  %7454 = zext i1 %7453 to i8
  %7455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7454, i8* %7455, align 1, !tbaa !2432
  %7456 = and i32 %7449, 255
  %7457 = call i32 @llvm.ctpop.i32(i32 %7456) #16
  %7458 = trunc i32 %7457 to i8
  %7459 = and i8 %7458, 1
  %7460 = xor i8 %7459, 1
  %7461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7460, i8* %7461, align 1, !tbaa !2446
  %7462 = xor i64 1, %7445
  %7463 = trunc i64 %7462 to i32
  %7464 = xor i32 %7463, %7449
  %7465 = lshr i32 %7464, 4
  %7466 = trunc i32 %7465 to i8
  %7467 = and i8 %7466, 1
  %7468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7467, i8* %7468, align 1, !tbaa !2447
  %7469 = icmp eq i32 %7449, 0
  %7470 = zext i1 %7469 to i8
  %7471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7470, i8* %7471, align 1, !tbaa !2448
  %7472 = lshr i32 %7449, 31
  %7473 = trunc i32 %7472 to i8
  %7474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7473, i8* %7474, align 1, !tbaa !2449
  %7475 = lshr i32 %7448, 31
  %7476 = xor i32 %7472, %7475
  %7477 = add nuw nsw i32 %7476, %7472
  %7478 = icmp eq i32 %7477, 2
  %7479 = zext i1 %7478 to i8
  %7480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7479, i8* %7480, align 1, !tbaa !2450
  %7481 = load i64, i64* %RBP
  %7482 = sub i64 %7481, 4
  %7483 = load i32, i32* %EAX
  %7484 = zext i32 %7483 to i64
  %7485 = load i64, i64* %PC
  %7486 = add i64 %7485, 3
  store i64 %7486, i64* %PC
  %7487 = inttoptr i64 %7482 to i32*
  store i32 %7483, i32* %7487
  %7488 = load i64, i64* %PC
  %7489 = sub i64 %7488, 130
  %7490 = load i64, i64* %PC
  %7491 = add i64 %7490, 5
  store i64 %7491, i64* %PC
  %7492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7489, i64* %7492, align 8, !tbaa !2428
  br label %block_400b26

block_401072:                                     ; preds = %block_40105e
  %7493 = sub i64 %8970, 1168
  %7494 = load i64, i64* %PC
  %7495 = add i64 %7494, 7
  store i64 %7495, i64* %PC
  store i64 %7493, i64* %RAX, align 8, !tbaa !2428
  %7496 = load i64, i64* %RBP
  %7497 = sub i64 %7496, 12
  %7498 = load i64, i64* %PC
  %7499 = add i64 %7498, 4
  store i64 %7499, i64* %PC
  %7500 = inttoptr i64 %7497 to i32*
  %7501 = load i32, i32* %7500
  %7502 = sext i32 %7501 to i64
  store i64 %7502, i64* %RCX, align 8, !tbaa !2428
  %7503 = load i64, i64* %RCX
  %7504 = load i64, i64* %PC
  %7505 = add i64 %7504, 4
  store i64 %7505, i64* %PC
  %7506 = shl i64 %7503, 5
  %7507 = icmp slt i64 %7506, 0
  %7508 = shl i64 %7506, 1
  store i64 %7508, i64* %RCX, align 8, !tbaa !2428
  %7509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7510 = zext i1 %7507 to i8
  store i8 %7510, i8* %7509, align 1, !tbaa !2451
  %7511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7512 = trunc i64 %7508 to i32
  %7513 = and i32 %7512, 254
  %7514 = call i32 @llvm.ctpop.i32(i32 %7513) #16
  %7515 = trunc i32 %7514 to i8
  %7516 = and i8 %7515, 1
  %7517 = xor i8 %7516, 1
  store i8 %7517, i8* %7511, align 1, !tbaa !2451
  %7518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7518, align 1, !tbaa !2451
  %7519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7520 = icmp eq i64 %7508, 0
  %7521 = zext i1 %7520 to i8
  store i8 %7521, i8* %7519, align 1, !tbaa !2451
  %7522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7523 = lshr i64 %7508, 63
  %7524 = trunc i64 %7523 to i8
  store i8 %7524, i8* %7522, align 1, !tbaa !2451
  %7525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7525, align 1, !tbaa !2451
  %7526 = load i64, i64* %RAX
  %7527 = load i64, i64* %PC
  %7528 = add i64 %7527, 3
  store i64 %7528, i64* %PC
  store i64 %7526, i64* %RDX, align 8, !tbaa !2428
  %7529 = load i64, i64* %RDX
  %7530 = load i64, i64* %RCX
  %7531 = load i64, i64* %PC
  %7532 = add i64 %7531, 3
  store i64 %7532, i64* %PC
  %7533 = add i64 %7530, %7529
  store i64 %7533, i64* %RDX, align 8, !tbaa !2428
  %7534 = icmp ult i64 %7533, %7529
  %7535 = icmp ult i64 %7533, %7530
  %7536 = or i1 %7534, %7535
  %7537 = zext i1 %7536 to i8
  %7538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7537, i8* %7538, align 1, !tbaa !2432
  %7539 = trunc i64 %7533 to i32
  %7540 = and i32 %7539, 255
  %7541 = call i32 @llvm.ctpop.i32(i32 %7540) #16
  %7542 = trunc i32 %7541 to i8
  %7543 = and i8 %7542, 1
  %7544 = xor i8 %7543, 1
  %7545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7544, i8* %7545, align 1, !tbaa !2446
  %7546 = xor i64 %7530, %7529
  %7547 = xor i64 %7546, %7533
  %7548 = lshr i64 %7547, 4
  %7549 = trunc i64 %7548 to i8
  %7550 = and i8 %7549, 1
  %7551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7550, i8* %7551, align 1, !tbaa !2447
  %7552 = icmp eq i64 %7533, 0
  %7553 = zext i1 %7552 to i8
  %7554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7553, i8* %7554, align 1, !tbaa !2448
  %7555 = lshr i64 %7533, 63
  %7556 = trunc i64 %7555 to i8
  %7557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7556, i8* %7557, align 1, !tbaa !2449
  %7558 = lshr i64 %7529, 63
  %7559 = lshr i64 %7530, 63
  %7560 = xor i64 %7555, %7558
  %7561 = xor i64 %7555, %7559
  %7562 = add nuw nsw i64 %7560, %7561
  %7563 = icmp eq i64 %7562, 2
  %7564 = zext i1 %7563 to i8
  %7565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7564, i8* %7565, align 1, !tbaa !2450
  %7566 = load i64, i64* %RBP
  %7567 = sub i64 %7566, 4
  %7568 = load i64, i64* %PC
  %7569 = add i64 %7568, 4
  store i64 %7569, i64* %PC
  %7570 = inttoptr i64 %7567 to i32*
  %7571 = load i32, i32* %7570
  %7572 = sext i32 %7571 to i64
  store i64 %7572, i64* %RCX, align 8, !tbaa !2428
  %7573 = load i64, i64* %RDX
  %7574 = load i64, i64* %RCX
  %7575 = mul i64 %7574, 4
  %7576 = add i64 %7575, %7573
  %7577 = load i64, i64* %PC
  %7578 = add i64 %7577, 4
  store i64 %7578, i64* %PC
  %7579 = inttoptr i64 %7576 to i32*
  %7580 = load i32, i32* %7579
  %7581 = sext i32 %7580 to i64
  store i64 %7581, i64* %RCX, align 8, !tbaa !2428
  %7582 = load i64, i64* %RCX
  %7583 = mul i64 %7582, 4
  %7584 = add i64 %7583, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %7585 = load i64, i64* %PC
  %7586 = add i64 %7585, 7
  store i64 %7586, i64* %PC
  %7587 = inttoptr i64 %7584 to i32*
  %7588 = load i32, i32* %7587
  %7589 = zext i32 %7588 to i64
  store i64 %7589, i64* %RSI, align 8, !tbaa !2428
  %7590 = load i64, i64* %RBP
  %7591 = sub i64 %7590, 12
  %7592 = load i64, i64* %PC
  %7593 = add i64 %7592, 4
  store i64 %7593, i64* %PC
  %7594 = inttoptr i64 %7591 to i32*
  %7595 = load i32, i32* %7594
  %7596 = sext i32 %7595 to i64
  store i64 %7596, i64* %RCX, align 8, !tbaa !2428
  %7597 = load i64, i64* %RCX
  %7598 = load i64, i64* %PC
  %7599 = add i64 %7598, 4
  store i64 %7599, i64* %PC
  %7600 = shl i64 %7597, 5
  %7601 = icmp slt i64 %7600, 0
  %7602 = shl i64 %7600, 1
  store i64 %7602, i64* %RCX, align 8, !tbaa !2428
  %7603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7604 = zext i1 %7601 to i8
  store i8 %7604, i8* %7603, align 1, !tbaa !2451
  %7605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7606 = trunc i64 %7602 to i32
  %7607 = and i32 %7606, 254
  %7608 = call i32 @llvm.ctpop.i32(i32 %7607) #16
  %7609 = trunc i32 %7608 to i8
  %7610 = and i8 %7609, 1
  %7611 = xor i8 %7610, 1
  store i8 %7611, i8* %7605, align 1, !tbaa !2451
  %7612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7612, align 1, !tbaa !2451
  %7613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7614 = icmp eq i64 %7602, 0
  %7615 = zext i1 %7614 to i8
  store i8 %7615, i8* %7613, align 1, !tbaa !2451
  %7616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7617 = lshr i64 %7602, 63
  %7618 = trunc i64 %7617 to i8
  store i8 %7618, i8* %7616, align 1, !tbaa !2451
  %7619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7619, align 1, !tbaa !2451
  %7620 = load i64, i64* %RAX
  %7621 = load i64, i64* %RCX
  %7622 = load i64, i64* %PC
  %7623 = add i64 %7622, 3
  store i64 %7623, i64* %PC
  %7624 = add i64 %7621, %7620
  store i64 %7624, i64* %RAX, align 8, !tbaa !2428
  %7625 = icmp ult i64 %7624, %7620
  %7626 = icmp ult i64 %7624, %7621
  %7627 = or i1 %7625, %7626
  %7628 = zext i1 %7627 to i8
  %7629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7628, i8* %7629, align 1, !tbaa !2432
  %7630 = trunc i64 %7624 to i32
  %7631 = and i32 %7630, 255
  %7632 = call i32 @llvm.ctpop.i32(i32 %7631) #16
  %7633 = trunc i32 %7632 to i8
  %7634 = and i8 %7633, 1
  %7635 = xor i8 %7634, 1
  %7636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7635, i8* %7636, align 1, !tbaa !2446
  %7637 = xor i64 %7621, %7620
  %7638 = xor i64 %7637, %7624
  %7639 = lshr i64 %7638, 4
  %7640 = trunc i64 %7639 to i8
  %7641 = and i8 %7640, 1
  %7642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7641, i8* %7642, align 1, !tbaa !2447
  %7643 = icmp eq i64 %7624, 0
  %7644 = zext i1 %7643 to i8
  %7645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7644, i8* %7645, align 1, !tbaa !2448
  %7646 = lshr i64 %7624, 63
  %7647 = trunc i64 %7646 to i8
  %7648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7647, i8* %7648, align 1, !tbaa !2449
  %7649 = lshr i64 %7620, 63
  %7650 = lshr i64 %7621, 63
  %7651 = xor i64 %7646, %7649
  %7652 = xor i64 %7646, %7650
  %7653 = add nuw nsw i64 %7651, %7652
  %7654 = icmp eq i64 %7653, 2
  %7655 = zext i1 %7654 to i8
  %7656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7655, i8* %7656, align 1, !tbaa !2450
  %7657 = load i64, i64* %RBP
  %7658 = sub i64 %7657, 4
  %7659 = load i64, i64* %PC
  %7660 = add i64 %7659, 4
  store i64 %7660, i64* %PC
  %7661 = inttoptr i64 %7658 to i32*
  %7662 = load i32, i32* %7661
  %7663 = sext i32 %7662 to i64
  store i64 %7663, i64* %RCX, align 8, !tbaa !2428
  %7664 = load i64, i64* %RAX
  %7665 = load i64, i64* %RCX
  %7666 = mul i64 %7665, 4
  %7667 = add i64 %7666, %7664
  %7668 = load i32, i32* %ESI
  %7669 = zext i32 %7668 to i64
  %7670 = load i64, i64* %PC
  %7671 = add i64 %7670, 3
  store i64 %7671, i64* %PC
  %7672 = inttoptr i64 %7667 to i32*
  store i32 %7668, i32* %7672
  %7673 = load i64, i64* %RBP
  %7674 = sub i64 %7673, 4
  %7675 = load i64, i64* %PC
  %7676 = add i64 %7675, 3
  store i64 %7676, i64* %PC
  %7677 = inttoptr i64 %7674 to i32*
  %7678 = load i32, i32* %7677
  %7679 = zext i32 %7678 to i64
  store i64 %7679, i64* %RAX, align 8, !tbaa !2428
  %7680 = load i64, i64* %RAX
  %7681 = load i64, i64* %PC
  %7682 = add i64 %7681, 3
  store i64 %7682, i64* %PC
  %7683 = trunc i64 %7680 to i32
  %7684 = add i32 1, %7683
  %7685 = zext i32 %7684 to i64
  store i64 %7685, i64* %RAX, align 8, !tbaa !2428
  %7686 = icmp ult i32 %7684, %7683
  %7687 = icmp ult i32 %7684, 1
  %7688 = or i1 %7686, %7687
  %7689 = zext i1 %7688 to i8
  %7690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7689, i8* %7690, align 1, !tbaa !2432
  %7691 = and i32 %7684, 255
  %7692 = call i32 @llvm.ctpop.i32(i32 %7691) #16
  %7693 = trunc i32 %7692 to i8
  %7694 = and i8 %7693, 1
  %7695 = xor i8 %7694, 1
  %7696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7695, i8* %7696, align 1, !tbaa !2446
  %7697 = xor i64 1, %7680
  %7698 = trunc i64 %7697 to i32
  %7699 = xor i32 %7698, %7684
  %7700 = lshr i32 %7699, 4
  %7701 = trunc i32 %7700 to i8
  %7702 = and i8 %7701, 1
  %7703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7702, i8* %7703, align 1, !tbaa !2447
  %7704 = icmp eq i32 %7684, 0
  %7705 = zext i1 %7704 to i8
  %7706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7705, i8* %7706, align 1, !tbaa !2448
  %7707 = lshr i32 %7684, 31
  %7708 = trunc i32 %7707 to i8
  %7709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7708, i8* %7709, align 1, !tbaa !2449
  %7710 = lshr i32 %7683, 31
  %7711 = xor i32 %7707, %7710
  %7712 = add nuw nsw i32 %7711, %7707
  %7713 = icmp eq i32 %7712, 2
  %7714 = zext i1 %7713 to i8
  %7715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7714, i8* %7715, align 1, !tbaa !2450
  %7716 = load i64, i64* %RBP
  %7717 = sub i64 %7716, 4
  %7718 = load i32, i32* %EAX
  %7719 = zext i32 %7718 to i64
  %7720 = load i64, i64* %PC
  %7721 = add i64 %7720, 3
  store i64 %7721, i64* %PC
  %7722 = inttoptr i64 %7717 to i32*
  store i32 %7718, i32* %7722
  %7723 = load i64, i64* %PC
  %7724 = sub i64 %7723, 83
  %7725 = load i64, i64* %PC
  %7726 = add i64 %7725, 5
  store i64 %7726, i64* %PC
  %7727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7724, i64* %7727, align 8, !tbaa !2428
  br label %block_40105e

block_401267:                                     ; preds = %block_401247
  %7728 = load i64, i64* %RBP
  %7729 = sub i64 %7728, 1168
  %7730 = load i64, i64* %PC
  %7731 = add i64 %7730, 7
  store i64 %7731, i64* %PC
  store i64 %7729, i64* %RAX, align 8, !tbaa !2428
  %7732 = load i64, i64* %RBP
  %7733 = sub i64 %7732, 4
  %7734 = load i64, i64* %PC
  %7735 = add i64 %7734, 4
  store i64 %7735, i64* %PC
  %7736 = inttoptr i64 %7733 to i32*
  %7737 = load i32, i32* %7736
  %7738 = sext i32 %7737 to i64
  store i64 %7738, i64* %RCX, align 8, !tbaa !2428
  %7739 = load i64, i64* %RBP
  %7740 = load i64, i64* %RCX
  %7741 = mul i64 %7740, 4
  %7742 = add i64 %7739, -1488
  %7743 = add i64 %7742, %7741
  %7744 = load i64, i64* %PC
  %7745 = add i64 %7744, 8
  store i64 %7745, i64* %PC
  %7746 = inttoptr i64 %7743 to i32*
  %7747 = load i32, i32* %7746
  %7748 = sext i32 %7747 to i64
  store i64 %7748, i64* %RCX, align 8, !tbaa !2428
  %7749 = load i64, i64* %RCX
  %7750 = mul i64 %7749, 4
  %7751 = add i64 %7750, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %7752 = load i64, i64* %PC
  %7753 = add i64 %7752, 7
  store i64 %7753, i64* %PC
  %7754 = inttoptr i64 %7751 to i32*
  %7755 = load i32, i32* %7754
  %7756 = zext i32 %7755 to i64
  store i64 %7756, i64* %RDX, align 8, !tbaa !2428
  %7757 = load i64, i64* %RBP
  %7758 = sub i64 %7757, 12
  %7759 = load i64, i64* %PC
  %7760 = add i64 %7759, 4
  store i64 %7760, i64* %PC
  %7761 = inttoptr i64 %7758 to i32*
  %7762 = load i32, i32* %7761
  %7763 = sext i32 %7762 to i64
  store i64 %7763, i64* %RCX, align 8, !tbaa !2428
  %7764 = load i64, i64* %RCX
  %7765 = load i64, i64* %PC
  %7766 = add i64 %7765, 4
  store i64 %7766, i64* %PC
  %7767 = shl i64 %7764, 5
  %7768 = icmp slt i64 %7767, 0
  %7769 = shl i64 %7767, 1
  store i64 %7769, i64* %RCX, align 8, !tbaa !2428
  %7770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7771 = zext i1 %7768 to i8
  store i8 %7771, i8* %7770, align 1, !tbaa !2451
  %7772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7773 = trunc i64 %7769 to i32
  %7774 = and i32 %7773, 254
  %7775 = call i32 @llvm.ctpop.i32(i32 %7774) #16
  %7776 = trunc i32 %7775 to i8
  %7777 = and i8 %7776, 1
  %7778 = xor i8 %7777, 1
  store i8 %7778, i8* %7772, align 1, !tbaa !2451
  %7779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7779, align 1, !tbaa !2451
  %7780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7781 = icmp eq i64 %7769, 0
  %7782 = zext i1 %7781 to i8
  store i8 %7782, i8* %7780, align 1, !tbaa !2451
  %7783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7784 = lshr i64 %7769, 63
  %7785 = trunc i64 %7784 to i8
  store i8 %7785, i8* %7783, align 1, !tbaa !2451
  %7786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7786, align 1, !tbaa !2451
  %7787 = load i64, i64* %RAX
  %7788 = load i64, i64* %RCX
  %7789 = load i64, i64* %PC
  %7790 = add i64 %7789, 3
  store i64 %7790, i64* %PC
  %7791 = add i64 %7788, %7787
  store i64 %7791, i64* %RAX, align 8, !tbaa !2428
  %7792 = icmp ult i64 %7791, %7787
  %7793 = icmp ult i64 %7791, %7788
  %7794 = or i1 %7792, %7793
  %7795 = zext i1 %7794 to i8
  %7796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7795, i8* %7796, align 1, !tbaa !2432
  %7797 = trunc i64 %7791 to i32
  %7798 = and i32 %7797, 255
  %7799 = call i32 @llvm.ctpop.i32(i32 %7798) #16
  %7800 = trunc i32 %7799 to i8
  %7801 = and i8 %7800, 1
  %7802 = xor i8 %7801, 1
  %7803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7802, i8* %7803, align 1, !tbaa !2446
  %7804 = xor i64 %7788, %7787
  %7805 = xor i64 %7804, %7791
  %7806 = lshr i64 %7805, 4
  %7807 = trunc i64 %7806 to i8
  %7808 = and i8 %7807, 1
  %7809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7808, i8* %7809, align 1, !tbaa !2447
  %7810 = icmp eq i64 %7791, 0
  %7811 = zext i1 %7810 to i8
  %7812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7811, i8* %7812, align 1, !tbaa !2448
  %7813 = lshr i64 %7791, 63
  %7814 = trunc i64 %7813 to i8
  %7815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7814, i8* %7815, align 1, !tbaa !2449
  %7816 = lshr i64 %7787, 63
  %7817 = lshr i64 %7788, 63
  %7818 = xor i64 %7813, %7816
  %7819 = xor i64 %7813, %7817
  %7820 = add nuw nsw i64 %7818, %7819
  %7821 = icmp eq i64 %7820, 2
  %7822 = zext i1 %7821 to i8
  %7823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7822, i8* %7823, align 1, !tbaa !2450
  %7824 = load i64, i64* %RBP
  %7825 = sub i64 %7824, 4
  %7826 = load i64, i64* %PC
  %7827 = add i64 %7826, 4
  store i64 %7827, i64* %PC
  %7828 = inttoptr i64 %7825 to i32*
  %7829 = load i32, i32* %7828
  %7830 = sext i32 %7829 to i64
  store i64 %7830, i64* %RCX, align 8, !tbaa !2428
  %7831 = load i64, i64* %RAX
  %7832 = load i64, i64* %RCX
  %7833 = mul i64 %7832, 4
  %7834 = add i64 %7833, %7831
  %7835 = load i64, i64* %PC
  %7836 = add i64 %7835, 4
  store i64 %7836, i64* %PC
  %7837 = inttoptr i64 %7834 to i32*
  %7838 = load i32, i32* %7837
  %7839 = sext i32 %7838 to i64
  store i64 %7839, i64* %RAX, align 8, !tbaa !2428
  %7840 = load i64, i64* %RDX
  %7841 = load i64, i64* %RAX
  %7842 = mul i64 %7841, 4
  %7843 = add i64 %7842, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %7844 = load i64, i64* %PC
  %7845 = add i64 %7844, 7
  store i64 %7845, i64* %PC
  %7846 = trunc i64 %7840 to i32
  %7847 = inttoptr i64 %7843 to i32*
  %7848 = load i32, i32* %7847
  %7849 = xor i32 %7848, %7846
  %7850 = zext i32 %7849 to i64
  store i64 %7850, i64* %RDX, align 8, !tbaa !2428
  %7851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7851, align 1, !tbaa !2432
  %7852 = and i32 %7849, 255
  %7853 = call i32 @llvm.ctpop.i32(i32 %7852) #16
  %7854 = trunc i32 %7853 to i8
  %7855 = and i8 %7854, 1
  %7856 = xor i8 %7855, 1
  %7857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7856, i8* %7857, align 1, !tbaa !2446
  %7858 = icmp eq i32 %7849, 0
  %7859 = zext i1 %7858 to i8
  %7860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7859, i8* %7860, align 1, !tbaa !2448
  %7861 = lshr i32 %7849, 31
  %7862 = trunc i32 %7861 to i8
  %7863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7862, i8* %7863, align 1, !tbaa !2449
  %7864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7864, align 1, !tbaa !2450
  %7865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7865, align 1, !tbaa !2447
  %7866 = load i64, i64* %RBP
  %7867 = sub i64 %7866, 4
  %7868 = load i64, i64* %PC
  %7869 = add i64 %7868, 4
  store i64 %7869, i64* %PC
  %7870 = inttoptr i64 %7867 to i32*
  %7871 = load i32, i32* %7870
  %7872 = sext i32 %7871 to i64
  store i64 %7872, i64* %RAX, align 8, !tbaa !2428
  %7873 = load i64, i64* %RBP
  %7874 = load i64, i64* %RAX
  %7875 = mul i64 %7874, 4
  %7876 = add i64 %7873, -1616
  %7877 = add i64 %7876, %7875
  %7878 = load i32, i32* %EDX
  %7879 = zext i32 %7878 to i64
  %7880 = load i64, i64* %PC
  %7881 = add i64 %7880, 7
  store i64 %7881, i64* %PC
  %7882 = inttoptr i64 %7877 to i32*
  store i32 %7878, i32* %7882
  %7883 = load i64, i64* %PC
  %7884 = add i64 %7883, 214
  %7885 = load i64, i64* %PC
  %7886 = add i64 %7885, 5
  store i64 %7886, i64* %PC
  %7887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7884, i64* %7887, align 8, !tbaa !2428
  br label %block_40137c

block_400e6a:                                     ; preds = %block_400e65, %block_400bad
  %MEMORY.31 = phi %struct.Memory* [ %MEMORY.11, %block_400e65 ], [ %MEMORY.36, %block_400bad ]
  %7888 = load i64, i64* %RBP
  %7889 = sub i64 %7888, 12
  %7890 = load i64, i64* %PC
  %7891 = add i64 %7890, 3
  store i64 %7891, i64* %PC
  %7892 = inttoptr i64 %7889 to i32*
  %7893 = load i32, i32* %7892
  %7894 = zext i32 %7893 to i64
  store i64 %7894, i64* %RAX, align 8, !tbaa !2428
  %7895 = load i64, i64* %RBP
  %7896 = sub i64 %7895, 12
  %7897 = load i64, i64* %PC
  %7898 = add i64 %7897, 3
  store i64 %7898, i64* %PC
  %7899 = inttoptr i64 %7896 to i32*
  %7900 = load i32, i32* %7899
  %7901 = zext i32 %7900 to i64
  store i64 %7901, i64* %RCX, align 8, !tbaa !2428
  %7902 = load i64, i64* %RCX
  %7903 = load i64, i64* %PC
  %7904 = add i64 %7903, 3
  store i64 %7904, i64* %PC
  %7905 = trunc i64 %7902 to i32
  %7906 = add i32 1, %7905
  %7907 = zext i32 %7906 to i64
  store i64 %7907, i64* %RCX, align 8, !tbaa !2428
  %7908 = icmp ult i32 %7906, %7905
  %7909 = icmp ult i32 %7906, 1
  %7910 = or i1 %7908, %7909
  %7911 = zext i1 %7910 to i8
  %7912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7911, i8* %7912, align 1, !tbaa !2432
  %7913 = and i32 %7906, 255
  %7914 = call i32 @llvm.ctpop.i32(i32 %7913) #16
  %7915 = trunc i32 %7914 to i8
  %7916 = and i8 %7915, 1
  %7917 = xor i8 %7916, 1
  %7918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7917, i8* %7918, align 1, !tbaa !2446
  %7919 = xor i64 1, %7902
  %7920 = trunc i64 %7919 to i32
  %7921 = xor i32 %7920, %7906
  %7922 = lshr i32 %7921, 4
  %7923 = trunc i32 %7922 to i8
  %7924 = and i8 %7923, 1
  %7925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7924, i8* %7925, align 1, !tbaa !2447
  %7926 = icmp eq i32 %7906, 0
  %7927 = zext i1 %7926 to i8
  %7928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7927, i8* %7928, align 1, !tbaa !2448
  %7929 = lshr i32 %7906, 31
  %7930 = trunc i32 %7929 to i8
  %7931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7930, i8* %7931, align 1, !tbaa !2449
  %7932 = lshr i32 %7905, 31
  %7933 = xor i32 %7929, %7932
  %7934 = add nuw nsw i32 %7933, %7929
  %7935 = icmp eq i32 %7934, 2
  %7936 = zext i1 %7935 to i8
  %7937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7936, i8* %7937, align 1, !tbaa !2450
  %7938 = load i32, i32* %ECX
  %7939 = zext i32 %7938 to i64
  %7940 = load i64, i64* %PC
  %7941 = add i64 %7940, 3
  store i64 %7941, i64* %PC
  %7942 = shl i64 %7939, 32
  %7943 = ashr exact i64 %7942, 32
  store i64 %7943, i64* %RDX, align 8, !tbaa !2428
  %7944 = load i64, i64* %RAX
  %7945 = load i64, i64* %RBP
  %7946 = load i64, i64* %RDX
  %7947 = mul i64 %7946, 4
  %7948 = add i64 %7945, -1328
  %7949 = add i64 %7948, %7947
  %7950 = load i64, i64* %PC
  %7951 = add i64 %7950, 7
  store i64 %7951, i64* %PC
  %7952 = trunc i64 %7944 to i32
  %7953 = inttoptr i64 %7949 to i32*
  %7954 = load i32, i32* %7953
  %7955 = sub i32 %7952, %7954
  %7956 = zext i32 %7955 to i64
  store i64 %7956, i64* %RAX, align 8, !tbaa !2428
  %7957 = icmp ult i32 %7952, %7954
  %7958 = zext i1 %7957 to i8
  %7959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7958, i8* %7959, align 1, !tbaa !2432
  %7960 = and i32 %7955, 255
  %7961 = call i32 @llvm.ctpop.i32(i32 %7960) #16
  %7962 = trunc i32 %7961 to i8
  %7963 = and i8 %7962, 1
  %7964 = xor i8 %7963, 1
  %7965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7964, i8* %7965, align 1, !tbaa !2446
  %7966 = xor i32 %7954, %7952
  %7967 = xor i32 %7966, %7955
  %7968 = lshr i32 %7967, 4
  %7969 = trunc i32 %7968 to i8
  %7970 = and i8 %7969, 1
  %7971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7970, i8* %7971, align 1, !tbaa !2447
  %7972 = icmp eq i32 %7955, 0
  %7973 = zext i1 %7972 to i8
  %7974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7973, i8* %7974, align 1, !tbaa !2448
  %7975 = lshr i32 %7955, 31
  %7976 = trunc i32 %7975 to i8
  %7977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7976, i8* %7977, align 1, !tbaa !2449
  %7978 = lshr i32 %7952, 31
  %7979 = lshr i32 %7954, 31
  %7980 = xor i32 %7979, %7978
  %7981 = xor i32 %7975, %7978
  %7982 = add nuw nsw i32 %7981, %7980
  %7983 = icmp eq i32 %7982, 2
  %7984 = zext i1 %7983 to i8
  %7985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7984, i8* %7985, align 1, !tbaa !2450
  %7986 = load i64, i64* %RBP
  %7987 = sub i64 %7986, 12
  %7988 = load i64, i64* %PC
  %7989 = add i64 %7988, 3
  store i64 %7989, i64* %PC
  %7990 = inttoptr i64 %7987 to i32*
  %7991 = load i32, i32* %7990
  %7992 = zext i32 %7991 to i64
  store i64 %7992, i64* %RCX, align 8, !tbaa !2428
  %7993 = load i64, i64* %RCX
  %7994 = load i64, i64* %PC
  %7995 = add i64 %7994, 3
  store i64 %7995, i64* %PC
  %7996 = trunc i64 %7993 to i32
  %7997 = add i32 1, %7996
  %7998 = zext i32 %7997 to i64
  store i64 %7998, i64* %RCX, align 8, !tbaa !2428
  %7999 = icmp ult i32 %7997, %7996
  %8000 = icmp ult i32 %7997, 1
  %8001 = or i1 %7999, %8000
  %8002 = zext i1 %8001 to i8
  %8003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8002, i8* %8003, align 1, !tbaa !2432
  %8004 = and i32 %7997, 255
  %8005 = call i32 @llvm.ctpop.i32(i32 %8004) #16
  %8006 = trunc i32 %8005 to i8
  %8007 = and i8 %8006, 1
  %8008 = xor i8 %8007, 1
  %8009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8008, i8* %8009, align 1, !tbaa !2446
  %8010 = xor i64 1, %7993
  %8011 = trunc i64 %8010 to i32
  %8012 = xor i32 %8011, %7997
  %8013 = lshr i32 %8012, 4
  %8014 = trunc i32 %8013 to i8
  %8015 = and i8 %8014, 1
  %8016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8015, i8* %8016, align 1, !tbaa !2447
  %8017 = icmp eq i32 %7997, 0
  %8018 = zext i1 %8017 to i8
  %8019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8018, i8* %8019, align 1, !tbaa !2448
  %8020 = lshr i32 %7997, 31
  %8021 = trunc i32 %8020 to i8
  %8022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8021, i8* %8022, align 1, !tbaa !2449
  %8023 = lshr i32 %7996, 31
  %8024 = xor i32 %8020, %8023
  %8025 = add nuw nsw i32 %8024, %8020
  %8026 = icmp eq i32 %8025, 2
  %8027 = zext i1 %8026 to i8
  %8028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8027, i8* %8028, align 1, !tbaa !2450
  %8029 = load i32, i32* %ECX
  %8030 = zext i32 %8029 to i64
  %8031 = load i64, i64* %PC
  %8032 = add i64 %8031, 3
  store i64 %8032, i64* %PC
  %8033 = shl i64 %8030, 32
  %8034 = ashr exact i64 %8033, 32
  store i64 %8034, i64* %RDX, align 8, !tbaa !2428
  %8035 = load i64, i64* %RBP
  %8036 = load i64, i64* %RDX
  %8037 = mul i64 %8036, 4
  %8038 = add i64 %8035, -1408
  %8039 = add i64 %8038, %8037
  %8040 = load i32, i32* %EAX
  %8041 = zext i32 %8040 to i64
  %8042 = load i64, i64* %PC
  %8043 = add i64 %8042, 7
  store i64 %8043, i64* %PC
  %8044 = inttoptr i64 %8039 to i32*
  store i32 %8040, i32* %8044
  %8045 = load i64, i64* %RBP
  %8046 = sub i64 %8045, 12
  %8047 = load i64, i64* %PC
  %8048 = add i64 %8047, 4
  store i64 %8048, i64* %PC
  %8049 = inttoptr i64 %8046 to i32*
  %8050 = load i32, i32* %8049
  %8051 = sub i32 %8050, 16
  %8052 = icmp ult i32 %8050, 16
  %8053 = zext i1 %8052 to i8
  %8054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8053, i8* %8054, align 1, !tbaa !2432
  %8055 = and i32 %8051, 255
  %8056 = call i32 @llvm.ctpop.i32(i32 %8055) #16
  %8057 = trunc i32 %8056 to i8
  %8058 = and i8 %8057, 1
  %8059 = xor i8 %8058, 1
  %8060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8059, i8* %8060, align 1, !tbaa !2446
  %8061 = xor i32 %8050, 16
  %8062 = xor i32 %8061, %8051
  %8063 = lshr i32 %8062, 4
  %8064 = trunc i32 %8063 to i8
  %8065 = and i8 %8064, 1
  %8066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8065, i8* %8066, align 1, !tbaa !2447
  %8067 = icmp eq i32 %8051, 0
  %8068 = zext i1 %8067 to i8
  %8069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8068, i8* %8069, align 1, !tbaa !2448
  %8070 = lshr i32 %8051, 31
  %8071 = trunc i32 %8070 to i8
  %8072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8071, i8* %8072, align 1, !tbaa !2449
  %8073 = lshr i32 %8050, 31
  %8074 = xor i32 %8070, %8073
  %8075 = add nuw nsw i32 %8074, %8073
  %8076 = icmp eq i32 %8075, 2
  %8077 = zext i1 %8076 to i8
  %8078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8077, i8* %8078, align 1, !tbaa !2450
  %8079 = load i64, i64* %PC
  %8080 = add i64 %8079, 362
  %8081 = load i64, i64* %PC
  %8082 = add i64 %8081, 6
  %8083 = load i64, i64* %PC
  %8084 = add i64 %8083, 6
  store i64 %8084, i64* %PC
  %8085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8086 = load i8, i8* %8085, align 1, !tbaa !2449
  %8087 = icmp ne i8 %8086, 0
  %8088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8089 = load i8, i8* %8088, align 1, !tbaa !2450
  %8090 = icmp ne i8 %8089, 0
  %8091 = xor i1 %8087, %8090
  %8092 = xor i1 %8091, true
  %8093 = zext i1 %8092 to i8
  store i8 %8093, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8095 = select i1 %8091, i64 %8082, i64 %8080
  store i64 %8095, i64* %8094, align 8, !tbaa !2428
  %8096 = load i8, i8* %BRANCH_TAKEN
  %8097 = icmp eq i8 %8096, 1
  br i1 %8097, label %block_400ffb, label %block_400e97

block_40171a:                                     ; preds = %block_401713, %block_40176b
  %MEMORY.32 = phi %struct.Memory* [ %MEMORY.25, %block_401713 ], [ %MEMORY.4, %block_40176b ]
  %8098 = load i64, i64* %RBP
  %8099 = sub i64 %8098, 4
  %8100 = load i64, i64* %PC
  %8101 = add i64 %8100, 7
  store i64 %8101, i64* %PC
  %8102 = inttoptr i64 %8099 to i32*
  %8103 = load i32, i32* %8102
  %8104 = sub i32 %8103, 255
  %8105 = icmp ult i32 %8103, 255
  %8106 = zext i1 %8105 to i8
  %8107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8106, i8* %8107, align 1, !tbaa !2432
  %8108 = and i32 %8104, 255
  %8109 = call i32 @llvm.ctpop.i32(i32 %8108) #16
  %8110 = trunc i32 %8109 to i8
  %8111 = and i8 %8110, 1
  %8112 = xor i8 %8111, 1
  %8113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8112, i8* %8113, align 1, !tbaa !2446
  %8114 = xor i32 %8103, 255
  %8115 = xor i32 %8114, %8104
  %8116 = lshr i32 %8115, 4
  %8117 = trunc i32 %8116 to i8
  %8118 = and i8 %8117, 1
  %8119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8118, i8* %8119, align 1, !tbaa !2447
  %8120 = icmp eq i32 %8104, 0
  %8121 = zext i1 %8120 to i8
  %8122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8121, i8* %8122, align 1, !tbaa !2448
  %8123 = lshr i32 %8104, 31
  %8124 = trunc i32 %8123 to i8
  %8125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8124, i8* %8125, align 1, !tbaa !2449
  %8126 = lshr i32 %8103, 31
  %8127 = xor i32 %8123, %8126
  %8128 = add nuw nsw i32 %8127, %8126
  %8129 = icmp eq i32 %8128, 2
  %8130 = zext i1 %8129 to i8
  %8131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8130, i8* %8131, align 1, !tbaa !2450
  %8132 = load i64, i64* %PC
  %8133 = add i64 %8132, 93
  %8134 = load i64, i64* %PC
  %8135 = add i64 %8134, 6
  %8136 = load i64, i64* %PC
  %8137 = add i64 %8136, 6
  store i64 %8137, i64* %PC
  %8138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8139 = load i8, i8* %8138, align 1, !tbaa !2449
  %8140 = icmp ne i8 %8139, 0
  %8141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8142 = load i8, i8* %8141, align 1, !tbaa !2450
  %8143 = icmp ne i8 %8142, 0
  %8144 = xor i1 %8140, %8143
  %8145 = xor i1 %8144, true
  %8146 = zext i1 %8145 to i8
  store i8 %8146, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8148 = select i1 %8144, i64 %8135, i64 %8133
  store i64 %8148, i64* %8147, align 8, !tbaa !2428
  %8149 = load i8, i8* %BRANCH_TAKEN
  %8150 = icmp eq i8 %8149, 1
  br i1 %8150, label %block_40177e, label %block_401727

block_400caa:                                     ; preds = %block_400c66
  %8151 = sub i64 %9218, 16
  %8152 = load i64, i64* %PC
  %8153 = add i64 %8152, 4
  store i64 %8153, i64* %PC
  %8154 = inttoptr i64 %8151 to i32*
  %8155 = load i32, i32* %8154
  %8156 = sext i32 %8155 to i64
  store i64 %8156, i64* %RAX, align 8, !tbaa !2428
  %8157 = load i64, i64* %RBP
  %8158 = load i64, i64* %RAX
  %8159 = mul i64 %8158, 4
  %8160 = add i64 %8157, -1328
  %8161 = add i64 %8160, %8159
  %8162 = load i64, i64* %PC
  %8163 = add i64 %8162, 7
  store i64 %8163, i64* %PC
  %8164 = inttoptr i64 %8161 to i32*
  %8165 = load i32, i32* %8164
  %8166 = zext i32 %8165 to i64
  store i64 %8166, i64* %RCX, align 8, !tbaa !2428
  %8167 = load i64, i64* %RCX
  %8168 = load i64, i64* %RBP
  %8169 = sub i64 %8168, 12
  %8170 = load i64, i64* %PC
  %8171 = add i64 %8170, 3
  store i64 %8171, i64* %PC
  %8172 = trunc i64 %8167 to i32
  %8173 = inttoptr i64 %8169 to i32*
  %8174 = load i32, i32* %8173
  %8175 = add i32 %8174, %8172
  %8176 = zext i32 %8175 to i64
  store i64 %8176, i64* %RCX, align 8, !tbaa !2428
  %8177 = icmp ult i32 %8175, %8172
  %8178 = icmp ult i32 %8175, %8174
  %8179 = or i1 %8177, %8178
  %8180 = zext i1 %8179 to i8
  %8181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8180, i8* %8181, align 1, !tbaa !2432
  %8182 = and i32 %8175, 255
  %8183 = call i32 @llvm.ctpop.i32(i32 %8182) #16
  %8184 = trunc i32 %8183 to i8
  %8185 = and i8 %8184, 1
  %8186 = xor i8 %8185, 1
  %8187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8186, i8* %8187, align 1, !tbaa !2446
  %8188 = xor i32 %8174, %8172
  %8189 = xor i32 %8188, %8175
  %8190 = lshr i32 %8189, 4
  %8191 = trunc i32 %8190 to i8
  %8192 = and i8 %8191, 1
  %8193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8192, i8* %8193, align 1, !tbaa !2447
  %8194 = icmp eq i32 %8175, 0
  %8195 = zext i1 %8194 to i8
  %8196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8195, i8* %8196, align 1, !tbaa !2448
  %8197 = lshr i32 %8175, 31
  %8198 = trunc i32 %8197 to i8
  %8199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8198, i8* %8199, align 1, !tbaa !2449
  %8200 = lshr i32 %8172, 31
  %8201 = lshr i32 %8174, 31
  %8202 = xor i32 %8197, %8200
  %8203 = xor i32 %8197, %8201
  %8204 = add nuw nsw i32 %8202, %8203
  %8205 = icmp eq i32 %8204, 2
  %8206 = zext i1 %8205 to i8
  %8207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8206, i8* %8207, align 1, !tbaa !2450
  %8208 = load i64, i64* %RCX
  %8209 = load i64, i64* %RBP
  %8210 = sub i64 %8209, 16
  %8211 = load i64, i64* %PC
  %8212 = add i64 %8211, 3
  store i64 %8212, i64* %PC
  %8213 = trunc i64 %8208 to i32
  %8214 = inttoptr i64 %8210 to i32*
  %8215 = load i32, i32* %8214
  %8216 = sub i32 %8213, %8215
  %8217 = zext i32 %8216 to i64
  store i64 %8217, i64* %RCX, align 8, !tbaa !2428
  %8218 = icmp ult i32 %8213, %8215
  %8219 = zext i1 %8218 to i8
  %8220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8219, i8* %8220, align 1, !tbaa !2432
  %8221 = and i32 %8216, 255
  %8222 = call i32 @llvm.ctpop.i32(i32 %8221) #16
  %8223 = trunc i32 %8222 to i8
  %8224 = and i8 %8223, 1
  %8225 = xor i8 %8224, 1
  %8226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8225, i8* %8226, align 1, !tbaa !2446
  %8227 = xor i32 %8215, %8213
  %8228 = xor i32 %8227, %8216
  %8229 = lshr i32 %8228, 4
  %8230 = trunc i32 %8229 to i8
  %8231 = and i8 %8230, 1
  %8232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8231, i8* %8232, align 1, !tbaa !2447
  %8233 = icmp eq i32 %8216, 0
  %8234 = zext i1 %8233 to i8
  %8235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8234, i8* %8235, align 1, !tbaa !2448
  %8236 = lshr i32 %8216, 31
  %8237 = trunc i32 %8236 to i8
  %8238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8237, i8* %8238, align 1, !tbaa !2449
  %8239 = lshr i32 %8213, 31
  %8240 = lshr i32 %8215, 31
  %8241 = xor i32 %8240, %8239
  %8242 = xor i32 %8236, %8239
  %8243 = add nuw nsw i32 %8242, %8241
  %8244 = icmp eq i32 %8243, 2
  %8245 = zext i1 %8244 to i8
  %8246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8245, i8* %8246, align 1, !tbaa !2450
  %8247 = load i64, i64* %RBP
  %8248 = sub i64 %8247, 12
  %8249 = load i64, i64* %PC
  %8250 = add i64 %8249, 3
  store i64 %8250, i64* %PC
  %8251 = inttoptr i64 %8248 to i32*
  %8252 = load i32, i32* %8251
  %8253 = zext i32 %8252 to i64
  store i64 %8253, i64* %RDX, align 8, !tbaa !2428
  %8254 = load i64, i64* %RDX
  %8255 = load i64, i64* %PC
  %8256 = add i64 %8255, 3
  store i64 %8256, i64* %PC
  %8257 = trunc i64 %8254 to i32
  %8258 = add i32 1, %8257
  %8259 = zext i32 %8258 to i64
  store i64 %8259, i64* %RDX, align 8, !tbaa !2428
  %8260 = icmp ult i32 %8258, %8257
  %8261 = icmp ult i32 %8258, 1
  %8262 = or i1 %8260, %8261
  %8263 = zext i1 %8262 to i8
  %8264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8263, i8* %8264, align 1, !tbaa !2432
  %8265 = and i32 %8258, 255
  %8266 = call i32 @llvm.ctpop.i32(i32 %8265) #16
  %8267 = trunc i32 %8266 to i8
  %8268 = and i8 %8267, 1
  %8269 = xor i8 %8268, 1
  %8270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8269, i8* %8270, align 1, !tbaa !2446
  %8271 = xor i64 1, %8254
  %8272 = trunc i64 %8271 to i32
  %8273 = xor i32 %8272, %8258
  %8274 = lshr i32 %8273, 4
  %8275 = trunc i32 %8274 to i8
  %8276 = and i8 %8275, 1
  %8277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8276, i8* %8277, align 1, !tbaa !2447
  %8278 = icmp eq i32 %8258, 0
  %8279 = zext i1 %8278 to i8
  %8280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8279, i8* %8280, align 1, !tbaa !2448
  %8281 = lshr i32 %8258, 31
  %8282 = trunc i32 %8281 to i8
  %8283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8282, i8* %8283, align 1, !tbaa !2449
  %8284 = lshr i32 %8257, 31
  %8285 = xor i32 %8281, %8284
  %8286 = add nuw nsw i32 %8285, %8281
  %8287 = icmp eq i32 %8286, 2
  %8288 = zext i1 %8287 to i8
  %8289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8288, i8* %8289, align 1, !tbaa !2450
  %8290 = load i32, i32* %EDX
  %8291 = zext i32 %8290 to i64
  %8292 = load i64, i64* %PC
  %8293 = add i64 %8292, 3
  store i64 %8293, i64* %PC
  %8294 = shl i64 %8291, 32
  %8295 = ashr exact i64 %8294, 32
  store i64 %8295, i64* %RAX, align 8, !tbaa !2428
  %8296 = load i64, i64* %RBP
  %8297 = load i64, i64* %RAX
  %8298 = mul i64 %8297, 4
  %8299 = add i64 %8296, -1328
  %8300 = add i64 %8299, %8298
  %8301 = load i32, i32* %ECX
  %8302 = zext i32 %8301 to i64
  %8303 = load i64, i64* %PC
  %8304 = add i64 %8303, 7
  store i64 %8304, i64* %PC
  %8305 = inttoptr i64 %8300 to i32*
  store i32 %8301, i32* %8305
  br label %block_400ccb

block_401868:                                     ; preds = %block_401804
  %8306 = load i64, i64* %PC
  %8307 = add i64 %8306, 5
  %8308 = load i64, i64* %PC
  %8309 = add i64 %8308, 5
  store i64 %8309, i64* %PC
  %8310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8307, i64* %8310, align 8, !tbaa !2428
  br label %block_40186d

block_401467:                                     ; preds = %block_4014c7, %block_401460
  %MEMORY.33 = phi %struct.Memory* [ %MEMORY.19, %block_401460 ], [ %MEMORY.41, %block_4014c7 ]
  %8311 = load i64, i64* %RBP
  %8312 = sub i64 %8311, 4
  %8313 = load i64, i64* %PC
  %8314 = add i64 %8313, 7
  store i64 %8314, i64* %PC
  %8315 = inttoptr i64 %8312 to i32*
  %8316 = load i32, i32* %8315
  %8317 = sub i32 %8316, 255
  %8318 = icmp ult i32 %8316, 255
  %8319 = zext i1 %8318 to i8
  %8320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8319, i8* %8320, align 1, !tbaa !2432
  %8321 = and i32 %8317, 255
  %8322 = call i32 @llvm.ctpop.i32(i32 %8321) #16
  %8323 = trunc i32 %8322 to i8
  %8324 = and i8 %8323, 1
  %8325 = xor i8 %8324, 1
  %8326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8325, i8* %8326, align 1, !tbaa !2446
  %8327 = xor i32 %8316, 255
  %8328 = xor i32 %8327, %8317
  %8329 = lshr i32 %8328, 4
  %8330 = trunc i32 %8329 to i8
  %8331 = and i8 %8330, 1
  %8332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8331, i8* %8332, align 1, !tbaa !2447
  %8333 = icmp eq i32 %8317, 0
  %8334 = zext i1 %8333 to i8
  %8335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8334, i8* %8335, align 1, !tbaa !2448
  %8336 = lshr i32 %8317, 31
  %8337 = trunc i32 %8336 to i8
  %8338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8337, i8* %8338, align 1, !tbaa !2449
  %8339 = lshr i32 %8316, 31
  %8340 = xor i32 %8336, %8339
  %8341 = add nuw nsw i32 %8340, %8339
  %8342 = icmp eq i32 %8341, 2
  %8343 = zext i1 %8342 to i8
  %8344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8343, i8* %8344, align 1, !tbaa !2450
  %8345 = load i64, i64* %PC
  %8346 = add i64 %8345, 108
  %8347 = load i64, i64* %PC
  %8348 = add i64 %8347, 6
  %8349 = load i64, i64* %PC
  %8350 = add i64 %8349, 6
  store i64 %8350, i64* %PC
  %8351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8352 = load i8, i8* %8351, align 1, !tbaa !2449
  %8353 = icmp ne i8 %8352, 0
  %8354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8355 = load i8, i8* %8354, align 1, !tbaa !2450
  %8356 = icmp ne i8 %8355, 0
  %8357 = xor i1 %8353, %8356
  %8358 = xor i1 %8357, true
  %8359 = zext i1 %8358 to i8
  store i8 %8359, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8361 = select i1 %8357, i64 %8348, i64 %8346
  store i64 %8361, i64* %8360, align 8, !tbaa !2428
  %8362 = load i8, i8* %BRANCH_TAKEN
  %8363 = icmp eq i8 %8362, 1
  %8364 = load i64, i64* %RBP
  %8365 = sub i64 %8364, 4
  %8366 = load i64, i64* %PC
  br i1 %8363, label %block_4014da, label %block_401474

block_400e65:                                     ; preds = %block_400ddb
  %8367 = load i64, i64* %PC
  %8368 = add i64 %8367, 5
  %8369 = load i64, i64* %PC
  %8370 = add i64 %8369, 5
  store i64 %8370, i64* %PC
  %8371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8368, i64* %8371, align 8, !tbaa !2428
  br label %block_400e6a

block_401513:                                     ; preds = %block_4014f5, %block_40158f
  %MEMORY.34 = phi %struct.Memory* [ %MEMORY.38, %block_4014f5 ], [ %MEMORY.51, %block_40158f ]
  %8372 = load i64, i64* %RBP
  %8373 = sub i64 %8372, 8
  %8374 = load i64, i64* %PC
  %8375 = add i64 %8374, 3
  store i64 %8375, i64* %PC
  %8376 = inttoptr i64 %8373 to i32*
  %8377 = load i32, i32* %8376
  %8378 = zext i32 %8377 to i64
  store i64 %8378, i64* %RAX, align 8, !tbaa !2428
  %8379 = load i64, i64* %RBP
  %8380 = sub i64 %8379, 12
  %8381 = load i64, i64* %PC
  %8382 = add i64 %8381, 4
  store i64 %8382, i64* %PC
  %8383 = inttoptr i64 %8380 to i32*
  %8384 = load i32, i32* %8383
  %8385 = sext i32 %8384 to i64
  store i64 %8385, i64* %RCX, align 8, !tbaa !2428
  %8386 = load i32, i32* %EAX
  %8387 = zext i32 %8386 to i64
  %8388 = load i64, i64* %RBP
  %8389 = load i64, i64* %RCX
  %8390 = mul i64 %8389, 4
  %8391 = add i64 %8388, -1328
  %8392 = add i64 %8391, %8390
  %8393 = load i64, i64* %PC
  %8394 = add i64 %8393, 7
  store i64 %8394, i64* %PC
  %8395 = inttoptr i64 %8392 to i32*
  %8396 = load i32, i32* %8395
  %8397 = sub i32 %8386, %8396
  %8398 = icmp ult i32 %8386, %8396
  %8399 = zext i1 %8398 to i8
  %8400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8399, i8* %8400, align 1, !tbaa !2432
  %8401 = and i32 %8397, 255
  %8402 = call i32 @llvm.ctpop.i32(i32 %8401) #16
  %8403 = trunc i32 %8402 to i8
  %8404 = and i8 %8403, 1
  %8405 = xor i8 %8404, 1
  %8406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8405, i8* %8406, align 1, !tbaa !2446
  %8407 = xor i32 %8396, %8386
  %8408 = xor i32 %8407, %8397
  %8409 = lshr i32 %8408, 4
  %8410 = trunc i32 %8409 to i8
  %8411 = and i8 %8410, 1
  %8412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8411, i8* %8412, align 1, !tbaa !2447
  %8413 = icmp eq i32 %8397, 0
  %8414 = zext i1 %8413 to i8
  %8415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8414, i8* %8415, align 1, !tbaa !2448
  %8416 = lshr i32 %8397, 31
  %8417 = trunc i32 %8416 to i8
  %8418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8417, i8* %8418, align 1, !tbaa !2449
  %8419 = lshr i32 %8386, 31
  %8420 = lshr i32 %8396, 31
  %8421 = xor i32 %8420, %8419
  %8422 = xor i32 %8416, %8419
  %8423 = add nuw nsw i32 %8422, %8421
  %8424 = icmp eq i32 %8423, 2
  %8425 = zext i1 %8424 to i8
  %8426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8425, i8* %8426, align 1, !tbaa !2450
  %8427 = load i64, i64* %PC
  %8428 = add i64 %8427, 129
  %8429 = load i64, i64* %PC
  %8430 = add i64 %8429, 6
  %8431 = load i64, i64* %PC
  %8432 = add i64 %8431, 6
  store i64 %8432, i64* %PC
  %8433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8434 = load i8, i8* %8433, align 1, !tbaa !2448
  %8435 = icmp eq i8 %8434, 0
  %8436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8437 = load i8, i8* %8436, align 1, !tbaa !2449
  %8438 = icmp ne i8 %8437, 0
  %8439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8440 = load i8, i8* %8439, align 1, !tbaa !2450
  %8441 = icmp ne i8 %8440, 0
  %8442 = xor i1 %8438, %8441
  %8443 = xor i1 %8442, true
  %8444 = and i1 %8435, %8443
  %8445 = zext i1 %8444 to i8
  store i8 %8445, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8447 = select i1 %8444, i64 %8428, i64 %8430
  store i64 %8447, i64* %8446, align 8, !tbaa !2428
  %8448 = load i8, i8* %BRANCH_TAKEN
  %8449 = icmp eq i8 %8448, 1
  %8450 = load i64, i64* %RBP
  br i1 %8449, label %block_4015a2, label %block_401527

block_401661:                                     ; preds = %block_40160c, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %MEMORY.35 = phi %struct.Memory* [ %MEMORY.17, %block_40160c ], [ %10641, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %8451 = load i64, i64* %PC
  %8452 = add i64 %8451, 5
  %8453 = load i64, i64* %PC
  %8454 = add i64 %8453, 5
  store i64 %8454, i64* %PC
  %8455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8452, i64* %8455, align 8, !tbaa !2428
  %8456 = load i64, i64* %RBP
  %8457 = sub i64 %8456, 8
  %8458 = load i64, i64* %PC
  %8459 = add i64 %8458, 3
  store i64 %8459, i64* %PC
  %8460 = inttoptr i64 %8457 to i32*
  %8461 = load i32, i32* %8460
  %8462 = zext i32 %8461 to i64
  store i64 %8462, i64* %RAX, align 8, !tbaa !2428
  %8463 = load i64, i64* %RAX
  %8464 = load i64, i64* %PC
  %8465 = add i64 %8464, 3
  store i64 %8465, i64* %PC
  %8466 = trunc i64 %8463 to i32
  %8467 = add i32 1, %8466
  %8468 = zext i32 %8467 to i64
  store i64 %8468, i64* %RAX, align 8, !tbaa !2428
  %8469 = icmp ult i32 %8467, %8466
  %8470 = icmp ult i32 %8467, 1
  %8471 = or i1 %8469, %8470
  %8472 = zext i1 %8471 to i8
  %8473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8472, i8* %8473, align 1, !tbaa !2432
  %8474 = and i32 %8467, 255
  %8475 = call i32 @llvm.ctpop.i32(i32 %8474) #16
  %8476 = trunc i32 %8475 to i8
  %8477 = and i8 %8476, 1
  %8478 = xor i8 %8477, 1
  %8479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8478, i8* %8479, align 1, !tbaa !2446
  %8480 = xor i64 1, %8463
  %8481 = trunc i64 %8480 to i32
  %8482 = xor i32 %8481, %8467
  %8483 = lshr i32 %8482, 4
  %8484 = trunc i32 %8483 to i8
  %8485 = and i8 %8484, 1
  %8486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8485, i8* %8486, align 1, !tbaa !2447
  %8487 = icmp eq i32 %8467, 0
  %8488 = zext i1 %8487 to i8
  %8489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8488, i8* %8489, align 1, !tbaa !2448
  %8490 = lshr i32 %8467, 31
  %8491 = trunc i32 %8490 to i8
  %8492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8491, i8* %8492, align 1, !tbaa !2449
  %8493 = lshr i32 %8466, 31
  %8494 = xor i32 %8490, %8493
  %8495 = add nuw nsw i32 %8494, %8490
  %8496 = icmp eq i32 %8495, 2
  %8497 = zext i1 %8496 to i8
  %8498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8497, i8* %8498, align 1, !tbaa !2450
  %8499 = load i64, i64* %RBP
  %8500 = sub i64 %8499, 8
  %8501 = load i32, i32* %EAX
  %8502 = zext i32 %8501 to i64
  %8503 = load i64, i64* %PC
  %8504 = add i64 %8503, 3
  store i64 %8504, i64* %PC
  %8505 = inttoptr i64 %8500 to i32*
  store i32 %8501, i32* %8505
  %8506 = load i64, i64* %PC
  %8507 = sub i64 %8506, 119
  %8508 = load i64, i64* %PC
  %8509 = add i64 %8508, 5
  store i64 %8509, i64* %PC
  %8510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8507, i64* %8510, align 8, !tbaa !2428
  br label %block_4015f8

block_401312:                                     ; preds = %block_401300
  %8511 = load i64, i64* %RBP
  %8512 = sub i64 %8511, 1168
  %8513 = load i64, i64* %PC
  %8514 = add i64 %8513, 7
  store i64 %8514, i64* %PC
  store i64 %8512, i64* %RAX, align 8, !tbaa !2428
  %8515 = load i64, i64* %RBP
  %8516 = sub i64 %8515, 12
  %8517 = load i64, i64* %PC
  %8518 = add i64 %8517, 4
  store i64 %8518, i64* %PC
  %8519 = inttoptr i64 %8516 to i32*
  %8520 = load i32, i32* %8519
  %8521 = sext i32 %8520 to i64
  store i64 %8521, i64* %RCX, align 8, !tbaa !2428
  %8522 = load i64, i64* %RCX
  %8523 = load i64, i64* %PC
  %8524 = add i64 %8523, 4
  store i64 %8524, i64* %PC
  %8525 = shl i64 %8522, 5
  %8526 = icmp slt i64 %8525, 0
  %8527 = shl i64 %8525, 1
  store i64 %8527, i64* %RCX, align 8, !tbaa !2428
  %8528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8529 = zext i1 %8526 to i8
  store i8 %8529, i8* %8528, align 1, !tbaa !2451
  %8530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8531 = trunc i64 %8527 to i32
  %8532 = and i32 %8531, 254
  %8533 = call i32 @llvm.ctpop.i32(i32 %8532) #16
  %8534 = trunc i32 %8533 to i8
  %8535 = and i8 %8534, 1
  %8536 = xor i8 %8535, 1
  store i8 %8536, i8* %8530, align 1, !tbaa !2451
  %8537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8537, align 1, !tbaa !2451
  %8538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8539 = icmp eq i64 %8527, 0
  %8540 = zext i1 %8539 to i8
  store i8 %8540, i8* %8538, align 1, !tbaa !2451
  %8541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8542 = lshr i64 %8527, 63
  %8543 = trunc i64 %8542 to i8
  store i8 %8543, i8* %8541, align 1, !tbaa !2451
  %8544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8544, align 1, !tbaa !2451
  %8545 = load i64, i64* %RAX
  %8546 = load i64, i64* %RCX
  %8547 = load i64, i64* %PC
  %8548 = add i64 %8547, 3
  store i64 %8548, i64* %PC
  %8549 = add i64 %8546, %8545
  store i64 %8549, i64* %RAX, align 8, !tbaa !2428
  %8550 = icmp ult i64 %8549, %8545
  %8551 = icmp ult i64 %8549, %8546
  %8552 = or i1 %8550, %8551
  %8553 = zext i1 %8552 to i8
  %8554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8553, i8* %8554, align 1, !tbaa !2432
  %8555 = trunc i64 %8549 to i32
  %8556 = and i32 %8555, 255
  %8557 = call i32 @llvm.ctpop.i32(i32 %8556) #16
  %8558 = trunc i32 %8557 to i8
  %8559 = and i8 %8558, 1
  %8560 = xor i8 %8559, 1
  %8561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8560, i8* %8561, align 1, !tbaa !2446
  %8562 = xor i64 %8546, %8545
  %8563 = xor i64 %8562, %8549
  %8564 = lshr i64 %8563, 4
  %8565 = trunc i64 %8564 to i8
  %8566 = and i8 %8565, 1
  %8567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8566, i8* %8567, align 1, !tbaa !2447
  %8568 = icmp eq i64 %8549, 0
  %8569 = zext i1 %8568 to i8
  %8570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8569, i8* %8570, align 1, !tbaa !2448
  %8571 = lshr i64 %8549, 63
  %8572 = trunc i64 %8571 to i8
  %8573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8572, i8* %8573, align 1, !tbaa !2449
  %8574 = lshr i64 %8545, 63
  %8575 = lshr i64 %8546, 63
  %8576 = xor i64 %8571, %8574
  %8577 = xor i64 %8571, %8575
  %8578 = add nuw nsw i64 %8576, %8577
  %8579 = icmp eq i64 %8578, 2
  %8580 = zext i1 %8579 to i8
  %8581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8580, i8* %8581, align 1, !tbaa !2450
  %8582 = load i64, i64* %RBP
  %8583 = sub i64 %8582, 4
  %8584 = load i64, i64* %PC
  %8585 = add i64 %8584, 4
  store i64 %8585, i64* %PC
  %8586 = inttoptr i64 %8583 to i32*
  %8587 = load i32, i32* %8586
  %8588 = sext i32 %8587 to i64
  store i64 %8588, i64* %RCX, align 8, !tbaa !2428
  %8589 = load i64, i64* %RAX
  %8590 = load i64, i64* %RCX
  %8591 = mul i64 %8590, 4
  %8592 = add i64 %8591, %8589
  %8593 = load i64, i64* %PC
  %8594 = add i64 %8593, 4
  store i64 %8594, i64* %PC
  %8595 = inttoptr i64 %8592 to i32*
  %8596 = load i32, i32* %8595
  %8597 = sub i32 %8596, -1
  %8598 = icmp ult i32 %8596, -1
  %8599 = zext i1 %8598 to i8
  %8600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8599, i8* %8600, align 1, !tbaa !2432
  %8601 = and i32 %8597, 255
  %8602 = call i32 @llvm.ctpop.i32(i32 %8601) #16
  %8603 = trunc i32 %8602 to i8
  %8604 = and i8 %8603, 1
  %8605 = xor i8 %8604, 1
  %8606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8605, i8* %8606, align 1, !tbaa !2446
  %8607 = xor i32 %8596, -1
  %8608 = xor i32 %8607, %8597
  %8609 = lshr i32 %8608, 4
  %8610 = trunc i32 %8609 to i8
  %8611 = and i8 %8610, 1
  %8612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8611, i8* %8612, align 1, !tbaa !2447
  %8613 = icmp eq i32 %8597, 0
  %8614 = zext i1 %8613 to i8
  %8615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8614, i8* %8615, align 1, !tbaa !2448
  %8616 = lshr i32 %8597, 31
  %8617 = trunc i32 %8616 to i8
  %8618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8617, i8* %8618, align 1, !tbaa !2449
  %8619 = lshr i32 %8596, 31
  %8620 = xor i32 %8619, 1
  %8621 = xor i32 %8616, %8619
  %8622 = add nuw nsw i32 %8621, %8620
  %8623 = icmp eq i32 %8622, 2
  %8624 = zext i1 %8623 to i8
  %8625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8624, i8* %8625, align 1, !tbaa !2450
  %8626 = load i64, i64* %PC
  %8627 = add i64 %8626, 55
  %8628 = load i64, i64* %PC
  %8629 = add i64 %8628, 6
  %8630 = load i64, i64* %PC
  %8631 = add i64 %8630, 6
  store i64 %8631, i64* %PC
  %8632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8633 = load i8, i8* %8632, align 1, !tbaa !2448
  store i8 %8633, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8635 = icmp ne i8 %8633, 0
  %8636 = select i1 %8635, i64 %8627, i64 %8629
  store i64 %8636, i64* %8634, align 8, !tbaa !2428
  %8637 = load i8, i8* %BRANCH_TAKEN
  %8638 = icmp eq i8 %8637, 1
  br i1 %8638, label %block_401363, label %block_401332

block_401460:                                     ; preds = %block_401221
  %8639 = add i64 %4751, 7
  store i64 %8639, i64* %PC
  %8640 = inttoptr i64 %4750 to i32*
  store i32 0, i32* %8640
  br label %block_401467

block_4013a1:                                     ; preds = %block_40138f
  %8641 = load i64, i64* %RBP
  %8642 = sub i64 %8641, 1168
  %8643 = load i64, i64* %PC
  %8644 = add i64 %8643, 7
  store i64 %8644, i64* %PC
  store i64 %8642, i64* %RAX, align 8, !tbaa !2428
  %8645 = load i64, i64* %RBP
  %8646 = sub i64 %8645, 12
  %8647 = load i64, i64* %PC
  %8648 = add i64 %8647, 4
  store i64 %8648, i64* %PC
  %8649 = inttoptr i64 %8646 to i32*
  %8650 = load i32, i32* %8649
  %8651 = sext i32 %8650 to i64
  store i64 %8651, i64* %RCX, align 8, !tbaa !2428
  %8652 = load i64, i64* %RCX
  %8653 = load i64, i64* %PC
  %8654 = add i64 %8653, 4
  store i64 %8654, i64* %PC
  %8655 = shl i64 %8652, 5
  %8656 = icmp slt i64 %8655, 0
  %8657 = shl i64 %8655, 1
  store i64 %8657, i64* %RCX, align 8, !tbaa !2428
  %8658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8659 = zext i1 %8656 to i8
  store i8 %8659, i8* %8658, align 1, !tbaa !2451
  %8660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8661 = trunc i64 %8657 to i32
  %8662 = and i32 %8661, 254
  %8663 = call i32 @llvm.ctpop.i32(i32 %8662) #16
  %8664 = trunc i32 %8663 to i8
  %8665 = and i8 %8664, 1
  %8666 = xor i8 %8665, 1
  store i8 %8666, i8* %8660, align 1, !tbaa !2451
  %8667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8667, align 1, !tbaa !2451
  %8668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8669 = icmp eq i64 %8657, 0
  %8670 = zext i1 %8669 to i8
  store i8 %8670, i8* %8668, align 1, !tbaa !2451
  %8671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8672 = lshr i64 %8657, 63
  %8673 = trunc i64 %8672 to i8
  store i8 %8673, i8* %8671, align 1, !tbaa !2451
  %8674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8674, align 1, !tbaa !2451
  %8675 = load i64, i64* %RAX
  %8676 = load i64, i64* %RCX
  %8677 = load i64, i64* %PC
  %8678 = add i64 %8677, 3
  store i64 %8678, i64* %PC
  %8679 = add i64 %8676, %8675
  store i64 %8679, i64* %RAX, align 8, !tbaa !2428
  %8680 = icmp ult i64 %8679, %8675
  %8681 = icmp ult i64 %8679, %8676
  %8682 = or i1 %8680, %8681
  %8683 = zext i1 %8682 to i8
  %8684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8683, i8* %8684, align 1, !tbaa !2432
  %8685 = trunc i64 %8679 to i32
  %8686 = and i32 %8685, 255
  %8687 = call i32 @llvm.ctpop.i32(i32 %8686) #16
  %8688 = trunc i32 %8687 to i8
  %8689 = and i8 %8688, 1
  %8690 = xor i8 %8689, 1
  %8691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8690, i8* %8691, align 1, !tbaa !2446
  %8692 = xor i64 %8676, %8675
  %8693 = xor i64 %8692, %8679
  %8694 = lshr i64 %8693, 4
  %8695 = trunc i64 %8694 to i8
  %8696 = and i8 %8695, 1
  %8697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8696, i8* %8697, align 1, !tbaa !2447
  %8698 = icmp eq i64 %8679, 0
  %8699 = zext i1 %8698 to i8
  %8700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8699, i8* %8700, align 1, !tbaa !2448
  %8701 = lshr i64 %8679, 63
  %8702 = trunc i64 %8701 to i8
  %8703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8702, i8* %8703, align 1, !tbaa !2449
  %8704 = lshr i64 %8675, 63
  %8705 = lshr i64 %8676, 63
  %8706 = xor i64 %8701, %8704
  %8707 = xor i64 %8701, %8705
  %8708 = add nuw nsw i64 %8706, %8707
  %8709 = icmp eq i64 %8708, 2
  %8710 = zext i1 %8709 to i8
  %8711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8710, i8* %8711, align 1, !tbaa !2450
  %8712 = load i64, i64* %RBP
  %8713 = sub i64 %8712, 4
  %8714 = load i64, i64* %PC
  %8715 = add i64 %8714, 3
  store i64 %8715, i64* %PC
  %8716 = inttoptr i64 %8713 to i32*
  %8717 = load i32, i32* %8716
  %8718 = zext i32 %8717 to i64
  store i64 %8718, i64* %RDX, align 8, !tbaa !2428
  %8719 = load i64, i64* %RDX
  %8720 = load i64, i64* %RBP
  %8721 = sub i64 %8720, 8
  %8722 = load i64, i64* %PC
  %8723 = add i64 %8722, 3
  store i64 %8723, i64* %PC
  %8724 = trunc i64 %8719 to i32
  %8725 = inttoptr i64 %8721 to i32*
  %8726 = load i32, i32* %8725
  %8727 = sub i32 %8724, %8726
  %8728 = zext i32 %8727 to i64
  store i64 %8728, i64* %RDX, align 8, !tbaa !2428
  %8729 = icmp ult i32 %8724, %8726
  %8730 = zext i1 %8729 to i8
  %8731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8730, i8* %8731, align 1, !tbaa !2432
  %8732 = and i32 %8727, 255
  %8733 = call i32 @llvm.ctpop.i32(i32 %8732) #16
  %8734 = trunc i32 %8733 to i8
  %8735 = and i8 %8734, 1
  %8736 = xor i8 %8735, 1
  %8737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8736, i8* %8737, align 1, !tbaa !2446
  %8738 = xor i32 %8726, %8724
  %8739 = xor i32 %8738, %8727
  %8740 = lshr i32 %8739, 4
  %8741 = trunc i32 %8740 to i8
  %8742 = and i8 %8741, 1
  %8743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8742, i8* %8743, align 1, !tbaa !2447
  %8744 = icmp eq i32 %8727, 0
  %8745 = zext i1 %8744 to i8
  %8746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8745, i8* %8746, align 1, !tbaa !2448
  %8747 = lshr i32 %8727, 31
  %8748 = trunc i32 %8747 to i8
  %8749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8748, i8* %8749, align 1, !tbaa !2449
  %8750 = lshr i32 %8724, 31
  %8751 = lshr i32 %8726, 31
  %8752 = xor i32 %8751, %8750
  %8753 = xor i32 %8747, %8750
  %8754 = add nuw nsw i32 %8753, %8752
  %8755 = icmp eq i32 %8754, 2
  %8756 = zext i1 %8755 to i8
  %8757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8756, i8* %8757, align 1, !tbaa !2450
  %8758 = load i32, i32* %EDX
  %8759 = zext i32 %8758 to i64
  %8760 = load i64, i64* %PC
  %8761 = add i64 %8760, 3
  store i64 %8761, i64* %PC
  %8762 = shl i64 %8759, 32
  %8763 = ashr exact i64 %8762, 32
  store i64 %8763, i64* %RCX, align 8, !tbaa !2428
  %8764 = load i64, i64* %RAX
  %8765 = load i64, i64* %RCX
  %8766 = mul i64 %8765, 4
  %8767 = add i64 %8766, %8764
  %8768 = load i64, i64* %PC
  %8769 = add i64 %8768, 4
  store i64 %8769, i64* %PC
  %8770 = inttoptr i64 %8767 to i32*
  %8771 = load i32, i32* %8770
  %8772 = sub i32 %8771, -1
  %8773 = icmp ult i32 %8771, -1
  %8774 = zext i1 %8773 to i8
  %8775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8774, i8* %8775, align 1, !tbaa !2432
  %8776 = and i32 %8772, 255
  %8777 = call i32 @llvm.ctpop.i32(i32 %8776) #16
  %8778 = trunc i32 %8777 to i8
  %8779 = and i8 %8778, 1
  %8780 = xor i8 %8779, 1
  %8781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8780, i8* %8781, align 1, !tbaa !2446
  %8782 = xor i32 %8771, -1
  %8783 = xor i32 %8782, %8772
  %8784 = lshr i32 %8783, 4
  %8785 = trunc i32 %8784 to i8
  %8786 = and i8 %8785, 1
  %8787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8786, i8* %8787, align 1, !tbaa !2447
  %8788 = icmp eq i32 %8772, 0
  %8789 = zext i1 %8788 to i8
  %8790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8789, i8* %8790, align 1, !tbaa !2448
  %8791 = lshr i32 %8772, 31
  %8792 = trunc i32 %8791 to i8
  %8793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8792, i8* %8793, align 1, !tbaa !2449
  %8794 = lshr i32 %8771, 31
  %8795 = xor i32 %8794, 1
  %8796 = xor i32 %8791, %8794
  %8797 = add nuw nsw i32 %8796, %8795
  %8798 = icmp eq i32 %8797, 2
  %8799 = zext i1 %8798 to i8
  %8800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8799, i8* %8800, align 1, !tbaa !2450
  %8801 = load i64, i64* %PC
  %8802 = add i64 %8801, 97
  %8803 = load i64, i64* %PC
  %8804 = add i64 %8803, 6
  %8805 = load i64, i64* %PC
  %8806 = add i64 %8805, 6
  store i64 %8806, i64* %PC
  %8807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8808 = load i8, i8* %8807, align 1, !tbaa !2448
  store i8 %8808, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8810 = icmp ne i8 %8808, 0
  %8811 = select i1 %8810, i64 %8802, i64 %8804
  store i64 %8811, i64* %8809, align 8, !tbaa !2428
  %8812 = load i8, i8* %BRANCH_TAKEN
  %8813 = icmp eq i8 %8812, 1
  br i1 %8813, label %block_401421, label %block_4013c6

block_400b26:                                     ; preds = %block_400b04, %block_400b3a
  %MEMORY.36 = phi %struct.Memory* [ %MEMORY.20, %block_400b04 ], [ %MEMORY.36, %block_400b3a ]
  %8814 = load i64, i64* %RBP
  %8815 = sub i64 %8814, 4
  %8816 = load i64, i64* %PC
  %8817 = add i64 %8816, 3
  store i64 %8817, i64* %PC
  %8818 = inttoptr i64 %8815 to i32*
  %8819 = load i32, i32* %8818
  %8820 = zext i32 %8819 to i64
  store i64 %8820, i64* %RAX, align 8, !tbaa !2428
  %8821 = load i64, i64* %RBP
  %8822 = sub i64 %8821, 12
  %8823 = load i64, i64* %PC
  %8824 = add i64 %8823, 4
  store i64 %8824, i64* %PC
  %8825 = inttoptr i64 %8822 to i32*
  %8826 = load i32, i32* %8825
  %8827 = sext i32 %8826 to i64
  store i64 %8827, i64* %RCX, align 8, !tbaa !2428
  %8828 = load i32, i32* %EAX
  %8829 = zext i32 %8828 to i64
  %8830 = load i64, i64* %RBP
  %8831 = load i64, i64* %RCX
  %8832 = mul i64 %8831, 4
  %8833 = add i64 %8830, -1328
  %8834 = add i64 %8833, %8832
  %8835 = load i64, i64* %PC
  %8836 = add i64 %8835, 7
  store i64 %8836, i64* %PC
  %8837 = inttoptr i64 %8834 to i32*
  %8838 = load i32, i32* %8837
  %8839 = sub i32 %8828, %8838
  %8840 = icmp ult i32 %8828, %8838
  %8841 = zext i1 %8840 to i8
  %8842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8841, i8* %8842, align 1, !tbaa !2432
  %8843 = and i32 %8839, 255
  %8844 = call i32 @llvm.ctpop.i32(i32 %8843) #16
  %8845 = trunc i32 %8844 to i8
  %8846 = and i8 %8845, 1
  %8847 = xor i8 %8846, 1
  %8848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8847, i8* %8848, align 1, !tbaa !2446
  %8849 = xor i32 %8838, %8828
  %8850 = xor i32 %8849, %8839
  %8851 = lshr i32 %8850, 4
  %8852 = trunc i32 %8851 to i8
  %8853 = and i8 %8852, 1
  %8854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8853, i8* %8854, align 1, !tbaa !2447
  %8855 = icmp eq i32 %8839, 0
  %8856 = zext i1 %8855 to i8
  %8857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8856, i8* %8857, align 1, !tbaa !2448
  %8858 = lshr i32 %8839, 31
  %8859 = trunc i32 %8858 to i8
  %8860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8859, i8* %8860, align 1, !tbaa !2449
  %8861 = lshr i32 %8828, 31
  %8862 = lshr i32 %8838, 31
  %8863 = xor i32 %8862, %8861
  %8864 = xor i32 %8858, %8861
  %8865 = add nuw nsw i32 %8864, %8863
  %8866 = icmp eq i32 %8865, 2
  %8867 = zext i1 %8866 to i8
  %8868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8867, i8* %8868, align 1, !tbaa !2450
  %8869 = load i64, i64* %PC
  %8870 = add i64 %8869, 121
  %8871 = load i64, i64* %PC
  %8872 = add i64 %8871, 6
  %8873 = load i64, i64* %PC
  %8874 = add i64 %8873, 6
  store i64 %8874, i64* %PC
  %8875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8876 = load i8, i8* %8875, align 1, !tbaa !2448
  %8877 = icmp eq i8 %8876, 0
  %8878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8879 = load i8, i8* %8878, align 1, !tbaa !2449
  %8880 = icmp ne i8 %8879, 0
  %8881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8882 = load i8, i8* %8881, align 1, !tbaa !2450
  %8883 = icmp ne i8 %8882, 0
  %8884 = xor i1 %8880, %8883
  %8885 = xor i1 %8884, true
  %8886 = and i1 %8877, %8885
  %8887 = zext i1 %8886 to i8
  store i8 %8887, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8889 = select i1 %8886, i64 %8870, i64 %8872
  store i64 %8889, i64* %8888, align 8, !tbaa !2428
  %8890 = load i8, i8* %BRANCH_TAKEN
  %8891 = icmp eq i8 %8890, 1
  br i1 %8891, label %block_400bad, label %block_400b3a

block_40105e:                                     ; preds = %block_40103c, %block_401072
  %MEMORY.37 = phi %struct.Memory* [ %MEMORY.43, %block_40103c ], [ %MEMORY.37, %block_401072 ]
  %8892 = load i64, i64* %RBP
  %8893 = sub i64 %8892, 4
  %8894 = load i64, i64* %PC
  %8895 = add i64 %8894, 3
  store i64 %8895, i64* %PC
  %8896 = inttoptr i64 %8893 to i32*
  %8897 = load i32, i32* %8896
  %8898 = zext i32 %8897 to i64
  store i64 %8898, i64* %RAX, align 8, !tbaa !2428
  %8899 = load i64, i64* %RBP
  %8900 = sub i64 %8899, 12
  %8901 = load i64, i64* %PC
  %8902 = add i64 %8901, 4
  store i64 %8902, i64* %PC
  %8903 = inttoptr i64 %8900 to i32*
  %8904 = load i32, i32* %8903
  %8905 = sext i32 %8904 to i64
  store i64 %8905, i64* %RCX, align 8, !tbaa !2428
  %8906 = load i32, i32* %EAX
  %8907 = zext i32 %8906 to i64
  %8908 = load i64, i64* %RBP
  %8909 = load i64, i64* %RCX
  %8910 = mul i64 %8909, 4
  %8911 = add i64 %8908, -1328
  %8912 = add i64 %8911, %8910
  %8913 = load i64, i64* %PC
  %8914 = add i64 %8913, 7
  store i64 %8914, i64* %PC
  %8915 = inttoptr i64 %8912 to i32*
  %8916 = load i32, i32* %8915
  %8917 = sub i32 %8906, %8916
  %8918 = icmp ult i32 %8906, %8916
  %8919 = zext i1 %8918 to i8
  %8920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8919, i8* %8920, align 1, !tbaa !2432
  %8921 = and i32 %8917, 255
  %8922 = call i32 @llvm.ctpop.i32(i32 %8921) #16
  %8923 = trunc i32 %8922 to i8
  %8924 = and i8 %8923, 1
  %8925 = xor i8 %8924, 1
  %8926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8925, i8* %8926, align 1, !tbaa !2446
  %8927 = xor i32 %8916, %8906
  %8928 = xor i32 %8927, %8917
  %8929 = lshr i32 %8928, 4
  %8930 = trunc i32 %8929 to i8
  %8931 = and i8 %8930, 1
  %8932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8931, i8* %8932, align 1, !tbaa !2447
  %8933 = icmp eq i32 %8917, 0
  %8934 = zext i1 %8933 to i8
  %8935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8934, i8* %8935, align 1, !tbaa !2448
  %8936 = lshr i32 %8917, 31
  %8937 = trunc i32 %8936 to i8
  %8938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8937, i8* %8938, align 1, !tbaa !2449
  %8939 = lshr i32 %8906, 31
  %8940 = lshr i32 %8916, 31
  %8941 = xor i32 %8940, %8939
  %8942 = xor i32 %8936, %8939
  %8943 = add nuw nsw i32 %8942, %8941
  %8944 = icmp eq i32 %8943, 2
  %8945 = zext i1 %8944 to i8
  %8946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8945, i8* %8946, align 1, !tbaa !2450
  %8947 = load i64, i64* %PC
  %8948 = add i64 %8947, 74
  %8949 = load i64, i64* %PC
  %8950 = add i64 %8949, 6
  %8951 = load i64, i64* %PC
  %8952 = add i64 %8951, 6
  store i64 %8952, i64* %PC
  %8953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8954 = load i8, i8* %8953, align 1, !tbaa !2448
  %8955 = icmp eq i8 %8954, 0
  %8956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8957 = load i8, i8* %8956, align 1, !tbaa !2449
  %8958 = icmp ne i8 %8957, 0
  %8959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8960 = load i8, i8* %8959, align 1, !tbaa !2450
  %8961 = icmp ne i8 %8960, 0
  %8962 = xor i1 %8958, %8961
  %8963 = xor i1 %8962, true
  %8964 = and i1 %8955, %8963
  %8965 = zext i1 %8964 to i8
  store i8 %8965, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8967 = select i1 %8964, i64 %8948, i64 %8950
  store i64 %8967, i64* %8966, align 8, !tbaa !2428
  %8968 = load i8, i8* %BRANCH_TAKEN
  %8969 = icmp eq i8 %8968, 1
  %8970 = load i64, i64* %RBP
  br i1 %8969, label %block_4010b6, label %block_401072

block_4014e1:                                     ; preds = %block_4014da, %block_4016fb
  %MEMORY.38 = phi %struct.Memory* [ %MEMORY.33, %block_4014da ], [ %MEMORY.15, %block_4016fb ]
  %8971 = load i64, i64* %RBP
  %8972 = sub i64 %8971, 4
  %8973 = load i64, i64* %PC
  %8974 = add i64 %8973, 3
  store i64 %8974, i64* %PC
  %8975 = inttoptr i64 %8972 to i32*
  %8976 = load i32, i32* %8975
  %8977 = zext i32 %8976 to i64
  store i64 %8977, i64* %RAX, align 8, !tbaa !2428
  %8978 = load i64, i64* %RBP
  %8979 = sub i64 %8978, 12
  %8980 = load i64, i64* %PC
  %8981 = add i64 %8980, 4
  store i64 %8981, i64* %PC
  %8982 = inttoptr i64 %8979 to i32*
  %8983 = load i32, i32* %8982
  %8984 = sext i32 %8983 to i64
  store i64 %8984, i64* %RCX, align 8, !tbaa !2428
  %8985 = load i32, i32* %EAX
  %8986 = zext i32 %8985 to i64
  %8987 = load i64, i64* %RBP
  %8988 = load i64, i64* %RCX
  %8989 = mul i64 %8988, 4
  %8990 = add i64 %8987, -1328
  %8991 = add i64 %8990, %8989
  %8992 = load i64, i64* %PC
  %8993 = add i64 %8992, 7
  store i64 %8993, i64* %PC
  %8994 = inttoptr i64 %8991 to i32*
  %8995 = load i32, i32* %8994
  %8996 = sub i32 %8985, %8995
  %8997 = icmp ult i32 %8985, %8995
  %8998 = zext i1 %8997 to i8
  %8999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8998, i8* %8999, align 1, !tbaa !2432
  %9000 = and i32 %8996, 255
  %9001 = call i32 @llvm.ctpop.i32(i32 %9000) #16
  %9002 = trunc i32 %9001 to i8
  %9003 = and i8 %9002, 1
  %9004 = xor i8 %9003, 1
  %9005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9004, i8* %9005, align 1, !tbaa !2446
  %9006 = xor i32 %8995, %8985
  %9007 = xor i32 %9006, %8996
  %9008 = lshr i32 %9007, 4
  %9009 = trunc i32 %9008 to i8
  %9010 = and i8 %9009, 1
  %9011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9010, i8* %9011, align 1, !tbaa !2447
  %9012 = icmp eq i32 %8996, 0
  %9013 = zext i1 %9012 to i8
  %9014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9013, i8* %9014, align 1, !tbaa !2448
  %9015 = lshr i32 %8996, 31
  %9016 = trunc i32 %9015 to i8
  %9017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9016, i8* %9017, align 1, !tbaa !2449
  %9018 = lshr i32 %8985, 31
  %9019 = lshr i32 %8995, 31
  %9020 = xor i32 %9019, %9018
  %9021 = xor i32 %9015, %9018
  %9022 = add nuw nsw i32 %9021, %9020
  %9023 = icmp eq i32 %9022, 2
  %9024 = zext i1 %9023 to i8
  %9025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9024, i8* %9025, align 1, !tbaa !2450
  %9026 = load i64, i64* %PC
  %9027 = add i64 %9026, 543
  %9028 = load i64, i64* %PC
  %9029 = add i64 %9028, 6
  %9030 = load i64, i64* %PC
  %9031 = add i64 %9030, 6
  store i64 %9031, i64* %PC
  %9032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9033 = load i8, i8* %9032, align 1, !tbaa !2449
  %9034 = icmp ne i8 %9033, 0
  %9035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9036 = load i8, i8* %9035, align 1, !tbaa !2450
  %9037 = icmp ne i8 %9036, 0
  %9038 = xor i1 %9034, %9037
  %9039 = xor i1 %9038, true
  %9040 = zext i1 %9039 to i8
  store i8 %9040, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9042 = select i1 %9038, i64 %9029, i64 %9027
  store i64 %9042, i64* %9041, align 8, !tbaa !2428
  %9043 = load i8, i8* %BRANCH_TAKEN
  %9044 = icmp eq i8 %9043, 1
  br i1 %9044, label %block_40170e, label %block_4014f5

block_400c66:                                     ; preds = %block_400bf2, %block_400c61
  %MEMORY.39 = phi %struct.Memory* [ %MEMORY.14, %block_400bf2 ], [ %MEMORY.44, %block_400c61 ]
  %9045 = load i64, i64* %RBP
  %9046 = sub i64 %9045, 12
  %9047 = load i64, i64* %PC
  %9048 = add i64 %9047, 4
  store i64 %9048, i64* %PC
  %9049 = inttoptr i64 %9046 to i32*
  %9050 = load i32, i32* %9049
  %9051 = sext i32 %9050 to i64
  store i64 %9051, i64* %RAX, align 8, !tbaa !2428
  %9052 = load i64, i64* %RBP
  %9053 = load i64, i64* %RAX
  %9054 = mul i64 %9053, 4
  %9055 = add i64 %9052, -1328
  %9056 = add i64 %9055, %9054
  %9057 = load i64, i64* %PC
  %9058 = add i64 %9057, 7
  store i64 %9058, i64* %PC
  %9059 = inttoptr i64 %9056 to i32*
  %9060 = load i32, i32* %9059
  %9061 = zext i32 %9060 to i64
  store i64 %9061, i64* %RCX, align 8, !tbaa !2428
  %9062 = load i64, i64* %RBP
  %9063 = sub i64 %9062, 16
  %9064 = load i64, i64* %PC
  %9065 = add i64 %9064, 4
  store i64 %9065, i64* %PC
  %9066 = inttoptr i64 %9063 to i32*
  %9067 = load i32, i32* %9066
  %9068 = sext i32 %9067 to i64
  store i64 %9068, i64* %RAX, align 8, !tbaa !2428
  %9069 = load i64, i64* %RBP
  %9070 = load i64, i64* %RAX
  %9071 = mul i64 %9070, 4
  %9072 = add i64 %9069, -1328
  %9073 = add i64 %9072, %9071
  %9074 = load i64, i64* %PC
  %9075 = add i64 %9074, 7
  store i64 %9075, i64* %PC
  %9076 = inttoptr i64 %9073 to i32*
  %9077 = load i32, i32* %9076
  %9078 = zext i32 %9077 to i64
  store i64 %9078, i64* %RDX, align 8, !tbaa !2428
  %9079 = load i64, i64* %RDX
  %9080 = load i64, i64* %RBP
  %9081 = sub i64 %9080, 12
  %9082 = load i64, i64* %PC
  %9083 = add i64 %9082, 3
  store i64 %9083, i64* %PC
  %9084 = trunc i64 %9079 to i32
  %9085 = inttoptr i64 %9081 to i32*
  %9086 = load i32, i32* %9085
  %9087 = add i32 %9086, %9084
  %9088 = zext i32 %9087 to i64
  store i64 %9088, i64* %RDX, align 8, !tbaa !2428
  %9089 = icmp ult i32 %9087, %9084
  %9090 = icmp ult i32 %9087, %9086
  %9091 = or i1 %9089, %9090
  %9092 = zext i1 %9091 to i8
  %9093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9092, i8* %9093, align 1, !tbaa !2432
  %9094 = and i32 %9087, 255
  %9095 = call i32 @llvm.ctpop.i32(i32 %9094) #16
  %9096 = trunc i32 %9095 to i8
  %9097 = and i8 %9096, 1
  %9098 = xor i8 %9097, 1
  %9099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9098, i8* %9099, align 1, !tbaa !2446
  %9100 = xor i32 %9086, %9084
  %9101 = xor i32 %9100, %9087
  %9102 = lshr i32 %9101, 4
  %9103 = trunc i32 %9102 to i8
  %9104 = and i8 %9103, 1
  %9105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9104, i8* %9105, align 1, !tbaa !2447
  %9106 = icmp eq i32 %9087, 0
  %9107 = zext i1 %9106 to i8
  %9108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9107, i8* %9108, align 1, !tbaa !2448
  %9109 = lshr i32 %9087, 31
  %9110 = trunc i32 %9109 to i8
  %9111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9110, i8* %9111, align 1, !tbaa !2449
  %9112 = lshr i32 %9084, 31
  %9113 = lshr i32 %9086, 31
  %9114 = xor i32 %9109, %9112
  %9115 = xor i32 %9109, %9113
  %9116 = add nuw nsw i32 %9114, %9115
  %9117 = icmp eq i32 %9116, 2
  %9118 = zext i1 %9117 to i8
  %9119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9118, i8* %9119, align 1, !tbaa !2450
  %9120 = load i64, i64* %RDX
  %9121 = load i64, i64* %RBP
  %9122 = sub i64 %9121, 16
  %9123 = load i64, i64* %PC
  %9124 = add i64 %9123, 3
  store i64 %9124, i64* %PC
  %9125 = trunc i64 %9120 to i32
  %9126 = inttoptr i64 %9122 to i32*
  %9127 = load i32, i32* %9126
  %9128 = sub i32 %9125, %9127
  %9129 = zext i32 %9128 to i64
  store i64 %9129, i64* %RDX, align 8, !tbaa !2428
  %9130 = icmp ult i32 %9125, %9127
  %9131 = zext i1 %9130 to i8
  %9132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9131, i8* %9132, align 1, !tbaa !2432
  %9133 = and i32 %9128, 255
  %9134 = call i32 @llvm.ctpop.i32(i32 %9133) #16
  %9135 = trunc i32 %9134 to i8
  %9136 = and i8 %9135, 1
  %9137 = xor i8 %9136, 1
  %9138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9137, i8* %9138, align 1, !tbaa !2446
  %9139 = xor i32 %9127, %9125
  %9140 = xor i32 %9139, %9128
  %9141 = lshr i32 %9140, 4
  %9142 = trunc i32 %9141 to i8
  %9143 = and i8 %9142, 1
  %9144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9143, i8* %9144, align 1, !tbaa !2447
  %9145 = icmp eq i32 %9128, 0
  %9146 = zext i1 %9145 to i8
  %9147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9146, i8* %9147, align 1, !tbaa !2448
  %9148 = lshr i32 %9128, 31
  %9149 = trunc i32 %9148 to i8
  %9150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9149, i8* %9150, align 1, !tbaa !2449
  %9151 = lshr i32 %9125, 31
  %9152 = lshr i32 %9127, 31
  %9153 = xor i32 %9152, %9151
  %9154 = xor i32 %9148, %9151
  %9155 = add nuw nsw i32 %9154, %9153
  %9156 = icmp eq i32 %9155, 2
  %9157 = zext i1 %9156 to i8
  %9158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9157, i8* %9158, align 1, !tbaa !2450
  %9159 = load i32, i32* %ECX
  %9160 = zext i32 %9159 to i64
  %9161 = load i32, i32* %EDX
  %9162 = zext i32 %9161 to i64
  %9163 = load i64, i64* %PC
  %9164 = add i64 %9163, 2
  store i64 %9164, i64* %PC
  %9165 = sub i32 %9159, %9161
  %9166 = icmp ult i32 %9159, %9161
  %9167 = zext i1 %9166 to i8
  %9168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9167, i8* %9168, align 1, !tbaa !2432
  %9169 = and i32 %9165, 255
  %9170 = call i32 @llvm.ctpop.i32(i32 %9169) #16
  %9171 = trunc i32 %9170 to i8
  %9172 = and i8 %9171, 1
  %9173 = xor i8 %9172, 1
  %9174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9173, i8* %9174, align 1, !tbaa !2446
  %9175 = xor i64 %9162, %9160
  %9176 = trunc i64 %9175 to i32
  %9177 = xor i32 %9176, %9165
  %9178 = lshr i32 %9177, 4
  %9179 = trunc i32 %9178 to i8
  %9180 = and i8 %9179, 1
  %9181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9180, i8* %9181, align 1, !tbaa !2447
  %9182 = icmp eq i32 %9165, 0
  %9183 = zext i1 %9182 to i8
  %9184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9183, i8* %9184, align 1, !tbaa !2448
  %9185 = lshr i32 %9165, 31
  %9186 = trunc i32 %9185 to i8
  %9187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9186, i8* %9187, align 1, !tbaa !2449
  %9188 = lshr i32 %9159, 31
  %9189 = lshr i32 %9161, 31
  %9190 = xor i32 %9189, %9188
  %9191 = xor i32 %9185, %9188
  %9192 = add nuw nsw i32 %9191, %9190
  %9193 = icmp eq i32 %9192, 2
  %9194 = zext i1 %9193 to i8
  %9195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9194, i8* %9195, align 1, !tbaa !2450
  %9196 = load i64, i64* %PC
  %9197 = add i64 %9196, 38
  %9198 = load i64, i64* %PC
  %9199 = add i64 %9198, 6
  %9200 = load i64, i64* %PC
  %9201 = add i64 %9200, 6
  store i64 %9201, i64* %PC
  %9202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9203 = load i8, i8* %9202, align 1, !tbaa !2448
  %9204 = icmp ne i8 %9203, 0
  %9205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9206 = load i8, i8* %9205, align 1, !tbaa !2449
  %9207 = icmp ne i8 %9206, 0
  %9208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9209 = load i8, i8* %9208, align 1, !tbaa !2450
  %9210 = icmp ne i8 %9209, 0
  %9211 = xor i1 %9207, %9210
  %9212 = or i1 %9204, %9211
  %9213 = zext i1 %9212 to i8
  store i8 %9213, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9215 = select i1 %9212, i64 %9197, i64 %9199
  store i64 %9215, i64* %9214, align 8, !tbaa !2428
  %9216 = load i8, i8* %BRANCH_TAKEN
  %9217 = icmp eq i8 %9216, 1
  %9218 = load i64, i64* %RBP
  br i1 %9217, label %block_400caa, label %block_400c8a

block_4012dd:                                     ; preds = %block_4012bd
  %9219 = load i64, i64* %RBP
  %9220 = sub i64 %9219, 4
  %9221 = load i64, i64* %PC
  %9222 = add i64 %9221, 4
  store i64 %9222, i64* %PC
  %9223 = inttoptr i64 %9220 to i32*
  %9224 = load i32, i32* %9223
  %9225 = sext i32 %9224 to i64
  store i64 %9225, i64* %RAX, align 8, !tbaa !2428
  %9226 = load i64, i64* %RBP
  %9227 = load i64, i64* %RAX
  %9228 = mul i64 %9227, 4
  %9229 = add i64 %9226, -1488
  %9230 = add i64 %9229, %9228
  %9231 = load i64, i64* %PC
  %9232 = add i64 %9231, 8
  store i64 %9232, i64* %PC
  %9233 = inttoptr i64 %9230 to i32*
  %9234 = load i32, i32* %9233
  %9235 = sext i32 %9234 to i64
  store i64 %9235, i64* %RAX, align 8, !tbaa !2428
  %9236 = load i64, i64* %RAX
  %9237 = mul i64 %9236, 4
  %9238 = add i64 %9237, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %9239 = load i64, i64* %PC
  %9240 = add i64 %9239, 7
  store i64 %9240, i64* %PC
  %9241 = inttoptr i64 %9238 to i32*
  %9242 = load i32, i32* %9241
  %9243 = zext i32 %9242 to i64
  store i64 %9243, i64* %RCX, align 8, !tbaa !2428
  %9244 = load i64, i64* %RBP
  %9245 = sub i64 %9244, 4
  %9246 = load i64, i64* %PC
  %9247 = add i64 %9246, 4
  store i64 %9247, i64* %PC
  %9248 = inttoptr i64 %9245 to i32*
  %9249 = load i32, i32* %9248
  %9250 = sext i32 %9249 to i64
  store i64 %9250, i64* %RAX, align 8, !tbaa !2428
  %9251 = load i64, i64* %RBP
  %9252 = load i64, i64* %RAX
  %9253 = mul i64 %9252, 4
  %9254 = add i64 %9251, -1616
  %9255 = add i64 %9254, %9253
  %9256 = load i32, i32* %ECX
  %9257 = zext i32 %9256 to i64
  %9258 = load i64, i64* %PC
  %9259 = add i64 %9258, 7
  store i64 %9259, i64* %PC
  %9260 = inttoptr i64 %9255 to i32*
  store i32 %9256, i32* %9260
  %9261 = load i64, i64* %PC
  %9262 = add i64 %9261, 124
  %9263 = load i64, i64* %PC
  %9264 = add i64 %9263, 5
  store i64 %9264, i64* %PC
  %9265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9262, i64* %9265, align 8, !tbaa !2428
  br label %block_401377

block_4017ae:                                     ; preds = %block_40179c
  %9266 = add i64 %1554, 8
  store i64 %9266, i64* %PC
  %9267 = inttoptr i64 %1553 to i32*
  %9268 = load i32, i32* %9267
  %9269 = sext i32 %9268 to i64
  store i64 %9269, i64* %RAX, align 8, !tbaa !2428
  %9270 = load i64, i64* %RAX
  %9271 = mul i64 %9270, 4
  %9272 = add i64 %9271, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %9273 = load i64, i64* %PC
  %9274 = add i64 %9273, 7
  store i64 %9274, i64* %PC
  %9275 = inttoptr i64 %9272 to i32*
  %9276 = load i32, i32* %9275
  %9277 = zext i32 %9276 to i64
  store i64 %9277, i64* %RCX, align 8, !tbaa !2428
  %9278 = load i64, i64* %RBP
  %9279 = sub i64 %9278, 4
  %9280 = load i64, i64* %PC
  %9281 = add i64 %9280, 4
  store i64 %9281, i64* %PC
  %9282 = inttoptr i64 %9279 to i32*
  %9283 = load i32, i32* %9282
  %9284 = sext i32 %9283 to i64
  store i64 %9284, i64* %RAX, align 8, !tbaa !2428
  %9285 = load i64, i64* %RAX
  %9286 = mul i64 %9285, 4
  %9287 = add i64 %9286, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %9288 = load i32, i32* %ECX
  %9289 = zext i32 %9288 to i64
  %9290 = load i64, i64* %PC
  %9291 = add i64 %9290, 7
  store i64 %9291, i64* %PC
  %9292 = inttoptr i64 %9287 to i32*
  store i32 %9288, i32* %9292
  %9293 = load i64, i64* %PC
  %9294 = add i64 %9293, 20
  %9295 = load i64, i64* %PC
  %9296 = add i64 %9295, 5
  store i64 %9296, i64* %PC
  %9297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9294, i64* %9297, align 8, !tbaa !2428
  br label %block_4017e0

block_401855:                                     ; preds = %block_401823, %block_401846
  %MEMORY.40 = phi %struct.Memory* [ %MEMORY.52, %block_401846 ], [ %MEMORY.52, %block_401823 ]
  %9298 = load i64, i64* %PC
  %9299 = add i64 %9298, 5
  %9300 = load i64, i64* %PC
  %9301 = add i64 %9300, 5
  store i64 %9301, i64* %PC
  %9302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9299, i64* %9302, align 8, !tbaa !2428
  %9303 = load i64, i64* %RBP
  %9304 = sub i64 %9303, 4
  %9305 = load i64, i64* %PC
  %9306 = add i64 %9305, 3
  store i64 %9306, i64* %PC
  %9307 = inttoptr i64 %9304 to i32*
  %9308 = load i32, i32* %9307
  %9309 = zext i32 %9308 to i64
  store i64 %9309, i64* %RAX, align 8, !tbaa !2428
  %9310 = load i64, i64* %RAX
  %9311 = load i64, i64* %PC
  %9312 = add i64 %9311, 3
  store i64 %9312, i64* %PC
  %9313 = trunc i64 %9310 to i32
  %9314 = add i32 1, %9313
  %9315 = zext i32 %9314 to i64
  store i64 %9315, i64* %RAX, align 8, !tbaa !2428
  %9316 = icmp ult i32 %9314, %9313
  %9317 = icmp ult i32 %9314, 1
  %9318 = or i1 %9316, %9317
  %9319 = zext i1 %9318 to i8
  %9320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9319, i8* %9320, align 1, !tbaa !2432
  %9321 = and i32 %9314, 255
  %9322 = call i32 @llvm.ctpop.i32(i32 %9321) #16
  %9323 = trunc i32 %9322 to i8
  %9324 = and i8 %9323, 1
  %9325 = xor i8 %9324, 1
  %9326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9325, i8* %9326, align 1, !tbaa !2446
  %9327 = xor i64 1, %9310
  %9328 = trunc i64 %9327 to i32
  %9329 = xor i32 %9328, %9314
  %9330 = lshr i32 %9329, 4
  %9331 = trunc i32 %9330 to i8
  %9332 = and i8 %9331, 1
  %9333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9332, i8* %9333, align 1, !tbaa !2447
  %9334 = icmp eq i32 %9314, 0
  %9335 = zext i1 %9334 to i8
  %9336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9335, i8* %9336, align 1, !tbaa !2448
  %9337 = lshr i32 %9314, 31
  %9338 = trunc i32 %9337 to i8
  %9339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9338, i8* %9339, align 1, !tbaa !2449
  %9340 = lshr i32 %9313, 31
  %9341 = xor i32 %9337, %9340
  %9342 = add nuw nsw i32 %9341, %9337
  %9343 = icmp eq i32 %9342, 2
  %9344 = zext i1 %9343 to i8
  %9345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9344, i8* %9345, align 1, !tbaa !2450
  %9346 = load i64, i64* %RBP
  %9347 = sub i64 %9346, 4
  %9348 = load i32, i32* %EAX
  %9349 = zext i32 %9348 to i64
  %9350 = load i64, i64* %PC
  %9351 = add i64 %9350, 3
  store i64 %9351, i64* %PC
  %9352 = inttoptr i64 %9347 to i32*
  store i32 %9348, i32* %9352
  %9353 = load i64, i64* %PC
  %9354 = sub i64 %9353, 95
  %9355 = load i64, i64* %PC
  %9356 = add i64 %9355, 5
  store i64 %9356, i64* %PC
  %9357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9354, i64* %9357, align 8, !tbaa !2428
  br label %block_401804

block_400a53:                                     ; preds = %block_400a46
  %9358 = sub i64 %9632, 1248
  %9359 = load i64, i64* %PC
  %9360 = add i64 %9359, 10
  store i64 %9360, i64* %PC
  %9361 = inttoptr i64 %9358 to i32*
  store i32 0, i32* %9361
  %9362 = load i64, i64* %RBP
  %9363 = sub i64 %9362, 1484
  %9364 = load i64, i64* %PC
  %9365 = add i64 %9364, 6
  store i64 %9365, i64* %PC
  %9366 = inttoptr i64 %9363 to i32*
  %9367 = load i32, i32* %9366
  %9368 = zext i32 %9367 to i64
  store i64 %9368, i64* %RAX, align 8, !tbaa !2428
  %9369 = load i64, i64* %RBP
  %9370 = sub i64 %9369, 1244
  %9371 = load i32, i32* %EAX
  %9372 = zext i32 %9371 to i64
  %9373 = load i64, i64* %PC
  %9374 = add i64 %9373, 6
  store i64 %9374, i64* %PC
  %9375 = inttoptr i64 %9370 to i32*
  store i32 %9371, i32* %9375
  %9376 = load i64, i64* %RBP
  %9377 = sub i64 %9376, 1168
  %9378 = load i64, i64* %PC
  %9379 = add i64 %9378, 10
  store i64 %9379, i64* %PC
  %9380 = inttoptr i64 %9377 to i32*
  store i32 0, i32* %9380
  %9381 = load i64, i64* %RBP
  %9382 = sub i64 %9381, 1104
  %9383 = load i64, i64* %PC
  %9384 = add i64 %9383, 10
  store i64 %9384, i64* %PC
  %9385 = inttoptr i64 %9382 to i32*
  store i32 1, i32* %9385
  %9386 = load i64, i64* %RBP
  %9387 = sub i64 %9386, 4
  %9388 = load i64, i64* %PC
  %9389 = add i64 %9388, 7
  store i64 %9389, i64* %PC
  %9390 = inttoptr i64 %9387 to i32*
  store i32 1, i32* %9390
  br label %block_400a84

block_4014c7:                                     ; preds = %block_401495, %block_4014b8
  %MEMORY.41 = phi %struct.Memory* [ %MEMORY.33, %block_4014b8 ], [ %MEMORY.33, %block_401495 ]
  %9391 = load i64, i64* %PC
  %9392 = add i64 %9391, 5
  %9393 = load i64, i64* %PC
  %9394 = add i64 %9393, 5
  store i64 %9394, i64* %PC
  %9395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9392, i64* %9395, align 8, !tbaa !2428
  %9396 = load i64, i64* %RBP
  %9397 = sub i64 %9396, 4
  %9398 = load i64, i64* %PC
  %9399 = add i64 %9398, 3
  store i64 %9399, i64* %PC
  %9400 = inttoptr i64 %9397 to i32*
  %9401 = load i32, i32* %9400
  %9402 = zext i32 %9401 to i64
  store i64 %9402, i64* %RAX, align 8, !tbaa !2428
  %9403 = load i64, i64* %RAX
  %9404 = load i64, i64* %PC
  %9405 = add i64 %9404, 3
  store i64 %9405, i64* %PC
  %9406 = trunc i64 %9403 to i32
  %9407 = add i32 1, %9406
  %9408 = zext i32 %9407 to i64
  store i64 %9408, i64* %RAX, align 8, !tbaa !2428
  %9409 = icmp ult i32 %9407, %9406
  %9410 = icmp ult i32 %9407, 1
  %9411 = or i1 %9409, %9410
  %9412 = zext i1 %9411 to i8
  %9413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9412, i8* %9413, align 1, !tbaa !2432
  %9414 = and i32 %9407, 255
  %9415 = call i32 @llvm.ctpop.i32(i32 %9414) #16
  %9416 = trunc i32 %9415 to i8
  %9417 = and i8 %9416, 1
  %9418 = xor i8 %9417, 1
  %9419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9418, i8* %9419, align 1, !tbaa !2446
  %9420 = xor i64 1, %9403
  %9421 = trunc i64 %9420 to i32
  %9422 = xor i32 %9421, %9407
  %9423 = lshr i32 %9422, 4
  %9424 = trunc i32 %9423 to i8
  %9425 = and i8 %9424, 1
  %9426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9425, i8* %9426, align 1, !tbaa !2447
  %9427 = icmp eq i32 %9407, 0
  %9428 = zext i1 %9427 to i8
  %9429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9428, i8* %9429, align 1, !tbaa !2448
  %9430 = lshr i32 %9407, 31
  %9431 = trunc i32 %9430 to i8
  %9432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9431, i8* %9432, align 1, !tbaa !2449
  %9433 = lshr i32 %9406, 31
  %9434 = xor i32 %9430, %9433
  %9435 = add nuw nsw i32 %9434, %9430
  %9436 = icmp eq i32 %9435, 2
  %9437 = zext i1 %9436 to i8
  %9438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9437, i8* %9438, align 1, !tbaa !2450
  %9439 = load i64, i64* %RBP
  %9440 = sub i64 %9439, 4
  %9441 = load i32, i32* %EAX
  %9442 = zext i32 %9441 to i64
  %9443 = load i64, i64* %PC
  %9444 = add i64 %9443, 3
  store i64 %9444, i64* %PC
  %9445 = inttoptr i64 %9440 to i32*
  store i32 %9441, i32* %9445
  %9446 = load i64, i64* %PC
  %9447 = sub i64 %9446, 110
  %9448 = load i64, i64* %PC
  %9449 = add i64 %9448, 5
  store i64 %9449, i64* %PC
  %9450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9447, i64* %9450, align 8, !tbaa !2428
  br label %block_401467

block_400c4c:                                     ; preds = %block_400c30
  %9451 = load i64, i64* %RBP
  %9452 = sub i64 %9451, 8
  %9453 = load i64, i64* %PC
  %9454 = add i64 %9453, 3
  store i64 %9454, i64* %PC
  %9455 = inttoptr i64 %9452 to i32*
  %9456 = load i32, i32* %9455
  %9457 = zext i32 %9456 to i64
  store i64 %9457, i64* %RAX, align 8, !tbaa !2428
  %9458 = load i64, i64* %RBP
  %9459 = sub i64 %9458, 16
  %9460 = load i32, i32* %EAX
  %9461 = zext i32 %9460 to i64
  %9462 = load i64, i64* %PC
  %9463 = add i64 %9462, 3
  store i64 %9463, i64* %PC
  %9464 = inttoptr i64 %9459 to i32*
  store i32 %9460, i32* %9464
  br label %block_400c52

block_401247:                                     ; preds = %block_401235
  %9465 = load i64, i64* %RBP
  %9466 = sub i64 %9465, 1168
  %9467 = load i64, i64* %PC
  %9468 = add i64 %9467, 7
  store i64 %9468, i64* %PC
  store i64 %9466, i64* %RAX, align 8, !tbaa !2428
  %9469 = load i64, i64* %RBP
  %9470 = sub i64 %9469, 12
  %9471 = load i64, i64* %PC
  %9472 = add i64 %9471, 4
  store i64 %9472, i64* %PC
  %9473 = inttoptr i64 %9470 to i32*
  %9474 = load i32, i32* %9473
  %9475 = sext i32 %9474 to i64
  store i64 %9475, i64* %RCX, align 8, !tbaa !2428
  %9476 = load i64, i64* %RCX
  %9477 = load i64, i64* %PC
  %9478 = add i64 %9477, 4
  store i64 %9478, i64* %PC
  %9479 = shl i64 %9476, 5
  %9480 = icmp slt i64 %9479, 0
  %9481 = shl i64 %9479, 1
  store i64 %9481, i64* %RCX, align 8, !tbaa !2428
  %9482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9483 = zext i1 %9480 to i8
  store i8 %9483, i8* %9482, align 1, !tbaa !2451
  %9484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %9485 = trunc i64 %9481 to i32
  %9486 = and i32 %9485, 254
  %9487 = call i32 @llvm.ctpop.i32(i32 %9486) #16
  %9488 = trunc i32 %9487 to i8
  %9489 = and i8 %9488, 1
  %9490 = xor i8 %9489, 1
  store i8 %9490, i8* %9484, align 1, !tbaa !2451
  %9491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9491, align 1, !tbaa !2451
  %9492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9493 = icmp eq i64 %9481, 0
  %9494 = zext i1 %9493 to i8
  store i8 %9494, i8* %9492, align 1, !tbaa !2451
  %9495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9496 = lshr i64 %9481, 63
  %9497 = trunc i64 %9496 to i8
  store i8 %9497, i8* %9495, align 1, !tbaa !2451
  %9498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9498, align 1, !tbaa !2451
  %9499 = load i64, i64* %RAX
  %9500 = load i64, i64* %RCX
  %9501 = load i64, i64* %PC
  %9502 = add i64 %9501, 3
  store i64 %9502, i64* %PC
  %9503 = add i64 %9500, %9499
  store i64 %9503, i64* %RAX, align 8, !tbaa !2428
  %9504 = icmp ult i64 %9503, %9499
  %9505 = icmp ult i64 %9503, %9500
  %9506 = or i1 %9504, %9505
  %9507 = zext i1 %9506 to i8
  %9508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9507, i8* %9508, align 1, !tbaa !2432
  %9509 = trunc i64 %9503 to i32
  %9510 = and i32 %9509, 255
  %9511 = call i32 @llvm.ctpop.i32(i32 %9510) #16
  %9512 = trunc i32 %9511 to i8
  %9513 = and i8 %9512, 1
  %9514 = xor i8 %9513, 1
  %9515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9514, i8* %9515, align 1, !tbaa !2446
  %9516 = xor i64 %9500, %9499
  %9517 = xor i64 %9516, %9503
  %9518 = lshr i64 %9517, 4
  %9519 = trunc i64 %9518 to i8
  %9520 = and i8 %9519, 1
  %9521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9520, i8* %9521, align 1, !tbaa !2447
  %9522 = icmp eq i64 %9503, 0
  %9523 = zext i1 %9522 to i8
  %9524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9523, i8* %9524, align 1, !tbaa !2448
  %9525 = lshr i64 %9503, 63
  %9526 = trunc i64 %9525 to i8
  %9527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9526, i8* %9527, align 1, !tbaa !2449
  %9528 = lshr i64 %9499, 63
  %9529 = lshr i64 %9500, 63
  %9530 = xor i64 %9525, %9528
  %9531 = xor i64 %9525, %9529
  %9532 = add nuw nsw i64 %9530, %9531
  %9533 = icmp eq i64 %9532, 2
  %9534 = zext i1 %9533 to i8
  %9535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9534, i8* %9535, align 1, !tbaa !2450
  %9536 = load i64, i64* %RBP
  %9537 = sub i64 %9536, 4
  %9538 = load i64, i64* %PC
  %9539 = add i64 %9538, 4
  store i64 %9539, i64* %PC
  %9540 = inttoptr i64 %9537 to i32*
  %9541 = load i32, i32* %9540
  %9542 = sext i32 %9541 to i64
  store i64 %9542, i64* %RCX, align 8, !tbaa !2428
  %9543 = load i64, i64* %RAX
  %9544 = load i64, i64* %RCX
  %9545 = mul i64 %9544, 4
  %9546 = add i64 %9545, %9543
  %9547 = load i64, i64* %PC
  %9548 = add i64 %9547, 4
  store i64 %9548, i64* %PC
  %9549 = inttoptr i64 %9546 to i32*
  %9550 = load i32, i32* %9549
  %9551 = sub i32 %9550, -1
  %9552 = icmp ult i32 %9550, -1
  %9553 = zext i1 %9552 to i8
  %9554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9553, i8* %9554, align 1, !tbaa !2432
  %9555 = and i32 %9551, 255
  %9556 = call i32 @llvm.ctpop.i32(i32 %9555) #16
  %9557 = trunc i32 %9556 to i8
  %9558 = and i8 %9557, 1
  %9559 = xor i8 %9558, 1
  %9560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9559, i8* %9560, align 1, !tbaa !2446
  %9561 = xor i32 %9550, -1
  %9562 = xor i32 %9561, %9551
  %9563 = lshr i32 %9562, 4
  %9564 = trunc i32 %9563 to i8
  %9565 = and i8 %9564, 1
  %9566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9565, i8* %9566, align 1, !tbaa !2447
  %9567 = icmp eq i32 %9551, 0
  %9568 = zext i1 %9567 to i8
  %9569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9568, i8* %9569, align 1, !tbaa !2448
  %9570 = lshr i32 %9551, 31
  %9571 = trunc i32 %9570 to i8
  %9572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9571, i8* %9572, align 1, !tbaa !2449
  %9573 = lshr i32 %9550, 31
  %9574 = xor i32 %9573, 1
  %9575 = xor i32 %9570, %9573
  %9576 = add nuw nsw i32 %9575, %9574
  %9577 = icmp eq i32 %9576, 2
  %9578 = zext i1 %9577 to i8
  %9579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9578, i8* %9579, align 1, !tbaa !2450
  %9580 = load i64, i64* %PC
  %9581 = add i64 %9580, 74
  %9582 = load i64, i64* %PC
  %9583 = add i64 %9582, 6
  %9584 = load i64, i64* %PC
  %9585 = add i64 %9584, 6
  store i64 %9585, i64* %PC
  %9586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9587 = load i8, i8* %9586, align 1, !tbaa !2448
  store i8 %9587, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9589 = icmp ne i8 %9587, 0
  %9590 = select i1 %9589, i64 %9581, i64 %9583
  store i64 %9590, i64* %9588, align 8, !tbaa !2428
  %9591 = load i8, i8* %BRANCH_TAKEN
  %9592 = icmp eq i8 %9591, 1
  br i1 %9592, label %block_4012ab, label %block_401267

block_40121a:                                     ; preds = %block_401203
  %9593 = inttoptr i64 %11562 to i32*
  store i32 1, i32* %9593
  br label %block_401221

block_400a46:                                     ; preds = %block_400966
  %9594 = sub i64 %1732, 1496
  %9595 = load i64, i64* %PC
  %9596 = add i64 %9595, 7
  store i64 %9596, i64* %PC
  %9597 = inttoptr i64 %9594 to i32*
  %9598 = load i32, i32* %9597
  %9599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9599, align 1, !tbaa !2432
  %9600 = and i32 %9598, 255
  %9601 = call i32 @llvm.ctpop.i32(i32 %9600) #16
  %9602 = trunc i32 %9601 to i8
  %9603 = and i8 %9602, 1
  %9604 = xor i8 %9603, 1
  %9605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9604, i8* %9605, align 1, !tbaa !2446
  %9606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9606, align 1, !tbaa !2447
  %9607 = icmp eq i32 %9598, 0
  %9608 = zext i1 %9607 to i8
  %9609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9608, i8* %9609, align 1, !tbaa !2448
  %9610 = lshr i32 %9598, 31
  %9611 = trunc i32 %9610 to i8
  %9612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9611, i8* %9612, align 1, !tbaa !2449
  %9613 = lshr i32 %9598, 31
  %9614 = xor i32 %9610, %9613
  %9615 = add nuw nsw i32 %9614, %9613
  %9616 = icmp eq i32 %9615, 2
  %9617 = zext i1 %9616 to i8
  %9618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9617, i8* %9618, align 1, !tbaa !2450
  %9619 = load i64, i64* %PC
  %9620 = add i64 %9619, 3504
  %9621 = load i64, i64* %PC
  %9622 = add i64 %9621, 6
  %9623 = load i64, i64* %PC
  %9624 = add i64 %9623, 6
  store i64 %9624, i64* %PC
  %9625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9626 = load i8, i8* %9625, align 1, !tbaa !2448
  store i8 %9626, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9628 = icmp ne i8 %9626, 0
  %9629 = select i1 %9628, i64 %9620, i64 %9622
  store i64 %9629, i64* %9627, align 8, !tbaa !2428
  %9630 = load i8, i8* %BRANCH_TAKEN
  %9631 = icmp eq i8 %9630, 1
  %9632 = load i64, i64* %RBP
  br i1 %9631, label %block_4017fd, label %block_400a53

block_401383:                                     ; preds = %block_40137c, %block_401421
  %MEMORY.42 = phi %struct.Memory* [ %MEMORY.47, %block_40137c ], [ %MEMORY.46, %block_401421 ]
  %9633 = load i64, i64* %RBP
  %9634 = sub i64 %9633, 8
  %9635 = load i64, i64* %PC
  %9636 = add i64 %9635, 3
  store i64 %9636, i64* %PC
  %9637 = inttoptr i64 %9634 to i32*
  %9638 = load i32, i32* %9637
  %9639 = zext i32 %9638 to i64
  store i64 %9639, i64* %RAX, align 8, !tbaa !2428
  %9640 = load i32, i32* %EAX
  %9641 = zext i32 %9640 to i64
  %9642 = load i64, i64* %RBP
  %9643 = sub i64 %9642, 4
  %9644 = load i64, i64* %PC
  %9645 = add i64 %9644, 3
  store i64 %9645, i64* %PC
  %9646 = inttoptr i64 %9643 to i32*
  %9647 = load i32, i32* %9646
  %9648 = sub i32 %9640, %9647
  %9649 = icmp ult i32 %9640, %9647
  %9650 = zext i1 %9649 to i8
  %9651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9650, i8* %9651, align 1, !tbaa !2432
  %9652 = and i32 %9648, 255
  %9653 = call i32 @llvm.ctpop.i32(i32 %9652) #16
  %9654 = trunc i32 %9653 to i8
  %9655 = and i8 %9654, 1
  %9656 = xor i8 %9655, 1
  %9657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9656, i8* %9657, align 1, !tbaa !2446
  %9658 = xor i32 %9647, %9640
  %9659 = xor i32 %9658, %9648
  %9660 = lshr i32 %9659, 4
  %9661 = trunc i32 %9660 to i8
  %9662 = and i8 %9661, 1
  %9663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9662, i8* %9663, align 1, !tbaa !2447
  %9664 = icmp eq i32 %9648, 0
  %9665 = zext i1 %9664 to i8
  %9666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9665, i8* %9666, align 1, !tbaa !2448
  %9667 = lshr i32 %9648, 31
  %9668 = trunc i32 %9667 to i8
  %9669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9668, i8* %9669, align 1, !tbaa !2449
  %9670 = lshr i32 %9640, 31
  %9671 = lshr i32 %9647, 31
  %9672 = xor i32 %9671, %9670
  %9673 = xor i32 %9667, %9670
  %9674 = add nuw nsw i32 %9673, %9672
  %9675 = icmp eq i32 %9674, 2
  %9676 = zext i1 %9675 to i8
  %9677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9676, i8* %9677, align 1, !tbaa !2450
  %9678 = load i64, i64* %PC
  %9679 = add i64 %9678, 171
  %9680 = load i64, i64* %PC
  %9681 = add i64 %9680, 6
  %9682 = load i64, i64* %PC
  %9683 = add i64 %9682, 6
  store i64 %9683, i64* %PC
  %9684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9685 = load i8, i8* %9684, align 1, !tbaa !2449
  %9686 = icmp ne i8 %9685, 0
  %9687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9688 = load i8, i8* %9687, align 1, !tbaa !2450
  %9689 = icmp ne i8 %9688, 0
  %9690 = xor i1 %9686, %9689
  %9691 = xor i1 %9690, true
  %9692 = zext i1 %9691 to i8
  store i8 %9692, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9694 = select i1 %9690, i64 %9681, i64 %9679
  store i64 %9694, i64* %9693, align 8, !tbaa !2428
  %9695 = load i8, i8* %BRANCH_TAKEN
  %9696 = icmp eq i8 %9695, 1
  %9697 = load i64, i64* %RBP
  br i1 %9696, label %block_401434, label %block_40138f

block_401235:                                     ; preds = %block_401221
  %9698 = add i64 %4751, 4
  store i64 %9698, i64* %PC
  %9699 = inttoptr i64 %4750 to i32*
  %9700 = load i32, i32* %9699
  %9701 = sext i32 %9700 to i64
  store i64 %9701, i64* %RAX, align 8, !tbaa !2428
  %9702 = load i64, i64* %RBP
  %9703 = load i64, i64* %RAX
  %9704 = mul i64 %9703, 4
  %9705 = add i64 %9702, -1488
  %9706 = add i64 %9705, %9704
  %9707 = load i64, i64* %PC
  %9708 = add i64 %9707, 8
  store i64 %9708, i64* %PC
  %9709 = inttoptr i64 %9706 to i32*
  %9710 = load i32, i32* %9709
  %9711 = sub i32 %9710, -1
  %9712 = icmp ult i32 %9710, -1
  %9713 = zext i1 %9712 to i8
  %9714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9713, i8* %9714, align 1, !tbaa !2432
  %9715 = and i32 %9711, 255
  %9716 = call i32 @llvm.ctpop.i32(i32 %9715) #16
  %9717 = trunc i32 %9716 to i8
  %9718 = and i8 %9717, 1
  %9719 = xor i8 %9718, 1
  %9720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9719, i8* %9720, align 1, !tbaa !2446
  %9721 = xor i32 %9710, -1
  %9722 = xor i32 %9721, %9711
  %9723 = lshr i32 %9722, 4
  %9724 = trunc i32 %9723 to i8
  %9725 = and i8 %9724, 1
  %9726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9725, i8* %9726, align 1, !tbaa !2447
  %9727 = icmp eq i32 %9711, 0
  %9728 = zext i1 %9727 to i8
  %9729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9728, i8* %9729, align 1, !tbaa !2448
  %9730 = lshr i32 %9711, 31
  %9731 = trunc i32 %9730 to i8
  %9732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9731, i8* %9732, align 1, !tbaa !2449
  %9733 = lshr i32 %9710, 31
  %9734 = xor i32 %9733, 1
  %9735 = xor i32 %9730, %9733
  %9736 = add nuw nsw i32 %9735, %9734
  %9737 = icmp eq i32 %9736, 2
  %9738 = zext i1 %9737 to i8
  %9739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9738, i8* %9739, align 1, !tbaa !2450
  %9740 = load i64, i64* %PC
  %9741 = add i64 %9740, 106
  %9742 = load i64, i64* %PC
  %9743 = add i64 %9742, 6
  %9744 = load i64, i64* %PC
  %9745 = add i64 %9744, 6
  store i64 %9745, i64* %PC
  %9746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9747 = load i8, i8* %9746, align 1, !tbaa !2448
  store i8 %9747, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9749 = icmp ne i8 %9747, 0
  %9750 = select i1 %9749, i64 %9741, i64 %9743
  store i64 %9750, i64* %9748, align 8, !tbaa !2428
  %9751 = load i8, i8* %BRANCH_TAKEN
  %9752 = icmp eq i8 %9751, 1
  br i1 %9752, label %block_4012ab, label %block_401247

block_401434:                                     ; preds = %block_401383
  %9753 = sub i64 %9697, 4
  %9754 = load i64, i64* %PC
  %9755 = add i64 %9754, 4
  store i64 %9755, i64* %PC
  %9756 = inttoptr i64 %9753 to i32*
  %9757 = load i32, i32* %9756
  %9758 = sext i32 %9757 to i64
  store i64 %9758, i64* %RAX, align 8, !tbaa !2428
  %9759 = load i64, i64* %RBP
  %9760 = load i64, i64* %RAX
  %9761 = mul i64 %9760, 4
  %9762 = add i64 %9759, -1616
  %9763 = add i64 %9762, %9761
  %9764 = load i64, i64* %PC
  %9765 = add i64 %9764, 8
  store i64 %9765, i64* %PC
  %9766 = inttoptr i64 %9763 to i32*
  %9767 = load i32, i32* %9766
  %9768 = sext i32 %9767 to i64
  store i64 %9768, i64* %RAX, align 8, !tbaa !2428
  %9769 = load i64, i64* %RAX
  %9770 = mul i64 %9769, 4
  %9771 = add i64 %9770, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %9772 = load i64, i64* %PC
  %9773 = add i64 %9772, 7
  store i64 %9773, i64* %PC
  %9774 = inttoptr i64 %9771 to i32*
  %9775 = load i32, i32* %9774
  %9776 = zext i32 %9775 to i64
  store i64 %9776, i64* %RCX, align 8, !tbaa !2428
  %9777 = load i64, i64* %RBP
  %9778 = sub i64 %9777, 4
  %9779 = load i64, i64* %PC
  %9780 = add i64 %9779, 4
  store i64 %9780, i64* %PC
  %9781 = inttoptr i64 %9778 to i32*
  %9782 = load i32, i32* %9781
  %9783 = sext i32 %9782 to i64
  store i64 %9783, i64* %RAX, align 8, !tbaa !2428
  %9784 = load i64, i64* %RBP
  %9785 = load i64, i64* %RAX
  %9786 = mul i64 %9785, 4
  %9787 = add i64 %9784, -1616
  %9788 = add i64 %9787, %9786
  %9789 = load i32, i32* %ECX
  %9790 = zext i32 %9789 to i64
  %9791 = load i64, i64* %PC
  %9792 = add i64 %9791, 7
  store i64 %9792, i64* %PC
  %9793 = inttoptr i64 %9788 to i32*
  store i32 %9789, i32* %9793
  %9794 = load i64, i64* %RBP
  %9795 = sub i64 %9794, 4
  %9796 = load i64, i64* %PC
  %9797 = add i64 %9796, 3
  store i64 %9797, i64* %PC
  %9798 = inttoptr i64 %9795 to i32*
  %9799 = load i32, i32* %9798
  %9800 = zext i32 %9799 to i64
  store i64 %9800, i64* %RAX, align 8, !tbaa !2428
  %9801 = load i64, i64* %RAX
  %9802 = load i64, i64* %PC
  %9803 = add i64 %9802, 3
  store i64 %9803, i64* %PC
  %9804 = trunc i64 %9801 to i32
  %9805 = add i32 1, %9804
  %9806 = zext i32 %9805 to i64
  store i64 %9806, i64* %RAX, align 8, !tbaa !2428
  %9807 = icmp ult i32 %9805, %9804
  %9808 = icmp ult i32 %9805, 1
  %9809 = or i1 %9807, %9808
  %9810 = zext i1 %9809 to i8
  %9811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9810, i8* %9811, align 1, !tbaa !2432
  %9812 = and i32 %9805, 255
  %9813 = call i32 @llvm.ctpop.i32(i32 %9812) #16
  %9814 = trunc i32 %9813 to i8
  %9815 = and i8 %9814, 1
  %9816 = xor i8 %9815, 1
  %9817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9816, i8* %9817, align 1, !tbaa !2446
  %9818 = xor i64 1, %9801
  %9819 = trunc i64 %9818 to i32
  %9820 = xor i32 %9819, %9805
  %9821 = lshr i32 %9820, 4
  %9822 = trunc i32 %9821 to i8
  %9823 = and i8 %9822, 1
  %9824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9823, i8* %9824, align 1, !tbaa !2447
  %9825 = icmp eq i32 %9805, 0
  %9826 = zext i1 %9825 to i8
  %9827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9826, i8* %9827, align 1, !tbaa !2448
  %9828 = lshr i32 %9805, 31
  %9829 = trunc i32 %9828 to i8
  %9830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9829, i8* %9830, align 1, !tbaa !2449
  %9831 = lshr i32 %9804, 31
  %9832 = xor i32 %9828, %9831
  %9833 = add nuw nsw i32 %9832, %9828
  %9834 = icmp eq i32 %9833, 2
  %9835 = zext i1 %9834 to i8
  %9836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9835, i8* %9836, align 1, !tbaa !2450
  %9837 = load i64, i64* %RBP
  %9838 = sub i64 %9837, 4
  %9839 = load i32, i32* %EAX
  %9840 = zext i32 %9839 to i64
  %9841 = load i64, i64* %PC
  %9842 = add i64 %9841, 3
  store i64 %9842, i64* %PC
  %9843 = inttoptr i64 %9838 to i32*
  store i32 %9839, i32* %9843
  %9844 = load i64, i64* %PC
  %9845 = sub i64 %9844, 570
  %9846 = load i64, i64* %PC
  %9847 = add i64 %9846, 5
  store i64 %9847, i64* %PC
  %9848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9845, i64* %9848, align 8, !tbaa !2428
  br label %block_401221

block_400c30:                                     ; preds = %block_400c15
  %9849 = load i64, i64* %RBP
  %9850 = sub i64 %9849, 16
  %9851 = load i64, i64* %PC
  %9852 = add i64 %9851, 4
  store i64 %9852, i64* %PC
  %9853 = inttoptr i64 %9850 to i32*
  %9854 = load i32, i32* %9853
  %9855 = sext i32 %9854 to i64
  store i64 %9855, i64* %RAX, align 8, !tbaa !2428
  %9856 = load i64, i64* %RBP
  %9857 = load i64, i64* %RAX
  %9858 = mul i64 %9857, 4
  %9859 = add i64 %9856, -1408
  %9860 = add i64 %9859, %9858
  %9861 = load i64, i64* %PC
  %9862 = add i64 %9861, 7
  store i64 %9862, i64* %PC
  %9863 = inttoptr i64 %9860 to i32*
  %9864 = load i32, i32* %9863
  %9865 = zext i32 %9864 to i64
  store i64 %9865, i64* %RCX, align 8, !tbaa !2428
  %9866 = load i64, i64* %RBP
  %9867 = sub i64 %9866, 8
  %9868 = load i64, i64* %PC
  %9869 = add i64 %9868, 4
  store i64 %9869, i64* %PC
  %9870 = inttoptr i64 %9867 to i32*
  %9871 = load i32, i32* %9870
  %9872 = sext i32 %9871 to i64
  store i64 %9872, i64* %RAX, align 8, !tbaa !2428
  %9873 = load i32, i32* %ECX
  %9874 = zext i32 %9873 to i64
  %9875 = load i64, i64* %RBP
  %9876 = load i64, i64* %RAX
  %9877 = mul i64 %9876, 4
  %9878 = add i64 %9875, -1408
  %9879 = add i64 %9878, %9877
  %9880 = load i64, i64* %PC
  %9881 = add i64 %9880, 7
  store i64 %9881, i64* %PC
  %9882 = inttoptr i64 %9879 to i32*
  %9883 = load i32, i32* %9882
  %9884 = sub i32 %9873, %9883
  %9885 = icmp ult i32 %9873, %9883
  %9886 = zext i1 %9885 to i8
  %9887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9886, i8* %9887, align 1, !tbaa !2432
  %9888 = and i32 %9884, 255
  %9889 = call i32 @llvm.ctpop.i32(i32 %9888) #16
  %9890 = trunc i32 %9889 to i8
  %9891 = and i8 %9890, 1
  %9892 = xor i8 %9891, 1
  %9893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9892, i8* %9893, align 1, !tbaa !2446
  %9894 = xor i32 %9883, %9873
  %9895 = xor i32 %9894, %9884
  %9896 = lshr i32 %9895, 4
  %9897 = trunc i32 %9896 to i8
  %9898 = and i8 %9897, 1
  %9899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9898, i8* %9899, align 1, !tbaa !2447
  %9900 = icmp eq i32 %9884, 0
  %9901 = zext i1 %9900 to i8
  %9902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9901, i8* %9902, align 1, !tbaa !2448
  %9903 = lshr i32 %9884, 31
  %9904 = trunc i32 %9903 to i8
  %9905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9904, i8* %9905, align 1, !tbaa !2449
  %9906 = lshr i32 %9873, 31
  %9907 = lshr i32 %9883, 31
  %9908 = xor i32 %9907, %9906
  %9909 = xor i32 %9903, %9906
  %9910 = add nuw nsw i32 %9909, %9908
  %9911 = icmp eq i32 %9910, 2
  %9912 = zext i1 %9911 to i8
  %9913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9912, i8* %9913, align 1, !tbaa !2450
  %9914 = load i64, i64* %PC
  %9915 = add i64 %9914, 12
  %9916 = load i64, i64* %PC
  %9917 = add i64 %9916, 6
  %9918 = load i64, i64* %PC
  %9919 = add i64 %9918, 6
  store i64 %9919, i64* %PC
  %9920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9921 = load i8, i8* %9920, align 1, !tbaa !2449
  %9922 = icmp ne i8 %9921, 0
  %9923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9924 = load i8, i8* %9923, align 1, !tbaa !2450
  %9925 = icmp ne i8 %9924, 0
  %9926 = xor i1 %9922, %9925
  %9927 = xor i1 %9926, true
  %9928 = zext i1 %9927 to i8
  store i8 %9928, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9930 = select i1 %9926, i64 %9917, i64 %9915
  store i64 %9930, i64* %9929, align 8, !tbaa !2428
  %9931 = load i8, i8* %BRANCH_TAKEN
  %9932 = icmp eq i8 %9931, 1
  br i1 %9932, label %block_400c52, label %block_400c4c

block_40102e:                                     ; preds = %block_401014, %block_400ffb
  %MEMORY.43 = phi %struct.Memory* [ %MEMORY.27, %block_400ffb ], [ %MEMORY.27, %block_401014 ]
  %9933 = load i64, i64* %RBP
  %9934 = sub i64 %9933, 2709
  %9935 = load i64, i64* %PC
  %9936 = add i64 %9935, 6
  store i64 %9936, i64* %PC
  %9937 = inttoptr i64 %9934 to i8*
  %9938 = load i8, i8* %9937
  store i8 %9938, i8* %AL, align 1, !tbaa !2451
  %9939 = load i8, i8* %AL
  %9940 = zext i8 %9939 to i64
  %9941 = load i64, i64* %PC
  %9942 = add i64 %9941, 2
  store i64 %9942, i64* %PC
  %9943 = and i64 1, %9940
  %9944 = trunc i64 %9943 to i8
  %9945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9945, align 1, !tbaa !2432
  %9946 = trunc i64 %9943 to i32
  %9947 = and i32 %9946, 255
  %9948 = call i32 @llvm.ctpop.i32(i32 %9947) #16
  %9949 = trunc i32 %9948 to i8
  %9950 = and i8 %9949, 1
  %9951 = xor i8 %9950, 1
  %9952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9951, i8* %9952, align 1, !tbaa !2446
  %9953 = icmp eq i8 %9944, 0
  %9954 = zext i1 %9953 to i8
  %9955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9954, i8* %9955, align 1, !tbaa !2448
  %9956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %9956, align 1, !tbaa !2449
  %9957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9957, align 1, !tbaa !2450
  %9958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9958, align 1, !tbaa !2447
  %9959 = load i64, i64* %PC
  %9960 = sub i64 %9959, 1357
  %9961 = load i64, i64* %PC
  %9962 = add i64 %9961, 6
  %9963 = load i64, i64* %PC
  %9964 = add i64 %9963, 6
  store i64 %9964, i64* %PC
  %9965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9966 = load i8, i8* %9965, align 1, !tbaa !2448
  %9967 = icmp eq i8 %9966, 0
  %9968 = zext i1 %9967 to i8
  store i8 %9968, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9970 = select i1 %9967, i64 %9960, i64 %9962
  store i64 %9970, i64* %9969, align 8, !tbaa !2428
  %9971 = load i8, i8* %BRANCH_TAKEN
  %9972 = icmp eq i8 %9971, 1
  br i1 %9972, label %block_400ae9, label %block_40103c

block_400b04:                                     ; preds = %block_400ae9
  %9973 = add i64 %4863, 4
  store i64 %9973, i64* %PC
  %9974 = inttoptr i64 %4862 to i32*
  %9975 = load i32, i32* %9974
  %9976 = sext i32 %9975 to i64
  store i64 %9976, i64* %RAX, align 8, !tbaa !2428
  %9977 = load i64, i64* %RBP
  %9978 = load i64, i64* %RAX
  %9979 = mul i64 %9978, 4
  %9980 = add i64 %9977, -1328
  %9981 = add i64 %9980, %9979
  %9982 = load i64, i64* %PC
  %9983 = add i64 %9982, 7
  store i64 %9983, i64* %PC
  %9984 = inttoptr i64 %9981 to i32*
  %9985 = load i32, i32* %9984
  %9986 = zext i32 %9985 to i64
  store i64 %9986, i64* %RCX, align 8, !tbaa !2428
  %9987 = load i64, i64* %RBP
  %9988 = sub i64 %9987, 12
  %9989 = load i64, i64* %PC
  %9990 = add i64 %9989, 3
  store i64 %9990, i64* %PC
  %9991 = inttoptr i64 %9988 to i32*
  %9992 = load i32, i32* %9991
  %9993 = zext i32 %9992 to i64
  store i64 %9993, i64* %RDX, align 8, !tbaa !2428
  %9994 = load i64, i64* %RDX
  %9995 = load i64, i64* %PC
  %9996 = add i64 %9995, 3
  store i64 %9996, i64* %PC
  %9997 = trunc i64 %9994 to i32
  %9998 = add i32 1, %9997
  %9999 = zext i32 %9998 to i64
  store i64 %9999, i64* %RDX, align 8, !tbaa !2428
  %10000 = icmp ult i32 %9998, %9997
  %10001 = icmp ult i32 %9998, 1
  %10002 = or i1 %10000, %10001
  %10003 = zext i1 %10002 to i8
  %10004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10003, i8* %10004, align 1, !tbaa !2432
  %10005 = and i32 %9998, 255
  %10006 = call i32 @llvm.ctpop.i32(i32 %10005) #16
  %10007 = trunc i32 %10006 to i8
  %10008 = and i8 %10007, 1
  %10009 = xor i8 %10008, 1
  %10010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10009, i8* %10010, align 1, !tbaa !2446
  %10011 = xor i64 1, %9994
  %10012 = trunc i64 %10011 to i32
  %10013 = xor i32 %10012, %9998
  %10014 = lshr i32 %10013, 4
  %10015 = trunc i32 %10014 to i8
  %10016 = and i8 %10015, 1
  %10017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10016, i8* %10017, align 1, !tbaa !2447
  %10018 = icmp eq i32 %9998, 0
  %10019 = zext i1 %10018 to i8
  %10020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10019, i8* %10020, align 1, !tbaa !2448
  %10021 = lshr i32 %9998, 31
  %10022 = trunc i32 %10021 to i8
  %10023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10022, i8* %10023, align 1, !tbaa !2449
  %10024 = lshr i32 %9997, 31
  %10025 = xor i32 %10021, %10024
  %10026 = add nuw nsw i32 %10025, %10021
  %10027 = icmp eq i32 %10026, 2
  %10028 = zext i1 %10027 to i8
  %10029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10028, i8* %10029, align 1, !tbaa !2450
  %10030 = load i32, i32* %EDX
  %10031 = zext i32 %10030 to i64
  %10032 = load i64, i64* %PC
  %10033 = add i64 %10032, 3
  store i64 %10033, i64* %PC
  %10034 = shl i64 %10031, 32
  %10035 = ashr exact i64 %10034, 32
  store i64 %10035, i64* %RAX, align 8, !tbaa !2428
  %10036 = load i64, i64* %RBP
  %10037 = load i64, i64* %RAX
  %10038 = mul i64 %10037, 4
  %10039 = add i64 %10036, -1328
  %10040 = add i64 %10039, %10038
  %10041 = load i32, i32* %ECX
  %10042 = zext i32 %10041 to i64
  %10043 = load i64, i64* %PC
  %10044 = add i64 %10043, 7
  store i64 %10044, i64* %PC
  %10045 = inttoptr i64 %10040 to i32*
  store i32 %10041, i32* %10045
  %10046 = load i64, i64* %RBP
  %10047 = sub i64 %10046, 4
  %10048 = load i64, i64* %PC
  %10049 = add i64 %10048, 7
  store i64 %10049, i64* %PC
  %10050 = inttoptr i64 %10047 to i32*
  store i32 0, i32* %10050
  br label %block_400b26

block_400c52:                                     ; preds = %block_400c15, %block_400c30, %block_400c4c
  %MEMORY.44 = phi %struct.Memory* [ %MEMORY.48, %block_400c15 ], [ %MEMORY.48, %block_400c30 ], [ %MEMORY.48, %block_400c4c ]
  %10051 = load i64, i64* %PC
  %10052 = add i64 %10051, 5
  %10053 = load i64, i64* %PC
  %10054 = add i64 %10053, 5
  store i64 %10054, i64* %PC
  %10055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10052, i64* %10055, align 8, !tbaa !2428
  %10056 = load i64, i64* %RBP
  %10057 = sub i64 %10056, 8
  %10058 = load i64, i64* %PC
  %10059 = add i64 %10058, 4
  store i64 %10059, i64* %PC
  %10060 = inttoptr i64 %10057 to i32*
  %10061 = load i32, i32* %10060
  %10062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10062, align 1, !tbaa !2432
  %10063 = and i32 %10061, 255
  %10064 = call i32 @llvm.ctpop.i32(i32 %10063) #16
  %10065 = trunc i32 %10064 to i8
  %10066 = and i8 %10065, 1
  %10067 = xor i8 %10066, 1
  %10068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10067, i8* %10068, align 1, !tbaa !2446
  %10069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10069, align 1, !tbaa !2447
  %10070 = icmp eq i32 %10061, 0
  %10071 = zext i1 %10070 to i8
  %10072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10071, i8* %10072, align 1, !tbaa !2448
  %10073 = lshr i32 %10061, 31
  %10074 = trunc i32 %10073 to i8
  %10075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10074, i8* %10075, align 1, !tbaa !2449
  %10076 = lshr i32 %10061, 31
  %10077 = xor i32 %10073, %10076
  %10078 = add nuw nsw i32 %10077, %10076
  %10079 = icmp eq i32 %10078, 2
  %10080 = zext i1 %10079 to i8
  %10081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10080, i8* %10081, align 1, !tbaa !2450
  %10082 = load i64, i64* %PC
  %10083 = sub i64 %10082, 70
  %10084 = load i64, i64* %PC
  %10085 = add i64 %10084, 6
  %10086 = load i64, i64* %PC
  %10087 = add i64 %10086, 6
  store i64 %10087, i64* %PC
  %10088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10089 = load i8, i8* %10088, align 1, !tbaa !2448
  %10090 = icmp eq i8 %10089, 0
  %10091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10092 = load i8, i8* %10091, align 1, !tbaa !2449
  %10093 = icmp ne i8 %10092, 0
  %10094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %10095 = load i8, i8* %10094, align 1, !tbaa !2450
  %10096 = icmp ne i8 %10095, 0
  %10097 = xor i1 %10093, %10096
  %10098 = xor i1 %10097, true
  %10099 = and i1 %10090, %10098
  %10100 = zext i1 %10099 to i8
  store i8 %10100, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %10101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10102 = select i1 %10099, i64 %10083, i64 %10085
  store i64 %10102, i64* %10101, align 8, !tbaa !2428
  %10103 = load i8, i8* %BRANCH_TAKEN
  %10104 = icmp eq i8 %10103, 1
  br i1 %10104, label %block_400c15, label %block_400c61

block_40103c:                                     ; preds = %block_40102e
  %10105 = load i64, i64* %RBP
  %10106 = sub i64 %10105, 12
  %10107 = load i64, i64* %PC
  %10108 = add i64 %10107, 3
  store i64 %10108, i64* %PC
  %10109 = inttoptr i64 %10106 to i32*
  %10110 = load i32, i32* %10109
  %10111 = zext i32 %10110 to i64
  store i64 %10111, i64* %RAX, align 8, !tbaa !2428
  %10112 = load i64, i64* %RAX
  %10113 = load i64, i64* %PC
  %10114 = add i64 %10113, 3
  store i64 %10114, i64* %PC
  %10115 = trunc i64 %10112 to i32
  %10116 = add i32 1, %10115
  %10117 = zext i32 %10116 to i64
  store i64 %10117, i64* %RAX, align 8, !tbaa !2428
  %10118 = icmp ult i32 %10116, %10115
  %10119 = icmp ult i32 %10116, 1
  %10120 = or i1 %10118, %10119
  %10121 = zext i1 %10120 to i8
  %10122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10121, i8* %10122, align 1, !tbaa !2432
  %10123 = and i32 %10116, 255
  %10124 = call i32 @llvm.ctpop.i32(i32 %10123) #16
  %10125 = trunc i32 %10124 to i8
  %10126 = and i8 %10125, 1
  %10127 = xor i8 %10126, 1
  %10128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10127, i8* %10128, align 1, !tbaa !2446
  %10129 = xor i64 1, %10112
  %10130 = trunc i64 %10129 to i32
  %10131 = xor i32 %10130, %10116
  %10132 = lshr i32 %10131, 4
  %10133 = trunc i32 %10132 to i8
  %10134 = and i8 %10133, 1
  %10135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10134, i8* %10135, align 1, !tbaa !2447
  %10136 = icmp eq i32 %10116, 0
  %10137 = zext i1 %10136 to i8
  %10138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10137, i8* %10138, align 1, !tbaa !2448
  %10139 = lshr i32 %10116, 31
  %10140 = trunc i32 %10139 to i8
  %10141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10140, i8* %10141, align 1, !tbaa !2449
  %10142 = lshr i32 %10115, 31
  %10143 = xor i32 %10139, %10142
  %10144 = add nuw nsw i32 %10143, %10139
  %10145 = icmp eq i32 %10144, 2
  %10146 = zext i1 %10145 to i8
  %10147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10146, i8* %10147, align 1, !tbaa !2450
  %10148 = load i64, i64* %RBP
  %10149 = sub i64 %10148, 12
  %10150 = load i32, i32* %EAX
  %10151 = zext i32 %10150 to i64
  %10152 = load i64, i64* %PC
  %10153 = add i64 %10152, 3
  store i64 %10153, i64* %PC
  %10154 = inttoptr i64 %10149 to i32*
  store i32 %10150, i32* %10154
  %10155 = load i64, i64* %RBP
  %10156 = sub i64 %10155, 12
  %10157 = load i64, i64* %PC
  %10158 = add i64 %10157, 4
  store i64 %10158, i64* %PC
  %10159 = inttoptr i64 %10156 to i32*
  %10160 = load i32, i32* %10159
  %10161 = sext i32 %10160 to i64
  store i64 %10161, i64* %RCX, align 8, !tbaa !2428
  %10162 = load i64, i64* %RBP
  %10163 = load i64, i64* %RCX
  %10164 = mul i64 %10163, 4
  %10165 = add i64 %10162, -1328
  %10166 = add i64 %10165, %10164
  %10167 = load i64, i64* %PC
  %10168 = add i64 %10167, 8
  store i64 %10168, i64* %PC
  %10169 = inttoptr i64 %10166 to i32*
  %10170 = load i32, i32* %10169
  %10171 = sub i32 %10170, 8
  %10172 = icmp ult i32 %10170, 8
  %10173 = zext i1 %10172 to i8
  %10174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10173, i8* %10174, align 1, !tbaa !2432
  %10175 = and i32 %10171, 255
  %10176 = call i32 @llvm.ctpop.i32(i32 %10175) #16
  %10177 = trunc i32 %10176 to i8
  %10178 = and i8 %10177, 1
  %10179 = xor i8 %10178, 1
  %10180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10179, i8* %10180, align 1, !tbaa !2446
  %10181 = xor i32 %10170, 8
  %10182 = xor i32 %10181, %10171
  %10183 = lshr i32 %10182, 4
  %10184 = trunc i32 %10183 to i8
  %10185 = and i8 %10184, 1
  %10186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10185, i8* %10186, align 1, !tbaa !2447
  %10187 = icmp eq i32 %10171, 0
  %10188 = zext i1 %10187 to i8
  %10189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10188, i8* %10189, align 1, !tbaa !2448
  %10190 = lshr i32 %10171, 31
  %10191 = trunc i32 %10190 to i8
  %10192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10191, i8* %10192, align 1, !tbaa !2449
  %10193 = lshr i32 %10170, 31
  %10194 = xor i32 %10190, %10193
  %10195 = add nuw nsw i32 %10194, %10193
  %10196 = icmp eq i32 %10195, 2
  %10197 = zext i1 %10196 to i8
  %10198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10197, i8* %10198, align 1, !tbaa !2450
  %10199 = load i64, i64* %PC
  %10200 = add i64 %10199, 1847
  %10201 = load i64, i64* %PC
  %10202 = add i64 %10201, 6
  %10203 = load i64, i64* %PC
  %10204 = add i64 %10203, 6
  store i64 %10204, i64* %PC
  %10205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10206 = load i8, i8* %10205, align 1, !tbaa !2448
  %10207 = icmp eq i8 %10206, 0
  %10208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10209 = load i8, i8* %10208, align 1, !tbaa !2449
  %10210 = icmp ne i8 %10209, 0
  %10211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %10212 = load i8, i8* %10211, align 1, !tbaa !2450
  %10213 = icmp ne i8 %10212, 0
  %10214 = xor i1 %10210, %10213
  %10215 = xor i1 %10214, true
  %10216 = and i1 %10207, %10215
  %10217 = zext i1 %10216 to i8
  store i8 %10217, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %10218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10219 = select i1 %10216, i64 %10200, i64 %10202
  store i64 %10219, i64* %10218, align 8, !tbaa !2428
  %10220 = load i8, i8* %BRANCH_TAKEN
  %10221 = icmp eq i8 %10220, 1
  %10222 = load i64, i64* %RBP
  %10223 = sub i64 %10222, 4
  %10224 = load i64, i64* %PC
  %10225 = add i64 %10224, 7
  store i64 %10225, i64* %PC
  %10226 = inttoptr i64 %10223 to i32*
  store i32 0, i32* %10226
  br i1 %10221, label %block_40178f, label %block_40105e

block_40119d:                                     ; preds = %block_401143, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit6
  %MEMORY.45 = phi %struct.Memory* [ %MEMORY.13, %block_401143 ], [ %2174, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit6 ]
  %10227 = load i64, i64* %PC
  %10228 = add i64 %10227, 5
  %10229 = load i64, i64* %PC
  %10230 = add i64 %10229, 5
  store i64 %10230, i64* %PC
  %10231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10228, i64* %10231, align 8, !tbaa !2428
  %10232 = load i64, i64* %RBP
  %10233 = sub i64 %10232, 8
  %10234 = load i64, i64* %PC
  %10235 = add i64 %10234, 3
  store i64 %10235, i64* %PC
  %10236 = inttoptr i64 %10233 to i32*
  %10237 = load i32, i32* %10236
  %10238 = zext i32 %10237 to i64
  store i64 %10238, i64* %RAX, align 8, !tbaa !2428
  %10239 = load i64, i64* %RAX
  %10240 = load i64, i64* %PC
  %10241 = add i64 %10240, 3
  store i64 %10241, i64* %PC
  %10242 = trunc i64 %10239 to i32
  %10243 = add i32 1, %10242
  %10244 = zext i32 %10243 to i64
  store i64 %10244, i64* %RAX, align 8, !tbaa !2428
  %10245 = icmp ult i32 %10243, %10242
  %10246 = icmp ult i32 %10243, 1
  %10247 = or i1 %10245, %10246
  %10248 = zext i1 %10247 to i8
  %10249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10248, i8* %10249, align 1, !tbaa !2432
  %10250 = and i32 %10243, 255
  %10251 = call i32 @llvm.ctpop.i32(i32 %10250) #16
  %10252 = trunc i32 %10251 to i8
  %10253 = and i8 %10252, 1
  %10254 = xor i8 %10253, 1
  %10255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10254, i8* %10255, align 1, !tbaa !2446
  %10256 = xor i64 1, %10239
  %10257 = trunc i64 %10256 to i32
  %10258 = xor i32 %10257, %10243
  %10259 = lshr i32 %10258, 4
  %10260 = trunc i32 %10259 to i8
  %10261 = and i8 %10260, 1
  %10262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10261, i8* %10262, align 1, !tbaa !2447
  %10263 = icmp eq i32 %10243, 0
  %10264 = zext i1 %10263 to i8
  %10265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10264, i8* %10265, align 1, !tbaa !2448
  %10266 = lshr i32 %10243, 31
  %10267 = trunc i32 %10266 to i8
  %10268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10267, i8* %10268, align 1, !tbaa !2449
  %10269 = lshr i32 %10242, 31
  %10270 = xor i32 %10266, %10269
  %10271 = add nuw nsw i32 %10270, %10266
  %10272 = icmp eq i32 %10271, 2
  %10273 = zext i1 %10272 to i8
  %10274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10273, i8* %10274, align 1, !tbaa !2450
  %10275 = load i64, i64* %RBP
  %10276 = sub i64 %10275, 8
  %10277 = load i32, i32* %EAX
  %10278 = zext i32 %10277 to i64
  %10279 = load i64, i64* %PC
  %10280 = add i64 %10279, 3
  store i64 %10280, i64* %PC
  %10281 = inttoptr i64 %10276 to i32*
  store i32 %10277, i32* %10281
  %10282 = load i64, i64* %PC
  %10283 = sub i64 %10282, 124
  %10284 = load i64, i64* %PC
  %10285 = add i64 %10284, 5
  store i64 %10285, i64* %PC
  %10286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10283, i64* %10286, align 8, !tbaa !2428
  br label %block_40112f

block_400d0c:                                     ; preds = %block_400cd2
  %10287 = sub i64 %4512, 4
  %10288 = load i64, i64* %PC
  %10289 = add i64 %10288, 7
  store i64 %10289, i64* %PC
  %10290 = inttoptr i64 %10287 to i32*
  store i32 0, i32* %10290
  br label %block_400d13

block_401823:                                     ; preds = %block_401811
  %10291 = add i64 %11026, 8
  store i64 %10291, i64* %PC
  %10292 = inttoptr i64 %11025 to i32*
  %10293 = load i32, i32* %10292
  %10294 = sext i32 %10293 to i64
  store i64 %10294, i64* %RAX, align 8, !tbaa !2428
  %10295 = load i64, i64* %RAX
  %10296 = mul i64 %10295, 4
  %10297 = add i64 %10296, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %10298 = load i64, i64* %PC
  %10299 = add i64 %10298, 7
  store i64 %10299, i64* %PC
  %10300 = inttoptr i64 %10297 to i32*
  %10301 = load i32, i32* %10300
  %10302 = zext i32 %10301 to i64
  store i64 %10302, i64* %RCX, align 8, !tbaa !2428
  %10303 = load i64, i64* %RBP
  %10304 = sub i64 %10303, 4
  %10305 = load i64, i64* %PC
  %10306 = add i64 %10305, 4
  store i64 %10306, i64* %PC
  %10307 = inttoptr i64 %10304 to i32*
  %10308 = load i32, i32* %10307
  %10309 = sext i32 %10308 to i64
  store i64 %10309, i64* %RAX, align 8, !tbaa !2428
  %10310 = load i64, i64* %RAX
  %10311 = mul i64 %10310, 4
  %10312 = add i64 %10311, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %10313 = load i32, i32* %ECX
  %10314 = zext i32 %10313 to i64
  %10315 = load i64, i64* %PC
  %10316 = add i64 %10315, 7
  store i64 %10316, i64* %PC
  %10317 = inttoptr i64 %10312 to i32*
  store i32 %10313, i32* %10317
  %10318 = load i64, i64* %PC
  %10319 = add i64 %10318, 20
  %10320 = load i64, i64* %PC
  %10321 = add i64 %10320, 5
  store i64 %10321, i64* %PC
  %10322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10319, i64* %10322, align 8, !tbaa !2428
  br label %block_401855

block_401421:                                     ; preds = %block_4013a1, %block_40138f, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7
  %MEMORY.46 = phi %struct.Memory* [ %MEMORY.42, %block_40138f ], [ %MEMORY.42, %block_4013a1 ], [ %1236, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7 ]
  %10323 = load i64, i64* %PC
  %10324 = add i64 %10323, 5
  %10325 = load i64, i64* %PC
  %10326 = add i64 %10325, 5
  store i64 %10326, i64* %PC
  %10327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10324, i64* %10327, align 8, !tbaa !2428
  %10328 = load i64, i64* %RBP
  %10329 = sub i64 %10328, 8
  %10330 = load i64, i64* %PC
  %10331 = add i64 %10330, 3
  store i64 %10331, i64* %PC
  %10332 = inttoptr i64 %10329 to i32*
  %10333 = load i32, i32* %10332
  %10334 = zext i32 %10333 to i64
  store i64 %10334, i64* %RAX, align 8, !tbaa !2428
  %10335 = load i64, i64* %RAX
  %10336 = load i64, i64* %PC
  %10337 = add i64 %10336, 3
  store i64 %10337, i64* %PC
  %10338 = trunc i64 %10335 to i32
  %10339 = add i32 1, %10338
  %10340 = zext i32 %10339 to i64
  store i64 %10340, i64* %RAX, align 8, !tbaa !2428
  %10341 = icmp ult i32 %10339, %10338
  %10342 = icmp ult i32 %10339, 1
  %10343 = or i1 %10341, %10342
  %10344 = zext i1 %10343 to i8
  %10345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10344, i8* %10345, align 1, !tbaa !2432
  %10346 = and i32 %10339, 255
  %10347 = call i32 @llvm.ctpop.i32(i32 %10346) #16
  %10348 = trunc i32 %10347 to i8
  %10349 = and i8 %10348, 1
  %10350 = xor i8 %10349, 1
  %10351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10350, i8* %10351, align 1, !tbaa !2446
  %10352 = xor i64 1, %10335
  %10353 = trunc i64 %10352 to i32
  %10354 = xor i32 %10353, %10339
  %10355 = lshr i32 %10354, 4
  %10356 = trunc i32 %10355 to i8
  %10357 = and i8 %10356, 1
  %10358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10357, i8* %10358, align 1, !tbaa !2447
  %10359 = icmp eq i32 %10339, 0
  %10360 = zext i1 %10359 to i8
  %10361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10360, i8* %10361, align 1, !tbaa !2448
  %10362 = lshr i32 %10339, 31
  %10363 = trunc i32 %10362 to i8
  %10364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10363, i8* %10364, align 1, !tbaa !2449
  %10365 = lshr i32 %10338, 31
  %10366 = xor i32 %10362, %10365
  %10367 = add nuw nsw i32 %10366, %10362
  %10368 = icmp eq i32 %10367, 2
  %10369 = zext i1 %10368 to i8
  %10370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10369, i8* %10370, align 1, !tbaa !2450
  %10371 = load i64, i64* %RBP
  %10372 = sub i64 %10371, 8
  %10373 = load i32, i32* %EAX
  %10374 = zext i32 %10373 to i64
  %10375 = load i64, i64* %PC
  %10376 = add i64 %10375, 3
  store i64 %10376, i64* %PC
  %10377 = inttoptr i64 %10372 to i32*
  store i32 %10373, i32* %10377
  %10378 = load i64, i64* %PC
  %10379 = sub i64 %10378, 172
  %10380 = load i64, i64* %PC
  %10381 = add i64 %10380, 5
  store i64 %10381, i64* %PC
  %10382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10379, i64* %10382, align 8, !tbaa !2428
  br label %block_401383

block_4015bc:                                     ; preds = %block_4015a2
  %10383 = load i64, i64* %RBP
  %10384 = sub i64 %10383, 4
  %10385 = load i64, i64* %PC
  %10386 = add i64 %10385, 4
  store i64 %10386, i64* %PC
  %10387 = inttoptr i64 %10384 to i32*
  %10388 = load i32, i32* %10387
  %10389 = sext i32 %10388 to i64
  store i64 %10389, i64* %RAX, align 8, !tbaa !2428
  %10390 = load i64, i64* %RBP
  %10391 = load i64, i64* %RAX
  %10392 = mul i64 %10391, 4
  %10393 = add i64 %10390, -1568
  %10394 = add i64 %10393, %10392
  %10395 = load i64, i64* %PC
  %10396 = add i64 %10395, 8
  store i64 %10396, i64* %PC
  %10397 = inttoptr i64 %10394 to i32*
  %10398 = load i32, i32* %10397
  %10399 = sext i32 %10398 to i64
  store i64 %10399, i64* %RAX, align 8, !tbaa !2428
  %10400 = load i64, i64* %RBP
  %10401 = load i64, i64* %RAX
  %10402 = mul i64 %10401, 4
  %10403 = add i64 %10400, -2640
  %10404 = add i64 %10403, %10402
  %10405 = load i64, i64* %PC
  %10406 = add i64 %10405, 8
  store i64 %10406, i64* %PC
  %10407 = inttoptr i64 %10404 to i32*
  %10408 = load i32, i32* %10407
  %10409 = sext i32 %10408 to i64
  store i64 %10409, i64* %RAX, align 8, !tbaa !2428
  %10410 = load i64, i64* %RAX
  %10411 = mul i64 %10410, 4
  %10412 = add i64 %10411, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %10413 = load i64, i64* %PC
  %10414 = add i64 %10413, 7
  store i64 %10414, i64* %PC
  %10415 = inttoptr i64 %10412 to i32*
  %10416 = load i32, i32* %10415
  %10417 = zext i32 %10416 to i64
  store i64 %10417, i64* %RCX, align 8, !tbaa !2428
  %10418 = load i64, i64* %RBP
  %10419 = sub i64 %10418, 4
  %10420 = load i64, i64* %PC
  %10421 = add i64 %10420, 4
  store i64 %10421, i64* %PC
  %10422 = inttoptr i64 %10419 to i32*
  %10423 = load i32, i32* %10422
  %10424 = sext i32 %10423 to i64
  store i64 %10424, i64* %RAX, align 8, !tbaa !2428
  %10425 = load i64, i64* %RBP
  %10426 = load i64, i64* %RAX
  %10427 = mul i64 %10426, 4
  %10428 = add i64 %10425, -1568
  %10429 = add i64 %10428, %10427
  %10430 = load i64, i64* %PC
  %10431 = add i64 %10430, 8
  store i64 %10431, i64* %PC
  %10432 = inttoptr i64 %10429 to i32*
  %10433 = load i32, i32* %10432
  %10434 = sext i32 %10433 to i64
  store i64 %10434, i64* %RAX, align 8, !tbaa !2428
  %10435 = load i64, i64* %RBP
  %10436 = load i64, i64* %RAX
  %10437 = mul i64 %10436, 4
  %10438 = add i64 %10435, -2640
  %10439 = add i64 %10438, %10437
  %10440 = load i32, i32* %ECX
  %10441 = zext i32 %10440 to i64
  %10442 = load i64, i64* %PC
  %10443 = add i64 %10442, 7
  store i64 %10443, i64* %PC
  %10444 = inttoptr i64 %10439 to i32*
  store i32 %10440, i32* %10444
  %10445 = load i64, i64* %RBP
  %10446 = sub i64 %10445, 16
  %10447 = load i64, i64* %PC
  %10448 = add i64 %10447, 7
  store i64 %10448, i64* %PC
  %10449 = inttoptr i64 %10446 to i32*
  store i32 0, i32* %10449
  %10450 = load i64, i64* %RBP
  %10451 = sub i64 %10450, 8
  %10452 = load i64, i64* %PC
  %10453 = add i64 %10452, 7
  store i64 %10453, i64* %PC
  %10454 = inttoptr i64 %10451 to i32*
  store i32 0, i32* %10454
  br label %block_4015f8

block_4009fe:                                     ; preds = %block_400986
  %10455 = sub i64 %2018, 4
  %10456 = load i64, i64* %PC
  %10457 = add i64 %10456, 4
  store i64 %10457, i64* %PC
  %10458 = inttoptr i64 %10455 to i32*
  %10459 = load i32, i32* %10458
  %10460 = sext i32 %10459 to i64
  store i64 %10460, i64* %RAX, align 8, !tbaa !2428
  %10461 = load i64, i64* %RBP
  %10462 = load i64, i64* %RAX
  %10463 = mul i64 %10462, 4
  %10464 = add i64 %10461, -1488
  %10465 = add i64 %10464, %10463
  %10466 = load i64, i64* %PC
  %10467 = add i64 %10466, 8
  store i64 %10467, i64* %PC
  %10468 = inttoptr i64 %10465 to i32*
  %10469 = load i32, i32* %10468
  %10470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10470, align 1, !tbaa !2432
  %10471 = and i32 %10469, 255
  %10472 = call i32 @llvm.ctpop.i32(i32 %10471) #16
  %10473 = trunc i32 %10472 to i8
  %10474 = and i8 %10473, 1
  %10475 = xor i8 %10474, 1
  %10476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10475, i8* %10476, align 1, !tbaa !2446
  %10477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10477, align 1, !tbaa !2447
  %10478 = icmp eq i32 %10469, 0
  %10479 = zext i1 %10478 to i8
  %10480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10479, i8* %10480, align 1, !tbaa !2448
  %10481 = lshr i32 %10469, 31
  %10482 = trunc i32 %10481 to i8
  %10483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10482, i8* %10483, align 1, !tbaa !2449
  %10484 = lshr i32 %10469, 31
  %10485 = xor i32 %10481, %10484
  %10486 = add nuw nsw i32 %10485, %10484
  %10487 = icmp eq i32 %10486, 2
  %10488 = zext i1 %10487 to i8
  %10489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10488, i8* %10489, align 1, !tbaa !2450
  %10490 = load i64, i64* %PC
  %10491 = add i64 %10490, 16
  %10492 = load i64, i64* %PC
  %10493 = add i64 %10492, 6
  %10494 = load i64, i64* %PC
  %10495 = add i64 %10494, 6
  store i64 %10495, i64* %PC
  %10496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10497 = load i8, i8* %10496, align 1, !tbaa !2448
  store i8 %10497, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %10498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10499 = icmp ne i8 %10497, 0
  %10500 = select i1 %10499, i64 %10491, i64 %10493
  store i64 %10500, i64* %10498, align 8, !tbaa !2428
  %10501 = load i8, i8* %BRANCH_TAKEN
  %10502 = icmp eq i8 %10501, 1
  br i1 %10502, label %block_400a1a, label %block_400a10

block_40137c:                                     ; preds = %block_401267, %block_401377
  %MEMORY.47 = phi %struct.Memory* [ %MEMORY.3, %block_401377 ], [ %MEMORY.19, %block_401267 ]
  %10503 = load i64, i64* %RBP
  %10504 = sub i64 %10503, 8
  %10505 = load i64, i64* %PC
  %10506 = add i64 %10505, 7
  store i64 %10506, i64* %PC
  %10507 = inttoptr i64 %10504 to i32*
  store i32 1, i32* %10507
  br label %block_401383

block_401618:                                     ; preds = %block_40160c
  %10508 = load i64, i64* %PC
  %10509 = add i64 %10508, 5
  store i64 %10509, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %10510 = load i64, i64* %RBP
  %10511 = sub i64 %10510, 8
  %10512 = load i64, i64* %PC
  %10513 = add i64 %10512, 4
  store i64 %10513, i64* %PC
  %10514 = inttoptr i64 %10511 to i32*
  %10515 = load i32, i32* %10514
  %10516 = sext i32 %10515 to i64
  store i64 %10516, i64* %RCX, align 8, !tbaa !2428
  %10517 = load i64, i64* %RBP
  %10518 = load i64, i64* %RCX
  %10519 = mul i64 %10518, 4
  %10520 = add i64 %10517, -1568
  %10521 = add i64 %10520, %10519
  %10522 = load i64, i64* %PC
  %10523 = add i64 %10522, 7
  store i64 %10523, i64* %PC
  %10524 = inttoptr i64 %10521 to i32*
  %10525 = load i32, i32* %10524
  %10526 = zext i32 %10525 to i64
  store i64 %10526, i64* %RDX, align 8, !tbaa !2428
  %10527 = load i64, i64* %RBP
  %10528 = sub i64 %10527, 4
  %10529 = load i64, i64* %PC
  %10530 = add i64 %10529, 4
  store i64 %10530, i64* %PC
  %10531 = inttoptr i64 %10528 to i32*
  %10532 = load i32, i32* %10531
  %10533 = sext i32 %10532 to i64
  store i64 %10533, i64* %RCX, align 8, !tbaa !2428
  %10534 = load i64, i64* %RDX
  %10535 = load i64, i64* %RBP
  %10536 = load i64, i64* %RCX
  %10537 = mul i64 %10536, 4
  %10538 = add i64 %10535, -1536
  %10539 = add i64 %10538, %10537
  %10540 = load i64, i64* %PC
  %10541 = add i64 %10540, 7
  store i64 %10541, i64* %PC
  %10542 = trunc i64 %10534 to i32
  %10543 = inttoptr i64 %10539 to i32*
  %10544 = load i32, i32* %10543
  %10545 = add i32 %10544, %10542
  %10546 = zext i32 %10545 to i64
  store i64 %10546, i64* %RDX, align 8, !tbaa !2428
  %10547 = icmp ult i32 %10545, %10542
  %10548 = icmp ult i32 %10545, %10544
  %10549 = or i1 %10547, %10548
  %10550 = zext i1 %10549 to i8
  %10551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10550, i8* %10551, align 1, !tbaa !2432
  %10552 = and i32 %10545, 255
  %10553 = call i32 @llvm.ctpop.i32(i32 %10552) #16
  %10554 = trunc i32 %10553 to i8
  %10555 = and i8 %10554, 1
  %10556 = xor i8 %10555, 1
  %10557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10556, i8* %10557, align 1, !tbaa !2446
  %10558 = xor i32 %10544, %10542
  %10559 = xor i32 %10558, %10545
  %10560 = lshr i32 %10559, 4
  %10561 = trunc i32 %10560 to i8
  %10562 = and i8 %10561, 1
  %10563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10562, i8* %10563, align 1, !tbaa !2447
  %10564 = icmp eq i32 %10545, 0
  %10565 = zext i1 %10564 to i8
  %10566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10565, i8* %10566, align 1, !tbaa !2448
  %10567 = lshr i32 %10545, 31
  %10568 = trunc i32 %10567 to i8
  %10569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10568, i8* %10569, align 1, !tbaa !2449
  %10570 = lshr i32 %10542, 31
  %10571 = lshr i32 %10544, 31
  %10572 = xor i32 %10567, %10570
  %10573 = xor i32 %10567, %10571
  %10574 = add nuw nsw i32 %10572, %10573
  %10575 = icmp eq i32 %10574, 2
  %10576 = zext i1 %10575 to i8
  %10577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10576, i8* %10577, align 1, !tbaa !2450
  %10578 = load i64, i64* %RBP
  %10579 = sub i64 %10578, 2728
  %10580 = load i32, i32* %EAX
  %10581 = zext i32 %10580 to i64
  %10582 = load i64, i64* %PC
  %10583 = add i64 %10582, 6
  store i64 %10583, i64* %PC
  %10584 = inttoptr i64 %10579 to i32*
  store i32 %10580, i32* %10584
  %10585 = load i32, i32* %EDX
  %10586 = zext i32 %10585 to i64
  %10587 = load i64, i64* %PC
  %10588 = add i64 %10587, 2
  store i64 %10588, i64* %PC
  %10589 = and i64 %10586, 4294967295
  store i64 %10589, i64* %RAX, align 8, !tbaa !2428
  %10590 = load i64, i64* %PC
  %10591 = add i64 %10590, 1
  store i64 %10591, i64* %PC
  %10592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %10593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %10594 = bitcast %union.anon* %10593 to i32*
  %10595 = load i32, i32* %10594, align 8, !tbaa !2452
  %10596 = sext i32 %10595 to i64
  %10597 = lshr i64 %10596, 32
  store i64 %10597, i64* %10592, align 8, !tbaa !2428
  %10598 = load i64, i64* %RBP
  %10599 = sub i64 %10598, 2728
  %10600 = load i64, i64* %PC
  %10601 = add i64 %10600, 6
  store i64 %10601, i64* %PC
  %10602 = inttoptr i64 %10599 to i32*
  %10603 = load i32, i32* %10602
  %10604 = zext i32 %10603 to i64
  store i64 %10604, i64* %RSI, align 8, !tbaa !2428
  %10605 = load i32, i32* %ESI
  %10606 = zext i32 %10605 to i64
  %10607 = load i64, i64* %PC
  %10608 = add i64 %10607, 2
  store i64 %10608, i64* %PC
  %10609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %10610 = bitcast %union.anon* %10609 to i32*
  %10611 = load i32, i32* %10610, align 8, !tbaa !2452
  %10612 = zext i32 %10611 to i64
  %10613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %10614 = bitcast %union.anon* %10613 to i32*
  %10615 = load i32, i32* %10614, align 8, !tbaa !2452
  %10616 = zext i32 %10615 to i64
  %10617 = shl i64 %10606, 32
  %10618 = ashr exact i64 %10617, 32
  %10619 = shl nuw i64 %10616, 32
  %10620 = or i64 %10619, %10612
  %10621 = sdiv i64 %10620, %10618
  %10622 = shl i64 %10621, 32
  %10623 = ashr exact i64 %10622, 32
  %10624 = icmp eq i64 %10621, %10623
  br i1 %10624, label %10629, label %10625

; <label>:10625:                                  ; preds = %block_401618
  %10626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10627 = load i64, i64* %10626, align 8, !tbaa !2428
  %10628 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10627, %struct.Memory* %MEMORY.17) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:10629:                                  ; preds = %block_401618
  %10630 = srem i64 %10620, %10618
  %10631 = getelementptr inbounds %union.anon, %union.anon* %10609, i64 0, i32 0
  %10632 = and i64 %10621, 4294967295
  store i64 %10632, i64* %10631, align 8, !tbaa !2428
  %10633 = getelementptr inbounds %union.anon, %union.anon* %10613, i64 0, i32 0
  %10634 = and i64 %10630, 4294967295
  store i64 %10634, i64* %10633, align 8, !tbaa !2428
  %10635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10635, align 1, !tbaa !2432
  %10636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %10636, align 1, !tbaa !2446
  %10637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10637, align 1, !tbaa !2447
  %10638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10638, align 1, !tbaa !2448
  %10639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %10639, align 1, !tbaa !2449
  %10640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %10640, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %10625, %10629
  %10641 = phi %struct.Memory* [ %10628, %10625 ], [ %MEMORY.17, %10629 ]
  %10642 = load i32, i32* %EDX
  %10643 = zext i32 %10642 to i64
  %10644 = load i64, i64* %PC
  %10645 = add i64 %10644, 3
  store i64 %10645, i64* %PC
  %10646 = shl i64 %10643, 32
  %10647 = ashr exact i64 %10646, 32
  store i64 %10647, i64* %RCX, align 8, !tbaa !2428
  %10648 = load i64, i64* %RCX
  %10649 = mul i64 %10648, 4
  %10650 = add i64 %10649, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %10651 = load i64, i64* %PC
  %10652 = add i64 %10651, 7
  store i64 %10652, i64* %PC
  %10653 = inttoptr i64 %10650 to i32*
  %10654 = load i32, i32* %10653
  %10655 = zext i32 %10654 to i64
  store i64 %10655, i64* %RDX, align 8, !tbaa !2428
  %10656 = load i64, i64* %RDX
  %10657 = load i64, i64* %PC
  %10658 = add i64 %10657, 3
  store i64 %10658, i64* %PC
  %10659 = xor i64 1, %10656
  %10660 = trunc i64 %10659 to i32
  %10661 = and i64 %10659, 4294967295
  store i64 %10661, i64* %RDX, align 8, !tbaa !2428
  %10662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10662, align 1, !tbaa !2432
  %10663 = and i32 %10660, 255
  %10664 = call i32 @llvm.ctpop.i32(i32 %10663) #16
  %10665 = trunc i32 %10664 to i8
  %10666 = and i8 %10665, 1
  %10667 = xor i8 %10666, 1
  %10668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10667, i8* %10668, align 1, !tbaa !2446
  %10669 = icmp eq i32 %10660, 0
  %10670 = zext i1 %10669 to i8
  %10671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10670, i8* %10671, align 1, !tbaa !2448
  %10672 = lshr i32 %10660, 31
  %10673 = trunc i32 %10672 to i8
  %10674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10673, i8* %10674, align 1, !tbaa !2449
  %10675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %10675, align 1, !tbaa !2450
  %10676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10676, align 1, !tbaa !2447
  %10677 = load i32, i32* %EDX
  %10678 = zext i32 %10677 to i64
  %10679 = load i64, i64* %PC
  %10680 = add i64 %10679, 3
  store i64 %10680, i64* %PC
  %10681 = shl i64 %10678, 32
  %10682 = ashr exact i64 %10681, 32
  store i64 %10682, i64* %RCX, align 8, !tbaa !2428
  %10683 = load i64, i64* %RCX
  %10684 = mul i64 %10683, 4
  %10685 = add i64 %10684, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %10686 = load i64, i64* %PC
  %10687 = add i64 %10686, 7
  store i64 %10687, i64* %PC
  %10688 = inttoptr i64 %10685 to i32*
  %10689 = load i32, i32* %10688
  %10690 = zext i32 %10689 to i64
  store i64 %10690, i64* %RDX, align 8, !tbaa !2428
  %10691 = load i64, i64* %RDX
  %10692 = load i64, i64* %RBP
  %10693 = sub i64 %10692, 16
  %10694 = load i64, i64* %PC
  %10695 = add i64 %10694, 3
  store i64 %10695, i64* %PC
  %10696 = trunc i64 %10691 to i32
  %10697 = inttoptr i64 %10693 to i32*
  %10698 = load i32, i32* %10697
  %10699 = add i32 %10698, %10696
  %10700 = zext i32 %10699 to i64
  store i64 %10700, i64* %RDX, align 8, !tbaa !2428
  %10701 = icmp ult i32 %10699, %10696
  %10702 = icmp ult i32 %10699, %10698
  %10703 = or i1 %10701, %10702
  %10704 = zext i1 %10703 to i8
  %10705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10704, i8* %10705, align 1, !tbaa !2432
  %10706 = and i32 %10699, 255
  %10707 = call i32 @llvm.ctpop.i32(i32 %10706) #16
  %10708 = trunc i32 %10707 to i8
  %10709 = and i8 %10708, 1
  %10710 = xor i8 %10709, 1
  %10711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10710, i8* %10711, align 1, !tbaa !2446
  %10712 = xor i32 %10698, %10696
  %10713 = xor i32 %10712, %10699
  %10714 = lshr i32 %10713, 4
  %10715 = trunc i32 %10714 to i8
  %10716 = and i8 %10715, 1
  %10717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10716, i8* %10717, align 1, !tbaa !2447
  %10718 = icmp eq i32 %10699, 0
  %10719 = zext i1 %10718 to i8
  %10720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10719, i8* %10720, align 1, !tbaa !2448
  %10721 = lshr i32 %10699, 31
  %10722 = trunc i32 %10721 to i8
  %10723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10722, i8* %10723, align 1, !tbaa !2449
  %10724 = lshr i32 %10696, 31
  %10725 = lshr i32 %10698, 31
  %10726 = xor i32 %10721, %10724
  %10727 = xor i32 %10721, %10725
  %10728 = add nuw nsw i32 %10726, %10727
  %10729 = icmp eq i32 %10728, 2
  %10730 = zext i1 %10729 to i8
  %10731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10730, i8* %10731, align 1, !tbaa !2450
  %10732 = load i64, i64* %RBP
  %10733 = sub i64 %10732, 16
  %10734 = load i32, i32* %EDX
  %10735 = zext i32 %10734 to i64
  %10736 = load i64, i64* %PC
  %10737 = add i64 %10736, 3
  store i64 %10737, i64* %PC
  %10738 = inttoptr i64 %10733 to i32*
  store i32 %10734, i32* %10738
  br label %block_401661

block_400c15:                                     ; preds = %block_400c0f, %block_400c52
  %MEMORY.48 = phi %struct.Memory* [ %MEMORY.14, %block_400c0f ], [ %MEMORY.44, %block_400c52 ]
  %10739 = load i64, i64* %RBP
  %10740 = sub i64 %10739, 8
  %10741 = load i64, i64* %PC
  %10742 = add i64 %10741, 3
  store i64 %10742, i64* %PC
  %10743 = inttoptr i64 %10740 to i32*
  %10744 = load i32, i32* %10743
  %10745 = zext i32 %10744 to i64
  store i64 %10745, i64* %RAX, align 8, !tbaa !2428
  %10746 = load i64, i64* %RAX
  %10747 = load i64, i64* %PC
  %10748 = add i64 %10747, 3
  store i64 %10748, i64* %PC
  %10749 = trunc i64 %10746 to i32
  %10750 = add i32 -1, %10749
  %10751 = zext i32 %10750 to i64
  store i64 %10751, i64* %RAX, align 8, !tbaa !2428
  %10752 = icmp ult i32 %10750, %10749
  %10753 = icmp ult i32 %10750, -1
  %10754 = or i1 %10752, %10753
  %10755 = zext i1 %10754 to i8
  %10756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10755, i8* %10756, align 1, !tbaa !2432
  %10757 = and i32 %10750, 255
  %10758 = call i32 @llvm.ctpop.i32(i32 %10757) #16
  %10759 = trunc i32 %10758 to i8
  %10760 = and i8 %10759, 1
  %10761 = xor i8 %10760, 1
  %10762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10761, i8* %10762, align 1, !tbaa !2446
  %10763 = xor i64 -1, %10746
  %10764 = trunc i64 %10763 to i32
  %10765 = xor i32 %10764, %10750
  %10766 = lshr i32 %10765, 4
  %10767 = trunc i32 %10766 to i8
  %10768 = and i8 %10767, 1
  %10769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10768, i8* %10769, align 1, !tbaa !2447
  %10770 = icmp eq i32 %10750, 0
  %10771 = zext i1 %10770 to i8
  %10772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10771, i8* %10772, align 1, !tbaa !2448
  %10773 = lshr i32 %10750, 31
  %10774 = trunc i32 %10773 to i8
  %10775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10774, i8* %10775, align 1, !tbaa !2449
  %10776 = lshr i32 %10749, 31
  %10777 = xor i32 %10773, %10776
  %10778 = xor i32 %10773, 1
  %10779 = add nuw nsw i32 %10777, %10778
  %10780 = icmp eq i32 %10779, 2
  %10781 = zext i1 %10780 to i8
  %10782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10781, i8* %10782, align 1, !tbaa !2450
  %10783 = load i64, i64* %RBP
  %10784 = sub i64 %10783, 8
  %10785 = load i32, i32* %EAX
  %10786 = zext i32 %10785 to i64
  %10787 = load i64, i64* %PC
  %10788 = add i64 %10787, 3
  store i64 %10788, i64* %PC
  %10789 = inttoptr i64 %10784 to i32*
  store i32 %10785, i32* %10789
  %10790 = load i64, i64* %RBP
  %10791 = sub i64 %10790, 8
  %10792 = load i64, i64* %PC
  %10793 = add i64 %10792, 4
  store i64 %10793, i64* %PC
  %10794 = inttoptr i64 %10791 to i32*
  %10795 = load i32, i32* %10794
  %10796 = sext i32 %10795 to i64
  store i64 %10796, i64* %RCX, align 8, !tbaa !2428
  %10797 = load i64, i64* %RBP
  %10798 = load i64, i64* %RCX
  %10799 = mul i64 %10798, 4
  %10800 = add i64 %10797, -1248
  %10801 = add i64 %10800, %10799
  %10802 = load i64, i64* %PC
  %10803 = add i64 %10802, 8
  store i64 %10803, i64* %PC
  %10804 = inttoptr i64 %10801 to i32*
  %10805 = load i32, i32* %10804
  %10806 = sub i32 %10805, -1
  %10807 = icmp ult i32 %10805, -1
  %10808 = zext i1 %10807 to i8
  %10809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10808, i8* %10809, align 1, !tbaa !2432
  %10810 = and i32 %10806, 255
  %10811 = call i32 @llvm.ctpop.i32(i32 %10810) #16
  %10812 = trunc i32 %10811 to i8
  %10813 = and i8 %10812, 1
  %10814 = xor i8 %10813, 1
  %10815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10814, i8* %10815, align 1, !tbaa !2446
  %10816 = xor i32 %10805, -1
  %10817 = xor i32 %10816, %10806
  %10818 = lshr i32 %10817, 4
  %10819 = trunc i32 %10818 to i8
  %10820 = and i8 %10819, 1
  %10821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10820, i8* %10821, align 1, !tbaa !2447
  %10822 = icmp eq i32 %10806, 0
  %10823 = zext i1 %10822 to i8
  %10824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10823, i8* %10824, align 1, !tbaa !2448
  %10825 = lshr i32 %10806, 31
  %10826 = trunc i32 %10825 to i8
  %10827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10826, i8* %10827, align 1, !tbaa !2449
  %10828 = lshr i32 %10805, 31
  %10829 = xor i32 %10828, 1
  %10830 = xor i32 %10825, %10828
  %10831 = add nuw nsw i32 %10830, %10829
  %10832 = icmp eq i32 %10831, 2
  %10833 = zext i1 %10832 to i8
  %10834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10833, i8* %10834, align 1, !tbaa !2450
  %10835 = load i64, i64* %PC
  %10836 = add i64 %10835, 40
  %10837 = load i64, i64* %PC
  %10838 = add i64 %10837, 6
  %10839 = load i64, i64* %PC
  %10840 = add i64 %10839, 6
  store i64 %10840, i64* %PC
  %10841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10842 = load i8, i8* %10841, align 1, !tbaa !2448
  store i8 %10842, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %10843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10844 = icmp ne i8 %10842, 0
  %10845 = select i1 %10844, i64 %10836, i64 %10838
  store i64 %10845, i64* %10843, align 8, !tbaa !2428
  %10846 = load i8, i8* %BRANCH_TAKEN
  %10847 = icmp eq i8 %10846, 1
  br i1 %10847, label %block_400c52, label %block_400c30

block_401014:                                     ; preds = %block_400ffb
  %10848 = load i64, i64* %RBP
  %10849 = sub i64 %10848, 12
  %10850 = load i64, i64* %PC
  %10851 = add i64 %10850, 3
  store i64 %10851, i64* %PC
  %10852 = inttoptr i64 %10849 to i32*
  %10853 = load i32, i32* %10852
  %10854 = zext i32 %10853 to i64
  store i64 %10854, i64* %RAX, align 8, !tbaa !2428
  %10855 = load i64, i64* %RAX
  %10856 = load i64, i64* %PC
  %10857 = add i64 %10856, 3
  store i64 %10857, i64* %PC
  %10858 = trunc i64 %10855 to i32
  %10859 = add i32 1, %10858
  %10860 = zext i32 %10859 to i64
  store i64 %10860, i64* %RAX, align 8, !tbaa !2428
  %10861 = icmp ult i32 %10859, %10858
  %10862 = icmp ult i32 %10859, 1
  %10863 = or i1 %10861, %10862
  %10864 = zext i1 %10863 to i8
  %10865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10864, i8* %10865, align 1, !tbaa !2432
  %10866 = and i32 %10859, 255
  %10867 = call i32 @llvm.ctpop.i32(i32 %10866) #16
  %10868 = trunc i32 %10867 to i8
  %10869 = and i8 %10868, 1
  %10870 = xor i8 %10869, 1
  %10871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10870, i8* %10871, align 1, !tbaa !2446
  %10872 = xor i64 1, %10855
  %10873 = trunc i64 %10872 to i32
  %10874 = xor i32 %10873, %10859
  %10875 = lshr i32 %10874, 4
  %10876 = trunc i32 %10875 to i8
  %10877 = and i8 %10876, 1
  %10878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10877, i8* %10878, align 1, !tbaa !2447
  %10879 = icmp eq i32 %10859, 0
  %10880 = zext i1 %10879 to i8
  %10881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10880, i8* %10881, align 1, !tbaa !2448
  %10882 = lshr i32 %10859, 31
  %10883 = trunc i32 %10882 to i8
  %10884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10883, i8* %10884, align 1, !tbaa !2449
  %10885 = lshr i32 %10858, 31
  %10886 = xor i32 %10882, %10885
  %10887 = add nuw nsw i32 %10886, %10882
  %10888 = icmp eq i32 %10887, 2
  %10889 = zext i1 %10888 to i8
  %10890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10889, i8* %10890, align 1, !tbaa !2450
  %10891 = load i32, i32* %EAX
  %10892 = zext i32 %10891 to i64
  %10893 = load i64, i64* %PC
  %10894 = add i64 %10893, 3
  store i64 %10894, i64* %PC
  %10895 = shl i64 %10892, 32
  %10896 = ashr exact i64 %10895, 32
  store i64 %10896, i64* %RCX, align 8, !tbaa !2428
  %10897 = load i64, i64* %RBP
  %10898 = load i64, i64* %RCX
  %10899 = mul i64 %10898, 4
  %10900 = add i64 %10897, -1328
  %10901 = add i64 %10900, %10899
  %10902 = load i64, i64* %PC
  %10903 = add i64 %10902, 8
  store i64 %10903, i64* %PC
  %10904 = inttoptr i64 %10901 to i32*
  %10905 = load i32, i32* %10904
  %10906 = sub i32 %10905, 8
  %10907 = icmp ult i32 %10905, 8
  %10908 = zext i1 %10907 to i8
  %10909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10908, i8* %10909, align 1, !tbaa !2432
  %10910 = and i32 %10906, 255
  %10911 = call i32 @llvm.ctpop.i32(i32 %10910) #16
  %10912 = trunc i32 %10911 to i8
  %10913 = and i8 %10912, 1
  %10914 = xor i8 %10913, 1
  %10915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10914, i8* %10915, align 1, !tbaa !2446
  %10916 = xor i32 %10905, 8
  %10917 = xor i32 %10916, %10906
  %10918 = lshr i32 %10917, 4
  %10919 = trunc i32 %10918 to i8
  %10920 = and i8 %10919, 1
  %10921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10920, i8* %10921, align 1, !tbaa !2447
  %10922 = icmp eq i32 %10906, 0
  %10923 = zext i1 %10922 to i8
  %10924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10923, i8* %10924, align 1, !tbaa !2448
  %10925 = lshr i32 %10906, 31
  %10926 = trunc i32 %10925 to i8
  %10927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10926, i8* %10927, align 1, !tbaa !2449
  %10928 = lshr i32 %10905, 31
  %10929 = xor i32 %10925, %10928
  %10930 = add nuw nsw i32 %10929, %10928
  %10931 = icmp eq i32 %10930, 2
  %10932 = zext i1 %10931 to i8
  %10933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10932, i8* %10933, align 1, !tbaa !2450
  %10934 = load i64, i64* %PC
  %10935 = add i64 %10934, 3
  store i64 %10935, i64* %PC
  %10936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10937 = load i8, i8* %10936, align 1, !tbaa !2448
  %10938 = icmp ne i8 %10937, 0
  %10939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10940 = load i8, i8* %10939, align 1, !tbaa !2449
  %10941 = icmp ne i8 %10940, 0
  %10942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %10943 = load i8, i8* %10942, align 1, !tbaa !2450
  %10944 = icmp ne i8 %10943, 0
  %10945 = xor i1 %10941, %10944
  %10946 = or i1 %10938, %10945
  %10947 = zext i1 %10946 to i8
  store i8 %10947, i8* %DL, align 1, !tbaa !2451
  %10948 = load i64, i64* %RBP
  %10949 = sub i64 %10948, 2709
  %10950 = load i8, i8* %DL
  %10951 = zext i8 %10950 to i64
  %10952 = load i64, i64* %PC
  %10953 = add i64 %10952, 6
  store i64 %10953, i64* %PC
  %10954 = inttoptr i64 %10949 to i8*
  store i8 %10950, i8* %10954
  br label %block_40102e

block_400eef:                                     ; preds = %block_400eae, %block_400edb
  %MEMORY.49 = phi %struct.Memory* [ %MEMORY.31, %block_400edb ], [ %MEMORY.31, %block_400eae ]
  %10955 = load i64, i64* %RBP
  %10956 = sub i64 %10955, 4
  %10957 = load i64, i64* %PC
  %10958 = add i64 %10957, 7
  store i64 %10958, i64* %PC
  %10959 = inttoptr i64 %10956 to i32*
  store i32 1, i32* %10959
  br label %block_400ef6

block_401811:                                     ; preds = %block_401804
  %10960 = load i64, i64* %RBP
  %10961 = sub i64 %10960, 4
  %10962 = load i64, i64* %PC
  %10963 = add i64 %10962, 4
  store i64 %10963, i64* %PC
  %10964 = inttoptr i64 %10961 to i32*
  %10965 = load i32, i32* %10964
  %10966 = sext i32 %10965 to i64
  store i64 %10966, i64* %RAX, align 8, !tbaa !2428
  %10967 = load i64, i64* %RAX
  %10968 = mul i64 %10967, 4
  %10969 = add i64 %10968, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %10970 = load i64, i64* %PC
  %10971 = add i64 %10970, 8
  store i64 %10971, i64* %PC
  %10972 = inttoptr i64 %10969 to i32*
  %10973 = load i32, i32* %10972
  %10974 = sub i32 %10973, -1
  %10975 = icmp ult i32 %10973, -1
  %10976 = zext i1 %10975 to i8
  %10977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10976, i8* %10977, align 1, !tbaa !2432
  %10978 = and i32 %10974, 255
  %10979 = call i32 @llvm.ctpop.i32(i32 %10978) #16
  %10980 = trunc i32 %10979 to i8
  %10981 = and i8 %10980, 1
  %10982 = xor i8 %10981, 1
  %10983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10982, i8* %10983, align 1, !tbaa !2446
  %10984 = xor i32 %10973, -1
  %10985 = xor i32 %10984, %10974
  %10986 = lshr i32 %10985, 4
  %10987 = trunc i32 %10986 to i8
  %10988 = and i8 %10987, 1
  %10989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10988, i8* %10989, align 1, !tbaa !2447
  %10990 = icmp eq i32 %10974, 0
  %10991 = zext i1 %10990 to i8
  %10992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10991, i8* %10992, align 1, !tbaa !2448
  %10993 = lshr i32 %10974, 31
  %10994 = trunc i32 %10993 to i8
  %10995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10994, i8* %10995, align 1, !tbaa !2449
  %10996 = lshr i32 %10973, 31
  %10997 = xor i32 %10996, 1
  %10998 = xor i32 %10993, %10996
  %10999 = add nuw nsw i32 %10998, %10997
  %11000 = icmp eq i32 %10999, 2
  %11001 = zext i1 %11000 to i8
  %11002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11001, i8* %11002, align 1, !tbaa !2450
  %11003 = load i64, i64* %PC
  %11004 = add i64 %11003, 41
  %11005 = load i64, i64* %PC
  %11006 = add i64 %11005, 6
  %11007 = load i64, i64* %PC
  %11008 = add i64 %11007, 6
  store i64 %11008, i64* %PC
  %11009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11010 = load i8, i8* %11009, align 1, !tbaa !2448
  store i8 %11010, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11012 = icmp ne i8 %11010, 0
  %11013 = select i1 %11012, i64 %11004, i64 %11006
  store i64 %11013, i64* %11011, align 8, !tbaa !2428
  %11014 = load i8, i8* %BRANCH_TAKEN
  %11015 = icmp eq i8 %11014, 1
  %11016 = load i64, i64* %RBP
  %11017 = sub i64 %11016, 4
  %11018 = load i64, i64* %PC
  %11019 = add i64 %11018, 4
  store i64 %11019, i64* %PC
  %11020 = inttoptr i64 %11017 to i32*
  %11021 = load i32, i32* %11020
  %11022 = sext i32 %11021 to i64
  store i64 %11022, i64* %RAX, align 8, !tbaa !2428
  %11023 = load i64, i64* %RAX
  %11024 = mul i64 %11023, 4
  %11025 = add i64 %11024, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %11026 = load i64, i64* %PC
  br i1 %11015, label %block_401846, label %block_401823

block_400a1a:                                     ; preds = %block_400a10, %block_4009fe
  %MEMORY.50 = phi %struct.Memory* [ %MEMORY.10, %block_4009fe ], [ %MEMORY.10, %block_400a10 ]
  %11027 = load i64, i64* %RBP
  %11028 = sub i64 %11027, 4
  %11029 = load i64, i64* %PC
  %11030 = add i64 %11029, 4
  store i64 %11030, i64* %PC
  %11031 = inttoptr i64 %11028 to i32*
  %11032 = load i32, i32* %11031
  %11033 = sext i32 %11032 to i64
  store i64 %11033, i64* %RAX, align 8, !tbaa !2428
  %11034 = load i64, i64* %RBP
  %11035 = load i64, i64* %RAX
  %11036 = mul i64 %11035, 4
  %11037 = add i64 %11034, -1488
  %11038 = add i64 %11037, %11036
  %11039 = load i64, i64* %PC
  %11040 = add i64 %11039, 8
  store i64 %11040, i64* %PC
  %11041 = inttoptr i64 %11038 to i32*
  %11042 = load i32, i32* %11041
  %11043 = sext i32 %11042 to i64
  store i64 %11043, i64* %RAX, align 8, !tbaa !2428
  %11044 = load i64, i64* %RAX
  %11045 = mul i64 %11044, 4
  %11046 = add i64 %11045, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %11047 = load i64, i64* %PC
  %11048 = add i64 %11047, 7
  store i64 %11048, i64* %PC
  %11049 = inttoptr i64 %11046 to i32*
  %11050 = load i32, i32* %11049
  %11051 = zext i32 %11050 to i64
  store i64 %11051, i64* %RCX, align 8, !tbaa !2428
  %11052 = load i64, i64* %RBP
  %11053 = sub i64 %11052, 4
  %11054 = load i64, i64* %PC
  %11055 = add i64 %11054, 4
  store i64 %11055, i64* %PC
  %11056 = inttoptr i64 %11053 to i32*
  %11057 = load i32, i32* %11056
  %11058 = sext i32 %11057 to i64
  store i64 %11058, i64* %RAX, align 8, !tbaa !2428
  %11059 = load i64, i64* %RBP
  %11060 = load i64, i64* %RAX
  %11061 = mul i64 %11060, 4
  %11062 = add i64 %11059, -1488
  %11063 = add i64 %11062, %11061
  %11064 = load i32, i32* %ECX
  %11065 = zext i32 %11064 to i64
  %11066 = load i64, i64* %PC
  %11067 = add i64 %11066, 7
  store i64 %11067, i64* %PC
  %11068 = inttoptr i64 %11063 to i32*
  store i32 %11064, i32* %11068
  %11069 = load i64, i64* %RBP
  %11070 = sub i64 %11069, 4
  %11071 = load i64, i64* %PC
  %11072 = add i64 %11071, 3
  store i64 %11072, i64* %PC
  %11073 = inttoptr i64 %11070 to i32*
  %11074 = load i32, i32* %11073
  %11075 = zext i32 %11074 to i64
  store i64 %11075, i64* %RAX, align 8, !tbaa !2428
  %11076 = load i64, i64* %RAX
  %11077 = load i64, i64* %PC
  %11078 = add i64 %11077, 3
  store i64 %11078, i64* %PC
  %11079 = trunc i64 %11076 to i32
  %11080 = add i32 1, %11079
  %11081 = zext i32 %11080 to i64
  store i64 %11081, i64* %RAX, align 8, !tbaa !2428
  %11082 = icmp ult i32 %11080, %11079
  %11083 = icmp ult i32 %11080, 1
  %11084 = or i1 %11082, %11083
  %11085 = zext i1 %11084 to i8
  %11086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11085, i8* %11086, align 1, !tbaa !2432
  %11087 = and i32 %11080, 255
  %11088 = call i32 @llvm.ctpop.i32(i32 %11087) #16
  %11089 = trunc i32 %11088 to i8
  %11090 = and i8 %11089, 1
  %11091 = xor i8 %11090, 1
  %11092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11091, i8* %11092, align 1, !tbaa !2446
  %11093 = xor i64 1, %11076
  %11094 = trunc i64 %11093 to i32
  %11095 = xor i32 %11094, %11080
  %11096 = lshr i32 %11095, 4
  %11097 = trunc i32 %11096 to i8
  %11098 = and i8 %11097, 1
  %11099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11098, i8* %11099, align 1, !tbaa !2447
  %11100 = icmp eq i32 %11080, 0
  %11101 = zext i1 %11100 to i8
  %11102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11101, i8* %11102, align 1, !tbaa !2448
  %11103 = lshr i32 %11080, 31
  %11104 = trunc i32 %11103 to i8
  %11105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11104, i8* %11105, align 1, !tbaa !2449
  %11106 = lshr i32 %11079, 31
  %11107 = xor i32 %11103, %11106
  %11108 = add nuw nsw i32 %11107, %11103
  %11109 = icmp eq i32 %11108, 2
  %11110 = zext i1 %11109 to i8
  %11111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11110, i8* %11111, align 1, !tbaa !2450
  %11112 = load i64, i64* %RBP
  %11113 = sub i64 %11112, 4
  %11114 = load i32, i32* %EAX
  %11115 = zext i32 %11114 to i64
  %11116 = load i64, i64* %PC
  %11117 = add i64 %11116, 3
  store i64 %11117, i64* %PC
  %11118 = inttoptr i64 %11113 to i32*
  store i32 %11114, i32* %11118
  %11119 = load i64, i64* %PC
  %11120 = sub i64 %11119, 219
  %11121 = load i64, i64* %PC
  %11122 = add i64 %11121, 5
  store i64 %11122, i64* %PC
  %11123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11120, i64* %11123, align 8, !tbaa !2428
  br label %block_400966

block_400c0f:                                     ; preds = %block_400bf2
  %11124 = load i64, i64* %RBP
  %11125 = sub i64 %11124, 16
  %11126 = load i64, i64* %PC
  %11127 = add i64 %11126, 3
  store i64 %11127, i64* %PC
  %11128 = inttoptr i64 %11125 to i32*
  %11129 = load i32, i32* %11128
  %11130 = zext i32 %11129 to i64
  store i64 %11130, i64* %RAX, align 8, !tbaa !2428
  %11131 = load i64, i64* %RBP
  %11132 = sub i64 %11131, 8
  %11133 = load i32, i32* %EAX
  %11134 = zext i32 %11133 to i64
  %11135 = load i64, i64* %PC
  %11136 = add i64 %11135, 3
  store i64 %11136, i64* %PC
  %11137 = inttoptr i64 %11132 to i32*
  store i32 %11133, i32* %11137
  br label %block_400c15

block_40160c:                                     ; preds = %block_4015f8
  %11138 = load i64, i64* %RBP
  %11139 = sub i64 %11138, 8
  %11140 = load i64, i64* %PC
  %11141 = add i64 %11140, 3
  store i64 %11141, i64* %PC
  %11142 = inttoptr i64 %11139 to i32*
  %11143 = load i32, i32* %11142
  %11144 = zext i32 %11143 to i64
  store i64 %11144, i64* %RAX, align 8, !tbaa !2428
  %11145 = load i32, i32* %EAX
  %11146 = zext i32 %11145 to i64
  %11147 = load i64, i64* %RBP
  %11148 = sub i64 %11147, 4
  %11149 = load i64, i64* %PC
  %11150 = add i64 %11149, 3
  store i64 %11150, i64* %PC
  %11151 = inttoptr i64 %11148 to i32*
  %11152 = load i32, i32* %11151
  %11153 = sub i32 %11145, %11152
  %11154 = icmp ult i32 %11145, %11152
  %11155 = zext i1 %11154 to i8
  %11156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11155, i8* %11156, align 1, !tbaa !2432
  %11157 = and i32 %11153, 255
  %11158 = call i32 @llvm.ctpop.i32(i32 %11157) #16
  %11159 = trunc i32 %11158 to i8
  %11160 = and i8 %11159, 1
  %11161 = xor i8 %11160, 1
  %11162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11161, i8* %11162, align 1, !tbaa !2446
  %11163 = xor i32 %11152, %11145
  %11164 = xor i32 %11163, %11153
  %11165 = lshr i32 %11164, 4
  %11166 = trunc i32 %11165 to i8
  %11167 = and i8 %11166, 1
  %11168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11167, i8* %11168, align 1, !tbaa !2447
  %11169 = icmp eq i32 %11153, 0
  %11170 = zext i1 %11169 to i8
  %11171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11170, i8* %11171, align 1, !tbaa !2448
  %11172 = lshr i32 %11153, 31
  %11173 = trunc i32 %11172 to i8
  %11174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11173, i8* %11174, align 1, !tbaa !2449
  %11175 = lshr i32 %11145, 31
  %11176 = lshr i32 %11152, 31
  %11177 = xor i32 %11176, %11175
  %11178 = xor i32 %11172, %11175
  %11179 = add nuw nsw i32 %11178, %11177
  %11180 = icmp eq i32 %11179, 2
  %11181 = zext i1 %11180 to i8
  %11182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11181, i8* %11182, align 1, !tbaa !2450
  %11183 = load i64, i64* %PC
  %11184 = add i64 %11183, 79
  %11185 = load i64, i64* %PC
  %11186 = add i64 %11185, 6
  %11187 = load i64, i64* %PC
  %11188 = add i64 %11187, 6
  store i64 %11188, i64* %PC
  %11189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11190 = load i8, i8* %11189, align 1, !tbaa !2448
  store i8 %11190, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11192 = icmp ne i8 %11190, 0
  %11193 = select i1 %11192, i64 %11184, i64 %11186
  store i64 %11193, i64* %11191, align 8, !tbaa !2428
  %11194 = load i8, i8* %BRANCH_TAKEN
  %11195 = icmp eq i8 %11194, 1
  br i1 %11195, label %block_401661, label %block_401618

block_40158f:                                     ; preds = %block_401527, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4
  %MEMORY.51 = phi %struct.Memory* [ %MEMORY.34, %block_401527 ], [ %2980, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4 ]
  %11196 = load i64, i64* %PC
  %11197 = add i64 %11196, 5
  %11198 = load i64, i64* %PC
  %11199 = add i64 %11198, 5
  store i64 %11199, i64* %PC
  %11200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11197, i64* %11200, align 8, !tbaa !2428
  %11201 = load i64, i64* %RBP
  %11202 = sub i64 %11201, 8
  %11203 = load i64, i64* %PC
  %11204 = add i64 %11203, 3
  store i64 %11204, i64* %PC
  %11205 = inttoptr i64 %11202 to i32*
  %11206 = load i32, i32* %11205
  %11207 = zext i32 %11206 to i64
  store i64 %11207, i64* %RAX, align 8, !tbaa !2428
  %11208 = load i64, i64* %RAX
  %11209 = load i64, i64* %PC
  %11210 = add i64 %11209, 3
  store i64 %11210, i64* %PC
  %11211 = trunc i64 %11208 to i32
  %11212 = add i32 1, %11211
  %11213 = zext i32 %11212 to i64
  store i64 %11213, i64* %RAX, align 8, !tbaa !2428
  %11214 = icmp ult i32 %11212, %11211
  %11215 = icmp ult i32 %11212, 1
  %11216 = or i1 %11214, %11215
  %11217 = zext i1 %11216 to i8
  %11218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11217, i8* %11218, align 1, !tbaa !2432
  %11219 = and i32 %11212, 255
  %11220 = call i32 @llvm.ctpop.i32(i32 %11219) #16
  %11221 = trunc i32 %11220 to i8
  %11222 = and i8 %11221, 1
  %11223 = xor i8 %11222, 1
  %11224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11223, i8* %11224, align 1, !tbaa !2446
  %11225 = xor i64 1, %11208
  %11226 = trunc i64 %11225 to i32
  %11227 = xor i32 %11226, %11212
  %11228 = lshr i32 %11227, 4
  %11229 = trunc i32 %11228 to i8
  %11230 = and i8 %11229, 1
  %11231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11230, i8* %11231, align 1, !tbaa !2447
  %11232 = icmp eq i32 %11212, 0
  %11233 = zext i1 %11232 to i8
  %11234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11233, i8* %11234, align 1, !tbaa !2448
  %11235 = lshr i32 %11212, 31
  %11236 = trunc i32 %11235 to i8
  %11237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11236, i8* %11237, align 1, !tbaa !2449
  %11238 = lshr i32 %11211, 31
  %11239 = xor i32 %11235, %11238
  %11240 = add nuw nsw i32 %11239, %11235
  %11241 = icmp eq i32 %11240, 2
  %11242 = zext i1 %11241 to i8
  %11243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11242, i8* %11243, align 1, !tbaa !2450
  %11244 = load i64, i64* %RBP
  %11245 = sub i64 %11244, 8
  %11246 = load i32, i32* %EAX
  %11247 = zext i32 %11246 to i64
  %11248 = load i64, i64* %PC
  %11249 = add i64 %11248, 3
  store i64 %11249, i64* %PC
  %11250 = inttoptr i64 %11245 to i32*
  store i32 %11246, i32* %11250
  %11251 = load i64, i64* %PC
  %11252 = sub i64 %11251, 138
  %11253 = load i64, i64* %PC
  %11254 = add i64 %11253, 5
  store i64 %11254, i64* %PC
  %11255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11252, i64* %11255, align 8, !tbaa !2428
  br label %block_401513

block_401332:                                     ; preds = %block_401312
  %11256 = load i64, i64* %RBP
  %11257 = sub i64 %11256, 1168
  %11258 = load i64, i64* %PC
  %11259 = add i64 %11258, 7
  store i64 %11259, i64* %PC
  store i64 %11257, i64* %RAX, align 8, !tbaa !2428
  %11260 = load i64, i64* %RBP
  %11261 = sub i64 %11260, 12
  %11262 = load i64, i64* %PC
  %11263 = add i64 %11262, 4
  store i64 %11263, i64* %PC
  %11264 = inttoptr i64 %11261 to i32*
  %11265 = load i32, i32* %11264
  %11266 = sext i32 %11265 to i64
  store i64 %11266, i64* %RCX, align 8, !tbaa !2428
  %11267 = load i64, i64* %RCX
  %11268 = load i64, i64* %PC
  %11269 = add i64 %11268, 4
  store i64 %11269, i64* %PC
  %11270 = shl i64 %11267, 5
  %11271 = icmp slt i64 %11270, 0
  %11272 = shl i64 %11270, 1
  store i64 %11272, i64* %RCX, align 8, !tbaa !2428
  %11273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %11274 = zext i1 %11271 to i8
  store i8 %11274, i8* %11273, align 1, !tbaa !2451
  %11275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %11276 = trunc i64 %11272 to i32
  %11277 = and i32 %11276, 254
  %11278 = call i32 @llvm.ctpop.i32(i32 %11277) #16
  %11279 = trunc i32 %11278 to i8
  %11280 = and i8 %11279, 1
  %11281 = xor i8 %11280, 1
  store i8 %11281, i8* %11275, align 1, !tbaa !2451
  %11282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11282, align 1, !tbaa !2451
  %11283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11284 = icmp eq i64 %11272, 0
  %11285 = zext i1 %11284 to i8
  store i8 %11285, i8* %11283, align 1, !tbaa !2451
  %11286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %11287 = lshr i64 %11272, 63
  %11288 = trunc i64 %11287 to i8
  store i8 %11288, i8* %11286, align 1, !tbaa !2451
  %11289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %11289, align 1, !tbaa !2451
  %11290 = load i64, i64* %RAX
  %11291 = load i64, i64* %RCX
  %11292 = load i64, i64* %PC
  %11293 = add i64 %11292, 3
  store i64 %11293, i64* %PC
  %11294 = add i64 %11291, %11290
  store i64 %11294, i64* %RAX, align 8, !tbaa !2428
  %11295 = icmp ult i64 %11294, %11290
  %11296 = icmp ult i64 %11294, %11291
  %11297 = or i1 %11295, %11296
  %11298 = zext i1 %11297 to i8
  %11299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11298, i8* %11299, align 1, !tbaa !2432
  %11300 = trunc i64 %11294 to i32
  %11301 = and i32 %11300, 255
  %11302 = call i32 @llvm.ctpop.i32(i32 %11301) #16
  %11303 = trunc i32 %11302 to i8
  %11304 = and i8 %11303, 1
  %11305 = xor i8 %11304, 1
  %11306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11305, i8* %11306, align 1, !tbaa !2446
  %11307 = xor i64 %11291, %11290
  %11308 = xor i64 %11307, %11294
  %11309 = lshr i64 %11308, 4
  %11310 = trunc i64 %11309 to i8
  %11311 = and i8 %11310, 1
  %11312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11311, i8* %11312, align 1, !tbaa !2447
  %11313 = icmp eq i64 %11294, 0
  %11314 = zext i1 %11313 to i8
  %11315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11314, i8* %11315, align 1, !tbaa !2448
  %11316 = lshr i64 %11294, 63
  %11317 = trunc i64 %11316 to i8
  %11318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11317, i8* %11318, align 1, !tbaa !2449
  %11319 = lshr i64 %11290, 63
  %11320 = lshr i64 %11291, 63
  %11321 = xor i64 %11316, %11319
  %11322 = xor i64 %11316, %11320
  %11323 = add nuw nsw i64 %11321, %11322
  %11324 = icmp eq i64 %11323, 2
  %11325 = zext i1 %11324 to i8
  %11326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11325, i8* %11326, align 1, !tbaa !2450
  %11327 = load i64, i64* %RBP
  %11328 = sub i64 %11327, 4
  %11329 = load i64, i64* %PC
  %11330 = add i64 %11329, 4
  store i64 %11330, i64* %PC
  %11331 = inttoptr i64 %11328 to i32*
  %11332 = load i32, i32* %11331
  %11333 = sext i32 %11332 to i64
  store i64 %11333, i64* %RCX, align 8, !tbaa !2428
  %11334 = load i64, i64* %RAX
  %11335 = load i64, i64* %RCX
  %11336 = mul i64 %11335, 4
  %11337 = add i64 %11336, %11334
  %11338 = load i64, i64* %PC
  %11339 = add i64 %11338, 4
  store i64 %11339, i64* %PC
  %11340 = inttoptr i64 %11337 to i32*
  %11341 = load i32, i32* %11340
  %11342 = sext i32 %11341 to i64
  store i64 %11342, i64* %RAX, align 8, !tbaa !2428
  %11343 = load i64, i64* %RAX
  %11344 = mul i64 %11343, 4
  %11345 = add i64 %11344, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %11346 = load i64, i64* %PC
  %11347 = add i64 %11346, 7
  store i64 %11347, i64* %PC
  %11348 = inttoptr i64 %11345 to i32*
  %11349 = load i32, i32* %11348
  %11350 = zext i32 %11349 to i64
  store i64 %11350, i64* %RDX, align 8, !tbaa !2428
  %11351 = load i64, i64* %RBP
  %11352 = sub i64 %11351, 4
  %11353 = load i64, i64* %PC
  %11354 = add i64 %11353, 4
  store i64 %11354, i64* %PC
  %11355 = inttoptr i64 %11352 to i32*
  %11356 = load i32, i32* %11355
  %11357 = sext i32 %11356 to i64
  store i64 %11357, i64* %RAX, align 8, !tbaa !2428
  %11358 = load i64, i64* %RBP
  %11359 = load i64, i64* %RAX
  %11360 = mul i64 %11359, 4
  %11361 = add i64 %11358, -1616
  %11362 = add i64 %11361, %11360
  %11363 = load i32, i32* %EDX
  %11364 = zext i32 %11363 to i64
  %11365 = load i64, i64* %PC
  %11366 = add i64 %11365, 7
  store i64 %11366, i64* %PC
  %11367 = inttoptr i64 %11362 to i32*
  store i32 %11363, i32* %11367
  %11368 = load i64, i64* %PC
  %11369 = add i64 %11368, 20
  %11370 = load i64, i64* %PC
  %11371 = add i64 %11370, 5
  store i64 %11371, i64* %PC
  %11372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11369, i64* %11372, align 8, !tbaa !2428
  br label %block_401372

block_401527:                                     ; preds = %block_401513
  %11373 = sub i64 %8450, 8
  %11374 = load i64, i64* %PC
  %11375 = add i64 %11374, 4
  store i64 %11375, i64* %PC
  %11376 = inttoptr i64 %11373 to i32*
  %11377 = load i32, i32* %11376
  %11378 = sext i32 %11377 to i64
  store i64 %11378, i64* %RAX, align 8, !tbaa !2428
  %11379 = load i64, i64* %RBP
  %11380 = load i64, i64* %RAX
  %11381 = mul i64 %11380, 4
  %11382 = add i64 %11379, -1616
  %11383 = add i64 %11382, %11381
  %11384 = load i64, i64* %PC
  %11385 = add i64 %11384, 8
  store i64 %11385, i64* %PC
  %11386 = inttoptr i64 %11383 to i32*
  %11387 = load i32, i32* %11386
  %11388 = sub i32 %11387, -1
  %11389 = icmp ult i32 %11387, -1
  %11390 = zext i1 %11389 to i8
  %11391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11390, i8* %11391, align 1, !tbaa !2432
  %11392 = and i32 %11388, 255
  %11393 = call i32 @llvm.ctpop.i32(i32 %11392) #16
  %11394 = trunc i32 %11393 to i8
  %11395 = and i8 %11394, 1
  %11396 = xor i8 %11395, 1
  %11397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11396, i8* %11397, align 1, !tbaa !2446
  %11398 = xor i32 %11387, -1
  %11399 = xor i32 %11398, %11388
  %11400 = lshr i32 %11399, 4
  %11401 = trunc i32 %11400 to i8
  %11402 = and i8 %11401, 1
  %11403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11402, i8* %11403, align 1, !tbaa !2447
  %11404 = icmp eq i32 %11388, 0
  %11405 = zext i1 %11404 to i8
  %11406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11405, i8* %11406, align 1, !tbaa !2448
  %11407 = lshr i32 %11388, 31
  %11408 = trunc i32 %11407 to i8
  %11409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11408, i8* %11409, align 1, !tbaa !2449
  %11410 = lshr i32 %11387, 31
  %11411 = xor i32 %11410, 1
  %11412 = xor i32 %11407, %11410
  %11413 = add nuw nsw i32 %11412, %11411
  %11414 = icmp eq i32 %11413, 2
  %11415 = zext i1 %11414 to i8
  %11416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11415, i8* %11416, align 1, !tbaa !2450
  %11417 = load i64, i64* %PC
  %11418 = add i64 %11417, 92
  %11419 = load i64, i64* %PC
  %11420 = add i64 %11419, 6
  %11421 = load i64, i64* %PC
  %11422 = add i64 %11421, 6
  store i64 %11422, i64* %PC
  %11423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11424 = load i8, i8* %11423, align 1, !tbaa !2448
  store i8 %11424, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11426 = icmp ne i8 %11424, 0
  %11427 = select i1 %11426, i64 %11418, i64 %11420
  store i64 %11427, i64* %11425, align 8, !tbaa !2428
  %11428 = load i8, i8* %BRANCH_TAKEN
  %11429 = icmp eq i8 %11428, 1
  br i1 %11429, label %block_40158f, label %block_401539

block_400a10:                                     ; preds = %block_4009fe
  %11430 = load i64, i64* %RBP
  %11431 = sub i64 %11430, 1496
  %11432 = load i64, i64* %PC
  %11433 = add i64 %11432, 10
  store i64 %11433, i64* %PC
  %11434 = inttoptr i64 %11431 to i32*
  store i32 1, i32* %11434
  br label %block_400a1a

block_401804:                                     ; preds = %block_401855, %block_4017fd
  %MEMORY.52 = phi %struct.Memory* [ %MEMORY.5, %block_4017fd ], [ %MEMORY.40, %block_401855 ]
  %11435 = load i64, i64* %RBP
  %11436 = sub i64 %11435, 4
  %11437 = load i64, i64* %PC
  %11438 = add i64 %11437, 7
  store i64 %11438, i64* %PC
  %11439 = inttoptr i64 %11436 to i32*
  %11440 = load i32, i32* %11439
  %11441 = sub i32 %11440, 255
  %11442 = icmp ult i32 %11440, 255
  %11443 = zext i1 %11442 to i8
  %11444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11443, i8* %11444, align 1, !tbaa !2432
  %11445 = and i32 %11441, 255
  %11446 = call i32 @llvm.ctpop.i32(i32 %11445) #16
  %11447 = trunc i32 %11446 to i8
  %11448 = and i8 %11447, 1
  %11449 = xor i8 %11448, 1
  %11450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11449, i8* %11450, align 1, !tbaa !2446
  %11451 = xor i32 %11440, 255
  %11452 = xor i32 %11451, %11441
  %11453 = lshr i32 %11452, 4
  %11454 = trunc i32 %11453 to i8
  %11455 = and i8 %11454, 1
  %11456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11455, i8* %11456, align 1, !tbaa !2447
  %11457 = icmp eq i32 %11441, 0
  %11458 = zext i1 %11457 to i8
  %11459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11458, i8* %11459, align 1, !tbaa !2448
  %11460 = lshr i32 %11441, 31
  %11461 = trunc i32 %11460 to i8
  %11462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11461, i8* %11462, align 1, !tbaa !2449
  %11463 = lshr i32 %11440, 31
  %11464 = xor i32 %11460, %11463
  %11465 = add nuw nsw i32 %11464, %11463
  %11466 = icmp eq i32 %11465, 2
  %11467 = zext i1 %11466 to i8
  %11468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11467, i8* %11468, align 1, !tbaa !2450
  %11469 = load i64, i64* %PC
  %11470 = add i64 %11469, 93
  %11471 = load i64, i64* %PC
  %11472 = add i64 %11471, 6
  %11473 = load i64, i64* %PC
  %11474 = add i64 %11473, 6
  store i64 %11474, i64* %PC
  %11475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %11476 = load i8, i8* %11475, align 1, !tbaa !2449
  %11477 = icmp ne i8 %11476, 0
  %11478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11479 = load i8, i8* %11478, align 1, !tbaa !2450
  %11480 = icmp ne i8 %11479, 0
  %11481 = xor i1 %11477, %11480
  %11482 = xor i1 %11481, true
  %11483 = zext i1 %11482 to i8
  store i8 %11483, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11485 = select i1 %11481, i64 %11472, i64 %11470
  store i64 %11485, i64* %11484, align 8, !tbaa !2428
  %11486 = load i8, i8* %BRANCH_TAKEN
  %11487 = icmp eq i8 %11486, 1
  br i1 %11487, label %block_401868, label %block_401811

block_400ccb:                                     ; preds = %block_400caa, %block_400c8a
  %MEMORY.53 = phi %struct.Memory* [ %MEMORY.39, %block_400caa ], [ %MEMORY.39, %block_400c8a ]
  %11488 = load i64, i64* %RBP
  %11489 = sub i64 %11488, 4
  %11490 = load i64, i64* %PC
  %11491 = add i64 %11490, 7
  store i64 %11491, i64* %PC
  %11492 = inttoptr i64 %11489 to i32*
  store i32 0, i32* %11492
  br label %block_400cd2

block_401203:                                     ; preds = %block_401114
  %11493 = sub i64 %6166, 1492
  %11494 = load i64, i64* %PC
  %11495 = add i64 %11494, 6
  store i64 %11495, i64* %PC
  %11496 = inttoptr i64 %11493 to i32*
  %11497 = load i32, i32* %11496
  %11498 = zext i32 %11497 to i64
  store i64 %11498, i64* %RAX, align 8, !tbaa !2428
  %11499 = load i64, i64* %RBP
  %11500 = sub i64 %11499, 12
  %11501 = load i64, i64* %PC
  %11502 = add i64 %11501, 4
  store i64 %11502, i64* %PC
  %11503 = inttoptr i64 %11500 to i32*
  %11504 = load i32, i32* %11503
  %11505 = sext i32 %11504 to i64
  store i64 %11505, i64* %RCX, align 8, !tbaa !2428
  %11506 = load i32, i32* %EAX
  %11507 = zext i32 %11506 to i64
  %11508 = load i64, i64* %RBP
  %11509 = load i64, i64* %RCX
  %11510 = mul i64 %11509, 4
  %11511 = add i64 %11508, -1328
  %11512 = add i64 %11511, %11510
  %11513 = load i64, i64* %PC
  %11514 = add i64 %11513, 7
  store i64 %11514, i64* %PC
  %11515 = inttoptr i64 %11512 to i32*
  %11516 = load i32, i32* %11515
  %11517 = sub i32 %11506, %11516
  %11518 = icmp ult i32 %11506, %11516
  %11519 = zext i1 %11518 to i8
  %11520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11519, i8* %11520, align 1, !tbaa !2432
  %11521 = and i32 %11517, 255
  %11522 = call i32 @llvm.ctpop.i32(i32 %11521) #16
  %11523 = trunc i32 %11522 to i8
  %11524 = and i8 %11523, 1
  %11525 = xor i8 %11524, 1
  %11526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11525, i8* %11526, align 1, !tbaa !2446
  %11527 = xor i32 %11516, %11506
  %11528 = xor i32 %11527, %11517
  %11529 = lshr i32 %11528, 4
  %11530 = trunc i32 %11529 to i8
  %11531 = and i8 %11530, 1
  %11532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11531, i8* %11532, align 1, !tbaa !2447
  %11533 = icmp eq i32 %11517, 0
  %11534 = zext i1 %11533 to i8
  %11535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11534, i8* %11535, align 1, !tbaa !2448
  %11536 = lshr i32 %11517, 31
  %11537 = trunc i32 %11536 to i8
  %11538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11537, i8* %11538, align 1, !tbaa !2449
  %11539 = lshr i32 %11506, 31
  %11540 = lshr i32 %11516, 31
  %11541 = xor i32 %11540, %11539
  %11542 = xor i32 %11536, %11539
  %11543 = add nuw nsw i32 %11542, %11541
  %11544 = icmp eq i32 %11543, 2
  %11545 = zext i1 %11544 to i8
  %11546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11545, i8* %11546, align 1, !tbaa !2450
  %11547 = load i64, i64* %PC
  %11548 = add i64 %11547, 1279
  %11549 = load i64, i64* %PC
  %11550 = add i64 %11549, 6
  %11551 = load i64, i64* %PC
  %11552 = add i64 %11551, 6
  store i64 %11552, i64* %PC
  %11553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11554 = load i8, i8* %11553, align 1, !tbaa !2448
  %11555 = icmp eq i8 %11554, 0
  %11556 = zext i1 %11555 to i8
  store i8 %11556, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11558 = select i1 %11555, i64 %11548, i64 %11550
  store i64 %11558, i64* %11557, align 8, !tbaa !2428
  %11559 = load i8, i8* %BRANCH_TAKEN
  %11560 = icmp eq i8 %11559, 1
  %11561 = load i64, i64* %RBP
  %11562 = sub i64 %11561, 4
  %11563 = load i64, i64* %PC
  %11564 = add i64 %11563, 7
  store i64 %11564, i64* %PC
  br i1 %11560, label %block_401713, label %block_40121a

block_4014f5:                                     ; preds = %block_4014e1
  %11565 = load i64, i64* %RBP
  %11566 = sub i64 %11565, 4
  %11567 = load i64, i64* %PC
  %11568 = add i64 %11567, 4
  store i64 %11568, i64* %PC
  %11569 = inttoptr i64 %11566 to i32*
  %11570 = load i32, i32* %11569
  %11571 = sext i32 %11570 to i64
  store i64 %11571, i64* %RAX, align 8, !tbaa !2428
  %11572 = load i64, i64* %RBP
  %11573 = load i64, i64* %RAX
  %11574 = mul i64 %11573, 4
  %11575 = add i64 %11572, -1568
  %11576 = add i64 %11575, %11574
  %11577 = load i64, i64* %PC
  %11578 = add i64 %11577, 8
  store i64 %11578, i64* %PC
  %11579 = inttoptr i64 %11576 to i32*
  %11580 = load i32, i32* %11579
  %11581 = sext i32 %11580 to i64
  store i64 %11581, i64* %RAX, align 8, !tbaa !2428
  %11582 = load i64, i64* %RBP
  %11583 = load i64, i64* %RAX
  %11584 = mul i64 %11583, 4
  %11585 = add i64 %11582, -2640
  %11586 = add i64 %11585, %11584
  %11587 = load i64, i64* %PC
  %11588 = add i64 %11587, 11
  store i64 %11588, i64* %PC
  %11589 = inttoptr i64 %11586 to i32*
  store i32 1, i32* %11589
  %11590 = load i64, i64* %RBP
  %11591 = sub i64 %11590, 8
  %11592 = load i64, i64* %PC
  %11593 = add i64 %11592, 7
  store i64 %11593, i64* %PC
  %11594 = inttoptr i64 %11591 to i32*
  store i32 1, i32* %11594
  br label %block_401513

block_401300:                                     ; preds = %block_4012ab, %block_4012bd
  %MEMORY.54 = phi %struct.Memory* [ %MEMORY.21, %block_4012ab ], [ %MEMORY.21, %block_4012bd ]
  %11595 = load i64, i64* %RBP
  %11596 = sub i64 %11595, 4
  %11597 = load i64, i64* %PC
  %11598 = add i64 %11597, 4
  store i64 %11598, i64* %PC
  %11599 = inttoptr i64 %11596 to i32*
  %11600 = load i32, i32* %11599
  %11601 = sext i32 %11600 to i64
  store i64 %11601, i64* %RAX, align 8, !tbaa !2428
  %11602 = load i64, i64* %RBP
  %11603 = load i64, i64* %RAX
  %11604 = mul i64 %11603, 4
  %11605 = add i64 %11602, -1488
  %11606 = add i64 %11605, %11604
  %11607 = load i64, i64* %PC
  %11608 = add i64 %11607, 8
  store i64 %11608, i64* %PC
  %11609 = inttoptr i64 %11606 to i32*
  %11610 = load i32, i32* %11609
  %11611 = sub i32 %11610, -1
  %11612 = icmp ult i32 %11610, -1
  %11613 = zext i1 %11612 to i8
  %11614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11613, i8* %11614, align 1, !tbaa !2432
  %11615 = and i32 %11611, 255
  %11616 = call i32 @llvm.ctpop.i32(i32 %11615) #16
  %11617 = trunc i32 %11616 to i8
  %11618 = and i8 %11617, 1
  %11619 = xor i8 %11618, 1
  %11620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11619, i8* %11620, align 1, !tbaa !2446
  %11621 = xor i32 %11610, -1
  %11622 = xor i32 %11621, %11611
  %11623 = lshr i32 %11622, 4
  %11624 = trunc i32 %11623 to i8
  %11625 = and i8 %11624, 1
  %11626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11625, i8* %11626, align 1, !tbaa !2447
  %11627 = icmp eq i32 %11611, 0
  %11628 = zext i1 %11627 to i8
  %11629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11628, i8* %11629, align 1, !tbaa !2448
  %11630 = lshr i32 %11611, 31
  %11631 = trunc i32 %11630 to i8
  %11632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11631, i8* %11632, align 1, !tbaa !2449
  %11633 = lshr i32 %11610, 31
  %11634 = xor i32 %11633, 1
  %11635 = xor i32 %11630, %11633
  %11636 = add nuw nsw i32 %11635, %11634
  %11637 = icmp eq i32 %11636, 2
  %11638 = zext i1 %11637 to i8
  %11639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11638, i8* %11639, align 1, !tbaa !2450
  %11640 = load i64, i64* %PC
  %11641 = add i64 %11640, 87
  %11642 = load i64, i64* %PC
  %11643 = add i64 %11642, 6
  %11644 = load i64, i64* %PC
  %11645 = add i64 %11644, 6
  store i64 %11645, i64* %PC
  %11646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11647 = load i8, i8* %11646, align 1, !tbaa !2448
  %11648 = icmp eq i8 %11647, 0
  %11649 = zext i1 %11648 to i8
  store i8 %11649, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11651 = select i1 %11648, i64 %11641, i64 %11643
  store i64 %11651, i64* %11650, align 8, !tbaa !2428
  %11652 = load i8, i8* %BRANCH_TAKEN
  %11653 = icmp eq i8 %11652, 1
  br i1 %11653, label %block_401363, label %block_401312
}

; Function Attrs: noinline
define %struct.Memory* @sub_400510_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400510:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_4004a0_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_4003f0__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4003f0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602ff0__got_type* @seg_602ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2450
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2447
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_400402, label %block_400400

block_400400:                                     ; preds = %block_4003f0
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_400402

block_400402:                                     ; preds = %block_400400, %block_4003f0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4003f0 ], [ %92, %block_400400 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2447
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2448
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2450
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4019b0_encode_rs(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4019b0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = load i64, i64* %RBP
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 1
  store i64 %41, i64* %PC
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %43 = load i64, i64* %42, align 8, !tbaa !2428
  %44 = add i64 %43, -8
  %45 = inttoptr i64 %44 to i64*
  store i64 %39, i64* %45
  store i64 %44, i64* %42, align 8, !tbaa !2428
  %46 = load i64, i64* %RSP
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 3
  store i64 %48, i64* %PC
  store i64 %46, i64* %RBP, align 8, !tbaa !2428
  %49 = load i64, i64* %RBP
  %50 = sub i64 %49, 4
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 7
  store i64 %52, i64* %PC
  %53 = inttoptr i64 %50 to i32*
  store i32 0, i32* %53
  br label %block_4019bb

block_401a3f:                                     ; preds = %block_401a2d
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 5
  store i64 %55, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %56 = load i64, i64* %RBP
  %57 = sub i64 %56, 8
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 3
  store i64 %59, i64* %PC
  %60 = inttoptr i64 %57 to i32*
  %61 = load i32, i32* %60
  %62 = zext i32 %61 to i64
  store i64 %62, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  %66 = trunc i64 %63 to i32
  %67 = sub i32 %66, 1
  %68 = zext i32 %67 to i64
  store i64 %68, i64* %RCX, align 8, !tbaa !2428
  %69 = icmp ult i32 %66, 1
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %70, i8* %71, align 1, !tbaa !2432
  %72 = and i32 %67, 255
  %73 = call i32 @llvm.ctpop.i32(i32 %72) #16
  %74 = trunc i32 %73 to i8
  %75 = and i8 %74, 1
  %76 = xor i8 %75, 1
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %76, i8* %77, align 1, !tbaa !2446
  %78 = xor i64 1, %63
  %79 = trunc i64 %78 to i32
  %80 = xor i32 %79, %67
  %81 = lshr i32 %80, 4
  %82 = trunc i32 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i32 %67, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i32 %67, 31
  %89 = trunc i32 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = lshr i32 %66, 31
  %92 = xor i32 %88, %91
  %93 = add nuw nsw i32 %92, %91
  %94 = icmp eq i32 %93, 2
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %95, i8* %96, align 1, !tbaa !2450
  %97 = load i32, i32* %ECX
  %98 = zext i32 %97 to i64
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 3
  store i64 %100, i64* %PC
  %101 = shl i64 %98, 32
  %102 = ashr exact i64 %101, 32
  store i64 %102, i64* %RDX, align 8, !tbaa !2428
  %103 = load i64, i64* %RDX
  %104 = mul i64 %103, 4
  %105 = add i64 %104, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RCX, align 8, !tbaa !2428
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 8
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 4
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %112 to i32*
  %116 = load i32, i32* %115
  %117 = sext i32 %116 to i64
  store i64 %117, i64* %RDX, align 8, !tbaa !2428
  %118 = load i64, i64* %RDX
  %119 = mul i64 %118, 4
  %120 = add i64 %119, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 7
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %120 to i32*
  %124 = load i32, i32* %123
  %125 = zext i32 %124 to i64
  store i64 %125, i64* %RSI, align 8, !tbaa !2428
  %126 = load i64, i64* %RSI
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 12
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 3
  store i64 %130, i64* %PC
  %131 = trunc i64 %126 to i32
  %132 = inttoptr i64 %128 to i32*
  %133 = load i32, i32* %132
  %134 = add i32 %133, %131
  %135 = zext i32 %134 to i64
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = icmp ult i32 %134, %131
  %137 = icmp ult i32 %134, %133
  %138 = or i1 %136, %137
  %139 = zext i1 %138 to i8
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %139, i8* %140, align 1, !tbaa !2432
  %141 = and i32 %134, 255
  %142 = call i32 @llvm.ctpop.i32(i32 %141) #16
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, 1
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %145, i8* %146, align 1, !tbaa !2446
  %147 = xor i32 %133, %131
  %148 = xor i32 %147, %134
  %149 = lshr i32 %148, 4
  %150 = trunc i32 %149 to i8
  %151 = and i8 %150, 1
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %151, i8* %152, align 1, !tbaa !2447
  %153 = icmp eq i32 %134, 0
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %154, i8* %155, align 1, !tbaa !2448
  %156 = lshr i32 %134, 31
  %157 = trunc i32 %156 to i8
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %157, i8* %158, align 1, !tbaa !2449
  %159 = lshr i32 %131, 31
  %160 = lshr i32 %133, 31
  %161 = xor i32 %156, %159
  %162 = xor i32 %156, %160
  %163 = add nuw nsw i32 %161, %162
  %164 = icmp eq i32 %163, 2
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %165, i8* %166, align 1, !tbaa !2450
  %167 = load i64, i64* %RBP
  %168 = sub i64 %167, 16
  %169 = load i32, i32* %EAX
  %170 = zext i32 %169 to i64
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 3
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %168 to i32*
  store i32 %169, i32* %173
  %174 = load i32, i32* %ESI
  %175 = zext i32 %174 to i64
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 2
  store i64 %177, i64* %PC
  %178 = and i64 %175, 4294967295
  store i64 %178, i64* %RAX, align 8, !tbaa !2428
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 1
  store i64 %180, i64* %PC
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %183 = bitcast %union.anon* %182 to i32*
  %184 = load i32, i32* %183, align 8, !tbaa !2452
  %185 = sext i32 %184 to i64
  %186 = lshr i64 %185, 32
  store i64 %186, i64* %181, align 8, !tbaa !2428
  %187 = load i64, i64* %RBP
  %188 = sub i64 %187, 16
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 3
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %188 to i32*
  %192 = load i32, i32* %191
  %193 = zext i32 %192 to i64
  store i64 %193, i64* %RSI, align 8, !tbaa !2428
  %194 = load i32, i32* %ESI
  %195 = zext i32 %194 to i64
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 2
  store i64 %197, i64* %PC
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %199 = bitcast %union.anon* %198 to i32*
  %200 = load i32, i32* %199, align 8, !tbaa !2452
  %201 = zext i32 %200 to i64
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %203 = bitcast %union.anon* %202 to i32*
  %204 = load i32, i32* %203, align 8, !tbaa !2452
  %205 = zext i32 %204 to i64
  %206 = shl i64 %195, 32
  %207 = ashr exact i64 %206, 32
  %208 = shl nuw i64 %205, 32
  %209 = or i64 %208, %201
  %210 = sdiv i64 %209, %207
  %211 = shl i64 %210, 32
  %212 = ashr exact i64 %211, 32
  %213 = icmp eq i64 %210, %212
  br i1 %213, label %218, label %214

; <label>:214:                                    ; preds = %block_401a3f
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %216 = load i64, i64* %215, align 8, !tbaa !2428
  %217 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %216, %struct.Memory* %MEMORY.4) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:218:                                    ; preds = %block_401a3f
  %219 = srem i64 %209, %207
  %220 = getelementptr inbounds %union.anon, %union.anon* %198, i64 0, i32 0
  %221 = and i64 %210, 4294967295
  store i64 %221, i64* %220, align 8, !tbaa !2428
  %222 = getelementptr inbounds %union.anon, %union.anon* %202, i64 0, i32 0
  %223 = and i64 %219, 4294967295
  store i64 %223, i64* %222, align 8, !tbaa !2428
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %224, align 1, !tbaa !2432
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %225, align 1, !tbaa !2446
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %226, align 1, !tbaa !2447
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %227, align 1, !tbaa !2448
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %228, align 1, !tbaa !2449
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %229, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %214, %218
  %230 = phi %struct.Memory* [ %217, %214 ], [ %MEMORY.4, %218 ]
  %231 = load i32, i32* %EDX
  %232 = zext i32 %231 to i64
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 3
  store i64 %234, i64* %PC
  %235 = shl i64 %232, 32
  %236 = ashr exact i64 %235, 32
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %RCX
  %238 = load i64, i64* %RDI
  %239 = mul i64 %238, 4
  %240 = add i64 %239, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 7
  store i64 %242, i64* %PC
  %243 = trunc i64 %237 to i32
  %244 = inttoptr i64 %240 to i32*
  %245 = load i32, i32* %244
  %246 = xor i32 %245, %243
  %247 = zext i32 %246 to i64
  store i64 %247, i64* %RCX, align 8, !tbaa !2428
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %248, align 1, !tbaa !2432
  %249 = and i32 %246, 255
  %250 = call i32 @llvm.ctpop.i32(i32 %249) #16
  %251 = trunc i32 %250 to i8
  %252 = and i8 %251, 1
  %253 = xor i8 %252, 1
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %253, i8* %254, align 1, !tbaa !2446
  %255 = icmp eq i32 %246, 0
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %256, i8* %257, align 1, !tbaa !2448
  %258 = lshr i32 %246, 31
  %259 = trunc i32 %258 to i8
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %259, i8* %260, align 1, !tbaa !2449
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %261, align 1, !tbaa !2450
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %262, align 1, !tbaa !2447
  %263 = load i64, i64* %RBP
  %264 = sub i64 %263, 8
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 4
  store i64 %266, i64* %PC
  %267 = inttoptr i64 %264 to i32*
  %268 = load i32, i32* %267
  %269 = sext i32 %268 to i64
  store i64 %269, i64* %RDI, align 8, !tbaa !2428
  %270 = load i64, i64* %RDI
  %271 = mul i64 %270, 4
  %272 = add i64 %271, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %273 = load i32, i32* %ECX
  %274 = zext i32 %273 to i64
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 7
  store i64 %276, i64* %PC
  %277 = inttoptr i64 %272 to i32*
  store i32 %273, i32* %277
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 32
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 5
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %279, i64* %282, align 8, !tbaa !2428
  br label %block_401aa2

block_401af6:                                     ; preds = %block_401aec
  %283 = load i64, i64* %RBP
  %284 = sub i64 %283, 8
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 3
  store i64 %286, i64* %PC
  %287 = inttoptr i64 %284 to i32*
  %288 = load i32, i32* %287
  %289 = zext i32 %288 to i64
  store i64 %289, i64* %RAX, align 8, !tbaa !2428
  %290 = load i64, i64* %RAX
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 3
  store i64 %292, i64* %PC
  %293 = trunc i64 %290 to i32
  %294 = sub i32 %293, 1
  %295 = zext i32 %294 to i64
  store i64 %295, i64* %RAX, align 8, !tbaa !2428
  %296 = icmp ult i32 %293, 1
  %297 = zext i1 %296 to i8
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %297, i8* %298, align 1, !tbaa !2432
  %299 = and i32 %294, 255
  %300 = call i32 @llvm.ctpop.i32(i32 %299) #16
  %301 = trunc i32 %300 to i8
  %302 = and i8 %301, 1
  %303 = xor i8 %302, 1
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %303, i8* %304, align 1, !tbaa !2446
  %305 = xor i64 1, %290
  %306 = trunc i64 %305 to i32
  %307 = xor i32 %306, %294
  %308 = lshr i32 %307, 4
  %309 = trunc i32 %308 to i8
  %310 = and i8 %309, 1
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %310, i8* %311, align 1, !tbaa !2447
  %312 = icmp eq i32 %294, 0
  %313 = zext i1 %312 to i8
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %313, i8* %314, align 1, !tbaa !2448
  %315 = lshr i32 %294, 31
  %316 = trunc i32 %315 to i8
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %316, i8* %317, align 1, !tbaa !2449
  %318 = lshr i32 %293, 31
  %319 = xor i32 %315, %318
  %320 = add nuw nsw i32 %319, %318
  %321 = icmp eq i32 %320, 2
  %322 = zext i1 %321 to i8
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %322, i8* %323, align 1, !tbaa !2450
  %324 = load i32, i32* %EAX
  %325 = zext i32 %324 to i64
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 3
  store i64 %327, i64* %PC
  %328 = shl i64 %325, 32
  %329 = ashr exact i64 %328, 32
  store i64 %329, i64* %RCX, align 8, !tbaa !2428
  %330 = load i64, i64* %RCX
  %331 = mul i64 %330, 4
  %332 = add i64 %331, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 7
  store i64 %334, i64* %PC
  %335 = inttoptr i64 %332 to i32*
  %336 = load i32, i32* %335
  %337 = zext i32 %336 to i64
  store i64 %337, i64* %RAX, align 8, !tbaa !2428
  %338 = load i64, i64* %RBP
  %339 = sub i64 %338, 8
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 4
  store i64 %341, i64* %PC
  %342 = inttoptr i64 %339 to i32*
  %343 = load i32, i32* %342
  %344 = sext i32 %343 to i64
  store i64 %344, i64* %RCX, align 8, !tbaa !2428
  %345 = load i64, i64* %RCX
  %346 = mul i64 %345, 4
  %347 = add i64 %346, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %348 = load i32, i32* %EAX
  %349 = zext i32 %348 to i64
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 7
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %347 to i32*
  store i32 %348, i32* %352
  %353 = load i64, i64* %RBP
  %354 = sub i64 %353, 8
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  %357 = inttoptr i64 %354 to i32*
  %358 = load i32, i32* %357
  %359 = zext i32 %358 to i64
  store i64 %359, i64* %RAX, align 8, !tbaa !2428
  %360 = load i64, i64* %RAX
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  %363 = trunc i64 %360 to i32
  %364 = add i32 -1, %363
  %365 = zext i32 %364 to i64
  store i64 %365, i64* %RAX, align 8, !tbaa !2428
  %366 = icmp ult i32 %364, %363
  %367 = icmp ult i32 %364, -1
  %368 = or i1 %366, %367
  %369 = zext i1 %368 to i8
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %369, i8* %370, align 1, !tbaa !2432
  %371 = and i32 %364, 255
  %372 = call i32 @llvm.ctpop.i32(i32 %371) #16
  %373 = trunc i32 %372 to i8
  %374 = and i8 %373, 1
  %375 = xor i8 %374, 1
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %375, i8* %376, align 1, !tbaa !2446
  %377 = xor i64 -1, %360
  %378 = trunc i64 %377 to i32
  %379 = xor i32 %378, %364
  %380 = lshr i32 %379, 4
  %381 = trunc i32 %380 to i8
  %382 = and i8 %381, 1
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %382, i8* %383, align 1, !tbaa !2447
  %384 = icmp eq i32 %364, 0
  %385 = zext i1 %384 to i8
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %385, i8* %386, align 1, !tbaa !2448
  %387 = lshr i32 %364, 31
  %388 = trunc i32 %387 to i8
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %388, i8* %389, align 1, !tbaa !2449
  %390 = lshr i32 %363, 31
  %391 = xor i32 %387, %390
  %392 = xor i32 %387, 1
  %393 = add nuw nsw i32 %391, %392
  %394 = icmp eq i32 %393, 2
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %395, i8* %396, align 1, !tbaa !2450
  %397 = load i64, i64* %RBP
  %398 = sub i64 %397, 8
  %399 = load i32, i32* %EAX
  %400 = zext i32 %399 to i64
  %401 = load i64, i64* %PC
  %402 = add i64 %401, 3
  store i64 %402, i64* %PC
  %403 = inttoptr i64 %398 to i32*
  store i32 %399, i32* %403
  %404 = load i64, i64* %PC
  %405 = sub i64 %404, 46
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 5
  store i64 %407, i64* %PC
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %405, i64* %408, align 8, !tbaa !2428
  br label %block_401aec

block_4019e2:                                     ; preds = %block_4019bb
  %409 = add i64 %701, 7
  store i64 %409, i64* %PC
  %410 = inttoptr i64 %700 to i32*
  store i32 238, i32* %410
  br label %block_4019e9

block_4019f3:                                     ; preds = %block_4019e9
  %411 = load i64, i64* %RBP
  %412 = sub i64 %411, 4
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %412 to i32*
  %416 = load i32, i32* %415
  %417 = sext i32 %416 to i64
  store i64 %417, i64* %RAX, align 8, !tbaa !2428
  %418 = load i64, i64* %RAX
  %419 = mul i64 %418, 4
  %420 = add i64 %419, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3184)
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 7
  store i64 %422, i64* %PC
  %423 = inttoptr i64 %420 to i32*
  %424 = load i32, i32* %423
  %425 = zext i32 %424 to i64
  store i64 %425, i64* %RCX, align 8, !tbaa !2428
  %426 = load i64, i64* %RCX
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 7
  store i64 %428, i64* %PC
  %429 = trunc i64 %426 to i32
  %430 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4204) to i32*)
  %431 = xor i32 %430, %429
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RCX, align 8, !tbaa !2428
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %433, align 1, !tbaa !2432
  %434 = and i32 %431, 255
  %435 = call i32 @llvm.ctpop.i32(i32 %434) #16
  %436 = trunc i32 %435 to i8
  %437 = and i8 %436, 1
  %438 = xor i8 %437, 1
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %438, i8* %439, align 1, !tbaa !2446
  %440 = icmp eq i32 %431, 0
  %441 = zext i1 %440 to i8
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %441, i8* %442, align 1, !tbaa !2448
  %443 = lshr i32 %431, 31
  %444 = trunc i32 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %444, i8* %445, align 1, !tbaa !2449
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %446, align 1, !tbaa !2450
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %447, align 1, !tbaa !2447
  %448 = load i32, i32* %ECX
  %449 = zext i32 %448 to i64
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 3
  store i64 %451, i64* %PC
  %452 = shl i64 %449, 32
  %453 = ashr exact i64 %452, 32
  store i64 %453, i64* %RAX, align 8, !tbaa !2428
  %454 = load i64, i64* %RAX
  %455 = mul i64 %454, 4
  %456 = add i64 %455, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %457 = load i64, i64* %PC
  %458 = add i64 %457, 7
  store i64 %458, i64* %PC
  %459 = inttoptr i64 %456 to i32*
  %460 = load i32, i32* %459
  %461 = zext i32 %460 to i64
  store i64 %461, i64* %RCX, align 8, !tbaa !2428
  %462 = load i64, i64* %RBP
  %463 = sub i64 %462, 12
  %464 = load i32, i32* %ECX
  %465 = zext i32 %464 to i64
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 3
  store i64 %467, i64* %PC
  %468 = inttoptr i64 %463 to i32*
  store i32 %464, i32* %468
  %469 = load i64, i64* %RBP
  %470 = sub i64 %469, 12
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 4
  store i64 %472, i64* %PC
  %473 = inttoptr i64 %470 to i32*
  %474 = load i32, i32* %473
  %475 = sub i32 %474, -1
  %476 = icmp ult i32 %474, -1
  %477 = zext i1 %476 to i8
  %478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %477, i8* %478, align 1, !tbaa !2432
  %479 = and i32 %475, 255
  %480 = call i32 @llvm.ctpop.i32(i32 %479) #16
  %481 = trunc i32 %480 to i8
  %482 = and i8 %481, 1
  %483 = xor i8 %482, 1
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %483, i8* %484, align 1, !tbaa !2446
  %485 = xor i32 %474, -1
  %486 = xor i32 %485, %475
  %487 = lshr i32 %486, 4
  %488 = trunc i32 %487 to i8
  %489 = and i8 %488, 1
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %489, i8* %490, align 1, !tbaa !2447
  %491 = icmp eq i32 %475, 0
  %492 = zext i1 %491 to i8
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %492, i8* %493, align 1, !tbaa !2448
  %494 = lshr i32 %475, 31
  %495 = trunc i32 %494 to i8
  %496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %495, i8* %496, align 1, !tbaa !2449
  %497 = lshr i32 %474, 31
  %498 = xor i32 %497, 1
  %499 = xor i32 %494, %497
  %500 = add nuw nsw i32 %499, %498
  %501 = icmp eq i32 %500, 2
  %502 = zext i1 %501 to i8
  %503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %502, i8* %503, align 1, !tbaa !2450
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 207
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 6
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 6
  store i64 %509, i64* %PC
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %511 = load i8, i8* %510, align 1, !tbaa !2448
  store i8 %511, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %513 = icmp ne i8 %511, 0
  %514 = select i1 %513, i64 %505, i64 %507
  store i64 %514, i64* %512, align 8, !tbaa !2428
  %515 = load i8, i8* %BRANCH_TAKEN
  %516 = icmp eq i8 %515, 1
  %517 = load i64, i64* %RBP
  %518 = sub i64 %517, 8
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 7
  store i64 %520, i64* %PC
  %521 = inttoptr i64 %518 to i32*
  store i32 15, i32* %521
  br i1 %516, label %block_401aec, label %block_401a23

block_4019c5:                                     ; preds = %block_4019bb
  %522 = add i64 %701, 4
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %700 to i32*
  %524 = load i32, i32* %523
  %525 = sext i32 %524 to i64
  store i64 %525, i64* %RAX, align 8, !tbaa !2428
  %526 = load i64, i64* %RAX
  %527 = mul i64 %526, 4
  %528 = add i64 %527, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %529 = load i64, i64* %PC
  %530 = add i64 %529, 11
  store i64 %530, i64* %PC
  %531 = inttoptr i64 %528 to i32*
  store i32 0, i32* %531
  %532 = load i64, i64* %RBP
  %533 = sub i64 %532, 4
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 3
  store i64 %535, i64* %PC
  %536 = inttoptr i64 %533 to i32*
  %537 = load i32, i32* %536
  %538 = zext i32 %537 to i64
  store i64 %538, i64* %RAX, align 8, !tbaa !2428
  %539 = load i64, i64* %RAX
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 3
  store i64 %541, i64* %PC
  %542 = trunc i64 %539 to i32
  %543 = add i32 1, %542
  %544 = zext i32 %543 to i64
  store i64 %544, i64* %RAX, align 8, !tbaa !2428
  %545 = icmp ult i32 %543, %542
  %546 = icmp ult i32 %543, 1
  %547 = or i1 %545, %546
  %548 = zext i1 %547 to i8
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %548, i8* %549, align 1, !tbaa !2432
  %550 = and i32 %543, 255
  %551 = call i32 @llvm.ctpop.i32(i32 %550) #16
  %552 = trunc i32 %551 to i8
  %553 = and i8 %552, 1
  %554 = xor i8 %553, 1
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %554, i8* %555, align 1, !tbaa !2446
  %556 = xor i64 1, %539
  %557 = trunc i64 %556 to i32
  %558 = xor i32 %557, %543
  %559 = lshr i32 %558, 4
  %560 = trunc i32 %559 to i8
  %561 = and i8 %560, 1
  %562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %561, i8* %562, align 1, !tbaa !2447
  %563 = icmp eq i32 %543, 0
  %564 = zext i1 %563 to i8
  %565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %564, i8* %565, align 1, !tbaa !2448
  %566 = lshr i32 %543, 31
  %567 = trunc i32 %566 to i8
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %567, i8* %568, align 1, !tbaa !2449
  %569 = lshr i32 %542, 31
  %570 = xor i32 %566, %569
  %571 = add nuw nsw i32 %570, %566
  %572 = icmp eq i32 %571, 2
  %573 = zext i1 %572 to i8
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %573, i8* %574, align 1, !tbaa !2450
  %575 = load i64, i64* %RBP
  %576 = sub i64 %575, 4
  %577 = load i32, i32* %EAX
  %578 = zext i32 %577 to i64
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 3
  store i64 %580, i64* %PC
  %581 = inttoptr i64 %576 to i32*
  store i32 %577, i32* %581
  %582 = load i64, i64* %PC
  %583 = sub i64 %582, 34
  %584 = load i64, i64* %PC
  %585 = add i64 %584, 5
  store i64 %585, i64* %PC
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %583, i64* %586, align 8, !tbaa !2428
  br label %block_4019bb

block_401b3d:                                     ; preds = %block_4019e9
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 1
  store i64 %588, i64* %PC
  %589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %590 = load i64, i64* %589, align 8, !tbaa !2428
  %591 = add i64 %590, 8
  %592 = inttoptr i64 %590 to i64*
  %593 = load i64, i64* %592
  store i64 %593, i64* %RBP, align 8, !tbaa !2428
  store i64 %591, i64* %589, align 8, !tbaa !2428
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 1
  store i64 %595, i64* %PC
  %596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %598 = load i64, i64* %597, align 8, !tbaa !2428
  %599 = inttoptr i64 %598 to i64*
  %600 = load i64, i64* %599
  store i64 %600, i64* %596, align 8, !tbaa !2428
  %601 = add i64 %598, 8
  store i64 %601, i64* %597, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4019e9:                                     ; preds = %block_401b2a, %block_4019e2
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_4019e2 ], [ %MEMORY.2, %block_401b2a ]
  %602 = load i64, i64* %RBP
  %603 = sub i64 %602, 4
  %604 = load i64, i64* %PC
  %605 = add i64 %604, 4
  store i64 %605, i64* %PC
  %606 = inttoptr i64 %603 to i32*
  %607 = load i32, i32* %606
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %608, align 1, !tbaa !2432
  %609 = and i32 %607, 255
  %610 = call i32 @llvm.ctpop.i32(i32 %609) #16
  %611 = trunc i32 %610 to i8
  %612 = and i8 %611, 1
  %613 = xor i8 %612, 1
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %613, i8* %614, align 1, !tbaa !2446
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %615, align 1, !tbaa !2447
  %616 = icmp eq i32 %607, 0
  %617 = zext i1 %616 to i8
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %617, i8* %618, align 1, !tbaa !2448
  %619 = lshr i32 %607, 31
  %620 = trunc i32 %619 to i8
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %620, i8* %621, align 1, !tbaa !2449
  %622 = lshr i32 %607, 31
  %623 = xor i32 %619, %622
  %624 = add nuw nsw i32 %623, %622
  %625 = icmp eq i32 %624, 2
  %626 = zext i1 %625 to i8
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %626, i8* %627, align 1, !tbaa !2450
  %628 = load i64, i64* %PC
  %629 = add i64 %628, 336
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 6
  %632 = load i64, i64* %PC
  %633 = add i64 %632, 6
  store i64 %633, i64* %PC
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %635 = load i8, i8* %634, align 1, !tbaa !2449
  %636 = icmp ne i8 %635, 0
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %638 = load i8, i8* %637, align 1, !tbaa !2450
  %639 = icmp ne i8 %638, 0
  %640 = xor i1 %636, %639
  %641 = zext i1 %640 to i8
  store i8 %641, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %643 = select i1 %640, i64 %629, i64 %631
  store i64 %643, i64* %642, align 8, !tbaa !2428
  %644 = load i8, i8* %BRANCH_TAKEN
  %645 = icmp eq i8 %644, 1
  br i1 %645, label %block_401b3d, label %block_4019f3

block_4019bb:                                     ; preds = %block_4019c5, %block_4019b0
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_4019b0 ], [ %MEMORY.1, %block_4019c5 ]
  %646 = load i64, i64* %RBP
  %647 = sub i64 %646, 4
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 4
  store i64 %649, i64* %PC
  %650 = inttoptr i64 %647 to i32*
  %651 = load i32, i32* %650
  %652 = sub i32 %651, 16
  %653 = icmp ult i32 %651, 16
  %654 = zext i1 %653 to i8
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %654, i8* %655, align 1, !tbaa !2432
  %656 = and i32 %652, 255
  %657 = call i32 @llvm.ctpop.i32(i32 %656) #16
  %658 = trunc i32 %657 to i8
  %659 = and i8 %658, 1
  %660 = xor i8 %659, 1
  %661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %660, i8* %661, align 1, !tbaa !2446
  %662 = xor i32 %651, 16
  %663 = xor i32 %662, %652
  %664 = lshr i32 %663, 4
  %665 = trunc i32 %664 to i8
  %666 = and i8 %665, 1
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %666, i8* %667, align 1, !tbaa !2447
  %668 = icmp eq i32 %652, 0
  %669 = zext i1 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %669, i8* %670, align 1, !tbaa !2448
  %671 = lshr i32 %652, 31
  %672 = trunc i32 %671 to i8
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %672, i8* %673, align 1, !tbaa !2449
  %674 = lshr i32 %651, 31
  %675 = xor i32 %671, %674
  %676 = add nuw nsw i32 %675, %674
  %677 = icmp eq i32 %676, 2
  %678 = zext i1 %677 to i8
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %678, i8* %679, align 1, !tbaa !2450
  %680 = load i64, i64* %PC
  %681 = add i64 %680, 35
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 6
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 6
  store i64 %685, i64* %PC
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %687 = load i8, i8* %686, align 1, !tbaa !2449
  %688 = icmp ne i8 %687, 0
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %690 = load i8, i8* %689, align 1, !tbaa !2450
  %691 = icmp ne i8 %690, 0
  %692 = xor i1 %688, %691
  %693 = xor i1 %692, true
  %694 = zext i1 %693 to i8
  store i8 %694, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %696 = select i1 %692, i64 %683, i64 %681
  store i64 %696, i64* %695, align 8, !tbaa !2428
  %697 = load i8, i8* %BRANCH_TAKEN
  %698 = icmp eq i8 %697, 1
  %699 = load i64, i64* %RBP
  %700 = sub i64 %699, 4
  %701 = load i64, i64* %PC
  br i1 %698, label %block_4019e2, label %block_4019c5

block_401a2d:                                     ; preds = %block_401a23
  %702 = load i64, i64* %RBP
  %703 = sub i64 %702, 8
  %704 = load i64, i64* %PC
  %705 = add i64 %704, 4
  store i64 %705, i64* %PC
  %706 = inttoptr i64 %703 to i32*
  %707 = load i32, i32* %706
  %708 = sext i32 %707 to i64
  store i64 %708, i64* %RAX, align 8, !tbaa !2428
  %709 = load i64, i64* %RAX
  %710 = mul i64 %709, 4
  %711 = add i64 %710, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 8
  store i64 %713, i64* %PC
  %714 = inttoptr i64 %711 to i32*
  %715 = load i32, i32* %714
  %716 = sub i32 %715, -1
  %717 = icmp ult i32 %715, -1
  %718 = zext i1 %717 to i8
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %718, i8* %719, align 1, !tbaa !2432
  %720 = and i32 %716, 255
  %721 = call i32 @llvm.ctpop.i32(i32 %720) #16
  %722 = trunc i32 %721 to i8
  %723 = and i8 %722, 1
  %724 = xor i8 %723, 1
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %724, i8* %725, align 1, !tbaa !2446
  %726 = xor i32 %715, -1
  %727 = xor i32 %726, %716
  %728 = lshr i32 %727, 4
  %729 = trunc i32 %728 to i8
  %730 = and i8 %729, 1
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %730, i8* %731, align 1, !tbaa !2447
  %732 = icmp eq i32 %716, 0
  %733 = zext i1 %732 to i8
  %734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %733, i8* %734, align 1, !tbaa !2448
  %735 = lshr i32 %716, 31
  %736 = trunc i32 %735 to i8
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %736, i8* %737, align 1, !tbaa !2449
  %738 = lshr i32 %715, 31
  %739 = xor i32 %738, 1
  %740 = xor i32 %735, %738
  %741 = add nuw nsw i32 %740, %739
  %742 = icmp eq i32 %741, 2
  %743 = zext i1 %742 to i8
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %743, i8* %744, align 1, !tbaa !2450
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 78
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 6
  %749 = load i64, i64* %PC
  %750 = add i64 %749, 6
  store i64 %750, i64* %PC
  %751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %752 = load i8, i8* %751, align 1, !tbaa !2448
  store i8 %752, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %754 = icmp ne i8 %752, 0
  %755 = select i1 %754, i64 %746, i64 %748
  store i64 %755, i64* %753, align 8, !tbaa !2428
  %756 = load i8, i8* %BRANCH_TAKEN
  %757 = icmp eq i8 %756, 1
  br i1 %757, label %block_401a87, label %block_401a3f

block_401b2a:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_401b1f
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.3, %block_401b1f ], [ %1088, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 5
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 5
  store i64 %761, i64* %PC
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %759, i64* %762, align 8, !tbaa !2428
  %763 = load i64, i64* %RBP
  %764 = sub i64 %763, 4
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 3
  store i64 %766, i64* %PC
  %767 = inttoptr i64 %764 to i32*
  %768 = load i32, i32* %767
  %769 = zext i32 %768 to i64
  store i64 %769, i64* %RAX, align 8, !tbaa !2428
  %770 = load i64, i64* %RAX
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 3
  store i64 %772, i64* %PC
  %773 = trunc i64 %770 to i32
  %774 = add i32 -1, %773
  %775 = zext i32 %774 to i64
  store i64 %775, i64* %RAX, align 8, !tbaa !2428
  %776 = icmp ult i32 %774, %773
  %777 = icmp ult i32 %774, -1
  %778 = or i1 %776, %777
  %779 = zext i1 %778 to i8
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %779, i8* %780, align 1, !tbaa !2432
  %781 = and i32 %774, 255
  %782 = call i32 @llvm.ctpop.i32(i32 %781) #16
  %783 = trunc i32 %782 to i8
  %784 = and i8 %783, 1
  %785 = xor i8 %784, 1
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %785, i8* %786, align 1, !tbaa !2446
  %787 = xor i64 -1, %770
  %788 = trunc i64 %787 to i32
  %789 = xor i32 %788, %774
  %790 = lshr i32 %789, 4
  %791 = trunc i32 %790 to i8
  %792 = and i8 %791, 1
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %792, i8* %793, align 1, !tbaa !2447
  %794 = icmp eq i32 %774, 0
  %795 = zext i1 %794 to i8
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %795, i8* %796, align 1, !tbaa !2448
  %797 = lshr i32 %774, 31
  %798 = trunc i32 %797 to i8
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %798, i8* %799, align 1, !tbaa !2449
  %800 = lshr i32 %773, 31
  %801 = xor i32 %797, %800
  %802 = xor i32 %797, 1
  %803 = add nuw nsw i32 %801, %802
  %804 = icmp eq i32 %803, 2
  %805 = zext i1 %804 to i8
  %806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %805, i8* %806, align 1, !tbaa !2450
  %807 = load i64, i64* %RBP
  %808 = sub i64 %807, 4
  %809 = load i32, i32* %EAX
  %810 = zext i32 %809 to i64
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 3
  store i64 %812, i64* %PC
  %813 = inttoptr i64 %808 to i32*
  store i32 %809, i32* %813
  %814 = load i64, i64* %PC
  %815 = sub i64 %814, 335
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 5
  store i64 %817, i64* %PC
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %815, i64* %818, align 8, !tbaa !2428
  br label %block_4019e9

block_401aec:                                     ; preds = %block_4019f3, %block_401af6
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.0, %block_4019f3 ], [ %MEMORY.3, %block_401af6 ]
  %819 = load i64, i64* %RBP
  %820 = sub i64 %819, 8
  %821 = load i64, i64* %PC
  %822 = add i64 %821, 4
  store i64 %822, i64* %PC
  %823 = inttoptr i64 %820 to i32*
  %824 = load i32, i32* %823
  %825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %825, align 1, !tbaa !2432
  %826 = and i32 %824, 255
  %827 = call i32 @llvm.ctpop.i32(i32 %826) #16
  %828 = trunc i32 %827 to i8
  %829 = and i8 %828, 1
  %830 = xor i8 %829, 1
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %830, i8* %831, align 1, !tbaa !2446
  %832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %832, align 1, !tbaa !2447
  %833 = icmp eq i32 %824, 0
  %834 = zext i1 %833 to i8
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %834, i8* %835, align 1, !tbaa !2448
  %836 = lshr i32 %824, 31
  %837 = trunc i32 %836 to i8
  %838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %837, i8* %838, align 1, !tbaa !2449
  %839 = lshr i32 %824, 31
  %840 = xor i32 %836, %839
  %841 = add nuw nsw i32 %840, %839
  %842 = icmp eq i32 %841, 2
  %843 = zext i1 %842 to i8
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %843, i8* %844, align 1, !tbaa !2450
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 47
  %847 = load i64, i64* %PC
  %848 = add i64 %847, 6
  %849 = load i64, i64* %PC
  %850 = add i64 %849, 6
  store i64 %850, i64* %PC
  %851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %852 = load i8, i8* %851, align 1, !tbaa !2448
  %853 = icmp ne i8 %852, 0
  %854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %855 = load i8, i8* %854, align 1, !tbaa !2449
  %856 = icmp ne i8 %855, 0
  %857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %858 = load i8, i8* %857, align 1, !tbaa !2450
  %859 = icmp ne i8 %858, 0
  %860 = xor i1 %856, %859
  %861 = or i1 %853, %860
  %862 = zext i1 %861 to i8
  store i8 %862, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %864 = select i1 %861, i64 %846, i64 %848
  store i64 %864, i64* %863, align 8, !tbaa !2428
  %865 = load i8, i8* %BRANCH_TAKEN
  %866 = icmp eq i8 %865, 1
  br i1 %866, label %block_401b1f, label %block_401af6

block_401a23:                                     ; preds = %block_401aa2, %block_4019f3
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.0, %block_4019f3 ], [ %MEMORY.5, %block_401aa2 ]
  %867 = load i64, i64* %RBP
  %868 = sub i64 %867, 8
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 4
  store i64 %870, i64* %PC
  %871 = inttoptr i64 %868 to i32*
  %872 = load i32, i32* %871
  %873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %873, align 1, !tbaa !2432
  %874 = and i32 %872, 255
  %875 = call i32 @llvm.ctpop.i32(i32 %874) #16
  %876 = trunc i32 %875 to i8
  %877 = and i8 %876, 1
  %878 = xor i8 %877, 1
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %878, i8* %879, align 1, !tbaa !2446
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %880, align 1, !tbaa !2447
  %881 = icmp eq i32 %872, 0
  %882 = zext i1 %881 to i8
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %882, i8* %883, align 1, !tbaa !2448
  %884 = lshr i32 %872, 31
  %885 = trunc i32 %884 to i8
  %886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %885, i8* %886, align 1, !tbaa !2449
  %887 = lshr i32 %872, 31
  %888 = xor i32 %884, %887
  %889 = add nuw nsw i32 %888, %887
  %890 = icmp eq i32 %889, 2
  %891 = zext i1 %890 to i8
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %891, i8* %892, align 1, !tbaa !2450
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 142
  %895 = load i64, i64* %PC
  %896 = add i64 %895, 6
  %897 = load i64, i64* %PC
  %898 = add i64 %897, 6
  store i64 %898, i64* %PC
  %899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %900 = load i8, i8* %899, align 1, !tbaa !2448
  %901 = icmp ne i8 %900, 0
  %902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %903 = load i8, i8* %902, align 1, !tbaa !2449
  %904 = icmp ne i8 %903, 0
  %905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %906 = load i8, i8* %905, align 1, !tbaa !2450
  %907 = icmp ne i8 %906, 0
  %908 = xor i1 %904, %907
  %909 = or i1 %901, %908
  %910 = zext i1 %909 to i8
  store i8 %910, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %912 = select i1 %909, i64 %894, i64 %896
  store i64 %912, i64* %911, align 8, !tbaa !2428
  %913 = load i8, i8* %BRANCH_TAKEN
  %914 = icmp eq i8 %913, 1
  br i1 %914, label %block_401ab5, label %block_401a2d

block_401aa2:                                     ; preds = %block_401a87, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.4, %block_401a87 ], [ %230, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ]
  %915 = load i64, i64* %PC
  %916 = add i64 %915, 5
  %917 = load i64, i64* %PC
  %918 = add i64 %917, 5
  store i64 %918, i64* %PC
  %919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %916, i64* %919, align 8, !tbaa !2428
  %920 = load i64, i64* %RBP
  %921 = sub i64 %920, 8
  %922 = load i64, i64* %PC
  %923 = add i64 %922, 3
  store i64 %923, i64* %PC
  %924 = inttoptr i64 %921 to i32*
  %925 = load i32, i32* %924
  %926 = zext i32 %925 to i64
  store i64 %926, i64* %RAX, align 8, !tbaa !2428
  %927 = load i64, i64* %RAX
  %928 = load i64, i64* %PC
  %929 = add i64 %928, 3
  store i64 %929, i64* %PC
  %930 = trunc i64 %927 to i32
  %931 = add i32 -1, %930
  %932 = zext i32 %931 to i64
  store i64 %932, i64* %RAX, align 8, !tbaa !2428
  %933 = icmp ult i32 %931, %930
  %934 = icmp ult i32 %931, -1
  %935 = or i1 %933, %934
  %936 = zext i1 %935 to i8
  %937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %936, i8* %937, align 1, !tbaa !2432
  %938 = and i32 %931, 255
  %939 = call i32 @llvm.ctpop.i32(i32 %938) #16
  %940 = trunc i32 %939 to i8
  %941 = and i8 %940, 1
  %942 = xor i8 %941, 1
  %943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %942, i8* %943, align 1, !tbaa !2446
  %944 = xor i64 -1, %927
  %945 = trunc i64 %944 to i32
  %946 = xor i32 %945, %931
  %947 = lshr i32 %946, 4
  %948 = trunc i32 %947 to i8
  %949 = and i8 %948, 1
  %950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %949, i8* %950, align 1, !tbaa !2447
  %951 = icmp eq i32 %931, 0
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %952, i8* %953, align 1, !tbaa !2448
  %954 = lshr i32 %931, 31
  %955 = trunc i32 %954 to i8
  %956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %955, i8* %956, align 1, !tbaa !2449
  %957 = lshr i32 %930, 31
  %958 = xor i32 %954, %957
  %959 = xor i32 %954, 1
  %960 = add nuw nsw i32 %958, %959
  %961 = icmp eq i32 %960, 2
  %962 = zext i1 %961 to i8
  %963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %962, i8* %963, align 1, !tbaa !2450
  %964 = load i64, i64* %RBP
  %965 = sub i64 %964, 8
  %966 = load i32, i32* %EAX
  %967 = zext i32 %966 to i64
  %968 = load i64, i64* %PC
  %969 = add i64 %968, 3
  store i64 %969, i64* %PC
  %970 = inttoptr i64 %965 to i32*
  store i32 %966, i32* %970
  %971 = load i64, i64* %PC
  %972 = sub i64 %971, 141
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 5
  store i64 %974, i64* %PC
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %972, i64* %975, align 8, !tbaa !2428
  br label %block_401a23

block_401b1f:                                     ; preds = %block_401aec
  %976 = load i64, i64* %PC
  %977 = add i64 %976, 11
  store i64 %977, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144) to i32*)
  br label %block_401b2a

block_401ab5:                                     ; preds = %block_401a23
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 5
  store i64 %979, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %980 = load i64, i64* %PC
  %981 = add i64 %980, 7
  store i64 %981, i64* %PC
  %982 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104) to i32*)
  %983 = zext i32 %982 to i64
  store i64 %983, i64* %RCX, align 8, !tbaa !2428
  %984 = load i64, i64* %RCX
  %985 = load i64, i64* %RBP
  %986 = sub i64 %985, 12
  %987 = load i64, i64* %PC
  %988 = add i64 %987, 3
  store i64 %988, i64* %PC
  %989 = trunc i64 %984 to i32
  %990 = inttoptr i64 %986 to i32*
  %991 = load i32, i32* %990
  %992 = add i32 %991, %989
  %993 = zext i32 %992 to i64
  store i64 %993, i64* %RCX, align 8, !tbaa !2428
  %994 = icmp ult i32 %992, %989
  %995 = icmp ult i32 %992, %991
  %996 = or i1 %994, %995
  %997 = zext i1 %996 to i8
  %998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %997, i8* %998, align 1, !tbaa !2432
  %999 = and i32 %992, 255
  %1000 = call i32 @llvm.ctpop.i32(i32 %999) #16
  %1001 = trunc i32 %1000 to i8
  %1002 = and i8 %1001, 1
  %1003 = xor i8 %1002, 1
  %1004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1003, i8* %1004, align 1, !tbaa !2446
  %1005 = xor i32 %991, %989
  %1006 = xor i32 %1005, %992
  %1007 = lshr i32 %1006, 4
  %1008 = trunc i32 %1007 to i8
  %1009 = and i8 %1008, 1
  %1010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1009, i8* %1010, align 1, !tbaa !2447
  %1011 = icmp eq i32 %992, 0
  %1012 = zext i1 %1011 to i8
  %1013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1012, i8* %1013, align 1, !tbaa !2448
  %1014 = lshr i32 %992, 31
  %1015 = trunc i32 %1014 to i8
  %1016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1015, i8* %1016, align 1, !tbaa !2449
  %1017 = lshr i32 %989, 31
  %1018 = lshr i32 %991, 31
  %1019 = xor i32 %1014, %1017
  %1020 = xor i32 %1014, %1018
  %1021 = add nuw nsw i32 %1019, %1020
  %1022 = icmp eq i32 %1021, 2
  %1023 = zext i1 %1022 to i8
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1023, i8* %1024, align 1, !tbaa !2450
  %1025 = load i64, i64* %RBP
  %1026 = sub i64 %1025, 20
  %1027 = load i32, i32* %EAX
  %1028 = zext i32 %1027 to i64
  %1029 = load i64, i64* %PC
  %1030 = add i64 %1029, 3
  store i64 %1030, i64* %PC
  %1031 = inttoptr i64 %1026 to i32*
  store i32 %1027, i32* %1031
  %1032 = load i32, i32* %ECX
  %1033 = zext i32 %1032 to i64
  %1034 = load i64, i64* %PC
  %1035 = add i64 %1034, 2
  store i64 %1035, i64* %PC
  %1036 = and i64 %1033, 4294967295
  store i64 %1036, i64* %RAX, align 8, !tbaa !2428
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 1
  store i64 %1038, i64* %PC
  %1039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1041 = bitcast %union.anon* %1040 to i32*
  %1042 = load i32, i32* %1041, align 8, !tbaa !2452
  %1043 = sext i32 %1042 to i64
  %1044 = lshr i64 %1043, 32
  store i64 %1044, i64* %1039, align 8, !tbaa !2428
  %1045 = load i64, i64* %RBP
  %1046 = sub i64 %1045, 20
  %1047 = load i64, i64* %PC
  %1048 = add i64 %1047, 3
  store i64 %1048, i64* %PC
  %1049 = inttoptr i64 %1046 to i32*
  %1050 = load i32, i32* %1049
  %1051 = zext i32 %1050 to i64
  store i64 %1051, i64* %RCX, align 8, !tbaa !2428
  %1052 = load i32, i32* %ECX
  %1053 = zext i32 %1052 to i64
  %1054 = load i64, i64* %PC
  %1055 = add i64 %1054, 2
  store i64 %1055, i64* %PC
  %1056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1057 = bitcast %union.anon* %1056 to i32*
  %1058 = load i32, i32* %1057, align 8, !tbaa !2452
  %1059 = zext i32 %1058 to i64
  %1060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %1061 = bitcast %union.anon* %1060 to i32*
  %1062 = load i32, i32* %1061, align 8, !tbaa !2452
  %1063 = zext i32 %1062 to i64
  %1064 = shl i64 %1053, 32
  %1065 = ashr exact i64 %1064, 32
  %1066 = shl nuw i64 %1063, 32
  %1067 = or i64 %1066, %1059
  %1068 = sdiv i64 %1067, %1065
  %1069 = shl i64 %1068, 32
  %1070 = ashr exact i64 %1069, 32
  %1071 = icmp eq i64 %1068, %1070
  br i1 %1071, label %1076, label %1072

; <label>:1072:                                   ; preds = %block_401ab5
  %1073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1074 = load i64, i64* %1073, align 8, !tbaa !2428
  %1075 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1074, %struct.Memory* %MEMORY.4) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:1076:                                   ; preds = %block_401ab5
  %1077 = srem i64 %1067, %1065
  %1078 = getelementptr inbounds %union.anon, %union.anon* %1056, i64 0, i32 0
  %1079 = and i64 %1068, 4294967295
  store i64 %1079, i64* %1078, align 8, !tbaa !2428
  %1080 = getelementptr inbounds %union.anon, %union.anon* %1060, i64 0, i32 0
  %1081 = and i64 %1077, 4294967295
  store i64 %1081, i64* %1080, align 8, !tbaa !2428
  %1082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1082, align 1, !tbaa !2432
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1083, align 1, !tbaa !2446
  %1084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1084, align 1, !tbaa !2447
  %1085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1085, align 1, !tbaa !2448
  %1086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1086, align 1, !tbaa !2449
  %1087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1087, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %1072, %1076
  %1088 = phi %struct.Memory* [ %1075, %1072 ], [ %MEMORY.4, %1076 ]
  %1089 = load i32, i32* %EDX
  %1090 = zext i32 %1089 to i64
  %1091 = load i64, i64* %PC
  %1092 = add i64 %1091, 3
  store i64 %1092, i64* %PC
  %1093 = shl i64 %1090, 32
  %1094 = ashr exact i64 %1093, 32
  store i64 %1094, i64* %RSI, align 8, !tbaa !2428
  %1095 = load i64, i64* %RSI
  %1096 = mul i64 %1095, 4
  %1097 = add i64 %1096, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %1098 = load i64, i64* %PC
  %1099 = add i64 %1098, 7
  store i64 %1099, i64* %PC
  %1100 = inttoptr i64 %1097 to i32*
  %1101 = load i32, i32* %1100
  %1102 = zext i32 %1101 to i64
  store i64 %1102, i64* %RDX, align 8, !tbaa !2428
  %1103 = load i32, i32* %EDX
  %1104 = zext i32 %1103 to i64
  %1105 = load i64, i64* %PC
  %1106 = add i64 %1105, 7
  store i64 %1106, i64* %PC
  store i32 %1103, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144) to i32*)
  %1107 = load i64, i64* %PC
  %1108 = add i64 %1107, 74
  %1109 = load i64, i64* %PC
  %1110 = add i64 %1109, 5
  store i64 %1110, i64* %PC
  %1111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1108, i64* %1111, align 8, !tbaa !2428
  br label %block_401b2a

block_401a87:                                     ; preds = %block_401a2d
  %1112 = load i64, i64* %RBP
  %1113 = sub i64 %1112, 8
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 3
  store i64 %1115, i64* %PC
  %1116 = inttoptr i64 %1113 to i32*
  %1117 = load i32, i32* %1116
  %1118 = zext i32 %1117 to i64
  store i64 %1118, i64* %RAX, align 8, !tbaa !2428
  %1119 = load i64, i64* %RAX
  %1120 = load i64, i64* %PC
  %1121 = add i64 %1120, 3
  store i64 %1121, i64* %PC
  %1122 = trunc i64 %1119 to i32
  %1123 = sub i32 %1122, 1
  %1124 = zext i32 %1123 to i64
  store i64 %1124, i64* %RAX, align 8, !tbaa !2428
  %1125 = icmp ult i32 %1122, 1
  %1126 = zext i1 %1125 to i8
  %1127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1126, i8* %1127, align 1, !tbaa !2432
  %1128 = and i32 %1123, 255
  %1129 = call i32 @llvm.ctpop.i32(i32 %1128) #16
  %1130 = trunc i32 %1129 to i8
  %1131 = and i8 %1130, 1
  %1132 = xor i8 %1131, 1
  %1133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1132, i8* %1133, align 1, !tbaa !2446
  %1134 = xor i64 1, %1119
  %1135 = trunc i64 %1134 to i32
  %1136 = xor i32 %1135, %1123
  %1137 = lshr i32 %1136, 4
  %1138 = trunc i32 %1137 to i8
  %1139 = and i8 %1138, 1
  %1140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1139, i8* %1140, align 1, !tbaa !2447
  %1141 = icmp eq i32 %1123, 0
  %1142 = zext i1 %1141 to i8
  %1143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1142, i8* %1143, align 1, !tbaa !2448
  %1144 = lshr i32 %1123, 31
  %1145 = trunc i32 %1144 to i8
  %1146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1145, i8* %1146, align 1, !tbaa !2449
  %1147 = lshr i32 %1122, 31
  %1148 = xor i32 %1144, %1147
  %1149 = add nuw nsw i32 %1148, %1147
  %1150 = icmp eq i32 %1149, 2
  %1151 = zext i1 %1150 to i8
  %1152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1151, i8* %1152, align 1, !tbaa !2450
  %1153 = load i32, i32* %EAX
  %1154 = zext i32 %1153 to i64
  %1155 = load i64, i64* %PC
  %1156 = add i64 %1155, 3
  store i64 %1156, i64* %PC
  %1157 = shl i64 %1154, 32
  %1158 = ashr exact i64 %1157, 32
  store i64 %1158, i64* %RCX, align 8, !tbaa !2428
  %1159 = load i64, i64* %RCX
  %1160 = mul i64 %1159, 4
  %1161 = add i64 %1160, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %1162 = load i64, i64* %PC
  %1163 = add i64 %1162, 7
  store i64 %1163, i64* %PC
  %1164 = inttoptr i64 %1161 to i32*
  %1165 = load i32, i32* %1164
  %1166 = zext i32 %1165 to i64
  store i64 %1166, i64* %RAX, align 8, !tbaa !2428
  %1167 = load i64, i64* %RBP
  %1168 = sub i64 %1167, 8
  %1169 = load i64, i64* %PC
  %1170 = add i64 %1169, 4
  store i64 %1170, i64* %PC
  %1171 = inttoptr i64 %1168 to i32*
  %1172 = load i32, i32* %1171
  %1173 = sext i32 %1172 to i64
  store i64 %1173, i64* %RCX, align 8, !tbaa !2428
  %1174 = load i64, i64* %RCX
  %1175 = mul i64 %1174, 4
  %1176 = add i64 %1175, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %1177 = load i32, i32* %EAX
  %1178 = zext i32 %1177 to i64
  %1179 = load i64, i64* %PC
  %1180 = add i64 %1179, 7
  store i64 %1180, i64* %PC
  %1181 = inttoptr i64 %1176 to i32*
  store i32 %1177, i32* %1181
  br label %block_401aa2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400460__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400460:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c70___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401c70:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_602de0__init_array_type* @seg_602de0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_602de0__init_array_type* @seg_602de0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2448
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2449
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2447
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2448
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2449
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2450
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2451
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2451
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2451
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2451
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 6316
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_4003f0__init_proc_renamed_(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2432
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2448
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2449
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2450
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2447
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2448
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_401cc6, label %block_401ca6

block_401cc6:                                     ; preds = %block_401cb0, %block_401c70
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_401c70 ], [ %387, %block_401cb0 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2447
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2450
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401ca6:                                     ; preds = %block_401c70
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2450
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2447
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_401cb0

block_401cb0:                                     ; preds = %block_401cb0, %block_401ca6
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_401ca6 ], [ %387, %block_401cb0 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2448
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2449
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2432
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2447
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2448
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2449
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2450
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2448
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_401cb0, label %block_401cc6
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004e0___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* getelementptr inbounds (%seg_603060__bss_type, %seg_603060__bss_type* @seg_603060__bss, i32 0, i32 0, i32 0)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2447
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2448
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_400500, label %block_4004e9

block_400500:                                     ; preds = %block_4004e0
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4004e9:                                     ; preds = %block_4004e0
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_400470_deregister_tm_clones_renamed_(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* getelementptr inbounds (%seg_603060__bss_type, %seg_603060__bss_type* @seg_603060__bss, i32 0, i32 0, i32 0)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_401ce4__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401ce4:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2449
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2450
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400430__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400430:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2432
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2450
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2447
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2450
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2447
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_401ce0___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_401c70___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_602ff0__got_type, %seg_602ff0__got_type* @seg_602ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_6040d0___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_400690_generate_gf(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400690:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 7
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 8
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 7
  store i64 %40, i64* %PC
  %41 = inttoptr i64 %38 to i32*
  store i32 1, i32* %41
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 11
  store i64 %43, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2112) to i32*)
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 4
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 7
  store i64 %47, i64* %PC
  %48 = inttoptr i64 %45 to i32*
  store i32 0, i32* %48
  br label %block_4006ad

block_40075e:                                     ; preds = %block_400745
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 7
  store i64 %50, i64* %PC
  %51 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2112) to i32*)
  %52 = zext i32 %51 to i64
  store i64 %52, i64* %RAX, align 8, !tbaa !2428
  %53 = load i64, i64* %RBP
  %54 = sub i64 %53, 4
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 3
  store i64 %56, i64* %PC
  %57 = inttoptr i64 %54 to i32*
  %58 = load i32, i32* %57
  %59 = zext i32 %58 to i64
  store i64 %59, i64* %RCX, align 8, !tbaa !2428
  %60 = load i64, i64* %RCX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  %63 = trunc i64 %60 to i32
  %64 = sub i32 %63, 1
  %65 = zext i32 %64 to i64
  store i64 %65, i64* %RCX, align 8, !tbaa !2428
  %66 = icmp ult i32 %63, 1
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %67, i8* %68, align 1, !tbaa !2432
  %69 = and i32 %64, 255
  %70 = call i32 @llvm.ctpop.i32(i32 %69) #16
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %73, i8* %74, align 1, !tbaa !2446
  %75 = xor i64 1, %60
  %76 = trunc i64 %75 to i32
  %77 = xor i32 %76, %64
  %78 = lshr i32 %77, 4
  %79 = trunc i32 %78 to i8
  %80 = and i8 %79, 1
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %80, i8* %81, align 1, !tbaa !2447
  %82 = icmp eq i32 %64, 0
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %83, i8* %84, align 1, !tbaa !2448
  %85 = lshr i32 %64, 31
  %86 = trunc i32 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %86, i8* %87, align 1, !tbaa !2449
  %88 = lshr i32 %63, 31
  %89 = xor i32 %85, %88
  %90 = add nuw nsw i32 %89, %88
  %91 = icmp eq i32 %90, 2
  %92 = zext i1 %91 to i8
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %92, i8* %93, align 1, !tbaa !2450
  %94 = load i32, i32* %ECX
  %95 = zext i32 %94 to i64
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  %98 = shl i64 %95, 32
  %99 = ashr exact i64 %98, 32
  store i64 %99, i64* %RDX, align 8, !tbaa !2428
  %100 = load i64, i64* %RDX
  %101 = mul i64 %100, 4
  %102 = add i64 %101, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 7
  store i64 %104, i64* %PC
  %105 = inttoptr i64 %102 to i32*
  %106 = load i32, i32* %105
  %107 = zext i32 %106 to i64
  store i64 %107, i64* %RCX, align 8, !tbaa !2428
  %108 = load i64, i64* %RCX
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 8
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = trunc i64 %108 to i32
  %114 = inttoptr i64 %110 to i32*
  %115 = load i32, i32* %114
  %116 = xor i32 %115, %113
  %117 = zext i32 %116 to i64
  store i64 %117, i64* %RCX, align 8, !tbaa !2428
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %118, align 1, !tbaa !2432
  %119 = and i32 %116, 255
  %120 = call i32 @llvm.ctpop.i32(i32 %119) #16
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  %123 = xor i8 %122, 1
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %123, i8* %124, align 1, !tbaa !2446
  %125 = icmp eq i32 %116, 0
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %126, i8* %127, align 1, !tbaa !2448
  %128 = lshr i32 %116, 31
  %129 = trunc i32 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %129, i8* %130, align 1, !tbaa !2449
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %131, align 1, !tbaa !2450
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %132, align 1, !tbaa !2447
  %133 = load i64, i64* %RCX
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = trunc i64 %133 to i32
  %137 = shl i32 %136, 1
  %138 = icmp slt i32 %136, 0
  %139 = icmp slt i32 %137, 0
  %140 = xor i1 %138, %139
  %141 = zext i32 %137 to i64
  store i64 %141, i64* %RCX, align 8, !tbaa !2428
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %143 = zext i1 %138 to i8
  store i8 %143, i8* %142, align 1, !tbaa !2451
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %145 = and i32 %137, 254
  %146 = call i32 @llvm.ctpop.i32(i32 %145) #16
  %147 = trunc i32 %146 to i8
  %148 = and i8 %147, 1
  %149 = xor i8 %148, 1
  store i8 %149, i8* %144, align 1, !tbaa !2451
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %150, align 1, !tbaa !2451
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %152 = icmp eq i32 %137, 0
  %153 = zext i1 %152 to i8
  store i8 %153, i8* %151, align 1, !tbaa !2451
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %155 = lshr i32 %137, 31
  %156 = trunc i32 %155 to i8
  store i8 %156, i8* %154, align 1, !tbaa !2451
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %158 = zext i1 %140 to i8
  store i8 %158, i8* %157, align 1, !tbaa !2451
  %159 = load i64, i64* %RAX
  %160 = load i32, i32* %ECX
  %161 = zext i32 %160 to i64
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 2
  store i64 %163, i64* %PC
  %164 = xor i64 %161, %159
  %165 = trunc i64 %164 to i32
  %166 = and i64 %164, 4294967295
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %167, align 1, !tbaa !2432
  %168 = and i32 %165, 255
  %169 = call i32 @llvm.ctpop.i32(i32 %168) #16
  %170 = trunc i32 %169 to i8
  %171 = and i8 %170, 1
  %172 = xor i8 %171, 1
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %172, i8* %173, align 1, !tbaa !2446
  %174 = icmp eq i32 %165, 0
  %175 = zext i1 %174 to i8
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %175, i8* %176, align 1, !tbaa !2448
  %177 = lshr i32 %165, 31
  %178 = trunc i32 %177 to i8
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %178, i8* %179, align 1, !tbaa !2449
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %180, align 1, !tbaa !2450
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %181, align 1, !tbaa !2447
  %182 = load i64, i64* %RBP
  %183 = sub i64 %182, 4
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 4
  store i64 %185, i64* %PC
  %186 = inttoptr i64 %183 to i32*
  %187 = load i32, i32* %186
  %188 = sext i32 %187 to i64
  store i64 %188, i64* %RDX, align 8, !tbaa !2428
  %189 = load i64, i64* %RDX
  %190 = mul i64 %189, 4
  %191 = add i64 %190, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %192 = load i32, i32* %EAX
  %193 = zext i32 %192 to i64
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 7
  store i64 %195, i64* %PC
  %196 = inttoptr i64 %191 to i32*
  store i32 %192, i32* %196
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 35
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 5
  store i64 %200, i64* %PC
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %198, i64* %201, align 8, !tbaa !2428
  br label %block_4007ab

block_4007cf:                                     ; preds = %block_400738
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 11
  store i64 %203, i64* %PC
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056) to i32*)
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 1
  store i64 %205, i64* %PC
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %207 = load i64, i64* %206, align 8, !tbaa !2428
  %208 = add i64 %207, 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RBP, align 8, !tbaa !2428
  store i64 %208, i64* %206, align 8, !tbaa !2428
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 1
  store i64 %212, i64* %PC
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %215 = load i64, i64* %214, align 8, !tbaa !2428
  %216 = inttoptr i64 %215 to i64*
  %217 = load i64, i64* %216
  store i64 %217, i64* %213, align 8, !tbaa !2428
  %218 = add i64 %215, 8
  store i64 %218, i64* %214, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_4006b7:                                     ; preds = %block_4006ad
  %219 = load i64, i64* %RBP
  %220 = sub i64 %219, 8
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 3
  store i64 %222, i64* %PC
  %223 = inttoptr i64 %220 to i32*
  %224 = load i32, i32* %223
  %225 = zext i32 %224 to i64
  store i64 %225, i64* %RAX, align 8, !tbaa !2428
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 4
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 4
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i32*
  %231 = load i32, i32* %230
  %232 = sext i32 %231 to i64
  store i64 %232, i64* %RCX, align 8, !tbaa !2428
  %233 = load i64, i64* %RCX
  %234 = mul i64 %233, 4
  %235 = add i64 %234, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %236 = load i32, i32* %EAX
  %237 = zext i32 %236 to i64
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 7
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %235 to i32*
  store i32 %236, i32* %240
  %241 = load i64, i64* %RBP
  %242 = sub i64 %241, 4
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 3
  store i64 %244, i64* %PC
  %245 = inttoptr i64 %242 to i32*
  %246 = load i32, i32* %245
  %247 = zext i32 %246 to i64
  store i64 %247, i64* %RAX, align 8, !tbaa !2428
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 4
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i32*
  %253 = load i32, i32* %252
  %254 = sext i32 %253 to i64
  store i64 %254, i64* %RCX, align 8, !tbaa !2428
  %255 = load i64, i64* %RCX
  %256 = mul i64 %255, 4
  %257 = add i64 %256, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 8
  store i64 %259, i64* %PC
  %260 = inttoptr i64 %257 to i32*
  %261 = load i32, i32* %260
  %262 = sext i32 %261 to i64
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = load i64, i64* %RCX
  %264 = mul i64 %263, 4
  %265 = add i64 %264, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %266 = load i32, i32* %EAX
  %267 = zext i32 %266 to i64
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 7
  store i64 %269, i64* %PC
  %270 = inttoptr i64 %265 to i32*
  store i32 %266, i32* %270
  %271 = load i64, i64* %RBP
  %272 = sub i64 %271, 4
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 4
  store i64 %274, i64* %PC
  %275 = inttoptr i64 %272 to i32*
  %276 = load i32, i32* %275
  %277 = sext i32 %276 to i64
  store i64 %277, i64* %RCX, align 8, !tbaa !2428
  %278 = load i64, i64* %RCX
  %279 = mul i64 %278, 4
  %280 = add i64 %279, add (i64 ptrtoint (%seg_603020__data_type* @seg_603020__data to i64), i64 16)
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 8
  store i64 %282, i64* %PC
  %283 = inttoptr i64 %280 to i32*
  %284 = load i32, i32* %283
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %285, align 1, !tbaa !2432
  %286 = and i32 %284, 255
  %287 = call i32 @llvm.ctpop.i32(i32 %286) #16
  %288 = trunc i32 %287 to i8
  %289 = and i8 %288, 1
  %290 = xor i8 %289, 1
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %290, i8* %291, align 1, !tbaa !2446
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %292, align 1, !tbaa !2447
  %293 = icmp eq i32 %284, 0
  %294 = zext i1 %293 to i8
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %294, i8* %295, align 1, !tbaa !2448
  %296 = lshr i32 %284, 31
  %297 = trunc i32 %296 to i8
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %297, i8* %298, align 1, !tbaa !2449
  %299 = lshr i32 %284, 31
  %300 = xor i32 %296, %299
  %301 = add nuw nsw i32 %300, %299
  %302 = icmp eq i32 %301, 2
  %303 = zext i1 %302 to i8
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %303, i8* %304, align 1, !tbaa !2450
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 23
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 6
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 6
  store i64 %310, i64* %PC
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %312 = load i8, i8* %311, align 1, !tbaa !2448
  store i8 %312, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %314 = icmp ne i8 %312, 0
  %315 = select i1 %314, i64 %306, i64 %308
  store i64 %315, i64* %313, align 8, !tbaa !2428
  %316 = load i8, i8* %BRANCH_TAKEN
  %317 = icmp eq i8 %316, 1
  br i1 %317, label %block_4006fe, label %block_4006ed

block_400715:                                     ; preds = %block_4006ad
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 8
  store i64 %319, i64* %PC
  %320 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2112) to i32*)
  %321 = sext i32 %320 to i64
  store i64 %321, i64* %RAX, align 8, !tbaa !2428
  %322 = load i64, i64* %RAX
  %323 = mul i64 %322, 4
  %324 = add i64 %323, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 11
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  store i32 8, i32* %327
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 8
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RCX, align 8, !tbaa !2428
  %335 = load i64, i64* %RCX
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 3
  store i64 %337, i64* %PC
  %338 = shl i64 %335, 32
  %339 = ashr i64 %338, 33
  %340 = trunc i64 %335 to i8
  %341 = and i8 %340, 1
  %342 = trunc i64 %339 to i32
  %343 = and i64 %339, 4294967295
  store i64 %343, i64* %RCX, align 8, !tbaa !2428
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %341, i8* %344, align 1, !tbaa !2451
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %346 = and i32 %342, 255
  %347 = call i32 @llvm.ctpop.i32(i32 %346) #16
  %348 = trunc i32 %347 to i8
  %349 = and i8 %348, 1
  %350 = xor i8 %349, 1
  store i8 %350, i8* %345, align 1, !tbaa !2451
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %351, align 1, !tbaa !2451
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %353 = icmp eq i32 %342, 0
  %354 = zext i1 %353 to i8
  store i8 %354, i8* %352, align 1, !tbaa !2451
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %356 = lshr i32 %342, 31
  %357 = trunc i32 %356 to i8
  store i8 %357, i8* %355, align 1, !tbaa !2451
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %358, align 1, !tbaa !2451
  %359 = load i64, i64* %RBP
  %360 = sub i64 %359, 8
  %361 = load i32, i32* %ECX
  %362 = zext i32 %361 to i64
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 3
  store i64 %364, i64* %PC
  %365 = inttoptr i64 %360 to i32*
  store i32 %361, i32* %365
  %366 = load i64, i64* %RBP
  %367 = sub i64 %366, 4
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 7
  store i64 %369, i64* %PC
  %370 = inttoptr i64 %367 to i32*
  store i32 9, i32* %370
  br label %block_400738

block_4006ad:                                     ; preds = %block_4006fe, %block_400690
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400690 ], [ %MEMORY.3, %block_4006fe ]
  %371 = load i64, i64* %RBP
  %372 = sub i64 %371, 4
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 4
  store i64 %374, i64* %PC
  %375 = inttoptr i64 %372 to i32*
  %376 = load i32, i32* %375
  %377 = sub i32 %376, 8
  %378 = icmp ult i32 %376, 8
  %379 = zext i1 %378 to i8
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %379, i8* %380, align 1, !tbaa !2432
  %381 = and i32 %377, 255
  %382 = call i32 @llvm.ctpop.i32(i32 %381) #16
  %383 = trunc i32 %382 to i8
  %384 = and i8 %383, 1
  %385 = xor i8 %384, 1
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %385, i8* %386, align 1, !tbaa !2446
  %387 = xor i32 %376, 8
  %388 = xor i32 %387, %377
  %389 = lshr i32 %388, 4
  %390 = trunc i32 %389 to i8
  %391 = and i8 %390, 1
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %391, i8* %392, align 1, !tbaa !2447
  %393 = icmp eq i32 %377, 0
  %394 = zext i1 %393 to i8
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %394, i8* %395, align 1, !tbaa !2448
  %396 = lshr i32 %377, 31
  %397 = trunc i32 %396 to i8
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %397, i8* %398, align 1, !tbaa !2449
  %399 = lshr i32 %376, 31
  %400 = xor i32 %396, %399
  %401 = add nuw nsw i32 %400, %399
  %402 = icmp eq i32 %401, 2
  %403 = zext i1 %402 to i8
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %403, i8* %404, align 1, !tbaa !2450
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 100
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 6
  %409 = load i64, i64* %PC
  %410 = add i64 %409, 6
  store i64 %410, i64* %PC
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %412 = load i8, i8* %411, align 1, !tbaa !2449
  %413 = icmp ne i8 %412, 0
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %415 = load i8, i8* %414, align 1, !tbaa !2450
  %416 = icmp ne i8 %415, 0
  %417 = xor i1 %413, %416
  %418 = xor i1 %417, true
  %419 = zext i1 %418 to i8
  store i8 %419, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %421 = select i1 %417, i64 %408, i64 %406
  store i64 %421, i64* %420, align 8, !tbaa !2428
  %422 = load i8, i8* %BRANCH_TAKEN
  %423 = icmp eq i8 %422, 1
  br i1 %423, label %block_400715, label %block_4006b7

block_4006ed:                                     ; preds = %block_4006b7
  %424 = load i64, i64* %RBP
  %425 = sub i64 %424, 8
  %426 = load i64, i64* %PC
  %427 = add i64 %426, 3
  store i64 %427, i64* %PC
  %428 = inttoptr i64 %425 to i32*
  %429 = load i32, i32* %428
  %430 = zext i32 %429 to i64
  store i64 %430, i64* %RAX, align 8, !tbaa !2428
  %431 = load i64, i64* %RAX
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 7
  store i64 %433, i64* %PC
  %434 = trunc i64 %431 to i32
  %435 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2112) to i32*)
  %436 = xor i32 %435, %434
  %437 = zext i32 %436 to i64
  store i64 %437, i64* %RAX, align 8, !tbaa !2428
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %438, align 1, !tbaa !2432
  %439 = and i32 %436, 255
  %440 = call i32 @llvm.ctpop.i32(i32 %439) #16
  %441 = trunc i32 %440 to i8
  %442 = and i8 %441, 1
  %443 = xor i8 %442, 1
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %443, i8* %444, align 1, !tbaa !2446
  %445 = icmp eq i32 %436, 0
  %446 = zext i1 %445 to i8
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %446, i8* %447, align 1, !tbaa !2448
  %448 = lshr i32 %436, 31
  %449 = trunc i32 %448 to i8
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %449, i8* %450, align 1, !tbaa !2449
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %451, align 1, !tbaa !2450
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %452, align 1, !tbaa !2447
  %453 = load i32, i32* %EAX
  %454 = zext i32 %453 to i64
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 7
  store i64 %456, i64* %PC
  store i32 %453, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2112) to i32*)
  br label %block_4006fe

block_4007ab:                                     ; preds = %block_40078d, %block_40075e
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_40078d ], [ %MEMORY.2, %block_40075e ]
  %457 = load i64, i64* %RBP
  %458 = sub i64 %457, 4
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 3
  store i64 %460, i64* %PC
  %461 = inttoptr i64 %458 to i32*
  %462 = load i32, i32* %461
  %463 = zext i32 %462 to i64
  store i64 %463, i64* %RAX, align 8, !tbaa !2428
  %464 = load i64, i64* %RBP
  %465 = sub i64 %464, 4
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 4
  store i64 %467, i64* %PC
  %468 = inttoptr i64 %465 to i32*
  %469 = load i32, i32* %468
  %470 = sext i32 %469 to i64
  store i64 %470, i64* %RCX, align 8, !tbaa !2428
  %471 = load i64, i64* %RCX
  %472 = mul i64 %471, 4
  %473 = add i64 %472, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 8
  store i64 %475, i64* %PC
  %476 = inttoptr i64 %473 to i32*
  %477 = load i32, i32* %476
  %478 = sext i32 %477 to i64
  store i64 %478, i64* %RCX, align 8, !tbaa !2428
  %479 = load i64, i64* %RCX
  %480 = mul i64 %479, 4
  %481 = add i64 %480, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %482 = load i32, i32* %EAX
  %483 = zext i32 %482 to i64
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 7
  store i64 %485, i64* %PC
  %486 = inttoptr i64 %481 to i32*
  store i32 %482, i32* %486
  %487 = load i64, i64* %RBP
  %488 = sub i64 %487, 4
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 3
  store i64 %490, i64* %PC
  %491 = inttoptr i64 %488 to i32*
  %492 = load i32, i32* %491
  %493 = zext i32 %492 to i64
  store i64 %493, i64* %RAX, align 8, !tbaa !2428
  %494 = load i64, i64* %RAX
  %495 = load i64, i64* %PC
  %496 = add i64 %495, 3
  store i64 %496, i64* %PC
  %497 = trunc i64 %494 to i32
  %498 = add i32 1, %497
  %499 = zext i32 %498 to i64
  store i64 %499, i64* %RAX, align 8, !tbaa !2428
  %500 = icmp ult i32 %498, %497
  %501 = icmp ult i32 %498, 1
  %502 = or i1 %500, %501
  %503 = zext i1 %502 to i8
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %503, i8* %504, align 1, !tbaa !2432
  %505 = and i32 %498, 255
  %506 = call i32 @llvm.ctpop.i32(i32 %505) #16
  %507 = trunc i32 %506 to i8
  %508 = and i8 %507, 1
  %509 = xor i8 %508, 1
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %509, i8* %510, align 1, !tbaa !2446
  %511 = xor i64 1, %494
  %512 = trunc i64 %511 to i32
  %513 = xor i32 %512, %498
  %514 = lshr i32 %513, 4
  %515 = trunc i32 %514 to i8
  %516 = and i8 %515, 1
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %516, i8* %517, align 1, !tbaa !2447
  %518 = icmp eq i32 %498, 0
  %519 = zext i1 %518 to i8
  %520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %519, i8* %520, align 1, !tbaa !2448
  %521 = lshr i32 %498, 31
  %522 = trunc i32 %521 to i8
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %522, i8* %523, align 1, !tbaa !2449
  %524 = lshr i32 %497, 31
  %525 = xor i32 %521, %524
  %526 = add nuw nsw i32 %525, %521
  %527 = icmp eq i32 %526, 2
  %528 = zext i1 %527 to i8
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %528, i8* %529, align 1, !tbaa !2450
  %530 = load i64, i64* %RBP
  %531 = sub i64 %530, 4
  %532 = load i32, i32* %EAX
  %533 = zext i32 %532 to i64
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 3
  store i64 %535, i64* %PC
  %536 = inttoptr i64 %531 to i32*
  store i32 %532, i32* %536
  %537 = load i64, i64* %PC
  %538 = sub i64 %537, 146
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 5
  store i64 %540, i64* %PC
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %538, i64* %541, align 8, !tbaa !2428
  br label %block_400738

block_400738:                                     ; preds = %block_4007ab, %block_400715
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_400715 ], [ %MEMORY.1, %block_4007ab ]
  %542 = load i64, i64* %RBP
  %543 = sub i64 %542, 4
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 7
  store i64 %545, i64* %PC
  %546 = inttoptr i64 %543 to i32*
  %547 = load i32, i32* %546
  %548 = sub i32 %547, 255
  %549 = icmp ult i32 %547, 255
  %550 = zext i1 %549 to i8
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %550, i8* %551, align 1, !tbaa !2432
  %552 = and i32 %548, 255
  %553 = call i32 @llvm.ctpop.i32(i32 %552) #16
  %554 = trunc i32 %553 to i8
  %555 = and i8 %554, 1
  %556 = xor i8 %555, 1
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %556, i8* %557, align 1, !tbaa !2446
  %558 = xor i32 %547, 255
  %559 = xor i32 %558, %548
  %560 = lshr i32 %559, 4
  %561 = trunc i32 %560 to i8
  %562 = and i8 %561, 1
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %562, i8* %563, align 1, !tbaa !2447
  %564 = icmp eq i32 %548, 0
  %565 = zext i1 %564 to i8
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %565, i8* %566, align 1, !tbaa !2448
  %567 = lshr i32 %548, 31
  %568 = trunc i32 %567 to i8
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %568, i8* %569, align 1, !tbaa !2449
  %570 = lshr i32 %547, 31
  %571 = xor i32 %567, %570
  %572 = add nuw nsw i32 %571, %570
  %573 = icmp eq i32 %572, 2
  %574 = zext i1 %573 to i8
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %574, i8* %575, align 1, !tbaa !2450
  %576 = load i64, i64* %PC
  %577 = add i64 %576, 144
  %578 = load i64, i64* %PC
  %579 = add i64 %578, 6
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 6
  store i64 %581, i64* %PC
  %582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %583 = load i8, i8* %582, align 1, !tbaa !2449
  %584 = icmp ne i8 %583, 0
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %586 = load i8, i8* %585, align 1, !tbaa !2450
  %587 = icmp ne i8 %586, 0
  %588 = xor i1 %584, %587
  %589 = xor i1 %588, true
  %590 = zext i1 %589 to i8
  store i8 %590, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %592 = select i1 %588, i64 %579, i64 %577
  store i64 %592, i64* %591, align 8, !tbaa !2428
  %593 = load i8, i8* %BRANCH_TAKEN
  %594 = icmp eq i8 %593, 1
  br i1 %594, label %block_4007cf, label %block_400745

block_400745:                                     ; preds = %block_400738
  %595 = load i64, i64* %RBP
  %596 = sub i64 %595, 4
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 3
  store i64 %598, i64* %PC
  %599 = inttoptr i64 %596 to i32*
  %600 = load i32, i32* %599
  %601 = zext i32 %600 to i64
  store i64 %601, i64* %RAX, align 8, !tbaa !2428
  %602 = load i64, i64* %RAX
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 3
  store i64 %604, i64* %PC
  %605 = trunc i64 %602 to i32
  %606 = sub i32 %605, 1
  %607 = zext i32 %606 to i64
  store i64 %607, i64* %RAX, align 8, !tbaa !2428
  %608 = icmp ult i32 %605, 1
  %609 = zext i1 %608 to i8
  %610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %609, i8* %610, align 1, !tbaa !2432
  %611 = and i32 %606, 255
  %612 = call i32 @llvm.ctpop.i32(i32 %611) #16
  %613 = trunc i32 %612 to i8
  %614 = and i8 %613, 1
  %615 = xor i8 %614, 1
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %615, i8* %616, align 1, !tbaa !2446
  %617 = xor i64 1, %602
  %618 = trunc i64 %617 to i32
  %619 = xor i32 %618, %606
  %620 = lshr i32 %619, 4
  %621 = trunc i32 %620 to i8
  %622 = and i8 %621, 1
  %623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %622, i8* %623, align 1, !tbaa !2447
  %624 = icmp eq i32 %606, 0
  %625 = zext i1 %624 to i8
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %625, i8* %626, align 1, !tbaa !2448
  %627 = lshr i32 %606, 31
  %628 = trunc i32 %627 to i8
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %628, i8* %629, align 1, !tbaa !2449
  %630 = lshr i32 %605, 31
  %631 = xor i32 %627, %630
  %632 = add nuw nsw i32 %631, %630
  %633 = icmp eq i32 %632, 2
  %634 = zext i1 %633 to i8
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %634, i8* %635, align 1, !tbaa !2450
  %636 = load i32, i32* %EAX
  %637 = zext i32 %636 to i64
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 3
  store i64 %639, i64* %PC
  %640 = shl i64 %637, 32
  %641 = ashr exact i64 %640, 32
  store i64 %641, i64* %RCX, align 8, !tbaa !2428
  %642 = load i64, i64* %RCX
  %643 = mul i64 %642, 4
  %644 = add i64 %643, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 7
  store i64 %646, i64* %PC
  %647 = inttoptr i64 %644 to i32*
  %648 = load i32, i32* %647
  %649 = zext i32 %648 to i64
  store i64 %649, i64* %RAX, align 8, !tbaa !2428
  %650 = load i32, i32* %EAX
  %651 = zext i32 %650 to i64
  %652 = load i64, i64* %RBP
  %653 = sub i64 %652, 8
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 3
  store i64 %655, i64* %PC
  %656 = inttoptr i64 %653 to i32*
  %657 = load i32, i32* %656
  %658 = sub i32 %650, %657
  %659 = icmp ult i32 %650, %657
  %660 = zext i1 %659 to i8
  %661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %660, i8* %661, align 1, !tbaa !2432
  %662 = and i32 %658, 255
  %663 = call i32 @llvm.ctpop.i32(i32 %662) #16
  %664 = trunc i32 %663 to i8
  %665 = and i8 %664, 1
  %666 = xor i8 %665, 1
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %666, i8* %667, align 1, !tbaa !2446
  %668 = xor i32 %657, %650
  %669 = xor i32 %668, %658
  %670 = lshr i32 %669, 4
  %671 = trunc i32 %670 to i8
  %672 = and i8 %671, 1
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %672, i8* %673, align 1, !tbaa !2447
  %674 = icmp eq i32 %658, 0
  %675 = zext i1 %674 to i8
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %675, i8* %676, align 1, !tbaa !2448
  %677 = lshr i32 %658, 31
  %678 = trunc i32 %677 to i8
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %678, i8* %679, align 1, !tbaa !2449
  %680 = lshr i32 %650, 31
  %681 = lshr i32 %657, 31
  %682 = xor i32 %681, %680
  %683 = xor i32 %677, %680
  %684 = add nuw nsw i32 %683, %682
  %685 = icmp eq i32 %684, 2
  %686 = zext i1 %685 to i8
  %687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %686, i8* %687, align 1, !tbaa !2450
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 53
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 6
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 6
  store i64 %693, i64* %PC
  %694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %695 = load i8, i8* %694, align 1, !tbaa !2449
  %696 = icmp ne i8 %695, 0
  %697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %698 = load i8, i8* %697, align 1, !tbaa !2450
  %699 = icmp ne i8 %698, 0
  %700 = xor i1 %696, %699
  %701 = zext i1 %700 to i8
  store i8 %701, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %703 = select i1 %700, i64 %689, i64 %691
  store i64 %703, i64* %702, align 8, !tbaa !2428
  %704 = load i8, i8* %BRANCH_TAKEN
  %705 = icmp eq i8 %704, 1
  br i1 %705, label %block_40078d, label %block_40075e

block_40078d:                                     ; preds = %block_400745
  %706 = load i64, i64* %RBP
  %707 = sub i64 %706, 4
  %708 = load i64, i64* %PC
  %709 = add i64 %708, 3
  store i64 %709, i64* %PC
  %710 = inttoptr i64 %707 to i32*
  %711 = load i32, i32* %710
  %712 = zext i32 %711 to i64
  store i64 %712, i64* %RAX, align 8, !tbaa !2428
  %713 = load i64, i64* %RAX
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 3
  store i64 %715, i64* %PC
  %716 = trunc i64 %713 to i32
  %717 = sub i32 %716, 1
  %718 = zext i32 %717 to i64
  store i64 %718, i64* %RAX, align 8, !tbaa !2428
  %719 = icmp ult i32 %716, 1
  %720 = zext i1 %719 to i8
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %720, i8* %721, align 1, !tbaa !2432
  %722 = and i32 %717, 255
  %723 = call i32 @llvm.ctpop.i32(i32 %722) #16
  %724 = trunc i32 %723 to i8
  %725 = and i8 %724, 1
  %726 = xor i8 %725, 1
  %727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %726, i8* %727, align 1, !tbaa !2446
  %728 = xor i64 1, %713
  %729 = trunc i64 %728 to i32
  %730 = xor i32 %729, %717
  %731 = lshr i32 %730, 4
  %732 = trunc i32 %731 to i8
  %733 = and i8 %732, 1
  %734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %733, i8* %734, align 1, !tbaa !2447
  %735 = icmp eq i32 %717, 0
  %736 = zext i1 %735 to i8
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %736, i8* %737, align 1, !tbaa !2448
  %738 = lshr i32 %717, 31
  %739 = trunc i32 %738 to i8
  %740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %739, i8* %740, align 1, !tbaa !2449
  %741 = lshr i32 %716, 31
  %742 = xor i32 %738, %741
  %743 = add nuw nsw i32 %742, %741
  %744 = icmp eq i32 %743, 2
  %745 = zext i1 %744 to i8
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %745, i8* %746, align 1, !tbaa !2450
  %747 = load i32, i32* %EAX
  %748 = zext i32 %747 to i64
  %749 = load i64, i64* %PC
  %750 = add i64 %749, 3
  store i64 %750, i64* %PC
  %751 = shl i64 %748, 32
  %752 = ashr exact i64 %751, 32
  store i64 %752, i64* %RCX, align 8, !tbaa !2428
  %753 = load i64, i64* %RCX
  %754 = mul i64 %753, 4
  %755 = add i64 %754, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %756 = load i64, i64* %PC
  %757 = add i64 %756, 7
  store i64 %757, i64* %PC
  %758 = inttoptr i64 %755 to i32*
  %759 = load i32, i32* %758
  %760 = zext i32 %759 to i64
  store i64 %760, i64* %RAX, align 8, !tbaa !2428
  %761 = load i64, i64* %RAX
  %762 = load i64, i64* %PC
  %763 = add i64 %762, 3
  store i64 %763, i64* %PC
  %764 = trunc i64 %761 to i32
  %765 = shl i32 %764, 1
  %766 = icmp slt i32 %764, 0
  %767 = icmp slt i32 %765, 0
  %768 = xor i1 %766, %767
  %769 = zext i32 %765 to i64
  store i64 %769, i64* %RAX, align 8, !tbaa !2428
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %771 = zext i1 %766 to i8
  store i8 %771, i8* %770, align 1, !tbaa !2451
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %773 = and i32 %765, 254
  %774 = call i32 @llvm.ctpop.i32(i32 %773) #16
  %775 = trunc i32 %774 to i8
  %776 = and i8 %775, 1
  %777 = xor i8 %776, 1
  store i8 %777, i8* %772, align 1, !tbaa !2451
  %778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %778, align 1, !tbaa !2451
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %780 = icmp eq i32 %765, 0
  %781 = zext i1 %780 to i8
  store i8 %781, i8* %779, align 1, !tbaa !2451
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %783 = lshr i32 %765, 31
  %784 = trunc i32 %783 to i8
  store i8 %784, i8* %782, align 1, !tbaa !2451
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %786 = zext i1 %768 to i8
  store i8 %786, i8* %785, align 1, !tbaa !2451
  %787 = load i64, i64* %RBP
  %788 = sub i64 %787, 4
  %789 = load i64, i64* %PC
  %790 = add i64 %789, 4
  store i64 %790, i64* %PC
  %791 = inttoptr i64 %788 to i32*
  %792 = load i32, i32* %791
  %793 = sext i32 %792 to i64
  store i64 %793, i64* %RCX, align 8, !tbaa !2428
  %794 = load i64, i64* %RCX
  %795 = mul i64 %794, 4
  %796 = add i64 %795, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %797 = load i32, i32* %EAX
  %798 = zext i32 %797 to i64
  %799 = load i64, i64* %PC
  %800 = add i64 %799, 7
  store i64 %800, i64* %PC
  %801 = inttoptr i64 %796 to i32*
  store i32 %797, i32* %801
  br label %block_4007ab

block_4006fe:                                     ; preds = %block_4006ed, %block_4006b7
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.0, %block_4006b7 ], [ %MEMORY.0, %block_4006ed ]
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 8
  %804 = load i64, i64* %PC
  %805 = add i64 %804, 3
  store i64 %805, i64* %PC
  %806 = inttoptr i64 %803 to i32*
  %807 = load i32, i32* %806
  %808 = zext i32 %807 to i64
  store i64 %808, i64* %RAX, align 8, !tbaa !2428
  %809 = load i64, i64* %RAX
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 3
  store i64 %811, i64* %PC
  %812 = trunc i64 %809 to i32
  %813 = shl i32 %812, 1
  %814 = icmp slt i32 %812, 0
  %815 = icmp slt i32 %813, 0
  %816 = xor i1 %814, %815
  %817 = zext i32 %813 to i64
  store i64 %817, i64* %RAX, align 8, !tbaa !2428
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %819 = zext i1 %814 to i8
  store i8 %819, i8* %818, align 1, !tbaa !2451
  %820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %821 = and i32 %813, 254
  %822 = call i32 @llvm.ctpop.i32(i32 %821) #16
  %823 = trunc i32 %822 to i8
  %824 = and i8 %823, 1
  %825 = xor i8 %824, 1
  store i8 %825, i8* %820, align 1, !tbaa !2451
  %826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %826, align 1, !tbaa !2451
  %827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %828 = icmp eq i32 %813, 0
  %829 = zext i1 %828 to i8
  store i8 %829, i8* %827, align 1, !tbaa !2451
  %830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %831 = lshr i32 %813, 31
  %832 = trunc i32 %831 to i8
  store i8 %832, i8* %830, align 1, !tbaa !2451
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %834 = zext i1 %816 to i8
  store i8 %834, i8* %833, align 1, !tbaa !2451
  %835 = load i64, i64* %RBP
  %836 = sub i64 %835, 8
  %837 = load i32, i32* %EAX
  %838 = zext i32 %837 to i64
  %839 = load i64, i64* %PC
  %840 = add i64 %839, 3
  store i64 %840, i64* %PC
  %841 = inttoptr i64 %836 to i32*
  store i32 %837, i32* %841
  %842 = load i64, i64* %RBP
  %843 = sub i64 %842, 4
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 3
  store i64 %845, i64* %PC
  %846 = inttoptr i64 %843 to i32*
  %847 = load i32, i32* %846
  %848 = zext i32 %847 to i64
  store i64 %848, i64* %RAX, align 8, !tbaa !2428
  %849 = load i64, i64* %RAX
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 3
  store i64 %851, i64* %PC
  %852 = trunc i64 %849 to i32
  %853 = add i32 1, %852
  %854 = zext i32 %853 to i64
  store i64 %854, i64* %RAX, align 8, !tbaa !2428
  %855 = icmp ult i32 %853, %852
  %856 = icmp ult i32 %853, 1
  %857 = or i1 %855, %856
  %858 = zext i1 %857 to i8
  %859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %858, i8* %859, align 1, !tbaa !2432
  %860 = and i32 %853, 255
  %861 = call i32 @llvm.ctpop.i32(i32 %860) #16
  %862 = trunc i32 %861 to i8
  %863 = and i8 %862, 1
  %864 = xor i8 %863, 1
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %864, i8* %865, align 1, !tbaa !2446
  %866 = xor i64 1, %849
  %867 = trunc i64 %866 to i32
  %868 = xor i32 %867, %853
  %869 = lshr i32 %868, 4
  %870 = trunc i32 %869 to i8
  %871 = and i8 %870, 1
  %872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %871, i8* %872, align 1, !tbaa !2447
  %873 = icmp eq i32 %853, 0
  %874 = zext i1 %873 to i8
  %875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %874, i8* %875, align 1, !tbaa !2448
  %876 = lshr i32 %853, 31
  %877 = trunc i32 %876 to i8
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %877, i8* %878, align 1, !tbaa !2449
  %879 = lshr i32 %852, 31
  %880 = xor i32 %876, %879
  %881 = add nuw nsw i32 %880, %876
  %882 = icmp eq i32 %881, 2
  %883 = zext i1 %882 to i8
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %883, i8* %884, align 1, !tbaa !2450
  %885 = load i64, i64* %RBP
  %886 = sub i64 %885, 4
  %887 = load i32, i32* %EAX
  %888 = zext i32 %887 to i64
  %889 = load i64, i64* %PC
  %890 = add i64 %889, 3
  store i64 %890, i64* %PC
  %891 = inttoptr i64 %886 to i32*
  store i32 %887, i32* %891
  %892 = load i64, i64* %PC
  %893 = sub i64 %892, 99
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 5
  store i64 %895, i64* %PC
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %893, i64* %896, align 8, !tbaa !2428
  br label %block_4006ad
}

; Function Attrs: noinline
define %struct.Memory* @sub_400470_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400470:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 6303832, i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, 6303832
  %37 = icmp ult i64 %33, 6303832
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 6303832, %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %33, 63
  %60 = xor i64 %56, %59
  %61 = add nuw nsw i64 %60, %59
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %63, i8* %64, align 1, !tbaa !2450
  %65 = load i64, i64* %RSP
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %RBP, align 8, !tbaa !2428
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 25
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_400498, label %block_400481

block_400498:                                     ; preds = %block_400481, %block_400493, %block_400470
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400470 ], [ %2, %block_400481 ], [ %2, %block_400493 ]
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40049a:                                     ; preds = %block_40048b
  %96 = load i64, i64* %RAX
  %97 = load i64, i64* %RAX
  %98 = add i64 %97, %96
  %99 = load i16, i16* %AX
  %100 = zext i16 %99 to i64
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 6
  store i64 %102, i64* %PC
  %103 = load i64, i64* %PC
  %104 = tail call %struct.Memory* @sub_4004a0_register_tm_clones(%struct.State* %0, i64 %103, %struct.Memory* %2)
  ret %struct.Memory* %104

block_400493:                                     ; preds = %block_40048b
  %105 = load i64, i64* %RAX
  %106 = load i64, i64* %RAX
  %107 = add i64 %106, %105
  %108 = load i32, i32* %EAX
  %109 = zext i32 %108 to i64
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 5
  store i64 %111, i64* %PC
  br label %block_400498

block_40048b:                                     ; preds = %block_400481
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 1
  store i64 %113, i64* %PC
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %115 = load i64, i64* %114, align 8, !tbaa !2428
  %116 = add i64 %115, 8
  %117 = inttoptr i64 %115 to i64*
  %118 = load i64, i64* %117
  store i64 %118, i64* %RBP, align 8, !tbaa !2428
  store i64 %116, i64* %114, align 8, !tbaa !2428
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  store i64 %120, i64* %PC
  store i64 6303832, i64* %RDI, align 8, !tbaa !2428
  %121 = load i64, i64* %RAX
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 2
  store i64 %123, i64* %PC
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %121, i64* %124, align 8, !tbaa !2428
  %125 = load i64, i64* %PC
  switch i64 %125, label %162 [
    i64 4195482, label %block_40049a
    i64 4195475, label %block_400493
  ]

block_400481:                                     ; preds = %block_400470
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 5
  store i64 %127, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %128 = load i64, i64* %RAX
  %129 = load i64, i64* %RAX
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 3
  store i64 %131, i64* %PC
  %132 = and i64 %129, %128
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %133, align 1, !tbaa !2432
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 255
  %136 = call i32 @llvm.ctpop.i32(i32 %135) #16
  %137 = trunc i32 %136 to i8
  %138 = and i8 %137, 1
  %139 = xor i8 %138, 1
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %139, i8* %140, align 1, !tbaa !2446
  %141 = icmp eq i64 %132, 0
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %142, i8* %143, align 1, !tbaa !2448
  %144 = lshr i64 %132, 63
  %145 = trunc i64 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %145, i8* %146, align 1, !tbaa !2449
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %147, align 1, !tbaa !2450
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %148, align 1, !tbaa !2447
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 15
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 2
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 2
  store i64 %154, i64* %PC
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %156 = load i8, i8* %155, align 1, !tbaa !2448
  store i8 %156, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %158 = icmp ne i8 %156, 0
  %159 = select i1 %158, i64 %150, i64 %152
  store i64 %159, i64* %157, align 8, !tbaa !2428
  %160 = load i8, i8* %BRANCH_TAKEN
  %161 = icmp eq i8 %160, 1
  br i1 %161, label %block_400498, label %block_40048b

; <label>:162:                                    ; preds = %block_40048b
  %163 = load i64, i64* %PC
  %164 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %163, %struct.Memory* %2)
  ret %struct.Memory* %164
}

; Function Attrs: noinline
define %struct.Memory* @sub_401ce0___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401ce0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007e0_gen_poly(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4007e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = load i64, i64* %RBP
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 1
  store i64 %41, i64* %PC
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %43 = load i64, i64* %42, align 8, !tbaa !2428
  %44 = add i64 %43, -8
  %45 = inttoptr i64 %44 to i64*
  store i64 %39, i64* %45
  store i64 %44, i64* %42, align 8, !tbaa !2428
  %46 = load i64, i64* %RSP
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 3
  store i64 %48, i64* %PC
  store i64 %46, i64* %RBP, align 8, !tbaa !2428
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 11
  store i64 %50, i64* %PC
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104) to i32*)
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 11
  store i64 %52, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3108) to i32*)
  %53 = load i64, i64* %RBP
  %54 = sub i64 %53, 4
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 7
  store i64 %56, i64* %PC
  %57 = inttoptr i64 %54 to i32*
  store i32 2, i32* %57
  br label %block_400801

block_40083f:                                     ; preds = %block_40082d
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 5
  store i64 %59, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 8
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC
  %64 = inttoptr i64 %61 to i32*
  %65 = load i32, i32* %64
  %66 = zext i32 %65 to i64
  store i64 %66, i64* %RCX, align 8, !tbaa !2428
  %67 = load i64, i64* %RCX
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 3
  store i64 %69, i64* %PC
  %70 = trunc i64 %67 to i32
  %71 = sub i32 %70, 1
  %72 = zext i32 %71 to i64
  store i64 %72, i64* %RCX, align 8, !tbaa !2428
  %73 = icmp ult i32 %70, 1
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %74, i8* %75, align 1, !tbaa !2432
  %76 = and i32 %71, 255
  %77 = call i32 @llvm.ctpop.i32(i32 %76) #16
  %78 = trunc i32 %77 to i8
  %79 = and i8 %78, 1
  %80 = xor i8 %79, 1
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %80, i8* %81, align 1, !tbaa !2446
  %82 = xor i64 1, %67
  %83 = trunc i64 %82 to i32
  %84 = xor i32 %83, %71
  %85 = lshr i32 %84, 4
  %86 = trunc i32 %85 to i8
  %87 = and i8 %86, 1
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %87, i8* %88, align 1, !tbaa !2447
  %89 = icmp eq i32 %71, 0
  %90 = zext i1 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %90, i8* %91, align 1, !tbaa !2448
  %92 = lshr i32 %71, 31
  %93 = trunc i32 %92 to i8
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %93, i8* %94, align 1, !tbaa !2449
  %95 = lshr i32 %70, 31
  %96 = xor i32 %92, %95
  %97 = add nuw nsw i32 %96, %95
  %98 = icmp eq i32 %97, 2
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %99, i8* %100, align 1, !tbaa !2450
  %101 = load i32, i32* %ECX
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = shl i64 %102, 32
  %106 = ashr exact i64 %105, 32
  store i64 %106, i64* %RDX, align 8, !tbaa !2428
  %107 = load i64, i64* %RDX
  %108 = mul i64 %107, 4
  %109 = add i64 %108, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  %112 = inttoptr i64 %109 to i32*
  %113 = load i32, i32* %112
  %114 = zext i32 %113 to i64
  store i64 %114, i64* %RCX, align 8, !tbaa !2428
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 8
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 4
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %116 to i32*
  %120 = load i32, i32* %119
  %121 = sext i32 %120 to i64
  store i64 %121, i64* %RDX, align 8, !tbaa !2428
  %122 = load i64, i64* %RDX
  %123 = mul i64 %122, 4
  %124 = add i64 %123, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 8
  store i64 %126, i64* %PC
  %127 = inttoptr i64 %124 to i32*
  %128 = load i32, i32* %127
  %129 = sext i32 %128 to i64
  store i64 %129, i64* %RDX, align 8, !tbaa !2428
  %130 = load i64, i64* %RDX
  %131 = mul i64 %130, 4
  %132 = add i64 %131, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 7
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i32*
  %136 = load i32, i32* %135
  %137 = zext i32 %136 to i64
  store i64 %137, i64* %RSI, align 8, !tbaa !2428
  %138 = load i64, i64* %RSI
  %139 = load i64, i64* %RBP
  %140 = sub i64 %139, 4
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 3
  store i64 %142, i64* %PC
  %143 = trunc i64 %138 to i32
  %144 = inttoptr i64 %140 to i32*
  %145 = load i32, i32* %144
  %146 = add i32 %145, %143
  %147 = zext i32 %146 to i64
  store i64 %147, i64* %RSI, align 8, !tbaa !2428
  %148 = icmp ult i32 %146, %143
  %149 = icmp ult i32 %146, %145
  %150 = or i1 %148, %149
  %151 = zext i1 %150 to i8
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %151, i8* %152, align 1, !tbaa !2432
  %153 = and i32 %146, 255
  %154 = call i32 @llvm.ctpop.i32(i32 %153) #16
  %155 = trunc i32 %154 to i8
  %156 = and i8 %155, 1
  %157 = xor i8 %156, 1
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %157, i8* %158, align 1, !tbaa !2446
  %159 = xor i32 %145, %143
  %160 = xor i32 %159, %146
  %161 = lshr i32 %160, 4
  %162 = trunc i32 %161 to i8
  %163 = and i8 %162, 1
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %163, i8* %164, align 1, !tbaa !2447
  %165 = icmp eq i32 %146, 0
  %166 = zext i1 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %166, i8* %167, align 1, !tbaa !2448
  %168 = lshr i32 %146, 31
  %169 = trunc i32 %168 to i8
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %169, i8* %170, align 1, !tbaa !2449
  %171 = lshr i32 %143, 31
  %172 = lshr i32 %145, 31
  %173 = xor i32 %168, %171
  %174 = xor i32 %168, %172
  %175 = add nuw nsw i32 %173, %174
  %176 = icmp eq i32 %175, 2
  %177 = zext i1 %176 to i8
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %177, i8* %178, align 1, !tbaa !2450
  %179 = load i64, i64* %RBP
  %180 = sub i64 %179, 12
  %181 = load i32, i32* %EAX
  %182 = zext i32 %181 to i64
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 3
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %180 to i32*
  store i32 %181, i32* %185
  %186 = load i32, i32* %ESI
  %187 = zext i32 %186 to i64
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 2
  store i64 %189, i64* %PC
  %190 = and i64 %187, 4294967295
  store i64 %190, i64* %RAX, align 8, !tbaa !2428
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 1
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %195 = bitcast %union.anon* %194 to i32*
  %196 = load i32, i32* %195, align 8, !tbaa !2452
  %197 = sext i32 %196 to i64
  %198 = lshr i64 %197, 32
  store i64 %198, i64* %193, align 8, !tbaa !2428
  %199 = load i64, i64* %RBP
  %200 = sub i64 %199, 12
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 3
  store i64 %202, i64* %PC
  %203 = inttoptr i64 %200 to i32*
  %204 = load i32, i32* %203
  %205 = zext i32 %204 to i64
  store i64 %205, i64* %RSI, align 8, !tbaa !2428
  %206 = load i32, i32* %ESI
  %207 = zext i32 %206 to i64
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 2
  store i64 %209, i64* %PC
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %211 = bitcast %union.anon* %210 to i32*
  %212 = load i32, i32* %211, align 8, !tbaa !2452
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %215 = bitcast %union.anon* %214 to i32*
  %216 = load i32, i32* %215, align 8, !tbaa !2452
  %217 = zext i32 %216 to i64
  %218 = shl i64 %207, 32
  %219 = ashr exact i64 %218, 32
  %220 = shl nuw i64 %217, 32
  %221 = or i64 %220, %213
  %222 = sdiv i64 %221, %219
  %223 = shl i64 %222, 32
  %224 = ashr exact i64 %223, 32
  %225 = icmp eq i64 %222, %224
  br i1 %225, label %230, label %226

; <label>:226:                                    ; preds = %block_40083f
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %228 = load i64, i64* %227, align 8, !tbaa !2428
  %229 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %228, %struct.Memory* %MEMORY.2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:230:                                    ; preds = %block_40083f
  %231 = srem i64 %221, %219
  %232 = getelementptr inbounds %union.anon, %union.anon* %210, i64 0, i32 0
  %233 = and i64 %222, 4294967295
  store i64 %233, i64* %232, align 8, !tbaa !2428
  %234 = getelementptr inbounds %union.anon, %union.anon* %214, i64 0, i32 0
  %235 = and i64 %231, 4294967295
  store i64 %235, i64* %234, align 8, !tbaa !2428
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %236, align 1, !tbaa !2432
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %237, align 1, !tbaa !2446
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %238, align 1, !tbaa !2447
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %239, align 1, !tbaa !2448
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %240, align 1, !tbaa !2449
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %241, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %226, %230
  %242 = phi %struct.Memory* [ %229, %226 ], [ %MEMORY.2, %230 ]
  %243 = load i32, i32* %EDX
  %244 = zext i32 %243 to i64
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 3
  store i64 %246, i64* %PC
  %247 = shl i64 %244, 32
  %248 = ashr exact i64 %247, 32
  store i64 %248, i64* %RDI, align 8, !tbaa !2428
  %249 = load i64, i64* %RCX
  %250 = load i64, i64* %RDI
  %251 = mul i64 %250, 4
  %252 = add i64 %251, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 7
  store i64 %254, i64* %PC
  %255 = trunc i64 %249 to i32
  %256 = inttoptr i64 %252 to i32*
  %257 = load i32, i32* %256
  %258 = xor i32 %257, %255
  %259 = zext i32 %258 to i64
  store i64 %259, i64* %RCX, align 8, !tbaa !2428
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %260, align 1, !tbaa !2432
  %261 = and i32 %258, 255
  %262 = call i32 @llvm.ctpop.i32(i32 %261) #16
  %263 = trunc i32 %262 to i8
  %264 = and i8 %263, 1
  %265 = xor i8 %264, 1
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %265, i8* %266, align 1, !tbaa !2446
  %267 = icmp eq i32 %258, 0
  %268 = zext i1 %267 to i8
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %268, i8* %269, align 1, !tbaa !2448
  %270 = lshr i32 %258, 31
  %271 = trunc i32 %270 to i8
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %271, i8* %272, align 1, !tbaa !2449
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %273, align 1, !tbaa !2450
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %274, align 1, !tbaa !2447
  %275 = load i64, i64* %RBP
  %276 = sub i64 %275, 8
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 4
  store i64 %278, i64* %PC
  %279 = inttoptr i64 %276 to i32*
  %280 = load i32, i32* %279
  %281 = sext i32 %280 to i64
  store i64 %281, i64* %RDI, align 8, !tbaa !2428
  %282 = load i64, i64* %RDI
  %283 = mul i64 %282, 4
  %284 = add i64 %283, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %285 = load i32, i32* %ECX
  %286 = zext i32 %285 to i64
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 7
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %284 to i32*
  store i32 %285, i32* %289
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 32
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 5
  store i64 %293, i64* %PC
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %291, i64* %294, align 8, !tbaa !2428
  br label %block_4008aa

block_4008fe:                                     ; preds = %block_400801
  %295 = add i64 %805, 7
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %804 to i32*
  store i32 0, i32* %296
  br label %block_400905

block_40090f:                                     ; preds = %block_400905
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 4
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i32*
  %302 = load i32, i32* %301
  %303 = sext i32 %302 to i64
  store i64 %303, i64* %RAX, align 8, !tbaa !2428
  %304 = load i64, i64* %RAX
  %305 = mul i64 %304, 4
  %306 = add i64 %305, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 8
  store i64 %308, i64* %PC
  %309 = inttoptr i64 %306 to i32*
  %310 = load i32, i32* %309
  %311 = sext i32 %310 to i64
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RAX
  %313 = mul i64 %312, 4
  %314 = add i64 %313, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 7
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %314 to i32*
  %318 = load i32, i32* %317
  %319 = zext i32 %318 to i64
  store i64 %319, i64* %RCX, align 8, !tbaa !2428
  %320 = load i64, i64* %RBP
  %321 = sub i64 %320, 4
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 4
  store i64 %323, i64* %PC
  %324 = inttoptr i64 %321 to i32*
  %325 = load i32, i32* %324
  %326 = sext i32 %325 to i64
  store i64 %326, i64* %RAX, align 8, !tbaa !2428
  %327 = load i64, i64* %RAX
  %328 = mul i64 %327, 4
  %329 = add i64 %328, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %330 = load i32, i32* %ECX
  %331 = zext i32 %330 to i64
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 7
  store i64 %333, i64* %PC
  %334 = inttoptr i64 %329 to i32*
  store i32 %330, i32* %334
  %335 = load i64, i64* %RBP
  %336 = sub i64 %335, 4
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 3
  store i64 %338, i64* %PC
  %339 = inttoptr i64 %336 to i32*
  %340 = load i32, i32* %339
  %341 = zext i32 %340 to i64
  store i64 %341, i64* %RAX, align 8, !tbaa !2428
  %342 = load i64, i64* %RAX
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 3
  store i64 %344, i64* %PC
  %345 = trunc i64 %342 to i32
  %346 = add i32 1, %345
  %347 = zext i32 %346 to i64
  store i64 %347, i64* %RAX, align 8, !tbaa !2428
  %348 = icmp ult i32 %346, %345
  %349 = icmp ult i32 %346, 1
  %350 = or i1 %348, %349
  %351 = zext i1 %350 to i8
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %351, i8* %352, align 1, !tbaa !2432
  %353 = and i32 %346, 255
  %354 = call i32 @llvm.ctpop.i32(i32 %353) #16
  %355 = trunc i32 %354 to i8
  %356 = and i8 %355, 1
  %357 = xor i8 %356, 1
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %357, i8* %358, align 1, !tbaa !2446
  %359 = xor i64 1, %342
  %360 = trunc i64 %359 to i32
  %361 = xor i32 %360, %346
  %362 = lshr i32 %361, 4
  %363 = trunc i32 %362 to i8
  %364 = and i8 %363, 1
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %364, i8* %365, align 1, !tbaa !2447
  %366 = icmp eq i32 %346, 0
  %367 = zext i1 %366 to i8
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %367, i8* %368, align 1, !tbaa !2448
  %369 = lshr i32 %346, 31
  %370 = trunc i32 %369 to i8
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %370, i8* %371, align 1, !tbaa !2449
  %372 = lshr i32 %345, 31
  %373 = xor i32 %369, %372
  %374 = add nuw nsw i32 %373, %369
  %375 = icmp eq i32 %374, 2
  %376 = zext i1 %375 to i8
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %376, i8* %377, align 1, !tbaa !2450
  %378 = load i64, i64* %RBP
  %379 = sub i64 %378, 4
  %380 = load i32, i32* %EAX
  %381 = zext i32 %380 to i64
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 3
  store i64 %383, i64* %PC
  %384 = inttoptr i64 %379 to i32*
  store i32 %380, i32* %384
  %385 = load i64, i64* %PC
  %386 = sub i64 %385, 49
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 5
  store i64 %388, i64* %PC
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %386, i64* %389, align 8, !tbaa !2428
  br label %block_400905

block_40093b:                                     ; preds = %block_400905
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 1
  store i64 %391, i64* %PC
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %393 = load i64, i64* %392, align 8, !tbaa !2428
  %394 = add i64 %393, 8
  %395 = inttoptr i64 %393 to i64*
  %396 = load i64, i64* %395
  store i64 %396, i64* %RBP, align 8, !tbaa !2428
  store i64 %394, i64* %392, align 8, !tbaa !2428
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 1
  store i64 %398, i64* %PC
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %401 = load i64, i64* %400, align 8, !tbaa !2428
  %402 = inttoptr i64 %401 to i64*
  %403 = load i64, i64* %402
  store i64 %403, i64* %399, align 8, !tbaa !2428
  %404 = add i64 %401, 8
  store i64 %404, i64* %400, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_40088f:                                     ; preds = %block_40082d
  %405 = load i64, i64* %RBP
  %406 = sub i64 %405, 8
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 3
  store i64 %408, i64* %PC
  %409 = inttoptr i64 %406 to i32*
  %410 = load i32, i32* %409
  %411 = zext i32 %410 to i64
  store i64 %411, i64* %RAX, align 8, !tbaa !2428
  %412 = load i64, i64* %RAX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 3
  store i64 %414, i64* %PC
  %415 = trunc i64 %412 to i32
  %416 = sub i32 %415, 1
  %417 = zext i32 %416 to i64
  store i64 %417, i64* %RAX, align 8, !tbaa !2428
  %418 = icmp ult i32 %415, 1
  %419 = zext i1 %418 to i8
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %419, i8* %420, align 1, !tbaa !2432
  %421 = and i32 %416, 255
  %422 = call i32 @llvm.ctpop.i32(i32 %421) #16
  %423 = trunc i32 %422 to i8
  %424 = and i8 %423, 1
  %425 = xor i8 %424, 1
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %425, i8* %426, align 1, !tbaa !2446
  %427 = xor i64 1, %412
  %428 = trunc i64 %427 to i32
  %429 = xor i32 %428, %416
  %430 = lshr i32 %429, 4
  %431 = trunc i32 %430 to i8
  %432 = and i8 %431, 1
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %432, i8* %433, align 1, !tbaa !2447
  %434 = icmp eq i32 %416, 0
  %435 = zext i1 %434 to i8
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %435, i8* %436, align 1, !tbaa !2448
  %437 = lshr i32 %416, 31
  %438 = trunc i32 %437 to i8
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %438, i8* %439, align 1, !tbaa !2449
  %440 = lshr i32 %415, 31
  %441 = xor i32 %437, %440
  %442 = add nuw nsw i32 %441, %440
  %443 = icmp eq i32 %442, 2
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %444, i8* %445, align 1, !tbaa !2450
  %446 = load i32, i32* %EAX
  %447 = zext i32 %446 to i64
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 3
  store i64 %449, i64* %PC
  %450 = shl i64 %447, 32
  %451 = ashr exact i64 %450, 32
  store i64 %451, i64* %RCX, align 8, !tbaa !2428
  %452 = load i64, i64* %RCX
  %453 = mul i64 %452, 4
  %454 = add i64 %453, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 7
  store i64 %456, i64* %PC
  %457 = inttoptr i64 %454 to i32*
  %458 = load i32, i32* %457
  %459 = zext i32 %458 to i64
  store i64 %459, i64* %RAX, align 8, !tbaa !2428
  %460 = load i64, i64* %RBP
  %461 = sub i64 %460, 8
  %462 = load i64, i64* %PC
  %463 = add i64 %462, 4
  store i64 %463, i64* %PC
  %464 = inttoptr i64 %461 to i32*
  %465 = load i32, i32* %464
  %466 = sext i32 %465 to i64
  store i64 %466, i64* %RCX, align 8, !tbaa !2428
  %467 = load i64, i64* %RCX
  %468 = mul i64 %467, 4
  %469 = add i64 %468, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %470 = load i32, i32* %EAX
  %471 = zext i32 %470 to i64
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 7
  store i64 %473, i64* %PC
  %474 = inttoptr i64 %469 to i32*
  store i32 %470, i32* %474
  br label %block_4008aa

block_40082d:                                     ; preds = %block_400823
  %475 = load i64, i64* %RBP
  %476 = sub i64 %475, 8
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 4
  store i64 %478, i64* %PC
  %479 = inttoptr i64 %476 to i32*
  %480 = load i32, i32* %479
  %481 = sext i32 %480 to i64
  store i64 %481, i64* %RAX, align 8, !tbaa !2428
  %482 = load i64, i64* %RAX
  %483 = mul i64 %482, 4
  %484 = add i64 %483, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 8
  store i64 %486, i64* %PC
  %487 = inttoptr i64 %484 to i32*
  %488 = load i32, i32* %487
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %489, align 1, !tbaa !2432
  %490 = and i32 %488, 255
  %491 = call i32 @llvm.ctpop.i32(i32 %490) #16
  %492 = trunc i32 %491 to i8
  %493 = and i8 %492, 1
  %494 = xor i8 %493, 1
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %494, i8* %495, align 1, !tbaa !2446
  %496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %496, align 1, !tbaa !2447
  %497 = icmp eq i32 %488, 0
  %498 = zext i1 %497 to i8
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %498, i8* %499, align 1, !tbaa !2448
  %500 = lshr i32 %488, 31
  %501 = trunc i32 %500 to i8
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %501, i8* %502, align 1, !tbaa !2449
  %503 = lshr i32 %488, 31
  %504 = xor i32 %500, %503
  %505 = add nuw nsw i32 %504, %503
  %506 = icmp eq i32 %505, 2
  %507 = zext i1 %506 to i8
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %507, i8* %508, align 1, !tbaa !2450
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 86
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 6
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 6
  store i64 %514, i64* %PC
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %516 = load i8, i8* %515, align 1, !tbaa !2448
  store i8 %516, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %518 = icmp ne i8 %516, 0
  %519 = select i1 %518, i64 %510, i64 %512
  store i64 %519, i64* %517, align 8, !tbaa !2428
  %520 = load i8, i8* %BRANCH_TAKEN
  %521 = icmp eq i8 %520, 1
  br i1 %521, label %block_40088f, label %block_40083f

block_40080b:                                     ; preds = %block_400801
  %522 = add i64 %805, 4
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %804 to i32*
  %524 = load i32, i32* %523
  %525 = sext i32 %524 to i64
  store i64 %525, i64* %RAX, align 8, !tbaa !2428
  %526 = load i64, i64* %RAX
  %527 = mul i64 %526, 4
  %528 = add i64 %527, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %529 = load i64, i64* %PC
  %530 = add i64 %529, 11
  store i64 %530, i64* %PC
  %531 = inttoptr i64 %528 to i32*
  store i32 1, i32* %531
  %532 = load i64, i64* %RBP
  %533 = sub i64 %532, 4
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 3
  store i64 %535, i64* %PC
  %536 = inttoptr i64 %533 to i32*
  %537 = load i32, i32* %536
  %538 = zext i32 %537 to i64
  store i64 %538, i64* %RCX, align 8, !tbaa !2428
  %539 = load i64, i64* %RCX
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 3
  store i64 %541, i64* %PC
  %542 = trunc i64 %539 to i32
  %543 = sub i32 %542, 1
  %544 = zext i32 %543 to i64
  store i64 %544, i64* %RCX, align 8, !tbaa !2428
  %545 = icmp ult i32 %542, 1
  %546 = zext i1 %545 to i8
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %546, i8* %547, align 1, !tbaa !2432
  %548 = and i32 %543, 255
  %549 = call i32 @llvm.ctpop.i32(i32 %548) #16
  %550 = trunc i32 %549 to i8
  %551 = and i8 %550, 1
  %552 = xor i8 %551, 1
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %552, i8* %553, align 1, !tbaa !2446
  %554 = xor i64 1, %539
  %555 = trunc i64 %554 to i32
  %556 = xor i32 %555, %543
  %557 = lshr i32 %556, 4
  %558 = trunc i32 %557 to i8
  %559 = and i8 %558, 1
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %559, i8* %560, align 1, !tbaa !2447
  %561 = icmp eq i32 %543, 0
  %562 = zext i1 %561 to i8
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %562, i8* %563, align 1, !tbaa !2448
  %564 = lshr i32 %543, 31
  %565 = trunc i32 %564 to i8
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %565, i8* %566, align 1, !tbaa !2449
  %567 = lshr i32 %542, 31
  %568 = xor i32 %564, %567
  %569 = add nuw nsw i32 %568, %567
  %570 = icmp eq i32 %569, 2
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %571, i8* %572, align 1, !tbaa !2450
  %573 = load i64, i64* %RBP
  %574 = sub i64 %573, 8
  %575 = load i32, i32* %ECX
  %576 = zext i32 %575 to i64
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 3
  store i64 %578, i64* %PC
  %579 = inttoptr i64 %574 to i32*
  store i32 %575, i32* %579
  br label %block_400823

block_4008aa:                                     ; preds = %block_40088f, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_40088f ], [ %242, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ]
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 5
  %582 = load i64, i64* %PC
  %583 = add i64 %582, 5
  store i64 %583, i64* %PC
  %584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %581, i64* %584, align 8, !tbaa !2428
  %585 = load i64, i64* %RBP
  %586 = sub i64 %585, 8
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 3
  store i64 %588, i64* %PC
  %589 = inttoptr i64 %586 to i32*
  %590 = load i32, i32* %589
  %591 = zext i32 %590 to i64
  store i64 %591, i64* %RAX, align 8, !tbaa !2428
  %592 = load i64, i64* %RAX
  %593 = load i64, i64* %PC
  %594 = add i64 %593, 3
  store i64 %594, i64* %PC
  %595 = trunc i64 %592 to i32
  %596 = add i32 -1, %595
  %597 = zext i32 %596 to i64
  store i64 %597, i64* %RAX, align 8, !tbaa !2428
  %598 = icmp ult i32 %596, %595
  %599 = icmp ult i32 %596, -1
  %600 = or i1 %598, %599
  %601 = zext i1 %600 to i8
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %601, i8* %602, align 1, !tbaa !2432
  %603 = and i32 %596, 255
  %604 = call i32 @llvm.ctpop.i32(i32 %603) #16
  %605 = trunc i32 %604 to i8
  %606 = and i8 %605, 1
  %607 = xor i8 %606, 1
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %607, i8* %608, align 1, !tbaa !2446
  %609 = xor i64 -1, %592
  %610 = trunc i64 %609 to i32
  %611 = xor i32 %610, %596
  %612 = lshr i32 %611, 4
  %613 = trunc i32 %612 to i8
  %614 = and i8 %613, 1
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %614, i8* %615, align 1, !tbaa !2447
  %616 = icmp eq i32 %596, 0
  %617 = zext i1 %616 to i8
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %617, i8* %618, align 1, !tbaa !2448
  %619 = lshr i32 %596, 31
  %620 = trunc i32 %619 to i8
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %620, i8* %621, align 1, !tbaa !2449
  %622 = lshr i32 %595, 31
  %623 = xor i32 %619, %622
  %624 = xor i32 %619, 1
  %625 = add nuw nsw i32 %623, %624
  %626 = icmp eq i32 %625, 2
  %627 = zext i1 %626 to i8
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %627, i8* %628, align 1, !tbaa !2450
  %629 = load i64, i64* %RBP
  %630 = sub i64 %629, 8
  %631 = load i32, i32* %EAX
  %632 = zext i32 %631 to i64
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 3
  store i64 %634, i64* %PC
  %635 = inttoptr i64 %630 to i32*
  store i32 %631, i32* %635
  %636 = load i64, i64* %PC
  %637 = sub i64 %636, 149
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 5
  store i64 %639, i64* %PC
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %637, i64* %640, align 8, !tbaa !2428
  br label %block_400823

block_400905:                                     ; preds = %block_40090f, %block_4008fe
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_4008fe ], [ %MEMORY.1, %block_40090f ]
  %641 = load i64, i64* %RBP
  %642 = sub i64 %641, 4
  %643 = load i64, i64* %PC
  %644 = add i64 %643, 4
  store i64 %644, i64* %PC
  %645 = inttoptr i64 %642 to i32*
  %646 = load i32, i32* %645
  %647 = sub i32 %646, 16
  %648 = icmp ult i32 %646, 16
  %649 = zext i1 %648 to i8
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %649, i8* %650, align 1, !tbaa !2432
  %651 = and i32 %647, 255
  %652 = call i32 @llvm.ctpop.i32(i32 %651) #16
  %653 = trunc i32 %652 to i8
  %654 = and i8 %653, 1
  %655 = xor i8 %654, 1
  %656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %655, i8* %656, align 1, !tbaa !2446
  %657 = xor i32 %646, 16
  %658 = xor i32 %657, %647
  %659 = lshr i32 %658, 4
  %660 = trunc i32 %659 to i8
  %661 = and i8 %660, 1
  %662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %661, i8* %662, align 1, !tbaa !2447
  %663 = icmp eq i32 %647, 0
  %664 = zext i1 %663 to i8
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %664, i8* %665, align 1, !tbaa !2448
  %666 = lshr i32 %647, 31
  %667 = trunc i32 %666 to i8
  %668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %667, i8* %668, align 1, !tbaa !2449
  %669 = lshr i32 %646, 31
  %670 = xor i32 %666, %669
  %671 = add nuw nsw i32 %670, %669
  %672 = icmp eq i32 %671, 2
  %673 = zext i1 %672 to i8
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %673, i8* %674, align 1, !tbaa !2450
  %675 = load i64, i64* %PC
  %676 = add i64 %675, 50
  %677 = load i64, i64* %PC
  %678 = add i64 %677, 6
  %679 = load i64, i64* %PC
  %680 = add i64 %679, 6
  store i64 %680, i64* %PC
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %682 = load i8, i8* %681, align 1, !tbaa !2448
  %683 = icmp eq i8 %682, 0
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %685 = load i8, i8* %684, align 1, !tbaa !2449
  %686 = icmp ne i8 %685, 0
  %687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %688 = load i8, i8* %687, align 1, !tbaa !2450
  %689 = icmp ne i8 %688, 0
  %690 = xor i1 %686, %689
  %691 = xor i1 %690, true
  %692 = and i1 %683, %691
  %693 = zext i1 %692 to i8
  store i8 %693, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %695 = select i1 %692, i64 %676, i64 %678
  store i64 %695, i64* %694, align 8, !tbaa !2428
  %696 = load i8, i8* %BRANCH_TAKEN
  %697 = icmp eq i8 %696, 1
  br i1 %697, label %block_40093b, label %block_40090f

block_400823:                                     ; preds = %block_4008aa, %block_40080b
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.3, %block_40080b ], [ %MEMORY.0, %block_4008aa ]
  %698 = load i64, i64* %RBP
  %699 = sub i64 %698, 8
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 4
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i32*
  %703 = load i32, i32* %702
  %704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %704, align 1, !tbaa !2432
  %705 = and i32 %703, 255
  %706 = call i32 @llvm.ctpop.i32(i32 %705) #16
  %707 = trunc i32 %706 to i8
  %708 = and i8 %707, 1
  %709 = xor i8 %708, 1
  %710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %709, i8* %710, align 1, !tbaa !2446
  %711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %711, align 1, !tbaa !2447
  %712 = icmp eq i32 %703, 0
  %713 = zext i1 %712 to i8
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %713, i8* %714, align 1, !tbaa !2448
  %715 = lshr i32 %703, 31
  %716 = trunc i32 %715 to i8
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %716, i8* %717, align 1, !tbaa !2449
  %718 = lshr i32 %703, 31
  %719 = xor i32 %715, %718
  %720 = add nuw nsw i32 %719, %718
  %721 = icmp eq i32 %720, 2
  %722 = zext i1 %721 to i8
  %723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %722, i8* %723, align 1, !tbaa !2450
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 150
  %726 = load i64, i64* %PC
  %727 = add i64 %726, 6
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 6
  store i64 %729, i64* %PC
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %731 = load i8, i8* %730, align 1, !tbaa !2448
  %732 = icmp ne i8 %731, 0
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %734 = load i8, i8* %733, align 1, !tbaa !2449
  %735 = icmp ne i8 %734, 0
  %736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %737 = load i8, i8* %736, align 1, !tbaa !2450
  %738 = icmp ne i8 %737, 0
  %739 = xor i1 %735, %738
  %740 = or i1 %732, %739
  %741 = zext i1 %740 to i8
  store i8 %741, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %743 = select i1 %740, i64 %725, i64 %727
  store i64 %743, i64* %742, align 8, !tbaa !2428
  %744 = load i8, i8* %BRANCH_TAKEN
  %745 = icmp eq i8 %744, 1
  br i1 %745, label %block_4008bd, label %block_40082d

block_400801:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_4007e0
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_4007e0 ], [ %924, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %746 = load i64, i64* %RBP
  %747 = sub i64 %746, 4
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 4
  store i64 %749, i64* %PC
  %750 = inttoptr i64 %747 to i32*
  %751 = load i32, i32* %750
  %752 = sub i32 %751, 16
  %753 = icmp ult i32 %751, 16
  %754 = zext i1 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %754, i8* %755, align 1, !tbaa !2432
  %756 = and i32 %752, 255
  %757 = call i32 @llvm.ctpop.i32(i32 %756) #16
  %758 = trunc i32 %757 to i8
  %759 = and i8 %758, 1
  %760 = xor i8 %759, 1
  %761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %760, i8* %761, align 1, !tbaa !2446
  %762 = xor i32 %751, 16
  %763 = xor i32 %762, %752
  %764 = lshr i32 %763, 4
  %765 = trunc i32 %764 to i8
  %766 = and i8 %765, 1
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %766, i8* %767, align 1, !tbaa !2447
  %768 = icmp eq i32 %752, 0
  %769 = zext i1 %768 to i8
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %769, i8* %770, align 1, !tbaa !2448
  %771 = lshr i32 %752, 31
  %772 = trunc i32 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %772, i8* %773, align 1, !tbaa !2449
  %774 = lshr i32 %751, 31
  %775 = xor i32 %771, %774
  %776 = add nuw nsw i32 %775, %774
  %777 = icmp eq i32 %776, 2
  %778 = zext i1 %777 to i8
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %778, i8* %779, align 1, !tbaa !2450
  %780 = load i64, i64* %PC
  %781 = add i64 %780, 249
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 6
  %784 = load i64, i64* %PC
  %785 = add i64 %784, 6
  store i64 %785, i64* %PC
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %787 = load i8, i8* %786, align 1, !tbaa !2448
  %788 = icmp eq i8 %787, 0
  %789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %790 = load i8, i8* %789, align 1, !tbaa !2449
  %791 = icmp ne i8 %790, 0
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %793 = load i8, i8* %792, align 1, !tbaa !2450
  %794 = icmp ne i8 %793, 0
  %795 = xor i1 %791, %794
  %796 = xor i1 %795, true
  %797 = and i1 %788, %796
  %798 = zext i1 %797 to i8
  store i8 %798, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %800 = select i1 %797, i64 %781, i64 %783
  store i64 %800, i64* %799, align 8, !tbaa !2428
  %801 = load i8, i8* %BRANCH_TAKEN
  %802 = icmp eq i8 %801, 1
  %803 = load i64, i64* %RBP
  %804 = sub i64 %803, 4
  %805 = load i64, i64* %PC
  br i1 %802, label %block_4008fe, label %block_40080b

block_4008bd:                                     ; preds = %block_400823
  %806 = load i64, i64* %PC
  %807 = add i64 %806, 5
  store i64 %807, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %808 = load i64, i64* %PC
  %809 = add i64 %808, 8
  store i64 %809, i64* %PC
  %810 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104) to i32*)
  %811 = sext i32 %810 to i64
  store i64 %811, i64* %RCX, align 8, !tbaa !2428
  %812 = load i64, i64* %RCX
  %813 = mul i64 %812, 4
  %814 = add i64 %813, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 7
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i32*
  %818 = load i32, i32* %817
  %819 = zext i32 %818 to i64
  store i64 %819, i64* %RDX, align 8, !tbaa !2428
  %820 = load i64, i64* %RDX
  %821 = load i64, i64* %RBP
  %822 = sub i64 %821, 4
  %823 = load i64, i64* %PC
  %824 = add i64 %823, 3
  store i64 %824, i64* %PC
  %825 = trunc i64 %820 to i32
  %826 = inttoptr i64 %822 to i32*
  %827 = load i32, i32* %826
  %828 = add i32 %827, %825
  %829 = zext i32 %828 to i64
  store i64 %829, i64* %RDX, align 8, !tbaa !2428
  %830 = icmp ult i32 %828, %825
  %831 = icmp ult i32 %828, %827
  %832 = or i1 %830, %831
  %833 = zext i1 %832 to i8
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %833, i8* %834, align 1, !tbaa !2432
  %835 = and i32 %828, 255
  %836 = call i32 @llvm.ctpop.i32(i32 %835) #16
  %837 = trunc i32 %836 to i8
  %838 = and i8 %837, 1
  %839 = xor i8 %838, 1
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %839, i8* %840, align 1, !tbaa !2446
  %841 = xor i32 %827, %825
  %842 = xor i32 %841, %828
  %843 = lshr i32 %842, 4
  %844 = trunc i32 %843 to i8
  %845 = and i8 %844, 1
  %846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %845, i8* %846, align 1, !tbaa !2447
  %847 = icmp eq i32 %828, 0
  %848 = zext i1 %847 to i8
  %849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %848, i8* %849, align 1, !tbaa !2448
  %850 = lshr i32 %828, 31
  %851 = trunc i32 %850 to i8
  %852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %851, i8* %852, align 1, !tbaa !2449
  %853 = lshr i32 %825, 31
  %854 = lshr i32 %827, 31
  %855 = xor i32 %850, %853
  %856 = xor i32 %850, %854
  %857 = add nuw nsw i32 %855, %856
  %858 = icmp eq i32 %857, 2
  %859 = zext i1 %858 to i8
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %859, i8* %860, align 1, !tbaa !2450
  %861 = load i64, i64* %RBP
  %862 = sub i64 %861, 16
  %863 = load i32, i32* %EAX
  %864 = zext i32 %863 to i64
  %865 = load i64, i64* %PC
  %866 = add i64 %865, 3
  store i64 %866, i64* %PC
  %867 = inttoptr i64 %862 to i32*
  store i32 %863, i32* %867
  %868 = load i32, i32* %EDX
  %869 = zext i32 %868 to i64
  %870 = load i64, i64* %PC
  %871 = add i64 %870, 2
  store i64 %871, i64* %PC
  %872 = and i64 %869, 4294967295
  store i64 %872, i64* %RAX, align 8, !tbaa !2428
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 1
  store i64 %874, i64* %PC
  %875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %877 = bitcast %union.anon* %876 to i32*
  %878 = load i32, i32* %877, align 8, !tbaa !2452
  %879 = sext i32 %878 to i64
  %880 = lshr i64 %879, 32
  store i64 %880, i64* %875, align 8, !tbaa !2428
  %881 = load i64, i64* %RBP
  %882 = sub i64 %881, 16
  %883 = load i64, i64* %PC
  %884 = add i64 %883, 3
  store i64 %884, i64* %PC
  %885 = inttoptr i64 %882 to i32*
  %886 = load i32, i32* %885
  %887 = zext i32 %886 to i64
  store i64 %887, i64* %RSI, align 8, !tbaa !2428
  %888 = load i32, i32* %ESI
  %889 = zext i32 %888 to i64
  %890 = load i64, i64* %PC
  %891 = add i64 %890, 2
  store i64 %891, i64* %PC
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %893 = bitcast %union.anon* %892 to i32*
  %894 = load i32, i32* %893, align 8, !tbaa !2452
  %895 = zext i32 %894 to i64
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %897 = bitcast %union.anon* %896 to i32*
  %898 = load i32, i32* %897, align 8, !tbaa !2452
  %899 = zext i32 %898 to i64
  %900 = shl i64 %889, 32
  %901 = ashr exact i64 %900, 32
  %902 = shl nuw i64 %899, 32
  %903 = or i64 %902, %895
  %904 = sdiv i64 %903, %901
  %905 = shl i64 %904, 32
  %906 = ashr exact i64 %905, 32
  %907 = icmp eq i64 %904, %906
  br i1 %907, label %912, label %908

; <label>:908:                                    ; preds = %block_4008bd
  %909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %910 = load i64, i64* %909, align 8, !tbaa !2428
  %911 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %910, %struct.Memory* %MEMORY.2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:912:                                    ; preds = %block_4008bd
  %913 = srem i64 %903, %901
  %914 = getelementptr inbounds %union.anon, %union.anon* %892, i64 0, i32 0
  %915 = and i64 %904, 4294967295
  store i64 %915, i64* %914, align 8, !tbaa !2428
  %916 = getelementptr inbounds %union.anon, %union.anon* %896, i64 0, i32 0
  %917 = and i64 %913, 4294967295
  store i64 %917, i64* %916, align 8, !tbaa !2428
  %918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %918, align 1, !tbaa !2432
  %919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %919, align 1, !tbaa !2446
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %920, align 1, !tbaa !2447
  %921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %921, align 1, !tbaa !2448
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %922, align 1, !tbaa !2449
  %923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %923, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %908, %912
  %924 = phi %struct.Memory* [ %911, %908 ], [ %MEMORY.2, %912 ]
  %925 = load i32, i32* %EDX
  %926 = zext i32 %925 to i64
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 3
  store i64 %928, i64* %PC
  %929 = shl i64 %926, 32
  %930 = ashr exact i64 %929, 32
  store i64 %930, i64* %RCX, align 8, !tbaa !2428
  %931 = load i64, i64* %RCX
  %932 = mul i64 %931, 4
  %933 = add i64 %932, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %934 = load i64, i64* %PC
  %935 = add i64 %934, 7
  store i64 %935, i64* %PC
  %936 = inttoptr i64 %933 to i32*
  %937 = load i32, i32* %936
  %938 = zext i32 %937 to i64
  store i64 %938, i64* %RDX, align 8, !tbaa !2428
  %939 = load i32, i32* %EDX
  %940 = zext i32 %939 to i64
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 7
  store i64 %942, i64* %PC
  store i32 %939, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104) to i32*)
  %943 = load i64, i64* %RBP
  %944 = sub i64 %943, 4
  %945 = load i64, i64* %PC
  %946 = add i64 %945, 3
  store i64 %946, i64* %PC
  %947 = inttoptr i64 %944 to i32*
  %948 = load i32, i32* %947
  %949 = zext i32 %948 to i64
  store i64 %949, i64* %RAX, align 8, !tbaa !2428
  %950 = load i64, i64* %RAX
  %951 = load i64, i64* %PC
  %952 = add i64 %951, 3
  store i64 %952, i64* %PC
  %953 = trunc i64 %950 to i32
  %954 = add i32 1, %953
  %955 = zext i32 %954 to i64
  store i64 %955, i64* %RAX, align 8, !tbaa !2428
  %956 = icmp ult i32 %954, %953
  %957 = icmp ult i32 %954, 1
  %958 = or i1 %956, %957
  %959 = zext i1 %958 to i8
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %959, i8* %960, align 1, !tbaa !2432
  %961 = and i32 %954, 255
  %962 = call i32 @llvm.ctpop.i32(i32 %961) #16
  %963 = trunc i32 %962 to i8
  %964 = and i8 %963, 1
  %965 = xor i8 %964, 1
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %965, i8* %966, align 1, !tbaa !2446
  %967 = xor i64 1, %950
  %968 = trunc i64 %967 to i32
  %969 = xor i32 %968, %954
  %970 = lshr i32 %969, 4
  %971 = trunc i32 %970 to i8
  %972 = and i8 %971, 1
  %973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %972, i8* %973, align 1, !tbaa !2447
  %974 = icmp eq i32 %954, 0
  %975 = zext i1 %974 to i8
  %976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %975, i8* %976, align 1, !tbaa !2448
  %977 = lshr i32 %954, 31
  %978 = trunc i32 %977 to i8
  %979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %978, i8* %979, align 1, !tbaa !2449
  %980 = lshr i32 %953, 31
  %981 = xor i32 %977, %980
  %982 = add nuw nsw i32 %981, %977
  %983 = icmp eq i32 %982, 2
  %984 = zext i1 %983 to i8
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %984, i8* %985, align 1, !tbaa !2450
  %986 = load i64, i64* %RBP
  %987 = sub i64 %986, 4
  %988 = load i32, i32* %EAX
  %989 = zext i32 %988 to i64
  %990 = load i64, i64* %PC
  %991 = add i64 %990, 3
  store i64 %991, i64* %PC
  %992 = inttoptr i64 %987 to i32*
  store i32 %988, i32* %992
  %993 = load i64, i64* %PC
  %994 = sub i64 %993, 248
  %995 = load i64, i64* %PC
  %996 = add i64 %995, 5
  store i64 %996, i64* %PC
  %997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %994, i64* %997, align 8, !tbaa !2428
  br label %block_400801
}

; Function Attrs: noinline
define %struct.Memory* @sub_400520_rsdec_204(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400520:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 7
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 5
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %ECX = bitcast %union.anon* %19 to i32*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 7
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %EDX = bitcast %union.anon* %22 to i32*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 9
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %ESI = bitcast %union.anon* %25 to i32*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 1
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RAX = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 5
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RCX = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 7
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RDX = bitcast %union.anon* %34 to i64*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 9
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %RSI = bitcast %union.anon* %37 to i64*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %39 = getelementptr inbounds %struct.GPR, %struct.GPR* %38, i32 0, i32 11
  %40 = getelementptr inbounds %struct.Reg, %struct.Reg* %39, i32 0, i32 0
  %RDI = bitcast %union.anon* %40 to i64*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %42 = getelementptr inbounds %struct.GPR, %struct.GPR* %41, i32 0, i32 13
  %43 = getelementptr inbounds %struct.Reg, %struct.Reg* %42, i32 0, i32 0
  %RSP = bitcast %union.anon* %43 to i64*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %45 = getelementptr inbounds %struct.GPR, %struct.GPR* %44, i32 0, i32 15
  %46 = getelementptr inbounds %struct.Reg, %struct.Reg* %45, i32 0, i32 0
  %RBP = bitcast %union.anon* %46 to i64*
  %47 = load i64, i64* %RBP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 1
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %51 = load i64, i64* %50, align 8, !tbaa !2428
  %52 = add i64 %51, -8
  %53 = inttoptr i64 %52 to i64*
  store i64 %47, i64* %53
  store i64 %52, i64* %50, align 8, !tbaa !2428
  %54 = load i64, i64* %RSP
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 3
  store i64 %56, i64* %PC
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  %57 = load i64, i64* %RSP
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC
  %60 = sub i64 %57, 32
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  %61 = icmp ult i64 %57, 32
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %62, i8* %63, align 1, !tbaa !2432
  %64 = trunc i64 %60 to i32
  %65 = and i32 %64, 255
  %66 = call i32 @llvm.ctpop.i32(i32 %65) #16
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 1
  %69 = xor i8 %68, 1
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %69, i8* %70, align 1, !tbaa !2446
  %71 = xor i64 32, %57
  %72 = xor i64 %71, %60
  %73 = lshr i64 %72, 4
  %74 = trunc i64 %73 to i8
  %75 = and i8 %74, 1
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %75, i8* %76, align 1, !tbaa !2447
  %77 = icmp eq i64 %60, 0
  %78 = zext i1 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %78, i8* %79, align 1, !tbaa !2448
  %80 = lshr i64 %60, 63
  %81 = trunc i64 %80 to i8
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %81, i8* %82, align 1, !tbaa !2449
  %83 = lshr i64 %57, 63
  %84 = xor i64 %80, %83
  %85 = add nuw nsw i64 %84, %83
  %86 = icmp eq i64 %85, 2
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %87, i8* %88, align 1, !tbaa !2450
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 8
  %91 = load i64, i64* %RDI
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 16
  %97 = load i64, i64* %RSI
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 8
  store i64 %102, i64* %PC
  %103 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 16) to i32*)
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %104, align 1, !tbaa !2432
  %105 = and i32 %103, 255
  %106 = call i32 @llvm.ctpop.i32(i32 %105) #16
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %109, i8* %110, align 1, !tbaa !2446
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %111, align 1, !tbaa !2447
  %112 = icmp eq i32 %103, 0
  %113 = zext i1 %112 to i8
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %113, i8* %114, align 1, !tbaa !2448
  %115 = lshr i32 %103, 31
  %116 = trunc i32 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %116, i8* %117, align 1, !tbaa !2449
  %118 = lshr i32 %103, 31
  %119 = xor i32 %115, %118
  %120 = add nuw nsw i32 %119, %118
  %121 = icmp eq i32 %120, 2
  %122 = zext i1 %121 to i8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %122, i8* %123, align 1, !tbaa !2450
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 27
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 6
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 6
  store i64 %129, i64* %PC
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %131 = load i8, i8* %130, align 1, !tbaa !2448
  %132 = icmp eq i8 %131, 0
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %135 = select i1 %132, i64 %125, i64 %127
  store i64 %135, i64* %134, align 8, !tbaa !2428
  %136 = load i8, i8* %BRANCH_TAKEN
  %137 = icmp eq i8 %136, 1
  br i1 %137, label %block_400553, label %block_40053e

block_400598:                                     ; preds = %block_4005a2, %block_400591
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_400591 ], [ %MEMORY.0, %block_4005a2 ]
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 20
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 4
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %139 to i32*
  %143 = load i32, i32* %142
  %144 = sub i32 %143, 51
  %145 = icmp ult i32 %143, 51
  %146 = zext i1 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %146, i8* %147, align 1, !tbaa !2432
  %148 = and i32 %144, 255
  %149 = call i32 @llvm.ctpop.i32(i32 %148) #16
  %150 = trunc i32 %149 to i8
  %151 = and i8 %150, 1
  %152 = xor i8 %151, 1
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %152, i8* %153, align 1, !tbaa !2446
  %154 = xor i32 %143, 51
  %155 = xor i32 %154, %144
  %156 = lshr i32 %155, 4
  %157 = trunc i32 %156 to i8
  %158 = and i8 %157, 1
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %158, i8* %159, align 1, !tbaa !2447
  %160 = icmp eq i32 %144, 0
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %161, i8* %162, align 1, !tbaa !2448
  %163 = lshr i32 %144, 31
  %164 = trunc i32 %163 to i8
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %164, i8* %165, align 1, !tbaa !2449
  %166 = lshr i32 %143, 31
  %167 = xor i32 %163, %166
  %168 = add nuw nsw i32 %167, %166
  %169 = icmp eq i32 %168, 2
  %170 = zext i1 %169 to i8
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %170, i8* %171, align 1, !tbaa !2450
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 40
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 6
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 6
  store i64 %177, i64* %PC
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %179 = load i8, i8* %178, align 1, !tbaa !2449
  %180 = icmp ne i8 %179, 0
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %182 = load i8, i8* %181, align 1, !tbaa !2450
  %183 = icmp ne i8 %182, 0
  %184 = xor i1 %180, %183
  %185 = xor i1 %184, true
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %188 = select i1 %184, i64 %175, i64 %173
  store i64 %188, i64* %187, align 8, !tbaa !2428
  %189 = load i8, i8* %BRANCH_TAKEN
  %190 = icmp eq i8 %189, 1
  %191 = load i64, i64* %RBP
  %192 = sub i64 %191, 20
  %193 = load i64, i64* %PC
  br i1 %190, label %block_4005c4, label %block_4005a2

block_40055a:                                     ; preds = %block_400564, %block_400553
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_400553 ], [ %MEMORY.1, %block_400564 ]
  %194 = load i64, i64* %RBP
  %195 = sub i64 %194, 20
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 4
  store i64 %197, i64* %PC
  %198 = inttoptr i64 %195 to i32*
  %199 = load i32, i32* %198
  %200 = sub i32 %199, 16
  %201 = icmp ult i32 %199, 16
  %202 = zext i1 %201 to i8
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %202, i8* %203, align 1, !tbaa !2432
  %204 = and i32 %200, 255
  %205 = call i32 @llvm.ctpop.i32(i32 %204) #16
  %206 = trunc i32 %205 to i8
  %207 = and i8 %206, 1
  %208 = xor i8 %207, 1
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %208, i8* %209, align 1, !tbaa !2446
  %210 = xor i32 %199, 16
  %211 = xor i32 %210, %200
  %212 = lshr i32 %211, 4
  %213 = trunc i32 %212 to i8
  %214 = and i8 %213, 1
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %214, i8* %215, align 1, !tbaa !2447
  %216 = icmp eq i32 %200, 0
  %217 = zext i1 %216 to i8
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %217, i8* %218, align 1, !tbaa !2448
  %219 = lshr i32 %200, 31
  %220 = trunc i32 %219 to i8
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %220, i8* %221, align 1, !tbaa !2449
  %222 = lshr i32 %199, 31
  %223 = xor i32 %219, %222
  %224 = add nuw nsw i32 %223, %222
  %225 = icmp eq i32 %224, 2
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %226, i8* %227, align 1, !tbaa !2450
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 51
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 6
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 6
  store i64 %233, i64* %PC
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %235 = load i8, i8* %234, align 1, !tbaa !2449
  %236 = icmp ne i8 %235, 0
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %238 = load i8, i8* %237, align 1, !tbaa !2450
  %239 = icmp ne i8 %238, 0
  %240 = xor i1 %236, %239
  %241 = xor i1 %240, true
  %242 = zext i1 %241 to i8
  store i8 %242, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %244 = select i1 %240, i64 %231, i64 %229
  store i64 %244, i64* %243, align 8, !tbaa !2428
  %245 = load i8, i8* %BRANCH_TAKEN
  %246 = icmp eq i8 %245, 1
  %247 = load i64, i64* %RBP
  br i1 %246, label %block_400591, label %block_400564

block_4005c4:                                     ; preds = %block_400598
  %248 = add i64 %193, 7
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %192 to i32*
  store i32 0, i32* %249
  br label %block_4005cb

block_4005d8:                                     ; preds = %block_4005cb
  %250 = sub i64 %1118, 16
  %251 = load i64, i64* %PC
  %252 = add i64 %251, 4
  store i64 %252, i64* %PC
  %253 = inttoptr i64 %250 to i64*
  %254 = load i64, i64* %253
  store i64 %254, i64* %RAX, align 8, !tbaa !2428
  %255 = load i64, i64* %RBP
  %256 = sub i64 %255, 20
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 4
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %256 to i32*
  %260 = load i32, i32* %259
  %261 = sext i32 %260 to i64
  store i64 %261, i64* %RCX, align 8, !tbaa !2428
  %262 = load i64, i64* %RAX
  %263 = load i64, i64* %RCX
  %264 = add i64 %263, %262
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 4
  store i64 %266, i64* %PC
  %267 = inttoptr i64 %264 to i8*
  %268 = load i8, i8* %267
  %269 = zext i8 %268 to i64
  store i64 %269, i64* %RDX, align 8, !tbaa !2428
  %270 = load i64, i64* %RBP
  %271 = sub i64 %270, 20
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 3
  store i64 %273, i64* %PC
  %274 = inttoptr i64 %271 to i32*
  %275 = load i32, i32* %274
  %276 = zext i32 %275 to i64
  store i64 %276, i64* %RSI, align 8, !tbaa !2428
  %277 = load i64, i64* %RSI
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 3
  store i64 %279, i64* %PC
  %280 = trunc i64 %277 to i32
  %281 = add i32 67, %280
  %282 = zext i32 %281 to i64
  store i64 %282, i64* %RSI, align 8, !tbaa !2428
  %283 = icmp ult i32 %281, %280
  %284 = icmp ult i32 %281, 67
  %285 = or i1 %283, %284
  %286 = zext i1 %285 to i8
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %286, i8* %287, align 1, !tbaa !2432
  %288 = and i32 %281, 255
  %289 = call i32 @llvm.ctpop.i32(i32 %288) #16
  %290 = trunc i32 %289 to i8
  %291 = and i8 %290, 1
  %292 = xor i8 %291, 1
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %292, i8* %293, align 1, !tbaa !2446
  %294 = xor i64 67, %277
  %295 = trunc i64 %294 to i32
  %296 = xor i32 %295, %281
  %297 = lshr i32 %296, 4
  %298 = trunc i32 %297 to i8
  %299 = and i8 %298, 1
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %299, i8* %300, align 1, !tbaa !2447
  %301 = icmp eq i32 %281, 0
  %302 = zext i1 %301 to i8
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %302, i8* %303, align 1, !tbaa !2448
  %304 = lshr i32 %281, 31
  %305 = trunc i32 %304 to i8
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %305, i8* %306, align 1, !tbaa !2449
  %307 = lshr i32 %280, 31
  %308 = xor i32 %304, %307
  %309 = add nuw nsw i32 %308, %304
  %310 = icmp eq i32 %309, 2
  %311 = zext i1 %310 to i8
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %311, i8* %312, align 1, !tbaa !2450
  %313 = load i32, i32* %ESI
  %314 = zext i32 %313 to i64
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 3
  store i64 %316, i64* %PC
  %317 = shl i64 %314, 32
  %318 = ashr exact i64 %317, 32
  store i64 %318, i64* %RAX, align 8, !tbaa !2428
  %319 = load i64, i64* %RAX
  %320 = mul i64 %319, 4
  %321 = add i64 %320, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %322 = load i32, i32* %EDX
  %323 = zext i32 %322 to i64
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 7
  store i64 %325, i64* %PC
  %326 = inttoptr i64 %321 to i32*
  store i32 %322, i32* %326
  %327 = load i64, i64* %RBP
  %328 = sub i64 %327, 20
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 3
  store i64 %330, i64* %PC
  %331 = inttoptr i64 %328 to i32*
  %332 = load i32, i32* %331
  %333 = zext i32 %332 to i64
  store i64 %333, i64* %RAX, align 8, !tbaa !2428
  %334 = load i64, i64* %RAX
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 3
  store i64 %336, i64* %PC
  %337 = trunc i64 %334 to i32
  %338 = add i32 1, %337
  %339 = zext i32 %338 to i64
  store i64 %339, i64* %RAX, align 8, !tbaa !2428
  %340 = icmp ult i32 %338, %337
  %341 = icmp ult i32 %338, 1
  %342 = or i1 %340, %341
  %343 = zext i1 %342 to i8
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %343, i8* %344, align 1, !tbaa !2432
  %345 = and i32 %338, 255
  %346 = call i32 @llvm.ctpop.i32(i32 %345) #16
  %347 = trunc i32 %346 to i8
  %348 = and i8 %347, 1
  %349 = xor i8 %348, 1
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %349, i8* %350, align 1, !tbaa !2446
  %351 = xor i64 1, %334
  %352 = trunc i64 %351 to i32
  %353 = xor i32 %352, %338
  %354 = lshr i32 %353, 4
  %355 = trunc i32 %354 to i8
  %356 = and i8 %355, 1
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %356, i8* %357, align 1, !tbaa !2447
  %358 = icmp eq i32 %338, 0
  %359 = zext i1 %358 to i8
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %359, i8* %360, align 1, !tbaa !2448
  %361 = lshr i32 %338, 31
  %362 = trunc i32 %361 to i8
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %362, i8* %363, align 1, !tbaa !2449
  %364 = lshr i32 %337, 31
  %365 = xor i32 %361, %364
  %366 = add nuw nsw i32 %365, %361
  %367 = icmp eq i32 %366, 2
  %368 = zext i1 %367 to i8
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %368, i8* %369, align 1, !tbaa !2450
  %370 = load i64, i64* %RBP
  %371 = sub i64 %370, 20
  %372 = load i32, i32* %EAX
  %373 = zext i32 %372 to i64
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 3
  store i64 %375, i64* %PC
  %376 = inttoptr i64 %371 to i32*
  store i32 %372, i32* %376
  %377 = load i64, i64* %PC
  %378 = sub i64 %377, 50
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 5
  store i64 %380, i64* %PC
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %378, i64* %381, align 8, !tbaa !2428
  br label %block_4005cb

block_400553:                                     ; preds = %block_40053e, %block_400520
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_400520 ], [ %637, %block_40053e ]
  %382 = load i64, i64* %RBP
  %383 = sub i64 %382, 20
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 7
  store i64 %385, i64* %PC
  %386 = inttoptr i64 %383 to i32*
  store i32 0, i32* %386
  br label %block_40055a

block_400616:                                     ; preds = %block_400609
  %387 = load i64, i64* %RBP
  %388 = sub i64 %387, 20
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = inttoptr i64 %388 to i32*
  %392 = load i32, i32* %391
  %393 = sext i32 %392 to i64
  store i64 %393, i64* %RAX, align 8, !tbaa !2428
  %394 = load i64, i64* %RAX
  %395 = mul i64 %394, 4
  %396 = add i64 %395, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 8
  store i64 %398, i64* %PC
  %399 = inttoptr i64 %396 to i32*
  %400 = load i32, i32* %399
  %401 = sext i32 %400 to i64
  store i64 %401, i64* %RAX, align 8, !tbaa !2428
  %402 = load i64, i64* %RAX
  %403 = mul i64 %402, 4
  %404 = add i64 %403, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 7
  store i64 %406, i64* %PC
  %407 = inttoptr i64 %404 to i32*
  %408 = load i32, i32* %407
  %409 = zext i32 %408 to i64
  store i64 %409, i64* %RCX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 20
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 4
  store i64 %413, i64* %PC
  %414 = inttoptr i64 %411 to i32*
  %415 = load i32, i32* %414
  %416 = sext i32 %415 to i64
  store i64 %416, i64* %RAX, align 8, !tbaa !2428
  %417 = load i64, i64* %RAX
  %418 = mul i64 %417, 4
  %419 = add i64 %418, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %420 = load i32, i32* %ECX
  %421 = zext i32 %420 to i64
  %422 = load i64, i64* %PC
  %423 = add i64 %422, 7
  store i64 %423, i64* %PC
  %424 = inttoptr i64 %419 to i32*
  store i32 %420, i32* %424
  %425 = load i64, i64* %RBP
  %426 = sub i64 %425, 20
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 3
  store i64 %428, i64* %PC
  %429 = inttoptr i64 %426 to i32*
  %430 = load i32, i32* %429
  %431 = zext i32 %430 to i64
  store i64 %431, i64* %RAX, align 8, !tbaa !2428
  %432 = load i64, i64* %RAX
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 3
  store i64 %434, i64* %PC
  %435 = trunc i64 %432 to i32
  %436 = add i32 1, %435
  %437 = zext i32 %436 to i64
  store i64 %437, i64* %RAX, align 8, !tbaa !2428
  %438 = icmp ult i32 %436, %435
  %439 = icmp ult i32 %436, 1
  %440 = or i1 %438, %439
  %441 = zext i1 %440 to i8
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %441, i8* %442, align 1, !tbaa !2432
  %443 = and i32 %436, 255
  %444 = call i32 @llvm.ctpop.i32(i32 %443) #16
  %445 = trunc i32 %444 to i8
  %446 = and i8 %445, 1
  %447 = xor i8 %446, 1
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %447, i8* %448, align 1, !tbaa !2446
  %449 = xor i64 1, %432
  %450 = trunc i64 %449 to i32
  %451 = xor i32 %450, %436
  %452 = lshr i32 %451, 4
  %453 = trunc i32 %452 to i8
  %454 = and i8 %453, 1
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %454, i8* %455, align 1, !tbaa !2447
  %456 = icmp eq i32 %436, 0
  %457 = zext i1 %456 to i8
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %457, i8* %458, align 1, !tbaa !2448
  %459 = lshr i32 %436, 31
  %460 = trunc i32 %459 to i8
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %460, i8* %461, align 1, !tbaa !2449
  %462 = lshr i32 %435, 31
  %463 = xor i32 %459, %462
  %464 = add nuw nsw i32 %463, %459
  %465 = icmp eq i32 %464, 2
  %466 = zext i1 %465 to i8
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %466, i8* %467, align 1, !tbaa !2450
  %468 = load i64, i64* %RBP
  %469 = sub i64 %468, 20
  %470 = load i32, i32* %EAX
  %471 = zext i32 %470 to i64
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 3
  store i64 %473, i64* %PC
  %474 = inttoptr i64 %469 to i32*
  store i32 %470, i32* %474
  %475 = load i64, i64* %PC
  %476 = sub i64 %475, 52
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 5
  store i64 %478, i64* %PC
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %476, i64* %479, align 8, !tbaa !2428
  br label %block_400609

block_400591:                                     ; preds = %block_40055a
  %480 = sub i64 %247, 20
  %481 = load i64, i64* %PC
  %482 = add i64 %481, 7
  store i64 %482, i64* %PC
  %483 = inttoptr i64 %480 to i32*
  store i32 0, i32* %483
  br label %block_400598

block_40064e:                                     ; preds = %block_40065b, %block_400642
  %MEMORY.3 = phi %struct.Memory* [ %553, %block_400642 ], [ %MEMORY.3, %block_40065b ]
  %484 = load i64, i64* %RBP
  %485 = sub i64 %484, 20
  %486 = load i64, i64* %PC
  %487 = add i64 %486, 7
  store i64 %487, i64* %PC
  %488 = inttoptr i64 %485 to i32*
  %489 = load i32, i32* %488
  %490 = sub i32 %489, 188
  %491 = icmp ult i32 %489, 188
  %492 = zext i1 %491 to i8
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %492, i8* %493, align 1, !tbaa !2432
  %494 = and i32 %490, 255
  %495 = call i32 @llvm.ctpop.i32(i32 %494) #16
  %496 = trunc i32 %495 to i8
  %497 = and i8 %496, 1
  %498 = xor i8 %497, 1
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %498, i8* %499, align 1, !tbaa !2446
  %500 = xor i32 %489, 188
  %501 = xor i32 %500, %490
  %502 = lshr i32 %501, 4
  %503 = trunc i32 %502 to i8
  %504 = and i8 %503, 1
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %504, i8* %505, align 1, !tbaa !2447
  %506 = icmp eq i32 %490, 0
  %507 = zext i1 %506 to i8
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %507, i8* %508, align 1, !tbaa !2448
  %509 = lshr i32 %490, 31
  %510 = trunc i32 %509 to i8
  %511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %510, i8* %511, align 1, !tbaa !2449
  %512 = lshr i32 %489, 31
  %513 = xor i32 %509, %512
  %514 = add nuw nsw i32 %513, %512
  %515 = icmp eq i32 %514, 2
  %516 = zext i1 %515 to i8
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %516, i8* %517, align 1, !tbaa !2450
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 49
  %520 = load i64, i64* %PC
  %521 = add i64 %520, 6
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 6
  store i64 %523, i64* %PC
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %525 = load i8, i8* %524, align 1, !tbaa !2449
  %526 = icmp ne i8 %525, 0
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %528 = load i8, i8* %527, align 1, !tbaa !2450
  %529 = icmp ne i8 %528, 0
  %530 = xor i1 %526, %529
  %531 = xor i1 %530, true
  %532 = zext i1 %531 to i8
  store i8 %532, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %534 = select i1 %530, i64 %521, i64 %519
  store i64 %534, i64* %533, align 8, !tbaa !2428
  %535 = load i8, i8* %BRANCH_TAKEN
  %536 = icmp eq i8 %535, 1
  br i1 %536, label %block_400686, label %block_40065b

block_400602:                                     ; preds = %block_4005cb
  %537 = sub i64 %1118, 20
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 7
  store i64 %539, i64* %PC
  %540 = inttoptr i64 %537 to i32*
  store i32 0, i32* %540
  br label %block_400609

block_400642:                                     ; preds = %block_400609
  %541 = load i64, i64* %PC
  %542 = add i64 %541, 766
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 5
  %545 = load i64, i64* %PC
  %546 = add i64 %545, 5
  store i64 %546, i64* %PC
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %548 = load i64, i64* %547, align 8, !tbaa !2428
  %549 = add i64 %548, -8
  %550 = inttoptr i64 %549 to i64*
  store i64 %544, i64* %550
  store i64 %549, i64* %547, align 8, !tbaa !2428
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %542, i64* %551, align 8, !tbaa !2428
  %552 = load i64, i64* %PC
  %553 = call %struct.Memory* @sub_400940_decode_rs_renamed_(%struct.State* %0, i64 %552, %struct.Memory* %MEMORY.4)
  %554 = load i64, i64* %RBP
  %555 = sub i64 %554, 20
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 7
  store i64 %557, i64* %PC
  %558 = inttoptr i64 %555 to i32*
  store i32 0, i32* %558
  br label %block_40064e

block_400609:                                     ; preds = %block_400602, %block_400616
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.5, %block_400602 ], [ %MEMORY.4, %block_400616 ]
  %559 = load i64, i64* %RBP
  %560 = sub i64 %559, 20
  %561 = load i64, i64* %PC
  %562 = add i64 %561, 7
  store i64 %562, i64* %PC
  %563 = inttoptr i64 %560 to i32*
  %564 = load i32, i32* %563
  %565 = sub i32 %564, 255
  %566 = icmp ult i32 %564, 255
  %567 = zext i1 %566 to i8
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %567, i8* %568, align 1, !tbaa !2432
  %569 = and i32 %565, 255
  %570 = call i32 @llvm.ctpop.i32(i32 %569) #16
  %571 = trunc i32 %570 to i8
  %572 = and i8 %571, 1
  %573 = xor i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %573, i8* %574, align 1, !tbaa !2446
  %575 = xor i32 %564, 255
  %576 = xor i32 %575, %565
  %577 = lshr i32 %576, 4
  %578 = trunc i32 %577 to i8
  %579 = and i8 %578, 1
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %579, i8* %580, align 1, !tbaa !2447
  %581 = icmp eq i32 %565, 0
  %582 = zext i1 %581 to i8
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %582, i8* %583, align 1, !tbaa !2448
  %584 = lshr i32 %565, 31
  %585 = trunc i32 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %585, i8* %586, align 1, !tbaa !2449
  %587 = lshr i32 %564, 31
  %588 = xor i32 %584, %587
  %589 = add nuw nsw i32 %588, %587
  %590 = icmp eq i32 %589, 2
  %591 = zext i1 %590 to i8
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %591, i8* %592, align 1, !tbaa !2450
  %593 = load i64, i64* %PC
  %594 = add i64 %593, 50
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 6
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 6
  store i64 %598, i64* %PC
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %600 = load i8, i8* %599, align 1, !tbaa !2449
  %601 = icmp ne i8 %600, 0
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %603 = load i8, i8* %602, align 1, !tbaa !2450
  %604 = icmp ne i8 %603, 0
  %605 = xor i1 %601, %604
  %606 = xor i1 %605, true
  %607 = zext i1 %606 to i8
  store i8 %607, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %609 = select i1 %605, i64 %596, i64 %594
  store i64 %609, i64* %608, align 8, !tbaa !2428
  %610 = load i8, i8* %BRANCH_TAKEN
  %611 = icmp eq i8 %610, 1
  br i1 %611, label %block_400642, label %block_400616

block_40053e:                                     ; preds = %block_400520
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 338
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 5
  store i64 %617, i64* %PC
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %619 = load i64, i64* %618, align 8, !tbaa !2428
  %620 = add i64 %619, -8
  %621 = inttoptr i64 %620 to i64*
  store i64 %615, i64* %621
  store i64 %620, i64* %618, align 8, !tbaa !2428
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %613, i64* %622, align 8, !tbaa !2428
  %623 = load i64, i64* %PC
  %624 = call %struct.Memory* @sub_400690_generate_gf_renamed_(%struct.State* %0, i64 %623, %struct.Memory* %2)
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 669
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 5
  %629 = load i64, i64* %PC
  %630 = add i64 %629, 5
  store i64 %630, i64* %PC
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %632 = load i64, i64* %631, align 8, !tbaa !2428
  %633 = add i64 %632, -8
  %634 = inttoptr i64 %633 to i64*
  store i64 %628, i64* %634
  store i64 %633, i64* %631, align 8, !tbaa !2428
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %626, i64* %635, align 8, !tbaa !2428
  %636 = load i64, i64* %PC
  %637 = call %struct.Memory* @sub_4007e0_gen_poly_renamed_(%struct.State* %0, i64 %636, %struct.Memory* %624)
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 11
  store i64 %639, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 16) to i32*)
  br label %block_400553

block_40065b:                                     ; preds = %block_40064e
  %640 = load i64, i64* %RBP
  %641 = sub i64 %640, 20
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 3
  store i64 %643, i64* %PC
  %644 = inttoptr i64 %641 to i32*
  %645 = load i32, i32* %644
  %646 = zext i32 %645 to i64
  store i64 %646, i64* %RAX, align 8, !tbaa !2428
  %647 = load i64, i64* %RAX
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 3
  store i64 %649, i64* %PC
  %650 = trunc i64 %647 to i32
  %651 = add i32 67, %650
  %652 = zext i32 %651 to i64
  store i64 %652, i64* %RAX, align 8, !tbaa !2428
  %653 = icmp ult i32 %651, %650
  %654 = icmp ult i32 %651, 67
  %655 = or i1 %653, %654
  %656 = zext i1 %655 to i8
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %656, i8* %657, align 1, !tbaa !2432
  %658 = and i32 %651, 255
  %659 = call i32 @llvm.ctpop.i32(i32 %658) #16
  %660 = trunc i32 %659 to i8
  %661 = and i8 %660, 1
  %662 = xor i8 %661, 1
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %662, i8* %663, align 1, !tbaa !2446
  %664 = xor i64 67, %647
  %665 = trunc i64 %664 to i32
  %666 = xor i32 %665, %651
  %667 = lshr i32 %666, 4
  %668 = trunc i32 %667 to i8
  %669 = and i8 %668, 1
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %669, i8* %670, align 1, !tbaa !2447
  %671 = icmp eq i32 %651, 0
  %672 = zext i1 %671 to i8
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %672, i8* %673, align 1, !tbaa !2448
  %674 = lshr i32 %651, 31
  %675 = trunc i32 %674 to i8
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %675, i8* %676, align 1, !tbaa !2449
  %677 = lshr i32 %650, 31
  %678 = xor i32 %674, %677
  %679 = add nuw nsw i32 %678, %674
  %680 = icmp eq i32 %679, 2
  %681 = zext i1 %680 to i8
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %681, i8* %682, align 1, !tbaa !2450
  %683 = load i32, i32* %EAX
  %684 = zext i32 %683 to i64
  %685 = load i64, i64* %PC
  %686 = add i64 %685, 3
  store i64 %686, i64* %PC
  %687 = shl i64 %684, 32
  %688 = ashr exact i64 %687, 32
  store i64 %688, i64* %RCX, align 8, !tbaa !2428
  %689 = load i64, i64* %RCX
  %690 = mul i64 %689, 4
  %691 = add i64 %690, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 7
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  %695 = load i32, i32* %694
  %696 = zext i32 %695 to i64
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i8, i8* %AL
  %698 = zext i8 %697 to i64
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 2
  store i64 %700, i64* %PC
  store i8 %697, i8* %DL, align 1, !tbaa !2451
  %701 = load i64, i64* %RBP
  %702 = sub i64 %701, 8
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 4
  store i64 %704, i64* %PC
  %705 = inttoptr i64 %702 to i64*
  %706 = load i64, i64* %705
  store i64 %706, i64* %RCX, align 8, !tbaa !2428
  %707 = load i64, i64* %RBP
  %708 = sub i64 %707, 20
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 4
  store i64 %710, i64* %PC
  %711 = inttoptr i64 %708 to i32*
  %712 = load i32, i32* %711
  %713 = sext i32 %712 to i64
  store i64 %713, i64* %RSI, align 8, !tbaa !2428
  %714 = load i64, i64* %RCX
  %715 = load i64, i64* %RSI
  %716 = add i64 %715, %714
  %717 = load i8, i8* %DL
  %718 = zext i8 %717 to i64
  %719 = load i64, i64* %PC
  %720 = add i64 %719, 3
  store i64 %720, i64* %PC
  %721 = inttoptr i64 %716 to i8*
  store i8 %717, i8* %721
  %722 = load i64, i64* %RBP
  %723 = sub i64 %722, 20
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 3
  store i64 %725, i64* %PC
  %726 = inttoptr i64 %723 to i32*
  %727 = load i32, i32* %726
  %728 = zext i32 %727 to i64
  store i64 %728, i64* %RAX, align 8, !tbaa !2428
  %729 = load i64, i64* %RAX
  %730 = load i64, i64* %PC
  %731 = add i64 %730, 3
  store i64 %731, i64* %PC
  %732 = trunc i64 %729 to i32
  %733 = add i32 1, %732
  %734 = zext i32 %733 to i64
  store i64 %734, i64* %RAX, align 8, !tbaa !2428
  %735 = icmp ult i32 %733, %732
  %736 = icmp ult i32 %733, 1
  %737 = or i1 %735, %736
  %738 = zext i1 %737 to i8
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %738, i8* %739, align 1, !tbaa !2432
  %740 = and i32 %733, 255
  %741 = call i32 @llvm.ctpop.i32(i32 %740) #16
  %742 = trunc i32 %741 to i8
  %743 = and i8 %742, 1
  %744 = xor i8 %743, 1
  %745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %744, i8* %745, align 1, !tbaa !2446
  %746 = xor i64 1, %729
  %747 = trunc i64 %746 to i32
  %748 = xor i32 %747, %733
  %749 = lshr i32 %748, 4
  %750 = trunc i32 %749 to i8
  %751 = and i8 %750, 1
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %751, i8* %752, align 1, !tbaa !2447
  %753 = icmp eq i32 %733, 0
  %754 = zext i1 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %754, i8* %755, align 1, !tbaa !2448
  %756 = lshr i32 %733, 31
  %757 = trunc i32 %756 to i8
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %757, i8* %758, align 1, !tbaa !2449
  %759 = lshr i32 %732, 31
  %760 = xor i32 %756, %759
  %761 = add nuw nsw i32 %760, %756
  %762 = icmp eq i32 %761, 2
  %763 = zext i1 %762 to i8
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %763, i8* %764, align 1, !tbaa !2450
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 20
  %767 = load i32, i32* %EAX
  %768 = zext i32 %767 to i64
  %769 = load i64, i64* %PC
  %770 = add i64 %769, 3
  store i64 %770, i64* %PC
  %771 = inttoptr i64 %766 to i32*
  store i32 %767, i32* %771
  %772 = load i64, i64* %PC
  %773 = sub i64 %772, 51
  %774 = load i64, i64* %PC
  %775 = add i64 %774, 5
  store i64 %775, i64* %PC
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %773, i64* %776, align 8, !tbaa !2428
  br label %block_40064e

block_400564:                                     ; preds = %block_40055a
  %777 = sub i64 %247, 16
  %778 = load i64, i64* %PC
  %779 = add i64 %778, 4
  store i64 %779, i64* %PC
  %780 = inttoptr i64 %777 to i64*
  %781 = load i64, i64* %780
  store i64 %781, i64* %RAX, align 8, !tbaa !2428
  %782 = load i64, i64* %RBP
  %783 = sub i64 %782, 20
  %784 = load i64, i64* %PC
  %785 = add i64 %784, 3
  store i64 %785, i64* %PC
  %786 = inttoptr i64 %783 to i32*
  %787 = load i32, i32* %786
  %788 = zext i32 %787 to i64
  store i64 %788, i64* %RCX, align 8, !tbaa !2428
  %789 = load i64, i64* %RCX
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 6
  store i64 %791, i64* %PC
  %792 = trunc i64 %789 to i32
  %793 = add i32 188, %792
  %794 = zext i32 %793 to i64
  store i64 %794, i64* %RCX, align 8, !tbaa !2428
  %795 = icmp ult i32 %793, %792
  %796 = icmp ult i32 %793, 188
  %797 = or i1 %795, %796
  %798 = zext i1 %797 to i8
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %798, i8* %799, align 1, !tbaa !2432
  %800 = and i32 %793, 255
  %801 = call i32 @llvm.ctpop.i32(i32 %800) #16
  %802 = trunc i32 %801 to i8
  %803 = and i8 %802, 1
  %804 = xor i8 %803, 1
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %804, i8* %805, align 1, !tbaa !2446
  %806 = xor i64 188, %789
  %807 = trunc i64 %806 to i32
  %808 = xor i32 %807, %793
  %809 = lshr i32 %808, 4
  %810 = trunc i32 %809 to i8
  %811 = and i8 %810, 1
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %811, i8* %812, align 1, !tbaa !2447
  %813 = icmp eq i32 %793, 0
  %814 = zext i1 %813 to i8
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %814, i8* %815, align 1, !tbaa !2448
  %816 = lshr i32 %793, 31
  %817 = trunc i32 %816 to i8
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %817, i8* %818, align 1, !tbaa !2449
  %819 = lshr i32 %792, 31
  %820 = xor i32 %816, %819
  %821 = add nuw nsw i32 %820, %816
  %822 = icmp eq i32 %821, 2
  %823 = zext i1 %822 to i8
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %823, i8* %824, align 1, !tbaa !2450
  %825 = load i32, i32* %ECX
  %826 = zext i32 %825 to i64
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 3
  store i64 %828, i64* %PC
  %829 = shl i64 %826, 32
  %830 = ashr exact i64 %829, 32
  store i64 %830, i64* %RDX, align 8, !tbaa !2428
  %831 = load i64, i64* %RAX
  %832 = load i64, i64* %RDX
  %833 = add i64 %832, %831
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 4
  store i64 %835, i64* %PC
  %836 = inttoptr i64 %833 to i8*
  %837 = load i8, i8* %836
  %838 = zext i8 %837 to i64
  store i64 %838, i64* %RCX, align 8, !tbaa !2428
  %839 = load i64, i64* %RBP
  %840 = sub i64 %839, 20
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 4
  store i64 %842, i64* %PC
  %843 = inttoptr i64 %840 to i32*
  %844 = load i32, i32* %843
  %845 = sext i32 %844 to i64
  store i64 %845, i64* %RAX, align 8, !tbaa !2428
  %846 = load i64, i64* %RAX
  %847 = mul i64 %846, 4
  %848 = add i64 %847, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %849 = load i32, i32* %ECX
  %850 = zext i32 %849 to i64
  %851 = load i64, i64* %PC
  %852 = add i64 %851, 7
  store i64 %852, i64* %PC
  %853 = inttoptr i64 %848 to i32*
  store i32 %849, i32* %853
  %854 = load i64, i64* %RBP
  %855 = sub i64 %854, 20
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 3
  store i64 %857, i64* %PC
  %858 = inttoptr i64 %855 to i32*
  %859 = load i32, i32* %858
  %860 = zext i32 %859 to i64
  store i64 %860, i64* %RAX, align 8, !tbaa !2428
  %861 = load i64, i64* %RAX
  %862 = load i64, i64* %PC
  %863 = add i64 %862, 3
  store i64 %863, i64* %PC
  %864 = trunc i64 %861 to i32
  %865 = add i32 1, %864
  %866 = zext i32 %865 to i64
  store i64 %866, i64* %RAX, align 8, !tbaa !2428
  %867 = icmp ult i32 %865, %864
  %868 = icmp ult i32 %865, 1
  %869 = or i1 %867, %868
  %870 = zext i1 %869 to i8
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %870, i8* %871, align 1, !tbaa !2432
  %872 = and i32 %865, 255
  %873 = call i32 @llvm.ctpop.i32(i32 %872) #16
  %874 = trunc i32 %873 to i8
  %875 = and i8 %874, 1
  %876 = xor i8 %875, 1
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %876, i8* %877, align 1, !tbaa !2446
  %878 = xor i64 1, %861
  %879 = trunc i64 %878 to i32
  %880 = xor i32 %879, %865
  %881 = lshr i32 %880, 4
  %882 = trunc i32 %881 to i8
  %883 = and i8 %882, 1
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %883, i8* %884, align 1, !tbaa !2447
  %885 = icmp eq i32 %865, 0
  %886 = zext i1 %885 to i8
  %887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %886, i8* %887, align 1, !tbaa !2448
  %888 = lshr i32 %865, 31
  %889 = trunc i32 %888 to i8
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %889, i8* %890, align 1, !tbaa !2449
  %891 = lshr i32 %864, 31
  %892 = xor i32 %888, %891
  %893 = add nuw nsw i32 %892, %888
  %894 = icmp eq i32 %893, 2
  %895 = zext i1 %894 to i8
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %895, i8* %896, align 1, !tbaa !2450
  %897 = load i64, i64* %RBP
  %898 = sub i64 %897, 20
  %899 = load i32, i32* %EAX
  %900 = zext i32 %899 to i64
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 3
  store i64 %902, i64* %PC
  %903 = inttoptr i64 %898 to i32*
  store i32 %899, i32* %903
  %904 = load i64, i64* %PC
  %905 = sub i64 %904, 50
  %906 = load i64, i64* %PC
  %907 = add i64 %906, 5
  store i64 %907, i64* %PC
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %905, i64* %908, align 8, !tbaa !2428
  br label %block_40055a

block_400686:                                     ; preds = %block_40064e
  %909 = load i64, i64* %RSP
  %910 = load i64, i64* %PC
  %911 = add i64 %910, 4
  store i64 %911, i64* %PC
  %912 = add i64 32, %909
  store i64 %912, i64* %RSP, align 8, !tbaa !2428
  %913 = icmp ult i64 %912, %909
  %914 = icmp ult i64 %912, 32
  %915 = or i1 %913, %914
  %916 = zext i1 %915 to i8
  %917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %916, i8* %917, align 1, !tbaa !2432
  %918 = trunc i64 %912 to i32
  %919 = and i32 %918, 255
  %920 = call i32 @llvm.ctpop.i32(i32 %919) #16
  %921 = trunc i32 %920 to i8
  %922 = and i8 %921, 1
  %923 = xor i8 %922, 1
  %924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %923, i8* %924, align 1, !tbaa !2446
  %925 = xor i64 32, %909
  %926 = xor i64 %925, %912
  %927 = lshr i64 %926, 4
  %928 = trunc i64 %927 to i8
  %929 = and i8 %928, 1
  %930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %929, i8* %930, align 1, !tbaa !2447
  %931 = icmp eq i64 %912, 0
  %932 = zext i1 %931 to i8
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %932, i8* %933, align 1, !tbaa !2448
  %934 = lshr i64 %912, 63
  %935 = trunc i64 %934 to i8
  %936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %935, i8* %936, align 1, !tbaa !2449
  %937 = lshr i64 %909, 63
  %938 = xor i64 %934, %937
  %939 = add nuw nsw i64 %938, %934
  %940 = icmp eq i64 %939, 2
  %941 = zext i1 %940 to i8
  %942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %941, i8* %942, align 1, !tbaa !2450
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 1
  store i64 %944, i64* %PC
  %945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %946 = load i64, i64* %945, align 8, !tbaa !2428
  %947 = add i64 %946, 8
  %948 = inttoptr i64 %946 to i64*
  %949 = load i64, i64* %948
  store i64 %949, i64* %RBP, align 8, !tbaa !2428
  store i64 %947, i64* %945, align 8, !tbaa !2428
  %950 = load i64, i64* %PC
  %951 = add i64 %950, 1
  store i64 %951, i64* %PC
  %952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %954 = load i64, i64* %953, align 8, !tbaa !2428
  %955 = inttoptr i64 %954 to i64*
  %956 = load i64, i64* %955
  store i64 %956, i64* %952, align 8, !tbaa !2428
  %957 = add i64 %954, 8
  store i64 %957, i64* %953, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.3

block_4005a2:                                     ; preds = %block_400598
  %958 = add i64 %193, 3
  store i64 %958, i64* %PC
  %959 = inttoptr i64 %192 to i32*
  %960 = load i32, i32* %959
  %961 = zext i32 %960 to i64
  store i64 %961, i64* %RAX, align 8, !tbaa !2428
  %962 = load i64, i64* %RAX
  %963 = load i64, i64* %PC
  %964 = add i64 %963, 3
  store i64 %964, i64* %PC
  %965 = trunc i64 %962 to i32
  %966 = add i32 16, %965
  %967 = zext i32 %966 to i64
  store i64 %967, i64* %RAX, align 8, !tbaa !2428
  %968 = icmp ult i32 %966, %965
  %969 = icmp ult i32 %966, 16
  %970 = or i1 %968, %969
  %971 = zext i1 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %971, i8* %972, align 1, !tbaa !2432
  %973 = and i32 %966, 255
  %974 = call i32 @llvm.ctpop.i32(i32 %973) #16
  %975 = trunc i32 %974 to i8
  %976 = and i8 %975, 1
  %977 = xor i8 %976, 1
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %977, i8* %978, align 1, !tbaa !2446
  %979 = xor i64 16, %962
  %980 = trunc i64 %979 to i32
  %981 = xor i32 %980, %966
  %982 = lshr i32 %981, 4
  %983 = trunc i32 %982 to i8
  %984 = and i8 %983, 1
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %984, i8* %985, align 1, !tbaa !2447
  %986 = icmp eq i32 %966, 0
  %987 = zext i1 %986 to i8
  %988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %987, i8* %988, align 1, !tbaa !2448
  %989 = lshr i32 %966, 31
  %990 = trunc i32 %989 to i8
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %990, i8* %991, align 1, !tbaa !2449
  %992 = lshr i32 %965, 31
  %993 = xor i32 %989, %992
  %994 = add nuw nsw i32 %993, %989
  %995 = icmp eq i32 %994, 2
  %996 = zext i1 %995 to i8
  %997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %996, i8* %997, align 1, !tbaa !2450
  %998 = load i32, i32* %EAX
  %999 = zext i32 %998 to i64
  %1000 = load i64, i64* %PC
  %1001 = add i64 %1000, 3
  store i64 %1001, i64* %PC
  %1002 = shl i64 %999, 32
  %1003 = ashr exact i64 %1002, 32
  store i64 %1003, i64* %RCX, align 8, !tbaa !2428
  %1004 = load i64, i64* %RCX
  %1005 = mul i64 %1004, 4
  %1006 = add i64 %1005, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %1007 = load i64, i64* %PC
  %1008 = add i64 %1007, 11
  store i64 %1008, i64* %PC
  %1009 = inttoptr i64 %1006 to i32*
  store i32 0, i32* %1009
  %1010 = load i64, i64* %RBP
  %1011 = sub i64 %1010, 20
  %1012 = load i64, i64* %PC
  %1013 = add i64 %1012, 3
  store i64 %1013, i64* %PC
  %1014 = inttoptr i64 %1011 to i32*
  %1015 = load i32, i32* %1014
  %1016 = zext i32 %1015 to i64
  store i64 %1016, i64* %RAX, align 8, !tbaa !2428
  %1017 = load i64, i64* %RAX
  %1018 = load i64, i64* %PC
  %1019 = add i64 %1018, 3
  store i64 %1019, i64* %PC
  %1020 = trunc i64 %1017 to i32
  %1021 = add i32 1, %1020
  %1022 = zext i32 %1021 to i64
  store i64 %1022, i64* %RAX, align 8, !tbaa !2428
  %1023 = icmp ult i32 %1021, %1020
  %1024 = icmp ult i32 %1021, 1
  %1025 = or i1 %1023, %1024
  %1026 = zext i1 %1025 to i8
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1026, i8* %1027, align 1, !tbaa !2432
  %1028 = and i32 %1021, 255
  %1029 = call i32 @llvm.ctpop.i32(i32 %1028) #16
  %1030 = trunc i32 %1029 to i8
  %1031 = and i8 %1030, 1
  %1032 = xor i8 %1031, 1
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1032, i8* %1033, align 1, !tbaa !2446
  %1034 = xor i64 1, %1017
  %1035 = trunc i64 %1034 to i32
  %1036 = xor i32 %1035, %1021
  %1037 = lshr i32 %1036, 4
  %1038 = trunc i32 %1037 to i8
  %1039 = and i8 %1038, 1
  %1040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1039, i8* %1040, align 1, !tbaa !2447
  %1041 = icmp eq i32 %1021, 0
  %1042 = zext i1 %1041 to i8
  %1043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1042, i8* %1043, align 1, !tbaa !2448
  %1044 = lshr i32 %1021, 31
  %1045 = trunc i32 %1044 to i8
  %1046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1045, i8* %1046, align 1, !tbaa !2449
  %1047 = lshr i32 %1020, 31
  %1048 = xor i32 %1044, %1047
  %1049 = add nuw nsw i32 %1048, %1044
  %1050 = icmp eq i32 %1049, 2
  %1051 = zext i1 %1050 to i8
  %1052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1051, i8* %1052, align 1, !tbaa !2450
  %1053 = load i64, i64* %RBP
  %1054 = sub i64 %1053, 20
  %1055 = load i32, i32* %EAX
  %1056 = zext i32 %1055 to i64
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 3
  store i64 %1058, i64* %PC
  %1059 = inttoptr i64 %1054 to i32*
  store i32 %1055, i32* %1059
  %1060 = load i64, i64* %PC
  %1061 = sub i64 %1060, 39
  %1062 = load i64, i64* %PC
  %1063 = add i64 %1062, 5
  store i64 %1063, i64* %PC
  %1064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1061, i64* %1064, align 8, !tbaa !2428
  br label %block_400598

block_4005cb:                                     ; preds = %block_4005d8, %block_4005c4
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.0, %block_4005c4 ], [ %MEMORY.5, %block_4005d8 ]
  %1065 = load i64, i64* %RBP
  %1066 = sub i64 %1065, 20
  %1067 = load i64, i64* %PC
  %1068 = add i64 %1067, 7
  store i64 %1068, i64* %PC
  %1069 = inttoptr i64 %1066 to i32*
  %1070 = load i32, i32* %1069
  %1071 = sub i32 %1070, 188
  %1072 = icmp ult i32 %1070, 188
  %1073 = zext i1 %1072 to i8
  %1074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1073, i8* %1074, align 1, !tbaa !2432
  %1075 = and i32 %1071, 255
  %1076 = call i32 @llvm.ctpop.i32(i32 %1075) #16
  %1077 = trunc i32 %1076 to i8
  %1078 = and i8 %1077, 1
  %1079 = xor i8 %1078, 1
  %1080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1079, i8* %1080, align 1, !tbaa !2446
  %1081 = xor i32 %1070, 188
  %1082 = xor i32 %1081, %1071
  %1083 = lshr i32 %1082, 4
  %1084 = trunc i32 %1083 to i8
  %1085 = and i8 %1084, 1
  %1086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1085, i8* %1086, align 1, !tbaa !2447
  %1087 = icmp eq i32 %1071, 0
  %1088 = zext i1 %1087 to i8
  %1089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1088, i8* %1089, align 1, !tbaa !2448
  %1090 = lshr i32 %1071, 31
  %1091 = trunc i32 %1090 to i8
  %1092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1091, i8* %1092, align 1, !tbaa !2449
  %1093 = lshr i32 %1070, 31
  %1094 = xor i32 %1090, %1093
  %1095 = add nuw nsw i32 %1094, %1093
  %1096 = icmp eq i32 %1095, 2
  %1097 = zext i1 %1096 to i8
  %1098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1097, i8* %1098, align 1, !tbaa !2450
  %1099 = load i64, i64* %PC
  %1100 = add i64 %1099, 48
  %1101 = load i64, i64* %PC
  %1102 = add i64 %1101, 6
  %1103 = load i64, i64* %PC
  %1104 = add i64 %1103, 6
  store i64 %1104, i64* %PC
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1106 = load i8, i8* %1105, align 1, !tbaa !2449
  %1107 = icmp ne i8 %1106, 0
  %1108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1109 = load i8, i8* %1108, align 1, !tbaa !2450
  %1110 = icmp ne i8 %1109, 0
  %1111 = xor i1 %1107, %1110
  %1112 = xor i1 %1111, true
  %1113 = zext i1 %1112 to i8
  store i8 %1113, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1115 = select i1 %1111, i64 %1102, i64 %1100
  store i64 %1115, i64* %1114, align 8, !tbaa !2428
  %1116 = load i8, i8* %BRANCH_TAKEN
  %1117 = icmp eq i8 %1116, 1
  %1118 = load i64, i64* %RBP
  br i1 %1117, label %block_400602, label %block_4005d8
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004a0_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 6303832, i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, 6303832
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, 6303832
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 6303832, %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %36, 63
  %63 = xor i64 %59, %62
  %64 = add nuw nsw i64 %63, %62
  %65 = icmp eq i64 %64, 2
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %66, i8* %67, align 1, !tbaa !2450
  %68 = load i64, i64* %RSP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 3
  store i64 %70, i64* %PC
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  %71 = load i64, i64* %RSI
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = ashr i64 %71, 2
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  %77 = ashr i64 %74, 1
  store i64 %77, i64* %RSI, align 8, !tbaa !2428
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %76, i8* %78, align 1, !tbaa !2451
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %80 = trunc i64 %77 to i32
  %81 = and i32 %80, 255
  %82 = call i32 @llvm.ctpop.i32(i32 %81) #16
  %83 = trunc i32 %82 to i8
  %84 = and i8 %83, 1
  %85 = xor i8 %84, 1
  store i8 %85, i8* %79, align 1, !tbaa !2451
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %86, align 1, !tbaa !2451
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %88 = icmp eq i64 %77, 0
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %87, align 1, !tbaa !2451
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %91 = lshr i64 %77, 63
  %92 = trunc i64 %91 to i8
  store i8 %92, i8* %90, align 1, !tbaa !2451
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %93, align 1, !tbaa !2451
  %94 = load i64, i64* %RSI
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 3
  store i64 %96, i64* %PC
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = lshr i64 %97, 62
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = lshr i64 %100, 1
  store i64 %103, i64* %RAX, align 8, !tbaa !2428
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %102, i8* %104, align 1, !tbaa !2451
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %106 = trunc i64 %103 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  store i8 %111, i8* %105, align 1, !tbaa !2451
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %112, align 1, !tbaa !2451
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %114 = icmp eq i64 %103, 0
  %115 = zext i1 %114 to i8
  store i8 %115, i8* %113, align 1, !tbaa !2451
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %116, align 1, !tbaa !2451
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = load i64, i64* %RSI
  %119 = load i64, i64* %RAX
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 3
  store i64 %121, i64* %PC
  %122 = add i64 %119, %118
  store i64 %122, i64* %RSI, align 8, !tbaa !2428
  %123 = icmp ult i64 %122, %118
  %124 = icmp ult i64 %122, %119
  %125 = or i1 %123, %124
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %126, i8* %127, align 1, !tbaa !2432
  %128 = trunc i64 %122 to i32
  %129 = and i32 %128, 255
  %130 = call i32 @llvm.ctpop.i32(i32 %129) #16
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %133, i8* %134, align 1, !tbaa !2446
  %135 = xor i64 %119, %118
  %136 = xor i64 %135, %122
  %137 = lshr i64 %136, 4
  %138 = trunc i64 %137 to i8
  %139 = and i8 %138, 1
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %139, i8* %140, align 1, !tbaa !2447
  %141 = icmp eq i64 %122, 0
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %142, i8* %143, align 1, !tbaa !2448
  %144 = lshr i64 %122, 63
  %145 = trunc i64 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %145, i8* %146, align 1, !tbaa !2449
  %147 = lshr i64 %118, 63
  %148 = lshr i64 %119, 63
  %149 = xor i64 %144, %147
  %150 = xor i64 %144, %148
  %151 = add nuw nsw i64 %149, %150
  %152 = icmp eq i64 %151, 2
  %153 = zext i1 %152 to i8
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %153, i8* %154, align 1, !tbaa !2450
  %155 = load i64, i64* %RSI
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 3
  store i64 %157, i64* %PC
  %158 = trunc i64 %155 to i8
  %159 = and i8 %158, 1
  %160 = ashr i64 %155, 1
  store i64 %160, i64* %RSI, align 8, !tbaa !2428
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %159, i8* %161, align 1, !tbaa !2451
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %163 = trunc i64 %160 to i32
  %164 = and i32 %163, 255
  %165 = call i32 @llvm.ctpop.i32(i32 %164) #16
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = xor i8 %167, 1
  store i8 %168, i8* %162, align 1, !tbaa !2451
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %169, align 1, !tbaa !2451
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %171 = icmp eq i64 %160, 0
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %170, align 1, !tbaa !2451
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %174 = lshr i64 %160, 63
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %173, align 1, !tbaa !2451
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %176, align 1, !tbaa !2451
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 23
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 2
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 2
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %184 = load i8, i8* %183, align 1, !tbaa !2448
  store i8 %184, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %186 = icmp ne i8 %184, 0
  %187 = select i1 %186, i64 %178, i64 %180
  store i64 %187, i64* %185, align 8, !tbaa !2428
  %188 = load i8, i8* %BRANCH_TAKEN
  %189 = icmp eq i8 %188, 1
  br i1 %189, label %block_4004d8, label %block_4004c3

block_4004da:                                     ; preds = %block_4004cd
  %190 = load i64, i64* %RAX
  %191 = load i64, i64* %RAX
  %192 = add i64 %191, %190
  %193 = load i16, i16* %AX
  %194 = zext i16 %193 to i64
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 6
  store i64 %196, i64* %PC
  %197 = load i64, i64* %PC
  %198 = tail call %struct.Memory* @sub_4004e0___do_global_dtors_aux(%struct.State* %0, i64 %197, %struct.Memory* %2)
  ret %struct.Memory* %198

block_4004d5:                                     ; preds = %block_4004cd
  %199 = load i64, i64* %RAX
  %200 = load i32, i32* %EAX
  %201 = zext i32 %200 to i64
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  br label %block_4004d8

block_4004cd:                                     ; preds = %block_4004c3
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 1
  store i64 %205, i64* %PC
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %207 = load i64, i64* %206, align 8, !tbaa !2428
  %208 = add i64 %207, 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RBP, align 8, !tbaa !2428
  store i64 %208, i64* %206, align 8, !tbaa !2428
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 5
  store i64 %212, i64* %PC
  store i64 6303832, i64* %RDI, align 8, !tbaa !2428
  %213 = load i64, i64* %RAX
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 2
  store i64 %215, i64* %PC
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %213, i64* %216, align 8, !tbaa !2428
  %217 = load i64, i64* %PC
  switch i64 %217, label %269 [
    i64 4195546, label %block_4004da
    i64 4195541, label %block_4004d5
  ]

block_4004d8:                                     ; preds = %block_4004c3, %block_4004d5, %block_4004a0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4004a0 ], [ %2, %block_4004c3 ], [ %2, %block_4004d5 ]
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 1
  store i64 %219, i64* %PC
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %221 = load i64, i64* %220, align 8, !tbaa !2428
  %222 = add i64 %221, 8
  %223 = inttoptr i64 %221 to i64*
  %224 = load i64, i64* %223
  store i64 %224, i64* %RBP, align 8, !tbaa !2428
  store i64 %222, i64* %220, align 8, !tbaa !2428
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 1
  store i64 %226, i64* %PC
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %229 = load i64, i64* %228, align 8, !tbaa !2428
  %230 = inttoptr i64 %229 to i64*
  %231 = load i64, i64* %230
  store i64 %231, i64* %227, align 8, !tbaa !2428
  %232 = add i64 %229, 8
  store i64 %232, i64* %228, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4004c3:                                     ; preds = %block_4004a0
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 5
  store i64 %234, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %235 = load i64, i64* %RAX
  %236 = load i64, i64* %RAX
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 3
  store i64 %238, i64* %PC
  %239 = and i64 %236, %235
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %240, align 1, !tbaa !2432
  %241 = trunc i64 %239 to i32
  %242 = and i32 %241, 255
  %243 = call i32 @llvm.ctpop.i32(i32 %242) #16
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = xor i8 %245, 1
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %246, i8* %247, align 1, !tbaa !2446
  %248 = icmp eq i64 %239, 0
  %249 = zext i1 %248 to i8
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %249, i8* %250, align 1, !tbaa !2448
  %251 = lshr i64 %239, 63
  %252 = trunc i64 %251 to i8
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %252, i8* %253, align 1, !tbaa !2449
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %254, align 1, !tbaa !2450
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %255, align 1, !tbaa !2447
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 13
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 2
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 2
  store i64 %261, i64* %PC
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %263 = load i8, i8* %262, align 1, !tbaa !2448
  store i8 %263, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %265 = icmp ne i8 %263, 0
  %266 = select i1 %265, i64 %257, i64 %259
  store i64 %266, i64* %264, align 8, !tbaa !2428
  %267 = load i8, i8* %BRANCH_TAKEN
  %268 = icmp eq i8 %267, 1
  br i1 %268, label %block_4004d8, label %block_4004cd

; <label>:269:                                    ; preds = %block_4004cd
  %270 = load i64, i64* %PC
  %271 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %270, %struct.Memory* %2)
  ret %struct.Memory* %271
}

; Function Attrs: noinline
define %struct.Memory* @sub_401b40_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401b40:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 5
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %ECX = bitcast %union.anon* %19 to i32*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 7
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %EDX = bitcast %union.anon* %22 to i32*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %RAX = bitcast %union.anon* %25 to i64*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 5
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RCX = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 7
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RDX = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 9
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RSI = bitcast %union.anon* %34 to i64*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 11
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %RDI = bitcast %union.anon* %37 to i64*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %39 = getelementptr inbounds %struct.GPR, %struct.GPR* %38, i32 0, i32 13
  %40 = getelementptr inbounds %struct.Reg, %struct.Reg* %39, i32 0, i32 0
  %RSP = bitcast %union.anon* %40 to i64*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %42 = getelementptr inbounds %struct.GPR, %struct.GPR* %41, i32 0, i32 15
  %43 = getelementptr inbounds %struct.Reg, %struct.Reg* %42, i32 0, i32 0
  %RBP = bitcast %union.anon* %43 to i64*
  %44 = load i64, i64* %RBP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 1
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = load i64, i64* %RSP
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC
  store i64 %51, i64* %RBP, align 8, !tbaa !2428
  %54 = load i64, i64* %RSP
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 7
  store i64 %56, i64* %PC
  %57 = sub i64 %54, 432
  store i64 %57, i64* %RSP, align 8, !tbaa !2428
  %58 = icmp ult i64 %54, 432
  %59 = zext i1 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %59, i8* %60, align 1, !tbaa !2432
  %61 = trunc i64 %57 to i32
  %62 = and i32 %61, 255
  %63 = call i32 @llvm.ctpop.i32(i32 %62) #16
  %64 = trunc i32 %63 to i8
  %65 = and i8 %64, 1
  %66 = xor i8 %65, 1
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %66, i8* %67, align 1, !tbaa !2446
  %68 = xor i64 432, %54
  %69 = xor i64 %68, %57
  %70 = lshr i64 %69, 4
  %71 = trunc i64 %70 to i8
  %72 = and i8 %71, 1
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %72, i8* %73, align 1, !tbaa !2447
  %74 = icmp eq i64 %57, 0
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %75, i8* %76, align 1, !tbaa !2448
  %77 = lshr i64 %57, 63
  %78 = trunc i64 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %78, i8* %79, align 1, !tbaa !2449
  %80 = lshr i64 %54, 63
  %81 = xor i64 %77, %80
  %82 = add nuw nsw i64 %81, %80
  %83 = icmp eq i64 %82, 2
  %84 = zext i1 %83 to i8
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %84, i8* %85, align 1, !tbaa !2450
  %86 = load i64, i64* %RBP
  %87 = sub i64 %86, 4
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 7
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %87 to i32*
  store i32 0, i32* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 420
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 10
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %92 to i32*
  store i32 0, i32* %95
  br label %block_401b5c

block_401bf5:                                     ; preds = %block_401be3
  %96 = load i64, i64* %PC
  %97 = sub i64 %96, 6101
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 5
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 5
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %97, i64* %106, align 8, !tbaa !2428
  %107 = load i64, i64* %PC
  %108 = call %struct.Memory* @ext_6040d8_random(%struct.State* %0, i64 %107, %struct.Memory* %MEMORY.2)
  %109 = load i64, i64* %RAX
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 6
  store i64 %111, i64* %PC
  %112 = and i64 255, %109
  store i64 %112, i64* %RAX, align 8, !tbaa !2428
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %113, align 1, !tbaa !2432
  %114 = trunc i64 %112 to i32
  %115 = and i32 %114, 255
  %116 = call i32 @llvm.ctpop.i32(i32 %115) #16
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  %119 = xor i8 %118, 1
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %119, i8* %120, align 1, !tbaa !2446
  %121 = icmp eq i64 %112, 0
  %122 = zext i1 %121 to i8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %122, i8* %123, align 1, !tbaa !2448
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %124, align 1, !tbaa !2449
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %125, align 1, !tbaa !2450
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %126, align 1, !tbaa !2447
  %127 = load i8, i8* %AL
  %128 = zext i8 %127 to i64
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 2
  store i64 %130, i64* %PC
  store i8 %127, i8* %CL, align 1, !tbaa !2451
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 429
  %133 = load i8, i8* %CL
  %134 = zext i8 %133 to i64
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 6
  store i64 %136, i64* %PC
  %137 = inttoptr i64 %132 to i8*
  store i8 %133, i8* %137
  %138 = load i64, i64* %PC
  %139 = sub i64 %138, 6120
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 5
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 5
  store i64 %143, i64* %PC
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %145 = load i64, i64* %144, align 8, !tbaa !2428
  %146 = add i64 %145, -8
  %147 = inttoptr i64 %146 to i64*
  store i64 %141, i64* %147
  store i64 %146, i64* %144, align 8, !tbaa !2428
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %139, i64* %148, align 8, !tbaa !2428
  %149 = load i64, i64* %PC
  %150 = call %struct.Memory* @ext_6040d8_random(%struct.State* %0, i64 %149, %struct.Memory* %108)
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 5
  store i64 %152, i64* %PC
  store i64 204, i64* %RDX, align 8, !tbaa !2428
  %153 = load i32, i32* %EDX
  %154 = zext i32 %153 to i64
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 2
  store i64 %156, i64* %PC
  %157 = and i64 %154, 4294967295
  store i64 %157, i64* %RSI, align 8, !tbaa !2428
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 2
  store i64 %159, i64* %PC
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %162 = load i64, i64* %161, align 8, !tbaa !2428
  %163 = ashr i64 %162, 63
  store i64 %163, i64* %160, align 8, !tbaa !2428
  %164 = load i64, i64* %RSI
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 3
  store i64 %166, i64* %PC
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %168 = load i64, i64* %167, align 8, !tbaa !2428
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %170 = load i64, i64* %169, align 8, !tbaa !2428
  %171 = sext i64 %164 to i128
  %172 = and i128 %171, -18446744073709551616
  %173 = zext i64 %170 to i128
  %174 = shl nuw i128 %173, 64
  %175 = zext i64 %168 to i128
  %176 = or i128 %174, %175
  %177 = zext i64 %164 to i128
  %178 = or i128 %172, %177
  %179 = sdiv i128 %176, %178
  %180 = trunc i128 %179 to i64
  %181 = and i128 %179, 18446744073709551615
  %182 = sext i64 %180 to i128
  %183 = and i128 %182, -18446744073709551616
  %184 = or i128 %183, %181
  %185 = icmp eq i128 %179, %184
  br i1 %185, label %190, label %186

; <label>:186:                                    ; preds = %block_401bf5
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %188 = load i64, i64* %187, align 8, !tbaa !2428
  %189 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %188, %struct.Memory* %150) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:190:                                    ; preds = %block_401bf5
  %191 = srem i128 %176, %178
  %192 = trunc i128 %191 to i64
  store i64 %180, i64* %167, align 8, !tbaa !2428
  store i64 %192, i64* %169, align 8, !tbaa !2428
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %193, align 1, !tbaa !2432
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %194, align 1, !tbaa !2446
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %195, align 1, !tbaa !2447
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %196, align 1, !tbaa !2448
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %197, align 1, !tbaa !2449
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %186, %190
  %199 = phi %struct.Memory* [ %189, %186 ], [ %150, %190 ]
  %200 = load i64, i64* %RBP
  %201 = sub i64 %200, 429
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 6
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i8*
  %205 = load i8, i8* %204
  store i8 %205, i8* %CL, align 1, !tbaa !2451
  %206 = load i64, i64* %RBP
  %207 = load i64, i64* %RDX
  %208 = add i64 %206, -416
  %209 = add i64 %208, %207
  %210 = load i8, i8* %CL
  %211 = zext i8 %210 to i64
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 7
  store i64 %213, i64* %PC
  %214 = inttoptr i64 %209 to i8*
  store i8 %210, i8* %214
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 424
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 6
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i32*
  %220 = load i32, i32* %219
  %221 = zext i32 %220 to i64
  store i64 %221, i64* %RAX, align 8, !tbaa !2428
  %222 = load i64, i64* %RAX
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 3
  store i64 %224, i64* %PC
  %225 = trunc i64 %222 to i32
  %226 = add i32 1, %225
  %227 = zext i32 %226 to i64
  store i64 %227, i64* %RAX, align 8, !tbaa !2428
  %228 = icmp ult i32 %226, %225
  %229 = icmp ult i32 %226, 1
  %230 = or i1 %228, %229
  %231 = zext i1 %230 to i8
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %231, i8* %232, align 1, !tbaa !2432
  %233 = and i32 %226, 255
  %234 = call i32 @llvm.ctpop.i32(i32 %233) #16
  %235 = trunc i32 %234 to i8
  %236 = and i8 %235, 1
  %237 = xor i8 %236, 1
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %237, i8* %238, align 1, !tbaa !2446
  %239 = xor i64 1, %222
  %240 = trunc i64 %239 to i32
  %241 = xor i32 %240, %226
  %242 = lshr i32 %241, 4
  %243 = trunc i32 %242 to i8
  %244 = and i8 %243, 1
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %244, i8* %245, align 1, !tbaa !2447
  %246 = icmp eq i32 %226, 0
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %247, i8* %248, align 1, !tbaa !2448
  %249 = lshr i32 %226, 31
  %250 = trunc i32 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %250, i8* %251, align 1, !tbaa !2449
  %252 = lshr i32 %225, 31
  %253 = xor i32 %249, %252
  %254 = add nuw nsw i32 %253, %249
  %255 = icmp eq i32 %254, 2
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %256, i8* %257, align 1, !tbaa !2450
  %258 = load i64, i64* %RBP
  %259 = sub i64 %258, 424
  %260 = load i32, i32* %EAX
  %261 = zext i32 %260 to i64
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 6
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %259 to i32*
  store i32 %260, i32* %264
  %265 = load i64, i64* %PC
  %266 = sub i64 %265, 82
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 5
  store i64 %268, i64* %PC
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %266, i64* %269, align 8, !tbaa !2428
  br label %block_401be3

block_401b5c:                                     ; preds = %block_401c3a, %block_401b40
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401b40 ], [ %343, %block_401c3a ]
  %270 = load i64, i64* %RBP
  %271 = sub i64 %270, 420
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 10
  store i64 %273, i64* %PC
  %274 = inttoptr i64 %271 to i32*
  %275 = load i32, i32* %274
  %276 = sub i32 %275, 150000
  %277 = icmp ult i32 %275, 150000
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %278, i8* %279, align 1, !tbaa !2432
  %280 = and i32 %276, 255
  %281 = call i32 @llvm.ctpop.i32(i32 %280) #16
  %282 = trunc i32 %281 to i8
  %283 = and i8 %282, 1
  %284 = xor i8 %283, 1
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %284, i8* %285, align 1, !tbaa !2446
  %286 = xor i32 %275, 150000
  %287 = xor i32 %286, %276
  %288 = lshr i32 %287, 4
  %289 = trunc i32 %288 to i8
  %290 = and i8 %289, 1
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %290, i8* %291, align 1, !tbaa !2447
  %292 = icmp eq i32 %276, 0
  %293 = zext i1 %292 to i8
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %293, i8* %294, align 1, !tbaa !2448
  %295 = lshr i32 %276, 31
  %296 = trunc i32 %295 to i8
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %296, i8* %297, align 1, !tbaa !2449
  %298 = lshr i32 %275, 31
  %299 = xor i32 %295, %298
  %300 = add nuw nsw i32 %299, %298
  %301 = icmp eq i32 %300, 2
  %302 = zext i1 %301 to i8
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %302, i8* %303, align 1, !tbaa !2450
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 251
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 6
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 6
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %311 = load i8, i8* %310, align 1, !tbaa !2449
  %312 = icmp ne i8 %311, 0
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %314 = load i8, i8* %313, align 1, !tbaa !2450
  %315 = icmp ne i8 %314, 0
  %316 = xor i1 %312, %315
  %317 = xor i1 %316, true
  %318 = zext i1 %317 to i8
  store i8 %318, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %320 = select i1 %316, i64 %307, i64 %305
  store i64 %320, i64* %319, align 8, !tbaa !2428
  %321 = load i8, i8* %BRANCH_TAKEN
  %322 = icmp eq i8 %321, 1
  br i1 %322, label %block_401c61, label %block_401b6c

block_401c3a:                                     ; preds = %block_401be3
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 416
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 7
  store i64 %326, i64* %PC
  store i64 %324, i64* %RSI, align 8, !tbaa !2428
  %327 = load i64, i64* %RBP
  %328 = sub i64 %327, 208
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 7
  store i64 %330, i64* %PC
  store i64 %328, i64* %RDI, align 8, !tbaa !2428
  %331 = load i64, i64* %PC
  %332 = sub i64 %331, 5928
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 5
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 5
  store i64 %336, i64* %PC
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %338 = load i64, i64* %337, align 8, !tbaa !2428
  %339 = add i64 %338, -8
  %340 = inttoptr i64 %339 to i64*
  store i64 %334, i64* %340
  store i64 %339, i64* %337, align 8, !tbaa !2428
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %332, i64* %341, align 8, !tbaa !2428
  %342 = load i64, i64* %PC
  %343 = call %struct.Memory* @sub_400520_rsdec_204_renamed_(%struct.State* %0, i64 %342, %struct.Memory* %MEMORY.2)
  %344 = load i64, i64* %RBP
  %345 = sub i64 %344, 420
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 6
  store i64 %347, i64* %PC
  %348 = inttoptr i64 %345 to i32*
  %349 = load i32, i32* %348
  %350 = zext i32 %349 to i64
  store i64 %350, i64* %RAX, align 8, !tbaa !2428
  %351 = load i64, i64* %RAX
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 3
  store i64 %353, i64* %PC
  %354 = trunc i64 %351 to i32
  %355 = add i32 1, %354
  %356 = zext i32 %355 to i64
  store i64 %356, i64* %RAX, align 8, !tbaa !2428
  %357 = icmp ult i32 %355, %354
  %358 = icmp ult i32 %355, 1
  %359 = or i1 %357, %358
  %360 = zext i1 %359 to i8
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %360, i8* %361, align 1, !tbaa !2432
  %362 = and i32 %355, 255
  %363 = call i32 @llvm.ctpop.i32(i32 %362) #16
  %364 = trunc i32 %363 to i8
  %365 = and i8 %364, 1
  %366 = xor i8 %365, 1
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %366, i8* %367, align 1, !tbaa !2446
  %368 = xor i64 1, %351
  %369 = trunc i64 %368 to i32
  %370 = xor i32 %369, %355
  %371 = lshr i32 %370, 4
  %372 = trunc i32 %371 to i8
  %373 = and i8 %372, 1
  %374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %373, i8* %374, align 1, !tbaa !2447
  %375 = icmp eq i32 %355, 0
  %376 = zext i1 %375 to i8
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %376, i8* %377, align 1, !tbaa !2448
  %378 = lshr i32 %355, 31
  %379 = trunc i32 %378 to i8
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %379, i8* %380, align 1, !tbaa !2449
  %381 = lshr i32 %354, 31
  %382 = xor i32 %378, %381
  %383 = add nuw nsw i32 %382, %378
  %384 = icmp eq i32 %383, 2
  %385 = zext i1 %384 to i8
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %385, i8* %386, align 1, !tbaa !2450
  %387 = load i64, i64* %RBP
  %388 = sub i64 %387, 420
  %389 = load i32, i32* %EAX
  %390 = zext i32 %389 to i64
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 6
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %388 to i32*
  store i32 %389, i32* %393
  %394 = load i64, i64* %PC
  %395 = sub i64 %394, 256
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 5
  store i64 %397, i64* %PC
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %395, i64* %398, align 8, !tbaa !2428
  br label %block_401b5c

block_401b76:                                     ; preds = %block_401b6c, %block_401b86
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_401b6c ], [ %533, %block_401b86 ]
  %399 = load i64, i64* %RBP
  %400 = sub i64 %399, 424
  %401 = load i64, i64* %PC
  %402 = add i64 %401, 10
  store i64 %402, i64* %PC
  %403 = inttoptr i64 %400 to i32*
  %404 = load i32, i32* %403
  %405 = sub i32 %404, 188
  %406 = icmp ult i32 %404, 188
  %407 = zext i1 %406 to i8
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %407, i8* %408, align 1, !tbaa !2432
  %409 = and i32 %405, 255
  %410 = call i32 @llvm.ctpop.i32(i32 %409) #16
  %411 = trunc i32 %410 to i8
  %412 = and i8 %411, 1
  %413 = xor i8 %412, 1
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %413, i8* %414, align 1, !tbaa !2446
  %415 = xor i32 %404, 188
  %416 = xor i32 %415, %405
  %417 = lshr i32 %416, 4
  %418 = trunc i32 %417 to i8
  %419 = and i8 %418, 1
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %419, i8* %420, align 1, !tbaa !2447
  %421 = icmp eq i32 %405, 0
  %422 = zext i1 %421 to i8
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %422, i8* %423, align 1, !tbaa !2448
  %424 = lshr i32 %405, 31
  %425 = trunc i32 %424 to i8
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %425, i8* %426, align 1, !tbaa !2449
  %427 = lshr i32 %404, 31
  %428 = xor i32 %424, %427
  %429 = add nuw nsw i32 %428, %427
  %430 = icmp eq i32 %429, 2
  %431 = zext i1 %430 to i8
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %431, i8* %432, align 1, !tbaa !2450
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 53
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 6
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 6
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %440 = load i8, i8* %439, align 1, !tbaa !2449
  %441 = icmp ne i8 %440, 0
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %443 = load i8, i8* %442, align 1, !tbaa !2450
  %444 = icmp ne i8 %443, 0
  %445 = xor i1 %441, %444
  %446 = xor i1 %445, true
  %447 = zext i1 %446 to i8
  store i8 %447, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %449 = select i1 %445, i64 %436, i64 %434
  store i64 %449, i64* %448, align 8, !tbaa !2428
  %450 = load i8, i8* %BRANCH_TAKEN
  %451 = icmp eq i8 %450, 1
  br i1 %451, label %block_401bb5, label %block_401b86

block_401bb5:                                     ; preds = %block_401b76
  %452 = load i64, i64* %RBP
  %453 = sub i64 %452, 208
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 7
  store i64 %455, i64* %PC
  store i64 %453, i64* %RSI, align 8, !tbaa !2428
  %456 = load i64, i64* %RBP
  %457 = sub i64 %456, 416
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 7
  store i64 %459, i64* %PC
  store i64 %457, i64* %RDI, align 8, !tbaa !2428
  %460 = load i64, i64* %PC
  %461 = sub i64 %460, 835
  %462 = load i64, i64* %PC
  %463 = add i64 %462, 5
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 5
  store i64 %465, i64* %PC
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %467 = load i64, i64* %466, align 8, !tbaa !2428
  %468 = add i64 %467, -8
  %469 = inttoptr i64 %468 to i64*
  store i64 %463, i64* %469
  store i64 %468, i64* %466, align 8, !tbaa !2428
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %461, i64* %470, align 8, !tbaa !2428
  %471 = load i64, i64* %PC
  %472 = call %struct.Memory* @sub_401880_rsenc_204_renamed_(%struct.State* %0, i64 %471, %struct.Memory* %MEMORY.1)
  %473 = load i64, i64* %PC
  %474 = sub i64 %473, 6056
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 5
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 5
  store i64 %478, i64* %PC
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %480 = load i64, i64* %479, align 8, !tbaa !2428
  %481 = add i64 %480, -8
  %482 = inttoptr i64 %481 to i64*
  store i64 %476, i64* %482
  store i64 %481, i64* %479, align 8, !tbaa !2428
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %474, i64* %483, align 8, !tbaa !2428
  %484 = load i64, i64* %PC
  %485 = call %struct.Memory* @ext_6040d8_random(%struct.State* %0, i64 %484, %struct.Memory* %472)
  %486 = load i64, i64* %RAX
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 4
  store i64 %488, i64* %PC
  %489 = and i64 127, %486
  store i64 %489, i64* %RAX, align 8, !tbaa !2428
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %490, align 1, !tbaa !2432
  %491 = trunc i64 %489 to i32
  %492 = and i32 %491, 255
  %493 = call i32 @llvm.ctpop.i32(i32 %492) #16
  %494 = trunc i32 %493 to i8
  %495 = and i8 %494, 1
  %496 = xor i8 %495, 1
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %496, i8* %497, align 1, !tbaa !2446
  %498 = icmp eq i64 %489, 0
  %499 = zext i1 %498 to i8
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %499, i8* %500, align 1, !tbaa !2448
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %501, align 1, !tbaa !2449
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %502, align 1, !tbaa !2450
  %503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %503, align 1, !tbaa !2447
  %504 = load i32, i32* %EAX
  %505 = zext i32 %504 to i64
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 2
  store i64 %507, i64* %PC
  %508 = and i64 %505, 4294967295
  store i64 %508, i64* %RCX, align 8, !tbaa !2428
  %509 = load i64, i64* %RBP
  %510 = sub i64 %509, 428
  %511 = load i32, i32* %ECX
  %512 = zext i32 %511 to i64
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 6
  store i64 %514, i64* %PC
  %515 = inttoptr i64 %510 to i32*
  store i32 %511, i32* %515
  %516 = load i64, i64* %RBP
  %517 = sub i64 %516, 424
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 10
  store i64 %519, i64* %PC
  %520 = inttoptr i64 %517 to i32*
  store i32 0, i32* %520
  br label %block_401be3

block_401b86:                                     ; preds = %block_401b76
  %521 = load i64, i64* %PC
  %522 = sub i64 %521, 5990
  %523 = load i64, i64* %PC
  %524 = add i64 %523, 5
  %525 = load i64, i64* %PC
  %526 = add i64 %525, 5
  store i64 %526, i64* %PC
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %528 = load i64, i64* %527, align 8, !tbaa !2428
  %529 = add i64 %528, -8
  %530 = inttoptr i64 %529 to i64*
  store i64 %524, i64* %530
  store i64 %529, i64* %527, align 8, !tbaa !2428
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %522, i64* %531, align 8, !tbaa !2428
  %532 = load i64, i64* %PC
  %533 = call %struct.Memory* @ext_6040d8_random(%struct.State* %0, i64 %532, %struct.Memory* %MEMORY.1)
  %534 = load i64, i64* %RAX
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 6
  store i64 %536, i64* %PC
  %537 = and i64 255, %534
  store i64 %537, i64* %RAX, align 8, !tbaa !2428
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %538, align 1, !tbaa !2432
  %539 = trunc i64 %537 to i32
  %540 = and i32 %539, 255
  %541 = call i32 @llvm.ctpop.i32(i32 %540) #16
  %542 = trunc i32 %541 to i8
  %543 = and i8 %542, 1
  %544 = xor i8 %543, 1
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %544, i8* %545, align 1, !tbaa !2446
  %546 = icmp eq i64 %537, 0
  %547 = zext i1 %546 to i8
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %547, i8* %548, align 1, !tbaa !2448
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %549, align 1, !tbaa !2449
  %550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %550, align 1, !tbaa !2450
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %551, align 1, !tbaa !2447
  %552 = load i8, i8* %AL
  %553 = zext i8 %552 to i64
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 2
  store i64 %555, i64* %PC
  store i8 %552, i8* %CL, align 1, !tbaa !2451
  %556 = load i64, i64* %RBP
  %557 = sub i64 %556, 424
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 7
  store i64 %559, i64* %PC
  %560 = inttoptr i64 %557 to i32*
  %561 = load i32, i32* %560
  %562 = sext i32 %561 to i64
  store i64 %562, i64* %RAX, align 8, !tbaa !2428
  %563 = load i64, i64* %RBP
  %564 = load i64, i64* %RAX
  %565 = add i64 %563, -208
  %566 = add i64 %565, %564
  %567 = load i8, i8* %CL
  %568 = zext i8 %567 to i64
  %569 = load i64, i64* %PC
  %570 = add i64 %569, 7
  store i64 %570, i64* %PC
  %571 = inttoptr i64 %566 to i8*
  store i8 %567, i8* %571
  %572 = load i64, i64* %RBP
  %573 = sub i64 %572, 424
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 6
  store i64 %575, i64* %PC
  %576 = inttoptr i64 %573 to i32*
  %577 = load i32, i32* %576
  %578 = zext i32 %577 to i64
  store i64 %578, i64* %RAX, align 8, !tbaa !2428
  %579 = load i64, i64* %RAX
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 3
  store i64 %581, i64* %PC
  %582 = trunc i64 %579 to i32
  %583 = add i32 1, %582
  %584 = zext i32 %583 to i64
  store i64 %584, i64* %RAX, align 8, !tbaa !2428
  %585 = icmp ult i32 %583, %582
  %586 = icmp ult i32 %583, 1
  %587 = or i1 %585, %586
  %588 = zext i1 %587 to i8
  %589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %588, i8* %589, align 1, !tbaa !2432
  %590 = and i32 %583, 255
  %591 = call i32 @llvm.ctpop.i32(i32 %590) #16
  %592 = trunc i32 %591 to i8
  %593 = and i8 %592, 1
  %594 = xor i8 %593, 1
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %594, i8* %595, align 1, !tbaa !2446
  %596 = xor i64 1, %579
  %597 = trunc i64 %596 to i32
  %598 = xor i32 %597, %583
  %599 = lshr i32 %598, 4
  %600 = trunc i32 %599 to i8
  %601 = and i8 %600, 1
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %601, i8* %602, align 1, !tbaa !2447
  %603 = icmp eq i32 %583, 0
  %604 = zext i1 %603 to i8
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %604, i8* %605, align 1, !tbaa !2448
  %606 = lshr i32 %583, 31
  %607 = trunc i32 %606 to i8
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %607, i8* %608, align 1, !tbaa !2449
  %609 = lshr i32 %582, 31
  %610 = xor i32 %606, %609
  %611 = add nuw nsw i32 %610, %606
  %612 = icmp eq i32 %611, 2
  %613 = zext i1 %612 to i8
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %613, i8* %614, align 1, !tbaa !2450
  %615 = load i64, i64* %RBP
  %616 = sub i64 %615, 424
  %617 = load i32, i32* %EAX
  %618 = zext i32 %617 to i64
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 6
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %616 to i32*
  store i32 %617, i32* %621
  %622 = load i64, i64* %PC
  %623 = sub i64 %622, 58
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 5
  store i64 %625, i64* %PC
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %623, i64* %626, align 8, !tbaa !2428
  br label %block_401b76

block_401be3:                                     ; preds = %block_401bb5, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %MEMORY.2 = phi %struct.Memory* [ %485, %block_401bb5 ], [ %199, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %627 = load i64, i64* %RBP
  %628 = sub i64 %627, 424
  %629 = load i64, i64* %PC
  %630 = add i64 %629, 6
  store i64 %630, i64* %PC
  %631 = inttoptr i64 %628 to i32*
  %632 = load i32, i32* %631
  %633 = zext i32 %632 to i64
  store i64 %633, i64* %RAX, align 8, !tbaa !2428
  %634 = load i32, i32* %EAX
  %635 = zext i32 %634 to i64
  %636 = load i64, i64* %RBP
  %637 = sub i64 %636, 428
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 6
  store i64 %639, i64* %PC
  %640 = inttoptr i64 %637 to i32*
  %641 = load i32, i32* %640
  %642 = sub i32 %634, %641
  %643 = icmp ult i32 %634, %641
  %644 = zext i1 %643 to i8
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %644, i8* %645, align 1, !tbaa !2432
  %646 = and i32 %642, 255
  %647 = call i32 @llvm.ctpop.i32(i32 %646) #16
  %648 = trunc i32 %647 to i8
  %649 = and i8 %648, 1
  %650 = xor i8 %649, 1
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %650, i8* %651, align 1, !tbaa !2446
  %652 = xor i32 %641, %634
  %653 = xor i32 %652, %642
  %654 = lshr i32 %653, 4
  %655 = trunc i32 %654 to i8
  %656 = and i8 %655, 1
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %656, i8* %657, align 1, !tbaa !2447
  %658 = icmp eq i32 %642, 0
  %659 = zext i1 %658 to i8
  %660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %659, i8* %660, align 1, !tbaa !2448
  %661 = lshr i32 %642, 31
  %662 = trunc i32 %661 to i8
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %662, i8* %663, align 1, !tbaa !2449
  %664 = lshr i32 %634, 31
  %665 = lshr i32 %641, 31
  %666 = xor i32 %665, %664
  %667 = xor i32 %661, %664
  %668 = add nuw nsw i32 %667, %666
  %669 = icmp eq i32 %668, 2
  %670 = zext i1 %669 to i8
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %670, i8* %671, align 1, !tbaa !2450
  %672 = load i64, i64* %PC
  %673 = add i64 %672, 75
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 6
  %676 = load i64, i64* %PC
  %677 = add i64 %676, 6
  store i64 %677, i64* %PC
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %679 = load i8, i8* %678, align 1, !tbaa !2449
  %680 = icmp ne i8 %679, 0
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %682 = load i8, i8* %681, align 1, !tbaa !2450
  %683 = icmp ne i8 %682, 0
  %684 = xor i1 %680, %683
  %685 = xor i1 %684, true
  %686 = zext i1 %685 to i8
  store i8 %686, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %688 = select i1 %684, i64 %675, i64 %673
  store i64 %688, i64* %687, align 8, !tbaa !2428
  %689 = load i8, i8* %BRANCH_TAKEN
  %690 = icmp eq i8 %689, 1
  br i1 %690, label %block_401c3a, label %block_401bf5

block_401c61:                                     ; preds = %block_401b5c
  %691 = load i64, i64* %RAX
  %692 = load i32, i32* %EAX
  %693 = zext i32 %692 to i64
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 2
  store i64 %695, i64* %PC
  %696 = xor i64 %693, %691
  %697 = trunc i64 %696 to i32
  %698 = and i64 %696, 4294967295
  store i64 %698, i64* %RAX, align 8, !tbaa !2428
  %699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %699, align 1, !tbaa !2432
  %700 = and i32 %697, 255
  %701 = call i32 @llvm.ctpop.i32(i32 %700) #16
  %702 = trunc i32 %701 to i8
  %703 = and i8 %702, 1
  %704 = xor i8 %703, 1
  %705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %704, i8* %705, align 1, !tbaa !2446
  %706 = icmp eq i32 %697, 0
  %707 = zext i1 %706 to i8
  %708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %707, i8* %708, align 1, !tbaa !2448
  %709 = lshr i32 %697, 31
  %710 = trunc i32 %709 to i8
  %711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %710, i8* %711, align 1, !tbaa !2449
  %712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %712, align 1, !tbaa !2450
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %713, align 1, !tbaa !2447
  %714 = load i64, i64* %RSP
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 7
  store i64 %716, i64* %PC
  %717 = add i64 432, %714
  store i64 %717, i64* %RSP, align 8, !tbaa !2428
  %718 = icmp ult i64 %717, %714
  %719 = icmp ult i64 %717, 432
  %720 = or i1 %718, %719
  %721 = zext i1 %720 to i8
  %722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %721, i8* %722, align 1, !tbaa !2432
  %723 = trunc i64 %717 to i32
  %724 = and i32 %723, 255
  %725 = call i32 @llvm.ctpop.i32(i32 %724) #16
  %726 = trunc i32 %725 to i8
  %727 = and i8 %726, 1
  %728 = xor i8 %727, 1
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %728, i8* %729, align 1, !tbaa !2446
  %730 = xor i64 432, %714
  %731 = xor i64 %730, %717
  %732 = lshr i64 %731, 4
  %733 = trunc i64 %732 to i8
  %734 = and i8 %733, 1
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %734, i8* %735, align 1, !tbaa !2447
  %736 = icmp eq i64 %717, 0
  %737 = zext i1 %736 to i8
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %737, i8* %738, align 1, !tbaa !2448
  %739 = lshr i64 %717, 63
  %740 = trunc i64 %739 to i8
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %740, i8* %741, align 1, !tbaa !2449
  %742 = lshr i64 %714, 63
  %743 = xor i64 %739, %742
  %744 = add nuw nsw i64 %743, %739
  %745 = icmp eq i64 %744, 2
  %746 = zext i1 %745 to i8
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %746, i8* %747, align 1, !tbaa !2450
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 1
  store i64 %749, i64* %PC
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %751 = load i64, i64* %750, align 8, !tbaa !2428
  %752 = add i64 %751, 8
  %753 = inttoptr i64 %751 to i64*
  %754 = load i64, i64* %753
  store i64 %754, i64* %RBP, align 8, !tbaa !2428
  store i64 %752, i64* %750, align 8, !tbaa !2428
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 1
  store i64 %756, i64* %PC
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %759 = load i64, i64* %758, align 8, !tbaa !2428
  %760 = inttoptr i64 %759 to i64*
  %761 = load i64, i64* %760
  store i64 %761, i64* %757, align 8, !tbaa !2428
  %762 = add i64 %759, 8
  store i64 %762, i64* %758, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401b6c:                                     ; preds = %block_401b5c
  %763 = load i64, i64* %RBP
  %764 = sub i64 %763, 424
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 10
  store i64 %766, i64* %PC
  %767 = inttoptr i64 %764 to i32*
  store i32 0, i32* %767
  br label %block_401b76
}

; Function Attrs: noinline
define %struct.Memory* @sub_401880_rsenc_204(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401880:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 7
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 5
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %ECX = bitcast %union.anon* %19 to i32*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 7
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %EDX = bitcast %union.anon* %22 to i32*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 9
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %ESI = bitcast %union.anon* %25 to i32*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 1
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RAX = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 5
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RCX = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 7
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RDX = bitcast %union.anon* %34 to i64*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 9
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %RSI = bitcast %union.anon* %37 to i64*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %39 = getelementptr inbounds %struct.GPR, %struct.GPR* %38, i32 0, i32 11
  %40 = getelementptr inbounds %struct.Reg, %struct.Reg* %39, i32 0, i32 0
  %RDI = bitcast %union.anon* %40 to i64*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %42 = getelementptr inbounds %struct.GPR, %struct.GPR* %41, i32 0, i32 13
  %43 = getelementptr inbounds %struct.Reg, %struct.Reg* %42, i32 0, i32 0
  %RSP = bitcast %union.anon* %43 to i64*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %45 = getelementptr inbounds %struct.GPR, %struct.GPR* %44, i32 0, i32 15
  %46 = getelementptr inbounds %struct.Reg, %struct.Reg* %45, i32 0, i32 0
  %RBP = bitcast %union.anon* %46 to i64*
  %47 = load i64, i64* %RBP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 1
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %51 = load i64, i64* %50, align 8, !tbaa !2428
  %52 = add i64 %51, -8
  %53 = inttoptr i64 %52 to i64*
  store i64 %47, i64* %53
  store i64 %52, i64* %50, align 8, !tbaa !2428
  %54 = load i64, i64* %RSP
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 3
  store i64 %56, i64* %PC
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  %57 = load i64, i64* %RSP
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC
  %60 = sub i64 %57, 32
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  %61 = icmp ult i64 %57, 32
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %62, i8* %63, align 1, !tbaa !2432
  %64 = trunc i64 %60 to i32
  %65 = and i32 %64, 255
  %66 = call i32 @llvm.ctpop.i32(i32 %65) #16
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 1
  %69 = xor i8 %68, 1
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %69, i8* %70, align 1, !tbaa !2446
  %71 = xor i64 32, %57
  %72 = xor i64 %71, %60
  %73 = lshr i64 %72, 4
  %74 = trunc i64 %73 to i8
  %75 = and i8 %74, 1
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %75, i8* %76, align 1, !tbaa !2447
  %77 = icmp eq i64 %60, 0
  %78 = zext i1 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %78, i8* %79, align 1, !tbaa !2448
  %80 = lshr i64 %60, 63
  %81 = trunc i64 %80 to i8
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %81, i8* %82, align 1, !tbaa !2449
  %83 = lshr i64 %57, 63
  %84 = xor i64 %80, %83
  %85 = add nuw nsw i64 %84, %83
  %86 = icmp eq i64 %85, 2
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %87, i8* %88, align 1, !tbaa !2450
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 8
  %91 = load i64, i64* %RDI
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 16
  %97 = load i64, i64* %RSI
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 8
  store i64 %102, i64* %PC
  %103 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 16) to i32*)
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %104, align 1, !tbaa !2432
  %105 = and i32 %103, 255
  %106 = call i32 @llvm.ctpop.i32(i32 %105) #16
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %109, i8* %110, align 1, !tbaa !2446
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %111, align 1, !tbaa !2447
  %112 = icmp eq i32 %103, 0
  %113 = zext i1 %112 to i8
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %113, i8* %114, align 1, !tbaa !2448
  %115 = lshr i32 %103, 31
  %116 = trunc i32 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %116, i8* %117, align 1, !tbaa !2449
  %118 = lshr i32 %103, 31
  %119 = xor i32 %115, %118
  %120 = add nuw nsw i32 %119, %118
  %121 = icmp eq i32 %120, 2
  %122 = zext i1 %121 to i8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %122, i8* %123, align 1, !tbaa !2450
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 27
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 6
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 6
  store i64 %129, i64* %PC
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %131 = load i8, i8* %130, align 1, !tbaa !2448
  %132 = icmp eq i8 %131, 0
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %135 = select i1 %132, i64 %125, i64 %127
  store i64 %135, i64* %134, align 8, !tbaa !2428
  %136 = load i8, i8* %BRANCH_TAKEN
  %137 = icmp eq i8 %136, 1
  br i1 %137, label %block_4018b3, label %block_40189e

block_40189e:                                     ; preds = %block_401880
  %138 = load i64, i64* %PC
  %139 = sub i64 %138, 4622
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 5
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 5
  store i64 %143, i64* %PC
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %145 = load i64, i64* %144, align 8, !tbaa !2428
  %146 = add i64 %145, -8
  %147 = inttoptr i64 %146 to i64*
  store i64 %141, i64* %147
  store i64 %146, i64* %144, align 8, !tbaa !2428
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %139, i64* %148, align 8, !tbaa !2428
  %149 = load i64, i64* %PC
  %150 = call %struct.Memory* @sub_400690_generate_gf_renamed_(%struct.State* %0, i64 %149, %struct.Memory* %2)
  %151 = load i64, i64* %PC
  %152 = sub i64 %151, 4291
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 5
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 5
  store i64 %156, i64* %PC
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %158 = load i64, i64* %157, align 8, !tbaa !2428
  %159 = add i64 %158, -8
  %160 = inttoptr i64 %159 to i64*
  store i64 %154, i64* %160
  store i64 %159, i64* %157, align 8, !tbaa !2428
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %152, i64* %161, align 8, !tbaa !2428
  %162 = load i64, i64* %PC
  %163 = call %struct.Memory* @sub_4007e0_gen_poly_renamed_(%struct.State* %0, i64 %162, %struct.Memory* %150)
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 11
  store i64 %165, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 16) to i32*)
  br label %block_4018b3

block_40199b:                                     ; preds = %block_401963
  %166 = load i64, i64* %RSP
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 4
  store i64 %168, i64* %PC
  %169 = add i64 32, %166
  store i64 %169, i64* %RSP, align 8, !tbaa !2428
  %170 = icmp ult i64 %169, %166
  %171 = icmp ult i64 %169, 32
  %172 = or i1 %170, %171
  %173 = zext i1 %172 to i8
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %173, i8* %174, align 1, !tbaa !2432
  %175 = trunc i64 %169 to i32
  %176 = and i32 %175, 255
  %177 = call i32 @llvm.ctpop.i32(i32 %176) #16
  %178 = trunc i32 %177 to i8
  %179 = and i8 %178, 1
  %180 = xor i8 %179, 1
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %180, i8* %181, align 1, !tbaa !2446
  %182 = xor i64 32, %166
  %183 = xor i64 %182, %169
  %184 = lshr i64 %183, 4
  %185 = trunc i64 %184 to i8
  %186 = and i8 %185, 1
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %186, i8* %187, align 1, !tbaa !2447
  %188 = icmp eq i64 %169, 0
  %189 = zext i1 %188 to i8
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %189, i8* %190, align 1, !tbaa !2448
  %191 = lshr i64 %169, 63
  %192 = trunc i64 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %192, i8* %193, align 1, !tbaa !2449
  %194 = lshr i64 %166, 63
  %195 = xor i64 %191, %194
  %196 = add nuw nsw i64 %195, %191
  %197 = icmp eq i64 %196, 2
  %198 = zext i1 %197 to i8
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %198, i8* %199, align 1, !tbaa !2450
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 1
  store i64 %201, i64* %PC
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %203 = load i64, i64* %202, align 8, !tbaa !2428
  %204 = add i64 %203, 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205
  store i64 %206, i64* %RBP, align 8, !tbaa !2428
  store i64 %204, i64* %202, align 8, !tbaa !2428
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 1
  store i64 %208, i64* %PC
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %211 = load i64, i64* %210, align 8, !tbaa !2428
  %212 = inttoptr i64 %211 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %209, align 8, !tbaa !2428
  %214 = add i64 %211, 8
  store i64 %214, i64* %210, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.3

block_4018ba:                                     ; preds = %block_4018c4, %block_4018b3
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_4018b3 ], [ %MEMORY.0, %block_4018c4 ]
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 20
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i32*
  %220 = load i32, i32* %219
  %221 = sub i32 %220, 51
  %222 = icmp ult i32 %220, 51
  %223 = zext i1 %222 to i8
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %223, i8* %224, align 1, !tbaa !2432
  %225 = and i32 %221, 255
  %226 = call i32 @llvm.ctpop.i32(i32 %225) #16
  %227 = trunc i32 %226 to i8
  %228 = and i8 %227, 1
  %229 = xor i8 %228, 1
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %229, i8* %230, align 1, !tbaa !2446
  %231 = xor i32 %220, 51
  %232 = xor i32 %231, %221
  %233 = lshr i32 %232, 4
  %234 = trunc i32 %233 to i8
  %235 = and i8 %234, 1
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %235, i8* %236, align 1, !tbaa !2447
  %237 = icmp eq i32 %221, 0
  %238 = zext i1 %237 to i8
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %238, i8* %239, align 1, !tbaa !2448
  %240 = lshr i32 %221, 31
  %241 = trunc i32 %240 to i8
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %241, i8* %242, align 1, !tbaa !2449
  %243 = lshr i32 %220, 31
  %244 = xor i32 %240, %243
  %245 = add nuw nsw i32 %244, %243
  %246 = icmp eq i32 %245, 2
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %247, i8* %248, align 1, !tbaa !2450
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 35
  %251 = load i64, i64* %PC
  %252 = add i64 %251, 6
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 6
  store i64 %254, i64* %PC
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %256 = load i8, i8* %255, align 1, !tbaa !2449
  %257 = icmp ne i8 %256, 0
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %259 = load i8, i8* %258, align 1, !tbaa !2450
  %260 = icmp ne i8 %259, 0
  %261 = xor i1 %257, %260
  %262 = xor i1 %261, true
  %263 = zext i1 %262 to i8
  store i8 %263, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %265 = select i1 %261, i64 %252, i64 %250
  store i64 %265, i64* %264, align 8, !tbaa !2428
  %266 = load i8, i8* %BRANCH_TAKEN
  %267 = icmp eq i8 %266, 1
  %268 = load i64, i64* %RBP
  %269 = sub i64 %268, 20
  %270 = load i64, i64* %PC
  br i1 %267, label %block_4018e1, label %block_4018c4

block_401938:                                     ; preds = %block_40192b
  %271 = sub i64 %693, 16
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 4
  store i64 %273, i64* %PC
  %274 = inttoptr i64 %271 to i64*
  %275 = load i64, i64* %274
  store i64 %275, i64* %RAX, align 8, !tbaa !2428
  %276 = load i64, i64* %RBP
  %277 = sub i64 %276, 20
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 4
  store i64 %279, i64* %PC
  %280 = inttoptr i64 %277 to i32*
  %281 = load i32, i32* %280
  %282 = sext i32 %281 to i64
  store i64 %282, i64* %RCX, align 8, !tbaa !2428
  %283 = load i64, i64* %RAX
  %284 = load i64, i64* %RCX
  %285 = add i64 %284, %283
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 3
  store i64 %287, i64* %PC
  %288 = inttoptr i64 %285 to i8*
  %289 = load i8, i8* %288
  store i8 %289, i8* %DL, align 1, !tbaa !2451
  %290 = load i64, i64* %RBP
  %291 = sub i64 %290, 8
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 4
  store i64 %293, i64* %PC
  %294 = inttoptr i64 %291 to i64*
  %295 = load i64, i64* %294
  store i64 %295, i64* %RAX, align 8, !tbaa !2428
  %296 = load i64, i64* %RBP
  %297 = sub i64 %296, 20
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 4
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %297 to i32*
  %301 = load i32, i32* %300
  %302 = sext i32 %301 to i64
  store i64 %302, i64* %RCX, align 8, !tbaa !2428
  %303 = load i64, i64* %RAX
  %304 = load i64, i64* %RCX
  %305 = add i64 %304, %303
  %306 = load i8, i8* %DL
  %307 = zext i8 %306 to i64
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 3
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %305 to i8*
  store i8 %306, i8* %310
  %311 = load i64, i64* %RBP
  %312 = sub i64 %311, 20
  %313 = load i64, i64* %PC
  %314 = add i64 %313, 3
  store i64 %314, i64* %PC
  %315 = inttoptr i64 %312 to i32*
  %316 = load i32, i32* %315
  %317 = zext i32 %316 to i64
  store i64 %317, i64* %RAX, align 8, !tbaa !2428
  %318 = load i64, i64* %RAX
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 3
  store i64 %320, i64* %PC
  %321 = trunc i64 %318 to i32
  %322 = add i32 1, %321
  %323 = zext i32 %322 to i64
  store i64 %323, i64* %RAX, align 8, !tbaa !2428
  %324 = icmp ult i32 %322, %321
  %325 = icmp ult i32 %322, 1
  %326 = or i1 %324, %325
  %327 = zext i1 %326 to i8
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %327, i8* %328, align 1, !tbaa !2432
  %329 = and i32 %322, 255
  %330 = call i32 @llvm.ctpop.i32(i32 %329) #16
  %331 = trunc i32 %330 to i8
  %332 = and i8 %331, 1
  %333 = xor i8 %332, 1
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %333, i8* %334, align 1, !tbaa !2446
  %335 = xor i64 1, %318
  %336 = trunc i64 %335 to i32
  %337 = xor i32 %336, %322
  %338 = lshr i32 %337, 4
  %339 = trunc i32 %338 to i8
  %340 = and i8 %339, 1
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %340, i8* %341, align 1, !tbaa !2447
  %342 = icmp eq i32 %322, 0
  %343 = zext i1 %342 to i8
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %343, i8* %344, align 1, !tbaa !2448
  %345 = lshr i32 %322, 31
  %346 = trunc i32 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %346, i8* %347, align 1, !tbaa !2449
  %348 = lshr i32 %321, 31
  %349 = xor i32 %345, %348
  %350 = add nuw nsw i32 %349, %345
  %351 = icmp eq i32 %350, 2
  %352 = zext i1 %351 to i8
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %352, i8* %353, align 1, !tbaa !2450
  %354 = load i64, i64* %RBP
  %355 = sub i64 %354, 20
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 3
  store i64 %359, i64* %PC
  %360 = inttoptr i64 %355 to i32*
  store i32 %356, i32* %360
  %361 = load i64, i64* %PC
  %362 = sub i64 %361, 44
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 5
  store i64 %364, i64* %PC
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %362, i64* %365, align 8, !tbaa !2428
  br label %block_40192b

block_4018f5:                                     ; preds = %block_4018e8
  %366 = load i64, i64* %RBP
  %367 = sub i64 %366, 16
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 4
  store i64 %369, i64* %PC
  %370 = inttoptr i64 %367 to i64*
  %371 = load i64, i64* %370
  store i64 %371, i64* %RAX, align 8, !tbaa !2428
  %372 = load i64, i64* %RBP
  %373 = sub i64 %372, 20
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 4
  store i64 %375, i64* %PC
  %376 = inttoptr i64 %373 to i32*
  %377 = load i32, i32* %376
  %378 = sext i32 %377 to i64
  store i64 %378, i64* %RCX, align 8, !tbaa !2428
  %379 = load i64, i64* %RAX
  %380 = load i64, i64* %RCX
  %381 = add i64 %380, %379
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 4
  store i64 %383, i64* %PC
  %384 = inttoptr i64 %381 to i8*
  %385 = load i8, i8* %384
  %386 = zext i8 %385 to i64
  store i64 %386, i64* %RDX, align 8, !tbaa !2428
  %387 = load i64, i64* %RBP
  %388 = sub i64 %387, 20
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 3
  store i64 %390, i64* %PC
  %391 = inttoptr i64 %388 to i32*
  %392 = load i32, i32* %391
  %393 = zext i32 %392 to i64
  store i64 %393, i64* %RSI, align 8, !tbaa !2428
  %394 = load i64, i64* %RSI
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 3
  store i64 %396, i64* %PC
  %397 = trunc i64 %394 to i32
  %398 = add i32 51, %397
  %399 = zext i32 %398 to i64
  store i64 %399, i64* %RSI, align 8, !tbaa !2428
  %400 = icmp ult i32 %398, %397
  %401 = icmp ult i32 %398, 51
  %402 = or i1 %400, %401
  %403 = zext i1 %402 to i8
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %403, i8* %404, align 1, !tbaa !2432
  %405 = and i32 %398, 255
  %406 = call i32 @llvm.ctpop.i32(i32 %405) #16
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %409, i8* %410, align 1, !tbaa !2446
  %411 = xor i64 51, %394
  %412 = trunc i64 %411 to i32
  %413 = xor i32 %412, %398
  %414 = lshr i32 %413, 4
  %415 = trunc i32 %414 to i8
  %416 = and i8 %415, 1
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %416, i8* %417, align 1, !tbaa !2447
  %418 = icmp eq i32 %398, 0
  %419 = zext i1 %418 to i8
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %419, i8* %420, align 1, !tbaa !2448
  %421 = lshr i32 %398, 31
  %422 = trunc i32 %421 to i8
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %422, i8* %423, align 1, !tbaa !2449
  %424 = lshr i32 %397, 31
  %425 = xor i32 %421, %424
  %426 = add nuw nsw i32 %425, %421
  %427 = icmp eq i32 %426, 2
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %428, i8* %429, align 1, !tbaa !2450
  %430 = load i32, i32* %ESI
  %431 = zext i32 %430 to i64
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 3
  store i64 %433, i64* %PC
  %434 = shl i64 %431, 32
  %435 = ashr exact i64 %434, 32
  store i64 %435, i64* %RAX, align 8, !tbaa !2428
  %436 = load i64, i64* %RAX
  %437 = mul i64 %436, 4
  %438 = add i64 %437, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3184)
  %439 = load i32, i32* %EDX
  %440 = zext i32 %439 to i64
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 7
  store i64 %442, i64* %PC
  %443 = inttoptr i64 %438 to i32*
  store i32 %439, i32* %443
  %444 = load i64, i64* %RBP
  %445 = sub i64 %444, 20
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 3
  store i64 %447, i64* %PC
  %448 = inttoptr i64 %445 to i32*
  %449 = load i32, i32* %448
  %450 = zext i32 %449 to i64
  store i64 %450, i64* %RAX, align 8, !tbaa !2428
  %451 = load i64, i64* %RAX
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 3
  store i64 %453, i64* %PC
  %454 = trunc i64 %451 to i32
  %455 = add i32 1, %454
  %456 = zext i32 %455 to i64
  store i64 %456, i64* %RAX, align 8, !tbaa !2428
  %457 = icmp ult i32 %455, %454
  %458 = icmp ult i32 %455, 1
  %459 = or i1 %457, %458
  %460 = zext i1 %459 to i8
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %460, i8* %461, align 1, !tbaa !2432
  %462 = and i32 %455, 255
  %463 = call i32 @llvm.ctpop.i32(i32 %462) #16
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  %466 = xor i8 %465, 1
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %466, i8* %467, align 1, !tbaa !2446
  %468 = xor i64 1, %451
  %469 = trunc i64 %468 to i32
  %470 = xor i32 %469, %455
  %471 = lshr i32 %470, 4
  %472 = trunc i32 %471 to i8
  %473 = and i8 %472, 1
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %473, i8* %474, align 1, !tbaa !2447
  %475 = icmp eq i32 %455, 0
  %476 = zext i1 %475 to i8
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %476, i8* %477, align 1, !tbaa !2448
  %478 = lshr i32 %455, 31
  %479 = trunc i32 %478 to i8
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %479, i8* %480, align 1, !tbaa !2449
  %481 = lshr i32 %454, 31
  %482 = xor i32 %478, %481
  %483 = add nuw nsw i32 %482, %478
  %484 = icmp eq i32 %483, 2
  %485 = zext i1 %484 to i8
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %485, i8* %486, align 1, !tbaa !2450
  %487 = load i64, i64* %RBP
  %488 = sub i64 %487, 20
  %489 = load i32, i32* %EAX
  %490 = zext i32 %489 to i64
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 3
  store i64 %492, i64* %PC
  %493 = inttoptr i64 %488 to i32*
  store i32 %489, i32* %493
  %494 = load i64, i64* %PC
  %495 = sub i64 %494, 50
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 5
  store i64 %497, i64* %PC
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %495, i64* %498, align 8, !tbaa !2428
  br label %block_4018e8

block_40195c:                                     ; preds = %block_40192b
  %499 = sub i64 %693, 20
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 7
  store i64 %501, i64* %PC
  %502 = inttoptr i64 %499 to i32*
  store i32 0, i32* %502
  br label %block_401963

block_40196d:                                     ; preds = %block_401963
  %503 = load i64, i64* %RBP
  %504 = sub i64 %503, 20
  %505 = load i64, i64* %PC
  %506 = add i64 %505, 4
  store i64 %506, i64* %PC
  %507 = inttoptr i64 %504 to i32*
  %508 = load i32, i32* %507
  %509 = sext i32 %508 to i64
  store i64 %509, i64* %RAX, align 8, !tbaa !2428
  %510 = load i64, i64* %RAX
  %511 = mul i64 %510, 4
  %512 = add i64 %511, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 7
  store i64 %514, i64* %PC
  %515 = inttoptr i64 %512 to i32*
  %516 = load i32, i32* %515
  %517 = zext i32 %516 to i64
  store i64 %517, i64* %RCX, align 8, !tbaa !2428
  %518 = load i8, i8* %CL
  %519 = zext i8 %518 to i64
  %520 = load i64, i64* %PC
  %521 = add i64 %520, 2
  store i64 %521, i64* %PC
  store i8 %518, i8* %DL, align 1, !tbaa !2451
  %522 = load i64, i64* %RBP
  %523 = sub i64 %522, 8
  %524 = load i64, i64* %PC
  %525 = add i64 %524, 4
  store i64 %525, i64* %PC
  %526 = inttoptr i64 %523 to i64*
  %527 = load i64, i64* %526
  store i64 %527, i64* %RAX, align 8, !tbaa !2428
  %528 = load i64, i64* %RBP
  %529 = sub i64 %528, 20
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 3
  store i64 %531, i64* %PC
  %532 = inttoptr i64 %529 to i32*
  %533 = load i32, i32* %532
  %534 = zext i32 %533 to i64
  store i64 %534, i64* %RCX, align 8, !tbaa !2428
  %535 = load i64, i64* %RCX
  %536 = load i64, i64* %PC
  %537 = add i64 %536, 6
  store i64 %537, i64* %PC
  %538 = trunc i64 %535 to i32
  %539 = add i32 188, %538
  %540 = zext i32 %539 to i64
  store i64 %540, i64* %RCX, align 8, !tbaa !2428
  %541 = icmp ult i32 %539, %538
  %542 = icmp ult i32 %539, 188
  %543 = or i1 %541, %542
  %544 = zext i1 %543 to i8
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %544, i8* %545, align 1, !tbaa !2432
  %546 = and i32 %539, 255
  %547 = call i32 @llvm.ctpop.i32(i32 %546) #16
  %548 = trunc i32 %547 to i8
  %549 = and i8 %548, 1
  %550 = xor i8 %549, 1
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %550, i8* %551, align 1, !tbaa !2446
  %552 = xor i64 188, %535
  %553 = trunc i64 %552 to i32
  %554 = xor i32 %553, %539
  %555 = lshr i32 %554, 4
  %556 = trunc i32 %555 to i8
  %557 = and i8 %556, 1
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %557, i8* %558, align 1, !tbaa !2447
  %559 = icmp eq i32 %539, 0
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %560, i8* %561, align 1, !tbaa !2448
  %562 = lshr i32 %539, 31
  %563 = trunc i32 %562 to i8
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %563, i8* %564, align 1, !tbaa !2449
  %565 = lshr i32 %538, 31
  %566 = xor i32 %562, %565
  %567 = add nuw nsw i32 %566, %562
  %568 = icmp eq i32 %567, 2
  %569 = zext i1 %568 to i8
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %569, i8* %570, align 1, !tbaa !2450
  %571 = load i32, i32* %ECX
  %572 = zext i32 %571 to i64
  %573 = load i64, i64* %PC
  %574 = add i64 %573, 3
  store i64 %574, i64* %PC
  %575 = shl i64 %572, 32
  %576 = ashr exact i64 %575, 32
  store i64 %576, i64* %RSI, align 8, !tbaa !2428
  %577 = load i64, i64* %RAX
  %578 = load i64, i64* %RSI
  %579 = add i64 %578, %577
  %580 = load i8, i8* %DL
  %581 = zext i8 %580 to i64
  %582 = load i64, i64* %PC
  %583 = add i64 %582, 3
  store i64 %583, i64* %PC
  %584 = inttoptr i64 %579 to i8*
  store i8 %580, i8* %584
  %585 = load i64, i64* %RBP
  %586 = sub i64 %585, 20
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 3
  store i64 %588, i64* %PC
  %589 = inttoptr i64 %586 to i32*
  %590 = load i32, i32* %589
  %591 = zext i32 %590 to i64
  store i64 %591, i64* %RAX, align 8, !tbaa !2428
  %592 = load i64, i64* %RAX
  %593 = load i64, i64* %PC
  %594 = add i64 %593, 3
  store i64 %594, i64* %PC
  %595 = trunc i64 %592 to i32
  %596 = add i32 1, %595
  %597 = zext i32 %596 to i64
  store i64 %597, i64* %RAX, align 8, !tbaa !2428
  %598 = icmp ult i32 %596, %595
  %599 = icmp ult i32 %596, 1
  %600 = or i1 %598, %599
  %601 = zext i1 %600 to i8
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %601, i8* %602, align 1, !tbaa !2432
  %603 = and i32 %596, 255
  %604 = call i32 @llvm.ctpop.i32(i32 %603) #16
  %605 = trunc i32 %604 to i8
  %606 = and i8 %605, 1
  %607 = xor i8 %606, 1
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %607, i8* %608, align 1, !tbaa !2446
  %609 = xor i64 1, %592
  %610 = trunc i64 %609 to i32
  %611 = xor i32 %610, %596
  %612 = lshr i32 %611, 4
  %613 = trunc i32 %612 to i8
  %614 = and i8 %613, 1
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %614, i8* %615, align 1, !tbaa !2447
  %616 = icmp eq i32 %596, 0
  %617 = zext i1 %616 to i8
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %617, i8* %618, align 1, !tbaa !2448
  %619 = lshr i32 %596, 31
  %620 = trunc i32 %619 to i8
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %620, i8* %621, align 1, !tbaa !2449
  %622 = lshr i32 %595, 31
  %623 = xor i32 %619, %622
  %624 = add nuw nsw i32 %623, %619
  %625 = icmp eq i32 %624, 2
  %626 = zext i1 %625 to i8
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %626, i8* %627, align 1, !tbaa !2450
  %628 = load i64, i64* %RBP
  %629 = sub i64 %628, 20
  %630 = load i32, i32* %EAX
  %631 = zext i32 %630 to i64
  %632 = load i64, i64* %PC
  %633 = add i64 %632, 3
  store i64 %633, i64* %PC
  %634 = inttoptr i64 %629 to i32*
  store i32 %630, i32* %634
  %635 = load i64, i64* %PC
  %636 = sub i64 %635, 51
  %637 = load i64, i64* %PC
  %638 = add i64 %637, 5
  store i64 %638, i64* %PC
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %636, i64* %639, align 8, !tbaa !2428
  br label %block_401963

block_40192b:                                     ; preds = %block_40191f, %block_401938
  %MEMORY.1 = phi %struct.Memory* [ %759, %block_40191f ], [ %MEMORY.1, %block_401938 ]
  %640 = load i64, i64* %RBP
  %641 = sub i64 %640, 20
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 7
  store i64 %643, i64* %PC
  %644 = inttoptr i64 %641 to i32*
  %645 = load i32, i32* %644
  %646 = sub i32 %645, 188
  %647 = icmp ult i32 %645, 188
  %648 = zext i1 %647 to i8
  %649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %648, i8* %649, align 1, !tbaa !2432
  %650 = and i32 %646, 255
  %651 = call i32 @llvm.ctpop.i32(i32 %650) #16
  %652 = trunc i32 %651 to i8
  %653 = and i8 %652, 1
  %654 = xor i8 %653, 1
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %654, i8* %655, align 1, !tbaa !2446
  %656 = xor i32 %645, 188
  %657 = xor i32 %656, %646
  %658 = lshr i32 %657, 4
  %659 = trunc i32 %658 to i8
  %660 = and i8 %659, 1
  %661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %660, i8* %661, align 1, !tbaa !2447
  %662 = icmp eq i32 %646, 0
  %663 = zext i1 %662 to i8
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %663, i8* %664, align 1, !tbaa !2448
  %665 = lshr i32 %646, 31
  %666 = trunc i32 %665 to i8
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %666, i8* %667, align 1, !tbaa !2449
  %668 = lshr i32 %645, 31
  %669 = xor i32 %665, %668
  %670 = add nuw nsw i32 %669, %668
  %671 = icmp eq i32 %670, 2
  %672 = zext i1 %671 to i8
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %672, i8* %673, align 1, !tbaa !2450
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 42
  %676 = load i64, i64* %PC
  %677 = add i64 %676, 6
  %678 = load i64, i64* %PC
  %679 = add i64 %678, 6
  store i64 %679, i64* %PC
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %681 = load i8, i8* %680, align 1, !tbaa !2449
  %682 = icmp ne i8 %681, 0
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %684 = load i8, i8* %683, align 1, !tbaa !2450
  %685 = icmp ne i8 %684, 0
  %686 = xor i1 %682, %685
  %687 = xor i1 %686, true
  %688 = zext i1 %687 to i8
  store i8 %688, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %690 = select i1 %686, i64 %677, i64 %675
  store i64 %690, i64* %689, align 8, !tbaa !2428
  %691 = load i8, i8* %BRANCH_TAKEN
  %692 = icmp eq i8 %691, 1
  %693 = load i64, i64* %RBP
  br i1 %692, label %block_40195c, label %block_401938

block_4018e8:                                     ; preds = %block_4018e1, %block_4018f5
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_4018e1 ], [ %MEMORY.2, %block_4018f5 ]
  %694 = load i64, i64* %RBP
  %695 = sub i64 %694, 20
  %696 = load i64, i64* %PC
  %697 = add i64 %696, 7
  store i64 %697, i64* %PC
  %698 = inttoptr i64 %695 to i32*
  %699 = load i32, i32* %698
  %700 = sub i32 %699, 188
  %701 = icmp ult i32 %699, 188
  %702 = zext i1 %701 to i8
  %703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %702, i8* %703, align 1, !tbaa !2432
  %704 = and i32 %700, 255
  %705 = call i32 @llvm.ctpop.i32(i32 %704) #16
  %706 = trunc i32 %705 to i8
  %707 = and i8 %706, 1
  %708 = xor i8 %707, 1
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %708, i8* %709, align 1, !tbaa !2446
  %710 = xor i32 %699, 188
  %711 = xor i32 %710, %700
  %712 = lshr i32 %711, 4
  %713 = trunc i32 %712 to i8
  %714 = and i8 %713, 1
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %714, i8* %715, align 1, !tbaa !2447
  %716 = icmp eq i32 %700, 0
  %717 = zext i1 %716 to i8
  %718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %717, i8* %718, align 1, !tbaa !2448
  %719 = lshr i32 %700, 31
  %720 = trunc i32 %719 to i8
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %720, i8* %721, align 1, !tbaa !2449
  %722 = lshr i32 %699, 31
  %723 = xor i32 %719, %722
  %724 = add nuw nsw i32 %723, %722
  %725 = icmp eq i32 %724, 2
  %726 = zext i1 %725 to i8
  %727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %726, i8* %727, align 1, !tbaa !2450
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 48
  %730 = load i64, i64* %PC
  %731 = add i64 %730, 6
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 6
  store i64 %733, i64* %PC
  %734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %735 = load i8, i8* %734, align 1, !tbaa !2449
  %736 = icmp ne i8 %735, 0
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %738 = load i8, i8* %737, align 1, !tbaa !2450
  %739 = icmp ne i8 %738, 0
  %740 = xor i1 %736, %739
  %741 = xor i1 %740, true
  %742 = zext i1 %741 to i8
  store i8 %742, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %744 = select i1 %740, i64 %731, i64 %729
  store i64 %744, i64* %743, align 8, !tbaa !2428
  %745 = load i8, i8* %BRANCH_TAKEN
  %746 = icmp eq i8 %745, 1
  br i1 %746, label %block_40191f, label %block_4018f5

block_40191f:                                     ; preds = %block_4018e8
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 145
  %749 = load i64, i64* %PC
  %750 = add i64 %749, 5
  %751 = load i64, i64* %PC
  %752 = add i64 %751, 5
  store i64 %752, i64* %PC
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %754 = load i64, i64* %753, align 8, !tbaa !2428
  %755 = add i64 %754, -8
  %756 = inttoptr i64 %755 to i64*
  store i64 %750, i64* %756
  store i64 %755, i64* %753, align 8, !tbaa !2428
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %748, i64* %757, align 8, !tbaa !2428
  %758 = load i64, i64* %PC
  %759 = call %struct.Memory* @sub_4019b0_encode_rs_renamed_(%struct.State* %0, i64 %758, %struct.Memory* %MEMORY.2)
  %760 = load i64, i64* %RBP
  %761 = sub i64 %760, 20
  %762 = load i64, i64* %PC
  %763 = add i64 %762, 7
  store i64 %763, i64* %PC
  %764 = inttoptr i64 %761 to i32*
  store i32 0, i32* %764
  br label %block_40192b

block_401963:                                     ; preds = %block_40196d, %block_40195c
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.1, %block_40195c ], [ %MEMORY.3, %block_40196d ]
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 20
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 4
  store i64 %768, i64* %PC
  %769 = inttoptr i64 %766 to i32*
  %770 = load i32, i32* %769
  %771 = sub i32 %770, 16
  %772 = icmp ult i32 %770, 16
  %773 = zext i1 %772 to i8
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %773, i8* %774, align 1, !tbaa !2432
  %775 = and i32 %771, 255
  %776 = call i32 @llvm.ctpop.i32(i32 %775) #16
  %777 = trunc i32 %776 to i8
  %778 = and i8 %777, 1
  %779 = xor i8 %778, 1
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %779, i8* %780, align 1, !tbaa !2446
  %781 = xor i32 %770, 16
  %782 = xor i32 %781, %771
  %783 = lshr i32 %782, 4
  %784 = trunc i32 %783 to i8
  %785 = and i8 %784, 1
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %785, i8* %786, align 1, !tbaa !2447
  %787 = icmp eq i32 %771, 0
  %788 = zext i1 %787 to i8
  %789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %788, i8* %789, align 1, !tbaa !2448
  %790 = lshr i32 %771, 31
  %791 = trunc i32 %790 to i8
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %791, i8* %792, align 1, !tbaa !2449
  %793 = lshr i32 %770, 31
  %794 = xor i32 %790, %793
  %795 = add nuw nsw i32 %794, %793
  %796 = icmp eq i32 %795, 2
  %797 = zext i1 %796 to i8
  %798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %797, i8* %798, align 1, !tbaa !2450
  %799 = load i64, i64* %PC
  %800 = add i64 %799, 52
  %801 = load i64, i64* %PC
  %802 = add i64 %801, 6
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 6
  store i64 %804, i64* %PC
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %806 = load i8, i8* %805, align 1, !tbaa !2449
  %807 = icmp ne i8 %806, 0
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %809 = load i8, i8* %808, align 1, !tbaa !2450
  %810 = icmp ne i8 %809, 0
  %811 = xor i1 %807, %810
  %812 = xor i1 %811, true
  %813 = zext i1 %812 to i8
  store i8 %813, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %815 = select i1 %811, i64 %802, i64 %800
  store i64 %815, i64* %814, align 8, !tbaa !2428
  %816 = load i8, i8* %BRANCH_TAKEN
  %817 = icmp eq i8 %816, 1
  br i1 %817, label %block_40199b, label %block_40196d

block_4018e1:                                     ; preds = %block_4018ba
  %818 = add i64 %270, 7
  store i64 %818, i64* %PC
  %819 = inttoptr i64 %269 to i32*
  store i32 0, i32* %819
  br label %block_4018e8

block_4018b3:                                     ; preds = %block_40189e, %block_401880
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_401880 ], [ %163, %block_40189e ]
  %820 = load i64, i64* %RBP
  %821 = sub i64 %820, 20
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 7
  store i64 %823, i64* %PC
  %824 = inttoptr i64 %821 to i32*
  store i32 0, i32* %824
  br label %block_4018ba

block_4018c4:                                     ; preds = %block_4018ba
  %825 = add i64 %270, 4
  store i64 %825, i64* %PC
  %826 = inttoptr i64 %269 to i32*
  %827 = load i32, i32* %826
  %828 = sext i32 %827 to i64
  store i64 %828, i64* %RAX, align 8, !tbaa !2428
  %829 = load i64, i64* %RAX
  %830 = mul i64 %829, 4
  %831 = add i64 %830, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3184)
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 11
  store i64 %833, i64* %PC
  %834 = inttoptr i64 %831 to i32*
  store i32 0, i32* %834
  %835 = load i64, i64* %RBP
  %836 = sub i64 %835, 20
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 3
  store i64 %838, i64* %PC
  %839 = inttoptr i64 %836 to i32*
  %840 = load i32, i32* %839
  %841 = zext i32 %840 to i64
  store i64 %841, i64* %RAX, align 8, !tbaa !2428
  %842 = load i64, i64* %RAX
  %843 = load i64, i64* %PC
  %844 = add i64 %843, 3
  store i64 %844, i64* %PC
  %845 = trunc i64 %842 to i32
  %846 = add i32 1, %845
  %847 = zext i32 %846 to i64
  store i64 %847, i64* %RAX, align 8, !tbaa !2428
  %848 = icmp ult i32 %846, %845
  %849 = icmp ult i32 %846, 1
  %850 = or i1 %848, %849
  %851 = zext i1 %850 to i8
  %852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %851, i8* %852, align 1, !tbaa !2432
  %853 = and i32 %846, 255
  %854 = call i32 @llvm.ctpop.i32(i32 %853) #16
  %855 = trunc i32 %854 to i8
  %856 = and i8 %855, 1
  %857 = xor i8 %856, 1
  %858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %857, i8* %858, align 1, !tbaa !2446
  %859 = xor i64 1, %842
  %860 = trunc i64 %859 to i32
  %861 = xor i32 %860, %846
  %862 = lshr i32 %861, 4
  %863 = trunc i32 %862 to i8
  %864 = and i8 %863, 1
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %864, i8* %865, align 1, !tbaa !2447
  %866 = icmp eq i32 %846, 0
  %867 = zext i1 %866 to i8
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %867, i8* %868, align 1, !tbaa !2448
  %869 = lshr i32 %846, 31
  %870 = trunc i32 %869 to i8
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %870, i8* %871, align 1, !tbaa !2449
  %872 = lshr i32 %845, 31
  %873 = xor i32 %869, %872
  %874 = add nuw nsw i32 %873, %869
  %875 = icmp eq i32 %874, 2
  %876 = zext i1 %875 to i8
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %876, i8* %877, align 1, !tbaa !2450
  %878 = load i64, i64* %RBP
  %879 = sub i64 %878, 20
  %880 = load i32, i32* %EAX
  %881 = zext i32 %880 to i64
  %882 = load i64, i64* %PC
  %883 = add i64 %882, 3
  store i64 %883, i64* %PC
  %884 = inttoptr i64 %879 to i32*
  store i32 %880, i32* %884
  %885 = load i64, i64* %PC
  %886 = sub i64 %885, 34
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 5
  store i64 %888, i64* %PC
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %886, i64* %889, align 8, !tbaa !2428
  br label %block_4018ba
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400510_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400510;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400510_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400510_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4004e0___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4004e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4004e0___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4004e0___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_401ce0___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401ce0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_401ce0___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401ce0___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_401c70___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401c70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_401c70___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401c70___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401b40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401b40_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6040d0___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6040d8_random(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @random to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4003f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4003f0__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @rsenc_204() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401880;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @rsenc_204_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401880_rsenc_204(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @rsdec_204() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400520;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @rsdec_204_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400520_rsdec_204(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401ce4;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401ce4__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_401c70___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_401ce0___libc_csu_fini()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }
attributes #17 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2430, !2430, i64 0}
!2452 = !{!2445, !2445, i64 0}
