; ModuleID = '../binary/test.mcsema.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_4003e0__init_type = type <{ [23 x i8] }>
%seg_400400__plt_type = type <{ [32 x i8] }>
%seg_400420__text_type = type <{ [6322 x i8] }>
%seg_401cd4__fini_type = type <{ [9 x i8] }>
%seg_401ce0__rodata_type = type <{ [4 x i8] }>
%seg_401ce4__eh_frame_hdr_type = type <{ [108 x i8] }>
%seg_401d50__eh_frame_type = type <{ [424 x i8] }>
%seg_602df0__init_array_type = type <{ i64, i64 }>
%seg_602ff0__got_type = type <{ i64, i64 }>
%seg_603000__got_plt_type = type <{ [24 x i8], i64 }>
%seg_603020__data_type = type <{ [16 x i8], [36 x i8] }>
%seg_603060__bss_type = type <{ [16 x i8], [16 x i8], [1024 x i8], [1024 x i8], [1024 x i8], [80 x i8], [960 x i8], [64 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_4003e0__init = internal constant %seg_4003e0__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05\0D, \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_400400__plt = internal constant %seg_400400__plt_type <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%\02, \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_400420__text = internal constant %seg_400420__text_type <{ [6322 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0\D0\1C@\00H\C7\C1`\1C@\00H\C7\C70\1B@\00\FF\15\A6+ \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B8X0`\00H=X0`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BFX0`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BEX0`\00UH\81\EEX0`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BFX0`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=\89+ \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05w+ \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\89}\F8H\89u\F0\83<%p0`\00\00\0F\85\15\00\00\00\E8M\01\00\00\E8\98\02\00\00\C7\04%p0`\00\01\00\00\00\C7E\EC\00\00\00\00\83}\EC\10\0F\8D-\00\00\00H\8BE\F0\8BM\EC\81\C1\BC\00\00\00Hc\D1\0F\B6\0C\10HcE\EC\89\0C\85\800`\00\8BE\EC\83\C0\01\89E\EC\E9\C9\FF\FF\FF\C7E\EC\00\00\00\00\83}\EC3\0F\8D\22\00\00\00\8BE\EC\83\C0\10Hc\C8\C7\04\8D\800`\00\00\00\00\00\8BE\EC\83\C0\01\89E\EC\E9\D4\FF\FF\FF\C7E\EC\00\00\00\00\81}\EC\BC\00\00\00\0F\8D*\00\00\00H\8BE\F0HcM\EC\0F\B6\14\08\8Bu\EC\83\C6CHc\C6\89\14\85\800`\00\8BE\EC\83\C0\01\89E\EC\E9\C9\FF\FF\FF\C7E\EC\00\00\00\00\81}\EC\FF\00\00\00\0F\8D,\00\00\00HcE\ECHc\04\85\800`\00\8B\0C\85\804`\00HcE\EC\89\0C\85\800`\00\8BE\EC\83\C0\01\89E\EC\E9\C7\FF\FF\FF\E8\F9\02\00\00\C7E\EC\00\00\00\00\81}\EC\BC\00\00\00\0F\8D+\00\00\00\8BE\EC\83\C0CHc\C8\8B\04\8D\800`\00\88\C2H\8BM\F8Hcu\EC\88\141\8BE\EC\83\C0\01\89E\EC\E9\C8\FF\FF\FFH\83\C4 ]\C3\0F\1F@\00UH\89\E5\C7E\F8\01\00\00\00\C7\04%\A08`\00\00\00\00\00\C7E\FC\00\00\00\00\83}\FC\08\0F\8D^\00\00\00\8BE\F8HcM\FC\89\04\8D\808`\00\8BE\FCHcM\FCHc\0C\8D\808`\00\89\04\8D\804`\00HcM\FC\83<\8D00`\00\00\0F\84\11\00\00\00\8BE\F83\04%\A08`\00\89\04%\A08`\00\8BE\F8\C1\E0\01\89E\F8\8BE\FC\83\C0\01\89E\FC\E9\98\FF\FF\FFHc\04%\A08`\00\C7\04\85\804`\00\08\00\00\00\8BM\F8\C1\F9\01\89M\F8\C7E\FC\09\00\00\00\81}\FC\FF\00\00\00\0F\8D\8A\00\00\00\8BE\FC\83\E8\01Hc\C8\8B\04\8D\808`\00;E\F8\0F\8C/\00\00\00\8B\04%\A08`\00\8BM\FC\83\E9\01Hc\D1\8B\0C\95\808`\003M\F8\C1\E1\011\C8HcU\FC\89\04\95\808`\00\E9\1E\00\00\00\8BE\FC\83\E8\01Hc\C8\8B\04\8D\808`\00\C1\E0\01HcM\FC\89\04\8D\808`\00\8BE\FCHcM\FCHc\0C\8D\808`\00\89\04\8D\804`\00\8BE\FC\83\C0\01\89E\FC\E9i\FF\FF\FF\C7\04%\804`\00\FF\FF\FF\FF]\C3\0F\1F@\00UH\89\E5\C7\04%\80<`\00\02\00\00\00\C7\04%\84<`\00\01\00\00\00\C7E\FC\02\00\00\00\83}\FC\10\0F\8F\F3\00\00\00HcE\FC\C7\04\85\80<`\00\01\00\00\00\8BM\FC\83\E9\01\89M\F8\83}\F8\00\0F\8E\90\00\00\00HcE\F8\83<\85\80<`\00\00\0F\84P\00\00\00\B8\FF\00\00\00\8BM\F8\83\E9\01Hc\D1\8B\0C\95\80<`\00HcU\F8Hc\14\95\80<`\00\8B4\95\804`\00\03u\FC\89E\F4\89\F0\99\8Bu\F4\F7\FEHc\FA3\0C\BD\808`\00Hc}\F8\89\0C\BD\80<`\00\E9\1B\00\00\00\8BE\F8\83\E8\01Hc\C8\8B\04\8D\80<`\00HcM\F8\89\04\8D\80<`\00\E9\00\00\00\00\8BE\F8\83\C0\FF\89E\F8\E9f\FF\FF\FF\B8\FF\00\00\00Hc\0C%\80<`\00\8B\14\8D\804`\00\03U\FC\89E\F0\89\D0\99\8Bu\F0\F7\FEHc\CA\8B\14\8D\808`\00\89\14%\80<`\00\8BE\FC\83\C0\01\89E\FC\E9\03\FF\FF\FF\C7E\FC\00\00\00\00\83}\FC\10\0F\8F,\00\00\00HcE\FCHc\04\85\80<`\00\8B\0C\85\804`\00HcE\FC\89\0C\85\80<`\00\8BE\FC\83\C0\01\89E\FC\E9\CA\FF\FF\FF]\C3\0F\1F\00UH\89\E5H\81\EC0\0A\00\00\C7\85,\FA\FF\FF\00\00\00\00\C7\85(\FA\FF\FF\00\00\00\00\C7E\FC\01\00\00\00\83}\FC\10\0F\8F\D6\00\00\00HcE\FC\C7\84\850\FA\FF\FF\00\00\00\00\C7E\F8\00\00\00\00\81}\F8\FF\00\00\00\0F\8Dk\00\00\00HcE\F8\83<\85\800`\00\FF\0F\84F\00\00\00\B8\FF\00\00\00HcM\F8\8B\14\8D\800`\00\8Bu\FC\0F\AFu\F8\01\F2\89\85|\F5\FF\FF\89\D0\99\8B\B5|\F5\FF\FF\F7\FEHc\CA\8B\14\8D\808`\00HcM\FC3\94\8D0\FA\FF\FF\89\94\8D0\FA\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\88\FF\FF\FFHcE\FC\83\BC\850\FA\FF\FF\00\0F\84\0A\00\00\00\C7\85(\FA\FF\FF\01\00\00\00HcE\FCHc\84\850\FA\FF\FF\8B\0C\85\804`\00HcE\FC\89\8C\850\FA\FF\FF\8BE\FC\83\C0\01\89E\FC\E9 \FF\FF\FF\83\BD(\FA\FF\FF\00\0F\84\AA\0D\00\00\C7\85 \FB\FF\FF\00\00\00\00\8B\854\FA\FF\FF\89\85$\FB\FF\FF\C7\85p\FB\FF\FF\00\00\00\00\C7\85\B0\FB\FF\FF\01\00\00\00\C7E\FC\01\00\00\00\83}\FC\10\0F\8D,\00\00\00HcE\FC\C7\84\85p\FB\FF\FF\FF\FF\FF\FFHcE\FC\C7\84\85\B0\FB\FF\FF\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\CA\FF\FF\FF\C7\85\D0\FA\FF\FF\00\00\00\00\C7\85\D4\FA\FF\FF\00\00\00\00\C7\85\80\FA\FF\FF\FF\FF\FF\FF\C7\85\84\FA\FF\FF\00\00\00\00\C7E\F4\00\00\00\00\8BE\F4\83\C0\01\89E\F4HcM\F4\83\BC\8D \FB\FF\FF\FF\0F\85\AE\00\00\00HcE\F4\8B\8C\85\D0\FA\FF\FF\8BU\F4\83\C2\01Hc\C2\89\8C\85\D0\FA\FF\FF\C7E\FC\00\00\00\00\8BE\FCHcM\F4;\84\8D\D0\FA\FF\FF\0F\8Fs\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\89\C2H\01\CAHcM\FC\8B4\8A\8B}\F4\83\C7\01Hc\CFH\C1\E1\06H\89\C2H\01\CAHcM\FC\894\8AHcM\F4H\C1\E1\06H\89\C2H\01\CAHcM\FCHc\0C\8A\8B4\8D\804`\00HcM\F4H\C1\E1\06H\01\C8HcM\FC\894\88\8BE\FC\83\C0\01\89E\FC\E9y\FF\FF\FF\E9\B8\02\00\00\8BE\F4\83\E8\01\89E\F01\C0\88\C1HcU\F0\83\BC\95 \FB\FF\FF\FF\88\8D{\F5\FF\FF\0F\85\0D\00\00\00\83}\F0\00\0F\9F\C0\88\85{\F5\FF\FF\8A\85{\F5\FF\FF\A8\01\0F\85\05\00\00\00\E9\0E\00\00\00\8BE\F0\83\C0\FF\89E\F0\E9\B6\FF\FF\FF\83}\F0\00\0F\8EW\00\00\00\8BE\F0\89E\F8\8BE\F8\83\C0\FF\89E\F8HcM\F8\83\BC\8D \FB\FF\FF\FF\0F\84\22\00\00\00HcE\F0\8B\8C\85\80\FA\FF\FFHcE\F8;\8C\85\80\FA\FF\FF\0F\8D\06\00\00\00\8BE\F8\89E\F0\E9\00\00\00\00\83}\F8\00\0F\8F\B4\FF\FF\FF\E9\00\00\00\00HcE\F4\8B\8C\85\D0\FA\FF\FFHcE\F0\8B\94\85\D0\FA\FF\FF\03U\F4+U\F09\D1\0F\8E \00\00\00HcE\F4\8B\8C\85\D0\FA\FF\FF\8BU\F4\83\C2\01Hc\C2\89\8C\85\D0\FA\FF\FF\E9!\00\00\00HcE\F0\8B\8C\85\D0\FA\FF\FF\03M\F4+M\F0\8BU\F4\83\C2\01Hc\C2\89\8C\85\D0\FA\FF\FF\C7E\FC\00\00\00\00\83}\FC\10\0F\8D0\00\00\00H\8D\85p\FB\FF\FF\8BM\F4\83\C1\01Hc\D1H\C1\E2\06H\01\D0HcU\FC\C7\04\90\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\C6\FF\FF\FF\C7E\FC\00\00\00\00\8BE\FCHcM\F0;\84\8D\D0\FA\FF\FF\0F\8F\AD\00\00\00H\8D\85p\FB\FF\FFHcM\F0H\C1\E1\06H\01\C8HcM\FC\83<\88\FF\0F\84z\00\00\00H\8D\85p\FB\FF\FF\B9\FF\00\00\00HcU\F4\8B\B4\95 \FB\FF\FF\81\C6\FF\00\00\00HcU\F0+\B4\95 \FB\FF\FFHcU\F0H\C1\E2\06H\89\C7H\01\D7HcU\FC\034\97H\89\85p\F5\FF\FF\89\F0\99\F7\F9Hc\FA\8B\0C\BD\808`\00\8BU\F4\83\C2\01Hc\FAH\C1\E7\06L\8B\85p\F5\FF\FFI\01\F8\8BU\FC\03U\F4+U\F0Hc\FAA\89\0C\B8\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9?\FF\FF\FF\C7E\FC\00\00\00\00\8BE\FCHcM\F4;\84\8D\D0\FA\FF\FF\0F\8Fv\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\89\C2H\01\CAHcM\FC\8B4\8A\8B}\F4\83\C7\01Hc\CFH\C1\E1\06H\89\C2H\01\CAHcM\FC34\8A\894\8AHcM\F4H\C1\E1\06H\89\C2H\01\CAHcM\FCHc\0C\8A\8B4\8D\804`\00HcM\F4H\C1\E1\06H\01\C8HcM\FC\894\88\8BE\FC\83\C0\01\89E\FC\E9v\FF\FF\FF\E9\00\00\00\00\8BE\F4\8BM\F4\83\C1\01Hc\D1+\84\95\D0\FA\FF\FF\8BM\F4\83\C1\01Hc\D1\89\84\95\80\FA\FF\FF\83}\F4\10\0F\8Dd\01\00\00\8BE\F4\83\C0\01Hc\C8\83\BC\8D0\FA\FF\FF\FF\0F\84-\00\00\00\8BE\F4\83\C0\01Hc\C8Hc\8C\8D0\FA\FF\FF\8B\04\8D\808`\00\8BU\F4\83\C2\01Hc\CA\89\84\8D \FB\FF\FF\E9\14\00\00\00\8BE\F4\83\C0\01Hc\C8\C7\84\8D \FB\FF\FF\00\00\00\00\C7E\FC\01\00\00\00\8BE\FC\8BM\F4\83\C1\01Hc\D1;\84\95\D0\FA\FF\FF\0F\8F\C4\00\00\00\8BE\F4\83\C0\01+E\FCHc\C8\83\BC\8D0\FA\FF\FF\FF\0F\84\97\00\00\00H\8D\85p\FB\FF\FF\8BM\F4\83\C1\01Hc\D1H\C1\E2\06H\01\D0HcU\FC\83<\90\00\0F\84r\00\00\00\B8\FF\00\00\00H\8D\8Dp\FB\FF\FF\8BU\F4\83\C2\01+U\FCHc\F2\8B\94\B50\FA\FF\FF\8B}\F4\83\C7\01Hc\F7H\C1\E6\06H\01\F1Hcu\FCHc\0C\B1\03\14\8D\804`\00\89\85l\F5\FF\FF\89\D0\99\8B\BDl\F5\FF\FF\F7\FFHc\CA\8B\14\8D\808`\00D\8BE\F4A\83\C0\01Ic\C83\94\8D \FB\FF\FF\89\94\8D \FB\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9#\FF\FF\FF\8BE\F4\83\C0\01Hc\C8Hc\8C\8D \FB\FF\FF\8B\04\8D\804`\00\8BU\F4\83\C2\01Hc\CA\89\84\8D \FB\FF\FF\E9\00\00\00\001\C0\88\C1\83}\F4\10\88\8Dk\F5\FF\FF\0F\8D\1A\00\00\00\8BE\F4\83\C0\01Hc\C8\83\BC\8D\D0\FA\FF\FF\08\0F\9E\C2\88\95k\F5\FF\FF\8A\85k\F5\FF\FF\A8\01\0F\85\AD\FA\FF\FF\8BE\F4\83\C0\01\89E\F4HcM\F4\83\BC\8D\D0\FA\FF\FF\08\0F\8F1\07\00\00\C7E\FC\00\00\00\00\8BE\FCHcM\F4;\84\8D\D0\FA\FF\FF\0F\8FD\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\89\C2H\01\CAHcM\FCHc\0C\8A\8B4\8D\804`\00HcM\F4H\C1\E1\06H\01\C8HcM\FC\894\88\8BE\FC\83\C0\01\89E\FC\E9\A8\FF\FF\FF\C7E\FC\01\00\00\00\8BE\FCHcM\F4;\84\8D\D0\FA\FF\FF\0F\8F2\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\01\C8HcM\FC\8B\14\88HcE\FC\89\94\85\80\F5\FF\FF\8BE\FC\83\C0\01\89E\FC\E9\BA\FF\FF\FF\C7\85,\FA\FF\FF\00\00\00\00\C7E\FC\01\00\00\00\81}\FC\FF\00\00\00\0F\8F\E2\00\00\00\C7E\F0\01\00\00\00\C7E\F8\01\00\00\00\8BE\F8HcM\F4;\84\8D\D0\FA\FF\FF\0F\8Fm\00\00\00HcE\F8\83\BC\85\80\F5\FF\FF\FF\0F\84H\00\00\00\B8\FF\00\00\00HcM\F8\8B\94\8D\80\F5\FF\FF\03U\F8\89\85d\F5\FF\FF\89\D0\99\8B\B5d\F5\FF\FF\F7\FEHcM\F8\89\94\8D\80\F5\FF\FFHcM\F8Hc\8C\8D\80\F5\FF\FF\8B\14\8D\808`\003U\F0\89U\F0\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\7F\FF\FF\FF\83}\F0\00\0F\856\00\00\00\B8\FF\00\00\00\8BM\FCHc\95,\FA\FF\FF\89\8C\95\00\FA\FF\FF+E\FCHc\95,\FA\FF\FF\89\84\95\E0\F9\FF\FF\8B\85,\FA\FF\FF\83\C0\01\89\85,\FA\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\11\FF\FF\FF\8B\85,\FA\FF\FFHcM\F4;\84\8D\D0\FA\FF\FF\0F\85\F9\04\00\00\C7E\FC\01\00\00\00\8BE\FCHcM\F4;\84\8D\D0\FA\FF\FF\0F\8F+\02\00\00HcE\FC\83\BC\850\FA\FF\FF\FF\0F\84d\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\01\C8HcM\FC\83<\88\FF\0F\84D\00\00\00H\8D\85p\FB\FF\FFHcM\FCHc\8C\8D0\FA\FF\FF\8B\14\8D\808`\00HcM\F4H\C1\E1\06H\01\C8HcM\FCHc\04\883\14\85\808`\00HcE\FC\89\94\85\B0\F9\FF\FF\E9\D1\00\00\00HcE\FC\83\BC\850\FA\FF\FF\FF\0F\84C\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\01\C8HcM\FC\83<\88\FF\0F\85#\00\00\00HcE\FCHc\84\850\FA\FF\FF\8B\0C\85\808`\00HcE\FC\89\8C\85\B0\F9\FF\FF\E9w\00\00\00HcE\FC\83\BC\850\FA\FF\FF\FF\0F\85Q\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\01\C8HcM\FC\83<\88\FF\0F\841\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\01\C8HcM\FCHc\04\88\8B\14\85\808`\00HcE\FC\89\94\85\B0\F9\FF\FF\E9\0F\00\00\00HcE\FC\C7\84\85\B0\F9\FF\FF\00\00\00\00\E9\00\00\00\00\E9\00\00\00\00\C7E\F8\01\00\00\00\8BE\F8;E\FC\0F\8D\A5\00\00\00HcE\F8\83\BC\850\FA\FF\FF\FF\0F\84\80\00\00\00H\8D\85p\FB\FF\FFHcM\F4H\C1\E1\06H\01\C8\8BU\FC+U\F8Hc\CA\83<\88\FF\0F\84[\00\00\00\B8\FF\00\00\00H\8D\8Dp\FB\FF\FFHcU\F4H\C1\E2\06H\01\D1\8Bu\FC+u\F8Hc\D6\8B4\91HcM\F8\03\B4\8D0\FA\FF\FF\89\85`\F5\FF\FF\89\F0\99\8B\B5`\F5\FF\FF\F7\FEHc\CA\8B\14\8D\808`\00HcM\FC3\94\8D\B0\F9\FF\FF\89\94\8D\B0\F9\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9O\FF\FF\FFHcE\FCHc\84\85\B0\F9\FF\FF\8B\0C\85\804`\00HcE\FC\89\8C\85\B0\F9\FF\FF\8BE\FC\83\C0\01\89E\FC\E9\C1\FD\FF\FF\C7E\FC\00\00\00\00\81}\FC\FF\00\00\00\0F\8Df\00\00\00HcE\FC\C7\84\85\B0\F5\FF\FF\00\00\00\00HcE\FC\83<\85\800`\00\FF\0F\84#\00\00\00HcE\FCHc\04\85\800`\00\8B\0C\85\808`\00HcE\FC\89\0C\85\800`\00\E9\0F\00\00\00HcE\FC\C7\04\85\800`\00\00\00\00\00\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\8D\FF\FF\FF\C7E\FC\00\00\00\00\8BE\FCHcM\F4;\84\8D\D0\FA\FF\FF\0F\8D\19\02\00\00HcE\FCHc\84\85\E0\F9\FF\FF\C7\84\85\B0\F5\FF\FF\01\00\00\00\C7E\F8\01\00\00\00\8BE\F8HcM\F4;\84\8D\D0\FA\FF\FF\0F\8F{\00\00\00HcE\F8\83\BC\85\B0\F9\FF\FF\FF\0F\84V\00\00\00\B8\FF\00\00\00HcM\F8\8B\94\8D\B0\F9\FF\FF\8Bu\F8HcM\FC\0F\AF\B4\8D\00\FA\FF\FF\01\F2\89\85\5C\F5\FF\FF\89\D0\99\8B\B5\5C\F5\FF\FF\F7\FEHc\CA\8B\14\8D\808`\00HcM\FCHc\8C\8D\E0\F9\FF\FF3\94\8D\B0\F5\FF\FF\89\94\8D\B0\F5\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9q\FF\FF\FFHcE\FCHc\84\85\E0\F9\FF\FF\83\BC\85\B0\F5\FF\FF\00\0F\84?\01\00\00HcE\FCHc\84\85\E0\F9\FF\FFHc\84\85\B0\F5\FF\FF\8B\0C\85\804`\00HcE\FCHc\84\85\E0\F9\FF\FF\89\8C\85\B0\F5\FF\FF\C7E\F0\00\00\00\00\C7E\F8\00\00\00\00\8BE\F8HcM\F4;\84\8D\D0\FA\FF\FF\0F\8Dh\00\00\00\8BE\F8;E\FC\0F\84I\00\00\00\B8\FF\00\00\00HcM\F8\8B\94\8D\E0\F9\FF\FFHcM\FC\03\94\8D\00\FA\FF\FF\89\85X\F5\FF\FF\89\D0\99\8B\B5X\F5\FF\FF\F7\FEHc\CA\8B\14\8D\808`\00\83\F2\01Hc\CA\8B\14\8D\804`\00\03U\F0\89U\F0\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\84\FF\FF\FF\B8\FF\00\00\00\8BM\F0\89\85T\F5\FF\FF\89\C8\99\8B\8DT\F5\FF\FF\F7\F9\89U\F0Hcu\FCHc\B4\B5\E0\F9\FF\FF\8B\94\B5\B0\F5\FF\FF+U\F0\81\C2\FF\00\00\00\89\D0\99\F7\F9Hc\F2\8B\14\B5\808`\00Hcu\FCHc\B4\B5\E0\F9\FF\FF\89\94\B5\B0\F5\FF\FFHcu\FCHc\B4\B5\E0\F9\FF\FF\8B\94\B5\B0\F5\FF\FFHcu\FCHc\B4\B5\E0\F9\FF\FF3\14\B5\800`\00\89\14\B5\800`\00\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\D3\FD\FF\FF\E9p\00\00\00\C7E\FC\00\00\00\00\81}\FC\FF\00\00\00\0F\8DW\00\00\00HcE\FC\83<\85\800`\00\FF\0F\84#\00\00\00HcE\FCHc\04\85\800`\00\8B\0C\85\808`\00HcE\FC\89\0C\85\800`\00\E9\0F\00\00\00HcE\FC\C7\04\85\800`\00\00\00\00\00\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\9C\FF\FF\FF\E9\00\00\00\00\E9p\00\00\00\C7E\FC\00\00\00\00\81}\FC\FF\00\00\00\0F\8DW\00\00\00HcE\FC\83<\85\800`\00\FF\0F\84#\00\00\00HcE\FCHc\04\85\800`\00\8B\0C\85\808`\00HcE\FC\89\0C\85\800`\00\E9\0F\00\00\00HcE\FC\C7\04\85\800`\00\00\00\00\00\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\9C\FF\FF\FF\E9\00\00\00\00\E9p\00\00\00\C7E\FC\00\00\00\00\81}\FC\FF\00\00\00\0F\8DW\00\00\00HcE\FC\83<\85\800`\00\FF\0F\84#\00\00\00HcE\FCHc\04\85\800`\00\8B\0C\85\808`\00HcE\FC\89\0C\85\800`\00\E9\0F\00\00\00HcE\FC\C7\04\85\800`\00\00\00\00\00\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\9C\FF\FF\FF\E9\00\00\00\00H\81\C40\0A\00\00]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\89}\F8H\89u\F0\83<%p0`\00\00\0F\85\15\00\00\00\E8\ED\ED\FF\FF\E88\EF\FF\FF\C7\04%p0`\00\01\00\00\00\C7E\EC\00\00\00\00\83}\EC3\0F\8D\1D\00\00\00HcE\EC\C7\04\85\D0<`\00\00\00\00\00\8BE\EC\83\C0\01\89E\EC\E9\D9\FF\FF\FF\C7E\EC\00\00\00\00\81}\EC\BC\00\00\00\0F\8D*\00\00\00H\8BE\F0HcM\EC\0F\B6\14\08\8Bu\EC\83\C63Hc\C6\89\14\85\D0<`\00\8BE\EC\83\C0\01\89E\EC\E9\C9\FF\FF\FF\E8\8C\00\00\00\C7E\EC\00\00\00\00\81}\EC\BC\00\00\00\0F\8D$\00\00\00H\8BE\F0HcM\EC\8A\14\08H\8BE\F8HcM\EC\88\14\08\8BE\EC\83\C0\01\89E\EC\E9\CF\FF\FF\FF\C7E\EC\00\00\00\00\83}\EC\10\0F\8D.\00\00\00HcE\EC\8B\0C\85\90@`\00\88\CAH\8BE\F8\8BM\EC\81\C1\BC\00\00\00Hc\F1\88\140\8BE\EC\83\C0\01\89E\EC\E9\C8\FF\FF\FFH\83\C4 ]\C3ffffff.\0F\1F\84\00\00\00\00\00UH\89\E5\C7E\FC\00\00\00\00\83}\FC\10\0F\8D\1D\00\00\00HcE\FC\C7\04\85\90@`\00\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\D9\FF\FF\FF\C7E\FC\EE\00\00\00\83}\FC\00\0F\8CJ\01\00\00HcE\FC\8B\0C\85\D0<`\003\0C%\CC@`\00Hc\C1\8B\0C\85\804`\00\89M\F4\83}\F4\FF\0F\84\C9\00\00\00\C7E\F8\0F\00\00\00\83}\F8\00\0F\8E\88\00\00\00HcE\F8\83<\85\80<`\00\FF\0F\84H\00\00\00\B8\FF\00\00\00\8BM\F8\83\E9\01Hc\D1\8B\0C\95\90@`\00HcU\F8\8B4\95\80<`\00\03u\F4\89E\F0\89\F0\99\8Bu\F0\F7\FEHc\FA3\0C\BD\808`\00Hc}\F8\89\0C\BD\90@`\00\E9\1B\00\00\00\8BE\F8\83\E8\01Hc\C8\8B\04\8D\90@`\00HcM\F8\89\04\8D\90@`\00\E9\00\00\00\00\8BE\F8\83\C0\FF\89E\F8\E9n\FF\FF\FF\B8\FF\00\00\00\8B\0C%\80<`\00\03M\F4\89E\EC\89\C8\99\8BM\EC\F7\F9Hc\F2\8B\14\B5\808`\00\89\14%\90@`\00\E9E\00\00\00\C7E\F8\0F\00\00\00\83}\F8\00\0F\8E)\00\00\00\8BE\F8\83\E8\01Hc\C8\8B\04\8D\90@`\00HcM\F8\89\04\8D\90@`\00\8BE\F8\83\C0\FF\89E\F8\E9\CD\FF\FF\FF\C7\04%\90@`\00\00\00\00\00\E9\00\00\00\00\8BE\FC\83\C0\FF\89E\FC\E9\AC\FE\FF\FF]\C3\90UH\89\E5H\81\EC\B0\01\00\00\C7E\FC\00\00\00\00\C7\85\5C\FE\FF\FF\00\00\00\00\81\BD\5C\FE\FF\FF\F0I\02\00\0F\8D\F5\00\00\00\C7\85X\FE\FF\FF\00\00\00\00\81\BDX\FE\FF\FF\BC\00\00\00\0F\8D/\00\00\00\E8\95\E8\FF\FFH%\FF\00\00\00\88\C1Hc\85X\FE\FF\FF\88\8C\050\FF\FF\FF\8B\85X\FE\FF\FF\83\C0\01\89\85X\FE\FF\FF\E9\C1\FF\FF\FFH\8D\B50\FF\FF\FFH\8D\BD`\FE\FF\FF\E8\B8\FC\FF\FF\E8S\E8\FF\FFH\83\E0\7F\89\C1\89\8DT\FE\FF\FF\C7\85X\FE\FF\FF\00\00\00\00\8B\85X\FE\FF\FF;\85T\FE\FF\FF\0F\8DE\00\00\00\E8&\E8\FF\FFH%\FF\00\00\00\88\C1\88\8DS\FE\FF\FF\E8\13\E8\FF\FF\BA\CC\00\00\00\89\D6H\99H\F7\FE\8A\8DS\FE\FF\FF\88\8C\15`\FE\FF\FF\8B\85X\FE\FF\FF\83\C0\01\89\85X\FE\FF\FF\E9\A9\FF\FF\FFH\8D\B5`\FE\FF\FFH\8D\BD0\FF\FF\FF\E8\D3\E8\FF\FF\8B\85\5C\FE\FF\FF\83\C0\01\89\85\5C\FE\FF\FF\E9\FB\FE\FF\FF1\C0H\81\C4\B0\01\00\00]\C3\0F\1F@\00AWAVI\89\D7AUATL\8D%~\11 \00UH\8D-~\11 \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8O\E7\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_401cd4__fini = internal constant %seg_401cd4__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_401ce0__rodata = internal constant %seg_401ce0__rodata_type <{ [4 x i8] c"\01\00\02\00" }>
@seg_401ce4__eh_frame_hdr = internal constant %seg_401ce4__eh_frame_hdr_type <{ [108 x i8] c"\01\1B\03;h\00\00\00\0C\00\00\00\1C\E7\FF\FF\C4\00\00\00<\E7\FF\FF\84\00\00\00l\E7\FF\FF\B0\00\00\00,\E8\FF\FF\EC\00\00\00\9C\E9\FF\FF\08\01\00\00\EC\EA\FF\FF$\01\00\00L\EC\FF\FF@\01\00\00\8C\FB\FF\FF\5C\01\00\00\BC\FC\FF\FFx\01\00\00L\FE\FF\FF\94\01\00\00|\FF\FF\FF\B4\01\00\00\EC\FF\FF\FF\FC\01\00\00" }>
@seg_401d50__eh_frame = internal constant %seg_401d50__eh_frame_type <{ [424 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00\B0\E6\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00\B4\E6\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00P\E6\FF\FF \00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\008\E7\FF\FFl\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00\8C\E8\FF\FFL\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\90\00\00\00\C0\E9\FF\FF]\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\AC\00\00\00\04\EB\FF\FF6\0F\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\00\00\00(\FA\FF\FF!\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\00\00\00<\FB\FF\FF\8F\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\1C\00\00\00\00\01\00\00\B0\FC\FF\FF,\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\00\00\00\00D\00\00\00 \01\00\00\C0\FD\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00h\01\00\00\E8\FD\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_602df0__init_array = internal global %seg_602df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400500_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004d0___do_global_dtors_aux to i64) }>
@seg_602ff0__got = internal global %seg_602ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_603000__got_plt = internal global %seg_603000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 ()* @random to i64) }>
@seg_603020__data = internal global %seg_603020__data_type <{ [16 x i8] zeroinitializer, [36 x i8] c"\01\00\00\00\00\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00" }>
@seg_603060__bss = internal global %seg_603060__bss_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400500_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004d0___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_401cd0___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_401c60___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @rsenc_204_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @rsdec_204_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @random() #13

; Function Attrs: noinline
define %struct.Memory* @sub_400500_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400500:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_400490_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_400930_decode_rs(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400930:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 7
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %17 = bitcast %union.anon* %16 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %17, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EAX = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %ECX = bitcast %union.anon* %23 to i32*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %EDX = bitcast %union.anon* %26 to i32*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %ESI = bitcast %union.anon* %29 to i32*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %EDI = bitcast %union.anon* %32 to i32*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 17
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R8D = bitcast %union.anon* %35 to i32*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 1
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RAX = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 5
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RCX = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 7
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %RDX = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 9
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %RSI = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 11
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %RDI = bitcast %union.anon* %50 to i64*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 13
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %RSP = bitcast %union.anon* %53 to i64*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %55 = getelementptr inbounds %struct.GPR, %struct.GPR* %54, i32 0, i32 15
  %56 = getelementptr inbounds %struct.Reg, %struct.Reg* %55, i32 0, i32 0
  %RBP = bitcast %union.anon* %56 to i64*
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %58 = getelementptr inbounds %struct.GPR, %struct.GPR* %57, i32 0, i32 17
  %59 = getelementptr inbounds %struct.Reg, %struct.Reg* %58, i32 0, i32 0
  %R8 = bitcast %union.anon* %59 to i64*
  %60 = load i64, i64* %RBP
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 1
  store i64 %62, i64* %PC
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %64 = load i64, i64* %63, align 8, !tbaa !2428
  %65 = add i64 %64, -8
  %66 = inttoptr i64 %65 to i64*
  store i64 %60, i64* %66
  store i64 %65, i64* %63, align 8, !tbaa !2428
  %67 = load i64, i64* %RSP
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 3
  store i64 %69, i64* %PC
  store i64 %67, i64* %RBP, align 8, !tbaa !2428
  %70 = load i64, i64* %RSP
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 7
  store i64 %72, i64* %PC
  %73 = sub i64 %70, 2608
  store i64 %73, i64* %RSP, align 8, !tbaa !2428
  %74 = icmp ult i64 %70, 2608
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %75, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %73 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = xor i64 2608, %70
  %85 = xor i64 %84, %73
  %86 = lshr i64 %85, 4
  %87 = trunc i64 %86 to i8
  %88 = and i8 %87, 1
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %88, i8* %89, align 1, !tbaa !2447
  %90 = icmp eq i64 %73, 0
  %91 = zext i1 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %91, i8* %92, align 1, !tbaa !2448
  %93 = lshr i64 %73, 63
  %94 = trunc i64 %93 to i8
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %94, i8* %95, align 1, !tbaa !2449
  %96 = lshr i64 %70, 63
  %97 = xor i64 %93, %96
  %98 = add nuw nsw i64 %97, %96
  %99 = icmp eq i64 %98, 2
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %100, i8* %101, align 1, !tbaa !2450
  %102 = load i64, i64* %RBP
  %103 = sub i64 %102, 1492
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 10
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  store i32 0, i32* %106
  %107 = load i64, i64* %RBP
  %108 = sub i64 %107, 1496
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 10
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %108 to i32*
  store i32 0, i32* %111
  %112 = load i64, i64* %RBP
  %113 = sub i64 %112, 4
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 7
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %113 to i32*
  store i32 1, i32* %116
  br label %block_400956

block_4015fc:                                     ; preds = %block_4015e8
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 8
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 3
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  %122 = load i32, i32* %121
  %123 = zext i32 %122 to i64
  store i64 %123, i64* %RAX, align 8, !tbaa !2428
  %124 = load i32, i32* %EAX
  %125 = zext i32 %124 to i64
  %126 = load i64, i64* %RBP
  %127 = sub i64 %126, 4
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 3
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %127 to i32*
  %131 = load i32, i32* %130
  %132 = sub i32 %124, %131
  %133 = icmp ult i32 %124, %131
  %134 = zext i1 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %134, i8* %135, align 1, !tbaa !2432
  %136 = and i32 %132, 255
  %137 = call i32 @llvm.ctpop.i32(i32 %136) #16
  %138 = trunc i32 %137 to i8
  %139 = and i8 %138, 1
  %140 = xor i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %140, i8* %141, align 1, !tbaa !2446
  %142 = xor i32 %131, %124
  %143 = xor i32 %142, %132
  %144 = lshr i32 %143, 4
  %145 = trunc i32 %144 to i8
  %146 = and i8 %145, 1
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %146, i8* %147, align 1, !tbaa !2447
  %148 = icmp eq i32 %132, 0
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %149, i8* %150, align 1, !tbaa !2448
  %151 = lshr i32 %132, 31
  %152 = trunc i32 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %152, i8* %153, align 1, !tbaa !2449
  %154 = lshr i32 %124, 31
  %155 = lshr i32 %131, 31
  %156 = xor i32 %155, %154
  %157 = xor i32 %151, %154
  %158 = add nuw nsw i32 %157, %156
  %159 = icmp eq i32 %158, 2
  %160 = zext i1 %159 to i8
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %160, i8* %161, align 1, !tbaa !2450
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 79
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 6
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 6
  store i64 %167, i64* %PC
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %169 = load i8, i8* %168, align 1, !tbaa !2448
  store i8 %169, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %171 = icmp ne i8 %169, 0
  %172 = select i1 %171, i64 %163, i64 %165
  store i64 %172, i64* %170, align 8, !tbaa !2428
  %173 = load i8, i8* %BRANCH_TAKEN
  %174 = icmp eq i8 %173, 1
  br i1 %174, label %block_401651, label %block_401608

block_4017f4:                                     ; preds = %block_401845, %block_4017ed
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.8, %block_4017ed ], [ %MEMORY.41, %block_401845 ]
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 4
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 7
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i32*
  %180 = load i32, i32* %179
  %181 = sub i32 %180, 255
  %182 = icmp ult i32 %180, 255
  %183 = zext i1 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %183, i8* %184, align 1, !tbaa !2432
  %185 = and i32 %181, 255
  %186 = call i32 @llvm.ctpop.i32(i32 %185) #16
  %187 = trunc i32 %186 to i8
  %188 = and i8 %187, 1
  %189 = xor i8 %188, 1
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %189, i8* %190, align 1, !tbaa !2446
  %191 = xor i32 %180, 255
  %192 = xor i32 %191, %181
  %193 = lshr i32 %192, 4
  %194 = trunc i32 %193 to i8
  %195 = and i8 %194, 1
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %195, i8* %196, align 1, !tbaa !2447
  %197 = icmp eq i32 %181, 0
  %198 = zext i1 %197 to i8
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %198, i8* %199, align 1, !tbaa !2448
  %200 = lshr i32 %181, 31
  %201 = trunc i32 %200 to i8
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %201, i8* %202, align 1, !tbaa !2449
  %203 = lshr i32 %180, 31
  %204 = xor i32 %200, %203
  %205 = add nuw nsw i32 %204, %203
  %206 = icmp eq i32 %205, 2
  %207 = zext i1 %206 to i8
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %207, i8* %208, align 1, !tbaa !2450
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 93
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 6
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 6
  store i64 %214, i64* %PC
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %216 = load i8, i8* %215, align 1, !tbaa !2449
  %217 = icmp ne i8 %216, 0
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %219 = load i8, i8* %218, align 1, !tbaa !2450
  %220 = icmp ne i8 %219, 0
  %221 = xor i1 %217, %220
  %222 = xor i1 %221, true
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %225 = select i1 %221, i64 %212, i64 %210
  store i64 %225, i64* %224, align 8, !tbaa !2428
  %226 = load i8, i8* %BRANCH_TAKEN
  %227 = icmp eq i8 %226, 1
  br i1 %227, label %block_401858, label %block_401801

block_4017e8:                                     ; preds = %block_401773, %block_4017e3
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.4, %block_4017e3 ], [ %MEMORY.20, %block_401773 ]
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 117
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 5
  store i64 %231, i64* %PC
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %229, i64* %232, align 8, !tbaa !2428
  br label %block_40185d

block_400c51:                                     ; preds = %block_400c42
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 5
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 5
  store i64 %236, i64* %PC
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %234, i64* %237, align 8, !tbaa !2428
  br label %block_400c56

block_400ddf:                                     ; preds = %block_400dcb
  %238 = load i64, i64* %RBP
  %239 = sub i64 %238, 1168
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 7
  store i64 %241, i64* %PC
  store i64 %239, i64* %RAX, align 8, !tbaa !2428
  %242 = load i64, i64* %RBP
  %243 = sub i64 %242, 12
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 4
  store i64 %245, i64* %PC
  %246 = inttoptr i64 %243 to i32*
  %247 = load i32, i32* %246
  %248 = sext i32 %247 to i64
  store i64 %248, i64* %RCX, align 8, !tbaa !2428
  %249 = load i64, i64* %RCX
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = shl i64 %249, 5
  %253 = icmp slt i64 %252, 0
  %254 = shl i64 %252, 1
  store i64 %254, i64* %RCX, align 8, !tbaa !2428
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %256 = zext i1 %253 to i8
  store i8 %256, i8* %255, align 1, !tbaa !2451
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %258 = trunc i64 %254 to i32
  %259 = and i32 %258, 254
  %260 = call i32 @llvm.ctpop.i32(i32 %259) #16
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  store i8 %263, i8* %257, align 1, !tbaa !2451
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %264, align 1, !tbaa !2451
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %266 = icmp eq i64 %254, 0
  %267 = zext i1 %266 to i8
  store i8 %267, i8* %265, align 1, !tbaa !2451
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %269 = lshr i64 %254, 63
  %270 = trunc i64 %269 to i8
  store i8 %270, i8* %268, align 1, !tbaa !2451
  %271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %271, align 1, !tbaa !2451
  %272 = load i64, i64* %RAX
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 3
  store i64 %274, i64* %PC
  store i64 %272, i64* %RDX, align 8, !tbaa !2428
  %275 = load i64, i64* %RDX
  %276 = load i64, i64* %RCX
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 3
  store i64 %278, i64* %PC
  %279 = add i64 %276, %275
  store i64 %279, i64* %RDX, align 8, !tbaa !2428
  %280 = icmp ult i64 %279, %275
  %281 = icmp ult i64 %279, %276
  %282 = or i1 %280, %281
  %283 = zext i1 %282 to i8
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %283, i8* %284, align 1, !tbaa !2432
  %285 = trunc i64 %279 to i32
  %286 = and i32 %285, 255
  %287 = call i32 @llvm.ctpop.i32(i32 %286) #16
  %288 = trunc i32 %287 to i8
  %289 = and i8 %288, 1
  %290 = xor i8 %289, 1
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %290, i8* %291, align 1, !tbaa !2446
  %292 = xor i64 %276, %275
  %293 = xor i64 %292, %279
  %294 = lshr i64 %293, 4
  %295 = trunc i64 %294 to i8
  %296 = and i8 %295, 1
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %296, i8* %297, align 1, !tbaa !2447
  %298 = icmp eq i64 %279, 0
  %299 = zext i1 %298 to i8
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %299, i8* %300, align 1, !tbaa !2448
  %301 = lshr i64 %279, 63
  %302 = trunc i64 %301 to i8
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %302, i8* %303, align 1, !tbaa !2449
  %304 = lshr i64 %275, 63
  %305 = lshr i64 %276, 63
  %306 = xor i64 %301, %304
  %307 = xor i64 %301, %305
  %308 = add nuw nsw i64 %306, %307
  %309 = icmp eq i64 %308, 2
  %310 = zext i1 %309 to i8
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %310, i8* %311, align 1, !tbaa !2450
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 4
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 4
  store i64 %315, i64* %PC
  %316 = inttoptr i64 %313 to i32*
  %317 = load i32, i32* %316
  %318 = sext i32 %317 to i64
  store i64 %318, i64* %RCX, align 8, !tbaa !2428
  %319 = load i64, i64* %RDX
  %320 = load i64, i64* %RCX
  %321 = mul i64 %320, 4
  %322 = add i64 %321, %319
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 3
  store i64 %324, i64* %PC
  %325 = inttoptr i64 %322 to i32*
  %326 = load i32, i32* %325
  %327 = zext i32 %326 to i64
  store i64 %327, i64* %RSI, align 8, !tbaa !2428
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 12
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %335 = load i64, i64* %RDI
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 3
  store i64 %337, i64* %PC
  %338 = trunc i64 %335 to i32
  %339 = add i32 1, %338
  %340 = zext i32 %339 to i64
  store i64 %340, i64* %RDI, align 8, !tbaa !2428
  %341 = icmp ult i32 %339, %338
  %342 = icmp ult i32 %339, 1
  %343 = or i1 %341, %342
  %344 = zext i1 %343 to i8
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %344, i8* %345, align 1, !tbaa !2432
  %346 = and i32 %339, 255
  %347 = call i32 @llvm.ctpop.i32(i32 %346) #16
  %348 = trunc i32 %347 to i8
  %349 = and i8 %348, 1
  %350 = xor i8 %349, 1
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %350, i8* %351, align 1, !tbaa !2446
  %352 = xor i64 1, %335
  %353 = trunc i64 %352 to i32
  %354 = xor i32 %353, %339
  %355 = lshr i32 %354, 4
  %356 = trunc i32 %355 to i8
  %357 = and i8 %356, 1
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %357, i8* %358, align 1, !tbaa !2447
  %359 = icmp eq i32 %339, 0
  %360 = zext i1 %359 to i8
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %360, i8* %361, align 1, !tbaa !2448
  %362 = lshr i32 %339, 31
  %363 = trunc i32 %362 to i8
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %363, i8* %364, align 1, !tbaa !2449
  %365 = lshr i32 %338, 31
  %366 = xor i32 %362, %365
  %367 = add nuw nsw i32 %366, %362
  %368 = icmp eq i32 %367, 2
  %369 = zext i1 %368 to i8
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %369, i8* %370, align 1, !tbaa !2450
  %371 = load i32, i32* %EDI
  %372 = zext i32 %371 to i64
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 3
  store i64 %374, i64* %PC
  %375 = shl i64 %372, 32
  %376 = ashr exact i64 %375, 32
  store i64 %376, i64* %RCX, align 8, !tbaa !2428
  %377 = load i64, i64* %RCX
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 4
  store i64 %379, i64* %PC
  %380 = shl i64 %377, 5
  %381 = icmp slt i64 %380, 0
  %382 = shl i64 %380, 1
  store i64 %382, i64* %RCX, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %384 = zext i1 %381 to i8
  store i8 %384, i8* %383, align 1, !tbaa !2451
  %385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %386 = trunc i64 %382 to i32
  %387 = and i32 %386, 254
  %388 = call i32 @llvm.ctpop.i32(i32 %387) #16
  %389 = trunc i32 %388 to i8
  %390 = and i8 %389, 1
  %391 = xor i8 %390, 1
  store i8 %391, i8* %385, align 1, !tbaa !2451
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %392, align 1, !tbaa !2451
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %394 = icmp eq i64 %382, 0
  %395 = zext i1 %394 to i8
  store i8 %395, i8* %393, align 1, !tbaa !2451
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %397 = lshr i64 %382, 63
  %398 = trunc i64 %397 to i8
  store i8 %398, i8* %396, align 1, !tbaa !2451
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %399, align 1, !tbaa !2451
  %400 = load i64, i64* %RAX
  %401 = load i64, i64* %PC
  %402 = add i64 %401, 3
  store i64 %402, i64* %PC
  store i64 %400, i64* %RDX, align 8, !tbaa !2428
  %403 = load i64, i64* %RDX
  %404 = load i64, i64* %RCX
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 3
  store i64 %406, i64* %PC
  %407 = add i64 %404, %403
  store i64 %407, i64* %RDX, align 8, !tbaa !2428
  %408 = icmp ult i64 %407, %403
  %409 = icmp ult i64 %407, %404
  %410 = or i1 %408, %409
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %411, i8* %412, align 1, !tbaa !2432
  %413 = trunc i64 %407 to i32
  %414 = and i32 %413, 255
  %415 = call i32 @llvm.ctpop.i32(i32 %414) #16
  %416 = trunc i32 %415 to i8
  %417 = and i8 %416, 1
  %418 = xor i8 %417, 1
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %418, i8* %419, align 1, !tbaa !2446
  %420 = xor i64 %404, %403
  %421 = xor i64 %420, %407
  %422 = lshr i64 %421, 4
  %423 = trunc i64 %422 to i8
  %424 = and i8 %423, 1
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %424, i8* %425, align 1, !tbaa !2447
  %426 = icmp eq i64 %407, 0
  %427 = zext i1 %426 to i8
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %427, i8* %428, align 1, !tbaa !2448
  %429 = lshr i64 %407, 63
  %430 = trunc i64 %429 to i8
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %430, i8* %431, align 1, !tbaa !2449
  %432 = lshr i64 %403, 63
  %433 = lshr i64 %404, 63
  %434 = xor i64 %429, %432
  %435 = xor i64 %429, %433
  %436 = add nuw nsw i64 %434, %435
  %437 = icmp eq i64 %436, 2
  %438 = zext i1 %437 to i8
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %438, i8* %439, align 1, !tbaa !2450
  %440 = load i64, i64* %RBP
  %441 = sub i64 %440, 4
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 4
  store i64 %443, i64* %PC
  %444 = inttoptr i64 %441 to i32*
  %445 = load i32, i32* %444
  %446 = sext i32 %445 to i64
  store i64 %446, i64* %RCX, align 8, !tbaa !2428
  %447 = load i64, i64* %RSI
  %448 = load i64, i64* %RDX
  %449 = load i64, i64* %RCX
  %450 = mul i64 %449, 4
  %451 = add i64 %450, %448
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 3
  store i64 %453, i64* %PC
  %454 = trunc i64 %447 to i32
  %455 = inttoptr i64 %451 to i32*
  %456 = load i32, i32* %455
  %457 = xor i32 %456, %454
  %458 = zext i32 %457 to i64
  store i64 %458, i64* %RSI, align 8, !tbaa !2428
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %459, align 1, !tbaa !2432
  %460 = and i32 %457, 255
  %461 = call i32 @llvm.ctpop.i32(i32 %460) #16
  %462 = trunc i32 %461 to i8
  %463 = and i8 %462, 1
  %464 = xor i8 %463, 1
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %464, i8* %465, align 1, !tbaa !2446
  %466 = icmp eq i32 %457, 0
  %467 = zext i1 %466 to i8
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %467, i8* %468, align 1, !tbaa !2448
  %469 = lshr i32 %457, 31
  %470 = trunc i32 %469 to i8
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %470, i8* %471, align 1, !tbaa !2449
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %472, align 1, !tbaa !2450
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %473, align 1, !tbaa !2447
  %474 = load i64, i64* %RDX
  %475 = load i64, i64* %RCX
  %476 = mul i64 %475, 4
  %477 = add i64 %476, %474
  %478 = load i32, i32* %ESI
  %479 = zext i32 %478 to i64
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 3
  store i64 %481, i64* %PC
  %482 = inttoptr i64 %477 to i32*
  store i32 %478, i32* %482
  %483 = load i64, i64* %RBP
  %484 = sub i64 %483, 12
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 4
  store i64 %486, i64* %PC
  %487 = inttoptr i64 %484 to i32*
  %488 = load i32, i32* %487
  %489 = sext i32 %488 to i64
  store i64 %489, i64* %RCX, align 8, !tbaa !2428
  %490 = load i64, i64* %RCX
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 4
  store i64 %492, i64* %PC
  %493 = shl i64 %490, 5
  %494 = icmp slt i64 %493, 0
  %495 = shl i64 %493, 1
  store i64 %495, i64* %RCX, align 8, !tbaa !2428
  %496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %497 = zext i1 %494 to i8
  store i8 %497, i8* %496, align 1, !tbaa !2451
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %499 = trunc i64 %495 to i32
  %500 = and i32 %499, 254
  %501 = call i32 @llvm.ctpop.i32(i32 %500) #16
  %502 = trunc i32 %501 to i8
  %503 = and i8 %502, 1
  %504 = xor i8 %503, 1
  store i8 %504, i8* %498, align 1, !tbaa !2451
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %505, align 1, !tbaa !2451
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %507 = icmp eq i64 %495, 0
  %508 = zext i1 %507 to i8
  store i8 %508, i8* %506, align 1, !tbaa !2451
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %510 = lshr i64 %495, 63
  %511 = trunc i64 %510 to i8
  store i8 %511, i8* %509, align 1, !tbaa !2451
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %512, align 1, !tbaa !2451
  %513 = load i64, i64* %RAX
  %514 = load i64, i64* %PC
  %515 = add i64 %514, 3
  store i64 %515, i64* %PC
  store i64 %513, i64* %RDX, align 8, !tbaa !2428
  %516 = load i64, i64* %RDX
  %517 = load i64, i64* %RCX
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 3
  store i64 %519, i64* %PC
  %520 = add i64 %517, %516
  store i64 %520, i64* %RDX, align 8, !tbaa !2428
  %521 = icmp ult i64 %520, %516
  %522 = icmp ult i64 %520, %517
  %523 = or i1 %521, %522
  %524 = zext i1 %523 to i8
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %524, i8* %525, align 1, !tbaa !2432
  %526 = trunc i64 %520 to i32
  %527 = and i32 %526, 255
  %528 = call i32 @llvm.ctpop.i32(i32 %527) #16
  %529 = trunc i32 %528 to i8
  %530 = and i8 %529, 1
  %531 = xor i8 %530, 1
  %532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %531, i8* %532, align 1, !tbaa !2446
  %533 = xor i64 %517, %516
  %534 = xor i64 %533, %520
  %535 = lshr i64 %534, 4
  %536 = trunc i64 %535 to i8
  %537 = and i8 %536, 1
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %537, i8* %538, align 1, !tbaa !2447
  %539 = icmp eq i64 %520, 0
  %540 = zext i1 %539 to i8
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %540, i8* %541, align 1, !tbaa !2448
  %542 = lshr i64 %520, 63
  %543 = trunc i64 %542 to i8
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %543, i8* %544, align 1, !tbaa !2449
  %545 = lshr i64 %516, 63
  %546 = lshr i64 %517, 63
  %547 = xor i64 %542, %545
  %548 = xor i64 %542, %546
  %549 = add nuw nsw i64 %547, %548
  %550 = icmp eq i64 %549, 2
  %551 = zext i1 %550 to i8
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %551, i8* %552, align 1, !tbaa !2450
  %553 = load i64, i64* %RBP
  %554 = sub i64 %553, 4
  %555 = load i64, i64* %PC
  %556 = add i64 %555, 4
  store i64 %556, i64* %PC
  %557 = inttoptr i64 %554 to i32*
  %558 = load i32, i32* %557
  %559 = sext i32 %558 to i64
  store i64 %559, i64* %RCX, align 8, !tbaa !2428
  %560 = load i64, i64* %RDX
  %561 = load i64, i64* %RCX
  %562 = mul i64 %561, 4
  %563 = add i64 %562, %560
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 4
  store i64 %565, i64* %PC
  %566 = inttoptr i64 %563 to i32*
  %567 = load i32, i32* %566
  %568 = sext i32 %567 to i64
  store i64 %568, i64* %RCX, align 8, !tbaa !2428
  %569 = load i64, i64* %RCX
  %570 = mul i64 %569, 4
  %571 = add i64 %570, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %572 = load i64, i64* %PC
  %573 = add i64 %572, 7
  store i64 %573, i64* %PC
  %574 = inttoptr i64 %571 to i32*
  %575 = load i32, i32* %574
  %576 = zext i32 %575 to i64
  store i64 %576, i64* %RSI, align 8, !tbaa !2428
  %577 = load i64, i64* %RBP
  %578 = sub i64 %577, 12
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 4
  store i64 %580, i64* %PC
  %581 = inttoptr i64 %578 to i32*
  %582 = load i32, i32* %581
  %583 = sext i32 %582 to i64
  store i64 %583, i64* %RCX, align 8, !tbaa !2428
  %584 = load i64, i64* %RCX
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 4
  store i64 %586, i64* %PC
  %587 = shl i64 %584, 5
  %588 = icmp slt i64 %587, 0
  %589 = shl i64 %587, 1
  store i64 %589, i64* %RCX, align 8, !tbaa !2428
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %591 = zext i1 %588 to i8
  store i8 %591, i8* %590, align 1, !tbaa !2451
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %593 = trunc i64 %589 to i32
  %594 = and i32 %593, 254
  %595 = call i32 @llvm.ctpop.i32(i32 %594) #16
  %596 = trunc i32 %595 to i8
  %597 = and i8 %596, 1
  %598 = xor i8 %597, 1
  store i8 %598, i8* %592, align 1, !tbaa !2451
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %599, align 1, !tbaa !2451
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %601 = icmp eq i64 %589, 0
  %602 = zext i1 %601 to i8
  store i8 %602, i8* %600, align 1, !tbaa !2451
  %603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %604 = lshr i64 %589, 63
  %605 = trunc i64 %604 to i8
  store i8 %605, i8* %603, align 1, !tbaa !2451
  %606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %606, align 1, !tbaa !2451
  %607 = load i64, i64* %RAX
  %608 = load i64, i64* %RCX
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 3
  store i64 %610, i64* %PC
  %611 = add i64 %608, %607
  store i64 %611, i64* %RAX, align 8, !tbaa !2428
  %612 = icmp ult i64 %611, %607
  %613 = icmp ult i64 %611, %608
  %614 = or i1 %612, %613
  %615 = zext i1 %614 to i8
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %615, i8* %616, align 1, !tbaa !2432
  %617 = trunc i64 %611 to i32
  %618 = and i32 %617, 255
  %619 = call i32 @llvm.ctpop.i32(i32 %618) #16
  %620 = trunc i32 %619 to i8
  %621 = and i8 %620, 1
  %622 = xor i8 %621, 1
  %623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %622, i8* %623, align 1, !tbaa !2446
  %624 = xor i64 %608, %607
  %625 = xor i64 %624, %611
  %626 = lshr i64 %625, 4
  %627 = trunc i64 %626 to i8
  %628 = and i8 %627, 1
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %628, i8* %629, align 1, !tbaa !2447
  %630 = icmp eq i64 %611, 0
  %631 = zext i1 %630 to i8
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %631, i8* %632, align 1, !tbaa !2448
  %633 = lshr i64 %611, 63
  %634 = trunc i64 %633 to i8
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %634, i8* %635, align 1, !tbaa !2449
  %636 = lshr i64 %607, 63
  %637 = lshr i64 %608, 63
  %638 = xor i64 %633, %636
  %639 = xor i64 %633, %637
  %640 = add nuw nsw i64 %638, %639
  %641 = icmp eq i64 %640, 2
  %642 = zext i1 %641 to i8
  %643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %642, i8* %643, align 1, !tbaa !2450
  %644 = load i64, i64* %RBP
  %645 = sub i64 %644, 4
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 4
  store i64 %647, i64* %PC
  %648 = inttoptr i64 %645 to i32*
  %649 = load i32, i32* %648
  %650 = sext i32 %649 to i64
  store i64 %650, i64* %RCX, align 8, !tbaa !2428
  %651 = load i64, i64* %RAX
  %652 = load i64, i64* %RCX
  %653 = mul i64 %652, 4
  %654 = add i64 %653, %651
  %655 = load i32, i32* %ESI
  %656 = zext i32 %655 to i64
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 3
  store i64 %658, i64* %PC
  %659 = inttoptr i64 %654 to i32*
  store i32 %655, i32* %659
  %660 = load i64, i64* %RBP
  %661 = sub i64 %660, 4
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 3
  store i64 %663, i64* %PC
  %664 = inttoptr i64 %661 to i32*
  %665 = load i32, i32* %664
  %666 = zext i32 %665 to i64
  store i64 %666, i64* %RAX, align 8, !tbaa !2428
  %667 = load i64, i64* %RAX
  %668 = load i64, i64* %PC
  %669 = add i64 %668, 3
  store i64 %669, i64* %PC
  %670 = trunc i64 %667 to i32
  %671 = add i32 1, %670
  %672 = zext i32 %671 to i64
  store i64 %672, i64* %RAX, align 8, !tbaa !2428
  %673 = icmp ult i32 %671, %670
  %674 = icmp ult i32 %671, 1
  %675 = or i1 %673, %674
  %676 = zext i1 %675 to i8
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %676, i8* %677, align 1, !tbaa !2432
  %678 = and i32 %671, 255
  %679 = call i32 @llvm.ctpop.i32(i32 %678) #16
  %680 = trunc i32 %679 to i8
  %681 = and i8 %680, 1
  %682 = xor i8 %681, 1
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %682, i8* %683, align 1, !tbaa !2446
  %684 = xor i64 1, %667
  %685 = trunc i64 %684 to i32
  %686 = xor i32 %685, %671
  %687 = lshr i32 %686, 4
  %688 = trunc i32 %687 to i8
  %689 = and i8 %688, 1
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %689, i8* %690, align 1, !tbaa !2447
  %691 = icmp eq i32 %671, 0
  %692 = zext i1 %691 to i8
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %692, i8* %693, align 1, !tbaa !2448
  %694 = lshr i32 %671, 31
  %695 = trunc i32 %694 to i8
  %696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %695, i8* %696, align 1, !tbaa !2449
  %697 = lshr i32 %670, 31
  %698 = xor i32 %694, %697
  %699 = add nuw nsw i32 %698, %694
  %700 = icmp eq i32 %699, 2
  %701 = zext i1 %700 to i8
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %701, i8* %702, align 1, !tbaa !2450
  %703 = load i64, i64* %RBP
  %704 = sub i64 %703, 4
  %705 = load i32, i32* %EAX
  %706 = zext i32 %705 to i64
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 3
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %704 to i32*
  store i32 %705, i32* %709
  %710 = load i64, i64* %PC
  %711 = sub i64 %710, 133
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 5
  store i64 %713, i64* %PC
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %711, i64* %714, align 8, !tbaa !2428
  br label %block_400dcb

block_4009db:                                     ; preds = %block_400983, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit6
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.12, %block_400983 ], [ %1901, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit6 ]
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 5
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 5
  store i64 %718, i64* %PC
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %716, i64* %719, align 8, !tbaa !2428
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 8
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724
  %726 = zext i32 %725 to i64
  store i64 %726, i64* %RAX, align 8, !tbaa !2428
  %727 = load i64, i64* %RAX
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 3
  store i64 %729, i64* %PC
  %730 = trunc i64 %727 to i32
  %731 = add i32 1, %730
  %732 = zext i32 %731 to i64
  store i64 %732, i64* %RAX, align 8, !tbaa !2428
  %733 = icmp ult i32 %731, %730
  %734 = icmp ult i32 %731, 1
  %735 = or i1 %733, %734
  %736 = zext i1 %735 to i8
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %736, i8* %737, align 1, !tbaa !2432
  %738 = and i32 %731, 255
  %739 = call i32 @llvm.ctpop.i32(i32 %738) #16
  %740 = trunc i32 %739 to i8
  %741 = and i8 %740, 1
  %742 = xor i8 %741, 1
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %742, i8* %743, align 1, !tbaa !2446
  %744 = xor i64 1, %727
  %745 = trunc i64 %744 to i32
  %746 = xor i32 %745, %731
  %747 = lshr i32 %746, 4
  %748 = trunc i32 %747 to i8
  %749 = and i8 %748, 1
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %749, i8* %750, align 1, !tbaa !2447
  %751 = icmp eq i32 %731, 0
  %752 = zext i1 %751 to i8
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %752, i8* %753, align 1, !tbaa !2448
  %754 = lshr i32 %731, 31
  %755 = trunc i32 %754 to i8
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %755, i8* %756, align 1, !tbaa !2449
  %757 = lshr i32 %730, 31
  %758 = xor i32 %754, %757
  %759 = add nuw nsw i32 %758, %754
  %760 = icmp eq i32 %759, 2
  %761 = zext i1 %760 to i8
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %761, i8* %762, align 1, !tbaa !2450
  %763 = load i64, i64* %RBP
  %764 = sub i64 %763, 8
  %765 = load i32, i32* %EAX
  %766 = zext i32 %765 to i64
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 3
  store i64 %768, i64* %PC
  %769 = inttoptr i64 %764 to i32*
  store i32 %765, i32* %769
  %770 = load i64, i64* %PC
  %771 = sub i64 %770, 115
  %772 = load i64, i64* %PC
  %773 = add i64 %772, 5
  store i64 %773, i64* %PC
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %771, i64* %774, align 8, !tbaa !2428
  br label %block_400976

block_400dc4:                                     ; preds = %block_400d03
  %775 = sub i64 %4619, 4
  %776 = load i64, i64* %PC
  %777 = add i64 %776, 7
  store i64 %777, i64* %PC
  %778 = inttoptr i64 %775 to i32*
  store i32 0, i32* %778
  br label %block_400dcb

block_4017c1:                                     ; preds = %block_40178c
  %779 = add i64 %2027, 11
  store i64 %779, i64* %PC
  %780 = inttoptr i64 %2026 to i32*
  store i32 0, i32* %780
  br label %block_4017d0

block_400be2:                                     ; preds = %block_400bd4
  %781 = load i64, i64* %PC
  %782 = add i64 %781, 19
  %783 = load i64, i64* %PC
  %784 = add i64 %783, 5
  store i64 %784, i64* %PC
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %782, i64* %785, align 8, !tbaa !2428
  %786 = load i64, i64* %RBP
  %787 = sub i64 %786, 16
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 4
  store i64 %789, i64* %PC
  %790 = inttoptr i64 %787 to i32*
  %791 = load i32, i32* %790
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %792, align 1, !tbaa !2432
  %793 = and i32 %791, 255
  %794 = call i32 @llvm.ctpop.i32(i32 %793) #16
  %795 = trunc i32 %794 to i8
  %796 = and i8 %795, 1
  %797 = xor i8 %796, 1
  %798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %797, i8* %798, align 1, !tbaa !2446
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %799, align 1, !tbaa !2447
  %800 = icmp eq i32 %791, 0
  %801 = zext i1 %800 to i8
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %801, i8* %802, align 1, !tbaa !2448
  %803 = lshr i32 %791, 31
  %804 = trunc i32 %803 to i8
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %804, i8* %805, align 1, !tbaa !2449
  %806 = lshr i32 %791, 31
  %807 = xor i32 %803, %806
  %808 = add nuw nsw i32 %807, %806
  %809 = icmp eq i32 %808, 2
  %810 = zext i1 %809 to i8
  %811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %810, i8* %811, align 1, !tbaa !2450
  %812 = load i64, i64* %PC
  %813 = add i64 %812, 93
  %814 = load i64, i64* %PC
  %815 = add i64 %814, 6
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 6
  store i64 %817, i64* %PC
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %819 = load i8, i8* %818, align 1, !tbaa !2448
  %820 = icmp ne i8 %819, 0
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %822 = load i8, i8* %821, align 1, !tbaa !2449
  %823 = icmp ne i8 %822, 0
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %825 = load i8, i8* %824, align 1, !tbaa !2450
  %826 = icmp ne i8 %825, 0
  %827 = xor i1 %823, %826
  %828 = or i1 %820, %827
  %829 = zext i1 %828 to i8
  store i8 %829, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %831 = select i1 %828, i64 %813, i64 %815
  store i64 %831, i64* %830, align 8, !tbaa !2428
  %832 = load i8, i8* %BRANCH_TAKEN
  %833 = icmp eq i8 %832, 1
  br i1 %833, label %block_400c56, label %block_400bff

block_4013b6:                                     ; preds = %block_401391
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 5
  store i64 %835, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %836 = load i64, i64* %RBP
  %837 = sub i64 %836, 1168
  %838 = load i64, i64* %PC
  %839 = add i64 %838, 7
  store i64 %839, i64* %PC
  store i64 %837, i64* %RCX, align 8, !tbaa !2428
  %840 = load i64, i64* %RBP
  %841 = sub i64 %840, 12
  %842 = load i64, i64* %PC
  %843 = add i64 %842, 4
  store i64 %843, i64* %PC
  %844 = inttoptr i64 %841 to i32*
  %845 = load i32, i32* %844
  %846 = sext i32 %845 to i64
  store i64 %846, i64* %RDX, align 8, !tbaa !2428
  %847 = load i64, i64* %RDX
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 4
  store i64 %849, i64* %PC
  %850 = shl i64 %847, 5
  %851 = icmp slt i64 %850, 0
  %852 = shl i64 %850, 1
  store i64 %852, i64* %RDX, align 8, !tbaa !2428
  %853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %854 = zext i1 %851 to i8
  store i8 %854, i8* %853, align 1, !tbaa !2451
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %856 = trunc i64 %852 to i32
  %857 = and i32 %856, 254
  %858 = call i32 @llvm.ctpop.i32(i32 %857) #16
  %859 = trunc i32 %858 to i8
  %860 = and i8 %859, 1
  %861 = xor i8 %860, 1
  store i8 %861, i8* %855, align 1, !tbaa !2451
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %862, align 1, !tbaa !2451
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %864 = icmp eq i64 %852, 0
  %865 = zext i1 %864 to i8
  store i8 %865, i8* %863, align 1, !tbaa !2451
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %867 = lshr i64 %852, 63
  %868 = trunc i64 %867 to i8
  store i8 %868, i8* %866, align 1, !tbaa !2451
  %869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %869, align 1, !tbaa !2451
  %870 = load i64, i64* %RCX
  %871 = load i64, i64* %RDX
  %872 = load i64, i64* %PC
  %873 = add i64 %872, 3
  store i64 %873, i64* %PC
  %874 = add i64 %871, %870
  store i64 %874, i64* %RCX, align 8, !tbaa !2428
  %875 = icmp ult i64 %874, %870
  %876 = icmp ult i64 %874, %871
  %877 = or i1 %875, %876
  %878 = zext i1 %877 to i8
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %878, i8* %879, align 1, !tbaa !2432
  %880 = trunc i64 %874 to i32
  %881 = and i32 %880, 255
  %882 = call i32 @llvm.ctpop.i32(i32 %881) #16
  %883 = trunc i32 %882 to i8
  %884 = and i8 %883, 1
  %885 = xor i8 %884, 1
  %886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %885, i8* %886, align 1, !tbaa !2446
  %887 = xor i64 %871, %870
  %888 = xor i64 %887, %874
  %889 = lshr i64 %888, 4
  %890 = trunc i64 %889 to i8
  %891 = and i8 %890, 1
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %891, i8* %892, align 1, !tbaa !2447
  %893 = icmp eq i64 %874, 0
  %894 = zext i1 %893 to i8
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %894, i8* %895, align 1, !tbaa !2448
  %896 = lshr i64 %874, 63
  %897 = trunc i64 %896 to i8
  %898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %897, i8* %898, align 1, !tbaa !2449
  %899 = lshr i64 %870, 63
  %900 = lshr i64 %871, 63
  %901 = xor i64 %896, %899
  %902 = xor i64 %896, %900
  %903 = add nuw nsw i64 %901, %902
  %904 = icmp eq i64 %903, 2
  %905 = zext i1 %904 to i8
  %906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %905, i8* %906, align 1, !tbaa !2450
  %907 = load i64, i64* %RBP
  %908 = sub i64 %907, 4
  %909 = load i64, i64* %PC
  %910 = add i64 %909, 3
  store i64 %910, i64* %PC
  %911 = inttoptr i64 %908 to i32*
  %912 = load i32, i32* %911
  %913 = zext i32 %912 to i64
  store i64 %913, i64* %RSI, align 8, !tbaa !2428
  %914 = load i64, i64* %RSI
  %915 = load i64, i64* %RBP
  %916 = sub i64 %915, 8
  %917 = load i64, i64* %PC
  %918 = add i64 %917, 3
  store i64 %918, i64* %PC
  %919 = trunc i64 %914 to i32
  %920 = inttoptr i64 %916 to i32*
  %921 = load i32, i32* %920
  %922 = sub i32 %919, %921
  %923 = zext i32 %922 to i64
  store i64 %923, i64* %RSI, align 8, !tbaa !2428
  %924 = icmp ult i32 %919, %921
  %925 = zext i1 %924 to i8
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %925, i8* %926, align 1, !tbaa !2432
  %927 = and i32 %922, 255
  %928 = call i32 @llvm.ctpop.i32(i32 %927) #16
  %929 = trunc i32 %928 to i8
  %930 = and i8 %929, 1
  %931 = xor i8 %930, 1
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %931, i8* %932, align 1, !tbaa !2446
  %933 = xor i32 %921, %919
  %934 = xor i32 %933, %922
  %935 = lshr i32 %934, 4
  %936 = trunc i32 %935 to i8
  %937 = and i8 %936, 1
  %938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %937, i8* %938, align 1, !tbaa !2447
  %939 = icmp eq i32 %922, 0
  %940 = zext i1 %939 to i8
  %941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %940, i8* %941, align 1, !tbaa !2448
  %942 = lshr i32 %922, 31
  %943 = trunc i32 %942 to i8
  %944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %943, i8* %944, align 1, !tbaa !2449
  %945 = lshr i32 %919, 31
  %946 = lshr i32 %921, 31
  %947 = xor i32 %946, %945
  %948 = xor i32 %942, %945
  %949 = add nuw nsw i32 %948, %947
  %950 = icmp eq i32 %949, 2
  %951 = zext i1 %950 to i8
  %952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %951, i8* %952, align 1, !tbaa !2450
  %953 = load i32, i32* %ESI
  %954 = zext i32 %953 to i64
  %955 = load i64, i64* %PC
  %956 = add i64 %955, 3
  store i64 %956, i64* %PC
  %957 = shl i64 %954, 32
  %958 = ashr exact i64 %957, 32
  store i64 %958, i64* %RDX, align 8, !tbaa !2428
  %959 = load i64, i64* %RCX
  %960 = load i64, i64* %RDX
  %961 = mul i64 %960, 4
  %962 = add i64 %961, %959
  %963 = load i64, i64* %PC
  %964 = add i64 %963, 3
  store i64 %964, i64* %PC
  %965 = inttoptr i64 %962 to i32*
  %966 = load i32, i32* %965
  %967 = zext i32 %966 to i64
  store i64 %967, i64* %RSI, align 8, !tbaa !2428
  %968 = load i64, i64* %RBP
  %969 = sub i64 %968, 8
  %970 = load i64, i64* %PC
  %971 = add i64 %970, 4
  store i64 %971, i64* %PC
  %972 = inttoptr i64 %969 to i32*
  %973 = load i32, i32* %972
  %974 = sext i32 %973 to i64
  store i64 %974, i64* %RCX, align 8, !tbaa !2428
  %975 = load i64, i64* %RSI
  %976 = load i64, i64* %RBP
  %977 = load i64, i64* %RCX
  %978 = mul i64 %977, 4
  %979 = add i64 %976, -1488
  %980 = add i64 %979, %978
  %981 = load i64, i64* %PC
  %982 = add i64 %981, 7
  store i64 %982, i64* %PC
  %983 = trunc i64 %975 to i32
  %984 = inttoptr i64 %980 to i32*
  %985 = load i32, i32* %984
  %986 = add i32 %985, %983
  %987 = zext i32 %986 to i64
  store i64 %987, i64* %RSI, align 8, !tbaa !2428
  %988 = icmp ult i32 %986, %983
  %989 = icmp ult i32 %986, %985
  %990 = or i1 %988, %989
  %991 = zext i1 %990 to i8
  %992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %991, i8* %992, align 1, !tbaa !2432
  %993 = and i32 %986, 255
  %994 = call i32 @llvm.ctpop.i32(i32 %993) #16
  %995 = trunc i32 %994 to i8
  %996 = and i8 %995, 1
  %997 = xor i8 %996, 1
  %998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %997, i8* %998, align 1, !tbaa !2446
  %999 = xor i32 %985, %983
  %1000 = xor i32 %999, %986
  %1001 = lshr i32 %1000, 4
  %1002 = trunc i32 %1001 to i8
  %1003 = and i8 %1002, 1
  %1004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1003, i8* %1004, align 1, !tbaa !2447
  %1005 = icmp eq i32 %986, 0
  %1006 = zext i1 %1005 to i8
  %1007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1006, i8* %1007, align 1, !tbaa !2448
  %1008 = lshr i32 %986, 31
  %1009 = trunc i32 %1008 to i8
  %1010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1009, i8* %1010, align 1, !tbaa !2449
  %1011 = lshr i32 %983, 31
  %1012 = lshr i32 %985, 31
  %1013 = xor i32 %1008, %1011
  %1014 = xor i32 %1008, %1012
  %1015 = add nuw nsw i32 %1013, %1014
  %1016 = icmp eq i32 %1015, 2
  %1017 = zext i1 %1016 to i8
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1017, i8* %1018, align 1, !tbaa !2450
  %1019 = load i64, i64* %RBP
  %1020 = sub i64 %1019, 2720
  %1021 = load i32, i32* %EAX
  %1022 = zext i32 %1021 to i64
  %1023 = load i64, i64* %PC
  %1024 = add i64 %1023, 6
  store i64 %1024, i64* %PC
  %1025 = inttoptr i64 %1020 to i32*
  store i32 %1021, i32* %1025
  %1026 = load i32, i32* %ESI
  %1027 = zext i32 %1026 to i64
  %1028 = load i64, i64* %PC
  %1029 = add i64 %1028, 2
  store i64 %1029, i64* %PC
  %1030 = and i64 %1027, 4294967295
  store i64 %1030, i64* %RAX, align 8, !tbaa !2428
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 1
  store i64 %1032, i64* %PC
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1035 = bitcast %union.anon* %1034 to i32*
  %1036 = load i32, i32* %1035, align 8, !tbaa !2452
  %1037 = sext i32 %1036 to i64
  %1038 = lshr i64 %1037, 32
  store i64 %1038, i64* %1033, align 8, !tbaa !2428
  %1039 = load i64, i64* %RBP
  %1040 = sub i64 %1039, 2720
  %1041 = load i64, i64* %PC
  %1042 = add i64 %1041, 6
  store i64 %1042, i64* %PC
  %1043 = inttoptr i64 %1040 to i32*
  %1044 = load i32, i32* %1043
  %1045 = zext i32 %1044 to i64
  store i64 %1045, i64* %RSI, align 8, !tbaa !2428
  %1046 = load i32, i32* %ESI
  %1047 = zext i32 %1046 to i64
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 2
  store i64 %1049, i64* %PC
  %1050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1051 = bitcast %union.anon* %1050 to i32*
  %1052 = load i32, i32* %1051, align 8, !tbaa !2452
  %1053 = zext i32 %1052 to i64
  %1054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %1055 = bitcast %union.anon* %1054 to i32*
  %1056 = load i32, i32* %1055, align 8, !tbaa !2452
  %1057 = zext i32 %1056 to i64
  %1058 = shl i64 %1047, 32
  %1059 = ashr exact i64 %1058, 32
  %1060 = shl nuw i64 %1057, 32
  %1061 = or i64 %1060, %1053
  %1062 = sdiv i64 %1061, %1059
  %1063 = shl i64 %1062, 32
  %1064 = ashr exact i64 %1063, 32
  %1065 = icmp eq i64 %1062, %1064
  br i1 %1065, label %1070, label %1066

; <label>:1066:                                   ; preds = %block_4013b6
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1068 = load i64, i64* %1067, align 8, !tbaa !2428
  %1069 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1068, %struct.Memory* %MEMORY.43) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit8

; <label>:1070:                                   ; preds = %block_4013b6
  %1071 = srem i64 %1061, %1059
  %1072 = getelementptr inbounds %union.anon, %union.anon* %1050, i64 0, i32 0
  %1073 = and i64 %1062, 4294967295
  store i64 %1073, i64* %1072, align 8, !tbaa !2428
  %1074 = getelementptr inbounds %union.anon, %union.anon* %1054, i64 0, i32 0
  %1075 = and i64 %1071, 4294967295
  store i64 %1075, i64* %1074, align 8, !tbaa !2428
  %1076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1076, align 1, !tbaa !2432
  %1077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1077, align 1, !tbaa !2446
  %1078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1078, align 1, !tbaa !2447
  %1079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1079, align 1, !tbaa !2448
  %1080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1080, align 1, !tbaa !2449
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1081, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit8

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit8: ; preds = %1066, %1070
  %1082 = phi %struct.Memory* [ %1069, %1066 ], [ %MEMORY.43, %1070 ]
  %1083 = load i32, i32* %EDX
  %1084 = zext i32 %1083 to i64
  %1085 = load i64, i64* %PC
  %1086 = add i64 %1085, 3
  store i64 %1086, i64* %PC
  %1087 = shl i64 %1084, 32
  %1088 = ashr exact i64 %1087, 32
  store i64 %1088, i64* %RCX, align 8, !tbaa !2428
  %1089 = load i64, i64* %RCX
  %1090 = mul i64 %1089, 4
  %1091 = add i64 %1090, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %1092 = load i64, i64* %PC
  %1093 = add i64 %1092, 7
  store i64 %1093, i64* %PC
  %1094 = inttoptr i64 %1091 to i32*
  %1095 = load i32, i32* %1094
  %1096 = zext i32 %1095 to i64
  store i64 %1096, i64* %RDX, align 8, !tbaa !2428
  %1097 = load i64, i64* %RBP
  %1098 = sub i64 %1097, 4
  %1099 = load i64, i64* %PC
  %1100 = add i64 %1099, 4
  store i64 %1100, i64* %PC
  %1101 = inttoptr i64 %1098 to i32*
  %1102 = load i32, i32* %1101
  %1103 = sext i32 %1102 to i64
  store i64 %1103, i64* %RCX, align 8, !tbaa !2428
  %1104 = load i64, i64* %RDX
  %1105 = load i64, i64* %RBP
  %1106 = load i64, i64* %RCX
  %1107 = mul i64 %1106, 4
  %1108 = add i64 %1105, -1616
  %1109 = add i64 %1108, %1107
  %1110 = load i64, i64* %PC
  %1111 = add i64 %1110, 7
  store i64 %1111, i64* %PC
  %1112 = trunc i64 %1104 to i32
  %1113 = inttoptr i64 %1109 to i32*
  %1114 = load i32, i32* %1113
  %1115 = xor i32 %1114, %1112
  %1116 = zext i32 %1115 to i64
  store i64 %1116, i64* %RDX, align 8, !tbaa !2428
  %1117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1117, align 1, !tbaa !2432
  %1118 = and i32 %1115, 255
  %1119 = call i32 @llvm.ctpop.i32(i32 %1118) #16
  %1120 = trunc i32 %1119 to i8
  %1121 = and i8 %1120, 1
  %1122 = xor i8 %1121, 1
  %1123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1122, i8* %1123, align 1, !tbaa !2446
  %1124 = icmp eq i32 %1115, 0
  %1125 = zext i1 %1124 to i8
  %1126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1125, i8* %1126, align 1, !tbaa !2448
  %1127 = lshr i32 %1115, 31
  %1128 = trunc i32 %1127 to i8
  %1129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1128, i8* %1129, align 1, !tbaa !2449
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1130, align 1, !tbaa !2450
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1131, align 1, !tbaa !2447
  %1132 = load i64, i64* %RBP
  %1133 = load i64, i64* %RCX
  %1134 = mul i64 %1133, 4
  %1135 = add i64 %1132, -1616
  %1136 = add i64 %1135, %1134
  %1137 = load i32, i32* %EDX
  %1138 = zext i32 %1137 to i64
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 7
  store i64 %1140, i64* %PC
  %1141 = inttoptr i64 %1136 to i32*
  store i32 %1137, i32* %1141
  br label %block_401411

block_400fb0:                                     ; preds = %block_400eff, %block_400f19, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.18, %block_400eff ], [ %MEMORY.18, %block_400f19 ], [ %2758, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5 ]
  %1142 = load i64, i64* %PC
  %1143 = add i64 %1142, 5
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 5
  store i64 %1145, i64* %PC
  %1146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1143, i64* %1146, align 8, !tbaa !2428
  %1147 = load i64, i64* %RBP
  %1148 = sub i64 %1147, 4
  %1149 = load i64, i64* %PC
  %1150 = add i64 %1149, 3
  store i64 %1150, i64* %PC
  %1151 = inttoptr i64 %1148 to i32*
  %1152 = load i32, i32* %1151
  %1153 = zext i32 %1152 to i64
  store i64 %1153, i64* %RAX, align 8, !tbaa !2428
  %1154 = load i64, i64* %RAX
  %1155 = load i64, i64* %PC
  %1156 = add i64 %1155, 3
  store i64 %1156, i64* %PC
  %1157 = trunc i64 %1154 to i32
  %1158 = add i32 1, %1157
  %1159 = zext i32 %1158 to i64
  store i64 %1159, i64* %RAX, align 8, !tbaa !2428
  %1160 = icmp ult i32 %1158, %1157
  %1161 = icmp ult i32 %1158, 1
  %1162 = or i1 %1160, %1161
  %1163 = zext i1 %1162 to i8
  %1164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1163, i8* %1164, align 1, !tbaa !2432
  %1165 = and i32 %1158, 255
  %1166 = call i32 @llvm.ctpop.i32(i32 %1165) #16
  %1167 = trunc i32 %1166 to i8
  %1168 = and i8 %1167, 1
  %1169 = xor i8 %1168, 1
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1169, i8* %1170, align 1, !tbaa !2446
  %1171 = xor i64 1, %1154
  %1172 = trunc i64 %1171 to i32
  %1173 = xor i32 %1172, %1158
  %1174 = lshr i32 %1173, 4
  %1175 = trunc i32 %1174 to i8
  %1176 = and i8 %1175, 1
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1176, i8* %1177, align 1, !tbaa !2447
  %1178 = icmp eq i32 %1158, 0
  %1179 = zext i1 %1178 to i8
  %1180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1179, i8* %1180, align 1, !tbaa !2448
  %1181 = lshr i32 %1158, 31
  %1182 = trunc i32 %1181 to i8
  %1183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1182, i8* %1183, align 1, !tbaa !2449
  %1184 = lshr i32 %1157, 31
  %1185 = xor i32 %1181, %1184
  %1186 = add nuw nsw i32 %1185, %1181
  %1187 = icmp eq i32 %1186, 2
  %1188 = zext i1 %1187 to i8
  %1189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1188, i8* %1189, align 1, !tbaa !2450
  %1190 = load i64, i64* %RBP
  %1191 = sub i64 %1190, 4
  %1192 = load i32, i32* %EAX
  %1193 = zext i32 %1192 to i64
  %1194 = load i64, i64* %PC
  %1195 = add i64 %1194, 3
  store i64 %1195, i64* %PC
  %1196 = inttoptr i64 %1191 to i32*
  store i32 %1192, i32* %1196
  %1197 = load i64, i64* %PC
  %1198 = sub i64 %1197, 216
  %1199 = load i64, i64* %PC
  %1200 = add i64 %1199, 5
  store i64 %1200, i64* %PC
  %1201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1198, i64* %1201, align 8, !tbaa !2428
  br label %block_400ee6

block_4009ee:                                     ; preds = %block_400976
  %1202 = sub i64 %3032, 4
  %1203 = load i64, i64* %PC
  %1204 = add i64 %1203, 4
  store i64 %1204, i64* %PC
  %1205 = inttoptr i64 %1202 to i32*
  %1206 = load i32, i32* %1205
  %1207 = sext i32 %1206 to i64
  store i64 %1207, i64* %RAX, align 8, !tbaa !2428
  %1208 = load i64, i64* %RBP
  %1209 = load i64, i64* %RAX
  %1210 = mul i64 %1209, 4
  %1211 = add i64 %1208, -1488
  %1212 = add i64 %1211, %1210
  %1213 = load i64, i64* %PC
  %1214 = add i64 %1213, 8
  store i64 %1214, i64* %PC
  %1215 = inttoptr i64 %1212 to i32*
  %1216 = load i32, i32* %1215
  %1217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1217, align 1, !tbaa !2432
  %1218 = and i32 %1216, 255
  %1219 = call i32 @llvm.ctpop.i32(i32 %1218) #16
  %1220 = trunc i32 %1219 to i8
  %1221 = and i8 %1220, 1
  %1222 = xor i8 %1221, 1
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1222, i8* %1223, align 1, !tbaa !2446
  %1224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1224, align 1, !tbaa !2447
  %1225 = icmp eq i32 %1216, 0
  %1226 = zext i1 %1225 to i8
  %1227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1226, i8* %1227, align 1, !tbaa !2448
  %1228 = lshr i32 %1216, 31
  %1229 = trunc i32 %1228 to i8
  %1230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1229, i8* %1230, align 1, !tbaa !2449
  %1231 = lshr i32 %1216, 31
  %1232 = xor i32 %1228, %1231
  %1233 = add nuw nsw i32 %1232, %1231
  %1234 = icmp eq i32 %1233, 2
  %1235 = zext i1 %1234 to i8
  %1236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1235, i8* %1236, align 1, !tbaa !2450
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 16
  %1239 = load i64, i64* %PC
  %1240 = add i64 %1239, 6
  %1241 = load i64, i64* %PC
  %1242 = add i64 %1241, 6
  store i64 %1242, i64* %PC
  %1243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1244 = load i8, i8* %1243, align 1, !tbaa !2448
  store i8 %1244, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1246 = icmp ne i8 %1244, 0
  %1247 = select i1 %1246, i64 %1238, i64 %1240
  store i64 %1247, i64* %1245, align 8, !tbaa !2428
  %1248 = load i8, i8* %BRANCH_TAKEN
  %1249 = icmp eq i8 %1248, 1
  br i1 %1249, label %block_400a0a, label %block_400a00

block_4015ac:                                     ; preds = %block_401592
  %1250 = load i64, i64* %RBP
  %1251 = sub i64 %1250, 4
  %1252 = load i64, i64* %PC
  %1253 = add i64 %1252, 4
  store i64 %1253, i64* %PC
  %1254 = inttoptr i64 %1251 to i32*
  %1255 = load i32, i32* %1254
  %1256 = sext i32 %1255 to i64
  store i64 %1256, i64* %RAX, align 8, !tbaa !2428
  %1257 = load i64, i64* %RBP
  %1258 = load i64, i64* %RAX
  %1259 = mul i64 %1258, 4
  %1260 = add i64 %1257, -1568
  %1261 = add i64 %1260, %1259
  %1262 = load i64, i64* %PC
  %1263 = add i64 %1262, 8
  store i64 %1263, i64* %PC
  %1264 = inttoptr i64 %1261 to i32*
  %1265 = load i32, i32* %1264
  %1266 = sext i32 %1265 to i64
  store i64 %1266, i64* %RAX, align 8, !tbaa !2428
  %1267 = load i64, i64* %RBP
  %1268 = load i64, i64* %RAX
  %1269 = mul i64 %1268, 4
  %1270 = add i64 %1267, -2640
  %1271 = add i64 %1270, %1269
  %1272 = load i64, i64* %PC
  %1273 = add i64 %1272, 8
  store i64 %1273, i64* %PC
  %1274 = inttoptr i64 %1271 to i32*
  %1275 = load i32, i32* %1274
  %1276 = sext i32 %1275 to i64
  store i64 %1276, i64* %RAX, align 8, !tbaa !2428
  %1277 = load i64, i64* %RAX
  %1278 = mul i64 %1277, 4
  %1279 = add i64 %1278, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 7
  store i64 %1281, i64* %PC
  %1282 = inttoptr i64 %1279 to i32*
  %1283 = load i32, i32* %1282
  %1284 = zext i32 %1283 to i64
  store i64 %1284, i64* %RCX, align 8, !tbaa !2428
  %1285 = load i64, i64* %RBP
  %1286 = sub i64 %1285, 4
  %1287 = load i64, i64* %PC
  %1288 = add i64 %1287, 4
  store i64 %1288, i64* %PC
  %1289 = inttoptr i64 %1286 to i32*
  %1290 = load i32, i32* %1289
  %1291 = sext i32 %1290 to i64
  store i64 %1291, i64* %RAX, align 8, !tbaa !2428
  %1292 = load i64, i64* %RBP
  %1293 = load i64, i64* %RAX
  %1294 = mul i64 %1293, 4
  %1295 = add i64 %1292, -1568
  %1296 = add i64 %1295, %1294
  %1297 = load i64, i64* %PC
  %1298 = add i64 %1297, 8
  store i64 %1298, i64* %PC
  %1299 = inttoptr i64 %1296 to i32*
  %1300 = load i32, i32* %1299
  %1301 = sext i32 %1300 to i64
  store i64 %1301, i64* %RAX, align 8, !tbaa !2428
  %1302 = load i64, i64* %RBP
  %1303 = load i64, i64* %RAX
  %1304 = mul i64 %1303, 4
  %1305 = add i64 %1302, -2640
  %1306 = add i64 %1305, %1304
  %1307 = load i32, i32* %ECX
  %1308 = zext i32 %1307 to i64
  %1309 = load i64, i64* %PC
  %1310 = add i64 %1309, 7
  store i64 %1310, i64* %PC
  %1311 = inttoptr i64 %1306 to i32*
  store i32 %1307, i32* %1311
  %1312 = load i64, i64* %RBP
  %1313 = sub i64 %1312, 16
  %1314 = load i64, i64* %PC
  %1315 = add i64 %1314, 7
  store i64 %1315, i64* %PC
  %1316 = inttoptr i64 %1313 to i32*
  store i32 0, i32* %1316
  %1317 = load i64, i64* %RBP
  %1318 = sub i64 %1317, 8
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 7
  store i64 %1320, i64* %PC
  %1321 = inttoptr i64 %1318 to i32*
  store i32 0, i32* %1321
  br label %block_4015e8

block_4011aa:                                     ; preds = %block_4011a0
  %1322 = load i64, i64* %PC
  %1323 = add i64 %1322, 5
  store i64 %1323, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %1324 = load i64, i64* %RBP
  %1325 = sub i64 %1324, 4
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 3
  store i64 %1327, i64* %PC
  %1328 = inttoptr i64 %1325 to i32*
  %1329 = load i32, i32* %1328
  %1330 = zext i32 %1329 to i64
  store i64 %1330, i64* %RCX, align 8, !tbaa !2428
  %1331 = load i64, i64* %RBP
  %1332 = sub i64 %1331, 1492
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 7
  store i64 %1334, i64* %PC
  %1335 = inttoptr i64 %1332 to i32*
  %1336 = load i32, i32* %1335
  %1337 = sext i32 %1336 to i64
  store i64 %1337, i64* %RDX, align 8, !tbaa !2428
  %1338 = load i64, i64* %RBP
  %1339 = load i64, i64* %RDX
  %1340 = mul i64 %1339, 4
  %1341 = add i64 %1338, -1536
  %1342 = add i64 %1341, %1340
  %1343 = load i32, i32* %ECX
  %1344 = zext i32 %1343 to i64
  %1345 = load i64, i64* %PC
  %1346 = add i64 %1345, 7
  store i64 %1346, i64* %PC
  %1347 = inttoptr i64 %1342 to i32*
  store i32 %1343, i32* %1347
  %1348 = load i64, i64* %RAX
  %1349 = load i64, i64* %RBP
  %1350 = sub i64 %1349, 4
  %1351 = load i64, i64* %PC
  %1352 = add i64 %1351, 3
  store i64 %1352, i64* %PC
  %1353 = trunc i64 %1348 to i32
  %1354 = inttoptr i64 %1350 to i32*
  %1355 = load i32, i32* %1354
  %1356 = sub i32 %1353, %1355
  %1357 = zext i32 %1356 to i64
  store i64 %1357, i64* %RAX, align 8, !tbaa !2428
  %1358 = icmp ult i32 %1353, %1355
  %1359 = zext i1 %1358 to i8
  %1360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1359, i8* %1360, align 1, !tbaa !2432
  %1361 = and i32 %1356, 255
  %1362 = call i32 @llvm.ctpop.i32(i32 %1361) #16
  %1363 = trunc i32 %1362 to i8
  %1364 = and i8 %1363, 1
  %1365 = xor i8 %1364, 1
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1365, i8* %1366, align 1, !tbaa !2446
  %1367 = xor i32 %1355, %1353
  %1368 = xor i32 %1367, %1356
  %1369 = lshr i32 %1368, 4
  %1370 = trunc i32 %1369 to i8
  %1371 = and i8 %1370, 1
  %1372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1371, i8* %1372, align 1, !tbaa !2447
  %1373 = icmp eq i32 %1356, 0
  %1374 = zext i1 %1373 to i8
  %1375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1374, i8* %1375, align 1, !tbaa !2448
  %1376 = lshr i32 %1356, 31
  %1377 = trunc i32 %1376 to i8
  %1378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1377, i8* %1378, align 1, !tbaa !2449
  %1379 = lshr i32 %1353, 31
  %1380 = lshr i32 %1355, 31
  %1381 = xor i32 %1380, %1379
  %1382 = xor i32 %1376, %1379
  %1383 = add nuw nsw i32 %1382, %1381
  %1384 = icmp eq i32 %1383, 2
  %1385 = zext i1 %1384 to i8
  %1386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1385, i8* %1386, align 1, !tbaa !2450
  %1387 = load i64, i64* %RBP
  %1388 = sub i64 %1387, 1492
  %1389 = load i64, i64* %PC
  %1390 = add i64 %1389, 7
  store i64 %1390, i64* %PC
  %1391 = inttoptr i64 %1388 to i32*
  %1392 = load i32, i32* %1391
  %1393 = sext i32 %1392 to i64
  store i64 %1393, i64* %RDX, align 8, !tbaa !2428
  %1394 = load i64, i64* %RBP
  %1395 = load i64, i64* %RDX
  %1396 = mul i64 %1395, 4
  %1397 = add i64 %1394, -1568
  %1398 = add i64 %1397, %1396
  %1399 = load i32, i32* %EAX
  %1400 = zext i32 %1399 to i64
  %1401 = load i64, i64* %PC
  %1402 = add i64 %1401, 7
  store i64 %1402, i64* %PC
  %1403 = inttoptr i64 %1398 to i32*
  store i32 %1399, i32* %1403
  %1404 = load i64, i64* %RBP
  %1405 = sub i64 %1404, 1492
  %1406 = load i64, i64* %PC
  %1407 = add i64 %1406, 6
  store i64 %1407, i64* %PC
  %1408 = inttoptr i64 %1405 to i32*
  %1409 = load i32, i32* %1408
  %1410 = zext i32 %1409 to i64
  store i64 %1410, i64* %RAX, align 8, !tbaa !2428
  %1411 = load i64, i64* %RAX
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 3
  store i64 %1413, i64* %PC
  %1414 = trunc i64 %1411 to i32
  %1415 = add i32 1, %1414
  %1416 = zext i32 %1415 to i64
  store i64 %1416, i64* %RAX, align 8, !tbaa !2428
  %1417 = icmp ult i32 %1415, %1414
  %1418 = icmp ult i32 %1415, 1
  %1419 = or i1 %1417, %1418
  %1420 = zext i1 %1419 to i8
  %1421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1420, i8* %1421, align 1, !tbaa !2432
  %1422 = and i32 %1415, 255
  %1423 = call i32 @llvm.ctpop.i32(i32 %1422) #16
  %1424 = trunc i32 %1423 to i8
  %1425 = and i8 %1424, 1
  %1426 = xor i8 %1425, 1
  %1427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1426, i8* %1427, align 1, !tbaa !2446
  %1428 = xor i64 1, %1411
  %1429 = trunc i64 %1428 to i32
  %1430 = xor i32 %1429, %1415
  %1431 = lshr i32 %1430, 4
  %1432 = trunc i32 %1431 to i8
  %1433 = and i8 %1432, 1
  %1434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1433, i8* %1434, align 1, !tbaa !2447
  %1435 = icmp eq i32 %1415, 0
  %1436 = zext i1 %1435 to i8
  %1437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1436, i8* %1437, align 1, !tbaa !2448
  %1438 = lshr i32 %1415, 31
  %1439 = trunc i32 %1438 to i8
  %1440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1439, i8* %1440, align 1, !tbaa !2449
  %1441 = lshr i32 %1414, 31
  %1442 = xor i32 %1438, %1441
  %1443 = add nuw nsw i32 %1442, %1438
  %1444 = icmp eq i32 %1443, 2
  %1445 = zext i1 %1444 to i8
  %1446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1445, i8* %1446, align 1, !tbaa !2450
  %1447 = load i64, i64* %RBP
  %1448 = sub i64 %1447, 1492
  %1449 = load i32, i32* %EAX
  %1450 = zext i32 %1449 to i64
  %1451 = load i64, i64* %PC
  %1452 = add i64 %1451, 6
  store i64 %1452, i64* %PC
  %1453 = inttoptr i64 %1448 to i32*
  store i32 %1449, i32* %1453
  br label %block_4011e0

block_40177f:                                     ; preds = %block_40102c, %block_4017d0
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.44, %block_40102c ], [ %MEMORY.11, %block_4017d0 ]
  %1454 = load i64, i64* %RBP
  %1455 = sub i64 %1454, 4
  %1456 = load i64, i64* %PC
  %1457 = add i64 %1456, 7
  store i64 %1457, i64* %PC
  %1458 = inttoptr i64 %1455 to i32*
  %1459 = load i32, i32* %1458
  %1460 = sub i32 %1459, 255
  %1461 = icmp ult i32 %1459, 255
  %1462 = zext i1 %1461 to i8
  %1463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1462, i8* %1463, align 1, !tbaa !2432
  %1464 = and i32 %1460, 255
  %1465 = call i32 @llvm.ctpop.i32(i32 %1464) #16
  %1466 = trunc i32 %1465 to i8
  %1467 = and i8 %1466, 1
  %1468 = xor i8 %1467, 1
  %1469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1468, i8* %1469, align 1, !tbaa !2446
  %1470 = xor i32 %1459, 255
  %1471 = xor i32 %1470, %1460
  %1472 = lshr i32 %1471, 4
  %1473 = trunc i32 %1472 to i8
  %1474 = and i8 %1473, 1
  %1475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1474, i8* %1475, align 1, !tbaa !2447
  %1476 = icmp eq i32 %1460, 0
  %1477 = zext i1 %1476 to i8
  %1478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1477, i8* %1478, align 1, !tbaa !2448
  %1479 = lshr i32 %1460, 31
  %1480 = trunc i32 %1479 to i8
  %1481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1480, i8* %1481, align 1, !tbaa !2449
  %1482 = lshr i32 %1459, 31
  %1483 = xor i32 %1479, %1482
  %1484 = add nuw nsw i32 %1483, %1482
  %1485 = icmp eq i32 %1484, 2
  %1486 = zext i1 %1485 to i8
  %1487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1486, i8* %1487, align 1, !tbaa !2450
  %1488 = load i64, i64* %PC
  %1489 = add i64 %1488, 93
  %1490 = load i64, i64* %PC
  %1491 = add i64 %1490, 6
  %1492 = load i64, i64* %PC
  %1493 = add i64 %1492, 6
  store i64 %1493, i64* %PC
  %1494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1495 = load i8, i8* %1494, align 1, !tbaa !2449
  %1496 = icmp ne i8 %1495, 0
  %1497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1498 = load i8, i8* %1497, align 1, !tbaa !2450
  %1499 = icmp ne i8 %1498, 0
  %1500 = xor i1 %1496, %1499
  %1501 = xor i1 %1500, true
  %1502 = zext i1 %1501 to i8
  store i8 %1502, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1504 = select i1 %1500, i64 %1491, i64 %1489
  store i64 %1504, i64* %1503, align 8, !tbaa !2428
  %1505 = load i8, i8* %BRANCH_TAKEN
  %1506 = icmp eq i8 %1505, 1
  br i1 %1506, label %block_4017e3, label %block_40178c

block_4011a0:                                     ; preds = %block_40111f
  %1507 = sub i64 %3687, 16
  %1508 = load i64, i64* %PC
  %1509 = add i64 %1508, 4
  store i64 %1509, i64* %PC
  %1510 = inttoptr i64 %1507 to i32*
  %1511 = load i32, i32* %1510
  %1512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1512, align 1, !tbaa !2432
  %1513 = and i32 %1511, 255
  %1514 = call i32 @llvm.ctpop.i32(i32 %1513) #16
  %1515 = trunc i32 %1514 to i8
  %1516 = and i8 %1515, 1
  %1517 = xor i8 %1516, 1
  %1518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1517, i8* %1518, align 1, !tbaa !2446
  %1519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1519, align 1, !tbaa !2447
  %1520 = icmp eq i32 %1511, 0
  %1521 = zext i1 %1520 to i8
  %1522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1521, i8* %1522, align 1, !tbaa !2448
  %1523 = lshr i32 %1511, 31
  %1524 = trunc i32 %1523 to i8
  %1525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1524, i8* %1525, align 1, !tbaa !2449
  %1526 = lshr i32 %1511, 31
  %1527 = xor i32 %1523, %1526
  %1528 = add nuw nsw i32 %1527, %1526
  %1529 = icmp eq i32 %1528, 2
  %1530 = zext i1 %1529 to i8
  %1531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1530, i8* %1531, align 1, !tbaa !2450
  %1532 = load i64, i64* %PC
  %1533 = add i64 %1532, 60
  %1534 = load i64, i64* %PC
  %1535 = add i64 %1534, 6
  %1536 = load i64, i64* %PC
  %1537 = add i64 %1536, 6
  store i64 %1537, i64* %PC
  %1538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1539 = load i8, i8* %1538, align 1, !tbaa !2448
  %1540 = icmp eq i8 %1539, 0
  %1541 = zext i1 %1540 to i8
  store i8 %1541, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1543 = select i1 %1540, i64 %1533, i64 %1535
  store i64 %1543, i64* %1542, align 8, !tbaa !2428
  %1544 = load i8, i8* %BRANCH_TAKEN
  %1545 = icmp eq i8 %1544, 1
  br i1 %1545, label %block_4011e0, label %block_4011aa

block_401145:                                     ; preds = %block_401133
  %1546 = load i64, i64* %PC
  %1547 = add i64 %1546, 5
  store i64 %1547, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %1548 = load i64, i64* %RBP
  %1549 = sub i64 %1548, 8
  %1550 = load i64, i64* %PC
  %1551 = add i64 %1550, 4
  store i64 %1551, i64* %PC
  %1552 = inttoptr i64 %1549 to i32*
  %1553 = load i32, i32* %1552
  %1554 = sext i32 %1553 to i64
  store i64 %1554, i64* %RCX, align 8, !tbaa !2428
  %1555 = load i64, i64* %RBP
  %1556 = load i64, i64* %RCX
  %1557 = mul i64 %1556, 4
  %1558 = add i64 %1555, -2688
  %1559 = add i64 %1558, %1557
  %1560 = load i64, i64* %PC
  %1561 = add i64 %1560, 7
  store i64 %1561, i64* %PC
  %1562 = inttoptr i64 %1559 to i32*
  %1563 = load i32, i32* %1562
  %1564 = zext i32 %1563 to i64
  store i64 %1564, i64* %RDX, align 8, !tbaa !2428
  %1565 = load i64, i64* %RDX
  %1566 = load i64, i64* %RBP
  %1567 = sub i64 %1566, 8
  %1568 = load i64, i64* %PC
  %1569 = add i64 %1568, 3
  store i64 %1569, i64* %PC
  %1570 = trunc i64 %1565 to i32
  %1571 = inttoptr i64 %1567 to i32*
  %1572 = load i32, i32* %1571
  %1573 = add i32 %1572, %1570
  %1574 = zext i32 %1573 to i64
  store i64 %1574, i64* %RDX, align 8, !tbaa !2428
  %1575 = icmp ult i32 %1573, %1570
  %1576 = icmp ult i32 %1573, %1572
  %1577 = or i1 %1575, %1576
  %1578 = zext i1 %1577 to i8
  %1579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1578, i8* %1579, align 1, !tbaa !2432
  %1580 = and i32 %1573, 255
  %1581 = call i32 @llvm.ctpop.i32(i32 %1580) #16
  %1582 = trunc i32 %1581 to i8
  %1583 = and i8 %1582, 1
  %1584 = xor i8 %1583, 1
  %1585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1584, i8* %1585, align 1, !tbaa !2446
  %1586 = xor i32 %1572, %1570
  %1587 = xor i32 %1586, %1573
  %1588 = lshr i32 %1587, 4
  %1589 = trunc i32 %1588 to i8
  %1590 = and i8 %1589, 1
  %1591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1590, i8* %1591, align 1, !tbaa !2447
  %1592 = icmp eq i32 %1573, 0
  %1593 = zext i1 %1592 to i8
  %1594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1593, i8* %1594, align 1, !tbaa !2448
  %1595 = lshr i32 %1573, 31
  %1596 = trunc i32 %1595 to i8
  %1597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1596, i8* %1597, align 1, !tbaa !2449
  %1598 = lshr i32 %1570, 31
  %1599 = lshr i32 %1572, 31
  %1600 = xor i32 %1595, %1598
  %1601 = xor i32 %1595, %1599
  %1602 = add nuw nsw i32 %1600, %1601
  %1603 = icmp eq i32 %1602, 2
  %1604 = zext i1 %1603 to i8
  %1605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1604, i8* %1605, align 1, !tbaa !2450
  %1606 = load i64, i64* %RBP
  %1607 = sub i64 %1606, 2716
  %1608 = load i32, i32* %EAX
  %1609 = zext i32 %1608 to i64
  %1610 = load i64, i64* %PC
  %1611 = add i64 %1610, 6
  store i64 %1611, i64* %PC
  %1612 = inttoptr i64 %1607 to i32*
  store i32 %1608, i32* %1612
  %1613 = load i32, i32* %EDX
  %1614 = zext i32 %1613 to i64
  %1615 = load i64, i64* %PC
  %1616 = add i64 %1615, 2
  store i64 %1616, i64* %PC
  %1617 = and i64 %1614, 4294967295
  store i64 %1617, i64* %RAX, align 8, !tbaa !2428
  %1618 = load i64, i64* %PC
  %1619 = add i64 %1618, 1
  store i64 %1619, i64* %PC
  %1620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1622 = bitcast %union.anon* %1621 to i32*
  %1623 = load i32, i32* %1622, align 8, !tbaa !2452
  %1624 = sext i32 %1623 to i64
  %1625 = lshr i64 %1624, 32
  store i64 %1625, i64* %1620, align 8, !tbaa !2428
  %1626 = load i64, i64* %RBP
  %1627 = sub i64 %1626, 2716
  %1628 = load i64, i64* %PC
  %1629 = add i64 %1628, 6
  store i64 %1629, i64* %PC
  %1630 = inttoptr i64 %1627 to i32*
  %1631 = load i32, i32* %1630
  %1632 = zext i32 %1631 to i64
  store i64 %1632, i64* %RSI, align 8, !tbaa !2428
  %1633 = load i32, i32* %ESI
  %1634 = zext i32 %1633 to i64
  %1635 = load i64, i64* %PC
  %1636 = add i64 %1635, 2
  store i64 %1636, i64* %PC
  %1637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1638 = bitcast %union.anon* %1637 to i32*
  %1639 = load i32, i32* %1638, align 8, !tbaa !2452
  %1640 = zext i32 %1639 to i64
  %1641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %1642 = bitcast %union.anon* %1641 to i32*
  %1643 = load i32, i32* %1642, align 8, !tbaa !2452
  %1644 = zext i32 %1643 to i64
  %1645 = shl i64 %1634, 32
  %1646 = ashr exact i64 %1645, 32
  %1647 = shl nuw i64 %1644, 32
  %1648 = or i64 %1647, %1640
  %1649 = sdiv i64 %1648, %1646
  %1650 = shl i64 %1649, 32
  %1651 = ashr exact i64 %1650, 32
  %1652 = icmp eq i64 %1649, %1651
  br i1 %1652, label %1657, label %1653

; <label>:1653:                                   ; preds = %block_401145
  %1654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1655 = load i64, i64* %1654, align 8, !tbaa !2428
  %1656 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1655, %struct.Memory* %MEMORY.15) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7

; <label>:1657:                                   ; preds = %block_401145
  %1658 = srem i64 %1648, %1646
  %1659 = getelementptr inbounds %union.anon, %union.anon* %1637, i64 0, i32 0
  %1660 = and i64 %1649, 4294967295
  store i64 %1660, i64* %1659, align 8, !tbaa !2428
  %1661 = getelementptr inbounds %union.anon, %union.anon* %1641, i64 0, i32 0
  %1662 = and i64 %1658, 4294967295
  store i64 %1662, i64* %1661, align 8, !tbaa !2428
  %1663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1663, align 1, !tbaa !2432
  %1664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1664, align 1, !tbaa !2446
  %1665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1665, align 1, !tbaa !2447
  %1666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1666, align 1, !tbaa !2448
  %1667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1667, align 1, !tbaa !2449
  %1668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1668, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7: ; preds = %1653, %1657
  %1669 = phi %struct.Memory* [ %1656, %1653 ], [ %MEMORY.15, %1657 ]
  %1670 = load i64, i64* %RBP
  %1671 = sub i64 %1670, 8
  %1672 = load i64, i64* %PC
  %1673 = add i64 %1672, 4
  store i64 %1673, i64* %PC
  %1674 = inttoptr i64 %1671 to i32*
  %1675 = load i32, i32* %1674
  %1676 = sext i32 %1675 to i64
  store i64 %1676, i64* %RCX, align 8, !tbaa !2428
  %1677 = load i64, i64* %RBP
  %1678 = load i64, i64* %RCX
  %1679 = mul i64 %1678, 4
  %1680 = add i64 %1677, -2688
  %1681 = add i64 %1680, %1679
  %1682 = load i32, i32* %EDX
  %1683 = zext i32 %1682 to i64
  %1684 = load i64, i64* %PC
  %1685 = add i64 %1684, 7
  store i64 %1685, i64* %PC
  %1686 = inttoptr i64 %1681 to i32*
  store i32 %1682, i32* %1686
  %1687 = load i64, i64* %RBP
  %1688 = sub i64 %1687, 8
  %1689 = load i64, i64* %PC
  %1690 = add i64 %1689, 4
  store i64 %1690, i64* %PC
  %1691 = inttoptr i64 %1688 to i32*
  %1692 = load i32, i32* %1691
  %1693 = sext i32 %1692 to i64
  store i64 %1693, i64* %RCX, align 8, !tbaa !2428
  %1694 = load i64, i64* %RBP
  %1695 = load i64, i64* %RCX
  %1696 = mul i64 %1695, 4
  %1697 = add i64 %1694, -2688
  %1698 = add i64 %1697, %1696
  %1699 = load i64, i64* %PC
  %1700 = add i64 %1699, 8
  store i64 %1700, i64* %PC
  %1701 = inttoptr i64 %1698 to i32*
  %1702 = load i32, i32* %1701
  %1703 = sext i32 %1702 to i64
  store i64 %1703, i64* %RCX, align 8, !tbaa !2428
  %1704 = load i64, i64* %RCX
  %1705 = mul i64 %1704, 4
  %1706 = add i64 %1705, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %1707 = load i64, i64* %PC
  %1708 = add i64 %1707, 7
  store i64 %1708, i64* %PC
  %1709 = inttoptr i64 %1706 to i32*
  %1710 = load i32, i32* %1709
  %1711 = zext i32 %1710 to i64
  store i64 %1711, i64* %RDX, align 8, !tbaa !2428
  %1712 = load i64, i64* %RDX
  %1713 = load i64, i64* %RBP
  %1714 = sub i64 %1713, 16
  %1715 = load i64, i64* %PC
  %1716 = add i64 %1715, 3
  store i64 %1716, i64* %PC
  %1717 = trunc i64 %1712 to i32
  %1718 = inttoptr i64 %1714 to i32*
  %1719 = load i32, i32* %1718
  %1720 = xor i32 %1719, %1717
  %1721 = zext i32 %1720 to i64
  store i64 %1721, i64* %RDX, align 8, !tbaa !2428
  %1722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1722, align 1, !tbaa !2432
  %1723 = and i32 %1720, 255
  %1724 = call i32 @llvm.ctpop.i32(i32 %1723) #16
  %1725 = trunc i32 %1724 to i8
  %1726 = and i8 %1725, 1
  %1727 = xor i8 %1726, 1
  %1728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1727, i8* %1728, align 1, !tbaa !2446
  %1729 = icmp eq i32 %1720, 0
  %1730 = zext i1 %1729 to i8
  %1731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1730, i8* %1731, align 1, !tbaa !2448
  %1732 = lshr i32 %1720, 31
  %1733 = trunc i32 %1732 to i8
  %1734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1733, i8* %1734, align 1, !tbaa !2449
  %1735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1735, align 1, !tbaa !2450
  %1736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1736, align 1, !tbaa !2447
  %1737 = load i64, i64* %RBP
  %1738 = sub i64 %1737, 16
  %1739 = load i32, i32* %EDX
  %1740 = zext i32 %1739 to i64
  %1741 = load i64, i64* %PC
  %1742 = add i64 %1741, 3
  store i64 %1742, i64* %PC
  %1743 = inttoptr i64 %1738 to i32*
  store i32 %1739, i32* %1743
  br label %block_40118d

block_400995:                                     ; preds = %block_400983
  %1744 = load i64, i64* %PC
  %1745 = add i64 %1744, 5
  store i64 %1745, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %1746 = load i64, i64* %RBP
  %1747 = sub i64 %1746, 8
  %1748 = load i64, i64* %PC
  %1749 = add i64 %1748, 4
  store i64 %1749, i64* %PC
  %1750 = inttoptr i64 %1747 to i32*
  %1751 = load i32, i32* %1750
  %1752 = sext i32 %1751 to i64
  store i64 %1752, i64* %RCX, align 8, !tbaa !2428
  %1753 = load i64, i64* %RCX
  %1754 = mul i64 %1753, 4
  %1755 = add i64 %1754, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %1756 = load i64, i64* %PC
  %1757 = add i64 %1756, 7
  store i64 %1757, i64* %PC
  %1758 = inttoptr i64 %1755 to i32*
  %1759 = load i32, i32* %1758
  %1760 = zext i32 %1759 to i64
  store i64 %1760, i64* %RDX, align 8, !tbaa !2428
  %1761 = load i64, i64* %RBP
  %1762 = sub i64 %1761, 4
  %1763 = load i64, i64* %PC
  %1764 = add i64 %1763, 3
  store i64 %1764, i64* %PC
  %1765 = inttoptr i64 %1762 to i32*
  %1766 = load i32, i32* %1765
  %1767 = zext i32 %1766 to i64
  store i64 %1767, i64* %RSI, align 8, !tbaa !2428
  %1768 = load i64, i64* %RSI
  %1769 = load i64, i64* %RBP
  %1770 = sub i64 %1769, 8
  %1771 = load i64, i64* %PC
  %1772 = add i64 %1771, 4
  store i64 %1772, i64* %PC
  %1773 = inttoptr i64 %1770 to i32*
  %1774 = load i32, i32* %1773
  %1775 = shl i64 %1768, 32
  %1776 = ashr exact i64 %1775, 32
  %1777 = sext i32 %1774 to i64
  %1778 = mul nsw i64 %1777, %1776
  %1779 = trunc i64 %1778 to i32
  %1780 = and i64 %1778, 4294967295
  store i64 %1780, i64* %RSI, align 8, !tbaa !2428
  %1781 = shl i64 %1778, 32
  %1782 = ashr exact i64 %1781, 32
  %1783 = icmp ne i64 %1782, %1778
  %1784 = zext i1 %1783 to i8
  %1785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1784, i8* %1785, align 1, !tbaa !2432
  %1786 = and i32 %1779, 255
  %1787 = call i32 @llvm.ctpop.i32(i32 %1786) #16
  %1788 = trunc i32 %1787 to i8
  %1789 = and i8 %1788, 1
  %1790 = xor i8 %1789, 1
  %1791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1790, i8* %1791, align 1, !tbaa !2446
  %1792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1792, align 1, !tbaa !2447
  %1793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1793, align 1, !tbaa !2448
  %1794 = lshr i32 %1779, 31
  %1795 = trunc i32 %1794 to i8
  %1796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1795, i8* %1796, align 1, !tbaa !2449
  %1797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1784, i8* %1797, align 1, !tbaa !2450
  %1798 = load i64, i64* %RDX
  %1799 = load i32, i32* %ESI
  %1800 = zext i32 %1799 to i64
  %1801 = load i64, i64* %PC
  %1802 = add i64 %1801, 2
  store i64 %1802, i64* %PC
  %1803 = trunc i64 %1798 to i32
  %1804 = add i32 %1799, %1803
  %1805 = zext i32 %1804 to i64
  store i64 %1805, i64* %RDX, align 8, !tbaa !2428
  %1806 = icmp ult i32 %1804, %1803
  %1807 = icmp ult i32 %1804, %1799
  %1808 = or i1 %1806, %1807
  %1809 = zext i1 %1808 to i8
  %1810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1809, i8* %1810, align 1, !tbaa !2432
  %1811 = and i32 %1804, 255
  %1812 = call i32 @llvm.ctpop.i32(i32 %1811) #16
  %1813 = trunc i32 %1812 to i8
  %1814 = and i8 %1813, 1
  %1815 = xor i8 %1814, 1
  %1816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1815, i8* %1816, align 1, !tbaa !2446
  %1817 = xor i64 %1800, %1798
  %1818 = trunc i64 %1817 to i32
  %1819 = xor i32 %1818, %1804
  %1820 = lshr i32 %1819, 4
  %1821 = trunc i32 %1820 to i8
  %1822 = and i8 %1821, 1
  %1823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1822, i8* %1823, align 1, !tbaa !2447
  %1824 = icmp eq i32 %1804, 0
  %1825 = zext i1 %1824 to i8
  %1826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1825, i8* %1826, align 1, !tbaa !2448
  %1827 = lshr i32 %1804, 31
  %1828 = trunc i32 %1827 to i8
  %1829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1828, i8* %1829, align 1, !tbaa !2449
  %1830 = lshr i32 %1803, 31
  %1831 = lshr i32 %1799, 31
  %1832 = xor i32 %1827, %1830
  %1833 = xor i32 %1827, %1831
  %1834 = add nuw nsw i32 %1832, %1833
  %1835 = icmp eq i32 %1834, 2
  %1836 = zext i1 %1835 to i8
  %1837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1836, i8* %1837, align 1, !tbaa !2450
  %1838 = load i64, i64* %RBP
  %1839 = sub i64 %1838, 2692
  %1840 = load i32, i32* %EAX
  %1841 = zext i32 %1840 to i64
  %1842 = load i64, i64* %PC
  %1843 = add i64 %1842, 6
  store i64 %1843, i64* %PC
  %1844 = inttoptr i64 %1839 to i32*
  store i32 %1840, i32* %1844
  %1845 = load i32, i32* %EDX
  %1846 = zext i32 %1845 to i64
  %1847 = load i64, i64* %PC
  %1848 = add i64 %1847, 2
  store i64 %1848, i64* %PC
  %1849 = and i64 %1846, 4294967295
  store i64 %1849, i64* %RAX, align 8, !tbaa !2428
  %1850 = load i64, i64* %PC
  %1851 = add i64 %1850, 1
  store i64 %1851, i64* %PC
  %1852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1854 = bitcast %union.anon* %1853 to i32*
  %1855 = load i32, i32* %1854, align 8, !tbaa !2452
  %1856 = sext i32 %1855 to i64
  %1857 = lshr i64 %1856, 32
  store i64 %1857, i64* %1852, align 8, !tbaa !2428
  %1858 = load i64, i64* %RBP
  %1859 = sub i64 %1858, 2692
  %1860 = load i64, i64* %PC
  %1861 = add i64 %1860, 6
  store i64 %1861, i64* %PC
  %1862 = inttoptr i64 %1859 to i32*
  %1863 = load i32, i32* %1862
  %1864 = zext i32 %1863 to i64
  store i64 %1864, i64* %RSI, align 8, !tbaa !2428
  %1865 = load i32, i32* %ESI
  %1866 = zext i32 %1865 to i64
  %1867 = load i64, i64* %PC
  %1868 = add i64 %1867, 2
  store i64 %1868, i64* %PC
  %1869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1870 = bitcast %union.anon* %1869 to i32*
  %1871 = load i32, i32* %1870, align 8, !tbaa !2452
  %1872 = zext i32 %1871 to i64
  %1873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %1874 = bitcast %union.anon* %1873 to i32*
  %1875 = load i32, i32* %1874, align 8, !tbaa !2452
  %1876 = zext i32 %1875 to i64
  %1877 = shl i64 %1866, 32
  %1878 = ashr exact i64 %1877, 32
  %1879 = shl nuw i64 %1876, 32
  %1880 = or i64 %1879, %1872
  %1881 = sdiv i64 %1880, %1878
  %1882 = shl i64 %1881, 32
  %1883 = ashr exact i64 %1882, 32
  %1884 = icmp eq i64 %1881, %1883
  br i1 %1884, label %1889, label %1885

; <label>:1885:                                   ; preds = %block_400995
  %1886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1887 = load i64, i64* %1886, align 8, !tbaa !2428
  %1888 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1887, %struct.Memory* %MEMORY.12) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit6

; <label>:1889:                                   ; preds = %block_400995
  %1890 = srem i64 %1880, %1878
  %1891 = getelementptr inbounds %union.anon, %union.anon* %1869, i64 0, i32 0
  %1892 = and i64 %1881, 4294967295
  store i64 %1892, i64* %1891, align 8, !tbaa !2428
  %1893 = getelementptr inbounds %union.anon, %union.anon* %1873, i64 0, i32 0
  %1894 = and i64 %1890, 4294967295
  store i64 %1894, i64* %1893, align 8, !tbaa !2428
  %1895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1895, align 1, !tbaa !2432
  %1896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1896, align 1, !tbaa !2446
  %1897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1897, align 1, !tbaa !2447
  %1898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1898, align 1, !tbaa !2448
  %1899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1899, align 1, !tbaa !2449
  %1900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1900, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit6

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit6: ; preds = %1885, %1889
  %1901 = phi %struct.Memory* [ %1888, %1885 ], [ %MEMORY.12, %1889 ]
  %1902 = load i32, i32* %EDX
  %1903 = zext i32 %1902 to i64
  %1904 = load i64, i64* %PC
  %1905 = add i64 %1904, 3
  store i64 %1905, i64* %PC
  %1906 = shl i64 %1903, 32
  %1907 = ashr exact i64 %1906, 32
  store i64 %1907, i64* %RCX, align 8, !tbaa !2428
  %1908 = load i64, i64* %RCX
  %1909 = mul i64 %1908, 4
  %1910 = add i64 %1909, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %1911 = load i64, i64* %PC
  %1912 = add i64 %1911, 7
  store i64 %1912, i64* %PC
  %1913 = inttoptr i64 %1910 to i32*
  %1914 = load i32, i32* %1913
  %1915 = zext i32 %1914 to i64
  store i64 %1915, i64* %RDX, align 8, !tbaa !2428
  %1916 = load i64, i64* %RBP
  %1917 = sub i64 %1916, 4
  %1918 = load i64, i64* %PC
  %1919 = add i64 %1918, 4
  store i64 %1919, i64* %PC
  %1920 = inttoptr i64 %1917 to i32*
  %1921 = load i32, i32* %1920
  %1922 = sext i32 %1921 to i64
  store i64 %1922, i64* %RCX, align 8, !tbaa !2428
  %1923 = load i64, i64* %RDX
  %1924 = load i64, i64* %RBP
  %1925 = load i64, i64* %RCX
  %1926 = mul i64 %1925, 4
  %1927 = add i64 %1924, -1488
  %1928 = add i64 %1927, %1926
  %1929 = load i64, i64* %PC
  %1930 = add i64 %1929, 7
  store i64 %1930, i64* %PC
  %1931 = trunc i64 %1923 to i32
  %1932 = inttoptr i64 %1928 to i32*
  %1933 = load i32, i32* %1932
  %1934 = xor i32 %1933, %1931
  %1935 = zext i32 %1934 to i64
  store i64 %1935, i64* %RDX, align 8, !tbaa !2428
  %1936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1936, align 1, !tbaa !2432
  %1937 = and i32 %1934, 255
  %1938 = call i32 @llvm.ctpop.i32(i32 %1937) #16
  %1939 = trunc i32 %1938 to i8
  %1940 = and i8 %1939, 1
  %1941 = xor i8 %1940, 1
  %1942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1941, i8* %1942, align 1, !tbaa !2446
  %1943 = icmp eq i32 %1934, 0
  %1944 = zext i1 %1943 to i8
  %1945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1944, i8* %1945, align 1, !tbaa !2448
  %1946 = lshr i32 %1934, 31
  %1947 = trunc i32 %1946 to i8
  %1948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1947, i8* %1948, align 1, !tbaa !2449
  %1949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1949, align 1, !tbaa !2450
  %1950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1950, align 1, !tbaa !2447
  %1951 = load i64, i64* %RBP
  %1952 = load i64, i64* %RCX
  %1953 = mul i64 %1952, 4
  %1954 = add i64 %1951, -1488
  %1955 = add i64 %1954, %1953
  %1956 = load i32, i32* %EDX
  %1957 = zext i32 %1956 to i64
  %1958 = load i64, i64* %PC
  %1959 = add i64 %1958, 7
  store i64 %1959, i64* %PC
  %1960 = inttoptr i64 %1955 to i32*
  store i32 %1956, i32* %1960
  br label %block_4009db

block_40178c:                                     ; preds = %block_40177f
  %1961 = load i64, i64* %RBP
  %1962 = sub i64 %1961, 4
  %1963 = load i64, i64* %PC
  %1964 = add i64 %1963, 4
  store i64 %1964, i64* %PC
  %1965 = inttoptr i64 %1962 to i32*
  %1966 = load i32, i32* %1965
  %1967 = sext i32 %1966 to i64
  store i64 %1967, i64* %RAX, align 8, !tbaa !2428
  %1968 = load i64, i64* %RAX
  %1969 = mul i64 %1968, 4
  %1970 = add i64 %1969, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %1971 = load i64, i64* %PC
  %1972 = add i64 %1971, 8
  store i64 %1972, i64* %PC
  %1973 = inttoptr i64 %1970 to i32*
  %1974 = load i32, i32* %1973
  %1975 = sub i32 %1974, -1
  %1976 = icmp ult i32 %1974, -1
  %1977 = zext i1 %1976 to i8
  %1978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1977, i8* %1978, align 1, !tbaa !2432
  %1979 = and i32 %1975, 255
  %1980 = call i32 @llvm.ctpop.i32(i32 %1979) #16
  %1981 = trunc i32 %1980 to i8
  %1982 = and i8 %1981, 1
  %1983 = xor i8 %1982, 1
  %1984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1983, i8* %1984, align 1, !tbaa !2446
  %1985 = xor i32 %1974, -1
  %1986 = xor i32 %1985, %1975
  %1987 = lshr i32 %1986, 4
  %1988 = trunc i32 %1987 to i8
  %1989 = and i8 %1988, 1
  %1990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1989, i8* %1990, align 1, !tbaa !2447
  %1991 = icmp eq i32 %1975, 0
  %1992 = zext i1 %1991 to i8
  %1993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1992, i8* %1993, align 1, !tbaa !2448
  %1994 = lshr i32 %1975, 31
  %1995 = trunc i32 %1994 to i8
  %1996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1995, i8* %1996, align 1, !tbaa !2449
  %1997 = lshr i32 %1974, 31
  %1998 = xor i32 %1997, 1
  %1999 = xor i32 %1994, %1997
  %2000 = add nuw nsw i32 %1999, %1998
  %2001 = icmp eq i32 %2000, 2
  %2002 = zext i1 %2001 to i8
  %2003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2002, i8* %2003, align 1, !tbaa !2450
  %2004 = load i64, i64* %PC
  %2005 = add i64 %2004, 41
  %2006 = load i64, i64* %PC
  %2007 = add i64 %2006, 6
  %2008 = load i64, i64* %PC
  %2009 = add i64 %2008, 6
  store i64 %2009, i64* %PC
  %2010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2011 = load i8, i8* %2010, align 1, !tbaa !2448
  store i8 %2011, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2013 = icmp ne i8 %2011, 0
  %2014 = select i1 %2013, i64 %2005, i64 %2007
  store i64 %2014, i64* %2012, align 8, !tbaa !2428
  %2015 = load i8, i8* %BRANCH_TAKEN
  %2016 = icmp eq i8 %2015, 1
  %2017 = load i64, i64* %RBP
  %2018 = sub i64 %2017, 4
  %2019 = load i64, i64* %PC
  %2020 = add i64 %2019, 4
  store i64 %2020, i64* %PC
  %2021 = inttoptr i64 %2018 to i32*
  %2022 = load i32, i32* %2021
  %2023 = sext i32 %2022 to i64
  store i64 %2023, i64* %RAX, align 8, !tbaa !2428
  %2024 = load i64, i64* %RAX
  %2025 = mul i64 %2024, 4
  %2026 = add i64 %2025, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %2027 = load i64, i64* %PC
  br i1 %2016, label %block_4017c1, label %block_40179e

block_400983:                                     ; preds = %block_400976
  %2028 = sub i64 %3032, 8
  %2029 = load i64, i64* %PC
  %2030 = add i64 %2029, 4
  store i64 %2030, i64* %PC
  %2031 = inttoptr i64 %2028 to i32*
  %2032 = load i32, i32* %2031
  %2033 = sext i32 %2032 to i64
  store i64 %2033, i64* %RAX, align 8, !tbaa !2428
  %2034 = load i64, i64* %RAX
  %2035 = mul i64 %2034, 4
  %2036 = add i64 %2035, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %2037 = load i64, i64* %PC
  %2038 = add i64 %2037, 8
  store i64 %2038, i64* %PC
  %2039 = inttoptr i64 %2036 to i32*
  %2040 = load i32, i32* %2039
  %2041 = sub i32 %2040, -1
  %2042 = icmp ult i32 %2040, -1
  %2043 = zext i1 %2042 to i8
  %2044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2043, i8* %2044, align 1, !tbaa !2432
  %2045 = and i32 %2041, 255
  %2046 = call i32 @llvm.ctpop.i32(i32 %2045) #16
  %2047 = trunc i32 %2046 to i8
  %2048 = and i8 %2047, 1
  %2049 = xor i8 %2048, 1
  %2050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2049, i8* %2050, align 1, !tbaa !2446
  %2051 = xor i32 %2040, -1
  %2052 = xor i32 %2051, %2041
  %2053 = lshr i32 %2052, 4
  %2054 = trunc i32 %2053 to i8
  %2055 = and i8 %2054, 1
  %2056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2055, i8* %2056, align 1, !tbaa !2447
  %2057 = icmp eq i32 %2041, 0
  %2058 = zext i1 %2057 to i8
  %2059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2058, i8* %2059, align 1, !tbaa !2448
  %2060 = lshr i32 %2041, 31
  %2061 = trunc i32 %2060 to i8
  %2062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2061, i8* %2062, align 1, !tbaa !2449
  %2063 = lshr i32 %2040, 31
  %2064 = xor i32 %2063, 1
  %2065 = xor i32 %2060, %2063
  %2066 = add nuw nsw i32 %2065, %2064
  %2067 = icmp eq i32 %2066, 2
  %2068 = zext i1 %2067 to i8
  %2069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2068, i8* %2069, align 1, !tbaa !2450
  %2070 = load i64, i64* %PC
  %2071 = add i64 %2070, 76
  %2072 = load i64, i64* %PC
  %2073 = add i64 %2072, 6
  %2074 = load i64, i64* %PC
  %2075 = add i64 %2074, 6
  store i64 %2075, i64* %PC
  %2076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2077 = load i8, i8* %2076, align 1, !tbaa !2448
  store i8 %2077, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2079 = icmp ne i8 %2077, 0
  %2080 = select i1 %2079, i64 %2071, i64 %2073
  store i64 %2080, i64* %2078, align 8, !tbaa !2428
  %2081 = load i8, i8* %BRANCH_TAKEN
  %2082 = icmp eq i8 %2081, 1
  br i1 %2082, label %block_4009db, label %block_400995

block_4015e8:                                     ; preds = %block_401651, %block_4015ac
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.36, %block_4015ac ], [ %MEMORY.37, %block_401651 ]
  %2083 = load i64, i64* %RBP
  %2084 = sub i64 %2083, 8
  %2085 = load i64, i64* %PC
  %2086 = add i64 %2085, 3
  store i64 %2086, i64* %PC
  %2087 = inttoptr i64 %2084 to i32*
  %2088 = load i32, i32* %2087
  %2089 = zext i32 %2088 to i64
  store i64 %2089, i64* %RAX, align 8, !tbaa !2428
  %2090 = load i64, i64* %RBP
  %2091 = sub i64 %2090, 12
  %2092 = load i64, i64* %PC
  %2093 = add i64 %2092, 4
  store i64 %2093, i64* %PC
  %2094 = inttoptr i64 %2091 to i32*
  %2095 = load i32, i32* %2094
  %2096 = sext i32 %2095 to i64
  store i64 %2096, i64* %RCX, align 8, !tbaa !2428
  %2097 = load i32, i32* %EAX
  %2098 = zext i32 %2097 to i64
  %2099 = load i64, i64* %RBP
  %2100 = load i64, i64* %RCX
  %2101 = mul i64 %2100, 4
  %2102 = add i64 %2099, -1328
  %2103 = add i64 %2102, %2101
  %2104 = load i64, i64* %PC
  %2105 = add i64 %2104, 7
  store i64 %2105, i64* %PC
  %2106 = inttoptr i64 %2103 to i32*
  %2107 = load i32, i32* %2106
  %2108 = sub i32 %2097, %2107
  %2109 = icmp ult i32 %2097, %2107
  %2110 = zext i1 %2109 to i8
  %2111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2110, i8* %2111, align 1, !tbaa !2432
  %2112 = and i32 %2108, 255
  %2113 = call i32 @llvm.ctpop.i32(i32 %2112) #16
  %2114 = trunc i32 %2113 to i8
  %2115 = and i8 %2114, 1
  %2116 = xor i8 %2115, 1
  %2117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2116, i8* %2117, align 1, !tbaa !2446
  %2118 = xor i32 %2107, %2097
  %2119 = xor i32 %2118, %2108
  %2120 = lshr i32 %2119, 4
  %2121 = trunc i32 %2120 to i8
  %2122 = and i8 %2121, 1
  %2123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2122, i8* %2123, align 1, !tbaa !2447
  %2124 = icmp eq i32 %2108, 0
  %2125 = zext i1 %2124 to i8
  %2126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2125, i8* %2126, align 1, !tbaa !2448
  %2127 = lshr i32 %2108, 31
  %2128 = trunc i32 %2127 to i8
  %2129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2128, i8* %2129, align 1, !tbaa !2449
  %2130 = lshr i32 %2097, 31
  %2131 = lshr i32 %2107, 31
  %2132 = xor i32 %2131, %2130
  %2133 = xor i32 %2127, %2130
  %2134 = add nuw nsw i32 %2133, %2132
  %2135 = icmp eq i32 %2134, 2
  %2136 = zext i1 %2135 to i8
  %2137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2136, i8* %2137, align 1, !tbaa !2450
  %2138 = load i64, i64* %PC
  %2139 = add i64 %2138, 110
  %2140 = load i64, i64* %PC
  %2141 = add i64 %2140, 6
  %2142 = load i64, i64* %PC
  %2143 = add i64 %2142, 6
  store i64 %2143, i64* %PC
  %2144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2145 = load i8, i8* %2144, align 1, !tbaa !2449
  %2146 = icmp ne i8 %2145, 0
  %2147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2148 = load i8, i8* %2147, align 1, !tbaa !2450
  %2149 = icmp ne i8 %2148, 0
  %2150 = xor i1 %2146, %2149
  %2151 = xor i1 %2150, true
  %2152 = zext i1 %2151 to i8
  store i8 %2152, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2154 = select i1 %2150, i64 %2141, i64 %2139
  store i64 %2154, i64* %2153, align 8, !tbaa !2428
  %2155 = load i8, i8* %BRANCH_TAKEN
  %2156 = icmp eq i8 %2155, 1
  br i1 %2156, label %block_401664, label %block_4015fc

block_401717:                                     ; preds = %block_40170a
  %2157 = load i64, i64* %RBP
  %2158 = sub i64 %2157, 4
  %2159 = load i64, i64* %PC
  %2160 = add i64 %2159, 4
  store i64 %2160, i64* %PC
  %2161 = inttoptr i64 %2158 to i32*
  %2162 = load i32, i32* %2161
  %2163 = sext i32 %2162 to i64
  store i64 %2163, i64* %RAX, align 8, !tbaa !2428
  %2164 = load i64, i64* %RAX
  %2165 = mul i64 %2164, 4
  %2166 = add i64 %2165, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %2167 = load i64, i64* %PC
  %2168 = add i64 %2167, 8
  store i64 %2168, i64* %PC
  %2169 = inttoptr i64 %2166 to i32*
  %2170 = load i32, i32* %2169
  %2171 = sub i32 %2170, -1
  %2172 = icmp ult i32 %2170, -1
  %2173 = zext i1 %2172 to i8
  %2174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2173, i8* %2174, align 1, !tbaa !2432
  %2175 = and i32 %2171, 255
  %2176 = call i32 @llvm.ctpop.i32(i32 %2175) #16
  %2177 = trunc i32 %2176 to i8
  %2178 = and i8 %2177, 1
  %2179 = xor i8 %2178, 1
  %2180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2179, i8* %2180, align 1, !tbaa !2446
  %2181 = xor i32 %2170, -1
  %2182 = xor i32 %2181, %2171
  %2183 = lshr i32 %2182, 4
  %2184 = trunc i32 %2183 to i8
  %2185 = and i8 %2184, 1
  %2186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2185, i8* %2186, align 1, !tbaa !2447
  %2187 = icmp eq i32 %2171, 0
  %2188 = zext i1 %2187 to i8
  %2189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2188, i8* %2189, align 1, !tbaa !2448
  %2190 = lshr i32 %2171, 31
  %2191 = trunc i32 %2190 to i8
  %2192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2191, i8* %2192, align 1, !tbaa !2449
  %2193 = lshr i32 %2170, 31
  %2194 = xor i32 %2193, 1
  %2195 = xor i32 %2190, %2193
  %2196 = add nuw nsw i32 %2195, %2194
  %2197 = icmp eq i32 %2196, 2
  %2198 = zext i1 %2197 to i8
  %2199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2198, i8* %2199, align 1, !tbaa !2450
  %2200 = load i64, i64* %PC
  %2201 = add i64 %2200, 41
  %2202 = load i64, i64* %PC
  %2203 = add i64 %2202, 6
  %2204 = load i64, i64* %PC
  %2205 = add i64 %2204, 6
  store i64 %2205, i64* %PC
  %2206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2207 = load i8, i8* %2206, align 1, !tbaa !2448
  store i8 %2207, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2209 = icmp ne i8 %2207, 0
  %2210 = select i1 %2209, i64 %2201, i64 %2203
  store i64 %2210, i64* %2208, align 8, !tbaa !2428
  %2211 = load i8, i8* %BRANCH_TAKEN
  %2212 = icmp eq i8 %2211, 1
  %2213 = load i64, i64* %RBP
  %2214 = sub i64 %2213, 4
  %2215 = load i64, i64* %PC
  %2216 = add i64 %2215, 4
  store i64 %2216, i64* %PC
  %2217 = inttoptr i64 %2214 to i32*
  %2218 = load i32, i32* %2217
  %2219 = sext i32 %2218 to i64
  store i64 %2219, i64* %RAX, align 8, !tbaa !2428
  %2220 = load i64, i64* %RAX
  %2221 = mul i64 %2220, 4
  %2222 = add i64 %2221, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %2223 = load i64, i64* %PC
  br i1 %2212, label %block_40174c, label %block_401729

block_40176e:                                     ; preds = %block_40170a
  %2224 = load i64, i64* %PC
  %2225 = add i64 %2224, 5
  %2226 = load i64, i64* %PC
  %2227 = add i64 %2226, 5
  store i64 %2227, i64* %PC
  %2228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2225, i64* %2228, align 8, !tbaa !2428
  br label %block_401773

block_401367:                                     ; preds = %block_4012cd, %block_401362
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.10, %block_401362 ], [ %MEMORY.25, %block_4012cd ]
  %2229 = load i64, i64* %PC
  %2230 = add i64 %2229, 5
  %2231 = load i64, i64* %PC
  %2232 = add i64 %2231, 5
  store i64 %2232, i64* %PC
  %2233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2230, i64* %2233, align 8, !tbaa !2428
  br label %block_40136c

block_400ba2:                                     ; preds = %block_400ad9
  %2234 = add i64 %10504, 3
  store i64 %2234, i64* %PC
  %2235 = inttoptr i64 %10503 to i32*
  %2236 = load i32, i32* %2235
  %2237 = zext i32 %2236 to i64
  store i64 %2237, i64* %RAX, align 8, !tbaa !2428
  %2238 = load i64, i64* %RAX
  %2239 = load i64, i64* %PC
  %2240 = add i64 %2239, 3
  store i64 %2240, i64* %PC
  %2241 = trunc i64 %2238 to i32
  %2242 = sub i32 %2241, 1
  %2243 = zext i32 %2242 to i64
  store i64 %2243, i64* %RAX, align 8, !tbaa !2428
  %2244 = icmp ult i32 %2241, 1
  %2245 = zext i1 %2244 to i8
  %2246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2245, i8* %2246, align 1, !tbaa !2432
  %2247 = and i32 %2242, 255
  %2248 = call i32 @llvm.ctpop.i32(i32 %2247) #16
  %2249 = trunc i32 %2248 to i8
  %2250 = and i8 %2249, 1
  %2251 = xor i8 %2250, 1
  %2252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2251, i8* %2252, align 1, !tbaa !2446
  %2253 = xor i64 1, %2238
  %2254 = trunc i64 %2253 to i32
  %2255 = xor i32 %2254, %2242
  %2256 = lshr i32 %2255, 4
  %2257 = trunc i32 %2256 to i8
  %2258 = and i8 %2257, 1
  %2259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2258, i8* %2259, align 1, !tbaa !2447
  %2260 = icmp eq i32 %2242, 0
  %2261 = zext i1 %2260 to i8
  %2262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2261, i8* %2262, align 1, !tbaa !2448
  %2263 = lshr i32 %2242, 31
  %2264 = trunc i32 %2263 to i8
  %2265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2264, i8* %2265, align 1, !tbaa !2449
  %2266 = lshr i32 %2241, 31
  %2267 = xor i32 %2263, %2266
  %2268 = add nuw nsw i32 %2267, %2266
  %2269 = icmp eq i32 %2268, 2
  %2270 = zext i1 %2269 to i8
  %2271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2270, i8* %2271, align 1, !tbaa !2450
  %2272 = load i64, i64* %RBP
  %2273 = sub i64 %2272, 16
  %2274 = load i32, i32* %EAX
  %2275 = zext i32 %2274 to i64
  %2276 = load i64, i64* %PC
  %2277 = add i64 %2276, 3
  store i64 %2277, i64* %PC
  %2278 = inttoptr i64 %2273 to i32*
  store i32 %2274, i32* %2278
  br label %block_400bab

block_400b9d:                                     ; preds = %block_400b16
  %2279 = load i64, i64* %PC
  %2280 = add i64 %2279, 701
  %2281 = load i64, i64* %PC
  %2282 = add i64 %2281, 5
  store i64 %2282, i64* %PC
  %2283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2280, i64* %2283, align 8, !tbaa !2428
  br label %block_400e5a

block_40175b:                                     ; preds = %block_401729, %block_40174c
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.35, %block_40174c ], [ %MEMORY.35, %block_401729 ]
  %2284 = load i64, i64* %PC
  %2285 = add i64 %2284, 5
  %2286 = load i64, i64* %PC
  %2287 = add i64 %2286, 5
  store i64 %2287, i64* %PC
  %2288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2285, i64* %2288, align 8, !tbaa !2428
  %2289 = load i64, i64* %RBP
  %2290 = sub i64 %2289, 4
  %2291 = load i64, i64* %PC
  %2292 = add i64 %2291, 3
  store i64 %2292, i64* %PC
  %2293 = inttoptr i64 %2290 to i32*
  %2294 = load i32, i32* %2293
  %2295 = zext i32 %2294 to i64
  store i64 %2295, i64* %RAX, align 8, !tbaa !2428
  %2296 = load i64, i64* %RAX
  %2297 = load i64, i64* %PC
  %2298 = add i64 %2297, 3
  store i64 %2298, i64* %PC
  %2299 = trunc i64 %2296 to i32
  %2300 = add i32 1, %2299
  %2301 = zext i32 %2300 to i64
  store i64 %2301, i64* %RAX, align 8, !tbaa !2428
  %2302 = icmp ult i32 %2300, %2299
  %2303 = icmp ult i32 %2300, 1
  %2304 = or i1 %2302, %2303
  %2305 = zext i1 %2304 to i8
  %2306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2305, i8* %2306, align 1, !tbaa !2432
  %2307 = and i32 %2300, 255
  %2308 = call i32 @llvm.ctpop.i32(i32 %2307) #16
  %2309 = trunc i32 %2308 to i8
  %2310 = and i8 %2309, 1
  %2311 = xor i8 %2310, 1
  %2312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2311, i8* %2312, align 1, !tbaa !2446
  %2313 = xor i64 1, %2296
  %2314 = trunc i64 %2313 to i32
  %2315 = xor i32 %2314, %2300
  %2316 = lshr i32 %2315, 4
  %2317 = trunc i32 %2316 to i8
  %2318 = and i8 %2317, 1
  %2319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2318, i8* %2319, align 1, !tbaa !2447
  %2320 = icmp eq i32 %2300, 0
  %2321 = zext i1 %2320 to i8
  %2322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2321, i8* %2322, align 1, !tbaa !2448
  %2323 = lshr i32 %2300, 31
  %2324 = trunc i32 %2323 to i8
  %2325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2324, i8* %2325, align 1, !tbaa !2449
  %2326 = lshr i32 %2299, 31
  %2327 = xor i32 %2323, %2326
  %2328 = add nuw nsw i32 %2327, %2323
  %2329 = icmp eq i32 %2328, 2
  %2330 = zext i1 %2329 to i8
  %2331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2330, i8* %2331, align 1, !tbaa !2450
  %2332 = load i64, i64* %RBP
  %2333 = sub i64 %2332, 4
  %2334 = load i32, i32* %EAX
  %2335 = zext i32 %2334 to i64
  %2336 = load i64, i64* %PC
  %2337 = add i64 %2336, 3
  store i64 %2337, i64* %PC
  %2338 = inttoptr i64 %2333 to i32*
  store i32 %2334, i32* %2338
  %2339 = load i64, i64* %PC
  %2340 = sub i64 %2339, 95
  %2341 = load i64, i64* %PC
  %2342 = add i64 %2341, 5
  store i64 %2342, i64* %PC
  %2343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2340, i64* %2343, align 8, !tbaa !2428
  br label %block_40170a

block_400956:                                     ; preds = %block_400a0a, %block_400930
  %MEMORY.8 = phi %struct.Memory* [ %2, %block_400930 ], [ %MEMORY.50, %block_400a0a ]
  %2344 = load i64, i64* %RBP
  %2345 = sub i64 %2344, 4
  %2346 = load i64, i64* %PC
  %2347 = add i64 %2346, 4
  store i64 %2347, i64* %PC
  %2348 = inttoptr i64 %2345 to i32*
  %2349 = load i32, i32* %2348
  %2350 = sub i32 %2349, 16
  %2351 = icmp ult i32 %2349, 16
  %2352 = zext i1 %2351 to i8
  %2353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2352, i8* %2353, align 1, !tbaa !2432
  %2354 = and i32 %2350, 255
  %2355 = call i32 @llvm.ctpop.i32(i32 %2354) #16
  %2356 = trunc i32 %2355 to i8
  %2357 = and i8 %2356, 1
  %2358 = xor i8 %2357, 1
  %2359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2358, i8* %2359, align 1, !tbaa !2446
  %2360 = xor i32 %2349, 16
  %2361 = xor i32 %2360, %2350
  %2362 = lshr i32 %2361, 4
  %2363 = trunc i32 %2362 to i8
  %2364 = and i8 %2363, 1
  %2365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2364, i8* %2365, align 1, !tbaa !2447
  %2366 = icmp eq i32 %2350, 0
  %2367 = zext i1 %2366 to i8
  %2368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2367, i8* %2368, align 1, !tbaa !2448
  %2369 = lshr i32 %2350, 31
  %2370 = trunc i32 %2369 to i8
  %2371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2370, i8* %2371, align 1, !tbaa !2449
  %2372 = lshr i32 %2349, 31
  %2373 = xor i32 %2369, %2372
  %2374 = add nuw nsw i32 %2373, %2372
  %2375 = icmp eq i32 %2374, 2
  %2376 = zext i1 %2375 to i8
  %2377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2376, i8* %2377, align 1, !tbaa !2450
  %2378 = load i64, i64* %PC
  %2379 = add i64 %2378, 220
  %2380 = load i64, i64* %PC
  %2381 = add i64 %2380, 6
  %2382 = load i64, i64* %PC
  %2383 = add i64 %2382, 6
  store i64 %2383, i64* %PC
  %2384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2385 = load i8, i8* %2384, align 1, !tbaa !2448
  %2386 = icmp eq i8 %2385, 0
  %2387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2388 = load i8, i8* %2387, align 1, !tbaa !2449
  %2389 = icmp ne i8 %2388, 0
  %2390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2391 = load i8, i8* %2390, align 1, !tbaa !2450
  %2392 = icmp ne i8 %2391, 0
  %2393 = xor i1 %2389, %2392
  %2394 = xor i1 %2393, true
  %2395 = and i1 %2386, %2394
  %2396 = zext i1 %2395 to i8
  store i8 %2396, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2398 = select i1 %2395, i64 %2379, i64 %2381
  store i64 %2398, i64* %2397, align 8, !tbaa !2428
  %2399 = load i8, i8* %BRANCH_TAKEN
  %2400 = icmp eq i8 %2399, 1
  %2401 = load i64, i64* %RBP
  br i1 %2400, label %block_400a36, label %block_400960

block_401353:                                     ; preds = %block_401302, %block_4012f0
  %MEMORY.9 = phi %struct.Memory* [ %MEMORY.19, %block_4012f0 ], [ %MEMORY.19, %block_401302 ]
  %2402 = load i64, i64* %RBP
  %2403 = sub i64 %2402, 4
  %2404 = load i64, i64* %PC
  %2405 = add i64 %2404, 4
  store i64 %2405, i64* %PC
  %2406 = inttoptr i64 %2403 to i32*
  %2407 = load i32, i32* %2406
  %2408 = sext i32 %2407 to i64
  store i64 %2408, i64* %RAX, align 8, !tbaa !2428
  %2409 = load i64, i64* %RBP
  %2410 = load i64, i64* %RAX
  %2411 = mul i64 %2410, 4
  %2412 = add i64 %2409, -1616
  %2413 = add i64 %2412, %2411
  %2414 = load i64, i64* %PC
  %2415 = add i64 %2414, 11
  store i64 %2415, i64* %PC
  %2416 = inttoptr i64 %2413 to i32*
  store i32 0, i32* %2416
  br label %block_401362

block_401362:                                     ; preds = %block_401322, %block_401353
  %MEMORY.10 = phi %struct.Memory* [ %MEMORY.9, %block_401353 ], [ %MEMORY.19, %block_401322 ]
  %2417 = load i64, i64* %PC
  %2418 = add i64 %2417, 5
  %2419 = load i64, i64* %PC
  %2420 = add i64 %2419, 5
  store i64 %2420, i64* %PC
  %2421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2418, i64* %2421, align 8, !tbaa !2428
  br label %block_401367

block_40174c:                                     ; preds = %block_401717
  %2422 = add i64 %2223, 11
  store i64 %2422, i64* %PC
  %2423 = inttoptr i64 %2222 to i32*
  store i32 0, i32* %2423
  br label %block_40175b

block_400f3e:                                     ; preds = %block_400f19
  %2424 = load i64, i64* %PC
  %2425 = add i64 %2424, 5
  store i64 %2425, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %2426 = load i64, i64* %RBP
  %2427 = sub i64 %2426, 1168
  %2428 = load i64, i64* %PC
  %2429 = add i64 %2428, 7
  store i64 %2429, i64* %PC
  store i64 %2427, i64* %RCX, align 8, !tbaa !2428
  %2430 = load i64, i64* %RBP
  %2431 = sub i64 %2430, 12
  %2432 = load i64, i64* %PC
  %2433 = add i64 %2432, 3
  store i64 %2433, i64* %PC
  %2434 = inttoptr i64 %2431 to i32*
  %2435 = load i32, i32* %2434
  %2436 = zext i32 %2435 to i64
  store i64 %2436, i64* %RDX, align 8, !tbaa !2428
  %2437 = load i64, i64* %RDX
  %2438 = load i64, i64* %PC
  %2439 = add i64 %2438, 3
  store i64 %2439, i64* %PC
  %2440 = trunc i64 %2437 to i32
  %2441 = add i32 1, %2440
  %2442 = zext i32 %2441 to i64
  store i64 %2442, i64* %RDX, align 8, !tbaa !2428
  %2443 = icmp ult i32 %2441, %2440
  %2444 = icmp ult i32 %2441, 1
  %2445 = or i1 %2443, %2444
  %2446 = zext i1 %2445 to i8
  %2447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2446, i8* %2447, align 1, !tbaa !2432
  %2448 = and i32 %2441, 255
  %2449 = call i32 @llvm.ctpop.i32(i32 %2448) #16
  %2450 = trunc i32 %2449 to i8
  %2451 = and i8 %2450, 1
  %2452 = xor i8 %2451, 1
  %2453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2452, i8* %2453, align 1, !tbaa !2446
  %2454 = xor i64 1, %2437
  %2455 = trunc i64 %2454 to i32
  %2456 = xor i32 %2455, %2441
  %2457 = lshr i32 %2456, 4
  %2458 = trunc i32 %2457 to i8
  %2459 = and i8 %2458, 1
  %2460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2459, i8* %2460, align 1, !tbaa !2447
  %2461 = icmp eq i32 %2441, 0
  %2462 = zext i1 %2461 to i8
  %2463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2462, i8* %2463, align 1, !tbaa !2448
  %2464 = lshr i32 %2441, 31
  %2465 = trunc i32 %2464 to i8
  %2466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2465, i8* %2466, align 1, !tbaa !2449
  %2467 = lshr i32 %2440, 31
  %2468 = xor i32 %2464, %2467
  %2469 = add nuw nsw i32 %2468, %2464
  %2470 = icmp eq i32 %2469, 2
  %2471 = zext i1 %2470 to i8
  %2472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2471, i8* %2472, align 1, !tbaa !2450
  %2473 = load i64, i64* %RDX
  %2474 = load i64, i64* %RBP
  %2475 = sub i64 %2474, 4
  %2476 = load i64, i64* %PC
  %2477 = add i64 %2476, 3
  store i64 %2477, i64* %PC
  %2478 = trunc i64 %2473 to i32
  %2479 = inttoptr i64 %2475 to i32*
  %2480 = load i32, i32* %2479
  %2481 = sub i32 %2478, %2480
  %2482 = zext i32 %2481 to i64
  store i64 %2482, i64* %RDX, align 8, !tbaa !2428
  %2483 = icmp ult i32 %2478, %2480
  %2484 = zext i1 %2483 to i8
  %2485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2484, i8* %2485, align 1, !tbaa !2432
  %2486 = and i32 %2481, 255
  %2487 = call i32 @llvm.ctpop.i32(i32 %2486) #16
  %2488 = trunc i32 %2487 to i8
  %2489 = and i8 %2488, 1
  %2490 = xor i8 %2489, 1
  %2491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2490, i8* %2491, align 1, !tbaa !2446
  %2492 = xor i32 %2480, %2478
  %2493 = xor i32 %2492, %2481
  %2494 = lshr i32 %2493, 4
  %2495 = trunc i32 %2494 to i8
  %2496 = and i8 %2495, 1
  %2497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2496, i8* %2497, align 1, !tbaa !2447
  %2498 = icmp eq i32 %2481, 0
  %2499 = zext i1 %2498 to i8
  %2500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2499, i8* %2500, align 1, !tbaa !2448
  %2501 = lshr i32 %2481, 31
  %2502 = trunc i32 %2501 to i8
  %2503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2502, i8* %2503, align 1, !tbaa !2449
  %2504 = lshr i32 %2478, 31
  %2505 = lshr i32 %2480, 31
  %2506 = xor i32 %2505, %2504
  %2507 = xor i32 %2501, %2504
  %2508 = add nuw nsw i32 %2507, %2506
  %2509 = icmp eq i32 %2508, 2
  %2510 = zext i1 %2509 to i8
  %2511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2510, i8* %2511, align 1, !tbaa !2450
  %2512 = load i32, i32* %EDX
  %2513 = zext i32 %2512 to i64
  %2514 = load i64, i64* %PC
  %2515 = add i64 %2514, 3
  store i64 %2515, i64* %PC
  %2516 = shl i64 %2513, 32
  %2517 = ashr exact i64 %2516, 32
  store i64 %2517, i64* %RSI, align 8, !tbaa !2428
  %2518 = load i64, i64* %RBP
  %2519 = load i64, i64* %RSI
  %2520 = mul i64 %2519, 4
  %2521 = add i64 %2518, -1488
  %2522 = add i64 %2521, %2520
  %2523 = load i64, i64* %PC
  %2524 = add i64 %2523, 7
  store i64 %2524, i64* %PC
  %2525 = inttoptr i64 %2522 to i32*
  %2526 = load i32, i32* %2525
  %2527 = zext i32 %2526 to i64
  store i64 %2527, i64* %RDX, align 8, !tbaa !2428
  %2528 = load i64, i64* %RBP
  %2529 = sub i64 %2528, 12
  %2530 = load i64, i64* %PC
  %2531 = add i64 %2530, 3
  store i64 %2531, i64* %PC
  %2532 = inttoptr i64 %2529 to i32*
  %2533 = load i32, i32* %2532
  %2534 = zext i32 %2533 to i64
  store i64 %2534, i64* %RDI, align 8, !tbaa !2428
  %2535 = load i64, i64* %RDI
  %2536 = load i64, i64* %PC
  %2537 = add i64 %2536, 3
  store i64 %2537, i64* %PC
  %2538 = trunc i64 %2535 to i32
  %2539 = add i32 1, %2538
  %2540 = zext i32 %2539 to i64
  store i64 %2540, i64* %RDI, align 8, !tbaa !2428
  %2541 = icmp ult i32 %2539, %2538
  %2542 = icmp ult i32 %2539, 1
  %2543 = or i1 %2541, %2542
  %2544 = zext i1 %2543 to i8
  %2545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2544, i8* %2545, align 1, !tbaa !2432
  %2546 = and i32 %2539, 255
  %2547 = call i32 @llvm.ctpop.i32(i32 %2546) #16
  %2548 = trunc i32 %2547 to i8
  %2549 = and i8 %2548, 1
  %2550 = xor i8 %2549, 1
  %2551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2550, i8* %2551, align 1, !tbaa !2446
  %2552 = xor i64 1, %2535
  %2553 = trunc i64 %2552 to i32
  %2554 = xor i32 %2553, %2539
  %2555 = lshr i32 %2554, 4
  %2556 = trunc i32 %2555 to i8
  %2557 = and i8 %2556, 1
  %2558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2557, i8* %2558, align 1, !tbaa !2447
  %2559 = icmp eq i32 %2539, 0
  %2560 = zext i1 %2559 to i8
  %2561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2560, i8* %2561, align 1, !tbaa !2448
  %2562 = lshr i32 %2539, 31
  %2563 = trunc i32 %2562 to i8
  %2564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2563, i8* %2564, align 1, !tbaa !2449
  %2565 = lshr i32 %2538, 31
  %2566 = xor i32 %2562, %2565
  %2567 = add nuw nsw i32 %2566, %2562
  %2568 = icmp eq i32 %2567, 2
  %2569 = zext i1 %2568 to i8
  %2570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2569, i8* %2570, align 1, !tbaa !2450
  %2571 = load i32, i32* %EDI
  %2572 = zext i32 %2571 to i64
  %2573 = load i64, i64* %PC
  %2574 = add i64 %2573, 3
  store i64 %2574, i64* %PC
  %2575 = shl i64 %2572, 32
  %2576 = ashr exact i64 %2575, 32
  store i64 %2576, i64* %RSI, align 8, !tbaa !2428
  %2577 = load i64, i64* %RSI
  %2578 = load i64, i64* %PC
  %2579 = add i64 %2578, 4
  store i64 %2579, i64* %PC
  %2580 = shl i64 %2577, 5
  %2581 = icmp slt i64 %2580, 0
  %2582 = shl i64 %2580, 1
  store i64 %2582, i64* %RSI, align 8, !tbaa !2428
  %2583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2584 = zext i1 %2581 to i8
  store i8 %2584, i8* %2583, align 1, !tbaa !2451
  %2585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2586 = trunc i64 %2582 to i32
  %2587 = and i32 %2586, 254
  %2588 = call i32 @llvm.ctpop.i32(i32 %2587) #16
  %2589 = trunc i32 %2588 to i8
  %2590 = and i8 %2589, 1
  %2591 = xor i8 %2590, 1
  store i8 %2591, i8* %2585, align 1, !tbaa !2451
  %2592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2592, align 1, !tbaa !2451
  %2593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2594 = icmp eq i64 %2582, 0
  %2595 = zext i1 %2594 to i8
  store i8 %2595, i8* %2593, align 1, !tbaa !2451
  %2596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2597 = lshr i64 %2582, 63
  %2598 = trunc i64 %2597 to i8
  store i8 %2598, i8* %2596, align 1, !tbaa !2451
  %2599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2599, align 1, !tbaa !2451
  %2600 = load i64, i64* %RCX
  %2601 = load i64, i64* %RSI
  %2602 = load i64, i64* %PC
  %2603 = add i64 %2602, 3
  store i64 %2603, i64* %PC
  %2604 = add i64 %2601, %2600
  store i64 %2604, i64* %RCX, align 8, !tbaa !2428
  %2605 = icmp ult i64 %2604, %2600
  %2606 = icmp ult i64 %2604, %2601
  %2607 = or i1 %2605, %2606
  %2608 = zext i1 %2607 to i8
  %2609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2608, i8* %2609, align 1, !tbaa !2432
  %2610 = trunc i64 %2604 to i32
  %2611 = and i32 %2610, 255
  %2612 = call i32 @llvm.ctpop.i32(i32 %2611) #16
  %2613 = trunc i32 %2612 to i8
  %2614 = and i8 %2613, 1
  %2615 = xor i8 %2614, 1
  %2616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2615, i8* %2616, align 1, !tbaa !2446
  %2617 = xor i64 %2601, %2600
  %2618 = xor i64 %2617, %2604
  %2619 = lshr i64 %2618, 4
  %2620 = trunc i64 %2619 to i8
  %2621 = and i8 %2620, 1
  %2622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2621, i8* %2622, align 1, !tbaa !2447
  %2623 = icmp eq i64 %2604, 0
  %2624 = zext i1 %2623 to i8
  %2625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2624, i8* %2625, align 1, !tbaa !2448
  %2626 = lshr i64 %2604, 63
  %2627 = trunc i64 %2626 to i8
  %2628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2627, i8* %2628, align 1, !tbaa !2449
  %2629 = lshr i64 %2600, 63
  %2630 = lshr i64 %2601, 63
  %2631 = xor i64 %2626, %2629
  %2632 = xor i64 %2626, %2630
  %2633 = add nuw nsw i64 %2631, %2632
  %2634 = icmp eq i64 %2633, 2
  %2635 = zext i1 %2634 to i8
  %2636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2635, i8* %2636, align 1, !tbaa !2450
  %2637 = load i64, i64* %RBP
  %2638 = sub i64 %2637, 4
  %2639 = load i64, i64* %PC
  %2640 = add i64 %2639, 4
  store i64 %2640, i64* %PC
  %2641 = inttoptr i64 %2638 to i32*
  %2642 = load i32, i32* %2641
  %2643 = sext i32 %2642 to i64
  store i64 %2643, i64* %RSI, align 8, !tbaa !2428
  %2644 = load i64, i64* %RCX
  %2645 = load i64, i64* %RSI
  %2646 = mul i64 %2645, 4
  %2647 = add i64 %2646, %2644
  %2648 = load i64, i64* %PC
  %2649 = add i64 %2648, 4
  store i64 %2649, i64* %PC
  %2650 = inttoptr i64 %2647 to i32*
  %2651 = load i32, i32* %2650
  %2652 = sext i32 %2651 to i64
  store i64 %2652, i64* %RCX, align 8, !tbaa !2428
  %2653 = load i64, i64* %RDX
  %2654 = load i64, i64* %RCX
  %2655 = mul i64 %2654, 4
  %2656 = add i64 %2655, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %2657 = load i64, i64* %PC
  %2658 = add i64 %2657, 7
  store i64 %2658, i64* %PC
  %2659 = trunc i64 %2653 to i32
  %2660 = inttoptr i64 %2656 to i32*
  %2661 = load i32, i32* %2660
  %2662 = add i32 %2661, %2659
  %2663 = zext i32 %2662 to i64
  store i64 %2663, i64* %RDX, align 8, !tbaa !2428
  %2664 = icmp ult i32 %2662, %2659
  %2665 = icmp ult i32 %2662, %2661
  %2666 = or i1 %2664, %2665
  %2667 = zext i1 %2666 to i8
  %2668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2667, i8* %2668, align 1, !tbaa !2432
  %2669 = and i32 %2662, 255
  %2670 = call i32 @llvm.ctpop.i32(i32 %2669) #16
  %2671 = trunc i32 %2670 to i8
  %2672 = and i8 %2671, 1
  %2673 = xor i8 %2672, 1
  %2674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2673, i8* %2674, align 1, !tbaa !2446
  %2675 = xor i32 %2661, %2659
  %2676 = xor i32 %2675, %2662
  %2677 = lshr i32 %2676, 4
  %2678 = trunc i32 %2677 to i8
  %2679 = and i8 %2678, 1
  %2680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2679, i8* %2680, align 1, !tbaa !2447
  %2681 = icmp eq i32 %2662, 0
  %2682 = zext i1 %2681 to i8
  %2683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2682, i8* %2683, align 1, !tbaa !2448
  %2684 = lshr i32 %2662, 31
  %2685 = trunc i32 %2684 to i8
  %2686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2685, i8* %2686, align 1, !tbaa !2449
  %2687 = lshr i32 %2659, 31
  %2688 = lshr i32 %2661, 31
  %2689 = xor i32 %2684, %2687
  %2690 = xor i32 %2684, %2688
  %2691 = add nuw nsw i32 %2689, %2690
  %2692 = icmp eq i32 %2691, 2
  %2693 = zext i1 %2692 to i8
  %2694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2693, i8* %2694, align 1, !tbaa !2450
  %2695 = load i64, i64* %RBP
  %2696 = sub i64 %2695, 2708
  %2697 = load i32, i32* %EAX
  %2698 = zext i32 %2697 to i64
  %2699 = load i64, i64* %PC
  %2700 = add i64 %2699, 6
  store i64 %2700, i64* %PC
  %2701 = inttoptr i64 %2696 to i32*
  store i32 %2697, i32* %2701
  %2702 = load i32, i32* %EDX
  %2703 = zext i32 %2702 to i64
  %2704 = load i64, i64* %PC
  %2705 = add i64 %2704, 2
  store i64 %2705, i64* %PC
  %2706 = and i64 %2703, 4294967295
  store i64 %2706, i64* %RAX, align 8, !tbaa !2428
  %2707 = load i64, i64* %PC
  %2708 = add i64 %2707, 1
  store i64 %2708, i64* %PC
  %2709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %2710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %2711 = bitcast %union.anon* %2710 to i32*
  %2712 = load i32, i32* %2711, align 8, !tbaa !2452
  %2713 = sext i32 %2712 to i64
  %2714 = lshr i64 %2713, 32
  store i64 %2714, i64* %2709, align 8, !tbaa !2428
  %2715 = load i64, i64* %RBP
  %2716 = sub i64 %2715, 2708
  %2717 = load i64, i64* %PC
  %2718 = add i64 %2717, 6
  store i64 %2718, i64* %PC
  %2719 = inttoptr i64 %2716 to i32*
  %2720 = load i32, i32* %2719
  %2721 = zext i32 %2720 to i64
  store i64 %2721, i64* %RDI, align 8, !tbaa !2428
  %2722 = load i32, i32* %EDI
  %2723 = zext i32 %2722 to i64
  %2724 = load i64, i64* %PC
  %2725 = add i64 %2724, 2
  store i64 %2725, i64* %PC
  %2726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %2727 = bitcast %union.anon* %2726 to i32*
  %2728 = load i32, i32* %2727, align 8, !tbaa !2452
  %2729 = zext i32 %2728 to i64
  %2730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %2731 = bitcast %union.anon* %2730 to i32*
  %2732 = load i32, i32* %2731, align 8, !tbaa !2452
  %2733 = zext i32 %2732 to i64
  %2734 = shl i64 %2723, 32
  %2735 = ashr exact i64 %2734, 32
  %2736 = shl nuw i64 %2733, 32
  %2737 = or i64 %2736, %2729
  %2738 = sdiv i64 %2737, %2735
  %2739 = shl i64 %2738, 32
  %2740 = ashr exact i64 %2739, 32
  %2741 = icmp eq i64 %2738, %2740
  br i1 %2741, label %2746, label %2742

; <label>:2742:                                   ; preds = %block_400f3e
  %2743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2744 = load i64, i64* %2743, align 8, !tbaa !2428
  %2745 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2744, %struct.Memory* %MEMORY.18) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5

; <label>:2746:                                   ; preds = %block_400f3e
  %2747 = srem i64 %2737, %2735
  %2748 = getelementptr inbounds %union.anon, %union.anon* %2726, i64 0, i32 0
  %2749 = and i64 %2738, 4294967295
  store i64 %2749, i64* %2748, align 8, !tbaa !2428
  %2750 = getelementptr inbounds %union.anon, %union.anon* %2730, i64 0, i32 0
  %2751 = and i64 %2747, 4294967295
  store i64 %2751, i64* %2750, align 8, !tbaa !2428
  %2752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2752, align 1, !tbaa !2432
  %2753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %2753, align 1, !tbaa !2446
  %2754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2754, align 1, !tbaa !2447
  %2755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2755, align 1, !tbaa !2448
  %2756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2756, align 1, !tbaa !2449
  %2757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2757, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit5: ; preds = %2742, %2746
  %2758 = phi %struct.Memory* [ %2745, %2742 ], [ %MEMORY.18, %2746 ]
  %2759 = load i32, i32* %EDX
  %2760 = zext i32 %2759 to i64
  %2761 = load i64, i64* %PC
  %2762 = add i64 %2761, 3
  store i64 %2762, i64* %PC
  %2763 = shl i64 %2760, 32
  %2764 = ashr exact i64 %2763, 32
  store i64 %2764, i64* %RCX, align 8, !tbaa !2428
  %2765 = load i64, i64* %RCX
  %2766 = mul i64 %2765, 4
  %2767 = add i64 %2766, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %2768 = load i64, i64* %PC
  %2769 = add i64 %2768, 7
  store i64 %2769, i64* %PC
  %2770 = inttoptr i64 %2767 to i32*
  %2771 = load i32, i32* %2770
  %2772 = zext i32 %2771 to i64
  store i64 %2772, i64* %RDX, align 8, !tbaa !2428
  %2773 = bitcast i32* %R8D to i64*
  %2774 = load i64, i64* %RBP
  %2775 = sub i64 %2774, 12
  %2776 = load i64, i64* %PC
  %2777 = add i64 %2776, 4
  store i64 %2777, i64* %PC
  %2778 = inttoptr i64 %2775 to i32*
  %2779 = load i32, i32* %2778
  %2780 = zext i32 %2779 to i64
  store i64 %2780, i64* %2773, align 8, !tbaa !2428
  %2781 = bitcast i32* %R8D to i64*
  %2782 = load i32, i32* %R8D
  %2783 = zext i32 %2782 to i64
  %2784 = load i64, i64* %PC
  %2785 = add i64 %2784, 4
  store i64 %2785, i64* %PC
  %2786 = add i32 1, %2782
  %2787 = zext i32 %2786 to i64
  store i64 %2787, i64* %2781, align 8, !tbaa !2428
  %2788 = icmp ult i32 %2786, %2782
  %2789 = icmp ult i32 %2786, 1
  %2790 = or i1 %2788, %2789
  %2791 = zext i1 %2790 to i8
  %2792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2791, i8* %2792, align 1, !tbaa !2432
  %2793 = and i32 %2786, 255
  %2794 = call i32 @llvm.ctpop.i32(i32 %2793) #16
  %2795 = trunc i32 %2794 to i8
  %2796 = and i8 %2795, 1
  %2797 = xor i8 %2796, 1
  %2798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2797, i8* %2798, align 1, !tbaa !2446
  %2799 = xor i64 1, %2783
  %2800 = trunc i64 %2799 to i32
  %2801 = xor i32 %2800, %2786
  %2802 = lshr i32 %2801, 4
  %2803 = trunc i32 %2802 to i8
  %2804 = and i8 %2803, 1
  %2805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2804, i8* %2805, align 1, !tbaa !2447
  %2806 = icmp eq i32 %2786, 0
  %2807 = zext i1 %2806 to i8
  %2808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2807, i8* %2808, align 1, !tbaa !2448
  %2809 = lshr i32 %2786, 31
  %2810 = trunc i32 %2809 to i8
  %2811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2810, i8* %2811, align 1, !tbaa !2449
  %2812 = lshr i32 %2782, 31
  %2813 = xor i32 %2809, %2812
  %2814 = add nuw nsw i32 %2813, %2809
  %2815 = icmp eq i32 %2814, 2
  %2816 = zext i1 %2815 to i8
  %2817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2816, i8* %2817, align 1, !tbaa !2450
  %2818 = load i32, i32* %R8D
  %2819 = zext i32 %2818 to i64
  %2820 = load i64, i64* %PC
  %2821 = add i64 %2820, 3
  store i64 %2821, i64* %PC
  %2822 = shl i64 %2819, 32
  %2823 = ashr exact i64 %2822, 32
  store i64 %2823, i64* %RCX, align 8, !tbaa !2428
  %2824 = load i64, i64* %RDX
  %2825 = load i64, i64* %RBP
  %2826 = load i64, i64* %RCX
  %2827 = mul i64 %2826, 4
  %2828 = add i64 %2825, -1248
  %2829 = add i64 %2828, %2827
  %2830 = load i64, i64* %PC
  %2831 = add i64 %2830, 7
  store i64 %2831, i64* %PC
  %2832 = trunc i64 %2824 to i32
  %2833 = inttoptr i64 %2829 to i32*
  %2834 = load i32, i32* %2833
  %2835 = xor i32 %2834, %2832
  %2836 = zext i32 %2835 to i64
  store i64 %2836, i64* %RDX, align 8, !tbaa !2428
  %2837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2837, align 1, !tbaa !2432
  %2838 = and i32 %2835, 255
  %2839 = call i32 @llvm.ctpop.i32(i32 %2838) #16
  %2840 = trunc i32 %2839 to i8
  %2841 = and i8 %2840, 1
  %2842 = xor i8 %2841, 1
  %2843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2842, i8* %2843, align 1, !tbaa !2446
  %2844 = icmp eq i32 %2835, 0
  %2845 = zext i1 %2844 to i8
  %2846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2845, i8* %2846, align 1, !tbaa !2448
  %2847 = lshr i32 %2835, 31
  %2848 = trunc i32 %2847 to i8
  %2849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2848, i8* %2849, align 1, !tbaa !2449
  %2850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2850, align 1, !tbaa !2450
  %2851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2851, align 1, !tbaa !2447
  %2852 = load i64, i64* %RBP
  %2853 = load i64, i64* %RCX
  %2854 = mul i64 %2853, 4
  %2855 = add i64 %2852, -1248
  %2856 = add i64 %2855, %2854
  %2857 = load i32, i32* %EDX
  %2858 = zext i32 %2857 to i64
  %2859 = load i64, i64* %PC
  %2860 = add i64 %2859, 7
  store i64 %2860, i64* %PC
  %2861 = inttoptr i64 %2856 to i32*
  store i32 %2857, i32* %2861
  br label %block_400fb0

block_401133:                                     ; preds = %block_40111f
  %2862 = sub i64 %3687, 8
  %2863 = load i64, i64* %PC
  %2864 = add i64 %2863, 4
  store i64 %2864, i64* %PC
  %2865 = inttoptr i64 %2862 to i32*
  %2866 = load i32, i32* %2865
  %2867 = sext i32 %2866 to i64
  store i64 %2867, i64* %RAX, align 8, !tbaa !2428
  %2868 = load i64, i64* %RBP
  %2869 = load i64, i64* %RAX
  %2870 = mul i64 %2869, 4
  %2871 = add i64 %2868, -2688
  %2872 = add i64 %2871, %2870
  %2873 = load i64, i64* %PC
  %2874 = add i64 %2873, 8
  store i64 %2874, i64* %PC
  %2875 = inttoptr i64 %2872 to i32*
  %2876 = load i32, i32* %2875
  %2877 = sub i32 %2876, -1
  %2878 = icmp ult i32 %2876, -1
  %2879 = zext i1 %2878 to i8
  %2880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2879, i8* %2880, align 1, !tbaa !2432
  %2881 = and i32 %2877, 255
  %2882 = call i32 @llvm.ctpop.i32(i32 %2881) #16
  %2883 = trunc i32 %2882 to i8
  %2884 = and i8 %2883, 1
  %2885 = xor i8 %2884, 1
  %2886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2885, i8* %2886, align 1, !tbaa !2446
  %2887 = xor i32 %2876, -1
  %2888 = xor i32 %2887, %2877
  %2889 = lshr i32 %2888, 4
  %2890 = trunc i32 %2889 to i8
  %2891 = and i8 %2890, 1
  %2892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2891, i8* %2892, align 1, !tbaa !2447
  %2893 = icmp eq i32 %2877, 0
  %2894 = zext i1 %2893 to i8
  %2895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2894, i8* %2895, align 1, !tbaa !2448
  %2896 = lshr i32 %2877, 31
  %2897 = trunc i32 %2896 to i8
  %2898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2897, i8* %2898, align 1, !tbaa !2449
  %2899 = lshr i32 %2876, 31
  %2900 = xor i32 %2899, 1
  %2901 = xor i32 %2896, %2899
  %2902 = add nuw nsw i32 %2901, %2900
  %2903 = icmp eq i32 %2902, 2
  %2904 = zext i1 %2903 to i8
  %2905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2904, i8* %2905, align 1, !tbaa !2450
  %2906 = load i64, i64* %PC
  %2907 = add i64 %2906, 78
  %2908 = load i64, i64* %PC
  %2909 = add i64 %2908, 6
  %2910 = load i64, i64* %PC
  %2911 = add i64 %2910, 6
  store i64 %2911, i64* %PC
  %2912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2913 = load i8, i8* %2912, align 1, !tbaa !2448
  store i8 %2913, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2915 = icmp ne i8 %2913, 0
  %2916 = select i1 %2915, i64 %2907, i64 %2909
  store i64 %2916, i64* %2914, align 8, !tbaa !2428
  %2917 = load i8, i8* %BRANCH_TAKEN
  %2918 = icmp eq i8 %2917, 1
  br i1 %2918, label %block_40118d, label %block_401145

block_4017d0:                                     ; preds = %block_40179e, %block_4017c1
  %MEMORY.11 = phi %struct.Memory* [ %MEMORY.4, %block_4017c1 ], [ %MEMORY.4, %block_40179e ]
  %2919 = load i64, i64* %PC
  %2920 = add i64 %2919, 5
  %2921 = load i64, i64* %PC
  %2922 = add i64 %2921, 5
  store i64 %2922, i64* %PC
  %2923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2920, i64* %2923, align 8, !tbaa !2428
  %2924 = load i64, i64* %RBP
  %2925 = sub i64 %2924, 4
  %2926 = load i64, i64* %PC
  %2927 = add i64 %2926, 3
  store i64 %2927, i64* %PC
  %2928 = inttoptr i64 %2925 to i32*
  %2929 = load i32, i32* %2928
  %2930 = zext i32 %2929 to i64
  store i64 %2930, i64* %RAX, align 8, !tbaa !2428
  %2931 = load i64, i64* %RAX
  %2932 = load i64, i64* %PC
  %2933 = add i64 %2932, 3
  store i64 %2933, i64* %PC
  %2934 = trunc i64 %2931 to i32
  %2935 = add i32 1, %2934
  %2936 = zext i32 %2935 to i64
  store i64 %2936, i64* %RAX, align 8, !tbaa !2428
  %2937 = icmp ult i32 %2935, %2934
  %2938 = icmp ult i32 %2935, 1
  %2939 = or i1 %2937, %2938
  %2940 = zext i1 %2939 to i8
  %2941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2940, i8* %2941, align 1, !tbaa !2432
  %2942 = and i32 %2935, 255
  %2943 = call i32 @llvm.ctpop.i32(i32 %2942) #16
  %2944 = trunc i32 %2943 to i8
  %2945 = and i8 %2944, 1
  %2946 = xor i8 %2945, 1
  %2947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2946, i8* %2947, align 1, !tbaa !2446
  %2948 = xor i64 1, %2931
  %2949 = trunc i64 %2948 to i32
  %2950 = xor i32 %2949, %2935
  %2951 = lshr i32 %2950, 4
  %2952 = trunc i32 %2951 to i8
  %2953 = and i8 %2952, 1
  %2954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2953, i8* %2954, align 1, !tbaa !2447
  %2955 = icmp eq i32 %2935, 0
  %2956 = zext i1 %2955 to i8
  %2957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2956, i8* %2957, align 1, !tbaa !2448
  %2958 = lshr i32 %2935, 31
  %2959 = trunc i32 %2958 to i8
  %2960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2959, i8* %2960, align 1, !tbaa !2449
  %2961 = lshr i32 %2934, 31
  %2962 = xor i32 %2958, %2961
  %2963 = add nuw nsw i32 %2962, %2958
  %2964 = icmp eq i32 %2963, 2
  %2965 = zext i1 %2964 to i8
  %2966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2965, i8* %2966, align 1, !tbaa !2450
  %2967 = load i64, i64* %RBP
  %2968 = sub i64 %2967, 4
  %2969 = load i32, i32* %EAX
  %2970 = zext i32 %2969 to i64
  %2971 = load i64, i64* %PC
  %2972 = add i64 %2971, 3
  store i64 %2972, i64* %PC
  %2973 = inttoptr i64 %2968 to i32*
  store i32 %2969, i32* %2973
  %2974 = load i64, i64* %PC
  %2975 = sub i64 %2974, 95
  %2976 = load i64, i64* %PC
  %2977 = add i64 %2976, 5
  store i64 %2977, i64* %PC
  %2978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2975, i64* %2978, align 8, !tbaa !2428
  br label %block_40177f

block_400976:                                     ; preds = %block_400960, %block_4009db
  %MEMORY.12 = phi %struct.Memory* [ %MEMORY.8, %block_400960 ], [ %MEMORY.2, %block_4009db ]
  %2979 = load i64, i64* %RBP
  %2980 = sub i64 %2979, 8
  %2981 = load i64, i64* %PC
  %2982 = add i64 %2981, 7
  store i64 %2982, i64* %PC
  %2983 = inttoptr i64 %2980 to i32*
  %2984 = load i32, i32* %2983
  %2985 = sub i32 %2984, 255
  %2986 = icmp ult i32 %2984, 255
  %2987 = zext i1 %2986 to i8
  %2988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2987, i8* %2988, align 1, !tbaa !2432
  %2989 = and i32 %2985, 255
  %2990 = call i32 @llvm.ctpop.i32(i32 %2989) #16
  %2991 = trunc i32 %2990 to i8
  %2992 = and i8 %2991, 1
  %2993 = xor i8 %2992, 1
  %2994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2993, i8* %2994, align 1, !tbaa !2446
  %2995 = xor i32 %2984, 255
  %2996 = xor i32 %2995, %2985
  %2997 = lshr i32 %2996, 4
  %2998 = trunc i32 %2997 to i8
  %2999 = and i8 %2998, 1
  %3000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2999, i8* %3000, align 1, !tbaa !2447
  %3001 = icmp eq i32 %2985, 0
  %3002 = zext i1 %3001 to i8
  %3003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3002, i8* %3003, align 1, !tbaa !2448
  %3004 = lshr i32 %2985, 31
  %3005 = trunc i32 %3004 to i8
  %3006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3005, i8* %3006, align 1, !tbaa !2449
  %3007 = lshr i32 %2984, 31
  %3008 = xor i32 %3004, %3007
  %3009 = add nuw nsw i32 %3008, %3007
  %3010 = icmp eq i32 %3009, 2
  %3011 = zext i1 %3010 to i8
  %3012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3011, i8* %3012, align 1, !tbaa !2450
  %3013 = load i64, i64* %PC
  %3014 = add i64 %3013, 113
  %3015 = load i64, i64* %PC
  %3016 = add i64 %3015, 6
  %3017 = load i64, i64* %PC
  %3018 = add i64 %3017, 6
  store i64 %3018, i64* %PC
  %3019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3020 = load i8, i8* %3019, align 1, !tbaa !2449
  %3021 = icmp ne i8 %3020, 0
  %3022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3023 = load i8, i8* %3022, align 1, !tbaa !2450
  %3024 = icmp ne i8 %3023, 0
  %3025 = xor i1 %3021, %3024
  %3026 = xor i1 %3025, true
  %3027 = zext i1 %3026 to i8
  store i8 %3027, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3029 = select i1 %3025, i64 %3016, i64 %3014
  store i64 %3029, i64* %3028, align 8, !tbaa !2428
  %3030 = load i8, i8* %BRANCH_TAKEN
  %3031 = icmp eq i8 %3030, 1
  %3032 = load i64, i64* %RBP
  br i1 %3031, label %block_4009ee, label %block_400983

block_401729:                                     ; preds = %block_401717
  %3033 = add i64 %2223, 8
  store i64 %3033, i64* %PC
  %3034 = inttoptr i64 %2222 to i32*
  %3035 = load i32, i32* %3034
  %3036 = sext i32 %3035 to i64
  store i64 %3036, i64* %RAX, align 8, !tbaa !2428
  %3037 = load i64, i64* %RAX
  %3038 = mul i64 %3037, 4
  %3039 = add i64 %3038, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %3040 = load i64, i64* %PC
  %3041 = add i64 %3040, 7
  store i64 %3041, i64* %PC
  %3042 = inttoptr i64 %3039 to i32*
  %3043 = load i32, i32* %3042
  %3044 = zext i32 %3043 to i64
  store i64 %3044, i64* %RCX, align 8, !tbaa !2428
  %3045 = load i64, i64* %RBP
  %3046 = sub i64 %3045, 4
  %3047 = load i64, i64* %PC
  %3048 = add i64 %3047, 4
  store i64 %3048, i64* %PC
  %3049 = inttoptr i64 %3046 to i32*
  %3050 = load i32, i32* %3049
  %3051 = sext i32 %3050 to i64
  store i64 %3051, i64* %RAX, align 8, !tbaa !2428
  %3052 = load i64, i64* %RAX
  %3053 = mul i64 %3052, 4
  %3054 = add i64 %3053, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %3055 = load i32, i32* %ECX
  %3056 = zext i32 %3055 to i64
  %3057 = load i64, i64* %PC
  %3058 = add i64 %3057, 7
  store i64 %3058, i64* %PC
  %3059 = inttoptr i64 %3054 to i32*
  store i32 %3055, i32* %3059
  %3060 = load i64, i64* %PC
  %3061 = add i64 %3060, 20
  %3062 = load i64, i64* %PC
  %3063 = add i64 %3062, 5
  store i64 %3063, i64* %PC
  %3064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3061, i64* %3064, align 8, !tbaa !2428
  br label %block_40175b

block_400dcb:                                     ; preds = %block_400dc4, %block_400ddf
  %MEMORY.13 = phi %struct.Memory* [ %MEMORY.21, %block_400dc4 ], [ %MEMORY.13, %block_400ddf ]
  %3065 = load i64, i64* %RBP
  %3066 = sub i64 %3065, 4
  %3067 = load i64, i64* %PC
  %3068 = add i64 %3067, 3
  store i64 %3068, i64* %PC
  %3069 = inttoptr i64 %3066 to i32*
  %3070 = load i32, i32* %3069
  %3071 = zext i32 %3070 to i64
  store i64 %3071, i64* %RAX, align 8, !tbaa !2428
  %3072 = load i64, i64* %RBP
  %3073 = sub i64 %3072, 12
  %3074 = load i64, i64* %PC
  %3075 = add i64 %3074, 4
  store i64 %3075, i64* %PC
  %3076 = inttoptr i64 %3073 to i32*
  %3077 = load i32, i32* %3076
  %3078 = sext i32 %3077 to i64
  store i64 %3078, i64* %RCX, align 8, !tbaa !2428
  %3079 = load i32, i32* %EAX
  %3080 = zext i32 %3079 to i64
  %3081 = load i64, i64* %RBP
  %3082 = load i64, i64* %RCX
  %3083 = mul i64 %3082, 4
  %3084 = add i64 %3081, -1328
  %3085 = add i64 %3084, %3083
  %3086 = load i64, i64* %PC
  %3087 = add i64 %3086, 7
  store i64 %3087, i64* %PC
  %3088 = inttoptr i64 %3085 to i32*
  %3089 = load i32, i32* %3088
  %3090 = sub i32 %3079, %3089
  %3091 = icmp ult i32 %3079, %3089
  %3092 = zext i1 %3091 to i8
  %3093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3092, i8* %3093, align 1, !tbaa !2432
  %3094 = and i32 %3090, 255
  %3095 = call i32 @llvm.ctpop.i32(i32 %3094) #16
  %3096 = trunc i32 %3095 to i8
  %3097 = and i8 %3096, 1
  %3098 = xor i8 %3097, 1
  %3099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3098, i8* %3099, align 1, !tbaa !2446
  %3100 = xor i32 %3089, %3079
  %3101 = xor i32 %3100, %3090
  %3102 = lshr i32 %3101, 4
  %3103 = trunc i32 %3102 to i8
  %3104 = and i8 %3103, 1
  %3105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3104, i8* %3105, align 1, !tbaa !2447
  %3106 = icmp eq i32 %3090, 0
  %3107 = zext i1 %3106 to i8
  %3108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3107, i8* %3108, align 1, !tbaa !2448
  %3109 = lshr i32 %3090, 31
  %3110 = trunc i32 %3109 to i8
  %3111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3110, i8* %3111, align 1, !tbaa !2449
  %3112 = lshr i32 %3079, 31
  %3113 = lshr i32 %3089, 31
  %3114 = xor i32 %3113, %3112
  %3115 = xor i32 %3109, %3112
  %3116 = add nuw nsw i32 %3115, %3114
  %3117 = icmp eq i32 %3116, 2
  %3118 = zext i1 %3117 to i8
  %3119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3118, i8* %3119, align 1, !tbaa !2450
  %3120 = load i64, i64* %PC
  %3121 = add i64 %3120, 124
  %3122 = load i64, i64* %PC
  %3123 = add i64 %3122, 6
  %3124 = load i64, i64* %PC
  %3125 = add i64 %3124, 6
  store i64 %3125, i64* %PC
  %3126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3127 = load i8, i8* %3126, align 1, !tbaa !2448
  %3128 = icmp eq i8 %3127, 0
  %3129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3130 = load i8, i8* %3129, align 1, !tbaa !2449
  %3131 = icmp ne i8 %3130, 0
  %3132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3133 = load i8, i8* %3132, align 1, !tbaa !2450
  %3134 = icmp ne i8 %3133, 0
  %3135 = xor i1 %3131, %3134
  %3136 = xor i1 %3135, true
  %3137 = and i1 %3128, %3136
  %3138 = zext i1 %3137 to i8
  store i8 %3138, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3140 = select i1 %3137, i64 %3121, i64 %3123
  store i64 %3140, i64* %3139, align 8, !tbaa !2428
  %3141 = load i8, i8* %BRANCH_TAKEN
  %3142 = icmp eq i8 %3141, 1
  br i1 %3142, label %block_400e55, label %block_400ddf

block_400f19:                                     ; preds = %block_400eff
  %3143 = load i64, i64* %RBP
  %3144 = sub i64 %3143, 1168
  %3145 = load i64, i64* %PC
  %3146 = add i64 %3145, 7
  store i64 %3146, i64* %PC
  store i64 %3144, i64* %RAX, align 8, !tbaa !2428
  %3147 = load i64, i64* %RBP
  %3148 = sub i64 %3147, 12
  %3149 = load i64, i64* %PC
  %3150 = add i64 %3149, 3
  store i64 %3150, i64* %PC
  %3151 = inttoptr i64 %3148 to i32*
  %3152 = load i32, i32* %3151
  %3153 = zext i32 %3152 to i64
  store i64 %3153, i64* %RCX, align 8, !tbaa !2428
  %3154 = load i64, i64* %RCX
  %3155 = load i64, i64* %PC
  %3156 = add i64 %3155, 3
  store i64 %3156, i64* %PC
  %3157 = trunc i64 %3154 to i32
  %3158 = add i32 1, %3157
  %3159 = zext i32 %3158 to i64
  store i64 %3159, i64* %RCX, align 8, !tbaa !2428
  %3160 = icmp ult i32 %3158, %3157
  %3161 = icmp ult i32 %3158, 1
  %3162 = or i1 %3160, %3161
  %3163 = zext i1 %3162 to i8
  %3164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3163, i8* %3164, align 1, !tbaa !2432
  %3165 = and i32 %3158, 255
  %3166 = call i32 @llvm.ctpop.i32(i32 %3165) #16
  %3167 = trunc i32 %3166 to i8
  %3168 = and i8 %3167, 1
  %3169 = xor i8 %3168, 1
  %3170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3169, i8* %3170, align 1, !tbaa !2446
  %3171 = xor i64 1, %3154
  %3172 = trunc i64 %3171 to i32
  %3173 = xor i32 %3172, %3158
  %3174 = lshr i32 %3173, 4
  %3175 = trunc i32 %3174 to i8
  %3176 = and i8 %3175, 1
  %3177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3176, i8* %3177, align 1, !tbaa !2447
  %3178 = icmp eq i32 %3158, 0
  %3179 = zext i1 %3178 to i8
  %3180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3179, i8* %3180, align 1, !tbaa !2448
  %3181 = lshr i32 %3158, 31
  %3182 = trunc i32 %3181 to i8
  %3183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3182, i8* %3183, align 1, !tbaa !2449
  %3184 = lshr i32 %3157, 31
  %3185 = xor i32 %3181, %3184
  %3186 = add nuw nsw i32 %3185, %3181
  %3187 = icmp eq i32 %3186, 2
  %3188 = zext i1 %3187 to i8
  %3189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3188, i8* %3189, align 1, !tbaa !2450
  %3190 = load i32, i32* %ECX
  %3191 = zext i32 %3190 to i64
  %3192 = load i64, i64* %PC
  %3193 = add i64 %3192, 3
  store i64 %3193, i64* %PC
  %3194 = shl i64 %3191, 32
  %3195 = ashr exact i64 %3194, 32
  store i64 %3195, i64* %RDX, align 8, !tbaa !2428
  %3196 = load i64, i64* %RDX
  %3197 = load i64, i64* %PC
  %3198 = add i64 %3197, 4
  store i64 %3198, i64* %PC
  %3199 = shl i64 %3196, 5
  %3200 = icmp slt i64 %3199, 0
  %3201 = shl i64 %3199, 1
  store i64 %3201, i64* %RDX, align 8, !tbaa !2428
  %3202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3203 = zext i1 %3200 to i8
  store i8 %3203, i8* %3202, align 1, !tbaa !2451
  %3204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3205 = trunc i64 %3201 to i32
  %3206 = and i32 %3205, 254
  %3207 = call i32 @llvm.ctpop.i32(i32 %3206) #16
  %3208 = trunc i32 %3207 to i8
  %3209 = and i8 %3208, 1
  %3210 = xor i8 %3209, 1
  store i8 %3210, i8* %3204, align 1, !tbaa !2451
  %3211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3211, align 1, !tbaa !2451
  %3212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3213 = icmp eq i64 %3201, 0
  %3214 = zext i1 %3213 to i8
  store i8 %3214, i8* %3212, align 1, !tbaa !2451
  %3215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3216 = lshr i64 %3201, 63
  %3217 = trunc i64 %3216 to i8
  store i8 %3217, i8* %3215, align 1, !tbaa !2451
  %3218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3218, align 1, !tbaa !2451
  %3219 = load i64, i64* %RAX
  %3220 = load i64, i64* %RDX
  %3221 = load i64, i64* %PC
  %3222 = add i64 %3221, 3
  store i64 %3222, i64* %PC
  %3223 = add i64 %3220, %3219
  store i64 %3223, i64* %RAX, align 8, !tbaa !2428
  %3224 = icmp ult i64 %3223, %3219
  %3225 = icmp ult i64 %3223, %3220
  %3226 = or i1 %3224, %3225
  %3227 = zext i1 %3226 to i8
  %3228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3227, i8* %3228, align 1, !tbaa !2432
  %3229 = trunc i64 %3223 to i32
  %3230 = and i32 %3229, 255
  %3231 = call i32 @llvm.ctpop.i32(i32 %3230) #16
  %3232 = trunc i32 %3231 to i8
  %3233 = and i8 %3232, 1
  %3234 = xor i8 %3233, 1
  %3235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3234, i8* %3235, align 1, !tbaa !2446
  %3236 = xor i64 %3220, %3219
  %3237 = xor i64 %3236, %3223
  %3238 = lshr i64 %3237, 4
  %3239 = trunc i64 %3238 to i8
  %3240 = and i8 %3239, 1
  %3241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3240, i8* %3241, align 1, !tbaa !2447
  %3242 = icmp eq i64 %3223, 0
  %3243 = zext i1 %3242 to i8
  %3244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3243, i8* %3244, align 1, !tbaa !2448
  %3245 = lshr i64 %3223, 63
  %3246 = trunc i64 %3245 to i8
  %3247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3246, i8* %3247, align 1, !tbaa !2449
  %3248 = lshr i64 %3219, 63
  %3249 = lshr i64 %3220, 63
  %3250 = xor i64 %3245, %3248
  %3251 = xor i64 %3245, %3249
  %3252 = add nuw nsw i64 %3250, %3251
  %3253 = icmp eq i64 %3252, 2
  %3254 = zext i1 %3253 to i8
  %3255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3254, i8* %3255, align 1, !tbaa !2450
  %3256 = load i64, i64* %RBP
  %3257 = sub i64 %3256, 4
  %3258 = load i64, i64* %PC
  %3259 = add i64 %3258, 4
  store i64 %3259, i64* %PC
  %3260 = inttoptr i64 %3257 to i32*
  %3261 = load i32, i32* %3260
  %3262 = sext i32 %3261 to i64
  store i64 %3262, i64* %RDX, align 8, !tbaa !2428
  %3263 = load i64, i64* %RAX
  %3264 = load i64, i64* %RDX
  %3265 = mul i64 %3264, 4
  %3266 = add i64 %3265, %3263
  %3267 = load i64, i64* %PC
  %3268 = add i64 %3267, 4
  store i64 %3268, i64* %PC
  %3269 = inttoptr i64 %3266 to i32*
  %3270 = load i32, i32* %3269
  %3271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3271, align 1, !tbaa !2432
  %3272 = and i32 %3270, 255
  %3273 = call i32 @llvm.ctpop.i32(i32 %3272) #16
  %3274 = trunc i32 %3273 to i8
  %3275 = and i8 %3274, 1
  %3276 = xor i8 %3275, 1
  %3277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3276, i8* %3277, align 1, !tbaa !2446
  %3278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3278, align 1, !tbaa !2447
  %3279 = icmp eq i32 %3270, 0
  %3280 = zext i1 %3279 to i8
  %3281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3280, i8* %3281, align 1, !tbaa !2448
  %3282 = lshr i32 %3270, 31
  %3283 = trunc i32 %3282 to i8
  %3284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3283, i8* %3284, align 1, !tbaa !2449
  %3285 = lshr i32 %3270, 31
  %3286 = xor i32 %3282, %3285
  %3287 = add nuw nsw i32 %3286, %3285
  %3288 = icmp eq i32 %3287, 2
  %3289 = zext i1 %3288 to i8
  %3290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3289, i8* %3290, align 1, !tbaa !2450
  %3291 = load i64, i64* %PC
  %3292 = add i64 %3291, 120
  %3293 = load i64, i64* %PC
  %3294 = add i64 %3293, 6
  %3295 = load i64, i64* %PC
  %3296 = add i64 %3295, 6
  store i64 %3296, i64* %PC
  %3297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3298 = load i8, i8* %3297, align 1, !tbaa !2448
  store i8 %3298, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3300 = icmp ne i8 %3298, 0
  %3301 = select i1 %3300, i64 %3292, i64 %3294
  store i64 %3301, i64* %3299, align 8, !tbaa !2428
  %3302 = load i8, i8* %BRANCH_TAKEN
  %3303 = icmp eq i8 %3302, 1
  br i1 %3303, label %block_400fb0, label %block_400f3e

block_401703:                                     ; preds = %block_4011f3
  %3304 = inttoptr i64 %4901 to i32*
  store i32 0, i32* %3304
  br label %block_40170a

block_400fc3:                                     ; preds = %block_400ee6
  %3305 = load i32, i32* %EAX
  %3306 = zext i32 %3305 to i64
  %3307 = load i64, i64* %PC
  %3308 = add i64 %3307, 3
  store i64 %3308, i64* %PC
  %3309 = shl i64 %3306, 32
  %3310 = ashr exact i64 %3309, 32
  store i64 %3310, i64* %RCX, align 8, !tbaa !2428
  %3311 = load i64, i64* %RBP
  %3312 = load i64, i64* %RCX
  %3313 = mul i64 %3312, 4
  %3314 = add i64 %3311, -1248
  %3315 = add i64 %3314, %3313
  %3316 = load i64, i64* %PC
  %3317 = add i64 %3316, 8
  store i64 %3317, i64* %PC
  %3318 = inttoptr i64 %3315 to i32*
  %3319 = load i32, i32* %3318
  %3320 = sext i32 %3319 to i64
  store i64 %3320, i64* %RCX, align 8, !tbaa !2428
  %3321 = load i64, i64* %RCX
  %3322 = mul i64 %3321, 4
  %3323 = add i64 %3322, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %3324 = load i64, i64* %PC
  %3325 = add i64 %3324, 7
  store i64 %3325, i64* %PC
  %3326 = inttoptr i64 %3323 to i32*
  %3327 = load i32, i32* %3326
  %3328 = zext i32 %3327 to i64
  store i64 %3328, i64* %RAX, align 8, !tbaa !2428
  %3329 = load i64, i64* %RBP
  %3330 = sub i64 %3329, 12
  %3331 = load i64, i64* %PC
  %3332 = add i64 %3331, 3
  store i64 %3332, i64* %PC
  %3333 = inttoptr i64 %3330 to i32*
  %3334 = load i32, i32* %3333
  %3335 = zext i32 %3334 to i64
  store i64 %3335, i64* %RDX, align 8, !tbaa !2428
  %3336 = load i64, i64* %RDX
  %3337 = load i64, i64* %PC
  %3338 = add i64 %3337, 3
  store i64 %3338, i64* %PC
  %3339 = trunc i64 %3336 to i32
  %3340 = add i32 1, %3339
  %3341 = zext i32 %3340 to i64
  store i64 %3341, i64* %RDX, align 8, !tbaa !2428
  %3342 = icmp ult i32 %3340, %3339
  %3343 = icmp ult i32 %3340, 1
  %3344 = or i1 %3342, %3343
  %3345 = zext i1 %3344 to i8
  %3346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3345, i8* %3346, align 1, !tbaa !2432
  %3347 = and i32 %3340, 255
  %3348 = call i32 @llvm.ctpop.i32(i32 %3347) #16
  %3349 = trunc i32 %3348 to i8
  %3350 = and i8 %3349, 1
  %3351 = xor i8 %3350, 1
  %3352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3351, i8* %3352, align 1, !tbaa !2446
  %3353 = xor i64 1, %3336
  %3354 = trunc i64 %3353 to i32
  %3355 = xor i32 %3354, %3340
  %3356 = lshr i32 %3355, 4
  %3357 = trunc i32 %3356 to i8
  %3358 = and i8 %3357, 1
  %3359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3358, i8* %3359, align 1, !tbaa !2447
  %3360 = icmp eq i32 %3340, 0
  %3361 = zext i1 %3360 to i8
  %3362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3361, i8* %3362, align 1, !tbaa !2448
  %3363 = lshr i32 %3340, 31
  %3364 = trunc i32 %3363 to i8
  %3365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3364, i8* %3365, align 1, !tbaa !2449
  %3366 = lshr i32 %3339, 31
  %3367 = xor i32 %3363, %3366
  %3368 = add nuw nsw i32 %3367, %3363
  %3369 = icmp eq i32 %3368, 2
  %3370 = zext i1 %3369 to i8
  %3371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3370, i8* %3371, align 1, !tbaa !2450
  %3372 = load i32, i32* %EDX
  %3373 = zext i32 %3372 to i64
  %3374 = load i64, i64* %PC
  %3375 = add i64 %3374, 3
  store i64 %3375, i64* %PC
  %3376 = shl i64 %3373, 32
  %3377 = ashr exact i64 %3376, 32
  store i64 %3377, i64* %RCX, align 8, !tbaa !2428
  %3378 = load i64, i64* %RBP
  %3379 = load i64, i64* %RCX
  %3380 = mul i64 %3379, 4
  %3381 = add i64 %3378, -1248
  %3382 = add i64 %3381, %3380
  %3383 = load i32, i32* %EAX
  %3384 = zext i32 %3383 to i64
  %3385 = load i64, i64* %PC
  %3386 = add i64 %3385, 7
  store i64 %3386, i64* %PC
  %3387 = inttoptr i64 %3382 to i32*
  store i32 %3383, i32* %3387
  br label %block_400feb

block_401111:                                     ; preds = %block_401104
  %3388 = sub i64 %5605, 16
  %3389 = load i64, i64* %PC
  %3390 = add i64 %3389, 7
  store i64 %3390, i64* %PC
  %3391 = inttoptr i64 %3388 to i32*
  store i32 1, i32* %3391
  %3392 = load i64, i64* %RBP
  %3393 = sub i64 %3392, 8
  %3394 = load i64, i64* %PC
  %3395 = add i64 %3394, 7
  store i64 %3395, i64* %PC
  %3396 = inttoptr i64 %3393 to i32*
  store i32 1, i32* %3396
  br label %block_40111f

block_400db1:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3, %block_400d17
  %MEMORY.14 = phi %struct.Memory* [ %MEMORY.21, %block_400d17 ], [ %6567, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3 ]
  %3397 = load i64, i64* %PC
  %3398 = add i64 %3397, 5
  %3399 = load i64, i64* %PC
  %3400 = add i64 %3399, 5
  store i64 %3400, i64* %PC
  %3401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3398, i64* %3401, align 8, !tbaa !2428
  %3402 = load i64, i64* %RBP
  %3403 = sub i64 %3402, 4
  %3404 = load i64, i64* %PC
  %3405 = add i64 %3404, 3
  store i64 %3405, i64* %PC
  %3406 = inttoptr i64 %3403 to i32*
  %3407 = load i32, i32* %3406
  %3408 = zext i32 %3407 to i64
  store i64 %3408, i64* %RAX, align 8, !tbaa !2428
  %3409 = load i64, i64* %RAX
  %3410 = load i64, i64* %PC
  %3411 = add i64 %3410, 3
  store i64 %3411, i64* %PC
  %3412 = trunc i64 %3409 to i32
  %3413 = add i32 1, %3412
  %3414 = zext i32 %3413 to i64
  store i64 %3414, i64* %RAX, align 8, !tbaa !2428
  %3415 = icmp ult i32 %3413, %3412
  %3416 = icmp ult i32 %3413, 1
  %3417 = or i1 %3415, %3416
  %3418 = zext i1 %3417 to i8
  %3419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3418, i8* %3419, align 1, !tbaa !2432
  %3420 = and i32 %3413, 255
  %3421 = call i32 @llvm.ctpop.i32(i32 %3420) #16
  %3422 = trunc i32 %3421 to i8
  %3423 = and i8 %3422, 1
  %3424 = xor i8 %3423, 1
  %3425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3424, i8* %3425, align 1, !tbaa !2446
  %3426 = xor i64 1, %3409
  %3427 = trunc i64 %3426 to i32
  %3428 = xor i32 %3427, %3413
  %3429 = lshr i32 %3428, 4
  %3430 = trunc i32 %3429 to i8
  %3431 = and i8 %3430, 1
  %3432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3431, i8* %3432, align 1, !tbaa !2447
  %3433 = icmp eq i32 %3413, 0
  %3434 = zext i1 %3433 to i8
  %3435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3434, i8* %3435, align 1, !tbaa !2448
  %3436 = lshr i32 %3413, 31
  %3437 = trunc i32 %3436 to i8
  %3438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3437, i8* %3438, align 1, !tbaa !2449
  %3439 = lshr i32 %3412, 31
  %3440 = xor i32 %3436, %3439
  %3441 = add nuw nsw i32 %3440, %3436
  %3442 = icmp eq i32 %3441, 2
  %3443 = zext i1 %3442 to i8
  %3444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3443, i8* %3444, align 1, !tbaa !2450
  %3445 = load i64, i64* %RBP
  %3446 = sub i64 %3445, 4
  %3447 = load i32, i32* %EAX
  %3448 = zext i32 %3447 to i64
  %3449 = load i64, i64* %PC
  %3450 = add i64 %3449, 3
  store i64 %3450, i64* %PC
  %3451 = inttoptr i64 %3446 to i32*
  store i32 %3447, i32* %3451
  %3452 = load i64, i64* %PC
  %3453 = sub i64 %3452, 188
  %3454 = load i64, i64* %PC
  %3455 = add i64 %3454, 5
  store i64 %3455, i64* %PC
  %3456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3453, i64* %3456, align 8, !tbaa !2428
  br label %block_400d03

block_400eff:                                     ; preds = %block_400ee6
  %3457 = load i64, i64* %RAX
  %3458 = load i64, i64* %RBP
  %3459 = sub i64 %3458, 4
  %3460 = load i64, i64* %PC
  %3461 = add i64 %3460, 3
  store i64 %3461, i64* %PC
  %3462 = trunc i64 %3457 to i32
  %3463 = inttoptr i64 %3459 to i32*
  %3464 = load i32, i32* %3463
  %3465 = sub i32 %3462, %3464
  %3466 = zext i32 %3465 to i64
  store i64 %3466, i64* %RAX, align 8, !tbaa !2428
  %3467 = icmp ult i32 %3462, %3464
  %3468 = zext i1 %3467 to i8
  %3469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3468, i8* %3469, align 1, !tbaa !2432
  %3470 = and i32 %3465, 255
  %3471 = call i32 @llvm.ctpop.i32(i32 %3470) #16
  %3472 = trunc i32 %3471 to i8
  %3473 = and i8 %3472, 1
  %3474 = xor i8 %3473, 1
  %3475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3474, i8* %3475, align 1, !tbaa !2446
  %3476 = xor i32 %3464, %3462
  %3477 = xor i32 %3476, %3465
  %3478 = lshr i32 %3477, 4
  %3479 = trunc i32 %3478 to i8
  %3480 = and i8 %3479, 1
  %3481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3480, i8* %3481, align 1, !tbaa !2447
  %3482 = icmp eq i32 %3465, 0
  %3483 = zext i1 %3482 to i8
  %3484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3483, i8* %3484, align 1, !tbaa !2448
  %3485 = lshr i32 %3465, 31
  %3486 = trunc i32 %3485 to i8
  %3487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3486, i8* %3487, align 1, !tbaa !2449
  %3488 = lshr i32 %3462, 31
  %3489 = lshr i32 %3464, 31
  %3490 = xor i32 %3489, %3488
  %3491 = xor i32 %3485, %3488
  %3492 = add nuw nsw i32 %3491, %3490
  %3493 = icmp eq i32 %3492, 2
  %3494 = zext i1 %3493 to i8
  %3495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3494, i8* %3495, align 1, !tbaa !2450
  %3496 = load i32, i32* %EAX
  %3497 = zext i32 %3496 to i64
  %3498 = load i64, i64* %PC
  %3499 = add i64 %3498, 3
  store i64 %3499, i64* %PC
  %3500 = shl i64 %3497, 32
  %3501 = ashr exact i64 %3500, 32
  store i64 %3501, i64* %RCX, align 8, !tbaa !2428
  %3502 = load i64, i64* %RBP
  %3503 = load i64, i64* %RCX
  %3504 = mul i64 %3503, 4
  %3505 = add i64 %3502, -1488
  %3506 = add i64 %3505, %3504
  %3507 = load i64, i64* %PC
  %3508 = add i64 %3507, 8
  store i64 %3508, i64* %PC
  %3509 = inttoptr i64 %3506 to i32*
  %3510 = load i32, i32* %3509
  %3511 = sub i32 %3510, -1
  %3512 = icmp ult i32 %3510, -1
  %3513 = zext i1 %3512 to i8
  %3514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3513, i8* %3514, align 1, !tbaa !2432
  %3515 = and i32 %3511, 255
  %3516 = call i32 @llvm.ctpop.i32(i32 %3515) #16
  %3517 = trunc i32 %3516 to i8
  %3518 = and i8 %3517, 1
  %3519 = xor i8 %3518, 1
  %3520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3519, i8* %3520, align 1, !tbaa !2446
  %3521 = xor i32 %3510, -1
  %3522 = xor i32 %3521, %3511
  %3523 = lshr i32 %3522, 4
  %3524 = trunc i32 %3523 to i8
  %3525 = and i8 %3524, 1
  %3526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3525, i8* %3526, align 1, !tbaa !2447
  %3527 = icmp eq i32 %3511, 0
  %3528 = zext i1 %3527 to i8
  %3529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3528, i8* %3529, align 1, !tbaa !2448
  %3530 = lshr i32 %3511, 31
  %3531 = trunc i32 %3530 to i8
  %3532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3531, i8* %3532, align 1, !tbaa !2449
  %3533 = lshr i32 %3510, 31
  %3534 = xor i32 %3533, 1
  %3535 = xor i32 %3530, %3533
  %3536 = add nuw nsw i32 %3535, %3534
  %3537 = icmp eq i32 %3536, 2
  %3538 = zext i1 %3537 to i8
  %3539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3538, i8* %3539, align 1, !tbaa !2450
  %3540 = load i64, i64* %PC
  %3541 = add i64 %3540, 157
  %3542 = load i64, i64* %PC
  %3543 = add i64 %3542, 6
  %3544 = load i64, i64* %PC
  %3545 = add i64 %3544, 6
  store i64 %3545, i64* %PC
  %3546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3547 = load i8, i8* %3546, align 1, !tbaa !2448
  store i8 %3547, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3549 = icmp ne i8 %3547, 0
  %3550 = select i1 %3549, i64 %3541, i64 %3543
  store i64 %3550, i64* %3548, align 8, !tbaa !2428
  %3551 = load i8, i8* %BRANCH_TAKEN
  %3552 = icmp eq i8 %3551, 1
  br i1 %3552, label %block_400fb0, label %block_400f19

block_400be7:                                     ; preds = %block_400bd4
  %3553 = load i64, i64* %RBP
  %3554 = sub i64 %3553, 16
  %3555 = load i64, i64* %PC
  %3556 = add i64 %3555, 3
  store i64 %3556, i64* %PC
  %3557 = inttoptr i64 %3554 to i32*
  %3558 = load i32, i32* %3557
  %3559 = zext i32 %3558 to i64
  store i64 %3559, i64* %RAX, align 8, !tbaa !2428
  %3560 = load i64, i64* %RAX
  %3561 = load i64, i64* %PC
  %3562 = add i64 %3561, 3
  store i64 %3562, i64* %PC
  %3563 = trunc i64 %3560 to i32
  %3564 = add i32 -1, %3563
  %3565 = zext i32 %3564 to i64
  store i64 %3565, i64* %RAX, align 8, !tbaa !2428
  %3566 = icmp ult i32 %3564, %3563
  %3567 = icmp ult i32 %3564, -1
  %3568 = or i1 %3566, %3567
  %3569 = zext i1 %3568 to i8
  %3570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3569, i8* %3570, align 1, !tbaa !2432
  %3571 = and i32 %3564, 255
  %3572 = call i32 @llvm.ctpop.i32(i32 %3571) #16
  %3573 = trunc i32 %3572 to i8
  %3574 = and i8 %3573, 1
  %3575 = xor i8 %3574, 1
  %3576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3575, i8* %3576, align 1, !tbaa !2446
  %3577 = xor i64 -1, %3560
  %3578 = trunc i64 %3577 to i32
  %3579 = xor i32 %3578, %3564
  %3580 = lshr i32 %3579, 4
  %3581 = trunc i32 %3580 to i8
  %3582 = and i8 %3581, 1
  %3583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3582, i8* %3583, align 1, !tbaa !2447
  %3584 = icmp eq i32 %3564, 0
  %3585 = zext i1 %3584 to i8
  %3586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3585, i8* %3586, align 1, !tbaa !2448
  %3587 = lshr i32 %3564, 31
  %3588 = trunc i32 %3587 to i8
  %3589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3588, i8* %3589, align 1, !tbaa !2449
  %3590 = lshr i32 %3563, 31
  %3591 = xor i32 %3587, %3590
  %3592 = xor i32 %3587, 1
  %3593 = add nuw nsw i32 %3591, %3592
  %3594 = icmp eq i32 %3593, 2
  %3595 = zext i1 %3594 to i8
  %3596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3595, i8* %3596, align 1, !tbaa !2450
  %3597 = load i64, i64* %RBP
  %3598 = sub i64 %3597, 16
  %3599 = load i32, i32* %EAX
  %3600 = zext i32 %3599 to i64
  %3601 = load i64, i64* %PC
  %3602 = add i64 %3601, 3
  store i64 %3602, i64* %PC
  %3603 = inttoptr i64 %3598 to i32*
  store i32 %3599, i32* %3603
  %3604 = load i64, i64* %PC
  %3605 = sub i64 %3604, 69
  %3606 = load i64, i64* %PC
  %3607 = add i64 %3606, 5
  store i64 %3607, i64* %PC
  %3608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3605, i64* %3608, align 8, !tbaa !2428
  br label %block_400bab

block_40111f:                                     ; preds = %block_40118d, %block_401111
  %MEMORY.15 = phi %struct.Memory* [ %MEMORY.26, %block_401111 ], [ %MEMORY.46, %block_40118d ]
  %3609 = load i64, i64* %RBP
  %3610 = sub i64 %3609, 8
  %3611 = load i64, i64* %PC
  %3612 = add i64 %3611, 3
  store i64 %3612, i64* %PC
  %3613 = inttoptr i64 %3610 to i32*
  %3614 = load i32, i32* %3613
  %3615 = zext i32 %3614 to i64
  store i64 %3615, i64* %RAX, align 8, !tbaa !2428
  %3616 = load i64, i64* %RBP
  %3617 = sub i64 %3616, 12
  %3618 = load i64, i64* %PC
  %3619 = add i64 %3618, 4
  store i64 %3619, i64* %PC
  %3620 = inttoptr i64 %3617 to i32*
  %3621 = load i32, i32* %3620
  %3622 = sext i32 %3621 to i64
  store i64 %3622, i64* %RCX, align 8, !tbaa !2428
  %3623 = load i32, i32* %EAX
  %3624 = zext i32 %3623 to i64
  %3625 = load i64, i64* %RBP
  %3626 = load i64, i64* %RCX
  %3627 = mul i64 %3626, 4
  %3628 = add i64 %3625, -1328
  %3629 = add i64 %3628, %3627
  %3630 = load i64, i64* %PC
  %3631 = add i64 %3630, 7
  store i64 %3631, i64* %PC
  %3632 = inttoptr i64 %3629 to i32*
  %3633 = load i32, i32* %3632
  %3634 = sub i32 %3623, %3633
  %3635 = icmp ult i32 %3623, %3633
  %3636 = zext i1 %3635 to i8
  %3637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3636, i8* %3637, align 1, !tbaa !2432
  %3638 = and i32 %3634, 255
  %3639 = call i32 @llvm.ctpop.i32(i32 %3638) #16
  %3640 = trunc i32 %3639 to i8
  %3641 = and i8 %3640, 1
  %3642 = xor i8 %3641, 1
  %3643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3642, i8* %3643, align 1, !tbaa !2446
  %3644 = xor i32 %3633, %3623
  %3645 = xor i32 %3644, %3634
  %3646 = lshr i32 %3645, 4
  %3647 = trunc i32 %3646 to i8
  %3648 = and i8 %3647, 1
  %3649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3648, i8* %3649, align 1, !tbaa !2447
  %3650 = icmp eq i32 %3634, 0
  %3651 = zext i1 %3650 to i8
  %3652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3651, i8* %3652, align 1, !tbaa !2448
  %3653 = lshr i32 %3634, 31
  %3654 = trunc i32 %3653 to i8
  %3655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3654, i8* %3655, align 1, !tbaa !2449
  %3656 = lshr i32 %3623, 31
  %3657 = lshr i32 %3633, 31
  %3658 = xor i32 %3657, %3656
  %3659 = xor i32 %3653, %3656
  %3660 = add nuw nsw i32 %3659, %3658
  %3661 = icmp eq i32 %3660, 2
  %3662 = zext i1 %3661 to i8
  %3663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3662, i8* %3663, align 1, !tbaa !2450
  %3664 = load i64, i64* %PC
  %3665 = add i64 %3664, 115
  %3666 = load i64, i64* %PC
  %3667 = add i64 %3666, 6
  %3668 = load i64, i64* %PC
  %3669 = add i64 %3668, 6
  store i64 %3669, i64* %PC
  %3670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3671 = load i8, i8* %3670, align 1, !tbaa !2448
  %3672 = icmp eq i8 %3671, 0
  %3673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3674 = load i8, i8* %3673, align 1, !tbaa !2449
  %3675 = icmp ne i8 %3674, 0
  %3676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3677 = load i8, i8* %3676, align 1, !tbaa !2450
  %3678 = icmp ne i8 %3677, 0
  %3679 = xor i1 %3675, %3678
  %3680 = xor i1 %3679, true
  %3681 = and i1 %3672, %3680
  %3682 = zext i1 %3681 to i8
  store i8 %3682, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3684 = select i1 %3681, i64 %3665, i64 %3667
  store i64 %3684, i64* %3683, align 8, !tbaa !2428
  %3685 = load i8, i8* %BRANCH_TAKEN
  %3686 = icmp eq i8 %3685, 1
  %3687 = load i64, i64* %RBP
  br i1 %3686, label %block_4011a0, label %block_401133

block_4016fe:                                     ; preds = %block_4014d1
  %3688 = load i64, i64* %PC
  %3689 = add i64 %3688, 117
  %3690 = load i64, i64* %PC
  %3691 = add i64 %3690, 5
  store i64 %3691, i64* %PC
  %3692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3689, i64* %3692, align 8, !tbaa !2428
  br label %block_401773

block_401529:                                     ; preds = %block_401517
  %3693 = load i64, i64* %PC
  %3694 = add i64 %3693, 5
  store i64 %3694, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %3695 = load i64, i64* %RBP
  %3696 = sub i64 %3695, 8
  %3697 = load i64, i64* %PC
  %3698 = add i64 %3697, 4
  store i64 %3698, i64* %PC
  %3699 = inttoptr i64 %3696 to i32*
  %3700 = load i32, i32* %3699
  %3701 = sext i32 %3700 to i64
  store i64 %3701, i64* %RCX, align 8, !tbaa !2428
  %3702 = load i64, i64* %RBP
  %3703 = load i64, i64* %RCX
  %3704 = mul i64 %3703, 4
  %3705 = add i64 %3702, -1616
  %3706 = add i64 %3705, %3704
  %3707 = load i64, i64* %PC
  %3708 = add i64 %3707, 7
  store i64 %3708, i64* %PC
  %3709 = inttoptr i64 %3706 to i32*
  %3710 = load i32, i32* %3709
  %3711 = zext i32 %3710 to i64
  store i64 %3711, i64* %RDX, align 8, !tbaa !2428
  %3712 = load i64, i64* %RBP
  %3713 = sub i64 %3712, 8
  %3714 = load i64, i64* %PC
  %3715 = add i64 %3714, 3
  store i64 %3715, i64* %PC
  %3716 = inttoptr i64 %3713 to i32*
  %3717 = load i32, i32* %3716
  %3718 = zext i32 %3717 to i64
  store i64 %3718, i64* %RSI, align 8, !tbaa !2428
  %3719 = load i64, i64* %RBP
  %3720 = sub i64 %3719, 4
  %3721 = load i64, i64* %PC
  %3722 = add i64 %3721, 4
  store i64 %3722, i64* %PC
  %3723 = inttoptr i64 %3720 to i32*
  %3724 = load i32, i32* %3723
  %3725 = sext i32 %3724 to i64
  store i64 %3725, i64* %RCX, align 8, !tbaa !2428
  %3726 = load i64, i64* %RSI
  %3727 = load i64, i64* %RBP
  %3728 = load i64, i64* %RCX
  %3729 = mul i64 %3728, 4
  %3730 = add i64 %3727, -1536
  %3731 = add i64 %3730, %3729
  %3732 = load i64, i64* %PC
  %3733 = add i64 %3732, 8
  store i64 %3733, i64* %PC
  %3734 = inttoptr i64 %3731 to i32*
  %3735 = load i32, i32* %3734
  %3736 = shl i64 %3726, 32
  %3737 = ashr exact i64 %3736, 32
  %3738 = sext i32 %3735 to i64
  %3739 = mul nsw i64 %3738, %3737
  %3740 = trunc i64 %3739 to i32
  %3741 = and i64 %3739, 4294967295
  store i64 %3741, i64* %RSI, align 8, !tbaa !2428
  %3742 = shl i64 %3739, 32
  %3743 = ashr exact i64 %3742, 32
  %3744 = icmp ne i64 %3743, %3739
  %3745 = zext i1 %3744 to i8
  %3746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3745, i8* %3746, align 1, !tbaa !2432
  %3747 = and i32 %3740, 255
  %3748 = call i32 @llvm.ctpop.i32(i32 %3747) #16
  %3749 = trunc i32 %3748 to i8
  %3750 = and i8 %3749, 1
  %3751 = xor i8 %3750, 1
  %3752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3751, i8* %3752, align 1, !tbaa !2446
  %3753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3753, align 1, !tbaa !2447
  %3754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3754, align 1, !tbaa !2448
  %3755 = lshr i32 %3740, 31
  %3756 = trunc i32 %3755 to i8
  %3757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3756, i8* %3757, align 1, !tbaa !2449
  %3758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3745, i8* %3758, align 1, !tbaa !2450
  %3759 = load i64, i64* %RDX
  %3760 = load i32, i32* %ESI
  %3761 = zext i32 %3760 to i64
  %3762 = load i64, i64* %PC
  %3763 = add i64 %3762, 2
  store i64 %3763, i64* %PC
  %3764 = trunc i64 %3759 to i32
  %3765 = add i32 %3760, %3764
  %3766 = zext i32 %3765 to i64
  store i64 %3766, i64* %RDX, align 8, !tbaa !2428
  %3767 = icmp ult i32 %3765, %3764
  %3768 = icmp ult i32 %3765, %3760
  %3769 = or i1 %3767, %3768
  %3770 = zext i1 %3769 to i8
  %3771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3770, i8* %3771, align 1, !tbaa !2432
  %3772 = and i32 %3765, 255
  %3773 = call i32 @llvm.ctpop.i32(i32 %3772) #16
  %3774 = trunc i32 %3773 to i8
  %3775 = and i8 %3774, 1
  %3776 = xor i8 %3775, 1
  %3777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3776, i8* %3777, align 1, !tbaa !2446
  %3778 = xor i64 %3761, %3759
  %3779 = trunc i64 %3778 to i32
  %3780 = xor i32 %3779, %3765
  %3781 = lshr i32 %3780, 4
  %3782 = trunc i32 %3781 to i8
  %3783 = and i8 %3782, 1
  %3784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3783, i8* %3784, align 1, !tbaa !2447
  %3785 = icmp eq i32 %3765, 0
  %3786 = zext i1 %3785 to i8
  %3787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3786, i8* %3787, align 1, !tbaa !2448
  %3788 = lshr i32 %3765, 31
  %3789 = trunc i32 %3788 to i8
  %3790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3789, i8* %3790, align 1, !tbaa !2449
  %3791 = lshr i32 %3764, 31
  %3792 = lshr i32 %3760, 31
  %3793 = xor i32 %3788, %3791
  %3794 = xor i32 %3788, %3792
  %3795 = add nuw nsw i32 %3793, %3794
  %3796 = icmp eq i32 %3795, 2
  %3797 = zext i1 %3796 to i8
  %3798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3797, i8* %3798, align 1, !tbaa !2450
  %3799 = load i64, i64* %RBP
  %3800 = sub i64 %3799, 2724
  %3801 = load i32, i32* %EAX
  %3802 = zext i32 %3801 to i64
  %3803 = load i64, i64* %PC
  %3804 = add i64 %3803, 6
  store i64 %3804, i64* %PC
  %3805 = inttoptr i64 %3800 to i32*
  store i32 %3801, i32* %3805
  %3806 = load i32, i32* %EDX
  %3807 = zext i32 %3806 to i64
  %3808 = load i64, i64* %PC
  %3809 = add i64 %3808, 2
  store i64 %3809, i64* %PC
  %3810 = and i64 %3807, 4294967295
  store i64 %3810, i64* %RAX, align 8, !tbaa !2428
  %3811 = load i64, i64* %PC
  %3812 = add i64 %3811, 1
  store i64 %3812, i64* %PC
  %3813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %3815 = bitcast %union.anon* %3814 to i32*
  %3816 = load i32, i32* %3815, align 8, !tbaa !2452
  %3817 = sext i32 %3816 to i64
  %3818 = lshr i64 %3817, 32
  store i64 %3818, i64* %3813, align 8, !tbaa !2428
  %3819 = load i64, i64* %RBP
  %3820 = sub i64 %3819, 2724
  %3821 = load i64, i64* %PC
  %3822 = add i64 %3821, 6
  store i64 %3822, i64* %PC
  %3823 = inttoptr i64 %3820 to i32*
  %3824 = load i32, i32* %3823
  %3825 = zext i32 %3824 to i64
  store i64 %3825, i64* %RSI, align 8, !tbaa !2428
  %3826 = load i32, i32* %ESI
  %3827 = zext i32 %3826 to i64
  %3828 = load i64, i64* %PC
  %3829 = add i64 %3828, 2
  store i64 %3829, i64* %PC
  %3830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %3831 = bitcast %union.anon* %3830 to i32*
  %3832 = load i32, i32* %3831, align 8, !tbaa !2452
  %3833 = zext i32 %3832 to i64
  %3834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %3835 = bitcast %union.anon* %3834 to i32*
  %3836 = load i32, i32* %3835, align 8, !tbaa !2452
  %3837 = zext i32 %3836 to i64
  %3838 = shl i64 %3827, 32
  %3839 = ashr exact i64 %3838, 32
  %3840 = shl nuw i64 %3837, 32
  %3841 = or i64 %3840, %3833
  %3842 = sdiv i64 %3841, %3839
  %3843 = shl i64 %3842, 32
  %3844 = ashr exact i64 %3843, 32
  %3845 = icmp eq i64 %3842, %3844
  br i1 %3845, label %3850, label %3846

; <label>:3846:                                   ; preds = %block_401529
  %3847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3848 = load i64, i64* %3847, align 8, !tbaa !2428
  %3849 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3848, %struct.Memory* %MEMORY.36) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

; <label>:3850:                                   ; preds = %block_401529
  %3851 = srem i64 %3841, %3839
  %3852 = getelementptr inbounds %union.anon, %union.anon* %3830, i64 0, i32 0
  %3853 = and i64 %3842, 4294967295
  store i64 %3853, i64* %3852, align 8, !tbaa !2428
  %3854 = getelementptr inbounds %union.anon, %union.anon* %3834, i64 0, i32 0
  %3855 = and i64 %3851, 4294967295
  store i64 %3855, i64* %3854, align 8, !tbaa !2428
  %3856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3856, align 1, !tbaa !2432
  %3857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %3857, align 1, !tbaa !2446
  %3858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3858, align 1, !tbaa !2447
  %3859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3859, align 1, !tbaa !2448
  %3860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %3860, align 1, !tbaa !2449
  %3861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3861, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4: ; preds = %3846, %3850
  %3862 = phi %struct.Memory* [ %3849, %3846 ], [ %MEMORY.36, %3850 ]
  %3863 = load i32, i32* %EDX
  %3864 = zext i32 %3863 to i64
  %3865 = load i64, i64* %PC
  %3866 = add i64 %3865, 3
  store i64 %3866, i64* %PC
  %3867 = shl i64 %3864, 32
  %3868 = ashr exact i64 %3867, 32
  store i64 %3868, i64* %RCX, align 8, !tbaa !2428
  %3869 = load i64, i64* %RCX
  %3870 = mul i64 %3869, 4
  %3871 = add i64 %3870, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %3872 = load i64, i64* %PC
  %3873 = add i64 %3872, 7
  store i64 %3873, i64* %PC
  %3874 = inttoptr i64 %3871 to i32*
  %3875 = load i32, i32* %3874
  %3876 = zext i32 %3875 to i64
  store i64 %3876, i64* %RDX, align 8, !tbaa !2428
  %3877 = load i64, i64* %RBP
  %3878 = sub i64 %3877, 4
  %3879 = load i64, i64* %PC
  %3880 = add i64 %3879, 4
  store i64 %3880, i64* %PC
  %3881 = inttoptr i64 %3878 to i32*
  %3882 = load i32, i32* %3881
  %3883 = sext i32 %3882 to i64
  store i64 %3883, i64* %RCX, align 8, !tbaa !2428
  %3884 = load i64, i64* %RBP
  %3885 = load i64, i64* %RCX
  %3886 = mul i64 %3885, 4
  %3887 = add i64 %3884, -1568
  %3888 = add i64 %3887, %3886
  %3889 = load i64, i64* %PC
  %3890 = add i64 %3889, 8
  store i64 %3890, i64* %PC
  %3891 = inttoptr i64 %3888 to i32*
  %3892 = load i32, i32* %3891
  %3893 = sext i32 %3892 to i64
  store i64 %3893, i64* %RCX, align 8, !tbaa !2428
  %3894 = load i64, i64* %RDX
  %3895 = load i64, i64* %RBP
  %3896 = load i64, i64* %RCX
  %3897 = mul i64 %3896, 4
  %3898 = add i64 %3895, -2640
  %3899 = add i64 %3898, %3897
  %3900 = load i64, i64* %PC
  %3901 = add i64 %3900, 7
  store i64 %3901, i64* %PC
  %3902 = trunc i64 %3894 to i32
  %3903 = inttoptr i64 %3899 to i32*
  %3904 = load i32, i32* %3903
  %3905 = xor i32 %3904, %3902
  %3906 = zext i32 %3905 to i64
  store i64 %3906, i64* %RDX, align 8, !tbaa !2428
  %3907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3907, align 1, !tbaa !2432
  %3908 = and i32 %3905, 255
  %3909 = call i32 @llvm.ctpop.i32(i32 %3908) #16
  %3910 = trunc i32 %3909 to i8
  %3911 = and i8 %3910, 1
  %3912 = xor i8 %3911, 1
  %3913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3912, i8* %3913, align 1, !tbaa !2446
  %3914 = icmp eq i32 %3905, 0
  %3915 = zext i1 %3914 to i8
  %3916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3915, i8* %3916, align 1, !tbaa !2448
  %3917 = lshr i32 %3905, 31
  %3918 = trunc i32 %3917 to i8
  %3919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3918, i8* %3919, align 1, !tbaa !2449
  %3920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3920, align 1, !tbaa !2450
  %3921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3921, align 1, !tbaa !2447
  %3922 = load i64, i64* %RBP
  %3923 = load i64, i64* %RCX
  %3924 = mul i64 %3923, 4
  %3925 = add i64 %3922, -2640
  %3926 = add i64 %3925, %3924
  %3927 = load i32, i32* %EDX
  %3928 = zext i32 %3927 to i64
  %3929 = load i64, i64* %PC
  %3930 = add i64 %3929, 7
  store i64 %3930, i64* %PC
  %3931 = inttoptr i64 %3926 to i32*
  store i32 %3927, i32* %3931
  br label %block_40157f

block_4010f3:                                     ; preds = %block_4010ad
  %3932 = sub i64 %4987, 1492
  %3933 = load i64, i64* %PC
  %3934 = add i64 %3933, 10
  store i64 %3934, i64* %PC
  %3935 = inttoptr i64 %3932 to i32*
  store i32 0, i32* %3935
  %3936 = load i64, i64* %RBP
  %3937 = sub i64 %3936, 4
  %3938 = load i64, i64* %PC
  %3939 = add i64 %3938, 7
  store i64 %3939, i64* %PC
  %3940 = inttoptr i64 %3937 to i32*
  store i32 1, i32* %3940
  br label %block_401104

block_400bd4:                                     ; preds = %block_400bab, %block_400bc7
  %MEMORY.16 = phi %struct.Memory* [ %MEMORY.53, %block_400bab ], [ %MEMORY.53, %block_400bc7 ]
  %3941 = load i64, i64* %RBP
  %3942 = sub i64 %3941, 2693
  %3943 = load i64, i64* %PC
  %3944 = add i64 %3943, 6
  store i64 %3944, i64* %PC
  %3945 = inttoptr i64 %3942 to i8*
  %3946 = load i8, i8* %3945
  store i8 %3946, i8* %AL, align 1, !tbaa !2451
  %3947 = load i8, i8* %AL
  %3948 = zext i8 %3947 to i64
  %3949 = load i64, i64* %PC
  %3950 = add i64 %3949, 2
  store i64 %3950, i64* %PC
  %3951 = and i64 1, %3948
  %3952 = trunc i64 %3951 to i8
  %3953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3953, align 1, !tbaa !2432
  %3954 = trunc i64 %3951 to i32
  %3955 = and i32 %3954, 255
  %3956 = call i32 @llvm.ctpop.i32(i32 %3955) #16
  %3957 = trunc i32 %3956 to i8
  %3958 = and i8 %3957, 1
  %3959 = xor i8 %3958, 1
  %3960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3959, i8* %3960, align 1, !tbaa !2446
  %3961 = icmp eq i8 %3952, 0
  %3962 = zext i1 %3961 to i8
  %3963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3962, i8* %3963, align 1, !tbaa !2448
  %3964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %3964, align 1, !tbaa !2449
  %3965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3965, align 1, !tbaa !2450
  %3966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3966, align 1, !tbaa !2447
  %3967 = load i64, i64* %PC
  %3968 = add i64 %3967, 11
  %3969 = load i64, i64* %PC
  %3970 = add i64 %3969, 6
  %3971 = load i64, i64* %PC
  %3972 = add i64 %3971, 6
  store i64 %3972, i64* %PC
  %3973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3974 = load i8, i8* %3973, align 1, !tbaa !2448
  %3975 = icmp eq i8 %3974, 0
  %3976 = zext i1 %3975 to i8
  store i8 %3976, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3978 = select i1 %3975, i64 %3968, i64 %3970
  store i64 %3978, i64* %3977, align 8, !tbaa !2428
  %3979 = load i8, i8* %BRANCH_TAKEN
  %3980 = icmp eq i8 %3979, 1
  br i1 %3980, label %block_400be7, label %block_400be2

block_4016eb:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1, %block_401592
  %MEMORY.17 = phi %struct.Memory* [ %MEMORY.36, %block_401592 ], [ %7392, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ]
  %3981 = load i64, i64* %PC
  %3982 = add i64 %3981, 5
  %3983 = load i64, i64* %PC
  %3984 = add i64 %3983, 5
  store i64 %3984, i64* %PC
  %3985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3982, i64* %3985, align 8, !tbaa !2428
  %3986 = load i64, i64* %RBP
  %3987 = sub i64 %3986, 4
  %3988 = load i64, i64* %PC
  %3989 = add i64 %3988, 3
  store i64 %3989, i64* %PC
  %3990 = inttoptr i64 %3987 to i32*
  %3991 = load i32, i32* %3990
  %3992 = zext i32 %3991 to i64
  store i64 %3992, i64* %RAX, align 8, !tbaa !2428
  %3993 = load i64, i64* %RAX
  %3994 = load i64, i64* %PC
  %3995 = add i64 %3994, 3
  store i64 %3995, i64* %PC
  %3996 = trunc i64 %3993 to i32
  %3997 = add i32 1, %3996
  %3998 = zext i32 %3997 to i64
  store i64 %3998, i64* %RAX, align 8, !tbaa !2428
  %3999 = icmp ult i32 %3997, %3996
  %4000 = icmp ult i32 %3997, 1
  %4001 = or i1 %3999, %4000
  %4002 = zext i1 %4001 to i8
  %4003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4002, i8* %4003, align 1, !tbaa !2432
  %4004 = and i32 %3997, 255
  %4005 = call i32 @llvm.ctpop.i32(i32 %4004) #16
  %4006 = trunc i32 %4005 to i8
  %4007 = and i8 %4006, 1
  %4008 = xor i8 %4007, 1
  %4009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4008, i8* %4009, align 1, !tbaa !2446
  %4010 = xor i64 1, %3993
  %4011 = trunc i64 %4010 to i32
  %4012 = xor i32 %4011, %3997
  %4013 = lshr i32 %4012, 4
  %4014 = trunc i32 %4013 to i8
  %4015 = and i8 %4014, 1
  %4016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4015, i8* %4016, align 1, !tbaa !2447
  %4017 = icmp eq i32 %3997, 0
  %4018 = zext i1 %4017 to i8
  %4019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4018, i8* %4019, align 1, !tbaa !2448
  %4020 = lshr i32 %3997, 31
  %4021 = trunc i32 %4020 to i8
  %4022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4021, i8* %4022, align 1, !tbaa !2449
  %4023 = lshr i32 %3996, 31
  %4024 = xor i32 %4020, %4023
  %4025 = add nuw nsw i32 %4024, %4020
  %4026 = icmp eq i32 %4025, 2
  %4027 = zext i1 %4026 to i8
  %4028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4027, i8* %4028, align 1, !tbaa !2450
  %4029 = load i64, i64* %RBP
  %4030 = sub i64 %4029, 4
  %4031 = load i32, i32* %EAX
  %4032 = zext i32 %4031 to i64
  %4033 = load i64, i64* %PC
  %4034 = add i64 %4033, 3
  store i64 %4034, i64* %PC
  %4035 = inttoptr i64 %4030 to i32*
  store i32 %4031, i32* %4035
  %4036 = load i64, i64* %PC
  %4037 = sub i64 %4036, 552
  %4038 = load i64, i64* %PC
  %4039 = add i64 %4038, 5
  store i64 %4039, i64* %PC
  %4040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4037, i64* %4040, align 8, !tbaa !2428
  br label %block_4014d1

block_400ee6:                                     ; preds = %block_400edf, %block_400fb0
  %MEMORY.18 = phi %struct.Memory* [ %MEMORY.54, %block_400edf ], [ %MEMORY.3, %block_400fb0 ]
  %4041 = load i64, i64* %RBP
  %4042 = sub i64 %4041, 4
  %4043 = load i64, i64* %PC
  %4044 = add i64 %4043, 3
  store i64 %4044, i64* %PC
  %4045 = inttoptr i64 %4042 to i32*
  %4046 = load i32, i32* %4045
  %4047 = zext i32 %4046 to i64
  store i64 %4047, i64* %RAX, align 8, !tbaa !2428
  %4048 = load i64, i64* %RBP
  %4049 = sub i64 %4048, 12
  %4050 = load i64, i64* %PC
  %4051 = add i64 %4050, 3
  store i64 %4051, i64* %PC
  %4052 = inttoptr i64 %4049 to i32*
  %4053 = load i32, i32* %4052
  %4054 = zext i32 %4053 to i64
  store i64 %4054, i64* %RCX, align 8, !tbaa !2428
  %4055 = load i64, i64* %RCX
  %4056 = load i64, i64* %PC
  %4057 = add i64 %4056, 3
  store i64 %4057, i64* %PC
  %4058 = trunc i64 %4055 to i32
  %4059 = add i32 1, %4058
  %4060 = zext i32 %4059 to i64
  store i64 %4060, i64* %RCX, align 8, !tbaa !2428
  %4061 = icmp ult i32 %4059, %4058
  %4062 = icmp ult i32 %4059, 1
  %4063 = or i1 %4061, %4062
  %4064 = zext i1 %4063 to i8
  %4065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4064, i8* %4065, align 1, !tbaa !2432
  %4066 = and i32 %4059, 255
  %4067 = call i32 @llvm.ctpop.i32(i32 %4066) #16
  %4068 = trunc i32 %4067 to i8
  %4069 = and i8 %4068, 1
  %4070 = xor i8 %4069, 1
  %4071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4070, i8* %4071, align 1, !tbaa !2446
  %4072 = xor i64 1, %4055
  %4073 = trunc i64 %4072 to i32
  %4074 = xor i32 %4073, %4059
  %4075 = lshr i32 %4074, 4
  %4076 = trunc i32 %4075 to i8
  %4077 = and i8 %4076, 1
  %4078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4077, i8* %4078, align 1, !tbaa !2447
  %4079 = icmp eq i32 %4059, 0
  %4080 = zext i1 %4079 to i8
  %4081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4080, i8* %4081, align 1, !tbaa !2448
  %4082 = lshr i32 %4059, 31
  %4083 = trunc i32 %4082 to i8
  %4084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4083, i8* %4084, align 1, !tbaa !2449
  %4085 = lshr i32 %4058, 31
  %4086 = xor i32 %4082, %4085
  %4087 = add nuw nsw i32 %4086, %4082
  %4088 = icmp eq i32 %4087, 2
  %4089 = zext i1 %4088 to i8
  %4090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4089, i8* %4090, align 1, !tbaa !2450
  %4091 = load i32, i32* %ECX
  %4092 = zext i32 %4091 to i64
  %4093 = load i64, i64* %PC
  %4094 = add i64 %4093, 3
  store i64 %4094, i64* %PC
  %4095 = shl i64 %4092, 32
  %4096 = ashr exact i64 %4095, 32
  store i64 %4096, i64* %RDX, align 8, !tbaa !2428
  %4097 = load i32, i32* %EAX
  %4098 = zext i32 %4097 to i64
  %4099 = load i64, i64* %RBP
  %4100 = load i64, i64* %RDX
  %4101 = mul i64 %4100, 4
  %4102 = add i64 %4099, -1328
  %4103 = add i64 %4102, %4101
  %4104 = load i64, i64* %PC
  %4105 = add i64 %4104, 7
  store i64 %4105, i64* %PC
  %4106 = inttoptr i64 %4103 to i32*
  %4107 = load i32, i32* %4106
  %4108 = sub i32 %4097, %4107
  %4109 = icmp ult i32 %4097, %4107
  %4110 = zext i1 %4109 to i8
  %4111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4110, i8* %4111, align 1, !tbaa !2432
  %4112 = and i32 %4108, 255
  %4113 = call i32 @llvm.ctpop.i32(i32 %4112) #16
  %4114 = trunc i32 %4113 to i8
  %4115 = and i8 %4114, 1
  %4116 = xor i8 %4115, 1
  %4117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4116, i8* %4117, align 1, !tbaa !2446
  %4118 = xor i32 %4107, %4097
  %4119 = xor i32 %4118, %4108
  %4120 = lshr i32 %4119, 4
  %4121 = trunc i32 %4120 to i8
  %4122 = and i8 %4121, 1
  %4123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4122, i8* %4123, align 1, !tbaa !2447
  %4124 = icmp eq i32 %4108, 0
  %4125 = zext i1 %4124 to i8
  %4126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4125, i8* %4126, align 1, !tbaa !2448
  %4127 = lshr i32 %4108, 31
  %4128 = trunc i32 %4127 to i8
  %4129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4128, i8* %4129, align 1, !tbaa !2449
  %4130 = lshr i32 %4097, 31
  %4131 = lshr i32 %4107, 31
  %4132 = xor i32 %4131, %4130
  %4133 = xor i32 %4127, %4130
  %4134 = add nuw nsw i32 %4133, %4132
  %4135 = icmp eq i32 %4134, 2
  %4136 = zext i1 %4135 to i8
  %4137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4136, i8* %4137, align 1, !tbaa !2450
  %4138 = load i64, i64* %PC
  %4139 = add i64 %4138, 202
  %4140 = load i64, i64* %PC
  %4141 = add i64 %4140, 6
  %4142 = load i64, i64* %PC
  %4143 = add i64 %4142, 6
  store i64 %4143, i64* %PC
  %4144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4145 = load i8, i8* %4144, align 1, !tbaa !2448
  %4146 = icmp eq i8 %4145, 0
  %4147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4148 = load i8, i8* %4147, align 1, !tbaa !2449
  %4149 = icmp ne i8 %4148, 0
  %4150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4151 = load i8, i8* %4150, align 1, !tbaa !2450
  %4152 = icmp ne i8 %4151, 0
  %4153 = xor i1 %4149, %4152
  %4154 = xor i1 %4153, true
  %4155 = and i1 %4146, %4154
  %4156 = zext i1 %4155 to i8
  store i8 %4156, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4158 = select i1 %4155, i64 %4139, i64 %4141
  store i64 %4158, i64* %4157, align 8, !tbaa !2428
  %4159 = load i8, i8* %BRANCH_TAKEN
  %4160 = icmp eq i8 %4159, 1
  %4161 = load i64, i64* %RBP
  %4162 = sub i64 %4161, 12
  %4163 = load i64, i64* %PC
  %4164 = add i64 %4163, 3
  store i64 %4164, i64* %PC
  %4165 = inttoptr i64 %4162 to i32*
  %4166 = load i32, i32* %4165
  %4167 = zext i32 %4166 to i64
  store i64 %4167, i64* %RAX, align 8, !tbaa !2428
  %4168 = load i64, i64* %RAX
  %4169 = load i64, i64* %PC
  %4170 = add i64 %4169, 3
  store i64 %4170, i64* %PC
  %4171 = trunc i64 %4168 to i32
  %4172 = add i32 1, %4171
  %4173 = zext i32 %4172 to i64
  store i64 %4173, i64* %RAX, align 8, !tbaa !2428
  %4174 = icmp ult i32 %4172, %4171
  %4175 = icmp ult i32 %4172, 1
  %4176 = or i1 %4174, %4175
  %4177 = zext i1 %4176 to i8
  %4178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4177, i8* %4178, align 1, !tbaa !2432
  %4179 = and i32 %4172, 255
  %4180 = call i32 @llvm.ctpop.i32(i32 %4179) #16
  %4181 = trunc i32 %4180 to i8
  %4182 = and i8 %4181, 1
  %4183 = xor i8 %4182, 1
  %4184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4183, i8* %4184, align 1, !tbaa !2446
  %4185 = xor i64 1, %4168
  %4186 = trunc i64 %4185 to i32
  %4187 = xor i32 %4186, %4172
  %4188 = lshr i32 %4187, 4
  %4189 = trunc i32 %4188 to i8
  %4190 = and i8 %4189, 1
  %4191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4190, i8* %4191, align 1, !tbaa !2447
  %4192 = icmp eq i32 %4172, 0
  %4193 = zext i1 %4192 to i8
  %4194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4193, i8* %4194, align 1, !tbaa !2448
  %4195 = lshr i32 %4172, 31
  %4196 = trunc i32 %4195 to i8
  %4197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4196, i8* %4197, align 1, !tbaa !2449
  %4198 = lshr i32 %4171, 31
  %4199 = xor i32 %4195, %4198
  %4200 = add nuw nsw i32 %4199, %4195
  %4201 = icmp eq i32 %4200, 2
  %4202 = zext i1 %4201 to i8
  %4203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4202, i8* %4203, align 1, !tbaa !2450
  br i1 %4160, label %block_400fc3, label %block_400eff

block_4012f0:                                     ; preds = %block_4012ad, %block_40129b
  %MEMORY.19 = phi %struct.Memory* [ %MEMORY.25, %block_40129b ], [ %MEMORY.25, %block_4012ad ]
  %4204 = load i64, i64* %RBP
  %4205 = sub i64 %4204, 4
  %4206 = load i64, i64* %PC
  %4207 = add i64 %4206, 4
  store i64 %4207, i64* %PC
  %4208 = inttoptr i64 %4205 to i32*
  %4209 = load i32, i32* %4208
  %4210 = sext i32 %4209 to i64
  store i64 %4210, i64* %RAX, align 8, !tbaa !2428
  %4211 = load i64, i64* %RBP
  %4212 = load i64, i64* %RAX
  %4213 = mul i64 %4212, 4
  %4214 = add i64 %4211, -1488
  %4215 = add i64 %4214, %4213
  %4216 = load i64, i64* %PC
  %4217 = add i64 %4216, 8
  store i64 %4217, i64* %PC
  %4218 = inttoptr i64 %4215 to i32*
  %4219 = load i32, i32* %4218
  %4220 = sub i32 %4219, -1
  %4221 = icmp ult i32 %4219, -1
  %4222 = zext i1 %4221 to i8
  %4223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4222, i8* %4223, align 1, !tbaa !2432
  %4224 = and i32 %4220, 255
  %4225 = call i32 @llvm.ctpop.i32(i32 %4224) #16
  %4226 = trunc i32 %4225 to i8
  %4227 = and i8 %4226, 1
  %4228 = xor i8 %4227, 1
  %4229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4228, i8* %4229, align 1, !tbaa !2446
  %4230 = xor i32 %4219, -1
  %4231 = xor i32 %4230, %4220
  %4232 = lshr i32 %4231, 4
  %4233 = trunc i32 %4232 to i8
  %4234 = and i8 %4233, 1
  %4235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4234, i8* %4235, align 1, !tbaa !2447
  %4236 = icmp eq i32 %4220, 0
  %4237 = zext i1 %4236 to i8
  %4238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4237, i8* %4238, align 1, !tbaa !2448
  %4239 = lshr i32 %4220, 31
  %4240 = trunc i32 %4239 to i8
  %4241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4240, i8* %4241, align 1, !tbaa !2449
  %4242 = lshr i32 %4219, 31
  %4243 = xor i32 %4242, 1
  %4244 = xor i32 %4239, %4242
  %4245 = add nuw nsw i32 %4244, %4243
  %4246 = icmp eq i32 %4245, 2
  %4247 = zext i1 %4246 to i8
  %4248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4247, i8* %4248, align 1, !tbaa !2450
  %4249 = load i64, i64* %PC
  %4250 = add i64 %4249, 87
  %4251 = load i64, i64* %PC
  %4252 = add i64 %4251, 6
  %4253 = load i64, i64* %PC
  %4254 = add i64 %4253, 6
  store i64 %4254, i64* %PC
  %4255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4256 = load i8, i8* %4255, align 1, !tbaa !2448
  %4257 = icmp eq i8 %4256, 0
  %4258 = zext i1 %4257 to i8
  store i8 %4258, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4260 = select i1 %4257, i64 %4250, i64 %4252
  store i64 %4260, i64* %4259, align 8, !tbaa !2428
  %4261 = load i8, i8* %BRANCH_TAKEN
  %4262 = icmp eq i8 %4261, 1
  br i1 %4262, label %block_401353, label %block_401302

block_4014e5:                                     ; preds = %block_4014d1
  %4263 = load i64, i64* %RBP
  %4264 = sub i64 %4263, 4
  %4265 = load i64, i64* %PC
  %4266 = add i64 %4265, 4
  store i64 %4266, i64* %PC
  %4267 = inttoptr i64 %4264 to i32*
  %4268 = load i32, i32* %4267
  %4269 = sext i32 %4268 to i64
  store i64 %4269, i64* %RAX, align 8, !tbaa !2428
  %4270 = load i64, i64* %RBP
  %4271 = load i64, i64* %RAX
  %4272 = mul i64 %4271, 4
  %4273 = add i64 %4270, -1568
  %4274 = add i64 %4273, %4272
  %4275 = load i64, i64* %PC
  %4276 = add i64 %4275, 8
  store i64 %4276, i64* %PC
  %4277 = inttoptr i64 %4274 to i32*
  %4278 = load i32, i32* %4277
  %4279 = sext i32 %4278 to i64
  store i64 %4279, i64* %RAX, align 8, !tbaa !2428
  %4280 = load i64, i64* %RBP
  %4281 = load i64, i64* %RAX
  %4282 = mul i64 %4281, 4
  %4283 = add i64 %4280, -2640
  %4284 = add i64 %4283, %4282
  %4285 = load i64, i64* %PC
  %4286 = add i64 %4285, 11
  store i64 %4286, i64* %PC
  %4287 = inttoptr i64 %4284 to i32*
  store i32 1, i32* %4287
  %4288 = load i64, i64* %RBP
  %4289 = sub i64 %4288, 8
  %4290 = load i64, i64* %PC
  %4291 = add i64 %4290, 7
  store i64 %4291, i64* %PC
  %4292 = inttoptr i64 %4289 to i32*
  store i32 1, i32* %4292
  br label %block_401503

block_4012cd:                                     ; preds = %block_4012ad
  %4293 = load i64, i64* %RBP
  %4294 = sub i64 %4293, 4
  %4295 = load i64, i64* %PC
  %4296 = add i64 %4295, 4
  store i64 %4296, i64* %PC
  %4297 = inttoptr i64 %4294 to i32*
  %4298 = load i32, i32* %4297
  %4299 = sext i32 %4298 to i64
  store i64 %4299, i64* %RAX, align 8, !tbaa !2428
  %4300 = load i64, i64* %RBP
  %4301 = load i64, i64* %RAX
  %4302 = mul i64 %4301, 4
  %4303 = add i64 %4300, -1488
  %4304 = add i64 %4303, %4302
  %4305 = load i64, i64* %PC
  %4306 = add i64 %4305, 8
  store i64 %4306, i64* %PC
  %4307 = inttoptr i64 %4304 to i32*
  %4308 = load i32, i32* %4307
  %4309 = sext i32 %4308 to i64
  store i64 %4309, i64* %RAX, align 8, !tbaa !2428
  %4310 = load i64, i64* %RAX
  %4311 = mul i64 %4310, 4
  %4312 = add i64 %4311, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %4313 = load i64, i64* %PC
  %4314 = add i64 %4313, 7
  store i64 %4314, i64* %PC
  %4315 = inttoptr i64 %4312 to i32*
  %4316 = load i32, i32* %4315
  %4317 = zext i32 %4316 to i64
  store i64 %4317, i64* %RCX, align 8, !tbaa !2428
  %4318 = load i64, i64* %RBP
  %4319 = sub i64 %4318, 4
  %4320 = load i64, i64* %PC
  %4321 = add i64 %4320, 4
  store i64 %4321, i64* %PC
  %4322 = inttoptr i64 %4319 to i32*
  %4323 = load i32, i32* %4322
  %4324 = sext i32 %4323 to i64
  store i64 %4324, i64* %RAX, align 8, !tbaa !2428
  %4325 = load i64, i64* %RBP
  %4326 = load i64, i64* %RAX
  %4327 = mul i64 %4326, 4
  %4328 = add i64 %4325, -1616
  %4329 = add i64 %4328, %4327
  %4330 = load i32, i32* %ECX
  %4331 = zext i32 %4330 to i64
  %4332 = load i64, i64* %PC
  %4333 = add i64 %4332, 7
  store i64 %4333, i64* %PC
  %4334 = inttoptr i64 %4329 to i32*
  store i32 %4330, i32* %4334
  %4335 = load i64, i64* %PC
  %4336 = add i64 %4335, 124
  %4337 = load i64, i64* %PC
  %4338 = add i64 %4337, 5
  store i64 %4338, i64* %PC
  %4339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4336, i64* %4339, align 8, !tbaa !2428
  br label %block_401367

block_4017e3:                                     ; preds = %block_40177f
  %4340 = load i64, i64* %PC
  %4341 = add i64 %4340, 5
  %4342 = load i64, i64* %PC
  %4343 = add i64 %4342, 5
  store i64 %4343, i64* %PC
  %4344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4341, i64* %4344, align 8, !tbaa !2428
  br label %block_4017e8

block_400ccc:                                     ; preds = %block_400cc2
  %4345 = sub i64 %4673, 1168
  %4346 = load i64, i64* %PC
  %4347 = add i64 %4346, 7
  store i64 %4347, i64* %PC
  store i64 %4345, i64* %RAX, align 8, !tbaa !2428
  %4348 = load i64, i64* %RBP
  %4349 = sub i64 %4348, 12
  %4350 = load i64, i64* %PC
  %4351 = add i64 %4350, 3
  store i64 %4351, i64* %PC
  %4352 = inttoptr i64 %4349 to i32*
  %4353 = load i32, i32* %4352
  %4354 = zext i32 %4353 to i64
  store i64 %4354, i64* %RCX, align 8, !tbaa !2428
  %4355 = load i64, i64* %RCX
  %4356 = load i64, i64* %PC
  %4357 = add i64 %4356, 3
  store i64 %4357, i64* %PC
  %4358 = trunc i64 %4355 to i32
  %4359 = add i32 1, %4358
  %4360 = zext i32 %4359 to i64
  store i64 %4360, i64* %RCX, align 8, !tbaa !2428
  %4361 = icmp ult i32 %4359, %4358
  %4362 = icmp ult i32 %4359, 1
  %4363 = or i1 %4361, %4362
  %4364 = zext i1 %4363 to i8
  %4365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4364, i8* %4365, align 1, !tbaa !2432
  %4366 = and i32 %4359, 255
  %4367 = call i32 @llvm.ctpop.i32(i32 %4366) #16
  %4368 = trunc i32 %4367 to i8
  %4369 = and i8 %4368, 1
  %4370 = xor i8 %4369, 1
  %4371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4370, i8* %4371, align 1, !tbaa !2446
  %4372 = xor i64 1, %4355
  %4373 = trunc i64 %4372 to i32
  %4374 = xor i32 %4373, %4359
  %4375 = lshr i32 %4374, 4
  %4376 = trunc i32 %4375 to i8
  %4377 = and i8 %4376, 1
  %4378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4377, i8* %4378, align 1, !tbaa !2447
  %4379 = icmp eq i32 %4359, 0
  %4380 = zext i1 %4379 to i8
  %4381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4380, i8* %4381, align 1, !tbaa !2448
  %4382 = lshr i32 %4359, 31
  %4383 = trunc i32 %4382 to i8
  %4384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4383, i8* %4384, align 1, !tbaa !2449
  %4385 = lshr i32 %4358, 31
  %4386 = xor i32 %4382, %4385
  %4387 = add nuw nsw i32 %4386, %4382
  %4388 = icmp eq i32 %4387, 2
  %4389 = zext i1 %4388 to i8
  %4390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4389, i8* %4390, align 1, !tbaa !2450
  %4391 = load i32, i32* %ECX
  %4392 = zext i32 %4391 to i64
  %4393 = load i64, i64* %PC
  %4394 = add i64 %4393, 3
  store i64 %4394, i64* %PC
  %4395 = shl i64 %4392, 32
  %4396 = ashr exact i64 %4395, 32
  store i64 %4396, i64* %RDX, align 8, !tbaa !2428
  %4397 = load i64, i64* %RDX
  %4398 = load i64, i64* %PC
  %4399 = add i64 %4398, 4
  store i64 %4399, i64* %PC
  %4400 = shl i64 %4397, 5
  %4401 = icmp slt i64 %4400, 0
  %4402 = shl i64 %4400, 1
  store i64 %4402, i64* %RDX, align 8, !tbaa !2428
  %4403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4404 = zext i1 %4401 to i8
  store i8 %4404, i8* %4403, align 1, !tbaa !2451
  %4405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4406 = trunc i64 %4402 to i32
  %4407 = and i32 %4406, 254
  %4408 = call i32 @llvm.ctpop.i32(i32 %4407) #16
  %4409 = trunc i32 %4408 to i8
  %4410 = and i8 %4409, 1
  %4411 = xor i8 %4410, 1
  store i8 %4411, i8* %4405, align 1, !tbaa !2451
  %4412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4412, align 1, !tbaa !2451
  %4413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4414 = icmp eq i64 %4402, 0
  %4415 = zext i1 %4414 to i8
  store i8 %4415, i8* %4413, align 1, !tbaa !2451
  %4416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4417 = lshr i64 %4402, 63
  %4418 = trunc i64 %4417 to i8
  store i8 %4418, i8* %4416, align 1, !tbaa !2451
  %4419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4419, align 1, !tbaa !2451
  %4420 = load i64, i64* %RAX
  %4421 = load i64, i64* %RDX
  %4422 = load i64, i64* %PC
  %4423 = add i64 %4422, 3
  store i64 %4423, i64* %PC
  %4424 = add i64 %4421, %4420
  store i64 %4424, i64* %RAX, align 8, !tbaa !2428
  %4425 = icmp ult i64 %4424, %4420
  %4426 = icmp ult i64 %4424, %4421
  %4427 = or i1 %4425, %4426
  %4428 = zext i1 %4427 to i8
  %4429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4428, i8* %4429, align 1, !tbaa !2432
  %4430 = trunc i64 %4424 to i32
  %4431 = and i32 %4430, 255
  %4432 = call i32 @llvm.ctpop.i32(i32 %4431) #16
  %4433 = trunc i32 %4432 to i8
  %4434 = and i8 %4433, 1
  %4435 = xor i8 %4434, 1
  %4436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4435, i8* %4436, align 1, !tbaa !2446
  %4437 = xor i64 %4421, %4420
  %4438 = xor i64 %4437, %4424
  %4439 = lshr i64 %4438, 4
  %4440 = trunc i64 %4439 to i8
  %4441 = and i8 %4440, 1
  %4442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4441, i8* %4442, align 1, !tbaa !2447
  %4443 = icmp eq i64 %4424, 0
  %4444 = zext i1 %4443 to i8
  %4445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4444, i8* %4445, align 1, !tbaa !2448
  %4446 = lshr i64 %4424, 63
  %4447 = trunc i64 %4446 to i8
  %4448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4447, i8* %4448, align 1, !tbaa !2449
  %4449 = lshr i64 %4420, 63
  %4450 = lshr i64 %4421, 63
  %4451 = xor i64 %4446, %4449
  %4452 = xor i64 %4446, %4450
  %4453 = add nuw nsw i64 %4451, %4452
  %4454 = icmp eq i64 %4453, 2
  %4455 = zext i1 %4454 to i8
  %4456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4455, i8* %4456, align 1, !tbaa !2450
  %4457 = load i64, i64* %RBP
  %4458 = sub i64 %4457, 4
  %4459 = load i64, i64* %PC
  %4460 = add i64 %4459, 4
  store i64 %4460, i64* %PC
  %4461 = inttoptr i64 %4458 to i32*
  %4462 = load i32, i32* %4461
  %4463 = sext i32 %4462 to i64
  store i64 %4463, i64* %RDX, align 8, !tbaa !2428
  %4464 = load i64, i64* %RAX
  %4465 = load i64, i64* %RDX
  %4466 = mul i64 %4465, 4
  %4467 = add i64 %4466, %4464
  %4468 = load i64, i64* %PC
  %4469 = add i64 %4468, 7
  store i64 %4469, i64* %PC
  %4470 = inttoptr i64 %4467 to i32*
  store i32 0, i32* %4470
  %4471 = load i64, i64* %RBP
  %4472 = sub i64 %4471, 4
  %4473 = load i64, i64* %PC
  %4474 = add i64 %4473, 3
  store i64 %4474, i64* %PC
  %4475 = inttoptr i64 %4472 to i32*
  %4476 = load i32, i32* %4475
  %4477 = zext i32 %4476 to i64
  store i64 %4477, i64* %RAX, align 8, !tbaa !2428
  %4478 = load i64, i64* %RAX
  %4479 = load i64, i64* %PC
  %4480 = add i64 %4479, 3
  store i64 %4480, i64* %PC
  %4481 = trunc i64 %4478 to i32
  %4482 = add i32 1, %4481
  %4483 = zext i32 %4482 to i64
  store i64 %4483, i64* %RAX, align 8, !tbaa !2428
  %4484 = icmp ult i32 %4482, %4481
  %4485 = icmp ult i32 %4482, 1
  %4486 = or i1 %4484, %4485
  %4487 = zext i1 %4486 to i8
  %4488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4487, i8* %4488, align 1, !tbaa !2432
  %4489 = and i32 %4482, 255
  %4490 = call i32 @llvm.ctpop.i32(i32 %4489) #16
  %4491 = trunc i32 %4490 to i8
  %4492 = and i8 %4491, 1
  %4493 = xor i8 %4492, 1
  %4494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4493, i8* %4494, align 1, !tbaa !2446
  %4495 = xor i64 1, %4478
  %4496 = trunc i64 %4495 to i32
  %4497 = xor i32 %4496, %4482
  %4498 = lshr i32 %4497, 4
  %4499 = trunc i32 %4498 to i8
  %4500 = and i8 %4499, 1
  %4501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4500, i8* %4501, align 1, !tbaa !2447
  %4502 = icmp eq i32 %4482, 0
  %4503 = zext i1 %4502 to i8
  %4504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4503, i8* %4504, align 1, !tbaa !2448
  %4505 = lshr i32 %4482, 31
  %4506 = trunc i32 %4505 to i8
  %4507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4506, i8* %4507, align 1, !tbaa !2449
  %4508 = lshr i32 %4481, 31
  %4509 = xor i32 %4505, %4508
  %4510 = add nuw nsw i32 %4509, %4505
  %4511 = icmp eq i32 %4510, 2
  %4512 = zext i1 %4511 to i8
  %4513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4512, i8* %4513, align 1, !tbaa !2450
  %4514 = load i64, i64* %RBP
  %4515 = sub i64 %4514, 4
  %4516 = load i32, i32* %EAX
  %4517 = zext i32 %4516 to i64
  %4518 = load i64, i64* %PC
  %4519 = add i64 %4518, 3
  store i64 %4519, i64* %PC
  %4520 = inttoptr i64 %4515 to i32*
  store i32 %4516, i32* %4520
  %4521 = load i64, i64* %PC
  %4522 = sub i64 %4521, 53
  %4523 = load i64, i64* %PC
  %4524 = add i64 %4523, 5
  store i64 %4524, i64* %PC
  %4525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4522, i64* %4525, align 8, !tbaa !2428
  br label %block_400cc2

block_4017ed:                                     ; preds = %block_400a36
  %4526 = sub i64 %9621, 4
  %4527 = load i64, i64* %PC
  %4528 = add i64 %4527, 7
  store i64 %4528, i64* %PC
  %4529 = inttoptr i64 %4526 to i32*
  store i32 0, i32* %4529
  br label %block_4017f4

block_400ecb:                                     ; preds = %block_400e87
  %4530 = sub i64 %5515, 1248
  %4531 = load i64, i64* %PC
  %4532 = add i64 %4531, 11
  store i64 %4532, i64* %PC
  %4533 = inttoptr i64 %4530 to i32*
  store i32 0, i32* %4533
  br label %block_400edf

block_4014ca:                                     ; preds = %block_401457
  %4534 = add i64 %10689, 7
  store i64 %4534, i64* %PC
  %4535 = inttoptr i64 %10688 to i32*
  store i32 0, i32* %4535
  br label %block_4014d1

block_401773:                                     ; preds = %block_4016fe, %block_40176e
  %MEMORY.20 = phi %struct.Memory* [ %MEMORY.35, %block_40176e ], [ %MEMORY.27, %block_4016fe ]
  %4536 = load i64, i64* %PC
  %4537 = add i64 %4536, 117
  %4538 = load i64, i64* %PC
  %4539 = add i64 %4538, 5
  store i64 %4539, i64* %PC
  %4540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4537, i64* %4540, align 8, !tbaa !2428
  br label %block_4017e8

block_400d03:                                     ; preds = %block_400cfc, %block_400db1
  %MEMORY.21 = phi %struct.Memory* [ %MEMORY.22, %block_400cfc ], [ %MEMORY.14, %block_400db1 ]
  %4541 = load i64, i64* %RBP
  %4542 = sub i64 %4541, 4
  %4543 = load i64, i64* %PC
  %4544 = add i64 %4543, 3
  store i64 %4544, i64* %PC
  %4545 = inttoptr i64 %4542 to i32*
  %4546 = load i32, i32* %4545
  %4547 = zext i32 %4546 to i64
  store i64 %4547, i64* %RAX, align 8, !tbaa !2428
  %4548 = load i64, i64* %RBP
  %4549 = sub i64 %4548, 16
  %4550 = load i64, i64* %PC
  %4551 = add i64 %4550, 4
  store i64 %4551, i64* %PC
  %4552 = inttoptr i64 %4549 to i32*
  %4553 = load i32, i32* %4552
  %4554 = sext i32 %4553 to i64
  store i64 %4554, i64* %RCX, align 8, !tbaa !2428
  %4555 = load i32, i32* %EAX
  %4556 = zext i32 %4555 to i64
  %4557 = load i64, i64* %RBP
  %4558 = load i64, i64* %RCX
  %4559 = mul i64 %4558, 4
  %4560 = add i64 %4557, -1328
  %4561 = add i64 %4560, %4559
  %4562 = load i64, i64* %PC
  %4563 = add i64 %4562, 7
  store i64 %4563, i64* %PC
  %4564 = inttoptr i64 %4561 to i32*
  %4565 = load i32, i32* %4564
  %4566 = sub i32 %4555, %4565
  %4567 = icmp ult i32 %4555, %4565
  %4568 = zext i1 %4567 to i8
  %4569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4568, i8* %4569, align 1, !tbaa !2432
  %4570 = and i32 %4566, 255
  %4571 = call i32 @llvm.ctpop.i32(i32 %4570) #16
  %4572 = trunc i32 %4571 to i8
  %4573 = and i8 %4572, 1
  %4574 = xor i8 %4573, 1
  %4575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4574, i8* %4575, align 1, !tbaa !2446
  %4576 = xor i32 %4565, %4555
  %4577 = xor i32 %4576, %4566
  %4578 = lshr i32 %4577, 4
  %4579 = trunc i32 %4578 to i8
  %4580 = and i8 %4579, 1
  %4581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4580, i8* %4581, align 1, !tbaa !2447
  %4582 = icmp eq i32 %4566, 0
  %4583 = zext i1 %4582 to i8
  %4584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4583, i8* %4584, align 1, !tbaa !2448
  %4585 = lshr i32 %4566, 31
  %4586 = trunc i32 %4585 to i8
  %4587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4586, i8* %4587, align 1, !tbaa !2449
  %4588 = lshr i32 %4555, 31
  %4589 = lshr i32 %4565, 31
  %4590 = xor i32 %4589, %4588
  %4591 = xor i32 %4585, %4588
  %4592 = add nuw nsw i32 %4591, %4590
  %4593 = icmp eq i32 %4592, 2
  %4594 = zext i1 %4593 to i8
  %4595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4594, i8* %4595, align 1, !tbaa !2450
  %4596 = load i64, i64* %PC
  %4597 = add i64 %4596, 179
  %4598 = load i64, i64* %PC
  %4599 = add i64 %4598, 6
  %4600 = load i64, i64* %PC
  %4601 = add i64 %4600, 6
  store i64 %4601, i64* %PC
  %4602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4603 = load i8, i8* %4602, align 1, !tbaa !2448
  %4604 = icmp eq i8 %4603, 0
  %4605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4606 = load i8, i8* %4605, align 1, !tbaa !2449
  %4607 = icmp ne i8 %4606, 0
  %4608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4609 = load i8, i8* %4608, align 1, !tbaa !2450
  %4610 = icmp ne i8 %4609, 0
  %4611 = xor i1 %4607, %4610
  %4612 = xor i1 %4611, true
  %4613 = and i1 %4604, %4612
  %4614 = zext i1 %4613 to i8
  store i8 %4614, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4616 = select i1 %4613, i64 %4597, i64 %4599
  store i64 %4616, i64* %4615, align 8, !tbaa !2428
  %4617 = load i8, i8* %BRANCH_TAKEN
  %4618 = icmp eq i8 %4617, 1
  %4619 = load i64, i64* %RBP
  br i1 %4618, label %block_400dc4, label %block_400d17

block_400cc2:                                     ; preds = %block_400cbb, %block_400ccc
  %MEMORY.22 = phi %struct.Memory* [ %MEMORY.23, %block_400cbb ], [ %MEMORY.22, %block_400ccc ]
  %4620 = load i64, i64* %RBP
  %4621 = sub i64 %4620, 4
  %4622 = load i64, i64* %PC
  %4623 = add i64 %4622, 4
  store i64 %4623, i64* %PC
  %4624 = inttoptr i64 %4621 to i32*
  %4625 = load i32, i32* %4624
  %4626 = sub i32 %4625, 16
  %4627 = icmp ult i32 %4625, 16
  %4628 = zext i1 %4627 to i8
  %4629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4628, i8* %4629, align 1, !tbaa !2432
  %4630 = and i32 %4626, 255
  %4631 = call i32 @llvm.ctpop.i32(i32 %4630) #16
  %4632 = trunc i32 %4631 to i8
  %4633 = and i8 %4632, 1
  %4634 = xor i8 %4633, 1
  %4635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4634, i8* %4635, align 1, !tbaa !2446
  %4636 = xor i32 %4625, 16
  %4637 = xor i32 %4636, %4626
  %4638 = lshr i32 %4637, 4
  %4639 = trunc i32 %4638 to i8
  %4640 = and i8 %4639, 1
  %4641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4640, i8* %4641, align 1, !tbaa !2447
  %4642 = icmp eq i32 %4626, 0
  %4643 = zext i1 %4642 to i8
  %4644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4643, i8* %4644, align 1, !tbaa !2448
  %4645 = lshr i32 %4626, 31
  %4646 = trunc i32 %4645 to i8
  %4647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4646, i8* %4647, align 1, !tbaa !2449
  %4648 = lshr i32 %4625, 31
  %4649 = xor i32 %4645, %4648
  %4650 = add nuw nsw i32 %4649, %4648
  %4651 = icmp eq i32 %4650, 2
  %4652 = zext i1 %4651 to i8
  %4653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4652, i8* %4653, align 1, !tbaa !2450
  %4654 = load i64, i64* %PC
  %4655 = add i64 %4654, 54
  %4656 = load i64, i64* %PC
  %4657 = add i64 %4656, 6
  %4658 = load i64, i64* %PC
  %4659 = add i64 %4658, 6
  store i64 %4659, i64* %PC
  %4660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4661 = load i8, i8* %4660, align 1, !tbaa !2449
  %4662 = icmp ne i8 %4661, 0
  %4663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4664 = load i8, i8* %4663, align 1, !tbaa !2450
  %4665 = icmp ne i8 %4664, 0
  %4666 = xor i1 %4662, %4665
  %4667 = xor i1 %4666, true
  %4668 = zext i1 %4667 to i8
  store i8 %4668, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4670 = select i1 %4666, i64 %4657, i64 %4655
  store i64 %4670, i64* %4669, align 8, !tbaa !2428
  %4671 = load i8, i8* %BRANCH_TAKEN
  %4672 = icmp eq i8 %4671, 1
  %4673 = load i64, i64* %RBP
  br i1 %4672, label %block_400cfc, label %block_400ccc

block_4010c1:                                     ; preds = %block_4010ad
  %4674 = sub i64 %4987, 1168
  %4675 = load i64, i64* %PC
  %4676 = add i64 %4675, 7
  store i64 %4676, i64* %PC
  store i64 %4674, i64* %RAX, align 8, !tbaa !2428
  %4677 = load i64, i64* %RBP
  %4678 = sub i64 %4677, 12
  %4679 = load i64, i64* %PC
  %4680 = add i64 %4679, 4
  store i64 %4680, i64* %PC
  %4681 = inttoptr i64 %4678 to i32*
  %4682 = load i32, i32* %4681
  %4683 = sext i32 %4682 to i64
  store i64 %4683, i64* %RCX, align 8, !tbaa !2428
  %4684 = load i64, i64* %RCX
  %4685 = load i64, i64* %PC
  %4686 = add i64 %4685, 4
  store i64 %4686, i64* %PC
  %4687 = shl i64 %4684, 5
  %4688 = icmp slt i64 %4687, 0
  %4689 = shl i64 %4687, 1
  store i64 %4689, i64* %RCX, align 8, !tbaa !2428
  %4690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4691 = zext i1 %4688 to i8
  store i8 %4691, i8* %4690, align 1, !tbaa !2451
  %4692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4693 = trunc i64 %4689 to i32
  %4694 = and i32 %4693, 254
  %4695 = call i32 @llvm.ctpop.i32(i32 %4694) #16
  %4696 = trunc i32 %4695 to i8
  %4697 = and i8 %4696, 1
  %4698 = xor i8 %4697, 1
  store i8 %4698, i8* %4692, align 1, !tbaa !2451
  %4699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4699, align 1, !tbaa !2451
  %4700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4701 = icmp eq i64 %4689, 0
  %4702 = zext i1 %4701 to i8
  store i8 %4702, i8* %4700, align 1, !tbaa !2451
  %4703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4704 = lshr i64 %4689, 63
  %4705 = trunc i64 %4704 to i8
  store i8 %4705, i8* %4703, align 1, !tbaa !2451
  %4706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4706, align 1, !tbaa !2451
  %4707 = load i64, i64* %RAX
  %4708 = load i64, i64* %RCX
  %4709 = load i64, i64* %PC
  %4710 = add i64 %4709, 3
  store i64 %4710, i64* %PC
  %4711 = add i64 %4708, %4707
  store i64 %4711, i64* %RAX, align 8, !tbaa !2428
  %4712 = icmp ult i64 %4711, %4707
  %4713 = icmp ult i64 %4711, %4708
  %4714 = or i1 %4712, %4713
  %4715 = zext i1 %4714 to i8
  %4716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4715, i8* %4716, align 1, !tbaa !2432
  %4717 = trunc i64 %4711 to i32
  %4718 = and i32 %4717, 255
  %4719 = call i32 @llvm.ctpop.i32(i32 %4718) #16
  %4720 = trunc i32 %4719 to i8
  %4721 = and i8 %4720, 1
  %4722 = xor i8 %4721, 1
  %4723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4722, i8* %4723, align 1, !tbaa !2446
  %4724 = xor i64 %4708, %4707
  %4725 = xor i64 %4724, %4711
  %4726 = lshr i64 %4725, 4
  %4727 = trunc i64 %4726 to i8
  %4728 = and i8 %4727, 1
  %4729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4728, i8* %4729, align 1, !tbaa !2447
  %4730 = icmp eq i64 %4711, 0
  %4731 = zext i1 %4730 to i8
  %4732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4731, i8* %4732, align 1, !tbaa !2448
  %4733 = lshr i64 %4711, 63
  %4734 = trunc i64 %4733 to i8
  %4735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4734, i8* %4735, align 1, !tbaa !2449
  %4736 = lshr i64 %4707, 63
  %4737 = lshr i64 %4708, 63
  %4738 = xor i64 %4733, %4736
  %4739 = xor i64 %4733, %4737
  %4740 = add nuw nsw i64 %4738, %4739
  %4741 = icmp eq i64 %4740, 2
  %4742 = zext i1 %4741 to i8
  %4743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4742, i8* %4743, align 1, !tbaa !2450
  %4744 = load i64, i64* %RBP
  %4745 = sub i64 %4744, 4
  %4746 = load i64, i64* %PC
  %4747 = add i64 %4746, 4
  store i64 %4747, i64* %PC
  %4748 = inttoptr i64 %4745 to i32*
  %4749 = load i32, i32* %4748
  %4750 = sext i32 %4749 to i64
  store i64 %4750, i64* %RCX, align 8, !tbaa !2428
  %4751 = load i64, i64* %RAX
  %4752 = load i64, i64* %RCX
  %4753 = mul i64 %4752, 4
  %4754 = add i64 %4753, %4751
  %4755 = load i64, i64* %PC
  %4756 = add i64 %4755, 3
  store i64 %4756, i64* %PC
  %4757 = inttoptr i64 %4754 to i32*
  %4758 = load i32, i32* %4757
  %4759 = zext i32 %4758 to i64
  store i64 %4759, i64* %RDX, align 8, !tbaa !2428
  %4760 = load i64, i64* %RBP
  %4761 = sub i64 %4760, 4
  %4762 = load i64, i64* %PC
  %4763 = add i64 %4762, 4
  store i64 %4763, i64* %PC
  %4764 = inttoptr i64 %4761 to i32*
  %4765 = load i32, i32* %4764
  %4766 = sext i32 %4765 to i64
  store i64 %4766, i64* %RAX, align 8, !tbaa !2428
  %4767 = load i64, i64* %RBP
  %4768 = load i64, i64* %RAX
  %4769 = mul i64 %4768, 4
  %4770 = add i64 %4767, -2688
  %4771 = add i64 %4770, %4769
  %4772 = load i32, i32* %EDX
  %4773 = zext i32 %4772 to i64
  %4774 = load i64, i64* %PC
  %4775 = add i64 %4774, 7
  store i64 %4775, i64* %PC
  %4776 = inttoptr i64 %4771 to i32*
  store i32 %4772, i32* %4776
  %4777 = load i64, i64* %RBP
  %4778 = sub i64 %4777, 4
  %4779 = load i64, i64* %PC
  %4780 = add i64 %4779, 3
  store i64 %4780, i64* %PC
  %4781 = inttoptr i64 %4778 to i32*
  %4782 = load i32, i32* %4781
  %4783 = zext i32 %4782 to i64
  store i64 %4783, i64* %RAX, align 8, !tbaa !2428
  %4784 = load i64, i64* %RAX
  %4785 = load i64, i64* %PC
  %4786 = add i64 %4785, 3
  store i64 %4786, i64* %PC
  %4787 = trunc i64 %4784 to i32
  %4788 = add i32 1, %4787
  %4789 = zext i32 %4788 to i64
  store i64 %4789, i64* %RAX, align 8, !tbaa !2428
  %4790 = icmp ult i32 %4788, %4787
  %4791 = icmp ult i32 %4788, 1
  %4792 = or i1 %4790, %4791
  %4793 = zext i1 %4792 to i8
  %4794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4793, i8* %4794, align 1, !tbaa !2432
  %4795 = and i32 %4788, 255
  %4796 = call i32 @llvm.ctpop.i32(i32 %4795) #16
  %4797 = trunc i32 %4796 to i8
  %4798 = and i8 %4797, 1
  %4799 = xor i8 %4798, 1
  %4800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4799, i8* %4800, align 1, !tbaa !2446
  %4801 = xor i64 1, %4784
  %4802 = trunc i64 %4801 to i32
  %4803 = xor i32 %4802, %4788
  %4804 = lshr i32 %4803, 4
  %4805 = trunc i32 %4804 to i8
  %4806 = and i8 %4805, 1
  %4807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4806, i8* %4807, align 1, !tbaa !2447
  %4808 = icmp eq i32 %4788, 0
  %4809 = zext i1 %4808 to i8
  %4810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4809, i8* %4810, align 1, !tbaa !2448
  %4811 = lshr i32 %4788, 31
  %4812 = trunc i32 %4811 to i8
  %4813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4812, i8* %4813, align 1, !tbaa !2449
  %4814 = lshr i32 %4787, 31
  %4815 = xor i32 %4811, %4814
  %4816 = add nuw nsw i32 %4815, %4811
  %4817 = icmp eq i32 %4816, 2
  %4818 = zext i1 %4817 to i8
  %4819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4818, i8* %4819, align 1, !tbaa !2450
  %4820 = load i64, i64* %RBP
  %4821 = sub i64 %4820, 4
  %4822 = load i32, i32* %EAX
  %4823 = zext i32 %4822 to i64
  %4824 = load i64, i64* %PC
  %4825 = add i64 %4824, 3
  store i64 %4825, i64* %PC
  %4826 = inttoptr i64 %4821 to i32*
  store i32 %4822, i32* %4826
  %4827 = load i64, i64* %PC
  %4828 = sub i64 %4827, 65
  %4829 = load i64, i64* %PC
  %4830 = add i64 %4829, 5
  store i64 %4830, i64* %PC
  %4831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4828, i64* %4831, align 8, !tbaa !2428
  br label %block_4010ad

block_4011f3:                                     ; preds = %block_401104
  %4832 = sub i64 %5605, 1492
  %4833 = load i64, i64* %PC
  %4834 = add i64 %4833, 6
  store i64 %4834, i64* %PC
  %4835 = inttoptr i64 %4832 to i32*
  %4836 = load i32, i32* %4835
  %4837 = zext i32 %4836 to i64
  store i64 %4837, i64* %RAX, align 8, !tbaa !2428
  %4838 = load i64, i64* %RBP
  %4839 = sub i64 %4838, 12
  %4840 = load i64, i64* %PC
  %4841 = add i64 %4840, 4
  store i64 %4841, i64* %PC
  %4842 = inttoptr i64 %4839 to i32*
  %4843 = load i32, i32* %4842
  %4844 = sext i32 %4843 to i64
  store i64 %4844, i64* %RCX, align 8, !tbaa !2428
  %4845 = load i32, i32* %EAX
  %4846 = zext i32 %4845 to i64
  %4847 = load i64, i64* %RBP
  %4848 = load i64, i64* %RCX
  %4849 = mul i64 %4848, 4
  %4850 = add i64 %4847, -1328
  %4851 = add i64 %4850, %4849
  %4852 = load i64, i64* %PC
  %4853 = add i64 %4852, 7
  store i64 %4853, i64* %PC
  %4854 = inttoptr i64 %4851 to i32*
  %4855 = load i32, i32* %4854
  %4856 = sub i32 %4845, %4855
  %4857 = icmp ult i32 %4845, %4855
  %4858 = zext i1 %4857 to i8
  %4859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4858, i8* %4859, align 1, !tbaa !2432
  %4860 = and i32 %4856, 255
  %4861 = call i32 @llvm.ctpop.i32(i32 %4860) #16
  %4862 = trunc i32 %4861 to i8
  %4863 = and i8 %4862, 1
  %4864 = xor i8 %4863, 1
  %4865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4864, i8* %4865, align 1, !tbaa !2446
  %4866 = xor i32 %4855, %4845
  %4867 = xor i32 %4866, %4856
  %4868 = lshr i32 %4867, 4
  %4869 = trunc i32 %4868 to i8
  %4870 = and i8 %4869, 1
  %4871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4870, i8* %4871, align 1, !tbaa !2447
  %4872 = icmp eq i32 %4856, 0
  %4873 = zext i1 %4872 to i8
  %4874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4873, i8* %4874, align 1, !tbaa !2448
  %4875 = lshr i32 %4856, 31
  %4876 = trunc i32 %4875 to i8
  %4877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4876, i8* %4877, align 1, !tbaa !2449
  %4878 = lshr i32 %4845, 31
  %4879 = lshr i32 %4855, 31
  %4880 = xor i32 %4879, %4878
  %4881 = xor i32 %4875, %4878
  %4882 = add nuw nsw i32 %4881, %4880
  %4883 = icmp eq i32 %4882, 2
  %4884 = zext i1 %4883 to i8
  %4885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4884, i8* %4885, align 1, !tbaa !2450
  %4886 = load i64, i64* %PC
  %4887 = add i64 %4886, 1279
  %4888 = load i64, i64* %PC
  %4889 = add i64 %4888, 6
  %4890 = load i64, i64* %PC
  %4891 = add i64 %4890, 6
  store i64 %4891, i64* %PC
  %4892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4893 = load i8, i8* %4892, align 1, !tbaa !2448
  %4894 = icmp eq i8 %4893, 0
  %4895 = zext i1 %4894 to i8
  store i8 %4895, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4897 = select i1 %4894, i64 %4887, i64 %4889
  store i64 %4897, i64* %4896, align 8, !tbaa !2428
  %4898 = load i8, i8* %BRANCH_TAKEN
  %4899 = icmp eq i8 %4898, 1
  %4900 = load i64, i64* %RBP
  %4901 = sub i64 %4900, 4
  %4902 = load i64, i64* %PC
  %4903 = add i64 %4902, 7
  store i64 %4903, i64* %PC
  br i1 %4899, label %block_401703, label %block_40120a

block_400cbb:                                     ; preds = %block_400c9a, %block_400c7a
  %MEMORY.23 = phi %struct.Memory* [ %MEMORY.28, %block_400c9a ], [ %MEMORY.28, %block_400c7a ]
  %4904 = load i64, i64* %RBP
  %4905 = sub i64 %4904, 4
  %4906 = load i64, i64* %PC
  %4907 = add i64 %4906, 7
  store i64 %4907, i64* %PC
  %4908 = inttoptr i64 %4905 to i32*
  store i32 0, i32* %4908
  br label %block_400cc2

block_4010ad:                                     ; preds = %block_4010a6, %block_4010c1
  %MEMORY.24 = phi %struct.Memory* [ %MEMORY.39, %block_4010a6 ], [ %MEMORY.24, %block_4010c1 ]
  %4909 = load i64, i64* %RBP
  %4910 = sub i64 %4909, 4
  %4911 = load i64, i64* %PC
  %4912 = add i64 %4911, 3
  store i64 %4912, i64* %PC
  %4913 = inttoptr i64 %4910 to i32*
  %4914 = load i32, i32* %4913
  %4915 = zext i32 %4914 to i64
  store i64 %4915, i64* %RAX, align 8, !tbaa !2428
  %4916 = load i64, i64* %RBP
  %4917 = sub i64 %4916, 12
  %4918 = load i64, i64* %PC
  %4919 = add i64 %4918, 4
  store i64 %4919, i64* %PC
  %4920 = inttoptr i64 %4917 to i32*
  %4921 = load i32, i32* %4920
  %4922 = sext i32 %4921 to i64
  store i64 %4922, i64* %RCX, align 8, !tbaa !2428
  %4923 = load i32, i32* %EAX
  %4924 = zext i32 %4923 to i64
  %4925 = load i64, i64* %RBP
  %4926 = load i64, i64* %RCX
  %4927 = mul i64 %4926, 4
  %4928 = add i64 %4925, -1328
  %4929 = add i64 %4928, %4927
  %4930 = load i64, i64* %PC
  %4931 = add i64 %4930, 7
  store i64 %4931, i64* %PC
  %4932 = inttoptr i64 %4929 to i32*
  %4933 = load i32, i32* %4932
  %4934 = sub i32 %4923, %4933
  %4935 = icmp ult i32 %4923, %4933
  %4936 = zext i1 %4935 to i8
  %4937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4936, i8* %4937, align 1, !tbaa !2432
  %4938 = and i32 %4934, 255
  %4939 = call i32 @llvm.ctpop.i32(i32 %4938) #16
  %4940 = trunc i32 %4939 to i8
  %4941 = and i8 %4940, 1
  %4942 = xor i8 %4941, 1
  %4943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4942, i8* %4943, align 1, !tbaa !2446
  %4944 = xor i32 %4933, %4923
  %4945 = xor i32 %4944, %4934
  %4946 = lshr i32 %4945, 4
  %4947 = trunc i32 %4946 to i8
  %4948 = and i8 %4947, 1
  %4949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4948, i8* %4949, align 1, !tbaa !2447
  %4950 = icmp eq i32 %4934, 0
  %4951 = zext i1 %4950 to i8
  %4952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4951, i8* %4952, align 1, !tbaa !2448
  %4953 = lshr i32 %4934, 31
  %4954 = trunc i32 %4953 to i8
  %4955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4954, i8* %4955, align 1, !tbaa !2449
  %4956 = lshr i32 %4923, 31
  %4957 = lshr i32 %4933, 31
  %4958 = xor i32 %4957, %4956
  %4959 = xor i32 %4953, %4956
  %4960 = add nuw nsw i32 %4959, %4958
  %4961 = icmp eq i32 %4960, 2
  %4962 = zext i1 %4961 to i8
  %4963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4962, i8* %4963, align 1, !tbaa !2450
  %4964 = load i64, i64* %PC
  %4965 = add i64 %4964, 56
  %4966 = load i64, i64* %PC
  %4967 = add i64 %4966, 6
  %4968 = load i64, i64* %PC
  %4969 = add i64 %4968, 6
  store i64 %4969, i64* %PC
  %4970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4971 = load i8, i8* %4970, align 1, !tbaa !2448
  %4972 = icmp eq i8 %4971, 0
  %4973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4974 = load i8, i8* %4973, align 1, !tbaa !2449
  %4975 = icmp ne i8 %4974, 0
  %4976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4977 = load i8, i8* %4976, align 1, !tbaa !2450
  %4978 = icmp ne i8 %4977, 0
  %4979 = xor i1 %4975, %4978
  %4980 = xor i1 %4979, true
  %4981 = and i1 %4972, %4980
  %4982 = zext i1 %4981 to i8
  store i8 %4982, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4984 = select i1 %4981, i64 %4965, i64 %4967
  store i64 %4984, i64* %4983, align 8, !tbaa !2428
  %4985 = load i8, i8* %BRANCH_TAKEN
  %4986 = icmp eq i8 %4985, 1
  %4987 = load i64, i64* %RBP
  br i1 %4986, label %block_4010f3, label %block_4010c1

block_400bc7:                                     ; preds = %block_400bab
  %4988 = load i64, i64* %RBP
  %4989 = sub i64 %4988, 16
  %4990 = load i64, i64* %PC
  %4991 = add i64 %4990, 4
  store i64 %4991, i64* %PC
  %4992 = inttoptr i64 %4989 to i32*
  %4993 = load i32, i32* %4992
  %4994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4994, align 1, !tbaa !2432
  %4995 = and i32 %4993, 255
  %4996 = call i32 @llvm.ctpop.i32(i32 %4995) #16
  %4997 = trunc i32 %4996 to i8
  %4998 = and i8 %4997, 1
  %4999 = xor i8 %4998, 1
  %5000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4999, i8* %5000, align 1, !tbaa !2446
  %5001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5001, align 1, !tbaa !2447
  %5002 = icmp eq i32 %4993, 0
  %5003 = zext i1 %5002 to i8
  %5004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5003, i8* %5004, align 1, !tbaa !2448
  %5005 = lshr i32 %4993, 31
  %5006 = trunc i32 %5005 to i8
  %5007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5006, i8* %5007, align 1, !tbaa !2449
  %5008 = lshr i32 %4993, 31
  %5009 = xor i32 %5005, %5008
  %5010 = add nuw nsw i32 %5009, %5008
  %5011 = icmp eq i32 %5010, 2
  %5012 = zext i1 %5011 to i8
  %5013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5012, i8* %5013, align 1, !tbaa !2450
  %5014 = load i64, i64* %PC
  %5015 = add i64 %5014, 3
  store i64 %5015, i64* %PC
  %5016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5017 = load i8, i8* %5016, align 1, !tbaa !2448
  %5018 = icmp eq i8 %5017, 0
  %5019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5020 = load i8, i8* %5019, align 1, !tbaa !2449
  %5021 = icmp ne i8 %5020, 0
  %5022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5023 = load i8, i8* %5022, align 1, !tbaa !2450
  %5024 = icmp ne i8 %5023, 0
  %5025 = xor i1 %5021, %5024
  %5026 = xor i1 %5025, true
  %5027 = and i1 %5018, %5026
  %5028 = zext i1 %5027 to i8
  store i8 %5028, i8* %AL, align 1, !tbaa !2451
  %5029 = load i64, i64* %RBP
  %5030 = sub i64 %5029, 2693
  %5031 = load i8, i8* %AL
  %5032 = zext i8 %5031 to i64
  %5033 = load i64, i64* %PC
  %5034 = add i64 %5033, 6
  store i64 %5034, i64* %PC
  %5035 = inttoptr i64 %5030 to i8*
  store i8 %5031, i8* %5035
  br label %block_400bd4

block_4014a8:                                     ; preds = %block_401464
  %5036 = add i64 %6877, 11
  store i64 %5036, i64* %PC
  %5037 = inttoptr i64 %6876 to i32*
  store i32 0, i32* %5037
  br label %block_4014b7

block_400e9e:                                     ; preds = %block_400e87
  %5038 = sub i64 %5515, 1488
  %5039 = load i64, i64* %PC
  %5040 = add i64 %5039, 8
  store i64 %5040, i64* %PC
  %5041 = inttoptr i64 %5038 to i32*
  %5042 = load i32, i32* %5041
  %5043 = sext i32 %5042 to i64
  store i64 %5043, i64* %RCX, align 8, !tbaa !2428
  %5044 = load i64, i64* %RCX
  %5045 = mul i64 %5044, 4
  %5046 = add i64 %5045, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %5047 = load i64, i64* %PC
  %5048 = add i64 %5047, 7
  store i64 %5048, i64* %PC
  %5049 = inttoptr i64 %5046 to i32*
  %5050 = load i32, i32* %5049
  %5051 = zext i32 %5050 to i64
  store i64 %5051, i64* %RAX, align 8, !tbaa !2428
  %5052 = load i64, i64* %RBP
  %5053 = sub i64 %5052, 12
  %5054 = load i64, i64* %PC
  %5055 = add i64 %5054, 3
  store i64 %5055, i64* %PC
  %5056 = inttoptr i64 %5053 to i32*
  %5057 = load i32, i32* %5056
  %5058 = zext i32 %5057 to i64
  store i64 %5058, i64* %RDX, align 8, !tbaa !2428
  %5059 = load i64, i64* %RDX
  %5060 = load i64, i64* %PC
  %5061 = add i64 %5060, 3
  store i64 %5061, i64* %PC
  %5062 = trunc i64 %5059 to i32
  %5063 = add i32 1, %5062
  %5064 = zext i32 %5063 to i64
  store i64 %5064, i64* %RDX, align 8, !tbaa !2428
  %5065 = icmp ult i32 %5063, %5062
  %5066 = icmp ult i32 %5063, 1
  %5067 = or i1 %5065, %5066
  %5068 = zext i1 %5067 to i8
  %5069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5068, i8* %5069, align 1, !tbaa !2432
  %5070 = and i32 %5063, 255
  %5071 = call i32 @llvm.ctpop.i32(i32 %5070) #16
  %5072 = trunc i32 %5071 to i8
  %5073 = and i8 %5072, 1
  %5074 = xor i8 %5073, 1
  %5075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5074, i8* %5075, align 1, !tbaa !2446
  %5076 = xor i64 1, %5059
  %5077 = trunc i64 %5076 to i32
  %5078 = xor i32 %5077, %5063
  %5079 = lshr i32 %5078, 4
  %5080 = trunc i32 %5079 to i8
  %5081 = and i8 %5080, 1
  %5082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5081, i8* %5082, align 1, !tbaa !2447
  %5083 = icmp eq i32 %5063, 0
  %5084 = zext i1 %5083 to i8
  %5085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5084, i8* %5085, align 1, !tbaa !2448
  %5086 = lshr i32 %5063, 31
  %5087 = trunc i32 %5086 to i8
  %5088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5087, i8* %5088, align 1, !tbaa !2449
  %5089 = lshr i32 %5062, 31
  %5090 = xor i32 %5086, %5089
  %5091 = add nuw nsw i32 %5090, %5086
  %5092 = icmp eq i32 %5091, 2
  %5093 = zext i1 %5092 to i8
  %5094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5093, i8* %5094, align 1, !tbaa !2450
  %5095 = load i32, i32* %EDX
  %5096 = zext i32 %5095 to i64
  %5097 = load i64, i64* %PC
  %5098 = add i64 %5097, 3
  store i64 %5098, i64* %PC
  %5099 = shl i64 %5096, 32
  %5100 = ashr exact i64 %5099, 32
  store i64 %5100, i64* %RCX, align 8, !tbaa !2428
  %5101 = load i64, i64* %RBP
  %5102 = load i64, i64* %RCX
  %5103 = mul i64 %5102, 4
  %5104 = add i64 %5101, -1248
  %5105 = add i64 %5104, %5103
  %5106 = load i32, i32* %EAX
  %5107 = zext i32 %5106 to i64
  %5108 = load i64, i64* %PC
  %5109 = add i64 %5108, 7
  store i64 %5109, i64* %PC
  %5110 = inttoptr i64 %5105 to i32*
  store i32 %5106, i32* %5110
  %5111 = load i64, i64* %PC
  %5112 = add i64 %5111, 25
  %5113 = load i64, i64* %PC
  %5114 = add i64 %5113, 5
  store i64 %5114, i64* %PC
  %5115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5112, i64* %5115, align 8, !tbaa !2428
  br label %block_400edf

block_4010a6:                                     ; preds = %block_40104e
  %5116 = sub i64 %9175, 4
  %5117 = load i64, i64* %PC
  %5118 = add i64 %5117, 7
  store i64 %5118, i64* %PC
  %5119 = inttoptr i64 %5116 to i32*
  store i32 1, i32* %5119
  br label %block_4010ad

block_40129b:                                     ; preds = %block_401225, %block_401237
  %MEMORY.25 = phi %struct.Memory* [ %MEMORY.47, %block_401225 ], [ %MEMORY.47, %block_401237 ]
  %5120 = load i64, i64* %RBP
  %5121 = sub i64 %5120, 4
  %5122 = load i64, i64* %PC
  %5123 = add i64 %5122, 4
  store i64 %5123, i64* %PC
  %5124 = inttoptr i64 %5121 to i32*
  %5125 = load i32, i32* %5124
  %5126 = sext i32 %5125 to i64
  store i64 %5126, i64* %RAX, align 8, !tbaa !2428
  %5127 = load i64, i64* %RBP
  %5128 = load i64, i64* %RAX
  %5129 = mul i64 %5128, 4
  %5130 = add i64 %5127, -1488
  %5131 = add i64 %5130, %5129
  %5132 = load i64, i64* %PC
  %5133 = add i64 %5132, 8
  store i64 %5133, i64* %PC
  %5134 = inttoptr i64 %5131 to i32*
  %5135 = load i32, i32* %5134
  %5136 = sub i32 %5135, -1
  %5137 = icmp ult i32 %5135, -1
  %5138 = zext i1 %5137 to i8
  %5139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5138, i8* %5139, align 1, !tbaa !2432
  %5140 = and i32 %5136, 255
  %5141 = call i32 @llvm.ctpop.i32(i32 %5140) #16
  %5142 = trunc i32 %5141 to i8
  %5143 = and i8 %5142, 1
  %5144 = xor i8 %5143, 1
  %5145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5144, i8* %5145, align 1, !tbaa !2446
  %5146 = xor i32 %5135, -1
  %5147 = xor i32 %5146, %5136
  %5148 = lshr i32 %5147, 4
  %5149 = trunc i32 %5148 to i8
  %5150 = and i8 %5149, 1
  %5151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5150, i8* %5151, align 1, !tbaa !2447
  %5152 = icmp eq i32 %5136, 0
  %5153 = zext i1 %5152 to i8
  %5154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5153, i8* %5154, align 1, !tbaa !2448
  %5155 = lshr i32 %5136, 31
  %5156 = trunc i32 %5155 to i8
  %5157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5156, i8* %5157, align 1, !tbaa !2449
  %5158 = lshr i32 %5135, 31
  %5159 = xor i32 %5158, 1
  %5160 = xor i32 %5155, %5158
  %5161 = add nuw nsw i32 %5160, %5159
  %5162 = icmp eq i32 %5161, 2
  %5163 = zext i1 %5162 to i8
  %5164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5163, i8* %5164, align 1, !tbaa !2450
  %5165 = load i64, i64* %PC
  %5166 = add i64 %5165, 73
  %5167 = load i64, i64* %PC
  %5168 = add i64 %5167, 6
  %5169 = load i64, i64* %PC
  %5170 = add i64 %5169, 6
  store i64 %5170, i64* %PC
  %5171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5172 = load i8, i8* %5171, align 1, !tbaa !2448
  store i8 %5172, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5174 = icmp ne i8 %5172, 0
  %5175 = select i1 %5174, i64 %5166, i64 %5168
  store i64 %5175, i64* %5173, align 8, !tbaa !2428
  %5176 = load i8, i8* %BRANCH_TAKEN
  %5177 = icmp eq i8 %5176, 1
  br i1 %5177, label %block_4012f0, label %block_4012ad

block_401592:                                     ; preds = %block_401503
  %5178 = sub i64 %8655, 4
  %5179 = load i64, i64* %PC
  %5180 = add i64 %5179, 4
  store i64 %5180, i64* %PC
  %5181 = inttoptr i64 %5178 to i32*
  %5182 = load i32, i32* %5181
  %5183 = sext i32 %5182 to i64
  store i64 %5183, i64* %RAX, align 8, !tbaa !2428
  %5184 = load i64, i64* %RBP
  %5185 = load i64, i64* %RAX
  %5186 = mul i64 %5185, 4
  %5187 = add i64 %5184, -1568
  %5188 = add i64 %5187, %5186
  %5189 = load i64, i64* %PC
  %5190 = add i64 %5189, 8
  store i64 %5190, i64* %PC
  %5191 = inttoptr i64 %5188 to i32*
  %5192 = load i32, i32* %5191
  %5193 = sext i32 %5192 to i64
  store i64 %5193, i64* %RAX, align 8, !tbaa !2428
  %5194 = load i64, i64* %RBP
  %5195 = load i64, i64* %RAX
  %5196 = mul i64 %5195, 4
  %5197 = add i64 %5194, -2640
  %5198 = add i64 %5197, %5196
  %5199 = load i64, i64* %PC
  %5200 = add i64 %5199, 8
  store i64 %5200, i64* %PC
  %5201 = inttoptr i64 %5198 to i32*
  %5202 = load i32, i32* %5201
  %5203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5203, align 1, !tbaa !2432
  %5204 = and i32 %5202, 255
  %5205 = call i32 @llvm.ctpop.i32(i32 %5204) #16
  %5206 = trunc i32 %5205 to i8
  %5207 = and i8 %5206, 1
  %5208 = xor i8 %5207, 1
  %5209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5208, i8* %5209, align 1, !tbaa !2446
  %5210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5210, align 1, !tbaa !2447
  %5211 = icmp eq i32 %5202, 0
  %5212 = zext i1 %5211 to i8
  %5213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5212, i8* %5213, align 1, !tbaa !2448
  %5214 = lshr i32 %5202, 31
  %5215 = trunc i32 %5214 to i8
  %5216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5215, i8* %5216, align 1, !tbaa !2449
  %5217 = lshr i32 %5202, 31
  %5218 = xor i32 %5214, %5217
  %5219 = add nuw nsw i32 %5218, %5217
  %5220 = icmp eq i32 %5219, 2
  %5221 = zext i1 %5220 to i8
  %5222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5221, i8* %5222, align 1, !tbaa !2450
  %5223 = load i64, i64* %PC
  %5224 = add i64 %5223, 325
  %5225 = load i64, i64* %PC
  %5226 = add i64 %5225, 6
  %5227 = load i64, i64* %PC
  %5228 = add i64 %5227, 6
  store i64 %5228, i64* %PC
  %5229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5230 = load i8, i8* %5229, align 1, !tbaa !2448
  store i8 %5230, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5232 = icmp ne i8 %5230, 0
  %5233 = select i1 %5232, i64 %5224, i64 %5226
  store i64 %5233, i64* %5231, align 8, !tbaa !2428
  %5234 = load i8, i8* %BRANCH_TAKEN
  %5235 = icmp eq i8 %5234, 1
  br i1 %5235, label %block_4016eb, label %block_4015ac

block_400d17:                                     ; preds = %block_400d03
  %5236 = sub i64 %4619, 1168
  %5237 = load i64, i64* %PC
  %5238 = add i64 %5237, 7
  store i64 %5238, i64* %PC
  store i64 %5236, i64* %RAX, align 8, !tbaa !2428
  %5239 = load i64, i64* %RBP
  %5240 = sub i64 %5239, 16
  %5241 = load i64, i64* %PC
  %5242 = add i64 %5241, 4
  store i64 %5242, i64* %PC
  %5243 = inttoptr i64 %5240 to i32*
  %5244 = load i32, i32* %5243
  %5245 = sext i32 %5244 to i64
  store i64 %5245, i64* %RCX, align 8, !tbaa !2428
  %5246 = load i64, i64* %RCX
  %5247 = load i64, i64* %PC
  %5248 = add i64 %5247, 4
  store i64 %5248, i64* %PC
  %5249 = shl i64 %5246, 5
  %5250 = icmp slt i64 %5249, 0
  %5251 = shl i64 %5249, 1
  store i64 %5251, i64* %RCX, align 8, !tbaa !2428
  %5252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5253 = zext i1 %5250 to i8
  store i8 %5253, i8* %5252, align 1, !tbaa !2451
  %5254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5255 = trunc i64 %5251 to i32
  %5256 = and i32 %5255, 254
  %5257 = call i32 @llvm.ctpop.i32(i32 %5256) #16
  %5258 = trunc i32 %5257 to i8
  %5259 = and i8 %5258, 1
  %5260 = xor i8 %5259, 1
  store i8 %5260, i8* %5254, align 1, !tbaa !2451
  %5261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5261, align 1, !tbaa !2451
  %5262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5263 = icmp eq i64 %5251, 0
  %5264 = zext i1 %5263 to i8
  store i8 %5264, i8* %5262, align 1, !tbaa !2451
  %5265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5266 = lshr i64 %5251, 63
  %5267 = trunc i64 %5266 to i8
  store i8 %5267, i8* %5265, align 1, !tbaa !2451
  %5268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5268, align 1, !tbaa !2451
  %5269 = load i64, i64* %RAX
  %5270 = load i64, i64* %RCX
  %5271 = load i64, i64* %PC
  %5272 = add i64 %5271, 3
  store i64 %5272, i64* %PC
  %5273 = add i64 %5270, %5269
  store i64 %5273, i64* %RAX, align 8, !tbaa !2428
  %5274 = icmp ult i64 %5273, %5269
  %5275 = icmp ult i64 %5273, %5270
  %5276 = or i1 %5274, %5275
  %5277 = zext i1 %5276 to i8
  %5278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5277, i8* %5278, align 1, !tbaa !2432
  %5279 = trunc i64 %5273 to i32
  %5280 = and i32 %5279, 255
  %5281 = call i32 @llvm.ctpop.i32(i32 %5280) #16
  %5282 = trunc i32 %5281 to i8
  %5283 = and i8 %5282, 1
  %5284 = xor i8 %5283, 1
  %5285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5284, i8* %5285, align 1, !tbaa !2446
  %5286 = xor i64 %5270, %5269
  %5287 = xor i64 %5286, %5273
  %5288 = lshr i64 %5287, 4
  %5289 = trunc i64 %5288 to i8
  %5290 = and i8 %5289, 1
  %5291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5290, i8* %5291, align 1, !tbaa !2447
  %5292 = icmp eq i64 %5273, 0
  %5293 = zext i1 %5292 to i8
  %5294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5293, i8* %5294, align 1, !tbaa !2448
  %5295 = lshr i64 %5273, 63
  %5296 = trunc i64 %5295 to i8
  %5297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5296, i8* %5297, align 1, !tbaa !2449
  %5298 = lshr i64 %5269, 63
  %5299 = lshr i64 %5270, 63
  %5300 = xor i64 %5295, %5298
  %5301 = xor i64 %5295, %5299
  %5302 = add nuw nsw i64 %5300, %5301
  %5303 = icmp eq i64 %5302, 2
  %5304 = zext i1 %5303 to i8
  %5305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5304, i8* %5305, align 1, !tbaa !2450
  %5306 = load i64, i64* %RBP
  %5307 = sub i64 %5306, 4
  %5308 = load i64, i64* %PC
  %5309 = add i64 %5308, 4
  store i64 %5309, i64* %PC
  %5310 = inttoptr i64 %5307 to i32*
  %5311 = load i32, i32* %5310
  %5312 = sext i32 %5311 to i64
  store i64 %5312, i64* %RCX, align 8, !tbaa !2428
  %5313 = load i64, i64* %RAX
  %5314 = load i64, i64* %RCX
  %5315 = mul i64 %5314, 4
  %5316 = add i64 %5315, %5313
  %5317 = load i64, i64* %PC
  %5318 = add i64 %5317, 4
  store i64 %5318, i64* %PC
  %5319 = inttoptr i64 %5316 to i32*
  %5320 = load i32, i32* %5319
  %5321 = sub i32 %5320, -1
  %5322 = icmp ult i32 %5320, -1
  %5323 = zext i1 %5322 to i8
  %5324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5323, i8* %5324, align 1, !tbaa !2432
  %5325 = and i32 %5321, 255
  %5326 = call i32 @llvm.ctpop.i32(i32 %5325) #16
  %5327 = trunc i32 %5326 to i8
  %5328 = and i8 %5327, 1
  %5329 = xor i8 %5328, 1
  %5330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5329, i8* %5330, align 1, !tbaa !2446
  %5331 = xor i32 %5320, -1
  %5332 = xor i32 %5331, %5321
  %5333 = lshr i32 %5332, 4
  %5334 = trunc i32 %5333 to i8
  %5335 = and i8 %5334, 1
  %5336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5335, i8* %5336, align 1, !tbaa !2447
  %5337 = icmp eq i32 %5321, 0
  %5338 = zext i1 %5337 to i8
  %5339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5338, i8* %5339, align 1, !tbaa !2448
  %5340 = lshr i32 %5321, 31
  %5341 = trunc i32 %5340 to i8
  %5342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5341, i8* %5342, align 1, !tbaa !2449
  %5343 = lshr i32 %5320, 31
  %5344 = xor i32 %5343, 1
  %5345 = xor i32 %5340, %5343
  %5346 = add nuw nsw i32 %5345, %5344
  %5347 = icmp eq i32 %5346, 2
  %5348 = zext i1 %5347 to i8
  %5349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5348, i8* %5349, align 1, !tbaa !2450
  %5350 = load i64, i64* %PC
  %5351 = add i64 %5350, 128
  %5352 = load i64, i64* %PC
  %5353 = add i64 %5352, 6
  %5354 = load i64, i64* %PC
  %5355 = add i64 %5354, 6
  store i64 %5355, i64* %PC
  %5356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5357 = load i8, i8* %5356, align 1, !tbaa !2448
  store i8 %5357, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5359 = icmp ne i8 %5357, 0
  %5360 = select i1 %5359, i64 %5351, i64 %5353
  store i64 %5360, i64* %5358, align 8, !tbaa !2428
  %5361 = load i8, i8* %BRANCH_TAKEN
  %5362 = icmp eq i8 %5361, 1
  br i1 %5362, label %block_400db1, label %block_400d37

block_400e87:                                     ; preds = %block_400e5a
  %5363 = load i64, i64* %RBP
  %5364 = sub i64 %5363, 12
  %5365 = load i64, i64* %PC
  %5366 = add i64 %5365, 3
  store i64 %5366, i64* %PC
  %5367 = inttoptr i64 %5364 to i32*
  %5368 = load i32, i32* %5367
  %5369 = zext i32 %5368 to i64
  store i64 %5369, i64* %RAX, align 8, !tbaa !2428
  %5370 = load i64, i64* %RAX
  %5371 = load i64, i64* %PC
  %5372 = add i64 %5371, 3
  store i64 %5372, i64* %PC
  %5373 = trunc i64 %5370 to i32
  %5374 = add i32 1, %5373
  %5375 = zext i32 %5374 to i64
  store i64 %5375, i64* %RAX, align 8, !tbaa !2428
  %5376 = icmp ult i32 %5374, %5373
  %5377 = icmp ult i32 %5374, 1
  %5378 = or i1 %5376, %5377
  %5379 = zext i1 %5378 to i8
  %5380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5379, i8* %5380, align 1, !tbaa !2432
  %5381 = and i32 %5374, 255
  %5382 = call i32 @llvm.ctpop.i32(i32 %5381) #16
  %5383 = trunc i32 %5382 to i8
  %5384 = and i8 %5383, 1
  %5385 = xor i8 %5384, 1
  %5386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5385, i8* %5386, align 1, !tbaa !2446
  %5387 = xor i64 1, %5370
  %5388 = trunc i64 %5387 to i32
  %5389 = xor i32 %5388, %5374
  %5390 = lshr i32 %5389, 4
  %5391 = trunc i32 %5390 to i8
  %5392 = and i8 %5391, 1
  %5393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5392, i8* %5393, align 1, !tbaa !2447
  %5394 = icmp eq i32 %5374, 0
  %5395 = zext i1 %5394 to i8
  %5396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5395, i8* %5396, align 1, !tbaa !2448
  %5397 = lshr i32 %5374, 31
  %5398 = trunc i32 %5397 to i8
  %5399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5398, i8* %5399, align 1, !tbaa !2449
  %5400 = lshr i32 %5373, 31
  %5401 = xor i32 %5397, %5400
  %5402 = add nuw nsw i32 %5401, %5397
  %5403 = icmp eq i32 %5402, 2
  %5404 = zext i1 %5403 to i8
  %5405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5404, i8* %5405, align 1, !tbaa !2450
  %5406 = load i32, i32* %EAX
  %5407 = zext i32 %5406 to i64
  %5408 = load i64, i64* %PC
  %5409 = add i64 %5408, 3
  store i64 %5409, i64* %PC
  %5410 = shl i64 %5407, 32
  %5411 = ashr exact i64 %5410, 32
  store i64 %5411, i64* %RCX, align 8, !tbaa !2428
  %5412 = load i64, i64* %RBP
  %5413 = load i64, i64* %RCX
  %5414 = mul i64 %5413, 4
  %5415 = add i64 %5412, -1488
  %5416 = add i64 %5415, %5414
  %5417 = load i64, i64* %PC
  %5418 = add i64 %5417, 8
  store i64 %5418, i64* %PC
  %5419 = inttoptr i64 %5416 to i32*
  %5420 = load i32, i32* %5419
  %5421 = sub i32 %5420, -1
  %5422 = icmp ult i32 %5420, -1
  %5423 = zext i1 %5422 to i8
  %5424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5423, i8* %5424, align 1, !tbaa !2432
  %5425 = and i32 %5421, 255
  %5426 = call i32 @llvm.ctpop.i32(i32 %5425) #16
  %5427 = trunc i32 %5426 to i8
  %5428 = and i8 %5427, 1
  %5429 = xor i8 %5428, 1
  %5430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5429, i8* %5430, align 1, !tbaa !2446
  %5431 = xor i32 %5420, -1
  %5432 = xor i32 %5431, %5421
  %5433 = lshr i32 %5432, 4
  %5434 = trunc i32 %5433 to i8
  %5435 = and i8 %5434, 1
  %5436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5435, i8* %5436, align 1, !tbaa !2447
  %5437 = icmp eq i32 %5421, 0
  %5438 = zext i1 %5437 to i8
  %5439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5438, i8* %5439, align 1, !tbaa !2448
  %5440 = lshr i32 %5421, 31
  %5441 = trunc i32 %5440 to i8
  %5442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5441, i8* %5442, align 1, !tbaa !2449
  %5443 = lshr i32 %5420, 31
  %5444 = xor i32 %5443, 1
  %5445 = xor i32 %5440, %5443
  %5446 = add nuw nsw i32 %5445, %5444
  %5447 = icmp eq i32 %5446, 2
  %5448 = zext i1 %5447 to i8
  %5449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5448, i8* %5449, align 1, !tbaa !2450
  %5450 = load i64, i64* %PC
  %5451 = add i64 %5450, 51
  %5452 = load i64, i64* %PC
  %5453 = add i64 %5452, 6
  %5454 = load i64, i64* %PC
  %5455 = add i64 %5454, 6
  store i64 %5455, i64* %PC
  %5456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5457 = load i8, i8* %5456, align 1, !tbaa !2448
  store i8 %5457, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5459 = icmp ne i8 %5457, 0
  %5460 = select i1 %5459, i64 %5451, i64 %5453
  store i64 %5460, i64* %5458, align 8, !tbaa !2428
  %5461 = load i8, i8* %BRANCH_TAKEN
  %5462 = icmp eq i8 %5461, 1
  %5463 = load i64, i64* %RBP
  %5464 = sub i64 %5463, 12
  %5465 = load i64, i64* %PC
  %5466 = add i64 %5465, 3
  store i64 %5466, i64* %PC
  %5467 = inttoptr i64 %5464 to i32*
  %5468 = load i32, i32* %5467
  %5469 = zext i32 %5468 to i64
  store i64 %5469, i64* %RAX, align 8, !tbaa !2428
  %5470 = load i64, i64* %RAX
  %5471 = load i64, i64* %PC
  %5472 = add i64 %5471, 3
  store i64 %5472, i64* %PC
  %5473 = trunc i64 %5470 to i32
  %5474 = add i32 1, %5473
  %5475 = zext i32 %5474 to i64
  store i64 %5475, i64* %RAX, align 8, !tbaa !2428
  %5476 = icmp ult i32 %5474, %5473
  %5477 = icmp ult i32 %5474, 1
  %5478 = or i1 %5476, %5477
  %5479 = zext i1 %5478 to i8
  %5480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5479, i8* %5480, align 1, !tbaa !2432
  %5481 = and i32 %5474, 255
  %5482 = call i32 @llvm.ctpop.i32(i32 %5481) #16
  %5483 = trunc i32 %5482 to i8
  %5484 = and i8 %5483, 1
  %5485 = xor i8 %5484, 1
  %5486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5485, i8* %5486, align 1, !tbaa !2446
  %5487 = xor i64 1, %5470
  %5488 = trunc i64 %5487 to i32
  %5489 = xor i32 %5488, %5474
  %5490 = lshr i32 %5489, 4
  %5491 = trunc i32 %5490 to i8
  %5492 = and i8 %5491, 1
  %5493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5492, i8* %5493, align 1, !tbaa !2447
  %5494 = icmp eq i32 %5474, 0
  %5495 = zext i1 %5494 to i8
  %5496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5495, i8* %5496, align 1, !tbaa !2448
  %5497 = lshr i32 %5474, 31
  %5498 = trunc i32 %5497 to i8
  %5499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5498, i8* %5499, align 1, !tbaa !2449
  %5500 = lshr i32 %5473, 31
  %5501 = xor i32 %5497, %5500
  %5502 = add nuw nsw i32 %5501, %5497
  %5503 = icmp eq i32 %5502, 2
  %5504 = zext i1 %5503 to i8
  %5505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5504, i8* %5505, align 1, !tbaa !2450
  %5506 = load i32, i32* %EAX
  %5507 = zext i32 %5506 to i64
  %5508 = load i64, i64* %PC
  %5509 = add i64 %5508, 3
  store i64 %5509, i64* %PC
  %5510 = shl i64 %5507, 32
  %5511 = ashr exact i64 %5510, 32
  store i64 %5511, i64* %RCX, align 8, !tbaa !2428
  %5512 = load i64, i64* %RBP
  %5513 = load i64, i64* %RCX
  %5514 = mul i64 %5513, 4
  %5515 = add i64 %5514, %5512
  br i1 %5462, label %block_400ecb, label %block_400e9e

block_401485:                                     ; preds = %block_401464
  %5516 = add i64 %6877, 8
  store i64 %5516, i64* %PC
  %5517 = inttoptr i64 %6876 to i32*
  %5518 = load i32, i32* %5517
  %5519 = sext i32 %5518 to i64
  store i64 %5519, i64* %RAX, align 8, !tbaa !2428
  %5520 = load i64, i64* %RAX
  %5521 = mul i64 %5520, 4
  %5522 = add i64 %5521, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %5523 = load i64, i64* %PC
  %5524 = add i64 %5523, 7
  store i64 %5524, i64* %PC
  %5525 = inttoptr i64 %5522 to i32*
  %5526 = load i32, i32* %5525
  %5527 = zext i32 %5526 to i64
  store i64 %5527, i64* %RCX, align 8, !tbaa !2428
  %5528 = load i64, i64* %RBP
  %5529 = sub i64 %5528, 4
  %5530 = load i64, i64* %PC
  %5531 = add i64 %5530, 4
  store i64 %5531, i64* %PC
  %5532 = inttoptr i64 %5529 to i32*
  %5533 = load i32, i32* %5532
  %5534 = sext i32 %5533 to i64
  store i64 %5534, i64* %RAX, align 8, !tbaa !2428
  %5535 = load i64, i64* %RAX
  %5536 = mul i64 %5535, 4
  %5537 = add i64 %5536, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %5538 = load i32, i32* %ECX
  %5539 = zext i32 %5538 to i64
  %5540 = load i64, i64* %PC
  %5541 = add i64 %5540, 7
  store i64 %5541, i64* %PC
  %5542 = inttoptr i64 %5537 to i32*
  store i32 %5538, i32* %5542
  %5543 = load i64, i64* %PC
  %5544 = add i64 %5543, 20
  %5545 = load i64, i64* %PC
  %5546 = add i64 %5545, 5
  store i64 %5546, i64* %PC
  %5547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5544, i64* %5547, align 8, !tbaa !2428
  br label %block_4014b7

block_401104:                                     ; preds = %block_4011e0, %block_4010f3
  %MEMORY.26 = phi %struct.Memory* [ %MEMORY.24, %block_4010f3 ], [ %MEMORY.32, %block_4011e0 ]
  %5548 = load i64, i64* %RBP
  %5549 = sub i64 %5548, 4
  %5550 = load i64, i64* %PC
  %5551 = add i64 %5550, 7
  store i64 %5551, i64* %PC
  %5552 = inttoptr i64 %5549 to i32*
  %5553 = load i32, i32* %5552
  %5554 = sub i32 %5553, 255
  %5555 = icmp ult i32 %5553, 255
  %5556 = zext i1 %5555 to i8
  %5557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5556, i8* %5557, align 1, !tbaa !2432
  %5558 = and i32 %5554, 255
  %5559 = call i32 @llvm.ctpop.i32(i32 %5558) #16
  %5560 = trunc i32 %5559 to i8
  %5561 = and i8 %5560, 1
  %5562 = xor i8 %5561, 1
  %5563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5562, i8* %5563, align 1, !tbaa !2446
  %5564 = xor i32 %5553, 255
  %5565 = xor i32 %5564, %5554
  %5566 = lshr i32 %5565, 4
  %5567 = trunc i32 %5566 to i8
  %5568 = and i8 %5567, 1
  %5569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5568, i8* %5569, align 1, !tbaa !2447
  %5570 = icmp eq i32 %5554, 0
  %5571 = zext i1 %5570 to i8
  %5572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5571, i8* %5572, align 1, !tbaa !2448
  %5573 = lshr i32 %5554, 31
  %5574 = trunc i32 %5573 to i8
  %5575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5574, i8* %5575, align 1, !tbaa !2449
  %5576 = lshr i32 %5553, 31
  %5577 = xor i32 %5573, %5576
  %5578 = add nuw nsw i32 %5577, %5576
  %5579 = icmp eq i32 %5578, 2
  %5580 = zext i1 %5579 to i8
  %5581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5580, i8* %5581, align 1, !tbaa !2450
  %5582 = load i64, i64* %PC
  %5583 = add i64 %5582, 232
  %5584 = load i64, i64* %PC
  %5585 = add i64 %5584, 6
  %5586 = load i64, i64* %PC
  %5587 = add i64 %5586, 6
  store i64 %5587, i64* %PC
  %5588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5589 = load i8, i8* %5588, align 1, !tbaa !2448
  %5590 = icmp eq i8 %5589, 0
  %5591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5592 = load i8, i8* %5591, align 1, !tbaa !2449
  %5593 = icmp ne i8 %5592, 0
  %5594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5595 = load i8, i8* %5594, align 1, !tbaa !2450
  %5596 = icmp ne i8 %5595, 0
  %5597 = xor i1 %5593, %5596
  %5598 = xor i1 %5597, true
  %5599 = and i1 %5590, %5598
  %5600 = zext i1 %5599 to i8
  store i8 %5600, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5602 = select i1 %5599, i64 %5583, i64 %5585
  store i64 %5602, i64* %5601, align 8, !tbaa !2428
  %5603 = load i8, i8* %BRANCH_TAKEN
  %5604 = icmp eq i8 %5603, 1
  %5605 = load i64, i64* %RBP
  br i1 %5604, label %block_4011f3, label %block_401111

block_400a7e:                                     ; preds = %block_400a74
  %5606 = sub i64 %6071, 4
  %5607 = load i64, i64* %PC
  %5608 = add i64 %5607, 4
  store i64 %5608, i64* %PC
  %5609 = inttoptr i64 %5606 to i32*
  %5610 = load i32, i32* %5609
  %5611 = sext i32 %5610 to i64
  store i64 %5611, i64* %RAX, align 8, !tbaa !2428
  %5612 = load i64, i64* %RBP
  %5613 = load i64, i64* %RAX
  %5614 = mul i64 %5613, 4
  %5615 = add i64 %5612, -1168
  %5616 = add i64 %5615, %5614
  %5617 = load i64, i64* %PC
  %5618 = add i64 %5617, 11
  store i64 %5618, i64* %PC
  %5619 = inttoptr i64 %5616 to i32*
  store i32 -1, i32* %5619
  %5620 = load i64, i64* %RBP
  %5621 = sub i64 %5620, 4
  %5622 = load i64, i64* %PC
  %5623 = add i64 %5622, 4
  store i64 %5623, i64* %PC
  %5624 = inttoptr i64 %5621 to i32*
  %5625 = load i32, i32* %5624
  %5626 = sext i32 %5625 to i64
  store i64 %5626, i64* %RAX, align 8, !tbaa !2428
  %5627 = load i64, i64* %RBP
  %5628 = load i64, i64* %RAX
  %5629 = mul i64 %5628, 4
  %5630 = add i64 %5627, -1104
  %5631 = add i64 %5630, %5629
  %5632 = load i64, i64* %PC
  %5633 = add i64 %5632, 11
  store i64 %5633, i64* %PC
  %5634 = inttoptr i64 %5631 to i32*
  store i32 0, i32* %5634
  %5635 = load i64, i64* %RBP
  %5636 = sub i64 %5635, 4
  %5637 = load i64, i64* %PC
  %5638 = add i64 %5637, 3
  store i64 %5638, i64* %PC
  %5639 = inttoptr i64 %5636 to i32*
  %5640 = load i32, i32* %5639
  %5641 = zext i32 %5640 to i64
  store i64 %5641, i64* %RAX, align 8, !tbaa !2428
  %5642 = load i64, i64* %RAX
  %5643 = load i64, i64* %PC
  %5644 = add i64 %5643, 3
  store i64 %5644, i64* %PC
  %5645 = trunc i64 %5642 to i32
  %5646 = add i32 1, %5645
  %5647 = zext i32 %5646 to i64
  store i64 %5647, i64* %RAX, align 8, !tbaa !2428
  %5648 = icmp ult i32 %5646, %5645
  %5649 = icmp ult i32 %5646, 1
  %5650 = or i1 %5648, %5649
  %5651 = zext i1 %5650 to i8
  %5652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5651, i8* %5652, align 1, !tbaa !2432
  %5653 = and i32 %5646, 255
  %5654 = call i32 @llvm.ctpop.i32(i32 %5653) #16
  %5655 = trunc i32 %5654 to i8
  %5656 = and i8 %5655, 1
  %5657 = xor i8 %5656, 1
  %5658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5657, i8* %5658, align 1, !tbaa !2446
  %5659 = xor i64 1, %5642
  %5660 = trunc i64 %5659 to i32
  %5661 = xor i32 %5660, %5646
  %5662 = lshr i32 %5661, 4
  %5663 = trunc i32 %5662 to i8
  %5664 = and i8 %5663, 1
  %5665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5664, i8* %5665, align 1, !tbaa !2447
  %5666 = icmp eq i32 %5646, 0
  %5667 = zext i1 %5666 to i8
  %5668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5667, i8* %5668, align 1, !tbaa !2448
  %5669 = lshr i32 %5646, 31
  %5670 = trunc i32 %5669 to i8
  %5671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5670, i8* %5671, align 1, !tbaa !2449
  %5672 = lshr i32 %5645, 31
  %5673 = xor i32 %5669, %5672
  %5674 = add nuw nsw i32 %5673, %5669
  %5675 = icmp eq i32 %5674, 2
  %5676 = zext i1 %5675 to i8
  %5677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5676, i8* %5677, align 1, !tbaa !2450
  %5678 = load i64, i64* %RBP
  %5679 = sub i64 %5678, 4
  %5680 = load i32, i32* %EAX
  %5681 = zext i32 %5680 to i64
  %5682 = load i64, i64* %PC
  %5683 = add i64 %5682, 3
  store i64 %5683, i64* %PC
  %5684 = inttoptr i64 %5679 to i32*
  store i32 %5680, i32* %5684
  %5685 = load i64, i64* %PC
  %5686 = sub i64 %5685, 49
  %5687 = load i64, i64* %PC
  %5688 = add i64 %5687, 5
  store i64 %5688, i64* %PC
  %5689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5686, i64* %5689, align 8, !tbaa !2428
  br label %block_400a74

block_4014d1:                                     ; preds = %block_4014ca, %block_4016eb
  %MEMORY.27 = phi %struct.Memory* [ %MEMORY.49, %block_4014ca ], [ %MEMORY.17, %block_4016eb ]
  %5690 = load i64, i64* %RBP
  %5691 = sub i64 %5690, 4
  %5692 = load i64, i64* %PC
  %5693 = add i64 %5692, 3
  store i64 %5693, i64* %PC
  %5694 = inttoptr i64 %5691 to i32*
  %5695 = load i32, i32* %5694
  %5696 = zext i32 %5695 to i64
  store i64 %5696, i64* %RAX, align 8, !tbaa !2428
  %5697 = load i64, i64* %RBP
  %5698 = sub i64 %5697, 12
  %5699 = load i64, i64* %PC
  %5700 = add i64 %5699, 4
  store i64 %5700, i64* %PC
  %5701 = inttoptr i64 %5698 to i32*
  %5702 = load i32, i32* %5701
  %5703 = sext i32 %5702 to i64
  store i64 %5703, i64* %RCX, align 8, !tbaa !2428
  %5704 = load i32, i32* %EAX
  %5705 = zext i32 %5704 to i64
  %5706 = load i64, i64* %RBP
  %5707 = load i64, i64* %RCX
  %5708 = mul i64 %5707, 4
  %5709 = add i64 %5706, -1328
  %5710 = add i64 %5709, %5708
  %5711 = load i64, i64* %PC
  %5712 = add i64 %5711, 7
  store i64 %5712, i64* %PC
  %5713 = inttoptr i64 %5710 to i32*
  %5714 = load i32, i32* %5713
  %5715 = sub i32 %5704, %5714
  %5716 = icmp ult i32 %5704, %5714
  %5717 = zext i1 %5716 to i8
  %5718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5717, i8* %5718, align 1, !tbaa !2432
  %5719 = and i32 %5715, 255
  %5720 = call i32 @llvm.ctpop.i32(i32 %5719) #16
  %5721 = trunc i32 %5720 to i8
  %5722 = and i8 %5721, 1
  %5723 = xor i8 %5722, 1
  %5724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5723, i8* %5724, align 1, !tbaa !2446
  %5725 = xor i32 %5714, %5704
  %5726 = xor i32 %5725, %5715
  %5727 = lshr i32 %5726, 4
  %5728 = trunc i32 %5727 to i8
  %5729 = and i8 %5728, 1
  %5730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5729, i8* %5730, align 1, !tbaa !2447
  %5731 = icmp eq i32 %5715, 0
  %5732 = zext i1 %5731 to i8
  %5733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5732, i8* %5733, align 1, !tbaa !2448
  %5734 = lshr i32 %5715, 31
  %5735 = trunc i32 %5734 to i8
  %5736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5735, i8* %5736, align 1, !tbaa !2449
  %5737 = lshr i32 %5704, 31
  %5738 = lshr i32 %5714, 31
  %5739 = xor i32 %5738, %5737
  %5740 = xor i32 %5734, %5737
  %5741 = add nuw nsw i32 %5740, %5739
  %5742 = icmp eq i32 %5741, 2
  %5743 = zext i1 %5742 to i8
  %5744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5743, i8* %5744, align 1, !tbaa !2450
  %5745 = load i64, i64* %PC
  %5746 = add i64 %5745, 543
  %5747 = load i64, i64* %PC
  %5748 = add i64 %5747, 6
  %5749 = load i64, i64* %PC
  %5750 = add i64 %5749, 6
  store i64 %5750, i64* %PC
  %5751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5752 = load i8, i8* %5751, align 1, !tbaa !2449
  %5753 = icmp ne i8 %5752, 0
  %5754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5755 = load i8, i8* %5754, align 1, !tbaa !2450
  %5756 = icmp ne i8 %5755, 0
  %5757 = xor i1 %5753, %5756
  %5758 = xor i1 %5757, true
  %5759 = zext i1 %5758 to i8
  store i8 %5759, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5761 = select i1 %5757, i64 %5748, i64 %5746
  store i64 %5761, i64* %5760, align 8, !tbaa !2428
  %5762 = load i8, i8* %BRANCH_TAKEN
  %5763 = icmp eq i8 %5762, 1
  br i1 %5763, label %block_4016fe, label %block_4014e5

block_400c56:                                     ; preds = %block_400be2, %block_400c51
  %MEMORY.28 = phi %struct.Memory* [ %MEMORY.16, %block_400be2 ], [ %MEMORY.45, %block_400c51 ]
  %5764 = load i64, i64* %RBP
  %5765 = sub i64 %5764, 12
  %5766 = load i64, i64* %PC
  %5767 = add i64 %5766, 4
  store i64 %5767, i64* %PC
  %5768 = inttoptr i64 %5765 to i32*
  %5769 = load i32, i32* %5768
  %5770 = sext i32 %5769 to i64
  store i64 %5770, i64* %RAX, align 8, !tbaa !2428
  %5771 = load i64, i64* %RBP
  %5772 = load i64, i64* %RAX
  %5773 = mul i64 %5772, 4
  %5774 = add i64 %5771, -1328
  %5775 = add i64 %5774, %5773
  %5776 = load i64, i64* %PC
  %5777 = add i64 %5776, 7
  store i64 %5777, i64* %PC
  %5778 = inttoptr i64 %5775 to i32*
  %5779 = load i32, i32* %5778
  %5780 = zext i32 %5779 to i64
  store i64 %5780, i64* %RCX, align 8, !tbaa !2428
  %5781 = load i64, i64* %RBP
  %5782 = sub i64 %5781, 16
  %5783 = load i64, i64* %PC
  %5784 = add i64 %5783, 4
  store i64 %5784, i64* %PC
  %5785 = inttoptr i64 %5782 to i32*
  %5786 = load i32, i32* %5785
  %5787 = sext i32 %5786 to i64
  store i64 %5787, i64* %RAX, align 8, !tbaa !2428
  %5788 = load i64, i64* %RBP
  %5789 = load i64, i64* %RAX
  %5790 = mul i64 %5789, 4
  %5791 = add i64 %5788, -1328
  %5792 = add i64 %5791, %5790
  %5793 = load i64, i64* %PC
  %5794 = add i64 %5793, 7
  store i64 %5794, i64* %PC
  %5795 = inttoptr i64 %5792 to i32*
  %5796 = load i32, i32* %5795
  %5797 = zext i32 %5796 to i64
  store i64 %5797, i64* %RDX, align 8, !tbaa !2428
  %5798 = load i64, i64* %RDX
  %5799 = load i64, i64* %RBP
  %5800 = sub i64 %5799, 12
  %5801 = load i64, i64* %PC
  %5802 = add i64 %5801, 3
  store i64 %5802, i64* %PC
  %5803 = trunc i64 %5798 to i32
  %5804 = inttoptr i64 %5800 to i32*
  %5805 = load i32, i32* %5804
  %5806 = add i32 %5805, %5803
  %5807 = zext i32 %5806 to i64
  store i64 %5807, i64* %RDX, align 8, !tbaa !2428
  %5808 = icmp ult i32 %5806, %5803
  %5809 = icmp ult i32 %5806, %5805
  %5810 = or i1 %5808, %5809
  %5811 = zext i1 %5810 to i8
  %5812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5811, i8* %5812, align 1, !tbaa !2432
  %5813 = and i32 %5806, 255
  %5814 = call i32 @llvm.ctpop.i32(i32 %5813) #16
  %5815 = trunc i32 %5814 to i8
  %5816 = and i8 %5815, 1
  %5817 = xor i8 %5816, 1
  %5818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5817, i8* %5818, align 1, !tbaa !2446
  %5819 = xor i32 %5805, %5803
  %5820 = xor i32 %5819, %5806
  %5821 = lshr i32 %5820, 4
  %5822 = trunc i32 %5821 to i8
  %5823 = and i8 %5822, 1
  %5824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5823, i8* %5824, align 1, !tbaa !2447
  %5825 = icmp eq i32 %5806, 0
  %5826 = zext i1 %5825 to i8
  %5827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5826, i8* %5827, align 1, !tbaa !2448
  %5828 = lshr i32 %5806, 31
  %5829 = trunc i32 %5828 to i8
  %5830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5829, i8* %5830, align 1, !tbaa !2449
  %5831 = lshr i32 %5803, 31
  %5832 = lshr i32 %5805, 31
  %5833 = xor i32 %5828, %5831
  %5834 = xor i32 %5828, %5832
  %5835 = add nuw nsw i32 %5833, %5834
  %5836 = icmp eq i32 %5835, 2
  %5837 = zext i1 %5836 to i8
  %5838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5837, i8* %5838, align 1, !tbaa !2450
  %5839 = load i64, i64* %RDX
  %5840 = load i64, i64* %RBP
  %5841 = sub i64 %5840, 16
  %5842 = load i64, i64* %PC
  %5843 = add i64 %5842, 3
  store i64 %5843, i64* %PC
  %5844 = trunc i64 %5839 to i32
  %5845 = inttoptr i64 %5841 to i32*
  %5846 = load i32, i32* %5845
  %5847 = sub i32 %5844, %5846
  %5848 = zext i32 %5847 to i64
  store i64 %5848, i64* %RDX, align 8, !tbaa !2428
  %5849 = icmp ult i32 %5844, %5846
  %5850 = zext i1 %5849 to i8
  %5851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5850, i8* %5851, align 1, !tbaa !2432
  %5852 = and i32 %5847, 255
  %5853 = call i32 @llvm.ctpop.i32(i32 %5852) #16
  %5854 = trunc i32 %5853 to i8
  %5855 = and i8 %5854, 1
  %5856 = xor i8 %5855, 1
  %5857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5856, i8* %5857, align 1, !tbaa !2446
  %5858 = xor i32 %5846, %5844
  %5859 = xor i32 %5858, %5847
  %5860 = lshr i32 %5859, 4
  %5861 = trunc i32 %5860 to i8
  %5862 = and i8 %5861, 1
  %5863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5862, i8* %5863, align 1, !tbaa !2447
  %5864 = icmp eq i32 %5847, 0
  %5865 = zext i1 %5864 to i8
  %5866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5865, i8* %5866, align 1, !tbaa !2448
  %5867 = lshr i32 %5847, 31
  %5868 = trunc i32 %5867 to i8
  %5869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5868, i8* %5869, align 1, !tbaa !2449
  %5870 = lshr i32 %5844, 31
  %5871 = lshr i32 %5846, 31
  %5872 = xor i32 %5871, %5870
  %5873 = xor i32 %5867, %5870
  %5874 = add nuw nsw i32 %5873, %5872
  %5875 = icmp eq i32 %5874, 2
  %5876 = zext i1 %5875 to i8
  %5877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5876, i8* %5877, align 1, !tbaa !2450
  %5878 = load i32, i32* %ECX
  %5879 = zext i32 %5878 to i64
  %5880 = load i32, i32* %EDX
  %5881 = zext i32 %5880 to i64
  %5882 = load i64, i64* %PC
  %5883 = add i64 %5882, 2
  store i64 %5883, i64* %PC
  %5884 = sub i32 %5878, %5880
  %5885 = icmp ult i32 %5878, %5880
  %5886 = zext i1 %5885 to i8
  %5887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5886, i8* %5887, align 1, !tbaa !2432
  %5888 = and i32 %5884, 255
  %5889 = call i32 @llvm.ctpop.i32(i32 %5888) #16
  %5890 = trunc i32 %5889 to i8
  %5891 = and i8 %5890, 1
  %5892 = xor i8 %5891, 1
  %5893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5892, i8* %5893, align 1, !tbaa !2446
  %5894 = xor i64 %5881, %5879
  %5895 = trunc i64 %5894 to i32
  %5896 = xor i32 %5895, %5884
  %5897 = lshr i32 %5896, 4
  %5898 = trunc i32 %5897 to i8
  %5899 = and i8 %5898, 1
  %5900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5899, i8* %5900, align 1, !tbaa !2447
  %5901 = icmp eq i32 %5884, 0
  %5902 = zext i1 %5901 to i8
  %5903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5902, i8* %5903, align 1, !tbaa !2448
  %5904 = lshr i32 %5884, 31
  %5905 = trunc i32 %5904 to i8
  %5906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5905, i8* %5906, align 1, !tbaa !2449
  %5907 = lshr i32 %5878, 31
  %5908 = lshr i32 %5880, 31
  %5909 = xor i32 %5908, %5907
  %5910 = xor i32 %5904, %5907
  %5911 = add nuw nsw i32 %5910, %5909
  %5912 = icmp eq i32 %5911, 2
  %5913 = zext i1 %5912 to i8
  %5914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5913, i8* %5914, align 1, !tbaa !2450
  %5915 = load i64, i64* %PC
  %5916 = add i64 %5915, 38
  %5917 = load i64, i64* %PC
  %5918 = add i64 %5917, 6
  %5919 = load i64, i64* %PC
  %5920 = add i64 %5919, 6
  store i64 %5920, i64* %PC
  %5921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5922 = load i8, i8* %5921, align 1, !tbaa !2448
  %5923 = icmp ne i8 %5922, 0
  %5924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5925 = load i8, i8* %5924, align 1, !tbaa !2449
  %5926 = icmp ne i8 %5925, 0
  %5927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5928 = load i8, i8* %5927, align 1, !tbaa !2450
  %5929 = icmp ne i8 %5928, 0
  %5930 = xor i1 %5926, %5929
  %5931 = or i1 %5923, %5930
  %5932 = zext i1 %5931 to i8
  store i8 %5932, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5934 = select i1 %5931, i64 %5916, i64 %5918
  store i64 %5934, i64* %5933, align 8, !tbaa !2428
  %5935 = load i8, i8* %BRANCH_TAKEN
  %5936 = icmp eq i8 %5935, 1
  %5937 = load i64, i64* %RBP
  br i1 %5936, label %block_400c9a, label %block_400c7a

block_400c7a:                                     ; preds = %block_400c56
  %5938 = sub i64 %5937, 12
  %5939 = load i64, i64* %PC
  %5940 = add i64 %5939, 4
  store i64 %5940, i64* %PC
  %5941 = inttoptr i64 %5938 to i32*
  %5942 = load i32, i32* %5941
  %5943 = sext i32 %5942 to i64
  store i64 %5943, i64* %RAX, align 8, !tbaa !2428
  %5944 = load i64, i64* %RBP
  %5945 = load i64, i64* %RAX
  %5946 = mul i64 %5945, 4
  %5947 = add i64 %5944, -1328
  %5948 = add i64 %5947, %5946
  %5949 = load i64, i64* %PC
  %5950 = add i64 %5949, 7
  store i64 %5950, i64* %PC
  %5951 = inttoptr i64 %5948 to i32*
  %5952 = load i32, i32* %5951
  %5953 = zext i32 %5952 to i64
  store i64 %5953, i64* %RCX, align 8, !tbaa !2428
  %5954 = load i64, i64* %RBP
  %5955 = sub i64 %5954, 12
  %5956 = load i64, i64* %PC
  %5957 = add i64 %5956, 3
  store i64 %5957, i64* %PC
  %5958 = inttoptr i64 %5955 to i32*
  %5959 = load i32, i32* %5958
  %5960 = zext i32 %5959 to i64
  store i64 %5960, i64* %RDX, align 8, !tbaa !2428
  %5961 = load i64, i64* %RDX
  %5962 = load i64, i64* %PC
  %5963 = add i64 %5962, 3
  store i64 %5963, i64* %PC
  %5964 = trunc i64 %5961 to i32
  %5965 = add i32 1, %5964
  %5966 = zext i32 %5965 to i64
  store i64 %5966, i64* %RDX, align 8, !tbaa !2428
  %5967 = icmp ult i32 %5965, %5964
  %5968 = icmp ult i32 %5965, 1
  %5969 = or i1 %5967, %5968
  %5970 = zext i1 %5969 to i8
  %5971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5970, i8* %5971, align 1, !tbaa !2432
  %5972 = and i32 %5965, 255
  %5973 = call i32 @llvm.ctpop.i32(i32 %5972) #16
  %5974 = trunc i32 %5973 to i8
  %5975 = and i8 %5974, 1
  %5976 = xor i8 %5975, 1
  %5977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5976, i8* %5977, align 1, !tbaa !2446
  %5978 = xor i64 1, %5961
  %5979 = trunc i64 %5978 to i32
  %5980 = xor i32 %5979, %5965
  %5981 = lshr i32 %5980, 4
  %5982 = trunc i32 %5981 to i8
  %5983 = and i8 %5982, 1
  %5984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5983, i8* %5984, align 1, !tbaa !2447
  %5985 = icmp eq i32 %5965, 0
  %5986 = zext i1 %5985 to i8
  %5987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5986, i8* %5987, align 1, !tbaa !2448
  %5988 = lshr i32 %5965, 31
  %5989 = trunc i32 %5988 to i8
  %5990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5989, i8* %5990, align 1, !tbaa !2449
  %5991 = lshr i32 %5964, 31
  %5992 = xor i32 %5988, %5991
  %5993 = add nuw nsw i32 %5992, %5988
  %5994 = icmp eq i32 %5993, 2
  %5995 = zext i1 %5994 to i8
  %5996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5995, i8* %5996, align 1, !tbaa !2450
  %5997 = load i32, i32* %EDX
  %5998 = zext i32 %5997 to i64
  %5999 = load i64, i64* %PC
  %6000 = add i64 %5999, 3
  store i64 %6000, i64* %PC
  %6001 = shl i64 %5998, 32
  %6002 = ashr exact i64 %6001, 32
  store i64 %6002, i64* %RAX, align 8, !tbaa !2428
  %6003 = load i64, i64* %RBP
  %6004 = load i64, i64* %RAX
  %6005 = mul i64 %6004, 4
  %6006 = add i64 %6003, -1328
  %6007 = add i64 %6006, %6005
  %6008 = load i32, i32* %ECX
  %6009 = zext i32 %6008 to i64
  %6010 = load i64, i64* %PC
  %6011 = add i64 %6010, 7
  store i64 %6011, i64* %PC
  %6012 = inttoptr i64 %6007 to i32*
  store i32 %6008, i32* %6012
  %6013 = load i64, i64* %PC
  %6014 = add i64 %6013, 38
  %6015 = load i64, i64* %PC
  %6016 = add i64 %6015, 5
  store i64 %6016, i64* %PC
  %6017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6014, i64* %6017, align 8, !tbaa !2428
  br label %block_400cbb

block_400a74:                                     ; preds = %block_400a43, %block_400a7e
  %MEMORY.29 = phi %struct.Memory* [ %MEMORY.8, %block_400a43 ], [ %MEMORY.29, %block_400a7e ]
  %6018 = load i64, i64* %RBP
  %6019 = sub i64 %6018, 4
  %6020 = load i64, i64* %PC
  %6021 = add i64 %6020, 4
  store i64 %6021, i64* %PC
  %6022 = inttoptr i64 %6019 to i32*
  %6023 = load i32, i32* %6022
  %6024 = sub i32 %6023, 16
  %6025 = icmp ult i32 %6023, 16
  %6026 = zext i1 %6025 to i8
  %6027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6026, i8* %6027, align 1, !tbaa !2432
  %6028 = and i32 %6024, 255
  %6029 = call i32 @llvm.ctpop.i32(i32 %6028) #16
  %6030 = trunc i32 %6029 to i8
  %6031 = and i8 %6030, 1
  %6032 = xor i8 %6031, 1
  %6033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6032, i8* %6033, align 1, !tbaa !2446
  %6034 = xor i32 %6023, 16
  %6035 = xor i32 %6034, %6024
  %6036 = lshr i32 %6035, 4
  %6037 = trunc i32 %6036 to i8
  %6038 = and i8 %6037, 1
  %6039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6038, i8* %6039, align 1, !tbaa !2447
  %6040 = icmp eq i32 %6024, 0
  %6041 = zext i1 %6040 to i8
  %6042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6041, i8* %6042, align 1, !tbaa !2448
  %6043 = lshr i32 %6024, 31
  %6044 = trunc i32 %6043 to i8
  %6045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6044, i8* %6045, align 1, !tbaa !2449
  %6046 = lshr i32 %6023, 31
  %6047 = xor i32 %6043, %6046
  %6048 = add nuw nsw i32 %6047, %6046
  %6049 = icmp eq i32 %6048, 2
  %6050 = zext i1 %6049 to i8
  %6051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6050, i8* %6051, align 1, !tbaa !2450
  %6052 = load i64, i64* %PC
  %6053 = add i64 %6052, 50
  %6054 = load i64, i64* %PC
  %6055 = add i64 %6054, 6
  %6056 = load i64, i64* %PC
  %6057 = add i64 %6056, 6
  store i64 %6057, i64* %PC
  %6058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6059 = load i8, i8* %6058, align 1, !tbaa !2449
  %6060 = icmp ne i8 %6059, 0
  %6061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6062 = load i8, i8* %6061, align 1, !tbaa !2450
  %6063 = icmp ne i8 %6062, 0
  %6064 = xor i1 %6060, %6063
  %6065 = xor i1 %6064, true
  %6066 = zext i1 %6065 to i8
  store i8 %6066, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6068 = select i1 %6064, i64 %6055, i64 %6053
  store i64 %6068, i64* %6067, align 8, !tbaa !2428
  %6069 = load i8, i8* %BRANCH_TAKEN
  %6070 = icmp eq i8 %6069, 1
  %6071 = load i64, i64* %RBP
  br i1 %6070, label %block_400aaa, label %block_400a7e

block_401411:                                     ; preds = %block_40137f, %block_401391, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit8
  %MEMORY.30 = phi %struct.Memory* [ %MEMORY.43, %block_40137f ], [ %MEMORY.43, %block_401391 ], [ %1082, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit8 ]
  %6072 = load i64, i64* %PC
  %6073 = add i64 %6072, 5
  %6074 = load i64, i64* %PC
  %6075 = add i64 %6074, 5
  store i64 %6075, i64* %PC
  %6076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6073, i64* %6076, align 8, !tbaa !2428
  %6077 = load i64, i64* %RBP
  %6078 = sub i64 %6077, 8
  %6079 = load i64, i64* %PC
  %6080 = add i64 %6079, 3
  store i64 %6080, i64* %PC
  %6081 = inttoptr i64 %6078 to i32*
  %6082 = load i32, i32* %6081
  %6083 = zext i32 %6082 to i64
  store i64 %6083, i64* %RAX, align 8, !tbaa !2428
  %6084 = load i64, i64* %RAX
  %6085 = load i64, i64* %PC
  %6086 = add i64 %6085, 3
  store i64 %6086, i64* %PC
  %6087 = trunc i64 %6084 to i32
  %6088 = add i32 1, %6087
  %6089 = zext i32 %6088 to i64
  store i64 %6089, i64* %RAX, align 8, !tbaa !2428
  %6090 = icmp ult i32 %6088, %6087
  %6091 = icmp ult i32 %6088, 1
  %6092 = or i1 %6090, %6091
  %6093 = zext i1 %6092 to i8
  %6094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6093, i8* %6094, align 1, !tbaa !2432
  %6095 = and i32 %6088, 255
  %6096 = call i32 @llvm.ctpop.i32(i32 %6095) #16
  %6097 = trunc i32 %6096 to i8
  %6098 = and i8 %6097, 1
  %6099 = xor i8 %6098, 1
  %6100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6099, i8* %6100, align 1, !tbaa !2446
  %6101 = xor i64 1, %6084
  %6102 = trunc i64 %6101 to i32
  %6103 = xor i32 %6102, %6088
  %6104 = lshr i32 %6103, 4
  %6105 = trunc i32 %6104 to i8
  %6106 = and i8 %6105, 1
  %6107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6106, i8* %6107, align 1, !tbaa !2447
  %6108 = icmp eq i32 %6088, 0
  %6109 = zext i1 %6108 to i8
  %6110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6109, i8* %6110, align 1, !tbaa !2448
  %6111 = lshr i32 %6088, 31
  %6112 = trunc i32 %6111 to i8
  %6113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6112, i8* %6113, align 1, !tbaa !2449
  %6114 = lshr i32 %6087, 31
  %6115 = xor i32 %6111, %6114
  %6116 = add nuw nsw i32 %6115, %6111
  %6117 = icmp eq i32 %6116, 2
  %6118 = zext i1 %6117 to i8
  %6119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6118, i8* %6119, align 1, !tbaa !2450
  %6120 = load i64, i64* %RBP
  %6121 = sub i64 %6120, 8
  %6122 = load i32, i32* %EAX
  %6123 = zext i32 %6122 to i64
  %6124 = load i64, i64* %PC
  %6125 = add i64 %6124, 3
  store i64 %6125, i64* %PC
  %6126 = inttoptr i64 %6121 to i32*
  store i32 %6122, i32* %6126
  %6127 = load i64, i64* %PC
  %6128 = sub i64 %6127, 172
  %6129 = load i64, i64* %PC
  %6130 = add i64 %6129, 5
  store i64 %6130, i64* %PC
  %6131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6128, i64* %6131, align 8, !tbaa !2428
  br label %block_401373

block_400feb:                                     ; preds = %block_400e5a, %block_400fc3
  %MEMORY.31 = phi %struct.Memory* [ %MEMORY.34, %block_400e5a ], [ %MEMORY.18, %block_400fc3 ]
  %6132 = load i64, i64* %PC
  %6133 = add i64 %6132, 5
  %6134 = load i64, i64* %PC
  %6135 = add i64 %6134, 5
  store i64 %6135, i64* %PC
  %6136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6133, i64* %6136, align 8, !tbaa !2428
  %6137 = load i64, i64* %RAX
  %6138 = load i32, i32* %EAX
  %6139 = zext i32 %6138 to i64
  %6140 = load i64, i64* %PC
  %6141 = add i64 %6140, 2
  store i64 %6141, i64* %PC
  %6142 = xor i64 %6139, %6137
  %6143 = trunc i64 %6142 to i32
  %6144 = and i64 %6142, 4294967295
  store i64 %6144, i64* %RAX, align 8, !tbaa !2428
  %6145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6145, align 1, !tbaa !2432
  %6146 = and i32 %6143, 255
  %6147 = call i32 @llvm.ctpop.i32(i32 %6146) #16
  %6148 = trunc i32 %6147 to i8
  %6149 = and i8 %6148, 1
  %6150 = xor i8 %6149, 1
  %6151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6150, i8* %6151, align 1, !tbaa !2446
  %6152 = icmp eq i32 %6143, 0
  %6153 = zext i1 %6152 to i8
  %6154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6153, i8* %6154, align 1, !tbaa !2448
  %6155 = lshr i32 %6143, 31
  %6156 = trunc i32 %6155 to i8
  %6157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6156, i8* %6157, align 1, !tbaa !2449
  %6158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6158, align 1, !tbaa !2450
  %6159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6159, align 1, !tbaa !2447
  %6160 = load i8, i8* %AL
  %6161 = zext i8 %6160 to i64
  %6162 = load i64, i64* %PC
  %6163 = add i64 %6162, 2
  store i64 %6163, i64* %PC
  store i8 %6160, i8* %CL, align 1, !tbaa !2451
  %6164 = load i64, i64* %RBP
  %6165 = sub i64 %6164, 12
  %6166 = load i64, i64* %PC
  %6167 = add i64 %6166, 4
  store i64 %6167, i64* %PC
  %6168 = inttoptr i64 %6165 to i32*
  %6169 = load i32, i32* %6168
  %6170 = sub i32 %6169, 16
  %6171 = icmp ult i32 %6169, 16
  %6172 = zext i1 %6171 to i8
  %6173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6172, i8* %6173, align 1, !tbaa !2432
  %6174 = and i32 %6170, 255
  %6175 = call i32 @llvm.ctpop.i32(i32 %6174) #16
  %6176 = trunc i32 %6175 to i8
  %6177 = and i8 %6176, 1
  %6178 = xor i8 %6177, 1
  %6179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6178, i8* %6179, align 1, !tbaa !2446
  %6180 = xor i32 %6169, 16
  %6181 = xor i32 %6180, %6170
  %6182 = lshr i32 %6181, 4
  %6183 = trunc i32 %6182 to i8
  %6184 = and i8 %6183, 1
  %6185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6184, i8* %6185, align 1, !tbaa !2447
  %6186 = icmp eq i32 %6170, 0
  %6187 = zext i1 %6186 to i8
  %6188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6187, i8* %6188, align 1, !tbaa !2448
  %6189 = lshr i32 %6170, 31
  %6190 = trunc i32 %6189 to i8
  %6191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6190, i8* %6191, align 1, !tbaa !2449
  %6192 = lshr i32 %6169, 31
  %6193 = xor i32 %6189, %6192
  %6194 = add nuw nsw i32 %6193, %6192
  %6195 = icmp eq i32 %6194, 2
  %6196 = zext i1 %6195 to i8
  %6197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6196, i8* %6197, align 1, !tbaa !2450
  %6198 = load i64, i64* %RBP
  %6199 = sub i64 %6198, 2709
  %6200 = load i8, i8* %CL
  %6201 = zext i8 %6200 to i64
  %6202 = load i64, i64* %PC
  %6203 = add i64 %6202, 6
  store i64 %6203, i64* %PC
  %6204 = inttoptr i64 %6199 to i8*
  store i8 %6200, i8* %6204
  %6205 = load i64, i64* %PC
  %6206 = add i64 %6205, 32
  %6207 = load i64, i64* %PC
  %6208 = add i64 %6207, 6
  %6209 = load i64, i64* %PC
  %6210 = add i64 %6209, 6
  store i64 %6210, i64* %PC
  %6211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6212 = load i8, i8* %6211, align 1, !tbaa !2449
  %6213 = icmp ne i8 %6212, 0
  %6214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6215 = load i8, i8* %6214, align 1, !tbaa !2450
  %6216 = icmp ne i8 %6215, 0
  %6217 = xor i1 %6213, %6216
  %6218 = xor i1 %6217, true
  %6219 = zext i1 %6218 to i8
  store i8 %6219, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6221 = select i1 %6217, i64 %6208, i64 %6206
  store i64 %6221, i64* %6220, align 8, !tbaa !2428
  %6222 = load i8, i8* %BRANCH_TAKEN
  %6223 = icmp eq i8 %6222, 1
  br i1 %6223, label %block_40101e, label %block_401004

block_4011e0:                                     ; preds = %block_4011a0, %block_4011aa
  %MEMORY.32 = phi %struct.Memory* [ %MEMORY.15, %block_4011a0 ], [ %MEMORY.15, %block_4011aa ]
  %6224 = load i64, i64* %PC
  %6225 = add i64 %6224, 5
  %6226 = load i64, i64* %PC
  %6227 = add i64 %6226, 5
  store i64 %6227, i64* %PC
  %6228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6225, i64* %6228, align 8, !tbaa !2428
  %6229 = load i64, i64* %RBP
  %6230 = sub i64 %6229, 4
  %6231 = load i64, i64* %PC
  %6232 = add i64 %6231, 3
  store i64 %6232, i64* %PC
  %6233 = inttoptr i64 %6230 to i32*
  %6234 = load i32, i32* %6233
  %6235 = zext i32 %6234 to i64
  store i64 %6235, i64* %RAX, align 8, !tbaa !2428
  %6236 = load i64, i64* %RAX
  %6237 = load i64, i64* %PC
  %6238 = add i64 %6237, 3
  store i64 %6238, i64* %PC
  %6239 = trunc i64 %6236 to i32
  %6240 = add i32 1, %6239
  %6241 = zext i32 %6240 to i64
  store i64 %6241, i64* %RAX, align 8, !tbaa !2428
  %6242 = icmp ult i32 %6240, %6239
  %6243 = icmp ult i32 %6240, 1
  %6244 = or i1 %6242, %6243
  %6245 = zext i1 %6244 to i8
  %6246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6245, i8* %6246, align 1, !tbaa !2432
  %6247 = and i32 %6240, 255
  %6248 = call i32 @llvm.ctpop.i32(i32 %6247) #16
  %6249 = trunc i32 %6248 to i8
  %6250 = and i8 %6249, 1
  %6251 = xor i8 %6250, 1
  %6252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6251, i8* %6252, align 1, !tbaa !2446
  %6253 = xor i64 1, %6236
  %6254 = trunc i64 %6253 to i32
  %6255 = xor i32 %6254, %6240
  %6256 = lshr i32 %6255, 4
  %6257 = trunc i32 %6256 to i8
  %6258 = and i8 %6257, 1
  %6259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6258, i8* %6259, align 1, !tbaa !2447
  %6260 = icmp eq i32 %6240, 0
  %6261 = zext i1 %6260 to i8
  %6262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6261, i8* %6262, align 1, !tbaa !2448
  %6263 = lshr i32 %6240, 31
  %6264 = trunc i32 %6263 to i8
  %6265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6264, i8* %6265, align 1, !tbaa !2449
  %6266 = lshr i32 %6239, 31
  %6267 = xor i32 %6263, %6266
  %6268 = add nuw nsw i32 %6267, %6263
  %6269 = icmp eq i32 %6268, 2
  %6270 = zext i1 %6269 to i8
  %6271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6270, i8* %6271, align 1, !tbaa !2450
  %6272 = load i64, i64* %RBP
  %6273 = sub i64 %6272, 4
  %6274 = load i32, i32* %EAX
  %6275 = zext i32 %6274 to i64
  %6276 = load i64, i64* %PC
  %6277 = add i64 %6276, 3
  store i64 %6277, i64* %PC
  %6278 = inttoptr i64 %6273 to i32*
  store i32 %6274, i32* %6278
  %6279 = load i64, i64* %PC
  %6280 = sub i64 %6279, 234
  %6281 = load i64, i64* %PC
  %6282 = add i64 %6281, 5
  store i64 %6282, i64* %PC
  %6283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6280, i64* %6283, align 8, !tbaa !2428
  br label %block_401104

block_400d37:                                     ; preds = %block_400d17
  %6284 = load i64, i64* %RBP
  %6285 = sub i64 %6284, 1168
  %6286 = load i64, i64* %PC
  %6287 = add i64 %6286, 7
  store i64 %6287, i64* %PC
  store i64 %6285, i64* %RAX, align 8, !tbaa !2428
  %6288 = load i64, i64* %PC
  %6289 = add i64 %6288, 5
  store i64 %6289, i64* %PC
  store i64 255, i64* %RCX, align 8, !tbaa !2428
  %6290 = load i64, i64* %RBP
  %6291 = sub i64 %6290, 12
  %6292 = load i64, i64* %PC
  %6293 = add i64 %6292, 4
  store i64 %6293, i64* %PC
  %6294 = inttoptr i64 %6291 to i32*
  %6295 = load i32, i32* %6294
  %6296 = sext i32 %6295 to i64
  store i64 %6296, i64* %RDX, align 8, !tbaa !2428
  %6297 = load i64, i64* %RBP
  %6298 = load i64, i64* %RDX
  %6299 = mul i64 %6298, 4
  %6300 = add i64 %6297, -1248
  %6301 = add i64 %6300, %6299
  %6302 = load i64, i64* %PC
  %6303 = add i64 %6302, 7
  store i64 %6303, i64* %PC
  %6304 = inttoptr i64 %6301 to i32*
  %6305 = load i32, i32* %6304
  %6306 = zext i32 %6305 to i64
  store i64 %6306, i64* %RSI, align 8, !tbaa !2428
  %6307 = load i64, i64* %RSI
  %6308 = load i64, i64* %PC
  %6309 = add i64 %6308, 6
  store i64 %6309, i64* %PC
  %6310 = trunc i64 %6307 to i32
  %6311 = add i32 255, %6310
  %6312 = zext i32 %6311 to i64
  store i64 %6312, i64* %RSI, align 8, !tbaa !2428
  %6313 = icmp ult i32 %6311, %6310
  %6314 = icmp ult i32 %6311, 255
  %6315 = or i1 %6313, %6314
  %6316 = zext i1 %6315 to i8
  %6317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6316, i8* %6317, align 1, !tbaa !2432
  %6318 = and i32 %6311, 255
  %6319 = call i32 @llvm.ctpop.i32(i32 %6318) #16
  %6320 = trunc i32 %6319 to i8
  %6321 = and i8 %6320, 1
  %6322 = xor i8 %6321, 1
  %6323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6322, i8* %6323, align 1, !tbaa !2446
  %6324 = xor i64 255, %6307
  %6325 = trunc i64 %6324 to i32
  %6326 = xor i32 %6325, %6311
  %6327 = lshr i32 %6326, 4
  %6328 = trunc i32 %6327 to i8
  %6329 = and i8 %6328, 1
  %6330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6329, i8* %6330, align 1, !tbaa !2447
  %6331 = icmp eq i32 %6311, 0
  %6332 = zext i1 %6331 to i8
  %6333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6332, i8* %6333, align 1, !tbaa !2448
  %6334 = lshr i32 %6311, 31
  %6335 = trunc i32 %6334 to i8
  %6336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6335, i8* %6336, align 1, !tbaa !2449
  %6337 = lshr i32 %6310, 31
  %6338 = xor i32 %6334, %6337
  %6339 = add nuw nsw i32 %6338, %6334
  %6340 = icmp eq i32 %6339, 2
  %6341 = zext i1 %6340 to i8
  %6342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6341, i8* %6342, align 1, !tbaa !2450
  %6343 = load i64, i64* %RBP
  %6344 = sub i64 %6343, 16
  %6345 = load i64, i64* %PC
  %6346 = add i64 %6345, 4
  store i64 %6346, i64* %PC
  %6347 = inttoptr i64 %6344 to i32*
  %6348 = load i32, i32* %6347
  %6349 = sext i32 %6348 to i64
  store i64 %6349, i64* %RDX, align 8, !tbaa !2428
  %6350 = load i64, i64* %RSI
  %6351 = load i64, i64* %RBP
  %6352 = load i64, i64* %RDX
  %6353 = mul i64 %6352, 4
  %6354 = add i64 %6351, -1248
  %6355 = add i64 %6354, %6353
  %6356 = load i64, i64* %PC
  %6357 = add i64 %6356, 7
  store i64 %6357, i64* %PC
  %6358 = trunc i64 %6350 to i32
  %6359 = inttoptr i64 %6355 to i32*
  %6360 = load i32, i32* %6359
  %6361 = sub i32 %6358, %6360
  %6362 = zext i32 %6361 to i64
  store i64 %6362, i64* %RSI, align 8, !tbaa !2428
  %6363 = icmp ult i32 %6358, %6360
  %6364 = zext i1 %6363 to i8
  %6365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6364, i8* %6365, align 1, !tbaa !2432
  %6366 = and i32 %6361, 255
  %6367 = call i32 @llvm.ctpop.i32(i32 %6366) #16
  %6368 = trunc i32 %6367 to i8
  %6369 = and i8 %6368, 1
  %6370 = xor i8 %6369, 1
  %6371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6370, i8* %6371, align 1, !tbaa !2446
  %6372 = xor i32 %6360, %6358
  %6373 = xor i32 %6372, %6361
  %6374 = lshr i32 %6373, 4
  %6375 = trunc i32 %6374 to i8
  %6376 = and i8 %6375, 1
  %6377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6376, i8* %6377, align 1, !tbaa !2447
  %6378 = icmp eq i32 %6361, 0
  %6379 = zext i1 %6378 to i8
  %6380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6379, i8* %6380, align 1, !tbaa !2448
  %6381 = lshr i32 %6361, 31
  %6382 = trunc i32 %6381 to i8
  %6383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6382, i8* %6383, align 1, !tbaa !2449
  %6384 = lshr i32 %6358, 31
  %6385 = lshr i32 %6360, 31
  %6386 = xor i32 %6385, %6384
  %6387 = xor i32 %6381, %6384
  %6388 = add nuw nsw i32 %6387, %6386
  %6389 = icmp eq i32 %6388, 2
  %6390 = zext i1 %6389 to i8
  %6391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6390, i8* %6391, align 1, !tbaa !2450
  %6392 = load i64, i64* %RBP
  %6393 = sub i64 %6392, 16
  %6394 = load i64, i64* %PC
  %6395 = add i64 %6394, 4
  store i64 %6395, i64* %PC
  %6396 = inttoptr i64 %6393 to i32*
  %6397 = load i32, i32* %6396
  %6398 = sext i32 %6397 to i64
  store i64 %6398, i64* %RDX, align 8, !tbaa !2428
  %6399 = load i64, i64* %RDX
  %6400 = load i64, i64* %PC
  %6401 = add i64 %6400, 4
  store i64 %6401, i64* %PC
  %6402 = shl i64 %6399, 5
  %6403 = icmp slt i64 %6402, 0
  %6404 = shl i64 %6402, 1
  store i64 %6404, i64* %RDX, align 8, !tbaa !2428
  %6405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6406 = zext i1 %6403 to i8
  store i8 %6406, i8* %6405, align 1, !tbaa !2451
  %6407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6408 = trunc i64 %6404 to i32
  %6409 = and i32 %6408, 254
  %6410 = call i32 @llvm.ctpop.i32(i32 %6409) #16
  %6411 = trunc i32 %6410 to i8
  %6412 = and i8 %6411, 1
  %6413 = xor i8 %6412, 1
  store i8 %6413, i8* %6407, align 1, !tbaa !2451
  %6414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6414, align 1, !tbaa !2451
  %6415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6416 = icmp eq i64 %6404, 0
  %6417 = zext i1 %6416 to i8
  store i8 %6417, i8* %6415, align 1, !tbaa !2451
  %6418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6419 = lshr i64 %6404, 63
  %6420 = trunc i64 %6419 to i8
  store i8 %6420, i8* %6418, align 1, !tbaa !2451
  %6421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6421, align 1, !tbaa !2451
  %6422 = load i64, i64* %RAX
  %6423 = load i64, i64* %PC
  %6424 = add i64 %6423, 3
  store i64 %6424, i64* %PC
  store i64 %6422, i64* %RDI, align 8, !tbaa !2428
  %6425 = load i64, i64* %RDI
  %6426 = load i64, i64* %RDX
  %6427 = load i64, i64* %PC
  %6428 = add i64 %6427, 3
  store i64 %6428, i64* %PC
  %6429 = add i64 %6426, %6425
  store i64 %6429, i64* %RDI, align 8, !tbaa !2428
  %6430 = icmp ult i64 %6429, %6425
  %6431 = icmp ult i64 %6429, %6426
  %6432 = or i1 %6430, %6431
  %6433 = zext i1 %6432 to i8
  %6434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6433, i8* %6434, align 1, !tbaa !2432
  %6435 = trunc i64 %6429 to i32
  %6436 = and i32 %6435, 255
  %6437 = call i32 @llvm.ctpop.i32(i32 %6436) #16
  %6438 = trunc i32 %6437 to i8
  %6439 = and i8 %6438, 1
  %6440 = xor i8 %6439, 1
  %6441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6440, i8* %6441, align 1, !tbaa !2446
  %6442 = xor i64 %6426, %6425
  %6443 = xor i64 %6442, %6429
  %6444 = lshr i64 %6443, 4
  %6445 = trunc i64 %6444 to i8
  %6446 = and i8 %6445, 1
  %6447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6446, i8* %6447, align 1, !tbaa !2447
  %6448 = icmp eq i64 %6429, 0
  %6449 = zext i1 %6448 to i8
  %6450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6449, i8* %6450, align 1, !tbaa !2448
  %6451 = lshr i64 %6429, 63
  %6452 = trunc i64 %6451 to i8
  %6453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6452, i8* %6453, align 1, !tbaa !2449
  %6454 = lshr i64 %6425, 63
  %6455 = lshr i64 %6426, 63
  %6456 = xor i64 %6451, %6454
  %6457 = xor i64 %6451, %6455
  %6458 = add nuw nsw i64 %6456, %6457
  %6459 = icmp eq i64 %6458, 2
  %6460 = zext i1 %6459 to i8
  %6461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6460, i8* %6461, align 1, !tbaa !2450
  %6462 = load i64, i64* %RBP
  %6463 = sub i64 %6462, 4
  %6464 = load i64, i64* %PC
  %6465 = add i64 %6464, 4
  store i64 %6465, i64* %PC
  %6466 = inttoptr i64 %6463 to i32*
  %6467 = load i32, i32* %6466
  %6468 = sext i32 %6467 to i64
  store i64 %6468, i64* %RDX, align 8, !tbaa !2428
  %6469 = load i64, i64* %RSI
  %6470 = load i64, i64* %RDI
  %6471 = load i64, i64* %RDX
  %6472 = mul i64 %6471, 4
  %6473 = add i64 %6472, %6470
  %6474 = load i64, i64* %PC
  %6475 = add i64 %6474, 3
  store i64 %6475, i64* %PC
  %6476 = trunc i64 %6469 to i32
  %6477 = inttoptr i64 %6473 to i32*
  %6478 = load i32, i32* %6477
  %6479 = add i32 %6478, %6476
  %6480 = zext i32 %6479 to i64
  store i64 %6480, i64* %RSI, align 8, !tbaa !2428
  %6481 = icmp ult i32 %6479, %6476
  %6482 = icmp ult i32 %6479, %6478
  %6483 = or i1 %6481, %6482
  %6484 = zext i1 %6483 to i8
  %6485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6484, i8* %6485, align 1, !tbaa !2432
  %6486 = and i32 %6479, 255
  %6487 = call i32 @llvm.ctpop.i32(i32 %6486) #16
  %6488 = trunc i32 %6487 to i8
  %6489 = and i8 %6488, 1
  %6490 = xor i8 %6489, 1
  %6491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6490, i8* %6491, align 1, !tbaa !2446
  %6492 = xor i32 %6478, %6476
  %6493 = xor i32 %6492, %6479
  %6494 = lshr i32 %6493, 4
  %6495 = trunc i32 %6494 to i8
  %6496 = and i8 %6495, 1
  %6497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6496, i8* %6497, align 1, !tbaa !2447
  %6498 = icmp eq i32 %6479, 0
  %6499 = zext i1 %6498 to i8
  %6500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6499, i8* %6500, align 1, !tbaa !2448
  %6501 = lshr i32 %6479, 31
  %6502 = trunc i32 %6501 to i8
  %6503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6502, i8* %6503, align 1, !tbaa !2449
  %6504 = lshr i32 %6476, 31
  %6505 = lshr i32 %6478, 31
  %6506 = xor i32 %6501, %6504
  %6507 = xor i32 %6501, %6505
  %6508 = add nuw nsw i32 %6506, %6507
  %6509 = icmp eq i32 %6508, 2
  %6510 = zext i1 %6509 to i8
  %6511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6510, i8* %6511, align 1, !tbaa !2450
  %6512 = load i64, i64* %RBP
  %6513 = sub i64 %6512, 2704
  %6514 = load i64, i64* %RAX
  %6515 = load i64, i64* %PC
  %6516 = add i64 %6515, 7
  store i64 %6516, i64* %PC
  %6517 = inttoptr i64 %6513 to i64*
  store i64 %6514, i64* %6517
  %6518 = load i32, i32* %ESI
  %6519 = zext i32 %6518 to i64
  %6520 = load i64, i64* %PC
  %6521 = add i64 %6520, 2
  store i64 %6521, i64* %PC
  %6522 = and i64 %6519, 4294967295
  store i64 %6522, i64* %RAX, align 8, !tbaa !2428
  %6523 = load i64, i64* %PC
  %6524 = add i64 %6523, 1
  store i64 %6524, i64* %PC
  %6525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6527 = bitcast %union.anon* %6526 to i32*
  %6528 = load i32, i32* %6527, align 8, !tbaa !2452
  %6529 = sext i32 %6528 to i64
  %6530 = lshr i64 %6529, 32
  store i64 %6530, i64* %6525, align 8, !tbaa !2428
  %6531 = load i32, i32* %ECX
  %6532 = zext i32 %6531 to i64
  %6533 = load i64, i64* %PC
  %6534 = add i64 %6533, 2
  store i64 %6534, i64* %PC
  %6535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6536 = bitcast %union.anon* %6535 to i32*
  %6537 = load i32, i32* %6536, align 8, !tbaa !2452
  %6538 = zext i32 %6537 to i64
  %6539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %6540 = bitcast %union.anon* %6539 to i32*
  %6541 = load i32, i32* %6540, align 8, !tbaa !2452
  %6542 = zext i32 %6541 to i64
  %6543 = shl i64 %6532, 32
  %6544 = ashr exact i64 %6543, 32
  %6545 = shl nuw i64 %6542, 32
  %6546 = or i64 %6545, %6538
  %6547 = sdiv i64 %6546, %6544
  %6548 = shl i64 %6547, 32
  %6549 = ashr exact i64 %6548, 32
  %6550 = icmp eq i64 %6547, %6549
  br i1 %6550, label %6555, label %6551

; <label>:6551:                                   ; preds = %block_400d37
  %6552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6553 = load i64, i64* %6552, align 8, !tbaa !2428
  %6554 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6553, %struct.Memory* %MEMORY.21) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

; <label>:6555:                                   ; preds = %block_400d37
  %6556 = srem i64 %6546, %6544
  %6557 = getelementptr inbounds %union.anon, %union.anon* %6535, i64 0, i32 0
  %6558 = and i64 %6547, 4294967295
  store i64 %6558, i64* %6557, align 8, !tbaa !2428
  %6559 = getelementptr inbounds %union.anon, %union.anon* %6539, i64 0, i32 0
  %6560 = and i64 %6556, 4294967295
  store i64 %6560, i64* %6559, align 8, !tbaa !2428
  %6561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6561, align 1, !tbaa !2432
  %6562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %6562, align 1, !tbaa !2446
  %6563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6563, align 1, !tbaa !2447
  %6564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6564, align 1, !tbaa !2448
  %6565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6565, align 1, !tbaa !2449
  %6566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6566, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3: ; preds = %6551, %6555
  %6567 = phi %struct.Memory* [ %6554, %6551 ], [ %MEMORY.21, %6555 ]
  %6568 = load i32, i32* %EDX
  %6569 = zext i32 %6568 to i64
  %6570 = load i64, i64* %PC
  %6571 = add i64 %6570, 3
  store i64 %6571, i64* %PC
  %6572 = shl i64 %6569, 32
  %6573 = ashr exact i64 %6572, 32
  store i64 %6573, i64* %RDI, align 8, !tbaa !2428
  %6574 = load i64, i64* %RDI
  %6575 = mul i64 %6574, 4
  %6576 = add i64 %6575, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %6577 = load i64, i64* %PC
  %6578 = add i64 %6577, 7
  store i64 %6578, i64* %PC
  %6579 = inttoptr i64 %6576 to i32*
  %6580 = load i32, i32* %6579
  %6581 = zext i32 %6580 to i64
  store i64 %6581, i64* %RCX, align 8, !tbaa !2428
  %6582 = load i64, i64* %RBP
  %6583 = sub i64 %6582, 12
  %6584 = load i64, i64* %PC
  %6585 = add i64 %6584, 3
  store i64 %6585, i64* %PC
  %6586 = inttoptr i64 %6583 to i32*
  %6587 = load i32, i32* %6586
  %6588 = zext i32 %6587 to i64
  store i64 %6588, i64* %RDX, align 8, !tbaa !2428
  %6589 = load i64, i64* %RDX
  %6590 = load i64, i64* %PC
  %6591 = add i64 %6590, 3
  store i64 %6591, i64* %PC
  %6592 = trunc i64 %6589 to i32
  %6593 = add i32 1, %6592
  %6594 = zext i32 %6593 to i64
  store i64 %6594, i64* %RDX, align 8, !tbaa !2428
  %6595 = icmp ult i32 %6593, %6592
  %6596 = icmp ult i32 %6593, 1
  %6597 = or i1 %6595, %6596
  %6598 = zext i1 %6597 to i8
  %6599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6598, i8* %6599, align 1, !tbaa !2432
  %6600 = and i32 %6593, 255
  %6601 = call i32 @llvm.ctpop.i32(i32 %6600) #16
  %6602 = trunc i32 %6601 to i8
  %6603 = and i8 %6602, 1
  %6604 = xor i8 %6603, 1
  %6605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6604, i8* %6605, align 1, !tbaa !2446
  %6606 = xor i64 1, %6589
  %6607 = trunc i64 %6606 to i32
  %6608 = xor i32 %6607, %6593
  %6609 = lshr i32 %6608, 4
  %6610 = trunc i32 %6609 to i8
  %6611 = and i8 %6610, 1
  %6612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6611, i8* %6612, align 1, !tbaa !2447
  %6613 = icmp eq i32 %6593, 0
  %6614 = zext i1 %6613 to i8
  %6615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6614, i8* %6615, align 1, !tbaa !2448
  %6616 = lshr i32 %6593, 31
  %6617 = trunc i32 %6616 to i8
  %6618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6617, i8* %6618, align 1, !tbaa !2449
  %6619 = lshr i32 %6592, 31
  %6620 = xor i32 %6616, %6619
  %6621 = add nuw nsw i32 %6620, %6616
  %6622 = icmp eq i32 %6621, 2
  %6623 = zext i1 %6622 to i8
  %6624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6623, i8* %6624, align 1, !tbaa !2450
  %6625 = load i32, i32* %EDX
  %6626 = zext i32 %6625 to i64
  %6627 = load i64, i64* %PC
  %6628 = add i64 %6627, 3
  store i64 %6628, i64* %PC
  %6629 = shl i64 %6626, 32
  %6630 = ashr exact i64 %6629, 32
  store i64 %6630, i64* %RDI, align 8, !tbaa !2428
  %6631 = load i64, i64* %RDI
  %6632 = load i64, i64* %PC
  %6633 = add i64 %6632, 4
  store i64 %6633, i64* %PC
  %6634 = shl i64 %6631, 5
  %6635 = icmp slt i64 %6634, 0
  %6636 = shl i64 %6634, 1
  store i64 %6636, i64* %RDI, align 8, !tbaa !2428
  %6637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6638 = zext i1 %6635 to i8
  store i8 %6638, i8* %6637, align 1, !tbaa !2451
  %6639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6640 = trunc i64 %6636 to i32
  %6641 = and i32 %6640, 254
  %6642 = call i32 @llvm.ctpop.i32(i32 %6641) #16
  %6643 = trunc i32 %6642 to i8
  %6644 = and i8 %6643, 1
  %6645 = xor i8 %6644, 1
  store i8 %6645, i8* %6639, align 1, !tbaa !2451
  %6646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6646, align 1, !tbaa !2451
  %6647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6648 = icmp eq i64 %6636, 0
  %6649 = zext i1 %6648 to i8
  store i8 %6649, i8* %6647, align 1, !tbaa !2451
  %6650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6651 = lshr i64 %6636, 63
  %6652 = trunc i64 %6651 to i8
  store i8 %6652, i8* %6650, align 1, !tbaa !2451
  %6653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6653, align 1, !tbaa !2451
  %6654 = load i64, i64* %RBP
  %6655 = sub i64 %6654, 2704
  %6656 = load i64, i64* %PC
  %6657 = add i64 %6656, 7
  store i64 %6657, i64* %PC
  %6658 = inttoptr i64 %6655 to i64*
  %6659 = load i64, i64* %6658
  store i64 %6659, i64* %R8, align 8, !tbaa !2428
  %6660 = load i64, i64* %R8
  %6661 = load i64, i64* %RDI
  %6662 = load i64, i64* %PC
  %6663 = add i64 %6662, 3
  store i64 %6663, i64* %PC
  %6664 = add i64 %6661, %6660
  store i64 %6664, i64* %R8, align 8, !tbaa !2428
  %6665 = icmp ult i64 %6664, %6660
  %6666 = icmp ult i64 %6664, %6661
  %6667 = or i1 %6665, %6666
  %6668 = zext i1 %6667 to i8
  %6669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6668, i8* %6669, align 1, !tbaa !2432
  %6670 = trunc i64 %6664 to i32
  %6671 = and i32 %6670, 255
  %6672 = call i32 @llvm.ctpop.i32(i32 %6671) #16
  %6673 = trunc i32 %6672 to i8
  %6674 = and i8 %6673, 1
  %6675 = xor i8 %6674, 1
  %6676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6675, i8* %6676, align 1, !tbaa !2446
  %6677 = xor i64 %6661, %6660
  %6678 = xor i64 %6677, %6664
  %6679 = lshr i64 %6678, 4
  %6680 = trunc i64 %6679 to i8
  %6681 = and i8 %6680, 1
  %6682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6681, i8* %6682, align 1, !tbaa !2447
  %6683 = icmp eq i64 %6664, 0
  %6684 = zext i1 %6683 to i8
  %6685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6684, i8* %6685, align 1, !tbaa !2448
  %6686 = lshr i64 %6664, 63
  %6687 = trunc i64 %6686 to i8
  %6688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6687, i8* %6688, align 1, !tbaa !2449
  %6689 = lshr i64 %6660, 63
  %6690 = lshr i64 %6661, 63
  %6691 = xor i64 %6686, %6689
  %6692 = xor i64 %6686, %6690
  %6693 = add nuw nsw i64 %6691, %6692
  %6694 = icmp eq i64 %6693, 2
  %6695 = zext i1 %6694 to i8
  %6696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6695, i8* %6696, align 1, !tbaa !2450
  %6697 = load i64, i64* %RBP
  %6698 = sub i64 %6697, 4
  %6699 = load i64, i64* %PC
  %6700 = add i64 %6699, 3
  store i64 %6700, i64* %PC
  %6701 = inttoptr i64 %6698 to i32*
  %6702 = load i32, i32* %6701
  %6703 = zext i32 %6702 to i64
  store i64 %6703, i64* %RDX, align 8, !tbaa !2428
  %6704 = load i64, i64* %RDX
  %6705 = load i64, i64* %RBP
  %6706 = sub i64 %6705, 12
  %6707 = load i64, i64* %PC
  %6708 = add i64 %6707, 3
  store i64 %6708, i64* %PC
  %6709 = trunc i64 %6704 to i32
  %6710 = inttoptr i64 %6706 to i32*
  %6711 = load i32, i32* %6710
  %6712 = add i32 %6711, %6709
  %6713 = zext i32 %6712 to i64
  store i64 %6713, i64* %RDX, align 8, !tbaa !2428
  %6714 = icmp ult i32 %6712, %6709
  %6715 = icmp ult i32 %6712, %6711
  %6716 = or i1 %6714, %6715
  %6717 = zext i1 %6716 to i8
  %6718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6717, i8* %6718, align 1, !tbaa !2432
  %6719 = and i32 %6712, 255
  %6720 = call i32 @llvm.ctpop.i32(i32 %6719) #16
  %6721 = trunc i32 %6720 to i8
  %6722 = and i8 %6721, 1
  %6723 = xor i8 %6722, 1
  %6724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6723, i8* %6724, align 1, !tbaa !2446
  %6725 = xor i32 %6711, %6709
  %6726 = xor i32 %6725, %6712
  %6727 = lshr i32 %6726, 4
  %6728 = trunc i32 %6727 to i8
  %6729 = and i8 %6728, 1
  %6730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6729, i8* %6730, align 1, !tbaa !2447
  %6731 = icmp eq i32 %6712, 0
  %6732 = zext i1 %6731 to i8
  %6733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6732, i8* %6733, align 1, !tbaa !2448
  %6734 = lshr i32 %6712, 31
  %6735 = trunc i32 %6734 to i8
  %6736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6735, i8* %6736, align 1, !tbaa !2449
  %6737 = lshr i32 %6709, 31
  %6738 = lshr i32 %6711, 31
  %6739 = xor i32 %6734, %6737
  %6740 = xor i32 %6734, %6738
  %6741 = add nuw nsw i32 %6739, %6740
  %6742 = icmp eq i32 %6741, 2
  %6743 = zext i1 %6742 to i8
  %6744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6743, i8* %6744, align 1, !tbaa !2450
  %6745 = load i64, i64* %RDX
  %6746 = load i64, i64* %RBP
  %6747 = sub i64 %6746, 16
  %6748 = load i64, i64* %PC
  %6749 = add i64 %6748, 3
  store i64 %6749, i64* %PC
  %6750 = trunc i64 %6745 to i32
  %6751 = inttoptr i64 %6747 to i32*
  %6752 = load i32, i32* %6751
  %6753 = sub i32 %6750, %6752
  %6754 = zext i32 %6753 to i64
  store i64 %6754, i64* %RDX, align 8, !tbaa !2428
  %6755 = icmp ult i32 %6750, %6752
  %6756 = zext i1 %6755 to i8
  %6757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6756, i8* %6757, align 1, !tbaa !2432
  %6758 = and i32 %6753, 255
  %6759 = call i32 @llvm.ctpop.i32(i32 %6758) #16
  %6760 = trunc i32 %6759 to i8
  %6761 = and i8 %6760, 1
  %6762 = xor i8 %6761, 1
  %6763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6762, i8* %6763, align 1, !tbaa !2446
  %6764 = xor i32 %6752, %6750
  %6765 = xor i32 %6764, %6753
  %6766 = lshr i32 %6765, 4
  %6767 = trunc i32 %6766 to i8
  %6768 = and i8 %6767, 1
  %6769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6768, i8* %6769, align 1, !tbaa !2447
  %6770 = icmp eq i32 %6753, 0
  %6771 = zext i1 %6770 to i8
  %6772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6771, i8* %6772, align 1, !tbaa !2448
  %6773 = lshr i32 %6753, 31
  %6774 = trunc i32 %6773 to i8
  %6775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6774, i8* %6775, align 1, !tbaa !2449
  %6776 = lshr i32 %6750, 31
  %6777 = lshr i32 %6752, 31
  %6778 = xor i32 %6777, %6776
  %6779 = xor i32 %6773, %6776
  %6780 = add nuw nsw i32 %6779, %6778
  %6781 = icmp eq i32 %6780, 2
  %6782 = zext i1 %6781 to i8
  %6783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6782, i8* %6783, align 1, !tbaa !2450
  %6784 = load i32, i32* %EDX
  %6785 = zext i32 %6784 to i64
  %6786 = load i64, i64* %PC
  %6787 = add i64 %6786, 3
  store i64 %6787, i64* %PC
  %6788 = shl i64 %6785, 32
  %6789 = ashr exact i64 %6788, 32
  store i64 %6789, i64* %RDI, align 8, !tbaa !2428
  %6790 = load i64, i64* %R8
  %6791 = load i64, i64* %RDI
  %6792 = mul i64 %6791, 4
  %6793 = add i64 %6792, %6790
  %6794 = load i32, i32* %ECX
  %6795 = zext i32 %6794 to i64
  %6796 = load i64, i64* %PC
  %6797 = add i64 %6796, 4
  store i64 %6797, i64* %PC
  %6798 = inttoptr i64 %6793 to i32*
  store i32 %6794, i32* %6798
  br label %block_400db1

block_401464:                                     ; preds = %block_401457
  %6799 = add i64 %10689, 4
  store i64 %6799, i64* %PC
  %6800 = inttoptr i64 %10688 to i32*
  %6801 = load i32, i32* %6800
  %6802 = sext i32 %6801 to i64
  store i64 %6802, i64* %RAX, align 8, !tbaa !2428
  %6803 = load i64, i64* %RBP
  %6804 = load i64, i64* %RAX
  %6805 = mul i64 %6804, 4
  %6806 = add i64 %6803, -2640
  %6807 = add i64 %6806, %6805
  %6808 = load i64, i64* %PC
  %6809 = add i64 %6808, 11
  store i64 %6809, i64* %PC
  %6810 = inttoptr i64 %6807 to i32*
  store i32 0, i32* %6810
  %6811 = load i64, i64* %RBP
  %6812 = sub i64 %6811, 4
  %6813 = load i64, i64* %PC
  %6814 = add i64 %6813, 4
  store i64 %6814, i64* %PC
  %6815 = inttoptr i64 %6812 to i32*
  %6816 = load i32, i32* %6815
  %6817 = sext i32 %6816 to i64
  store i64 %6817, i64* %RAX, align 8, !tbaa !2428
  %6818 = load i64, i64* %RAX
  %6819 = mul i64 %6818, 4
  %6820 = add i64 %6819, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %6821 = load i64, i64* %PC
  %6822 = add i64 %6821, 8
  store i64 %6822, i64* %PC
  %6823 = inttoptr i64 %6820 to i32*
  %6824 = load i32, i32* %6823
  %6825 = sub i32 %6824, -1
  %6826 = icmp ult i32 %6824, -1
  %6827 = zext i1 %6826 to i8
  %6828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6827, i8* %6828, align 1, !tbaa !2432
  %6829 = and i32 %6825, 255
  %6830 = call i32 @llvm.ctpop.i32(i32 %6829) #16
  %6831 = trunc i32 %6830 to i8
  %6832 = and i8 %6831, 1
  %6833 = xor i8 %6832, 1
  %6834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6833, i8* %6834, align 1, !tbaa !2446
  %6835 = xor i32 %6824, -1
  %6836 = xor i32 %6835, %6825
  %6837 = lshr i32 %6836, 4
  %6838 = trunc i32 %6837 to i8
  %6839 = and i8 %6838, 1
  %6840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6839, i8* %6840, align 1, !tbaa !2447
  %6841 = icmp eq i32 %6825, 0
  %6842 = zext i1 %6841 to i8
  %6843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6842, i8* %6843, align 1, !tbaa !2448
  %6844 = lshr i32 %6825, 31
  %6845 = trunc i32 %6844 to i8
  %6846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6845, i8* %6846, align 1, !tbaa !2449
  %6847 = lshr i32 %6824, 31
  %6848 = xor i32 %6847, 1
  %6849 = xor i32 %6844, %6847
  %6850 = add nuw nsw i32 %6849, %6848
  %6851 = icmp eq i32 %6850, 2
  %6852 = zext i1 %6851 to i8
  %6853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6852, i8* %6853, align 1, !tbaa !2450
  %6854 = load i64, i64* %PC
  %6855 = add i64 %6854, 41
  %6856 = load i64, i64* %PC
  %6857 = add i64 %6856, 6
  %6858 = load i64, i64* %PC
  %6859 = add i64 %6858, 6
  store i64 %6859, i64* %PC
  %6860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6861 = load i8, i8* %6860, align 1, !tbaa !2448
  store i8 %6861, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6863 = icmp ne i8 %6861, 0
  %6864 = select i1 %6863, i64 %6855, i64 %6857
  store i64 %6864, i64* %6862, align 8, !tbaa !2428
  %6865 = load i8, i8* %BRANCH_TAKEN
  %6866 = icmp eq i8 %6865, 1
  %6867 = load i64, i64* %RBP
  %6868 = sub i64 %6867, 4
  %6869 = load i64, i64* %PC
  %6870 = add i64 %6869, 4
  store i64 %6870, i64* %PC
  %6871 = inttoptr i64 %6868 to i32*
  %6872 = load i32, i32* %6871
  %6873 = sext i32 %6872 to i64
  store i64 %6873, i64* %RAX, align 8, !tbaa !2428
  %6874 = load i64, i64* %RAX
  %6875 = mul i64 %6874, 4
  %6876 = add i64 %6875, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %6877 = load i64, i64* %PC
  br i1 %6866, label %block_4014a8, label %block_401485

block_400aaa:                                     ; preds = %block_400a74
  %6878 = sub i64 %6071, 1328
  %6879 = load i64, i64* %PC
  %6880 = add i64 %6879, 10
  store i64 %6880, i64* %PC
  %6881 = inttoptr i64 %6878 to i32*
  store i32 0, i32* %6881
  %6882 = load i64, i64* %RBP
  %6883 = sub i64 %6882, 1324
  %6884 = load i64, i64* %PC
  %6885 = add i64 %6884, 10
  store i64 %6885, i64* %PC
  %6886 = inttoptr i64 %6883 to i32*
  store i32 0, i32* %6886
  %6887 = load i64, i64* %RBP
  %6888 = sub i64 %6887, 1408
  %6889 = load i64, i64* %PC
  %6890 = add i64 %6889, 10
  store i64 %6890, i64* %PC
  %6891 = inttoptr i64 %6888 to i32*
  store i32 -1, i32* %6891
  %6892 = load i64, i64* %RBP
  %6893 = sub i64 %6892, 1404
  %6894 = load i64, i64* %PC
  %6895 = add i64 %6894, 10
  store i64 %6895, i64* %PC
  %6896 = inttoptr i64 %6893 to i32*
  store i32 0, i32* %6896
  %6897 = load i64, i64* %RBP
  %6898 = sub i64 %6897, 12
  %6899 = load i64, i64* %PC
  %6900 = add i64 %6899, 7
  store i64 %6900, i64* %PC
  %6901 = inttoptr i64 %6898 to i32*
  store i32 0, i32* %6901
  br label %block_400ad9

block_40185d:                                     ; preds = %block_401858, %block_4017e8
  %MEMORY.33 = phi %struct.Memory* [ %MEMORY.0, %block_401858 ], [ %MEMORY.1, %block_4017e8 ]
  %6902 = load i64, i64* %RSP
  %6903 = load i64, i64* %PC
  %6904 = add i64 %6903, 7
  store i64 %6904, i64* %PC
  %6905 = add i64 2608, %6902
  store i64 %6905, i64* %RSP, align 8, !tbaa !2428
  %6906 = icmp ult i64 %6905, %6902
  %6907 = icmp ult i64 %6905, 2608
  %6908 = or i1 %6906, %6907
  %6909 = zext i1 %6908 to i8
  %6910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6909, i8* %6910, align 1, !tbaa !2432
  %6911 = trunc i64 %6905 to i32
  %6912 = and i32 %6911, 255
  %6913 = call i32 @llvm.ctpop.i32(i32 %6912) #16
  %6914 = trunc i32 %6913 to i8
  %6915 = and i8 %6914, 1
  %6916 = xor i8 %6915, 1
  %6917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6916, i8* %6917, align 1, !tbaa !2446
  %6918 = xor i64 2608, %6902
  %6919 = xor i64 %6918, %6905
  %6920 = lshr i64 %6919, 4
  %6921 = trunc i64 %6920 to i8
  %6922 = and i8 %6921, 1
  %6923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6922, i8* %6923, align 1, !tbaa !2447
  %6924 = icmp eq i64 %6905, 0
  %6925 = zext i1 %6924 to i8
  %6926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6925, i8* %6926, align 1, !tbaa !2448
  %6927 = lshr i64 %6905, 63
  %6928 = trunc i64 %6927 to i8
  %6929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6928, i8* %6929, align 1, !tbaa !2449
  %6930 = lshr i64 %6902, 63
  %6931 = xor i64 %6927, %6930
  %6932 = add nuw nsw i64 %6931, %6927
  %6933 = icmp eq i64 %6932, 2
  %6934 = zext i1 %6933 to i8
  %6935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6934, i8* %6935, align 1, !tbaa !2450
  %6936 = load i64, i64* %PC
  %6937 = add i64 %6936, 1
  store i64 %6937, i64* %PC
  %6938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6939 = load i64, i64* %6938, align 8, !tbaa !2428
  %6940 = add i64 %6939, 8
  %6941 = inttoptr i64 %6939 to i64*
  %6942 = load i64, i64* %6941
  store i64 %6942, i64* %RBP, align 8, !tbaa !2428
  store i64 %6940, i64* %6938, align 8, !tbaa !2428
  %6943 = load i64, i64* %PC
  %6944 = add i64 %6943, 1
  store i64 %6944, i64* %PC
  %6945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6947 = load i64, i64* %6946, align 8, !tbaa !2428
  %6948 = inttoptr i64 %6947 to i64*
  %6949 = load i64, i64* %6948
  store i64 %6949, i64* %6945, align 8, !tbaa !2428
  %6950 = add i64 %6947, 8
  store i64 %6950, i64* %6946, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.33

block_400e5a:                                     ; preds = %block_400e55, %block_400b9d
  %MEMORY.34 = phi %struct.Memory* [ %MEMORY.13, %block_400e55 ], [ %MEMORY.38, %block_400b9d ]
  %6951 = load i64, i64* %RBP
  %6952 = sub i64 %6951, 12
  %6953 = load i64, i64* %PC
  %6954 = add i64 %6953, 3
  store i64 %6954, i64* %PC
  %6955 = inttoptr i64 %6952 to i32*
  %6956 = load i32, i32* %6955
  %6957 = zext i32 %6956 to i64
  store i64 %6957, i64* %RAX, align 8, !tbaa !2428
  %6958 = load i64, i64* %RBP
  %6959 = sub i64 %6958, 12
  %6960 = load i64, i64* %PC
  %6961 = add i64 %6960, 3
  store i64 %6961, i64* %PC
  %6962 = inttoptr i64 %6959 to i32*
  %6963 = load i32, i32* %6962
  %6964 = zext i32 %6963 to i64
  store i64 %6964, i64* %RCX, align 8, !tbaa !2428
  %6965 = load i64, i64* %RCX
  %6966 = load i64, i64* %PC
  %6967 = add i64 %6966, 3
  store i64 %6967, i64* %PC
  %6968 = trunc i64 %6965 to i32
  %6969 = add i32 1, %6968
  %6970 = zext i32 %6969 to i64
  store i64 %6970, i64* %RCX, align 8, !tbaa !2428
  %6971 = icmp ult i32 %6969, %6968
  %6972 = icmp ult i32 %6969, 1
  %6973 = or i1 %6971, %6972
  %6974 = zext i1 %6973 to i8
  %6975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6974, i8* %6975, align 1, !tbaa !2432
  %6976 = and i32 %6969, 255
  %6977 = call i32 @llvm.ctpop.i32(i32 %6976) #16
  %6978 = trunc i32 %6977 to i8
  %6979 = and i8 %6978, 1
  %6980 = xor i8 %6979, 1
  %6981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6980, i8* %6981, align 1, !tbaa !2446
  %6982 = xor i64 1, %6965
  %6983 = trunc i64 %6982 to i32
  %6984 = xor i32 %6983, %6969
  %6985 = lshr i32 %6984, 4
  %6986 = trunc i32 %6985 to i8
  %6987 = and i8 %6986, 1
  %6988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6987, i8* %6988, align 1, !tbaa !2447
  %6989 = icmp eq i32 %6969, 0
  %6990 = zext i1 %6989 to i8
  %6991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6990, i8* %6991, align 1, !tbaa !2448
  %6992 = lshr i32 %6969, 31
  %6993 = trunc i32 %6992 to i8
  %6994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6993, i8* %6994, align 1, !tbaa !2449
  %6995 = lshr i32 %6968, 31
  %6996 = xor i32 %6992, %6995
  %6997 = add nuw nsw i32 %6996, %6992
  %6998 = icmp eq i32 %6997, 2
  %6999 = zext i1 %6998 to i8
  %7000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6999, i8* %7000, align 1, !tbaa !2450
  %7001 = load i32, i32* %ECX
  %7002 = zext i32 %7001 to i64
  %7003 = load i64, i64* %PC
  %7004 = add i64 %7003, 3
  store i64 %7004, i64* %PC
  %7005 = shl i64 %7002, 32
  %7006 = ashr exact i64 %7005, 32
  store i64 %7006, i64* %RDX, align 8, !tbaa !2428
  %7007 = load i64, i64* %RAX
  %7008 = load i64, i64* %RBP
  %7009 = load i64, i64* %RDX
  %7010 = mul i64 %7009, 4
  %7011 = add i64 %7008, -1328
  %7012 = add i64 %7011, %7010
  %7013 = load i64, i64* %PC
  %7014 = add i64 %7013, 7
  store i64 %7014, i64* %PC
  %7015 = trunc i64 %7007 to i32
  %7016 = inttoptr i64 %7012 to i32*
  %7017 = load i32, i32* %7016
  %7018 = sub i32 %7015, %7017
  %7019 = zext i32 %7018 to i64
  store i64 %7019, i64* %RAX, align 8, !tbaa !2428
  %7020 = icmp ult i32 %7015, %7017
  %7021 = zext i1 %7020 to i8
  %7022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7021, i8* %7022, align 1, !tbaa !2432
  %7023 = and i32 %7018, 255
  %7024 = call i32 @llvm.ctpop.i32(i32 %7023) #16
  %7025 = trunc i32 %7024 to i8
  %7026 = and i8 %7025, 1
  %7027 = xor i8 %7026, 1
  %7028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7027, i8* %7028, align 1, !tbaa !2446
  %7029 = xor i32 %7017, %7015
  %7030 = xor i32 %7029, %7018
  %7031 = lshr i32 %7030, 4
  %7032 = trunc i32 %7031 to i8
  %7033 = and i8 %7032, 1
  %7034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7033, i8* %7034, align 1, !tbaa !2447
  %7035 = icmp eq i32 %7018, 0
  %7036 = zext i1 %7035 to i8
  %7037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7036, i8* %7037, align 1, !tbaa !2448
  %7038 = lshr i32 %7018, 31
  %7039 = trunc i32 %7038 to i8
  %7040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7039, i8* %7040, align 1, !tbaa !2449
  %7041 = lshr i32 %7015, 31
  %7042 = lshr i32 %7017, 31
  %7043 = xor i32 %7042, %7041
  %7044 = xor i32 %7038, %7041
  %7045 = add nuw nsw i32 %7044, %7043
  %7046 = icmp eq i32 %7045, 2
  %7047 = zext i1 %7046 to i8
  %7048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7047, i8* %7048, align 1, !tbaa !2450
  %7049 = load i64, i64* %RBP
  %7050 = sub i64 %7049, 12
  %7051 = load i64, i64* %PC
  %7052 = add i64 %7051, 3
  store i64 %7052, i64* %PC
  %7053 = inttoptr i64 %7050 to i32*
  %7054 = load i32, i32* %7053
  %7055 = zext i32 %7054 to i64
  store i64 %7055, i64* %RCX, align 8, !tbaa !2428
  %7056 = load i64, i64* %RCX
  %7057 = load i64, i64* %PC
  %7058 = add i64 %7057, 3
  store i64 %7058, i64* %PC
  %7059 = trunc i64 %7056 to i32
  %7060 = add i32 1, %7059
  %7061 = zext i32 %7060 to i64
  store i64 %7061, i64* %RCX, align 8, !tbaa !2428
  %7062 = icmp ult i32 %7060, %7059
  %7063 = icmp ult i32 %7060, 1
  %7064 = or i1 %7062, %7063
  %7065 = zext i1 %7064 to i8
  %7066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7065, i8* %7066, align 1, !tbaa !2432
  %7067 = and i32 %7060, 255
  %7068 = call i32 @llvm.ctpop.i32(i32 %7067) #16
  %7069 = trunc i32 %7068 to i8
  %7070 = and i8 %7069, 1
  %7071 = xor i8 %7070, 1
  %7072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7071, i8* %7072, align 1, !tbaa !2446
  %7073 = xor i64 1, %7056
  %7074 = trunc i64 %7073 to i32
  %7075 = xor i32 %7074, %7060
  %7076 = lshr i32 %7075, 4
  %7077 = trunc i32 %7076 to i8
  %7078 = and i8 %7077, 1
  %7079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7078, i8* %7079, align 1, !tbaa !2447
  %7080 = icmp eq i32 %7060, 0
  %7081 = zext i1 %7080 to i8
  %7082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7081, i8* %7082, align 1, !tbaa !2448
  %7083 = lshr i32 %7060, 31
  %7084 = trunc i32 %7083 to i8
  %7085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7084, i8* %7085, align 1, !tbaa !2449
  %7086 = lshr i32 %7059, 31
  %7087 = xor i32 %7083, %7086
  %7088 = add nuw nsw i32 %7087, %7083
  %7089 = icmp eq i32 %7088, 2
  %7090 = zext i1 %7089 to i8
  %7091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7090, i8* %7091, align 1, !tbaa !2450
  %7092 = load i32, i32* %ECX
  %7093 = zext i32 %7092 to i64
  %7094 = load i64, i64* %PC
  %7095 = add i64 %7094, 3
  store i64 %7095, i64* %PC
  %7096 = shl i64 %7093, 32
  %7097 = ashr exact i64 %7096, 32
  store i64 %7097, i64* %RDX, align 8, !tbaa !2428
  %7098 = load i64, i64* %RBP
  %7099 = load i64, i64* %RDX
  %7100 = mul i64 %7099, 4
  %7101 = add i64 %7098, -1408
  %7102 = add i64 %7101, %7100
  %7103 = load i32, i32* %EAX
  %7104 = zext i32 %7103 to i64
  %7105 = load i64, i64* %PC
  %7106 = add i64 %7105, 7
  store i64 %7106, i64* %PC
  %7107 = inttoptr i64 %7102 to i32*
  store i32 %7103, i32* %7107
  %7108 = load i64, i64* %RBP
  %7109 = sub i64 %7108, 12
  %7110 = load i64, i64* %PC
  %7111 = add i64 %7110, 4
  store i64 %7111, i64* %PC
  %7112 = inttoptr i64 %7109 to i32*
  %7113 = load i32, i32* %7112
  %7114 = sub i32 %7113, 16
  %7115 = icmp ult i32 %7113, 16
  %7116 = zext i1 %7115 to i8
  %7117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7116, i8* %7117, align 1, !tbaa !2432
  %7118 = and i32 %7114, 255
  %7119 = call i32 @llvm.ctpop.i32(i32 %7118) #16
  %7120 = trunc i32 %7119 to i8
  %7121 = and i8 %7120, 1
  %7122 = xor i8 %7121, 1
  %7123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7122, i8* %7123, align 1, !tbaa !2446
  %7124 = xor i32 %7113, 16
  %7125 = xor i32 %7124, %7114
  %7126 = lshr i32 %7125, 4
  %7127 = trunc i32 %7126 to i8
  %7128 = and i8 %7127, 1
  %7129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7128, i8* %7129, align 1, !tbaa !2447
  %7130 = icmp eq i32 %7114, 0
  %7131 = zext i1 %7130 to i8
  %7132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7131, i8* %7132, align 1, !tbaa !2448
  %7133 = lshr i32 %7114, 31
  %7134 = trunc i32 %7133 to i8
  %7135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7134, i8* %7135, align 1, !tbaa !2449
  %7136 = lshr i32 %7113, 31
  %7137 = xor i32 %7133, %7136
  %7138 = add nuw nsw i32 %7137, %7136
  %7139 = icmp eq i32 %7138, 2
  %7140 = zext i1 %7139 to i8
  %7141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7140, i8* %7141, align 1, !tbaa !2450
  %7142 = load i64, i64* %PC
  %7143 = add i64 %7142, 362
  %7144 = load i64, i64* %PC
  %7145 = add i64 %7144, 6
  %7146 = load i64, i64* %PC
  %7147 = add i64 %7146, 6
  store i64 %7147, i64* %PC
  %7148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7149 = load i8, i8* %7148, align 1, !tbaa !2449
  %7150 = icmp ne i8 %7149, 0
  %7151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7152 = load i8, i8* %7151, align 1, !tbaa !2450
  %7153 = icmp ne i8 %7152, 0
  %7154 = xor i1 %7150, %7153
  %7155 = xor i1 %7154, true
  %7156 = zext i1 %7155 to i8
  store i8 %7156, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7158 = select i1 %7154, i64 %7145, i64 %7143
  store i64 %7158, i64* %7157, align 8, !tbaa !2428
  %7159 = load i8, i8* %BRANCH_TAKEN
  %7160 = icmp eq i8 %7159, 1
  br i1 %7160, label %block_400feb, label %block_400e87

block_401664:                                     ; preds = %block_4015e8
  %7161 = load i64, i64* %PC
  %7162 = add i64 %7161, 5
  store i64 %7162, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %7163 = load i64, i64* %RBP
  %7164 = sub i64 %7163, 16
  %7165 = load i64, i64* %PC
  %7166 = add i64 %7165, 3
  store i64 %7166, i64* %PC
  %7167 = inttoptr i64 %7164 to i32*
  %7168 = load i32, i32* %7167
  %7169 = zext i32 %7168 to i64
  store i64 %7169, i64* %RCX, align 8, !tbaa !2428
  %7170 = load i64, i64* %RBP
  %7171 = sub i64 %7170, 2732
  %7172 = load i32, i32* %EAX
  %7173 = zext i32 %7172 to i64
  %7174 = load i64, i64* %PC
  %7175 = add i64 %7174, 6
  store i64 %7175, i64* %PC
  %7176 = inttoptr i64 %7171 to i32*
  store i32 %7172, i32* %7176
  %7177 = load i32, i32* %ECX
  %7178 = zext i32 %7177 to i64
  %7179 = load i64, i64* %PC
  %7180 = add i64 %7179, 2
  store i64 %7180, i64* %PC
  %7181 = and i64 %7178, 4294967295
  store i64 %7181, i64* %RAX, align 8, !tbaa !2428
  %7182 = load i64, i64* %PC
  %7183 = add i64 %7182, 1
  store i64 %7183, i64* %PC
  %7184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7186 = bitcast %union.anon* %7185 to i32*
  %7187 = load i32, i32* %7186, align 8, !tbaa !2452
  %7188 = sext i32 %7187 to i64
  %7189 = lshr i64 %7188, 32
  store i64 %7189, i64* %7184, align 8, !tbaa !2428
  %7190 = load i64, i64* %RBP
  %7191 = sub i64 %7190, 2732
  %7192 = load i64, i64* %PC
  %7193 = add i64 %7192, 6
  store i64 %7193, i64* %PC
  %7194 = inttoptr i64 %7191 to i32*
  %7195 = load i32, i32* %7194
  %7196 = zext i32 %7195 to i64
  store i64 %7196, i64* %RCX, align 8, !tbaa !2428
  %7197 = load i32, i32* %ECX
  %7198 = zext i32 %7197 to i64
  %7199 = load i64, i64* %PC
  %7200 = add i64 %7199, 2
  store i64 %7200, i64* %PC
  %7201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7202 = bitcast %union.anon* %7201 to i32*
  %7203 = load i32, i32* %7202, align 8, !tbaa !2452
  %7204 = zext i32 %7203 to i64
  %7205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %7206 = bitcast %union.anon* %7205 to i32*
  %7207 = load i32, i32* %7206, align 8, !tbaa !2452
  %7208 = zext i32 %7207 to i64
  %7209 = shl i64 %7198, 32
  %7210 = ashr exact i64 %7209, 32
  %7211 = shl nuw i64 %7208, 32
  %7212 = or i64 %7211, %7204
  %7213 = sdiv i64 %7212, %7210
  %7214 = shl i64 %7213, 32
  %7215 = ashr exact i64 %7214, 32
  %7216 = icmp eq i64 %7213, %7215
  br i1 %7216, label %7221, label %7217

; <label>:7217:                                   ; preds = %block_401664
  %7218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7219 = load i64, i64* %7218, align 8, !tbaa !2428
  %7220 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7219, %struct.Memory* %MEMORY.5) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

; <label>:7221:                                   ; preds = %block_401664
  %7222 = srem i64 %7212, %7210
  %7223 = getelementptr inbounds %union.anon, %union.anon* %7201, i64 0, i32 0
  %7224 = and i64 %7213, 4294967295
  store i64 %7224, i64* %7223, align 8, !tbaa !2428
  %7225 = getelementptr inbounds %union.anon, %union.anon* %7205, i64 0, i32 0
  %7226 = and i64 %7222, 4294967295
  store i64 %7226, i64* %7225, align 8, !tbaa !2428
  %7227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7227, align 1, !tbaa !2432
  %7228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %7228, align 1, !tbaa !2446
  %7229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7229, align 1, !tbaa !2447
  %7230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7230, align 1, !tbaa !2448
  %7231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %7231, align 1, !tbaa !2449
  %7232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7232, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2: ; preds = %7217, %7221
  %7233 = phi %struct.Memory* [ %7220, %7217 ], [ %MEMORY.5, %7221 ]
  %7234 = load i64, i64* %RBP
  %7235 = sub i64 %7234, 16
  %7236 = load i32, i32* %EDX
  %7237 = zext i32 %7236 to i64
  %7238 = load i64, i64* %PC
  %7239 = add i64 %7238, 3
  store i64 %7239, i64* %PC
  %7240 = inttoptr i64 %7235 to i32*
  store i32 %7236, i32* %7240
  %7241 = load i64, i64* %RBP
  %7242 = sub i64 %7241, 4
  %7243 = load i64, i64* %PC
  %7244 = add i64 %7243, 4
  store i64 %7244, i64* %PC
  %7245 = inttoptr i64 %7242 to i32*
  %7246 = load i32, i32* %7245
  %7247 = sext i32 %7246 to i64
  store i64 %7247, i64* %RSI, align 8, !tbaa !2428
  %7248 = load i64, i64* %RBP
  %7249 = load i64, i64* %RSI
  %7250 = mul i64 %7249, 4
  %7251 = add i64 %7248, -1568
  %7252 = add i64 %7251, %7250
  %7253 = load i64, i64* %PC
  %7254 = add i64 %7253, 8
  store i64 %7254, i64* %PC
  %7255 = inttoptr i64 %7252 to i32*
  %7256 = load i32, i32* %7255
  %7257 = sext i32 %7256 to i64
  store i64 %7257, i64* %RSI, align 8, !tbaa !2428
  %7258 = load i64, i64* %RBP
  %7259 = load i64, i64* %RSI
  %7260 = mul i64 %7259, 4
  %7261 = add i64 %7258, -2640
  %7262 = add i64 %7261, %7260
  %7263 = load i64, i64* %PC
  %7264 = add i64 %7263, 7
  store i64 %7264, i64* %PC
  %7265 = inttoptr i64 %7262 to i32*
  %7266 = load i32, i32* %7265
  %7267 = zext i32 %7266 to i64
  store i64 %7267, i64* %RDX, align 8, !tbaa !2428
  %7268 = load i64, i64* %RDX
  %7269 = load i64, i64* %RBP
  %7270 = sub i64 %7269, 16
  %7271 = load i64, i64* %PC
  %7272 = add i64 %7271, 3
  store i64 %7272, i64* %PC
  %7273 = trunc i64 %7268 to i32
  %7274 = inttoptr i64 %7270 to i32*
  %7275 = load i32, i32* %7274
  %7276 = sub i32 %7273, %7275
  %7277 = zext i32 %7276 to i64
  store i64 %7277, i64* %RDX, align 8, !tbaa !2428
  %7278 = icmp ult i32 %7273, %7275
  %7279 = zext i1 %7278 to i8
  %7280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7279, i8* %7280, align 1, !tbaa !2432
  %7281 = and i32 %7276, 255
  %7282 = call i32 @llvm.ctpop.i32(i32 %7281) #16
  %7283 = trunc i32 %7282 to i8
  %7284 = and i8 %7283, 1
  %7285 = xor i8 %7284, 1
  %7286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7285, i8* %7286, align 1, !tbaa !2446
  %7287 = xor i32 %7275, %7273
  %7288 = xor i32 %7287, %7276
  %7289 = lshr i32 %7288, 4
  %7290 = trunc i32 %7289 to i8
  %7291 = and i8 %7290, 1
  %7292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7291, i8* %7292, align 1, !tbaa !2447
  %7293 = icmp eq i32 %7276, 0
  %7294 = zext i1 %7293 to i8
  %7295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7294, i8* %7295, align 1, !tbaa !2448
  %7296 = lshr i32 %7276, 31
  %7297 = trunc i32 %7296 to i8
  %7298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7297, i8* %7298, align 1, !tbaa !2449
  %7299 = lshr i32 %7273, 31
  %7300 = lshr i32 %7275, 31
  %7301 = xor i32 %7300, %7299
  %7302 = xor i32 %7296, %7299
  %7303 = add nuw nsw i32 %7302, %7301
  %7304 = icmp eq i32 %7303, 2
  %7305 = zext i1 %7304 to i8
  %7306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7305, i8* %7306, align 1, !tbaa !2450
  %7307 = load i64, i64* %RDX
  %7308 = load i64, i64* %PC
  %7309 = add i64 %7308, 6
  store i64 %7309, i64* %PC
  %7310 = trunc i64 %7307 to i32
  %7311 = add i32 255, %7310
  %7312 = zext i32 %7311 to i64
  store i64 %7312, i64* %RDX, align 8, !tbaa !2428
  %7313 = icmp ult i32 %7311, %7310
  %7314 = icmp ult i32 %7311, 255
  %7315 = or i1 %7313, %7314
  %7316 = zext i1 %7315 to i8
  %7317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7316, i8* %7317, align 1, !tbaa !2432
  %7318 = and i32 %7311, 255
  %7319 = call i32 @llvm.ctpop.i32(i32 %7318) #16
  %7320 = trunc i32 %7319 to i8
  %7321 = and i8 %7320, 1
  %7322 = xor i8 %7321, 1
  %7323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7322, i8* %7323, align 1, !tbaa !2446
  %7324 = xor i64 255, %7307
  %7325 = trunc i64 %7324 to i32
  %7326 = xor i32 %7325, %7311
  %7327 = lshr i32 %7326, 4
  %7328 = trunc i32 %7327 to i8
  %7329 = and i8 %7328, 1
  %7330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7329, i8* %7330, align 1, !tbaa !2447
  %7331 = icmp eq i32 %7311, 0
  %7332 = zext i1 %7331 to i8
  %7333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7332, i8* %7333, align 1, !tbaa !2448
  %7334 = lshr i32 %7311, 31
  %7335 = trunc i32 %7334 to i8
  %7336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7335, i8* %7336, align 1, !tbaa !2449
  %7337 = lshr i32 %7310, 31
  %7338 = xor i32 %7334, %7337
  %7339 = add nuw nsw i32 %7338, %7334
  %7340 = icmp eq i32 %7339, 2
  %7341 = zext i1 %7340 to i8
  %7342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7341, i8* %7342, align 1, !tbaa !2450
  %7343 = load i32, i32* %EDX
  %7344 = zext i32 %7343 to i64
  %7345 = load i64, i64* %PC
  %7346 = add i64 %7345, 2
  store i64 %7346, i64* %PC
  %7347 = and i64 %7344, 4294967295
  store i64 %7347, i64* %RAX, align 8, !tbaa !2428
  %7348 = load i64, i64* %PC
  %7349 = add i64 %7348, 1
  store i64 %7349, i64* %PC
  %7350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7352 = bitcast %union.anon* %7351 to i32*
  %7353 = load i32, i32* %7352, align 8, !tbaa !2452
  %7354 = sext i32 %7353 to i64
  %7355 = lshr i64 %7354, 32
  store i64 %7355, i64* %7350, align 8, !tbaa !2428
  %7356 = load i32, i32* %ECX
  %7357 = zext i32 %7356 to i64
  %7358 = load i64, i64* %PC
  %7359 = add i64 %7358, 2
  store i64 %7359, i64* %PC
  %7360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7361 = bitcast %union.anon* %7360 to i32*
  %7362 = load i32, i32* %7361, align 8, !tbaa !2452
  %7363 = zext i32 %7362 to i64
  %7364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %7365 = bitcast %union.anon* %7364 to i32*
  %7366 = load i32, i32* %7365, align 8, !tbaa !2452
  %7367 = zext i32 %7366 to i64
  %7368 = shl i64 %7357, 32
  %7369 = ashr exact i64 %7368, 32
  %7370 = shl nuw i64 %7367, 32
  %7371 = or i64 %7370, %7363
  %7372 = sdiv i64 %7371, %7369
  %7373 = shl i64 %7372, 32
  %7374 = ashr exact i64 %7373, 32
  %7375 = icmp eq i64 %7372, %7374
  br i1 %7375, label %7380, label %7376

; <label>:7376:                                   ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %7377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7378 = load i64, i64* %7377, align 8, !tbaa !2428
  %7379 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7378, %struct.Memory* %7233) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:7380:                                   ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %7381 = srem i64 %7371, %7369
  %7382 = getelementptr inbounds %union.anon, %union.anon* %7360, i64 0, i32 0
  %7383 = and i64 %7372, 4294967295
  store i64 %7383, i64* %7382, align 8, !tbaa !2428
  %7384 = getelementptr inbounds %union.anon, %union.anon* %7364, i64 0, i32 0
  %7385 = and i64 %7381, 4294967295
  store i64 %7385, i64* %7384, align 8, !tbaa !2428
  %7386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7386, align 1, !tbaa !2432
  %7387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %7387, align 1, !tbaa !2446
  %7388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7388, align 1, !tbaa !2447
  %7389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7389, align 1, !tbaa !2448
  %7390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %7390, align 1, !tbaa !2449
  %7391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7391, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %7376, %7380
  %7392 = phi %struct.Memory* [ %7379, %7376 ], [ %7233, %7380 ]
  %7393 = load i32, i32* %EDX
  %7394 = zext i32 %7393 to i64
  %7395 = load i64, i64* %PC
  %7396 = add i64 %7395, 3
  store i64 %7396, i64* %PC
  %7397 = shl i64 %7394, 32
  %7398 = ashr exact i64 %7397, 32
  store i64 %7398, i64* %RSI, align 8, !tbaa !2428
  %7399 = load i64, i64* %RSI
  %7400 = mul i64 %7399, 4
  %7401 = add i64 %7400, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %7402 = load i64, i64* %PC
  %7403 = add i64 %7402, 7
  store i64 %7403, i64* %PC
  %7404 = inttoptr i64 %7401 to i32*
  %7405 = load i32, i32* %7404
  %7406 = zext i32 %7405 to i64
  store i64 %7406, i64* %RDX, align 8, !tbaa !2428
  %7407 = load i64, i64* %RBP
  %7408 = sub i64 %7407, 4
  %7409 = load i64, i64* %PC
  %7410 = add i64 %7409, 4
  store i64 %7410, i64* %PC
  %7411 = inttoptr i64 %7408 to i32*
  %7412 = load i32, i32* %7411
  %7413 = sext i32 %7412 to i64
  store i64 %7413, i64* %RSI, align 8, !tbaa !2428
  %7414 = load i64, i64* %RBP
  %7415 = load i64, i64* %RSI
  %7416 = mul i64 %7415, 4
  %7417 = add i64 %7414, -1568
  %7418 = add i64 %7417, %7416
  %7419 = load i64, i64* %PC
  %7420 = add i64 %7419, 8
  store i64 %7420, i64* %PC
  %7421 = inttoptr i64 %7418 to i32*
  %7422 = load i32, i32* %7421
  %7423 = sext i32 %7422 to i64
  store i64 %7423, i64* %RSI, align 8, !tbaa !2428
  %7424 = load i64, i64* %RBP
  %7425 = load i64, i64* %RSI
  %7426 = mul i64 %7425, 4
  %7427 = add i64 %7424, -2640
  %7428 = add i64 %7427, %7426
  %7429 = load i32, i32* %EDX
  %7430 = zext i32 %7429 to i64
  %7431 = load i64, i64* %PC
  %7432 = add i64 %7431, 7
  store i64 %7432, i64* %PC
  %7433 = inttoptr i64 %7428 to i32*
  store i32 %7429, i32* %7433
  %7434 = load i64, i64* %RBP
  %7435 = sub i64 %7434, 4
  %7436 = load i64, i64* %PC
  %7437 = add i64 %7436, 4
  store i64 %7437, i64* %PC
  %7438 = inttoptr i64 %7435 to i32*
  %7439 = load i32, i32* %7438
  %7440 = sext i32 %7439 to i64
  store i64 %7440, i64* %RSI, align 8, !tbaa !2428
  %7441 = load i64, i64* %RBP
  %7442 = load i64, i64* %RSI
  %7443 = mul i64 %7442, 4
  %7444 = add i64 %7441, -1568
  %7445 = add i64 %7444, %7443
  %7446 = load i64, i64* %PC
  %7447 = add i64 %7446, 8
  store i64 %7447, i64* %PC
  %7448 = inttoptr i64 %7445 to i32*
  %7449 = load i32, i32* %7448
  %7450 = sext i32 %7449 to i64
  store i64 %7450, i64* %RSI, align 8, !tbaa !2428
  %7451 = load i64, i64* %RBP
  %7452 = load i64, i64* %RSI
  %7453 = mul i64 %7452, 4
  %7454 = add i64 %7451, -2640
  %7455 = add i64 %7454, %7453
  %7456 = load i64, i64* %PC
  %7457 = add i64 %7456, 7
  store i64 %7457, i64* %PC
  %7458 = inttoptr i64 %7455 to i32*
  %7459 = load i32, i32* %7458
  %7460 = zext i32 %7459 to i64
  store i64 %7460, i64* %RDX, align 8, !tbaa !2428
  %7461 = load i64, i64* %RBP
  %7462 = sub i64 %7461, 4
  %7463 = load i64, i64* %PC
  %7464 = add i64 %7463, 4
  store i64 %7464, i64* %PC
  %7465 = inttoptr i64 %7462 to i32*
  %7466 = load i32, i32* %7465
  %7467 = sext i32 %7466 to i64
  store i64 %7467, i64* %RSI, align 8, !tbaa !2428
  %7468 = load i64, i64* %RBP
  %7469 = load i64, i64* %RSI
  %7470 = mul i64 %7469, 4
  %7471 = add i64 %7468, -1568
  %7472 = add i64 %7471, %7470
  %7473 = load i64, i64* %PC
  %7474 = add i64 %7473, 8
  store i64 %7474, i64* %PC
  %7475 = inttoptr i64 %7472 to i32*
  %7476 = load i32, i32* %7475
  %7477 = sext i32 %7476 to i64
  store i64 %7477, i64* %RSI, align 8, !tbaa !2428
  %7478 = load i64, i64* %RDX
  %7479 = load i64, i64* %RSI
  %7480 = mul i64 %7479, 4
  %7481 = add i64 %7480, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %7482 = load i64, i64* %PC
  %7483 = add i64 %7482, 7
  store i64 %7483, i64* %PC
  %7484 = trunc i64 %7478 to i32
  %7485 = inttoptr i64 %7481 to i32*
  %7486 = load i32, i32* %7485
  %7487 = xor i32 %7486, %7484
  %7488 = zext i32 %7487 to i64
  store i64 %7488, i64* %RDX, align 8, !tbaa !2428
  %7489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7489, align 1, !tbaa !2432
  %7490 = and i32 %7487, 255
  %7491 = call i32 @llvm.ctpop.i32(i32 %7490) #16
  %7492 = trunc i32 %7491 to i8
  %7493 = and i8 %7492, 1
  %7494 = xor i8 %7493, 1
  %7495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7494, i8* %7495, align 1, !tbaa !2446
  %7496 = icmp eq i32 %7487, 0
  %7497 = zext i1 %7496 to i8
  %7498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7497, i8* %7498, align 1, !tbaa !2448
  %7499 = lshr i32 %7487, 31
  %7500 = trunc i32 %7499 to i8
  %7501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7500, i8* %7501, align 1, !tbaa !2449
  %7502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7502, align 1, !tbaa !2450
  %7503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7503, align 1, !tbaa !2447
  %7504 = load i64, i64* %RSI
  %7505 = mul i64 %7504, 4
  %7506 = add i64 %7505, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %7507 = load i32, i32* %EDX
  %7508 = zext i32 %7507 to i64
  %7509 = load i64, i64* %PC
  %7510 = add i64 %7509, 7
  store i64 %7510, i64* %PC
  %7511 = inttoptr i64 %7506 to i32*
  store i32 %7507, i32* %7511
  br label %block_4016eb

block_40170a:                                     ; preds = %block_401703, %block_40175b
  %MEMORY.35 = phi %struct.Memory* [ %MEMORY.26, %block_401703 ], [ %MEMORY.7, %block_40175b ]
  %7512 = load i64, i64* %RBP
  %7513 = sub i64 %7512, 4
  %7514 = load i64, i64* %PC
  %7515 = add i64 %7514, 7
  store i64 %7515, i64* %PC
  %7516 = inttoptr i64 %7513 to i32*
  %7517 = load i32, i32* %7516
  %7518 = sub i32 %7517, 255
  %7519 = icmp ult i32 %7517, 255
  %7520 = zext i1 %7519 to i8
  %7521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7520, i8* %7521, align 1, !tbaa !2432
  %7522 = and i32 %7518, 255
  %7523 = call i32 @llvm.ctpop.i32(i32 %7522) #16
  %7524 = trunc i32 %7523 to i8
  %7525 = and i8 %7524, 1
  %7526 = xor i8 %7525, 1
  %7527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7526, i8* %7527, align 1, !tbaa !2446
  %7528 = xor i32 %7517, 255
  %7529 = xor i32 %7528, %7518
  %7530 = lshr i32 %7529, 4
  %7531 = trunc i32 %7530 to i8
  %7532 = and i8 %7531, 1
  %7533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7532, i8* %7533, align 1, !tbaa !2447
  %7534 = icmp eq i32 %7518, 0
  %7535 = zext i1 %7534 to i8
  %7536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7535, i8* %7536, align 1, !tbaa !2448
  %7537 = lshr i32 %7518, 31
  %7538 = trunc i32 %7537 to i8
  %7539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7538, i8* %7539, align 1, !tbaa !2449
  %7540 = lshr i32 %7517, 31
  %7541 = xor i32 %7537, %7540
  %7542 = add nuw nsw i32 %7541, %7540
  %7543 = icmp eq i32 %7542, 2
  %7544 = zext i1 %7543 to i8
  %7545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7544, i8* %7545, align 1, !tbaa !2450
  %7546 = load i64, i64* %PC
  %7547 = add i64 %7546, 93
  %7548 = load i64, i64* %PC
  %7549 = add i64 %7548, 6
  %7550 = load i64, i64* %PC
  %7551 = add i64 %7550, 6
  store i64 %7551, i64* %PC
  %7552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7553 = load i8, i8* %7552, align 1, !tbaa !2449
  %7554 = icmp ne i8 %7553, 0
  %7555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7556 = load i8, i8* %7555, align 1, !tbaa !2450
  %7557 = icmp ne i8 %7556, 0
  %7558 = xor i1 %7554, %7557
  %7559 = xor i1 %7558, true
  %7560 = zext i1 %7559 to i8
  store i8 %7560, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7562 = select i1 %7558, i64 %7549, i64 %7547
  store i64 %7562, i64* %7561, align 8, !tbaa !2428
  %7563 = load i8, i8* %BRANCH_TAKEN
  %7564 = icmp eq i8 %7563, 1
  br i1 %7564, label %block_40176e, label %block_401717

block_400c9a:                                     ; preds = %block_400c56
  %7565 = sub i64 %5937, 16
  %7566 = load i64, i64* %PC
  %7567 = add i64 %7566, 4
  store i64 %7567, i64* %PC
  %7568 = inttoptr i64 %7565 to i32*
  %7569 = load i32, i32* %7568
  %7570 = sext i32 %7569 to i64
  store i64 %7570, i64* %RAX, align 8, !tbaa !2428
  %7571 = load i64, i64* %RBP
  %7572 = load i64, i64* %RAX
  %7573 = mul i64 %7572, 4
  %7574 = add i64 %7571, -1328
  %7575 = add i64 %7574, %7573
  %7576 = load i64, i64* %PC
  %7577 = add i64 %7576, 7
  store i64 %7577, i64* %PC
  %7578 = inttoptr i64 %7575 to i32*
  %7579 = load i32, i32* %7578
  %7580 = zext i32 %7579 to i64
  store i64 %7580, i64* %RCX, align 8, !tbaa !2428
  %7581 = load i64, i64* %RCX
  %7582 = load i64, i64* %RBP
  %7583 = sub i64 %7582, 12
  %7584 = load i64, i64* %PC
  %7585 = add i64 %7584, 3
  store i64 %7585, i64* %PC
  %7586 = trunc i64 %7581 to i32
  %7587 = inttoptr i64 %7583 to i32*
  %7588 = load i32, i32* %7587
  %7589 = add i32 %7588, %7586
  %7590 = zext i32 %7589 to i64
  store i64 %7590, i64* %RCX, align 8, !tbaa !2428
  %7591 = icmp ult i32 %7589, %7586
  %7592 = icmp ult i32 %7589, %7588
  %7593 = or i1 %7591, %7592
  %7594 = zext i1 %7593 to i8
  %7595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7594, i8* %7595, align 1, !tbaa !2432
  %7596 = and i32 %7589, 255
  %7597 = call i32 @llvm.ctpop.i32(i32 %7596) #16
  %7598 = trunc i32 %7597 to i8
  %7599 = and i8 %7598, 1
  %7600 = xor i8 %7599, 1
  %7601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7600, i8* %7601, align 1, !tbaa !2446
  %7602 = xor i32 %7588, %7586
  %7603 = xor i32 %7602, %7589
  %7604 = lshr i32 %7603, 4
  %7605 = trunc i32 %7604 to i8
  %7606 = and i8 %7605, 1
  %7607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7606, i8* %7607, align 1, !tbaa !2447
  %7608 = icmp eq i32 %7589, 0
  %7609 = zext i1 %7608 to i8
  %7610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7609, i8* %7610, align 1, !tbaa !2448
  %7611 = lshr i32 %7589, 31
  %7612 = trunc i32 %7611 to i8
  %7613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7612, i8* %7613, align 1, !tbaa !2449
  %7614 = lshr i32 %7586, 31
  %7615 = lshr i32 %7588, 31
  %7616 = xor i32 %7611, %7614
  %7617 = xor i32 %7611, %7615
  %7618 = add nuw nsw i32 %7616, %7617
  %7619 = icmp eq i32 %7618, 2
  %7620 = zext i1 %7619 to i8
  %7621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7620, i8* %7621, align 1, !tbaa !2450
  %7622 = load i64, i64* %RCX
  %7623 = load i64, i64* %RBP
  %7624 = sub i64 %7623, 16
  %7625 = load i64, i64* %PC
  %7626 = add i64 %7625, 3
  store i64 %7626, i64* %PC
  %7627 = trunc i64 %7622 to i32
  %7628 = inttoptr i64 %7624 to i32*
  %7629 = load i32, i32* %7628
  %7630 = sub i32 %7627, %7629
  %7631 = zext i32 %7630 to i64
  store i64 %7631, i64* %RCX, align 8, !tbaa !2428
  %7632 = icmp ult i32 %7627, %7629
  %7633 = zext i1 %7632 to i8
  %7634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7633, i8* %7634, align 1, !tbaa !2432
  %7635 = and i32 %7630, 255
  %7636 = call i32 @llvm.ctpop.i32(i32 %7635) #16
  %7637 = trunc i32 %7636 to i8
  %7638 = and i8 %7637, 1
  %7639 = xor i8 %7638, 1
  %7640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7639, i8* %7640, align 1, !tbaa !2446
  %7641 = xor i32 %7629, %7627
  %7642 = xor i32 %7641, %7630
  %7643 = lshr i32 %7642, 4
  %7644 = trunc i32 %7643 to i8
  %7645 = and i8 %7644, 1
  %7646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7645, i8* %7646, align 1, !tbaa !2447
  %7647 = icmp eq i32 %7630, 0
  %7648 = zext i1 %7647 to i8
  %7649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7648, i8* %7649, align 1, !tbaa !2448
  %7650 = lshr i32 %7630, 31
  %7651 = trunc i32 %7650 to i8
  %7652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7651, i8* %7652, align 1, !tbaa !2449
  %7653 = lshr i32 %7627, 31
  %7654 = lshr i32 %7629, 31
  %7655 = xor i32 %7654, %7653
  %7656 = xor i32 %7650, %7653
  %7657 = add nuw nsw i32 %7656, %7655
  %7658 = icmp eq i32 %7657, 2
  %7659 = zext i1 %7658 to i8
  %7660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7659, i8* %7660, align 1, !tbaa !2450
  %7661 = load i64, i64* %RBP
  %7662 = sub i64 %7661, 12
  %7663 = load i64, i64* %PC
  %7664 = add i64 %7663, 3
  store i64 %7664, i64* %PC
  %7665 = inttoptr i64 %7662 to i32*
  %7666 = load i32, i32* %7665
  %7667 = zext i32 %7666 to i64
  store i64 %7667, i64* %RDX, align 8, !tbaa !2428
  %7668 = load i64, i64* %RDX
  %7669 = load i64, i64* %PC
  %7670 = add i64 %7669, 3
  store i64 %7670, i64* %PC
  %7671 = trunc i64 %7668 to i32
  %7672 = add i32 1, %7671
  %7673 = zext i32 %7672 to i64
  store i64 %7673, i64* %RDX, align 8, !tbaa !2428
  %7674 = icmp ult i32 %7672, %7671
  %7675 = icmp ult i32 %7672, 1
  %7676 = or i1 %7674, %7675
  %7677 = zext i1 %7676 to i8
  %7678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7677, i8* %7678, align 1, !tbaa !2432
  %7679 = and i32 %7672, 255
  %7680 = call i32 @llvm.ctpop.i32(i32 %7679) #16
  %7681 = trunc i32 %7680 to i8
  %7682 = and i8 %7681, 1
  %7683 = xor i8 %7682, 1
  %7684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7683, i8* %7684, align 1, !tbaa !2446
  %7685 = xor i64 1, %7668
  %7686 = trunc i64 %7685 to i32
  %7687 = xor i32 %7686, %7672
  %7688 = lshr i32 %7687, 4
  %7689 = trunc i32 %7688 to i8
  %7690 = and i8 %7689, 1
  %7691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7690, i8* %7691, align 1, !tbaa !2447
  %7692 = icmp eq i32 %7672, 0
  %7693 = zext i1 %7692 to i8
  %7694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7693, i8* %7694, align 1, !tbaa !2448
  %7695 = lshr i32 %7672, 31
  %7696 = trunc i32 %7695 to i8
  %7697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7696, i8* %7697, align 1, !tbaa !2449
  %7698 = lshr i32 %7671, 31
  %7699 = xor i32 %7695, %7698
  %7700 = add nuw nsw i32 %7699, %7695
  %7701 = icmp eq i32 %7700, 2
  %7702 = zext i1 %7701 to i8
  %7703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7702, i8* %7703, align 1, !tbaa !2450
  %7704 = load i32, i32* %EDX
  %7705 = zext i32 %7704 to i64
  %7706 = load i64, i64* %PC
  %7707 = add i64 %7706, 3
  store i64 %7707, i64* %PC
  %7708 = shl i64 %7705, 32
  %7709 = ashr exact i64 %7708, 32
  store i64 %7709, i64* %RAX, align 8, !tbaa !2428
  %7710 = load i64, i64* %RBP
  %7711 = load i64, i64* %RAX
  %7712 = mul i64 %7711, 4
  %7713 = add i64 %7710, -1328
  %7714 = add i64 %7713, %7712
  %7715 = load i32, i32* %ECX
  %7716 = zext i32 %7715 to i64
  %7717 = load i64, i64* %PC
  %7718 = add i64 %7717, 7
  store i64 %7718, i64* %PC
  %7719 = inttoptr i64 %7714 to i32*
  store i32 %7715, i32* %7719
  br label %block_400cbb

block_401858:                                     ; preds = %block_4017f4
  %7720 = load i64, i64* %PC
  %7721 = add i64 %7720, 5
  %7722 = load i64, i64* %PC
  %7723 = add i64 %7722, 5
  store i64 %7723, i64* %PC
  %7724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7721, i64* %7724, align 8, !tbaa !2428
  br label %block_40185d

block_401836:                                     ; preds = %block_401801
  %7725 = add i64 %11474, 11
  store i64 %7725, i64* %PC
  %7726 = inttoptr i64 %11473 to i32*
  store i32 0, i32* %7726
  br label %block_401845

block_400b2a:                                     ; preds = %block_400b16
  %7727 = load i64, i64* %RBP
  %7728 = sub i64 %7727, 1168
  %7729 = load i64, i64* %PC
  %7730 = add i64 %7729, 7
  store i64 %7730, i64* %PC
  store i64 %7728, i64* %RAX, align 8, !tbaa !2428
  %7731 = load i64, i64* %RBP
  %7732 = sub i64 %7731, 12
  %7733 = load i64, i64* %PC
  %7734 = add i64 %7733, 4
  store i64 %7734, i64* %PC
  %7735 = inttoptr i64 %7732 to i32*
  %7736 = load i32, i32* %7735
  %7737 = sext i32 %7736 to i64
  store i64 %7737, i64* %RCX, align 8, !tbaa !2428
  %7738 = load i64, i64* %RCX
  %7739 = load i64, i64* %PC
  %7740 = add i64 %7739, 4
  store i64 %7740, i64* %PC
  %7741 = shl i64 %7738, 5
  %7742 = icmp slt i64 %7741, 0
  %7743 = shl i64 %7741, 1
  store i64 %7743, i64* %RCX, align 8, !tbaa !2428
  %7744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7745 = zext i1 %7742 to i8
  store i8 %7745, i8* %7744, align 1, !tbaa !2451
  %7746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7747 = trunc i64 %7743 to i32
  %7748 = and i32 %7747, 254
  %7749 = call i32 @llvm.ctpop.i32(i32 %7748) #16
  %7750 = trunc i32 %7749 to i8
  %7751 = and i8 %7750, 1
  %7752 = xor i8 %7751, 1
  store i8 %7752, i8* %7746, align 1, !tbaa !2451
  %7753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7753, align 1, !tbaa !2451
  %7754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7755 = icmp eq i64 %7743, 0
  %7756 = zext i1 %7755 to i8
  store i8 %7756, i8* %7754, align 1, !tbaa !2451
  %7757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7758 = lshr i64 %7743, 63
  %7759 = trunc i64 %7758 to i8
  store i8 %7759, i8* %7757, align 1, !tbaa !2451
  %7760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7760, align 1, !tbaa !2451
  %7761 = load i64, i64* %RAX
  %7762 = load i64, i64* %PC
  %7763 = add i64 %7762, 3
  store i64 %7763, i64* %PC
  store i64 %7761, i64* %RDX, align 8, !tbaa !2428
  %7764 = load i64, i64* %RDX
  %7765 = load i64, i64* %RCX
  %7766 = load i64, i64* %PC
  %7767 = add i64 %7766, 3
  store i64 %7767, i64* %PC
  %7768 = add i64 %7765, %7764
  store i64 %7768, i64* %RDX, align 8, !tbaa !2428
  %7769 = icmp ult i64 %7768, %7764
  %7770 = icmp ult i64 %7768, %7765
  %7771 = or i1 %7769, %7770
  %7772 = zext i1 %7771 to i8
  %7773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7772, i8* %7773, align 1, !tbaa !2432
  %7774 = trunc i64 %7768 to i32
  %7775 = and i32 %7774, 255
  %7776 = call i32 @llvm.ctpop.i32(i32 %7775) #16
  %7777 = trunc i32 %7776 to i8
  %7778 = and i8 %7777, 1
  %7779 = xor i8 %7778, 1
  %7780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7779, i8* %7780, align 1, !tbaa !2446
  %7781 = xor i64 %7765, %7764
  %7782 = xor i64 %7781, %7768
  %7783 = lshr i64 %7782, 4
  %7784 = trunc i64 %7783 to i8
  %7785 = and i8 %7784, 1
  %7786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7785, i8* %7786, align 1, !tbaa !2447
  %7787 = icmp eq i64 %7768, 0
  %7788 = zext i1 %7787 to i8
  %7789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7788, i8* %7789, align 1, !tbaa !2448
  %7790 = lshr i64 %7768, 63
  %7791 = trunc i64 %7790 to i8
  %7792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7791, i8* %7792, align 1, !tbaa !2449
  %7793 = lshr i64 %7764, 63
  %7794 = lshr i64 %7765, 63
  %7795 = xor i64 %7790, %7793
  %7796 = xor i64 %7790, %7794
  %7797 = add nuw nsw i64 %7795, %7796
  %7798 = icmp eq i64 %7797, 2
  %7799 = zext i1 %7798 to i8
  %7800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7799, i8* %7800, align 1, !tbaa !2450
  %7801 = load i64, i64* %RBP
  %7802 = sub i64 %7801, 4
  %7803 = load i64, i64* %PC
  %7804 = add i64 %7803, 4
  store i64 %7804, i64* %PC
  %7805 = inttoptr i64 %7802 to i32*
  %7806 = load i32, i32* %7805
  %7807 = sext i32 %7806 to i64
  store i64 %7807, i64* %RCX, align 8, !tbaa !2428
  %7808 = load i64, i64* %RDX
  %7809 = load i64, i64* %RCX
  %7810 = mul i64 %7809, 4
  %7811 = add i64 %7810, %7808
  %7812 = load i64, i64* %PC
  %7813 = add i64 %7812, 3
  store i64 %7813, i64* %PC
  %7814 = inttoptr i64 %7811 to i32*
  %7815 = load i32, i32* %7814
  %7816 = zext i32 %7815 to i64
  store i64 %7816, i64* %RSI, align 8, !tbaa !2428
  %7817 = load i64, i64* %RBP
  %7818 = sub i64 %7817, 12
  %7819 = load i64, i64* %PC
  %7820 = add i64 %7819, 3
  store i64 %7820, i64* %PC
  %7821 = inttoptr i64 %7818 to i32*
  %7822 = load i32, i32* %7821
  %7823 = zext i32 %7822 to i64
  store i64 %7823, i64* %RDI, align 8, !tbaa !2428
  %7824 = load i64, i64* %RDI
  %7825 = load i64, i64* %PC
  %7826 = add i64 %7825, 3
  store i64 %7826, i64* %PC
  %7827 = trunc i64 %7824 to i32
  %7828 = add i32 1, %7827
  %7829 = zext i32 %7828 to i64
  store i64 %7829, i64* %RDI, align 8, !tbaa !2428
  %7830 = icmp ult i32 %7828, %7827
  %7831 = icmp ult i32 %7828, 1
  %7832 = or i1 %7830, %7831
  %7833 = zext i1 %7832 to i8
  %7834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7833, i8* %7834, align 1, !tbaa !2432
  %7835 = and i32 %7828, 255
  %7836 = call i32 @llvm.ctpop.i32(i32 %7835) #16
  %7837 = trunc i32 %7836 to i8
  %7838 = and i8 %7837, 1
  %7839 = xor i8 %7838, 1
  %7840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7839, i8* %7840, align 1, !tbaa !2446
  %7841 = xor i64 1, %7824
  %7842 = trunc i64 %7841 to i32
  %7843 = xor i32 %7842, %7828
  %7844 = lshr i32 %7843, 4
  %7845 = trunc i32 %7844 to i8
  %7846 = and i8 %7845, 1
  %7847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7846, i8* %7847, align 1, !tbaa !2447
  %7848 = icmp eq i32 %7828, 0
  %7849 = zext i1 %7848 to i8
  %7850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7849, i8* %7850, align 1, !tbaa !2448
  %7851 = lshr i32 %7828, 31
  %7852 = trunc i32 %7851 to i8
  %7853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7852, i8* %7853, align 1, !tbaa !2449
  %7854 = lshr i32 %7827, 31
  %7855 = xor i32 %7851, %7854
  %7856 = add nuw nsw i32 %7855, %7851
  %7857 = icmp eq i32 %7856, 2
  %7858 = zext i1 %7857 to i8
  %7859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7858, i8* %7859, align 1, !tbaa !2450
  %7860 = load i32, i32* %EDI
  %7861 = zext i32 %7860 to i64
  %7862 = load i64, i64* %PC
  %7863 = add i64 %7862, 3
  store i64 %7863, i64* %PC
  %7864 = shl i64 %7861, 32
  %7865 = ashr exact i64 %7864, 32
  store i64 %7865, i64* %RCX, align 8, !tbaa !2428
  %7866 = load i64, i64* %RCX
  %7867 = load i64, i64* %PC
  %7868 = add i64 %7867, 4
  store i64 %7868, i64* %PC
  %7869 = shl i64 %7866, 5
  %7870 = icmp slt i64 %7869, 0
  %7871 = shl i64 %7869, 1
  store i64 %7871, i64* %RCX, align 8, !tbaa !2428
  %7872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7873 = zext i1 %7870 to i8
  store i8 %7873, i8* %7872, align 1, !tbaa !2451
  %7874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7875 = trunc i64 %7871 to i32
  %7876 = and i32 %7875, 254
  %7877 = call i32 @llvm.ctpop.i32(i32 %7876) #16
  %7878 = trunc i32 %7877 to i8
  %7879 = and i8 %7878, 1
  %7880 = xor i8 %7879, 1
  store i8 %7880, i8* %7874, align 1, !tbaa !2451
  %7881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7881, align 1, !tbaa !2451
  %7882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7883 = icmp eq i64 %7871, 0
  %7884 = zext i1 %7883 to i8
  store i8 %7884, i8* %7882, align 1, !tbaa !2451
  %7885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7886 = lshr i64 %7871, 63
  %7887 = trunc i64 %7886 to i8
  store i8 %7887, i8* %7885, align 1, !tbaa !2451
  %7888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7888, align 1, !tbaa !2451
  %7889 = load i64, i64* %RAX
  %7890 = load i64, i64* %PC
  %7891 = add i64 %7890, 3
  store i64 %7891, i64* %PC
  store i64 %7889, i64* %RDX, align 8, !tbaa !2428
  %7892 = load i64, i64* %RDX
  %7893 = load i64, i64* %RCX
  %7894 = load i64, i64* %PC
  %7895 = add i64 %7894, 3
  store i64 %7895, i64* %PC
  %7896 = add i64 %7893, %7892
  store i64 %7896, i64* %RDX, align 8, !tbaa !2428
  %7897 = icmp ult i64 %7896, %7892
  %7898 = icmp ult i64 %7896, %7893
  %7899 = or i1 %7897, %7898
  %7900 = zext i1 %7899 to i8
  %7901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7900, i8* %7901, align 1, !tbaa !2432
  %7902 = trunc i64 %7896 to i32
  %7903 = and i32 %7902, 255
  %7904 = call i32 @llvm.ctpop.i32(i32 %7903) #16
  %7905 = trunc i32 %7904 to i8
  %7906 = and i8 %7905, 1
  %7907 = xor i8 %7906, 1
  %7908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7907, i8* %7908, align 1, !tbaa !2446
  %7909 = xor i64 %7893, %7892
  %7910 = xor i64 %7909, %7896
  %7911 = lshr i64 %7910, 4
  %7912 = trunc i64 %7911 to i8
  %7913 = and i8 %7912, 1
  %7914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7913, i8* %7914, align 1, !tbaa !2447
  %7915 = icmp eq i64 %7896, 0
  %7916 = zext i1 %7915 to i8
  %7917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7916, i8* %7917, align 1, !tbaa !2448
  %7918 = lshr i64 %7896, 63
  %7919 = trunc i64 %7918 to i8
  %7920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7919, i8* %7920, align 1, !tbaa !2449
  %7921 = lshr i64 %7892, 63
  %7922 = lshr i64 %7893, 63
  %7923 = xor i64 %7918, %7921
  %7924 = xor i64 %7918, %7922
  %7925 = add nuw nsw i64 %7923, %7924
  %7926 = icmp eq i64 %7925, 2
  %7927 = zext i1 %7926 to i8
  %7928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7927, i8* %7928, align 1, !tbaa !2450
  %7929 = load i64, i64* %RBP
  %7930 = sub i64 %7929, 4
  %7931 = load i64, i64* %PC
  %7932 = add i64 %7931, 4
  store i64 %7932, i64* %PC
  %7933 = inttoptr i64 %7930 to i32*
  %7934 = load i32, i32* %7933
  %7935 = sext i32 %7934 to i64
  store i64 %7935, i64* %RCX, align 8, !tbaa !2428
  %7936 = load i64, i64* %RDX
  %7937 = load i64, i64* %RCX
  %7938 = mul i64 %7937, 4
  %7939 = add i64 %7938, %7936
  %7940 = load i32, i32* %ESI
  %7941 = zext i32 %7940 to i64
  %7942 = load i64, i64* %PC
  %7943 = add i64 %7942, 3
  store i64 %7943, i64* %PC
  %7944 = inttoptr i64 %7939 to i32*
  store i32 %7940, i32* %7944
  %7945 = load i64, i64* %RBP
  %7946 = sub i64 %7945, 12
  %7947 = load i64, i64* %PC
  %7948 = add i64 %7947, 4
  store i64 %7948, i64* %PC
  %7949 = inttoptr i64 %7946 to i32*
  %7950 = load i32, i32* %7949
  %7951 = sext i32 %7950 to i64
  store i64 %7951, i64* %RCX, align 8, !tbaa !2428
  %7952 = load i64, i64* %RCX
  %7953 = load i64, i64* %PC
  %7954 = add i64 %7953, 4
  store i64 %7954, i64* %PC
  %7955 = shl i64 %7952, 5
  %7956 = icmp slt i64 %7955, 0
  %7957 = shl i64 %7955, 1
  store i64 %7957, i64* %RCX, align 8, !tbaa !2428
  %7958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7959 = zext i1 %7956 to i8
  store i8 %7959, i8* %7958, align 1, !tbaa !2451
  %7960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7961 = trunc i64 %7957 to i32
  %7962 = and i32 %7961, 254
  %7963 = call i32 @llvm.ctpop.i32(i32 %7962) #16
  %7964 = trunc i32 %7963 to i8
  %7965 = and i8 %7964, 1
  %7966 = xor i8 %7965, 1
  store i8 %7966, i8* %7960, align 1, !tbaa !2451
  %7967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7967, align 1, !tbaa !2451
  %7968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7969 = icmp eq i64 %7957, 0
  %7970 = zext i1 %7969 to i8
  store i8 %7970, i8* %7968, align 1, !tbaa !2451
  %7971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7972 = lshr i64 %7957, 63
  %7973 = trunc i64 %7972 to i8
  store i8 %7973, i8* %7971, align 1, !tbaa !2451
  %7974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7974, align 1, !tbaa !2451
  %7975 = load i64, i64* %RAX
  %7976 = load i64, i64* %PC
  %7977 = add i64 %7976, 3
  store i64 %7977, i64* %PC
  store i64 %7975, i64* %RDX, align 8, !tbaa !2428
  %7978 = load i64, i64* %RDX
  %7979 = load i64, i64* %RCX
  %7980 = load i64, i64* %PC
  %7981 = add i64 %7980, 3
  store i64 %7981, i64* %PC
  %7982 = add i64 %7979, %7978
  store i64 %7982, i64* %RDX, align 8, !tbaa !2428
  %7983 = icmp ult i64 %7982, %7978
  %7984 = icmp ult i64 %7982, %7979
  %7985 = or i1 %7983, %7984
  %7986 = zext i1 %7985 to i8
  %7987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7986, i8* %7987, align 1, !tbaa !2432
  %7988 = trunc i64 %7982 to i32
  %7989 = and i32 %7988, 255
  %7990 = call i32 @llvm.ctpop.i32(i32 %7989) #16
  %7991 = trunc i32 %7990 to i8
  %7992 = and i8 %7991, 1
  %7993 = xor i8 %7992, 1
  %7994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7993, i8* %7994, align 1, !tbaa !2446
  %7995 = xor i64 %7979, %7978
  %7996 = xor i64 %7995, %7982
  %7997 = lshr i64 %7996, 4
  %7998 = trunc i64 %7997 to i8
  %7999 = and i8 %7998, 1
  %8000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7999, i8* %8000, align 1, !tbaa !2447
  %8001 = icmp eq i64 %7982, 0
  %8002 = zext i1 %8001 to i8
  %8003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8002, i8* %8003, align 1, !tbaa !2448
  %8004 = lshr i64 %7982, 63
  %8005 = trunc i64 %8004 to i8
  %8006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8005, i8* %8006, align 1, !tbaa !2449
  %8007 = lshr i64 %7978, 63
  %8008 = lshr i64 %7979, 63
  %8009 = xor i64 %8004, %8007
  %8010 = xor i64 %8004, %8008
  %8011 = add nuw nsw i64 %8009, %8010
  %8012 = icmp eq i64 %8011, 2
  %8013 = zext i1 %8012 to i8
  %8014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8013, i8* %8014, align 1, !tbaa !2450
  %8015 = load i64, i64* %RBP
  %8016 = sub i64 %8015, 4
  %8017 = load i64, i64* %PC
  %8018 = add i64 %8017, 4
  store i64 %8018, i64* %PC
  %8019 = inttoptr i64 %8016 to i32*
  %8020 = load i32, i32* %8019
  %8021 = sext i32 %8020 to i64
  store i64 %8021, i64* %RCX, align 8, !tbaa !2428
  %8022 = load i64, i64* %RDX
  %8023 = load i64, i64* %RCX
  %8024 = mul i64 %8023, 4
  %8025 = add i64 %8024, %8022
  %8026 = load i64, i64* %PC
  %8027 = add i64 %8026, 4
  store i64 %8027, i64* %PC
  %8028 = inttoptr i64 %8025 to i32*
  %8029 = load i32, i32* %8028
  %8030 = sext i32 %8029 to i64
  store i64 %8030, i64* %RCX, align 8, !tbaa !2428
  %8031 = load i64, i64* %RCX
  %8032 = mul i64 %8031, 4
  %8033 = add i64 %8032, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %8034 = load i64, i64* %PC
  %8035 = add i64 %8034, 7
  store i64 %8035, i64* %PC
  %8036 = inttoptr i64 %8033 to i32*
  %8037 = load i32, i32* %8036
  %8038 = zext i32 %8037 to i64
  store i64 %8038, i64* %RSI, align 8, !tbaa !2428
  %8039 = load i64, i64* %RBP
  %8040 = sub i64 %8039, 12
  %8041 = load i64, i64* %PC
  %8042 = add i64 %8041, 4
  store i64 %8042, i64* %PC
  %8043 = inttoptr i64 %8040 to i32*
  %8044 = load i32, i32* %8043
  %8045 = sext i32 %8044 to i64
  store i64 %8045, i64* %RCX, align 8, !tbaa !2428
  %8046 = load i64, i64* %RCX
  %8047 = load i64, i64* %PC
  %8048 = add i64 %8047, 4
  store i64 %8048, i64* %PC
  %8049 = shl i64 %8046, 5
  %8050 = icmp slt i64 %8049, 0
  %8051 = shl i64 %8049, 1
  store i64 %8051, i64* %RCX, align 8, !tbaa !2428
  %8052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8053 = zext i1 %8050 to i8
  store i8 %8053, i8* %8052, align 1, !tbaa !2451
  %8054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8055 = trunc i64 %8051 to i32
  %8056 = and i32 %8055, 254
  %8057 = call i32 @llvm.ctpop.i32(i32 %8056) #16
  %8058 = trunc i32 %8057 to i8
  %8059 = and i8 %8058, 1
  %8060 = xor i8 %8059, 1
  store i8 %8060, i8* %8054, align 1, !tbaa !2451
  %8061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8061, align 1, !tbaa !2451
  %8062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8063 = icmp eq i64 %8051, 0
  %8064 = zext i1 %8063 to i8
  store i8 %8064, i8* %8062, align 1, !tbaa !2451
  %8065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8066 = lshr i64 %8051, 63
  %8067 = trunc i64 %8066 to i8
  store i8 %8067, i8* %8065, align 1, !tbaa !2451
  %8068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8068, align 1, !tbaa !2451
  %8069 = load i64, i64* %RAX
  %8070 = load i64, i64* %RCX
  %8071 = load i64, i64* %PC
  %8072 = add i64 %8071, 3
  store i64 %8072, i64* %PC
  %8073 = add i64 %8070, %8069
  store i64 %8073, i64* %RAX, align 8, !tbaa !2428
  %8074 = icmp ult i64 %8073, %8069
  %8075 = icmp ult i64 %8073, %8070
  %8076 = or i1 %8074, %8075
  %8077 = zext i1 %8076 to i8
  %8078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8077, i8* %8078, align 1, !tbaa !2432
  %8079 = trunc i64 %8073 to i32
  %8080 = and i32 %8079, 255
  %8081 = call i32 @llvm.ctpop.i32(i32 %8080) #16
  %8082 = trunc i32 %8081 to i8
  %8083 = and i8 %8082, 1
  %8084 = xor i8 %8083, 1
  %8085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8084, i8* %8085, align 1, !tbaa !2446
  %8086 = xor i64 %8070, %8069
  %8087 = xor i64 %8086, %8073
  %8088 = lshr i64 %8087, 4
  %8089 = trunc i64 %8088 to i8
  %8090 = and i8 %8089, 1
  %8091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8090, i8* %8091, align 1, !tbaa !2447
  %8092 = icmp eq i64 %8073, 0
  %8093 = zext i1 %8092 to i8
  %8094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8093, i8* %8094, align 1, !tbaa !2448
  %8095 = lshr i64 %8073, 63
  %8096 = trunc i64 %8095 to i8
  %8097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8096, i8* %8097, align 1, !tbaa !2449
  %8098 = lshr i64 %8069, 63
  %8099 = lshr i64 %8070, 63
  %8100 = xor i64 %8095, %8098
  %8101 = xor i64 %8095, %8099
  %8102 = add nuw nsw i64 %8100, %8101
  %8103 = icmp eq i64 %8102, 2
  %8104 = zext i1 %8103 to i8
  %8105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8104, i8* %8105, align 1, !tbaa !2450
  %8106 = load i64, i64* %RBP
  %8107 = sub i64 %8106, 4
  %8108 = load i64, i64* %PC
  %8109 = add i64 %8108, 4
  store i64 %8109, i64* %PC
  %8110 = inttoptr i64 %8107 to i32*
  %8111 = load i32, i32* %8110
  %8112 = sext i32 %8111 to i64
  store i64 %8112, i64* %RCX, align 8, !tbaa !2428
  %8113 = load i64, i64* %RAX
  %8114 = load i64, i64* %RCX
  %8115 = mul i64 %8114, 4
  %8116 = add i64 %8115, %8113
  %8117 = load i32, i32* %ESI
  %8118 = zext i32 %8117 to i64
  %8119 = load i64, i64* %PC
  %8120 = add i64 %8119, 3
  store i64 %8120, i64* %PC
  %8121 = inttoptr i64 %8116 to i32*
  store i32 %8117, i32* %8121
  %8122 = load i64, i64* %RBP
  %8123 = sub i64 %8122, 4
  %8124 = load i64, i64* %PC
  %8125 = add i64 %8124, 3
  store i64 %8125, i64* %PC
  %8126 = inttoptr i64 %8123 to i32*
  %8127 = load i32, i32* %8126
  %8128 = zext i32 %8127 to i64
  store i64 %8128, i64* %RAX, align 8, !tbaa !2428
  %8129 = load i64, i64* %RAX
  %8130 = load i64, i64* %PC
  %8131 = add i64 %8130, 3
  store i64 %8131, i64* %PC
  %8132 = trunc i64 %8129 to i32
  %8133 = add i32 1, %8132
  %8134 = zext i32 %8133 to i64
  store i64 %8134, i64* %RAX, align 8, !tbaa !2428
  %8135 = icmp ult i32 %8133, %8132
  %8136 = icmp ult i32 %8133, 1
  %8137 = or i1 %8135, %8136
  %8138 = zext i1 %8137 to i8
  %8139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8138, i8* %8139, align 1, !tbaa !2432
  %8140 = and i32 %8133, 255
  %8141 = call i32 @llvm.ctpop.i32(i32 %8140) #16
  %8142 = trunc i32 %8141 to i8
  %8143 = and i8 %8142, 1
  %8144 = xor i8 %8143, 1
  %8145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8144, i8* %8145, align 1, !tbaa !2446
  %8146 = xor i64 1, %8129
  %8147 = trunc i64 %8146 to i32
  %8148 = xor i32 %8147, %8133
  %8149 = lshr i32 %8148, 4
  %8150 = trunc i32 %8149 to i8
  %8151 = and i8 %8150, 1
  %8152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8151, i8* %8152, align 1, !tbaa !2447
  %8153 = icmp eq i32 %8133, 0
  %8154 = zext i1 %8153 to i8
  %8155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8154, i8* %8155, align 1, !tbaa !2448
  %8156 = lshr i32 %8133, 31
  %8157 = trunc i32 %8156 to i8
  %8158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8157, i8* %8158, align 1, !tbaa !2449
  %8159 = lshr i32 %8132, 31
  %8160 = xor i32 %8156, %8159
  %8161 = add nuw nsw i32 %8160, %8156
  %8162 = icmp eq i32 %8161, 2
  %8163 = zext i1 %8162 to i8
  %8164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8163, i8* %8164, align 1, !tbaa !2450
  %8165 = load i64, i64* %RBP
  %8166 = sub i64 %8165, 4
  %8167 = load i32, i32* %EAX
  %8168 = zext i32 %8167 to i64
  %8169 = load i64, i64* %PC
  %8170 = add i64 %8169, 3
  store i64 %8170, i64* %PC
  %8171 = inttoptr i64 %8166 to i32*
  store i32 %8167, i32* %8171
  %8172 = load i64, i64* %PC
  %8173 = sub i64 %8172, 130
  %8174 = load i64, i64* %PC
  %8175 = add i64 %8174, 5
  store i64 %8175, i64* %PC
  %8176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8173, i64* %8176, align 8, !tbaa !2428
  br label %block_400b16

block_401062:                                     ; preds = %block_40104e
  %8177 = sub i64 %9175, 1168
  %8178 = load i64, i64* %PC
  %8179 = add i64 %8178, 7
  store i64 %8179, i64* %PC
  store i64 %8177, i64* %RAX, align 8, !tbaa !2428
  %8180 = load i64, i64* %RBP
  %8181 = sub i64 %8180, 12
  %8182 = load i64, i64* %PC
  %8183 = add i64 %8182, 4
  store i64 %8183, i64* %PC
  %8184 = inttoptr i64 %8181 to i32*
  %8185 = load i32, i32* %8184
  %8186 = sext i32 %8185 to i64
  store i64 %8186, i64* %RCX, align 8, !tbaa !2428
  %8187 = load i64, i64* %RCX
  %8188 = load i64, i64* %PC
  %8189 = add i64 %8188, 4
  store i64 %8189, i64* %PC
  %8190 = shl i64 %8187, 5
  %8191 = icmp slt i64 %8190, 0
  %8192 = shl i64 %8190, 1
  store i64 %8192, i64* %RCX, align 8, !tbaa !2428
  %8193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8194 = zext i1 %8191 to i8
  store i8 %8194, i8* %8193, align 1, !tbaa !2451
  %8195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8196 = trunc i64 %8192 to i32
  %8197 = and i32 %8196, 254
  %8198 = call i32 @llvm.ctpop.i32(i32 %8197) #16
  %8199 = trunc i32 %8198 to i8
  %8200 = and i8 %8199, 1
  %8201 = xor i8 %8200, 1
  store i8 %8201, i8* %8195, align 1, !tbaa !2451
  %8202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8202, align 1, !tbaa !2451
  %8203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8204 = icmp eq i64 %8192, 0
  %8205 = zext i1 %8204 to i8
  store i8 %8205, i8* %8203, align 1, !tbaa !2451
  %8206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8207 = lshr i64 %8192, 63
  %8208 = trunc i64 %8207 to i8
  store i8 %8208, i8* %8206, align 1, !tbaa !2451
  %8209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8209, align 1, !tbaa !2451
  %8210 = load i64, i64* %RAX
  %8211 = load i64, i64* %PC
  %8212 = add i64 %8211, 3
  store i64 %8212, i64* %PC
  store i64 %8210, i64* %RDX, align 8, !tbaa !2428
  %8213 = load i64, i64* %RDX
  %8214 = load i64, i64* %RCX
  %8215 = load i64, i64* %PC
  %8216 = add i64 %8215, 3
  store i64 %8216, i64* %PC
  %8217 = add i64 %8214, %8213
  store i64 %8217, i64* %RDX, align 8, !tbaa !2428
  %8218 = icmp ult i64 %8217, %8213
  %8219 = icmp ult i64 %8217, %8214
  %8220 = or i1 %8218, %8219
  %8221 = zext i1 %8220 to i8
  %8222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8221, i8* %8222, align 1, !tbaa !2432
  %8223 = trunc i64 %8217 to i32
  %8224 = and i32 %8223, 255
  %8225 = call i32 @llvm.ctpop.i32(i32 %8224) #16
  %8226 = trunc i32 %8225 to i8
  %8227 = and i8 %8226, 1
  %8228 = xor i8 %8227, 1
  %8229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8228, i8* %8229, align 1, !tbaa !2446
  %8230 = xor i64 %8214, %8213
  %8231 = xor i64 %8230, %8217
  %8232 = lshr i64 %8231, 4
  %8233 = trunc i64 %8232 to i8
  %8234 = and i8 %8233, 1
  %8235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8234, i8* %8235, align 1, !tbaa !2447
  %8236 = icmp eq i64 %8217, 0
  %8237 = zext i1 %8236 to i8
  %8238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8237, i8* %8238, align 1, !tbaa !2448
  %8239 = lshr i64 %8217, 63
  %8240 = trunc i64 %8239 to i8
  %8241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8240, i8* %8241, align 1, !tbaa !2449
  %8242 = lshr i64 %8213, 63
  %8243 = lshr i64 %8214, 63
  %8244 = xor i64 %8239, %8242
  %8245 = xor i64 %8239, %8243
  %8246 = add nuw nsw i64 %8244, %8245
  %8247 = icmp eq i64 %8246, 2
  %8248 = zext i1 %8247 to i8
  %8249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8248, i8* %8249, align 1, !tbaa !2450
  %8250 = load i64, i64* %RBP
  %8251 = sub i64 %8250, 4
  %8252 = load i64, i64* %PC
  %8253 = add i64 %8252, 4
  store i64 %8253, i64* %PC
  %8254 = inttoptr i64 %8251 to i32*
  %8255 = load i32, i32* %8254
  %8256 = sext i32 %8255 to i64
  store i64 %8256, i64* %RCX, align 8, !tbaa !2428
  %8257 = load i64, i64* %RDX
  %8258 = load i64, i64* %RCX
  %8259 = mul i64 %8258, 4
  %8260 = add i64 %8259, %8257
  %8261 = load i64, i64* %PC
  %8262 = add i64 %8261, 4
  store i64 %8262, i64* %PC
  %8263 = inttoptr i64 %8260 to i32*
  %8264 = load i32, i32* %8263
  %8265 = sext i32 %8264 to i64
  store i64 %8265, i64* %RCX, align 8, !tbaa !2428
  %8266 = load i64, i64* %RCX
  %8267 = mul i64 %8266, 4
  %8268 = add i64 %8267, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %8269 = load i64, i64* %PC
  %8270 = add i64 %8269, 7
  store i64 %8270, i64* %PC
  %8271 = inttoptr i64 %8268 to i32*
  %8272 = load i32, i32* %8271
  %8273 = zext i32 %8272 to i64
  store i64 %8273, i64* %RSI, align 8, !tbaa !2428
  %8274 = load i64, i64* %RBP
  %8275 = sub i64 %8274, 12
  %8276 = load i64, i64* %PC
  %8277 = add i64 %8276, 4
  store i64 %8277, i64* %PC
  %8278 = inttoptr i64 %8275 to i32*
  %8279 = load i32, i32* %8278
  %8280 = sext i32 %8279 to i64
  store i64 %8280, i64* %RCX, align 8, !tbaa !2428
  %8281 = load i64, i64* %RCX
  %8282 = load i64, i64* %PC
  %8283 = add i64 %8282, 4
  store i64 %8283, i64* %PC
  %8284 = shl i64 %8281, 5
  %8285 = icmp slt i64 %8284, 0
  %8286 = shl i64 %8284, 1
  store i64 %8286, i64* %RCX, align 8, !tbaa !2428
  %8287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8288 = zext i1 %8285 to i8
  store i8 %8288, i8* %8287, align 1, !tbaa !2451
  %8289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8290 = trunc i64 %8286 to i32
  %8291 = and i32 %8290, 254
  %8292 = call i32 @llvm.ctpop.i32(i32 %8291) #16
  %8293 = trunc i32 %8292 to i8
  %8294 = and i8 %8293, 1
  %8295 = xor i8 %8294, 1
  store i8 %8295, i8* %8289, align 1, !tbaa !2451
  %8296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8296, align 1, !tbaa !2451
  %8297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8298 = icmp eq i64 %8286, 0
  %8299 = zext i1 %8298 to i8
  store i8 %8299, i8* %8297, align 1, !tbaa !2451
  %8300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8301 = lshr i64 %8286, 63
  %8302 = trunc i64 %8301 to i8
  store i8 %8302, i8* %8300, align 1, !tbaa !2451
  %8303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8303, align 1, !tbaa !2451
  %8304 = load i64, i64* %RAX
  %8305 = load i64, i64* %RCX
  %8306 = load i64, i64* %PC
  %8307 = add i64 %8306, 3
  store i64 %8307, i64* %PC
  %8308 = add i64 %8305, %8304
  store i64 %8308, i64* %RAX, align 8, !tbaa !2428
  %8309 = icmp ult i64 %8308, %8304
  %8310 = icmp ult i64 %8308, %8305
  %8311 = or i1 %8309, %8310
  %8312 = zext i1 %8311 to i8
  %8313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8312, i8* %8313, align 1, !tbaa !2432
  %8314 = trunc i64 %8308 to i32
  %8315 = and i32 %8314, 255
  %8316 = call i32 @llvm.ctpop.i32(i32 %8315) #16
  %8317 = trunc i32 %8316 to i8
  %8318 = and i8 %8317, 1
  %8319 = xor i8 %8318, 1
  %8320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8319, i8* %8320, align 1, !tbaa !2446
  %8321 = xor i64 %8305, %8304
  %8322 = xor i64 %8321, %8308
  %8323 = lshr i64 %8322, 4
  %8324 = trunc i64 %8323 to i8
  %8325 = and i8 %8324, 1
  %8326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8325, i8* %8326, align 1, !tbaa !2447
  %8327 = icmp eq i64 %8308, 0
  %8328 = zext i1 %8327 to i8
  %8329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8328, i8* %8329, align 1, !tbaa !2448
  %8330 = lshr i64 %8308, 63
  %8331 = trunc i64 %8330 to i8
  %8332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8331, i8* %8332, align 1, !tbaa !2449
  %8333 = lshr i64 %8304, 63
  %8334 = lshr i64 %8305, 63
  %8335 = xor i64 %8330, %8333
  %8336 = xor i64 %8330, %8334
  %8337 = add nuw nsw i64 %8335, %8336
  %8338 = icmp eq i64 %8337, 2
  %8339 = zext i1 %8338 to i8
  %8340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8339, i8* %8340, align 1, !tbaa !2450
  %8341 = load i64, i64* %RBP
  %8342 = sub i64 %8341, 4
  %8343 = load i64, i64* %PC
  %8344 = add i64 %8343, 4
  store i64 %8344, i64* %PC
  %8345 = inttoptr i64 %8342 to i32*
  %8346 = load i32, i32* %8345
  %8347 = sext i32 %8346 to i64
  store i64 %8347, i64* %RCX, align 8, !tbaa !2428
  %8348 = load i64, i64* %RAX
  %8349 = load i64, i64* %RCX
  %8350 = mul i64 %8349, 4
  %8351 = add i64 %8350, %8348
  %8352 = load i32, i32* %ESI
  %8353 = zext i32 %8352 to i64
  %8354 = load i64, i64* %PC
  %8355 = add i64 %8354, 3
  store i64 %8355, i64* %PC
  %8356 = inttoptr i64 %8351 to i32*
  store i32 %8352, i32* %8356
  %8357 = load i64, i64* %RBP
  %8358 = sub i64 %8357, 4
  %8359 = load i64, i64* %PC
  %8360 = add i64 %8359, 3
  store i64 %8360, i64* %PC
  %8361 = inttoptr i64 %8358 to i32*
  %8362 = load i32, i32* %8361
  %8363 = zext i32 %8362 to i64
  store i64 %8363, i64* %RAX, align 8, !tbaa !2428
  %8364 = load i64, i64* %RAX
  %8365 = load i64, i64* %PC
  %8366 = add i64 %8365, 3
  store i64 %8366, i64* %PC
  %8367 = trunc i64 %8364 to i32
  %8368 = add i32 1, %8367
  %8369 = zext i32 %8368 to i64
  store i64 %8369, i64* %RAX, align 8, !tbaa !2428
  %8370 = icmp ult i32 %8368, %8367
  %8371 = icmp ult i32 %8368, 1
  %8372 = or i1 %8370, %8371
  %8373 = zext i1 %8372 to i8
  %8374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8373, i8* %8374, align 1, !tbaa !2432
  %8375 = and i32 %8368, 255
  %8376 = call i32 @llvm.ctpop.i32(i32 %8375) #16
  %8377 = trunc i32 %8376 to i8
  %8378 = and i8 %8377, 1
  %8379 = xor i8 %8378, 1
  %8380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8379, i8* %8380, align 1, !tbaa !2446
  %8381 = xor i64 1, %8364
  %8382 = trunc i64 %8381 to i32
  %8383 = xor i32 %8382, %8368
  %8384 = lshr i32 %8383, 4
  %8385 = trunc i32 %8384 to i8
  %8386 = and i8 %8385, 1
  %8387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8386, i8* %8387, align 1, !tbaa !2447
  %8388 = icmp eq i32 %8368, 0
  %8389 = zext i1 %8388 to i8
  %8390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8389, i8* %8390, align 1, !tbaa !2448
  %8391 = lshr i32 %8368, 31
  %8392 = trunc i32 %8391 to i8
  %8393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8392, i8* %8393, align 1, !tbaa !2449
  %8394 = lshr i32 %8367, 31
  %8395 = xor i32 %8391, %8394
  %8396 = add nuw nsw i32 %8395, %8391
  %8397 = icmp eq i32 %8396, 2
  %8398 = zext i1 %8397 to i8
  %8399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8398, i8* %8399, align 1, !tbaa !2450
  %8400 = load i64, i64* %RBP
  %8401 = sub i64 %8400, 4
  %8402 = load i32, i32* %EAX
  %8403 = zext i32 %8402 to i64
  %8404 = load i64, i64* %PC
  %8405 = add i64 %8404, 3
  store i64 %8405, i64* %PC
  %8406 = inttoptr i64 %8401 to i32*
  store i32 %8402, i32* %8406
  %8407 = load i64, i64* %PC
  %8408 = sub i64 %8407, 83
  %8409 = load i64, i64* %PC
  %8410 = add i64 %8409, 5
  store i64 %8410, i64* %PC
  %8411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8408, i64* %8411, align 8, !tbaa !2428
  br label %block_40104e

block_401257:                                     ; preds = %block_401237
  %8412 = load i64, i64* %RBP
  %8413 = sub i64 %8412, 1168
  %8414 = load i64, i64* %PC
  %8415 = add i64 %8414, 7
  store i64 %8415, i64* %PC
  store i64 %8413, i64* %RAX, align 8, !tbaa !2428
  %8416 = load i64, i64* %RBP
  %8417 = sub i64 %8416, 4
  %8418 = load i64, i64* %PC
  %8419 = add i64 %8418, 4
  store i64 %8419, i64* %PC
  %8420 = inttoptr i64 %8417 to i32*
  %8421 = load i32, i32* %8420
  %8422 = sext i32 %8421 to i64
  store i64 %8422, i64* %RCX, align 8, !tbaa !2428
  %8423 = load i64, i64* %RBP
  %8424 = load i64, i64* %RCX
  %8425 = mul i64 %8424, 4
  %8426 = add i64 %8423, -1488
  %8427 = add i64 %8426, %8425
  %8428 = load i64, i64* %PC
  %8429 = add i64 %8428, 8
  store i64 %8429, i64* %PC
  %8430 = inttoptr i64 %8427 to i32*
  %8431 = load i32, i32* %8430
  %8432 = sext i32 %8431 to i64
  store i64 %8432, i64* %RCX, align 8, !tbaa !2428
  %8433 = load i64, i64* %RCX
  %8434 = mul i64 %8433, 4
  %8435 = add i64 %8434, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %8436 = load i64, i64* %PC
  %8437 = add i64 %8436, 7
  store i64 %8437, i64* %PC
  %8438 = inttoptr i64 %8435 to i32*
  %8439 = load i32, i32* %8438
  %8440 = zext i32 %8439 to i64
  store i64 %8440, i64* %RDX, align 8, !tbaa !2428
  %8441 = load i64, i64* %RBP
  %8442 = sub i64 %8441, 12
  %8443 = load i64, i64* %PC
  %8444 = add i64 %8443, 4
  store i64 %8444, i64* %PC
  %8445 = inttoptr i64 %8442 to i32*
  %8446 = load i32, i32* %8445
  %8447 = sext i32 %8446 to i64
  store i64 %8447, i64* %RCX, align 8, !tbaa !2428
  %8448 = load i64, i64* %RCX
  %8449 = load i64, i64* %PC
  %8450 = add i64 %8449, 4
  store i64 %8450, i64* %PC
  %8451 = shl i64 %8448, 5
  %8452 = icmp slt i64 %8451, 0
  %8453 = shl i64 %8451, 1
  store i64 %8453, i64* %RCX, align 8, !tbaa !2428
  %8454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8455 = zext i1 %8452 to i8
  store i8 %8455, i8* %8454, align 1, !tbaa !2451
  %8456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8457 = trunc i64 %8453 to i32
  %8458 = and i32 %8457, 254
  %8459 = call i32 @llvm.ctpop.i32(i32 %8458) #16
  %8460 = trunc i32 %8459 to i8
  %8461 = and i8 %8460, 1
  %8462 = xor i8 %8461, 1
  store i8 %8462, i8* %8456, align 1, !tbaa !2451
  %8463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8463, align 1, !tbaa !2451
  %8464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8465 = icmp eq i64 %8453, 0
  %8466 = zext i1 %8465 to i8
  store i8 %8466, i8* %8464, align 1, !tbaa !2451
  %8467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8468 = lshr i64 %8453, 63
  %8469 = trunc i64 %8468 to i8
  store i8 %8469, i8* %8467, align 1, !tbaa !2451
  %8470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8470, align 1, !tbaa !2451
  %8471 = load i64, i64* %RAX
  %8472 = load i64, i64* %RCX
  %8473 = load i64, i64* %PC
  %8474 = add i64 %8473, 3
  store i64 %8474, i64* %PC
  %8475 = add i64 %8472, %8471
  store i64 %8475, i64* %RAX, align 8, !tbaa !2428
  %8476 = icmp ult i64 %8475, %8471
  %8477 = icmp ult i64 %8475, %8472
  %8478 = or i1 %8476, %8477
  %8479 = zext i1 %8478 to i8
  %8480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8479, i8* %8480, align 1, !tbaa !2432
  %8481 = trunc i64 %8475 to i32
  %8482 = and i32 %8481, 255
  %8483 = call i32 @llvm.ctpop.i32(i32 %8482) #16
  %8484 = trunc i32 %8483 to i8
  %8485 = and i8 %8484, 1
  %8486 = xor i8 %8485, 1
  %8487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8486, i8* %8487, align 1, !tbaa !2446
  %8488 = xor i64 %8472, %8471
  %8489 = xor i64 %8488, %8475
  %8490 = lshr i64 %8489, 4
  %8491 = trunc i64 %8490 to i8
  %8492 = and i8 %8491, 1
  %8493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8492, i8* %8493, align 1, !tbaa !2447
  %8494 = icmp eq i64 %8475, 0
  %8495 = zext i1 %8494 to i8
  %8496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8495, i8* %8496, align 1, !tbaa !2448
  %8497 = lshr i64 %8475, 63
  %8498 = trunc i64 %8497 to i8
  %8499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8498, i8* %8499, align 1, !tbaa !2449
  %8500 = lshr i64 %8471, 63
  %8501 = lshr i64 %8472, 63
  %8502 = xor i64 %8497, %8500
  %8503 = xor i64 %8497, %8501
  %8504 = add nuw nsw i64 %8502, %8503
  %8505 = icmp eq i64 %8504, 2
  %8506 = zext i1 %8505 to i8
  %8507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8506, i8* %8507, align 1, !tbaa !2450
  %8508 = load i64, i64* %RBP
  %8509 = sub i64 %8508, 4
  %8510 = load i64, i64* %PC
  %8511 = add i64 %8510, 4
  store i64 %8511, i64* %PC
  %8512 = inttoptr i64 %8509 to i32*
  %8513 = load i32, i32* %8512
  %8514 = sext i32 %8513 to i64
  store i64 %8514, i64* %RCX, align 8, !tbaa !2428
  %8515 = load i64, i64* %RAX
  %8516 = load i64, i64* %RCX
  %8517 = mul i64 %8516, 4
  %8518 = add i64 %8517, %8515
  %8519 = load i64, i64* %PC
  %8520 = add i64 %8519, 4
  store i64 %8520, i64* %PC
  %8521 = inttoptr i64 %8518 to i32*
  %8522 = load i32, i32* %8521
  %8523 = sext i32 %8522 to i64
  store i64 %8523, i64* %RAX, align 8, !tbaa !2428
  %8524 = load i64, i64* %RDX
  %8525 = load i64, i64* %RAX
  %8526 = mul i64 %8525, 4
  %8527 = add i64 %8526, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %8528 = load i64, i64* %PC
  %8529 = add i64 %8528, 7
  store i64 %8529, i64* %PC
  %8530 = trunc i64 %8524 to i32
  %8531 = inttoptr i64 %8527 to i32*
  %8532 = load i32, i32* %8531
  %8533 = xor i32 %8532, %8530
  %8534 = zext i32 %8533 to i64
  store i64 %8534, i64* %RDX, align 8, !tbaa !2428
  %8535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8535, align 1, !tbaa !2432
  %8536 = and i32 %8533, 255
  %8537 = call i32 @llvm.ctpop.i32(i32 %8536) #16
  %8538 = trunc i32 %8537 to i8
  %8539 = and i8 %8538, 1
  %8540 = xor i8 %8539, 1
  %8541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8540, i8* %8541, align 1, !tbaa !2446
  %8542 = icmp eq i32 %8533, 0
  %8543 = zext i1 %8542 to i8
  %8544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8543, i8* %8544, align 1, !tbaa !2448
  %8545 = lshr i32 %8533, 31
  %8546 = trunc i32 %8545 to i8
  %8547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8546, i8* %8547, align 1, !tbaa !2449
  %8548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8548, align 1, !tbaa !2450
  %8549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8549, align 1, !tbaa !2447
  %8550 = load i64, i64* %RBP
  %8551 = sub i64 %8550, 4
  %8552 = load i64, i64* %PC
  %8553 = add i64 %8552, 4
  store i64 %8553, i64* %PC
  %8554 = inttoptr i64 %8551 to i32*
  %8555 = load i32, i32* %8554
  %8556 = sext i32 %8555 to i64
  store i64 %8556, i64* %RAX, align 8, !tbaa !2428
  %8557 = load i64, i64* %RBP
  %8558 = load i64, i64* %RAX
  %8559 = mul i64 %8558, 4
  %8560 = add i64 %8557, -1616
  %8561 = add i64 %8560, %8559
  %8562 = load i32, i32* %EDX
  %8563 = zext i32 %8562 to i64
  %8564 = load i64, i64* %PC
  %8565 = add i64 %8564, 7
  store i64 %8565, i64* %PC
  %8566 = inttoptr i64 %8561 to i32*
  store i32 %8562, i32* %8566
  %8567 = load i64, i64* %PC
  %8568 = add i64 %8567, 214
  %8569 = load i64, i64* %PC
  %8570 = add i64 %8569, 5
  store i64 %8570, i64* %PC
  %8571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8568, i64* %8571, align 8, !tbaa !2428
  br label %block_40136c

block_400e55:                                     ; preds = %block_400dcb
  %8572 = load i64, i64* %PC
  %8573 = add i64 %8572, 5
  %8574 = load i64, i64* %PC
  %8575 = add i64 %8574, 5
  store i64 %8575, i64* %PC
  %8576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8573, i64* %8576, align 8, !tbaa !2428
  br label %block_400e5a

block_401503:                                     ; preds = %block_40157f, %block_4014e5
  %MEMORY.36 = phi %struct.Memory* [ %MEMORY.27, %block_4014e5 ], [ %MEMORY.40, %block_40157f ]
  %8577 = load i64, i64* %RBP
  %8578 = sub i64 %8577, 8
  %8579 = load i64, i64* %PC
  %8580 = add i64 %8579, 3
  store i64 %8580, i64* %PC
  %8581 = inttoptr i64 %8578 to i32*
  %8582 = load i32, i32* %8581
  %8583 = zext i32 %8582 to i64
  store i64 %8583, i64* %RAX, align 8, !tbaa !2428
  %8584 = load i64, i64* %RBP
  %8585 = sub i64 %8584, 12
  %8586 = load i64, i64* %PC
  %8587 = add i64 %8586, 4
  store i64 %8587, i64* %PC
  %8588 = inttoptr i64 %8585 to i32*
  %8589 = load i32, i32* %8588
  %8590 = sext i32 %8589 to i64
  store i64 %8590, i64* %RCX, align 8, !tbaa !2428
  %8591 = load i32, i32* %EAX
  %8592 = zext i32 %8591 to i64
  %8593 = load i64, i64* %RBP
  %8594 = load i64, i64* %RCX
  %8595 = mul i64 %8594, 4
  %8596 = add i64 %8593, -1328
  %8597 = add i64 %8596, %8595
  %8598 = load i64, i64* %PC
  %8599 = add i64 %8598, 7
  store i64 %8599, i64* %PC
  %8600 = inttoptr i64 %8597 to i32*
  %8601 = load i32, i32* %8600
  %8602 = sub i32 %8591, %8601
  %8603 = icmp ult i32 %8591, %8601
  %8604 = zext i1 %8603 to i8
  %8605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8604, i8* %8605, align 1, !tbaa !2432
  %8606 = and i32 %8602, 255
  %8607 = call i32 @llvm.ctpop.i32(i32 %8606) #16
  %8608 = trunc i32 %8607 to i8
  %8609 = and i8 %8608, 1
  %8610 = xor i8 %8609, 1
  %8611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8610, i8* %8611, align 1, !tbaa !2446
  %8612 = xor i32 %8601, %8591
  %8613 = xor i32 %8612, %8602
  %8614 = lshr i32 %8613, 4
  %8615 = trunc i32 %8614 to i8
  %8616 = and i8 %8615, 1
  %8617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8616, i8* %8617, align 1, !tbaa !2447
  %8618 = icmp eq i32 %8602, 0
  %8619 = zext i1 %8618 to i8
  %8620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8619, i8* %8620, align 1, !tbaa !2448
  %8621 = lshr i32 %8602, 31
  %8622 = trunc i32 %8621 to i8
  %8623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8622, i8* %8623, align 1, !tbaa !2449
  %8624 = lshr i32 %8591, 31
  %8625 = lshr i32 %8601, 31
  %8626 = xor i32 %8625, %8624
  %8627 = xor i32 %8621, %8624
  %8628 = add nuw nsw i32 %8627, %8626
  %8629 = icmp eq i32 %8628, 2
  %8630 = zext i1 %8629 to i8
  %8631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8630, i8* %8631, align 1, !tbaa !2450
  %8632 = load i64, i64* %PC
  %8633 = add i64 %8632, 129
  %8634 = load i64, i64* %PC
  %8635 = add i64 %8634, 6
  %8636 = load i64, i64* %PC
  %8637 = add i64 %8636, 6
  store i64 %8637, i64* %PC
  %8638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8639 = load i8, i8* %8638, align 1, !tbaa !2448
  %8640 = icmp eq i8 %8639, 0
  %8641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8642 = load i8, i8* %8641, align 1, !tbaa !2449
  %8643 = icmp ne i8 %8642, 0
  %8644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8645 = load i8, i8* %8644, align 1, !tbaa !2450
  %8646 = icmp ne i8 %8645, 0
  %8647 = xor i1 %8643, %8646
  %8648 = xor i1 %8647, true
  %8649 = and i1 %8640, %8648
  %8650 = zext i1 %8649 to i8
  store i8 %8650, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8652 = select i1 %8649, i64 %8633, i64 %8635
  store i64 %8652, i64* %8651, align 8, !tbaa !2428
  %8653 = load i8, i8* %BRANCH_TAKEN
  %8654 = icmp eq i8 %8653, 1
  %8655 = load i64, i64* %RBP
  br i1 %8654, label %block_401592, label %block_401517

block_401651:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_4015fc
  %MEMORY.37 = phi %struct.Memory* [ %MEMORY.5, %block_4015fc ], [ %10939, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %8656 = load i64, i64* %PC
  %8657 = add i64 %8656, 5
  %8658 = load i64, i64* %PC
  %8659 = add i64 %8658, 5
  store i64 %8659, i64* %PC
  %8660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8657, i64* %8660, align 8, !tbaa !2428
  %8661 = load i64, i64* %RBP
  %8662 = sub i64 %8661, 8
  %8663 = load i64, i64* %PC
  %8664 = add i64 %8663, 3
  store i64 %8664, i64* %PC
  %8665 = inttoptr i64 %8662 to i32*
  %8666 = load i32, i32* %8665
  %8667 = zext i32 %8666 to i64
  store i64 %8667, i64* %RAX, align 8, !tbaa !2428
  %8668 = load i64, i64* %RAX
  %8669 = load i64, i64* %PC
  %8670 = add i64 %8669, 3
  store i64 %8670, i64* %PC
  %8671 = trunc i64 %8668 to i32
  %8672 = add i32 1, %8671
  %8673 = zext i32 %8672 to i64
  store i64 %8673, i64* %RAX, align 8, !tbaa !2428
  %8674 = icmp ult i32 %8672, %8671
  %8675 = icmp ult i32 %8672, 1
  %8676 = or i1 %8674, %8675
  %8677 = zext i1 %8676 to i8
  %8678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8677, i8* %8678, align 1, !tbaa !2432
  %8679 = and i32 %8672, 255
  %8680 = call i32 @llvm.ctpop.i32(i32 %8679) #16
  %8681 = trunc i32 %8680 to i8
  %8682 = and i8 %8681, 1
  %8683 = xor i8 %8682, 1
  %8684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8683, i8* %8684, align 1, !tbaa !2446
  %8685 = xor i64 1, %8668
  %8686 = trunc i64 %8685 to i32
  %8687 = xor i32 %8686, %8672
  %8688 = lshr i32 %8687, 4
  %8689 = trunc i32 %8688 to i8
  %8690 = and i8 %8689, 1
  %8691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8690, i8* %8691, align 1, !tbaa !2447
  %8692 = icmp eq i32 %8672, 0
  %8693 = zext i1 %8692 to i8
  %8694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8693, i8* %8694, align 1, !tbaa !2448
  %8695 = lshr i32 %8672, 31
  %8696 = trunc i32 %8695 to i8
  %8697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8696, i8* %8697, align 1, !tbaa !2449
  %8698 = lshr i32 %8671, 31
  %8699 = xor i32 %8695, %8698
  %8700 = add nuw nsw i32 %8699, %8695
  %8701 = icmp eq i32 %8700, 2
  %8702 = zext i1 %8701 to i8
  %8703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8702, i8* %8703, align 1, !tbaa !2450
  %8704 = load i64, i64* %RBP
  %8705 = sub i64 %8704, 8
  %8706 = load i32, i32* %EAX
  %8707 = zext i32 %8706 to i64
  %8708 = load i64, i64* %PC
  %8709 = add i64 %8708, 3
  store i64 %8709, i64* %PC
  %8710 = inttoptr i64 %8705 to i32*
  store i32 %8706, i32* %8710
  %8711 = load i64, i64* %PC
  %8712 = sub i64 %8711, 119
  %8713 = load i64, i64* %PC
  %8714 = add i64 %8713, 5
  store i64 %8714, i64* %PC
  %8715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8712, i64* %8715, align 8, !tbaa !2428
  br label %block_4015e8

block_401302:                                     ; preds = %block_4012f0
  %8716 = load i64, i64* %RBP
  %8717 = sub i64 %8716, 1168
  %8718 = load i64, i64* %PC
  %8719 = add i64 %8718, 7
  store i64 %8719, i64* %PC
  store i64 %8717, i64* %RAX, align 8, !tbaa !2428
  %8720 = load i64, i64* %RBP
  %8721 = sub i64 %8720, 12
  %8722 = load i64, i64* %PC
  %8723 = add i64 %8722, 4
  store i64 %8723, i64* %PC
  %8724 = inttoptr i64 %8721 to i32*
  %8725 = load i32, i32* %8724
  %8726 = sext i32 %8725 to i64
  store i64 %8726, i64* %RCX, align 8, !tbaa !2428
  %8727 = load i64, i64* %RCX
  %8728 = load i64, i64* %PC
  %8729 = add i64 %8728, 4
  store i64 %8729, i64* %PC
  %8730 = shl i64 %8727, 5
  %8731 = icmp slt i64 %8730, 0
  %8732 = shl i64 %8730, 1
  store i64 %8732, i64* %RCX, align 8, !tbaa !2428
  %8733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8734 = zext i1 %8731 to i8
  store i8 %8734, i8* %8733, align 1, !tbaa !2451
  %8735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8736 = trunc i64 %8732 to i32
  %8737 = and i32 %8736, 254
  %8738 = call i32 @llvm.ctpop.i32(i32 %8737) #16
  %8739 = trunc i32 %8738 to i8
  %8740 = and i8 %8739, 1
  %8741 = xor i8 %8740, 1
  store i8 %8741, i8* %8735, align 1, !tbaa !2451
  %8742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8742, align 1, !tbaa !2451
  %8743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8744 = icmp eq i64 %8732, 0
  %8745 = zext i1 %8744 to i8
  store i8 %8745, i8* %8743, align 1, !tbaa !2451
  %8746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8747 = lshr i64 %8732, 63
  %8748 = trunc i64 %8747 to i8
  store i8 %8748, i8* %8746, align 1, !tbaa !2451
  %8749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8749, align 1, !tbaa !2451
  %8750 = load i64, i64* %RAX
  %8751 = load i64, i64* %RCX
  %8752 = load i64, i64* %PC
  %8753 = add i64 %8752, 3
  store i64 %8753, i64* %PC
  %8754 = add i64 %8751, %8750
  store i64 %8754, i64* %RAX, align 8, !tbaa !2428
  %8755 = icmp ult i64 %8754, %8750
  %8756 = icmp ult i64 %8754, %8751
  %8757 = or i1 %8755, %8756
  %8758 = zext i1 %8757 to i8
  %8759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8758, i8* %8759, align 1, !tbaa !2432
  %8760 = trunc i64 %8754 to i32
  %8761 = and i32 %8760, 255
  %8762 = call i32 @llvm.ctpop.i32(i32 %8761) #16
  %8763 = trunc i32 %8762 to i8
  %8764 = and i8 %8763, 1
  %8765 = xor i8 %8764, 1
  %8766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8765, i8* %8766, align 1, !tbaa !2446
  %8767 = xor i64 %8751, %8750
  %8768 = xor i64 %8767, %8754
  %8769 = lshr i64 %8768, 4
  %8770 = trunc i64 %8769 to i8
  %8771 = and i8 %8770, 1
  %8772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8771, i8* %8772, align 1, !tbaa !2447
  %8773 = icmp eq i64 %8754, 0
  %8774 = zext i1 %8773 to i8
  %8775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8774, i8* %8775, align 1, !tbaa !2448
  %8776 = lshr i64 %8754, 63
  %8777 = trunc i64 %8776 to i8
  %8778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8777, i8* %8778, align 1, !tbaa !2449
  %8779 = lshr i64 %8750, 63
  %8780 = lshr i64 %8751, 63
  %8781 = xor i64 %8776, %8779
  %8782 = xor i64 %8776, %8780
  %8783 = add nuw nsw i64 %8781, %8782
  %8784 = icmp eq i64 %8783, 2
  %8785 = zext i1 %8784 to i8
  %8786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8785, i8* %8786, align 1, !tbaa !2450
  %8787 = load i64, i64* %RBP
  %8788 = sub i64 %8787, 4
  %8789 = load i64, i64* %PC
  %8790 = add i64 %8789, 4
  store i64 %8790, i64* %PC
  %8791 = inttoptr i64 %8788 to i32*
  %8792 = load i32, i32* %8791
  %8793 = sext i32 %8792 to i64
  store i64 %8793, i64* %RCX, align 8, !tbaa !2428
  %8794 = load i64, i64* %RAX
  %8795 = load i64, i64* %RCX
  %8796 = mul i64 %8795, 4
  %8797 = add i64 %8796, %8794
  %8798 = load i64, i64* %PC
  %8799 = add i64 %8798, 4
  store i64 %8799, i64* %PC
  %8800 = inttoptr i64 %8797 to i32*
  %8801 = load i32, i32* %8800
  %8802 = sub i32 %8801, -1
  %8803 = icmp ult i32 %8801, -1
  %8804 = zext i1 %8803 to i8
  %8805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8804, i8* %8805, align 1, !tbaa !2432
  %8806 = and i32 %8802, 255
  %8807 = call i32 @llvm.ctpop.i32(i32 %8806) #16
  %8808 = trunc i32 %8807 to i8
  %8809 = and i8 %8808, 1
  %8810 = xor i8 %8809, 1
  %8811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8810, i8* %8811, align 1, !tbaa !2446
  %8812 = xor i32 %8801, -1
  %8813 = xor i32 %8812, %8802
  %8814 = lshr i32 %8813, 4
  %8815 = trunc i32 %8814 to i8
  %8816 = and i8 %8815, 1
  %8817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8816, i8* %8817, align 1, !tbaa !2447
  %8818 = icmp eq i32 %8802, 0
  %8819 = zext i1 %8818 to i8
  %8820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8819, i8* %8820, align 1, !tbaa !2448
  %8821 = lshr i32 %8802, 31
  %8822 = trunc i32 %8821 to i8
  %8823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8822, i8* %8823, align 1, !tbaa !2449
  %8824 = lshr i32 %8801, 31
  %8825 = xor i32 %8824, 1
  %8826 = xor i32 %8821, %8824
  %8827 = add nuw nsw i32 %8826, %8825
  %8828 = icmp eq i32 %8827, 2
  %8829 = zext i1 %8828 to i8
  %8830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8829, i8* %8830, align 1, !tbaa !2450
  %8831 = load i64, i64* %PC
  %8832 = add i64 %8831, 55
  %8833 = load i64, i64* %PC
  %8834 = add i64 %8833, 6
  %8835 = load i64, i64* %PC
  %8836 = add i64 %8835, 6
  store i64 %8836, i64* %PC
  %8837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8838 = load i8, i8* %8837, align 1, !tbaa !2448
  store i8 %8838, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8840 = icmp ne i8 %8838, 0
  %8841 = select i1 %8840, i64 %8832, i64 %8834
  store i64 %8841, i64* %8839, align 8, !tbaa !2428
  %8842 = load i8, i8* %BRANCH_TAKEN
  %8843 = icmp eq i8 %8842, 1
  br i1 %8843, label %block_401353, label %block_401322

block_401450:                                     ; preds = %block_401211
  %8844 = add i64 %10392, 7
  store i64 %8844, i64* %PC
  %8845 = inttoptr i64 %10391 to i32*
  store i32 0, i32* %8845
  br label %block_401457

block_401391:                                     ; preds = %block_40137f
  %8846 = load i64, i64* %RBP
  %8847 = sub i64 %8846, 1168
  %8848 = load i64, i64* %PC
  %8849 = add i64 %8848, 7
  store i64 %8849, i64* %PC
  store i64 %8847, i64* %RAX, align 8, !tbaa !2428
  %8850 = load i64, i64* %RBP
  %8851 = sub i64 %8850, 12
  %8852 = load i64, i64* %PC
  %8853 = add i64 %8852, 4
  store i64 %8853, i64* %PC
  %8854 = inttoptr i64 %8851 to i32*
  %8855 = load i32, i32* %8854
  %8856 = sext i32 %8855 to i64
  store i64 %8856, i64* %RCX, align 8, !tbaa !2428
  %8857 = load i64, i64* %RCX
  %8858 = load i64, i64* %PC
  %8859 = add i64 %8858, 4
  store i64 %8859, i64* %PC
  %8860 = shl i64 %8857, 5
  %8861 = icmp slt i64 %8860, 0
  %8862 = shl i64 %8860, 1
  store i64 %8862, i64* %RCX, align 8, !tbaa !2428
  %8863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8864 = zext i1 %8861 to i8
  store i8 %8864, i8* %8863, align 1, !tbaa !2451
  %8865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8866 = trunc i64 %8862 to i32
  %8867 = and i32 %8866, 254
  %8868 = call i32 @llvm.ctpop.i32(i32 %8867) #16
  %8869 = trunc i32 %8868 to i8
  %8870 = and i8 %8869, 1
  %8871 = xor i8 %8870, 1
  store i8 %8871, i8* %8865, align 1, !tbaa !2451
  %8872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8872, align 1, !tbaa !2451
  %8873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8874 = icmp eq i64 %8862, 0
  %8875 = zext i1 %8874 to i8
  store i8 %8875, i8* %8873, align 1, !tbaa !2451
  %8876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8877 = lshr i64 %8862, 63
  %8878 = trunc i64 %8877 to i8
  store i8 %8878, i8* %8876, align 1, !tbaa !2451
  %8879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8879, align 1, !tbaa !2451
  %8880 = load i64, i64* %RAX
  %8881 = load i64, i64* %RCX
  %8882 = load i64, i64* %PC
  %8883 = add i64 %8882, 3
  store i64 %8883, i64* %PC
  %8884 = add i64 %8881, %8880
  store i64 %8884, i64* %RAX, align 8, !tbaa !2428
  %8885 = icmp ult i64 %8884, %8880
  %8886 = icmp ult i64 %8884, %8881
  %8887 = or i1 %8885, %8886
  %8888 = zext i1 %8887 to i8
  %8889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8888, i8* %8889, align 1, !tbaa !2432
  %8890 = trunc i64 %8884 to i32
  %8891 = and i32 %8890, 255
  %8892 = call i32 @llvm.ctpop.i32(i32 %8891) #16
  %8893 = trunc i32 %8892 to i8
  %8894 = and i8 %8893, 1
  %8895 = xor i8 %8894, 1
  %8896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8895, i8* %8896, align 1, !tbaa !2446
  %8897 = xor i64 %8881, %8880
  %8898 = xor i64 %8897, %8884
  %8899 = lshr i64 %8898, 4
  %8900 = trunc i64 %8899 to i8
  %8901 = and i8 %8900, 1
  %8902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8901, i8* %8902, align 1, !tbaa !2447
  %8903 = icmp eq i64 %8884, 0
  %8904 = zext i1 %8903 to i8
  %8905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8904, i8* %8905, align 1, !tbaa !2448
  %8906 = lshr i64 %8884, 63
  %8907 = trunc i64 %8906 to i8
  %8908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8907, i8* %8908, align 1, !tbaa !2449
  %8909 = lshr i64 %8880, 63
  %8910 = lshr i64 %8881, 63
  %8911 = xor i64 %8906, %8909
  %8912 = xor i64 %8906, %8910
  %8913 = add nuw nsw i64 %8911, %8912
  %8914 = icmp eq i64 %8913, 2
  %8915 = zext i1 %8914 to i8
  %8916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8915, i8* %8916, align 1, !tbaa !2450
  %8917 = load i64, i64* %RBP
  %8918 = sub i64 %8917, 4
  %8919 = load i64, i64* %PC
  %8920 = add i64 %8919, 3
  store i64 %8920, i64* %PC
  %8921 = inttoptr i64 %8918 to i32*
  %8922 = load i32, i32* %8921
  %8923 = zext i32 %8922 to i64
  store i64 %8923, i64* %RDX, align 8, !tbaa !2428
  %8924 = load i64, i64* %RDX
  %8925 = load i64, i64* %RBP
  %8926 = sub i64 %8925, 8
  %8927 = load i64, i64* %PC
  %8928 = add i64 %8927, 3
  store i64 %8928, i64* %PC
  %8929 = trunc i64 %8924 to i32
  %8930 = inttoptr i64 %8926 to i32*
  %8931 = load i32, i32* %8930
  %8932 = sub i32 %8929, %8931
  %8933 = zext i32 %8932 to i64
  store i64 %8933, i64* %RDX, align 8, !tbaa !2428
  %8934 = icmp ult i32 %8929, %8931
  %8935 = zext i1 %8934 to i8
  %8936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8935, i8* %8936, align 1, !tbaa !2432
  %8937 = and i32 %8932, 255
  %8938 = call i32 @llvm.ctpop.i32(i32 %8937) #16
  %8939 = trunc i32 %8938 to i8
  %8940 = and i8 %8939, 1
  %8941 = xor i8 %8940, 1
  %8942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8941, i8* %8942, align 1, !tbaa !2446
  %8943 = xor i32 %8931, %8929
  %8944 = xor i32 %8943, %8932
  %8945 = lshr i32 %8944, 4
  %8946 = trunc i32 %8945 to i8
  %8947 = and i8 %8946, 1
  %8948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8947, i8* %8948, align 1, !tbaa !2447
  %8949 = icmp eq i32 %8932, 0
  %8950 = zext i1 %8949 to i8
  %8951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8950, i8* %8951, align 1, !tbaa !2448
  %8952 = lshr i32 %8932, 31
  %8953 = trunc i32 %8952 to i8
  %8954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8953, i8* %8954, align 1, !tbaa !2449
  %8955 = lshr i32 %8929, 31
  %8956 = lshr i32 %8931, 31
  %8957 = xor i32 %8956, %8955
  %8958 = xor i32 %8952, %8955
  %8959 = add nuw nsw i32 %8958, %8957
  %8960 = icmp eq i32 %8959, 2
  %8961 = zext i1 %8960 to i8
  %8962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8961, i8* %8962, align 1, !tbaa !2450
  %8963 = load i32, i32* %EDX
  %8964 = zext i32 %8963 to i64
  %8965 = load i64, i64* %PC
  %8966 = add i64 %8965, 3
  store i64 %8966, i64* %PC
  %8967 = shl i64 %8964, 32
  %8968 = ashr exact i64 %8967, 32
  store i64 %8968, i64* %RCX, align 8, !tbaa !2428
  %8969 = load i64, i64* %RAX
  %8970 = load i64, i64* %RCX
  %8971 = mul i64 %8970, 4
  %8972 = add i64 %8971, %8969
  %8973 = load i64, i64* %PC
  %8974 = add i64 %8973, 4
  store i64 %8974, i64* %PC
  %8975 = inttoptr i64 %8972 to i32*
  %8976 = load i32, i32* %8975
  %8977 = sub i32 %8976, -1
  %8978 = icmp ult i32 %8976, -1
  %8979 = zext i1 %8978 to i8
  %8980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8979, i8* %8980, align 1, !tbaa !2432
  %8981 = and i32 %8977, 255
  %8982 = call i32 @llvm.ctpop.i32(i32 %8981) #16
  %8983 = trunc i32 %8982 to i8
  %8984 = and i8 %8983, 1
  %8985 = xor i8 %8984, 1
  %8986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8985, i8* %8986, align 1, !tbaa !2446
  %8987 = xor i32 %8976, -1
  %8988 = xor i32 %8987, %8977
  %8989 = lshr i32 %8988, 4
  %8990 = trunc i32 %8989 to i8
  %8991 = and i8 %8990, 1
  %8992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8991, i8* %8992, align 1, !tbaa !2447
  %8993 = icmp eq i32 %8977, 0
  %8994 = zext i1 %8993 to i8
  %8995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8994, i8* %8995, align 1, !tbaa !2448
  %8996 = lshr i32 %8977, 31
  %8997 = trunc i32 %8996 to i8
  %8998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8997, i8* %8998, align 1, !tbaa !2449
  %8999 = lshr i32 %8976, 31
  %9000 = xor i32 %8999, 1
  %9001 = xor i32 %8996, %8999
  %9002 = add nuw nsw i32 %9001, %9000
  %9003 = icmp eq i32 %9002, 2
  %9004 = zext i1 %9003 to i8
  %9005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9004, i8* %9005, align 1, !tbaa !2450
  %9006 = load i64, i64* %PC
  %9007 = add i64 %9006, 97
  %9008 = load i64, i64* %PC
  %9009 = add i64 %9008, 6
  %9010 = load i64, i64* %PC
  %9011 = add i64 %9010, 6
  store i64 %9011, i64* %PC
  %9012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9013 = load i8, i8* %9012, align 1, !tbaa !2448
  store i8 %9013, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9015 = icmp ne i8 %9013, 0
  %9016 = select i1 %9015, i64 %9007, i64 %9009
  store i64 %9016, i64* %9014, align 8, !tbaa !2428
  %9017 = load i8, i8* %BRANCH_TAKEN
  %9018 = icmp eq i8 %9017, 1
  br i1 %9018, label %block_401411, label %block_4013b6

block_400b16:                                     ; preds = %block_400af4, %block_400b2a
  %MEMORY.38 = phi %struct.Memory* [ %MEMORY.48, %block_400af4 ], [ %MEMORY.38, %block_400b2a ]
  %9019 = load i64, i64* %RBP
  %9020 = sub i64 %9019, 4
  %9021 = load i64, i64* %PC
  %9022 = add i64 %9021, 3
  store i64 %9022, i64* %PC
  %9023 = inttoptr i64 %9020 to i32*
  %9024 = load i32, i32* %9023
  %9025 = zext i32 %9024 to i64
  store i64 %9025, i64* %RAX, align 8, !tbaa !2428
  %9026 = load i64, i64* %RBP
  %9027 = sub i64 %9026, 12
  %9028 = load i64, i64* %PC
  %9029 = add i64 %9028, 4
  store i64 %9029, i64* %PC
  %9030 = inttoptr i64 %9027 to i32*
  %9031 = load i32, i32* %9030
  %9032 = sext i32 %9031 to i64
  store i64 %9032, i64* %RCX, align 8, !tbaa !2428
  %9033 = load i32, i32* %EAX
  %9034 = zext i32 %9033 to i64
  %9035 = load i64, i64* %RBP
  %9036 = load i64, i64* %RCX
  %9037 = mul i64 %9036, 4
  %9038 = add i64 %9035, -1328
  %9039 = add i64 %9038, %9037
  %9040 = load i64, i64* %PC
  %9041 = add i64 %9040, 7
  store i64 %9041, i64* %PC
  %9042 = inttoptr i64 %9039 to i32*
  %9043 = load i32, i32* %9042
  %9044 = sub i32 %9033, %9043
  %9045 = icmp ult i32 %9033, %9043
  %9046 = zext i1 %9045 to i8
  %9047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9046, i8* %9047, align 1, !tbaa !2432
  %9048 = and i32 %9044, 255
  %9049 = call i32 @llvm.ctpop.i32(i32 %9048) #16
  %9050 = trunc i32 %9049 to i8
  %9051 = and i8 %9050, 1
  %9052 = xor i8 %9051, 1
  %9053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9052, i8* %9053, align 1, !tbaa !2446
  %9054 = xor i32 %9043, %9033
  %9055 = xor i32 %9054, %9044
  %9056 = lshr i32 %9055, 4
  %9057 = trunc i32 %9056 to i8
  %9058 = and i8 %9057, 1
  %9059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9058, i8* %9059, align 1, !tbaa !2447
  %9060 = icmp eq i32 %9044, 0
  %9061 = zext i1 %9060 to i8
  %9062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9061, i8* %9062, align 1, !tbaa !2448
  %9063 = lshr i32 %9044, 31
  %9064 = trunc i32 %9063 to i8
  %9065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9064, i8* %9065, align 1, !tbaa !2449
  %9066 = lshr i32 %9033, 31
  %9067 = lshr i32 %9043, 31
  %9068 = xor i32 %9067, %9066
  %9069 = xor i32 %9063, %9066
  %9070 = add nuw nsw i32 %9069, %9068
  %9071 = icmp eq i32 %9070, 2
  %9072 = zext i1 %9071 to i8
  %9073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9072, i8* %9073, align 1, !tbaa !2450
  %9074 = load i64, i64* %PC
  %9075 = add i64 %9074, 121
  %9076 = load i64, i64* %PC
  %9077 = add i64 %9076, 6
  %9078 = load i64, i64* %PC
  %9079 = add i64 %9078, 6
  store i64 %9079, i64* %PC
  %9080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9081 = load i8, i8* %9080, align 1, !tbaa !2448
  %9082 = icmp eq i8 %9081, 0
  %9083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9084 = load i8, i8* %9083, align 1, !tbaa !2449
  %9085 = icmp ne i8 %9084, 0
  %9086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9087 = load i8, i8* %9086, align 1, !tbaa !2450
  %9088 = icmp ne i8 %9087, 0
  %9089 = xor i1 %9085, %9088
  %9090 = xor i1 %9089, true
  %9091 = and i1 %9082, %9090
  %9092 = zext i1 %9091 to i8
  store i8 %9092, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9094 = select i1 %9091, i64 %9075, i64 %9077
  store i64 %9094, i64* %9093, align 8, !tbaa !2428
  %9095 = load i8, i8* %BRANCH_TAKEN
  %9096 = icmp eq i8 %9095, 1
  br i1 %9096, label %block_400b9d, label %block_400b2a

block_40104e:                                     ; preds = %block_40102c, %block_401062
  %MEMORY.39 = phi %struct.Memory* [ %MEMORY.44, %block_40102c ], [ %MEMORY.39, %block_401062 ]
  %9097 = load i64, i64* %RBP
  %9098 = sub i64 %9097, 4
  %9099 = load i64, i64* %PC
  %9100 = add i64 %9099, 3
  store i64 %9100, i64* %PC
  %9101 = inttoptr i64 %9098 to i32*
  %9102 = load i32, i32* %9101
  %9103 = zext i32 %9102 to i64
  store i64 %9103, i64* %RAX, align 8, !tbaa !2428
  %9104 = load i64, i64* %RBP
  %9105 = sub i64 %9104, 12
  %9106 = load i64, i64* %PC
  %9107 = add i64 %9106, 4
  store i64 %9107, i64* %PC
  %9108 = inttoptr i64 %9105 to i32*
  %9109 = load i32, i32* %9108
  %9110 = sext i32 %9109 to i64
  store i64 %9110, i64* %RCX, align 8, !tbaa !2428
  %9111 = load i32, i32* %EAX
  %9112 = zext i32 %9111 to i64
  %9113 = load i64, i64* %RBP
  %9114 = load i64, i64* %RCX
  %9115 = mul i64 %9114, 4
  %9116 = add i64 %9113, -1328
  %9117 = add i64 %9116, %9115
  %9118 = load i64, i64* %PC
  %9119 = add i64 %9118, 7
  store i64 %9119, i64* %PC
  %9120 = inttoptr i64 %9117 to i32*
  %9121 = load i32, i32* %9120
  %9122 = sub i32 %9111, %9121
  %9123 = icmp ult i32 %9111, %9121
  %9124 = zext i1 %9123 to i8
  %9125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9124, i8* %9125, align 1, !tbaa !2432
  %9126 = and i32 %9122, 255
  %9127 = call i32 @llvm.ctpop.i32(i32 %9126) #16
  %9128 = trunc i32 %9127 to i8
  %9129 = and i8 %9128, 1
  %9130 = xor i8 %9129, 1
  %9131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9130, i8* %9131, align 1, !tbaa !2446
  %9132 = xor i32 %9121, %9111
  %9133 = xor i32 %9132, %9122
  %9134 = lshr i32 %9133, 4
  %9135 = trunc i32 %9134 to i8
  %9136 = and i8 %9135, 1
  %9137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9136, i8* %9137, align 1, !tbaa !2447
  %9138 = icmp eq i32 %9122, 0
  %9139 = zext i1 %9138 to i8
  %9140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9139, i8* %9140, align 1, !tbaa !2448
  %9141 = lshr i32 %9122, 31
  %9142 = trunc i32 %9141 to i8
  %9143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9142, i8* %9143, align 1, !tbaa !2449
  %9144 = lshr i32 %9111, 31
  %9145 = lshr i32 %9121, 31
  %9146 = xor i32 %9145, %9144
  %9147 = xor i32 %9141, %9144
  %9148 = add nuw nsw i32 %9147, %9146
  %9149 = icmp eq i32 %9148, 2
  %9150 = zext i1 %9149 to i8
  %9151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9150, i8* %9151, align 1, !tbaa !2450
  %9152 = load i64, i64* %PC
  %9153 = add i64 %9152, 74
  %9154 = load i64, i64* %PC
  %9155 = add i64 %9154, 6
  %9156 = load i64, i64* %PC
  %9157 = add i64 %9156, 6
  store i64 %9157, i64* %PC
  %9158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9159 = load i8, i8* %9158, align 1, !tbaa !2448
  %9160 = icmp eq i8 %9159, 0
  %9161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9162 = load i8, i8* %9161, align 1, !tbaa !2449
  %9163 = icmp ne i8 %9162, 0
  %9164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9165 = load i8, i8* %9164, align 1, !tbaa !2450
  %9166 = icmp ne i8 %9165, 0
  %9167 = xor i1 %9163, %9166
  %9168 = xor i1 %9167, true
  %9169 = and i1 %9160, %9168
  %9170 = zext i1 %9169 to i8
  store i8 %9170, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9172 = select i1 %9169, i64 %9153, i64 %9155
  store i64 %9172, i64* %9171, align 8, !tbaa !2428
  %9173 = load i8, i8* %BRANCH_TAKEN
  %9174 = icmp eq i8 %9173, 1
  %9175 = load i64, i64* %RBP
  br i1 %9174, label %block_4010a6, label %block_401062

block_40157f:                                     ; preds = %block_401517, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4
  %MEMORY.40 = phi %struct.Memory* [ %MEMORY.36, %block_401517 ], [ %3862, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4 ]
  %9176 = load i64, i64* %PC
  %9177 = add i64 %9176, 5
  %9178 = load i64, i64* %PC
  %9179 = add i64 %9178, 5
  store i64 %9179, i64* %PC
  %9180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9177, i64* %9180, align 8, !tbaa !2428
  %9181 = load i64, i64* %RBP
  %9182 = sub i64 %9181, 8
  %9183 = load i64, i64* %PC
  %9184 = add i64 %9183, 3
  store i64 %9184, i64* %PC
  %9185 = inttoptr i64 %9182 to i32*
  %9186 = load i32, i32* %9185
  %9187 = zext i32 %9186 to i64
  store i64 %9187, i64* %RAX, align 8, !tbaa !2428
  %9188 = load i64, i64* %RAX
  %9189 = load i64, i64* %PC
  %9190 = add i64 %9189, 3
  store i64 %9190, i64* %PC
  %9191 = trunc i64 %9188 to i32
  %9192 = add i32 1, %9191
  %9193 = zext i32 %9192 to i64
  store i64 %9193, i64* %RAX, align 8, !tbaa !2428
  %9194 = icmp ult i32 %9192, %9191
  %9195 = icmp ult i32 %9192, 1
  %9196 = or i1 %9194, %9195
  %9197 = zext i1 %9196 to i8
  %9198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9197, i8* %9198, align 1, !tbaa !2432
  %9199 = and i32 %9192, 255
  %9200 = call i32 @llvm.ctpop.i32(i32 %9199) #16
  %9201 = trunc i32 %9200 to i8
  %9202 = and i8 %9201, 1
  %9203 = xor i8 %9202, 1
  %9204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9203, i8* %9204, align 1, !tbaa !2446
  %9205 = xor i64 1, %9188
  %9206 = trunc i64 %9205 to i32
  %9207 = xor i32 %9206, %9192
  %9208 = lshr i32 %9207, 4
  %9209 = trunc i32 %9208 to i8
  %9210 = and i8 %9209, 1
  %9211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9210, i8* %9211, align 1, !tbaa !2447
  %9212 = icmp eq i32 %9192, 0
  %9213 = zext i1 %9212 to i8
  %9214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9213, i8* %9214, align 1, !tbaa !2448
  %9215 = lshr i32 %9192, 31
  %9216 = trunc i32 %9215 to i8
  %9217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9216, i8* %9217, align 1, !tbaa !2449
  %9218 = lshr i32 %9191, 31
  %9219 = xor i32 %9215, %9218
  %9220 = add nuw nsw i32 %9219, %9215
  %9221 = icmp eq i32 %9220, 2
  %9222 = zext i1 %9221 to i8
  %9223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9222, i8* %9223, align 1, !tbaa !2450
  %9224 = load i64, i64* %RBP
  %9225 = sub i64 %9224, 8
  %9226 = load i32, i32* %EAX
  %9227 = zext i32 %9226 to i64
  %9228 = load i64, i64* %PC
  %9229 = add i64 %9228, 3
  store i64 %9229, i64* %PC
  %9230 = inttoptr i64 %9225 to i32*
  store i32 %9226, i32* %9230
  %9231 = load i64, i64* %PC
  %9232 = sub i64 %9231, 138
  %9233 = load i64, i64* %PC
  %9234 = add i64 %9233, 5
  store i64 %9234, i64* %PC
  %9235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9232, i64* %9235, align 8, !tbaa !2428
  br label %block_401503

block_40179e:                                     ; preds = %block_40178c
  %9236 = add i64 %2027, 8
  store i64 %9236, i64* %PC
  %9237 = inttoptr i64 %2026 to i32*
  %9238 = load i32, i32* %9237
  %9239 = sext i32 %9238 to i64
  store i64 %9239, i64* %RAX, align 8, !tbaa !2428
  %9240 = load i64, i64* %RAX
  %9241 = mul i64 %9240, 4
  %9242 = add i64 %9241, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %9243 = load i64, i64* %PC
  %9244 = add i64 %9243, 7
  store i64 %9244, i64* %PC
  %9245 = inttoptr i64 %9242 to i32*
  %9246 = load i32, i32* %9245
  %9247 = zext i32 %9246 to i64
  store i64 %9247, i64* %RCX, align 8, !tbaa !2428
  %9248 = load i64, i64* %RBP
  %9249 = sub i64 %9248, 4
  %9250 = load i64, i64* %PC
  %9251 = add i64 %9250, 4
  store i64 %9251, i64* %PC
  %9252 = inttoptr i64 %9249 to i32*
  %9253 = load i32, i32* %9252
  %9254 = sext i32 %9253 to i64
  store i64 %9254, i64* %RAX, align 8, !tbaa !2428
  %9255 = load i64, i64* %RAX
  %9256 = mul i64 %9255, 4
  %9257 = add i64 %9256, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %9258 = load i32, i32* %ECX
  %9259 = zext i32 %9258 to i64
  %9260 = load i64, i64* %PC
  %9261 = add i64 %9260, 7
  store i64 %9261, i64* %PC
  %9262 = inttoptr i64 %9257 to i32*
  store i32 %9258, i32* %9262
  %9263 = load i64, i64* %PC
  %9264 = add i64 %9263, 20
  %9265 = load i64, i64* %PC
  %9266 = add i64 %9265, 5
  store i64 %9266, i64* %PC
  %9267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9264, i64* %9267, align 8, !tbaa !2428
  br label %block_4017d0

block_401845:                                     ; preds = %block_401813, %block_401836
  %MEMORY.41 = phi %struct.Memory* [ %MEMORY.0, %block_401836 ], [ %MEMORY.0, %block_401813 ]
  %9268 = load i64, i64* %PC
  %9269 = add i64 %9268, 5
  %9270 = load i64, i64* %PC
  %9271 = add i64 %9270, 5
  store i64 %9271, i64* %PC
  %9272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9269, i64* %9272, align 8, !tbaa !2428
  %9273 = load i64, i64* %RBP
  %9274 = sub i64 %9273, 4
  %9275 = load i64, i64* %PC
  %9276 = add i64 %9275, 3
  store i64 %9276, i64* %PC
  %9277 = inttoptr i64 %9274 to i32*
  %9278 = load i32, i32* %9277
  %9279 = zext i32 %9278 to i64
  store i64 %9279, i64* %RAX, align 8, !tbaa !2428
  %9280 = load i64, i64* %RAX
  %9281 = load i64, i64* %PC
  %9282 = add i64 %9281, 3
  store i64 %9282, i64* %PC
  %9283 = trunc i64 %9280 to i32
  %9284 = add i32 1, %9283
  %9285 = zext i32 %9284 to i64
  store i64 %9285, i64* %RAX, align 8, !tbaa !2428
  %9286 = icmp ult i32 %9284, %9283
  %9287 = icmp ult i32 %9284, 1
  %9288 = or i1 %9286, %9287
  %9289 = zext i1 %9288 to i8
  %9290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9289, i8* %9290, align 1, !tbaa !2432
  %9291 = and i32 %9284, 255
  %9292 = call i32 @llvm.ctpop.i32(i32 %9291) #16
  %9293 = trunc i32 %9292 to i8
  %9294 = and i8 %9293, 1
  %9295 = xor i8 %9294, 1
  %9296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9295, i8* %9296, align 1, !tbaa !2446
  %9297 = xor i64 1, %9280
  %9298 = trunc i64 %9297 to i32
  %9299 = xor i32 %9298, %9284
  %9300 = lshr i32 %9299, 4
  %9301 = trunc i32 %9300 to i8
  %9302 = and i8 %9301, 1
  %9303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9302, i8* %9303, align 1, !tbaa !2447
  %9304 = icmp eq i32 %9284, 0
  %9305 = zext i1 %9304 to i8
  %9306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9305, i8* %9306, align 1, !tbaa !2448
  %9307 = lshr i32 %9284, 31
  %9308 = trunc i32 %9307 to i8
  %9309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9308, i8* %9309, align 1, !tbaa !2449
  %9310 = lshr i32 %9283, 31
  %9311 = xor i32 %9307, %9310
  %9312 = add nuw nsw i32 %9311, %9307
  %9313 = icmp eq i32 %9312, 2
  %9314 = zext i1 %9313 to i8
  %9315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9314, i8* %9315, align 1, !tbaa !2450
  %9316 = load i64, i64* %RBP
  %9317 = sub i64 %9316, 4
  %9318 = load i32, i32* %EAX
  %9319 = zext i32 %9318 to i64
  %9320 = load i64, i64* %PC
  %9321 = add i64 %9320, 3
  store i64 %9321, i64* %PC
  %9322 = inttoptr i64 %9317 to i32*
  store i32 %9318, i32* %9322
  %9323 = load i64, i64* %PC
  %9324 = sub i64 %9323, 95
  %9325 = load i64, i64* %PC
  %9326 = add i64 %9325, 5
  store i64 %9326, i64* %PC
  %9327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9324, i64* %9327, align 8, !tbaa !2428
  br label %block_4017f4

block_400a43:                                     ; preds = %block_400a36
  %9328 = sub i64 %9621, 1248
  %9329 = load i64, i64* %PC
  %9330 = add i64 %9329, 10
  store i64 %9330, i64* %PC
  %9331 = inttoptr i64 %9328 to i32*
  store i32 0, i32* %9331
  %9332 = load i64, i64* %RBP
  %9333 = sub i64 %9332, 1484
  %9334 = load i64, i64* %PC
  %9335 = add i64 %9334, 6
  store i64 %9335, i64* %PC
  %9336 = inttoptr i64 %9333 to i32*
  %9337 = load i32, i32* %9336
  %9338 = zext i32 %9337 to i64
  store i64 %9338, i64* %RAX, align 8, !tbaa !2428
  %9339 = load i64, i64* %RBP
  %9340 = sub i64 %9339, 1244
  %9341 = load i32, i32* %EAX
  %9342 = zext i32 %9341 to i64
  %9343 = load i64, i64* %PC
  %9344 = add i64 %9343, 6
  store i64 %9344, i64* %PC
  %9345 = inttoptr i64 %9340 to i32*
  store i32 %9341, i32* %9345
  %9346 = load i64, i64* %RBP
  %9347 = sub i64 %9346, 1168
  %9348 = load i64, i64* %PC
  %9349 = add i64 %9348, 10
  store i64 %9349, i64* %PC
  %9350 = inttoptr i64 %9347 to i32*
  store i32 0, i32* %9350
  %9351 = load i64, i64* %RBP
  %9352 = sub i64 %9351, 1104
  %9353 = load i64, i64* %PC
  %9354 = add i64 %9353, 10
  store i64 %9354, i64* %PC
  %9355 = inttoptr i64 %9352 to i32*
  store i32 1, i32* %9355
  %9356 = load i64, i64* %RBP
  %9357 = sub i64 %9356, 4
  %9358 = load i64, i64* %PC
  %9359 = add i64 %9358, 7
  store i64 %9359, i64* %PC
  %9360 = inttoptr i64 %9357 to i32*
  store i32 1, i32* %9360
  br label %block_400a74

block_400960:                                     ; preds = %block_400956
  %9361 = sub i64 %2401, 4
  %9362 = load i64, i64* %PC
  %9363 = add i64 %9362, 4
  store i64 %9363, i64* %PC
  %9364 = inttoptr i64 %9361 to i32*
  %9365 = load i32, i32* %9364
  %9366 = sext i32 %9365 to i64
  store i64 %9366, i64* %RAX, align 8, !tbaa !2428
  %9367 = load i64, i64* %RBP
  %9368 = load i64, i64* %RAX
  %9369 = mul i64 %9368, 4
  %9370 = add i64 %9367, -1488
  %9371 = add i64 %9370, %9369
  %9372 = load i64, i64* %PC
  %9373 = add i64 %9372, 11
  store i64 %9373, i64* %PC
  %9374 = inttoptr i64 %9371 to i32*
  store i32 0, i32* %9374
  %9375 = load i64, i64* %RBP
  %9376 = sub i64 %9375, 8
  %9377 = load i64, i64* %PC
  %9378 = add i64 %9377, 7
  store i64 %9378, i64* %PC
  %9379 = inttoptr i64 %9376 to i32*
  store i32 0, i32* %9379
  br label %block_400976

block_4014b7:                                     ; preds = %block_401485, %block_4014a8
  %MEMORY.42 = phi %struct.Memory* [ %MEMORY.49, %block_4014a8 ], [ %MEMORY.49, %block_401485 ]
  %9380 = load i64, i64* %PC
  %9381 = add i64 %9380, 5
  %9382 = load i64, i64* %PC
  %9383 = add i64 %9382, 5
  store i64 %9383, i64* %PC
  %9384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9381, i64* %9384, align 8, !tbaa !2428
  %9385 = load i64, i64* %RBP
  %9386 = sub i64 %9385, 4
  %9387 = load i64, i64* %PC
  %9388 = add i64 %9387, 3
  store i64 %9388, i64* %PC
  %9389 = inttoptr i64 %9386 to i32*
  %9390 = load i32, i32* %9389
  %9391 = zext i32 %9390 to i64
  store i64 %9391, i64* %RAX, align 8, !tbaa !2428
  %9392 = load i64, i64* %RAX
  %9393 = load i64, i64* %PC
  %9394 = add i64 %9393, 3
  store i64 %9394, i64* %PC
  %9395 = trunc i64 %9392 to i32
  %9396 = add i32 1, %9395
  %9397 = zext i32 %9396 to i64
  store i64 %9397, i64* %RAX, align 8, !tbaa !2428
  %9398 = icmp ult i32 %9396, %9395
  %9399 = icmp ult i32 %9396, 1
  %9400 = or i1 %9398, %9399
  %9401 = zext i1 %9400 to i8
  %9402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9401, i8* %9402, align 1, !tbaa !2432
  %9403 = and i32 %9396, 255
  %9404 = call i32 @llvm.ctpop.i32(i32 %9403) #16
  %9405 = trunc i32 %9404 to i8
  %9406 = and i8 %9405, 1
  %9407 = xor i8 %9406, 1
  %9408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9407, i8* %9408, align 1, !tbaa !2446
  %9409 = xor i64 1, %9392
  %9410 = trunc i64 %9409 to i32
  %9411 = xor i32 %9410, %9396
  %9412 = lshr i32 %9411, 4
  %9413 = trunc i32 %9412 to i8
  %9414 = and i8 %9413, 1
  %9415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9414, i8* %9415, align 1, !tbaa !2447
  %9416 = icmp eq i32 %9396, 0
  %9417 = zext i1 %9416 to i8
  %9418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9417, i8* %9418, align 1, !tbaa !2448
  %9419 = lshr i32 %9396, 31
  %9420 = trunc i32 %9419 to i8
  %9421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9420, i8* %9421, align 1, !tbaa !2449
  %9422 = lshr i32 %9395, 31
  %9423 = xor i32 %9419, %9422
  %9424 = add nuw nsw i32 %9423, %9419
  %9425 = icmp eq i32 %9424, 2
  %9426 = zext i1 %9425 to i8
  %9427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9426, i8* %9427, align 1, !tbaa !2450
  %9428 = load i64, i64* %RBP
  %9429 = sub i64 %9428, 4
  %9430 = load i32, i32* %EAX
  %9431 = zext i32 %9430 to i64
  %9432 = load i64, i64* %PC
  %9433 = add i64 %9432, 3
  store i64 %9433, i64* %PC
  %9434 = inttoptr i64 %9429 to i32*
  store i32 %9430, i32* %9434
  %9435 = load i64, i64* %PC
  %9436 = sub i64 %9435, 110
  %9437 = load i64, i64* %PC
  %9438 = add i64 %9437, 5
  store i64 %9438, i64* %PC
  %9439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9436, i64* %9439, align 8, !tbaa !2428
  br label %block_401457

block_400c3c:                                     ; preds = %block_400c20
  %9440 = load i64, i64* %RBP
  %9441 = sub i64 %9440, 8
  %9442 = load i64, i64* %PC
  %9443 = add i64 %9442, 3
  store i64 %9443, i64* %PC
  %9444 = inttoptr i64 %9441 to i32*
  %9445 = load i32, i32* %9444
  %9446 = zext i32 %9445 to i64
  store i64 %9446, i64* %RAX, align 8, !tbaa !2428
  %9447 = load i64, i64* %RBP
  %9448 = sub i64 %9447, 16
  %9449 = load i32, i32* %EAX
  %9450 = zext i32 %9449 to i64
  %9451 = load i64, i64* %PC
  %9452 = add i64 %9451, 3
  store i64 %9452, i64* %PC
  %9453 = inttoptr i64 %9448 to i32*
  store i32 %9449, i32* %9453
  br label %block_400c42

block_401237:                                     ; preds = %block_401225
  %9454 = load i64, i64* %RBP
  %9455 = sub i64 %9454, 1168
  %9456 = load i64, i64* %PC
  %9457 = add i64 %9456, 7
  store i64 %9457, i64* %PC
  store i64 %9455, i64* %RAX, align 8, !tbaa !2428
  %9458 = load i64, i64* %RBP
  %9459 = sub i64 %9458, 12
  %9460 = load i64, i64* %PC
  %9461 = add i64 %9460, 4
  store i64 %9461, i64* %PC
  %9462 = inttoptr i64 %9459 to i32*
  %9463 = load i32, i32* %9462
  %9464 = sext i32 %9463 to i64
  store i64 %9464, i64* %RCX, align 8, !tbaa !2428
  %9465 = load i64, i64* %RCX
  %9466 = load i64, i64* %PC
  %9467 = add i64 %9466, 4
  store i64 %9467, i64* %PC
  %9468 = shl i64 %9465, 5
  %9469 = icmp slt i64 %9468, 0
  %9470 = shl i64 %9468, 1
  store i64 %9470, i64* %RCX, align 8, !tbaa !2428
  %9471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9472 = zext i1 %9469 to i8
  store i8 %9472, i8* %9471, align 1, !tbaa !2451
  %9473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %9474 = trunc i64 %9470 to i32
  %9475 = and i32 %9474, 254
  %9476 = call i32 @llvm.ctpop.i32(i32 %9475) #16
  %9477 = trunc i32 %9476 to i8
  %9478 = and i8 %9477, 1
  %9479 = xor i8 %9478, 1
  store i8 %9479, i8* %9473, align 1, !tbaa !2451
  %9480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9480, align 1, !tbaa !2451
  %9481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9482 = icmp eq i64 %9470, 0
  %9483 = zext i1 %9482 to i8
  store i8 %9483, i8* %9481, align 1, !tbaa !2451
  %9484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9485 = lshr i64 %9470, 63
  %9486 = trunc i64 %9485 to i8
  store i8 %9486, i8* %9484, align 1, !tbaa !2451
  %9487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9487, align 1, !tbaa !2451
  %9488 = load i64, i64* %RAX
  %9489 = load i64, i64* %RCX
  %9490 = load i64, i64* %PC
  %9491 = add i64 %9490, 3
  store i64 %9491, i64* %PC
  %9492 = add i64 %9489, %9488
  store i64 %9492, i64* %RAX, align 8, !tbaa !2428
  %9493 = icmp ult i64 %9492, %9488
  %9494 = icmp ult i64 %9492, %9489
  %9495 = or i1 %9493, %9494
  %9496 = zext i1 %9495 to i8
  %9497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9496, i8* %9497, align 1, !tbaa !2432
  %9498 = trunc i64 %9492 to i32
  %9499 = and i32 %9498, 255
  %9500 = call i32 @llvm.ctpop.i32(i32 %9499) #16
  %9501 = trunc i32 %9500 to i8
  %9502 = and i8 %9501, 1
  %9503 = xor i8 %9502, 1
  %9504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9503, i8* %9504, align 1, !tbaa !2446
  %9505 = xor i64 %9489, %9488
  %9506 = xor i64 %9505, %9492
  %9507 = lshr i64 %9506, 4
  %9508 = trunc i64 %9507 to i8
  %9509 = and i8 %9508, 1
  %9510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9509, i8* %9510, align 1, !tbaa !2447
  %9511 = icmp eq i64 %9492, 0
  %9512 = zext i1 %9511 to i8
  %9513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9512, i8* %9513, align 1, !tbaa !2448
  %9514 = lshr i64 %9492, 63
  %9515 = trunc i64 %9514 to i8
  %9516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9515, i8* %9516, align 1, !tbaa !2449
  %9517 = lshr i64 %9488, 63
  %9518 = lshr i64 %9489, 63
  %9519 = xor i64 %9514, %9517
  %9520 = xor i64 %9514, %9518
  %9521 = add nuw nsw i64 %9519, %9520
  %9522 = icmp eq i64 %9521, 2
  %9523 = zext i1 %9522 to i8
  %9524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9523, i8* %9524, align 1, !tbaa !2450
  %9525 = load i64, i64* %RBP
  %9526 = sub i64 %9525, 4
  %9527 = load i64, i64* %PC
  %9528 = add i64 %9527, 4
  store i64 %9528, i64* %PC
  %9529 = inttoptr i64 %9526 to i32*
  %9530 = load i32, i32* %9529
  %9531 = sext i32 %9530 to i64
  store i64 %9531, i64* %RCX, align 8, !tbaa !2428
  %9532 = load i64, i64* %RAX
  %9533 = load i64, i64* %RCX
  %9534 = mul i64 %9533, 4
  %9535 = add i64 %9534, %9532
  %9536 = load i64, i64* %PC
  %9537 = add i64 %9536, 4
  store i64 %9537, i64* %PC
  %9538 = inttoptr i64 %9535 to i32*
  %9539 = load i32, i32* %9538
  %9540 = sub i32 %9539, -1
  %9541 = icmp ult i32 %9539, -1
  %9542 = zext i1 %9541 to i8
  %9543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9542, i8* %9543, align 1, !tbaa !2432
  %9544 = and i32 %9540, 255
  %9545 = call i32 @llvm.ctpop.i32(i32 %9544) #16
  %9546 = trunc i32 %9545 to i8
  %9547 = and i8 %9546, 1
  %9548 = xor i8 %9547, 1
  %9549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9548, i8* %9549, align 1, !tbaa !2446
  %9550 = xor i32 %9539, -1
  %9551 = xor i32 %9550, %9540
  %9552 = lshr i32 %9551, 4
  %9553 = trunc i32 %9552 to i8
  %9554 = and i8 %9553, 1
  %9555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9554, i8* %9555, align 1, !tbaa !2447
  %9556 = icmp eq i32 %9540, 0
  %9557 = zext i1 %9556 to i8
  %9558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9557, i8* %9558, align 1, !tbaa !2448
  %9559 = lshr i32 %9540, 31
  %9560 = trunc i32 %9559 to i8
  %9561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9560, i8* %9561, align 1, !tbaa !2449
  %9562 = lshr i32 %9539, 31
  %9563 = xor i32 %9562, 1
  %9564 = xor i32 %9559, %9562
  %9565 = add nuw nsw i32 %9564, %9563
  %9566 = icmp eq i32 %9565, 2
  %9567 = zext i1 %9566 to i8
  %9568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9567, i8* %9568, align 1, !tbaa !2450
  %9569 = load i64, i64* %PC
  %9570 = add i64 %9569, 74
  %9571 = load i64, i64* %PC
  %9572 = add i64 %9571, 6
  %9573 = load i64, i64* %PC
  %9574 = add i64 %9573, 6
  store i64 %9574, i64* %PC
  %9575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9576 = load i8, i8* %9575, align 1, !tbaa !2448
  store i8 %9576, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9578 = icmp ne i8 %9576, 0
  %9579 = select i1 %9578, i64 %9570, i64 %9572
  store i64 %9579, i64* %9577, align 8, !tbaa !2428
  %9580 = load i8, i8* %BRANCH_TAKEN
  %9581 = icmp eq i8 %9580, 1
  br i1 %9581, label %block_40129b, label %block_401257

block_40120a:                                     ; preds = %block_4011f3
  %9582 = inttoptr i64 %4901 to i32*
  store i32 1, i32* %9582
  br label %block_401211

block_400a36:                                     ; preds = %block_400956
  %9583 = sub i64 %2401, 1496
  %9584 = load i64, i64* %PC
  %9585 = add i64 %9584, 7
  store i64 %9585, i64* %PC
  %9586 = inttoptr i64 %9583 to i32*
  %9587 = load i32, i32* %9586
  %9588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9588, align 1, !tbaa !2432
  %9589 = and i32 %9587, 255
  %9590 = call i32 @llvm.ctpop.i32(i32 %9589) #16
  %9591 = trunc i32 %9590 to i8
  %9592 = and i8 %9591, 1
  %9593 = xor i8 %9592, 1
  %9594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9593, i8* %9594, align 1, !tbaa !2446
  %9595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9595, align 1, !tbaa !2447
  %9596 = icmp eq i32 %9587, 0
  %9597 = zext i1 %9596 to i8
  %9598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9597, i8* %9598, align 1, !tbaa !2448
  %9599 = lshr i32 %9587, 31
  %9600 = trunc i32 %9599 to i8
  %9601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9600, i8* %9601, align 1, !tbaa !2449
  %9602 = lshr i32 %9587, 31
  %9603 = xor i32 %9599, %9602
  %9604 = add nuw nsw i32 %9603, %9602
  %9605 = icmp eq i32 %9604, 2
  %9606 = zext i1 %9605 to i8
  %9607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9606, i8* %9607, align 1, !tbaa !2450
  %9608 = load i64, i64* %PC
  %9609 = add i64 %9608, 3504
  %9610 = load i64, i64* %PC
  %9611 = add i64 %9610, 6
  %9612 = load i64, i64* %PC
  %9613 = add i64 %9612, 6
  store i64 %9613, i64* %PC
  %9614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9615 = load i8, i8* %9614, align 1, !tbaa !2448
  store i8 %9615, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9617 = icmp ne i8 %9615, 0
  %9618 = select i1 %9617, i64 %9609, i64 %9611
  store i64 %9618, i64* %9616, align 8, !tbaa !2428
  %9619 = load i8, i8* %BRANCH_TAKEN
  %9620 = icmp eq i8 %9619, 1
  %9621 = load i64, i64* %RBP
  br i1 %9620, label %block_4017ed, label %block_400a43

block_401373:                                     ; preds = %block_40136c, %block_401411
  %MEMORY.43 = phi %struct.Memory* [ %MEMORY.51, %block_40136c ], [ %MEMORY.30, %block_401411 ]
  %9622 = load i64, i64* %RBP
  %9623 = sub i64 %9622, 8
  %9624 = load i64, i64* %PC
  %9625 = add i64 %9624, 3
  store i64 %9625, i64* %PC
  %9626 = inttoptr i64 %9623 to i32*
  %9627 = load i32, i32* %9626
  %9628 = zext i32 %9627 to i64
  store i64 %9628, i64* %RAX, align 8, !tbaa !2428
  %9629 = load i32, i32* %EAX
  %9630 = zext i32 %9629 to i64
  %9631 = load i64, i64* %RBP
  %9632 = sub i64 %9631, 4
  %9633 = load i64, i64* %PC
  %9634 = add i64 %9633, 3
  store i64 %9634, i64* %PC
  %9635 = inttoptr i64 %9632 to i32*
  %9636 = load i32, i32* %9635
  %9637 = sub i32 %9629, %9636
  %9638 = icmp ult i32 %9629, %9636
  %9639 = zext i1 %9638 to i8
  %9640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9639, i8* %9640, align 1, !tbaa !2432
  %9641 = and i32 %9637, 255
  %9642 = call i32 @llvm.ctpop.i32(i32 %9641) #16
  %9643 = trunc i32 %9642 to i8
  %9644 = and i8 %9643, 1
  %9645 = xor i8 %9644, 1
  %9646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9645, i8* %9646, align 1, !tbaa !2446
  %9647 = xor i32 %9636, %9629
  %9648 = xor i32 %9647, %9637
  %9649 = lshr i32 %9648, 4
  %9650 = trunc i32 %9649 to i8
  %9651 = and i8 %9650, 1
  %9652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9651, i8* %9652, align 1, !tbaa !2447
  %9653 = icmp eq i32 %9637, 0
  %9654 = zext i1 %9653 to i8
  %9655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9654, i8* %9655, align 1, !tbaa !2448
  %9656 = lshr i32 %9637, 31
  %9657 = trunc i32 %9656 to i8
  %9658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9657, i8* %9658, align 1, !tbaa !2449
  %9659 = lshr i32 %9629, 31
  %9660 = lshr i32 %9636, 31
  %9661 = xor i32 %9660, %9659
  %9662 = xor i32 %9656, %9659
  %9663 = add nuw nsw i32 %9662, %9661
  %9664 = icmp eq i32 %9663, 2
  %9665 = zext i1 %9664 to i8
  %9666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9665, i8* %9666, align 1, !tbaa !2450
  %9667 = load i64, i64* %PC
  %9668 = add i64 %9667, 171
  %9669 = load i64, i64* %PC
  %9670 = add i64 %9669, 6
  %9671 = load i64, i64* %PC
  %9672 = add i64 %9671, 6
  store i64 %9672, i64* %PC
  %9673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9674 = load i8, i8* %9673, align 1, !tbaa !2449
  %9675 = icmp ne i8 %9674, 0
  %9676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9677 = load i8, i8* %9676, align 1, !tbaa !2450
  %9678 = icmp ne i8 %9677, 0
  %9679 = xor i1 %9675, %9678
  %9680 = xor i1 %9679, true
  %9681 = zext i1 %9680 to i8
  store i8 %9681, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9683 = select i1 %9679, i64 %9670, i64 %9668
  store i64 %9683, i64* %9682, align 8, !tbaa !2428
  %9684 = load i8, i8* %BRANCH_TAKEN
  %9685 = icmp eq i8 %9684, 1
  %9686 = load i64, i64* %RBP
  br i1 %9685, label %block_401424, label %block_40137f

block_401225:                                     ; preds = %block_401211
  %9687 = add i64 %10392, 4
  store i64 %9687, i64* %PC
  %9688 = inttoptr i64 %10391 to i32*
  %9689 = load i32, i32* %9688
  %9690 = sext i32 %9689 to i64
  store i64 %9690, i64* %RAX, align 8, !tbaa !2428
  %9691 = load i64, i64* %RBP
  %9692 = load i64, i64* %RAX
  %9693 = mul i64 %9692, 4
  %9694 = add i64 %9691, -1488
  %9695 = add i64 %9694, %9693
  %9696 = load i64, i64* %PC
  %9697 = add i64 %9696, 8
  store i64 %9697, i64* %PC
  %9698 = inttoptr i64 %9695 to i32*
  %9699 = load i32, i32* %9698
  %9700 = sub i32 %9699, -1
  %9701 = icmp ult i32 %9699, -1
  %9702 = zext i1 %9701 to i8
  %9703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9702, i8* %9703, align 1, !tbaa !2432
  %9704 = and i32 %9700, 255
  %9705 = call i32 @llvm.ctpop.i32(i32 %9704) #16
  %9706 = trunc i32 %9705 to i8
  %9707 = and i8 %9706, 1
  %9708 = xor i8 %9707, 1
  %9709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9708, i8* %9709, align 1, !tbaa !2446
  %9710 = xor i32 %9699, -1
  %9711 = xor i32 %9710, %9700
  %9712 = lshr i32 %9711, 4
  %9713 = trunc i32 %9712 to i8
  %9714 = and i8 %9713, 1
  %9715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9714, i8* %9715, align 1, !tbaa !2447
  %9716 = icmp eq i32 %9700, 0
  %9717 = zext i1 %9716 to i8
  %9718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9717, i8* %9718, align 1, !tbaa !2448
  %9719 = lshr i32 %9700, 31
  %9720 = trunc i32 %9719 to i8
  %9721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9720, i8* %9721, align 1, !tbaa !2449
  %9722 = lshr i32 %9699, 31
  %9723 = xor i32 %9722, 1
  %9724 = xor i32 %9719, %9722
  %9725 = add nuw nsw i32 %9724, %9723
  %9726 = icmp eq i32 %9725, 2
  %9727 = zext i1 %9726 to i8
  %9728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9727, i8* %9728, align 1, !tbaa !2450
  %9729 = load i64, i64* %PC
  %9730 = add i64 %9729, 106
  %9731 = load i64, i64* %PC
  %9732 = add i64 %9731, 6
  %9733 = load i64, i64* %PC
  %9734 = add i64 %9733, 6
  store i64 %9734, i64* %PC
  %9735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9736 = load i8, i8* %9735, align 1, !tbaa !2448
  store i8 %9736, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9738 = icmp ne i8 %9736, 0
  %9739 = select i1 %9738, i64 %9730, i64 %9732
  store i64 %9739, i64* %9737, align 8, !tbaa !2428
  %9740 = load i8, i8* %BRANCH_TAKEN
  %9741 = icmp eq i8 %9740, 1
  br i1 %9741, label %block_40129b, label %block_401237

block_401424:                                     ; preds = %block_401373
  %9742 = sub i64 %9686, 4
  %9743 = load i64, i64* %PC
  %9744 = add i64 %9743, 4
  store i64 %9744, i64* %PC
  %9745 = inttoptr i64 %9742 to i32*
  %9746 = load i32, i32* %9745
  %9747 = sext i32 %9746 to i64
  store i64 %9747, i64* %RAX, align 8, !tbaa !2428
  %9748 = load i64, i64* %RBP
  %9749 = load i64, i64* %RAX
  %9750 = mul i64 %9749, 4
  %9751 = add i64 %9748, -1616
  %9752 = add i64 %9751, %9750
  %9753 = load i64, i64* %PC
  %9754 = add i64 %9753, 8
  store i64 %9754, i64* %PC
  %9755 = inttoptr i64 %9752 to i32*
  %9756 = load i32, i32* %9755
  %9757 = sext i32 %9756 to i64
  store i64 %9757, i64* %RAX, align 8, !tbaa !2428
  %9758 = load i64, i64* %RAX
  %9759 = mul i64 %9758, 4
  %9760 = add i64 %9759, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %9761 = load i64, i64* %PC
  %9762 = add i64 %9761, 7
  store i64 %9762, i64* %PC
  %9763 = inttoptr i64 %9760 to i32*
  %9764 = load i32, i32* %9763
  %9765 = zext i32 %9764 to i64
  store i64 %9765, i64* %RCX, align 8, !tbaa !2428
  %9766 = load i64, i64* %RBP
  %9767 = sub i64 %9766, 4
  %9768 = load i64, i64* %PC
  %9769 = add i64 %9768, 4
  store i64 %9769, i64* %PC
  %9770 = inttoptr i64 %9767 to i32*
  %9771 = load i32, i32* %9770
  %9772 = sext i32 %9771 to i64
  store i64 %9772, i64* %RAX, align 8, !tbaa !2428
  %9773 = load i64, i64* %RBP
  %9774 = load i64, i64* %RAX
  %9775 = mul i64 %9774, 4
  %9776 = add i64 %9773, -1616
  %9777 = add i64 %9776, %9775
  %9778 = load i32, i32* %ECX
  %9779 = zext i32 %9778 to i64
  %9780 = load i64, i64* %PC
  %9781 = add i64 %9780, 7
  store i64 %9781, i64* %PC
  %9782 = inttoptr i64 %9777 to i32*
  store i32 %9778, i32* %9782
  %9783 = load i64, i64* %RBP
  %9784 = sub i64 %9783, 4
  %9785 = load i64, i64* %PC
  %9786 = add i64 %9785, 3
  store i64 %9786, i64* %PC
  %9787 = inttoptr i64 %9784 to i32*
  %9788 = load i32, i32* %9787
  %9789 = zext i32 %9788 to i64
  store i64 %9789, i64* %RAX, align 8, !tbaa !2428
  %9790 = load i64, i64* %RAX
  %9791 = load i64, i64* %PC
  %9792 = add i64 %9791, 3
  store i64 %9792, i64* %PC
  %9793 = trunc i64 %9790 to i32
  %9794 = add i32 1, %9793
  %9795 = zext i32 %9794 to i64
  store i64 %9795, i64* %RAX, align 8, !tbaa !2428
  %9796 = icmp ult i32 %9794, %9793
  %9797 = icmp ult i32 %9794, 1
  %9798 = or i1 %9796, %9797
  %9799 = zext i1 %9798 to i8
  %9800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9799, i8* %9800, align 1, !tbaa !2432
  %9801 = and i32 %9794, 255
  %9802 = call i32 @llvm.ctpop.i32(i32 %9801) #16
  %9803 = trunc i32 %9802 to i8
  %9804 = and i8 %9803, 1
  %9805 = xor i8 %9804, 1
  %9806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9805, i8* %9806, align 1, !tbaa !2446
  %9807 = xor i64 1, %9790
  %9808 = trunc i64 %9807 to i32
  %9809 = xor i32 %9808, %9794
  %9810 = lshr i32 %9809, 4
  %9811 = trunc i32 %9810 to i8
  %9812 = and i8 %9811, 1
  %9813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9812, i8* %9813, align 1, !tbaa !2447
  %9814 = icmp eq i32 %9794, 0
  %9815 = zext i1 %9814 to i8
  %9816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9815, i8* %9816, align 1, !tbaa !2448
  %9817 = lshr i32 %9794, 31
  %9818 = trunc i32 %9817 to i8
  %9819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9818, i8* %9819, align 1, !tbaa !2449
  %9820 = lshr i32 %9793, 31
  %9821 = xor i32 %9817, %9820
  %9822 = add nuw nsw i32 %9821, %9817
  %9823 = icmp eq i32 %9822, 2
  %9824 = zext i1 %9823 to i8
  %9825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9824, i8* %9825, align 1, !tbaa !2450
  %9826 = load i64, i64* %RBP
  %9827 = sub i64 %9826, 4
  %9828 = load i32, i32* %EAX
  %9829 = zext i32 %9828 to i64
  %9830 = load i64, i64* %PC
  %9831 = add i64 %9830, 3
  store i64 %9831, i64* %PC
  %9832 = inttoptr i64 %9827 to i32*
  store i32 %9828, i32* %9832
  %9833 = load i64, i64* %PC
  %9834 = sub i64 %9833, 570
  %9835 = load i64, i64* %PC
  %9836 = add i64 %9835, 5
  store i64 %9836, i64* %PC
  %9837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9834, i64* %9837, align 8, !tbaa !2428
  br label %block_401211

block_400c20:                                     ; preds = %block_400c05
  %9838 = load i64, i64* %RBP
  %9839 = sub i64 %9838, 16
  %9840 = load i64, i64* %PC
  %9841 = add i64 %9840, 4
  store i64 %9841, i64* %PC
  %9842 = inttoptr i64 %9839 to i32*
  %9843 = load i32, i32* %9842
  %9844 = sext i32 %9843 to i64
  store i64 %9844, i64* %RAX, align 8, !tbaa !2428
  %9845 = load i64, i64* %RBP
  %9846 = load i64, i64* %RAX
  %9847 = mul i64 %9846, 4
  %9848 = add i64 %9845, -1408
  %9849 = add i64 %9848, %9847
  %9850 = load i64, i64* %PC
  %9851 = add i64 %9850, 7
  store i64 %9851, i64* %PC
  %9852 = inttoptr i64 %9849 to i32*
  %9853 = load i32, i32* %9852
  %9854 = zext i32 %9853 to i64
  store i64 %9854, i64* %RCX, align 8, !tbaa !2428
  %9855 = load i64, i64* %RBP
  %9856 = sub i64 %9855, 8
  %9857 = load i64, i64* %PC
  %9858 = add i64 %9857, 4
  store i64 %9858, i64* %PC
  %9859 = inttoptr i64 %9856 to i32*
  %9860 = load i32, i32* %9859
  %9861 = sext i32 %9860 to i64
  store i64 %9861, i64* %RAX, align 8, !tbaa !2428
  %9862 = load i32, i32* %ECX
  %9863 = zext i32 %9862 to i64
  %9864 = load i64, i64* %RBP
  %9865 = load i64, i64* %RAX
  %9866 = mul i64 %9865, 4
  %9867 = add i64 %9864, -1408
  %9868 = add i64 %9867, %9866
  %9869 = load i64, i64* %PC
  %9870 = add i64 %9869, 7
  store i64 %9870, i64* %PC
  %9871 = inttoptr i64 %9868 to i32*
  %9872 = load i32, i32* %9871
  %9873 = sub i32 %9862, %9872
  %9874 = icmp ult i32 %9862, %9872
  %9875 = zext i1 %9874 to i8
  %9876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9875, i8* %9876, align 1, !tbaa !2432
  %9877 = and i32 %9873, 255
  %9878 = call i32 @llvm.ctpop.i32(i32 %9877) #16
  %9879 = trunc i32 %9878 to i8
  %9880 = and i8 %9879, 1
  %9881 = xor i8 %9880, 1
  %9882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9881, i8* %9882, align 1, !tbaa !2446
  %9883 = xor i32 %9872, %9862
  %9884 = xor i32 %9883, %9873
  %9885 = lshr i32 %9884, 4
  %9886 = trunc i32 %9885 to i8
  %9887 = and i8 %9886, 1
  %9888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9887, i8* %9888, align 1, !tbaa !2447
  %9889 = icmp eq i32 %9873, 0
  %9890 = zext i1 %9889 to i8
  %9891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9890, i8* %9891, align 1, !tbaa !2448
  %9892 = lshr i32 %9873, 31
  %9893 = trunc i32 %9892 to i8
  %9894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9893, i8* %9894, align 1, !tbaa !2449
  %9895 = lshr i32 %9862, 31
  %9896 = lshr i32 %9872, 31
  %9897 = xor i32 %9896, %9895
  %9898 = xor i32 %9892, %9895
  %9899 = add nuw nsw i32 %9898, %9897
  %9900 = icmp eq i32 %9899, 2
  %9901 = zext i1 %9900 to i8
  %9902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9901, i8* %9902, align 1, !tbaa !2450
  %9903 = load i64, i64* %PC
  %9904 = add i64 %9903, 12
  %9905 = load i64, i64* %PC
  %9906 = add i64 %9905, 6
  %9907 = load i64, i64* %PC
  %9908 = add i64 %9907, 6
  store i64 %9908, i64* %PC
  %9909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9910 = load i8, i8* %9909, align 1, !tbaa !2449
  %9911 = icmp ne i8 %9910, 0
  %9912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9913 = load i8, i8* %9912, align 1, !tbaa !2450
  %9914 = icmp ne i8 %9913, 0
  %9915 = xor i1 %9911, %9914
  %9916 = xor i1 %9915, true
  %9917 = zext i1 %9916 to i8
  store i8 %9917, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9919 = select i1 %9915, i64 %9906, i64 %9904
  store i64 %9919, i64* %9918, align 8, !tbaa !2428
  %9920 = load i8, i8* %BRANCH_TAKEN
  %9921 = icmp eq i8 %9920, 1
  br i1 %9921, label %block_400c42, label %block_400c3c

block_40101e:                                     ; preds = %block_401004, %block_400feb
  %MEMORY.44 = phi %struct.Memory* [ %MEMORY.31, %block_400feb ], [ %MEMORY.31, %block_401004 ]
  %9922 = load i64, i64* %RBP
  %9923 = sub i64 %9922, 2709
  %9924 = load i64, i64* %PC
  %9925 = add i64 %9924, 6
  store i64 %9925, i64* %PC
  %9926 = inttoptr i64 %9923 to i8*
  %9927 = load i8, i8* %9926
  store i8 %9927, i8* %AL, align 1, !tbaa !2451
  %9928 = load i8, i8* %AL
  %9929 = zext i8 %9928 to i64
  %9930 = load i64, i64* %PC
  %9931 = add i64 %9930, 2
  store i64 %9931, i64* %PC
  %9932 = and i64 1, %9929
  %9933 = trunc i64 %9932 to i8
  %9934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9934, align 1, !tbaa !2432
  %9935 = trunc i64 %9932 to i32
  %9936 = and i32 %9935, 255
  %9937 = call i32 @llvm.ctpop.i32(i32 %9936) #16
  %9938 = trunc i32 %9937 to i8
  %9939 = and i8 %9938, 1
  %9940 = xor i8 %9939, 1
  %9941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9940, i8* %9941, align 1, !tbaa !2446
  %9942 = icmp eq i8 %9933, 0
  %9943 = zext i1 %9942 to i8
  %9944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9943, i8* %9944, align 1, !tbaa !2448
  %9945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %9945, align 1, !tbaa !2449
  %9946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9946, align 1, !tbaa !2450
  %9947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9947, align 1, !tbaa !2447
  %9948 = load i64, i64* %PC
  %9949 = sub i64 %9948, 1357
  %9950 = load i64, i64* %PC
  %9951 = add i64 %9950, 6
  %9952 = load i64, i64* %PC
  %9953 = add i64 %9952, 6
  store i64 %9953, i64* %PC
  %9954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9955 = load i8, i8* %9954, align 1, !tbaa !2448
  %9956 = icmp eq i8 %9955, 0
  %9957 = zext i1 %9956 to i8
  store i8 %9957, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9959 = select i1 %9956, i64 %9949, i64 %9951
  store i64 %9959, i64* %9958, align 8, !tbaa !2428
  %9960 = load i8, i8* %BRANCH_TAKEN
  %9961 = icmp eq i8 %9960, 1
  br i1 %9961, label %block_400ad9, label %block_40102c

block_400af4:                                     ; preds = %block_400ad9
  %9962 = add i64 %10504, 4
  store i64 %9962, i64* %PC
  %9963 = inttoptr i64 %10503 to i32*
  %9964 = load i32, i32* %9963
  %9965 = sext i32 %9964 to i64
  store i64 %9965, i64* %RAX, align 8, !tbaa !2428
  %9966 = load i64, i64* %RBP
  %9967 = load i64, i64* %RAX
  %9968 = mul i64 %9967, 4
  %9969 = add i64 %9966, -1328
  %9970 = add i64 %9969, %9968
  %9971 = load i64, i64* %PC
  %9972 = add i64 %9971, 7
  store i64 %9972, i64* %PC
  %9973 = inttoptr i64 %9970 to i32*
  %9974 = load i32, i32* %9973
  %9975 = zext i32 %9974 to i64
  store i64 %9975, i64* %RCX, align 8, !tbaa !2428
  %9976 = load i64, i64* %RBP
  %9977 = sub i64 %9976, 12
  %9978 = load i64, i64* %PC
  %9979 = add i64 %9978, 3
  store i64 %9979, i64* %PC
  %9980 = inttoptr i64 %9977 to i32*
  %9981 = load i32, i32* %9980
  %9982 = zext i32 %9981 to i64
  store i64 %9982, i64* %RDX, align 8, !tbaa !2428
  %9983 = load i64, i64* %RDX
  %9984 = load i64, i64* %PC
  %9985 = add i64 %9984, 3
  store i64 %9985, i64* %PC
  %9986 = trunc i64 %9983 to i32
  %9987 = add i32 1, %9986
  %9988 = zext i32 %9987 to i64
  store i64 %9988, i64* %RDX, align 8, !tbaa !2428
  %9989 = icmp ult i32 %9987, %9986
  %9990 = icmp ult i32 %9987, 1
  %9991 = or i1 %9989, %9990
  %9992 = zext i1 %9991 to i8
  %9993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9992, i8* %9993, align 1, !tbaa !2432
  %9994 = and i32 %9987, 255
  %9995 = call i32 @llvm.ctpop.i32(i32 %9994) #16
  %9996 = trunc i32 %9995 to i8
  %9997 = and i8 %9996, 1
  %9998 = xor i8 %9997, 1
  %9999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9998, i8* %9999, align 1, !tbaa !2446
  %10000 = xor i64 1, %9983
  %10001 = trunc i64 %10000 to i32
  %10002 = xor i32 %10001, %9987
  %10003 = lshr i32 %10002, 4
  %10004 = trunc i32 %10003 to i8
  %10005 = and i8 %10004, 1
  %10006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10005, i8* %10006, align 1, !tbaa !2447
  %10007 = icmp eq i32 %9987, 0
  %10008 = zext i1 %10007 to i8
  %10009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10008, i8* %10009, align 1, !tbaa !2448
  %10010 = lshr i32 %9987, 31
  %10011 = trunc i32 %10010 to i8
  %10012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10011, i8* %10012, align 1, !tbaa !2449
  %10013 = lshr i32 %9986, 31
  %10014 = xor i32 %10010, %10013
  %10015 = add nuw nsw i32 %10014, %10010
  %10016 = icmp eq i32 %10015, 2
  %10017 = zext i1 %10016 to i8
  %10018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10017, i8* %10018, align 1, !tbaa !2450
  %10019 = load i32, i32* %EDX
  %10020 = zext i32 %10019 to i64
  %10021 = load i64, i64* %PC
  %10022 = add i64 %10021, 3
  store i64 %10022, i64* %PC
  %10023 = shl i64 %10020, 32
  %10024 = ashr exact i64 %10023, 32
  store i64 %10024, i64* %RAX, align 8, !tbaa !2428
  %10025 = load i64, i64* %RBP
  %10026 = load i64, i64* %RAX
  %10027 = mul i64 %10026, 4
  %10028 = add i64 %10025, -1328
  %10029 = add i64 %10028, %10027
  %10030 = load i32, i32* %ECX
  %10031 = zext i32 %10030 to i64
  %10032 = load i64, i64* %PC
  %10033 = add i64 %10032, 7
  store i64 %10033, i64* %PC
  %10034 = inttoptr i64 %10029 to i32*
  store i32 %10030, i32* %10034
  %10035 = load i64, i64* %RBP
  %10036 = sub i64 %10035, 4
  %10037 = load i64, i64* %PC
  %10038 = add i64 %10037, 7
  store i64 %10038, i64* %PC
  %10039 = inttoptr i64 %10036 to i32*
  store i32 0, i32* %10039
  br label %block_400b16

block_400c42:                                     ; preds = %block_400c05, %block_400c20, %block_400c3c
  %MEMORY.45 = phi %struct.Memory* [ %MEMORY.52, %block_400c05 ], [ %MEMORY.52, %block_400c20 ], [ %MEMORY.52, %block_400c3c ]
  %10040 = load i64, i64* %PC
  %10041 = add i64 %10040, 5
  %10042 = load i64, i64* %PC
  %10043 = add i64 %10042, 5
  store i64 %10043, i64* %PC
  %10044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10041, i64* %10044, align 8, !tbaa !2428
  %10045 = load i64, i64* %RBP
  %10046 = sub i64 %10045, 8
  %10047 = load i64, i64* %PC
  %10048 = add i64 %10047, 4
  store i64 %10048, i64* %PC
  %10049 = inttoptr i64 %10046 to i32*
  %10050 = load i32, i32* %10049
  %10051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10051, align 1, !tbaa !2432
  %10052 = and i32 %10050, 255
  %10053 = call i32 @llvm.ctpop.i32(i32 %10052) #16
  %10054 = trunc i32 %10053 to i8
  %10055 = and i8 %10054, 1
  %10056 = xor i8 %10055, 1
  %10057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10056, i8* %10057, align 1, !tbaa !2446
  %10058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10058, align 1, !tbaa !2447
  %10059 = icmp eq i32 %10050, 0
  %10060 = zext i1 %10059 to i8
  %10061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10060, i8* %10061, align 1, !tbaa !2448
  %10062 = lshr i32 %10050, 31
  %10063 = trunc i32 %10062 to i8
  %10064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10063, i8* %10064, align 1, !tbaa !2449
  %10065 = lshr i32 %10050, 31
  %10066 = xor i32 %10062, %10065
  %10067 = add nuw nsw i32 %10066, %10065
  %10068 = icmp eq i32 %10067, 2
  %10069 = zext i1 %10068 to i8
  %10070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10069, i8* %10070, align 1, !tbaa !2450
  %10071 = load i64, i64* %PC
  %10072 = sub i64 %10071, 70
  %10073 = load i64, i64* %PC
  %10074 = add i64 %10073, 6
  %10075 = load i64, i64* %PC
  %10076 = add i64 %10075, 6
  store i64 %10076, i64* %PC
  %10077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10078 = load i8, i8* %10077, align 1, !tbaa !2448
  %10079 = icmp eq i8 %10078, 0
  %10080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10081 = load i8, i8* %10080, align 1, !tbaa !2449
  %10082 = icmp ne i8 %10081, 0
  %10083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %10084 = load i8, i8* %10083, align 1, !tbaa !2450
  %10085 = icmp ne i8 %10084, 0
  %10086 = xor i1 %10082, %10085
  %10087 = xor i1 %10086, true
  %10088 = and i1 %10079, %10087
  %10089 = zext i1 %10088 to i8
  store i8 %10089, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %10090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10091 = select i1 %10088, i64 %10072, i64 %10074
  store i64 %10091, i64* %10090, align 8, !tbaa !2428
  %10092 = load i8, i8* %BRANCH_TAKEN
  %10093 = icmp eq i8 %10092, 1
  br i1 %10093, label %block_400c05, label %block_400c51

block_40102c:                                     ; preds = %block_40101e
  %10094 = load i64, i64* %RBP
  %10095 = sub i64 %10094, 12
  %10096 = load i64, i64* %PC
  %10097 = add i64 %10096, 3
  store i64 %10097, i64* %PC
  %10098 = inttoptr i64 %10095 to i32*
  %10099 = load i32, i32* %10098
  %10100 = zext i32 %10099 to i64
  store i64 %10100, i64* %RAX, align 8, !tbaa !2428
  %10101 = load i64, i64* %RAX
  %10102 = load i64, i64* %PC
  %10103 = add i64 %10102, 3
  store i64 %10103, i64* %PC
  %10104 = trunc i64 %10101 to i32
  %10105 = add i32 1, %10104
  %10106 = zext i32 %10105 to i64
  store i64 %10106, i64* %RAX, align 8, !tbaa !2428
  %10107 = icmp ult i32 %10105, %10104
  %10108 = icmp ult i32 %10105, 1
  %10109 = or i1 %10107, %10108
  %10110 = zext i1 %10109 to i8
  %10111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10110, i8* %10111, align 1, !tbaa !2432
  %10112 = and i32 %10105, 255
  %10113 = call i32 @llvm.ctpop.i32(i32 %10112) #16
  %10114 = trunc i32 %10113 to i8
  %10115 = and i8 %10114, 1
  %10116 = xor i8 %10115, 1
  %10117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10116, i8* %10117, align 1, !tbaa !2446
  %10118 = xor i64 1, %10101
  %10119 = trunc i64 %10118 to i32
  %10120 = xor i32 %10119, %10105
  %10121 = lshr i32 %10120, 4
  %10122 = trunc i32 %10121 to i8
  %10123 = and i8 %10122, 1
  %10124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10123, i8* %10124, align 1, !tbaa !2447
  %10125 = icmp eq i32 %10105, 0
  %10126 = zext i1 %10125 to i8
  %10127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10126, i8* %10127, align 1, !tbaa !2448
  %10128 = lshr i32 %10105, 31
  %10129 = trunc i32 %10128 to i8
  %10130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10129, i8* %10130, align 1, !tbaa !2449
  %10131 = lshr i32 %10104, 31
  %10132 = xor i32 %10128, %10131
  %10133 = add nuw nsw i32 %10132, %10128
  %10134 = icmp eq i32 %10133, 2
  %10135 = zext i1 %10134 to i8
  %10136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10135, i8* %10136, align 1, !tbaa !2450
  %10137 = load i64, i64* %RBP
  %10138 = sub i64 %10137, 12
  %10139 = load i32, i32* %EAX
  %10140 = zext i32 %10139 to i64
  %10141 = load i64, i64* %PC
  %10142 = add i64 %10141, 3
  store i64 %10142, i64* %PC
  %10143 = inttoptr i64 %10138 to i32*
  store i32 %10139, i32* %10143
  %10144 = load i64, i64* %RBP
  %10145 = sub i64 %10144, 12
  %10146 = load i64, i64* %PC
  %10147 = add i64 %10146, 4
  store i64 %10147, i64* %PC
  %10148 = inttoptr i64 %10145 to i32*
  %10149 = load i32, i32* %10148
  %10150 = sext i32 %10149 to i64
  store i64 %10150, i64* %RCX, align 8, !tbaa !2428
  %10151 = load i64, i64* %RBP
  %10152 = load i64, i64* %RCX
  %10153 = mul i64 %10152, 4
  %10154 = add i64 %10151, -1328
  %10155 = add i64 %10154, %10153
  %10156 = load i64, i64* %PC
  %10157 = add i64 %10156, 8
  store i64 %10157, i64* %PC
  %10158 = inttoptr i64 %10155 to i32*
  %10159 = load i32, i32* %10158
  %10160 = sub i32 %10159, 8
  %10161 = icmp ult i32 %10159, 8
  %10162 = zext i1 %10161 to i8
  %10163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10162, i8* %10163, align 1, !tbaa !2432
  %10164 = and i32 %10160, 255
  %10165 = call i32 @llvm.ctpop.i32(i32 %10164) #16
  %10166 = trunc i32 %10165 to i8
  %10167 = and i8 %10166, 1
  %10168 = xor i8 %10167, 1
  %10169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10168, i8* %10169, align 1, !tbaa !2446
  %10170 = xor i32 %10159, 8
  %10171 = xor i32 %10170, %10160
  %10172 = lshr i32 %10171, 4
  %10173 = trunc i32 %10172 to i8
  %10174 = and i8 %10173, 1
  %10175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10174, i8* %10175, align 1, !tbaa !2447
  %10176 = icmp eq i32 %10160, 0
  %10177 = zext i1 %10176 to i8
  %10178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10177, i8* %10178, align 1, !tbaa !2448
  %10179 = lshr i32 %10160, 31
  %10180 = trunc i32 %10179 to i8
  %10181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10180, i8* %10181, align 1, !tbaa !2449
  %10182 = lshr i32 %10159, 31
  %10183 = xor i32 %10179, %10182
  %10184 = add nuw nsw i32 %10183, %10182
  %10185 = icmp eq i32 %10184, 2
  %10186 = zext i1 %10185 to i8
  %10187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10186, i8* %10187, align 1, !tbaa !2450
  %10188 = load i64, i64* %PC
  %10189 = add i64 %10188, 1847
  %10190 = load i64, i64* %PC
  %10191 = add i64 %10190, 6
  %10192 = load i64, i64* %PC
  %10193 = add i64 %10192, 6
  store i64 %10193, i64* %PC
  %10194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10195 = load i8, i8* %10194, align 1, !tbaa !2448
  %10196 = icmp eq i8 %10195, 0
  %10197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10198 = load i8, i8* %10197, align 1, !tbaa !2449
  %10199 = icmp ne i8 %10198, 0
  %10200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %10201 = load i8, i8* %10200, align 1, !tbaa !2450
  %10202 = icmp ne i8 %10201, 0
  %10203 = xor i1 %10199, %10202
  %10204 = xor i1 %10203, true
  %10205 = and i1 %10196, %10204
  %10206 = zext i1 %10205 to i8
  store i8 %10206, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %10207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10208 = select i1 %10205, i64 %10189, i64 %10191
  store i64 %10208, i64* %10207, align 8, !tbaa !2428
  %10209 = load i8, i8* %BRANCH_TAKEN
  %10210 = icmp eq i8 %10209, 1
  %10211 = load i64, i64* %RBP
  %10212 = sub i64 %10211, 4
  %10213 = load i64, i64* %PC
  %10214 = add i64 %10213, 7
  store i64 %10214, i64* %PC
  %10215 = inttoptr i64 %10212 to i32*
  store i32 0, i32* %10215
  br i1 %10210, label %block_40177f, label %block_40104e

block_40118d:                                     ; preds = %block_401133, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7
  %MEMORY.46 = phi %struct.Memory* [ %MEMORY.15, %block_401133 ], [ %1669, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit7 ]
  %10216 = load i64, i64* %PC
  %10217 = add i64 %10216, 5
  %10218 = load i64, i64* %PC
  %10219 = add i64 %10218, 5
  store i64 %10219, i64* %PC
  %10220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10217, i64* %10220, align 8, !tbaa !2428
  %10221 = load i64, i64* %RBP
  %10222 = sub i64 %10221, 8
  %10223 = load i64, i64* %PC
  %10224 = add i64 %10223, 3
  store i64 %10224, i64* %PC
  %10225 = inttoptr i64 %10222 to i32*
  %10226 = load i32, i32* %10225
  %10227 = zext i32 %10226 to i64
  store i64 %10227, i64* %RAX, align 8, !tbaa !2428
  %10228 = load i64, i64* %RAX
  %10229 = load i64, i64* %PC
  %10230 = add i64 %10229, 3
  store i64 %10230, i64* %PC
  %10231 = trunc i64 %10228 to i32
  %10232 = add i32 1, %10231
  %10233 = zext i32 %10232 to i64
  store i64 %10233, i64* %RAX, align 8, !tbaa !2428
  %10234 = icmp ult i32 %10232, %10231
  %10235 = icmp ult i32 %10232, 1
  %10236 = or i1 %10234, %10235
  %10237 = zext i1 %10236 to i8
  %10238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10237, i8* %10238, align 1, !tbaa !2432
  %10239 = and i32 %10232, 255
  %10240 = call i32 @llvm.ctpop.i32(i32 %10239) #16
  %10241 = trunc i32 %10240 to i8
  %10242 = and i8 %10241, 1
  %10243 = xor i8 %10242, 1
  %10244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10243, i8* %10244, align 1, !tbaa !2446
  %10245 = xor i64 1, %10228
  %10246 = trunc i64 %10245 to i32
  %10247 = xor i32 %10246, %10232
  %10248 = lshr i32 %10247, 4
  %10249 = trunc i32 %10248 to i8
  %10250 = and i8 %10249, 1
  %10251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10250, i8* %10251, align 1, !tbaa !2447
  %10252 = icmp eq i32 %10232, 0
  %10253 = zext i1 %10252 to i8
  %10254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10253, i8* %10254, align 1, !tbaa !2448
  %10255 = lshr i32 %10232, 31
  %10256 = trunc i32 %10255 to i8
  %10257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10256, i8* %10257, align 1, !tbaa !2449
  %10258 = lshr i32 %10231, 31
  %10259 = xor i32 %10255, %10258
  %10260 = add nuw nsw i32 %10259, %10255
  %10261 = icmp eq i32 %10260, 2
  %10262 = zext i1 %10261 to i8
  %10263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10262, i8* %10263, align 1, !tbaa !2450
  %10264 = load i64, i64* %RBP
  %10265 = sub i64 %10264, 8
  %10266 = load i32, i32* %EAX
  %10267 = zext i32 %10266 to i64
  %10268 = load i64, i64* %PC
  %10269 = add i64 %10268, 3
  store i64 %10269, i64* %PC
  %10270 = inttoptr i64 %10265 to i32*
  store i32 %10266, i32* %10270
  %10271 = load i64, i64* %PC
  %10272 = sub i64 %10271, 124
  %10273 = load i64, i64* %PC
  %10274 = add i64 %10273, 5
  store i64 %10274, i64* %PC
  %10275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10272, i64* %10275, align 8, !tbaa !2428
  br label %block_40111f

block_400cfc:                                     ; preds = %block_400cc2
  %10276 = sub i64 %4673, 4
  %10277 = load i64, i64* %PC
  %10278 = add i64 %10277, 7
  store i64 %10278, i64* %PC
  %10279 = inttoptr i64 %10276 to i32*
  store i32 0, i32* %10279
  br label %block_400d03

block_401813:                                     ; preds = %block_401801
  %10280 = add i64 %11474, 8
  store i64 %10280, i64* %PC
  %10281 = inttoptr i64 %11473 to i32*
  %10282 = load i32, i32* %10281
  %10283 = sext i32 %10282 to i64
  store i64 %10283, i64* %RAX, align 8, !tbaa !2428
  %10284 = load i64, i64* %RAX
  %10285 = mul i64 %10284, 4
  %10286 = add i64 %10285, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %10287 = load i64, i64* %PC
  %10288 = add i64 %10287, 7
  store i64 %10288, i64* %PC
  %10289 = inttoptr i64 %10286 to i32*
  %10290 = load i32, i32* %10289
  %10291 = zext i32 %10290 to i64
  store i64 %10291, i64* %RCX, align 8, !tbaa !2428
  %10292 = load i64, i64* %RBP
  %10293 = sub i64 %10292, 4
  %10294 = load i64, i64* %PC
  %10295 = add i64 %10294, 4
  store i64 %10295, i64* %PC
  %10296 = inttoptr i64 %10293 to i32*
  %10297 = load i32, i32* %10296
  %10298 = sext i32 %10297 to i64
  store i64 %10298, i64* %RAX, align 8, !tbaa !2428
  %10299 = load i64, i64* %RAX
  %10300 = mul i64 %10299, 4
  %10301 = add i64 %10300, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %10302 = load i32, i32* %ECX
  %10303 = zext i32 %10302 to i64
  %10304 = load i64, i64* %PC
  %10305 = add i64 %10304, 7
  store i64 %10305, i64* %PC
  %10306 = inttoptr i64 %10301 to i32*
  store i32 %10302, i32* %10306
  %10307 = load i64, i64* %PC
  %10308 = add i64 %10307, 20
  %10309 = load i64, i64* %PC
  %10310 = add i64 %10309, 5
  store i64 %10310, i64* %PC
  %10311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10308, i64* %10311, align 8, !tbaa !2428
  br label %block_401845

block_401211:                                     ; preds = %block_401424, %block_40120a
  %MEMORY.47 = phi %struct.Memory* [ %MEMORY.26, %block_40120a ], [ %MEMORY.43, %block_401424 ]
  %10312 = load i64, i64* %RBP
  %10313 = sub i64 %10312, 4
  %10314 = load i64, i64* %PC
  %10315 = add i64 %10314, 3
  store i64 %10315, i64* %PC
  %10316 = inttoptr i64 %10313 to i32*
  %10317 = load i32, i32* %10316
  %10318 = zext i32 %10317 to i64
  store i64 %10318, i64* %RAX, align 8, !tbaa !2428
  %10319 = load i64, i64* %RBP
  %10320 = sub i64 %10319, 12
  %10321 = load i64, i64* %PC
  %10322 = add i64 %10321, 4
  store i64 %10322, i64* %PC
  %10323 = inttoptr i64 %10320 to i32*
  %10324 = load i32, i32* %10323
  %10325 = sext i32 %10324 to i64
  store i64 %10325, i64* %RCX, align 8, !tbaa !2428
  %10326 = load i32, i32* %EAX
  %10327 = zext i32 %10326 to i64
  %10328 = load i64, i64* %RBP
  %10329 = load i64, i64* %RCX
  %10330 = mul i64 %10329, 4
  %10331 = add i64 %10328, -1328
  %10332 = add i64 %10331, %10330
  %10333 = load i64, i64* %PC
  %10334 = add i64 %10333, 7
  store i64 %10334, i64* %PC
  %10335 = inttoptr i64 %10332 to i32*
  %10336 = load i32, i32* %10335
  %10337 = sub i32 %10326, %10336
  %10338 = icmp ult i32 %10326, %10336
  %10339 = zext i1 %10338 to i8
  %10340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10339, i8* %10340, align 1, !tbaa !2432
  %10341 = and i32 %10337, 255
  %10342 = call i32 @llvm.ctpop.i32(i32 %10341) #16
  %10343 = trunc i32 %10342 to i8
  %10344 = and i8 %10343, 1
  %10345 = xor i8 %10344, 1
  %10346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10345, i8* %10346, align 1, !tbaa !2446
  %10347 = xor i32 %10336, %10326
  %10348 = xor i32 %10347, %10337
  %10349 = lshr i32 %10348, 4
  %10350 = trunc i32 %10349 to i8
  %10351 = and i8 %10350, 1
  %10352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10351, i8* %10352, align 1, !tbaa !2447
  %10353 = icmp eq i32 %10337, 0
  %10354 = zext i1 %10353 to i8
  %10355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10354, i8* %10355, align 1, !tbaa !2448
  %10356 = lshr i32 %10337, 31
  %10357 = trunc i32 %10356 to i8
  %10358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10357, i8* %10358, align 1, !tbaa !2449
  %10359 = lshr i32 %10326, 31
  %10360 = lshr i32 %10336, 31
  %10361 = xor i32 %10360, %10359
  %10362 = xor i32 %10356, %10359
  %10363 = add nuw nsw i32 %10362, %10361
  %10364 = icmp eq i32 %10363, 2
  %10365 = zext i1 %10364 to i8
  %10366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10365, i8* %10366, align 1, !tbaa !2450
  %10367 = load i64, i64* %PC
  %10368 = add i64 %10367, 561
  %10369 = load i64, i64* %PC
  %10370 = add i64 %10369, 6
  %10371 = load i64, i64* %PC
  %10372 = add i64 %10371, 6
  store i64 %10372, i64* %PC
  %10373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10374 = load i8, i8* %10373, align 1, !tbaa !2448
  %10375 = icmp eq i8 %10374, 0
  %10376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10377 = load i8, i8* %10376, align 1, !tbaa !2449
  %10378 = icmp ne i8 %10377, 0
  %10379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %10380 = load i8, i8* %10379, align 1, !tbaa !2450
  %10381 = icmp ne i8 %10380, 0
  %10382 = xor i1 %10378, %10381
  %10383 = xor i1 %10382, true
  %10384 = and i1 %10375, %10383
  %10385 = zext i1 %10384 to i8
  store i8 %10385, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %10386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10387 = select i1 %10384, i64 %10368, i64 %10370
  store i64 %10387, i64* %10386, align 8, !tbaa !2428
  %10388 = load i8, i8* %BRANCH_TAKEN
  %10389 = icmp eq i8 %10388, 1
  %10390 = load i64, i64* %RBP
  %10391 = sub i64 %10390, 4
  %10392 = load i64, i64* %PC
  br i1 %10389, label %block_401450, label %block_401225

block_400ad9:                                     ; preds = %block_40101e, %block_400aaa
  %MEMORY.48 = phi %struct.Memory* [ %MEMORY.29, %block_400aaa ], [ %MEMORY.44, %block_40101e ]
  %10393 = load i64, i64* %RBP
  %10394 = sub i64 %10393, 12
  %10395 = load i64, i64* %PC
  %10396 = add i64 %10395, 3
  store i64 %10396, i64* %PC
  %10397 = inttoptr i64 %10394 to i32*
  %10398 = load i32, i32* %10397
  %10399 = zext i32 %10398 to i64
  store i64 %10399, i64* %RAX, align 8, !tbaa !2428
  %10400 = load i64, i64* %RAX
  %10401 = load i64, i64* %PC
  %10402 = add i64 %10401, 3
  store i64 %10402, i64* %PC
  %10403 = trunc i64 %10400 to i32
  %10404 = add i32 1, %10403
  %10405 = zext i32 %10404 to i64
  store i64 %10405, i64* %RAX, align 8, !tbaa !2428
  %10406 = icmp ult i32 %10404, %10403
  %10407 = icmp ult i32 %10404, 1
  %10408 = or i1 %10406, %10407
  %10409 = zext i1 %10408 to i8
  %10410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10409, i8* %10410, align 1, !tbaa !2432
  %10411 = and i32 %10404, 255
  %10412 = call i32 @llvm.ctpop.i32(i32 %10411) #16
  %10413 = trunc i32 %10412 to i8
  %10414 = and i8 %10413, 1
  %10415 = xor i8 %10414, 1
  %10416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10415, i8* %10416, align 1, !tbaa !2446
  %10417 = xor i64 1, %10400
  %10418 = trunc i64 %10417 to i32
  %10419 = xor i32 %10418, %10404
  %10420 = lshr i32 %10419, 4
  %10421 = trunc i32 %10420 to i8
  %10422 = and i8 %10421, 1
  %10423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10422, i8* %10423, align 1, !tbaa !2447
  %10424 = icmp eq i32 %10404, 0
  %10425 = zext i1 %10424 to i8
  %10426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10425, i8* %10426, align 1, !tbaa !2448
  %10427 = lshr i32 %10404, 31
  %10428 = trunc i32 %10427 to i8
  %10429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10428, i8* %10429, align 1, !tbaa !2449
  %10430 = lshr i32 %10403, 31
  %10431 = xor i32 %10427, %10430
  %10432 = add nuw nsw i32 %10431, %10427
  %10433 = icmp eq i32 %10432, 2
  %10434 = zext i1 %10433 to i8
  %10435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10434, i8* %10435, align 1, !tbaa !2450
  %10436 = load i64, i64* %RBP
  %10437 = sub i64 %10436, 12
  %10438 = load i32, i32* %EAX
  %10439 = zext i32 %10438 to i64
  %10440 = load i64, i64* %PC
  %10441 = add i64 %10440, 3
  store i64 %10441, i64* %PC
  %10442 = inttoptr i64 %10437 to i32*
  store i32 %10438, i32* %10442
  %10443 = load i64, i64* %RBP
  %10444 = sub i64 %10443, 12
  %10445 = load i64, i64* %PC
  %10446 = add i64 %10445, 4
  store i64 %10446, i64* %PC
  %10447 = inttoptr i64 %10444 to i32*
  %10448 = load i32, i32* %10447
  %10449 = sext i32 %10448 to i64
  store i64 %10449, i64* %RCX, align 8, !tbaa !2428
  %10450 = load i64, i64* %RBP
  %10451 = load i64, i64* %RCX
  %10452 = mul i64 %10451, 4
  %10453 = add i64 %10450, -1248
  %10454 = add i64 %10453, %10452
  %10455 = load i64, i64* %PC
  %10456 = add i64 %10455, 8
  store i64 %10456, i64* %PC
  %10457 = inttoptr i64 %10454 to i32*
  %10458 = load i32, i32* %10457
  %10459 = sub i32 %10458, -1
  %10460 = icmp ult i32 %10458, -1
  %10461 = zext i1 %10460 to i8
  %10462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10461, i8* %10462, align 1, !tbaa !2432
  %10463 = and i32 %10459, 255
  %10464 = call i32 @llvm.ctpop.i32(i32 %10463) #16
  %10465 = trunc i32 %10464 to i8
  %10466 = and i8 %10465, 1
  %10467 = xor i8 %10466, 1
  %10468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10467, i8* %10468, align 1, !tbaa !2446
  %10469 = xor i32 %10458, -1
  %10470 = xor i32 %10469, %10459
  %10471 = lshr i32 %10470, 4
  %10472 = trunc i32 %10471 to i8
  %10473 = and i8 %10472, 1
  %10474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10473, i8* %10474, align 1, !tbaa !2447
  %10475 = icmp eq i32 %10459, 0
  %10476 = zext i1 %10475 to i8
  %10477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10476, i8* %10477, align 1, !tbaa !2448
  %10478 = lshr i32 %10459, 31
  %10479 = trunc i32 %10478 to i8
  %10480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10479, i8* %10480, align 1, !tbaa !2449
  %10481 = lshr i32 %10458, 31
  %10482 = xor i32 %10481, 1
  %10483 = xor i32 %10478, %10481
  %10484 = add nuw nsw i32 %10483, %10482
  %10485 = icmp eq i32 %10484, 2
  %10486 = zext i1 %10485 to i8
  %10487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10486, i8* %10487, align 1, !tbaa !2450
  %10488 = load i64, i64* %PC
  %10489 = add i64 %10488, 180
  %10490 = load i64, i64* %PC
  %10491 = add i64 %10490, 6
  %10492 = load i64, i64* %PC
  %10493 = add i64 %10492, 6
  store i64 %10493, i64* %PC
  %10494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10495 = load i8, i8* %10494, align 1, !tbaa !2448
  %10496 = icmp eq i8 %10495, 0
  %10497 = zext i1 %10496 to i8
  store i8 %10497, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %10498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10499 = select i1 %10496, i64 %10489, i64 %10491
  store i64 %10499, i64* %10498, align 8, !tbaa !2428
  %10500 = load i8, i8* %BRANCH_TAKEN
  %10501 = icmp eq i8 %10500, 1
  %10502 = load i64, i64* %RBP
  %10503 = sub i64 %10502, 12
  %10504 = load i64, i64* %PC
  br i1 %10501, label %block_400ba2, label %block_400af4

block_4012ad:                                     ; preds = %block_40129b
  %10505 = load i64, i64* %RBP
  %10506 = sub i64 %10505, 1168
  %10507 = load i64, i64* %PC
  %10508 = add i64 %10507, 7
  store i64 %10508, i64* %PC
  store i64 %10506, i64* %RAX, align 8, !tbaa !2428
  %10509 = load i64, i64* %RBP
  %10510 = sub i64 %10509, 12
  %10511 = load i64, i64* %PC
  %10512 = add i64 %10511, 4
  store i64 %10512, i64* %PC
  %10513 = inttoptr i64 %10510 to i32*
  %10514 = load i32, i32* %10513
  %10515 = sext i32 %10514 to i64
  store i64 %10515, i64* %RCX, align 8, !tbaa !2428
  %10516 = load i64, i64* %RCX
  %10517 = load i64, i64* %PC
  %10518 = add i64 %10517, 4
  store i64 %10518, i64* %PC
  %10519 = shl i64 %10516, 5
  %10520 = icmp slt i64 %10519, 0
  %10521 = shl i64 %10519, 1
  store i64 %10521, i64* %RCX, align 8, !tbaa !2428
  %10522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %10523 = zext i1 %10520 to i8
  store i8 %10523, i8* %10522, align 1, !tbaa !2451
  %10524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %10525 = trunc i64 %10521 to i32
  %10526 = and i32 %10525, 254
  %10527 = call i32 @llvm.ctpop.i32(i32 %10526) #16
  %10528 = trunc i32 %10527 to i8
  %10529 = and i8 %10528, 1
  %10530 = xor i8 %10529, 1
  store i8 %10530, i8* %10524, align 1, !tbaa !2451
  %10531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10531, align 1, !tbaa !2451
  %10532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10533 = icmp eq i64 %10521, 0
  %10534 = zext i1 %10533 to i8
  store i8 %10534, i8* %10532, align 1, !tbaa !2451
  %10535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10536 = lshr i64 %10521, 63
  %10537 = trunc i64 %10536 to i8
  store i8 %10537, i8* %10535, align 1, !tbaa !2451
  %10538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %10538, align 1, !tbaa !2451
  %10539 = load i64, i64* %RAX
  %10540 = load i64, i64* %RCX
  %10541 = load i64, i64* %PC
  %10542 = add i64 %10541, 3
  store i64 %10542, i64* %PC
  %10543 = add i64 %10540, %10539
  store i64 %10543, i64* %RAX, align 8, !tbaa !2428
  %10544 = icmp ult i64 %10543, %10539
  %10545 = icmp ult i64 %10543, %10540
  %10546 = or i1 %10544, %10545
  %10547 = zext i1 %10546 to i8
  %10548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10547, i8* %10548, align 1, !tbaa !2432
  %10549 = trunc i64 %10543 to i32
  %10550 = and i32 %10549, 255
  %10551 = call i32 @llvm.ctpop.i32(i32 %10550) #16
  %10552 = trunc i32 %10551 to i8
  %10553 = and i8 %10552, 1
  %10554 = xor i8 %10553, 1
  %10555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10554, i8* %10555, align 1, !tbaa !2446
  %10556 = xor i64 %10540, %10539
  %10557 = xor i64 %10556, %10543
  %10558 = lshr i64 %10557, 4
  %10559 = trunc i64 %10558 to i8
  %10560 = and i8 %10559, 1
  %10561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10560, i8* %10561, align 1, !tbaa !2447
  %10562 = icmp eq i64 %10543, 0
  %10563 = zext i1 %10562 to i8
  %10564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10563, i8* %10564, align 1, !tbaa !2448
  %10565 = lshr i64 %10543, 63
  %10566 = trunc i64 %10565 to i8
  %10567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10566, i8* %10567, align 1, !tbaa !2449
  %10568 = lshr i64 %10539, 63
  %10569 = lshr i64 %10540, 63
  %10570 = xor i64 %10565, %10568
  %10571 = xor i64 %10565, %10569
  %10572 = add nuw nsw i64 %10570, %10571
  %10573 = icmp eq i64 %10572, 2
  %10574 = zext i1 %10573 to i8
  %10575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10574, i8* %10575, align 1, !tbaa !2450
  %10576 = load i64, i64* %RBP
  %10577 = sub i64 %10576, 4
  %10578 = load i64, i64* %PC
  %10579 = add i64 %10578, 4
  store i64 %10579, i64* %PC
  %10580 = inttoptr i64 %10577 to i32*
  %10581 = load i32, i32* %10580
  %10582 = sext i32 %10581 to i64
  store i64 %10582, i64* %RCX, align 8, !tbaa !2428
  %10583 = load i64, i64* %RAX
  %10584 = load i64, i64* %RCX
  %10585 = mul i64 %10584, 4
  %10586 = add i64 %10585, %10583
  %10587 = load i64, i64* %PC
  %10588 = add i64 %10587, 4
  store i64 %10588, i64* %PC
  %10589 = inttoptr i64 %10586 to i32*
  %10590 = load i32, i32* %10589
  %10591 = sub i32 %10590, -1
  %10592 = icmp ult i32 %10590, -1
  %10593 = zext i1 %10592 to i8
  %10594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10593, i8* %10594, align 1, !tbaa !2432
  %10595 = and i32 %10591, 255
  %10596 = call i32 @llvm.ctpop.i32(i32 %10595) #16
  %10597 = trunc i32 %10596 to i8
  %10598 = and i8 %10597, 1
  %10599 = xor i8 %10598, 1
  %10600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10599, i8* %10600, align 1, !tbaa !2446
  %10601 = xor i32 %10590, -1
  %10602 = xor i32 %10601, %10591
  %10603 = lshr i32 %10602, 4
  %10604 = trunc i32 %10603 to i8
  %10605 = and i8 %10604, 1
  %10606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10605, i8* %10606, align 1, !tbaa !2447
  %10607 = icmp eq i32 %10591, 0
  %10608 = zext i1 %10607 to i8
  %10609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10608, i8* %10609, align 1, !tbaa !2448
  %10610 = lshr i32 %10591, 31
  %10611 = trunc i32 %10610 to i8
  %10612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10611, i8* %10612, align 1, !tbaa !2449
  %10613 = lshr i32 %10590, 31
  %10614 = xor i32 %10613, 1
  %10615 = xor i32 %10610, %10613
  %10616 = add nuw nsw i32 %10615, %10614
  %10617 = icmp eq i32 %10616, 2
  %10618 = zext i1 %10617 to i8
  %10619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10618, i8* %10619, align 1, !tbaa !2450
  %10620 = load i64, i64* %PC
  %10621 = add i64 %10620, 41
  %10622 = load i64, i64* %PC
  %10623 = add i64 %10622, 6
  %10624 = load i64, i64* %PC
  %10625 = add i64 %10624, 6
  store i64 %10625, i64* %PC
  %10626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10627 = load i8, i8* %10626, align 1, !tbaa !2448
  %10628 = icmp eq i8 %10627, 0
  %10629 = zext i1 %10628 to i8
  store i8 %10629, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %10630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10631 = select i1 %10628, i64 %10621, i64 %10623
  store i64 %10631, i64* %10630, align 8, !tbaa !2428
  %10632 = load i8, i8* %BRANCH_TAKEN
  %10633 = icmp eq i8 %10632, 1
  br i1 %10633, label %block_4012f0, label %block_4012cd

block_401457:                                     ; preds = %block_4014b7, %block_401450
  %MEMORY.49 = phi %struct.Memory* [ %MEMORY.47, %block_401450 ], [ %MEMORY.42, %block_4014b7 ]
  %10634 = load i64, i64* %RBP
  %10635 = sub i64 %10634, 4
  %10636 = load i64, i64* %PC
  %10637 = add i64 %10636, 7
  store i64 %10637, i64* %PC
  %10638 = inttoptr i64 %10635 to i32*
  %10639 = load i32, i32* %10638
  %10640 = sub i32 %10639, 255
  %10641 = icmp ult i32 %10639, 255
  %10642 = zext i1 %10641 to i8
  %10643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10642, i8* %10643, align 1, !tbaa !2432
  %10644 = and i32 %10640, 255
  %10645 = call i32 @llvm.ctpop.i32(i32 %10644) #16
  %10646 = trunc i32 %10645 to i8
  %10647 = and i8 %10646, 1
  %10648 = xor i8 %10647, 1
  %10649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10648, i8* %10649, align 1, !tbaa !2446
  %10650 = xor i32 %10639, 255
  %10651 = xor i32 %10650, %10640
  %10652 = lshr i32 %10651, 4
  %10653 = trunc i32 %10652 to i8
  %10654 = and i8 %10653, 1
  %10655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10654, i8* %10655, align 1, !tbaa !2447
  %10656 = icmp eq i32 %10640, 0
  %10657 = zext i1 %10656 to i8
  %10658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10657, i8* %10658, align 1, !tbaa !2448
  %10659 = lshr i32 %10640, 31
  %10660 = trunc i32 %10659 to i8
  %10661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10660, i8* %10661, align 1, !tbaa !2449
  %10662 = lshr i32 %10639, 31
  %10663 = xor i32 %10659, %10662
  %10664 = add nuw nsw i32 %10663, %10662
  %10665 = icmp eq i32 %10664, 2
  %10666 = zext i1 %10665 to i8
  %10667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10666, i8* %10667, align 1, !tbaa !2450
  %10668 = load i64, i64* %PC
  %10669 = add i64 %10668, 108
  %10670 = load i64, i64* %PC
  %10671 = add i64 %10670, 6
  %10672 = load i64, i64* %PC
  %10673 = add i64 %10672, 6
  store i64 %10673, i64* %PC
  %10674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10675 = load i8, i8* %10674, align 1, !tbaa !2449
  %10676 = icmp ne i8 %10675, 0
  %10677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %10678 = load i8, i8* %10677, align 1, !tbaa !2450
  %10679 = icmp ne i8 %10678, 0
  %10680 = xor i1 %10676, %10679
  %10681 = xor i1 %10680, true
  %10682 = zext i1 %10681 to i8
  store i8 %10682, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %10683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10684 = select i1 %10680, i64 %10671, i64 %10669
  store i64 %10684, i64* %10683, align 8, !tbaa !2428
  %10685 = load i8, i8* %BRANCH_TAKEN
  %10686 = icmp eq i8 %10685, 1
  %10687 = load i64, i64* %RBP
  %10688 = sub i64 %10687, 4
  %10689 = load i64, i64* %PC
  br i1 %10686, label %block_4014ca, label %block_401464

block_400bff:                                     ; preds = %block_400be2
  %10690 = load i64, i64* %RBP
  %10691 = sub i64 %10690, 16
  %10692 = load i64, i64* %PC
  %10693 = add i64 %10692, 3
  store i64 %10693, i64* %PC
  %10694 = inttoptr i64 %10691 to i32*
  %10695 = load i32, i32* %10694
  %10696 = zext i32 %10695 to i64
  store i64 %10696, i64* %RAX, align 8, !tbaa !2428
  %10697 = load i64, i64* %RBP
  %10698 = sub i64 %10697, 8
  %10699 = load i32, i32* %EAX
  %10700 = zext i32 %10699 to i64
  %10701 = load i64, i64* %PC
  %10702 = add i64 %10701, 3
  store i64 %10702, i64* %PC
  %10703 = inttoptr i64 %10698 to i32*
  store i32 %10699, i32* %10703
  br label %block_400c05

block_400a0a:                                     ; preds = %block_400a00, %block_4009ee
  %MEMORY.50 = phi %struct.Memory* [ %MEMORY.12, %block_4009ee ], [ %MEMORY.12, %block_400a00 ]
  %10704 = load i64, i64* %RBP
  %10705 = sub i64 %10704, 4
  %10706 = load i64, i64* %PC
  %10707 = add i64 %10706, 4
  store i64 %10707, i64* %PC
  %10708 = inttoptr i64 %10705 to i32*
  %10709 = load i32, i32* %10708
  %10710 = sext i32 %10709 to i64
  store i64 %10710, i64* %RAX, align 8, !tbaa !2428
  %10711 = load i64, i64* %RBP
  %10712 = load i64, i64* %RAX
  %10713 = mul i64 %10712, 4
  %10714 = add i64 %10711, -1488
  %10715 = add i64 %10714, %10713
  %10716 = load i64, i64* %PC
  %10717 = add i64 %10716, 8
  store i64 %10717, i64* %PC
  %10718 = inttoptr i64 %10715 to i32*
  %10719 = load i32, i32* %10718
  %10720 = sext i32 %10719 to i64
  store i64 %10720, i64* %RAX, align 8, !tbaa !2428
  %10721 = load i64, i64* %RAX
  %10722 = mul i64 %10721, 4
  %10723 = add i64 %10722, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %10724 = load i64, i64* %PC
  %10725 = add i64 %10724, 7
  store i64 %10725, i64* %PC
  %10726 = inttoptr i64 %10723 to i32*
  %10727 = load i32, i32* %10726
  %10728 = zext i32 %10727 to i64
  store i64 %10728, i64* %RCX, align 8, !tbaa !2428
  %10729 = load i64, i64* %RBP
  %10730 = sub i64 %10729, 4
  %10731 = load i64, i64* %PC
  %10732 = add i64 %10731, 4
  store i64 %10732, i64* %PC
  %10733 = inttoptr i64 %10730 to i32*
  %10734 = load i32, i32* %10733
  %10735 = sext i32 %10734 to i64
  store i64 %10735, i64* %RAX, align 8, !tbaa !2428
  %10736 = load i64, i64* %RBP
  %10737 = load i64, i64* %RAX
  %10738 = mul i64 %10737, 4
  %10739 = add i64 %10736, -1488
  %10740 = add i64 %10739, %10738
  %10741 = load i32, i32* %ECX
  %10742 = zext i32 %10741 to i64
  %10743 = load i64, i64* %PC
  %10744 = add i64 %10743, 7
  store i64 %10744, i64* %PC
  %10745 = inttoptr i64 %10740 to i32*
  store i32 %10741, i32* %10745
  %10746 = load i64, i64* %RBP
  %10747 = sub i64 %10746, 4
  %10748 = load i64, i64* %PC
  %10749 = add i64 %10748, 3
  store i64 %10749, i64* %PC
  %10750 = inttoptr i64 %10747 to i32*
  %10751 = load i32, i32* %10750
  %10752 = zext i32 %10751 to i64
  store i64 %10752, i64* %RAX, align 8, !tbaa !2428
  %10753 = load i64, i64* %RAX
  %10754 = load i64, i64* %PC
  %10755 = add i64 %10754, 3
  store i64 %10755, i64* %PC
  %10756 = trunc i64 %10753 to i32
  %10757 = add i32 1, %10756
  %10758 = zext i32 %10757 to i64
  store i64 %10758, i64* %RAX, align 8, !tbaa !2428
  %10759 = icmp ult i32 %10757, %10756
  %10760 = icmp ult i32 %10757, 1
  %10761 = or i1 %10759, %10760
  %10762 = zext i1 %10761 to i8
  %10763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10762, i8* %10763, align 1, !tbaa !2432
  %10764 = and i32 %10757, 255
  %10765 = call i32 @llvm.ctpop.i32(i32 %10764) #16
  %10766 = trunc i32 %10765 to i8
  %10767 = and i8 %10766, 1
  %10768 = xor i8 %10767, 1
  %10769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10768, i8* %10769, align 1, !tbaa !2446
  %10770 = xor i64 1, %10753
  %10771 = trunc i64 %10770 to i32
  %10772 = xor i32 %10771, %10757
  %10773 = lshr i32 %10772, 4
  %10774 = trunc i32 %10773 to i8
  %10775 = and i8 %10774, 1
  %10776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10775, i8* %10776, align 1, !tbaa !2447
  %10777 = icmp eq i32 %10757, 0
  %10778 = zext i1 %10777 to i8
  %10779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10778, i8* %10779, align 1, !tbaa !2448
  %10780 = lshr i32 %10757, 31
  %10781 = trunc i32 %10780 to i8
  %10782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10781, i8* %10782, align 1, !tbaa !2449
  %10783 = lshr i32 %10756, 31
  %10784 = xor i32 %10780, %10783
  %10785 = add nuw nsw i32 %10784, %10780
  %10786 = icmp eq i32 %10785, 2
  %10787 = zext i1 %10786 to i8
  %10788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10787, i8* %10788, align 1, !tbaa !2450
  %10789 = load i64, i64* %RBP
  %10790 = sub i64 %10789, 4
  %10791 = load i32, i32* %EAX
  %10792 = zext i32 %10791 to i64
  %10793 = load i64, i64* %PC
  %10794 = add i64 %10793, 3
  store i64 %10794, i64* %PC
  %10795 = inttoptr i64 %10790 to i32*
  store i32 %10791, i32* %10795
  %10796 = load i64, i64* %PC
  %10797 = sub i64 %10796, 219
  %10798 = load i64, i64* %PC
  %10799 = add i64 %10798, 5
  store i64 %10799, i64* %PC
  %10800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10797, i64* %10800, align 8, !tbaa !2428
  br label %block_400956

block_40136c:                                     ; preds = %block_401257, %block_401367
  %MEMORY.51 = phi %struct.Memory* [ %MEMORY.6, %block_401367 ], [ %MEMORY.47, %block_401257 ]
  %10801 = load i64, i64* %RBP
  %10802 = sub i64 %10801, 8
  %10803 = load i64, i64* %PC
  %10804 = add i64 %10803, 7
  store i64 %10804, i64* %PC
  %10805 = inttoptr i64 %10802 to i32*
  store i32 1, i32* %10805
  br label %block_401373

block_401608:                                     ; preds = %block_4015fc
  %10806 = load i64, i64* %PC
  %10807 = add i64 %10806, 5
  store i64 %10807, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %10808 = load i64, i64* %RBP
  %10809 = sub i64 %10808, 8
  %10810 = load i64, i64* %PC
  %10811 = add i64 %10810, 4
  store i64 %10811, i64* %PC
  %10812 = inttoptr i64 %10809 to i32*
  %10813 = load i32, i32* %10812
  %10814 = sext i32 %10813 to i64
  store i64 %10814, i64* %RCX, align 8, !tbaa !2428
  %10815 = load i64, i64* %RBP
  %10816 = load i64, i64* %RCX
  %10817 = mul i64 %10816, 4
  %10818 = add i64 %10815, -1568
  %10819 = add i64 %10818, %10817
  %10820 = load i64, i64* %PC
  %10821 = add i64 %10820, 7
  store i64 %10821, i64* %PC
  %10822 = inttoptr i64 %10819 to i32*
  %10823 = load i32, i32* %10822
  %10824 = zext i32 %10823 to i64
  store i64 %10824, i64* %RDX, align 8, !tbaa !2428
  %10825 = load i64, i64* %RBP
  %10826 = sub i64 %10825, 4
  %10827 = load i64, i64* %PC
  %10828 = add i64 %10827, 4
  store i64 %10828, i64* %PC
  %10829 = inttoptr i64 %10826 to i32*
  %10830 = load i32, i32* %10829
  %10831 = sext i32 %10830 to i64
  store i64 %10831, i64* %RCX, align 8, !tbaa !2428
  %10832 = load i64, i64* %RDX
  %10833 = load i64, i64* %RBP
  %10834 = load i64, i64* %RCX
  %10835 = mul i64 %10834, 4
  %10836 = add i64 %10833, -1536
  %10837 = add i64 %10836, %10835
  %10838 = load i64, i64* %PC
  %10839 = add i64 %10838, 7
  store i64 %10839, i64* %PC
  %10840 = trunc i64 %10832 to i32
  %10841 = inttoptr i64 %10837 to i32*
  %10842 = load i32, i32* %10841
  %10843 = add i32 %10842, %10840
  %10844 = zext i32 %10843 to i64
  store i64 %10844, i64* %RDX, align 8, !tbaa !2428
  %10845 = icmp ult i32 %10843, %10840
  %10846 = icmp ult i32 %10843, %10842
  %10847 = or i1 %10845, %10846
  %10848 = zext i1 %10847 to i8
  %10849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10848, i8* %10849, align 1, !tbaa !2432
  %10850 = and i32 %10843, 255
  %10851 = call i32 @llvm.ctpop.i32(i32 %10850) #16
  %10852 = trunc i32 %10851 to i8
  %10853 = and i8 %10852, 1
  %10854 = xor i8 %10853, 1
  %10855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10854, i8* %10855, align 1, !tbaa !2446
  %10856 = xor i32 %10842, %10840
  %10857 = xor i32 %10856, %10843
  %10858 = lshr i32 %10857, 4
  %10859 = trunc i32 %10858 to i8
  %10860 = and i8 %10859, 1
  %10861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10860, i8* %10861, align 1, !tbaa !2447
  %10862 = icmp eq i32 %10843, 0
  %10863 = zext i1 %10862 to i8
  %10864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10863, i8* %10864, align 1, !tbaa !2448
  %10865 = lshr i32 %10843, 31
  %10866 = trunc i32 %10865 to i8
  %10867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10866, i8* %10867, align 1, !tbaa !2449
  %10868 = lshr i32 %10840, 31
  %10869 = lshr i32 %10842, 31
  %10870 = xor i32 %10865, %10868
  %10871 = xor i32 %10865, %10869
  %10872 = add nuw nsw i32 %10870, %10871
  %10873 = icmp eq i32 %10872, 2
  %10874 = zext i1 %10873 to i8
  %10875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10874, i8* %10875, align 1, !tbaa !2450
  %10876 = load i64, i64* %RBP
  %10877 = sub i64 %10876, 2728
  %10878 = load i32, i32* %EAX
  %10879 = zext i32 %10878 to i64
  %10880 = load i64, i64* %PC
  %10881 = add i64 %10880, 6
  store i64 %10881, i64* %PC
  %10882 = inttoptr i64 %10877 to i32*
  store i32 %10878, i32* %10882
  %10883 = load i32, i32* %EDX
  %10884 = zext i32 %10883 to i64
  %10885 = load i64, i64* %PC
  %10886 = add i64 %10885, 2
  store i64 %10886, i64* %PC
  %10887 = and i64 %10884, 4294967295
  store i64 %10887, i64* %RAX, align 8, !tbaa !2428
  %10888 = load i64, i64* %PC
  %10889 = add i64 %10888, 1
  store i64 %10889, i64* %PC
  %10890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %10891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %10892 = bitcast %union.anon* %10891 to i32*
  %10893 = load i32, i32* %10892, align 8, !tbaa !2452
  %10894 = sext i32 %10893 to i64
  %10895 = lshr i64 %10894, 32
  store i64 %10895, i64* %10890, align 8, !tbaa !2428
  %10896 = load i64, i64* %RBP
  %10897 = sub i64 %10896, 2728
  %10898 = load i64, i64* %PC
  %10899 = add i64 %10898, 6
  store i64 %10899, i64* %PC
  %10900 = inttoptr i64 %10897 to i32*
  %10901 = load i32, i32* %10900
  %10902 = zext i32 %10901 to i64
  store i64 %10902, i64* %RSI, align 8, !tbaa !2428
  %10903 = load i32, i32* %ESI
  %10904 = zext i32 %10903 to i64
  %10905 = load i64, i64* %PC
  %10906 = add i64 %10905, 2
  store i64 %10906, i64* %PC
  %10907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %10908 = bitcast %union.anon* %10907 to i32*
  %10909 = load i32, i32* %10908, align 8, !tbaa !2452
  %10910 = zext i32 %10909 to i64
  %10911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %10912 = bitcast %union.anon* %10911 to i32*
  %10913 = load i32, i32* %10912, align 8, !tbaa !2452
  %10914 = zext i32 %10913 to i64
  %10915 = shl i64 %10904, 32
  %10916 = ashr exact i64 %10915, 32
  %10917 = shl nuw i64 %10914, 32
  %10918 = or i64 %10917, %10910
  %10919 = sdiv i64 %10918, %10916
  %10920 = shl i64 %10919, 32
  %10921 = ashr exact i64 %10920, 32
  %10922 = icmp eq i64 %10919, %10921
  br i1 %10922, label %10927, label %10923

; <label>:10923:                                  ; preds = %block_401608
  %10924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10925 = load i64, i64* %10924, align 8, !tbaa !2428
  %10926 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10925, %struct.Memory* %MEMORY.5) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:10927:                                  ; preds = %block_401608
  %10928 = srem i64 %10918, %10916
  %10929 = getelementptr inbounds %union.anon, %union.anon* %10907, i64 0, i32 0
  %10930 = and i64 %10919, 4294967295
  store i64 %10930, i64* %10929, align 8, !tbaa !2428
  %10931 = getelementptr inbounds %union.anon, %union.anon* %10911, i64 0, i32 0
  %10932 = and i64 %10928, 4294967295
  store i64 %10932, i64* %10931, align 8, !tbaa !2428
  %10933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10933, align 1, !tbaa !2432
  %10934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %10934, align 1, !tbaa !2446
  %10935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10935, align 1, !tbaa !2447
  %10936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10936, align 1, !tbaa !2448
  %10937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %10937, align 1, !tbaa !2449
  %10938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %10938, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %10923, %10927
  %10939 = phi %struct.Memory* [ %10926, %10923 ], [ %MEMORY.5, %10927 ]
  %10940 = load i32, i32* %EDX
  %10941 = zext i32 %10940 to i64
  %10942 = load i64, i64* %PC
  %10943 = add i64 %10942, 3
  store i64 %10943, i64* %PC
  %10944 = shl i64 %10941, 32
  %10945 = ashr exact i64 %10944, 32
  store i64 %10945, i64* %RCX, align 8, !tbaa !2428
  %10946 = load i64, i64* %RCX
  %10947 = mul i64 %10946, 4
  %10948 = add i64 %10947, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %10949 = load i64, i64* %PC
  %10950 = add i64 %10949, 7
  store i64 %10950, i64* %PC
  %10951 = inttoptr i64 %10948 to i32*
  %10952 = load i32, i32* %10951
  %10953 = zext i32 %10952 to i64
  store i64 %10953, i64* %RDX, align 8, !tbaa !2428
  %10954 = load i64, i64* %RDX
  %10955 = load i64, i64* %PC
  %10956 = add i64 %10955, 3
  store i64 %10956, i64* %PC
  %10957 = xor i64 1, %10954
  %10958 = trunc i64 %10957 to i32
  %10959 = and i64 %10957, 4294967295
  store i64 %10959, i64* %RDX, align 8, !tbaa !2428
  %10960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10960, align 1, !tbaa !2432
  %10961 = and i32 %10958, 255
  %10962 = call i32 @llvm.ctpop.i32(i32 %10961) #16
  %10963 = trunc i32 %10962 to i8
  %10964 = and i8 %10963, 1
  %10965 = xor i8 %10964, 1
  %10966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10965, i8* %10966, align 1, !tbaa !2446
  %10967 = icmp eq i32 %10958, 0
  %10968 = zext i1 %10967 to i8
  %10969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10968, i8* %10969, align 1, !tbaa !2448
  %10970 = lshr i32 %10958, 31
  %10971 = trunc i32 %10970 to i8
  %10972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10971, i8* %10972, align 1, !tbaa !2449
  %10973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %10973, align 1, !tbaa !2450
  %10974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10974, align 1, !tbaa !2447
  %10975 = load i32, i32* %EDX
  %10976 = zext i32 %10975 to i64
  %10977 = load i64, i64* %PC
  %10978 = add i64 %10977, 3
  store i64 %10978, i64* %PC
  %10979 = shl i64 %10976, 32
  %10980 = ashr exact i64 %10979, 32
  store i64 %10980, i64* %RCX, align 8, !tbaa !2428
  %10981 = load i64, i64* %RCX
  %10982 = mul i64 %10981, 4
  %10983 = add i64 %10982, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %10984 = load i64, i64* %PC
  %10985 = add i64 %10984, 7
  store i64 %10985, i64* %PC
  %10986 = inttoptr i64 %10983 to i32*
  %10987 = load i32, i32* %10986
  %10988 = zext i32 %10987 to i64
  store i64 %10988, i64* %RDX, align 8, !tbaa !2428
  %10989 = load i64, i64* %RDX
  %10990 = load i64, i64* %RBP
  %10991 = sub i64 %10990, 16
  %10992 = load i64, i64* %PC
  %10993 = add i64 %10992, 3
  store i64 %10993, i64* %PC
  %10994 = trunc i64 %10989 to i32
  %10995 = inttoptr i64 %10991 to i32*
  %10996 = load i32, i32* %10995
  %10997 = add i32 %10996, %10994
  %10998 = zext i32 %10997 to i64
  store i64 %10998, i64* %RDX, align 8, !tbaa !2428
  %10999 = icmp ult i32 %10997, %10994
  %11000 = icmp ult i32 %10997, %10996
  %11001 = or i1 %10999, %11000
  %11002 = zext i1 %11001 to i8
  %11003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11002, i8* %11003, align 1, !tbaa !2432
  %11004 = and i32 %10997, 255
  %11005 = call i32 @llvm.ctpop.i32(i32 %11004) #16
  %11006 = trunc i32 %11005 to i8
  %11007 = and i8 %11006, 1
  %11008 = xor i8 %11007, 1
  %11009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11008, i8* %11009, align 1, !tbaa !2446
  %11010 = xor i32 %10996, %10994
  %11011 = xor i32 %11010, %10997
  %11012 = lshr i32 %11011, 4
  %11013 = trunc i32 %11012 to i8
  %11014 = and i8 %11013, 1
  %11015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11014, i8* %11015, align 1, !tbaa !2447
  %11016 = icmp eq i32 %10997, 0
  %11017 = zext i1 %11016 to i8
  %11018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11017, i8* %11018, align 1, !tbaa !2448
  %11019 = lshr i32 %10997, 31
  %11020 = trunc i32 %11019 to i8
  %11021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11020, i8* %11021, align 1, !tbaa !2449
  %11022 = lshr i32 %10994, 31
  %11023 = lshr i32 %10996, 31
  %11024 = xor i32 %11019, %11022
  %11025 = xor i32 %11019, %11023
  %11026 = add nuw nsw i32 %11024, %11025
  %11027 = icmp eq i32 %11026, 2
  %11028 = zext i1 %11027 to i8
  %11029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11028, i8* %11029, align 1, !tbaa !2450
  %11030 = load i64, i64* %RBP
  %11031 = sub i64 %11030, 16
  %11032 = load i32, i32* %EDX
  %11033 = zext i32 %11032 to i64
  %11034 = load i64, i64* %PC
  %11035 = add i64 %11034, 3
  store i64 %11035, i64* %PC
  %11036 = inttoptr i64 %11031 to i32*
  store i32 %11032, i32* %11036
  br label %block_401651

block_400c05:                                     ; preds = %block_400bff, %block_400c42
  %MEMORY.52 = phi %struct.Memory* [ %MEMORY.16, %block_400bff ], [ %MEMORY.45, %block_400c42 ]
  %11037 = load i64, i64* %RBP
  %11038 = sub i64 %11037, 8
  %11039 = load i64, i64* %PC
  %11040 = add i64 %11039, 3
  store i64 %11040, i64* %PC
  %11041 = inttoptr i64 %11038 to i32*
  %11042 = load i32, i32* %11041
  %11043 = zext i32 %11042 to i64
  store i64 %11043, i64* %RAX, align 8, !tbaa !2428
  %11044 = load i64, i64* %RAX
  %11045 = load i64, i64* %PC
  %11046 = add i64 %11045, 3
  store i64 %11046, i64* %PC
  %11047 = trunc i64 %11044 to i32
  %11048 = add i32 -1, %11047
  %11049 = zext i32 %11048 to i64
  store i64 %11049, i64* %RAX, align 8, !tbaa !2428
  %11050 = icmp ult i32 %11048, %11047
  %11051 = icmp ult i32 %11048, -1
  %11052 = or i1 %11050, %11051
  %11053 = zext i1 %11052 to i8
  %11054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11053, i8* %11054, align 1, !tbaa !2432
  %11055 = and i32 %11048, 255
  %11056 = call i32 @llvm.ctpop.i32(i32 %11055) #16
  %11057 = trunc i32 %11056 to i8
  %11058 = and i8 %11057, 1
  %11059 = xor i8 %11058, 1
  %11060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11059, i8* %11060, align 1, !tbaa !2446
  %11061 = xor i64 -1, %11044
  %11062 = trunc i64 %11061 to i32
  %11063 = xor i32 %11062, %11048
  %11064 = lshr i32 %11063, 4
  %11065 = trunc i32 %11064 to i8
  %11066 = and i8 %11065, 1
  %11067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11066, i8* %11067, align 1, !tbaa !2447
  %11068 = icmp eq i32 %11048, 0
  %11069 = zext i1 %11068 to i8
  %11070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11069, i8* %11070, align 1, !tbaa !2448
  %11071 = lshr i32 %11048, 31
  %11072 = trunc i32 %11071 to i8
  %11073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11072, i8* %11073, align 1, !tbaa !2449
  %11074 = lshr i32 %11047, 31
  %11075 = xor i32 %11071, %11074
  %11076 = xor i32 %11071, 1
  %11077 = add nuw nsw i32 %11075, %11076
  %11078 = icmp eq i32 %11077, 2
  %11079 = zext i1 %11078 to i8
  %11080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11079, i8* %11080, align 1, !tbaa !2450
  %11081 = load i64, i64* %RBP
  %11082 = sub i64 %11081, 8
  %11083 = load i32, i32* %EAX
  %11084 = zext i32 %11083 to i64
  %11085 = load i64, i64* %PC
  %11086 = add i64 %11085, 3
  store i64 %11086, i64* %PC
  %11087 = inttoptr i64 %11082 to i32*
  store i32 %11083, i32* %11087
  %11088 = load i64, i64* %RBP
  %11089 = sub i64 %11088, 8
  %11090 = load i64, i64* %PC
  %11091 = add i64 %11090, 4
  store i64 %11091, i64* %PC
  %11092 = inttoptr i64 %11089 to i32*
  %11093 = load i32, i32* %11092
  %11094 = sext i32 %11093 to i64
  store i64 %11094, i64* %RCX, align 8, !tbaa !2428
  %11095 = load i64, i64* %RBP
  %11096 = load i64, i64* %RCX
  %11097 = mul i64 %11096, 4
  %11098 = add i64 %11095, -1248
  %11099 = add i64 %11098, %11097
  %11100 = load i64, i64* %PC
  %11101 = add i64 %11100, 8
  store i64 %11101, i64* %PC
  %11102 = inttoptr i64 %11099 to i32*
  %11103 = load i32, i32* %11102
  %11104 = sub i32 %11103, -1
  %11105 = icmp ult i32 %11103, -1
  %11106 = zext i1 %11105 to i8
  %11107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11106, i8* %11107, align 1, !tbaa !2432
  %11108 = and i32 %11104, 255
  %11109 = call i32 @llvm.ctpop.i32(i32 %11108) #16
  %11110 = trunc i32 %11109 to i8
  %11111 = and i8 %11110, 1
  %11112 = xor i8 %11111, 1
  %11113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11112, i8* %11113, align 1, !tbaa !2446
  %11114 = xor i32 %11103, -1
  %11115 = xor i32 %11114, %11104
  %11116 = lshr i32 %11115, 4
  %11117 = trunc i32 %11116 to i8
  %11118 = and i8 %11117, 1
  %11119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11118, i8* %11119, align 1, !tbaa !2447
  %11120 = icmp eq i32 %11104, 0
  %11121 = zext i1 %11120 to i8
  %11122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11121, i8* %11122, align 1, !tbaa !2448
  %11123 = lshr i32 %11104, 31
  %11124 = trunc i32 %11123 to i8
  %11125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11124, i8* %11125, align 1, !tbaa !2449
  %11126 = lshr i32 %11103, 31
  %11127 = xor i32 %11126, 1
  %11128 = xor i32 %11123, %11126
  %11129 = add nuw nsw i32 %11128, %11127
  %11130 = icmp eq i32 %11129, 2
  %11131 = zext i1 %11130 to i8
  %11132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11131, i8* %11132, align 1, !tbaa !2450
  %11133 = load i64, i64* %PC
  %11134 = add i64 %11133, 40
  %11135 = load i64, i64* %PC
  %11136 = add i64 %11135, 6
  %11137 = load i64, i64* %PC
  %11138 = add i64 %11137, 6
  store i64 %11138, i64* %PC
  %11139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11140 = load i8, i8* %11139, align 1, !tbaa !2448
  store i8 %11140, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11142 = icmp ne i8 %11140, 0
  %11143 = select i1 %11142, i64 %11134, i64 %11136
  store i64 %11143, i64* %11141, align 8, !tbaa !2428
  %11144 = load i8, i8* %BRANCH_TAKEN
  %11145 = icmp eq i8 %11144, 1
  br i1 %11145, label %block_400c42, label %block_400c20

block_401004:                                     ; preds = %block_400feb
  %11146 = load i64, i64* %RBP
  %11147 = sub i64 %11146, 12
  %11148 = load i64, i64* %PC
  %11149 = add i64 %11148, 3
  store i64 %11149, i64* %PC
  %11150 = inttoptr i64 %11147 to i32*
  %11151 = load i32, i32* %11150
  %11152 = zext i32 %11151 to i64
  store i64 %11152, i64* %RAX, align 8, !tbaa !2428
  %11153 = load i64, i64* %RAX
  %11154 = load i64, i64* %PC
  %11155 = add i64 %11154, 3
  store i64 %11155, i64* %PC
  %11156 = trunc i64 %11153 to i32
  %11157 = add i32 1, %11156
  %11158 = zext i32 %11157 to i64
  store i64 %11158, i64* %RAX, align 8, !tbaa !2428
  %11159 = icmp ult i32 %11157, %11156
  %11160 = icmp ult i32 %11157, 1
  %11161 = or i1 %11159, %11160
  %11162 = zext i1 %11161 to i8
  %11163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11162, i8* %11163, align 1, !tbaa !2432
  %11164 = and i32 %11157, 255
  %11165 = call i32 @llvm.ctpop.i32(i32 %11164) #16
  %11166 = trunc i32 %11165 to i8
  %11167 = and i8 %11166, 1
  %11168 = xor i8 %11167, 1
  %11169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11168, i8* %11169, align 1, !tbaa !2446
  %11170 = xor i64 1, %11153
  %11171 = trunc i64 %11170 to i32
  %11172 = xor i32 %11171, %11157
  %11173 = lshr i32 %11172, 4
  %11174 = trunc i32 %11173 to i8
  %11175 = and i8 %11174, 1
  %11176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11175, i8* %11176, align 1, !tbaa !2447
  %11177 = icmp eq i32 %11157, 0
  %11178 = zext i1 %11177 to i8
  %11179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11178, i8* %11179, align 1, !tbaa !2448
  %11180 = lshr i32 %11157, 31
  %11181 = trunc i32 %11180 to i8
  %11182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11181, i8* %11182, align 1, !tbaa !2449
  %11183 = lshr i32 %11156, 31
  %11184 = xor i32 %11180, %11183
  %11185 = add nuw nsw i32 %11184, %11180
  %11186 = icmp eq i32 %11185, 2
  %11187 = zext i1 %11186 to i8
  %11188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11187, i8* %11188, align 1, !tbaa !2450
  %11189 = load i32, i32* %EAX
  %11190 = zext i32 %11189 to i64
  %11191 = load i64, i64* %PC
  %11192 = add i64 %11191, 3
  store i64 %11192, i64* %PC
  %11193 = shl i64 %11190, 32
  %11194 = ashr exact i64 %11193, 32
  store i64 %11194, i64* %RCX, align 8, !tbaa !2428
  %11195 = load i64, i64* %RBP
  %11196 = load i64, i64* %RCX
  %11197 = mul i64 %11196, 4
  %11198 = add i64 %11195, -1328
  %11199 = add i64 %11198, %11197
  %11200 = load i64, i64* %PC
  %11201 = add i64 %11200, 8
  store i64 %11201, i64* %PC
  %11202 = inttoptr i64 %11199 to i32*
  %11203 = load i32, i32* %11202
  %11204 = sub i32 %11203, 8
  %11205 = icmp ult i32 %11203, 8
  %11206 = zext i1 %11205 to i8
  %11207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11206, i8* %11207, align 1, !tbaa !2432
  %11208 = and i32 %11204, 255
  %11209 = call i32 @llvm.ctpop.i32(i32 %11208) #16
  %11210 = trunc i32 %11209 to i8
  %11211 = and i8 %11210, 1
  %11212 = xor i8 %11211, 1
  %11213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11212, i8* %11213, align 1, !tbaa !2446
  %11214 = xor i32 %11203, 8
  %11215 = xor i32 %11214, %11204
  %11216 = lshr i32 %11215, 4
  %11217 = trunc i32 %11216 to i8
  %11218 = and i8 %11217, 1
  %11219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11218, i8* %11219, align 1, !tbaa !2447
  %11220 = icmp eq i32 %11204, 0
  %11221 = zext i1 %11220 to i8
  %11222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11221, i8* %11222, align 1, !tbaa !2448
  %11223 = lshr i32 %11204, 31
  %11224 = trunc i32 %11223 to i8
  %11225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11224, i8* %11225, align 1, !tbaa !2449
  %11226 = lshr i32 %11203, 31
  %11227 = xor i32 %11223, %11226
  %11228 = add nuw nsw i32 %11227, %11226
  %11229 = icmp eq i32 %11228, 2
  %11230 = zext i1 %11229 to i8
  %11231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11230, i8* %11231, align 1, !tbaa !2450
  %11232 = load i64, i64* %PC
  %11233 = add i64 %11232, 3
  store i64 %11233, i64* %PC
  %11234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11235 = load i8, i8* %11234, align 1, !tbaa !2448
  %11236 = icmp ne i8 %11235, 0
  %11237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %11238 = load i8, i8* %11237, align 1, !tbaa !2449
  %11239 = icmp ne i8 %11238, 0
  %11240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11241 = load i8, i8* %11240, align 1, !tbaa !2450
  %11242 = icmp ne i8 %11241, 0
  %11243 = xor i1 %11239, %11242
  %11244 = or i1 %11236, %11243
  %11245 = zext i1 %11244 to i8
  store i8 %11245, i8* %DL, align 1, !tbaa !2451
  %11246 = load i64, i64* %RBP
  %11247 = sub i64 %11246, 2709
  %11248 = load i8, i8* %DL
  %11249 = zext i8 %11248 to i64
  %11250 = load i64, i64* %PC
  %11251 = add i64 %11250, 6
  store i64 %11251, i64* %PC
  %11252 = inttoptr i64 %11247 to i8*
  store i8 %11248, i8* %11252
  br label %block_40101e

block_40137f:                                     ; preds = %block_401373
  %11253 = sub i64 %9686, 8
  %11254 = load i64, i64* %PC
  %11255 = add i64 %11254, 4
  store i64 %11255, i64* %PC
  %11256 = inttoptr i64 %11253 to i32*
  %11257 = load i32, i32* %11256
  %11258 = sext i32 %11257 to i64
  store i64 %11258, i64* %RAX, align 8, !tbaa !2428
  %11259 = load i64, i64* %RBP
  %11260 = load i64, i64* %RAX
  %11261 = mul i64 %11260, 4
  %11262 = add i64 %11259, -1488
  %11263 = add i64 %11262, %11261
  %11264 = load i64, i64* %PC
  %11265 = add i64 %11264, 8
  store i64 %11265, i64* %PC
  %11266 = inttoptr i64 %11263 to i32*
  %11267 = load i32, i32* %11266
  %11268 = sub i32 %11267, -1
  %11269 = icmp ult i32 %11267, -1
  %11270 = zext i1 %11269 to i8
  %11271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11270, i8* %11271, align 1, !tbaa !2432
  %11272 = and i32 %11268, 255
  %11273 = call i32 @llvm.ctpop.i32(i32 %11272) #16
  %11274 = trunc i32 %11273 to i8
  %11275 = and i8 %11274, 1
  %11276 = xor i8 %11275, 1
  %11277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11276, i8* %11277, align 1, !tbaa !2446
  %11278 = xor i32 %11267, -1
  %11279 = xor i32 %11278, %11268
  %11280 = lshr i32 %11279, 4
  %11281 = trunc i32 %11280 to i8
  %11282 = and i8 %11281, 1
  %11283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11282, i8* %11283, align 1, !tbaa !2447
  %11284 = icmp eq i32 %11268, 0
  %11285 = zext i1 %11284 to i8
  %11286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11285, i8* %11286, align 1, !tbaa !2448
  %11287 = lshr i32 %11268, 31
  %11288 = trunc i32 %11287 to i8
  %11289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11288, i8* %11289, align 1, !tbaa !2449
  %11290 = lshr i32 %11267, 31
  %11291 = xor i32 %11290, 1
  %11292 = xor i32 %11287, %11290
  %11293 = add nuw nsw i32 %11292, %11291
  %11294 = icmp eq i32 %11293, 2
  %11295 = zext i1 %11294 to i8
  %11296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11295, i8* %11296, align 1, !tbaa !2450
  %11297 = load i64, i64* %PC
  %11298 = add i64 %11297, 134
  %11299 = load i64, i64* %PC
  %11300 = add i64 %11299, 6
  %11301 = load i64, i64* %PC
  %11302 = add i64 %11301, 6
  store i64 %11302, i64* %PC
  %11303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11304 = load i8, i8* %11303, align 1, !tbaa !2448
  store i8 %11304, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11306 = icmp ne i8 %11304, 0
  %11307 = select i1 %11306, i64 %11298, i64 %11300
  store i64 %11307, i64* %11305, align 8, !tbaa !2428
  %11308 = load i8, i8* %BRANCH_TAKEN
  %11309 = icmp eq i8 %11308, 1
  br i1 %11309, label %block_401411, label %block_401391

block_400bab:                                     ; preds = %block_400be7, %block_400ba2
  %MEMORY.53 = phi %struct.Memory* [ %MEMORY.48, %block_400ba2 ], [ %MEMORY.16, %block_400be7 ]
  %11310 = load i64, i64* %RAX
  %11311 = load i32, i32* %EAX
  %11312 = zext i32 %11311 to i64
  %11313 = load i64, i64* %PC
  %11314 = add i64 %11313, 2
  store i64 %11314, i64* %PC
  %11315 = xor i64 %11312, %11310
  %11316 = trunc i64 %11315 to i32
  %11317 = and i64 %11315, 4294967295
  store i64 %11317, i64* %RAX, align 8, !tbaa !2428
  %11318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %11318, align 1, !tbaa !2432
  %11319 = and i32 %11316, 255
  %11320 = call i32 @llvm.ctpop.i32(i32 %11319) #16
  %11321 = trunc i32 %11320 to i8
  %11322 = and i8 %11321, 1
  %11323 = xor i8 %11322, 1
  %11324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11323, i8* %11324, align 1, !tbaa !2446
  %11325 = icmp eq i32 %11316, 0
  %11326 = zext i1 %11325 to i8
  %11327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11326, i8* %11327, align 1, !tbaa !2448
  %11328 = lshr i32 %11316, 31
  %11329 = trunc i32 %11328 to i8
  %11330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11329, i8* %11330, align 1, !tbaa !2449
  %11331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %11331, align 1, !tbaa !2450
  %11332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11332, align 1, !tbaa !2447
  %11333 = load i8, i8* %AL
  %11334 = zext i8 %11333 to i64
  %11335 = load i64, i64* %PC
  %11336 = add i64 %11335, 2
  store i64 %11336, i64* %PC
  store i8 %11333, i8* %CL, align 1, !tbaa !2451
  %11337 = load i64, i64* %RBP
  %11338 = sub i64 %11337, 16
  %11339 = load i64, i64* %PC
  %11340 = add i64 %11339, 4
  store i64 %11340, i64* %PC
  %11341 = inttoptr i64 %11338 to i32*
  %11342 = load i32, i32* %11341
  %11343 = sext i32 %11342 to i64
  store i64 %11343, i64* %RDX, align 8, !tbaa !2428
  %11344 = load i64, i64* %RBP
  %11345 = load i64, i64* %RDX
  %11346 = mul i64 %11345, 4
  %11347 = add i64 %11344, -1248
  %11348 = add i64 %11347, %11346
  %11349 = load i64, i64* %PC
  %11350 = add i64 %11349, 8
  store i64 %11350, i64* %PC
  %11351 = inttoptr i64 %11348 to i32*
  %11352 = load i32, i32* %11351
  %11353 = sub i32 %11352, -1
  %11354 = icmp ult i32 %11352, -1
  %11355 = zext i1 %11354 to i8
  %11356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11355, i8* %11356, align 1, !tbaa !2432
  %11357 = and i32 %11353, 255
  %11358 = call i32 @llvm.ctpop.i32(i32 %11357) #16
  %11359 = trunc i32 %11358 to i8
  %11360 = and i8 %11359, 1
  %11361 = xor i8 %11360, 1
  %11362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11361, i8* %11362, align 1, !tbaa !2446
  %11363 = xor i32 %11352, -1
  %11364 = xor i32 %11363, %11353
  %11365 = lshr i32 %11364, 4
  %11366 = trunc i32 %11365 to i8
  %11367 = and i8 %11366, 1
  %11368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11367, i8* %11368, align 1, !tbaa !2447
  %11369 = icmp eq i32 %11353, 0
  %11370 = zext i1 %11369 to i8
  %11371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11370, i8* %11371, align 1, !tbaa !2448
  %11372 = lshr i32 %11353, 31
  %11373 = trunc i32 %11372 to i8
  %11374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11373, i8* %11374, align 1, !tbaa !2449
  %11375 = lshr i32 %11352, 31
  %11376 = xor i32 %11375, 1
  %11377 = xor i32 %11372, %11375
  %11378 = add nuw nsw i32 %11377, %11376
  %11379 = icmp eq i32 %11378, 2
  %11380 = zext i1 %11379 to i8
  %11381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11380, i8* %11381, align 1, !tbaa !2450
  %11382 = load i64, i64* %RBP
  %11383 = sub i64 %11382, 2693
  %11384 = load i8, i8* %CL
  %11385 = zext i8 %11384 to i64
  %11386 = load i64, i64* %PC
  %11387 = add i64 %11386, 6
  store i64 %11387, i64* %PC
  %11388 = inttoptr i64 %11383 to i8*
  store i8 %11384, i8* %11388
  %11389 = load i64, i64* %PC
  %11390 = add i64 %11389, 19
  %11391 = load i64, i64* %PC
  %11392 = add i64 %11391, 6
  %11393 = load i64, i64* %PC
  %11394 = add i64 %11393, 6
  store i64 %11394, i64* %PC
  %11395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11396 = load i8, i8* %11395, align 1, !tbaa !2448
  %11397 = icmp eq i8 %11396, 0
  %11398 = zext i1 %11397 to i8
  store i8 %11398, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11400 = select i1 %11397, i64 %11390, i64 %11392
  store i64 %11400, i64* %11399, align 8, !tbaa !2428
  %11401 = load i8, i8* %BRANCH_TAKEN
  %11402 = icmp eq i8 %11401, 1
  br i1 %11402, label %block_400bd4, label %block_400bc7

block_400edf:                                     ; preds = %block_400e9e, %block_400ecb
  %MEMORY.54 = phi %struct.Memory* [ %MEMORY.34, %block_400ecb ], [ %MEMORY.34, %block_400e9e ]
  %11403 = load i64, i64* %RBP
  %11404 = sub i64 %11403, 4
  %11405 = load i64, i64* %PC
  %11406 = add i64 %11405, 7
  store i64 %11406, i64* %PC
  %11407 = inttoptr i64 %11404 to i32*
  store i32 1, i32* %11407
  br label %block_400ee6

block_401801:                                     ; preds = %block_4017f4
  %11408 = load i64, i64* %RBP
  %11409 = sub i64 %11408, 4
  %11410 = load i64, i64* %PC
  %11411 = add i64 %11410, 4
  store i64 %11411, i64* %PC
  %11412 = inttoptr i64 %11409 to i32*
  %11413 = load i32, i32* %11412
  %11414 = sext i32 %11413 to i64
  store i64 %11414, i64* %RAX, align 8, !tbaa !2428
  %11415 = load i64, i64* %RAX
  %11416 = mul i64 %11415, 4
  %11417 = add i64 %11416, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %11418 = load i64, i64* %PC
  %11419 = add i64 %11418, 8
  store i64 %11419, i64* %PC
  %11420 = inttoptr i64 %11417 to i32*
  %11421 = load i32, i32* %11420
  %11422 = sub i32 %11421, -1
  %11423 = icmp ult i32 %11421, -1
  %11424 = zext i1 %11423 to i8
  %11425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11424, i8* %11425, align 1, !tbaa !2432
  %11426 = and i32 %11422, 255
  %11427 = call i32 @llvm.ctpop.i32(i32 %11426) #16
  %11428 = trunc i32 %11427 to i8
  %11429 = and i8 %11428, 1
  %11430 = xor i8 %11429, 1
  %11431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11430, i8* %11431, align 1, !tbaa !2446
  %11432 = xor i32 %11421, -1
  %11433 = xor i32 %11432, %11422
  %11434 = lshr i32 %11433, 4
  %11435 = trunc i32 %11434 to i8
  %11436 = and i8 %11435, 1
  %11437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11436, i8* %11437, align 1, !tbaa !2447
  %11438 = icmp eq i32 %11422, 0
  %11439 = zext i1 %11438 to i8
  %11440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11439, i8* %11440, align 1, !tbaa !2448
  %11441 = lshr i32 %11422, 31
  %11442 = trunc i32 %11441 to i8
  %11443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11442, i8* %11443, align 1, !tbaa !2449
  %11444 = lshr i32 %11421, 31
  %11445 = xor i32 %11444, 1
  %11446 = xor i32 %11441, %11444
  %11447 = add nuw nsw i32 %11446, %11445
  %11448 = icmp eq i32 %11447, 2
  %11449 = zext i1 %11448 to i8
  %11450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11449, i8* %11450, align 1, !tbaa !2450
  %11451 = load i64, i64* %PC
  %11452 = add i64 %11451, 41
  %11453 = load i64, i64* %PC
  %11454 = add i64 %11453, 6
  %11455 = load i64, i64* %PC
  %11456 = add i64 %11455, 6
  store i64 %11456, i64* %PC
  %11457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11458 = load i8, i8* %11457, align 1, !tbaa !2448
  store i8 %11458, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11460 = icmp ne i8 %11458, 0
  %11461 = select i1 %11460, i64 %11452, i64 %11454
  store i64 %11461, i64* %11459, align 8, !tbaa !2428
  %11462 = load i8, i8* %BRANCH_TAKEN
  %11463 = icmp eq i8 %11462, 1
  %11464 = load i64, i64* %RBP
  %11465 = sub i64 %11464, 4
  %11466 = load i64, i64* %PC
  %11467 = add i64 %11466, 4
  store i64 %11467, i64* %PC
  %11468 = inttoptr i64 %11465 to i32*
  %11469 = load i32, i32* %11468
  %11470 = sext i32 %11469 to i64
  store i64 %11470, i64* %RAX, align 8, !tbaa !2428
  %11471 = load i64, i64* %RAX
  %11472 = mul i64 %11471, 4
  %11473 = add i64 %11472, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %11474 = load i64, i64* %PC
  br i1 %11463, label %block_401836, label %block_401813

block_401322:                                     ; preds = %block_401302
  %11475 = load i64, i64* %RBP
  %11476 = sub i64 %11475, 1168
  %11477 = load i64, i64* %PC
  %11478 = add i64 %11477, 7
  store i64 %11478, i64* %PC
  store i64 %11476, i64* %RAX, align 8, !tbaa !2428
  %11479 = load i64, i64* %RBP
  %11480 = sub i64 %11479, 12
  %11481 = load i64, i64* %PC
  %11482 = add i64 %11481, 4
  store i64 %11482, i64* %PC
  %11483 = inttoptr i64 %11480 to i32*
  %11484 = load i32, i32* %11483
  %11485 = sext i32 %11484 to i64
  store i64 %11485, i64* %RCX, align 8, !tbaa !2428
  %11486 = load i64, i64* %RCX
  %11487 = load i64, i64* %PC
  %11488 = add i64 %11487, 4
  store i64 %11488, i64* %PC
  %11489 = shl i64 %11486, 5
  %11490 = icmp slt i64 %11489, 0
  %11491 = shl i64 %11489, 1
  store i64 %11491, i64* %RCX, align 8, !tbaa !2428
  %11492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %11493 = zext i1 %11490 to i8
  store i8 %11493, i8* %11492, align 1, !tbaa !2451
  %11494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %11495 = trunc i64 %11491 to i32
  %11496 = and i32 %11495, 254
  %11497 = call i32 @llvm.ctpop.i32(i32 %11496) #16
  %11498 = trunc i32 %11497 to i8
  %11499 = and i8 %11498, 1
  %11500 = xor i8 %11499, 1
  store i8 %11500, i8* %11494, align 1, !tbaa !2451
  %11501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11501, align 1, !tbaa !2451
  %11502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11503 = icmp eq i64 %11491, 0
  %11504 = zext i1 %11503 to i8
  store i8 %11504, i8* %11502, align 1, !tbaa !2451
  %11505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %11506 = lshr i64 %11491, 63
  %11507 = trunc i64 %11506 to i8
  store i8 %11507, i8* %11505, align 1, !tbaa !2451
  %11508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %11508, align 1, !tbaa !2451
  %11509 = load i64, i64* %RAX
  %11510 = load i64, i64* %RCX
  %11511 = load i64, i64* %PC
  %11512 = add i64 %11511, 3
  store i64 %11512, i64* %PC
  %11513 = add i64 %11510, %11509
  store i64 %11513, i64* %RAX, align 8, !tbaa !2428
  %11514 = icmp ult i64 %11513, %11509
  %11515 = icmp ult i64 %11513, %11510
  %11516 = or i1 %11514, %11515
  %11517 = zext i1 %11516 to i8
  %11518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11517, i8* %11518, align 1, !tbaa !2432
  %11519 = trunc i64 %11513 to i32
  %11520 = and i32 %11519, 255
  %11521 = call i32 @llvm.ctpop.i32(i32 %11520) #16
  %11522 = trunc i32 %11521 to i8
  %11523 = and i8 %11522, 1
  %11524 = xor i8 %11523, 1
  %11525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11524, i8* %11525, align 1, !tbaa !2446
  %11526 = xor i64 %11510, %11509
  %11527 = xor i64 %11526, %11513
  %11528 = lshr i64 %11527, 4
  %11529 = trunc i64 %11528 to i8
  %11530 = and i8 %11529, 1
  %11531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11530, i8* %11531, align 1, !tbaa !2447
  %11532 = icmp eq i64 %11513, 0
  %11533 = zext i1 %11532 to i8
  %11534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11533, i8* %11534, align 1, !tbaa !2448
  %11535 = lshr i64 %11513, 63
  %11536 = trunc i64 %11535 to i8
  %11537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11536, i8* %11537, align 1, !tbaa !2449
  %11538 = lshr i64 %11509, 63
  %11539 = lshr i64 %11510, 63
  %11540 = xor i64 %11535, %11538
  %11541 = xor i64 %11535, %11539
  %11542 = add nuw nsw i64 %11540, %11541
  %11543 = icmp eq i64 %11542, 2
  %11544 = zext i1 %11543 to i8
  %11545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11544, i8* %11545, align 1, !tbaa !2450
  %11546 = load i64, i64* %RBP
  %11547 = sub i64 %11546, 4
  %11548 = load i64, i64* %PC
  %11549 = add i64 %11548, 4
  store i64 %11549, i64* %PC
  %11550 = inttoptr i64 %11547 to i32*
  %11551 = load i32, i32* %11550
  %11552 = sext i32 %11551 to i64
  store i64 %11552, i64* %RCX, align 8, !tbaa !2428
  %11553 = load i64, i64* %RAX
  %11554 = load i64, i64* %RCX
  %11555 = mul i64 %11554, 4
  %11556 = add i64 %11555, %11553
  %11557 = load i64, i64* %PC
  %11558 = add i64 %11557, 4
  store i64 %11558, i64* %PC
  %11559 = inttoptr i64 %11556 to i32*
  %11560 = load i32, i32* %11559
  %11561 = sext i32 %11560 to i64
  store i64 %11561, i64* %RAX, align 8, !tbaa !2428
  %11562 = load i64, i64* %RAX
  %11563 = mul i64 %11562, 4
  %11564 = add i64 %11563, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %11565 = load i64, i64* %PC
  %11566 = add i64 %11565, 7
  store i64 %11566, i64* %PC
  %11567 = inttoptr i64 %11564 to i32*
  %11568 = load i32, i32* %11567
  %11569 = zext i32 %11568 to i64
  store i64 %11569, i64* %RDX, align 8, !tbaa !2428
  %11570 = load i64, i64* %RBP
  %11571 = sub i64 %11570, 4
  %11572 = load i64, i64* %PC
  %11573 = add i64 %11572, 4
  store i64 %11573, i64* %PC
  %11574 = inttoptr i64 %11571 to i32*
  %11575 = load i32, i32* %11574
  %11576 = sext i32 %11575 to i64
  store i64 %11576, i64* %RAX, align 8, !tbaa !2428
  %11577 = load i64, i64* %RBP
  %11578 = load i64, i64* %RAX
  %11579 = mul i64 %11578, 4
  %11580 = add i64 %11577, -1616
  %11581 = add i64 %11580, %11579
  %11582 = load i32, i32* %EDX
  %11583 = zext i32 %11582 to i64
  %11584 = load i64, i64* %PC
  %11585 = add i64 %11584, 7
  store i64 %11585, i64* %PC
  %11586 = inttoptr i64 %11581 to i32*
  store i32 %11582, i32* %11586
  %11587 = load i64, i64* %PC
  %11588 = add i64 %11587, 20
  %11589 = load i64, i64* %PC
  %11590 = add i64 %11589, 5
  store i64 %11590, i64* %PC
  %11591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11588, i64* %11591, align 8, !tbaa !2428
  br label %block_401362

block_401517:                                     ; preds = %block_401503
  %11592 = sub i64 %8655, 8
  %11593 = load i64, i64* %PC
  %11594 = add i64 %11593, 4
  store i64 %11594, i64* %PC
  %11595 = inttoptr i64 %11592 to i32*
  %11596 = load i32, i32* %11595
  %11597 = sext i32 %11596 to i64
  store i64 %11597, i64* %RAX, align 8, !tbaa !2428
  %11598 = load i64, i64* %RBP
  %11599 = load i64, i64* %RAX
  %11600 = mul i64 %11599, 4
  %11601 = add i64 %11598, -1616
  %11602 = add i64 %11601, %11600
  %11603 = load i64, i64* %PC
  %11604 = add i64 %11603, 8
  store i64 %11604, i64* %PC
  %11605 = inttoptr i64 %11602 to i32*
  %11606 = load i32, i32* %11605
  %11607 = sub i32 %11606, -1
  %11608 = icmp ult i32 %11606, -1
  %11609 = zext i1 %11608 to i8
  %11610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11609, i8* %11610, align 1, !tbaa !2432
  %11611 = and i32 %11607, 255
  %11612 = call i32 @llvm.ctpop.i32(i32 %11611) #16
  %11613 = trunc i32 %11612 to i8
  %11614 = and i8 %11613, 1
  %11615 = xor i8 %11614, 1
  %11616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11615, i8* %11616, align 1, !tbaa !2446
  %11617 = xor i32 %11606, -1
  %11618 = xor i32 %11617, %11607
  %11619 = lshr i32 %11618, 4
  %11620 = trunc i32 %11619 to i8
  %11621 = and i8 %11620, 1
  %11622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11621, i8* %11622, align 1, !tbaa !2447
  %11623 = icmp eq i32 %11607, 0
  %11624 = zext i1 %11623 to i8
  %11625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11624, i8* %11625, align 1, !tbaa !2448
  %11626 = lshr i32 %11607, 31
  %11627 = trunc i32 %11626 to i8
  %11628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11627, i8* %11628, align 1, !tbaa !2449
  %11629 = lshr i32 %11606, 31
  %11630 = xor i32 %11629, 1
  %11631 = xor i32 %11626, %11629
  %11632 = add nuw nsw i32 %11631, %11630
  %11633 = icmp eq i32 %11632, 2
  %11634 = zext i1 %11633 to i8
  %11635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11634, i8* %11635, align 1, !tbaa !2450
  %11636 = load i64, i64* %PC
  %11637 = add i64 %11636, 92
  %11638 = load i64, i64* %PC
  %11639 = add i64 %11638, 6
  %11640 = load i64, i64* %PC
  %11641 = add i64 %11640, 6
  store i64 %11641, i64* %PC
  %11642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11643 = load i8, i8* %11642, align 1, !tbaa !2448
  store i8 %11643, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11645 = icmp ne i8 %11643, 0
  %11646 = select i1 %11645, i64 %11637, i64 %11639
  store i64 %11646, i64* %11644, align 8, !tbaa !2428
  %11647 = load i8, i8* %BRANCH_TAKEN
  %11648 = icmp eq i8 %11647, 1
  br i1 %11648, label %block_40157f, label %block_401529

block_400a00:                                     ; preds = %block_4009ee
  %11649 = load i64, i64* %RBP
  %11650 = sub i64 %11649, 1496
  %11651 = load i64, i64* %PC
  %11652 = add i64 %11651, 10
  store i64 %11652, i64* %PC
  %11653 = inttoptr i64 %11650 to i32*
  store i32 1, i32* %11653
  br label %block_400a0a
}

; Function Attrs: noinline
define %struct.Memory* @sub_400510_rsdec_204(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400510:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 7
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 5
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %ECX = bitcast %union.anon* %19 to i32*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 7
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %EDX = bitcast %union.anon* %22 to i32*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 9
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %ESI = bitcast %union.anon* %25 to i32*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 1
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RAX = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 5
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RCX = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 7
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RDX = bitcast %union.anon* %34 to i64*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 9
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %RSI = bitcast %union.anon* %37 to i64*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %39 = getelementptr inbounds %struct.GPR, %struct.GPR* %38, i32 0, i32 11
  %40 = getelementptr inbounds %struct.Reg, %struct.Reg* %39, i32 0, i32 0
  %RDI = bitcast %union.anon* %40 to i64*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %42 = getelementptr inbounds %struct.GPR, %struct.GPR* %41, i32 0, i32 13
  %43 = getelementptr inbounds %struct.Reg, %struct.Reg* %42, i32 0, i32 0
  %RSP = bitcast %union.anon* %43 to i64*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %45 = getelementptr inbounds %struct.GPR, %struct.GPR* %44, i32 0, i32 15
  %46 = getelementptr inbounds %struct.Reg, %struct.Reg* %45, i32 0, i32 0
  %RBP = bitcast %union.anon* %46 to i64*
  %47 = load i64, i64* %RBP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 1
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %51 = load i64, i64* %50, align 8, !tbaa !2428
  %52 = add i64 %51, -8
  %53 = inttoptr i64 %52 to i64*
  store i64 %47, i64* %53
  store i64 %52, i64* %50, align 8, !tbaa !2428
  %54 = load i64, i64* %RSP
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 3
  store i64 %56, i64* %PC
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  %57 = load i64, i64* %RSP
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC
  %60 = sub i64 %57, 32
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  %61 = icmp ult i64 %57, 32
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %62, i8* %63, align 1, !tbaa !2432
  %64 = trunc i64 %60 to i32
  %65 = and i32 %64, 255
  %66 = call i32 @llvm.ctpop.i32(i32 %65) #16
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 1
  %69 = xor i8 %68, 1
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %69, i8* %70, align 1, !tbaa !2446
  %71 = xor i64 32, %57
  %72 = xor i64 %71, %60
  %73 = lshr i64 %72, 4
  %74 = trunc i64 %73 to i8
  %75 = and i8 %74, 1
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %75, i8* %76, align 1, !tbaa !2447
  %77 = icmp eq i64 %60, 0
  %78 = zext i1 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %78, i8* %79, align 1, !tbaa !2448
  %80 = lshr i64 %60, 63
  %81 = trunc i64 %80 to i8
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %81, i8* %82, align 1, !tbaa !2449
  %83 = lshr i64 %57, 63
  %84 = xor i64 %80, %83
  %85 = add nuw nsw i64 %84, %83
  %86 = icmp eq i64 %85, 2
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %87, i8* %88, align 1, !tbaa !2450
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 8
  %91 = load i64, i64* %RDI
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 16
  %97 = load i64, i64* %RSI
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 8
  store i64 %102, i64* %PC
  %103 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 16) to i32*)
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %104, align 1, !tbaa !2432
  %105 = and i32 %103, 255
  %106 = call i32 @llvm.ctpop.i32(i32 %105) #16
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %109, i8* %110, align 1, !tbaa !2446
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %111, align 1, !tbaa !2447
  %112 = icmp eq i32 %103, 0
  %113 = zext i1 %112 to i8
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %113, i8* %114, align 1, !tbaa !2448
  %115 = lshr i32 %103, 31
  %116 = trunc i32 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %116, i8* %117, align 1, !tbaa !2449
  %118 = lshr i32 %103, 31
  %119 = xor i32 %115, %118
  %120 = add nuw nsw i32 %119, %118
  %121 = icmp eq i32 %120, 2
  %122 = zext i1 %121 to i8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %122, i8* %123, align 1, !tbaa !2450
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 27
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 6
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 6
  store i64 %129, i64* %PC
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %131 = load i8, i8* %130, align 1, !tbaa !2448
  %132 = icmp eq i8 %131, 0
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %135 = select i1 %132, i64 %125, i64 %127
  store i64 %135, i64* %134, align 8, !tbaa !2428
  %136 = load i8, i8* %BRANCH_TAKEN
  %137 = icmp eq i8 %136, 1
  br i1 %137, label %block_400543, label %block_40052e

block_4005b4:                                     ; preds = %block_400588
  %138 = add i64 %884, 7
  store i64 %138, i64* %PC
  %139 = inttoptr i64 %883 to i32*
  store i32 0, i32* %139
  br label %block_4005bb

block_4005f9:                                     ; preds = %block_400606, %block_4005f2
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_4005f2 ], [ %MEMORY.0, %block_400606 ]
  %140 = load i64, i64* %RBP
  %141 = sub i64 %140, 20
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 7
  store i64 %143, i64* %PC
  %144 = inttoptr i64 %141 to i32*
  %145 = load i32, i32* %144
  %146 = sub i32 %145, 255
  %147 = icmp ult i32 %145, 255
  %148 = zext i1 %147 to i8
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %148, i8* %149, align 1, !tbaa !2432
  %150 = and i32 %146, 255
  %151 = call i32 @llvm.ctpop.i32(i32 %150) #16
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = xor i8 %153, 1
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %154, i8* %155, align 1, !tbaa !2446
  %156 = xor i32 %145, 255
  %157 = xor i32 %156, %146
  %158 = lshr i32 %157, 4
  %159 = trunc i32 %158 to i8
  %160 = and i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %160, i8* %161, align 1, !tbaa !2447
  %162 = icmp eq i32 %146, 0
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %163, i8* %164, align 1, !tbaa !2448
  %165 = lshr i32 %146, 31
  %166 = trunc i32 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %166, i8* %167, align 1, !tbaa !2449
  %168 = lshr i32 %145, 31
  %169 = xor i32 %165, %168
  %170 = add nuw nsw i32 %169, %168
  %171 = icmp eq i32 %170, 2
  %172 = zext i1 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %172, i8* %173, align 1, !tbaa !2450
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 50
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 6
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 6
  store i64 %179, i64* %PC
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %181 = load i8, i8* %180, align 1, !tbaa !2449
  %182 = icmp ne i8 %181, 0
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %184 = load i8, i8* %183, align 1, !tbaa !2450
  %185 = icmp ne i8 %184, 0
  %186 = xor i1 %182, %185
  %187 = xor i1 %186, true
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %190 = select i1 %186, i64 %177, i64 %175
  store i64 %190, i64* %189, align 8, !tbaa !2428
  %191 = load i8, i8* %BRANCH_TAKEN
  %192 = icmp eq i8 %191, 1
  br i1 %192, label %block_400632, label %block_400606

block_400632:                                     ; preds = %block_4005f9
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 766
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 5
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 5
  store i64 %198, i64* %PC
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %200 = load i64, i64* %199, align 8, !tbaa !2428
  %201 = add i64 %200, -8
  %202 = inttoptr i64 %201 to i64*
  store i64 %196, i64* %202
  store i64 %201, i64* %199, align 8, !tbaa !2428
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %194, i64* %203, align 8, !tbaa !2428
  %204 = load i64, i64* %PC
  %205 = call %struct.Memory* @sub_400930_decode_rs(%struct.State* %0, i64 %204, %struct.Memory* %MEMORY.0)
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 20
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 7
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %207 to i32*
  store i32 0, i32* %210
  br label %block_40063e

block_40063e:                                     ; preds = %block_40064b, %block_400632
  %MEMORY.1 = phi %struct.Memory* [ %205, %block_400632 ], [ %MEMORY.1, %block_40064b ]
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 20
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 7
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %212 to i32*
  %216 = load i32, i32* %215
  %217 = sub i32 %216, 188
  %218 = icmp ult i32 %216, 188
  %219 = zext i1 %218 to i8
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %219, i8* %220, align 1, !tbaa !2432
  %221 = and i32 %217, 255
  %222 = call i32 @llvm.ctpop.i32(i32 %221) #16
  %223 = trunc i32 %222 to i8
  %224 = and i8 %223, 1
  %225 = xor i8 %224, 1
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %225, i8* %226, align 1, !tbaa !2446
  %227 = xor i32 %216, 188
  %228 = xor i32 %227, %217
  %229 = lshr i32 %228, 4
  %230 = trunc i32 %229 to i8
  %231 = and i8 %230, 1
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %231, i8* %232, align 1, !tbaa !2447
  %233 = icmp eq i32 %217, 0
  %234 = zext i1 %233 to i8
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %234, i8* %235, align 1, !tbaa !2448
  %236 = lshr i32 %217, 31
  %237 = trunc i32 %236 to i8
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %237, i8* %238, align 1, !tbaa !2449
  %239 = lshr i32 %216, 31
  %240 = xor i32 %236, %239
  %241 = add nuw nsw i32 %240, %239
  %242 = icmp eq i32 %241, 2
  %243 = zext i1 %242 to i8
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %243, i8* %244, align 1, !tbaa !2450
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 49
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 6
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 6
  store i64 %250, i64* %PC
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %252 = load i8, i8* %251, align 1, !tbaa !2449
  %253 = icmp ne i8 %252, 0
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %255 = load i8, i8* %254, align 1, !tbaa !2450
  %256 = icmp ne i8 %255, 0
  %257 = xor i1 %253, %256
  %258 = xor i1 %257, true
  %259 = zext i1 %258 to i8
  store i8 %259, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %261 = select i1 %257, i64 %248, i64 %246
  store i64 %261, i64* %260, align 8, !tbaa !2428
  %262 = load i8, i8* %BRANCH_TAKEN
  %263 = icmp eq i8 %262, 1
  br i1 %263, label %block_400676, label %block_40064b

block_4005f2:                                     ; preds = %block_4005bb
  %264 = sub i64 %321, 20
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 7
  store i64 %266, i64* %PC
  %267 = inttoptr i64 %264 to i32*
  store i32 0, i32* %267
  br label %block_4005f9

block_4005bb:                                     ; preds = %block_4005c8, %block_4005b4
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.4, %block_4005b4 ], [ %MEMORY.2, %block_4005c8 ]
  %268 = load i64, i64* %RBP
  %269 = sub i64 %268, 20
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 7
  store i64 %271, i64* %PC
  %272 = inttoptr i64 %269 to i32*
  %273 = load i32, i32* %272
  %274 = sub i32 %273, 188
  %275 = icmp ult i32 %273, 188
  %276 = zext i1 %275 to i8
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %276, i8* %277, align 1, !tbaa !2432
  %278 = and i32 %274, 255
  %279 = call i32 @llvm.ctpop.i32(i32 %278) #16
  %280 = trunc i32 %279 to i8
  %281 = and i8 %280, 1
  %282 = xor i8 %281, 1
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %282, i8* %283, align 1, !tbaa !2446
  %284 = xor i32 %273, 188
  %285 = xor i32 %284, %274
  %286 = lshr i32 %285, 4
  %287 = trunc i32 %286 to i8
  %288 = and i8 %287, 1
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %288, i8* %289, align 1, !tbaa !2447
  %290 = icmp eq i32 %274, 0
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %291, i8* %292, align 1, !tbaa !2448
  %293 = lshr i32 %274, 31
  %294 = trunc i32 %293 to i8
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %294, i8* %295, align 1, !tbaa !2449
  %296 = lshr i32 %273, 31
  %297 = xor i32 %293, %296
  %298 = add nuw nsw i32 %297, %296
  %299 = icmp eq i32 %298, 2
  %300 = zext i1 %299 to i8
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %300, i8* %301, align 1, !tbaa !2450
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 48
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 6
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 6
  store i64 %307, i64* %PC
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %309 = load i8, i8* %308, align 1, !tbaa !2449
  %310 = icmp ne i8 %309, 0
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %312 = load i8, i8* %311, align 1, !tbaa !2450
  %313 = icmp ne i8 %312, 0
  %314 = xor i1 %310, %313
  %315 = xor i1 %314, true
  %316 = zext i1 %315 to i8
  store i8 %316, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %318 = select i1 %314, i64 %305, i64 %303
  store i64 %318, i64* %317, align 8, !tbaa !2428
  %319 = load i8, i8* %BRANCH_TAKEN
  %320 = icmp eq i8 %319, 1
  %321 = load i64, i64* %RBP
  br i1 %320, label %block_4005f2, label %block_4005c8

block_400676:                                     ; preds = %block_40063e
  %322 = load i64, i64* %RSP
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 4
  store i64 %324, i64* %PC
  %325 = add i64 32, %322
  store i64 %325, i64* %RSP, align 8, !tbaa !2428
  %326 = icmp ult i64 %325, %322
  %327 = icmp ult i64 %325, 32
  %328 = or i1 %326, %327
  %329 = zext i1 %328 to i8
  %330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %329, i8* %330, align 1, !tbaa !2432
  %331 = trunc i64 %325 to i32
  %332 = and i32 %331, 255
  %333 = call i32 @llvm.ctpop.i32(i32 %332) #16
  %334 = trunc i32 %333 to i8
  %335 = and i8 %334, 1
  %336 = xor i8 %335, 1
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %336, i8* %337, align 1, !tbaa !2446
  %338 = xor i64 32, %322
  %339 = xor i64 %338, %325
  %340 = lshr i64 %339, 4
  %341 = trunc i64 %340 to i8
  %342 = and i8 %341, 1
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %342, i8* %343, align 1, !tbaa !2447
  %344 = icmp eq i64 %325, 0
  %345 = zext i1 %344 to i8
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %345, i8* %346, align 1, !tbaa !2448
  %347 = lshr i64 %325, 63
  %348 = trunc i64 %347 to i8
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %348, i8* %349, align 1, !tbaa !2449
  %350 = lshr i64 %322, 63
  %351 = xor i64 %347, %350
  %352 = add nuw nsw i64 %351, %347
  %353 = icmp eq i64 %352, 2
  %354 = zext i1 %353 to i8
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %354, i8* %355, align 1, !tbaa !2450
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 1
  store i64 %357, i64* %PC
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %359 = load i64, i64* %358, align 8, !tbaa !2428
  %360 = add i64 %359, 8
  %361 = inttoptr i64 %359 to i64*
  %362 = load i64, i64* %361
  store i64 %362, i64* %RBP, align 8, !tbaa !2428
  store i64 %360, i64* %358, align 8, !tbaa !2428
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 1
  store i64 %364, i64* %PC
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %367 = load i64, i64* %366, align 8, !tbaa !2428
  %368 = inttoptr i64 %367 to i64*
  %369 = load i64, i64* %368
  store i64 %369, i64* %365, align 8, !tbaa !2428
  %370 = add i64 %367, 8
  store i64 %370, i64* %366, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400592:                                     ; preds = %block_400588
  %371 = add i64 %884, 3
  store i64 %371, i64* %PC
  %372 = inttoptr i64 %883 to i32*
  %373 = load i32, i32* %372
  %374 = zext i32 %373 to i64
  store i64 %374, i64* %RAX, align 8, !tbaa !2428
  %375 = load i64, i64* %RAX
  %376 = load i64, i64* %PC
  %377 = add i64 %376, 3
  store i64 %377, i64* %PC
  %378 = trunc i64 %375 to i32
  %379 = add i32 16, %378
  %380 = zext i32 %379 to i64
  store i64 %380, i64* %RAX, align 8, !tbaa !2428
  %381 = icmp ult i32 %379, %378
  %382 = icmp ult i32 %379, 16
  %383 = or i1 %381, %382
  %384 = zext i1 %383 to i8
  %385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %384, i8* %385, align 1, !tbaa !2432
  %386 = and i32 %379, 255
  %387 = call i32 @llvm.ctpop.i32(i32 %386) #16
  %388 = trunc i32 %387 to i8
  %389 = and i8 %388, 1
  %390 = xor i8 %389, 1
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %390, i8* %391, align 1, !tbaa !2446
  %392 = xor i64 16, %375
  %393 = trunc i64 %392 to i32
  %394 = xor i32 %393, %379
  %395 = lshr i32 %394, 4
  %396 = trunc i32 %395 to i8
  %397 = and i8 %396, 1
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %397, i8* %398, align 1, !tbaa !2447
  %399 = icmp eq i32 %379, 0
  %400 = zext i1 %399 to i8
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %400, i8* %401, align 1, !tbaa !2448
  %402 = lshr i32 %379, 31
  %403 = trunc i32 %402 to i8
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %403, i8* %404, align 1, !tbaa !2449
  %405 = lshr i32 %378, 31
  %406 = xor i32 %402, %405
  %407 = add nuw nsw i32 %406, %402
  %408 = icmp eq i32 %407, 2
  %409 = zext i1 %408 to i8
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %409, i8* %410, align 1, !tbaa !2450
  %411 = load i32, i32* %EAX
  %412 = zext i32 %411 to i64
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 3
  store i64 %414, i64* %PC
  %415 = shl i64 %412, 32
  %416 = ashr exact i64 %415, 32
  store i64 %416, i64* %RCX, align 8, !tbaa !2428
  %417 = load i64, i64* %RCX
  %418 = mul i64 %417, 4
  %419 = add i64 %418, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 11
  store i64 %421, i64* %PC
  %422 = inttoptr i64 %419 to i32*
  store i32 0, i32* %422
  %423 = load i64, i64* %RBP
  %424 = sub i64 %423, 20
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 3
  store i64 %426, i64* %PC
  %427 = inttoptr i64 %424 to i32*
  %428 = load i32, i32* %427
  %429 = zext i32 %428 to i64
  store i64 %429, i64* %RAX, align 8, !tbaa !2428
  %430 = load i64, i64* %RAX
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 3
  store i64 %432, i64* %PC
  %433 = trunc i64 %430 to i32
  %434 = add i32 1, %433
  %435 = zext i32 %434 to i64
  store i64 %435, i64* %RAX, align 8, !tbaa !2428
  %436 = icmp ult i32 %434, %433
  %437 = icmp ult i32 %434, 1
  %438 = or i1 %436, %437
  %439 = zext i1 %438 to i8
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %439, i8* %440, align 1, !tbaa !2432
  %441 = and i32 %434, 255
  %442 = call i32 @llvm.ctpop.i32(i32 %441) #16
  %443 = trunc i32 %442 to i8
  %444 = and i8 %443, 1
  %445 = xor i8 %444, 1
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %445, i8* %446, align 1, !tbaa !2446
  %447 = xor i64 1, %430
  %448 = trunc i64 %447 to i32
  %449 = xor i32 %448, %434
  %450 = lshr i32 %449, 4
  %451 = trunc i32 %450 to i8
  %452 = and i8 %451, 1
  %453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %452, i8* %453, align 1, !tbaa !2447
  %454 = icmp eq i32 %434, 0
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %455, i8* %456, align 1, !tbaa !2448
  %457 = lshr i32 %434, 31
  %458 = trunc i32 %457 to i8
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %458, i8* %459, align 1, !tbaa !2449
  %460 = lshr i32 %433, 31
  %461 = xor i32 %457, %460
  %462 = add nuw nsw i32 %461, %457
  %463 = icmp eq i32 %462, 2
  %464 = zext i1 %463 to i8
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %464, i8* %465, align 1, !tbaa !2450
  %466 = load i64, i64* %RBP
  %467 = sub i64 %466, 20
  %468 = load i32, i32* %EAX
  %469 = zext i32 %468 to i64
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 3
  store i64 %471, i64* %PC
  %472 = inttoptr i64 %467 to i32*
  store i32 %468, i32* %472
  %473 = load i64, i64* %PC
  %474 = sub i64 %473, 39
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 5
  store i64 %476, i64* %PC
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %474, i64* %477, align 8, !tbaa !2428
  br label %block_400588

block_400554:                                     ; preds = %block_40054a
  %478 = sub i64 %828, 16
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 4
  store i64 %480, i64* %PC
  %481 = inttoptr i64 %478 to i64*
  %482 = load i64, i64* %481
  store i64 %482, i64* %RAX, align 8, !tbaa !2428
  %483 = load i64, i64* %RBP
  %484 = sub i64 %483, 20
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 3
  store i64 %486, i64* %PC
  %487 = inttoptr i64 %484 to i32*
  %488 = load i32, i32* %487
  %489 = zext i32 %488 to i64
  store i64 %489, i64* %RCX, align 8, !tbaa !2428
  %490 = load i64, i64* %RCX
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 6
  store i64 %492, i64* %PC
  %493 = trunc i64 %490 to i32
  %494 = add i32 188, %493
  %495 = zext i32 %494 to i64
  store i64 %495, i64* %RCX, align 8, !tbaa !2428
  %496 = icmp ult i32 %494, %493
  %497 = icmp ult i32 %494, 188
  %498 = or i1 %496, %497
  %499 = zext i1 %498 to i8
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %499, i8* %500, align 1, !tbaa !2432
  %501 = and i32 %494, 255
  %502 = call i32 @llvm.ctpop.i32(i32 %501) #16
  %503 = trunc i32 %502 to i8
  %504 = and i8 %503, 1
  %505 = xor i8 %504, 1
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %505, i8* %506, align 1, !tbaa !2446
  %507 = xor i64 188, %490
  %508 = trunc i64 %507 to i32
  %509 = xor i32 %508, %494
  %510 = lshr i32 %509, 4
  %511 = trunc i32 %510 to i8
  %512 = and i8 %511, 1
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %512, i8* %513, align 1, !tbaa !2447
  %514 = icmp eq i32 %494, 0
  %515 = zext i1 %514 to i8
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %515, i8* %516, align 1, !tbaa !2448
  %517 = lshr i32 %494, 31
  %518 = trunc i32 %517 to i8
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %518, i8* %519, align 1, !tbaa !2449
  %520 = lshr i32 %493, 31
  %521 = xor i32 %517, %520
  %522 = add nuw nsw i32 %521, %517
  %523 = icmp eq i32 %522, 2
  %524 = zext i1 %523 to i8
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %524, i8* %525, align 1, !tbaa !2450
  %526 = load i32, i32* %ECX
  %527 = zext i32 %526 to i64
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 3
  store i64 %529, i64* %PC
  %530 = shl i64 %527, 32
  %531 = ashr exact i64 %530, 32
  store i64 %531, i64* %RDX, align 8, !tbaa !2428
  %532 = load i64, i64* %RAX
  %533 = load i64, i64* %RDX
  %534 = add i64 %533, %532
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 4
  store i64 %536, i64* %PC
  %537 = inttoptr i64 %534 to i8*
  %538 = load i8, i8* %537
  %539 = zext i8 %538 to i64
  store i64 %539, i64* %RCX, align 8, !tbaa !2428
  %540 = load i64, i64* %RBP
  %541 = sub i64 %540, 20
  %542 = load i64, i64* %PC
  %543 = add i64 %542, 4
  store i64 %543, i64* %PC
  %544 = inttoptr i64 %541 to i32*
  %545 = load i32, i32* %544
  %546 = sext i32 %545 to i64
  store i64 %546, i64* %RAX, align 8, !tbaa !2428
  %547 = load i64, i64* %RAX
  %548 = mul i64 %547, 4
  %549 = add i64 %548, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %550 = load i32, i32* %ECX
  %551 = zext i32 %550 to i64
  %552 = load i64, i64* %PC
  %553 = add i64 %552, 7
  store i64 %553, i64* %PC
  %554 = inttoptr i64 %549 to i32*
  store i32 %550, i32* %554
  %555 = load i64, i64* %RBP
  %556 = sub i64 %555, 20
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 3
  store i64 %558, i64* %PC
  %559 = inttoptr i64 %556 to i32*
  %560 = load i32, i32* %559
  %561 = zext i32 %560 to i64
  store i64 %561, i64* %RAX, align 8, !tbaa !2428
  %562 = load i64, i64* %RAX
  %563 = load i64, i64* %PC
  %564 = add i64 %563, 3
  store i64 %564, i64* %PC
  %565 = trunc i64 %562 to i32
  %566 = add i32 1, %565
  %567 = zext i32 %566 to i64
  store i64 %567, i64* %RAX, align 8, !tbaa !2428
  %568 = icmp ult i32 %566, %565
  %569 = icmp ult i32 %566, 1
  %570 = or i1 %568, %569
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %571, i8* %572, align 1, !tbaa !2432
  %573 = and i32 %566, 255
  %574 = call i32 @llvm.ctpop.i32(i32 %573) #16
  %575 = trunc i32 %574 to i8
  %576 = and i8 %575, 1
  %577 = xor i8 %576, 1
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %577, i8* %578, align 1, !tbaa !2446
  %579 = xor i64 1, %562
  %580 = trunc i64 %579 to i32
  %581 = xor i32 %580, %566
  %582 = lshr i32 %581, 4
  %583 = trunc i32 %582 to i8
  %584 = and i8 %583, 1
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %584, i8* %585, align 1, !tbaa !2447
  %586 = icmp eq i32 %566, 0
  %587 = zext i1 %586 to i8
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %587, i8* %588, align 1, !tbaa !2448
  %589 = lshr i32 %566, 31
  %590 = trunc i32 %589 to i8
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %590, i8* %591, align 1, !tbaa !2449
  %592 = lshr i32 %565, 31
  %593 = xor i32 %589, %592
  %594 = add nuw nsw i32 %593, %589
  %595 = icmp eq i32 %594, 2
  %596 = zext i1 %595 to i8
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %596, i8* %597, align 1, !tbaa !2450
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 20
  %600 = load i32, i32* %EAX
  %601 = zext i32 %600 to i64
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 3
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %599 to i32*
  store i32 %600, i32* %604
  %605 = load i64, i64* %PC
  %606 = sub i64 %605, 50
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 5
  store i64 %608, i64* %PC
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %606, i64* %609, align 8, !tbaa !2428
  br label %block_40054a

block_40052e:                                     ; preds = %block_400510
  %610 = load i64, i64* %PC
  %611 = add i64 %610, 338
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 5
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 5
  store i64 %615, i64* %PC
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %617 = load i64, i64* %616, align 8, !tbaa !2428
  %618 = add i64 %617, -8
  %619 = inttoptr i64 %618 to i64*
  store i64 %613, i64* %619
  store i64 %618, i64* %616, align 8, !tbaa !2428
  %620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %611, i64* %620, align 8, !tbaa !2428
  %621 = load i64, i64* %PC
  %622 = call %struct.Memory* @sub_400680_generate_gf(%struct.State* %0, i64 %621, %struct.Memory* %2)
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 669
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 5
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 5
  store i64 %628, i64* %PC
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %630 = load i64, i64* %629, align 8, !tbaa !2428
  %631 = add i64 %630, -8
  %632 = inttoptr i64 %631 to i64*
  store i64 %626, i64* %632
  store i64 %631, i64* %629, align 8, !tbaa !2428
  %633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %624, i64* %633, align 8, !tbaa !2428
  %634 = load i64, i64* %PC
  %635 = call %struct.Memory* @sub_4007d0_gen_poly(%struct.State* %0, i64 %634, %struct.Memory* %622)
  %636 = load i64, i64* %PC
  %637 = add i64 %636, 11
  store i64 %637, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 16) to i32*)
  br label %block_400543

block_40064b:                                     ; preds = %block_40063e
  %638 = load i64, i64* %RBP
  %639 = sub i64 %638, 20
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 3
  store i64 %641, i64* %PC
  %642 = inttoptr i64 %639 to i32*
  %643 = load i32, i32* %642
  %644 = zext i32 %643 to i64
  store i64 %644, i64* %RAX, align 8, !tbaa !2428
  %645 = load i64, i64* %RAX
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 3
  store i64 %647, i64* %PC
  %648 = trunc i64 %645 to i32
  %649 = add i32 67, %648
  %650 = zext i32 %649 to i64
  store i64 %650, i64* %RAX, align 8, !tbaa !2428
  %651 = icmp ult i32 %649, %648
  %652 = icmp ult i32 %649, 67
  %653 = or i1 %651, %652
  %654 = zext i1 %653 to i8
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %654, i8* %655, align 1, !tbaa !2432
  %656 = and i32 %649, 255
  %657 = call i32 @llvm.ctpop.i32(i32 %656) #16
  %658 = trunc i32 %657 to i8
  %659 = and i8 %658, 1
  %660 = xor i8 %659, 1
  %661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %660, i8* %661, align 1, !tbaa !2446
  %662 = xor i64 67, %645
  %663 = trunc i64 %662 to i32
  %664 = xor i32 %663, %649
  %665 = lshr i32 %664, 4
  %666 = trunc i32 %665 to i8
  %667 = and i8 %666, 1
  %668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %667, i8* %668, align 1, !tbaa !2447
  %669 = icmp eq i32 %649, 0
  %670 = zext i1 %669 to i8
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %670, i8* %671, align 1, !tbaa !2448
  %672 = lshr i32 %649, 31
  %673 = trunc i32 %672 to i8
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %673, i8* %674, align 1, !tbaa !2449
  %675 = lshr i32 %648, 31
  %676 = xor i32 %672, %675
  %677 = add nuw nsw i32 %676, %672
  %678 = icmp eq i32 %677, 2
  %679 = zext i1 %678 to i8
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %679, i8* %680, align 1, !tbaa !2450
  %681 = load i32, i32* %EAX
  %682 = zext i32 %681 to i64
  %683 = load i64, i64* %PC
  %684 = add i64 %683, 3
  store i64 %684, i64* %PC
  %685 = shl i64 %682, 32
  %686 = ashr exact i64 %685, 32
  store i64 %686, i64* %RCX, align 8, !tbaa !2428
  %687 = load i64, i64* %RCX
  %688 = mul i64 %687, 4
  %689 = add i64 %688, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 7
  store i64 %691, i64* %PC
  %692 = inttoptr i64 %689 to i32*
  %693 = load i32, i32* %692
  %694 = zext i32 %693 to i64
  store i64 %694, i64* %RAX, align 8, !tbaa !2428
  %695 = load i8, i8* %AL
  %696 = zext i8 %695 to i64
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 2
  store i64 %698, i64* %PC
  store i8 %695, i8* %DL, align 1, !tbaa !2451
  %699 = load i64, i64* %RBP
  %700 = sub i64 %699, 8
  %701 = load i64, i64* %PC
  %702 = add i64 %701, 4
  store i64 %702, i64* %PC
  %703 = inttoptr i64 %700 to i64*
  %704 = load i64, i64* %703
  store i64 %704, i64* %RCX, align 8, !tbaa !2428
  %705 = load i64, i64* %RBP
  %706 = sub i64 %705, 20
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %706 to i32*
  %710 = load i32, i32* %709
  %711 = sext i32 %710 to i64
  store i64 %711, i64* %RSI, align 8, !tbaa !2428
  %712 = load i64, i64* %RCX
  %713 = load i64, i64* %RSI
  %714 = add i64 %713, %712
  %715 = load i8, i8* %DL
  %716 = zext i8 %715 to i64
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 3
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %714 to i8*
  store i8 %715, i8* %719
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 20
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724
  %726 = zext i32 %725 to i64
  store i64 %726, i64* %RAX, align 8, !tbaa !2428
  %727 = load i64, i64* %RAX
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 3
  store i64 %729, i64* %PC
  %730 = trunc i64 %727 to i32
  %731 = add i32 1, %730
  %732 = zext i32 %731 to i64
  store i64 %732, i64* %RAX, align 8, !tbaa !2428
  %733 = icmp ult i32 %731, %730
  %734 = icmp ult i32 %731, 1
  %735 = or i1 %733, %734
  %736 = zext i1 %735 to i8
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %736, i8* %737, align 1, !tbaa !2432
  %738 = and i32 %731, 255
  %739 = call i32 @llvm.ctpop.i32(i32 %738) #16
  %740 = trunc i32 %739 to i8
  %741 = and i8 %740, 1
  %742 = xor i8 %741, 1
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %742, i8* %743, align 1, !tbaa !2446
  %744 = xor i64 1, %727
  %745 = trunc i64 %744 to i32
  %746 = xor i32 %745, %731
  %747 = lshr i32 %746, 4
  %748 = trunc i32 %747 to i8
  %749 = and i8 %748, 1
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %749, i8* %750, align 1, !tbaa !2447
  %751 = icmp eq i32 %731, 0
  %752 = zext i1 %751 to i8
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %752, i8* %753, align 1, !tbaa !2448
  %754 = lshr i32 %731, 31
  %755 = trunc i32 %754 to i8
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %755, i8* %756, align 1, !tbaa !2449
  %757 = lshr i32 %730, 31
  %758 = xor i32 %754, %757
  %759 = add nuw nsw i32 %758, %754
  %760 = icmp eq i32 %759, 2
  %761 = zext i1 %760 to i8
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %761, i8* %762, align 1, !tbaa !2450
  %763 = load i64, i64* %RBP
  %764 = sub i64 %763, 20
  %765 = load i32, i32* %EAX
  %766 = zext i32 %765 to i64
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 3
  store i64 %768, i64* %PC
  %769 = inttoptr i64 %764 to i32*
  store i32 %765, i32* %769
  %770 = load i64, i64* %PC
  %771 = sub i64 %770, 51
  %772 = load i64, i64* %PC
  %773 = add i64 %772, 5
  store i64 %773, i64* %PC
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %771, i64* %774, align 8, !tbaa !2428
  br label %block_40063e

block_40054a:                                     ; preds = %block_400543, %block_400554
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.5, %block_400543 ], [ %MEMORY.3, %block_400554 ]
  %775 = load i64, i64* %RBP
  %776 = sub i64 %775, 20
  %777 = load i64, i64* %PC
  %778 = add i64 %777, 4
  store i64 %778, i64* %PC
  %779 = inttoptr i64 %776 to i32*
  %780 = load i32, i32* %779
  %781 = sub i32 %780, 16
  %782 = icmp ult i32 %780, 16
  %783 = zext i1 %782 to i8
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %783, i8* %784, align 1, !tbaa !2432
  %785 = and i32 %781, 255
  %786 = call i32 @llvm.ctpop.i32(i32 %785) #16
  %787 = trunc i32 %786 to i8
  %788 = and i8 %787, 1
  %789 = xor i8 %788, 1
  %790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %789, i8* %790, align 1, !tbaa !2446
  %791 = xor i32 %780, 16
  %792 = xor i32 %791, %781
  %793 = lshr i32 %792, 4
  %794 = trunc i32 %793 to i8
  %795 = and i8 %794, 1
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %795, i8* %796, align 1, !tbaa !2447
  %797 = icmp eq i32 %781, 0
  %798 = zext i1 %797 to i8
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %798, i8* %799, align 1, !tbaa !2448
  %800 = lshr i32 %781, 31
  %801 = trunc i32 %800 to i8
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %801, i8* %802, align 1, !tbaa !2449
  %803 = lshr i32 %780, 31
  %804 = xor i32 %800, %803
  %805 = add nuw nsw i32 %804, %803
  %806 = icmp eq i32 %805, 2
  %807 = zext i1 %806 to i8
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %807, i8* %808, align 1, !tbaa !2450
  %809 = load i64, i64* %PC
  %810 = add i64 %809, 51
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 6
  %813 = load i64, i64* %PC
  %814 = add i64 %813, 6
  store i64 %814, i64* %PC
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %816 = load i8, i8* %815, align 1, !tbaa !2449
  %817 = icmp ne i8 %816, 0
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %819 = load i8, i8* %818, align 1, !tbaa !2450
  %820 = icmp ne i8 %819, 0
  %821 = xor i1 %817, %820
  %822 = xor i1 %821, true
  %823 = zext i1 %822 to i8
  store i8 %823, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %825 = select i1 %821, i64 %812, i64 %810
  store i64 %825, i64* %824, align 8, !tbaa !2428
  %826 = load i8, i8* %BRANCH_TAKEN
  %827 = icmp eq i8 %826, 1
  %828 = load i64, i64* %RBP
  br i1 %827, label %block_400581, label %block_400554

block_400588:                                     ; preds = %block_400581, %block_400592
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.3, %block_400581 ], [ %MEMORY.4, %block_400592 ]
  %829 = load i64, i64* %RBP
  %830 = sub i64 %829, 20
  %831 = load i64, i64* %PC
  %832 = add i64 %831, 4
  store i64 %832, i64* %PC
  %833 = inttoptr i64 %830 to i32*
  %834 = load i32, i32* %833
  %835 = sub i32 %834, 51
  %836 = icmp ult i32 %834, 51
  %837 = zext i1 %836 to i8
  %838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %837, i8* %838, align 1, !tbaa !2432
  %839 = and i32 %835, 255
  %840 = call i32 @llvm.ctpop.i32(i32 %839) #16
  %841 = trunc i32 %840 to i8
  %842 = and i8 %841, 1
  %843 = xor i8 %842, 1
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %843, i8* %844, align 1, !tbaa !2446
  %845 = xor i32 %834, 51
  %846 = xor i32 %845, %835
  %847 = lshr i32 %846, 4
  %848 = trunc i32 %847 to i8
  %849 = and i8 %848, 1
  %850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %849, i8* %850, align 1, !tbaa !2447
  %851 = icmp eq i32 %835, 0
  %852 = zext i1 %851 to i8
  %853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %852, i8* %853, align 1, !tbaa !2448
  %854 = lshr i32 %835, 31
  %855 = trunc i32 %854 to i8
  %856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %855, i8* %856, align 1, !tbaa !2449
  %857 = lshr i32 %834, 31
  %858 = xor i32 %854, %857
  %859 = add nuw nsw i32 %858, %857
  %860 = icmp eq i32 %859, 2
  %861 = zext i1 %860 to i8
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %861, i8* %862, align 1, !tbaa !2450
  %863 = load i64, i64* %PC
  %864 = add i64 %863, 40
  %865 = load i64, i64* %PC
  %866 = add i64 %865, 6
  %867 = load i64, i64* %PC
  %868 = add i64 %867, 6
  store i64 %868, i64* %PC
  %869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %870 = load i8, i8* %869, align 1, !tbaa !2449
  %871 = icmp ne i8 %870, 0
  %872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %873 = load i8, i8* %872, align 1, !tbaa !2450
  %874 = icmp ne i8 %873, 0
  %875 = xor i1 %871, %874
  %876 = xor i1 %875, true
  %877 = zext i1 %876 to i8
  store i8 %877, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %879 = select i1 %875, i64 %866, i64 %864
  store i64 %879, i64* %878, align 8, !tbaa !2428
  %880 = load i8, i8* %BRANCH_TAKEN
  %881 = icmp eq i8 %880, 1
  %882 = load i64, i64* %RBP
  %883 = sub i64 %882, 20
  %884 = load i64, i64* %PC
  br i1 %881, label %block_4005b4, label %block_400592

block_4005c8:                                     ; preds = %block_4005bb
  %885 = sub i64 %321, 16
  %886 = load i64, i64* %PC
  %887 = add i64 %886, 4
  store i64 %887, i64* %PC
  %888 = inttoptr i64 %885 to i64*
  %889 = load i64, i64* %888
  store i64 %889, i64* %RAX, align 8, !tbaa !2428
  %890 = load i64, i64* %RBP
  %891 = sub i64 %890, 20
  %892 = load i64, i64* %PC
  %893 = add i64 %892, 4
  store i64 %893, i64* %PC
  %894 = inttoptr i64 %891 to i32*
  %895 = load i32, i32* %894
  %896 = sext i32 %895 to i64
  store i64 %896, i64* %RCX, align 8, !tbaa !2428
  %897 = load i64, i64* %RAX
  %898 = load i64, i64* %RCX
  %899 = add i64 %898, %897
  %900 = load i64, i64* %PC
  %901 = add i64 %900, 4
  store i64 %901, i64* %PC
  %902 = inttoptr i64 %899 to i8*
  %903 = load i8, i8* %902
  %904 = zext i8 %903 to i64
  store i64 %904, i64* %RDX, align 8, !tbaa !2428
  %905 = load i64, i64* %RBP
  %906 = sub i64 %905, 20
  %907 = load i64, i64* %PC
  %908 = add i64 %907, 3
  store i64 %908, i64* %PC
  %909 = inttoptr i64 %906 to i32*
  %910 = load i32, i32* %909
  %911 = zext i32 %910 to i64
  store i64 %911, i64* %RSI, align 8, !tbaa !2428
  %912 = load i64, i64* %RSI
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 3
  store i64 %914, i64* %PC
  %915 = trunc i64 %912 to i32
  %916 = add i32 67, %915
  %917 = zext i32 %916 to i64
  store i64 %917, i64* %RSI, align 8, !tbaa !2428
  %918 = icmp ult i32 %916, %915
  %919 = icmp ult i32 %916, 67
  %920 = or i1 %918, %919
  %921 = zext i1 %920 to i8
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %921, i8* %922, align 1, !tbaa !2432
  %923 = and i32 %916, 255
  %924 = call i32 @llvm.ctpop.i32(i32 %923) #16
  %925 = trunc i32 %924 to i8
  %926 = and i8 %925, 1
  %927 = xor i8 %926, 1
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %927, i8* %928, align 1, !tbaa !2446
  %929 = xor i64 67, %912
  %930 = trunc i64 %929 to i32
  %931 = xor i32 %930, %916
  %932 = lshr i32 %931, 4
  %933 = trunc i32 %932 to i8
  %934 = and i8 %933, 1
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %934, i8* %935, align 1, !tbaa !2447
  %936 = icmp eq i32 %916, 0
  %937 = zext i1 %936 to i8
  %938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %937, i8* %938, align 1, !tbaa !2448
  %939 = lshr i32 %916, 31
  %940 = trunc i32 %939 to i8
  %941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %940, i8* %941, align 1, !tbaa !2449
  %942 = lshr i32 %915, 31
  %943 = xor i32 %939, %942
  %944 = add nuw nsw i32 %943, %939
  %945 = icmp eq i32 %944, 2
  %946 = zext i1 %945 to i8
  %947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %946, i8* %947, align 1, !tbaa !2450
  %948 = load i32, i32* %ESI
  %949 = zext i32 %948 to i64
  %950 = load i64, i64* %PC
  %951 = add i64 %950, 3
  store i64 %951, i64* %PC
  %952 = shl i64 %949, 32
  %953 = ashr exact i64 %952, 32
  store i64 %953, i64* %RAX, align 8, !tbaa !2428
  %954 = load i64, i64* %RAX
  %955 = mul i64 %954, 4
  %956 = add i64 %955, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %957 = load i32, i32* %EDX
  %958 = zext i32 %957 to i64
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 7
  store i64 %960, i64* %PC
  %961 = inttoptr i64 %956 to i32*
  store i32 %957, i32* %961
  %962 = load i64, i64* %RBP
  %963 = sub i64 %962, 20
  %964 = load i64, i64* %PC
  %965 = add i64 %964, 3
  store i64 %965, i64* %PC
  %966 = inttoptr i64 %963 to i32*
  %967 = load i32, i32* %966
  %968 = zext i32 %967 to i64
  store i64 %968, i64* %RAX, align 8, !tbaa !2428
  %969 = load i64, i64* %RAX
  %970 = load i64, i64* %PC
  %971 = add i64 %970, 3
  store i64 %971, i64* %PC
  %972 = trunc i64 %969 to i32
  %973 = add i32 1, %972
  %974 = zext i32 %973 to i64
  store i64 %974, i64* %RAX, align 8, !tbaa !2428
  %975 = icmp ult i32 %973, %972
  %976 = icmp ult i32 %973, 1
  %977 = or i1 %975, %976
  %978 = zext i1 %977 to i8
  %979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %978, i8* %979, align 1, !tbaa !2432
  %980 = and i32 %973, 255
  %981 = call i32 @llvm.ctpop.i32(i32 %980) #16
  %982 = trunc i32 %981 to i8
  %983 = and i8 %982, 1
  %984 = xor i8 %983, 1
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %984, i8* %985, align 1, !tbaa !2446
  %986 = xor i64 1, %969
  %987 = trunc i64 %986 to i32
  %988 = xor i32 %987, %973
  %989 = lshr i32 %988, 4
  %990 = trunc i32 %989 to i8
  %991 = and i8 %990, 1
  %992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %991, i8* %992, align 1, !tbaa !2447
  %993 = icmp eq i32 %973, 0
  %994 = zext i1 %993 to i8
  %995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %994, i8* %995, align 1, !tbaa !2448
  %996 = lshr i32 %973, 31
  %997 = trunc i32 %996 to i8
  %998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %997, i8* %998, align 1, !tbaa !2449
  %999 = lshr i32 %972, 31
  %1000 = xor i32 %996, %999
  %1001 = add nuw nsw i32 %1000, %996
  %1002 = icmp eq i32 %1001, 2
  %1003 = zext i1 %1002 to i8
  %1004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1003, i8* %1004, align 1, !tbaa !2450
  %1005 = load i64, i64* %RBP
  %1006 = sub i64 %1005, 20
  %1007 = load i32, i32* %EAX
  %1008 = zext i32 %1007 to i64
  %1009 = load i64, i64* %PC
  %1010 = add i64 %1009, 3
  store i64 %1010, i64* %PC
  %1011 = inttoptr i64 %1006 to i32*
  store i32 %1007, i32* %1011
  %1012 = load i64, i64* %PC
  %1013 = sub i64 %1012, 50
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 5
  store i64 %1015, i64* %PC
  %1016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1013, i64* %1016, align 8, !tbaa !2428
  br label %block_4005bb

block_400543:                                     ; preds = %block_40052e, %block_400510
  %MEMORY.5 = phi %struct.Memory* [ %2, %block_400510 ], [ %635, %block_40052e ]
  %1017 = load i64, i64* %RBP
  %1018 = sub i64 %1017, 20
  %1019 = load i64, i64* %PC
  %1020 = add i64 %1019, 7
  store i64 %1020, i64* %PC
  %1021 = inttoptr i64 %1018 to i32*
  store i32 0, i32* %1021
  br label %block_40054a

block_400606:                                     ; preds = %block_4005f9
  %1022 = load i64, i64* %RBP
  %1023 = sub i64 %1022, 20
  %1024 = load i64, i64* %PC
  %1025 = add i64 %1024, 4
  store i64 %1025, i64* %PC
  %1026 = inttoptr i64 %1023 to i32*
  %1027 = load i32, i32* %1026
  %1028 = sext i32 %1027 to i64
  store i64 %1028, i64* %RAX, align 8, !tbaa !2428
  %1029 = load i64, i64* %RAX
  %1030 = mul i64 %1029, 4
  %1031 = add i64 %1030, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 8
  store i64 %1033, i64* %PC
  %1034 = inttoptr i64 %1031 to i32*
  %1035 = load i32, i32* %1034
  %1036 = sext i32 %1035 to i64
  store i64 %1036, i64* %RAX, align 8, !tbaa !2428
  %1037 = load i64, i64* %RAX
  %1038 = mul i64 %1037, 4
  %1039 = add i64 %1038, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %1040 = load i64, i64* %PC
  %1041 = add i64 %1040, 7
  store i64 %1041, i64* %PC
  %1042 = inttoptr i64 %1039 to i32*
  %1043 = load i32, i32* %1042
  %1044 = zext i32 %1043 to i64
  store i64 %1044, i64* %RCX, align 8, !tbaa !2428
  %1045 = load i64, i64* %RBP
  %1046 = sub i64 %1045, 20
  %1047 = load i64, i64* %PC
  %1048 = add i64 %1047, 4
  store i64 %1048, i64* %PC
  %1049 = inttoptr i64 %1046 to i32*
  %1050 = load i32, i32* %1049
  %1051 = sext i32 %1050 to i64
  store i64 %1051, i64* %RAX, align 8, !tbaa !2428
  %1052 = load i64, i64* %RAX
  %1053 = mul i64 %1052, 4
  %1054 = add i64 %1053, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 32)
  %1055 = load i32, i32* %ECX
  %1056 = zext i32 %1055 to i64
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 7
  store i64 %1058, i64* %PC
  %1059 = inttoptr i64 %1054 to i32*
  store i32 %1055, i32* %1059
  %1060 = load i64, i64* %RBP
  %1061 = sub i64 %1060, 20
  %1062 = load i64, i64* %PC
  %1063 = add i64 %1062, 3
  store i64 %1063, i64* %PC
  %1064 = inttoptr i64 %1061 to i32*
  %1065 = load i32, i32* %1064
  %1066 = zext i32 %1065 to i64
  store i64 %1066, i64* %RAX, align 8, !tbaa !2428
  %1067 = load i64, i64* %RAX
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 3
  store i64 %1069, i64* %PC
  %1070 = trunc i64 %1067 to i32
  %1071 = add i32 1, %1070
  %1072 = zext i32 %1071 to i64
  store i64 %1072, i64* %RAX, align 8, !tbaa !2428
  %1073 = icmp ult i32 %1071, %1070
  %1074 = icmp ult i32 %1071, 1
  %1075 = or i1 %1073, %1074
  %1076 = zext i1 %1075 to i8
  %1077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1076, i8* %1077, align 1, !tbaa !2432
  %1078 = and i32 %1071, 255
  %1079 = call i32 @llvm.ctpop.i32(i32 %1078) #16
  %1080 = trunc i32 %1079 to i8
  %1081 = and i8 %1080, 1
  %1082 = xor i8 %1081, 1
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1082, i8* %1083, align 1, !tbaa !2446
  %1084 = xor i64 1, %1067
  %1085 = trunc i64 %1084 to i32
  %1086 = xor i32 %1085, %1071
  %1087 = lshr i32 %1086, 4
  %1088 = trunc i32 %1087 to i8
  %1089 = and i8 %1088, 1
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1089, i8* %1090, align 1, !tbaa !2447
  %1091 = icmp eq i32 %1071, 0
  %1092 = zext i1 %1091 to i8
  %1093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1092, i8* %1093, align 1, !tbaa !2448
  %1094 = lshr i32 %1071, 31
  %1095 = trunc i32 %1094 to i8
  %1096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1095, i8* %1096, align 1, !tbaa !2449
  %1097 = lshr i32 %1070, 31
  %1098 = xor i32 %1094, %1097
  %1099 = add nuw nsw i32 %1098, %1094
  %1100 = icmp eq i32 %1099, 2
  %1101 = zext i1 %1100 to i8
  %1102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1101, i8* %1102, align 1, !tbaa !2450
  %1103 = load i64, i64* %RBP
  %1104 = sub i64 %1103, 20
  %1105 = load i32, i32* %EAX
  %1106 = zext i32 %1105 to i64
  %1107 = load i64, i64* %PC
  %1108 = add i64 %1107, 3
  store i64 %1108, i64* %PC
  %1109 = inttoptr i64 %1104 to i32*
  store i32 %1105, i32* %1109
  %1110 = load i64, i64* %PC
  %1111 = sub i64 %1110, 52
  %1112 = load i64, i64* %PC
  %1113 = add i64 %1112, 5
  store i64 %1113, i64* %PC
  %1114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1111, i64* %1114, align 8, !tbaa !2428
  br label %block_4005f9

block_400581:                                     ; preds = %block_40054a
  %1115 = sub i64 %828, 20
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 7
  store i64 %1117, i64* %PC
  %1118 = inttoptr i64 %1115 to i32*
  store i32 0, i32* %1118
  br label %block_400588
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c60___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401c60:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_602df0__init_array_type* @seg_602df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_602df0__init_array_type* @seg_602df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2448
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2449
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2447
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2448
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2449
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2450
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2451
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2451
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2451
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2451
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 6316
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_4003e0__init_proc(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2432
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2448
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2449
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2450
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2447
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2448
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_401cb6, label %block_401c96

block_401cb6:                                     ; preds = %block_401ca0, %block_401c60
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_401c60 ], [ %387, %block_401ca0 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2447
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2450
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401c96:                                     ; preds = %block_401c60
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2450
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2447
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_401ca0

block_401ca0:                                     ; preds = %block_401ca0, %block_401c96
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_401c96 ], [ %387, %block_401ca0 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2448
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2449
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2432
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2447
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2448
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2449
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2450
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2448
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_401ca0, label %block_401cb6
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004d0___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004d0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* getelementptr inbounds (%seg_603060__bss_type, %seg_603060__bss_type* @seg_603060__bss, i32 0, i32 0, i32 0)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2447
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2448
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_4004f0, label %block_4004d9

block_4004f0:                                     ; preds = %block_4004d0
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4004d9:                                     ; preds = %block_4004d0
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_400460_deregister_tm_clones(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* getelementptr inbounds (%seg_603060__bss_type, %seg_603060__bss_type* @seg_603060__bss, i32 0, i32 0, i32 0)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_401cd4__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401cd4:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2449
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2450
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400420__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400420:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2432
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2450
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2447
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2450
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2447
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_401cd0___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_401c60___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_602ff0__got_type, %seg_602ff0__got_type* @seg_602ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_6040d0___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_400680_generate_gf(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400680:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 7
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 8
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 7
  store i64 %40, i64* %PC
  %41 = inttoptr i64 %38 to i32*
  store i32 1, i32* %41
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 11
  store i64 %43, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2112) to i32*)
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 4
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 7
  store i64 %47, i64* %PC
  %48 = inttoptr i64 %45 to i32*
  store i32 0, i32* %48
  br label %block_40069d

block_40079b:                                     ; preds = %block_40077d, %block_40074e
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_40077d ], [ %MEMORY.2, %block_40074e ]
  %49 = load i64, i64* %RBP
  %50 = sub i64 %49, 4
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  %53 = inttoptr i64 %50 to i32*
  %54 = load i32, i32* %53
  %55 = zext i32 %54 to i64
  store i64 %55, i64* %RAX, align 8, !tbaa !2428
  %56 = load i64, i64* %RBP
  %57 = sub i64 %56, 4
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC
  %60 = inttoptr i64 %57 to i32*
  %61 = load i32, i32* %60
  %62 = sext i32 %61 to i64
  store i64 %62, i64* %RCX, align 8, !tbaa !2428
  %63 = load i64, i64* %RCX
  %64 = mul i64 %63, 4
  %65 = add i64 %64, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 8
  store i64 %67, i64* %PC
  %68 = inttoptr i64 %65 to i32*
  %69 = load i32, i32* %68
  %70 = sext i32 %69 to i64
  store i64 %70, i64* %RCX, align 8, !tbaa !2428
  %71 = load i64, i64* %RCX
  %72 = mul i64 %71, 4
  %73 = add i64 %72, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %74 = load i32, i32* %EAX
  %75 = zext i32 %74 to i64
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 7
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %73 to i32*
  store i32 %74, i32* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 4
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 3
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i32*
  %84 = load i32, i32* %83
  %85 = zext i32 %84 to i64
  store i64 %85, i64* %RAX, align 8, !tbaa !2428
  %86 = load i64, i64* %RAX
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 3
  store i64 %88, i64* %PC
  %89 = trunc i64 %86 to i32
  %90 = add i32 1, %89
  %91 = zext i32 %90 to i64
  store i64 %91, i64* %RAX, align 8, !tbaa !2428
  %92 = icmp ult i32 %90, %89
  %93 = icmp ult i32 %90, 1
  %94 = or i1 %92, %93
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %95, i8* %96, align 1, !tbaa !2432
  %97 = and i32 %90, 255
  %98 = call i32 @llvm.ctpop.i32(i32 %97) #16
  %99 = trunc i32 %98 to i8
  %100 = and i8 %99, 1
  %101 = xor i8 %100, 1
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %101, i8* %102, align 1, !tbaa !2446
  %103 = xor i64 1, %86
  %104 = trunc i64 %103 to i32
  %105 = xor i32 %104, %90
  %106 = lshr i32 %105, 4
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %108, i8* %109, align 1, !tbaa !2447
  %110 = icmp eq i32 %90, 0
  %111 = zext i1 %110 to i8
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %111, i8* %112, align 1, !tbaa !2448
  %113 = lshr i32 %90, 31
  %114 = trunc i32 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %114, i8* %115, align 1, !tbaa !2449
  %116 = lshr i32 %89, 31
  %117 = xor i32 %113, %116
  %118 = add nuw nsw i32 %117, %113
  %119 = icmp eq i32 %118, 2
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %120, i8* %121, align 1, !tbaa !2450
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 4
  %124 = load i32, i32* %EAX
  %125 = zext i32 %124 to i64
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 3
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %123 to i32*
  store i32 %124, i32* %128
  %129 = load i64, i64* %PC
  %130 = sub i64 %129, 146
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 5
  store i64 %132, i64* %PC
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %130, i64* %133, align 8, !tbaa !2428
  br label %block_400728

block_40074e:                                     ; preds = %block_400735
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 7
  store i64 %135, i64* %PC
  %136 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2112) to i32*)
  %137 = zext i32 %136 to i64
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 4
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 3
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %139 to i32*
  %143 = load i32, i32* %142
  %144 = zext i32 %143 to i64
  store i64 %144, i64* %RCX, align 8, !tbaa !2428
  %145 = load i64, i64* %RCX
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 3
  store i64 %147, i64* %PC
  %148 = trunc i64 %145 to i32
  %149 = sub i32 %148, 1
  %150 = zext i32 %149 to i64
  store i64 %150, i64* %RCX, align 8, !tbaa !2428
  %151 = icmp ult i32 %148, 1
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %152, i8* %153, align 1, !tbaa !2432
  %154 = and i32 %149, 255
  %155 = call i32 @llvm.ctpop.i32(i32 %154) #16
  %156 = trunc i32 %155 to i8
  %157 = and i8 %156, 1
  %158 = xor i8 %157, 1
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %158, i8* %159, align 1, !tbaa !2446
  %160 = xor i64 1, %145
  %161 = trunc i64 %160 to i32
  %162 = xor i32 %161, %149
  %163 = lshr i32 %162, 4
  %164 = trunc i32 %163 to i8
  %165 = and i8 %164, 1
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %165, i8* %166, align 1, !tbaa !2447
  %167 = icmp eq i32 %149, 0
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %168, i8* %169, align 1, !tbaa !2448
  %170 = lshr i32 %149, 31
  %171 = trunc i32 %170 to i8
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %171, i8* %172, align 1, !tbaa !2449
  %173 = lshr i32 %148, 31
  %174 = xor i32 %170, %173
  %175 = add nuw nsw i32 %174, %173
  %176 = icmp eq i32 %175, 2
  %177 = zext i1 %176 to i8
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %177, i8* %178, align 1, !tbaa !2450
  %179 = load i32, i32* %ECX
  %180 = zext i32 %179 to i64
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 3
  store i64 %182, i64* %PC
  %183 = shl i64 %180, 32
  %184 = ashr exact i64 %183, 32
  store i64 %184, i64* %RDX, align 8, !tbaa !2428
  %185 = load i64, i64* %RDX
  %186 = mul i64 %185, 4
  %187 = add i64 %186, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 7
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %187 to i32*
  %191 = load i32, i32* %190
  %192 = zext i32 %191 to i64
  store i64 %192, i64* %RCX, align 8, !tbaa !2428
  %193 = load i64, i64* %RCX
  %194 = load i64, i64* %RBP
  %195 = sub i64 %194, 8
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 3
  store i64 %197, i64* %PC
  %198 = trunc i64 %193 to i32
  %199 = inttoptr i64 %195 to i32*
  %200 = load i32, i32* %199
  %201 = xor i32 %200, %198
  %202 = zext i32 %201 to i64
  store i64 %202, i64* %RCX, align 8, !tbaa !2428
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %203, align 1, !tbaa !2432
  %204 = and i32 %201, 255
  %205 = call i32 @llvm.ctpop.i32(i32 %204) #16
  %206 = trunc i32 %205 to i8
  %207 = and i8 %206, 1
  %208 = xor i8 %207, 1
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %208, i8* %209, align 1, !tbaa !2446
  %210 = icmp eq i32 %201, 0
  %211 = zext i1 %210 to i8
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %211, i8* %212, align 1, !tbaa !2448
  %213 = lshr i32 %201, 31
  %214 = trunc i32 %213 to i8
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %214, i8* %215, align 1, !tbaa !2449
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %216, align 1, !tbaa !2450
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %217, align 1, !tbaa !2447
  %218 = load i64, i64* %RCX
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 3
  store i64 %220, i64* %PC
  %221 = trunc i64 %218 to i32
  %222 = shl i32 %221, 1
  %223 = icmp slt i32 %221, 0
  %224 = icmp slt i32 %222, 0
  %225 = xor i1 %223, %224
  %226 = zext i32 %222 to i64
  store i64 %226, i64* %RCX, align 8, !tbaa !2428
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %228 = zext i1 %223 to i8
  store i8 %228, i8* %227, align 1, !tbaa !2451
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %230 = and i32 %222, 254
  %231 = call i32 @llvm.ctpop.i32(i32 %230) #16
  %232 = trunc i32 %231 to i8
  %233 = and i8 %232, 1
  %234 = xor i8 %233, 1
  store i8 %234, i8* %229, align 1, !tbaa !2451
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %235, align 1, !tbaa !2451
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %237 = icmp eq i32 %222, 0
  %238 = zext i1 %237 to i8
  store i8 %238, i8* %236, align 1, !tbaa !2451
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %240 = lshr i32 %222, 31
  %241 = trunc i32 %240 to i8
  store i8 %241, i8* %239, align 1, !tbaa !2451
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %243 = zext i1 %225 to i8
  store i8 %243, i8* %242, align 1, !tbaa !2451
  %244 = load i64, i64* %RAX
  %245 = load i32, i32* %ECX
  %246 = zext i32 %245 to i64
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 2
  store i64 %248, i64* %PC
  %249 = xor i64 %246, %244
  %250 = trunc i64 %249 to i32
  %251 = and i64 %249, 4294967295
  store i64 %251, i64* %RAX, align 8, !tbaa !2428
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %252, align 1, !tbaa !2432
  %253 = and i32 %250, 255
  %254 = call i32 @llvm.ctpop.i32(i32 %253) #16
  %255 = trunc i32 %254 to i8
  %256 = and i8 %255, 1
  %257 = xor i8 %256, 1
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %257, i8* %258, align 1, !tbaa !2446
  %259 = icmp eq i32 %250, 0
  %260 = zext i1 %259 to i8
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %260, i8* %261, align 1, !tbaa !2448
  %262 = lshr i32 %250, 31
  %263 = trunc i32 %262 to i8
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %263, i8* %264, align 1, !tbaa !2449
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %265, align 1, !tbaa !2450
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %266, align 1, !tbaa !2447
  %267 = load i64, i64* %RBP
  %268 = sub i64 %267, 4
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 4
  store i64 %270, i64* %PC
  %271 = inttoptr i64 %268 to i32*
  %272 = load i32, i32* %271
  %273 = sext i32 %272 to i64
  store i64 %273, i64* %RDX, align 8, !tbaa !2428
  %274 = load i64, i64* %RDX
  %275 = mul i64 %274, 4
  %276 = add i64 %275, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %277 = load i32, i32* %EAX
  %278 = zext i32 %277 to i64
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 7
  store i64 %280, i64* %PC
  %281 = inttoptr i64 %276 to i32*
  store i32 %277, i32* %281
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 35
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 5
  store i64 %285, i64* %PC
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %283, i64* %286, align 8, !tbaa !2428
  br label %block_40079b

block_40077d:                                     ; preds = %block_400735
  %287 = load i64, i64* %RBP
  %288 = sub i64 %287, 4
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 3
  store i64 %290, i64* %PC
  %291 = inttoptr i64 %288 to i32*
  %292 = load i32, i32* %291
  %293 = zext i32 %292 to i64
  store i64 %293, i64* %RAX, align 8, !tbaa !2428
  %294 = load i64, i64* %RAX
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 3
  store i64 %296, i64* %PC
  %297 = trunc i64 %294 to i32
  %298 = sub i32 %297, 1
  %299 = zext i32 %298 to i64
  store i64 %299, i64* %RAX, align 8, !tbaa !2428
  %300 = icmp ult i32 %297, 1
  %301 = zext i1 %300 to i8
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %301, i8* %302, align 1, !tbaa !2432
  %303 = and i32 %298, 255
  %304 = call i32 @llvm.ctpop.i32(i32 %303) #16
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = xor i8 %306, 1
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %307, i8* %308, align 1, !tbaa !2446
  %309 = xor i64 1, %294
  %310 = trunc i64 %309 to i32
  %311 = xor i32 %310, %298
  %312 = lshr i32 %311, 4
  %313 = trunc i32 %312 to i8
  %314 = and i8 %313, 1
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %314, i8* %315, align 1, !tbaa !2447
  %316 = icmp eq i32 %298, 0
  %317 = zext i1 %316 to i8
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %317, i8* %318, align 1, !tbaa !2448
  %319 = lshr i32 %298, 31
  %320 = trunc i32 %319 to i8
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %320, i8* %321, align 1, !tbaa !2449
  %322 = lshr i32 %297, 31
  %323 = xor i32 %319, %322
  %324 = add nuw nsw i32 %323, %322
  %325 = icmp eq i32 %324, 2
  %326 = zext i1 %325 to i8
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %326, i8* %327, align 1, !tbaa !2450
  %328 = load i32, i32* %EAX
  %329 = zext i32 %328 to i64
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = shl i64 %329, 32
  %333 = ashr exact i64 %332, 32
  store i64 %333, i64* %RCX, align 8, !tbaa !2428
  %334 = load i64, i64* %RCX
  %335 = mul i64 %334, 4
  %336 = add i64 %335, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 7
  store i64 %338, i64* %PC
  %339 = inttoptr i64 %336 to i32*
  %340 = load i32, i32* %339
  %341 = zext i32 %340 to i64
  store i64 %341, i64* %RAX, align 8, !tbaa !2428
  %342 = load i64, i64* %RAX
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 3
  store i64 %344, i64* %PC
  %345 = trunc i64 %342 to i32
  %346 = shl i32 %345, 1
  %347 = icmp slt i32 %345, 0
  %348 = icmp slt i32 %346, 0
  %349 = xor i1 %347, %348
  %350 = zext i32 %346 to i64
  store i64 %350, i64* %RAX, align 8, !tbaa !2428
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %352 = zext i1 %347 to i8
  store i8 %352, i8* %351, align 1, !tbaa !2451
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %354 = and i32 %346, 254
  %355 = call i32 @llvm.ctpop.i32(i32 %354) #16
  %356 = trunc i32 %355 to i8
  %357 = and i8 %356, 1
  %358 = xor i8 %357, 1
  store i8 %358, i8* %353, align 1, !tbaa !2451
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %359, align 1, !tbaa !2451
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %361 = icmp eq i32 %346, 0
  %362 = zext i1 %361 to i8
  store i8 %362, i8* %360, align 1, !tbaa !2451
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %364 = lshr i32 %346, 31
  %365 = trunc i32 %364 to i8
  store i8 %365, i8* %363, align 1, !tbaa !2451
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %367 = zext i1 %349 to i8
  store i8 %367, i8* %366, align 1, !tbaa !2451
  %368 = load i64, i64* %RBP
  %369 = sub i64 %368, 4
  %370 = load i64, i64* %PC
  %371 = add i64 %370, 4
  store i64 %371, i64* %PC
  %372 = inttoptr i64 %369 to i32*
  %373 = load i32, i32* %372
  %374 = sext i32 %373 to i64
  store i64 %374, i64* %RCX, align 8, !tbaa !2428
  %375 = load i64, i64* %RCX
  %376 = mul i64 %375, 4
  %377 = add i64 %376, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %378 = load i32, i32* %EAX
  %379 = zext i32 %378 to i64
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 7
  store i64 %381, i64* %PC
  %382 = inttoptr i64 %377 to i32*
  store i32 %378, i32* %382
  br label %block_40079b

block_4006ee:                                     ; preds = %block_4006a7, %block_4006dd
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_4006a7 ], [ %MEMORY.3, %block_4006dd ]
  %383 = load i64, i64* %RBP
  %384 = sub i64 %383, 8
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 3
  store i64 %386, i64* %PC
  %387 = inttoptr i64 %384 to i32*
  %388 = load i32, i32* %387
  %389 = zext i32 %388 to i64
  store i64 %389, i64* %RAX, align 8, !tbaa !2428
  %390 = load i64, i64* %RAX
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 3
  store i64 %392, i64* %PC
  %393 = trunc i64 %390 to i32
  %394 = shl i32 %393, 1
  %395 = icmp slt i32 %393, 0
  %396 = icmp slt i32 %394, 0
  %397 = xor i1 %395, %396
  %398 = zext i32 %394 to i64
  store i64 %398, i64* %RAX, align 8, !tbaa !2428
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %400 = zext i1 %395 to i8
  store i8 %400, i8* %399, align 1, !tbaa !2451
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %402 = and i32 %394, 254
  %403 = call i32 @llvm.ctpop.i32(i32 %402) #16
  %404 = trunc i32 %403 to i8
  %405 = and i8 %404, 1
  %406 = xor i8 %405, 1
  store i8 %406, i8* %401, align 1, !tbaa !2451
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %407, align 1, !tbaa !2451
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %409 = icmp eq i32 %394, 0
  %410 = zext i1 %409 to i8
  store i8 %410, i8* %408, align 1, !tbaa !2451
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %412 = lshr i32 %394, 31
  %413 = trunc i32 %412 to i8
  store i8 %413, i8* %411, align 1, !tbaa !2451
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %415 = zext i1 %397 to i8
  store i8 %415, i8* %414, align 1, !tbaa !2451
  %416 = load i64, i64* %RBP
  %417 = sub i64 %416, 8
  %418 = load i32, i32* %EAX
  %419 = zext i32 %418 to i64
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 3
  store i64 %421, i64* %PC
  %422 = inttoptr i64 %417 to i32*
  store i32 %418, i32* %422
  %423 = load i64, i64* %RBP
  %424 = sub i64 %423, 4
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 3
  store i64 %426, i64* %PC
  %427 = inttoptr i64 %424 to i32*
  %428 = load i32, i32* %427
  %429 = zext i32 %428 to i64
  store i64 %429, i64* %RAX, align 8, !tbaa !2428
  %430 = load i64, i64* %RAX
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 3
  store i64 %432, i64* %PC
  %433 = trunc i64 %430 to i32
  %434 = add i32 1, %433
  %435 = zext i32 %434 to i64
  store i64 %435, i64* %RAX, align 8, !tbaa !2428
  %436 = icmp ult i32 %434, %433
  %437 = icmp ult i32 %434, 1
  %438 = or i1 %436, %437
  %439 = zext i1 %438 to i8
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %439, i8* %440, align 1, !tbaa !2432
  %441 = and i32 %434, 255
  %442 = call i32 @llvm.ctpop.i32(i32 %441) #16
  %443 = trunc i32 %442 to i8
  %444 = and i8 %443, 1
  %445 = xor i8 %444, 1
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %445, i8* %446, align 1, !tbaa !2446
  %447 = xor i64 1, %430
  %448 = trunc i64 %447 to i32
  %449 = xor i32 %448, %434
  %450 = lshr i32 %449, 4
  %451 = trunc i32 %450 to i8
  %452 = and i8 %451, 1
  %453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %452, i8* %453, align 1, !tbaa !2447
  %454 = icmp eq i32 %434, 0
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %455, i8* %456, align 1, !tbaa !2448
  %457 = lshr i32 %434, 31
  %458 = trunc i32 %457 to i8
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %458, i8* %459, align 1, !tbaa !2449
  %460 = lshr i32 %433, 31
  %461 = xor i32 %457, %460
  %462 = add nuw nsw i32 %461, %457
  %463 = icmp eq i32 %462, 2
  %464 = zext i1 %463 to i8
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %464, i8* %465, align 1, !tbaa !2450
  %466 = load i64, i64* %RBP
  %467 = sub i64 %466, 4
  %468 = load i32, i32* %EAX
  %469 = zext i32 %468 to i64
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 3
  store i64 %471, i64* %PC
  %472 = inttoptr i64 %467 to i32*
  store i32 %468, i32* %472
  %473 = load i64, i64* %PC
  %474 = sub i64 %473, 99
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 5
  store i64 %476, i64* %PC
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %474, i64* %477, align 8, !tbaa !2428
  br label %block_40069d

block_4007bf:                                     ; preds = %block_400728
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 11
  store i64 %479, i64* %PC
  store i32 -1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056) to i32*)
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 1
  store i64 %481, i64* %PC
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %483 = load i64, i64* %482, align 8, !tbaa !2428
  %484 = add i64 %483, 8
  %485 = inttoptr i64 %483 to i64*
  %486 = load i64, i64* %485
  store i64 %486, i64* %RBP, align 8, !tbaa !2428
  store i64 %484, i64* %482, align 8, !tbaa !2428
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 1
  store i64 %488, i64* %PC
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %491 = load i64, i64* %490, align 8, !tbaa !2428
  %492 = inttoptr i64 %491 to i64*
  %493 = load i64, i64* %492
  store i64 %493, i64* %489, align 8, !tbaa !2428
  %494 = add i64 %491, 8
  store i64 %494, i64* %490, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_400735:                                     ; preds = %block_400728
  %495 = load i64, i64* %RBP
  %496 = sub i64 %495, 4
  %497 = load i64, i64* %PC
  %498 = add i64 %497, 3
  store i64 %498, i64* %PC
  %499 = inttoptr i64 %496 to i32*
  %500 = load i32, i32* %499
  %501 = zext i32 %500 to i64
  store i64 %501, i64* %RAX, align 8, !tbaa !2428
  %502 = load i64, i64* %RAX
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 3
  store i64 %504, i64* %PC
  %505 = trunc i64 %502 to i32
  %506 = sub i32 %505, 1
  %507 = zext i32 %506 to i64
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = icmp ult i32 %505, 1
  %509 = zext i1 %508 to i8
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %509, i8* %510, align 1, !tbaa !2432
  %511 = and i32 %506, 255
  %512 = call i32 @llvm.ctpop.i32(i32 %511) #16
  %513 = trunc i32 %512 to i8
  %514 = and i8 %513, 1
  %515 = xor i8 %514, 1
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %515, i8* %516, align 1, !tbaa !2446
  %517 = xor i64 1, %502
  %518 = trunc i64 %517 to i32
  %519 = xor i32 %518, %506
  %520 = lshr i32 %519, 4
  %521 = trunc i32 %520 to i8
  %522 = and i8 %521, 1
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %522, i8* %523, align 1, !tbaa !2447
  %524 = icmp eq i32 %506, 0
  %525 = zext i1 %524 to i8
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %525, i8* %526, align 1, !tbaa !2448
  %527 = lshr i32 %506, 31
  %528 = trunc i32 %527 to i8
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %528, i8* %529, align 1, !tbaa !2449
  %530 = lshr i32 %505, 31
  %531 = xor i32 %527, %530
  %532 = add nuw nsw i32 %531, %530
  %533 = icmp eq i32 %532, 2
  %534 = zext i1 %533 to i8
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %534, i8* %535, align 1, !tbaa !2450
  %536 = load i32, i32* %EAX
  %537 = zext i32 %536 to i64
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 3
  store i64 %539, i64* %PC
  %540 = shl i64 %537, 32
  %541 = ashr exact i64 %540, 32
  store i64 %541, i64* %RCX, align 8, !tbaa !2428
  %542 = load i64, i64* %RCX
  %543 = mul i64 %542, 4
  %544 = add i64 %543, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %545 = load i64, i64* %PC
  %546 = add i64 %545, 7
  store i64 %546, i64* %PC
  %547 = inttoptr i64 %544 to i32*
  %548 = load i32, i32* %547
  %549 = zext i32 %548 to i64
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i32, i32* %EAX
  %551 = zext i32 %550 to i64
  %552 = load i64, i64* %RBP
  %553 = sub i64 %552, 8
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 3
  store i64 %555, i64* %PC
  %556 = inttoptr i64 %553 to i32*
  %557 = load i32, i32* %556
  %558 = sub i32 %550, %557
  %559 = icmp ult i32 %550, %557
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %560, i8* %561, align 1, !tbaa !2432
  %562 = and i32 %558, 255
  %563 = call i32 @llvm.ctpop.i32(i32 %562) #16
  %564 = trunc i32 %563 to i8
  %565 = and i8 %564, 1
  %566 = xor i8 %565, 1
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %566, i8* %567, align 1, !tbaa !2446
  %568 = xor i32 %557, %550
  %569 = xor i32 %568, %558
  %570 = lshr i32 %569, 4
  %571 = trunc i32 %570 to i8
  %572 = and i8 %571, 1
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %572, i8* %573, align 1, !tbaa !2447
  %574 = icmp eq i32 %558, 0
  %575 = zext i1 %574 to i8
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %575, i8* %576, align 1, !tbaa !2448
  %577 = lshr i32 %558, 31
  %578 = trunc i32 %577 to i8
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %578, i8* %579, align 1, !tbaa !2449
  %580 = lshr i32 %550, 31
  %581 = lshr i32 %557, 31
  %582 = xor i32 %581, %580
  %583 = xor i32 %577, %580
  %584 = add nuw nsw i32 %583, %582
  %585 = icmp eq i32 %584, 2
  %586 = zext i1 %585 to i8
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %586, i8* %587, align 1, !tbaa !2450
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 53
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 6
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 6
  store i64 %593, i64* %PC
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %595 = load i8, i8* %594, align 1, !tbaa !2449
  %596 = icmp ne i8 %595, 0
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %598 = load i8, i8* %597, align 1, !tbaa !2450
  %599 = icmp ne i8 %598, 0
  %600 = xor i1 %596, %599
  %601 = zext i1 %600 to i8
  store i8 %601, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %603 = select i1 %600, i64 %589, i64 %591
  store i64 %603, i64* %602, align 8, !tbaa !2428
  %604 = load i8, i8* %BRANCH_TAKEN
  %605 = icmp eq i8 %604, 1
  br i1 %605, label %block_40077d, label %block_40074e

block_400728:                                     ; preds = %block_400705, %block_40079b
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.3, %block_400705 ], [ %MEMORY.0, %block_40079b ]
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 4
  %608 = load i64, i64* %PC
  %609 = add i64 %608, 7
  store i64 %609, i64* %PC
  %610 = inttoptr i64 %607 to i32*
  %611 = load i32, i32* %610
  %612 = sub i32 %611, 255
  %613 = icmp ult i32 %611, 255
  %614 = zext i1 %613 to i8
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %614, i8* %615, align 1, !tbaa !2432
  %616 = and i32 %612, 255
  %617 = call i32 @llvm.ctpop.i32(i32 %616) #16
  %618 = trunc i32 %617 to i8
  %619 = and i8 %618, 1
  %620 = xor i8 %619, 1
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %620, i8* %621, align 1, !tbaa !2446
  %622 = xor i32 %611, 255
  %623 = xor i32 %622, %612
  %624 = lshr i32 %623, 4
  %625 = trunc i32 %624 to i8
  %626 = and i8 %625, 1
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %626, i8* %627, align 1, !tbaa !2447
  %628 = icmp eq i32 %612, 0
  %629 = zext i1 %628 to i8
  %630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %629, i8* %630, align 1, !tbaa !2448
  %631 = lshr i32 %612, 31
  %632 = trunc i32 %631 to i8
  %633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %632, i8* %633, align 1, !tbaa !2449
  %634 = lshr i32 %611, 31
  %635 = xor i32 %631, %634
  %636 = add nuw nsw i32 %635, %634
  %637 = icmp eq i32 %636, 2
  %638 = zext i1 %637 to i8
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %638, i8* %639, align 1, !tbaa !2450
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 144
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 6
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 6
  store i64 %645, i64* %PC
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %647 = load i8, i8* %646, align 1, !tbaa !2449
  %648 = icmp ne i8 %647, 0
  %649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %650 = load i8, i8* %649, align 1, !tbaa !2450
  %651 = icmp ne i8 %650, 0
  %652 = xor i1 %648, %651
  %653 = xor i1 %652, true
  %654 = zext i1 %653 to i8
  store i8 %654, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %656 = select i1 %652, i64 %643, i64 %641
  store i64 %656, i64* %655, align 8, !tbaa !2428
  %657 = load i8, i8* %BRANCH_TAKEN
  %658 = icmp eq i8 %657, 1
  br i1 %658, label %block_4007bf, label %block_400735

block_40069d:                                     ; preds = %block_4006ee, %block_400680
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_400680 ], [ %MEMORY.1, %block_4006ee ]
  %659 = load i64, i64* %RBP
  %660 = sub i64 %659, 4
  %661 = load i64, i64* %PC
  %662 = add i64 %661, 4
  store i64 %662, i64* %PC
  %663 = inttoptr i64 %660 to i32*
  %664 = load i32, i32* %663
  %665 = sub i32 %664, 8
  %666 = icmp ult i32 %664, 8
  %667 = zext i1 %666 to i8
  %668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %667, i8* %668, align 1, !tbaa !2432
  %669 = and i32 %665, 255
  %670 = call i32 @llvm.ctpop.i32(i32 %669) #16
  %671 = trunc i32 %670 to i8
  %672 = and i8 %671, 1
  %673 = xor i8 %672, 1
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %673, i8* %674, align 1, !tbaa !2446
  %675 = xor i32 %664, 8
  %676 = xor i32 %675, %665
  %677 = lshr i32 %676, 4
  %678 = trunc i32 %677 to i8
  %679 = and i8 %678, 1
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %679, i8* %680, align 1, !tbaa !2447
  %681 = icmp eq i32 %665, 0
  %682 = zext i1 %681 to i8
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %682, i8* %683, align 1, !tbaa !2448
  %684 = lshr i32 %665, 31
  %685 = trunc i32 %684 to i8
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %685, i8* %686, align 1, !tbaa !2449
  %687 = lshr i32 %664, 31
  %688 = xor i32 %684, %687
  %689 = add nuw nsw i32 %688, %687
  %690 = icmp eq i32 %689, 2
  %691 = zext i1 %690 to i8
  %692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %691, i8* %692, align 1, !tbaa !2450
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 100
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 6
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 6
  store i64 %698, i64* %PC
  %699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %700 = load i8, i8* %699, align 1, !tbaa !2449
  %701 = icmp ne i8 %700, 0
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %703 = load i8, i8* %702, align 1, !tbaa !2450
  %704 = icmp ne i8 %703, 0
  %705 = xor i1 %701, %704
  %706 = xor i1 %705, true
  %707 = zext i1 %706 to i8
  store i8 %707, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %709 = select i1 %705, i64 %696, i64 %694
  store i64 %709, i64* %708, align 8, !tbaa !2428
  %710 = load i8, i8* %BRANCH_TAKEN
  %711 = icmp eq i8 %710, 1
  br i1 %711, label %block_400705, label %block_4006a7

block_400705:                                     ; preds = %block_40069d
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 8
  store i64 %713, i64* %PC
  %714 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2112) to i32*)
  %715 = sext i32 %714 to i64
  store i64 %715, i64* %RAX, align 8, !tbaa !2428
  %716 = load i64, i64* %RAX
  %717 = mul i64 %716, 4
  %718 = add i64 %717, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %719 = load i64, i64* %PC
  %720 = add i64 %719, 11
  store i64 %720, i64* %PC
  %721 = inttoptr i64 %718 to i32*
  store i32 8, i32* %721
  %722 = load i64, i64* %RBP
  %723 = sub i64 %722, 8
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 3
  store i64 %725, i64* %PC
  %726 = inttoptr i64 %723 to i32*
  %727 = load i32, i32* %726
  %728 = zext i32 %727 to i64
  store i64 %728, i64* %RCX, align 8, !tbaa !2428
  %729 = load i64, i64* %RCX
  %730 = load i64, i64* %PC
  %731 = add i64 %730, 3
  store i64 %731, i64* %PC
  %732 = shl i64 %729, 32
  %733 = ashr i64 %732, 33
  %734 = trunc i64 %729 to i8
  %735 = and i8 %734, 1
  %736 = trunc i64 %733 to i32
  %737 = and i64 %733, 4294967295
  store i64 %737, i64* %RCX, align 8, !tbaa !2428
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %735, i8* %738, align 1, !tbaa !2451
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %740 = and i32 %736, 255
  %741 = call i32 @llvm.ctpop.i32(i32 %740) #16
  %742 = trunc i32 %741 to i8
  %743 = and i8 %742, 1
  %744 = xor i8 %743, 1
  store i8 %744, i8* %739, align 1, !tbaa !2451
  %745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %745, align 1, !tbaa !2451
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %747 = icmp eq i32 %736, 0
  %748 = zext i1 %747 to i8
  store i8 %748, i8* %746, align 1, !tbaa !2451
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %750 = lshr i32 %736, 31
  %751 = trunc i32 %750 to i8
  store i8 %751, i8* %749, align 1, !tbaa !2451
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %752, align 1, !tbaa !2451
  %753 = load i64, i64* %RBP
  %754 = sub i64 %753, 8
  %755 = load i32, i32* %ECX
  %756 = zext i32 %755 to i64
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 3
  store i64 %758, i64* %PC
  %759 = inttoptr i64 %754 to i32*
  store i32 %755, i32* %759
  %760 = load i64, i64* %RBP
  %761 = sub i64 %760, 4
  %762 = load i64, i64* %PC
  %763 = add i64 %762, 7
  store i64 %763, i64* %PC
  %764 = inttoptr i64 %761 to i32*
  store i32 9, i32* %764
  br label %block_400728

block_4006dd:                                     ; preds = %block_4006a7
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 8
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 3
  store i64 %768, i64* %PC
  %769 = inttoptr i64 %766 to i32*
  %770 = load i32, i32* %769
  %771 = zext i32 %770 to i64
  store i64 %771, i64* %RAX, align 8, !tbaa !2428
  %772 = load i64, i64* %RAX
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 7
  store i64 %774, i64* %PC
  %775 = trunc i64 %772 to i32
  %776 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2112) to i32*)
  %777 = xor i32 %776, %775
  %778 = zext i32 %777 to i64
  store i64 %778, i64* %RAX, align 8, !tbaa !2428
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %779, align 1, !tbaa !2432
  %780 = and i32 %777, 255
  %781 = call i32 @llvm.ctpop.i32(i32 %780) #16
  %782 = trunc i32 %781 to i8
  %783 = and i8 %782, 1
  %784 = xor i8 %783, 1
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %784, i8* %785, align 1, !tbaa !2446
  %786 = icmp eq i32 %777, 0
  %787 = zext i1 %786 to i8
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %787, i8* %788, align 1, !tbaa !2448
  %789 = lshr i32 %777, 31
  %790 = trunc i32 %789 to i8
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %790, i8* %791, align 1, !tbaa !2449
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %792, align 1, !tbaa !2450
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %793, align 1, !tbaa !2447
  %794 = load i32, i32* %EAX
  %795 = zext i32 %794 to i64
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 7
  store i64 %797, i64* %PC
  store i32 %794, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2112) to i32*)
  br label %block_4006ee

block_4006a7:                                     ; preds = %block_40069d
  %798 = load i64, i64* %RBP
  %799 = sub i64 %798, 8
  %800 = load i64, i64* %PC
  %801 = add i64 %800, 3
  store i64 %801, i64* %PC
  %802 = inttoptr i64 %799 to i32*
  %803 = load i32, i32* %802
  %804 = zext i32 %803 to i64
  store i64 %804, i64* %RAX, align 8, !tbaa !2428
  %805 = load i64, i64* %RBP
  %806 = sub i64 %805, 4
  %807 = load i64, i64* %PC
  %808 = add i64 %807, 4
  store i64 %808, i64* %PC
  %809 = inttoptr i64 %806 to i32*
  %810 = load i32, i32* %809
  %811 = sext i32 %810 to i64
  store i64 %811, i64* %RCX, align 8, !tbaa !2428
  %812 = load i64, i64* %RCX
  %813 = mul i64 %812, 4
  %814 = add i64 %813, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %815 = load i32, i32* %EAX
  %816 = zext i32 %815 to i64
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 7
  store i64 %818, i64* %PC
  %819 = inttoptr i64 %814 to i32*
  store i32 %815, i32* %819
  %820 = load i64, i64* %RBP
  %821 = sub i64 %820, 4
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 3
  store i64 %823, i64* %PC
  %824 = inttoptr i64 %821 to i32*
  %825 = load i32, i32* %824
  %826 = zext i32 %825 to i64
  store i64 %826, i64* %RAX, align 8, !tbaa !2428
  %827 = load i64, i64* %RBP
  %828 = sub i64 %827, 4
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 4
  store i64 %830, i64* %PC
  %831 = inttoptr i64 %828 to i32*
  %832 = load i32, i32* %831
  %833 = sext i32 %832 to i64
  store i64 %833, i64* %RCX, align 8, !tbaa !2428
  %834 = load i64, i64* %RCX
  %835 = mul i64 %834, 4
  %836 = add i64 %835, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 8
  store i64 %838, i64* %PC
  %839 = inttoptr i64 %836 to i32*
  %840 = load i32, i32* %839
  %841 = sext i32 %840 to i64
  store i64 %841, i64* %RCX, align 8, !tbaa !2428
  %842 = load i64, i64* %RCX
  %843 = mul i64 %842, 4
  %844 = add i64 %843, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %845 = load i32, i32* %EAX
  %846 = zext i32 %845 to i64
  %847 = load i64, i64* %PC
  %848 = add i64 %847, 7
  store i64 %848, i64* %PC
  %849 = inttoptr i64 %844 to i32*
  store i32 %845, i32* %849
  %850 = load i64, i64* %RBP
  %851 = sub i64 %850, 4
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 4
  store i64 %853, i64* %PC
  %854 = inttoptr i64 %851 to i32*
  %855 = load i32, i32* %854
  %856 = sext i32 %855 to i64
  store i64 %856, i64* %RCX, align 8, !tbaa !2428
  %857 = load i64, i64* %RCX
  %858 = mul i64 %857, 4
  %859 = add i64 %858, add (i64 ptrtoint (%seg_603020__data_type* @seg_603020__data to i64), i64 16)
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 8
  store i64 %861, i64* %PC
  %862 = inttoptr i64 %859 to i32*
  %863 = load i32, i32* %862
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %864, align 1, !tbaa !2432
  %865 = and i32 %863, 255
  %866 = call i32 @llvm.ctpop.i32(i32 %865) #16
  %867 = trunc i32 %866 to i8
  %868 = and i8 %867, 1
  %869 = xor i8 %868, 1
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %869, i8* %870, align 1, !tbaa !2446
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %871, align 1, !tbaa !2447
  %872 = icmp eq i32 %863, 0
  %873 = zext i1 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %873, i8* %874, align 1, !tbaa !2448
  %875 = lshr i32 %863, 31
  %876 = trunc i32 %875 to i8
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %876, i8* %877, align 1, !tbaa !2449
  %878 = lshr i32 %863, 31
  %879 = xor i32 %875, %878
  %880 = add nuw nsw i32 %879, %878
  %881 = icmp eq i32 %880, 2
  %882 = zext i1 %881 to i8
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %882, i8* %883, align 1, !tbaa !2450
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 23
  %886 = load i64, i64* %PC
  %887 = add i64 %886, 6
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 6
  store i64 %889, i64* %PC
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %891 = load i8, i8* %890, align 1, !tbaa !2448
  store i8 %891, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %893 = icmp ne i8 %891, 0
  %894 = select i1 %893, i64 %885, i64 %887
  store i64 %894, i64* %892, align 8, !tbaa !2428
  %895 = load i8, i8* %BRANCH_TAKEN
  %896 = icmp eq i8 %895, 1
  br i1 %896, label %block_4006ee, label %block_4006dd
}

; Function Attrs: noinline
define %struct.Memory* @sub_400460_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400460:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 6303832, i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, 6303832
  %37 = icmp ult i64 %33, 6303832
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 6303832, %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %33, 63
  %60 = xor i64 %56, %59
  %61 = add nuw nsw i64 %60, %59
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %63, i8* %64, align 1, !tbaa !2450
  %65 = load i64, i64* %RSP
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %RBP, align 8, !tbaa !2428
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 25
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_400488, label %block_400471

block_40047b:                                     ; preds = %block_400471
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  store i64 6303832, i64* %RDI, align 8, !tbaa !2428
  %90 = load i64, i64* %RAX
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 2
  store i64 %92, i64* %PC
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %90, i64* %93, align 8, !tbaa !2428
  %94 = load i64, i64* %PC
  switch i64 %94, label %162 [
    i64 4195466, label %block_40048a
    i64 4195459, label %block_400483
  ]

block_400471:                                     ; preds = %block_400460
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 5
  store i64 %96, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 3
  store i64 %100, i64* %PC
  %101 = and i64 %98, %97
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %102, align 1, !tbaa !2432
  %103 = trunc i64 %101 to i32
  %104 = and i32 %103, 255
  %105 = call i32 @llvm.ctpop.i32(i32 %104) #16
  %106 = trunc i32 %105 to i8
  %107 = and i8 %106, 1
  %108 = xor i8 %107, 1
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %108, i8* %109, align 1, !tbaa !2446
  %110 = icmp eq i64 %101, 0
  %111 = zext i1 %110 to i8
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %111, i8* %112, align 1, !tbaa !2448
  %113 = lshr i64 %101, 63
  %114 = trunc i64 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %114, i8* %115, align 1, !tbaa !2449
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %116, align 1, !tbaa !2450
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %117, align 1, !tbaa !2447
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 15
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 2
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 2
  store i64 %123, i64* %PC
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %125 = load i8, i8* %124, align 1, !tbaa !2448
  store i8 %125, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %127 = icmp ne i8 %125, 0
  %128 = select i1 %127, i64 %119, i64 %121
  store i64 %128, i64* %126, align 8, !tbaa !2428
  %129 = load i8, i8* %BRANCH_TAKEN
  %130 = icmp eq i8 %129, 1
  br i1 %130, label %block_400488, label %block_40047b

block_400488:                                     ; preds = %block_400483, %block_400471, %block_400460
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400460 ], [ %2, %block_400471 ], [ %2, %block_400483 ]
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 1
  store i64 %132, i64* %PC
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %134 = load i64, i64* %133, align 8, !tbaa !2428
  %135 = add i64 %134, 8
  %136 = inttoptr i64 %134 to i64*
  %137 = load i64, i64* %136
  store i64 %137, i64* %RBP, align 8, !tbaa !2428
  store i64 %135, i64* %133, align 8, !tbaa !2428
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 1
  store i64 %139, i64* %PC
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %142 = load i64, i64* %141, align 8, !tbaa !2428
  %143 = inttoptr i64 %142 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %140, align 8, !tbaa !2428
  %145 = add i64 %142, 8
  store i64 %145, i64* %141, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40048a:                                     ; preds = %block_40047b
  %146 = load i64, i64* %RAX
  %147 = load i64, i64* %RAX
  %148 = add i64 %147, %146
  %149 = load i16, i16* %AX
  %150 = zext i16 %149 to i64
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 6
  store i64 %152, i64* %PC
  %153 = load i64, i64* %PC
  %154 = tail call %struct.Memory* @sub_400490_register_tm_clones(%struct.State* %0, i64 %153, %struct.Memory* %2)
  ret %struct.Memory* %154

block_400483:                                     ; preds = %block_40047b
  %155 = load i64, i64* %RAX
  %156 = load i64, i64* %RAX
  %157 = add i64 %156, %155
  %158 = load i32, i32* %EAX
  %159 = zext i32 %158 to i64
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 5
  store i64 %161, i64* %PC
  br label %block_400488

; <label>:162:                                    ; preds = %block_40047b
  %163 = load i64, i64* %PC
  %164 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %163, %struct.Memory* %2)
  ret %struct.Memory* %164
}

; Function Attrs: noinline
define %struct.Memory* @sub_401cd0___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401cd0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007d0_gen_poly(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4007d0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = load i64, i64* %RBP
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 1
  store i64 %41, i64* %PC
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %43 = load i64, i64* %42, align 8, !tbaa !2428
  %44 = add i64 %43, -8
  %45 = inttoptr i64 %44 to i64*
  store i64 %39, i64* %45
  store i64 %44, i64* %42, align 8, !tbaa !2428
  %46 = load i64, i64* %RSP
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 3
  store i64 %48, i64* %PC
  store i64 %46, i64* %RBP, align 8, !tbaa !2428
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 11
  store i64 %50, i64* %PC
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104) to i32*)
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 11
  store i64 %52, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3108) to i32*)
  %53 = load i64, i64* %RBP
  %54 = sub i64 %53, 4
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 7
  store i64 %56, i64* %PC
  %57 = inttoptr i64 %54 to i32*
  store i32 2, i32* %57
  br label %block_4007f1

block_40089a:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1, %block_40087f
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_40087f ], [ %538, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ]
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 5
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 5
  store i64 %61, i64* %PC
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %59, i64* %62, align 8, !tbaa !2428
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 3
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i32*
  %68 = load i32, i32* %67
  %69 = zext i32 %68 to i64
  store i64 %69, i64* %RAX, align 8, !tbaa !2428
  %70 = load i64, i64* %RAX
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 3
  store i64 %72, i64* %PC
  %73 = trunc i64 %70 to i32
  %74 = add i32 -1, %73
  %75 = zext i32 %74 to i64
  store i64 %75, i64* %RAX, align 8, !tbaa !2428
  %76 = icmp ult i32 %74, %73
  %77 = icmp ult i32 %74, -1
  %78 = or i1 %76, %77
  %79 = zext i1 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %79, i8* %80, align 1, !tbaa !2432
  %81 = and i32 %74, 255
  %82 = call i32 @llvm.ctpop.i32(i32 %81) #16
  %83 = trunc i32 %82 to i8
  %84 = and i8 %83, 1
  %85 = xor i8 %84, 1
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %85, i8* %86, align 1, !tbaa !2446
  %87 = xor i64 -1, %70
  %88 = trunc i64 %87 to i32
  %89 = xor i32 %88, %74
  %90 = lshr i32 %89, 4
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %92, i8* %93, align 1, !tbaa !2447
  %94 = icmp eq i32 %74, 0
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %95, i8* %96, align 1, !tbaa !2448
  %97 = lshr i32 %74, 31
  %98 = trunc i32 %97 to i8
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %98, i8* %99, align 1, !tbaa !2449
  %100 = lshr i32 %73, 31
  %101 = xor i32 %97, %100
  %102 = xor i32 %97, 1
  %103 = add nuw nsw i32 %101, %102
  %104 = icmp eq i32 %103, 2
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %105, i8* %106, align 1, !tbaa !2450
  %107 = load i64, i64* %RBP
  %108 = sub i64 %107, 8
  %109 = load i32, i32* %EAX
  %110 = zext i32 %109 to i64
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = inttoptr i64 %108 to i32*
  store i32 %109, i32* %113
  %114 = load i64, i64* %PC
  %115 = sub i64 %114, 149
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 5
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %115, i64* %118, align 8, !tbaa !2428
  br label %block_400813

block_4008f5:                                     ; preds = %block_4008ee, %block_4008ff
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_4008ee ], [ %MEMORY.1, %block_4008ff ]
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 4
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %120 to i32*
  %124 = load i32, i32* %123
  %125 = sub i32 %124, 16
  %126 = icmp ult i32 %124, 16
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2432
  %129 = and i32 %125, 255
  %130 = call i32 @llvm.ctpop.i32(i32 %129) #16
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %133, i8* %134, align 1, !tbaa !2446
  %135 = xor i32 %124, 16
  %136 = xor i32 %135, %125
  %137 = lshr i32 %136, 4
  %138 = trunc i32 %137 to i8
  %139 = and i8 %138, 1
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %139, i8* %140, align 1, !tbaa !2447
  %141 = icmp eq i32 %125, 0
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %142, i8* %143, align 1, !tbaa !2448
  %144 = lshr i32 %125, 31
  %145 = trunc i32 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %145, i8* %146, align 1, !tbaa !2449
  %147 = lshr i32 %124, 31
  %148 = xor i32 %144, %147
  %149 = add nuw nsw i32 %148, %147
  %150 = icmp eq i32 %149, 2
  %151 = zext i1 %150 to i8
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %151, i8* %152, align 1, !tbaa !2450
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 50
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 6
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 6
  store i64 %158, i64* %PC
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %160 = load i8, i8* %159, align 1, !tbaa !2448
  %161 = icmp eq i8 %160, 0
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %163 = load i8, i8* %162, align 1, !tbaa !2449
  %164 = icmp ne i8 %163, 0
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %166 = load i8, i8* %165, align 1, !tbaa !2450
  %167 = icmp ne i8 %166, 0
  %168 = xor i1 %164, %167
  %169 = xor i1 %168, true
  %170 = and i1 %161, %169
  %171 = zext i1 %170 to i8
  store i8 %171, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %173 = select i1 %170, i64 %154, i64 %156
  store i64 %173, i64* %172, align 8, !tbaa !2428
  %174 = load i8, i8* %BRANCH_TAKEN
  %175 = icmp eq i8 %174, 1
  br i1 %175, label %block_40092b, label %block_4008ff

block_40087f:                                     ; preds = %block_40081d
  %176 = load i64, i64* %RBP
  %177 = sub i64 %176, 8
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 3
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %177 to i32*
  %181 = load i32, i32* %180
  %182 = zext i32 %181 to i64
  store i64 %182, i64* %RAX, align 8, !tbaa !2428
  %183 = load i64, i64* %RAX
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 3
  store i64 %185, i64* %PC
  %186 = trunc i64 %183 to i32
  %187 = sub i32 %186, 1
  %188 = zext i32 %187 to i64
  store i64 %188, i64* %RAX, align 8, !tbaa !2428
  %189 = icmp ult i32 %186, 1
  %190 = zext i1 %189 to i8
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %190, i8* %191, align 1, !tbaa !2432
  %192 = and i32 %187, 255
  %193 = call i32 @llvm.ctpop.i32(i32 %192) #16
  %194 = trunc i32 %193 to i8
  %195 = and i8 %194, 1
  %196 = xor i8 %195, 1
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %196, i8* %197, align 1, !tbaa !2446
  %198 = xor i64 1, %183
  %199 = trunc i64 %198 to i32
  %200 = xor i32 %199, %187
  %201 = lshr i32 %200, 4
  %202 = trunc i32 %201 to i8
  %203 = and i8 %202, 1
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %203, i8* %204, align 1, !tbaa !2447
  %205 = icmp eq i32 %187, 0
  %206 = zext i1 %205 to i8
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %206, i8* %207, align 1, !tbaa !2448
  %208 = lshr i32 %187, 31
  %209 = trunc i32 %208 to i8
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %209, i8* %210, align 1, !tbaa !2449
  %211 = lshr i32 %186, 31
  %212 = xor i32 %208, %211
  %213 = add nuw nsw i32 %212, %211
  %214 = icmp eq i32 %213, 2
  %215 = zext i1 %214 to i8
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %215, i8* %216, align 1, !tbaa !2450
  %217 = load i32, i32* %EAX
  %218 = zext i32 %217 to i64
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 3
  store i64 %220, i64* %PC
  %221 = shl i64 %218, 32
  %222 = ashr exact i64 %221, 32
  store i64 %222, i64* %RCX, align 8, !tbaa !2428
  %223 = load i64, i64* %RCX
  %224 = mul i64 %223, 4
  %225 = add i64 %224, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 7
  store i64 %227, i64* %PC
  %228 = inttoptr i64 %225 to i32*
  %229 = load i32, i32* %228
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = load i64, i64* %RBP
  %232 = sub i64 %231, 8
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i32*
  %236 = load i32, i32* %235
  %237 = sext i32 %236 to i64
  store i64 %237, i64* %RCX, align 8, !tbaa !2428
  %238 = load i64, i64* %RCX
  %239 = mul i64 %238, 4
  %240 = add i64 %239, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %241 = load i32, i32* %EAX
  %242 = zext i32 %241 to i64
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 7
  store i64 %244, i64* %PC
  %245 = inttoptr i64 %240 to i32*
  store i32 %241, i32* %245
  br label %block_40089a

block_400813:                                     ; preds = %block_4007fb, %block_40089a
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.3, %block_4007fb ], [ %MEMORY.0, %block_40089a ]
  %246 = load i64, i64* %RBP
  %247 = sub i64 %246, 8
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 4
  store i64 %249, i64* %PC
  %250 = inttoptr i64 %247 to i32*
  %251 = load i32, i32* %250
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %252, align 1, !tbaa !2432
  %253 = and i32 %251, 255
  %254 = call i32 @llvm.ctpop.i32(i32 %253) #16
  %255 = trunc i32 %254 to i8
  %256 = and i8 %255, 1
  %257 = xor i8 %256, 1
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %257, i8* %258, align 1, !tbaa !2446
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %259, align 1, !tbaa !2447
  %260 = icmp eq i32 %251, 0
  %261 = zext i1 %260 to i8
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %261, i8* %262, align 1, !tbaa !2448
  %263 = lshr i32 %251, 31
  %264 = trunc i32 %263 to i8
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %264, i8* %265, align 1, !tbaa !2449
  %266 = lshr i32 %251, 31
  %267 = xor i32 %263, %266
  %268 = add nuw nsw i32 %267, %266
  %269 = icmp eq i32 %268, 2
  %270 = zext i1 %269 to i8
  %271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %270, i8* %271, align 1, !tbaa !2450
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 150
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 6
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 6
  store i64 %277, i64* %PC
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %279 = load i8, i8* %278, align 1, !tbaa !2448
  %280 = icmp ne i8 %279, 0
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %282 = load i8, i8* %281, align 1, !tbaa !2449
  %283 = icmp ne i8 %282, 0
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %285 = load i8, i8* %284, align 1, !tbaa !2450
  %286 = icmp ne i8 %285, 0
  %287 = xor i1 %283, %286
  %288 = or i1 %280, %287
  %289 = zext i1 %288 to i8
  store i8 %289, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %291 = select i1 %288, i64 %273, i64 %275
  store i64 %291, i64* %290, align 8, !tbaa !2428
  %292 = load i8, i8* %BRANCH_TAKEN
  %293 = icmp eq i8 %292, 1
  br i1 %293, label %block_4008ad, label %block_40081d

block_4007f1:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_4007d0
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_4007d0 ], [ %804, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %294 = load i64, i64* %RBP
  %295 = sub i64 %294, 4
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %295 to i32*
  %299 = load i32, i32* %298
  %300 = sub i32 %299, 16
  %301 = icmp ult i32 %299, 16
  %302 = zext i1 %301 to i8
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %302, i8* %303, align 1, !tbaa !2432
  %304 = and i32 %300, 255
  %305 = call i32 @llvm.ctpop.i32(i32 %304) #16
  %306 = trunc i32 %305 to i8
  %307 = and i8 %306, 1
  %308 = xor i8 %307, 1
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %308, i8* %309, align 1, !tbaa !2446
  %310 = xor i32 %299, 16
  %311 = xor i32 %310, %300
  %312 = lshr i32 %311, 4
  %313 = trunc i32 %312 to i8
  %314 = and i8 %313, 1
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %314, i8* %315, align 1, !tbaa !2447
  %316 = icmp eq i32 %300, 0
  %317 = zext i1 %316 to i8
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %317, i8* %318, align 1, !tbaa !2448
  %319 = lshr i32 %300, 31
  %320 = trunc i32 %319 to i8
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %320, i8* %321, align 1, !tbaa !2449
  %322 = lshr i32 %299, 31
  %323 = xor i32 %319, %322
  %324 = add nuw nsw i32 %323, %322
  %325 = icmp eq i32 %324, 2
  %326 = zext i1 %325 to i8
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %326, i8* %327, align 1, !tbaa !2450
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 249
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 6
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 6
  store i64 %333, i64* %PC
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %335 = load i8, i8* %334, align 1, !tbaa !2448
  %336 = icmp eq i8 %335, 0
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %338 = load i8, i8* %337, align 1, !tbaa !2449
  %339 = icmp ne i8 %338, 0
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %341 = load i8, i8* %340, align 1, !tbaa !2450
  %342 = icmp ne i8 %341, 0
  %343 = xor i1 %339, %342
  %344 = xor i1 %343, true
  %345 = and i1 %336, %344
  %346 = zext i1 %345 to i8
  store i8 %346, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %348 = select i1 %345, i64 %329, i64 %331
  store i64 %348, i64* %347, align 8, !tbaa !2428
  %349 = load i8, i8* %BRANCH_TAKEN
  %350 = icmp eq i8 %349, 1
  %351 = load i64, i64* %RBP
  %352 = sub i64 %351, 4
  %353 = load i64, i64* %PC
  br i1 %350, label %block_4008ee, label %block_4007fb

block_40082f:                                     ; preds = %block_40081d
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 5
  store i64 %355, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %356 = load i64, i64* %RBP
  %357 = sub i64 %356, 8
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 3
  store i64 %359, i64* %PC
  %360 = inttoptr i64 %357 to i32*
  %361 = load i32, i32* %360
  %362 = zext i32 %361 to i64
  store i64 %362, i64* %RCX, align 8, !tbaa !2428
  %363 = load i64, i64* %RCX
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  %366 = trunc i64 %363 to i32
  %367 = sub i32 %366, 1
  %368 = zext i32 %367 to i64
  store i64 %368, i64* %RCX, align 8, !tbaa !2428
  %369 = icmp ult i32 %366, 1
  %370 = zext i1 %369 to i8
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %370, i8* %371, align 1, !tbaa !2432
  %372 = and i32 %367, 255
  %373 = call i32 @llvm.ctpop.i32(i32 %372) #16
  %374 = trunc i32 %373 to i8
  %375 = and i8 %374, 1
  %376 = xor i8 %375, 1
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %376, i8* %377, align 1, !tbaa !2446
  %378 = xor i64 1, %363
  %379 = trunc i64 %378 to i32
  %380 = xor i32 %379, %367
  %381 = lshr i32 %380, 4
  %382 = trunc i32 %381 to i8
  %383 = and i8 %382, 1
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %383, i8* %384, align 1, !tbaa !2447
  %385 = icmp eq i32 %367, 0
  %386 = zext i1 %385 to i8
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %386, i8* %387, align 1, !tbaa !2448
  %388 = lshr i32 %367, 31
  %389 = trunc i32 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %389, i8* %390, align 1, !tbaa !2449
  %391 = lshr i32 %366, 31
  %392 = xor i32 %388, %391
  %393 = add nuw nsw i32 %392, %391
  %394 = icmp eq i32 %393, 2
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %395, i8* %396, align 1, !tbaa !2450
  %397 = load i32, i32* %ECX
  %398 = zext i32 %397 to i64
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 3
  store i64 %400, i64* %PC
  %401 = shl i64 %398, 32
  %402 = ashr exact i64 %401, 32
  store i64 %402, i64* %RDX, align 8, !tbaa !2428
  %403 = load i64, i64* %RDX
  %404 = mul i64 %403, 4
  %405 = add i64 %404, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 7
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i32*
  %409 = load i32, i32* %408
  %410 = zext i32 %409 to i64
  store i64 %410, i64* %RCX, align 8, !tbaa !2428
  %411 = load i64, i64* %RBP
  %412 = sub i64 %411, 8
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %412 to i32*
  %416 = load i32, i32* %415
  %417 = sext i32 %416 to i64
  store i64 %417, i64* %RDX, align 8, !tbaa !2428
  %418 = load i64, i64* %RDX
  %419 = mul i64 %418, 4
  %420 = add i64 %419, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 8
  store i64 %422, i64* %PC
  %423 = inttoptr i64 %420 to i32*
  %424 = load i32, i32* %423
  %425 = sext i32 %424 to i64
  store i64 %425, i64* %RDX, align 8, !tbaa !2428
  %426 = load i64, i64* %RDX
  %427 = mul i64 %426, 4
  %428 = add i64 %427, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 7
  store i64 %430, i64* %PC
  %431 = inttoptr i64 %428 to i32*
  %432 = load i32, i32* %431
  %433 = zext i32 %432 to i64
  store i64 %433, i64* %RSI, align 8, !tbaa !2428
  %434 = load i64, i64* %RSI
  %435 = load i64, i64* %RBP
  %436 = sub i64 %435, 4
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 3
  store i64 %438, i64* %PC
  %439 = trunc i64 %434 to i32
  %440 = inttoptr i64 %436 to i32*
  %441 = load i32, i32* %440
  %442 = add i32 %441, %439
  %443 = zext i32 %442 to i64
  store i64 %443, i64* %RSI, align 8, !tbaa !2428
  %444 = icmp ult i32 %442, %439
  %445 = icmp ult i32 %442, %441
  %446 = or i1 %444, %445
  %447 = zext i1 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %447, i8* %448, align 1, !tbaa !2432
  %449 = and i32 %442, 255
  %450 = call i32 @llvm.ctpop.i32(i32 %449) #16
  %451 = trunc i32 %450 to i8
  %452 = and i8 %451, 1
  %453 = xor i8 %452, 1
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %453, i8* %454, align 1, !tbaa !2446
  %455 = xor i32 %441, %439
  %456 = xor i32 %455, %442
  %457 = lshr i32 %456, 4
  %458 = trunc i32 %457 to i8
  %459 = and i8 %458, 1
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %459, i8* %460, align 1, !tbaa !2447
  %461 = icmp eq i32 %442, 0
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %462, i8* %463, align 1, !tbaa !2448
  %464 = lshr i32 %442, 31
  %465 = trunc i32 %464 to i8
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %465, i8* %466, align 1, !tbaa !2449
  %467 = lshr i32 %439, 31
  %468 = lshr i32 %441, 31
  %469 = xor i32 %464, %467
  %470 = xor i32 %464, %468
  %471 = add nuw nsw i32 %469, %470
  %472 = icmp eq i32 %471, 2
  %473 = zext i1 %472 to i8
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %473, i8* %474, align 1, !tbaa !2450
  %475 = load i64, i64* %RBP
  %476 = sub i64 %475, 12
  %477 = load i32, i32* %EAX
  %478 = zext i32 %477 to i64
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 3
  store i64 %480, i64* %PC
  %481 = inttoptr i64 %476 to i32*
  store i32 %477, i32* %481
  %482 = load i32, i32* %ESI
  %483 = zext i32 %482 to i64
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 2
  store i64 %485, i64* %PC
  %486 = and i64 %483, 4294967295
  store i64 %486, i64* %RAX, align 8, !tbaa !2428
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 1
  store i64 %488, i64* %PC
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %491 = bitcast %union.anon* %490 to i32*
  %492 = load i32, i32* %491, align 8, !tbaa !2452
  %493 = sext i32 %492 to i64
  %494 = lshr i64 %493, 32
  store i64 %494, i64* %489, align 8, !tbaa !2428
  %495 = load i64, i64* %RBP
  %496 = sub i64 %495, 12
  %497 = load i64, i64* %PC
  %498 = add i64 %497, 3
  store i64 %498, i64* %PC
  %499 = inttoptr i64 %496 to i32*
  %500 = load i32, i32* %499
  %501 = zext i32 %500 to i64
  store i64 %501, i64* %RSI, align 8, !tbaa !2428
  %502 = load i32, i32* %ESI
  %503 = zext i32 %502 to i64
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 2
  store i64 %505, i64* %PC
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %507 = bitcast %union.anon* %506 to i32*
  %508 = load i32, i32* %507, align 8, !tbaa !2452
  %509 = zext i32 %508 to i64
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %511 = bitcast %union.anon* %510 to i32*
  %512 = load i32, i32* %511, align 8, !tbaa !2452
  %513 = zext i32 %512 to i64
  %514 = shl i64 %503, 32
  %515 = ashr exact i64 %514, 32
  %516 = shl nuw i64 %513, 32
  %517 = or i64 %516, %509
  %518 = sdiv i64 %517, %515
  %519 = shl i64 %518, 32
  %520 = ashr exact i64 %519, 32
  %521 = icmp eq i64 %518, %520
  br i1 %521, label %526, label %522

; <label>:522:                                    ; preds = %block_40082f
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %524 = load i64, i64* %523, align 8, !tbaa !2428
  %525 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %524, %struct.Memory* %MEMORY.2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:526:                                    ; preds = %block_40082f
  %527 = srem i64 %517, %515
  %528 = getelementptr inbounds %union.anon, %union.anon* %506, i64 0, i32 0
  %529 = and i64 %518, 4294967295
  store i64 %529, i64* %528, align 8, !tbaa !2428
  %530 = getelementptr inbounds %union.anon, %union.anon* %510, i64 0, i32 0
  %531 = and i64 %527, 4294967295
  store i64 %531, i64* %530, align 8, !tbaa !2428
  %532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %532, align 1, !tbaa !2432
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %533, align 1, !tbaa !2446
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %534, align 1, !tbaa !2447
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %535, align 1, !tbaa !2448
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %536, align 1, !tbaa !2449
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %537, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %522, %526
  %538 = phi %struct.Memory* [ %525, %522 ], [ %MEMORY.2, %526 ]
  %539 = load i32, i32* %EDX
  %540 = zext i32 %539 to i64
  %541 = load i64, i64* %PC
  %542 = add i64 %541, 3
  store i64 %542, i64* %PC
  %543 = shl i64 %540, 32
  %544 = ashr exact i64 %543, 32
  store i64 %544, i64* %RDI, align 8, !tbaa !2428
  %545 = load i64, i64* %RCX
  %546 = load i64, i64* %RDI
  %547 = mul i64 %546, 4
  %548 = add i64 %547, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 7
  store i64 %550, i64* %PC
  %551 = trunc i64 %545 to i32
  %552 = inttoptr i64 %548 to i32*
  %553 = load i32, i32* %552
  %554 = xor i32 %553, %551
  %555 = zext i32 %554 to i64
  store i64 %555, i64* %RCX, align 8, !tbaa !2428
  %556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %556, align 1, !tbaa !2432
  %557 = and i32 %554, 255
  %558 = call i32 @llvm.ctpop.i32(i32 %557) #16
  %559 = trunc i32 %558 to i8
  %560 = and i8 %559, 1
  %561 = xor i8 %560, 1
  %562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %561, i8* %562, align 1, !tbaa !2446
  %563 = icmp eq i32 %554, 0
  %564 = zext i1 %563 to i8
  %565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %564, i8* %565, align 1, !tbaa !2448
  %566 = lshr i32 %554, 31
  %567 = trunc i32 %566 to i8
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %567, i8* %568, align 1, !tbaa !2449
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %569, align 1, !tbaa !2450
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %570, align 1, !tbaa !2447
  %571 = load i64, i64* %RBP
  %572 = sub i64 %571, 8
  %573 = load i64, i64* %PC
  %574 = add i64 %573, 4
  store i64 %574, i64* %PC
  %575 = inttoptr i64 %572 to i32*
  %576 = load i32, i32* %575
  %577 = sext i32 %576 to i64
  store i64 %577, i64* %RDI, align 8, !tbaa !2428
  %578 = load i64, i64* %RDI
  %579 = mul i64 %578, 4
  %580 = add i64 %579, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %581 = load i32, i32* %ECX
  %582 = zext i32 %581 to i64
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 7
  store i64 %584, i64* %PC
  %585 = inttoptr i64 %580 to i32*
  store i32 %581, i32* %585
  %586 = load i64, i64* %PC
  %587 = add i64 %586, 32
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 5
  store i64 %589, i64* %PC
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %587, i64* %590, align 8, !tbaa !2428
  br label %block_40089a

block_4008ff:                                     ; preds = %block_4008f5
  %591 = load i64, i64* %RBP
  %592 = sub i64 %591, 4
  %593 = load i64, i64* %PC
  %594 = add i64 %593, 4
  store i64 %594, i64* %PC
  %595 = inttoptr i64 %592 to i32*
  %596 = load i32, i32* %595
  %597 = sext i32 %596 to i64
  store i64 %597, i64* %RAX, align 8, !tbaa !2428
  %598 = load i64, i64* %RAX
  %599 = mul i64 %598, 4
  %600 = add i64 %599, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 8
  store i64 %602, i64* %PC
  %603 = inttoptr i64 %600 to i32*
  %604 = load i32, i32* %603
  %605 = sext i32 %604 to i64
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RAX
  %607 = mul i64 %606, 4
  %608 = add i64 %607, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 7
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %608 to i32*
  %612 = load i32, i32* %611
  %613 = zext i32 %612 to i64
  store i64 %613, i64* %RCX, align 8, !tbaa !2428
  %614 = load i64, i64* %RBP
  %615 = sub i64 %614, 4
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 4
  store i64 %617, i64* %PC
  %618 = inttoptr i64 %615 to i32*
  %619 = load i32, i32* %618
  %620 = sext i32 %619 to i64
  store i64 %620, i64* %RAX, align 8, !tbaa !2428
  %621 = load i64, i64* %RAX
  %622 = mul i64 %621, 4
  %623 = add i64 %622, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %624 = load i32, i32* %ECX
  %625 = zext i32 %624 to i64
  %626 = load i64, i64* %PC
  %627 = add i64 %626, 7
  store i64 %627, i64* %PC
  %628 = inttoptr i64 %623 to i32*
  store i32 %624, i32* %628
  %629 = load i64, i64* %RBP
  %630 = sub i64 %629, 4
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 3
  store i64 %632, i64* %PC
  %633 = inttoptr i64 %630 to i32*
  %634 = load i32, i32* %633
  %635 = zext i32 %634 to i64
  store i64 %635, i64* %RAX, align 8, !tbaa !2428
  %636 = load i64, i64* %RAX
  %637 = load i64, i64* %PC
  %638 = add i64 %637, 3
  store i64 %638, i64* %PC
  %639 = trunc i64 %636 to i32
  %640 = add i32 1, %639
  %641 = zext i32 %640 to i64
  store i64 %641, i64* %RAX, align 8, !tbaa !2428
  %642 = icmp ult i32 %640, %639
  %643 = icmp ult i32 %640, 1
  %644 = or i1 %642, %643
  %645 = zext i1 %644 to i8
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %645, i8* %646, align 1, !tbaa !2432
  %647 = and i32 %640, 255
  %648 = call i32 @llvm.ctpop.i32(i32 %647) #16
  %649 = trunc i32 %648 to i8
  %650 = and i8 %649, 1
  %651 = xor i8 %650, 1
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %651, i8* %652, align 1, !tbaa !2446
  %653 = xor i64 1, %636
  %654 = trunc i64 %653 to i32
  %655 = xor i32 %654, %640
  %656 = lshr i32 %655, 4
  %657 = trunc i32 %656 to i8
  %658 = and i8 %657, 1
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %658, i8* %659, align 1, !tbaa !2447
  %660 = icmp eq i32 %640, 0
  %661 = zext i1 %660 to i8
  %662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %661, i8* %662, align 1, !tbaa !2448
  %663 = lshr i32 %640, 31
  %664 = trunc i32 %663 to i8
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %664, i8* %665, align 1, !tbaa !2449
  %666 = lshr i32 %639, 31
  %667 = xor i32 %663, %666
  %668 = add nuw nsw i32 %667, %663
  %669 = icmp eq i32 %668, 2
  %670 = zext i1 %669 to i8
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %670, i8* %671, align 1, !tbaa !2450
  %672 = load i64, i64* %RBP
  %673 = sub i64 %672, 4
  %674 = load i32, i32* %EAX
  %675 = zext i32 %674 to i64
  %676 = load i64, i64* %PC
  %677 = add i64 %676, 3
  store i64 %677, i64* %PC
  %678 = inttoptr i64 %673 to i32*
  store i32 %674, i32* %678
  %679 = load i64, i64* %PC
  %680 = sub i64 %679, 49
  %681 = load i64, i64* %PC
  %682 = add i64 %681, 5
  store i64 %682, i64* %PC
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %680, i64* %683, align 8, !tbaa !2428
  br label %block_4008f5

block_4008ee:                                     ; preds = %block_4007f1
  %684 = add i64 %353, 7
  store i64 %684, i64* %PC
  %685 = inttoptr i64 %352 to i32*
  store i32 0, i32* %685
  br label %block_4008f5

block_4008ad:                                     ; preds = %block_400813
  %686 = load i64, i64* %PC
  %687 = add i64 %686, 5
  store i64 %687, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 8
  store i64 %689, i64* %PC
  %690 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104) to i32*)
  %691 = sext i32 %690 to i64
  store i64 %691, i64* %RCX, align 8, !tbaa !2428
  %692 = load i64, i64* %RCX
  %693 = mul i64 %692, 4
  %694 = add i64 %693, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 7
  store i64 %696, i64* %PC
  %697 = inttoptr i64 %694 to i32*
  %698 = load i32, i32* %697
  %699 = zext i32 %698 to i64
  store i64 %699, i64* %RDX, align 8, !tbaa !2428
  %700 = load i64, i64* %RDX
  %701 = load i64, i64* %RBP
  %702 = sub i64 %701, 4
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 3
  store i64 %704, i64* %PC
  %705 = trunc i64 %700 to i32
  %706 = inttoptr i64 %702 to i32*
  %707 = load i32, i32* %706
  %708 = add i32 %707, %705
  %709 = zext i32 %708 to i64
  store i64 %709, i64* %RDX, align 8, !tbaa !2428
  %710 = icmp ult i32 %708, %705
  %711 = icmp ult i32 %708, %707
  %712 = or i1 %710, %711
  %713 = zext i1 %712 to i8
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %713, i8* %714, align 1, !tbaa !2432
  %715 = and i32 %708, 255
  %716 = call i32 @llvm.ctpop.i32(i32 %715) #16
  %717 = trunc i32 %716 to i8
  %718 = and i8 %717, 1
  %719 = xor i8 %718, 1
  %720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %719, i8* %720, align 1, !tbaa !2446
  %721 = xor i32 %707, %705
  %722 = xor i32 %721, %708
  %723 = lshr i32 %722, 4
  %724 = trunc i32 %723 to i8
  %725 = and i8 %724, 1
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %725, i8* %726, align 1, !tbaa !2447
  %727 = icmp eq i32 %708, 0
  %728 = zext i1 %727 to i8
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %728, i8* %729, align 1, !tbaa !2448
  %730 = lshr i32 %708, 31
  %731 = trunc i32 %730 to i8
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %731, i8* %732, align 1, !tbaa !2449
  %733 = lshr i32 %705, 31
  %734 = lshr i32 %707, 31
  %735 = xor i32 %730, %733
  %736 = xor i32 %730, %734
  %737 = add nuw nsw i32 %735, %736
  %738 = icmp eq i32 %737, 2
  %739 = zext i1 %738 to i8
  %740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %739, i8* %740, align 1, !tbaa !2450
  %741 = load i64, i64* %RBP
  %742 = sub i64 %741, 16
  %743 = load i32, i32* %EAX
  %744 = zext i32 %743 to i64
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 3
  store i64 %746, i64* %PC
  %747 = inttoptr i64 %742 to i32*
  store i32 %743, i32* %747
  %748 = load i32, i32* %EDX
  %749 = zext i32 %748 to i64
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 2
  store i64 %751, i64* %PC
  %752 = and i64 %749, 4294967295
  store i64 %752, i64* %RAX, align 8, !tbaa !2428
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 1
  store i64 %754, i64* %PC
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %757 = bitcast %union.anon* %756 to i32*
  %758 = load i32, i32* %757, align 8, !tbaa !2452
  %759 = sext i32 %758 to i64
  %760 = lshr i64 %759, 32
  store i64 %760, i64* %755, align 8, !tbaa !2428
  %761 = load i64, i64* %RBP
  %762 = sub i64 %761, 16
  %763 = load i64, i64* %PC
  %764 = add i64 %763, 3
  store i64 %764, i64* %PC
  %765 = inttoptr i64 %762 to i32*
  %766 = load i32, i32* %765
  %767 = zext i32 %766 to i64
  store i64 %767, i64* %RSI, align 8, !tbaa !2428
  %768 = load i32, i32* %ESI
  %769 = zext i32 %768 to i64
  %770 = load i64, i64* %PC
  %771 = add i64 %770, 2
  store i64 %771, i64* %PC
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %773 = bitcast %union.anon* %772 to i32*
  %774 = load i32, i32* %773, align 8, !tbaa !2452
  %775 = zext i32 %774 to i64
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %777 = bitcast %union.anon* %776 to i32*
  %778 = load i32, i32* %777, align 8, !tbaa !2452
  %779 = zext i32 %778 to i64
  %780 = shl i64 %769, 32
  %781 = ashr exact i64 %780, 32
  %782 = shl nuw i64 %779, 32
  %783 = or i64 %782, %775
  %784 = sdiv i64 %783, %781
  %785 = shl i64 %784, 32
  %786 = ashr exact i64 %785, 32
  %787 = icmp eq i64 %784, %786
  br i1 %787, label %792, label %788

; <label>:788:                                    ; preds = %block_4008ad
  %789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %790 = load i64, i64* %789, align 8, !tbaa !2428
  %791 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %790, %struct.Memory* %MEMORY.2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:792:                                    ; preds = %block_4008ad
  %793 = srem i64 %783, %781
  %794 = getelementptr inbounds %union.anon, %union.anon* %772, i64 0, i32 0
  %795 = and i64 %784, 4294967295
  store i64 %795, i64* %794, align 8, !tbaa !2428
  %796 = getelementptr inbounds %union.anon, %union.anon* %776, i64 0, i32 0
  %797 = and i64 %793, 4294967295
  store i64 %797, i64* %796, align 8, !tbaa !2428
  %798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %798, align 1, !tbaa !2432
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %799, align 1, !tbaa !2446
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %800, align 1, !tbaa !2447
  %801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %801, align 1, !tbaa !2448
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %802, align 1, !tbaa !2449
  %803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %803, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %788, %792
  %804 = phi %struct.Memory* [ %791, %788 ], [ %MEMORY.2, %792 ]
  %805 = load i32, i32* %EDX
  %806 = zext i32 %805 to i64
  %807 = load i64, i64* %PC
  %808 = add i64 %807, 3
  store i64 %808, i64* %PC
  %809 = shl i64 %806, 32
  %810 = ashr exact i64 %809, 32
  store i64 %810, i64* %RCX, align 8, !tbaa !2428
  %811 = load i64, i64* %RCX
  %812 = mul i64 %811, 4
  %813 = add i64 %812, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %814 = load i64, i64* %PC
  %815 = add i64 %814, 7
  store i64 %815, i64* %PC
  %816 = inttoptr i64 %813 to i32*
  %817 = load i32, i32* %816
  %818 = zext i32 %817 to i64
  store i64 %818, i64* %RDX, align 8, !tbaa !2428
  %819 = load i32, i32* %EDX
  %820 = zext i32 %819 to i64
  %821 = load i64, i64* %PC
  %822 = add i64 %821, 7
  store i64 %822, i64* %PC
  store i32 %819, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104) to i32*)
  %823 = load i64, i64* %RBP
  %824 = sub i64 %823, 4
  %825 = load i64, i64* %PC
  %826 = add i64 %825, 3
  store i64 %826, i64* %PC
  %827 = inttoptr i64 %824 to i32*
  %828 = load i32, i32* %827
  %829 = zext i32 %828 to i64
  store i64 %829, i64* %RAX, align 8, !tbaa !2428
  %830 = load i64, i64* %RAX
  %831 = load i64, i64* %PC
  %832 = add i64 %831, 3
  store i64 %832, i64* %PC
  %833 = trunc i64 %830 to i32
  %834 = add i32 1, %833
  %835 = zext i32 %834 to i64
  store i64 %835, i64* %RAX, align 8, !tbaa !2428
  %836 = icmp ult i32 %834, %833
  %837 = icmp ult i32 %834, 1
  %838 = or i1 %836, %837
  %839 = zext i1 %838 to i8
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %839, i8* %840, align 1, !tbaa !2432
  %841 = and i32 %834, 255
  %842 = call i32 @llvm.ctpop.i32(i32 %841) #16
  %843 = trunc i32 %842 to i8
  %844 = and i8 %843, 1
  %845 = xor i8 %844, 1
  %846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %845, i8* %846, align 1, !tbaa !2446
  %847 = xor i64 1, %830
  %848 = trunc i64 %847 to i32
  %849 = xor i32 %848, %834
  %850 = lshr i32 %849, 4
  %851 = trunc i32 %850 to i8
  %852 = and i8 %851, 1
  %853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %852, i8* %853, align 1, !tbaa !2447
  %854 = icmp eq i32 %834, 0
  %855 = zext i1 %854 to i8
  %856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %855, i8* %856, align 1, !tbaa !2448
  %857 = lshr i32 %834, 31
  %858 = trunc i32 %857 to i8
  %859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %858, i8* %859, align 1, !tbaa !2449
  %860 = lshr i32 %833, 31
  %861 = xor i32 %857, %860
  %862 = add nuw nsw i32 %861, %857
  %863 = icmp eq i32 %862, 2
  %864 = zext i1 %863 to i8
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %864, i8* %865, align 1, !tbaa !2450
  %866 = load i64, i64* %RBP
  %867 = sub i64 %866, 4
  %868 = load i32, i32* %EAX
  %869 = zext i32 %868 to i64
  %870 = load i64, i64* %PC
  %871 = add i64 %870, 3
  store i64 %871, i64* %PC
  %872 = inttoptr i64 %867 to i32*
  store i32 %868, i32* %872
  %873 = load i64, i64* %PC
  %874 = sub i64 %873, 248
  %875 = load i64, i64* %PC
  %876 = add i64 %875, 5
  store i64 %876, i64* %PC
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %874, i64* %877, align 8, !tbaa !2428
  br label %block_4007f1

block_40092b:                                     ; preds = %block_4008f5
  %878 = load i64, i64* %PC
  %879 = add i64 %878, 1
  store i64 %879, i64* %PC
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %881 = load i64, i64* %880, align 8, !tbaa !2428
  %882 = add i64 %881, 8
  %883 = inttoptr i64 %881 to i64*
  %884 = load i64, i64* %883
  store i64 %884, i64* %RBP, align 8, !tbaa !2428
  store i64 %882, i64* %880, align 8, !tbaa !2428
  %885 = load i64, i64* %PC
  %886 = add i64 %885, 1
  store i64 %886, i64* %PC
  %887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %889 = load i64, i64* %888, align 8, !tbaa !2428
  %890 = inttoptr i64 %889 to i64*
  %891 = load i64, i64* %890
  store i64 %891, i64* %887, align 8, !tbaa !2428
  %892 = add i64 %889, 8
  store i64 %892, i64* %888, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_40081d:                                     ; preds = %block_400813
  %893 = load i64, i64* %RBP
  %894 = sub i64 %893, 8
  %895 = load i64, i64* %PC
  %896 = add i64 %895, 4
  store i64 %896, i64* %PC
  %897 = inttoptr i64 %894 to i32*
  %898 = load i32, i32* %897
  %899 = sext i32 %898 to i64
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = load i64, i64* %RAX
  %901 = mul i64 %900, 4
  %902 = add i64 %901, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 8
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %902 to i32*
  %906 = load i32, i32* %905
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %907, align 1, !tbaa !2432
  %908 = and i32 %906, 255
  %909 = call i32 @llvm.ctpop.i32(i32 %908) #16
  %910 = trunc i32 %909 to i8
  %911 = and i8 %910, 1
  %912 = xor i8 %911, 1
  %913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %912, i8* %913, align 1, !tbaa !2446
  %914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %914, align 1, !tbaa !2447
  %915 = icmp eq i32 %906, 0
  %916 = zext i1 %915 to i8
  %917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %916, i8* %917, align 1, !tbaa !2448
  %918 = lshr i32 %906, 31
  %919 = trunc i32 %918 to i8
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %919, i8* %920, align 1, !tbaa !2449
  %921 = lshr i32 %906, 31
  %922 = xor i32 %918, %921
  %923 = add nuw nsw i32 %922, %921
  %924 = icmp eq i32 %923, 2
  %925 = zext i1 %924 to i8
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %925, i8* %926, align 1, !tbaa !2450
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 86
  %929 = load i64, i64* %PC
  %930 = add i64 %929, 6
  %931 = load i64, i64* %PC
  %932 = add i64 %931, 6
  store i64 %932, i64* %PC
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %934 = load i8, i8* %933, align 1, !tbaa !2448
  store i8 %934, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %936 = icmp ne i8 %934, 0
  %937 = select i1 %936, i64 %928, i64 %930
  store i64 %937, i64* %935, align 8, !tbaa !2428
  %938 = load i8, i8* %BRANCH_TAKEN
  %939 = icmp eq i8 %938, 1
  br i1 %939, label %block_40087f, label %block_40082f

block_4007fb:                                     ; preds = %block_4007f1
  %940 = add i64 %353, 4
  store i64 %940, i64* %PC
  %941 = inttoptr i64 %352 to i32*
  %942 = load i32, i32* %941
  %943 = sext i32 %942 to i64
  store i64 %943, i64* %RAX, align 8, !tbaa !2428
  %944 = load i64, i64* %RAX
  %945 = mul i64 %944, 4
  %946 = add i64 %945, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %947 = load i64, i64* %PC
  %948 = add i64 %947, 11
  store i64 %948, i64* %PC
  %949 = inttoptr i64 %946 to i32*
  store i32 1, i32* %949
  %950 = load i64, i64* %RBP
  %951 = sub i64 %950, 4
  %952 = load i64, i64* %PC
  %953 = add i64 %952, 3
  store i64 %953, i64* %PC
  %954 = inttoptr i64 %951 to i32*
  %955 = load i32, i32* %954
  %956 = zext i32 %955 to i64
  store i64 %956, i64* %RCX, align 8, !tbaa !2428
  %957 = load i64, i64* %RCX
  %958 = load i64, i64* %PC
  %959 = add i64 %958, 3
  store i64 %959, i64* %PC
  %960 = trunc i64 %957 to i32
  %961 = sub i32 %960, 1
  %962 = zext i32 %961 to i64
  store i64 %962, i64* %RCX, align 8, !tbaa !2428
  %963 = icmp ult i32 %960, 1
  %964 = zext i1 %963 to i8
  %965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %964, i8* %965, align 1, !tbaa !2432
  %966 = and i32 %961, 255
  %967 = call i32 @llvm.ctpop.i32(i32 %966) #16
  %968 = trunc i32 %967 to i8
  %969 = and i8 %968, 1
  %970 = xor i8 %969, 1
  %971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %970, i8* %971, align 1, !tbaa !2446
  %972 = xor i64 1, %957
  %973 = trunc i64 %972 to i32
  %974 = xor i32 %973, %961
  %975 = lshr i32 %974, 4
  %976 = trunc i32 %975 to i8
  %977 = and i8 %976, 1
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %977, i8* %978, align 1, !tbaa !2447
  %979 = icmp eq i32 %961, 0
  %980 = zext i1 %979 to i8
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %980, i8* %981, align 1, !tbaa !2448
  %982 = lshr i32 %961, 31
  %983 = trunc i32 %982 to i8
  %984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %983, i8* %984, align 1, !tbaa !2449
  %985 = lshr i32 %960, 31
  %986 = xor i32 %982, %985
  %987 = add nuw nsw i32 %986, %985
  %988 = icmp eq i32 %987, 2
  %989 = zext i1 %988 to i8
  %990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %989, i8* %990, align 1, !tbaa !2450
  %991 = load i64, i64* %RBP
  %992 = sub i64 %991, 8
  %993 = load i32, i32* %ECX
  %994 = zext i32 %993 to i64
  %995 = load i64, i64* %PC
  %996 = add i64 %995, 3
  store i64 %996, i64* %PC
  %997 = inttoptr i64 %992 to i32*
  store i32 %993, i32* %997
  br label %block_400813
}

; Function Attrs: noinline
define %struct.Memory* @sub_400450__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400450:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4019a0_encode_rs(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4019a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = load i64, i64* %RBP
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 1
  store i64 %41, i64* %PC
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %43 = load i64, i64* %42, align 8, !tbaa !2428
  %44 = add i64 %43, -8
  %45 = inttoptr i64 %44 to i64*
  store i64 %39, i64* %45
  store i64 %44, i64* %42, align 8, !tbaa !2428
  %46 = load i64, i64* %RSP
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 3
  store i64 %48, i64* %PC
  store i64 %46, i64* %RBP, align 8, !tbaa !2428
  %49 = load i64, i64* %RBP
  %50 = sub i64 %49, 4
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 7
  store i64 %52, i64* %PC
  %53 = inttoptr i64 %50 to i32*
  store i32 0, i32* %53
  br label %block_4019ab

block_401ae6:                                     ; preds = %block_401adc
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 3
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i32*
  %59 = load i32, i32* %58
  %60 = zext i32 %59 to i64
  store i64 %60, i64* %RAX, align 8, !tbaa !2428
  %61 = load i64, i64* %RAX
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC
  %64 = trunc i64 %61 to i32
  %65 = sub i32 %64, 1
  %66 = zext i32 %65 to i64
  store i64 %66, i64* %RAX, align 8, !tbaa !2428
  %67 = icmp ult i32 %64, 1
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %68, i8* %69, align 1, !tbaa !2432
  %70 = and i32 %65, 255
  %71 = call i32 @llvm.ctpop.i32(i32 %70) #16
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %74, i8* %75, align 1, !tbaa !2446
  %76 = xor i64 1, %61
  %77 = trunc i64 %76 to i32
  %78 = xor i32 %77, %65
  %79 = lshr i32 %78, 4
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %81, i8* %82, align 1, !tbaa !2447
  %83 = icmp eq i32 %65, 0
  %84 = zext i1 %83 to i8
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %84, i8* %85, align 1, !tbaa !2448
  %86 = lshr i32 %65, 31
  %87 = trunc i32 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %87, i8* %88, align 1, !tbaa !2449
  %89 = lshr i32 %64, 31
  %90 = xor i32 %86, %89
  %91 = add nuw nsw i32 %90, %89
  %92 = icmp eq i32 %91, 2
  %93 = zext i1 %92 to i8
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %93, i8* %94, align 1, !tbaa !2450
  %95 = load i32, i32* %EAX
  %96 = zext i32 %95 to i64
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 3
  store i64 %98, i64* %PC
  %99 = shl i64 %96, 32
  %100 = ashr exact i64 %99, 32
  store i64 %100, i64* %RCX, align 8, !tbaa !2428
  %101 = load i64, i64* %RCX
  %102 = mul i64 %101, 4
  %103 = add i64 %102, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 7
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106
  %108 = zext i32 %107 to i64
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 8
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 4
  store i64 %112, i64* %PC
  %113 = inttoptr i64 %110 to i32*
  %114 = load i32, i32* %113
  %115 = sext i32 %114 to i64
  store i64 %115, i64* %RCX, align 8, !tbaa !2428
  %116 = load i64, i64* %RCX
  %117 = mul i64 %116, 4
  %118 = add i64 %117, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %119 = load i32, i32* %EAX
  %120 = zext i32 %119 to i64
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 7
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %118 to i32*
  store i32 %119, i32* %123
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 8
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 3
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %125 to i32*
  %129 = load i32, i32* %128
  %130 = zext i32 %129 to i64
  store i64 %130, i64* %RAX, align 8, !tbaa !2428
  %131 = load i64, i64* %RAX
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 3
  store i64 %133, i64* %PC
  %134 = trunc i64 %131 to i32
  %135 = add i32 -1, %134
  %136 = zext i32 %135 to i64
  store i64 %136, i64* %RAX, align 8, !tbaa !2428
  %137 = icmp ult i32 %135, %134
  %138 = icmp ult i32 %135, -1
  %139 = or i1 %137, %138
  %140 = zext i1 %139 to i8
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %140, i8* %141, align 1, !tbaa !2432
  %142 = and i32 %135, 255
  %143 = call i32 @llvm.ctpop.i32(i32 %142) #16
  %144 = trunc i32 %143 to i8
  %145 = and i8 %144, 1
  %146 = xor i8 %145, 1
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %146, i8* %147, align 1, !tbaa !2446
  %148 = xor i64 -1, %131
  %149 = trunc i64 %148 to i32
  %150 = xor i32 %149, %135
  %151 = lshr i32 %150, 4
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %153, i8* %154, align 1, !tbaa !2447
  %155 = icmp eq i32 %135, 0
  %156 = zext i1 %155 to i8
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %156, i8* %157, align 1, !tbaa !2448
  %158 = lshr i32 %135, 31
  %159 = trunc i32 %158 to i8
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %159, i8* %160, align 1, !tbaa !2449
  %161 = lshr i32 %134, 31
  %162 = xor i32 %158, %161
  %163 = xor i32 %158, 1
  %164 = add nuw nsw i32 %162, %163
  %165 = icmp eq i32 %164, 2
  %166 = zext i1 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %166, i8* %167, align 1, !tbaa !2450
  %168 = load i64, i64* %RBP
  %169 = sub i64 %168, 8
  %170 = load i32, i32* %EAX
  %171 = zext i32 %170 to i64
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 3
  store i64 %173, i64* %PC
  %174 = inttoptr i64 %169 to i32*
  store i32 %170, i32* %174
  %175 = load i64, i64* %PC
  %176 = sub i64 %175, 46
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 5
  store i64 %178, i64* %PC
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %176, i64* %179, align 8, !tbaa !2428
  br label %block_401adc

block_4019d2:                                     ; preds = %block_4019ab
  %180 = add i64 %701, 7
  store i64 %180, i64* %PC
  %181 = inttoptr i64 %700 to i32*
  store i32 238, i32* %181
  br label %block_4019d9

block_4019e3:                                     ; preds = %block_4019d9
  %182 = load i64, i64* %RBP
  %183 = sub i64 %182, 4
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 4
  store i64 %185, i64* %PC
  %186 = inttoptr i64 %183 to i32*
  %187 = load i32, i32* %186
  %188 = sext i32 %187 to i64
  store i64 %188, i64* %RAX, align 8, !tbaa !2428
  %189 = load i64, i64* %RAX
  %190 = mul i64 %189, 4
  %191 = add i64 %190, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3184)
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 7
  store i64 %193, i64* %PC
  %194 = inttoptr i64 %191 to i32*
  %195 = load i32, i32* %194
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RCX, align 8, !tbaa !2428
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 7
  store i64 %199, i64* %PC
  %200 = trunc i64 %197 to i32
  %201 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4204) to i32*)
  %202 = xor i32 %201, %200
  %203 = zext i32 %202 to i64
  store i64 %203, i64* %RCX, align 8, !tbaa !2428
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %204, align 1, !tbaa !2432
  %205 = and i32 %202, 255
  %206 = call i32 @llvm.ctpop.i32(i32 %205) #16
  %207 = trunc i32 %206 to i8
  %208 = and i8 %207, 1
  %209 = xor i8 %208, 1
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %209, i8* %210, align 1, !tbaa !2446
  %211 = icmp eq i32 %202, 0
  %212 = zext i1 %211 to i8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %212, i8* %213, align 1, !tbaa !2448
  %214 = lshr i32 %202, 31
  %215 = trunc i32 %214 to i8
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %215, i8* %216, align 1, !tbaa !2449
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %217, align 1, !tbaa !2450
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %218, align 1, !tbaa !2447
  %219 = load i32, i32* %ECX
  %220 = zext i32 %219 to i64
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 3
  store i64 %222, i64* %PC
  %223 = shl i64 %220, 32
  %224 = ashr exact i64 %223, 32
  store i64 %224, i64* %RAX, align 8, !tbaa !2428
  %225 = load i64, i64* %RAX
  %226 = mul i64 %225, 4
  %227 = add i64 %226, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 1056)
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 7
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i32*
  %231 = load i32, i32* %230
  %232 = zext i32 %231 to i64
  store i64 %232, i64* %RCX, align 8, !tbaa !2428
  %233 = load i64, i64* %RBP
  %234 = sub i64 %233, 12
  %235 = load i32, i32* %ECX
  %236 = zext i32 %235 to i64
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 3
  store i64 %238, i64* %PC
  %239 = inttoptr i64 %234 to i32*
  store i32 %235, i32* %239
  %240 = load i64, i64* %RBP
  %241 = sub i64 %240, 12
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %241 to i32*
  %245 = load i32, i32* %244
  %246 = sub i32 %245, -1
  %247 = icmp ult i32 %245, -1
  %248 = zext i1 %247 to i8
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %248, i8* %249, align 1, !tbaa !2432
  %250 = and i32 %246, 255
  %251 = call i32 @llvm.ctpop.i32(i32 %250) #16
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %254, i8* %255, align 1, !tbaa !2446
  %256 = xor i32 %245, -1
  %257 = xor i32 %256, %246
  %258 = lshr i32 %257, 4
  %259 = trunc i32 %258 to i8
  %260 = and i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %260, i8* %261, align 1, !tbaa !2447
  %262 = icmp eq i32 %246, 0
  %263 = zext i1 %262 to i8
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %263, i8* %264, align 1, !tbaa !2448
  %265 = lshr i32 %246, 31
  %266 = trunc i32 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %266, i8* %267, align 1, !tbaa !2449
  %268 = lshr i32 %245, 31
  %269 = xor i32 %268, 1
  %270 = xor i32 %265, %268
  %271 = add nuw nsw i32 %270, %269
  %272 = icmp eq i32 %271, 2
  %273 = zext i1 %272 to i8
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %273, i8* %274, align 1, !tbaa !2450
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 207
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 6
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 6
  store i64 %280, i64* %PC
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %282 = load i8, i8* %281, align 1, !tbaa !2448
  store i8 %282, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %284 = icmp ne i8 %282, 0
  %285 = select i1 %284, i64 %276, i64 %278
  store i64 %285, i64* %283, align 8, !tbaa !2428
  %286 = load i8, i8* %BRANCH_TAKEN
  %287 = icmp eq i8 %286, 1
  %288 = load i64, i64* %RBP
  %289 = sub i64 %288, 8
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 7
  store i64 %291, i64* %PC
  %292 = inttoptr i64 %289 to i32*
  store i32 15, i32* %292
  br i1 %287, label %block_401adc, label %block_401a13

block_4019b5:                                     ; preds = %block_4019ab
  %293 = add i64 %701, 4
  store i64 %293, i64* %PC
  %294 = inttoptr i64 %700 to i32*
  %295 = load i32, i32* %294
  %296 = sext i32 %295 to i64
  store i64 %296, i64* %RAX, align 8, !tbaa !2428
  %297 = load i64, i64* %RAX
  %298 = mul i64 %297, 4
  %299 = add i64 %298, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 11
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  store i32 0, i32* %302
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 4
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 3
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %304 to i32*
  %308 = load i32, i32* %307
  %309 = zext i32 %308 to i64
  store i64 %309, i64* %RAX, align 8, !tbaa !2428
  %310 = load i64, i64* %RAX
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 3
  store i64 %312, i64* %PC
  %313 = trunc i64 %310 to i32
  %314 = add i32 1, %313
  %315 = zext i32 %314 to i64
  store i64 %315, i64* %RAX, align 8, !tbaa !2428
  %316 = icmp ult i32 %314, %313
  %317 = icmp ult i32 %314, 1
  %318 = or i1 %316, %317
  %319 = zext i1 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %319, i8* %320, align 1, !tbaa !2432
  %321 = and i32 %314, 255
  %322 = call i32 @llvm.ctpop.i32(i32 %321) #16
  %323 = trunc i32 %322 to i8
  %324 = and i8 %323, 1
  %325 = xor i8 %324, 1
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %325, i8* %326, align 1, !tbaa !2446
  %327 = xor i64 1, %310
  %328 = trunc i64 %327 to i32
  %329 = xor i32 %328, %314
  %330 = lshr i32 %329, 4
  %331 = trunc i32 %330 to i8
  %332 = and i8 %331, 1
  %333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %332, i8* %333, align 1, !tbaa !2447
  %334 = icmp eq i32 %314, 0
  %335 = zext i1 %334 to i8
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %335, i8* %336, align 1, !tbaa !2448
  %337 = lshr i32 %314, 31
  %338 = trunc i32 %337 to i8
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %338, i8* %339, align 1, !tbaa !2449
  %340 = lshr i32 %313, 31
  %341 = xor i32 %337, %340
  %342 = add nuw nsw i32 %341, %337
  %343 = icmp eq i32 %342, 2
  %344 = zext i1 %343 to i8
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %344, i8* %345, align 1, !tbaa !2450
  %346 = load i64, i64* %RBP
  %347 = sub i64 %346, 4
  %348 = load i32, i32* %EAX
  %349 = zext i32 %348 to i64
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 3
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %347 to i32*
  store i32 %348, i32* %352
  %353 = load i64, i64* %PC
  %354 = sub i64 %353, 34
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 5
  store i64 %356, i64* %PC
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %354, i64* %357, align 8, !tbaa !2428
  br label %block_4019ab

block_401a2f:                                     ; preds = %block_401a1d
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 5
  store i64 %359, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %360 = load i64, i64* %RBP
  %361 = sub i64 %360, 8
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 3
  store i64 %363, i64* %PC
  %364 = inttoptr i64 %361 to i32*
  %365 = load i32, i32* %364
  %366 = zext i32 %365 to i64
  store i64 %366, i64* %RCX, align 8, !tbaa !2428
  %367 = load i64, i64* %RCX
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = trunc i64 %367 to i32
  %371 = sub i32 %370, 1
  %372 = zext i32 %371 to i64
  store i64 %372, i64* %RCX, align 8, !tbaa !2428
  %373 = icmp ult i32 %370, 1
  %374 = zext i1 %373 to i8
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %374, i8* %375, align 1, !tbaa !2432
  %376 = and i32 %371, 255
  %377 = call i32 @llvm.ctpop.i32(i32 %376) #16
  %378 = trunc i32 %377 to i8
  %379 = and i8 %378, 1
  %380 = xor i8 %379, 1
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %380, i8* %381, align 1, !tbaa !2446
  %382 = xor i64 1, %367
  %383 = trunc i64 %382 to i32
  %384 = xor i32 %383, %371
  %385 = lshr i32 %384, 4
  %386 = trunc i32 %385 to i8
  %387 = and i8 %386, 1
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %387, i8* %388, align 1, !tbaa !2447
  %389 = icmp eq i32 %371, 0
  %390 = zext i1 %389 to i8
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %390, i8* %391, align 1, !tbaa !2448
  %392 = lshr i32 %371, 31
  %393 = trunc i32 %392 to i8
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %393, i8* %394, align 1, !tbaa !2449
  %395 = lshr i32 %370, 31
  %396 = xor i32 %392, %395
  %397 = add nuw nsw i32 %396, %395
  %398 = icmp eq i32 %397, 2
  %399 = zext i1 %398 to i8
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %399, i8* %400, align 1, !tbaa !2450
  %401 = load i32, i32* %ECX
  %402 = zext i32 %401 to i64
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 3
  store i64 %404, i64* %PC
  %405 = shl i64 %402, 32
  %406 = ashr exact i64 %405, 32
  store i64 %406, i64* %RDX, align 8, !tbaa !2428
  %407 = load i64, i64* %RDX
  %408 = mul i64 %407, 4
  %409 = add i64 %408, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 7
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %409 to i32*
  %413 = load i32, i32* %412
  %414 = zext i32 %413 to i64
  store i64 %414, i64* %RCX, align 8, !tbaa !2428
  %415 = load i64, i64* %RBP
  %416 = sub i64 %415, 8
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 4
  store i64 %418, i64* %PC
  %419 = inttoptr i64 %416 to i32*
  %420 = load i32, i32* %419
  %421 = sext i32 %420 to i64
  store i64 %421, i64* %RDX, align 8, !tbaa !2428
  %422 = load i64, i64* %RDX
  %423 = mul i64 %422, 4
  %424 = add i64 %423, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 7
  store i64 %426, i64* %PC
  %427 = inttoptr i64 %424 to i32*
  %428 = load i32, i32* %427
  %429 = zext i32 %428 to i64
  store i64 %429, i64* %RSI, align 8, !tbaa !2428
  %430 = load i64, i64* %RSI
  %431 = load i64, i64* %RBP
  %432 = sub i64 %431, 12
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 3
  store i64 %434, i64* %PC
  %435 = trunc i64 %430 to i32
  %436 = inttoptr i64 %432 to i32*
  %437 = load i32, i32* %436
  %438 = add i32 %437, %435
  %439 = zext i32 %438 to i64
  store i64 %439, i64* %RSI, align 8, !tbaa !2428
  %440 = icmp ult i32 %438, %435
  %441 = icmp ult i32 %438, %437
  %442 = or i1 %440, %441
  %443 = zext i1 %442 to i8
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %443, i8* %444, align 1, !tbaa !2432
  %445 = and i32 %438, 255
  %446 = call i32 @llvm.ctpop.i32(i32 %445) #16
  %447 = trunc i32 %446 to i8
  %448 = and i8 %447, 1
  %449 = xor i8 %448, 1
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %449, i8* %450, align 1, !tbaa !2446
  %451 = xor i32 %437, %435
  %452 = xor i32 %451, %438
  %453 = lshr i32 %452, 4
  %454 = trunc i32 %453 to i8
  %455 = and i8 %454, 1
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %455, i8* %456, align 1, !tbaa !2447
  %457 = icmp eq i32 %438, 0
  %458 = zext i1 %457 to i8
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %458, i8* %459, align 1, !tbaa !2448
  %460 = lshr i32 %438, 31
  %461 = trunc i32 %460 to i8
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %461, i8* %462, align 1, !tbaa !2449
  %463 = lshr i32 %435, 31
  %464 = lshr i32 %437, 31
  %465 = xor i32 %460, %463
  %466 = xor i32 %460, %464
  %467 = add nuw nsw i32 %465, %466
  %468 = icmp eq i32 %467, 2
  %469 = zext i1 %468 to i8
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %469, i8* %470, align 1, !tbaa !2450
  %471 = load i64, i64* %RBP
  %472 = sub i64 %471, 16
  %473 = load i32, i32* %EAX
  %474 = zext i32 %473 to i64
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 3
  store i64 %476, i64* %PC
  %477 = inttoptr i64 %472 to i32*
  store i32 %473, i32* %477
  %478 = load i32, i32* %ESI
  %479 = zext i32 %478 to i64
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 2
  store i64 %481, i64* %PC
  %482 = and i64 %479, 4294967295
  store i64 %482, i64* %RAX, align 8, !tbaa !2428
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 1
  store i64 %484, i64* %PC
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %487 = bitcast %union.anon* %486 to i32*
  %488 = load i32, i32* %487, align 8, !tbaa !2452
  %489 = sext i32 %488 to i64
  %490 = lshr i64 %489, 32
  store i64 %490, i64* %485, align 8, !tbaa !2428
  %491 = load i64, i64* %RBP
  %492 = sub i64 %491, 16
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 3
  store i64 %494, i64* %PC
  %495 = inttoptr i64 %492 to i32*
  %496 = load i32, i32* %495
  %497 = zext i32 %496 to i64
  store i64 %497, i64* %RSI, align 8, !tbaa !2428
  %498 = load i32, i32* %ESI
  %499 = zext i32 %498 to i64
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 2
  store i64 %501, i64* %PC
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %503 = bitcast %union.anon* %502 to i32*
  %504 = load i32, i32* %503, align 8, !tbaa !2452
  %505 = zext i32 %504 to i64
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %507 = bitcast %union.anon* %506 to i32*
  %508 = load i32, i32* %507, align 8, !tbaa !2452
  %509 = zext i32 %508 to i64
  %510 = shl i64 %499, 32
  %511 = ashr exact i64 %510, 32
  %512 = shl nuw i64 %509, 32
  %513 = or i64 %512, %505
  %514 = sdiv i64 %513, %511
  %515 = shl i64 %514, 32
  %516 = ashr exact i64 %515, 32
  %517 = icmp eq i64 %514, %516
  br i1 %517, label %522, label %518

; <label>:518:                                    ; preds = %block_401a2f
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %520 = load i64, i64* %519, align 8, !tbaa !2428
  %521 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %520, %struct.Memory* %MEMORY.4) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:522:                                    ; preds = %block_401a2f
  %523 = srem i64 %513, %511
  %524 = getelementptr inbounds %union.anon, %union.anon* %502, i64 0, i32 0
  %525 = and i64 %514, 4294967295
  store i64 %525, i64* %524, align 8, !tbaa !2428
  %526 = getelementptr inbounds %union.anon, %union.anon* %506, i64 0, i32 0
  %527 = and i64 %523, 4294967295
  store i64 %527, i64* %526, align 8, !tbaa !2428
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %528, align 1, !tbaa !2432
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %529, align 1, !tbaa !2446
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %530, align 1, !tbaa !2447
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %531, align 1, !tbaa !2448
  %532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %532, align 1, !tbaa !2449
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %533, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %518, %522
  %534 = phi %struct.Memory* [ %521, %518 ], [ %MEMORY.4, %522 ]
  %535 = load i32, i32* %EDX
  %536 = zext i32 %535 to i64
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 3
  store i64 %538, i64* %PC
  %539 = shl i64 %536, 32
  %540 = ashr exact i64 %539, 32
  store i64 %540, i64* %RDI, align 8, !tbaa !2428
  %541 = load i64, i64* %RCX
  %542 = load i64, i64* %RDI
  %543 = mul i64 %542, 4
  %544 = add i64 %543, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %545 = load i64, i64* %PC
  %546 = add i64 %545, 7
  store i64 %546, i64* %PC
  %547 = trunc i64 %541 to i32
  %548 = inttoptr i64 %544 to i32*
  %549 = load i32, i32* %548
  %550 = xor i32 %549, %547
  %551 = zext i32 %550 to i64
  store i64 %551, i64* %RCX, align 8, !tbaa !2428
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %552, align 1, !tbaa !2432
  %553 = and i32 %550, 255
  %554 = call i32 @llvm.ctpop.i32(i32 %553) #16
  %555 = trunc i32 %554 to i8
  %556 = and i8 %555, 1
  %557 = xor i8 %556, 1
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %557, i8* %558, align 1, !tbaa !2446
  %559 = icmp eq i32 %550, 0
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %560, i8* %561, align 1, !tbaa !2448
  %562 = lshr i32 %550, 31
  %563 = trunc i32 %562 to i8
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %563, i8* %564, align 1, !tbaa !2449
  %565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %565, align 1, !tbaa !2450
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %566, align 1, !tbaa !2447
  %567 = load i64, i64* %RBP
  %568 = sub i64 %567, 8
  %569 = load i64, i64* %PC
  %570 = add i64 %569, 4
  store i64 %570, i64* %PC
  %571 = inttoptr i64 %568 to i32*
  %572 = load i32, i32* %571
  %573 = sext i32 %572 to i64
  store i64 %573, i64* %RDI, align 8, !tbaa !2428
  %574 = load i64, i64* %RDI
  %575 = mul i64 %574, 4
  %576 = add i64 %575, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %577 = load i32, i32* %ECX
  %578 = zext i32 %577 to i64
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 7
  store i64 %580, i64* %PC
  %581 = inttoptr i64 %576 to i32*
  store i32 %577, i32* %581
  %582 = load i64, i64* %PC
  %583 = add i64 %582, 32
  %584 = load i64, i64* %PC
  %585 = add i64 %584, 5
  store i64 %585, i64* %PC
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %583, i64* %586, align 8, !tbaa !2428
  br label %block_401a92

block_401b2d:                                     ; preds = %block_4019d9
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 1
  store i64 %588, i64* %PC
  %589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %590 = load i64, i64* %589, align 8, !tbaa !2428
  %591 = add i64 %590, 8
  %592 = inttoptr i64 %590 to i64*
  %593 = load i64, i64* %592
  store i64 %593, i64* %RBP, align 8, !tbaa !2428
  store i64 %591, i64* %589, align 8, !tbaa !2428
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 1
  store i64 %595, i64* %PC
  %596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %598 = load i64, i64* %597, align 8, !tbaa !2428
  %599 = inttoptr i64 %598 to i64*
  %600 = load i64, i64* %599
  store i64 %600, i64* %596, align 8, !tbaa !2428
  %601 = add i64 %598, 8
  store i64 %601, i64* %597, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4019d9:                                     ; preds = %block_401b1a, %block_4019d2
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_4019d2 ], [ %MEMORY.2, %block_401b1a ]
  %602 = load i64, i64* %RBP
  %603 = sub i64 %602, 4
  %604 = load i64, i64* %PC
  %605 = add i64 %604, 4
  store i64 %605, i64* %PC
  %606 = inttoptr i64 %603 to i32*
  %607 = load i32, i32* %606
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %608, align 1, !tbaa !2432
  %609 = and i32 %607, 255
  %610 = call i32 @llvm.ctpop.i32(i32 %609) #16
  %611 = trunc i32 %610 to i8
  %612 = and i8 %611, 1
  %613 = xor i8 %612, 1
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %613, i8* %614, align 1, !tbaa !2446
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %615, align 1, !tbaa !2447
  %616 = icmp eq i32 %607, 0
  %617 = zext i1 %616 to i8
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %617, i8* %618, align 1, !tbaa !2448
  %619 = lshr i32 %607, 31
  %620 = trunc i32 %619 to i8
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %620, i8* %621, align 1, !tbaa !2449
  %622 = lshr i32 %607, 31
  %623 = xor i32 %619, %622
  %624 = add nuw nsw i32 %623, %622
  %625 = icmp eq i32 %624, 2
  %626 = zext i1 %625 to i8
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %626, i8* %627, align 1, !tbaa !2450
  %628 = load i64, i64* %PC
  %629 = add i64 %628, 336
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 6
  %632 = load i64, i64* %PC
  %633 = add i64 %632, 6
  store i64 %633, i64* %PC
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %635 = load i8, i8* %634, align 1, !tbaa !2449
  %636 = icmp ne i8 %635, 0
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %638 = load i8, i8* %637, align 1, !tbaa !2450
  %639 = icmp ne i8 %638, 0
  %640 = xor i1 %636, %639
  %641 = zext i1 %640 to i8
  store i8 %641, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %643 = select i1 %640, i64 %629, i64 %631
  store i64 %643, i64* %642, align 8, !tbaa !2428
  %644 = load i8, i8* %BRANCH_TAKEN
  %645 = icmp eq i8 %644, 1
  br i1 %645, label %block_401b2d, label %block_4019e3

block_4019ab:                                     ; preds = %block_4019b5, %block_4019a0
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_4019a0 ], [ %MEMORY.1, %block_4019b5 ]
  %646 = load i64, i64* %RBP
  %647 = sub i64 %646, 4
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 4
  store i64 %649, i64* %PC
  %650 = inttoptr i64 %647 to i32*
  %651 = load i32, i32* %650
  %652 = sub i32 %651, 16
  %653 = icmp ult i32 %651, 16
  %654 = zext i1 %653 to i8
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %654, i8* %655, align 1, !tbaa !2432
  %656 = and i32 %652, 255
  %657 = call i32 @llvm.ctpop.i32(i32 %656) #16
  %658 = trunc i32 %657 to i8
  %659 = and i8 %658, 1
  %660 = xor i8 %659, 1
  %661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %660, i8* %661, align 1, !tbaa !2446
  %662 = xor i32 %651, 16
  %663 = xor i32 %662, %652
  %664 = lshr i32 %663, 4
  %665 = trunc i32 %664 to i8
  %666 = and i8 %665, 1
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %666, i8* %667, align 1, !tbaa !2447
  %668 = icmp eq i32 %652, 0
  %669 = zext i1 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %669, i8* %670, align 1, !tbaa !2448
  %671 = lshr i32 %652, 31
  %672 = trunc i32 %671 to i8
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %672, i8* %673, align 1, !tbaa !2449
  %674 = lshr i32 %651, 31
  %675 = xor i32 %671, %674
  %676 = add nuw nsw i32 %675, %674
  %677 = icmp eq i32 %676, 2
  %678 = zext i1 %677 to i8
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %678, i8* %679, align 1, !tbaa !2450
  %680 = load i64, i64* %PC
  %681 = add i64 %680, 35
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 6
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 6
  store i64 %685, i64* %PC
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %687 = load i8, i8* %686, align 1, !tbaa !2449
  %688 = icmp ne i8 %687, 0
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %690 = load i8, i8* %689, align 1, !tbaa !2450
  %691 = icmp ne i8 %690, 0
  %692 = xor i1 %688, %691
  %693 = xor i1 %692, true
  %694 = zext i1 %693 to i8
  store i8 %694, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %696 = select i1 %692, i64 %683, i64 %681
  store i64 %696, i64* %695, align 8, !tbaa !2428
  %697 = load i8, i8* %BRANCH_TAKEN
  %698 = icmp eq i8 %697, 1
  %699 = load i64, i64* %RBP
  %700 = sub i64 %699, 4
  %701 = load i64, i64* %PC
  br i1 %698, label %block_4019d2, label %block_4019b5

block_401a77:                                     ; preds = %block_401a1d
  %702 = load i64, i64* %RBP
  %703 = sub i64 %702, 8
  %704 = load i64, i64* %PC
  %705 = add i64 %704, 3
  store i64 %705, i64* %PC
  %706 = inttoptr i64 %703 to i32*
  %707 = load i32, i32* %706
  %708 = zext i32 %707 to i64
  store i64 %708, i64* %RAX, align 8, !tbaa !2428
  %709 = load i64, i64* %RAX
  %710 = load i64, i64* %PC
  %711 = add i64 %710, 3
  store i64 %711, i64* %PC
  %712 = trunc i64 %709 to i32
  %713 = sub i32 %712, 1
  %714 = zext i32 %713 to i64
  store i64 %714, i64* %RAX, align 8, !tbaa !2428
  %715 = icmp ult i32 %712, 1
  %716 = zext i1 %715 to i8
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %716, i8* %717, align 1, !tbaa !2432
  %718 = and i32 %713, 255
  %719 = call i32 @llvm.ctpop.i32(i32 %718) #16
  %720 = trunc i32 %719 to i8
  %721 = and i8 %720, 1
  %722 = xor i8 %721, 1
  %723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %722, i8* %723, align 1, !tbaa !2446
  %724 = xor i64 1, %709
  %725 = trunc i64 %724 to i32
  %726 = xor i32 %725, %713
  %727 = lshr i32 %726, 4
  %728 = trunc i32 %727 to i8
  %729 = and i8 %728, 1
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %729, i8* %730, align 1, !tbaa !2447
  %731 = icmp eq i32 %713, 0
  %732 = zext i1 %731 to i8
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %732, i8* %733, align 1, !tbaa !2448
  %734 = lshr i32 %713, 31
  %735 = trunc i32 %734 to i8
  %736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %735, i8* %736, align 1, !tbaa !2449
  %737 = lshr i32 %712, 31
  %738 = xor i32 %734, %737
  %739 = add nuw nsw i32 %738, %737
  %740 = icmp eq i32 %739, 2
  %741 = zext i1 %740 to i8
  %742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %741, i8* %742, align 1, !tbaa !2450
  %743 = load i32, i32* %EAX
  %744 = zext i32 %743 to i64
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 3
  store i64 %746, i64* %PC
  %747 = shl i64 %744, 32
  %748 = ashr exact i64 %747, 32
  store i64 %748, i64* %RCX, align 8, !tbaa !2428
  %749 = load i64, i64* %RCX
  %750 = mul i64 %749, 4
  %751 = add i64 %750, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %752 = load i64, i64* %PC
  %753 = add i64 %752, 7
  store i64 %753, i64* %PC
  %754 = inttoptr i64 %751 to i32*
  %755 = load i32, i32* %754
  %756 = zext i32 %755 to i64
  store i64 %756, i64* %RAX, align 8, !tbaa !2428
  %757 = load i64, i64* %RBP
  %758 = sub i64 %757, 8
  %759 = load i64, i64* %PC
  %760 = add i64 %759, 4
  store i64 %760, i64* %PC
  %761 = inttoptr i64 %758 to i32*
  %762 = load i32, i32* %761
  %763 = sext i32 %762 to i64
  store i64 %763, i64* %RCX, align 8, !tbaa !2428
  %764 = load i64, i64* %RCX
  %765 = mul i64 %764, 4
  %766 = add i64 %765, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %767 = load i32, i32* %EAX
  %768 = zext i32 %767 to i64
  %769 = load i64, i64* %PC
  %770 = add i64 %769, 7
  store i64 %770, i64* %PC
  %771 = inttoptr i64 %766 to i32*
  store i32 %767, i32* %771
  br label %block_401a92

block_401aa5:                                     ; preds = %block_401a13
  %772 = load i64, i64* %PC
  %773 = add i64 %772, 5
  store i64 %773, i64* %PC
  store i64 255, i64* %RAX, align 8, !tbaa !2428
  %774 = load i64, i64* %PC
  %775 = add i64 %774, 7
  store i64 %775, i64* %PC
  %776 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104) to i32*)
  %777 = zext i32 %776 to i64
  store i64 %777, i64* %RCX, align 8, !tbaa !2428
  %778 = load i64, i64* %RCX
  %779 = load i64, i64* %RBP
  %780 = sub i64 %779, 12
  %781 = load i64, i64* %PC
  %782 = add i64 %781, 3
  store i64 %782, i64* %PC
  %783 = trunc i64 %778 to i32
  %784 = inttoptr i64 %780 to i32*
  %785 = load i32, i32* %784
  %786 = add i32 %785, %783
  %787 = zext i32 %786 to i64
  store i64 %787, i64* %RCX, align 8, !tbaa !2428
  %788 = icmp ult i32 %786, %783
  %789 = icmp ult i32 %786, %785
  %790 = or i1 %788, %789
  %791 = zext i1 %790 to i8
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %791, i8* %792, align 1, !tbaa !2432
  %793 = and i32 %786, 255
  %794 = call i32 @llvm.ctpop.i32(i32 %793) #16
  %795 = trunc i32 %794 to i8
  %796 = and i8 %795, 1
  %797 = xor i8 %796, 1
  %798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %797, i8* %798, align 1, !tbaa !2446
  %799 = xor i32 %785, %783
  %800 = xor i32 %799, %786
  %801 = lshr i32 %800, 4
  %802 = trunc i32 %801 to i8
  %803 = and i8 %802, 1
  %804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %803, i8* %804, align 1, !tbaa !2447
  %805 = icmp eq i32 %786, 0
  %806 = zext i1 %805 to i8
  %807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %806, i8* %807, align 1, !tbaa !2448
  %808 = lshr i32 %786, 31
  %809 = trunc i32 %808 to i8
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %809, i8* %810, align 1, !tbaa !2449
  %811 = lshr i32 %783, 31
  %812 = lshr i32 %785, 31
  %813 = xor i32 %808, %811
  %814 = xor i32 %808, %812
  %815 = add nuw nsw i32 %813, %814
  %816 = icmp eq i32 %815, 2
  %817 = zext i1 %816 to i8
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %817, i8* %818, align 1, !tbaa !2450
  %819 = load i64, i64* %RBP
  %820 = sub i64 %819, 20
  %821 = load i32, i32* %EAX
  %822 = zext i32 %821 to i64
  %823 = load i64, i64* %PC
  %824 = add i64 %823, 3
  store i64 %824, i64* %PC
  %825 = inttoptr i64 %820 to i32*
  store i32 %821, i32* %825
  %826 = load i32, i32* %ECX
  %827 = zext i32 %826 to i64
  %828 = load i64, i64* %PC
  %829 = add i64 %828, 2
  store i64 %829, i64* %PC
  %830 = and i64 %827, 4294967295
  store i64 %830, i64* %RAX, align 8, !tbaa !2428
  %831 = load i64, i64* %PC
  %832 = add i64 %831, 1
  store i64 %832, i64* %PC
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %835 = bitcast %union.anon* %834 to i32*
  %836 = load i32, i32* %835, align 8, !tbaa !2452
  %837 = sext i32 %836 to i64
  %838 = lshr i64 %837, 32
  store i64 %838, i64* %833, align 8, !tbaa !2428
  %839 = load i64, i64* %RBP
  %840 = sub i64 %839, 20
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 3
  store i64 %842, i64* %PC
  %843 = inttoptr i64 %840 to i32*
  %844 = load i32, i32* %843
  %845 = zext i32 %844 to i64
  store i64 %845, i64* %RCX, align 8, !tbaa !2428
  %846 = load i32, i32* %ECX
  %847 = zext i32 %846 to i64
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 2
  store i64 %849, i64* %PC
  %850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %851 = bitcast %union.anon* %850 to i32*
  %852 = load i32, i32* %851, align 8, !tbaa !2452
  %853 = zext i32 %852 to i64
  %854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %855 = bitcast %union.anon* %854 to i32*
  %856 = load i32, i32* %855, align 8, !tbaa !2452
  %857 = zext i32 %856 to i64
  %858 = shl i64 %847, 32
  %859 = ashr exact i64 %858, 32
  %860 = shl nuw i64 %857, 32
  %861 = or i64 %860, %853
  %862 = sdiv i64 %861, %859
  %863 = shl i64 %862, 32
  %864 = ashr exact i64 %863, 32
  %865 = icmp eq i64 %862, %864
  br i1 %865, label %870, label %866

; <label>:866:                                    ; preds = %block_401aa5
  %867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %868 = load i64, i64* %867, align 8, !tbaa !2428
  %869 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %868, %struct.Memory* %MEMORY.4) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:870:                                    ; preds = %block_401aa5
  %871 = srem i64 %861, %859
  %872 = getelementptr inbounds %union.anon, %union.anon* %850, i64 0, i32 0
  %873 = and i64 %862, 4294967295
  store i64 %873, i64* %872, align 8, !tbaa !2428
  %874 = getelementptr inbounds %union.anon, %union.anon* %854, i64 0, i32 0
  %875 = and i64 %871, 4294967295
  store i64 %875, i64* %874, align 8, !tbaa !2428
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %876, align 1, !tbaa !2432
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %877, align 1, !tbaa !2446
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %878, align 1, !tbaa !2447
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %879, align 1, !tbaa !2448
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %880, align 1, !tbaa !2449
  %881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %881, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %866, %870
  %882 = phi %struct.Memory* [ %869, %866 ], [ %MEMORY.4, %870 ]
  %883 = load i32, i32* %EDX
  %884 = zext i32 %883 to i64
  %885 = load i64, i64* %PC
  %886 = add i64 %885, 3
  store i64 %886, i64* %PC
  %887 = shl i64 %884, 32
  %888 = ashr exact i64 %887, 32
  store i64 %888, i64* %RSI, align 8, !tbaa !2428
  %889 = load i64, i64* %RSI
  %890 = mul i64 %889, 4
  %891 = add i64 %890, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 2080)
  %892 = load i64, i64* %PC
  %893 = add i64 %892, 7
  store i64 %893, i64* %PC
  %894 = inttoptr i64 %891 to i32*
  %895 = load i32, i32* %894
  %896 = zext i32 %895 to i64
  store i64 %896, i64* %RDX, align 8, !tbaa !2428
  %897 = load i32, i32* %EDX
  %898 = zext i32 %897 to i64
  %899 = load i64, i64* %PC
  %900 = add i64 %899, 7
  store i64 %900, i64* %PC
  store i32 %897, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144) to i32*)
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 74
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 5
  store i64 %904, i64* %PC
  %905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %902, i64* %905, align 8, !tbaa !2428
  br label %block_401b1a

block_401a1d:                                     ; preds = %block_401a13
  %906 = load i64, i64* %RBP
  %907 = sub i64 %906, 8
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 4
  store i64 %909, i64* %PC
  %910 = inttoptr i64 %907 to i32*
  %911 = load i32, i32* %910
  %912 = sext i32 %911 to i64
  store i64 %912, i64* %RAX, align 8, !tbaa !2428
  %913 = load i64, i64* %RAX
  %914 = mul i64 %913, 4
  %915 = add i64 %914, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3104)
  %916 = load i64, i64* %PC
  %917 = add i64 %916, 8
  store i64 %917, i64* %PC
  %918 = inttoptr i64 %915 to i32*
  %919 = load i32, i32* %918
  %920 = sub i32 %919, -1
  %921 = icmp ult i32 %919, -1
  %922 = zext i1 %921 to i8
  %923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %922, i8* %923, align 1, !tbaa !2432
  %924 = and i32 %920, 255
  %925 = call i32 @llvm.ctpop.i32(i32 %924) #16
  %926 = trunc i32 %925 to i8
  %927 = and i8 %926, 1
  %928 = xor i8 %927, 1
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %928, i8* %929, align 1, !tbaa !2446
  %930 = xor i32 %919, -1
  %931 = xor i32 %930, %920
  %932 = lshr i32 %931, 4
  %933 = trunc i32 %932 to i8
  %934 = and i8 %933, 1
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %934, i8* %935, align 1, !tbaa !2447
  %936 = icmp eq i32 %920, 0
  %937 = zext i1 %936 to i8
  %938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %937, i8* %938, align 1, !tbaa !2448
  %939 = lshr i32 %920, 31
  %940 = trunc i32 %939 to i8
  %941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %940, i8* %941, align 1, !tbaa !2449
  %942 = lshr i32 %919, 31
  %943 = xor i32 %942, 1
  %944 = xor i32 %939, %942
  %945 = add nuw nsw i32 %944, %943
  %946 = icmp eq i32 %945, 2
  %947 = zext i1 %946 to i8
  %948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %947, i8* %948, align 1, !tbaa !2450
  %949 = load i64, i64* %PC
  %950 = add i64 %949, 78
  %951 = load i64, i64* %PC
  %952 = add i64 %951, 6
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 6
  store i64 %954, i64* %PC
  %955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %956 = load i8, i8* %955, align 1, !tbaa !2448
  store i8 %956, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %958 = icmp ne i8 %956, 0
  %959 = select i1 %958, i64 %950, i64 %952
  store i64 %959, i64* %957, align 8, !tbaa !2428
  %960 = load i8, i8* %BRANCH_TAKEN
  %961 = icmp eq i8 %960, 1
  br i1 %961, label %block_401a77, label %block_401a2f

block_401b1a:                                     ; preds = %block_401b0f, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.3, %block_401b0f ], [ %882, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %962 = load i64, i64* %PC
  %963 = add i64 %962, 5
  %964 = load i64, i64* %PC
  %965 = add i64 %964, 5
  store i64 %965, i64* %PC
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %963, i64* %966, align 8, !tbaa !2428
  %967 = load i64, i64* %RBP
  %968 = sub i64 %967, 4
  %969 = load i64, i64* %PC
  %970 = add i64 %969, 3
  store i64 %970, i64* %PC
  %971 = inttoptr i64 %968 to i32*
  %972 = load i32, i32* %971
  %973 = zext i32 %972 to i64
  store i64 %973, i64* %RAX, align 8, !tbaa !2428
  %974 = load i64, i64* %RAX
  %975 = load i64, i64* %PC
  %976 = add i64 %975, 3
  store i64 %976, i64* %PC
  %977 = trunc i64 %974 to i32
  %978 = add i32 -1, %977
  %979 = zext i32 %978 to i64
  store i64 %979, i64* %RAX, align 8, !tbaa !2428
  %980 = icmp ult i32 %978, %977
  %981 = icmp ult i32 %978, -1
  %982 = or i1 %980, %981
  %983 = zext i1 %982 to i8
  %984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %983, i8* %984, align 1, !tbaa !2432
  %985 = and i32 %978, 255
  %986 = call i32 @llvm.ctpop.i32(i32 %985) #16
  %987 = trunc i32 %986 to i8
  %988 = and i8 %987, 1
  %989 = xor i8 %988, 1
  %990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %989, i8* %990, align 1, !tbaa !2446
  %991 = xor i64 -1, %974
  %992 = trunc i64 %991 to i32
  %993 = xor i32 %992, %978
  %994 = lshr i32 %993, 4
  %995 = trunc i32 %994 to i8
  %996 = and i8 %995, 1
  %997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %996, i8* %997, align 1, !tbaa !2447
  %998 = icmp eq i32 %978, 0
  %999 = zext i1 %998 to i8
  %1000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %999, i8* %1000, align 1, !tbaa !2448
  %1001 = lshr i32 %978, 31
  %1002 = trunc i32 %1001 to i8
  %1003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1002, i8* %1003, align 1, !tbaa !2449
  %1004 = lshr i32 %977, 31
  %1005 = xor i32 %1001, %1004
  %1006 = xor i32 %1001, 1
  %1007 = add nuw nsw i32 %1005, %1006
  %1008 = icmp eq i32 %1007, 2
  %1009 = zext i1 %1008 to i8
  %1010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1009, i8* %1010, align 1, !tbaa !2450
  %1011 = load i64, i64* %RBP
  %1012 = sub i64 %1011, 4
  %1013 = load i32, i32* %EAX
  %1014 = zext i32 %1013 to i64
  %1015 = load i64, i64* %PC
  %1016 = add i64 %1015, 3
  store i64 %1016, i64* %PC
  %1017 = inttoptr i64 %1012 to i32*
  store i32 %1013, i32* %1017
  %1018 = load i64, i64* %PC
  %1019 = sub i64 %1018, 335
  %1020 = load i64, i64* %PC
  %1021 = add i64 %1020, 5
  store i64 %1021, i64* %PC
  %1022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1019, i64* %1022, align 8, !tbaa !2428
  br label %block_4019d9

block_401adc:                                     ; preds = %block_4019e3, %block_401ae6
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.0, %block_4019e3 ], [ %MEMORY.3, %block_401ae6 ]
  %1023 = load i64, i64* %RBP
  %1024 = sub i64 %1023, 8
  %1025 = load i64, i64* %PC
  %1026 = add i64 %1025, 4
  store i64 %1026, i64* %PC
  %1027 = inttoptr i64 %1024 to i32*
  %1028 = load i32, i32* %1027
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1029, align 1, !tbaa !2432
  %1030 = and i32 %1028, 255
  %1031 = call i32 @llvm.ctpop.i32(i32 %1030) #16
  %1032 = trunc i32 %1031 to i8
  %1033 = and i8 %1032, 1
  %1034 = xor i8 %1033, 1
  %1035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1034, i8* %1035, align 1, !tbaa !2446
  %1036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1036, align 1, !tbaa !2447
  %1037 = icmp eq i32 %1028, 0
  %1038 = zext i1 %1037 to i8
  %1039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1038, i8* %1039, align 1, !tbaa !2448
  %1040 = lshr i32 %1028, 31
  %1041 = trunc i32 %1040 to i8
  %1042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1041, i8* %1042, align 1, !tbaa !2449
  %1043 = lshr i32 %1028, 31
  %1044 = xor i32 %1040, %1043
  %1045 = add nuw nsw i32 %1044, %1043
  %1046 = icmp eq i32 %1045, 2
  %1047 = zext i1 %1046 to i8
  %1048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1047, i8* %1048, align 1, !tbaa !2450
  %1049 = load i64, i64* %PC
  %1050 = add i64 %1049, 47
  %1051 = load i64, i64* %PC
  %1052 = add i64 %1051, 6
  %1053 = load i64, i64* %PC
  %1054 = add i64 %1053, 6
  store i64 %1054, i64* %PC
  %1055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1056 = load i8, i8* %1055, align 1, !tbaa !2448
  %1057 = icmp ne i8 %1056, 0
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1059 = load i8, i8* %1058, align 1, !tbaa !2449
  %1060 = icmp ne i8 %1059, 0
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1062 = load i8, i8* %1061, align 1, !tbaa !2450
  %1063 = icmp ne i8 %1062, 0
  %1064 = xor i1 %1060, %1063
  %1065 = or i1 %1057, %1064
  %1066 = zext i1 %1065 to i8
  store i8 %1066, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1068 = select i1 %1065, i64 %1050, i64 %1052
  store i64 %1068, i64* %1067, align 8, !tbaa !2428
  %1069 = load i8, i8* %BRANCH_TAKEN
  %1070 = icmp eq i8 %1069, 1
  br i1 %1070, label %block_401b0f, label %block_401ae6

block_401a13:                                     ; preds = %block_401a92, %block_4019e3
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.0, %block_4019e3 ], [ %MEMORY.5, %block_401a92 ]
  %1071 = load i64, i64* %RBP
  %1072 = sub i64 %1071, 8
  %1073 = load i64, i64* %PC
  %1074 = add i64 %1073, 4
  store i64 %1074, i64* %PC
  %1075 = inttoptr i64 %1072 to i32*
  %1076 = load i32, i32* %1075
  %1077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1077, align 1, !tbaa !2432
  %1078 = and i32 %1076, 255
  %1079 = call i32 @llvm.ctpop.i32(i32 %1078) #16
  %1080 = trunc i32 %1079 to i8
  %1081 = and i8 %1080, 1
  %1082 = xor i8 %1081, 1
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1082, i8* %1083, align 1, !tbaa !2446
  %1084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1084, align 1, !tbaa !2447
  %1085 = icmp eq i32 %1076, 0
  %1086 = zext i1 %1085 to i8
  %1087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1086, i8* %1087, align 1, !tbaa !2448
  %1088 = lshr i32 %1076, 31
  %1089 = trunc i32 %1088 to i8
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1089, i8* %1090, align 1, !tbaa !2449
  %1091 = lshr i32 %1076, 31
  %1092 = xor i32 %1088, %1091
  %1093 = add nuw nsw i32 %1092, %1091
  %1094 = icmp eq i32 %1093, 2
  %1095 = zext i1 %1094 to i8
  %1096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1095, i8* %1096, align 1, !tbaa !2450
  %1097 = load i64, i64* %PC
  %1098 = add i64 %1097, 142
  %1099 = load i64, i64* %PC
  %1100 = add i64 %1099, 6
  %1101 = load i64, i64* %PC
  %1102 = add i64 %1101, 6
  store i64 %1102, i64* %PC
  %1103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1104 = load i8, i8* %1103, align 1, !tbaa !2448
  %1105 = icmp ne i8 %1104, 0
  %1106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1107 = load i8, i8* %1106, align 1, !tbaa !2449
  %1108 = icmp ne i8 %1107, 0
  %1109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1110 = load i8, i8* %1109, align 1, !tbaa !2450
  %1111 = icmp ne i8 %1110, 0
  %1112 = xor i1 %1108, %1111
  %1113 = or i1 %1105, %1112
  %1114 = zext i1 %1113 to i8
  store i8 %1114, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1116 = select i1 %1113, i64 %1098, i64 %1100
  store i64 %1116, i64* %1115, align 8, !tbaa !2428
  %1117 = load i8, i8* %BRANCH_TAKEN
  %1118 = icmp eq i8 %1117, 1
  br i1 %1118, label %block_401aa5, label %block_401a1d

block_401a92:                                     ; preds = %block_401a77, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.4, %block_401a77 ], [ %534, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ]
  %1119 = load i64, i64* %PC
  %1120 = add i64 %1119, 5
  %1121 = load i64, i64* %PC
  %1122 = add i64 %1121, 5
  store i64 %1122, i64* %PC
  %1123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1120, i64* %1123, align 8, !tbaa !2428
  %1124 = load i64, i64* %RBP
  %1125 = sub i64 %1124, 8
  %1126 = load i64, i64* %PC
  %1127 = add i64 %1126, 3
  store i64 %1127, i64* %PC
  %1128 = inttoptr i64 %1125 to i32*
  %1129 = load i32, i32* %1128
  %1130 = zext i32 %1129 to i64
  store i64 %1130, i64* %RAX, align 8, !tbaa !2428
  %1131 = load i64, i64* %RAX
  %1132 = load i64, i64* %PC
  %1133 = add i64 %1132, 3
  store i64 %1133, i64* %PC
  %1134 = trunc i64 %1131 to i32
  %1135 = add i32 -1, %1134
  %1136 = zext i32 %1135 to i64
  store i64 %1136, i64* %RAX, align 8, !tbaa !2428
  %1137 = icmp ult i32 %1135, %1134
  %1138 = icmp ult i32 %1135, -1
  %1139 = or i1 %1137, %1138
  %1140 = zext i1 %1139 to i8
  %1141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1140, i8* %1141, align 1, !tbaa !2432
  %1142 = and i32 %1135, 255
  %1143 = call i32 @llvm.ctpop.i32(i32 %1142) #16
  %1144 = trunc i32 %1143 to i8
  %1145 = and i8 %1144, 1
  %1146 = xor i8 %1145, 1
  %1147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1146, i8* %1147, align 1, !tbaa !2446
  %1148 = xor i64 -1, %1131
  %1149 = trunc i64 %1148 to i32
  %1150 = xor i32 %1149, %1135
  %1151 = lshr i32 %1150, 4
  %1152 = trunc i32 %1151 to i8
  %1153 = and i8 %1152, 1
  %1154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1153, i8* %1154, align 1, !tbaa !2447
  %1155 = icmp eq i32 %1135, 0
  %1156 = zext i1 %1155 to i8
  %1157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1156, i8* %1157, align 1, !tbaa !2448
  %1158 = lshr i32 %1135, 31
  %1159 = trunc i32 %1158 to i8
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1159, i8* %1160, align 1, !tbaa !2449
  %1161 = lshr i32 %1134, 31
  %1162 = xor i32 %1158, %1161
  %1163 = xor i32 %1158, 1
  %1164 = add nuw nsw i32 %1162, %1163
  %1165 = icmp eq i32 %1164, 2
  %1166 = zext i1 %1165 to i8
  %1167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1166, i8* %1167, align 1, !tbaa !2450
  %1168 = load i64, i64* %RBP
  %1169 = sub i64 %1168, 8
  %1170 = load i32, i32* %EAX
  %1171 = zext i32 %1170 to i64
  %1172 = load i64, i64* %PC
  %1173 = add i64 %1172, 3
  store i64 %1173, i64* %PC
  %1174 = inttoptr i64 %1169 to i32*
  store i32 %1170, i32* %1174
  %1175 = load i64, i64* %PC
  %1176 = sub i64 %1175, 141
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 5
  store i64 %1178, i64* %PC
  %1179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1176, i64* %1179, align 8, !tbaa !2428
  br label %block_401a13

block_401b0f:                                     ; preds = %block_401adc
  %1180 = load i64, i64* %PC
  %1181 = add i64 %1180, 11
  store i64 %1181, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144) to i32*)
  br label %block_401b1a
}

; Function Attrs: noinline
define %struct.Memory* @sub_4003e0__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4003e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602ff0__got_type* @seg_602ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2450
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2447
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_4003f2, label %block_4003f0

block_4003f0:                                     ; preds = %block_4003e0
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_4003f2

block_4003f2:                                     ; preds = %block_4003f0, %block_4003e0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4003e0 ], [ %92, %block_4003f0 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2447
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2448
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2450
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_400490_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400490:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 6303832, i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, 6303832
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, 6303832
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 6303832, %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %36, 63
  %63 = xor i64 %59, %62
  %64 = add nuw nsw i64 %63, %62
  %65 = icmp eq i64 %64, 2
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %66, i8* %67, align 1, !tbaa !2450
  %68 = load i64, i64* %RSP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 3
  store i64 %70, i64* %PC
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  %71 = load i64, i64* %RSI
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = ashr i64 %71, 2
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  %77 = ashr i64 %74, 1
  store i64 %77, i64* %RSI, align 8, !tbaa !2428
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %76, i8* %78, align 1, !tbaa !2451
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %80 = trunc i64 %77 to i32
  %81 = and i32 %80, 255
  %82 = call i32 @llvm.ctpop.i32(i32 %81) #16
  %83 = trunc i32 %82 to i8
  %84 = and i8 %83, 1
  %85 = xor i8 %84, 1
  store i8 %85, i8* %79, align 1, !tbaa !2451
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %86, align 1, !tbaa !2451
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %88 = icmp eq i64 %77, 0
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %87, align 1, !tbaa !2451
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %91 = lshr i64 %77, 63
  %92 = trunc i64 %91 to i8
  store i8 %92, i8* %90, align 1, !tbaa !2451
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %93, align 1, !tbaa !2451
  %94 = load i64, i64* %RSI
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 3
  store i64 %96, i64* %PC
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = lshr i64 %97, 62
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = lshr i64 %100, 1
  store i64 %103, i64* %RAX, align 8, !tbaa !2428
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %102, i8* %104, align 1, !tbaa !2451
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %106 = trunc i64 %103 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  store i8 %111, i8* %105, align 1, !tbaa !2451
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %112, align 1, !tbaa !2451
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %114 = icmp eq i64 %103, 0
  %115 = zext i1 %114 to i8
  store i8 %115, i8* %113, align 1, !tbaa !2451
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %116, align 1, !tbaa !2451
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = load i64, i64* %RSI
  %119 = load i64, i64* %RAX
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 3
  store i64 %121, i64* %PC
  %122 = add i64 %119, %118
  store i64 %122, i64* %RSI, align 8, !tbaa !2428
  %123 = icmp ult i64 %122, %118
  %124 = icmp ult i64 %122, %119
  %125 = or i1 %123, %124
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %126, i8* %127, align 1, !tbaa !2432
  %128 = trunc i64 %122 to i32
  %129 = and i32 %128, 255
  %130 = call i32 @llvm.ctpop.i32(i32 %129) #16
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %133, i8* %134, align 1, !tbaa !2446
  %135 = xor i64 %119, %118
  %136 = xor i64 %135, %122
  %137 = lshr i64 %136, 4
  %138 = trunc i64 %137 to i8
  %139 = and i8 %138, 1
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %139, i8* %140, align 1, !tbaa !2447
  %141 = icmp eq i64 %122, 0
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %142, i8* %143, align 1, !tbaa !2448
  %144 = lshr i64 %122, 63
  %145 = trunc i64 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %145, i8* %146, align 1, !tbaa !2449
  %147 = lshr i64 %118, 63
  %148 = lshr i64 %119, 63
  %149 = xor i64 %144, %147
  %150 = xor i64 %144, %148
  %151 = add nuw nsw i64 %149, %150
  %152 = icmp eq i64 %151, 2
  %153 = zext i1 %152 to i8
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %153, i8* %154, align 1, !tbaa !2450
  %155 = load i64, i64* %RSI
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 3
  store i64 %157, i64* %PC
  %158 = trunc i64 %155 to i8
  %159 = and i8 %158, 1
  %160 = ashr i64 %155, 1
  store i64 %160, i64* %RSI, align 8, !tbaa !2428
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %159, i8* %161, align 1, !tbaa !2451
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %163 = trunc i64 %160 to i32
  %164 = and i32 %163, 255
  %165 = call i32 @llvm.ctpop.i32(i32 %164) #16
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = xor i8 %167, 1
  store i8 %168, i8* %162, align 1, !tbaa !2451
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %169, align 1, !tbaa !2451
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %171 = icmp eq i64 %160, 0
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %170, align 1, !tbaa !2451
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %174 = lshr i64 %160, 63
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %173, align 1, !tbaa !2451
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %176, align 1, !tbaa !2451
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 23
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 2
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 2
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %184 = load i8, i8* %183, align 1, !tbaa !2448
  store i8 %184, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %186 = icmp ne i8 %184, 0
  %187 = select i1 %186, i64 %178, i64 %180
  store i64 %187, i64* %185, align 8, !tbaa !2428
  %188 = load i8, i8* %BRANCH_TAKEN
  %189 = icmp eq i8 %188, 1
  br i1 %189, label %block_4004c8, label %block_4004b3

block_4004bd:                                     ; preds = %block_4004b3
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 1
  store i64 %191, i64* %PC
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %193 = load i64, i64* %192, align 8, !tbaa !2428
  %194 = add i64 %193, 8
  %195 = inttoptr i64 %193 to i64*
  %196 = load i64, i64* %195
  store i64 %196, i64* %RBP, align 8, !tbaa !2428
  store i64 %194, i64* %192, align 8, !tbaa !2428
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 5
  store i64 %198, i64* %PC
  store i64 6303832, i64* %RDI, align 8, !tbaa !2428
  %199 = load i64, i64* %RAX
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 2
  store i64 %201, i64* %PC
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %199, i64* %202, align 8, !tbaa !2428
  %203 = load i64, i64* %PC
  switch i64 %203, label %269 [
    i64 4195530, label %block_4004ca
    i64 4195525, label %block_4004c5
  ]

block_4004ca:                                     ; preds = %block_4004bd
  %204 = load i64, i64* %RAX
  %205 = load i64, i64* %RAX
  %206 = add i64 %205, %204
  %207 = load i16, i16* %AX
  %208 = zext i16 %207 to i64
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 6
  store i64 %210, i64* %PC
  %211 = load i64, i64* %PC
  %212 = tail call %struct.Memory* @sub_4004d0___do_global_dtors_aux(%struct.State* %0, i64 %211, %struct.Memory* %2)
  ret %struct.Memory* %212

block_4004b3:                                     ; preds = %block_400490
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 5
  store i64 %214, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %215 = load i64, i64* %RAX
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 3
  store i64 %218, i64* %PC
  %219 = and i64 %216, %215
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %220, align 1, !tbaa !2432
  %221 = trunc i64 %219 to i32
  %222 = and i32 %221, 255
  %223 = call i32 @llvm.ctpop.i32(i32 %222) #16
  %224 = trunc i32 %223 to i8
  %225 = and i8 %224, 1
  %226 = xor i8 %225, 1
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %226, i8* %227, align 1, !tbaa !2446
  %228 = icmp eq i64 %219, 0
  %229 = zext i1 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %229, i8* %230, align 1, !tbaa !2448
  %231 = lshr i64 %219, 63
  %232 = trunc i64 %231 to i8
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %232, i8* %233, align 1, !tbaa !2449
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %234, align 1, !tbaa !2450
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %235, align 1, !tbaa !2447
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 13
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 2
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 2
  store i64 %241, i64* %PC
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %243 = load i8, i8* %242, align 1, !tbaa !2448
  store i8 %243, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %245 = icmp ne i8 %243, 0
  %246 = select i1 %245, i64 %237, i64 %239
  store i64 %246, i64* %244, align 8, !tbaa !2428
  %247 = load i8, i8* %BRANCH_TAKEN
  %248 = icmp eq i8 %247, 1
  br i1 %248, label %block_4004c8, label %block_4004bd

block_4004c8:                                     ; preds = %block_4004c5, %block_4004b3, %block_400490
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400490 ], [ %2, %block_4004b3 ], [ %2, %block_4004c5 ]
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 1
  store i64 %250, i64* %PC
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %252 = load i64, i64* %251, align 8, !tbaa !2428
  %253 = add i64 %252, 8
  %254 = inttoptr i64 %252 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RBP, align 8, !tbaa !2428
  store i64 %253, i64* %251, align 8, !tbaa !2428
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 1
  store i64 %257, i64* %PC
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %260 = load i64, i64* %259, align 8, !tbaa !2428
  %261 = inttoptr i64 %260 to i64*
  %262 = load i64, i64* %261
  store i64 %262, i64* %258, align 8, !tbaa !2428
  %263 = add i64 %260, 8
  store i64 %263, i64* %259, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4004c5:                                     ; preds = %block_4004bd
  %264 = load i64, i64* %RAX
  %265 = load i32, i32* %EAX
  %266 = zext i32 %265 to i64
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 3
  store i64 %268, i64* %PC
  br label %block_4004c8

; <label>:269:                                    ; preds = %block_4004bd
  %270 = load i64, i64* %PC
  %271 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %270, %struct.Memory* %2)
  ret %struct.Memory* %271
}

; Function Attrs: noinline
define %struct.Memory* @sub_401870_rsenc_204(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401870:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 7
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 5
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %ECX = bitcast %union.anon* %19 to i32*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 7
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %EDX = bitcast %union.anon* %22 to i32*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 9
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %ESI = bitcast %union.anon* %25 to i32*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 1
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RAX = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 5
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RCX = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 7
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RDX = bitcast %union.anon* %34 to i64*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 9
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %RSI = bitcast %union.anon* %37 to i64*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %39 = getelementptr inbounds %struct.GPR, %struct.GPR* %38, i32 0, i32 11
  %40 = getelementptr inbounds %struct.Reg, %struct.Reg* %39, i32 0, i32 0
  %RDI = bitcast %union.anon* %40 to i64*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %42 = getelementptr inbounds %struct.GPR, %struct.GPR* %41, i32 0, i32 13
  %43 = getelementptr inbounds %struct.Reg, %struct.Reg* %42, i32 0, i32 0
  %RSP = bitcast %union.anon* %43 to i64*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %45 = getelementptr inbounds %struct.GPR, %struct.GPR* %44, i32 0, i32 15
  %46 = getelementptr inbounds %struct.Reg, %struct.Reg* %45, i32 0, i32 0
  %RBP = bitcast %union.anon* %46 to i64*
  %47 = load i64, i64* %RBP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 1
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %51 = load i64, i64* %50, align 8, !tbaa !2428
  %52 = add i64 %51, -8
  %53 = inttoptr i64 %52 to i64*
  store i64 %47, i64* %53
  store i64 %52, i64* %50, align 8, !tbaa !2428
  %54 = load i64, i64* %RSP
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 3
  store i64 %56, i64* %PC
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  %57 = load i64, i64* %RSP
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC
  %60 = sub i64 %57, 32
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  %61 = icmp ult i64 %57, 32
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %62, i8* %63, align 1, !tbaa !2432
  %64 = trunc i64 %60 to i32
  %65 = and i32 %64, 255
  %66 = call i32 @llvm.ctpop.i32(i32 %65) #16
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 1
  %69 = xor i8 %68, 1
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %69, i8* %70, align 1, !tbaa !2446
  %71 = xor i64 32, %57
  %72 = xor i64 %71, %60
  %73 = lshr i64 %72, 4
  %74 = trunc i64 %73 to i8
  %75 = and i8 %74, 1
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %75, i8* %76, align 1, !tbaa !2447
  %77 = icmp eq i64 %60, 0
  %78 = zext i1 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %78, i8* %79, align 1, !tbaa !2448
  %80 = lshr i64 %60, 63
  %81 = trunc i64 %80 to i8
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %81, i8* %82, align 1, !tbaa !2449
  %83 = lshr i64 %57, 63
  %84 = xor i64 %80, %83
  %85 = add nuw nsw i64 %84, %83
  %86 = icmp eq i64 %85, 2
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %87, i8* %88, align 1, !tbaa !2450
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 8
  %91 = load i64, i64* %RDI
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 16
  %97 = load i64, i64* %RSI
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 8
  store i64 %102, i64* %PC
  %103 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 16) to i32*)
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %104, align 1, !tbaa !2432
  %105 = and i32 %103, 255
  %106 = call i32 @llvm.ctpop.i32(i32 %105) #16
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %109, i8* %110, align 1, !tbaa !2446
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %111, align 1, !tbaa !2447
  %112 = icmp eq i32 %103, 0
  %113 = zext i1 %112 to i8
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %113, i8* %114, align 1, !tbaa !2448
  %115 = lshr i32 %103, 31
  %116 = trunc i32 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %116, i8* %117, align 1, !tbaa !2449
  %118 = lshr i32 %103, 31
  %119 = xor i32 %115, %118
  %120 = add nuw nsw i32 %119, %118
  %121 = icmp eq i32 %120, 2
  %122 = zext i1 %121 to i8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %122, i8* %123, align 1, !tbaa !2450
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 27
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 6
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 6
  store i64 %129, i64* %PC
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %131 = load i8, i8* %130, align 1, !tbaa !2448
  %132 = icmp eq i8 %131, 0
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %135 = select i1 %132, i64 %125, i64 %127
  store i64 %135, i64* %134, align 8, !tbaa !2428
  %136 = load i8, i8* %BRANCH_TAKEN
  %137 = icmp eq i8 %136, 1
  br i1 %137, label %block_4018a3, label %block_40188e

block_40191b:                                     ; preds = %block_401928, %block_40190f
  %MEMORY.0 = phi %struct.Memory* [ %312, %block_40190f ], [ %MEMORY.0, %block_401928 ]
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 20
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 7
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %139 to i32*
  %143 = load i32, i32* %142
  %144 = sub i32 %143, 188
  %145 = icmp ult i32 %143, 188
  %146 = zext i1 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %146, i8* %147, align 1, !tbaa !2432
  %148 = and i32 %144, 255
  %149 = call i32 @llvm.ctpop.i32(i32 %148) #16
  %150 = trunc i32 %149 to i8
  %151 = and i8 %150, 1
  %152 = xor i8 %151, 1
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %152, i8* %153, align 1, !tbaa !2446
  %154 = xor i32 %143, 188
  %155 = xor i32 %154, %144
  %156 = lshr i32 %155, 4
  %157 = trunc i32 %156 to i8
  %158 = and i8 %157, 1
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %158, i8* %159, align 1, !tbaa !2447
  %160 = icmp eq i32 %144, 0
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %161, i8* %162, align 1, !tbaa !2448
  %163 = lshr i32 %144, 31
  %164 = trunc i32 %163 to i8
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %164, i8* %165, align 1, !tbaa !2449
  %166 = lshr i32 %143, 31
  %167 = xor i32 %163, %166
  %168 = add nuw nsw i32 %167, %166
  %169 = icmp eq i32 %168, 2
  %170 = zext i1 %169 to i8
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %170, i8* %171, align 1, !tbaa !2450
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 42
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 6
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 6
  store i64 %177, i64* %PC
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %179 = load i8, i8* %178, align 1, !tbaa !2449
  %180 = icmp ne i8 %179, 0
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %182 = load i8, i8* %181, align 1, !tbaa !2450
  %183 = icmp ne i8 %182, 0
  %184 = xor i1 %180, %183
  %185 = xor i1 %184, true
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %188 = select i1 %184, i64 %175, i64 %173
  store i64 %188, i64* %187, align 8, !tbaa !2428
  %189 = load i8, i8* %BRANCH_TAKEN
  %190 = icmp eq i8 %189, 1
  %191 = load i64, i64* %RBP
  br i1 %190, label %block_40194c, label %block_401928

block_4018d8:                                     ; preds = %block_4018e5, %block_4018d1
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_4018d1 ], [ %MEMORY.1, %block_4018e5 ]
  %192 = load i64, i64* %RBP
  %193 = sub i64 %192, 20
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 7
  store i64 %195, i64* %PC
  %196 = inttoptr i64 %193 to i32*
  %197 = load i32, i32* %196
  %198 = sub i32 %197, 188
  %199 = icmp ult i32 %197, 188
  %200 = zext i1 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %200, i8* %201, align 1, !tbaa !2432
  %202 = and i32 %198, 255
  %203 = call i32 @llvm.ctpop.i32(i32 %202) #16
  %204 = trunc i32 %203 to i8
  %205 = and i8 %204, 1
  %206 = xor i8 %205, 1
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %206, i8* %207, align 1, !tbaa !2446
  %208 = xor i32 %197, 188
  %209 = xor i32 %208, %198
  %210 = lshr i32 %209, 4
  %211 = trunc i32 %210 to i8
  %212 = and i8 %211, 1
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %212, i8* %213, align 1, !tbaa !2447
  %214 = icmp eq i32 %198, 0
  %215 = zext i1 %214 to i8
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %215, i8* %216, align 1, !tbaa !2448
  %217 = lshr i32 %198, 31
  %218 = trunc i32 %217 to i8
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %218, i8* %219, align 1, !tbaa !2449
  %220 = lshr i32 %197, 31
  %221 = xor i32 %217, %220
  %222 = add nuw nsw i32 %221, %220
  %223 = icmp eq i32 %222, 2
  %224 = zext i1 %223 to i8
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %224, i8* %225, align 1, !tbaa !2450
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 48
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 6
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 6
  store i64 %231, i64* %PC
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %233 = load i8, i8* %232, align 1, !tbaa !2449
  %234 = icmp ne i8 %233, 0
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %236 = load i8, i8* %235, align 1, !tbaa !2450
  %237 = icmp ne i8 %236, 0
  %238 = xor i1 %234, %237
  %239 = xor i1 %238, true
  %240 = zext i1 %239 to i8
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = select i1 %238, i64 %229, i64 %227
  store i64 %242, i64* %241, align 8, !tbaa !2428
  %243 = load i8, i8* %BRANCH_TAKEN
  %244 = icmp eq i8 %243, 1
  br i1 %244, label %block_40190f, label %block_4018e5

block_4018d1:                                     ; preds = %block_4018aa
  %245 = add i64 %591, 7
  store i64 %245, i64* %PC
  %246 = inttoptr i64 %590 to i32*
  store i32 0, i32* %246
  br label %block_4018d8

block_401953:                                     ; preds = %block_40194c, %block_40195d
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_40194c ], [ %MEMORY.2, %block_40195d ]
  %247 = load i64, i64* %RBP
  %248 = sub i64 %247, 20
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 4
  store i64 %250, i64* %PC
  %251 = inttoptr i64 %248 to i32*
  %252 = load i32, i32* %251
  %253 = sub i32 %252, 16
  %254 = icmp ult i32 %252, 16
  %255 = zext i1 %254 to i8
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %255, i8* %256, align 1, !tbaa !2432
  %257 = and i32 %253, 255
  %258 = call i32 @llvm.ctpop.i32(i32 %257) #16
  %259 = trunc i32 %258 to i8
  %260 = and i8 %259, 1
  %261 = xor i8 %260, 1
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %261, i8* %262, align 1, !tbaa !2446
  %263 = xor i32 %252, 16
  %264 = xor i32 %263, %253
  %265 = lshr i32 %264, 4
  %266 = trunc i32 %265 to i8
  %267 = and i8 %266, 1
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %267, i8* %268, align 1, !tbaa !2447
  %269 = icmp eq i32 %253, 0
  %270 = zext i1 %269 to i8
  %271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %270, i8* %271, align 1, !tbaa !2448
  %272 = lshr i32 %253, 31
  %273 = trunc i32 %272 to i8
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %273, i8* %274, align 1, !tbaa !2449
  %275 = lshr i32 %252, 31
  %276 = xor i32 %272, %275
  %277 = add nuw nsw i32 %276, %275
  %278 = icmp eq i32 %277, 2
  %279 = zext i1 %278 to i8
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %279, i8* %280, align 1, !tbaa !2450
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 52
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 6
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 6
  store i64 %286, i64* %PC
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %288 = load i8, i8* %287, align 1, !tbaa !2449
  %289 = icmp ne i8 %288, 0
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %291 = load i8, i8* %290, align 1, !tbaa !2450
  %292 = icmp ne i8 %291, 0
  %293 = xor i1 %289, %292
  %294 = xor i1 %293, true
  %295 = zext i1 %294 to i8
  store i8 %295, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %297 = select i1 %293, i64 %284, i64 %282
  store i64 %297, i64* %296, align 8, !tbaa !2428
  %298 = load i8, i8* %BRANCH_TAKEN
  %299 = icmp eq i8 %298, 1
  br i1 %299, label %block_40198b, label %block_40195d

block_40190f:                                     ; preds = %block_4018d8
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 145
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 5
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 5
  store i64 %305, i64* %PC
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %307 = load i64, i64* %306, align 8, !tbaa !2428
  %308 = add i64 %307, -8
  %309 = inttoptr i64 %308 to i64*
  store i64 %303, i64* %309
  store i64 %308, i64* %306, align 8, !tbaa !2428
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %301, i64* %310, align 8, !tbaa !2428
  %311 = load i64, i64* %PC
  %312 = call %struct.Memory* @sub_4019a0_encode_rs(%struct.State* %0, i64 %311, %struct.Memory* %MEMORY.1)
  %313 = load i64, i64* %RBP
  %314 = sub i64 %313, 20
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 7
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %314 to i32*
  store i32 0, i32* %317
  br label %block_40191b

block_40188e:                                     ; preds = %block_401870
  %318 = load i64, i64* %PC
  %319 = sub i64 %318, 4622
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 5
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 5
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %325 = load i64, i64* %324, align 8, !tbaa !2428
  %326 = add i64 %325, -8
  %327 = inttoptr i64 %326 to i64*
  store i64 %321, i64* %327
  store i64 %326, i64* %324, align 8, !tbaa !2428
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %319, i64* %328, align 8, !tbaa !2428
  %329 = load i64, i64* %PC
  %330 = call %struct.Memory* @sub_400680_generate_gf(%struct.State* %0, i64 %329, %struct.Memory* %2)
  %331 = load i64, i64* %PC
  %332 = sub i64 %331, 4291
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 5
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 5
  store i64 %336, i64* %PC
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %338 = load i64, i64* %337, align 8, !tbaa !2428
  %339 = add i64 %338, -8
  %340 = inttoptr i64 %339 to i64*
  store i64 %334, i64* %340
  store i64 %339, i64* %337, align 8, !tbaa !2428
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %332, i64* %341, align 8, !tbaa !2428
  %342 = load i64, i64* %PC
  %343 = call %struct.Memory* @sub_4007d0_gen_poly(%struct.State* %0, i64 %342, %struct.Memory* %330)
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 11
  store i64 %345, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 16) to i32*)
  br label %block_4018a3

block_40195d:                                     ; preds = %block_401953
  %346 = load i64, i64* %RBP
  %347 = sub i64 %346, 20
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 4
  store i64 %349, i64* %PC
  %350 = inttoptr i64 %347 to i32*
  %351 = load i32, i32* %350
  %352 = sext i32 %351 to i64
  store i64 %352, i64* %RAX, align 8, !tbaa !2428
  %353 = load i64, i64* %RAX
  %354 = mul i64 %353, 4
  %355 = add i64 %354, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4144)
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 7
  store i64 %357, i64* %PC
  %358 = inttoptr i64 %355 to i32*
  %359 = load i32, i32* %358
  %360 = zext i32 %359 to i64
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = load i8, i8* %CL
  %362 = zext i8 %361 to i64
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 2
  store i64 %364, i64* %PC
  store i8 %361, i8* %DL, align 1, !tbaa !2451
  %365 = load i64, i64* %RBP
  %366 = sub i64 %365, 8
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 4
  store i64 %368, i64* %PC
  %369 = inttoptr i64 %366 to i64*
  %370 = load i64, i64* %369
  store i64 %370, i64* %RAX, align 8, !tbaa !2428
  %371 = load i64, i64* %RBP
  %372 = sub i64 %371, 20
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 3
  store i64 %374, i64* %PC
  %375 = inttoptr i64 %372 to i32*
  %376 = load i32, i32* %375
  %377 = zext i32 %376 to i64
  store i64 %377, i64* %RCX, align 8, !tbaa !2428
  %378 = load i64, i64* %RCX
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 6
  store i64 %380, i64* %PC
  %381 = trunc i64 %378 to i32
  %382 = add i32 188, %381
  %383 = zext i32 %382 to i64
  store i64 %383, i64* %RCX, align 8, !tbaa !2428
  %384 = icmp ult i32 %382, %381
  %385 = icmp ult i32 %382, 188
  %386 = or i1 %384, %385
  %387 = zext i1 %386 to i8
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %387, i8* %388, align 1, !tbaa !2432
  %389 = and i32 %382, 255
  %390 = call i32 @llvm.ctpop.i32(i32 %389) #16
  %391 = trunc i32 %390 to i8
  %392 = and i8 %391, 1
  %393 = xor i8 %392, 1
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %393, i8* %394, align 1, !tbaa !2446
  %395 = xor i64 188, %378
  %396 = trunc i64 %395 to i32
  %397 = xor i32 %396, %382
  %398 = lshr i32 %397, 4
  %399 = trunc i32 %398 to i8
  %400 = and i8 %399, 1
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %400, i8* %401, align 1, !tbaa !2447
  %402 = icmp eq i32 %382, 0
  %403 = zext i1 %402 to i8
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %403, i8* %404, align 1, !tbaa !2448
  %405 = lshr i32 %382, 31
  %406 = trunc i32 %405 to i8
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %406, i8* %407, align 1, !tbaa !2449
  %408 = lshr i32 %381, 31
  %409 = xor i32 %405, %408
  %410 = add nuw nsw i32 %409, %405
  %411 = icmp eq i32 %410, 2
  %412 = zext i1 %411 to i8
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %412, i8* %413, align 1, !tbaa !2450
  %414 = load i32, i32* %ECX
  %415 = zext i32 %414 to i64
  %416 = load i64, i64* %PC
  %417 = add i64 %416, 3
  store i64 %417, i64* %PC
  %418 = shl i64 %415, 32
  %419 = ashr exact i64 %418, 32
  store i64 %419, i64* %RSI, align 8, !tbaa !2428
  %420 = load i64, i64* %RAX
  %421 = load i64, i64* %RSI
  %422 = add i64 %421, %420
  %423 = load i8, i8* %DL
  %424 = zext i8 %423 to i64
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 3
  store i64 %426, i64* %PC
  %427 = inttoptr i64 %422 to i8*
  store i8 %423, i8* %427
  %428 = load i64, i64* %RBP
  %429 = sub i64 %428, 20
  %430 = load i64, i64* %PC
  %431 = add i64 %430, 3
  store i64 %431, i64* %PC
  %432 = inttoptr i64 %429 to i32*
  %433 = load i32, i32* %432
  %434 = zext i32 %433 to i64
  store i64 %434, i64* %RAX, align 8, !tbaa !2428
  %435 = load i64, i64* %RAX
  %436 = load i64, i64* %PC
  %437 = add i64 %436, 3
  store i64 %437, i64* %PC
  %438 = trunc i64 %435 to i32
  %439 = add i32 1, %438
  %440 = zext i32 %439 to i64
  store i64 %440, i64* %RAX, align 8, !tbaa !2428
  %441 = icmp ult i32 %439, %438
  %442 = icmp ult i32 %439, 1
  %443 = or i1 %441, %442
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %444, i8* %445, align 1, !tbaa !2432
  %446 = and i32 %439, 255
  %447 = call i32 @llvm.ctpop.i32(i32 %446) #16
  %448 = trunc i32 %447 to i8
  %449 = and i8 %448, 1
  %450 = xor i8 %449, 1
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %450, i8* %451, align 1, !tbaa !2446
  %452 = xor i64 1, %435
  %453 = trunc i64 %452 to i32
  %454 = xor i32 %453, %439
  %455 = lshr i32 %454, 4
  %456 = trunc i32 %455 to i8
  %457 = and i8 %456, 1
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %457, i8* %458, align 1, !tbaa !2447
  %459 = icmp eq i32 %439, 0
  %460 = zext i1 %459 to i8
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %460, i8* %461, align 1, !tbaa !2448
  %462 = lshr i32 %439, 31
  %463 = trunc i32 %462 to i8
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %463, i8* %464, align 1, !tbaa !2449
  %465 = lshr i32 %438, 31
  %466 = xor i32 %462, %465
  %467 = add nuw nsw i32 %466, %462
  %468 = icmp eq i32 %467, 2
  %469 = zext i1 %468 to i8
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %469, i8* %470, align 1, !tbaa !2450
  %471 = load i64, i64* %RBP
  %472 = sub i64 %471, 20
  %473 = load i32, i32* %EAX
  %474 = zext i32 %473 to i64
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 3
  store i64 %476, i64* %PC
  %477 = inttoptr i64 %472 to i32*
  store i32 %473, i32* %477
  %478 = load i64, i64* %PC
  %479 = sub i64 %478, 51
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 5
  store i64 %481, i64* %PC
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %479, i64* %482, align 8, !tbaa !2428
  br label %block_401953

block_40194c:                                     ; preds = %block_40191b
  %483 = sub i64 %191, 20
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 7
  store i64 %485, i64* %PC
  %486 = inttoptr i64 %483 to i32*
  store i32 0, i32* %486
  br label %block_401953

block_40198b:                                     ; preds = %block_401953
  %487 = load i64, i64* %RSP
  %488 = load i64, i64* %PC
  %489 = add i64 %488, 4
  store i64 %489, i64* %PC
  %490 = add i64 32, %487
  store i64 %490, i64* %RSP, align 8, !tbaa !2428
  %491 = icmp ult i64 %490, %487
  %492 = icmp ult i64 %490, 32
  %493 = or i1 %491, %492
  %494 = zext i1 %493 to i8
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %494, i8* %495, align 1, !tbaa !2432
  %496 = trunc i64 %490 to i32
  %497 = and i32 %496, 255
  %498 = call i32 @llvm.ctpop.i32(i32 %497) #16
  %499 = trunc i32 %498 to i8
  %500 = and i8 %499, 1
  %501 = xor i8 %500, 1
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %501, i8* %502, align 1, !tbaa !2446
  %503 = xor i64 32, %487
  %504 = xor i64 %503, %490
  %505 = lshr i64 %504, 4
  %506 = trunc i64 %505 to i8
  %507 = and i8 %506, 1
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %507, i8* %508, align 1, !tbaa !2447
  %509 = icmp eq i64 %490, 0
  %510 = zext i1 %509 to i8
  %511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %510, i8* %511, align 1, !tbaa !2448
  %512 = lshr i64 %490, 63
  %513 = trunc i64 %512 to i8
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %513, i8* %514, align 1, !tbaa !2449
  %515 = lshr i64 %487, 63
  %516 = xor i64 %512, %515
  %517 = add nuw nsw i64 %516, %512
  %518 = icmp eq i64 %517, 2
  %519 = zext i1 %518 to i8
  %520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %519, i8* %520, align 1, !tbaa !2450
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 1
  store i64 %522, i64* %PC
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %524 = load i64, i64* %523, align 8, !tbaa !2428
  %525 = add i64 %524, 8
  %526 = inttoptr i64 %524 to i64*
  %527 = load i64, i64* %526
  store i64 %527, i64* %RBP, align 8, !tbaa !2428
  store i64 %525, i64* %523, align 8, !tbaa !2428
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 1
  store i64 %529, i64* %PC
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %532 = load i64, i64* %531, align 8, !tbaa !2428
  %533 = inttoptr i64 %532 to i64*
  %534 = load i64, i64* %533
  store i64 %534, i64* %530, align 8, !tbaa !2428
  %535 = add i64 %532, 8
  store i64 %535, i64* %531, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_4018aa:                                     ; preds = %block_4018a3, %block_4018b4
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.4, %block_4018a3 ], [ %MEMORY.3, %block_4018b4 ]
  %536 = load i64, i64* %RBP
  %537 = sub i64 %536, 20
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 4
  store i64 %539, i64* %PC
  %540 = inttoptr i64 %537 to i32*
  %541 = load i32, i32* %540
  %542 = sub i32 %541, 51
  %543 = icmp ult i32 %541, 51
  %544 = zext i1 %543 to i8
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %544, i8* %545, align 1, !tbaa !2432
  %546 = and i32 %542, 255
  %547 = call i32 @llvm.ctpop.i32(i32 %546) #16
  %548 = trunc i32 %547 to i8
  %549 = and i8 %548, 1
  %550 = xor i8 %549, 1
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %550, i8* %551, align 1, !tbaa !2446
  %552 = xor i32 %541, 51
  %553 = xor i32 %552, %542
  %554 = lshr i32 %553, 4
  %555 = trunc i32 %554 to i8
  %556 = and i8 %555, 1
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %556, i8* %557, align 1, !tbaa !2447
  %558 = icmp eq i32 %542, 0
  %559 = zext i1 %558 to i8
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %559, i8* %560, align 1, !tbaa !2448
  %561 = lshr i32 %542, 31
  %562 = trunc i32 %561 to i8
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %562, i8* %563, align 1, !tbaa !2449
  %564 = lshr i32 %541, 31
  %565 = xor i32 %561, %564
  %566 = add nuw nsw i32 %565, %564
  %567 = icmp eq i32 %566, 2
  %568 = zext i1 %567 to i8
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %568, i8* %569, align 1, !tbaa !2450
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 35
  %572 = load i64, i64* %PC
  %573 = add i64 %572, 6
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 6
  store i64 %575, i64* %PC
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %577 = load i8, i8* %576, align 1, !tbaa !2449
  %578 = icmp ne i8 %577, 0
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %580 = load i8, i8* %579, align 1, !tbaa !2450
  %581 = icmp ne i8 %580, 0
  %582 = xor i1 %578, %581
  %583 = xor i1 %582, true
  %584 = zext i1 %583 to i8
  store i8 %584, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %586 = select i1 %582, i64 %573, i64 %571
  store i64 %586, i64* %585, align 8, !tbaa !2428
  %587 = load i8, i8* %BRANCH_TAKEN
  %588 = icmp eq i8 %587, 1
  %589 = load i64, i64* %RBP
  %590 = sub i64 %589, 20
  %591 = load i64, i64* %PC
  br i1 %588, label %block_4018d1, label %block_4018b4

block_401928:                                     ; preds = %block_40191b
  %592 = sub i64 %191, 16
  %593 = load i64, i64* %PC
  %594 = add i64 %593, 4
  store i64 %594, i64* %PC
  %595 = inttoptr i64 %592 to i64*
  %596 = load i64, i64* %595
  store i64 %596, i64* %RAX, align 8, !tbaa !2428
  %597 = load i64, i64* %RBP
  %598 = sub i64 %597, 20
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 4
  store i64 %600, i64* %PC
  %601 = inttoptr i64 %598 to i32*
  %602 = load i32, i32* %601
  %603 = sext i32 %602 to i64
  store i64 %603, i64* %RCX, align 8, !tbaa !2428
  %604 = load i64, i64* %RAX
  %605 = load i64, i64* %RCX
  %606 = add i64 %605, %604
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 3
  store i64 %608, i64* %PC
  %609 = inttoptr i64 %606 to i8*
  %610 = load i8, i8* %609
  store i8 %610, i8* %DL, align 1, !tbaa !2451
  %611 = load i64, i64* %RBP
  %612 = sub i64 %611, 8
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 4
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to i64*
  %616 = load i64, i64* %615
  store i64 %616, i64* %RAX, align 8, !tbaa !2428
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 20
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 4
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  %622 = load i32, i32* %621
  %623 = sext i32 %622 to i64
  store i64 %623, i64* %RCX, align 8, !tbaa !2428
  %624 = load i64, i64* %RAX
  %625 = load i64, i64* %RCX
  %626 = add i64 %625, %624
  %627 = load i8, i8* %DL
  %628 = zext i8 %627 to i64
  %629 = load i64, i64* %PC
  %630 = add i64 %629, 3
  store i64 %630, i64* %PC
  %631 = inttoptr i64 %626 to i8*
  store i8 %627, i8* %631
  %632 = load i64, i64* %RBP
  %633 = sub i64 %632, 20
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 3
  store i64 %635, i64* %PC
  %636 = inttoptr i64 %633 to i32*
  %637 = load i32, i32* %636
  %638 = zext i32 %637 to i64
  store i64 %638, i64* %RAX, align 8, !tbaa !2428
  %639 = load i64, i64* %RAX
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 3
  store i64 %641, i64* %PC
  %642 = trunc i64 %639 to i32
  %643 = add i32 1, %642
  %644 = zext i32 %643 to i64
  store i64 %644, i64* %RAX, align 8, !tbaa !2428
  %645 = icmp ult i32 %643, %642
  %646 = icmp ult i32 %643, 1
  %647 = or i1 %645, %646
  %648 = zext i1 %647 to i8
  %649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %648, i8* %649, align 1, !tbaa !2432
  %650 = and i32 %643, 255
  %651 = call i32 @llvm.ctpop.i32(i32 %650) #16
  %652 = trunc i32 %651 to i8
  %653 = and i8 %652, 1
  %654 = xor i8 %653, 1
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %654, i8* %655, align 1, !tbaa !2446
  %656 = xor i64 1, %639
  %657 = trunc i64 %656 to i32
  %658 = xor i32 %657, %643
  %659 = lshr i32 %658, 4
  %660 = trunc i32 %659 to i8
  %661 = and i8 %660, 1
  %662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %661, i8* %662, align 1, !tbaa !2447
  %663 = icmp eq i32 %643, 0
  %664 = zext i1 %663 to i8
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %664, i8* %665, align 1, !tbaa !2448
  %666 = lshr i32 %643, 31
  %667 = trunc i32 %666 to i8
  %668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %667, i8* %668, align 1, !tbaa !2449
  %669 = lshr i32 %642, 31
  %670 = xor i32 %666, %669
  %671 = add nuw nsw i32 %670, %666
  %672 = icmp eq i32 %671, 2
  %673 = zext i1 %672 to i8
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %673, i8* %674, align 1, !tbaa !2450
  %675 = load i64, i64* %RBP
  %676 = sub i64 %675, 20
  %677 = load i32, i32* %EAX
  %678 = zext i32 %677 to i64
  %679 = load i64, i64* %PC
  %680 = add i64 %679, 3
  store i64 %680, i64* %PC
  %681 = inttoptr i64 %676 to i32*
  store i32 %677, i32* %681
  %682 = load i64, i64* %PC
  %683 = sub i64 %682, 44
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 5
  store i64 %685, i64* %PC
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %683, i64* %686, align 8, !tbaa !2428
  br label %block_40191b

block_4018e5:                                     ; preds = %block_4018d8
  %687 = load i64, i64* %RBP
  %688 = sub i64 %687, 16
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 4
  store i64 %690, i64* %PC
  %691 = inttoptr i64 %688 to i64*
  %692 = load i64, i64* %691
  store i64 %692, i64* %RAX, align 8, !tbaa !2428
  %693 = load i64, i64* %RBP
  %694 = sub i64 %693, 20
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 4
  store i64 %696, i64* %PC
  %697 = inttoptr i64 %694 to i32*
  %698 = load i32, i32* %697
  %699 = sext i32 %698 to i64
  store i64 %699, i64* %RCX, align 8, !tbaa !2428
  %700 = load i64, i64* %RAX
  %701 = load i64, i64* %RCX
  %702 = add i64 %701, %700
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 4
  store i64 %704, i64* %PC
  %705 = inttoptr i64 %702 to i8*
  %706 = load i8, i8* %705
  %707 = zext i8 %706 to i64
  store i64 %707, i64* %RDX, align 8, !tbaa !2428
  %708 = load i64, i64* %RBP
  %709 = sub i64 %708, 20
  %710 = load i64, i64* %PC
  %711 = add i64 %710, 3
  store i64 %711, i64* %PC
  %712 = inttoptr i64 %709 to i32*
  %713 = load i32, i32* %712
  %714 = zext i32 %713 to i64
  store i64 %714, i64* %RSI, align 8, !tbaa !2428
  %715 = load i64, i64* %RSI
  %716 = load i64, i64* %PC
  %717 = add i64 %716, 3
  store i64 %717, i64* %PC
  %718 = trunc i64 %715 to i32
  %719 = add i32 51, %718
  %720 = zext i32 %719 to i64
  store i64 %720, i64* %RSI, align 8, !tbaa !2428
  %721 = icmp ult i32 %719, %718
  %722 = icmp ult i32 %719, 51
  %723 = or i1 %721, %722
  %724 = zext i1 %723 to i8
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %724, i8* %725, align 1, !tbaa !2432
  %726 = and i32 %719, 255
  %727 = call i32 @llvm.ctpop.i32(i32 %726) #16
  %728 = trunc i32 %727 to i8
  %729 = and i8 %728, 1
  %730 = xor i8 %729, 1
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %730, i8* %731, align 1, !tbaa !2446
  %732 = xor i64 51, %715
  %733 = trunc i64 %732 to i32
  %734 = xor i32 %733, %719
  %735 = lshr i32 %734, 4
  %736 = trunc i32 %735 to i8
  %737 = and i8 %736, 1
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %737, i8* %738, align 1, !tbaa !2447
  %739 = icmp eq i32 %719, 0
  %740 = zext i1 %739 to i8
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %740, i8* %741, align 1, !tbaa !2448
  %742 = lshr i32 %719, 31
  %743 = trunc i32 %742 to i8
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %743, i8* %744, align 1, !tbaa !2449
  %745 = lshr i32 %718, 31
  %746 = xor i32 %742, %745
  %747 = add nuw nsw i32 %746, %742
  %748 = icmp eq i32 %747, 2
  %749 = zext i1 %748 to i8
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %749, i8* %750, align 1, !tbaa !2450
  %751 = load i32, i32* %ESI
  %752 = zext i32 %751 to i64
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 3
  store i64 %754, i64* %PC
  %755 = shl i64 %752, 32
  %756 = ashr exact i64 %755, 32
  store i64 %756, i64* %RAX, align 8, !tbaa !2428
  %757 = load i64, i64* %RAX
  %758 = mul i64 %757, 4
  %759 = add i64 %758, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3184)
  %760 = load i32, i32* %EDX
  %761 = zext i32 %760 to i64
  %762 = load i64, i64* %PC
  %763 = add i64 %762, 7
  store i64 %763, i64* %PC
  %764 = inttoptr i64 %759 to i32*
  store i32 %760, i32* %764
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 20
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 3
  store i64 %768, i64* %PC
  %769 = inttoptr i64 %766 to i32*
  %770 = load i32, i32* %769
  %771 = zext i32 %770 to i64
  store i64 %771, i64* %RAX, align 8, !tbaa !2428
  %772 = load i64, i64* %RAX
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 3
  store i64 %774, i64* %PC
  %775 = trunc i64 %772 to i32
  %776 = add i32 1, %775
  %777 = zext i32 %776 to i64
  store i64 %777, i64* %RAX, align 8, !tbaa !2428
  %778 = icmp ult i32 %776, %775
  %779 = icmp ult i32 %776, 1
  %780 = or i1 %778, %779
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %781, i8* %782, align 1, !tbaa !2432
  %783 = and i32 %776, 255
  %784 = call i32 @llvm.ctpop.i32(i32 %783) #16
  %785 = trunc i32 %784 to i8
  %786 = and i8 %785, 1
  %787 = xor i8 %786, 1
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %787, i8* %788, align 1, !tbaa !2446
  %789 = xor i64 1, %772
  %790 = trunc i64 %789 to i32
  %791 = xor i32 %790, %776
  %792 = lshr i32 %791, 4
  %793 = trunc i32 %792 to i8
  %794 = and i8 %793, 1
  %795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %794, i8* %795, align 1, !tbaa !2447
  %796 = icmp eq i32 %776, 0
  %797 = zext i1 %796 to i8
  %798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %797, i8* %798, align 1, !tbaa !2448
  %799 = lshr i32 %776, 31
  %800 = trunc i32 %799 to i8
  %801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %800, i8* %801, align 1, !tbaa !2449
  %802 = lshr i32 %775, 31
  %803 = xor i32 %799, %802
  %804 = add nuw nsw i32 %803, %799
  %805 = icmp eq i32 %804, 2
  %806 = zext i1 %805 to i8
  %807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %806, i8* %807, align 1, !tbaa !2450
  %808 = load i64, i64* %RBP
  %809 = sub i64 %808, 20
  %810 = load i32, i32* %EAX
  %811 = zext i32 %810 to i64
  %812 = load i64, i64* %PC
  %813 = add i64 %812, 3
  store i64 %813, i64* %PC
  %814 = inttoptr i64 %809 to i32*
  store i32 %810, i32* %814
  %815 = load i64, i64* %PC
  %816 = sub i64 %815, 50
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 5
  store i64 %818, i64* %PC
  %819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %816, i64* %819, align 8, !tbaa !2428
  br label %block_4018d8

block_4018b4:                                     ; preds = %block_4018aa
  %820 = add i64 %591, 4
  store i64 %820, i64* %PC
  %821 = inttoptr i64 %590 to i32*
  %822 = load i32, i32* %821
  %823 = sext i32 %822 to i64
  store i64 %823, i64* %RAX, align 8, !tbaa !2428
  %824 = load i64, i64* %RAX
  %825 = mul i64 %824, 4
  %826 = add i64 %825, add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 3184)
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 11
  store i64 %828, i64* %PC
  %829 = inttoptr i64 %826 to i32*
  store i32 0, i32* %829
  %830 = load i64, i64* %RBP
  %831 = sub i64 %830, 20
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 3
  store i64 %833, i64* %PC
  %834 = inttoptr i64 %831 to i32*
  %835 = load i32, i32* %834
  %836 = zext i32 %835 to i64
  store i64 %836, i64* %RAX, align 8, !tbaa !2428
  %837 = load i64, i64* %RAX
  %838 = load i64, i64* %PC
  %839 = add i64 %838, 3
  store i64 %839, i64* %PC
  %840 = trunc i64 %837 to i32
  %841 = add i32 1, %840
  %842 = zext i32 %841 to i64
  store i64 %842, i64* %RAX, align 8, !tbaa !2428
  %843 = icmp ult i32 %841, %840
  %844 = icmp ult i32 %841, 1
  %845 = or i1 %843, %844
  %846 = zext i1 %845 to i8
  %847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %846, i8* %847, align 1, !tbaa !2432
  %848 = and i32 %841, 255
  %849 = call i32 @llvm.ctpop.i32(i32 %848) #16
  %850 = trunc i32 %849 to i8
  %851 = and i8 %850, 1
  %852 = xor i8 %851, 1
  %853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %852, i8* %853, align 1, !tbaa !2446
  %854 = xor i64 1, %837
  %855 = trunc i64 %854 to i32
  %856 = xor i32 %855, %841
  %857 = lshr i32 %856, 4
  %858 = trunc i32 %857 to i8
  %859 = and i8 %858, 1
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %859, i8* %860, align 1, !tbaa !2447
  %861 = icmp eq i32 %841, 0
  %862 = zext i1 %861 to i8
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %862, i8* %863, align 1, !tbaa !2448
  %864 = lshr i32 %841, 31
  %865 = trunc i32 %864 to i8
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %865, i8* %866, align 1, !tbaa !2449
  %867 = lshr i32 %840, 31
  %868 = xor i32 %864, %867
  %869 = add nuw nsw i32 %868, %864
  %870 = icmp eq i32 %869, 2
  %871 = zext i1 %870 to i8
  %872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %871, i8* %872, align 1, !tbaa !2450
  %873 = load i64, i64* %RBP
  %874 = sub i64 %873, 20
  %875 = load i32, i32* %EAX
  %876 = zext i32 %875 to i64
  %877 = load i64, i64* %PC
  %878 = add i64 %877, 3
  store i64 %878, i64* %PC
  %879 = inttoptr i64 %874 to i32*
  store i32 %875, i32* %879
  %880 = load i64, i64* %PC
  %881 = sub i64 %880, 34
  %882 = load i64, i64* %PC
  %883 = add i64 %882, 5
  store i64 %883, i64* %PC
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %881, i64* %884, align 8, !tbaa !2428
  br label %block_4018aa

block_4018a3:                                     ; preds = %block_40188e, %block_401870
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_401870 ], [ %343, %block_40188e ]
  %885 = load i64, i64* %RBP
  %886 = sub i64 %885, 20
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 7
  store i64 %888, i64* %PC
  %889 = inttoptr i64 %886 to i32*
  store i32 0, i32* %889
  br label %block_4018aa
}

; Function Attrs: noinline
define %struct.Memory* @sub_401b30_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401b30:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 5
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %ECX = bitcast %union.anon* %19 to i32*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 7
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %EDX = bitcast %union.anon* %22 to i32*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %RAX = bitcast %union.anon* %25 to i64*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 5
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RCX = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 7
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RDX = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 9
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RSI = bitcast %union.anon* %34 to i64*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 11
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %RDI = bitcast %union.anon* %37 to i64*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %39 = getelementptr inbounds %struct.GPR, %struct.GPR* %38, i32 0, i32 13
  %40 = getelementptr inbounds %struct.Reg, %struct.Reg* %39, i32 0, i32 0
  %RSP = bitcast %union.anon* %40 to i64*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %42 = getelementptr inbounds %struct.GPR, %struct.GPR* %41, i32 0, i32 15
  %43 = getelementptr inbounds %struct.Reg, %struct.Reg* %42, i32 0, i32 0
  %RBP = bitcast %union.anon* %43 to i64*
  %44 = load i64, i64* %RBP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 1
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = load i64, i64* %RSP
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC
  store i64 %51, i64* %RBP, align 8, !tbaa !2428
  %54 = load i64, i64* %RSP
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 7
  store i64 %56, i64* %PC
  %57 = sub i64 %54, 432
  store i64 %57, i64* %RSP, align 8, !tbaa !2428
  %58 = icmp ult i64 %54, 432
  %59 = zext i1 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %59, i8* %60, align 1, !tbaa !2432
  %61 = trunc i64 %57 to i32
  %62 = and i32 %61, 255
  %63 = call i32 @llvm.ctpop.i32(i32 %62) #16
  %64 = trunc i32 %63 to i8
  %65 = and i8 %64, 1
  %66 = xor i8 %65, 1
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %66, i8* %67, align 1, !tbaa !2446
  %68 = xor i64 432, %54
  %69 = xor i64 %68, %57
  %70 = lshr i64 %69, 4
  %71 = trunc i64 %70 to i8
  %72 = and i8 %71, 1
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %72, i8* %73, align 1, !tbaa !2447
  %74 = icmp eq i64 %57, 0
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %75, i8* %76, align 1, !tbaa !2448
  %77 = lshr i64 %57, 63
  %78 = trunc i64 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %78, i8* %79, align 1, !tbaa !2449
  %80 = lshr i64 %54, 63
  %81 = xor i64 %77, %80
  %82 = add nuw nsw i64 %81, %80
  %83 = icmp eq i64 %82, 2
  %84 = zext i1 %83 to i8
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %84, i8* %85, align 1, !tbaa !2450
  %86 = load i64, i64* %RBP
  %87 = sub i64 %86, 4
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 7
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %87 to i32*
  store i32 0, i32* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 420
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 10
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %92 to i32*
  store i32 0, i32* %95
  br label %block_401b4c

block_401be5:                                     ; preds = %block_401bd3
  %96 = load i64, i64* %PC
  %97 = sub i64 %96, 6101
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 5
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 5
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %97, i64* %106, align 8, !tbaa !2428
  %107 = load i64, i64* %PC
  %108 = call %struct.Memory* @ext_6040d8_random(%struct.State* %0, i64 %107, %struct.Memory* %MEMORY.0)
  %109 = load i64, i64* %RAX
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 6
  store i64 %111, i64* %PC
  %112 = and i64 255, %109
  store i64 %112, i64* %RAX, align 8, !tbaa !2428
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %113, align 1, !tbaa !2432
  %114 = trunc i64 %112 to i32
  %115 = and i32 %114, 255
  %116 = call i32 @llvm.ctpop.i32(i32 %115) #16
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  %119 = xor i8 %118, 1
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %119, i8* %120, align 1, !tbaa !2446
  %121 = icmp eq i64 %112, 0
  %122 = zext i1 %121 to i8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %122, i8* %123, align 1, !tbaa !2448
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %124, align 1, !tbaa !2449
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %125, align 1, !tbaa !2450
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %126, align 1, !tbaa !2447
  %127 = load i8, i8* %AL
  %128 = zext i8 %127 to i64
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 2
  store i64 %130, i64* %PC
  store i8 %127, i8* %CL, align 1, !tbaa !2451
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 429
  %133 = load i8, i8* %CL
  %134 = zext i8 %133 to i64
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 6
  store i64 %136, i64* %PC
  %137 = inttoptr i64 %132 to i8*
  store i8 %133, i8* %137
  %138 = load i64, i64* %PC
  %139 = sub i64 %138, 6120
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 5
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 5
  store i64 %143, i64* %PC
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %145 = load i64, i64* %144, align 8, !tbaa !2428
  %146 = add i64 %145, -8
  %147 = inttoptr i64 %146 to i64*
  store i64 %141, i64* %147
  store i64 %146, i64* %144, align 8, !tbaa !2428
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %139, i64* %148, align 8, !tbaa !2428
  %149 = load i64, i64* %PC
  %150 = call %struct.Memory* @ext_6040d8_random(%struct.State* %0, i64 %149, %struct.Memory* %108)
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 5
  store i64 %152, i64* %PC
  store i64 204, i64* %RDX, align 8, !tbaa !2428
  %153 = load i32, i32* %EDX
  %154 = zext i32 %153 to i64
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 2
  store i64 %156, i64* %PC
  %157 = and i64 %154, 4294967295
  store i64 %157, i64* %RSI, align 8, !tbaa !2428
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 2
  store i64 %159, i64* %PC
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %162 = load i64, i64* %161, align 8, !tbaa !2428
  %163 = ashr i64 %162, 63
  store i64 %163, i64* %160, align 8, !tbaa !2428
  %164 = load i64, i64* %RSI
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 3
  store i64 %166, i64* %PC
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %168 = load i64, i64* %167, align 8, !tbaa !2428
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %170 = load i64, i64* %169, align 8, !tbaa !2428
  %171 = sext i64 %164 to i128
  %172 = and i128 %171, -18446744073709551616
  %173 = zext i64 %170 to i128
  %174 = shl nuw i128 %173, 64
  %175 = zext i64 %168 to i128
  %176 = or i128 %174, %175
  %177 = zext i64 %164 to i128
  %178 = or i128 %172, %177
  %179 = sdiv i128 %176, %178
  %180 = trunc i128 %179 to i64
  %181 = and i128 %179, 18446744073709551615
  %182 = sext i64 %180 to i128
  %183 = and i128 %182, -18446744073709551616
  %184 = or i128 %183, %181
  %185 = icmp eq i128 %179, %184
  br i1 %185, label %190, label %186

; <label>:186:                                    ; preds = %block_401be5
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %188 = load i64, i64* %187, align 8, !tbaa !2428
  %189 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %188, %struct.Memory* %150) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:190:                                    ; preds = %block_401be5
  %191 = srem i128 %176, %178
  %192 = trunc i128 %191 to i64
  store i64 %180, i64* %167, align 8, !tbaa !2428
  store i64 %192, i64* %169, align 8, !tbaa !2428
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %193, align 1, !tbaa !2432
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %194, align 1, !tbaa !2446
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %195, align 1, !tbaa !2447
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %196, align 1, !tbaa !2448
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %197, align 1, !tbaa !2449
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %186, %190
  %199 = phi %struct.Memory* [ %189, %186 ], [ %150, %190 ]
  %200 = load i64, i64* %RBP
  %201 = sub i64 %200, 429
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 6
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i8*
  %205 = load i8, i8* %204
  store i8 %205, i8* %CL, align 1, !tbaa !2451
  %206 = load i64, i64* %RBP
  %207 = load i64, i64* %RDX
  %208 = add i64 %206, -416
  %209 = add i64 %208, %207
  %210 = load i8, i8* %CL
  %211 = zext i8 %210 to i64
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 7
  store i64 %213, i64* %PC
  %214 = inttoptr i64 %209 to i8*
  store i8 %210, i8* %214
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 424
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 6
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i32*
  %220 = load i32, i32* %219
  %221 = zext i32 %220 to i64
  store i64 %221, i64* %RAX, align 8, !tbaa !2428
  %222 = load i64, i64* %RAX
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 3
  store i64 %224, i64* %PC
  %225 = trunc i64 %222 to i32
  %226 = add i32 1, %225
  %227 = zext i32 %226 to i64
  store i64 %227, i64* %RAX, align 8, !tbaa !2428
  %228 = icmp ult i32 %226, %225
  %229 = icmp ult i32 %226, 1
  %230 = or i1 %228, %229
  %231 = zext i1 %230 to i8
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %231, i8* %232, align 1, !tbaa !2432
  %233 = and i32 %226, 255
  %234 = call i32 @llvm.ctpop.i32(i32 %233) #16
  %235 = trunc i32 %234 to i8
  %236 = and i8 %235, 1
  %237 = xor i8 %236, 1
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %237, i8* %238, align 1, !tbaa !2446
  %239 = xor i64 1, %222
  %240 = trunc i64 %239 to i32
  %241 = xor i32 %240, %226
  %242 = lshr i32 %241, 4
  %243 = trunc i32 %242 to i8
  %244 = and i8 %243, 1
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %244, i8* %245, align 1, !tbaa !2447
  %246 = icmp eq i32 %226, 0
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %247, i8* %248, align 1, !tbaa !2448
  %249 = lshr i32 %226, 31
  %250 = trunc i32 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %250, i8* %251, align 1, !tbaa !2449
  %252 = lshr i32 %225, 31
  %253 = xor i32 %249, %252
  %254 = add nuw nsw i32 %253, %249
  %255 = icmp eq i32 %254, 2
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %256, i8* %257, align 1, !tbaa !2450
  %258 = load i64, i64* %RBP
  %259 = sub i64 %258, 424
  %260 = load i32, i32* %EAX
  %261 = zext i32 %260 to i64
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 6
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %259 to i32*
  store i32 %260, i32* %264
  %265 = load i64, i64* %PC
  %266 = sub i64 %265, 82
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 5
  store i64 %268, i64* %PC
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %266, i64* %269, align 8, !tbaa !2428
  br label %block_401bd3

block_401b76:                                     ; preds = %block_401b66
  %270 = load i64, i64* %PC
  %271 = sub i64 %270, 5990
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 5
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 5
  store i64 %275, i64* %PC
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %277 = load i64, i64* %276, align 8, !tbaa !2428
  %278 = add i64 %277, -8
  %279 = inttoptr i64 %278 to i64*
  store i64 %273, i64* %279
  store i64 %278, i64* %276, align 8, !tbaa !2428
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %271, i64* %280, align 8, !tbaa !2428
  %281 = load i64, i64* %PC
  %282 = call %struct.Memory* @ext_6040d8_random(%struct.State* %0, i64 %281, %struct.Memory* %MEMORY.2)
  %283 = load i64, i64* %RAX
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 6
  store i64 %285, i64* %PC
  %286 = and i64 255, %283
  store i64 %286, i64* %RAX, align 8, !tbaa !2428
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %287, align 1, !tbaa !2432
  %288 = trunc i64 %286 to i32
  %289 = and i32 %288, 255
  %290 = call i32 @llvm.ctpop.i32(i32 %289) #16
  %291 = trunc i32 %290 to i8
  %292 = and i8 %291, 1
  %293 = xor i8 %292, 1
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %293, i8* %294, align 1, !tbaa !2446
  %295 = icmp eq i64 %286, 0
  %296 = zext i1 %295 to i8
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %296, i8* %297, align 1, !tbaa !2448
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %298, align 1, !tbaa !2449
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %299, align 1, !tbaa !2450
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %300, align 1, !tbaa !2447
  %301 = load i8, i8* %AL
  %302 = zext i8 %301 to i64
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 2
  store i64 %304, i64* %PC
  store i8 %301, i8* %CL, align 1, !tbaa !2451
  %305 = load i64, i64* %RBP
  %306 = sub i64 %305, 424
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 7
  store i64 %308, i64* %PC
  %309 = inttoptr i64 %306 to i32*
  %310 = load i32, i32* %309
  %311 = sext i32 %310 to i64
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = load i64, i64* %RAX
  %314 = add i64 %312, -208
  %315 = add i64 %314, %313
  %316 = load i8, i8* %CL
  %317 = zext i8 %316 to i64
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 7
  store i64 %319, i64* %PC
  %320 = inttoptr i64 %315 to i8*
  store i8 %316, i8* %320
  %321 = load i64, i64* %RBP
  %322 = sub i64 %321, 424
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 6
  store i64 %324, i64* %PC
  %325 = inttoptr i64 %322 to i32*
  %326 = load i32, i32* %325
  %327 = zext i32 %326 to i64
  store i64 %327, i64* %RAX, align 8, !tbaa !2428
  %328 = load i64, i64* %RAX
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 3
  store i64 %330, i64* %PC
  %331 = trunc i64 %328 to i32
  %332 = add i32 1, %331
  %333 = zext i32 %332 to i64
  store i64 %333, i64* %RAX, align 8, !tbaa !2428
  %334 = icmp ult i32 %332, %331
  %335 = icmp ult i32 %332, 1
  %336 = or i1 %334, %335
  %337 = zext i1 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %337, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %332, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = xor i64 1, %328
  %346 = trunc i64 %345 to i32
  %347 = xor i32 %346, %332
  %348 = lshr i32 %347, 4
  %349 = trunc i32 %348 to i8
  %350 = and i8 %349, 1
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %350, i8* %351, align 1, !tbaa !2447
  %352 = icmp eq i32 %332, 0
  %353 = zext i1 %352 to i8
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %353, i8* %354, align 1, !tbaa !2448
  %355 = lshr i32 %332, 31
  %356 = trunc i32 %355 to i8
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %356, i8* %357, align 1, !tbaa !2449
  %358 = lshr i32 %331, 31
  %359 = xor i32 %355, %358
  %360 = add nuw nsw i32 %359, %355
  %361 = icmp eq i32 %360, 2
  %362 = zext i1 %361 to i8
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %362, i8* %363, align 1, !tbaa !2450
  %364 = load i64, i64* %RBP
  %365 = sub i64 %364, 424
  %366 = load i32, i32* %EAX
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 6
  store i64 %369, i64* %PC
  %370 = inttoptr i64 %365 to i32*
  store i32 %366, i32* %370
  %371 = load i64, i64* %PC
  %372 = sub i64 %371, 58
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 5
  store i64 %374, i64* %PC
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %372, i64* %375, align 8, !tbaa !2428
  br label %block_401b66

block_401bd3:                                     ; preds = %block_401ba5, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %MEMORY.0 = phi %struct.Memory* [ %732, %block_401ba5 ], [ %199, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %376 = load i64, i64* %RBP
  %377 = sub i64 %376, 424
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 6
  store i64 %379, i64* %PC
  %380 = inttoptr i64 %377 to i32*
  %381 = load i32, i32* %380
  %382 = zext i32 %381 to i64
  store i64 %382, i64* %RAX, align 8, !tbaa !2428
  %383 = load i32, i32* %EAX
  %384 = zext i32 %383 to i64
  %385 = load i64, i64* %RBP
  %386 = sub i64 %385, 428
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 6
  store i64 %388, i64* %PC
  %389 = inttoptr i64 %386 to i32*
  %390 = load i32, i32* %389
  %391 = sub i32 %383, %390
  %392 = icmp ult i32 %383, %390
  %393 = zext i1 %392 to i8
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %393, i8* %394, align 1, !tbaa !2432
  %395 = and i32 %391, 255
  %396 = call i32 @llvm.ctpop.i32(i32 %395) #16
  %397 = trunc i32 %396 to i8
  %398 = and i8 %397, 1
  %399 = xor i8 %398, 1
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %399, i8* %400, align 1, !tbaa !2446
  %401 = xor i32 %390, %383
  %402 = xor i32 %401, %391
  %403 = lshr i32 %402, 4
  %404 = trunc i32 %403 to i8
  %405 = and i8 %404, 1
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %405, i8* %406, align 1, !tbaa !2447
  %407 = icmp eq i32 %391, 0
  %408 = zext i1 %407 to i8
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %408, i8* %409, align 1, !tbaa !2448
  %410 = lshr i32 %391, 31
  %411 = trunc i32 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %411, i8* %412, align 1, !tbaa !2449
  %413 = lshr i32 %383, 31
  %414 = lshr i32 %390, 31
  %415 = xor i32 %414, %413
  %416 = xor i32 %410, %413
  %417 = add nuw nsw i32 %416, %415
  %418 = icmp eq i32 %417, 2
  %419 = zext i1 %418 to i8
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %419, i8* %420, align 1, !tbaa !2450
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 75
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 6
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 6
  store i64 %426, i64* %PC
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %428 = load i8, i8* %427, align 1, !tbaa !2449
  %429 = icmp ne i8 %428, 0
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %431 = load i8, i8* %430, align 1, !tbaa !2450
  %432 = icmp ne i8 %431, 0
  %433 = xor i1 %429, %432
  %434 = xor i1 %433, true
  %435 = zext i1 %434 to i8
  store i8 %435, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %437 = select i1 %433, i64 %424, i64 %422
  store i64 %437, i64* %436, align 8, !tbaa !2428
  %438 = load i8, i8* %BRANCH_TAKEN
  %439 = icmp eq i8 %438, 1
  br i1 %439, label %block_401c2a, label %block_401be5

block_401b5c:                                     ; preds = %block_401b4c
  %440 = load i64, i64* %RBP
  %441 = sub i64 %440, 424
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 10
  store i64 %443, i64* %PC
  %444 = inttoptr i64 %441 to i32*
  store i32 0, i32* %444
  br label %block_401b66

block_401b4c:                                     ; preds = %block_401c2a, %block_401b30
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401b30 ], [ %518, %block_401c2a ]
  %445 = load i64, i64* %RBP
  %446 = sub i64 %445, 420
  %447 = load i64, i64* %PC
  %448 = add i64 %447, 10
  store i64 %448, i64* %PC
  %449 = inttoptr i64 %446 to i32*
  %450 = load i32, i32* %449
  %451 = sub i32 %450, 150000
  %452 = icmp ult i32 %450, 150000
  %453 = zext i1 %452 to i8
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %453, i8* %454, align 1, !tbaa !2432
  %455 = and i32 %451, 255
  %456 = call i32 @llvm.ctpop.i32(i32 %455) #16
  %457 = trunc i32 %456 to i8
  %458 = and i8 %457, 1
  %459 = xor i8 %458, 1
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %459, i8* %460, align 1, !tbaa !2446
  %461 = xor i32 %450, 150000
  %462 = xor i32 %461, %451
  %463 = lshr i32 %462, 4
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %465, i8* %466, align 1, !tbaa !2447
  %467 = icmp eq i32 %451, 0
  %468 = zext i1 %467 to i8
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %468, i8* %469, align 1, !tbaa !2448
  %470 = lshr i32 %451, 31
  %471 = trunc i32 %470 to i8
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %471, i8* %472, align 1, !tbaa !2449
  %473 = lshr i32 %450, 31
  %474 = xor i32 %470, %473
  %475 = add nuw nsw i32 %474, %473
  %476 = icmp eq i32 %475, 2
  %477 = zext i1 %476 to i8
  %478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %477, i8* %478, align 1, !tbaa !2450
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 251
  %481 = load i64, i64* %PC
  %482 = add i64 %481, 6
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 6
  store i64 %484, i64* %PC
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %486 = load i8, i8* %485, align 1, !tbaa !2449
  %487 = icmp ne i8 %486, 0
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %489 = load i8, i8* %488, align 1, !tbaa !2450
  %490 = icmp ne i8 %489, 0
  %491 = xor i1 %487, %490
  %492 = xor i1 %491, true
  %493 = zext i1 %492 to i8
  store i8 %493, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %495 = select i1 %491, i64 %482, i64 %480
  store i64 %495, i64* %494, align 8, !tbaa !2428
  %496 = load i8, i8* %BRANCH_TAKEN
  %497 = icmp eq i8 %496, 1
  br i1 %497, label %block_401c51, label %block_401b5c

block_401c2a:                                     ; preds = %block_401bd3
  %498 = load i64, i64* %RBP
  %499 = sub i64 %498, 416
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 7
  store i64 %501, i64* %PC
  store i64 %499, i64* %RSI, align 8, !tbaa !2428
  %502 = load i64, i64* %RBP
  %503 = sub i64 %502, 208
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 7
  store i64 %505, i64* %PC
  store i64 %503, i64* %RDI, align 8, !tbaa !2428
  %506 = load i64, i64* %PC
  %507 = sub i64 %506, 5928
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 5
  %510 = load i64, i64* %PC
  %511 = add i64 %510, 5
  store i64 %511, i64* %PC
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %513 = load i64, i64* %512, align 8, !tbaa !2428
  %514 = add i64 %513, -8
  %515 = inttoptr i64 %514 to i64*
  store i64 %509, i64* %515
  store i64 %514, i64* %512, align 8, !tbaa !2428
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %507, i64* %516, align 8, !tbaa !2428
  %517 = load i64, i64* %PC
  %518 = call %struct.Memory* @sub_400510_rsdec_204(%struct.State* %0, i64 %517, %struct.Memory* %MEMORY.0)
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 420
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 6
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  %524 = load i32, i32* %523
  %525 = zext i32 %524 to i64
  store i64 %525, i64* %RAX, align 8, !tbaa !2428
  %526 = load i64, i64* %RAX
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 3
  store i64 %528, i64* %PC
  %529 = trunc i64 %526 to i32
  %530 = add i32 1, %529
  %531 = zext i32 %530 to i64
  store i64 %531, i64* %RAX, align 8, !tbaa !2428
  %532 = icmp ult i32 %530, %529
  %533 = icmp ult i32 %530, 1
  %534 = or i1 %532, %533
  %535 = zext i1 %534 to i8
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %535, i8* %536, align 1, !tbaa !2432
  %537 = and i32 %530, 255
  %538 = call i32 @llvm.ctpop.i32(i32 %537) #16
  %539 = trunc i32 %538 to i8
  %540 = and i8 %539, 1
  %541 = xor i8 %540, 1
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %541, i8* %542, align 1, !tbaa !2446
  %543 = xor i64 1, %526
  %544 = trunc i64 %543 to i32
  %545 = xor i32 %544, %530
  %546 = lshr i32 %545, 4
  %547 = trunc i32 %546 to i8
  %548 = and i8 %547, 1
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %548, i8* %549, align 1, !tbaa !2447
  %550 = icmp eq i32 %530, 0
  %551 = zext i1 %550 to i8
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %551, i8* %552, align 1, !tbaa !2448
  %553 = lshr i32 %530, 31
  %554 = trunc i32 %553 to i8
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %554, i8* %555, align 1, !tbaa !2449
  %556 = lshr i32 %529, 31
  %557 = xor i32 %553, %556
  %558 = add nuw nsw i32 %557, %553
  %559 = icmp eq i32 %558, 2
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %560, i8* %561, align 1, !tbaa !2450
  %562 = load i64, i64* %RBP
  %563 = sub i64 %562, 420
  %564 = load i32, i32* %EAX
  %565 = zext i32 %564 to i64
  %566 = load i64, i64* %PC
  %567 = add i64 %566, 6
  store i64 %567, i64* %PC
  %568 = inttoptr i64 %563 to i32*
  store i32 %564, i32* %568
  %569 = load i64, i64* %PC
  %570 = sub i64 %569, 256
  %571 = load i64, i64* %PC
  %572 = add i64 %571, 5
  store i64 %572, i64* %PC
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %570, i64* %573, align 8, !tbaa !2428
  br label %block_401b4c

block_401c51:                                     ; preds = %block_401b4c
  %574 = load i64, i64* %RAX
  %575 = load i32, i32* %EAX
  %576 = zext i32 %575 to i64
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 2
  store i64 %578, i64* %PC
  %579 = xor i64 %576, %574
  %580 = trunc i64 %579 to i32
  %581 = and i64 %579, 4294967295
  store i64 %581, i64* %RAX, align 8, !tbaa !2428
  %582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %582, align 1, !tbaa !2432
  %583 = and i32 %580, 255
  %584 = call i32 @llvm.ctpop.i32(i32 %583) #16
  %585 = trunc i32 %584 to i8
  %586 = and i8 %585, 1
  %587 = xor i8 %586, 1
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %587, i8* %588, align 1, !tbaa !2446
  %589 = icmp eq i32 %580, 0
  %590 = zext i1 %589 to i8
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %590, i8* %591, align 1, !tbaa !2448
  %592 = lshr i32 %580, 31
  %593 = trunc i32 %592 to i8
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %593, i8* %594, align 1, !tbaa !2449
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %595, align 1, !tbaa !2450
  %596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %596, align 1, !tbaa !2447
  %597 = load i64, i64* %RSP
  %598 = load i64, i64* %PC
  %599 = add i64 %598, 7
  store i64 %599, i64* %PC
  %600 = add i64 432, %597
  store i64 %600, i64* %RSP, align 8, !tbaa !2428
  %601 = icmp ult i64 %600, %597
  %602 = icmp ult i64 %600, 432
  %603 = or i1 %601, %602
  %604 = zext i1 %603 to i8
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %604, i8* %605, align 1, !tbaa !2432
  %606 = trunc i64 %600 to i32
  %607 = and i32 %606, 255
  %608 = call i32 @llvm.ctpop.i32(i32 %607) #16
  %609 = trunc i32 %608 to i8
  %610 = and i8 %609, 1
  %611 = xor i8 %610, 1
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %611, i8* %612, align 1, !tbaa !2446
  %613 = xor i64 432, %597
  %614 = xor i64 %613, %600
  %615 = lshr i64 %614, 4
  %616 = trunc i64 %615 to i8
  %617 = and i8 %616, 1
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %617, i8* %618, align 1, !tbaa !2447
  %619 = icmp eq i64 %600, 0
  %620 = zext i1 %619 to i8
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %620, i8* %621, align 1, !tbaa !2448
  %622 = lshr i64 %600, 63
  %623 = trunc i64 %622 to i8
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %623, i8* %624, align 1, !tbaa !2449
  %625 = lshr i64 %597, 63
  %626 = xor i64 %622, %625
  %627 = add nuw nsw i64 %626, %622
  %628 = icmp eq i64 %627, 2
  %629 = zext i1 %628 to i8
  %630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %629, i8* %630, align 1, !tbaa !2450
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 1
  store i64 %632, i64* %PC
  %633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %634 = load i64, i64* %633, align 8, !tbaa !2428
  %635 = add i64 %634, 8
  %636 = inttoptr i64 %634 to i64*
  %637 = load i64, i64* %636
  store i64 %637, i64* %RBP, align 8, !tbaa !2428
  store i64 %635, i64* %633, align 8, !tbaa !2428
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 1
  store i64 %639, i64* %PC
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %642 = load i64, i64* %641, align 8, !tbaa !2428
  %643 = inttoptr i64 %642 to i64*
  %644 = load i64, i64* %643
  store i64 %644, i64* %640, align 8, !tbaa !2428
  %645 = add i64 %642, 8
  store i64 %645, i64* %641, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_401b66:                                     ; preds = %block_401b5c, %block_401b76
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_401b5c ], [ %282, %block_401b76 ]
  %646 = load i64, i64* %RBP
  %647 = sub i64 %646, 424
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 10
  store i64 %649, i64* %PC
  %650 = inttoptr i64 %647 to i32*
  %651 = load i32, i32* %650
  %652 = sub i32 %651, 188
  %653 = icmp ult i32 %651, 188
  %654 = zext i1 %653 to i8
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %654, i8* %655, align 1, !tbaa !2432
  %656 = and i32 %652, 255
  %657 = call i32 @llvm.ctpop.i32(i32 %656) #16
  %658 = trunc i32 %657 to i8
  %659 = and i8 %658, 1
  %660 = xor i8 %659, 1
  %661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %660, i8* %661, align 1, !tbaa !2446
  %662 = xor i32 %651, 188
  %663 = xor i32 %662, %652
  %664 = lshr i32 %663, 4
  %665 = trunc i32 %664 to i8
  %666 = and i8 %665, 1
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %666, i8* %667, align 1, !tbaa !2447
  %668 = icmp eq i32 %652, 0
  %669 = zext i1 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %669, i8* %670, align 1, !tbaa !2448
  %671 = lshr i32 %652, 31
  %672 = trunc i32 %671 to i8
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %672, i8* %673, align 1, !tbaa !2449
  %674 = lshr i32 %651, 31
  %675 = xor i32 %671, %674
  %676 = add nuw nsw i32 %675, %674
  %677 = icmp eq i32 %676, 2
  %678 = zext i1 %677 to i8
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %678, i8* %679, align 1, !tbaa !2450
  %680 = load i64, i64* %PC
  %681 = add i64 %680, 53
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 6
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 6
  store i64 %685, i64* %PC
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %687 = load i8, i8* %686, align 1, !tbaa !2449
  %688 = icmp ne i8 %687, 0
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %690 = load i8, i8* %689, align 1, !tbaa !2450
  %691 = icmp ne i8 %690, 0
  %692 = xor i1 %688, %691
  %693 = xor i1 %692, true
  %694 = zext i1 %693 to i8
  store i8 %694, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %696 = select i1 %692, i64 %683, i64 %681
  store i64 %696, i64* %695, align 8, !tbaa !2428
  %697 = load i8, i8* %BRANCH_TAKEN
  %698 = icmp eq i8 %697, 1
  br i1 %698, label %block_401ba5, label %block_401b76

block_401ba5:                                     ; preds = %block_401b66
  %699 = load i64, i64* %RBP
  %700 = sub i64 %699, 208
  %701 = load i64, i64* %PC
  %702 = add i64 %701, 7
  store i64 %702, i64* %PC
  store i64 %700, i64* %RSI, align 8, !tbaa !2428
  %703 = load i64, i64* %RBP
  %704 = sub i64 %703, 416
  %705 = load i64, i64* %PC
  %706 = add i64 %705, 7
  store i64 %706, i64* %PC
  store i64 %704, i64* %RDI, align 8, !tbaa !2428
  %707 = load i64, i64* %PC
  %708 = sub i64 %707, 835
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 5
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 5
  store i64 %712, i64* %PC
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %714 = load i64, i64* %713, align 8, !tbaa !2428
  %715 = add i64 %714, -8
  %716 = inttoptr i64 %715 to i64*
  store i64 %710, i64* %716
  store i64 %715, i64* %713, align 8, !tbaa !2428
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %708, i64* %717, align 8, !tbaa !2428
  %718 = load i64, i64* %PC
  %719 = call %struct.Memory* @sub_401870_rsenc_204(%struct.State* %0, i64 %718, %struct.Memory* %MEMORY.2)
  %720 = load i64, i64* %PC
  %721 = sub i64 %720, 6056
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 5
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 5
  store i64 %725, i64* %PC
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %727 = load i64, i64* %726, align 8, !tbaa !2428
  %728 = add i64 %727, -8
  %729 = inttoptr i64 %728 to i64*
  store i64 %723, i64* %729
  store i64 %728, i64* %726, align 8, !tbaa !2428
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %721, i64* %730, align 8, !tbaa !2428
  %731 = load i64, i64* %PC
  %732 = call %struct.Memory* @ext_6040d8_random(%struct.State* %0, i64 %731, %struct.Memory* %719)
  %733 = load i64, i64* %RAX
  %734 = load i64, i64* %PC
  %735 = add i64 %734, 4
  store i64 %735, i64* %PC
  %736 = and i64 127, %733
  store i64 %736, i64* %RAX, align 8, !tbaa !2428
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %737, align 1, !tbaa !2432
  %738 = trunc i64 %736 to i32
  %739 = and i32 %738, 255
  %740 = call i32 @llvm.ctpop.i32(i32 %739) #16
  %741 = trunc i32 %740 to i8
  %742 = and i8 %741, 1
  %743 = xor i8 %742, 1
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %743, i8* %744, align 1, !tbaa !2446
  %745 = icmp eq i64 %736, 0
  %746 = zext i1 %745 to i8
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %746, i8* %747, align 1, !tbaa !2448
  %748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %748, align 1, !tbaa !2449
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %749, align 1, !tbaa !2450
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %750, align 1, !tbaa !2447
  %751 = load i32, i32* %EAX
  %752 = zext i32 %751 to i64
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 2
  store i64 %754, i64* %PC
  %755 = and i64 %752, 4294967295
  store i64 %755, i64* %RCX, align 8, !tbaa !2428
  %756 = load i64, i64* %RBP
  %757 = sub i64 %756, 428
  %758 = load i32, i32* %ECX
  %759 = zext i32 %758 to i64
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 6
  store i64 %761, i64* %PC
  %762 = inttoptr i64 %757 to i32*
  store i32 %758, i32* %762
  %763 = load i64, i64* %RBP
  %764 = sub i64 %763, 424
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 10
  store i64 %766, i64* %PC
  %767 = inttoptr i64 %764 to i32*
  store i32 0, i32* %767
  br label %block_401bd3
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400500_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400500;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400500_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400500_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4004d0___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4004d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4004d0___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4004d0___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_401cd0___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401cd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_401cd0___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401cd0___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_401c60___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401c60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_401c60___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401c60___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401b30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401b30_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6040d0___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6040d8_random(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @random to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401cd4;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401cd4__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4003e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4003e0__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @rsenc_204() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401870;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @rsenc_204_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401870_rsenc_204(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @rsdec_204() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400510;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @rsdec_204_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400510_rsdec_204(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_401c60___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_401cd0___libc_csu_fini()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }
attributes #17 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2430, !2430, i64 0}
!2452 = !{!2445, !2445, i64 0}
