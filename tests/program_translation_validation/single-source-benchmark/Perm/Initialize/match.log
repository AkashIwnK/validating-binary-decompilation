Writing '/tmp/tmpbjq7gq94.dot'...
Writing '/tmp/tmpbjq7gq94.dot':Done

Reading LLVM: /tmp/tmpjpznu2mw-query.ll
Extracting function [Initialize] from /tmp/tmpjpznu2mw-query.ll
Dot file generated!
Writing '/tmp/tmpv8rfmo5r.dot'...
Writing '/tmp/tmpv8rfmo5r.dot':Done

Reading LLVM: /tmp/tmp3_8849o8-target.ll
Extracting function [Initialize] from /tmp/tmp3_8849o8-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 store i64 %8, i64* %6, align 8
- 11 %10 = load i64, i64* %3, align 8
- 12 store i64 %8, i64* %RBP.i, align 8
- 13 %11 = add i64 %7, -12
- 14 %12 = add i64 %10, 10
- 15 store i64 %12, i64* %3, align 8
- 16 %13 = inttoptr i64 %11 to i32*
- 17 store i32 1, i32* %13, align 4
- 18 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 19 %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 20 %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 21 %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 22 %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 23 %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 24 %RAX.i19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 25 %RCX.i14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 26 %.pre = load i64, i64* %3, align 8
- 27 \<badref\> = br label %block_.L_4005bb
- 28 %20 = phi i64 [ %112, %block_4005c5 ], [ %.pre, %entry ]
- 29 %21 = load i64, i64* %RBP.i, align 8
- 30 %22 = add i64 %21, -4
- 31 %23 = add i64 %20, 4
- 32 store i64 %23, i64* %3, align 8
- 33 %24 = inttoptr i64 %22 to i32*
- 34 %25 = load i32, i32* %24, align 4
- 35 %26 = add i32 %25, -7
- 36 %27 = icmp ult i32 %25, 7
- 37 %28 = zext i1 %27 to i8
- 38 store i8 %28, i8* %14, align 1
- 39 %29 = and i32 %26, 255
- 40 %30 = tail call i32 @llvm.ctpop.i32(i32 %29)
- 41 %31 = trunc i32 %30 to i8
- 42 %32 = and i8 %31, 1
- 43 %33 = xor i8 %32, 1
- 44 store i8 %33, i8* %15, align 1
- 45 %34 = xor i32 %26, %25
- 46 %35 = lshr i32 %34, 4
- 47 %36 = trunc i32 %35 to i8
- 48 %37 = and i8 %36, 1
- 49 store i8 %37, i8* %16, align 1
- 50 %38 = icmp eq i32 %26, 0
- 51 %39 = zext i1 %38 to i8
- 52 store i8 %39, i8* %17, align 1
- 53 %40 = lshr i32 %26, 31
- 54 %41 = trunc i32 %40 to i8
- 55 store i8 %41, i8* %18, align 1
- 56 %42 = lshr i32 %25, 31
- 57 %43 = xor i32 %40, %42
- 58 %44 = add nuw nsw i32 %43, %42
- 59 %45 = icmp eq i32 %44, 2
- 60 %46 = zext i1 %45 to i8
- 61 store i8 %46, i8* %19, align 1
- 62 %47 = icmp ne i8 %41, 0
- 63 %48 = xor i1 %47, %45
- 64 %.demorgan = or i1 %38, %48
- 65 %.v = select i1 %.demorgan, i64 10, i64 41
- 66 %49 = add i64 %20, %.v
- 67 store i64 %49, i64* %3, align 8
- 68 \<badref\> = br i1 %.demorgan, label %block_4005c5, label %block_.L_4005e4
- 69 %50 = add i64 %49, 3
- 70 store i64 %50, i64* %3, align 8
- 71 %51 = load i32, i32* %24, align 4
- 72 %52 = add i32 %51, -1
- 73 %53 = zext i32 %52 to i64
- 74 store i64 %53, i64* %RAX.i19, align 8
- 75 %54 = icmp eq i32 %51, 0
- 76 %55 = zext i1 %54 to i8
- 77 store i8 %55, i8* %14, align 1
- 78 %56 = and i32 %52, 255
- 79 %57 = tail call i32 @llvm.ctpop.i32(i32 %56)
- 80 %58 = trunc i32 %57 to i8
- 81 %59 = and i8 %58, 1
- 82 %60 = xor i8 %59, 1
- 83 store i8 %60, i8* %15, align 1
- 84 %61 = xor i32 %52, %51
- 85 %62 = lshr i32 %61, 4
- 86 %63 = trunc i32 %62 to i8
- 87 %64 = and i8 %63, 1
- 88 store i8 %64, i8* %16, align 1
- 89 %65 = icmp eq i32 %52, 0
- 90 %66 = zext i1 %65 to i8
- 91 store i8 %66, i8* %17, align 1
- 92 %67 = lshr i32 %52, 31
- 93 %68 = trunc i32 %67 to i8
- 94 store i8 %68, i8* %18, align 1
- 95 %69 = lshr i32 %51, 31
- 96 %70 = xor i32 %67, %69
- 97 %71 = add nuw nsw i32 %70, %69
- 98 %72 = icmp eq i32 %71, 2
- 99 %73 = zext i1 %72 to i8
- 100 store i8 %73, i8* %19, align 1
- 101 %74 = add i64 %49, 10
- 102 store i64 %74, i64* %3, align 8
- 103 %75 = load i32, i32* %24, align 4
- 104 %76 = sext i32 %75 to i64
- 105 store i64 %76, i64* %RCX.i14, align 8
- 106 %77 = shl nsw i64 %76, 2
- 107 %78 = add nsw i64 %77, 6383440
- 108 %79 = add i64 %49, 17
- 109 store i64 %79, i64* %3, align 8
- 110 %80 = inttoptr i64 %78 to i32*
- 111 store i32 %52, i32* %80, align 4
- 112 %81 = load i64, i64* %RBP.i, align 8
- 113 %82 = add i64 %81, -4
- 114 %83 = load i64, i64* %3, align 8
- 115 %84 = add i64 %83, 3
- 116 store i64 %84, i64* %3, align 8
- 117 %85 = inttoptr i64 %82 to i32*
- 118 %86 = load i32, i32* %85, align 4
- 119 %87 = add i32 %86, 1
- 120 %88 = zext i32 %87 to i64
- 121 store i64 %88, i64* %RAX.i19, align 8
- 122 %89 = icmp eq i32 %86, -1
- 123 %90 = icmp eq i32 %87, 0
- 124 %91 = or i1 %89, %90
- 125 %92 = zext i1 %91 to i8
- 126 store i8 %92, i8* %14, align 1
- 127 %93 = and i32 %87, 255
- 128 %94 = tail call i32 @llvm.ctpop.i32(i32 %93)
- 129 %95 = trunc i32 %94 to i8
- 130 %96 = and i8 %95, 1
- 131 %97 = xor i8 %96, 1
- 132 store i8 %97, i8* %15, align 1
- 133 %98 = xor i32 %87, %86
- 134 %99 = lshr i32 %98, 4
- 135 %100 = trunc i32 %99 to i8
- 136 %101 = and i8 %100, 1
- 137 store i8 %101, i8* %16, align 1
- 138 %102 = zext i1 %90 to i8
- 139 store i8 %102, i8* %17, align 1
- 140 %103 = lshr i32 %87, 31
- 141 %104 = trunc i32 %103 to i8
- 142 store i8 %104, i8* %18, align 1
- 143 %105 = lshr i32 %86, 31
- 144 %106 = xor i32 %103, %105
- 145 %107 = add nuw nsw i32 %106, %103
- 146 %108 = icmp eq i32 %107, 2
- 147 %109 = zext i1 %108 to i8
- 148 store i8 %109, i8* %19, align 1
- 149 %110 = add i64 %83, 9
- 150 store i64 %110, i64* %3, align 8
- 151 store i32 %87, i32* %85, align 4
- 152 %111 = load i64, i64* %3, align 8
- 153 %112 = add i64 %111, -36
- 154 store i64 %112, i64* %3, align 8
- 155 \<badref\> = br label %block_.L_4005bb
- 156 %113 = add i64 %49, 1
- 157 store i64 %113, i64* %3, align 8
- 158 %114 = load i64, i64* %6, align 8
- 159 %115 = add i64 %114, 8
- 160 %116 = inttoptr i64 %114 to i64*
- 161 %117 = load i64, i64* %116, align 8
- 162 store i64 %117, i64* %RBP.i, align 8
- 163 store i64 %115, i64* %6, align 8
- 164 %118 = add i64 %49, 2
- 165 store i64 %118, i64* %3, align 8
- 166 %119 = inttoptr i64 %115 to i64*
- 167 %120 = load i64, i64* %119, align 8
- 168 store i64 %120, i64* %3, align 8
- 169 %121 = add i64 %114, 16
- 170 store i64 %121, i64* %6, align 8
- 171 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3a0a58ea60>, {0: {0}, 1: {3}, 2: {33, 4, 132, 39, 8, 137, 13, 46, 78, 87, 89, 26, 93, 30, 127}, 3: {28, 5, 94}, 4: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 5: {7}, 6: {33, 4, 132, 39, 8, 137, 13, 46, 78, 87, 89, 26, 93, 30, 127}, 7: {9}, 8: {32, 38, 136, 10, 18, 85, 92}, 9: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 10: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 11: {33, 4, 132, 39, 8, 137, 13, 46, 78, 87, 89, 26, 93, 30, 127}, 12: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 13: {15}, 14: {16, 76}, 15: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 16: {32, 38, 136, 10, 18, 85, 92}, 17: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 18: {20}, 19: {21}, 20: {22}, 21: {23}, 22: {24}, 23: {25}, 24: {1}, 25: {2}, 26: {33, 4, 132, 39, 8, 137, 13, 46, 78, 87, 89, 26, 93, 30, 127}, 27: {130, 27}, 28: {131}, 29: {33, 4, 132, 39, 8, 137, 13, 46, 78, 87, 89, 26, 93, 30, 127}, 30: {88, 133}, 31: {134}, 32: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 33: {32, 38, 136, 10, 18, 85, 92}, 34: {33, 4, 132, 39, 8, 137, 13, 46, 78, 87, 89, 26, 93, 30, 127}, 35: {138}, 36: {139}, 37: {65, 163, 100, 154, 74, 140, 48, 113, 51, 122, 95}, 38: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 39: {142, 53, 102}, 40: {143, 54, 103}, 41: {68, 104, 110, 144, 116, 150, 55, 157, 61}, 42: {105, 111, 145, 151, 56, 62}, 43: {57, 106, 146}, 44: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 45: {160, 166, 71, 108, 148, 119, 59}, 46: {60, 109, 149}, 47: {68, 104, 110, 144, 116, 150, 55, 157, 61}, 48: {105, 111, 145, 151, 56, 62}, 49: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 50: {64, 98, 165, 50, 153}, 51: {65, 163, 100, 154, 74, 140, 48, 113, 51, 122, 95}, 52: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 53: {67, 70, 115, 118, 156, 159}, 54: {68, 104, 110, 144, 116, 150, 55, 157, 61}, 55: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 56: {67, 70, 115, 118, 156, 159}, 57: {160, 166, 71, 108, 148, 119, 59}, 58: {161, 72, 169, 82, 120}, 59: {73, 162, 121}, 60: {65, 163, 100, 154, 74, 140, 48, 113, 51, 122, 95}, 61: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 62: {64, 98, 165, 50, 153}, 63: {160, 166, 71, 108, 148, 119, 59}, 64: {99, 167}, 65: {168}, 66: {161, 72, 169, 82, 120}, 67: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 68: {171}, 69: {90, 44}, 70: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 71: {33, 4, 132, 39, 8, 137, 13, 46, 78, 87, 89, 26, 93, 30, 127}, 72: {47}, 73: {65, 163, 100, 154, 74, 140, 48, 113, 51, 122, 95}, 74: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 75: {64, 98, 165, 50, 153}, 76: {65, 163, 100, 154, 74, 140, 48, 113, 51, 122, 95}, 77: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 78: {142, 53, 102}, 79: {143, 54, 103}, 80: {68, 104, 110, 144, 116, 150, 55, 157, 61}, 81: {105, 111, 145, 151, 56, 62}, 82: {57, 106, 146}, 83: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 84: {160, 166, 71, 108, 148, 119, 59}, 85: {60, 109, 149}, 86: {68, 104, 110, 144, 116, 150, 55, 157, 61}, 87: {105, 111, 145, 151, 56, 62}, 88: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 89: {64, 98, 165, 50, 153}, 90: {65, 163, 100, 154, 74, 140, 48, 113, 51, 122, 95}, 91: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 92: {67, 70, 115, 118, 156, 159}, 93: {68, 104, 110, 144, 116, 150, 55, 157, 61}, 94: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 95: {67, 70, 115, 118, 156, 159}, 96: {160, 166, 71, 108, 148, 119, 59}, 97: {161, 72, 169, 82, 120}, 98: {73, 162, 121}, 99: {65, 163, 100, 154, 74, 140, 48, 113, 51, 122, 95}, 100: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 101: {16, 76}, 102: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 103: {33, 4, 132, 39, 8, 137, 13, 46, 78, 87, 89, 26, 93, 30, 127}, 104: {79}, 105: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 106: {81}, 107: set(), 108: {83}, 109: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 110: {32, 38, 136, 10, 18, 85, 92}, 111: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 112: {33, 4, 132, 39, 8, 137, 13, 46, 78, 87, 89, 26, 93, 30, 127}, 113: {88, 133}, 114: {33, 4, 132, 39, 8, 137, 13, 46, 78, 87, 89, 26, 93, 30, 127}, 115: {90, 44}, 116: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 117: {32, 38, 136, 10, 18, 85, 92}, 118: {33, 4, 132, 39, 8, 137, 13, 46, 78, 87, 89, 26, 93, 30, 127}, 119: {28, 5, 94}, 120: {65, 163, 100, 154, 74, 140, 48, 113, 51, 122, 95}, 121: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 122: {97}, 123: {64, 98, 165, 50, 153}, 124: {99, 167}, 125: {65, 163, 100, 154, 74, 140, 48, 113, 51, 122, 95}, 126: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 127: {142, 53, 102}, 128: {143, 54, 103}, 129: {68, 104, 110, 144, 116, 150, 55, 157, 61}, 130: {105, 111, 145, 151, 56, 62}, 131: {57, 106, 146}, 132: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 133: {160, 166, 71, 108, 148, 119, 59}, 134: {60, 109, 149}, 135: {68, 104, 110, 144, 116, 150, 55, 157, 61}, 136: {105, 111, 145, 151, 56, 62}, 137: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 138: {65, 163, 100, 154, 74, 140, 48, 113, 51, 122, 95}, 139: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 140: {67, 70, 115, 118, 156, 159}, 141: {68, 104, 110, 144, 116, 150, 55, 157, 61}, 142: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 143: {67, 70, 115, 118, 156, 159}, 144: {160, 166, 71, 108, 148, 119, 59}, 145: {161, 72, 169, 82, 120}, 146: {73, 162, 121}, 147: {65, 163, 100, 154, 74, 140, 48, 113, 51, 122, 95}, 148: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 149: {124}, 150: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 151: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 152: {33, 4, 132, 39, 8, 137, 13, 46, 78, 87, 89, 26, 93, 30, 127}, 153: {128}, 154: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 155: {130, 27}, 156: {28, 5, 94}, 157: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 158: {33, 4, 132, 39, 8, 137, 13, 46, 78, 87, 89, 26, 93, 30, 127}, 159: {31}, 160: {32, 38, 136, 10, 18, 85, 92}, 161: {33, 4, 132, 39, 8, 137, 13, 46, 78, 87, 89, 26, 93, 30, 127}, 162: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 163: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 164: {36}, 165: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 166: {32, 38, 136, 10, 18, 85, 92}, 167: {33, 4, 132, 39, 8, 137, 13, 46, 78, 87, 89, 26, 93, 30, 127}, 168: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 169: {41}, 170: {129, 6, 135, 11, 12, 141, 14, 17, 19, 147, 152, 155, 29, 158, 34, 35, 164, 37, 40, 42, 170, 45, 49, 52, 58, 63, 66, 69, 75, 77, 80, 84, 86, 91, 96, 101, 107, 112, 114, 117, 123, 125, 126}, 171: {43}})
Equivalent! frozenset({130, 27}) {27, 155}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3a0a58ea60>, {0: {0}, 1: {3}, 2: {4}, 3: {28, 5}, 4: {29, 6}, 5: {7}, 6: {8}, 7: {9}, 8: {10}, 9: {11}, 10: {12}, 11: {13}, 12: {14}, 13: {15}, 14: {16}, 15: {17}, 16: {18}, 17: {19}, 18: {20}, 19: {21}, 20: {22}, 21: {23}, 22: {24}, 23: {25}, 24: {1}, 25: {2}, 26: {26}, 27: {130}, 28: {131}, 29: {132}, 30: {133}, 31: {134}, 32: {135}, 33: {136}, 34: {137}, 35: {138}, 36: {139}, 37: {140}, 38: {141}, 39: {142}, 40: {143}, 41: {144}, 42: {145}, 43: {146}, 44: {147}, 45: {148}, 46: {149}, 47: {150}, 48: {151}, 49: {152}, 50: {153}, 51: {154}, 52: {155}, 53: {156}, 54: {157}, 55: {158}, 56: {159}, 57: {160}, 58: {161}, 59: {162}, 60: {163}, 61: {164}, 62: {165}, 63: {166}, 64: {167}, 65: {168}, 66: {169}, 67: {170}, 68: {171}, 69: {44}, 70: {45}, 71: {46}, 72: {47}, 73: {48}, 74: {49}, 75: {50}, 76: {51}, 77: {52}, 78: {53}, 79: {54}, 80: {55}, 81: {56}, 82: {57}, 83: {58}, 84: {59}, 85: {60}, 86: {61}, 87: {62}, 88: {63}, 89: {64}, 90: {65}, 91: {66}, 92: {67}, 93: {68}, 94: {69}, 95: {70}, 96: {71}, 97: {72}, 98: {73}, 99: {74}, 100: {75}, 101: {76}, 102: {77}, 103: {78}, 104: {79}, 105: {80}, 106: set(), 107: set(), 108: {83}, 109: {84}, 110: set(), 111: set(), 112: {87}, 113: {88}, 114: {89}, 115: {90}, 116: {91}, 117: {92}, 118: {93}, 119: {94}, 120: {95}, 121: {96}, 122: {97}, 123: {98}, 124: {99}, 125: {100}, 126: {101}, 127: {102}, 128: {103}, 129: {104}, 130: {105}, 131: {106}, 132: {107}, 133: {108}, 134: {109}, 135: {110}, 136: {111}, 137: {112}, 138: {113}, 139: {114}, 140: {115}, 141: {116}, 142: {117}, 143: {118}, 144: {119}, 145: {120}, 146: {121}, 147: {122}, 148: {123}, 149: {124}, 150: {125}, 151: {126}, 152: {127}, 153: {128}, 154: {129}, 155: {27}, 156: {28}, 157: {29}, 158: {30}, 159: {31}, 160: {32}, 161: {33}, 162: {34}, 163: {35}, 164: {36}, 165: {37}, 166: {38}, 167: {39}, 168: {40}, 169: {41}, 170: {42}, 171: {43}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
MORE 3 POT: 2
MORE 4 POT: 2
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 store store
EXACT 11 load load
EXACT 12 store store
EXACT 13 add add
EXACT 14 add add
EXACT 15 store store
EXACT 16 inttoptr inttoptr
EXACT 17 store store
EXACT 18 getelementptr getelementptr
EXACT 19 getelementptr getelementptr
EXACT 20 getelementptr getelementptr
EXACT 21 getelementptr getelementptr
EXACT 22 getelementptr getelementptr
EXACT 23 getelementptr getelementptr
EXACT 24 getelementptr getelementptr
EXACT 25 getelementptr getelementptr
EXACT 26 load load
EXACT 27 br br
EXACT 28 phi phi
EXACT 29 load load
EXACT 30 add add
EXACT 31 add add
EXACT 32 store store
EXACT 33 inttoptr inttoptr
EXACT 34 load load
EXACT 35 add add
EXACT 36 icmp icmp
EXACT 37 zext zext
EXACT 38 store store
EXACT 39 and and
EXACT 40 tail tail
EXACT 41 trunc trunc
EXACT 42 and and
EXACT 43 xor xor
EXACT 44 store store
EXACT 45 xor xor
EXACT 46 lshr lshr
EXACT 47 trunc trunc
EXACT 48 and and
EXACT 49 store store
EXACT 50 icmp icmp
EXACT 51 zext zext
EXACT 52 store store
EXACT 53 lshr lshr
EXACT 54 trunc trunc
EXACT 55 store store
EXACT 56 lshr lshr
EXACT 57 xor xor
EXACT 58 add add
EXACT 59 icmp icmp
EXACT 60 zext zext
EXACT 61 store store
EXACT 62 icmp icmp
EXACT 63 xor xor
EXACT 64 or or
EXACT 65 select select
EXACT 66 add add
EXACT 67 store store
EXACT 68 br br
EXACT 69 add add
EXACT 70 store store
EXACT 71 load load
EXACT 72 add add
EXACT 73 zext zext
EXACT 74 store store
EXACT 75 icmp icmp
EXACT 76 zext zext
EXACT 77 store store
EXACT 78 and and
EXACT 79 tail tail
EXACT 80 trunc trunc
EXACT 81 and and
EXACT 82 xor xor
EXACT 83 store store
EXACT 84 xor xor
EXACT 85 lshr lshr
EXACT 86 trunc trunc
EXACT 87 and and
EXACT 88 store store
EXACT 89 icmp icmp
EXACT 90 zext zext
EXACT 91 store store
EXACT 92 lshr lshr
EXACT 93 trunc trunc
EXACT 94 store store
EXACT 95 lshr lshr
EXACT 96 xor xor
EXACT 97 add add
EXACT 98 icmp icmp
EXACT 99 zext zext
EXACT 100 store store
EXACT 101 add add
EXACT 102 store store
EXACT 103 load load
EXACT 104 sext sext
EXACT 105 store store
NO MATCH 106
NO MATCH 107
EXACT 108 add add
EXACT 109 store store
NO MATCH 110
NO MATCH 111
EXACT 112 load load
EXACT 113 add add
EXACT 114 load load
EXACT 115 add add
EXACT 116 store store
EXACT 117 inttoptr inttoptr
EXACT 118 load load
EXACT 119 add add
EXACT 120 zext zext
EXACT 121 store store
EXACT 122 icmp icmp
EXACT 123 icmp icmp
EXACT 124 or or
EXACT 125 zext zext
EXACT 126 store store
EXACT 127 and and
EXACT 128 tail tail
EXACT 129 trunc trunc
EXACT 130 and and
EXACT 131 xor xor
EXACT 132 store store
EXACT 133 xor xor
EXACT 134 lshr lshr
EXACT 135 trunc trunc
EXACT 136 and and
EXACT 137 store store
EXACT 138 zext zext
EXACT 139 store store
EXACT 140 lshr lshr
EXACT 141 trunc trunc
EXACT 142 store store
EXACT 143 lshr lshr
EXACT 144 xor xor
EXACT 145 add add
EXACT 146 icmp icmp
EXACT 147 zext zext
EXACT 148 store store
EXACT 149 add add
EXACT 150 store store
EXACT 151 store store
EXACT 152 load load
EXACT 153 add add
EXACT 154 store store
EXACT 155 br br
EXACT 156 add add
EXACT 157 store store
EXACT 158 load load
EXACT 159 add add
EXACT 160 inttoptr inttoptr
EXACT 161 load load
EXACT 162 store store
EXACT 163 store store
EXACT 164 add add
EXACT 165 store store
EXACT 166 inttoptr inttoptr
EXACT 167 load load
EXACT 168 store store
EXACT 169 add add
EXACT 170 store store
EXACT 171 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 2 %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 3 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 4 %3 = load i64, i64* %RBP, align 8
- 5 %4 = add i64 %1, 1
- 6 store i64 %4, i64* %PC, align 8
- 7 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 8 %6 = load i64, i64* %5, align 8
- 9 %7 = add i64 %6, -8
- 10 %8 = inttoptr i64 %7 to i64*
- 11 store i64 %3, i64* %8, align 8
- 12 store i64 %7, i64* %5, align 8
- 13 %9 = load i64, i64* %PC, align 8
- 14 store i64 %7, i64* %RBP, align 8
- 15 %10 = add i64 %6, -12
- 16 %11 = add i64 %9, 10
- 17 store i64 %11, i64* %PC, align 8
- 18 %12 = inttoptr i64 %10 to i32*
- 19 store i32 1, i32* %12, align 4
- 20 %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 21 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 22 %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 23 %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 24 %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 25 %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 26 %.pre = load i64, i64* %PC, align 8
- 27 \<badref\> = br label %block_4005bb
- 28 %19 = add i64 %120, 1
- 29 store i64 %19, i64* %PC, align 8
- 30 %20 = load i64, i64* %5, align 8
- 31 %21 = add i64 %20, 8
- 32 %22 = inttoptr i64 %20 to i64*
- 33 %23 = load i64, i64* %22, align 8
- 34 store i64 %23, i64* %RBP, align 8
- 35 store i64 %21, i64* %5, align 8
- 36 %24 = add i64 %120, 2
- 37 store i64 %24, i64* %PC, align 8
- 38 %25 = inttoptr i64 %21 to i64*
- 39 %26 = load i64, i64* %25, align 8
- 40 store i64 %26, i64* %PC, align 8
- 41 %27 = add i64 %20, 16
- 42 store i64 %27, i64* %5, align 8
- 43 \<badref\> = ret %struct.Memory* %2
- 44 %28 = add i64 %120, 3
- 45 store i64 %28, i64* %PC, align 8
- 46 %29 = load i32, i32* %95, align 4
- 47 %30 = add i32 %29, -1
- 48 %31 = zext i32 %30 to i64
- 49 store i64 %31, i64* %RAX, align 8
- 50 %32 = icmp eq i32 %29, 0
- 51 %33 = zext i1 %32 to i8
- 52 store i8 %33, i8* %13, align 1
- 53 %34 = and i32 %30, 255
- 54 %35 = tail call i32 @llvm.ctpop.i32(i32 %34) #12
- 55 %36 = trunc i32 %35 to i8
- 56 %37 = and i8 %36, 1
- 57 %38 = xor i8 %37, 1
- 58 store i8 %38, i8* %14, align 1
- 59 %39 = xor i32 %30, %29
- 60 %40 = lshr i32 %39, 4
- 61 %41 = trunc i32 %40 to i8
- 62 %42 = and i8 %41, 1
- 63 store i8 %42, i8* %15, align 1
- 64 %43 = icmp eq i32 %30, 0
- 65 %44 = zext i1 %43 to i8
- 66 store i8 %44, i8* %16, align 1
- 67 %45 = lshr i32 %30, 31
- 68 %46 = trunc i32 %45 to i8
- 69 store i8 %46, i8* %17, align 1
- 70 %47 = lshr i32 %29, 31
- 71 %48 = xor i32 %45, %47
- 72 %49 = add nuw nsw i32 %48, %47
- 73 %50 = icmp eq i32 %49, 2
- 74 %51 = zext i1 %50 to i8
- 75 store i8 %51, i8* %18, align 1
- 76 %52 = add i64 %120, 10
- 77 store i64 %52, i64* %PC, align 8
- 78 %53 = load i32, i32* %95, align 4
- 79 %54 = sext i32 %53 to i64
- 80 store i64 %54, i64* %RCX, align 8
- 81 %55 = shl nsw i64 %54, 2
- 82 %56 = add i64 %55, ptrtoint (%permarray_type* @permarray to i64)
- 83 %57 = add i64 %120, 17
- 84 store i64 %57, i64* %PC, align 8
- 85 %58 = inttoptr i64 %56 to i32*
- 86 store i32 %30, i32* %58, align 4
- 87 %59 = load i64, i64* %RBP, align 8
- 88 %60 = add i64 %59, -4
- 89 %61 = load i64, i64* %PC, align 8
- 90 %62 = add i64 %61, 3
- 91 store i64 %62, i64* %PC, align 8
- 92 %63 = inttoptr i64 %60 to i32*
- 93 %64 = load i32, i32* %63, align 4
- 94 %65 = add i32 %64, 1
- 95 %66 = zext i32 %65 to i64
- 96 store i64 %66, i64* %RAX, align 8
- 97 %67 = icmp eq i32 %64, -1
- 98 %68 = icmp eq i32 %65, 0
- 99 %69 = or i1 %67, %68
- 100 %70 = zext i1 %69 to i8
- 101 store i8 %70, i8* %13, align 1
- 102 %71 = and i32 %65, 255
- 103 %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #12
- 104 %73 = trunc i32 %72 to i8
- 105 %74 = and i8 %73, 1
- 106 %75 = xor i8 %74, 1
- 107 store i8 %75, i8* %14, align 1
- 108 %76 = xor i32 %65, %64
- 109 %77 = lshr i32 %76, 4
- 110 %78 = trunc i32 %77 to i8
- 111 %79 = and i8 %78, 1
- 112 store i8 %79, i8* %15, align 1
- 113 %80 = zext i1 %68 to i8
- 114 store i8 %80, i8* %16, align 1
- 115 %81 = lshr i32 %65, 31
- 116 %82 = trunc i32 %81 to i8
- 117 store i8 %82, i8* %17, align 1
- 118 %83 = lshr i32 %64, 31
- 119 %84 = xor i32 %81, %83
- 120 %85 = add nuw nsw i32 %84, %81
- 121 %86 = icmp eq i32 %85, 2
- 122 %87 = zext i1 %86 to i8
- 123 store i8 %87, i8* %18, align 1
- 124 %88 = add i64 %61, 9
- 125 store i64 %88, i64* %PC, align 8
- 126 store i32 %65, i32* %63, align 4
- 127 %89 = load i64, i64* %PC, align 8
- 128 %90 = add i64 %89, -36
- 129 store i64 %90, i64* %PC, align 8
- 130 \<badref\> = br label %block_4005bb
- 131 %91 = phi i64 [ %90, %block_4005c5 ], [ %.pre, %block_4005b0 ]
- 132 %92 = load i64, i64* %RBP, align 8
- 133 %93 = add i64 %92, -4
- 134 %94 = add i64 %91, 4
- 135 store i64 %94, i64* %PC, align 8
- 136 %95 = inttoptr i64 %93 to i32*
- 137 %96 = load i32, i32* %95, align 4
- 138 %97 = add i32 %96, -7
- 139 %98 = icmp ult i32 %96, 7
- 140 %99 = zext i1 %98 to i8
- 141 store i8 %99, i8* %13, align 1
- 142 %100 = and i32 %97, 255
- 143 %101 = tail call i32 @llvm.ctpop.i32(i32 %100) #12
- 144 %102 = trunc i32 %101 to i8
- 145 %103 = and i8 %102, 1
- 146 %104 = xor i8 %103, 1
- 147 store i8 %104, i8* %14, align 1
- 148 %105 = xor i32 %97, %96
- 149 %106 = lshr i32 %105, 4
- 150 %107 = trunc i32 %106 to i8
- 151 %108 = and i8 %107, 1
- 152 store i8 %108, i8* %15, align 1
- 153 %109 = icmp eq i32 %97, 0
- 154 %110 = zext i1 %109 to i8
- 155 store i8 %110, i8* %16, align 1
- 156 %111 = lshr i32 %97, 31
- 157 %112 = trunc i32 %111 to i8
- 158 store i8 %112, i8* %17, align 1
- 159 %113 = lshr i32 %96, 31
- 160 %114 = xor i32 %111, %113
- 161 %115 = add nuw nsw i32 %114, %113
- 162 %116 = icmp eq i32 %115, 2
- 163 %117 = zext i1 %116 to i8
- 164 store i8 %117, i8* %18, align 1
- 165 %118 = icmp ne i8 %112, 0
- 166 %119 = xor i1 %118, %116
- 167 %.demorgan = or i1 %109, %119
- 168 %.v = select i1 %.demorgan, i64 10, i64 41
- 169 %120 = add i64 %91, %.v
- 170 store i64 %120, i64* %PC, align 8
- 171 \<badref\> = br i1 %.demorgan, label %block_4005c5, label %block_4005e4
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3a0a58e8c8>, {0: {0}, 1: {24}, 2: {25}, 3: {1}, 4: {161, 2, 34, 6, 71, 103, 167, 11, 112, 114, 118, 152, 26, 29, 158}, 5: {3, 156, 119}, 6: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 7: {5}, 8: {161, 2, 34, 6, 71, 103, 167, 11, 112, 114, 118, 152, 26, 29, 158}, 9: {7}, 10: {160, 33, 166, 8, 110, 16, 117}, 11: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 12: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 13: {161, 2, 34, 6, 71, 103, 167, 11, 112, 114, 118, 152, 26, 29, 158}, 14: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 15: {13}, 16: {101, 14}, 17: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 18: {160, 33, 166, 8, 110, 16, 117}, 19: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 20: {18}, 21: {19}, 22: {20}, 23: {21}, 24: {22}, 25: {23}, 26: {161, 2, 34, 6, 71, 103, 167, 11, 112, 114, 118, 152, 26, 29, 158}, 27: {27, 155}, 28: {3, 156, 119}, 29: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 30: {161, 2, 34, 6, 71, 103, 167, 11, 112, 114, 118, 152, 26, 29, 158}, 31: {159}, 32: {160, 33, 166, 8, 110, 16, 117}, 33: {161, 2, 34, 6, 71, 103, 167, 11, 112, 114, 118, 152, 26, 29, 158}, 34: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 35: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 36: {164}, 37: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 38: {160, 33, 166, 8, 110, 16, 117}, 39: {161, 2, 34, 6, 71, 103, 167, 11, 112, 114, 118, 152, 26, 29, 158}, 40: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 41: {169}, 42: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 43: {171}, 44: {115, 69}, 45: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 46: {161, 2, 34, 6, 71, 103, 167, 11, 112, 114, 118, 152, 26, 29, 158}, 47: {72}, 48: {99, 37, 73, 138, 76, 51, 147, 120, 90, 60, 125}, 49: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 50: {75, 50, 89, 123, 62}, 51: {99, 37, 73, 138, 76, 51, 147, 120, 90, 60, 125}, 52: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 53: {127, 78, 39}, 54: {40, 128, 79}, 55: {129, 135, 41, 141, 47, 80, 86, 54, 93}, 56: {130, 136, 42, 48, 81, 87}, 57: {82, 43, 131}, 58: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 59: {96, 133, 45, 144, 84, 57, 63}, 60: {134, 85, 46}, 61: {129, 135, 41, 141, 47, 80, 86, 54, 93}, 62: {130, 136, 42, 48, 81, 87}, 63: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 64: {75, 50, 89, 123, 62}, 65: {99, 37, 73, 138, 76, 51, 147, 120, 90, 60, 125}, 66: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 67: {140, 143, 53, 56, 92, 95}, 68: {129, 135, 41, 141, 47, 80, 86, 54, 93}, 69: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 70: {140, 143, 53, 56, 92, 95}, 71: {96, 133, 45, 144, 84, 57, 63}, 72: {97, 58, 145, 66}, 73: {98, 59, 146}, 74: {99, 37, 73, 138, 76, 51, 147, 120, 90, 60, 125}, 75: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 76: {101, 14}, 77: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 78: {161, 2, 34, 6, 71, 103, 167, 11, 112, 114, 118, 152, 26, 29, 158}, 79: {104}, 80: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 81: {106}, 82: {97, 58, 145, 66}, 83: {108}, 84: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 85: {160, 33, 166, 8, 110, 16, 117}, 86: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 87: {161, 2, 34, 6, 71, 103, 167, 11, 112, 114, 118, 152, 26, 29, 158}, 88: {113, 30}, 89: {161, 2, 34, 6, 71, 103, 167, 11, 112, 114, 118, 152, 26, 29, 158}, 90: {115, 69}, 91: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 92: {160, 33, 166, 8, 110, 16, 117}, 93: {161, 2, 34, 6, 71, 103, 167, 11, 112, 114, 118, 152, 26, 29, 158}, 94: {3, 156, 119}, 95: {99, 37, 73, 138, 76, 51, 147, 120, 90, 60, 125}, 96: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 97: {122}, 98: {75, 50, 89, 123, 62}, 99: {64, 124}, 100: {99, 37, 73, 138, 76, 51, 147, 120, 90, 60, 125}, 101: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 102: {127, 78, 39}, 103: {40, 128, 79}, 104: {129, 135, 41, 141, 47, 80, 86, 54, 93}, 105: {130, 136, 42, 48, 81, 87}, 106: {82, 43, 131}, 107: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 108: {96, 133, 45, 144, 84, 57, 63}, 109: {134, 85, 46}, 110: {129, 135, 41, 141, 47, 80, 86, 54, 93}, 111: {130, 136, 42, 48, 81, 87}, 112: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 113: {99, 37, 73, 138, 76, 51, 147, 120, 90, 60, 125}, 114: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 115: {140, 143, 53, 56, 92, 95}, 116: {129, 135, 41, 141, 47, 80, 86, 54, 93}, 117: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 118: {140, 143, 53, 56, 92, 95}, 119: {96, 133, 45, 144, 84, 57, 63}, 120: {97, 58, 145, 66}, 121: {98, 59, 146}, 122: {99, 37, 73, 138, 76, 51, 147, 120, 90, 60, 125}, 123: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 124: {149}, 125: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 126: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 127: {161, 2, 34, 6, 71, 103, 167, 11, 112, 114, 118, 152, 26, 29, 158}, 128: {153}, 129: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 130: {27, 155}, 131: {28}, 132: {161, 2, 34, 6, 71, 103, 167, 11, 112, 114, 118, 152, 26, 29, 158}, 133: {113, 30}, 134: {31}, 135: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 136: {160, 33, 166, 8, 110, 16, 117}, 137: {161, 2, 34, 6, 71, 103, 167, 11, 112, 114, 118, 152, 26, 29, 158}, 138: {35}, 139: {36}, 140: {99, 37, 73, 138, 76, 51, 147, 120, 90, 60, 125}, 141: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 142: {127, 78, 39}, 143: {40, 128, 79}, 144: {129, 135, 41, 141, 47, 80, 86, 54, 93}, 145: {130, 136, 42, 48, 81, 87}, 146: {82, 43, 131}, 147: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 148: {96, 133, 45, 144, 84, 57, 63}, 149: {134, 85, 46}, 150: {129, 135, 41, 141, 47, 80, 86, 54, 93}, 151: {130, 136, 42, 48, 81, 87}, 152: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 153: {75, 50, 89, 123, 62}, 154: {99, 37, 73, 138, 76, 51, 147, 120, 90, 60, 125}, 155: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 156: {140, 143, 53, 56, 92, 95}, 157: {129, 135, 41, 141, 47, 80, 86, 54, 93}, 158: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 159: {140, 143, 53, 56, 92, 95}, 160: {96, 133, 45, 144, 84, 57, 63}, 161: {97, 58, 145, 66}, 162: {98, 59, 146}, 163: {99, 37, 73, 138, 76, 51, 147, 120, 90, 60, 125}, 164: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 165: {75, 50, 89, 123, 62}, 166: {96, 133, 45, 144, 84, 57, 63}, 167: {64, 124}, 168: {65}, 169: {97, 58, 145, 66}, 170: {4, 132, 9, 10, 137, 12, 139, 142, 15, 17, 148, 150, 151, 154, 157, 32, 162, 163, 165, 38, 168, 170, 44, 49, 52, 55, 61, 67, 70, 74, 77, 83, 88, 91, 94, 100, 102, 105, 109, 111, 116, 121, 126}, 171: {68}})
Equivalent! frozenset({27, 155}) {130, 27}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3a0a58e8c8>, {0: {0}, 1: {24}, 2: {25}, 3: {1}, 4: {2}, 5: {3, 156}, 6: {4, 157}, 7: {5}, 8: {6}, 9: {7}, 10: {8}, 11: {9}, 12: {10}, 13: {11}, 14: {12}, 15: {13}, 16: {14}, 17: {15}, 18: {16}, 19: {17}, 20: {18}, 21: {19}, 22: {20}, 23: {21}, 24: {22}, 25: {23}, 26: {26}, 27: {155}, 28: {156}, 29: {157}, 30: {158}, 31: {159}, 32: {160}, 33: {161}, 34: {162}, 35: {163}, 36: {164}, 37: {165}, 38: {166}, 39: {167}, 40: {168}, 41: {169}, 42: {170}, 43: {171}, 44: {69}, 45: {70}, 46: {71}, 47: {72}, 48: {73}, 49: {74}, 50: {75}, 51: {76}, 52: {77}, 53: {78}, 54: {79}, 55: {80}, 56: {81}, 57: {82}, 58: {83}, 59: {84}, 60: {85}, 61: {86}, 62: {87}, 63: {88}, 64: {89}, 65: {90}, 66: {91}, 67: {92}, 68: {93}, 69: {94}, 70: {95}, 71: {96}, 72: {97}, 73: {98}, 74: {99}, 75: {100}, 76: {101}, 77: {102}, 78: {103}, 79: {104}, 80: {105}, 81: set(), 82: set(), 83: {108}, 84: {109}, 85: set(), 86: set(), 87: {112}, 88: {113}, 89: {114}, 90: {115}, 91: {116}, 92: {117}, 93: {118}, 94: {119}, 95: {120}, 96: {121}, 97: {122}, 98: {123}, 99: {124}, 100: {125}, 101: {126}, 102: {127}, 103: {128}, 104: {129}, 105: {130}, 106: {131}, 107: {132}, 108: {133}, 109: {134}, 110: {135}, 111: {136}, 112: {137}, 113: {138}, 114: {139}, 115: {140}, 116: {141}, 117: {142}, 118: {143}, 119: {144}, 120: {145}, 121: {146}, 122: {147}, 123: {148}, 124: {149}, 125: {150}, 126: {151}, 127: {152}, 128: {153}, 129: {154}, 130: {27}, 131: {28}, 132: {29}, 133: {30}, 134: {31}, 135: {32}, 136: {33}, 137: {34}, 138: {35}, 139: {36}, 140: {37}, 141: {38}, 142: {39}, 143: {40}, 144: {41}, 145: {42}, 146: {43}, 147: {44}, 148: {45}, 149: {46}, 150: {47}, 151: {48}, 152: {49}, 153: {50}, 154: {51}, 155: {52}, 156: {53}, 157: {54}, 158: {55}, 159: {56}, 160: {57}, 161: {58}, 162: {59}, 163: {60}, 164: {61}, 165: {62}, 166: {63}, 167: {64}, 168: {65}, 169: {66}, 170: {67}, 171: {68}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 load load
MORE 5 POT: 2
MORE 6 POT: 2
EXACT 7 getelementptr getelementptr
EXACT 8 load load
EXACT 9 add add
EXACT 10 inttoptr inttoptr
EXACT 11 store store
EXACT 12 store store
EXACT 13 load load
EXACT 14 store store
EXACT 15 add add
EXACT 16 add add
EXACT 17 store store
EXACT 18 inttoptr inttoptr
EXACT 19 store store
EXACT 20 getelementptr getelementptr
EXACT 21 getelementptr getelementptr
EXACT 22 getelementptr getelementptr
EXACT 23 getelementptr getelementptr
EXACT 24 getelementptr getelementptr
EXACT 25 getelementptr getelementptr
EXACT 26 load load
EXACT 27 br br
EXACT 28 add add
EXACT 29 store store
EXACT 30 load load
EXACT 31 add add
EXACT 32 inttoptr inttoptr
EXACT 33 load load
EXACT 34 store store
EXACT 35 store store
EXACT 36 add add
EXACT 37 store store
EXACT 38 inttoptr inttoptr
EXACT 39 load load
EXACT 40 store store
EXACT 41 add add
EXACT 42 store store
EXACT 43 ret ret
EXACT 44 add add
EXACT 45 store store
EXACT 46 load load
EXACT 47 add add
EXACT 48 zext zext
EXACT 49 store store
EXACT 50 icmp icmp
EXACT 51 zext zext
EXACT 52 store store
EXACT 53 and and
EXACT 54 tail tail
EXACT 55 trunc trunc
EXACT 56 and and
EXACT 57 xor xor
EXACT 58 store store
EXACT 59 xor xor
EXACT 60 lshr lshr
EXACT 61 trunc trunc
EXACT 62 and and
EXACT 63 store store
EXACT 64 icmp icmp
EXACT 65 zext zext
EXACT 66 store store
EXACT 67 lshr lshr
EXACT 68 trunc trunc
EXACT 69 store store
EXACT 70 lshr lshr
EXACT 71 xor xor
EXACT 72 add add
EXACT 73 icmp icmp
EXACT 74 zext zext
EXACT 75 store store
EXACT 76 add add
EXACT 77 store store
EXACT 78 load load
EXACT 79 sext sext
EXACT 80 store store
NO MATCH 81
NO MATCH 82
EXACT 83 add add
EXACT 84 store store
NO MATCH 85
NO MATCH 86
EXACT 87 load load
EXACT 88 add add
EXACT 89 load load
EXACT 90 add add
EXACT 91 store store
EXACT 92 inttoptr inttoptr
EXACT 93 load load
EXACT 94 add add
EXACT 95 zext zext
EXACT 96 store store
EXACT 97 icmp icmp
EXACT 98 icmp icmp
EXACT 99 or or
EXACT 100 zext zext
EXACT 101 store store
EXACT 102 and and
EXACT 103 tail tail
EXACT 104 trunc trunc
EXACT 105 and and
EXACT 106 xor xor
EXACT 107 store store
EXACT 108 xor xor
EXACT 109 lshr lshr
EXACT 110 trunc trunc
EXACT 111 and and
EXACT 112 store store
EXACT 113 zext zext
EXACT 114 store store
EXACT 115 lshr lshr
EXACT 116 trunc trunc
EXACT 117 store store
EXACT 118 lshr lshr
EXACT 119 xor xor
EXACT 120 add add
EXACT 121 icmp icmp
EXACT 122 zext zext
EXACT 123 store store
EXACT 124 add add
EXACT 125 store store
EXACT 126 store store
EXACT 127 load load
EXACT 128 add add
EXACT 129 store store
EXACT 130 br br
EXACT 131 phi phi
EXACT 132 load load
EXACT 133 add add
EXACT 134 add add
EXACT 135 store store
EXACT 136 inttoptr inttoptr
EXACT 137 load load
EXACT 138 add add
EXACT 139 icmp icmp
EXACT 140 zext zext
EXACT 141 store store
EXACT 142 and and
EXACT 143 tail tail
EXACT 144 trunc trunc
EXACT 145 and and
EXACT 146 xor xor
EXACT 147 store store
EXACT 148 xor xor
EXACT 149 lshr lshr
EXACT 150 trunc trunc
EXACT 151 and and
EXACT 152 store store
EXACT 153 icmp icmp
EXACT 154 zext zext
EXACT 155 store store
EXACT 156 lshr lshr
EXACT 157 trunc trunc
EXACT 158 store store
EXACT 159 lshr lshr
EXACT 160 xor xor
EXACT 161 add add
EXACT 162 icmp icmp
EXACT 163 zext zext
EXACT 164 store store
EXACT 165 icmp icmp
EXACT 166 xor xor
EXACT 167 or or
EXACT 168 select select
EXACT 169 add add
EXACT 170 store store
EXACT 171 br br
FP: 63 1.0 False
TO REMOVE: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -12', '%12 = add i64 %10, 10', 'store i64 %12, i64* %3, align 8', '%13 = inttoptr i64 %11 to i32*', 'store i32 1, i32* %13, align 4', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', '%RAX.i19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RCX.i14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%.pre = load i64, i64* %3, align 8', '%20 = phi i64 [ %112, %block_4005c5 ], [ %.pre, %entry ]', '%23 = add i64 %20, 4', 'store i64 %23, i64* %3, align 8', '%27 = icmp ult i32 %25, 7', '%28 = zext i1 %27 to i8', 'store i8 %28, i8* %14, align 1', '%29 = and i32 %26, 255', '%30 = tail call i32 @llvm.ctpop.i32(i32 %29)', '%31 = trunc i32 %30 to i8', '%32 = and i8 %31, 1', '%33 = xor i8 %32, 1', 'store i8 %33, i8* %15, align 1', '%34 = xor i32 %26, %25', '%35 = lshr i32 %34, 4', '%36 = trunc i32 %35 to i8', '%37 = and i8 %36, 1', 'store i8 %37, i8* %16, align 1', '%39 = zext i1 %38 to i8', 'store i8 %39, i8* %17, align 1', 'store i8 %41, i8* %18, align 1', '%46 = zext i1 %45 to i8', 'store i8 %46, i8* %19, align 1', '%.v = select i1 %.demorgan, i64 10, i64 41', '%49 = add i64 %20, %.v', 'store i64 %49, i64* %3, align 8', '%50 = add i64 %49, 3', 'store i64 %50, i64* %3, align 8', '%53 = zext i32 %52 to i64', 'store i64 %53, i64* %RAX.i19, align 8', '%54 = icmp eq i32 %51, 0', '%55 = zext i1 %54 to i8', 'store i8 %55, i8* %14, align 1', '%56 = and i32 %52, 255', '%57 = tail call i32 @llvm.ctpop.i32(i32 %56)', '%58 = trunc i32 %57 to i8', '%59 = and i8 %58, 1', '%60 = xor i8 %59, 1', 'store i8 %60, i8* %15, align 1', '%61 = xor i32 %52, %51', '%62 = lshr i32 %61, 4', '%63 = trunc i32 %62 to i8', '%64 = and i8 %63, 1', 'store i8 %64, i8* %16, align 1', '%65 = icmp eq i32 %52, 0', '%66 = zext i1 %65 to i8', 'store i8 %66, i8* %17, align 1', '%67 = lshr i32 %52, 31', '%68 = trunc i32 %67 to i8', 'store i8 %68, i8* %18, align 1', '%69 = lshr i32 %51, 31', '%70 = xor i32 %67, %69', '%71 = add nuw nsw i32 %70, %69', '%72 = icmp eq i32 %71, 2', '%73 = zext i1 %72 to i8', 'store i8 %73, i8* %19, align 1', '%74 = add i64 %49, 10', 'store i64 %74, i64* %3, align 8', 'store i64 %76, i64* %RCX.i14, align 8', '%79 = add i64 %49, 17', 'store i64 %79, i64* %3, align 8', '%81 = load i64, i64* %RBP.i, align 8', '%82 = add i64 %81, -4', '%83 = load i64, i64* %3, align 8', '%84 = add i64 %83, 3', 'store i64 %84, i64* %3, align 8', '%85 = inttoptr i64 %82 to i32*', '%86 = load i32, i32* %85, align 4', '%87 = add i32 %86, 1', '%88 = zext i32 %87 to i64', 'store i64 %88, i64* %RAX.i19, align 8', '%89 = icmp eq i32 %86, -1', '%90 = icmp eq i32 %87, 0', '%91 = or i1 %89, %90', '%92 = zext i1 %91 to i8', 'store i8 %92, i8* %14, align 1', '%93 = and i32 %87, 255', '%94 = tail call i32 @llvm.ctpop.i32(i32 %93)', '%95 = trunc i32 %94 to i8', '%96 = and i8 %95, 1', '%97 = xor i8 %96, 1', 'store i8 %97, i8* %15, align 1', '%98 = xor i32 %87, %86', '%99 = lshr i32 %98, 4', '%100 = trunc i32 %99 to i8', '%101 = and i8 %100, 1', 'store i8 %101, i8* %16, align 1', '%102 = zext i1 %90 to i8', 'store i8 %102, i8* %17, align 1', '%103 = lshr i32 %87, 31', '%104 = trunc i32 %103 to i8', 'store i8 %104, i8* %18, align 1', '%105 = lshr i32 %86, 31', '%106 = xor i32 %103, %105', '%107 = add nuw nsw i32 %106, %103', '%108 = icmp eq i32 %107, 2', '%109 = zext i1 %108 to i8', 'store i8 %109, i8* %19, align 1', '%110 = add i64 %83, 9', 'store i64 %110, i64* %3, align 8', 'store i32 %87, i32* %85, align 4', '%111 = load i64, i64* %3, align 8', '%112 = add i64 %111, -36', 'store i64 %112, i64* %3, align 8', '%113 = add i64 %49, 1', 'store i64 %113, i64* %3, align 8', '%114 = load i64, i64* %6, align 8', '%115 = add i64 %114, 8', '%116 = inttoptr i64 %114 to i64*', '%117 = load i64, i64* %116, align 8', 'store i64 %117, i64* %RBP.i, align 8', 'store i64 %115, i64* %6, align 8', '%118 = add i64 %49, 2', 'store i64 %118, i64* %3, align 8', '%119 = inttoptr i64 %115 to i64*', '%120 = load i64, i64* %119, align 8', 'store i64 %120, i64* %3, align 8', '%121 = add i64 %114, 16', 'store i64 %121, i64* %6, align 8'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Keep: %5 = add i64 %1, 1
Keep: store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -12
Found line to remove! %12 = add i64 %10, 10
Found line to remove! store i64 %12, i64* %3, align 8
Found line to remove! %13 = inttoptr i64 %11 to i32*
Found line to remove! store i32 1, i32* %13, align 4
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! %RAX.i19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RCX.i14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %.pre = load i64, i64* %3, align 8
Keep: br label %block_.L_4005bb
Keep: 
Keep: block_.L_4005bb:                                  ; preds = %block_4005c5, %entry
Found line to remove! %20 = phi i64 [ %112, %block_4005c5 ], [ %.pre, %entry ]
Keep: %21 = load i64, i64* %RBP.i, align 8
Keep: %22 = add i64 %21, -4
Found line to remove! %23 = add i64 %20, 4
Found line to remove! store i64 %23, i64* %3, align 8
Keep: %24 = inttoptr i64 %22 to i32*
Keep: %25 = load i32, i32* %24, align 4
Keep: %26 = add i32 %25, -7
Found line to remove! %27 = icmp ult i32 %25, 7
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! store i8 %28, i8* %14, align 1
Found line to remove! %29 = and i32 %26, 255
Found line to remove! %30 = tail call i32 @llvm.ctpop.i32(i32 %29)
Found line to remove! %31 = trunc i32 %30 to i8
Found line to remove! %32 = and i8 %31, 1
Found line to remove! %33 = xor i8 %32, 1
Found line to remove! store i8 %33, i8* %15, align 1
Found line to remove! %34 = xor i32 %26, %25
Found line to remove! %35 = lshr i32 %34, 4
Found line to remove! %36 = trunc i32 %35 to i8
Found line to remove! %37 = and i8 %36, 1
Found line to remove! store i8 %37, i8* %16, align 1
Keep: %38 = icmp eq i32 %26, 0
Found line to remove! %39 = zext i1 %38 to i8
Found line to remove! store i8 %39, i8* %17, align 1
Keep: %40 = lshr i32 %26, 31
Keep: %41 = trunc i32 %40 to i8
Found line to remove! store i8 %41, i8* %18, align 1
Keep: %42 = lshr i32 %25, 31
Keep: %43 = xor i32 %40, %42
Keep: %44 = add nuw nsw i32 %43, %42
Keep: %45 = icmp eq i32 %44, 2
Found line to remove! %46 = zext i1 %45 to i8
Found line to remove! store i8 %46, i8* %19, align 1
Keep: %47 = icmp ne i8 %41, 0
Keep: %48 = xor i1 %47, %45
Keep: %.demorgan = or i1 %38, %48
Found line to remove! %.v = select i1 %.demorgan, i64 10, i64 41
Found line to remove! %49 = add i64 %20, %.v
Found line to remove! store i64 %49, i64* %3, align 8
Keep: br i1 %.demorgan, label %block_4005c5, label %block_.L_4005e4
Keep: 
Keep: block_4005c5:                                     ; preds = %block_.L_4005bb
Found line to remove! %50 = add i64 %49, 3
Found line to remove! store i64 %50, i64* %3, align 8
Keep: %51 = load i32, i32* %24, align 4
Keep: %52 = add i32 %51, -1
Found line to remove! %53 = zext i32 %52 to i64
Found line to remove! store i64 %53, i64* %RAX.i19, align 8
Found line to remove! %54 = icmp eq i32 %51, 0
Found line to remove! %55 = zext i1 %54 to i8
Found line to remove! store i8 %55, i8* %14, align 1
Found line to remove! %56 = and i32 %52, 255
Found line to remove! %57 = tail call i32 @llvm.ctpop.i32(i32 %56)
Found line to remove! %58 = trunc i32 %57 to i8
Found line to remove! %59 = and i8 %58, 1
Found line to remove! %60 = xor i8 %59, 1
Found line to remove! store i8 %60, i8* %15, align 1
Found line to remove! %61 = xor i32 %52, %51
Found line to remove! %62 = lshr i32 %61, 4
Found line to remove! %63 = trunc i32 %62 to i8
Found line to remove! %64 = and i8 %63, 1
Found line to remove! store i8 %64, i8* %16, align 1
Found line to remove! %65 = icmp eq i32 %52, 0
Found line to remove! %66 = zext i1 %65 to i8
Found line to remove! store i8 %66, i8* %17, align 1
Found line to remove! %67 = lshr i32 %52, 31
Found line to remove! %68 = trunc i32 %67 to i8
Found line to remove! store i8 %68, i8* %18, align 1
Found line to remove! %69 = lshr i32 %51, 31
Found line to remove! %70 = xor i32 %67, %69
Found line to remove! %71 = add nuw nsw i32 %70, %69
Found line to remove! %72 = icmp eq i32 %71, 2
Found line to remove! %73 = zext i1 %72 to i8
Found line to remove! store i8 %73, i8* %19, align 1
Found line to remove! %74 = add i64 %49, 10
Found line to remove! store i64 %74, i64* %3, align 8
Keep: %75 = load i32, i32* %24, align 4
Keep: %76 = sext i32 %75 to i64
Found line to remove! store i64 %76, i64* %RCX.i14, align 8
Keep: %77 = shl nsw i64 %76, 2
Keep: %78 = add nsw i64 %77, 6383440
Found line to remove! %79 = add i64 %49, 17
Found line to remove! store i64 %79, i64* %3, align 8
Keep: %80 = inttoptr i64 %78 to i32*
Keep: store i32 %52, i32* %80, align 4
Found line to remove! %81 = load i64, i64* %RBP.i, align 8
Found line to remove! %82 = add i64 %81, -4
Found line to remove! %83 = load i64, i64* %3, align 8
Found line to remove! %84 = add i64 %83, 3
Found line to remove! store i64 %84, i64* %3, align 8
Found line to remove! %85 = inttoptr i64 %82 to i32*
Found line to remove! %86 = load i32, i32* %85, align 4
Found line to remove! %87 = add i32 %86, 1
Found line to remove! %88 = zext i32 %87 to i64
Found line to remove! store i64 %88, i64* %RAX.i19, align 8
Found line to remove! %89 = icmp eq i32 %86, -1
Found line to remove! %90 = icmp eq i32 %87, 0
Found line to remove! %91 = or i1 %89, %90
Found line to remove! %92 = zext i1 %91 to i8
Found line to remove! store i8 %92, i8* %14, align 1
Found line to remove! %93 = and i32 %87, 255
Found line to remove! %94 = tail call i32 @llvm.ctpop.i32(i32 %93)
Found line to remove! %95 = trunc i32 %94 to i8
Found line to remove! %96 = and i8 %95, 1
Found line to remove! %97 = xor i8 %96, 1
Found line to remove! store i8 %97, i8* %15, align 1
Found line to remove! %98 = xor i32 %87, %86
Found line to remove! %99 = lshr i32 %98, 4
Found line to remove! %100 = trunc i32 %99 to i8
Found line to remove! %101 = and i8 %100, 1
Found line to remove! store i8 %101, i8* %16, align 1
Found line to remove! %102 = zext i1 %90 to i8
Found line to remove! store i8 %102, i8* %17, align 1
Found line to remove! %103 = lshr i32 %87, 31
Found line to remove! %104 = trunc i32 %103 to i8
Found line to remove! store i8 %104, i8* %18, align 1
Found line to remove! %105 = lshr i32 %86, 31
Found line to remove! %106 = xor i32 %103, %105
Found line to remove! %107 = add nuw nsw i32 %106, %103
Found line to remove! %108 = icmp eq i32 %107, 2
Found line to remove! %109 = zext i1 %108 to i8
Found line to remove! store i8 %109, i8* %19, align 1
Found line to remove! %110 = add i64 %83, 9
Found line to remove! store i64 %110, i64* %3, align 8
Found line to remove! store i32 %87, i32* %85, align 4
Found line to remove! %111 = load i64, i64* %3, align 8
Found line to remove! %112 = add i64 %111, -36
Found line to remove! store i64 %112, i64* %3, align 8
Keep: br label %block_.L_4005bb
Keep: 
Keep: block_.L_4005e4:                                  ; preds = %block_.L_4005bb
Found line to remove! %113 = add i64 %49, 1
Found line to remove! store i64 %113, i64* %3, align 8
Found line to remove! %114 = load i64, i64* %6, align 8
Found line to remove! %115 = add i64 %114, 8
Found line to remove! %116 = inttoptr i64 %114 to i64*
Found line to remove! %117 = load i64, i64* %116, align 8
Found line to remove! store i64 %117, i64* %RBP.i, align 8
Found line to remove! store i64 %115, i64* %6, align 8
Found line to remove! %118 = add i64 %49, 2
Found line to remove! store i64 %118, i64* %3, align 8
Found line to remove! %119 = inttoptr i64 %115 to i64*
Found line to remove! %120 = load i64, i64* %119, align 8
Found line to remove! store i64 %120, i64* %3, align 8
Found line to remove! %121 = add i64 %114, 16
Found line to remove! store i64 %121, i64* %6, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -12', '%12 = add i64 %10, 10', 'store i64 %12, i64* %3, align 8', '%13 = inttoptr i64 %11 to i32*', 'store i32 1, i32* %13, align 4', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', '%RAX.i19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RCX.i14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%.pre = load i64, i64* %3, align 8', '%20 = phi i64 [ %112, %block_4005c5 ], [ %.pre, %entry ]', '%23 = add i64 %20, 4', 'store i64 %23, i64* %3, align 8', '%27 = icmp ult i32 %25, 7', '%28 = zext i1 %27 to i8', 'store i8 %28, i8* %14, align 1', '%29 = and i32 %26, 255', '%30 = tail call i32 @llvm.ctpop.i32(i32 %29)', '%31 = trunc i32 %30 to i8', '%32 = and i8 %31, 1', '%33 = xor i8 %32, 1', 'store i8 %33, i8* %15, align 1', '%34 = xor i32 %26, %25', '%35 = lshr i32 %34, 4', '%36 = trunc i32 %35 to i8', '%37 = and i8 %36, 1', 'store i8 %37, i8* %16, align 1', '%39 = zext i1 %38 to i8', 'store i8 %39, i8* %17, align 1', 'store i8 %41, i8* %18, align 1', '%46 = zext i1 %45 to i8', 'store i8 %46, i8* %19, align 1', '%.v = select i1 %.demorgan, i64 10, i64 41', '%49 = add i64 %20, %.v', 'store i64 %49, i64* %3, align 8', '%50 = add i64 %49, 3', 'store i64 %50, i64* %3, align 8', '%53 = zext i32 %52 to i64', 'store i64 %53, i64* %RAX.i19, align 8', '%54 = icmp eq i32 %51, 0', '%55 = zext i1 %54 to i8', 'store i8 %55, i8* %14, align 1', '%56 = and i32 %52, 255', '%57 = tail call i32 @llvm.ctpop.i32(i32 %56)', '%58 = trunc i32 %57 to i8', '%59 = and i8 %58, 1', '%60 = xor i8 %59, 1', 'store i8 %60, i8* %15, align 1', '%61 = xor i32 %52, %51', '%62 = lshr i32 %61, 4', '%63 = trunc i32 %62 to i8', '%64 = and i8 %63, 1', 'store i8 %64, i8* %16, align 1', '%65 = icmp eq i32 %52, 0', '%66 = zext i1 %65 to i8', 'store i8 %66, i8* %17, align 1', '%67 = lshr i32 %52, 31', '%68 = trunc i32 %67 to i8', 'store i8 %68, i8* %18, align 1', '%69 = lshr i32 %51, 31', '%70 = xor i32 %67, %69', '%71 = add nuw nsw i32 %70, %69', '%72 = icmp eq i32 %71, 2', '%73 = zext i1 %72 to i8', 'store i8 %73, i8* %19, align 1', '%74 = add i64 %49, 10', 'store i64 %74, i64* %3, align 8', 'store i64 %76, i64* %RCX.i14, align 8', '%79 = add i64 %49, 17', 'store i64 %79, i64* %3, align 8', '%81 = load i64, i64* %RBP.i, align 8', '%82 = add i64 %81, -4', '%83 = load i64, i64* %3, align 8', '%84 = add i64 %83, 3', 'store i64 %84, i64* %3, align 8', '%85 = inttoptr i64 %82 to i32*', '%86 = load i32, i32* %85, align 4', '%87 = add i32 %86, 1', '%88 = zext i32 %87 to i64', 'store i64 %88, i64* %RAX.i19, align 8', '%89 = icmp eq i32 %86, -1', '%90 = icmp eq i32 %87, 0', '%91 = or i1 %89, %90', '%92 = zext i1 %91 to i8', 'store i8 %92, i8* %14, align 1', '%93 = and i32 %87, 255', '%94 = tail call i32 @llvm.ctpop.i32(i32 %93)', '%95 = trunc i32 %94 to i8', '%96 = and i8 %95, 1', '%97 = xor i8 %96, 1', 'store i8 %97, i8* %15, align 1', '%98 = xor i32 %87, %86', '%99 = lshr i32 %98, 4', '%100 = trunc i32 %99 to i8', '%101 = and i8 %100, 1', 'store i8 %101, i8* %16, align 1', '%102 = zext i1 %90 to i8', 'store i8 %102, i8* %17, align 1', '%103 = lshr i32 %87, 31', '%104 = trunc i32 %103 to i8', 'store i8 %104, i8* %18, align 1', '%105 = lshr i32 %86, 31', '%106 = xor i32 %103, %105', '%107 = add nuw nsw i32 %106, %103', '%108 = icmp eq i32 %107, 2', '%109 = zext i1 %108 to i8', 'store i8 %109, i8* %19, align 1', '%110 = add i64 %83, 9', 'store i64 %110, i64* %3, align 8', 'store i32 %87, i32* %85, align 4', '%111 = load i64, i64* %3, align 8', '%112 = add i64 %111, -36', 'store i64 %112, i64* %3, align 8', '%113 = add i64 %49, 1', 'store i64 %113, i64* %3, align 8', '%114 = load i64, i64* %6, align 8', '%115 = add i64 %114, 8', '%116 = inttoptr i64 %114 to i64*', '%117 = load i64, i64* %116, align 8', 'store i64 %117, i64* %RBP.i, align 8', 'store i64 %115, i64* %6, align 8', '%118 = add i64 %49, 2', 'store i64 %118, i64* %3, align 8', '%119 = inttoptr i64 %115 to i64*', '%120 = load i64, i64* %119, align 8', 'store i64 %120, i64* %3, align 8', '%121 = add i64 %114, 16', 'store i64 %121, i64* %6, align 8'])
TO REMOVE: dict_keys(['%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%3 = load i64, i64* %RBP, align 8', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%6 = load i64, i64* %5, align 8', '%7 = add i64 %6, -8', '%8 = inttoptr i64 %7 to i64*', 'store i64 %3, i64* %8, align 8', 'store i64 %7, i64* %5, align 8', '%9 = load i64, i64* %PC, align 8', 'store i64 %7, i64* %RBP, align 8', '%10 = add i64 %6, -12', '%11 = add i64 %9, 10', 'store i64 %11, i64* %PC, align 8', '%12 = inttoptr i64 %10 to i32*', 'store i32 1, i32* %12, align 4', '%13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', '%.pre = load i64, i64* %PC, align 8', '%19 = add i64 %120, 1', 'store i64 %19, i64* %PC, align 8', '%20 = load i64, i64* %5, align 8', '%21 = add i64 %20, 8', '%22 = inttoptr i64 %20 to i64*', '%23 = load i64, i64* %22, align 8', 'store i64 %23, i64* %RBP, align 8', 'store i64 %21, i64* %5, align 8', '%24 = add i64 %120, 2', 'store i64 %24, i64* %PC, align 8', '%25 = inttoptr i64 %21 to i64*', '%26 = load i64, i64* %25, align 8', 'store i64 %26, i64* %PC, align 8', '%27 = add i64 %20, 16', 'store i64 %27, i64* %5, align 8', '%28 = add i64 %120, 3', 'store i64 %28, i64* %PC, align 8', '%31 = zext i32 %30 to i64', 'store i64 %31, i64* %RAX, align 8', '%32 = icmp eq i32 %29, 0', '%33 = zext i1 %32 to i8', 'store i8 %33, i8* %13, align 1', '%34 = and i32 %30, 255', '%35 = tail call i32 @llvm.ctpop.i32(i32 %34) #12', '%36 = trunc i32 %35 to i8', '%37 = and i8 %36, 1', '%38 = xor i8 %37, 1', 'store i8 %38, i8* %14, align 1', '%39 = xor i32 %30, %29', '%40 = lshr i32 %39, 4', '%41 = trunc i32 %40 to i8', '%42 = and i8 %41, 1', 'store i8 %42, i8* %15, align 1', '%43 = icmp eq i32 %30, 0', '%44 = zext i1 %43 to i8', 'store i8 %44, i8* %16, align 1', '%45 = lshr i32 %30, 31', '%46 = trunc i32 %45 to i8', 'store i8 %46, i8* %17, align 1', '%47 = lshr i32 %29, 31', '%48 = xor i32 %45, %47', '%49 = add nuw nsw i32 %48, %47', '%50 = icmp eq i32 %49, 2', '%51 = zext i1 %50 to i8', 'store i8 %51, i8* %18, align 1', '%52 = add i64 %120, 10', 'store i64 %52, i64* %PC, align 8', 'store i64 %54, i64* %RCX, align 8', '%57 = add i64 %120, 17', 'store i64 %57, i64* %PC, align 8', '%59 = load i64, i64* %RBP, align 8', '%60 = add i64 %59, -4', '%61 = load i64, i64* %PC, align 8', '%62 = add i64 %61, 3', 'store i64 %62, i64* %PC, align 8', '%63 = inttoptr i64 %60 to i32*', '%64 = load i32, i32* %63, align 4', '%65 = add i32 %64, 1', '%66 = zext i32 %65 to i64', 'store i64 %66, i64* %RAX, align 8', '%67 = icmp eq i32 %64, -1', '%68 = icmp eq i32 %65, 0', '%69 = or i1 %67, %68', '%70 = zext i1 %69 to i8', 'store i8 %70, i8* %13, align 1', '%71 = and i32 %65, 255', '%72 = tail call i32 @llvm.ctpop.i32(i32 %71) #12', '%73 = trunc i32 %72 to i8', '%74 = and i8 %73, 1', '%75 = xor i8 %74, 1', 'store i8 %75, i8* %14, align 1', '%76 = xor i32 %65, %64', '%77 = lshr i32 %76, 4', '%78 = trunc i32 %77 to i8', '%79 = and i8 %78, 1', 'store i8 %79, i8* %15, align 1', '%80 = zext i1 %68 to i8', 'store i8 %80, i8* %16, align 1', '%81 = lshr i32 %65, 31', '%82 = trunc i32 %81 to i8', 'store i8 %82, i8* %17, align 1', '%83 = lshr i32 %64, 31', '%84 = xor i32 %81, %83', '%85 = add nuw nsw i32 %84, %81', '%86 = icmp eq i32 %85, 2', '%87 = zext i1 %86 to i8', 'store i8 %87, i8* %18, align 1', '%88 = add i64 %61, 9', 'store i64 %88, i64* %PC, align 8', 'store i32 %65, i32* %63, align 4', '%89 = load i64, i64* %PC, align 8', '%90 = add i64 %89, -36', 'store i64 %90, i64* %PC, align 8', '%91 = phi i64 [ %90, %block_4005c5 ], [ %.pre, %block_4005b0 ]', '%94 = add i64 %91, 4', 'store i64 %94, i64* %PC, align 8', '%98 = icmp ult i32 %96, 7', '%99 = zext i1 %98 to i8', 'store i8 %99, i8* %13, align 1', '%100 = and i32 %97, 255', '%101 = tail call i32 @llvm.ctpop.i32(i32 %100) #12', '%102 = trunc i32 %101 to i8', '%103 = and i8 %102, 1', '%104 = xor i8 %103, 1', 'store i8 %104, i8* %14, align 1', '%105 = xor i32 %97, %96', '%106 = lshr i32 %105, 4', '%107 = trunc i32 %106 to i8', '%108 = and i8 %107, 1', 'store i8 %108, i8* %15, align 1', '%110 = zext i1 %109 to i8', 'store i8 %110, i8* %16, align 1', 'store i8 %112, i8* %17, align 1', '%117 = zext i1 %116 to i8', 'store i8 %117, i8* %18, align 1', '%.v = select i1 %.demorgan, i64 10, i64 41', '%120 = add i64 %91, %.v', 'store i64 %120, i64* %PC, align 8'])
Keep: block_4005b0:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %3 = load i64, i64* %RBP, align 8
Keep: %4 = add i64 %1, 1
Keep: store i64 %4, i64* %PC, align 8
Found line to remove! %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %6 = load i64, i64* %5, align 8
Found line to remove! %7 = add i64 %6, -8
Found line to remove! %8 = inttoptr i64 %7 to i64*
Found line to remove! store i64 %3, i64* %8, align 8
Found line to remove! store i64 %7, i64* %5, align 8
Found line to remove! %9 = load i64, i64* %PC, align 8
Found line to remove! store i64 %7, i64* %RBP, align 8
Found line to remove! %10 = add i64 %6, -12
Found line to remove! %11 = add i64 %9, 10
Found line to remove! store i64 %11, i64* %PC, align 8
Found line to remove! %12 = inttoptr i64 %10 to i32*
Found line to remove! store i32 1, i32* %12, align 4
Found line to remove! %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! %.pre = load i64, i64* %PC, align 8
Keep: br label %block_4005bb
Keep: 
Keep: block_4005e4:                                     ; preds = %block_4005bb
Found line to remove! %19 = add i64 %120, 1
Found line to remove! store i64 %19, i64* %PC, align 8
Found line to remove! %20 = load i64, i64* %5, align 8
Found line to remove! %21 = add i64 %20, 8
Found line to remove! %22 = inttoptr i64 %20 to i64*
Found line to remove! %23 = load i64, i64* %22, align 8
Found line to remove! store i64 %23, i64* %RBP, align 8
Found line to remove! store i64 %21, i64* %5, align 8
Found line to remove! %24 = add i64 %120, 2
Found line to remove! store i64 %24, i64* %PC, align 8
Found line to remove! %25 = inttoptr i64 %21 to i64*
Found line to remove! %26 = load i64, i64* %25, align 8
Found line to remove! store i64 %26, i64* %PC, align 8
Found line to remove! %27 = add i64 %20, 16
Found line to remove! store i64 %27, i64* %5, align 8
Keep: ret %struct.Memory* %2
Keep: 
Keep: block_4005c5:                                     ; preds = %block_4005bb
Found line to remove! %28 = add i64 %120, 3
Found line to remove! store i64 %28, i64* %PC, align 8
Keep: %29 = load i32, i32* %95, align 4
Keep: %30 = add i32 %29, -1
Found line to remove! %31 = zext i32 %30 to i64
Found line to remove! store i64 %31, i64* %RAX, align 8
Found line to remove! %32 = icmp eq i32 %29, 0
Found line to remove! %33 = zext i1 %32 to i8
Found line to remove! store i8 %33, i8* %13, align 1
Found line to remove! %34 = and i32 %30, 255
Found line to remove! %35 = tail call i32 @llvm.ctpop.i32(i32 %34) #12
Found line to remove! %36 = trunc i32 %35 to i8
Found line to remove! %37 = and i8 %36, 1
Found line to remove! %38 = xor i8 %37, 1
Found line to remove! store i8 %38, i8* %14, align 1
Found line to remove! %39 = xor i32 %30, %29
Found line to remove! %40 = lshr i32 %39, 4
Found line to remove! %41 = trunc i32 %40 to i8
Found line to remove! %42 = and i8 %41, 1
Found line to remove! store i8 %42, i8* %15, align 1
Found line to remove! %43 = icmp eq i32 %30, 0
Found line to remove! %44 = zext i1 %43 to i8
Found line to remove! store i8 %44, i8* %16, align 1
Found line to remove! %45 = lshr i32 %30, 31
Found line to remove! %46 = trunc i32 %45 to i8
Found line to remove! store i8 %46, i8* %17, align 1
Found line to remove! %47 = lshr i32 %29, 31
Found line to remove! %48 = xor i32 %45, %47
Found line to remove! %49 = add nuw nsw i32 %48, %47
Found line to remove! %50 = icmp eq i32 %49, 2
Found line to remove! %51 = zext i1 %50 to i8
Found line to remove! store i8 %51, i8* %18, align 1
Found line to remove! %52 = add i64 %120, 10
Found line to remove! store i64 %52, i64* %PC, align 8
Keep: %53 = load i32, i32* %95, align 4
Keep: %54 = sext i32 %53 to i64
Found line to remove! store i64 %54, i64* %RCX, align 8
Keep: %55 = shl nsw i64 %54, 2
Keep: %56 = add i64 %55, ptrtoint (%permarray_type* @permarray to i64)
Found line to remove! %57 = add i64 %120, 17
Found line to remove! store i64 %57, i64* %PC, align 8
Keep: %58 = inttoptr i64 %56 to i32*
Keep: store i32 %30, i32* %58, align 4
Found line to remove! %59 = load i64, i64* %RBP, align 8
Found line to remove! %60 = add i64 %59, -4
Found line to remove! %61 = load i64, i64* %PC, align 8
Found line to remove! %62 = add i64 %61, 3
Found line to remove! store i64 %62, i64* %PC, align 8
Found line to remove! %63 = inttoptr i64 %60 to i32*
Found line to remove! %64 = load i32, i32* %63, align 4
Found line to remove! %65 = add i32 %64, 1
Found line to remove! %66 = zext i32 %65 to i64
Found line to remove! store i64 %66, i64* %RAX, align 8
Found line to remove! %67 = icmp eq i32 %64, -1
Found line to remove! %68 = icmp eq i32 %65, 0
Found line to remove! %69 = or i1 %67, %68
Found line to remove! %70 = zext i1 %69 to i8
Found line to remove! store i8 %70, i8* %13, align 1
Found line to remove! %71 = and i32 %65, 255
Found line to remove! %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #12
Found line to remove! %73 = trunc i32 %72 to i8
Found line to remove! %74 = and i8 %73, 1
Found line to remove! %75 = xor i8 %74, 1
Found line to remove! store i8 %75, i8* %14, align 1
Found line to remove! %76 = xor i32 %65, %64
Found line to remove! %77 = lshr i32 %76, 4
Found line to remove! %78 = trunc i32 %77 to i8
Found line to remove! %79 = and i8 %78, 1
Found line to remove! store i8 %79, i8* %15, align 1
Found line to remove! %80 = zext i1 %68 to i8
Found line to remove! store i8 %80, i8* %16, align 1
Found line to remove! %81 = lshr i32 %65, 31
Found line to remove! %82 = trunc i32 %81 to i8
Found line to remove! store i8 %82, i8* %17, align 1
Found line to remove! %83 = lshr i32 %64, 31
Found line to remove! %84 = xor i32 %81, %83
Found line to remove! %85 = add nuw nsw i32 %84, %81
Found line to remove! %86 = icmp eq i32 %85, 2
Found line to remove! %87 = zext i1 %86 to i8
Found line to remove! store i8 %87, i8* %18, align 1
Found line to remove! %88 = add i64 %61, 9
Found line to remove! store i64 %88, i64* %PC, align 8
Found line to remove! store i32 %65, i32* %63, align 4
Found line to remove! %89 = load i64, i64* %PC, align 8
Found line to remove! %90 = add i64 %89, -36
Found line to remove! store i64 %90, i64* %PC, align 8
Keep: br label %block_4005bb
Keep: 
Keep: block_4005bb:                                     ; preds = %block_4005c5, %block_4005b0
Found line to remove! %91 = phi i64 [ %90, %block_4005c5 ], [ %.pre, %block_4005b0 ]
Keep: %92 = load i64, i64* %RBP, align 8
Keep: %93 = add i64 %92, -4
Found line to remove! %94 = add i64 %91, 4
Found line to remove! store i64 %94, i64* %PC, align 8
Keep: %95 = inttoptr i64 %93 to i32*
Keep: %96 = load i32, i32* %95, align 4
Keep: %97 = add i32 %96, -7
Found line to remove! %98 = icmp ult i32 %96, 7
Found line to remove! %99 = zext i1 %98 to i8
Found line to remove! store i8 %99, i8* %13, align 1
Found line to remove! %100 = and i32 %97, 255
Found line to remove! %101 = tail call i32 @llvm.ctpop.i32(i32 %100) #12
Found line to remove! %102 = trunc i32 %101 to i8
Found line to remove! %103 = and i8 %102, 1
Found line to remove! %104 = xor i8 %103, 1
Found line to remove! store i8 %104, i8* %14, align 1
Found line to remove! %105 = xor i32 %97, %96
Found line to remove! %106 = lshr i32 %105, 4Writing '/tmp/tmpvvpotm0w.dot'...
Writing '/tmp/tmpvvpotm0w.dot':Done

Reading LLVM: /tmp/tmpjpznu2mw-query.ll
Extracting function [Initialize] from /tmp/tmpjpznu2mw-query.ll
Dot file generated!
Writing '/tmp/tmpik_buise.dot'...
Writing '/tmp/tmpik_buise.dot':Done

Reading LLVM: /tmp/tmp3_8849o8-target.ll
Extracting function [Initialize] from /tmp/tmp3_8849o8-target.ll
Dot file generated!

Found line to remove! %107 = trunc i32 %106 to i8
Found line to remove! %108 = and i8 %107, 1
Found line to remove! store i8 %108, i8* %15, align 1
Keep: %109 = icmp eq i32 %97, 0
Found line to remove! %110 = zext i1 %109 to i8
Found line to remove! store i8 %110, i8* %16, align 1
Keep: %111 = lshr i32 %97, 31
Keep: %112 = trunc i32 %111 to i8
Found line to remove! store i8 %112, i8* %17, align 1
Keep: %113 = lshr i32 %96, 31
Keep: %114 = xor i32 %111, %113
Keep: %115 = add nuw nsw i32 %114, %113
Keep: %116 = icmp eq i32 %115, 2
Found line to remove! %117 = zext i1 %116 to i8
Found line to remove! store i8 %117, i8* %18, align 1
Keep: %118 = icmp ne i8 %112, 0
Keep: %119 = xor i1 %118, %116
Keep: %.demorgan = or i1 %109, %119
Found line to remove! %.v = select i1 %.demorgan, i64 10, i64 41
Found line to remove! %120 = add i64 %91, %.v
Found line to remove! store i64 %120, i64* %PC, align 8
Keep: br i1 %.demorgan, label %block_4005c5, label %block_4005e4
Missed: dict_keys(['%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%3 = load i64, i64* %RBP, align 8', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%6 = load i64, i64* %5, align 8', '%7 = add i64 %6, -8', '%8 = inttoptr i64 %7 to i64*', 'store i64 %3, i64* %8, align 8', 'store i64 %7, i64* %5, align 8', '%9 = load i64, i64* %PC, align 8', 'store i64 %7, i64* %RBP, align 8', '%10 = add i64 %6, -12', '%11 = add i64 %9, 10', 'store i64 %11, i64* %PC, align 8', '%12 = inttoptr i64 %10 to i32*', 'store i32 1, i32* %12, align 4', '%13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', '%.pre = load i64, i64* %PC, align 8', '%19 = add i64 %120, 1', 'store i64 %19, i64* %PC, align 8', '%20 = load i64, i64* %5, align 8', '%21 = add i64 %20, 8', '%22 = inttoptr i64 %20 to i64*', '%23 = load i64, i64* %22, align 8', 'store i64 %23, i64* %RBP, align 8', 'store i64 %21, i64* %5, align 8', '%24 = add i64 %120, 2', 'store i64 %24, i64* %PC, align 8', '%25 = inttoptr i64 %21 to i64*', '%26 = load i64, i64* %25, align 8', 'store i64 %26, i64* %PC, align 8', '%27 = add i64 %20, 16', 'store i64 %27, i64* %5, align 8', '%28 = add i64 %120, 3', 'store i64 %28, i64* %PC, align 8', '%31 = zext i32 %30 to i64', 'store i64 %31, i64* %RAX, align 8', '%32 = icmp eq i32 %29, 0', '%33 = zext i1 %32 to i8', 'store i8 %33, i8* %13, align 1', '%34 = and i32 %30, 255', '%35 = tail call i32 @llvm.ctpop.i32(i32 %34) #12', '%36 = trunc i32 %35 to i8', '%37 = and i8 %36, 1', '%38 = xor i8 %37, 1', 'store i8 %38, i8* %14, align 1', '%39 = xor i32 %30, %29', '%40 = lshr i32 %39, 4', '%41 = trunc i32 %40 to i8', '%42 = and i8 %41, 1', 'store i8 %42, i8* %15, align 1', '%43 = icmp eq i32 %30, 0', '%44 = zext i1 %43 to i8', 'store i8 %44, i8* %16, align 1', '%45 = lshr i32 %30, 31', '%46 = trunc i32 %45 to i8', 'store i8 %46, i8* %17, align 1', '%47 = lshr i32 %29, 31', '%48 = xor i32 %45, %47', '%49 = add nuw nsw i32 %48, %47', '%50 = icmp eq i32 %49, 2', '%51 = zext i1 %50 to i8', 'store i8 %51, i8* %18, align 1', '%52 = add i64 %120, 10', 'store i64 %52, i64* %PC, align 8', 'store i64 %54, i64* %RCX, align 8', '%57 = add i64 %120, 17', 'store i64 %57, i64* %PC, align 8', '%59 = load i64, i64* %RBP, align 8', '%60 = add i64 %59, -4', '%61 = load i64, i64* %PC, align 8', '%62 = add i64 %61, 3', 'store i64 %62, i64* %PC, align 8', '%63 = inttoptr i64 %60 to i32*', '%64 = load i32, i32* %63, align 4', '%65 = add i32 %64, 1', '%66 = zext i32 %65 to i64', 'store i64 %66, i64* %RAX, align 8', '%67 = icmp eq i32 %64, -1', '%68 = icmp eq i32 %65, 0', '%69 = or i1 %67, %68', '%70 = zext i1 %69 to i8', 'store i8 %70, i8* %13, align 1', '%71 = and i32 %65, 255', '%72 = tail call i32 @llvm.ctpop.i32(i32 %71) #12', '%73 = trunc i32 %72 to i8', '%74 = and i8 %73, 1', '%75 = xor i8 %74, 1', 'store i8 %75, i8* %14, align 1', '%76 = xor i32 %65, %64', '%77 = lshr i32 %76, 4', '%78 = trunc i32 %77 to i8', '%79 = and i8 %78, 1', 'store i8 %79, i8* %15, align 1', '%80 = zext i1 %68 to i8', 'store i8 %80, i8* %16, align 1', '%81 = lshr i32 %65, 31', '%82 = trunc i32 %81 to i8', 'store i8 %82, i8* %17, align 1', '%83 = lshr i32 %64, 31', '%84 = xor i32 %81, %83', '%85 = add nuw nsw i32 %84, %81', '%86 = icmp eq i32 %85, 2', '%87 = zext i1 %86 to i8', 'store i8 %87, i8* %18, align 1', '%88 = add i64 %61, 9', 'store i64 %88, i64* %PC, align 8', 'store i32 %65, i32* %63, align 4', '%89 = load i64, i64* %PC, align 8', '%90 = add i64 %89, -36', 'store i64 %90, i64* %PC, align 8', '%91 = phi i64 [ %90, %block_4005c5 ], [ %.pre, %block_4005b0 ]', '%94 = add i64 %91, 4', 'store i64 %94, i64* %PC, align 8', '%98 = icmp ult i32 %96, 7', '%99 = zext i1 %98 to i8', 'store i8 %99, i8* %13, align 1', '%100 = and i32 %97, 255', '%101 = tail call i32 @llvm.ctpop.i32(i32 %100) #12', '%102 = trunc i32 %101 to i8', '%103 = and i8 %102, 1', '%104 = xor i8 %103, 1', 'store i8 %104, i8* %14, align 1', '%105 = xor i32 %97, %96', '%106 = lshr i32 %105, 4', '%107 = trunc i32 %106 to i8', '%108 = and i8 %107, 1', 'store i8 %108, i8* %15, align 1', '%110 = zext i1 %109 to i8', 'store i8 %110, i8* %16, align 1', 'store i8 %112, i8* %17, align 1', '%117 = zext i1 %116 to i8', 'store i8 %117, i8* %18, align 1', '%.v = select i1 %.demorgan, i64 10, i64 41', '%120 = add i64 %91, %.v', 'store i64 %120, i64* %PC, align 8'])
================ Starting round 2
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %var_2_5 = add i64 %1, 1
- 3 store i64 %var_2_5, i64* %var_2_3, align 8
- 4 %var_2_211 = load i64, i64* %RBP.i, align 8
- 5 %var_2_222 = add i64 %var_2_211, -4
- 6 %var_2_243 = inttoptr i64 %var_2_222 to i32*
- 7 %var_2_254 = load i32, i32* %var_2_243, align 4
- 8 %var_2_265 = add i32 %var_2_254, -7
- 9 %var_2_386 = icmp eq i32 %var_2_265, 0
- 10 %var_2_407 = lshr i32 %var_2_265, 31
- 11 %var_2_428 = lshr i32 %var_2_254, 31
- 12 %var_2_439 = xor i32 %var_2_407, %var_2_428
- 13 %var_2_4410 = add nuw nsw i32 %var_2_439, %var_2_428
- 14 %var_2_4511 = icmp eq i32 %var_2_4410, 2
- 15 %var_2_4712 = icmp ne i32 %var_2_407, 0
- 16 %var_2_4813 = xor i1 %var_2_4712, %var_2_4511
- 17 %.demorgan14 = or i1 %var_2_386, %var_2_4813
- 18 \<badref\> = br i1 %.demorgan14, label %block_4005c5.preheader, label %block_.L_4005e4
- 19 \<badref\> = br label %block_4005c5
- 20 %var_2_2515 = phi i32 [ %var_2_25, %block_4005c5 ], [ %var_2_254, %block_4005c5.preheader ]
- 21 %var_2_52 = add i32 %var_2_2515, -1
- 22 %var_2_76 = sext i32 %var_2_2515 to i64
- 23 %var_2_77 = shl nsw i64 %var_2_76, 2
- 24 %var_2_78 = add nsw i64 %var_2_77, 6383440
- 25 %var_2_80 = inttoptr i64 %var_2_78 to i32*
- 26 store i32 %var_2_52, i32* %var_2_80, align 4
- 27 %var_2_21 = load i64, i64* %RBP.i, align 8
- 28 %var_2_22 = add i64 %var_2_21, -4
- 29 %var_2_24 = inttoptr i64 %var_2_22 to i32*
- 30 %var_2_25 = load i32, i32* %var_2_24, align 4
- 31 %var_2_26 = add i32 %var_2_25, -7
- 32 %var_2_38 = icmp eq i32 %var_2_26, 0
- 33 %var_2_40 = lshr i32 %var_2_26, 31
- 34 %var_2_42 = lshr i32 %var_2_25, 31
- 35 %var_2_43 = xor i32 %var_2_40, %var_2_42
- 36 %var_2_44 = add nuw nsw i32 %var_2_43, %var_2_42
- 37 %var_2_45 = icmp eq i32 %var_2_44, 2
- 38 %var_2_47 = icmp ne i32 %var_2_40, 0
- 39 %var_2_48 = xor i1 %var_2_47, %var_2_45
- 40 %.demorgan = or i1 %var_2_38, %var_2_48
- 41 \<badref\> = br i1 %.demorgan, label %block_4005c5, label %block_.L_4005e4.loopexit
- 42 \<badref\> = br label %block_.L_4005e4
- 43 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3a0addad08>, {0: {0}, 1: {1}, 2: {2}, 3: {3, 28}, 4: {32, 4, 29, 7}, 5: {5, 30}, 6: {27, 6, 31}, 7: {32, 4, 29, 7}, 8: {8, 33}, 9: {40, 9, 34, 15}, 10: {35, 10, 11, 36}, 11: {35, 10, 11, 36}, 12: {16, 41, 12, 37}, 13: {26, 13, 38}, 14: {14, 39}, 15: {40, 9, 34, 15}, 16: {16, 41, 12, 37}, 17: {17, 42}, 18: {18, 43}, 19: {19, 20}, 20: {22}, 21: {23}, 22: {24}, 23: {25}, 24: set(), 25: {27, 6, 31}, 26: {3, 28}, 27: {32, 4, 29, 7}, 28: {5, 30}, 29: {27, 6, 31}, 30: {32, 4, 29, 7}, 31: {8, 33}, 32: {40, 9, 34, 15}, 33: {35, 10, 11, 36}, 34: {35, 10, 11, 36}, 35: {16, 41, 12, 37}, 36: {26, 13, 38}, 37: {14, 39}, 38: {40, 9, 34, 15}, 39: {16, 41, 12, 37}, 40: {17, 42}, 41: {18, 43}, 42: {19, 20}, 43: {21}})
Equivalent! frozenset({4, 29}) {27, 4}
Equivalent! frozenset({5, 30}) {28, 5}
Equivalent! frozenset({6, 31}) {29, 6}
Equivalent! frozenset({32, 7}) {30, 7}
Equivalent! frozenset({8, 33}) {8, 31}
Equivalent! frozenset({9, 34}) {32, 9}
Equivalent! frozenset({10, 35}) {33, 10}
Equivalent! frozenset({11, 36}) {34, 11}
Equivalent! frozenset({12, 37}) {35, 12}
Equivalent! frozenset({13, 38}) {36, 13}
Equivalent! frozenset({14, 39}) {37, 14}
Equivalent! frozenset({40, 15}) {38, 15}
Equivalent! frozenset({16, 41}) {16, 39}
Equivalent! frozenset({17, 42}) {40, 17}
Equivalent! frozenset({18, 43}) {41, 18}
Equivalent! frozenset({19, 20}) {42, 19}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3a0addad08>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {29}, 5: {30}, 6: {31}, 7: {7}, 8: {8}, 9: {34}, 10: {35}, 11: {36}, 12: {37}, 13: {38}, 14: {39}, 15: {15}, 16: {16}, 17: {42}, 18: {43}, 19: {20}, 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: {4}, 28: {5}, 29: {6}, 30: {32}, 31: {33}, 32: {9}, 33: {10}, 34: {11}, 35: {12}, 36: {13}, 37: {14}, 38: {40}, 39: {41}, 40: {17}, 41: {18}, 42: {19}, 43: {21}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 add add
EXACT 3 store store
EXACT 4 load load
EXACT 5 add add
EXACT 6 inttoptr inttoptr
EXACT 7 load load
EXACT 8 add add
EXACT 9 icmp icmp
EXACT 10 lshr lshr
EXACT 11 lshr lshr
EXACT 12 xor xor
EXACT 13 add add
EXACT 14 icmp icmp
EXACT 15 icmp icmp
EXACT 16 xor xor
EXACT 17 or or
EXACT 18 br br
EXACT 19 br br
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
EXACT 27 load load
EXACT 28 add add
EXACT 29 inttoptr inttoptr
EXACT 30 load load
EXACT 31 add add
EXACT 32 icmp icmp
EXACT 33 lshr lshr
EXACT 34 lshr lshr
EXACT 35 xor xor
EXACT 36 add add
EXACT 37 icmp icmp
EXACT 38 icmp icmp
EXACT 39 xor xor
EXACT 40 or or
EXACT 41 br br
EXACT 42 br br
EXACT 43 ret ret
================ Starting round 3
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %var_2_4 = add i64 %1, 1
- 3 store i64 %var_2_4, i64* %PC, align 8
- 4 %var_2_921 = load i64, i64* %RBP, align 8
- 5 %var_2_932 = add i64 %var_2_921, -4
- 6 %var_2_953 = inttoptr i64 %var_2_932 to i32*
- 7 %var_2_964 = load i32, i32* %var_2_953, align 4
- 8 %var_2_975 = add i32 %var_2_964, -7
- 9 %var_2_1096 = icmp eq i32 %var_2_975, 0
- 10 %var_2_1117 = lshr i32 %var_2_975, 31
- 11 %var_2_1138 = lshr i32 %var_2_964, 31
- 12 %var_2_1149 = xor i32 %var_2_1117, %var_2_1138
- 13 %var_2_11510 = add nuw nsw i32 %var_2_1149, %var_2_1138
- 14 %var_2_11611 = icmp eq i32 %var_2_11510, 2
- 15 %var_2_11812 = icmp ne i32 %var_2_1117, 0
- 16 %var_2_11913 = xor i1 %var_2_11812, %var_2_11611
- 17 %.demorgan14 = or i1 %var_2_1096, %var_2_11913
- 18 \<badref\> = br i1 %.demorgan14, label %block_4005c5.preheader, label %block_4005e4
- 19 \<badref\> = br label %block_4005c5
- 20 \<badref\> = br label %block_4005e4
- 21 \<badref\> = ret %struct.Memory* %2
- 22 %var_2_9615 = phi i32 [ %var_2_96, %block_4005c5 ], [ %var_2_964, %block_4005c5.preheader ]
- 23 %var_2_30 = add i32 %var_2_9615, -1
- 24 %var_2_54 = sext i32 %var_2_9615 to i64
- 25 %var_2_55 = shl nsw i64 %var_2_54, 2
- 26 %var_2_56 = add i64 %var_2_55, ptrtoint (%permarray_type* @permarray to i64)
- 27 %var_2_58 = inttoptr i64 %var_2_56 to i32*
- 28 store i32 %var_2_30, i32* %var_2_58, align 4
- 29 %var_2_92 = load i64, i64* %RBP, align 8
- 30 %var_2_93 = add i64 %var_2_92, -4
- 31 %var_2_95 = inttoptr i64 %var_2_93 to i32*
- 32 %var_2_96 = load i32, i32* %var_2_95, align 4
- 33 %var_2_97 = add i32 %var_2_96, -7
- 34 %var_2_109 = icmp eq i32 %var_2_97, 0
- 35 %var_2_111 = lshr i32 %var_2_97, 31
- 36 %var_2_113 = lshr i32 %var_2_96, 31
- 37 %var_2_114 = xor i32 %var_2_111, %var_2_113
- 38 %var_2_115 = add nuw nsw i32 %var_2_114, %var_2_113
- 39 %var_2_116 = icmp eq i32 %var_2_115, 2
- 40 %var_2_118 = icmp ne i32 %var_2_111, 0
- 41 %var_2_119 = xor i1 %var_2_118, %var_2_116
- 42 %.demorgan = or i1 %var_2_109, %var_2_119
- 43 \<badref\> = br i1 %.demorgan, label %block_4005c5, label %block_4005e4.loopexit
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3a0a7b9378>, {0: {0}, 1: {1}, 2: {2}, 3: {26, 3}, 4: {27, 4, 30, 7}, 5: {28, 5}, 6: {25, 29, 6}, 7: {27, 4, 30, 7}, 8: {8, 31}, 9: {32, 9, 38, 15}, 10: {33, 10, 11, 34}, 11: {33, 10, 11, 34}, 12: {16, 35, 12, 39}, 13: {36, 13}, 14: {37, 14}, 15: {32, 9, 38, 15}, 16: {16, 35, 12, 39}, 17: {40, 17}, 18: {41, 18}, 19: {42, 19}, 20: {42, 19}, 21: {43}, 22: {20}, 23: {21}, 24: {22}, 25: {23}, 26: {36, 13}, 27: {25, 29, 6}, 28: {26, 3}, 29: {27, 4, 30, 7}, 30: {28, 5}, 31: {25, 29, 6}, 32: {27, 4, 30, 7}, 33: {8, 31}, 34: {32, 9, 38, 15}, 35: {33, 10, 11, 34}, 36: {33, 10, 11, 34}, 37: {16, 35, 12, 39}, 38: {36, 13}, 39: {37, 14}, 40: {32, 9, 38, 15}, 41: {16, 35, 12, 39}, 42: {40, 17}, 43: {41, 18}})
Equivalent! frozenset({27, 4}) {4, 29}
Equivalent! frozenset({28, 5}) {5, 30}
Equivalent! frozenset({29, 6}) {6, 31}
Equivalent! frozenset({30, 7}) {32, 7}
Equivalent! frozenset({8, 31}) {8, 33}
Equivalent! frozenset({32, 9}) {9, 34}
Equivalent! frozenset({33, 10}) {10, 35}
Equivalent! frozenset({34, 11}) {11, 36}
Equivalent! frozenset({35, 12}) {12, 37}
Equivalent! frozenset({36, 13}) {13, 38}
Equivalent! frozenset({37, 14}) {14, 39}
Equivalent! frozenset({38, 15}) {40, 15}
Equivalent! frozenset({16, 39}) {16, 41}
Equivalent! frozenset({40, 17}) {17, 42}
Equivalent! frozenset({41, 18}) {18, 43}
Equivalent! frozenset({42, 19}) {19, 20}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3a0a7b9378>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {27}, 5: {28}, 6: {29}, 7: {7}, 8: {8}, 9: {32}, 10: {33}, 11: {34}, 12: {35}, 13: {36}, 14: {37}, 15: {15}, 16: {16}, 17: {40}, 18: {41}, 19: {42}, 20: {19}, 21: {43}, 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: {4}, 30: {5}, 31: {6}, 32: {30}, 33: {31}, 34: {9}, 35: {10}, 36: {11}, 37: {12}, 38: {13}, 39: {14}, 40: {38}, 41: {39}, 42: {17}, 43: {18}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 add add
EXACT 3 store store
EXACT 4 load load
EXACT 5 add add
EXACT 6 inttoptr inttoptr
EXACT 7 load load
EXACT 8 add add
EXACT 9 icmp icmp
EXACT 10 lshr lshr
EXACT 11 lshr lshr
EXACT 12 xor xor
EXACT 13 add add
EXACT 14 icmp icmp
EXACT 15 icmp icmp
EXACT 16 xor xor
EXACT 17 or or
EXACT 18 br br
EXACT 19 br br
EXACT 20 br br
EXACT 21 ret ret
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
EXACT 29 load load
EXACT 30 add add
EXACT 31 inttoptr inttoptr
EXACT 32 load load
EXACT 33 add add
EXACT 34 icmp icmp
EXACT 35 lshr lshr
EXACT 36 lshr lshr
EXACT 37 xor xor
EXACT 38 add add
EXACT 39 icmp icmp
EXACT 40 icmp icmp
EXACT 41 xor xor
EXACT 42 or or
EXACT 43 br br
FP: 63 2.0 False
TO REMOVE: dict_keys(['%var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%var_2_5 = add i64 %1, 1', 'store i64 %var_2_5, i64* %var_2_3, align 8'])
Keep: entry:
Found line to remove! %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep:Writing '/tmp/tmpmh_x1oq5.dot'...
Writing '/tmp/tmpmh_x1oq5.dot':Done

Reading LLVM: /tmp/tmpjpznu2mw-query.ll
Extracting function [Initialize] from /tmp/tmpjpznu2mw-query.ll
Dot file generated!
Writing '/tmp/tmpk_2e8r_m.dot'...
Writing '/tmp/tmpk_2e8r_m.dot':Done

Reading LLVM: /tmp/tmp3_8849o8-target.ll
Extracting function [Initialize] from /tmp/tmp3_8849o8-target.ll
Dot file generated!
 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_5 = add i64 %1, 1
Found line to remove! store i64 %var_2_5, i64* %var_2_3, align 8
Keep: %var_2_211 = load i64, i64* %RBP.i, align 8
Keep: %var_2_222 = add i64 %var_2_211, -4
Keep: %var_2_243 = inttoptr i64 %var_2_222 to i32*
Keep: %var_2_254 = load i32, i32* %var_2_243, align 4
Keep: %var_2_265 = add i32 %var_2_254, -7
Keep: %var_2_386 = icmp eq i32 %var_2_265, 0
Keep: %var_2_407 = lshr i32 %var_2_265, 31
Keep: %var_2_428 = lshr i32 %var_2_254, 31
Keep: %var_2_439 = xor i32 %var_2_407, %var_2_428
Keep: %var_2_4410 = add nuw nsw i32 %var_2_439, %var_2_428
Keep: %var_2_4511 = icmp eq i32 %var_2_4410, 2
Keep: %var_2_4712 = icmp ne i32 %var_2_407, 0
Keep: %var_2_4813 = xor i1 %var_2_4712, %var_2_4511
Keep: %.demorgan14 = or i1 %var_2_386, %var_2_4813
Keep: br i1 %.demorgan14, label %block_4005c5.preheader, label %block_.L_4005e4
Keep: 
Keep: block_4005c5.preheader:                           ; preds = %entry
Keep: br label %block_4005c5
Keep: 
Keep: block_4005c5:                                     ; preds = %block_4005c5.preheader, %block_4005c5
Keep: %var_2_2515 = phi i32 [ %var_2_25, %block_4005c5 ], [ %var_2_254, %block_4005c5.preheader ]
Keep: %var_2_52 = add i32 %var_2_2515, -1
Keep: %var_2_76 = sext i32 %var_2_2515 to i64
Keep: %var_2_77 = shl nsw i64 %var_2_76, 2
Keep: %var_2_78 = add nsw i64 %var_2_77, 6383440
Keep: %var_2_80 = inttoptr i64 %var_2_78 to i32*
Keep: store i32 %var_2_52, i32* %var_2_80, align 4
Keep: %var_2_21 = load i64, i64* %RBP.i, align 8
Keep: %var_2_22 = add i64 %var_2_21, -4
Keep: %var_2_24 = inttoptr i64 %var_2_22 to i32*
Keep: %var_2_25 = load i32, i32* %var_2_24, align 4
Keep: %var_2_26 = add i32 %var_2_25, -7
Keep: %var_2_38 = icmp eq i32 %var_2_26, 0
Keep: %var_2_40 = lshr i32 %var_2_26, 31
Keep: %var_2_42 = lshr i32 %var_2_25, 31
Keep: %var_2_43 = xor i32 %var_2_40, %var_2_42
Keep: %var_2_44 = add nuw nsw i32 %var_2_43, %var_2_42
Keep: %var_2_45 = icmp eq i32 %var_2_44, 2
Keep: %var_2_47 = icmp ne i32 %var_2_40, 0
Keep: %var_2_48 = xor i1 %var_2_47, %var_2_45
Keep: %.demorgan = or i1 %var_2_38, %var_2_48
Keep: br i1 %.demorgan, label %block_4005c5, label %block_.L_4005e4.loopexit
Keep: 
Keep: block_.L_4005e4.loopexit:                         ; preds = %block_4005c5
Keep: br label %block_.L_4005e4
Keep: 
Keep: block_.L_4005e4:                                  ; preds = %block_.L_4005e4.loopexit, %entry
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%var_2_5 = add i64 %1, 1', 'store i64 %var_2_5, i64* %var_2_3, align 8'])
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%var_2_4 = add i64 %1, 1', 'store i64 %var_2_4, i64* %PC, align 8'])
Keep: block_4005b0:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_4 = add i64 %1, 1
Found line to remove! store i64 %var_2_4, i64* %PC, align 8
Keep: %var_2_921 = load i64, i64* %RBP, align 8
Keep: %var_2_932 = add i64 %var_2_921, -4
Keep: %var_2_953 = inttoptr i64 %var_2_932 to i32*
Keep: %var_2_964 = load i32, i32* %var_2_953, align 4
Keep: %var_2_975 = add i32 %var_2_964, -7
Keep: %var_2_1096 = icmp eq i32 %var_2_975, 0
Keep: %var_2_1117 = lshr i32 %var_2_975, 31
Keep: %var_2_1138 = lshr i32 %var_2_964, 31
Keep: %var_2_1149 = xor i32 %var_2_1117, %var_2_1138
Keep: %var_2_11510 = add nuw nsw i32 %var_2_1149, %var_2_1138
Keep: %var_2_11611 = icmp eq i32 %var_2_11510, 2
Keep: %var_2_11812 = icmp ne i32 %var_2_1117, 0
Keep: %var_2_11913 = xor i1 %var_2_11812, %var_2_11611
Keep: %.demorgan14 = or i1 %var_2_1096, %var_2_11913
Keep: br i1 %.demorgan14, label %block_4005c5.preheader, label %block_4005e4
Keep: 
Keep: block_4005c5.preheader:                           ; preds = %block_4005b0
Keep: br label %block_4005c5
Keep: 
Keep: block_4005e4.loopexit:                            ; preds = %block_4005c5
Keep: br label %block_4005e4
Keep: 
Keep: block_4005e4:                                     ; preds = %block_4005e4.loopexit, %block_4005b0
Keep: ret %struct.Memory* %2
Keep: 
Keep: block_4005c5:                                     ; preds = %block_4005c5.preheader, %block_4005c5
Keep: %var_2_9615 = phi i32 [ %var_2_96, %block_4005c5 ], [ %var_2_964, %block_4005c5.preheader ]
Keep: %var_2_30 = add i32 %var_2_9615, -1
Keep: %var_2_54 = sext i32 %var_2_9615 to i64
Keep: %var_2_55 = shl nsw i64 %var_2_54, 2
Keep: %var_2_56 = add i64 %var_2_55, ptrtoint (%permarray_type* @permarray to i64)
Keep: %var_2_58 = inttoptr i64 %var_2_56 to i32*
Keep: store i32 %var_2_30, i32* %var_2_58, align 4
Keep: %var_2_92 = load i64, i64* %RBP, align 8
Keep: %var_2_93 = add i64 %var_2_92, -4
Keep: %var_2_95 = inttoptr i64 %var_2_93 to i32*
Keep: %var_2_96 = load i32, i32* %var_2_95, align 4
Keep: %var_2_97 = add i32 %var_2_96, -7
Keep: %var_2_109 = icmp eq i32 %var_2_97, 0
Keep: %var_2_111 = lshr i32 %var_2_97, 31
Keep: %var_2_113 = lshr i32 %var_2_96, 31
Keep: %var_2_114 = xor i32 %var_2_111, %var_2_113
Keep: %var_2_115 = add nuw nsw i32 %var_2_114, %var_2_113
Keep: %var_2_116 = icmp eq i32 %var_2_115, 2
Keep: %var_2_118 = icmp ne i32 %var_2_111, 0
Keep: %var_2_119 = xor i1 %var_2_118, %var_2_116
Keep: %.demorgan = or i1 %var_2_109, %var_2_119
Keep: br i1 %.demorgan, label %block_4005c5, label %block_4005e4.loopexit
Missed: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%var_2_4 = add i64 %1, 1', 'store i64 %var_2_4, i64* %PC, align 8'])
================ Starting round 4
MAPPING:
- 0 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_211 = load i64, i64* %RBP.i, align 8
- 2 %var_2_222 = add i64 %var_2_211, -4
- 3 %var_2_243 = inttoptr i64 %var_2_222 to i32*
- 4 %var_2_254 = load i32, i32* %var_2_243, align 4
- 5 %var_2_265 = add i32 %var_2_254, -7
- 6 %var_2_386 = icmp eq i32 %var_2_265, 0
- 7 %var_2_407 = lshr i32 %var_2_265, 31
- 8 %var_2_428 = lshr i32 %var_2_254, 31
- 9 %var_2_439 = xor i32 %var_2_407, %var_2_428
- 10 %var_2_4410 = add nuw nsw i32 %var_2_439, %var_2_428
- 11 %var_2_4511 = icmp eq i32 %var_2_4410, 2
- 12 %var_2_4712 = icmp ne i32 %var_2_407, 0
- 13 %var_2_4813 = xor i1 %var_2_4712, %var_2_4511
- 14 %.demorgan14 = or i1 %var_2_386, %var_2_4813
- 15 \<badref\> = br i1 %.demorgan14, label %block_4005c5.preheader, label %block_.L_4005e4
- 16 \<badref\> = br label %block_4005c5
- 17 %var_2_2515 = phi i32 [ %var_2_25, %block_4005c5 ], [ %var_2_254, %block_4005c5.preheader ]
- 18 %var_2_52 = add i32 %var_2_2515, -1
- 19 %var_2_76 = sext i32 %var_2_2515 to i64
- 20 %var_2_77 = shl nsw i64 %var_2_76, 2
- 21 %var_2_78 = add nsw i64 %var_2_77, 6383440
- 22 %var_2_80 = inttoptr i64 %var_2_78 to i32*
- 23 store i32 %var_2_52, i32* %var_2_80, align 4
- 24 %var_2_21 = load i64, i64* %RBP.i, align 8
- 25 %var_2_22 = add i64 %var_2_21, -4
- 26 %var_2_24 = inttoptr i64 %var_2_22 to i32*
- 27 %var_2_25 = load i32, i32* %var_2_24, align 4
- 28 %var_2_26 = add i32 %var_2_25, -7
- 29 %var_2_38 = icmp eq i32 %var_2_26, 0
- 30 %var_2_40 = lshr i32 %var_2_26, 31
- 31 %var_2_42 = lshr i32 %var_2_25, 31
- 32 %var_2_43 = xor i32 %var_2_40, %var_2_42
- 33 %var_2_44 = add nuw nsw i32 %var_2_43, %var_2_42
- 34 %var_2_45 = icmp eq i32 %var_2_44, 2
- 35 %var_2_47 = icmp ne i32 %var_2_40, 0
- 36 %var_2_48 = xor i1 %var_2_47, %var_2_45
- 37 %.demorgan = or i1 %var_2_38, %var_2_48
- 38 \<badref\> = br i1 %.demorgan, label %block_4005c5, label %block_.L_4005e4.loopexit
- 39 \<badref\> = br label %block_.L_4005e4
- 40 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3a0ae49268>, {0: {0}, 1: {1, 26, 4, 29}, 2: {2, 27}, 3: {24, 3, 28}, 4: {1, 26, 4, 29}, 5: {5, 30}, 6: {12, 37, 6, 31}, 7: {8, 33, 32, 7}, 8: {8, 33, 32, 7}, 9: {9, 34, 13, 38}, 10: {10, 35, 23}, 11: {11, 36}, 12: {12, 37, 6, 31}, 13: {9, 34, 13, 38}, 14: {14, 39}, 15: {40, 15}, 16: {16, 17}, 17: {19}, 18: {20}, 19: {21}, 20: {22}, 21: set(), 22: {24, 3, 28}, 23: {25}, 24: {1, 26, 4, 29}, 25: {2, 27}, 26: {24, 3, 28}, 27: {1, 26, 4, 29}, 28: {5, 30}, 29: {12, 37, 6, 31}, 30: {8, 33, 32, 7}, 31: {8, 33, 32, 7}, 32: {9, 34, 13, 38}, 33: {10, 35, 23}, 34: {11, 36}, 35: {12, 37, 6, 31}, 36: {9, 34, 13, 38}, 37: {14, 39}, 38: {40, 15}, 39: {16, 17}, 40: {18}})
Equivalent! frozenset({1, 26}) {24, 1}
Equivalent! frozenset({2, 27}) {25, 2}
Equivalent! frozenset({3, 28}) {26, 3}
Equivalent! frozenset({4, 29}) {27, 4}
Equivalent! frozenset({5, 30}) {28, 5}
Equivalent! frozenset({6, 31}) {29, 6}
Equivalent! frozenset({32, 7}) {30, 7}
Equivalent! frozenset({8, 33}) {8, 31}
Equivalent! frozenset({9, 34}) {32, 9}
Equivalent! frozenset({10, 35}) {33, 10}
Equivalent! frozenset({11, 36}) {34, 11}
Equivalent! frozenset({12, 37}) {35, 12}
Equivalent! frozenset({13, 38}) {36, 13}
Equivalent! frozenset({14, 39}) {37, 14}
Equivalent! frozenset({40, 15}) {38, 15}
Equivalent! frozenset({16, 17}) {16, 39}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3a0ae49268>, {0: {0}, 1: {26}, 2: {27}, 3: {28}, 4: {29}, 5: {30}, 6: {31}, 7: {7}, 8: {8}, 9: {34}, 10: {35}, 11: {36}, 12: {37}, 13: {38}, 14: {39}, 15: {15}, 16: {16}, 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: {1}, 25: {2}, 26: {3}, 27: {4}, 28: {5}, 29: {6}, 30: {32}, 31: {33}, 32: {9}, 33: {10}, 34: {11}, 35: {12}, 36: {13}, 37: {14}, 38: {40}, 39: {17}, 40: {18}})
EXACT 0 getelementptr getelementptr
EXACT 1 load load
EXACT 2 add add
EXACT 3 inttoptr inttoptr
EXACT 4 load load
EXACT 5 add add
EXACT 6 icmp icmp
EXACT 7 lshr lshr
EXACT 8 lshr lshr
EXACT 9 xor xor
EXACT 10 add add
EXACT 11 icmp icmp
EXACT 12 icmp icmp
EXACT 13 xor xor
EXACT 14 or or
EXACT 15 br br
EXACT 16 br br
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
EXACT 24 load load
EXACT 25 add add
EXACT 26 inttoptr inttoptr
EXACT 27 load load
EXACT 28 add add
EXACT 29 icmp icmp
EXACT 30 lshr lshr
EXACT 31 lshr lshr
EXACT 32 xor xor
EXACT 33 add add
EXACT 34 icmp icmp
EXACT 35 icmp icmp
EXACT 36 xor xor
EXACT 37 or or
EXACT 38 br br
EXACT 39 br br
EXACT 40 ret ret
================ Starting round 5
MAPPING:
- 0 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_921 = load i64, i64* %RBP, align 8
- 2 %var_2_932 = add i64 %var_2_921, -4
- 3 %var_2_953 = inttoptr i64 %var_2_932 to i32*
- 4 %var_2_964 = load i32, i32* %var_2_953, align 4
- 5 %var_2_975 = add i32 %var_2_964, -7
- 6 %var_2_1096 = icmp eq i32 %var_2_975, 0
- 7 %var_2_1117 = lshr i32 %var_2_975, 31
- 8 %var_2_1138 = lshr i32 %var_2_964, 31
- 9 %var_2_1149 = xor i32 %var_2_1117, %var_2_1138
- 10 %var_2_11510 = add nuw nsw i32 %var_2_1149, %var_2_1138
- 11 %var_2_11611 = icmp eq i32 %var_2_11510, 2
- 12 %var_2_11812 = icmp ne i32 %var_2_1117, 0
- 13 %var_2_11913 = xor i1 %var_2_11812, %var_2_11611
- 14 %.demorgan14 = or i1 %var_2_1096, %var_2_11913
- 15 \<badref\> = br i1 %.demorgan14, label %block_4005c5.preheader, label %block_4005e4
- 16 \<badref\> = br label %block_4005c5
- 17 \<badref\> = br label %block_4005e4
- 18 \<badref\> = ret %struct.Memory* %2
- 19 %var_2_9615 = phi i32 [ %var_2_96, %block_4005c5 ], [ %var_2_964, %block_4005c5.preheader ]
- 20 %var_2_30 = add i32 %var_2_9615, -1
- 21 %var_2_54 = sext i32 %var_2_9615 to i64
- 22 %var_2_55 = shl nsw i64 %var_2_54, 2
- 23 %var_2_56 = add i64 %var_2_55, ptrtoint (%permarray_type* @permarray to i64)
- 24 %var_2_58 = inttoptr i64 %var_2_56 to i32*
- 25 store i32 %var_2_30, i32* %var_2_58, align 4
- 26 %var_2_92 = load i64, i64* %RBP, align 8
- 27 %var_2_93 = add i64 %var_2_92, -4
- 28 %var_2_95 = inttoptr i64 %var_2_93 to i32*
- 29 %var_2_96 = load i32, i32* %var_2_95, align 4
- 30 %var_2_97 = add i32 %var_2_96, -7
- 31 %var_2_109 = icmp eq i32 %var_2_97, 0
- 32 %var_2_111 = lshr i32 %var_2_97, 31
- 33 %var_2_113 = lshr i32 %var_2_96, 31
- 34 %var_2_114 = xor i32 %var_2_111, %var_2_113
- 35 %var_2_115 = add nuw nsw i32 %var_2_114, %var_2_113
- 36 %var_2_116 = icmp eq i32 %var_2_115, 2
- 37 %var_2_118 = icmp ne i32 %var_2_111, 0
- 38 %var_2_119 = xor i1 %var_2_118, %var_2_116
- 39 %.demorgan = or i1 %var_2_109, %var_2_119
- 40 \<badref\> = br i1 %.demorgan, label %block_4005c5, label %block_4005e4.loopexit
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3a0a7b9268>, {0: {0}, 1: {24, 1, 27, 4}, 2: {25, 2}, 3: {26, 3, 22}, 4: {24, 1, 27, 4}, 5: {28, 5}, 6: {35, 12, 29, 6}, 7: {8, 31, 30, 7}, 8: {8, 31, 30, 7}, 9: {32, 9, 36, 13}, 10: {33, 10}, 11: {34, 11}, 12: {35, 12, 29, 6}, 13: {32, 9, 36, 13}, 14: {37, 14}, 15: {38, 15}, 16: {16, 39}, 17: {16, 39}, 18: {40}, 19: {17}, 20: {18}, 21: {19}, 22: {20}, 23: {33, 10}, 24: {26, 3, 22}, 25: {23}, 26: {24, 1, 27, 4}, 27: {25, 2}, 28: {26, 3, 22}, 29: {24, 1, 27, 4}, 30: {28, 5}, 31: {35, 12, 29, 6}, 32: {8, 31, 30, 7}, 33: {8, 31, 30, 7}, 34: {32, 9, 36, 13}, 35: {33, 10}, 36: {34, 11}, 37: {35, 12, 29, 6}, 38: {32, 9, 36, 13}, 39: {37, 14}, 40: {38, 15}})
Equivalent! frozenset({24, 1}) {1, 26}
Equivalent! frozenset({25, 2}) {2, 27}
Equivalent! frozenset({26, 3}) {3, 28}
Equivalent! frozenset({27, 4}) {4, 29}
Equivalent! frozenset({28, 5}) {5, 30}
Equivalent! frozenset({29, 6}) {6, 31}
Equivalent! frozenset({30, 7}) {32, 7}
Equivalent! frozenset({8, 31}) {8, 33}
Equivalent! frozenset({32, 9}) {9, 34}
Equivalent! frozenset({33, 10}) {10, 35}
Equivalent! frozenset({34, 11}) {11, 36}
Equivalent! frozenset({35, 12}) {12, 37}
Equivalent! frozenset({36, 13}) {13, 38}
Equivalent! frozenset({37, 14}) {14, 39}
Equivalent! frozenset({38, 15}) {40, 15}
Equivalent! frozenset({16, 39}) {16, 17}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3a0a7b9268>, {0: {0}, 1: {24}, 2: {25}, 3: {26}, 4: {27}, 5: {28}, 6: {29}, 7: {7}, 8: {8}, 9: {32}, 10: {33}, 11: {34}, 12: {35}, 13: {36}, 14: {37}, 15: {15}, 16: {16}, 17: {39}, 18: {40}, 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: {1}, 27: {2}, 28: {3}, 29: {4}, 30: {5}, 31: {6}, 32: {30}, 33: {31}, 34: {9}, 35: {10}, 36: {11}, 37: {12}, 38: {13}, 39: {14}, 40: {38}})
EXACT 0 getelementptr getelementptr
EXACT 1 load load
EXACT 2 add add
EXACT 3 inttoptr inttoptr
EXACT 4 load load
EXACT 5 add add
EXACT 6 icmp icmp
EXACT 7 lshr lshr
EXACT 8 lshr lshr
EXACT 9 xor xor
EXACT 10 add add
EXACT 11 icmp icmp
EXACT 12 icmp icmp
EXACT 13 xor xor
EXACT 14 or or
EXACT 15 br br
EXACT 16 br br
EXACT 17 br br
EXACT 18 ret ret
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
EXACT 26 load load
EXACT 27 add add
EXACT 28 inttoptr inttoptr
EXACT 29 load load
EXACT 30 add add
EXACT 31 icmp icmp
EXACT 32 lshr lshr
EXACT 33 lshr lshr
EXACT 34 xor xor
EXACT 35 add add
EXACT 36 icmp icmp
EXACT 37 icmp icmp
EXACT 38 xor xor
EXACT 39 or or
EXACT 40 br br
FP: 63 3.0 False
TO REMOVE: dict_keys([])
Keep: entry:
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_211 = load i64, i64* %RBP.i, align 8
Keep: %var_2_222 = add i64 %var_2_211, -4
Keep: %var_2_243 = inttoptr i64 %var_2_222 to i32*
Keep: %var_2_254 = load i32, i32* %var_2_243, align 4
Keep: %var_2_265 = add i32 %var_2_254, -7
Keep: %var_2_386 = icmp eq i32 %var_2_265, 0
Keep: %var_2_407 = lshr i32 %var_2_265, 31
Keep: %var_2_428 = lshr i32 %var_2_254, 31
Keep: %var_2_439 = xor i32 %var_2_407, %var_2_428
Keep: %var_2_4410 = add nuw nsw i32 %var_2_439, %var_2_428
Keep: %var_2_4511 = icmp eq i32 %var_2_4410, 2
Keep: %var_2_4712 = icmp ne i32 %var_2_407, 0
Keep: %var_2_4813 = xor i1 %var_2_4712, %var_2_4511
Keep: %.demorgan14 = or i1 %var_2_386, %var_2_4813
Keep: br i1 %.demorgan14, label %block_4005c5.preheader, label %block_.L_4005e4
Keep: 
Keep: block_4005c5.preheader:                           ; preds = %entry
Keep: br label %block_4005c5
Keep: 
Keep: block_4005c5:                                     ; preds = %block_4005c5.preheader, %block_4005c5
Keep: %var_2_2515 = phi i32 [ %var_2_25, %block_4005c5 ], [ %var_2_254, %block_4005c5.preheader ]
Keep: %var_2_52 = add i32 %var_2_2515, -1
Keep: %var_2_76 = sext i32 %var_2_2515 to i64
Keep: %var_2_77 = shl nsw i64 %var_2_76, 2
Keep: %var_2_78 = add nsw i64 %var_2_77, 6383440
Keep: %var_2_80 = inttoptr i64 %var_2_78 to i32*
Keep: store i32 %var_2_52, i32* %var_2_80, align 4
Keep: %var_2_21 = load i64, i64* %RBP.i, align 8
Keep: %var_2_22 = add i64 %var_2_21, -4
Keep: %var_2_24 = inttoptr i64 %var_2_22 to i32*
Keep: %var_2_25 = load i32, i32* %var_2_24, align 4
Keep: %var_2_26 = add i32 %var_2_25, -7
Keep: %var_2_38 = icmp eq i32 %var_2_26, 0
Keep: %var_2_40 = lshr i32 %var_2_26, 31
Keep: %var_2_42 = lshr i32 %var_2_25, 31
Keep: %var_2_43 = xor i32 %var_2_40, %var_2_42
Keep: %var_2_44 = add nuw nsw i32 %var_2_43, %var_2_42
Keep: %var_2_45 = icmp eq i32 %var_2_44, 2
Keep: %var_2_47 = icmp ne i32 %var_2_40, 0
Keep: %var_2_48 = xor i1 %var_2_47, %var_2_45
Keep: %.demorgan = or i1 %var_2_38, %var_2_48
Keep: br i1 %.demorgan, label %block_4005c5, label %block_.L_4005e4.loopexit
Keep: 
Keep: block_.L_4005e4.loopexit:                         ; preds = %block_4005c5
Keep: br label %block_.L_4005e4
Keep: 
Keep: block_.L_4005e4:                                  ; preds = %block_.L_4005e4.loopexit, %entry
Keep: ret %struct.Memory* %2
Missed: dict_keys([])
TO REMOVE: dict_keys([])
Keep: block_4005b0:
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_921 = load i64, i64* %RBP, align 8
Keep: %var_2_932 = add i64 %var_2_921, -4
Keep: %var_2_953 = inttoptr i64 %var_2_932 to i32*
Keep: %var_2_964 = load i32, i32* %var_2_953, align 4
Keep: %var_2_975 = add i32 %var_2_964, -7
Keep: %var_2_1096 = icmp eq i32 %var_2_975, 0
Keep: %var_2_1117 = lshr i32 %var_2_975, 31
Keep: %var_2_1138 = lshr i32 %var_2_964, 31
Keep: %var_2_1149 = xor i32 %var_2_1117, %var_2_1138
Keep: %var_2_11510 = add nuw nsw i32 %var_2_1149, %var_2_1138
Keep: %var_2_11611 = icmp eq i32 %var_2_11510, 2
Keep: %var_2_11812 = icmp ne i32 %var_2_1117, 0
Keep: %var_2_11913 = xor i1 %var_2_11812, %var_2_11611
Keep: %.demorgan14 = or i1 %var_2_1096, %var_2_11913
Keep: br i1 %.demorgan14, label %block_4005c5.preheader, label %block_4005e4
Keep: 
Keep: block_4005c5.preheader:                           ; preds = %block_4005b0
Keep: br label %block_4005c5
Keep: 
Keep: block_4005e4.loopexit:                            ; preds = %block_4005c5
Keep: br label %block_4005e4
Keep: 
Keep: block_4005e4:                                     ; preds = %block_4005e4.loopexit, %block_4005b0
Keep: ret %struct.Memory* %2
Keep: 
Keep: block_4005c5:                                     ; preds = %block_4005c5.preheader, %block_4005c5
Keep: %var_2_9615 = phi i32 [ %var_2_96, %block_4005c5 ], [ %var_2_964, %block_4005c5.preheader ]
Keep: %var_2_30 = add i32 %var_2_9615, -1
Keep: %var_2_54 = sext i32 %var_2_9615 to i64
Keep: %var_2_55 = shl nsw i64 %var_2_54, 2
Keep: %var_2_56 = add i64 %var_2_55, ptrtoint (%permarray_type* @permarray to i64)
Keep: %var_2_58 = inttoptr i64 %var_2_56 to i32*
Keep: store i32 %var_2_30, i32* %var_2_58, align 4
Keep: %var_2_92 = load i64, i64* %RBP, align 8
Keep: %var_2_93 = add i64 %var_2_92, -4
Keep: %var_2_95 = inttoptr i64 %var_2_93 to i32*
Keep: %var_2_96 = load i32, i32* %var_2_95, align 4
Keep: %var_2_97 = add i32 %var_2_96, -7
Keep: %var_2_109 = icmp eq i32 %var_2_97, 0
Keep: %var_2_111 = lshr i32 %var_2_97, 31
Keep: %var_2_113 = lshr i32 %var_2_96, 31
Keep: %var_2_114 = xor i32 %var_2_111, %var_2_113
Keep: %var_2_115 = add nuw nsw i32 %var_2_114, %var_2_113
Keep: %var_2_116 = icmp eq i32 %var_2_115, 2
Keep: %var_2_118 = icmp ne i32 %var_2_111, 0
Keep: %var_2_119 = xor i1 %var_2_118, %var_2_116
Keep: %.demorgan = or i1 %var_2_109, %var_2_119
Keep: br i1 %.demorgan, label %block_4005c5, label %block_4005e4.loopexit
Missed: dict_keys([])
[x] Exhausted iterations without definitive match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/Perm/Initialize/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/Perm/binary/test.mcsema.calls_renamed.ll Initialize
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/Perm/Initialize/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/Perm/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
