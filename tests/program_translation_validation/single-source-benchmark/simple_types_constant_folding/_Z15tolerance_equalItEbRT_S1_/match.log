Writing '/tmp/tmpq3y9d_57.dot'...
Writing '/tmp/tmpq3y9d_57.dot':Done

Reading LLVM: /tmp/tmpmma3h3j2-query.ll
Extracting function [_Z15tolerance_equalItEbRT_S1_] from /tmp/tmpmma3h3j2-query.ll
Dot file generated!
Writing '/tmp/tmp1qod2c_s.dot'...
Writing '/tmp/tmp1qod2c_s.dot':Done

Reading LLVM: /tmp/tmpx6yryxhl-target.ll
Extracting function [_Z15tolerance_equalItEbRT_S1_] from /tmp/tmpx6yryxhl-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 48 %39 = add i64 %7, -16
- 49 %40 = load i64, i64* %RDI.i41, align 8
- 50 %41 = add i64 %10, 11
- 51 store i64 %41, i64* %3, align 8
- 52 %42 = inttoptr i64 %39 to i64*
- 53 store i64 %40, i64* %42, align 8
- 54 %RSI.i38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 55 %43 = load i64, i64* %RBP.i, align 8
- 56 %44 = add i64 %43, -16
- 57 %45 = load i64, i64* %RSI.i38, align 8
- 58 %46 = load i64, i64* %3, align 8
- 59 %47 = add i64 %46, 4
- 60 store i64 %47, i64* %3, align 8
- 61 %48 = inttoptr i64 %44 to i64*
- 62 store i64 %45, i64* %48, align 8
- 63 %49 = load i64, i64* %RBP.i, align 8
- 64 %50 = add i64 %49, -8
- 65 %51 = load i64, i64* %3, align 8
- 66 %52 = add i64 %51, 4
- 67 store i64 %52, i64* %3, align 8
- 68 %53 = inttoptr i64 %50 to i64*
- 69 %54 = load i64, i64* %53, align 8
- 70 store i64 %54, i64* %RSI.i38, align 8
- 71 %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 72 %RAX.i32 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0
- 73 %56 = add i64 %51, 7
- 74 store i64 %56, i64* %3, align 8
- 75 %57 = inttoptr i64 %54 to i16*
- 76 %58 = load i16, i16* %57, align 2
- 77 %59 = zext i16 %58 to i64
- 78 store i64 %59, i64* %RAX.i32, align 8
- 79 %60 = add i64 %49, -16
- 80 %61 = add i64 %51, 11
- 81 store i64 %61, i64* %3, align 8
- 82 %62 = inttoptr i64 %60 to i64*
- 83 %63 = load i64, i64* %62, align 8
- 84 store i64 %63, i64* %RSI.i38, align 8
- 85 %RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 86 %64 = add i64 %51, 14
- 87 store i64 %64, i64* %3, align 8
- 88 %65 = inttoptr i64 %63 to i16*
- 89 %66 = load i16, i16* %65, align 2
- 90 %67 = zext i16 %66 to i64
- 91 store i64 %67, i64* %RCX.i, align 8
- 92 %68 = zext i16 %66 to i32
- 93 %69 = zext i16 %58 to i32
- 94 %70 = sub nsw i32 %69, %68
- 95 %71 = zext i32 %70 to i64
- 96 store i64 %71, i64* %RAX.i32, align 8
- 97 %72 = icmp ult i16 %58, %66
- 98 %73 = zext i1 %72 to i8
- 99 store i8 %73, i8* %14, align 1
- 100 %74 = and i32 %70, 255
- 101 %75 = tail call i32 @llvm.ctpop.i32(i32 %74)
- 102 %76 = trunc i32 %75 to i8
- 103 %77 = and i8 %76, 1
- 104 %78 = xor i8 %77, 1
- 105 store i8 %78, i8* %21, align 1
- 106 %79 = xor i16 %66, %58
- 107 %80 = zext i16 %79 to i32
- 108 %81 = xor i32 %80, %70
- 109 %82 = lshr i32 %81, 4
- 110 %83 = trunc i32 %82 to i8
- 111 %84 = and i8 %83, 1
- 112 store i8 %84, i8* %26, align 1
- 113 %85 = icmp eq i32 %70, 0
- 114 %86 = zext i1 %85 to i8
- 115 store i8 %86, i8* %29, align 1
- 116 %87 = lshr i32 %70, 31
- 117 %88 = trunc i32 %87 to i8
- 118 store i8 %88, i8* %32, align 1
- 119 store i8 0, i8* %38, align 1
- 120 %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
- 121 %DX.i24 = bitcast %union.anon* %89 to i16*
- 122 %90 = trunc i32 %70 to i16
- 123 store i16 %90, i16* %DX.i24, align 2
- 124 %91 = add i64 %49, -18
- 125 %92 = add i64 %51, 23
- 126 store i64 %92, i64* %3, align 8
- 127 %93 = inttoptr i64 %91 to i16*
- 128 store i16 %90, i16* %93, align 2
- 129 %94 = load i64, i64* %RBP.i, align 8
- 130 %95 = add i64 %94, -18
- 131 %96 = load i64, i64* %3, align 8
- 132 %97 = add i64 %96, 4
- 133 store i64 %97, i64* %3, align 8
- 134 %98 = inttoptr i64 %95 to i16*
- 135 %99 = load i16, i16* %98, align 2
- 136 %100 = zext i16 %99 to i64
- 137 store i64 %100, i64* %RDI.i41, align 8
- 138 %101 = add i64 %96, -80007
- 139 %102 = add i64 %96, 9
- 140 %103 = load i64, i64* %6, align 8
- 141 %104 = add i64 %103, -8
- 142 %105 = inttoptr i64 %104 to i64*
- 143 store i64 %102, i64* %105, align 8
- 144 store i64 %104, i64* %6, align 8
- 145 store i64 %101, i64* %3, align 8
- 146 %106 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
- 147 %107 = load i64, i64* %3, align 8
- 148 %108 = add i64 %107, ptrtoint (%G_0x4b40__rip__type* @G_0x4b40__rip_ to i64)
- 149 %109 = add i64 %107, 8
- 150 store i64 %109, i64* %3, align 8
- 151 %110 = inttoptr i64 %108 to i64*
- 152 %111 = load i64, i64* %110, align 8
- 153 %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 154 store i64 %111, i64* %112, align 1
- 155 %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 156 %114 = bitcast i64* %113 to double*
- 157 store double 0.000000e+00, double* %114, align 1
- 158 %EAX.i = bitcast %union.anon* %55 to i32*
- 159 %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 160 %116 = load i32, i32* %EAX.i, align 4
- 161 %117 = sitofp i32 %116 to double
- 162 %118 = bitcast %union.VectorReg* %115 to double*
- 163 store double %117, double* %118, align 1
- 164 %119 = add i64 %107, 16
- 165 store i64 %119, i64* %3, align 8
- 166 %120 = bitcast i64 %111 to double
- 167 %121 = fcmp uno double %120, %117
- 168 \<badref\> = br i1 %121, label %122, label %132
- 169 %123 = fadd double %117, %120
- 170 %124 = bitcast double %123 to i64
- 171 %125 = and i64 %124, 9221120237041090560
- 172 %126 = icmp eq i64 %125, 9218868437227405312
- 173 %127 = and i64 %124, 2251799813685247
- 174 %128 = icmp ne i64 %127, 0
- 175 %129 = and i1 %126, %128
- 176 \<badref\> = br i1 %129, label %130, label %138
- 177 %131 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %119, %struct.Memory* %106)
- 178 %.pre = load i64, i64* %3, align 8
- 179 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 180 %133 = fcmp ogt double %120, %117
- 181 \<badref\> = br i1 %133, label %138, label %134
- 182 %135 = fcmp olt double %120, %117
- 183 \<badref\> = br i1 %135, label %138, label %136
- 184 %137 = fcmp oeq double %120, %117
- 185 \<badref\> = br i1 %137, label %138, label %142
- 186 %139 = phi i8 [ 0, %132 ], [ 0, %134 ], [ 1, %136 ], [ 1, %122 ]
- 187 %140 = phi i8 [ 0, %132 ], [ 0, %134 ], [ 0, %136 ], [ 1, %122 ]
- 188 %141 = phi i8 [ 0, %132 ], [ 1, %134 ], [ 0, %136 ], [ 1, %122 ]
- 189 store i8 %139, i8* %29, align 1
- 190 store i8 %140, i8* %21, align 1
- 191 store i8 %141, i8* %14, align 1
- 192 \<badref\> = br label %142
- 193 store i8 0, i8* %38, align 1
- 194 store i8 0, i8* %32, align 1
- 195 store i8 0, i8* %26, align 1
- 196 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 197 %143 = phi i64 [ %.pre, %130 ], [ %119, %142 ]
- 198 %144 = phi %struct.Memory* [ %131, %130 ], [ %106, %142 ]
- 199 %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
- 200 %R8B.i9 = bitcast %union.anon* %145 to i8*
- 201 %146 = load i8, i8* %14, align 1
- 202 %147 = load i8, i8* %29, align 1
- 203 %148 = or i8 %147, %146
- 204 %149 = icmp eq i8 %148, 0
- 205 %150 = zext i1 %149 to i8
- 206 store i8 %150, i8* %R8B.i9, align 1
- 207 %151 = zext i1 %149 to i64
- 208 store i64 %151, i64* %RAX.i32, align 8
- 209 %152 = load i64, i64* %6, align 8
- 210 %153 = add i64 %152, 32
- 211 store i64 %153, i64* %6, align 8
- 212 %154 = icmp ugt i64 %152, -33
- 213 %155 = zext i1 %154 to i8
- 214 store i8 %155, i8* %14, align 1
- 215 %156 = trunc i64 %153 to i32
- 216 %157 = and i32 %156, 255
- 217 %158 = tail call i32 @llvm.ctpop.i32(i32 %157)
- 218 %159 = trunc i32 %158 to i8
- 219 %160 = and i8 %159, 1
- 220 %161 = xor i8 %160, 1
- 221 store i8 %161, i8* %21, align 1
- 222 %162 = xor i64 %153, %152
- 223 %163 = lshr i64 %162, 4
- 224 %164 = trunc i64 %163 to i8
- 225 %165 = and i8 %164, 1
- 226 store i8 %165, i8* %26, align 1
- 227 %166 = icmp eq i64 %153, 0
- 228 %167 = zext i1 %166 to i8
- 229 store i8 %167, i8* %29, align 1
- 230 %168 = lshr i64 %153, 63
- 231 %169 = trunc i64 %168 to i8
- 232 store i8 %169, i8* %32, align 1
- 233 %170 = lshr i64 %152, 63
- 234 %171 = xor i64 %168, %170
- 235 %172 = add nuw nsw i64 %171, %168
- 236 %173 = icmp eq i64 %172, 2
- 237 %174 = zext i1 %173 to i8
- 238 store i8 %174, i8* %38, align 1
- 239 %175 = add i64 %143, 17
- 240 store i64 %175, i64* %3, align 8
- 241 %176 = add i64 %152, 40
- 242 %177 = inttoptr i64 %153 to i64*
- 243 %178 = load i64, i64* %177, align 8
- 244 store i64 %178, i64* %RBP.i, align 8
- 245 store i64 %176, i64* %6, align 8
- 246 %179 = add i64 %143, 18
- 247 store i64 %179, i64* %3, align 8
- 248 %180 = inttoptr i64 %176 to i64*
- 249 %181 = load i64, i64* %180, align 8
- 250 store i64 %181, i64* %3, align 8
- 251 %182 = add i64 %152, 48
- 252 store i64 %182, i64* %6, align 8
- 253 \<badref\> = ret %struct.Memory* %144
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3048fdf840>, {0: {0}, 1: {12}, 2: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 3: {15}, 4: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 5: {11}, 6: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 7: {73, 18, 145}, 8: {131, 70, 138, 77, 238, 82, 19, 146, 244, 94, 89, 62}, 9: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 10: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 11: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 12: {23}, 13: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 14: {25}, 15: {96, 224, 98, 99, 101, 104, 201, 233, 203, 44, 140, 113, 209, 84, 55, 120, 26}, 16: {27}, 17: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 18: {32, 227, 39, 108, 48, 211, 116, 214, 123, 220, 29, 126}, 19: {106, 212, 30}, 20: {107, 175, 213, 150, 31}, 21: {32, 227, 39, 108, 48, 211, 116, 214, 123, 220, 29, 126}, 22: {33, 40, 109, 117, 215, 221}, 23: {216, 34, 110}, 24: {35}, 25: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 26: {37, 230, 112, 114, 52, 218}, 27: {115, 38, 219}, 28: {32, 227, 39, 108, 48, 211, 116, 214, 123, 220, 29, 126}, 29: {33, 40, 109, 117, 215, 221}, 30: {41}, 31: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 32: {103, 200, 43, 172, 119, 223}, 33: {96, 224, 98, 99, 101, 104, 201, 233, 203, 44, 140, 113, 209, 84, 55, 120, 26}, 34: {45}, 35: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 36: {226, 51, 229, 47}, 37: {32, 227, 39, 108, 48, 211, 116, 214, 123, 220, 29, 126}, 38: {49}, 39: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 40: {226, 51, 229, 47}, 41: {37, 230, 112, 114, 52, 218}, 42: {53, 231}, 43: {232, 54}, 44: {96, 224, 98, 99, 101, 104, 201, 233, 203, 44, 140, 113, 209, 84, 55, 120, 26}, 45: {56}, 46: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 47: {10}, 48: {65, 58, 86}, 49: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 50: {60, 87}, 51: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 52: {131, 70, 138, 77, 238, 82, 19, 146, 244, 94, 89, 62}, 53: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 54: {9}, 55: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 56: {65, 58, 86}, 57: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 58: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 59: {136, 75, 68}, 60: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 61: {131, 70, 138, 77, 238, 82, 19, 146, 244, 94, 89, 62}, 62: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 63: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 64: {73, 18, 145}, 65: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 66: {136, 75, 68}, 67: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 68: {131, 70, 138, 77, 238, 82, 19, 146, 244, 94, 89, 62}, 69: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 70: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 71: {3}, 72: {7}, 73: {80}, 74: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 75: {131, 70, 138, 77, 238, 82, 19, 146, 244, 94, 89, 62}, 76: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 77: {96, 224, 98, 99, 101, 104, 201, 233, 203, 44, 140, 113, 209, 84, 55, 120, 26}, 78: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 79: {65, 58, 86}, 80: {60, 87}, 81: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 82: {131, 70, 138, 77, 238, 82, 19, 146, 244, 94, 89, 62}, 83: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 84: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 85: {8}, 86: {92}, 87: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 88: {131, 70, 138, 77, 238, 82, 19, 146, 244, 94, 89, 62}, 89: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 90: {96, 224, 98, 99, 101, 104, 201, 233, 203, 44, 140, 113, 209, 84, 55, 120, 26}, 91: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 92: {96, 224, 98, 99, 101, 104, 201, 233, 203, 44, 140, 113, 209, 84, 55, 120, 26}, 93: {96, 224, 98, 99, 101, 104, 201, 233, 203, 44, 140, 113, 209, 84, 55, 120, 26}, 94: {100}, 95: {96, 224, 98, 99, 101, 104, 201, 233, 203, 44, 140, 113, 209, 84, 55, 120, 26}, 96: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 97: {103, 200, 43, 172, 119, 223}, 98: {96, 224, 98, 99, 101, 104, 201, 233, 203, 44, 140, 113, 209, 84, 55, 120, 26}, 99: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 100: {106, 212, 30}, 101: {107, 175, 213, 150, 31}, 102: {32, 227, 39, 108, 48, 211, 116, 214, 123, 220, 29, 126}, 103: {33, 40, 109, 117, 215, 221}, 104: {216, 34, 110}, 105: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 106: {37, 230, 112, 114, 52, 218}, 107: {96, 224, 98, 99, 101, 104, 201, 233, 203, 44, 140, 113, 209, 84, 55, 120, 26}, 108: {37, 230, 112, 114, 52, 218}, 109: {115, 38, 219}, 110: {32, 227, 39, 108, 48, 211, 116, 214, 123, 220, 29, 126}, 111: {33, 40, 109, 117, 215, 221}, 112: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 113: {103, 200, 43, 172, 119, 223}, 114: {96, 224, 98, 99, 101, 104, 201, 233, 203, 44, 140, 113, 209, 84, 55, 120, 26}, 115: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 116: {122}, 117: {32, 227, 39, 108, 48, 211, 116, 214, 123, 220, 29, 126}, 118: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 119: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 120: {4}, 121: {160, 2, 164, 5, 6, 168, 156}, 122: {32, 227, 39, 108, 48, 211, 116, 214, 123, 220, 29, 126}, 123: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 124: {128, 134}, 125: {129}, 126: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 127: {131, 70, 138, 77, 238, 82, 19, 146, 244, 94, 89, 62}, 128: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 129: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 130: {128, 134}, 131: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 132: {136, 75, 68}, 133: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 134: {131, 70, 138, 77, 238, 82, 19, 146, 244, 94, 89, 62}, 135: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 136: {96, 224, 98, 99, 101, 104, 201, 233, 203, 44, 140, 113, 209, 84, 55, 120, 26}, 137: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 138: {142}, 139: {143}, 140: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 141: {73, 18, 145}, 142: {131, 70, 138, 77, 238, 82, 19, 146, 244, 94, 89, 62}, 143: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 144: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 145: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 146: {107, 175, 213, 150, 31}, 147: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 148: {53, 231}, 149: set(), 150: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 151: {131, 70, 138, 77, 238, 82, 19, 146, 244, 94, 89, 62}, 152: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 153: {153}, 154: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 155: {155}, 156: {160, 2, 164, 5, 6, 168, 156}, 157: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 158: {160, 2, 164, 5, 6, 168, 156}, 159: {13}, 160: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 161: {159}, 162: {160, 2, 164, 5, 6, 168, 156}, 163: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 164: {162}, 165: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 166: {160, 2, 164, 5, 6, 168, 156}, 167: {178, 180, 165, 182}, 168: {166, 174, 179, 181, 183}, 169: {167}, 170: {160, 2, 164, 5, 6, 168, 156}, 171: {169}, 172: {170}, 173: {171}, 174: {103, 200, 43, 172, 119, 223}, 175: {173}, 176: {166, 174, 179, 181, 183}, 177: {107, 175, 213, 150, 31}, 178: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 179: {177, 194, 190}, 180: {178, 180, 165, 182}, 181: {166, 174, 179, 181, 183}, 182: {178, 180, 165, 182}, 183: {166, 174, 179, 181, 183}, 184: {178, 180, 165, 182}, 185: {166, 174, 179, 181, 183}, 186: {184}, 187: {185}, 188: {186}, 189: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 190: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 191: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 192: {177, 194, 190}, 193: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 194: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 195: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 196: {177, 194, 190}, 197: {195, 196}, 198: {195, 196}, 199: {1}, 200: {160, 2, 164, 5, 6, 168, 156}, 201: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 202: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 203: {199}, 204: {103, 200, 43, 172, 119, 223}, 205: {96, 224, 98, 99, 101, 104, 201, 233, 203, 44, 140, 113, 209, 84, 55, 120, 26}, 206: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 207: {96, 224, 98, 99, 101, 104, 201, 233, 203, 44, 140, 113, 209, 84, 55, 120, 26}, 208: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 209: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 210: {206}, 211: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 212: {208}, 213: {96, 224, 98, 99, 101, 104, 201, 233, 203, 44, 140, 113, 209, 84, 55, 120, 26}, 214: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 215: {32, 227, 39, 108, 48, 211, 116, 214, 123, 220, 29, 126}, 216: {106, 212, 30}, 217: {107, 175, 213, 150, 31}, 218: {32, 227, 39, 108, 48, 211, 116, 214, 123, 220, 29, 126}, 219: {33, 40, 109, 117, 215, 221}, 220: {216, 34, 110}, 221: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 222: {37, 230, 112, 114, 52, 218}, 223: {115, 38, 219}, 224: {32, 227, 39, 108, 48, 211, 116, 214, 123, 220, 29, 126}, 225: {33, 40, 109, 117, 215, 221}, 226: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 227: {103, 200, 43, 172, 119, 223}, 228: {96, 224, 98, 99, 101, 104, 201, 233, 203, 44, 140, 113, 209, 84, 55, 120, 26}, 229: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 230: {226, 51, 229, 47}, 231: {32, 227, 39, 108, 48, 211, 116, 214, 123, 220, 29, 126}, 232: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 233: {226, 51, 229, 47}, 234: {37, 230, 112, 114, 52, 218}, 235: {53, 231}, 236: {232, 54}, 237: {96, 224, 98, 99, 101, 104, 201, 233, 203, 44, 140, 113, 209, 84, 55, 120, 26}, 238: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 239: {235}, 240: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 241: {237}, 242: {131, 70, 138, 77, 238, 82, 19, 146, 244, 94, 89, 62}, 243: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 244: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 245: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 246: {242}, 247: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 248: {131, 70, 138, 77, 238, 82, 19, 146, 244, 94, 89, 62}, 249: {133, 135, 139, 14, 144, 17, 21, 151, 152, 158, 176, 59, 64, 66, 67, 197, 198, 72, 74, 205, 78, 83, 90, 95, 239, 245}, 250: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 251: {247}, 252: {130, 132, 137, 141, 16, 147, 20, 148, 22, 149, 24, 154, 28, 157, 161, 163, 36, 42, 46, 50, 57, 187, 188, 61, 189, 63, 191, 192, 193, 69, 71, 202, 76, 204, 79, 207, 81, 210, 85, 88, 217, 91, 93, 222, 97, 225, 228, 102, 105, 234, 236, 111, 240, 241, 243, 118, 246, 248, 121, 124, 125, 127}, 253: {249}})
Equivalent! frozenset({60, 87}) {80, 50}
Equivalent! frozenset({88, 61}) {81, 51}
Equivalent! frozenset({136, 75, 68}) {66, 59, 132}
Equivalent! frozenset({137, 76, 69}) {67, 60, 133}
Equivalent! frozenset({177, 194, 190}) {192, 179, 196}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3048fdf840>, {0: {0}, 1: {12}, 2: {14}, 3: {15}, 4: {16}, 5: {11}, 6: {17}, 7: {18}, 8: {19}, 9: {20}, 10: {74, 21}, 11: {22}, 12: {23}, 13: {24}, 14: {25}, 15: {26}, 16: {27}, 17: {28}, 18: {29}, 19: {30}, 20: {31}, 21: {32}, 22: {33}, 23: {34}, 24: {35}, 25: {36}, 26: {37}, 27: {38}, 28: {39}, 29: {40}, 30: {41}, 31: {42}, 32: {43}, 33: {44}, 34: {45}, 35: {46}, 36: {47}, 37: {48}, 38: {49}, 39: {50}, 40: {51}, 41: {52}, 42: {53}, 43: {54}, 44: {55}, 45: {56}, 46: {57}, 47: {10}, 48: {58}, 49: {59}, 50: {87}, 51: {61}, 52: {62}, 53: {63}, 54: {9}, 55: {64}, 56: {65}, 57: {66}, 58: {74, 67, 135}, 59: {75}, 60: {76}, 61: {70}, 62: {71}, 63: {72}, 64: {73}, 65: {74, 67, 21, 135}, 66: {136}, 67: {137}, 68: {77}, 69: {78}, 70: {79}, 71: {3}, 72: {7}, 73: {80}, 74: {81}, 75: {82}, 76: {83}, 77: {84}, 78: {85}, 79: {86}, 80: {60}, 81: {88}, 82: {89}, 83: {90}, 84: {91}, 85: {8}, 86: {92}, 87: {93}, 88: {94}, 89: {95}, 90: {96}, 91: {97}, 92: {98}, 93: {99}, 94: {100}, 95: {101}, 96: {102}, 97: {103}, 98: {104}, 99: {105}, 100: {106}, 101: {107}, 102: {108}, 103: {109}, 104: {110}, 105: {111}, 106: {112}, 107: {113}, 108: {114}, 109: {115}, 110: {116}, 111: {117}, 112: {118}, 113: {119}, 114: {120}, 115: {121}, 116: {122}, 117: {123}, 118: {124}, 119: {57, 234, 125, 191}, 120: {4}, 121: {5}, 122: {126}, 123: {127}, 124: {128}, 125: {129}, 126: {130}, 127: {131}, 128: {132}, 129: {133}, 130: {134}, 131: {74, 67, 135}, 132: {68}, 133: {69}, 134: {138}, 135: {139}, 136: {140}, 137: {141}, 138: {142}, 139: {143}, 140: {144}, 141: {145}, 142: {146}, 143: {147}, 144: {148}, 145: {149}, 146: {175, 150}, 147: {151}, 148: set(), 149: set(), 150: set(), 151: set(), 152: set(), 153: set(), 154: set(), 155: {155}, 156: {156}, 157: {157}, 158: {6}, 159: {13}, 160: {158}, 161: {159}, 162: {160}, 163: {161}, 164: {162}, 165: {163}, 166: set(), 167: set(), 168: set(), 169: set(), 170: set(), 171: set(), 172: set(), 173: set(), 174: set(), 175: set(), 176: set(), 177: {175}, 178: {176}, 179: {194}, 180: set(), 181: set(), 182: set(), 183: set(), 184: set(), 185: set(), 186: {184}, 187: {185}, 188: {186}, 189: {187}, 190: {188}, 191: {189}, 192: {177}, 193: {57, 234, 125, 191}, 194: {192, 50, 124, 228}, 195: {193, 42, 118, 222}, 196: {190}, 197: {195}, 198: {196}, 199: {1}, 200: {2}, 201: {197}, 202: {198}, 203: {199}, 204: {200}, 205: {201}, 206: {202}, 207: {203}, 208: {204}, 209: {205}, 210: {206}, 211: {207}, 212: {208}, 213: {209}, 214: {210}, 215: {211}, 216: {212}, 217: {213}, 218: {214}, 219: {215}, 220: {216}, 221: {217}, 222: {218}, 223: {219}, 224: {220}, 225: {221}, 226: {222}, 227: {223}, 228: {224}, 229: {225}, 230: {226}, 231: {227}, 232: {228}, 233: {229}, 234: {230}, 235: {231}, 236: {232}, 237: {233}, 238: {234}, 239: {235}, 240: {236}, 241: {237}, 242: {238}, 243: {239}, 244: {240}, 245: {241}, 246: {242}, 247: {243}, 248: {244}, 249: {245}, 250: {246}, 251: {247}, 252: {248}, 253: {249}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
MORE 10 POT: 2
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 getelementptr getelementptr
EXACT 48 add add
EXACT 49 load load
EXACT 50 add add
EXACT 51 store store
EXACT 52 inttoptr inttoptr
EXACT 53 store store
EXACT 54 getelementptr getelementptr
EXACT 55 load load
EXACT 56 add add
EXACT 57 load load
MORE 58 POT: 3
EXACT 59 add add
EXACT 60 store store
EXACT 61 inttoptr inttoptr
EXACT 62 store store
EXACT 63 load load
EXACT 64 add add
MORE 65 POT: 4
EXACT 66 add add
EXACT 67 store store
EXACT 68 inttoptr inttoptr
EXACT 69 load load
EXACT 70 store store
EXACT 71 getelementptr getelementptr
EXACT 72 getelementptr getelementptr
EXACT 73 add add
EXACT 74 store store
EXACT 75 inttoptr inttoptr
EXACT 76 load load
EXACT 77 zext zext
EXACT 78 store store
EXACT 79 add add
EXACT 80 add add
EXACT 81 store store
EXACT 82 inttoptr inttoptr
EXACT 83 load load
EXACT 84 store store
EXACT 85 getelementptr getelementptr
EXACT 86 add add
EXACT 87 store store
EXACT 88 inttoptr inttoptr
EXACT 89 load load
EXACT 90 zext zext
EXACT 91 store store
EXACT 92 zext zext
EXACT 93 zext zext
EXACT 94 sub sub
EXACT 95 zext zext
EXACT 96 store store
EXACT 97 icmp icmp
EXACT 98 zext zext
EXACT 99 store store
EXACT 100 and and
EXACT 101 tail tail
EXACT 102 trunc trunc
EXACT 103 and and
EXACT 104 xor xor
EXACT 105 store store
EXACT 106 xor xor
EXACT 107 zext zext
EXACT 108 xor xor
EXACT 109 lshr lshr
EXACT 110 trunc trunc
EXACT 111 and and
EXACT 112 store store
EXACT 113 icmp icmp
EXACT 114 zext zext
EXACT 115 store store
EXACT 116 lshr lshr
EXACT 117 trunc trunc
EXACT 118 store store
MORE 119 POT: 4
EXACT 120 getelementptr getelementptr
EXACT 121 bitcast bitcast
EXACT 122 trunc trunc
EXACT 123 store store
EXACT 124 add add
EXACT 125 add add
EXACT 126 store store
EXACT 127 inttoptr inttoptr
EXACT 128 store store
EXACT 129 load load
EXACT 130 add add
MORE 131 POT: 3
EXACT 132 add add
EXACT 133 store store
EXACT 134 inttoptr inttoptr
EXACT 135 load load
EXACT 136 zext zext
EXACT 137 store store
EXACT 138 add add
EXACT 139 add add
EXACT 140 load load
EXACT 141 add add
EXACT 142 inttoptr inttoptr
EXACT 143 store store
EXACT 144 store store
EXACT 145 store store
MORE 146 POT: 2
EXACT 147 load load
NO MATCH 148
NO MATCH 149
NO MATCH 150
NO MATCH 151
NO MATCH 152
NO MATCH 153
NO MATCH 154
EXACT 155 getelementptr getelementptr
EXACT 156 bitcast bitcast
EXACT 157 store store
EXACT 158 bitcast bitcast
EXACT 159 getelementptr getelementptr
EXACT 160 load load
EXACT 161 sitofp sitofp
EXACT 162 bitcast bitcast
EXACT 163 store store
EXACT 164 add add
EXACT 165 store store
NO MATCH 166
NO MATCH 167
NO MATCH 168
NO MATCH 169
NO MATCH 170
NO MATCH 171
NO MATCH 172
NO MATCH 173
NO MATCH 174
NO MATCH 175
NO MATCH 176
EXACT 177 tail tail
EXACT 178 load load
EXACT 179 br br
NO MATCH 180
NO MATCH 181
NO MATCH 182
NO MATCH 183
NO MATCH 184
NO MATCH 185
EXACT 186 phi phi
EXACT 187 phi phi
EXACT 188 phi phi
EXACT 189 store store
EXACT 190 store store
EXACT 191 store store
EXACT 192 br br
MORE 193 POT: 4
MORE 194 POT: 4
MORE 195 POT: 4
EXACT 196 br br
EXACT 197 phi phi
EXACT 198 phi phi
EXACT 199 getelementptr getelementptr
EXACT 200 bitcast bitcast
EXACT 201 load load
EXACT 202 load load
EXACT 203 or or
EXACT 204 icmp icmp
EXACT 205 zext zext
EXACT 206 store store
EXACT 207 zext zext
EXACT 208 store store
EXACT 209 load load
EXACT 210 add add
EXACT 211 store store
EXACT 212 icmp icmp
EXACT 213 zext zext
EXACT 214 store store
EXACT 215 trunc trunc
EXACT 216 and and
EXACT 217 tail tail
EXACT 218 trunc trunc
EXACT 219 and and
EXACT 220 xor xor
EXACT 221 store store
EXACT 222 xor xor
EXACT 223 lshr lshr
EXACT 224 trunc trunc
EXACT 225 and and
EXACT 226 store store
EXACT 227 icmp icmp
EXACT 228 zext zext
EXACT 229 store store
EXACT 230 lshr lshr
EXACT 231 trunc trunc
EXACT 232 store store
EXACT 233 lshr lshr
EXACT 234 xor xor
EXACT 235 add add
EXACT 236 icmp icmp
EXACT 237 zext zext
EXACT 238 store store
EXACT 239 add add
EXACT 240 store store
EXACT 241 add add
EXACT 242 inttoptr inttoptr
EXACT 243 load load
EXACT 244 store store
EXACT 245 store store
EXACT 246 add add
EXACT 247 store store
EXACT 248 inttoptr inttoptr
EXACT 249 load load
EXACT 250 store store
EXACT 251 add add
EXACT 252 store store
EXACT 253 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
- 2 %R8B = bitcast %union.anon* %3 to i8*
- 3 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 4 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
- 5 %DX = bitcast %union.anon* %5 to i16*
- 6 %EAX = bitcast %union.anon* %4 to i32*
- 7 %RAX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 8 %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 9 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 10 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 11 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 12 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 13 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 14 %7 = load i64, i64* %RBP, align 8
- 15 %8 = add i64 %1, 1
- 16 store i64 %8, i64* %PC, align 8
- 17 %9 = load i64, i64* %RSP, align 8
- 18 %10 = add i64 %9, -8
- 19 %11 = inttoptr i64 %10 to i64*
- 20 store i64 %7, i64* %11, align 8
- 21 %12 = load i64, i64* %PC, align 8
- 22 store i64 %10, i64* %RBP, align 8
- 23 %13 = add i64 %9, -40
- 24 store i64 %13, i64* %RSP, align 8
- 25 %14 = icmp ult i64 %10, 32
- 26 %15 = zext i1 %14 to i8
- 27 %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 28 store i8 %15, i8* %16, align 1
- 29 %17 = trunc i64 %13 to i32
- 30 %18 = and i32 %17, 255
- 31 %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #12
- 32 %20 = trunc i32 %19 to i8
- 33 %21 = and i8 %20, 1
- 34 %22 = xor i8 %21, 1
- 35 %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 36 store i8 %22, i8* %23, align 1
- 37 %24 = xor i64 %10, %13
- 38 %25 = lshr i64 %24, 4
- 39 %26 = trunc i64 %25 to i8
- 40 %27 = and i8 %26, 1
- 41 %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 42 store i8 %27, i8* %28, align 1
- 43 %29 = icmp eq i64 %13, 0
- 44 %30 = zext i1 %29 to i8
- 45 %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 46 store i8 %30, i8* %31, align 1
- 47 %32 = lshr i64 %13, 63
- 48 %33 = trunc i64 %32 to i8
- 49 %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 50 store i8 %33, i8* %34, align 1
- 51 %35 = lshr i64 %10, 63
- 52 %36 = xor i64 %32, %35
- 53 %37 = add nuw nsw i64 %36, %35
- 54 %38 = icmp eq i64 %37, 2
- 55 %39 = zext i1 %38 to i8
- 56 %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 57 store i8 %39, i8* %40, align 1
- 58 %41 = add i64 %9, -16
- 59 %42 = load i64, i64* %RDI, align 8
- 60 %43 = add i64 %12, 11
- 61 store i64 %43, i64* %PC, align 8
- 62 %44 = inttoptr i64 %41 to i64*
- 63 store i64 %42, i64* %44, align 8
- 64 %45 = load i64, i64* %RBP, align 8
- 65 %46 = add i64 %45, -16
- 66 %47 = load i64, i64* %RSI, align 8
- 67 %48 = load i64, i64* %PC, align 8
- 68 %49 = add i64 %48, 4
- 69 store i64 %49, i64* %PC, align 8
- 70 %50 = inttoptr i64 %46 to i64*
- 71 store i64 %47, i64* %50, align 8
- 72 %51 = load i64, i64* %RBP, align 8
- 73 %52 = add i64 %51, -8
- 74 %53 = load i64, i64* %PC, align 8
- 75 %54 = add i64 %53, 4
- 76 store i64 %54, i64* %PC, align 8
- 77 %55 = inttoptr i64 %52 to i64*
- 78 %56 = load i64, i64* %55, align 8
- 79 store i64 %56, i64* %RSI, align 8
- 80 %57 = add i64 %53, 7
- 81 store i64 %57, i64* %PC, align 8
- 82 %58 = inttoptr i64 %56 to i16*
- 83 %59 = load i16, i16* %58, align 2
- 84 %60 = zext i16 %59 to i64
- 85 store i64 %60, i64* %RAX, align 8
- 86 %61 = add i64 %51, -16
- 87 %62 = add i64 %53, 11
- 88 store i64 %62, i64* %PC, align 8
- 89 %63 = inttoptr i64 %61 to i64*
- 90 %64 = load i64, i64* %63, align 8
- 91 store i64 %64, i64* %RSI, align 8
- 92 %65 = add i64 %53, 14
- 93 store i64 %65, i64* %PC, align 8
- 94 %66 = inttoptr i64 %64 to i16*
- 95 %67 = load i16, i16* %66, align 2
- 96 %68 = zext i16 %67 to i64
- 97 store i64 %68, i64* %RCX, align 8
- 98 %69 = zext i16 %67 to i32
- 99 %70 = zext i16 %59 to i32
- 100 %71 = sub nsw i32 %70, %69
- 101 %72 = zext i32 %71 to i64
- 102 store i64 %72, i64* %RAX, align 8
- 103 %73 = icmp ult i16 %59, %67
- 104 %74 = zext i1 %73 to i8
- 105 store i8 %74, i8* %16, align 1
- 106 %75 = and i32 %71, 255
- 107 %76 = tail call i32 @llvm.ctpop.i32(i32 %75) #12
- 108 %77 = trunc i32 %76 to i8
- 109 %78 = and i8 %77, 1
- 110 %79 = xor i8 %78, 1
- 111 store i8 %79, i8* %23, align 1
- 112 %80 = xor i16 %67, %59
- 113 %81 = zext i16 %80 to i32
- 114 %82 = xor i32 %81, %71
- 115 %83 = lshr i32 %82, 4
- 116 %84 = trunc i32 %83 to i8
- 117 %85 = and i8 %84, 1
- 118 store i8 %85, i8* %28, align 1
- 119 %86 = icmp eq i32 %71, 0
- 120 %87 = zext i1 %86 to i8
- 121 store i8 %87, i8* %31, align 1
- 122 %88 = lshr i32 %71, 31
- 123 %89 = trunc i32 %88 to i8
- 124 store i8 %89, i8* %34, align 1
- 125 store i8 0, i8* %40, align 1
- 126 %90 = trunc i32 %71 to i16
- 127 store i16 %90, i16* %DX, align 2
- 128 %91 = add i64 %51, -18
- 129 %92 = add i64 %53, 23
- 130 store i64 %92, i64* %PC, align 8
- 131 %93 = inttoptr i64 %91 to i16*
- 132 store i16 %90, i16* %93, align 2
- 133 %94 = load i64, i64* %RBP, align 8
- 134 %95 = add i64 %94, -18
- 135 %96 = load i64, i64* %PC, align 8
- 136 %97 = add i64 %96, 4
- 137 store i64 %97, i64* %PC, align 8
- 138 %98 = inttoptr i64 %95 to i16*
- 139 %99 = load i16, i16* %98, align 2
- 140 %100 = zext i16 %99 to i64
- 141 store i64 %100, i64* %RDI, align 8
- 142 %101 = add i64 %96, -80007
- 143 %102 = add i64 %96, 9
- 144 %103 = load i64, i64* %RSP, align 8
- 145 %104 = add i64 %103, -8
- 146 %105 = inttoptr i64 %104 to i64*
- 147 store i64 %102, i64* %105, align 8
- 148 store i64 %104, i64* %RSP, align 8
- 149 store i64 %101, i64* %PC, align 8
- 150 %106 = tail call fastcc %struct.Memory* @ext_674150_abs(%struct.State* nonnull %0, %struct.Memory* %2)
- 151 %107 = load i64, i64* %PC, align 8
- 152 %108 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 56) to i64*), align 8
- 153 %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 154 store i64 %108, i64* %109, align 1
- 155 %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 156 %111 = bitcast i64* %110 to double*
- 157 store double 0.000000e+00, double* %111, align 1
- 158 %112 = load i32, i32* %EAX, align 4
- 159 %113 = sitofp i32 %112 to double
- 160 %114 = bitcast %union.VectorReg* %6 to double*
- 161 store double %113, double* %114, align 1
- 162 %115 = add i64 %107, 16
- 163 store i64 %115, i64* %PC, align 8
- 164 %116 = bitcast i64 %108 to double
- 165 %117 = fcmp uno double %116, %113
- 166 \<badref\> = br i1 %117, label %118, label %128
- 167 %119 = fadd double %113, %116
- 168 %120 = bitcast double %119 to i64
- 169 %121 = and i64 %120, 9221120237041090560
- 170 %122 = icmp eq i64 %121, 9218868437227405312
- 171 %123 = and i64 %120, 2251799813685247
- 172 %124 = icmp ne i64 %123, 0
- 173 %125 = and i1 %122, %124
- 174 \<badref\> = br i1 %125, label %126, label %134
- 175 %127 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %115, %struct.Memory* %106) #13
- 176 %.pre = load i64, i64* %PC, align 8
- 177 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 178 %129 = fcmp ogt double %116, %113
- 179 \<badref\> = br i1 %129, label %134, label %130
- 180 %131 = fcmp olt double %116, %113
- 181 \<badref\> = br i1 %131, label %134, label %132
- 182 %133 = fcmp oeq double %116, %113
- 183 \<badref\> = br i1 %133, label %134, label %138
- 184 %135 = phi i8 [ 0, %128 ], [ 0, %130 ], [ 1, %132 ], [ 1, %118 ]
- 185 %136 = phi i8 [ 0, %128 ], [ 0, %130 ], [ 0, %132 ], [ 1, %118 ]
- 186 %137 = phi i8 [ 0, %128 ], [ 1, %130 ], [ 0, %132 ], [ 1, %118 ]
- 187 store i8 %135, i8* %31, align 1
- 188 store i8 %136, i8* %23, align 1
- 189 store i8 %137, i8* %16, align 1
- 190 \<badref\> = br label %138
- 191 store i8 0, i8* %40, align 1
- 192 store i8 0, i8* %34, align 1
- 193 store i8 0, i8* %28, align 1
- 194 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 195 %139 = phi i64 [ %.pre, %126 ], [ %115, %138 ]
- 196 %140 = phi %struct.Memory* [ %127, %126 ], [ %106, %138 ]
- 197 %141 = load i8, i8* %16, align 1
- 198 %142 = load i8, i8* %31, align 1
- 199 %143 = or i8 %142, %141
- 200 %144 = icmp eq i8 %143, 0
- 201 %145 = zext i1 %144 to i8
- 202 store i8 %145, i8* %R8B, align 1
- 203 %146 = zext i1 %144 to i64
- 204 store i64 %146, i64* %RAX, align 8
- 205 %147 = load i64, i64* %RSP, align 8
- 206 %148 = add i64 %147, 32
- 207 store i64 %148, i64* %RSP, align 8
- 208 %149 = icmp ugt i64 %147, -33
- 209 %150 = zext i1 %149 to i8
- 210 store i8 %150, i8* %16, align 1
- 211 %151 = trunc i64 %148 to i32
- 212 %152 = and i32 %151, 255
- 213 %153 = tail call i32 @llvm.ctpop.i32(i32 %152) #12
- 214 %154 = trunc i32 %153 to i8
- 215 %155 = and i8 %154, 1
- 216 %156 = xor i8 %155, 1
- 217 store i8 %156, i8* %23, align 1
- 218 %157 = xor i64 %148, %147
- 219 %158 = lshr i64 %157, 4
- 220 %159 = trunc i64 %158 to i8
- 221 %160 = and i8 %159, 1
- 222 store i8 %160, i8* %28, align 1
- 223 %161 = icmp eq i64 %148, 0
- 224 %162 = zext i1 %161 to i8
- 225 store i8 %162, i8* %31, align 1
- 226 %163 = lshr i64 %148, 63
- 227 %164 = trunc i64 %163 to i8
- 228 store i8 %164, i8* %34, align 1
- 229 %165 = lshr i64 %147, 63
- 230 %166 = xor i64 %163, %165
- 231 %167 = add nuw nsw i64 %166, %163
- 232 %168 = icmp eq i64 %167, 2
- 233 %169 = zext i1 %168 to i8
- 234 store i8 %169, i8* %40, align 1
- 235 %170 = add i64 %139, 17
- 236 store i64 %170, i64* %PC, align 8
- 237 %171 = add i64 %147, 40
- 238 %172 = inttoptr i64 %148 to i64*
- 239 %173 = load i64, i64* %172, align 8
- 240 store i64 %173, i64* %RBP, align 8
- 241 store i64 %171, i64* %RSP, align 8
- 242 %174 = add i64 %139, 18
- 243 store i64 %174, i64* %PC, align 8
- 244 %175 = inttoptr i64 %171 to i64*
- 245 %176 = load i64, i64* %175, align 8
- 246 store i64 %176, i64* %PC, align 8
- 247 %177 = add i64 %147, 48
- 248 store i64 %177, i64* %RSP, align 8
- 249 \<badref\> = ret %struct.Memory* %140
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3048eaef28>, {0: {0}, 1: {199}, 2: {162, 166, 200, 170, 121, 156, 158}, 3: {71}, 4: {120}, 5: {162, 166, 200, 170, 121, 156, 158}, 6: {162, 166, 200, 170, 121, 156, 158}, 7: {72}, 8: {85}, 9: {54}, 10: {47}, 11: {5}, 12: {1}, 13: {159}, 14: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 15: {3}, 16: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 17: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 18: {64, 141, 7}, 19: {248, 68, 134, 8, 75, 142, 82, 242, 52, 151, 88, 61, 127}, 20: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 21: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 22: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 23: {12}, 24: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 25: {14}, 26: {33, 98, 228, 136, 107, 44, 77, 205, 15, 207, 237, 114, 213, 90, 92, 93, 95}, 27: {16}, 28: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 29: {224, 37, 102, 231, 218, 110, 18, 21, 117, 215, 122, 28}, 30: {216, 19, 100}, 31: {101, 177, 146, 20, 217}, 32: {224, 37, 102, 231, 218, 110, 18, 21, 117, 215, 122, 28}, 33: {225, 103, 111, 22, 219, 29}, 34: {104, 220, 23}, 35: {24}, 36: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 37: {41, 106, 234, 108, 26, 222}, 38: {27, 109, 223}, 39: {224, 37, 102, 231, 218, 110, 18, 21, 117, 215, 122, 28}, 40: {225, 103, 111, 22, 219, 29}, 41: {30}, 42: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 43: {32, 97, 227, 204, 174, 113}, 44: {33, 98, 228, 136, 107, 44, 77, 205, 15, 207, 237, 114, 213, 90, 92, 93, 95}, 45: {34}, 46: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 47: {40, 233, 36, 230}, 48: {224, 37, 102, 231, 218, 110, 18, 21, 117, 215, 122, 28}, 49: {38}, 50: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 51: {40, 233, 36, 230}, 52: {41, 106, 234, 108, 26, 222}, 53: {42, 235, 148}, 54: {43, 236}, 55: {33, 98, 228, 136, 107, 44, 77, 205, 15, 207, 237, 114, 213, 90, 92, 93, 95}, 56: {45}, 57: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 58: {48, 56, 79}, 59: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 60: {80, 50}, 61: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 62: {248, 68, 134, 8, 75, 142, 82, 242, 52, 151, 88, 61, 127}, 63: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 64: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 65: {48, 56, 79}, 66: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 67: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 68: {66, 59, 132}, 69: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 70: {248, 68, 134, 8, 75, 142, 82, 242, 52, 151, 88, 61, 127}, 71: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 72: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 73: {64, 141, 7}, 74: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 75: {66, 59, 132}, 76: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 77: {248, 68, 134, 8, 75, 142, 82, 242, 52, 151, 88, 61, 127}, 78: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 79: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 80: {73}, 81: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 82: {248, 68, 134, 8, 75, 142, 82, 242, 52, 151, 88, 61, 127}, 83: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 84: {33, 98, 228, 136, 107, 44, 77, 205, 15, 207, 237, 114, 213, 90, 92, 93, 95}, 85: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 86: {48, 56, 79}, 87: {80, 50}, 88: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 89: {248, 68, 134, 8, 75, 142, 82, 242, 52, 151, 88, 61, 127}, 90: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 91: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 92: {86}, 93: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 94: {248, 68, 134, 8, 75, 142, 82, 242, 52, 151, 88, 61, 127}, 95: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 96: {33, 98, 228, 136, 107, 44, 77, 205, 15, 207, 237, 114, 213, 90, 92, 93, 95}, 97: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 98: {33, 98, 228, 136, 107, 44, 77, 205, 15, 207, 237, 114, 213, 90, 92, 93, 95}, 99: {33, 98, 228, 136, 107, 44, 77, 205, 15, 207, 237, 114, 213, 90, 92, 93, 95}, 100: {94}, 101: {33, 98, 228, 136, 107, 44, 77, 205, 15, 207, 237, 114, 213, 90, 92, 93, 95}, 102: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 103: {32, 97, 227, 204, 174, 113}, 104: {33, 98, 228, 136, 107, 44, 77, 205, 15, 207, 237, 114, 213, 90, 92, 93, 95}, 105: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 106: {216, 19, 100}, 107: {101, 177, 146, 20, 217}, 108: {224, 37, 102, 231, 218, 110, 18, 21, 117, 215, 122, 28}, 109: {225, 103, 111, 22, 219, 29}, 110: {104, 220, 23}, 111: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 112: {41, 106, 234, 108, 26, 222}, 113: {33, 98, 228, 136, 107, 44, 77, 205, 15, 207, 237, 114, 213, 90, 92, 93, 95}, 114: {41, 106, 234, 108, 26, 222}, 115: {27, 109, 223}, 116: {224, 37, 102, 231, 218, 110, 18, 21, 117, 215, 122, 28}, 117: {225, 103, 111, 22, 219, 29}, 118: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 119: {32, 97, 227, 204, 174, 113}, 120: {33, 98, 228, 136, 107, 44, 77, 205, 15, 207, 237, 114, 213, 90, 92, 93, 95}, 121: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 122: {116}, 123: {224, 37, 102, 231, 218, 110, 18, 21, 117, 215, 122, 28}, 124: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 125: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 126: {224, 37, 102, 231, 218, 110, 18, 21, 117, 215, 122, 28}, 127: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 128: {130, 124}, 129: {125}, 130: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 131: {248, 68, 134, 8, 75, 142, 82, 242, 52, 151, 88, 61, 127}, 132: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 133: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 134: {130, 124}, 135: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 136: {66, 59, 132}, 137: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 138: {248, 68, 134, 8, 75, 142, 82, 242, 52, 151, 88, 61, 127}, 139: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 140: {33, 98, 228, 136, 107, 44, 77, 205, 15, 207, 237, 114, 213, 90, 92, 93, 95}, 141: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 142: {138}, 143: {139}, 144: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 145: {64, 141, 7}, 146: {248, 68, 134, 8, 75, 142, 82, 242, 52, 151, 88, 61, 127}, 147: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 148: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 149: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 150: {101, 177, 146, 20, 217}, 151: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 152: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 153: {153}, 154: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 155: {155}, 156: {162, 166, 200, 170, 121, 156, 158}, 157: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 158: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 159: {161}, 160: {162, 166, 200, 170, 121, 156, 158}, 161: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 162: {164}, 163: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 164: {162, 166, 200, 170, 121, 156, 158}, 165: {184, 180, 182, 167}, 166: {168, 176, 181, 183, 185}, 167: {169}, 168: {162, 166, 200, 170, 121, 156, 158}, 169: {171}, 170: {172}, 171: {173}, 172: {32, 97, 227, 204, 174, 113}, 173: {175}, 174: {168, 176, 181, 183, 185}, 175: {101, 177, 146, 20, 217}, 176: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 177: {192, 179, 196}, 178: {184, 180, 182, 167}, 179: {168, 176, 181, 183, 185}, 180: {184, 180, 182, 167}, 181: {168, 176, 181, 183, 185}, 182: {184, 180, 182, 167}, 183: {168, 176, 181, 183, 185}, 184: {186}, 185: {187}, 186: {188}, 187: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 188: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 189: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 190: {192, 179, 196}, 191: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 192: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 193: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 194: {192, 179, 196}, 195: {197, 198}, 196: {197, 198}, 197: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 198: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 199: {203}, 200: {32, 97, 227, 204, 174, 113}, 201: {33, 98, 228, 136, 107, 44, 77, 205, 15, 207, 237, 114, 213, 90, 92, 93, 95}, 202: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 203: {33, 98, 228, 136, 107, 44, 77, 205, 15, 207, 237, 114, 213, 90, 92, 93, 95}, 204: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 205: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 206: {210}, 207: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 208: {212}, 209: {33, 98, 228, 136, 107, 44, 77, 205, 15, 207, 237, 114, 213, 90, 92, 93, 95}, 210: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 211: {224, 37, 102, 231, 218, 110, 18, 21, 117, 215, 122, 28}, 212: {216, 19, 100}, 213: {101, 177, 146, 20, 217}, 214: {224, 37, 102, 231, 218, 110, 18, 21, 117, 215, 122, 28}, 215: {225, 103, 111, 22, 219, 29}, 216: {104, 220, 23}, 217: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 218: {41, 106, 234, 108, 26, 222}, 219: {27, 109, 223}, 220: {224, 37, 102, 231, 218, 110, 18, 21, 117, 215, 122, 28}, 221: {225, 103, 111, 22, 219, 29}, 222: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 223: {32, 97, 227, 204, 174, 113}, 224: {33, 98, 228, 136, 107, 44, 77, 205, 15, 207, 237, 114, 213, 90, 92, 93, 95}, 225: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 226: {40, 233, 36, 230}, 227: {224, 37, 102, 231, 218, 110, 18, 21, 117, 215, 122, 28}, 228: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 229: {40, 233, 36, 230}, 230: {41, 106, 234, 108, 26, 222}, 231: {42, 235, 148}, 232: {43, 236}, 233: {33, 98, 228, 136, 107, 44, 77, 205, 15, 207, 237, 114, 213, 90, 92, 93, 95}, 234: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 235: {239}, 236: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 237: {241}, 238: {248, 68, 134, 8, 75, 142, 82, 242, 52, 151, 88, 61, 127}, 239: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 240: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 241: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 242: {246}, 243: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 244: {248, 68, 134, 8, 75, 142, 82, 242, 52, 151, 88, 61, 127}, 245: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 201, 202, 76, 209, 83, 89, 243, 249}, 246: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 247: {251}, 248: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 78, 206, 208, 81, 211, 84, 214, 87, 91, 247, 221, 96, 226, 99, 229, 232, 105, 238, 112, 240, 115, 244, 245, 118, 119, 250, 123, 252, 126}, 249: {253}})
Equivalent! frozenset({80, 50}) {60, 87}
Equivalent! frozenset({81, 51}) {88, 61}
Equivalent! frozenset({66, 59, 132}) {136, 75, 68}
Equivalent! frozenset({67, 60, 133}) {137, 76, 69}
Equivalent! frozenset({184, 180, 182, 167}) {178, 180, 165, 182}
Equivalent! frozenset({168, 185, 181, 183}) {179, 181, 166, 183}
Equivalent! frozenset({192, 179, 196}) {177, 194, 190}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3048eaef28>, {0: {0}, 1: {199}, 2: {200}, 3: {71}, 4: {120}, 5: {121}, 6: {158}, 7: {72}, 8: {85}, 9: {54}, 10: {47}, 11: {5}, 12: {1}, 13: {159}, 14: {2}, 15: {3}, 16: {4}, 17: {6}, 18: {7}, 19: {8}, 20: {9}, 21: {65, 10}, 22: {11}, 23: {12}, 24: {13}, 25: {14}, 26: {15}, 27: {16}, 28: {17}, 29: {18}, 30: {19}, 31: {20}, 32: {21}, 33: {22}, 34: {23}, 35: {24}, 36: {25}, 37: {26}, 38: {27}, 39: {28}, 40: {29}, 41: {30}, 42: {31}, 43: {32}, 44: {33}, 45: {34}, 46: {35}, 47: {36}, 48: {37}, 49: {38}, 50: {39}, 51: {40}, 52: {41}, 53: {42}, 54: {43}, 55: {44}, 56: {45}, 57: {46}, 58: {48}, 59: {49}, 60: {80}, 61: {51}, 62: {52}, 63: {53}, 64: {55}, 65: {56}, 66: {57}, 67: {65, 58, 131}, 68: {132}, 69: {133}, 70: {61}, 71: {62}, 72: {63}, 73: {64}, 74: {65, 10, 131, 58}, 75: {59}, 76: {60}, 77: {68}, 78: {69}, 79: {70}, 80: {73}, 81: {74}, 82: {75}, 83: {76}, 84: {77}, 85: {78}, 86: {79}, 87: {50}, 88: {81}, 89: {82}, 90: {83}, 91: {84}, 92: {86}, 93: {87}, 94: {88}, 95: {89}, 96: {90}, 97: {91}, 98: {92}, 99: {93}, 100: {94}, 101: {95}, 102: {96}, 103: {97}, 104: {98}, 105: {99}, 106: {100}, 107: {101}, 108: {102}, 109: {103}, 110: {104}, 111: {105}, 112: {106}, 113: {107}, 114: {108}, 115: {109}, 116: {110}, 117: {111}, 118: {112}, 119: {113}, 120: {114}, 121: {115}, 122: {116}, 123: {117}, 124: {118}, 125: {193, 238, 46, 119}, 126: {122}, 127: {123}, 128: {124}, 129: {125}, 130: {126}, 131: {127}, 132: {128}, 133: {129}, 134: {130}, 135: {65, 58, 131}, 136: {66}, 137: {67}, 138: {134}, 139: {135}, 140: {136}, 141: {137}, 142: {138}, 143: {139}, 144: {140}, 145: {141}, 146: {142}, 147: {143}, 148: {144}, 149: {145}, 150: {177, 146}, 151: {147}, 152: {152}, 153: {153}, 154: {154}, 155: {155}, 156: {156}, 157: {157}, 158: {160}, 159: {161}, 160: {162}, 161: {163}, 162: {164}, 163: {165}, 164: {166}, 165: {182}, 166: {181}, 167: {169}, 168: {170}, 169: {171}, 170: {172}, 171: {173}, 172: {174}, 173: {175}, 174: {176}, 175: {177}, 176: {178}, 177: {192}, 178: {184}, 179: {168}, 180: {180}, 181: {185}, 182: {167}, 183: {183}, 184: {186}, 185: {187}, 186: {188}, 187: {189}, 188: {190}, 189: {191}, 190: {196}, 191: {193, 238, 46, 119}, 192: {232, 194, 118, 39}, 193: {112, 226, 195, 31}, 194: {179}, 195: {197}, 196: {198}, 197: {201}, 198: {202}, 199: {203}, 200: {204}, 201: {205}, 202: {206}, 203: {207}, 204: {208}, 205: {209}, 206: {210}, 207: {211}, 208: {212}, 209: {213}, 210: {214}, 211: {215}, 212: {216}, 213: {217}, 214: {218}, 215: {219}, 216: {220}, 217: {221}, 218: {222}, 219: {223}, 220: {224}, 221: {225}, 222: {226}, 223: {227}, 224: {228}, 225: {229}, 226: {230}, 227: {231}, 228: {232}, 229: {233}, 230: {234}, 231: {235}, 232: {236}, 233: {237}, 234: {238}, 235: {239}, 236: {240}, 237: {241}, 238: {242}, 239: {243}, 240: {244}, 241: {245}, 242: {246}, 243: {247}, 244: {248}, 245: {249}, 246: {250}, 247: {251}, 248: {252}, 249: {253}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 bitcast bitcast
EXACT 6 bitcast bitcast
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 getelementptr getelementptr
EXACT 12 getelementptr getelementptr
EXACT 13 getelementptr getelementptr
EXACT 14 load load
EXACT 15 add add
EXACT 16 store store
EXACT 17 load load
EXACT 18 add add
EXACT 19 inttoptr inttoptr
EXACT 20 store store
MORE 21 POT: 2
EXACT 22 store store
EXACT 23 add add
EXACT 24 store store
EXACT 25 icmp icmp
EXACT 26 zext zext
EXACT 27 getelementptr getelementptr
EXACT 28 store store
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 tail tail
EXACT 32 trunc trunc
EXACT 33 and and
EXACT 34 xor xor
EXACT 35 getelementptr getelementptr
EXACT 36 store store
EXACT 37 xor xor
EXACT 38 lshr lshr
EXACT 39 trunc trunc
EXACT 40 and and
EXACT 41 getelementptr getelementptr
EXACT 42 store store
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 lshr lshr
EXACT 48 trunc trunc
EXACT 49 getelementptr getelementptr
EXACT 50 store store
EXACT 51 lshr lshr
EXACT 52 xor xor
EXACT 53 add add
EXACT 54 icmp icmp
EXACT 55 zext zext
EXACT 56 getelementptr getelementptr
EXACT 57 store store
EXACT 58 add add
EXACT 59 load load
EXACT 60 add add
EXACT 61 store store
EXACT 62 inttoptr inttoptr
EXACT 63 store store
EXACT 64 load load
EXACT 65 add add
EXACT 66 load load
MORE 67 POT: 3
EXACT 68 add add
EXACT 69 store store
EXACT 70 inttoptr inttoptr
EXACT 71 store store
EXACT 72 load load
EXACT 73 add add
MORE 74 POT: 4
EXACT 75 add add
EXACT 76 store store
EXACT 77 inttoptr inttoptr
EXACT 78 load load
EXACT 79 store store
EXACT 80 add add
EXACT 81 store store
EXACT 82 inttoptr inttoptr
EXACT 83 load load
EXACT 84 zext zext
EXACT 85 store store
EXACT 86 add add
EXACT 87 add add
EXACT 88 store store
EXACT 89 inttoptr inttoptr
EXACT 90 load load
EXACT 91 store store
EXACT 92 add add
EXACT 93 store store
EXACT 94 inttoptr inttoptr
EXACT 95 load load
EXACT 96 zext zext
EXACT 97 store store
EXACT 98 zext zext
EXACT 99 zext zext
EXACT 100 sub sub
EXACT 101 zext zext
EXACT 102 store store
EXACT 103 icmp icmp
EXACT 104 zext zext
EXACT 105 store store
EXACT 106 and and
EXACT 107 tail tail
EXACT 108 trunc trunc
EXACT 109 and and
EXACT 110 xor xor
EXACT 111 store store
EXACT 112 xor xor
EXACT 113 zext zext
EXACT 114 xor xor
EXACT 115 lshr lshr
EXACT 116 trunc trunc
EXACT 117 and and
EXACT 118 store store
EXACT 119 icmp icmp
EXACT 120 zext zext
EXACT 121 store store
EXACT 122 lshr lshr
EXACT 123 trunc trunc
EXACT 124 store store
MORE 125 POT: 4
EXACT 126 trunc trunc
EXACT 127 store store
EXACT 128 add add
EXACT 129 add add
EXACT 130 store store
EXACT 131 inttoptr inttoptr
EXACT 132 store store
EXACT 133 load load
EXACT 134 add add
MORE 135 POT: 3
EXACT 136 add add
EXACT 137 store store
EXACT 138 inttoptr inttoptr
EXACT 139 load load
EXACT 140 zext zext
EXACT 141 store store
EXACT 142 add add
EXACT 143 add add
EXACT 144 load load
EXACT 145 add add
EXACT 146 inttoptr inttoptr
EXACT 147 store store
EXACT 148 store store
EXACT 149 store store
MORE 150 POT: 2
EXACT 151 load load
EXACT 152 load load
EXACT 153 getelementptr getelementptr
EXACT 154 store store
EXACT 155 getelementptr getelementptr
EXACT 156 bitcast bitcast
EXACT 157 store store
EXACT 158 load load
EXACT 159 sitofp sitofp
EXACT 160 bitcast bitcast
EXACT 161 store store
EXACT 162 add add
EXACT 163 store store
EXACT 164 bitcast bitcast
EXACT 165 fcmp fcmp
EXACT 166 br br
EXACT 167 fadd fadd
EXACT 168 bitcast bitcast
EXACT 169 and and
EXACT 170 icmp icmp
EXACT 171 and and
EXACT 172 icmp icmp
EXACT 173 and and
EXACT 174 br br
EXACT 175 tail tail
EXACT 176 load load
EXACT 177 br br
EXACT 178 fcmp fcmp
EXACT 179 br br
EXACT 180 fcmp fcmp
EXACT 181 br br
EXACT 182 fcmp fcmp
EXACT 183 br br
EXACT 184 phi phi
EXACT 185 phi phi
EXACT 186 phi phi
EXACT 187 store store
EXACT 188 store store
EXACT 189 store store
EXACT 190 br br
MORE 191 POT: 4
MORE 192 POT: 4
MORE 193 POT: 4
EXACT 194 br br
EXACT 195 phi phi
EXACT 196 phi phi
EXACT 197 load load
EXACT 198 load load
EXACT 199 or or
EXACT 200 icmp icmp
EXACT 201 zext zext
EXACT 202 store store
EXACT 203 zext zext
EXACT 204 store store
EXACT 205 load load
EXACT 206 add add
EXACT 207 store store
EXACT 208 icmp icmp
EXACT 209 zext zext
EXACT 210 store store
EXACT 211 trunc trunc
EXACT 212 and and
EXACT 213 tail tail
EXACT 214 trunc trunc
EXACT 215 and and
EXACT 216 xor xor
EXACT 217 store store
EXACT 218 xor xor
EXACT 219 lshr lshr
EXACT 220 trunc trunc
EXACT 221 and and
EXACT 222 store store
EXACT 223 icmp icmp
EXACT 224 zext zext
EXACT 225 store store
EXACT 226 lshr lshr
EXACT 227 trunc trunc
EXACT 228 store store
EXACT 229 lshr lshr
EXACT 230 xor xor
EXACT 231 add add
EXACT 232 icmp icmp
EXACT 233 zext zext
EXACT 234 store store
EXACT 235 add add
EXACT 236 store store
EXACT 237 add add
EXACT 238 inttoptr inttoptr
EXACT 239 load load
EXACT 240 store store
EXACT 241 store store
EXACT 242 add add
EXACT 243 store store
EXACT 244 inttoptr inttoptr
EXACT 245 load load
EXACT 246 store store
EXACT 247 add add
EXACT 248 store store
EXACT 249 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', 'store i8 %37, i8* %38, align 1', '%RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%39 = add i64 %7, -16', '%40 = load i64, i64* %RDI.i41, align 8', '%41 = add i64 %10, 11', 'store i64 %41, i64* %3, align 8', '%42 = inttoptr i64 %39 to i64*', 'store i64 %40, i64* %42, align 8', '%RSI.i38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%43 = load i64, i64* %RBP.i, align 8', '%44 = add i64 %43, -16', '%45 = load i64, i64* %RSI.i38, align 8', '%47 = add i64 %46, 4', 'store i64 %47, i64* %3, align 8', '%48 = inttoptr i64 %44 to i64*', 'store i64 %45, i64* %48, align 8', '%49 = load i64, i64* %RBP.i, align 8', '%50 = add i64 %49, -8', '%52 = add i64 %51, 4', 'store i64 %52, i64* %3, align 8', '%53 = inttoptr i64 %50 to i64*', '%54 = load i64, i64* %53, align 8', 'store i64 %54, i64* %RSI.i38, align 8', '%RAX.i32 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0', '%56 = add i64 %51, 7', 'store i64 %56, i64* %3, align 8', '%57 = inttoptr i64 %54 to i16*', '%58 = load i16, i16* %57, align 2', '%59 = zext i16 %58 to i64', 'store i64 %59, i64* %RAX.i32, align 8', '%60 = add i64 %49, -16', '%61 = add i64 %51, 11', 'store i64 %61, i64* %3, align 8', '%62 = inttoptr i64 %60 to i64*', '%63 = load i64, i64* %62, align 8', 'store i64 %63, i64* %RSI.i38, align 8', '%RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%64 = add i64 %51, 14', 'store i64 %64, i64* %3, align 8', '%65 = inttoptr i64 %63 to i16*', '%66 = load i16, i16* %65, align 2', '%67 = zext i16 %66 to i64', 'store i64 %67, i64* %RCX.i, align 8', '%68 = zext i16 %66 to i32', '%69 = zext i16 %58 to i32', '%70 = sub nsw i32 %69, %68', '%71 = zext i32 %70 to i64', 'store i64 %71, i64* %RAX.i32, align 8', '%72 = icmp ult i16 %58, %66', '%73 = zext i1 %72 to i8', 'store i8 %73, i8* %14, align 1', '%74 = and i32 %70, 255', '%75 = tail call i32 @llvm.ctpop.i32(i32 %74)', '%76 = trunc i32 %75 to i8', '%77 = and i8 %76, 1', '%78 = xor i8 %77, 1', 'store i8 %78, i8* %21, align 1', '%79 = xor i16 %66, %58', '%80 = zext i16 %79 to i32', '%81 = xor i32 %80, %70', '%82 = lshr i32 %81, 4', '%83 = trunc i32 %82 to i8', '%84 = and i8 %83, 1', 'store i8 %84, i8* %26, align 1', '%85 = icmp eq i32 %70, 0', '%86 = zext i1 %85 to i8', 'store i8 %86, i8* %29, align 1', '%87 = lshr i32 %70, 31', '%88 = trunc i32 %87 to i8', 'store i8 %88, i8* %32, align 1', '%89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0', '%DX.i24 = bitcast %union.anon* %89 to i16*', '%90 = trunc i32 %70 to i16', 'store i16 %90, i16* %DX.i24, align 2', '%91 = add i64 %49, -18', '%92 = add i64 %51, 23', 'store i64 %92, i64* %3, align 8', '%93 = inttoptr i64 %91 to i16*', 'store i16 %90, i16* %93, align 2', '%94 = load i64, i64* %RBP.i, align 8', '%95 = add i64 %94, -18', '%97 = add i64 %96, 4', 'store i64 %97, i64* %3, align 8', '%98 = inttoptr i64 %95 to i16*', '%99 = load i16, i16* %98, align 2', '%100 = zext i16 %99 to i64', 'store i64 %100, i64* %RDI.i41, align 8', '%101 = add i64 %96, -80007', '%102 = add i64 %96, 9', '%103 = load i64, i64* %6, align 8', '%104 = add i64 %103, -8', '%105 = inttoptr i64 %104 to i64*', 'store i64 %102, i64* %105, align 8', 'store i64 %104, i64* %6, align 8', 'store i64 %101, i64* %3, align 8', '%113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%114 = bitcast i64* %113 to double*', 'store double 0.000000e+00, double* %114, align 1', '%115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%118 = bitcast %union.VectorReg* %115 to double*', 'store double %117, double* %118, align 1', 'store i64 %119, i64* %3, align 8', '%.pre = load i64, i64* %3, align 8', '%139 = phi i8 [ 0, %132 ], [ 0, %134 ], [ 1, %136 ], [ 1, %122 ]', '%140 = phi i8 [ 0, %132 ], [ 0, %134 ], [ 0, %136 ], [ 1, %122 ]', '%141 = phi i8 [ 0, %132 ], [ 1, %134 ], [ 0, %136 ], [ 1, %122 ]', 'store i8 %139, i8* %29, align 1', 'store i8 %140, i8* %21, align 1', 'store i8 %141, i8* %14, align 1', '%143 = phi i64 [ %.pre, %130 ], [ %119, %142 ]', '%145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0', '%R8B.i9 = bitcast %union.anon* %145 to i8*', '%146 = load i8, i8* %14, align 1', '%147 = load i8, i8* %29, align 1', '%148 = or i8 %147, %146', '%149 = icmp eq i8 %148, 0', '%150 = zext i1 %149 to i8', 'store i8 %150, i8* %R8B.i9, align 1', '%151 = zext i1 %149 to i64', 'store i64 %151, i64* %RAX.i32, align 8', '%152 = load i64, i64* %6, align 8', '%153 = add i64 %152, 32', 'store i64 %153, i64* %6, align 8', '%154 = icmp ugt i64 %152, -33', '%155 = zext i1 %154 to i8', 'store i8 %155, i8* %14, align 1', '%156 = trunc i64 %153 to i32', '%157 = and i32 %156, 255', '%158 = tail call i32 @llvm.ctpop.i32(i32 %157)', '%159 = trunc i32 %158 to i8', '%160 = and i8 %159, 1', '%161 = xor i8 %160, 1', 'store i8 %161, i8* %21, align 1', '%162 = xor i64 %153, %152', '%163 = lshr i64 %162, 4', '%164 = trunc i64 %163 to i8', '%165 = and i8 %164, 1', 'store i8 %165, i8* %26, align 1', '%166 = icmp eq i64 %153, 0', '%167 = zext i1 %166 to i8', 'store i8 %167, i8* %29, align 1', '%168 = lshr i64 %153, 63', '%169 = trunc i64 %168 to i8', 'store i8 %169, i8* %32, align 1', '%170 = lshr i64 %152, 63', '%171 = xor i64 %168, %170', '%172 = add nuw nsw i64 %171, %168', '%173 = icmp eq i64 %172, 2', '%174 = zext i1 %173 to i8', 'store i8 %174, i8* %38, align 1', '%175 = add i64 %143, 17', 'store i64 %175, i64* %3, align 8', '%176 = add i64 %152, 40', '%177 = inttoptr i64 %153 to i64*', '%178 = load i64, i64* %177, align 8', 'store i64 %178, i64* %RBP.i, align 8', 'store i64 %176, i64* %6, align 8', '%179 = add i64 %143, 18', 'store i64 %179, i64* %3, align 8', '%180 = inttoptr i64 %176 to i64*', '%181 = load i64, i64* %180, align 8', 'store i64 %181, i64* %3, align 8', '%182 = add i64 %152, 48', 'store i64 %182, i64* %6, align 8'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Keep: %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Keep: %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Keep: %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Keep: %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %39 = add i64 %7, -16
Found line to remove! %40 = load i64, i64* %RDI.i41, align 8
Found line to remove! %41 = add i64 %10, 11
Found line to remove! store i64 %41, i64* %3, align 8
Found line to remove! %42 = inttoptr i64 %39 to i64*
Found line to remove! store i64 %40, i64* %42, align 8
Found line to remove! %RSI.i38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %43 = load i64, i64* %RBP.i, align 8
Found line to remove! %44 = add i64 %43, -16
Found line to remove! %45 = load i64, i64* %RSI.i38, align 8
Keep: %46 = load i64, i64* %3, align 8
Found line to remove! %47 = add i64 %46, 4
Found line to remove! store i64 %47, i64* %3, align 8
Found line to remove! %48 = inttoptr i64 %44 to i64*
Found line to remove! store i64 %45, i64* %48, align 8
Found line to remove! %49 = load i64, i64* %RBP.i, align 8
Found line to remove! %50 = add i64 %49, -8
Keep: %51 = load i64, i64* %3, align 8
Found line to remove! %52 = add i64 %51, 4
Found line to remove! store i64 %52, i64* %3, align 8
Found line to remove! %53 = inttoptr i64 %50 to i64*
Found line to remove! %54 = load i64, i64* %53, align 8
Found line to remove! store i64 %54, i64* %RSI.i38, align 8
Keep: %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %RAX.i32 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0
Found line to remove! %56 = add i64 %51, 7
Found line to remove! store i64 %56, i64* %3, align 8
Found line to remove! %57 = inttoptr i64 %54 to i16*
Found line to remove! %58 = load i16, i16* %57, align 2
Found line to remove! %59 = zext i16 %58 to i64
Found line to remove! store i64 %59, i64* %RAX.i32, align 8
Found line to remove! %60 = add i64 %49, -16
Found line to remove! %61 = add i64 %51, 11
Found line to remove! store i64 %61, i64* %3, align 8
Found line to remove! %62 = inttoptr i64 %60 to i64*
Found line to remove! %63 = load i64, i64* %62, align 8
Found line to remove! store i64 %63, i64* %RSI.i38, align 8
Found line to remove! %RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %64 = add i64 %51, 14
Found line to remove! store i64 %64, i64* %3, align 8
Found line to remove! %65 = inttoptr i64 %63 to i16*
Found line to remove! %66 = load i16, i16* %65, align 2
Found line to remove! %67 = zext i16 %66 to i64
Found line to remove! store i64 %67, i64* %RCX.i, align 8
Found line to remove! %68 = zext i16 %66 to i32
Found line to remove! %69 = zext i16 %58 to i32
Found line to remove! %70 = sub nsw i32 %69, %68
Found line to remove! %71 = zext i32 %70 to i64
Found line to remove! store i64 %71, i64* %RAX.i32, align 8
Found line to remove! %72 = icmp ult i16 %58, %66
Found line to remove! %73 = zext i1 %72 to i8
Found line to remove! store i8 %73, i8* %14, align 1
Found line to remove! %74 = and i32 %70, 255
Found line to remove! %75 = tail call i32 @llvm.ctpop.i32(i32 %74)
Found line to remove! %76 = trunc i32 %75 to i8
Found line to remove! %77 = and i8 %76, 1
Found line to remove! %78 = xor i8 %77, 1
Found line to remove! store i8 %78, i8* %21, align 1
Found line to remove! %79 = xor i16 %66, %58
Found line to remove! %80 = zext i16 %79 to i32
Found line to remove! %81 = xor i32 %80, %70
Found line to remove! %82 = lshr i32 %81, 4
Found line to remove! %83 = trunc i32 %82 to i8
Found line to remove! %84 = and i8 %83, 1
Found line to remove! store i8 %84, i8* %26, align 1
Found line to remove! %85 = icmp eq i32 %70, 0
Found line to remove! %86 = zext i1 %85 to i8
Found line to remove! store i8 %86, i8* %29, align 1
Found line to remove! %87 = lshr i32 %70, 31
Found line to remove! %88 = trunc i32 %87 to i8
Found line to remove! store i8 %88, i8* %32, align 1
Keep: store i8 0, i8* %38, align 1
Found line to remove! %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
Found line to remove! %DX.i24 = bitcast %union.anon* %89 to i16*
Found line to remove! %90 = trunc i32 %70 to i16
Found line to remove! store i16 %90, i16* %DX.i24, align 2
Found line to remove! %91 = add i64 %49, -18
Found line to remove! %92 = add i64 %51, 23
Found line to remove! store i64 %92, i64* %3, align 8
Found line to remove! %93 = inttoptr i64 %91 to i16*
Found line to remove! store i16 %90, i16* %93, align 2
Found line to remove! %94 = load i64, i64* %RBP.i, align 8
Found line to remove! %95 = add i64 %94, -18
Keep: %96 = load i64, i64* %3, align 8
Found line to remove! %97 = add i64 %96, 4
Found line to remove! store i64 %97, i64* %3, align 8
Found line to remove! %98 = inttoptr i64 %95 to i16*
Found line to remove! %99 = load i16, i16* %98, align 2
Found line to remove! %100 = zext i16 %99 to i64
Found line to remove! store i64 %100, i64* %RDI.i41, align 8
Found line to remove! %101 = add i64 %96, -80007
Found line to remove! %102 = add i64 %96, 9
Found line to remove! %103 = load i64, i64* %6, align 8
Found line to remove! %104 = add i64 %103, -8
Found line to remove! %105 = inttoptr i64 %104 to i64*
Found line to remove! store i64 %102, i64* %105, align 8
Found line to remove! store i64 %104, i64* %6, align 8
Found line to remove! store i64 %101, i64* %3, align 8
Keep: %106 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
Keep: %107 = load i64, i64* %3, align 8
Keep: %108 = add i64 %107, ptrtoint (%G_0x4b40__rip__type* @G_0x4b40__rip_ to i64)
Keep: %109 = add i64 %107, 8
Keep: store i64 %109, i64* %3, align 8
Keep: %110 = inttoptr i64 %108 to i64*
Keep: %111 = load i64, i64* %110, align 8
Keep: %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %111, i64* %112, align 1
Found line to remove! %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %114 = bitcast i64* %113 to double*
Found line to remove! store double 0.000000e+00, double* %114, align 1
Keep: %EAX.i = bitcast %union.anon* %55 to i32*
Found line to remove! %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Keep: %116 = load i32, i32* %EAX.i, align 4
Keep: %117 = sitofp i32 %116 to double
Found line to remove! %118 = bitcast %union.VectorReg* %115 to double*
Found line to remove! store double %117, double* %118, align 1
Keep: %119 = add i64 %107, 16
Found line to remove! store i64 %119, i64* %3, align 8
Keep: %120 = bitcast i64 %111 to double
Keep: %121 = fcmp uno double %120, %117
Keep: br i1 %121, label %122, label %132
Keep: 
Keep: ; <label>:122:                                    ; preds = %entry
Keep: %123 = fadd double %117, %120
Keep: %124 = bitcast double %123 to i64
Keep: %125 = and i64 %124, 9221120237041090560
Keep: %126 = icmp eq i64 %125, 9218868437227405312
Keep: %127 = and i64 %124, 2251799813685247
Keep: %128 = icmp ne i64 %127, 0
Keep: %129 = and i1 %126, %128
Keep: br i1 %129, label %130, label %138
Keep: 
Keep: ; <label>:130:                                    ; preds = %122
Keep: %131 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %119, %struct.Memory* %106)
Found line to remove! %.pre = load i64, i64* %3, align 8
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: ; <label>:132:                                    ; preds = %entry
Keep: %133 = fcmp ogt double %120, %117
Keep: br i1 %133, label %138, label %134
Keep: 
Keep: ; <label>:134:                                    ; preds = %132
Keep: %135 = fcmp olt double %120, %117
Keep: br i1 %135, label %138, label %136
Keep: 
Keep: ; <label>:136:                                    ; preds = %134
Keep: %137 = fcmp oeq double %120, %117
Keep: br i1 %137, label %138, label %142
Keep: 
Keep: ; <label>:138:                                    ; preds = %136, %134, %132, %122
Found line to remove! %139 = phi i8 [ 0, %132 ], [ 0, %134 ], [ 1, %136 ], [ 1, %122 ]
Found line to remove! %140 = phi i8 [ 0, %132 ], [ 0, %134 ], [ 0, %136 ], [ 1, %122 ]
Found line to remove! %141 = phi i8 [ 0, %132 ], [ 1, %134 ], [ 0, %136 ], [ 1, %122 ]
Found line to remove! store i8 %139, i8* %29, align 1
Found line to remove! store i8 %140, i8* %21, align 1
Found line to remove! store i8 %141, i8* %14, align 1
Keep: br label %142
Keep: 
Keep: ; <label>:142:                                    ; preds = %138, %136
Keep: store i8 0, i8* %38, align 1
Keep: store i8 0, i8* %32, align 1
Keep: store i8 0, i8* %26, align 1
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: routine_ucomisd__xmm1___xmm0.exit:                ; preds = %142, %130
Found line to remove! %143 = phi i64 [ %.pre, %130 ], [ %119, %142 ]
Keep: %144 = phi %struct.Memory* [ %131, %130 ], [ %106, %142 ]
Found line to remove! %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
Found line to remove! %R8B.i9 = bitcast %union.anon* %145 to i8*
Found line to remove! %146 = load i8, i8* %14, align 1
Found line to remove! %147 = load i8, i8* %29, align 1
Found line to remove! %148 = or i8 %147, %146
Found line to remove! %149 = icmp eq i8 %148, 0
Found line to remove! %150 = zext i1 %149 to i8
Found line to remove! store i8 %150, i8* %R8B.i9, align 1
Found line to remove! %151 = zext i1 %149 to i64
Found line to remove! store i64 %151, i64* %RAX.i32, align 8
Found line to remove! %152 = load i64, i64* %6, align 8
Found line to remove! %153 = add i64 %152, 32
Found line to remove! store i64 %153, i64* %6, align 8
Found line to remove! %154 = icmp ugt i64 %152, -33
Found line to remove! %155 = zext i1 %154 to i8
Found line to remove! store i8 %155, i8* %14, align 1
Found line to remove! %156 = trunc i64 %153 to i32
Found line to remove! %157 = and i32 %156, 255
Found line to remove! %158 = tail call i32 @llvm.ctpop.i32(i32 %157)
Found line to remove! %159 = trunc i32 %158 to i8
Found line to remove! %160 = and i8 %159, 1
Found line to remove! %161 = xor i8 %160, 1
Found line to remove! store i8 %161, i8* %21, align 1
Found line to remove! %162 = xor i64 %153, %152
Found line to remove! %163 = lshr i64 %162, 4
Found line to remove! %164 = trunc i64 %163 to i8
Found line to remove! %165 = and i8 %164, 1
Found line to remove! store i8 %165, i8* %26, align 1
Found line to remove! %166 = icmp eq i64 %153, 0
Found line to remove! %167 = zext i1 %166 to i8
Found line to remove! store i8 %167, i8* %29, align 1
Found line to remove! %168 = lshr i64 %153, 63
Found line to remove! %169 = trunc i64 %168 to i8
Found line to remove! store i8 %169, i8* %32, align 1
Found line to remove! %170 = lshr i64 %152, 63
Found line to remove! %171 = xor i64 %168, %170
Found line to remove! %172 = add nuw nsw i64 %171, %168
Found line to remove! %173 = icmp eq i64 %172, 2
Found line to remove! %174 = zext i1 %173 to i8
Found line to remove! store i8 %174, i8* %38, align 1
Found line to remove! %175 = add i64 %143, 17
Found line to remove! store i64 %175, i64* %3, align 8
Found line to remove! %176 = add i64 %152, 40
Found line to remove! %177 = inttoptr i64 %153 to i64*
Found line to remove! %178 = load i64, i64* %177, align 8
Found line to remove! store i64 %178, i64* %RBP.i, align 8
Found line to remove! store i64 %176, i64* %6, align 8
Found line to remove! %179 = add i64 %143, 18
Found line to remove! store i64 %179, i64* %3, align 8
Found line to remove! %180 = inttoptr i64 %176 to i64*
Found line to remove! %181 = load i64, i64* %180, align 8
Found line to remove! store i64 %181, i64* %3, align 8
Found line to remove! %182 = add i64 %152, 48
Found line to remove! store i64 %182, i64* %6, align 8
Keep: ret %struct.Memory* %144
Missed: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', 'store i8 %37, i8* %38, align 1', '%RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%39 = add i64 %7, -16', '%40 = load i64, i64* %RDI.i41, align 8', '%41 = add i64 %10, 11', 'store i64 %41, i64* %3, align 8', '%42 = inttoptr i64 %39 to i64*', 'store i64 %40, i64* %42, align 8', '%RSI.i38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%43 = load i64, i64* %RBP.i, align 8', '%44 = add i64 %43, -16', '%45 = load i64, i64* %RSI.i38, align 8', '%47 = add i64 %46, 4', 'store i64 %47, i64* %3, align 8', '%48 = inttoptr i64 %44 to i64*', 'store i64 %45, i64* %48, align 8', '%49 = load i64, i64* %RBP.i, align 8', '%50 = add i64 %49, -8', '%52 = add i64 %51, 4', 'store i64 %52, i64* %3, align 8', '%53 = inttoptr i64 %50 to i64*', '%54 = load i64, i64* %53, align 8', 'store i64 %54, i64* %RSI.i38, align 8', '%RAX.i32 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0', '%56 = add i64 %51, 7', 'store i64 %56, i64* %3, align 8', '%57 = inttoptr i64 %54 to i16*', '%58 = load i16, i16* %57, align 2', '%59 = zext i16 %58 to i64', 'store i64 %59, i64* %RAX.i32, align 8', '%60 = add i64 %49, -16', '%61 = add i64 %51, 11', 'store i64 %61, i64* %3, align 8', '%62 = inttoptr i64 %60 to i64*', '%63 = load i64, i64* %62, align 8', 'store i64 %63, i64* %RSI.i38, align 8', '%RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%64 = add i64 %51, 14', 'store i64 %64, i64* %3, align 8', '%65 = inttoptr i64 %63 to i16*', '%66 = load i16, i16* %65, align 2', '%67 = zext i16 %66 to i64', 'store i64 %67, i64* %RCX.i, align 8', '%68 = zext i16 %66 to i32', '%69 = zext i16 %58 to i32', '%70 = sub nsw i32 %69, %68', '%71 = zext i32 %70 to i64', 'store i64 %71, i64* %RAX.i32, align 8', '%72 = icmp ult i16 %58, %66', '%73 = zext i1 %72 to i8', 'store i8 %73, i8* %14, align 1', '%74 = and i32 %70, 255', '%75 = tail call i32 @llvm.ctpop.i32(i32 %74)', '%76 = trunc i32 %75 to i8', '%77 = and i8 %76, 1', '%78 = xor i8 %77, 1', 'store i8 %78, i8* %21, align 1', '%79 = xor i16 %66, %58', '%80 = zext i16 %79 to i32', '%81 = xor i32 %80, %70', '%82 = lshr i32 %81, 4', '%83 = trunc i32 %82 to i8', '%84 = and i8 %83, 1', 'store i8 %84, i8* %26, align 1', '%85 = icmp eq i32 %70, 0', '%86 = zext i1 %85 to i8', 'store i8 %86, i8* %29, align 1', '%87 = lshr i32 %70, 31', '%88 = trunc i32 %87 to i8', 'store i8 %88, i8* %32, align 1', '%89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0', '%DX.i24 = bitcast %union.anon* %89 to i16*', '%90 = trunc i32 %70 to i16', 'store i16 %90, i16* %DX.i24, align 2', '%91 = add i64 %49, -18', '%92 = add i64 %51, 23', 'store i64 %92, i64* %3, align 8', '%93 = inttoptr i64 %91 to i16*', 'store i16 %90, i16* %93, align 2', '%94 = load i64, i64* %RBP.i, align 8', '%95 = add i64 %94, -18', '%97 = add i64 %96, 4', 'store i64 %97, i64* %3, align 8', '%98 = inttoptr i64 %95 to i16*', '%99 = load i16, i16* %98, align 2', '%100 = zext i16 %99 to i64', 'store i64 %100, i64* %RDI.i41, align 8', '%101 = add i64 %96, -80007', '%102 = add i64 %96, 9', '%103 = load i64, i64* %6, align 8', '%104 = add i64 %103, -8', '%105 = inttoptr i64 %104 to i64*', 'store i64 %102, i64* %105, align 8', 'store i64 %104, i64* %6, align 8', 'store i64 %101, i64* %3, align 8', '%113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%114 = bitcast i64* %113 to double*', 'store double 0.000000e+00, double* %114, align 1', '%115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%118 = bitcast %union.VectorReg* %115 to double*', 'store double %117, double* %118, align 1', 'store i64 %119, i64* %3, align 8', '%.pre = load i64, i64* %3, align 8', '%139 = phi i8 [ 0, %132 ], [ 0, %134 ], [ 1, %136 ], [ 1, %122 ]', '%140 = phi i8 [ 0, %132 ], [ 0, %134 ], [ 0, %136 ], [ 1, %122 ]', '%141 = phi i8 [ 0, %132 ], [ 1, %134 ], [ 0, %136 ], [ 1, %122 ]', 'store i8 %139, i8* %29, align 1', 'store i8 %140, i8* %21, align 1', 'store i8 %141, i8* %14, align 1', '%143 = phi i64 [ %.pre, %130 ], [ %119, %142 ]', '%145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0', '%R8B.i9 = bitcast %union.anon* %145 to i8*', '%146 = load i8, i8* %14, align 1', '%147 = load i8, i8* %29, align 1', '%148 = or i8 %147, %146', '%149 = icmp eq i8 %148, 0', '%150 = zext i1 %149 to i8', 'store i8 %150, i8* %R8B.i9, align 1', '%151 = zext i1 %149 to i64', 'store i64 %151, i64* %RAX.i32, align 8', '%152 = load i64, i64* %6, align 8', '%153 = add i64 %152, 32', 'store i64 %153, i64* %6, align 8', '%154 = icmp ugt i64 %152, -33', '%155 = zext i1 %154 to i8', 'store i8 %155, i8* %14, align 1', '%156 = trunc i64 %153 to i32', '%157 = and i32 %156, 255', '%158 = tail call i32 @llvm.ctpop.i32(i32 %157)', '%159 = trunc i32 %158 to i8', '%160 = and i8 %159, 1', '%161 = xor i8 %160, 1', 'store i8 %161, i8* %21, align 1', '%162 = xor i64 %153, %152', '%163 = lshr i64 %162, 4', '%164 = trunc i64 %163 to i8', '%165 = and i8 %164, 1', 'store i8 %165, i8* %26, align 1', '%166 = icmp eq i64 %153, 0', '%167 = zext i1 %166 to i8', 'store i8 %167, i8* %29, align 1', '%168 = lshr i64 %153, 63', '%169 = trunc i64 %168 to i8', 'store i8 %169, i8* %32, align 1', '%170 = lshr i64 %152, 63', '%171 = xor i64 %168, %170', '%172 = add nuw nsw i64 %171, %168', '%173 = icmp eq i64 %172, 2', '%174 = zext i1 %173 to i8', 'store i8 %174, i8* %38, align 1', '%175 = add i64 %143, 17', 'store i64 %175, i64* %3, align 8', '%176 = add i64 %152, 40', '%177 = inttoptr i64 %153 to i64*', '%178 = load i64, i64* %177, align 8', 'store i64 %178, i64* %RBP.i, align 8', 'store i64 %176, i64* %6, align 8', '%179 = add i64 %143, 18', 'store i64 %179, i64* %3, align 8', '%180 = inttoptr i64 %176 to i64*', '%181 = load i64, i64* %180, align 8', 'store i64 %181, i64* %3, align 8', '%182 = add i64 %152, 48', 'store i64 %182, i64* %6, align 8'])
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0', '%R8B = bitcast %union.anon* %3 to i8*', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0', '%DX = bitcast %union.anon* %5 to i16*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%7 = load i64, i64* %RBP, align 8', '%8 = add i64 %1, 1', 'store i64 %8, i64* %PC, align 8', '%9 = load i64, i64* %RSP, align 8', '%10 = add i64 %9, -8', '%11 = inttoptr i64 %10 to i64*', 'store i64 %7, i64* %11, align 8', 'store i64 %10, i64* %RBP, align 8', '%13 = add i64 %9, -40', 'store i64 %13, i64* %RSP, align 8', '%14 = icmp ult i64 %10, 32', '%15 = zext i1 %14 to i8', '%16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %15, i8* %16, align 1', '%17 = trunc i64 %13 to i32', '%18 = and i32 %17, 255', '%19 = tail call i32 @llvm.ctpop.i32(i32 %18) #12', '%20 = trunc i32 %19 to i8', '%21 = and i8 %20, 1', '%22 = xor i8 %21, 1', '%23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %22, i8* %23, align 1', '%24 = xor i64 %10, %13', '%25 = lshr i64 %24, 4', '%26 = trunc i64 %25 to i8', '%27 = and i8 %26, 1', 'store i8 %27, i8* %28, align 1', '%29 = icmp eq i64 %13, 0', '%30 = zext i1 %29 to i8', '%31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %30, i8* %31, align 1', '%32 = lshr i64 %13, 63', '%33 = trunc i64 %32 to i8', 'store i8 %33, i8* %34, align 1', '%35 = lshr i64 %10, 63', '%36 = xor i64 %32, %35', '%37 = add nuw nsw i64 %36, %35', '%38 = icmp eq i64 %37, 2', '%39 = zext i1 %38 to i8', 'store i8 %39, i8* %40, align 1', '%41 = add i64 %9, -16', '%42 = load i64, i64* %RDI, align 8', '%43 = add i64 %12, 11', 'store i64 %43, i64* %PC, align 8', '%44 = inttoptr i64 %41 to i64*', 'store i64 %42, i64* %44, align 8', '%45 = load i64, i64* %RBP, align 8', '%46 = add i64 %45, -16', '%47 = load i64, i64* %RSI, align 8', '%49 = add i64 %48, 4', 'store i64 %49, i64* %PC, align 8', '%50 = inttoptr i64 %46 to i64*', 'store i64 %47, i64* %50, align 8', '%51 = load i64, i64* %RBP, align 8', '%52 = add i64 %51, -8', '%54 = add i64 %53, 4', 'store i64 %54, i64* %PC, align 8', '%55 = inttoptr i64 %52 to i64*', '%56 = load i64, i64* %55, align 8', 'store i64 %56, i64* %RSI, align 8', '%57 = add i64 %53, 7', 'store i64 %57, i64* %PC, align 8', '%58 = inttoptr i64 %56 to i16*', '%59 = load i16, i16* %58, align 2', '%60 = zext i16 %59 to i64', 'store i64 %60, i64* %RAX, align 8', '%61 = add i64 %51, -16', '%62 = add i64 %53, 11', 'store i64 %62, i64* %PC, align 8', '%63 = inttoptr i64 %61 to i64*', '%64 = load i64, i64* %63, align 8', 'store i64 %64, i64* %RSI, align 8', '%65 = add i64 %53, 14', 'store i64 %65, i64* %PC, align 8', '%66 = inttoptr i64 %64 to i16*', '%67 = load i16, i16* %66, align 2', '%68 = zext i16 %67 to i64', 'store i64 %68, i64* %RCX, align 8', '%69 = zext i16 %67 to i32', '%70 = zext i16 %59 to i32', '%71 = sub nsw i32 %70, %69', '%72 = zext i32 %71 to i64', 'store i64 %72, i64* %RAX, align 8', '%73 = icmp ult i16 %59, %67', '%74 = zext i1 %73 to i8', 'store i8 %74, i8* %16, align 1', '%75 = and i32 %71, 255', '%76 = tail call i32 @llvm.ctpop.i32(i32 %75) #12', '%77 = trunc i32 %76 to i8', '%78 = and i8 %77, 1', '%79 = xor i8 %78, 1', 'store i8 %79, i8* %23, align 1', '%80 = xor i16 %67, %59', '%81 = zext i16 %80 to i32', '%82 = xor i32 %81, %71', '%83 = lshr i32 %82, 4', '%84 = trunc i32 %83 to i8', '%85 = and i8 %84, 1', 'store i8 %85, i8* %28, align 1', '%86 = icmp eq i32 %71, 0', '%87 = zext i1 %86 to i8', 'store i8 %87, i8* %31, align 1', '%88 = lshr i32 %71, 31', '%89 = trunc i32 %88 to i8', 'store i8 %89, i8* %34, align 1', '%90 = trunc i32 %71 to i16', 'store i16 %90, i16* %DX, align 2', '%91 = add i64 %51, -18', '%92 = add i64 %53, 23', 'store i64 %92, i64* %PC, align 8', '%93 = inttoptr i64 %91 to i16*', 'store i16 %90, i16* %93, align 2', '%94 = load i64, i64* %RBP, align 8', '%95 = add i64 %94, -18', '%97 = add i64 %96, 4', 'store i64 %97, i64* %PC, align 8', '%98 = inttoptr i64 %95 to i16*', '%99 = load i16, i16* %98, align 2', '%100 = zext i16 %99 to i64', 'store i64 %100, i64* %RDI, align 8', '%101 = add i64 %96, -80007', '%102 = add i64 %96, 9', '%103 = load i64, i64* %RSP, align 8', '%104 = add i64 %103, -8', '%105 = inttoptr i64 %104 to i64*', 'store i64 %102, i64* %105, align 8', 'store i64 %104, i64* %RSP, align 8', 'store i64 %101, i64* %PC, align 8', '%109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %108, i64* %109, align 1', '%110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%111 = bitcast i64* %110 to double*', 'store double 0.000000e+00, double* %111, align 1', '%114 = bitcast %union.VectorReg* %6 to double*', 'store double %113, double* %114, align 1', 'store i64 %115, i64* %PC, align 8', '%.pre = load i64, i64* %PC, align 8', '%135 = phi i8 [ 0, %128 ], [ 0, %130 ], [ 1, %132 ], [ 1, %118 ]', '%136 = phi i8 [ 0, %128 ], [ 0, %130 ], [ 0, %132 ], [ 1, %118 ]', '%137 = phi i8 [ 0, %128 ], [ 1, %130 ], [ 0, %132 ], [ 1, %118 ]', 'store i8 %135, i8* %31, align 1', 'store i8 %136, i8* %23, align 1', 'store i8 %137, i8* %16, align 1', '%139 = phi i64 [ %.pre, %126 ], [ %115, %138 ]', '%141 = load i8, i8* %16, align 1', '%142 = load i8, i8* %31, align 1', '%143 = or i8 %142, %141', '%144 = icmp eq i8 %143, 0', '%145 = zext i1 %144 to i8', 'store i8 %145, i8* %R8B, align 1', '%146 = zext i1 %144 to i64', 'store i64 %146, i64* %RAX, align 8', '%147 = load i64, i64* %RSP, align 8', '%148 = add i64 %147, 32', 'store i64 %148, i64* %RSP, align 8', '%149 = icmp ugt i64 %147, -33', '%150 = zext i1 %149 to i8', 'store i8 %150, i8* %16, align 1', '%151 = trunc i64 %148 to i32', '%152 = and i32 %151, 255', '%153 = tail call i32 @llvm.ctpop.i32(i32 %152) #12', '%154 = trunc i32 %153 to i8', '%155 = and i8 %154, 1', '%156 = xor i8 %155, 1', 'store i8 %156, i8* %23, align 1', '%157 = xor i64 %148, %147', '%158 = lshr i64 %157, 4', '%159 = trunc i64 %158 to i8', '%160 = and i8 %159, 1', 'store i8 %160, i8* %28, align 1', '%161 = icmp eq i64 %148, 0', '%162 = zext i1 %161 to i8', 'store i8 %162, i8* %31, align 1', '%163 = lshr i64 %148, 63', '%164 = trunc i64 %163 to i8', 'store i8 %164, i8* %34, align 1', '%165 = lshr i64 %147, 63', '%166 = xor i64 %163, %165', '%167 = add nuw nsw i64 %166, %163', '%168 = icmp eq i64 %167, 2', '%169 = zext i1 %168 to i8', 'store i8 %169, i8* %40, align 1', '%170 = add i64 %139, 17', 'store i64 %170, i64* %PC, align 8', '%171 = add i64 %147, 40', '%172 = inttoptr i64 %148 to i64*', '%173 = load i64, i64* %172, align 8', 'store i64 %173, i64* %RBP, align 8', 'store i64 %171, i64* %RSP, align 8', '%174 = add i64 %139, 18', 'store i64 %174, i64* %PC, align 8', '%175 = inttoptr i64 %171 to i64*', '%176 = load i64, i64* %175, align 8', 'store i64 %176, i64* %PC, align 8', '%177 = add i64 %147, 48', 'store i64 %177, i64* %RSP, align 8'])
Keep: block_413ee0:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
Found line to remove! %R8B = bitcast %union.anon* %3 to i8*
Keep: %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
Found line to remove! %DX = bitcast %union.anon* %5 to i16*
Keep: %EAX = bitcast %union.anon* %4 to i32*
Found line to remove! %RAX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Found line to remove! %7 = load i64, i64* %RBP, align 8
Found line to remove! %8 = add i64 %1, 1
Found line to remove! store i64 %8, i64* %PC, align 8
Found line to remove! %9 = load i64, i64* %RSP, align 8
Found line to remove! %10 = add i64 %9, -8
Found line to remove! %11 = inttoptr i64 %10 to i64*
Found line to remove! store i64 %7, i64* %11, align 8
Keep: %12 = load i64, i64* %PC, align 8
Found line to remove! store i64 %10, i64* %RBP, align 8
Found line to remove! %13 = add i64 %9, -40
Found line to remove! store i64 %13, i64* %RSP, align 8
Found line to remove! %14 = icmp ult i64 %10, 32
Found line to remove! %15 = zext i1 %14 to i8
Found line to remove! %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %15, i8* %16, align 1
Found line to remove! %17 = trunc i64 %13 to i32
Found line to remove! %18 = and i32 %17, 255
Found line to remove! %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #12
Found line to remove! %20 = trunc i32 %19 to i8
Found line to remove! %21 = and i8 %20, 1
Found line to remove! %22 = xor i8 %21, 1
Found line to remove! %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %22, i8* %23, align 1
Found line to remove! %24 = xor i64 %10, %13
Found line to remove! %25 = lshr i64 %24, 4
Found line to remove! %26 = trunc i64 %25 to i8
Found line to remove! %27 = and i8 %26, 1
Keep: %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %27, i8* %28, align 1
Found line to remove! %29 = icmp eq i64 %13, 0
Found line to remove! %30 = zext i1 %29 to i8
Found line to remove! %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %30, i8* %31, align 1
Found line to remove! %32 = lshr i64 %13, 63
Found line to remove! %33 = trunc i64 %32 to i8
Keep: %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %33, i8* %34, align 1
Found line to remove! %35 = lshr i64 %10, 63
Found line to remove! %36 = xor i64 %32, %35
Found line to remove! %37 = add nuw nsw i64 %36, %35
Found line to remove! %38 = icmp eq i64 %37, 2
Found line to remove! %39 = zext i1 %38 to i8
Keep: %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %39, i8* %40, align 1
Found line to remove! %41 = add i64 %9, -16
Found line to remove! %42 = load i64, i64* %RDI, align 8
Found line to remove! %43 = add i64 %12, 11
Found line to remove! store i64 %43, i64* %PC, align 8
Found line to remove! %44 = inttoptr i64 %41 to i64*
Found line to remove! store i64 %42, i64* %44, align 8
Found line to remove! %45 = load i64, i64* %RBP, align 8
Found line to remove! %46 = add i64 %45, -16
Found line to remove! %47 = load i64, i64* %RSI, align 8
Keep: %48 = load i64, i64* %PC, align 8
Found line to remove! %49 = add i64 %48, 4
Found line to remove! store i64 %49, i64* %PC, align 8
Found line to remove! %50 = inttoptr i64 %46 to i64*
Found line to remove! store i64 %47, i64* %50, align 8
Found line to remove! %51 = load i64, i64* %RBP, align 8
Found line to remove! %52 = add i64 %51, -8
Keep: %53 = load i64, i64* %PC, align 8
Found line to remove! %54 = add i64 %53, 4
Found line to remove! store i64 %54, i64* %PC, align 8
Found line to remove! %55 = inttoptr i64 %52 to i64*
Found line to remove! %56 = load i64, i64* %55, align 8
Found line to remove! store i64 %56, i64* %RSI, align 8
Found line to remove! %57 = add i64 %53, 7
Found line to remove! store i64 %57, i64* %PC, align 8
Found line to remove! %58 = inttoptr i64 %56 to i16*
Found line to remove! %59 = load i16, i16* %58, align 2
Found line to remove! %60 = zext i16 %59 to i64
Found line to remove! store i64 %60, i64* %RAX, align 8
Found line to remove! %61 = add i64 %51, -16
Found line to remove! %62 = add i64 %53, 11
Found line to remove! store i64 %62, i64* %PC, align 8
Found line to remove! %63 = inttoptr i64 %61 to i64*
Found line to remove! %64 = load i64, i64* %63, align 8
Found line to remove! store i64 %64, i64* %RSI, align 8
Found line to remove! %65 = add i64 %53, 14
Found line to remove! store i64 %65, i64* %PC, align 8
Found line to remove! %66 = inttoptr i64 %64 to i16*
Found line to remove! %67 = load i16, i16* %66, align 2
Found line to remove! %68 = zext i16 %67 to i64
Found line to remove! store i64 %68, i64* %RCX, align 8
Found line to remove! %69 = zext i16 %67 to i32
Found line to remove! %70 = zext i16 %59 to i32
Found line to remove! %71 = sub nsw i32 %70, %69
Found line to remove! %72 = zext i32 %71 to i64
Found line to remove! store i64 %72, i64* %RAX, align 8
Found line to remove! %73 = icmp ult i16 %59, %67
Found line to remove! %74 = zext i1 %73 to i8
Found line to remove! store i8 %74, i8* %16, align 1
Found line to remove! %75 = and i32 %71, 255
Found line to remove! %76 = tail call i32 @llvm.ctpop.i32(i32 %75) #12
Found line to remove! %77 = trunc i32 %76 to i8
Found line to remove! %78 = and i8 %77, 1
Found line to remove! %79 = xor i8 %78, 1
Found line to remove! store i8 %79, i8* %23, align 1
Found line to remove! %80 = xor i16 %67, %59
Found line to remove! %81 = zext i16 %80 to i32
Found line to remove! %82 = xor i32 %81, %71
Found line to remove! %83 = lshr i32 %82, 4
Found line to remove! %84 = trunc i32 %83 to i8
Found line to remove! %85 = and i8 %84, 1
Found line to remove! store i8 %85, i8* %28, align 1
Found line to remove! %86 = icmp eq i32 %71, 0
Found line to remove! %87 = zext i1 %86 to i8
Found line to remove! store i8 %87, i8* %31, align 1
Found line to remove! %88 = lshr i32 %71, 31
Found line to remove! %89 = trunc i32 %88 to i8
Found line to remove! store i8 %89, i8* %34, align 1
Keep: store i8 0, i8* %40, align 1
Found line to remove! %90 = trunc i32 %71 to i16
Found line to remove! store i16 %90, i16* %DX, align 2
Found line to remove! %91 = add i64 %51, -18
Found line to remove! %92 = add i64 %53, 23
Found line to remove! store i64 %92, i64* %PC, align 8
Found line to remove! %93 = inttoptr i64 %91 to i16*
Found line to remove! store i16 %90, i16* %93, align 2
Found line to remove! %94 = load i64, i64* %RBP, align 8
Found line to remove! %95 = add i64 %94, -18
Keep: %96 = load i64, i64* %PC, align 8
Found line to remove! %97 = add i64 %96, 4
Found line to remove! store i64 %97, i64* %PC, align 8
Found line to remove! %98 = inttoptr i64 %95 to i16*
Found line to remove! %99 = load i16, i16* %98, align 2
Found line to remove! %100 = zext i16 %99 to i64
Found line to remove! store i64 %100, i64* %RDI, align 8
Found line to remove! %101 = add i64 %96, -80007
Found line to remove! %102 = add i64 %96, 9
Found line to remove! %103 = load i64, i64* %RSP, align 8
Found line to remove! %104 = add i64 %103, -8
Found line to remove! %105 = inttoptr i64 %104 to i64*
Found line to remove! store i64 %102, i64* %105, align 8
Found line to remove! store i64 %104, i64* %RSP, align 8
Found line to remove! store i64 %101, i64* %PC, align 8
Keep: %106 = tail call fastcc %struct.Memory* @ext_674150_abs(%struct.State* nonnull %0, %struct.Memory* %2)
Keep: %107 = load i64, i64* %PC, align 8
Keep: %108 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 56) to i64*), align 8
Found line to remove! %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! store i64 %108, i64* %109, align 1
Found line to remove! %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %111 = bitcast i64* %110 to double*
Found line to remove! store double 0.000000e+00, double* %111, align 1
Keep: %112 = load i32, i32* %EAX, align 4
Keep: %113 = sitofp i32 %112 to double
Found line to remove! %114 = bitcast %union.VectorReg* %6 to double*
Found line to remove! store double %113, double* %114, align 1
Keep: %115 = add i64 %107, 16
Found line to remove! store i64 %115, i64* %PC, align 8
Keep: %116 = bitcast i64 %108 to double
Keep: %117 = fcmp uno double %116, %113
Keep: br i1 %117, label %118, label %128
Keep: 
Keep: ; <label>:118:                                    ; preds = %block_413ee0
Keep: %119 = fadd double %113, %116
Keep: %120 = bitcast double %119 to i64
Keep: %121 = and i64 %120, 9221120237041090560
Keep: %122 = icmp eq i64 %121, 9218868437227405312
Keep: %123 = and i64 %120, 2251799813685247
Keep: %124 = icmp ne i64 %123, 0
Keep: %125 = and i1 %122, %124
Keep: br i1 %125, label %126, label %134
Keep: 
Keep: ; <label>:126:                                    ; preds = %118
Keep: %127 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %115, %struct.Memory* %106) #13
Found line to remove! %.pre = load i64, i64* %PC, align 8
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: ; <label>:128:                                    ; preds = %block_413ee0
Keep: %129 = fcmp ogt double %116, %113
Keep: br i1 %129, label %134, label %130
Keep: 
Keep: ; <label>:130:                                    ; preds = %128
Keep: %131 = fcmp olt double %116, %113
Keep: br i1 %131, label %134, label %132
Keep: 
Keep: ; <label>:132:                                    ; preds = %130
Keep: %133 = fcmp oeq double %116, %113
Keep: br i1 %133, label %134, label %138
Keep: 
Keep: ; <label>:134:                                    ; preds = %132, %130, %128, %118
Found line to remove! %135 = phi i8 [ 0, %128 ], [ 0, %130 ], [ 1, %132 ], [ 1, %118 ]
Found line to remove! %136 = phi i8 [ 0, %128 ], [ 0, %130 ], [ 0, %132 ], [ 1, %118 ]
Found line to remove! %137 = phi i8 [ 0, %128 ], [ 1, %130 ], [ 0, %132 ], [ 1, %118 ]
Found line to remove! store i8 %135, i8* %31, align 1
Found line to remove! store i8 %136, i8* %23, align 1
Found line to remove! store i8 %137, i8* %16, align 1
Keep: br label %138
Keep: 
Keep: ; <label>:138:                                    ; preds = %134, %132
Keep: store i8 0, i8* %40, align 1
Keep: store i8 0, i8* %34, align 1
Keep: store i8 0, i8* %28, align 1
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: _ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %138, %126
Found line to remove! %139 = phi i64 [ %.pre, %126 ], [ %115, %138 ]
Keep: %140 = phi %struct.Memory* [ %127, %126 ], [ %106, %138 ]
Found line to remove! %141 = load i8, i8* %16, align 1
Found line to remove! %142 = load i8, i8* %31, align 1
Found line to remove! %143 = or i8 %142, %141
Found line to remove! %144 = icmp eq i8 %143, 0
Found line to remove! %145 = zext i1 %144 to i8
Found line to remove! store i8 %145, i8* %R8B, align 1
Found line to remove! %146 = zext i1 %144 to i64
Found line to remove! store i64 %146, i64* %RAX, align 8
Found line to remove! %147 = load i64, i64* %RSP, align 8
Found line to remove! %148 = add i64 %147, 32
Found line to remove! store i64 %148, i64* %RSP, align 8
Found line to remove! %149 = icmp ugt i64 %147, -33
Found line to remove! %150 = zext i1 %149 to i8
Found line to remove! store i8 %150, i8* %16, align 1
Found line to remove! %151 = trunc i64 %148 to i32
Found line to remove! %152 = and i32 %151, 255
Found line to remove! %153 = tail call i32 @llvm.ctpop.i32(i32 %152) #12
Found line to remove! %154 = trunc i32 %153 to i8
Found line to remove! %155 = and i8 %154, 1
Found line to remove! %156 = xor i8 %155, 1
Found line to remove! store i8 %156, i8* %23, align 1
Found line to remove! %157 = xor i64 %148, %147
Found line to remove! %158 = lshr i64 %157, 4
Found line to remove! %159 = trunc i64 %158 to i8
Found line to remove! %160 = and i8 %159, 1
Found line to remove! store i8 %160, i8* %28, align 1
Found line to remove! %161 = icmp eq i64 %148, 0
Found line to remove! %162 = zext i1 %161 to i8
Found line to remove! store i8 %162, i8* %31, align 1
Found line to remove! %163 = lshr i64 %148, 63
Found line to remove! %164 = trunc i64 %163 to i8
Found line to remove! store i8 %164, i8* %34, align 1
Found line to remove! %165 = lshr i64 %147, 63
Found line to remove! %166 = xor i64 %163, %165
Found line to remove! %167 = add nuw nsw i64 %166, %163
Found line to remove! %168 = icmp eq i64 %167, 2
Found line to remove! %169 = zext i1 %168 to i8
Found line to remove! store i8 %169, i8* %40, align 1
Found line to remove! %170 = add i64 %139, 17
Found line to remove! store i64 %170, i64* %PC, align 8
Found line to remove! %171 = add i64 %147, 40
Found line to remove! %172 = inttoptr i64 %148 to i64*
Found line to remove! %173 = load i64, i64* %172, align 8
Found line to remove! store i64 %173, i64* %RBP, align 8
Found line to remove! store i64 %171, i64* %RSP, align 8
Found line to remove! %174 = add i64 %139, 18
Found line to remove! store i64 %174, i64* %PC, align 8
Found line to remove! %175 = inttoptr i64 %171 to i64*
Found line to remove! %176 = load i64, i64* %175, align 8
Found line to remove! store i64 %176, i64* %PC, align 8
Found line to remove! %177 = add i64 %147, 48
Found line to remove! store i64 %177, i64* %RSP, align 8
Keep: ret %struct.Memory* %140
Missed: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0', '%R8B = bitcast %union.anon* %3 to i8*', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0', '%DX = bitcast %union.anon* %5 to i16*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%7 = load i64, i64* %RBP, align 8', '%8 = add i64 %1, 1', 'store i64 %8, i64* %PC, align 8', '%9 = load i64, i64* %RSP, align 8', '%10 = add i64 %9, -8', '%11 = inttoptr i64 %10 to i64*', 'store i64 %7, i64* %11, align 8', 'store i64 %10, i64* %RBP, align 8', '%13 = add i64 %9, -40', 'store i64 %13, i64* %RSP, align 8', '%14 = icmp ult i64 %10, 32', '%15 = zext i1 %14 to i8', '%16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %15, i8* %16, align 1', '%17 = trunc i64 %13 to i32', '%18 = and i32 %17, 255', '%19 = tail call i32 @llvm.ctpop.i32(i32 %18) #12', '%20 = trunc i32 %19 to i8', '%21 = and i8 %20, 1', '%22 = xor i8 %21, 1', '%23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %22, i8* %23, align 1', '%24 = xor i64 %10, %13', '%25 = lshr i64 %24, 4', '%26 = trunc i64 %25 to i8', '%27 = and i8 %26, 1', 'store i8 %27, i8* %28, align 1', '%29 = icmp eq i64 %13, 0', '%30 = zext i1 %29 to i8', '%31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %30, i8* %31, align 1', '%32 = lshr i64 %13, 63', '%33 = trunc i64 %32 to i8', 'store i8 %33, i8* %34, align 1', '%35 = lshr i64 %10, 63', '%36 = xor i64 %32, %35', '%37 = add nuw nsw i64 %36, %35', '%38 = icmp eq i64 %37, 2', '%39 = zext i1 %38 to i8', 'store i8 %39, i8* %40, align 1', '%41 = add i64 %9, -16', '%42 = load i64, i64* %RDI, align 8', '%43 = add i64 %12, 11', 'store i64 %43, i64* %PC, align 8', '%44 = inttoptr i64 %41 to i64*', 'store i64 %42, i64* %44, align 8', '%45 = load i64, i64* %RBP, align 8', '%46 = add i64 %45, -16', '%47 = load i64, i64* %RSI, align 8', '%49 = add i64 %48, 4', 'store i64 %49, i64* %PC, align 8', '%50 = inttoptr i64 %46 to i64*', 'store i64 %47, i64* %50, align 8', '%51 = load i64, i64* %RBP, align 8', '%52 = add i64 %51, -8', '%54 = add i64 %53, 4', 'store i64 %54, i64* %PC, align 8', '%55 = inttoptr i64 %52 to i64*', '%56 = load i64, i64* %55, align 8', 'store i64 %56, i64* %RSI, align 8', '%57 = add i64 %53, 7', 'store i64 %57, i64* %PC, align 8', '%58 = inttoptr i64 %56 to i16*', '%59 = load i16, i16* %58, align 2', '%60 = zext i16 %59 to i64', 'store i64 %60, i64* %RAX, align 8', '%61 = add i64 %51, -16', '%62 = add i64 %53, 11', 'store i64 %62, i64* %PC, align 8', '%63 = inttoptr i64 %61 to i64*', '%64 = load i64, i64* %63, align 8', 'store i64 %64, i64* %RSI, align 8', '%65 = add i64 %53, 14', 'store i64 %65, i64* %PC, align 8', '%66 = inttoptr i64 %64 to i16*', '%67 = load i16, i16* %66, align 2', '%68 = zext i16 %67 to i64', 'store i64 %68, i64* %RCX, align 8', '%69 = zext i16 %67 to i32', '%70 = zext i16 %59 to i32', '%71 = sub nsw i32 %70, %69', '%72 = zext i32 %71 to i64', 'store i64 %72, i64* %RAX, align 8', '%73 = icmp ult i16 %59, %67', '%74 = zext i1 %73 to i8', 'store i8 %74, i8* %16, align 1', '%75 = and i32 %71, 255', '%76 = tail call i32 @llvm.ctpop.i32(i32 %75) #12', '%77 = trunc i32 %76 to i8', '%78 = and i8 %77, 1', '%79 = xor i8 %78, 1', 'store i8 %79, i8* %23, align 1', '%80 = xor i16 %67, %59', '%81 = zext i16 %80 to i32', '%82 = xor i32 %81, %71', '%83 = lshr i32 %82, 4', '%84 = trunc i32 %83 to i8', '%85 = and i8 %84, 1', 'store i8 %85, i8* %28, align 1', '%86 = icmp eq i32 %71, 0', '%87 = zext i1 %86 to i8', 'store i8 %87, i8* %31, align 1', '%88 = lshr i32 %71, 31', '%89 = trunc i32 %88 to i8', 'store i8 %89, i8* %34, align 1', '%90 = trunc i32 %71 to i16', 'store i16 %90, i16* %DX, align 2', '%91 = add i64 %51, -18', '%92 = add i64 %53, 23', 'store i64 %92, i64* %PC, align 8', '%93 = inttoptr i64 %91 to i16*', 'store i16 %90, i16* %93, align 2', '%94 = load i64, i64* %RBP, align 8', '%95 = add i64 %94, -18', '%97 = add i64 %96, 4', 'store i64 %97, i64* %PC, align 8', '%98 = inttoptr i64 %95 to i16*', '%99 = load i16, i16* %98, align 2', '%100 = zext i16 %99 to i64', 'store i64 %100, i64* %RDI, align 8', '%101 = add i64 %96, -80007', '%102 = add i64 %96, 9', '%103 = load i64, i64* %RSP, align 8', '%104 = add i64 %103, -8', '%105 = inttoptr i64 %104 to i64*', 'store i64 %102, i64* %105, align 8', 'store i64 %104, i64* %RSP, align 8', 'store i64 %101, i64* %PC, align 8', '%109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %108, i64* %109, align 1', '%110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%111 = bitcast i64* %110 to double*', 'store double 0.000000e+00, double* %111, align 1', '%114 = bitcast %union.VectorReg* %6 to double*', 'store double %113, double* %114, align 1', 'store i64 %115, i64* %PC, align 8', '%.pre = load i64, i64* %PC, align 8', '%135 = phi i8 [ 0, %128 ], [ 0, %130 ], [ 1, %132 ], [ 1, %118 ]', '%136 = phi i8 [ 0, %128 ], [ 0, %130 ], [ 0, %132 ], [ 1, %118 ]', '%137 = phi i8 [ 0, %128 ], [ 1, %130 ], [ 0, %132 ], [ 1, %118 ]', 'store i8 %135, i8* %31, align 1', 'store i8 %136, i8* %23, align 1', 'store i8 %137, i8* %16, align 1', '%139 = phi i64 [ %.pre, %126 ], [ %115, %138 ]', '%141 = load i8, i8* %16, align 1', '%142 = load i8, i8* %31, align 1', '%143 = or i8 %142, %141', '%144 = icmp eq i8 %143, 0', '%145 = zext i1 %144 to i8', 'store i8 %145, i8* %R8B, align 1', '%146 = zext i1 %144 to i64', 'store i64 %146, i64* %RAX, align 8', '%147 = load i64, i64* %RSP, align 8', '%148 = add i64 %147, 32', 'store i64 %148, i64* %RSP, align 8', '%149 = icmp ugt i64 %147, -33', '%150 = zext i1 %149 to i8', 'store i8 %150, i8* %16, align 1', '%151 = trunc i64 %148 to i32', '%152 = and i32 %151, 255', '%153 = tail call i32 @llvm.ctpop.i32(i32 %152) #12', '%154 = trunc i32 %153 to i8', '%155 = and i8 %154, 1', '%156 = xor i8 %155, 1', 'store i8 %156, i8* %23, align 1', '%157 = xor i64 %148, %147', '%158 = lshr i64 %157, 4', '%159 = trunc i64 %158 to i8', '%160 = and i8 %159, 1', 'store i8 %160, i8* %28, align 1', '%161 = icmp eq i64 %148, 0', '%162 = zext i1 %161 to i8', 'store i8 %162, i8* %31, align 1', '%163 = lshr i64 %148, 63', '%164 = trunc i64 %163 to i8', 'store i8 %164, i8* %34, align 1', '%165 = lshr i64 %147, 63', '%166 = xor i64 %163, %165', '%167 = add nuw nsw i64 %166, %163', '%168 = icmp eq i64 %167, 2', '%169 = zext i1 %168 to i8', 'store i8 %169, i8* %40, align 1', '%170 = add i64 %139, 17', 'store i64 %170, i64* %PC, align 8', '%171 = add i64 %147, 40', '%172 = inttoptr i64 %148 to i64*', '%173 = load i64, i64* %172, align 8', 'store i64 %173, i64* %RBP, align 8', 'store i64 %171, i64* %RSP, align 8', '%174 = add i64 %139, 18', 'store i64 %174, i64* %PC, align 8', '%175 = inttoptr i64 %171 to i64*', '%176 = load i64, i64* %175, align 8', 'store i64 %176, i64* %PC, align 8', '%177 = add i64 %147, 48', 'store i64 %177, i64* %RSP, align 8'])Writing '/tmp/tmpoo9djcr1.dot'...
Writing '/tmp/tmpoo9djcr1.dot':Done

Reading LLVM: /tmp/tmpmma3h3j2-query.ll
Extracting function [_Z15tolerance_equalItEbRT_S1_] from /tmp/tmpmma3h3j2-query.ll
Dot file generated!
Writing '/tmp/tmpmxpo86a1.dot'...
Writing '/tmp/tmpmxpo86a1.dot':Done

Reading LLVM: /tmp/tmpx6yryxhl-target.ll
Extracting function [_Z15tolerance_equalItEbRT_S1_] from /tmp/tmpx6yryxhl-target.ll
Dot file generated!

================ Starting round 2
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 2 %var_2_32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 3 %var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 4 %var_2_55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 5 store i8 0, i8* %var_2_38, align 1
- 6 %var_2_106 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
- 7 %var_2_107 = load i64, i64* %var_2_3, align 8
- 8 %var_2_108 = add i64 %var_2_107, ptrtoint (%G_0x4b40__rip__type* @G_0x4b40__rip_ to i64)
- 9 %var_2_109 = add i64 %var_2_107, 8
- 10 store i64 %var_2_109, i64* %var_2_3, align 8
- 11 %var_2_110 = inttoptr i64 %var_2_108 to i64*
- 12 %var_2_111 = load i64, i64* %var_2_110, align 8
- 13 %var_2_112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 14 store i64 %var_2_111, i64* %var_2_112, align 1
- 15 %EAX.i = bitcast %union.anon* %var_2_55 to i32*
- 16 %var_2_116 = load i32, i32* %EAX.i, align 4
- 17 %var_2_117 = sitofp i32 %var_2_116 to double
- 18 %var_2_119 = add i64 %var_2_107, 16
- 19 %var_2_120 = bitcast i64 %var_2_111 to double
- 20 %var_2_121 = fcmp uno double %var_2_120, %var_2_117
- 21 \<badref\> = br i1 %var_2_121, label %var_2_122, label %var_2_142
- 22 %var_2_123 = fadd double %var_2_120, %var_2_117
- 23 %var_2_124 = bitcast double %var_2_123 to i64
- 24 %var_2_125 = and i64 %var_2_124, 9221120237041090560
- 25 %var_2_126 = icmp eq i64 %var_2_125, 9218868437227405312
- 26 %var_2_127 = and i64 %var_2_124, 2251799813685247
- 27 %var_2_128 = icmp ne i64 %var_2_127, 0
- 28 %var_2_129 = and i1 %var_2_126, %var_2_128
- 29 \<badref\> = br i1 %var_2_129, label %var_2_130, label %var_2_142
- 30 %var_2_131 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_119, %struct.Memory* %var_2_106)
- 31 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 32 store i8 0, i8* %var_2_38, align 1
- 33 store i8 0, i8* %var_2_32, align 1
- 34 store i8 0, i8* %var_2_26, align 1
- 35 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 36 %var_2_144 = phi %struct.Memory* [ %var_2_131, %var_2_130 ], [ %var_2_106, %var_2_142 ]
- 37 \<badref\> = ret %struct.Memory* %var_2_144
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f30491e3730>, {0: {0}, 1: {3}, 2: {4}, 3: {5}, 4: {1}, 5: {25, 26, 27, 6}, 6: {23, 7}, 7: {8, 9, 10}, 8: set(), 9: set(), 10: {25, 26, 27, 6}, 11: set(), 12: {8, 9, 10}, 13: set(), 14: {25, 26, 27, 6}, 15: {16, 2}, 16: {8, 9, 10}, 17: {11}, 18: {12}, 19: {16, 2}, 20: {13}, 21: {14, 22}, 22: {15}, 23: {16, 2}, 24: {17}, 25: {18}, 26: {19}, 27: {20}, 28: {21}, 29: {14, 22}, 30: {23, 7}, 31: {24, 28}, 32: {25, 26, 27, 6}, 33: {25, 26, 27, 6}, 34: {25, 26, 27, 6}, 35: {24, 28}, 36: {29}, 37: {30}})
Equivalent! frozenset({25, 6}) {32, 5}
Equivalent! frozenset({24, 28}) {35, 31}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f30491e3730>, {0: {0}, 1: {3}, 2: {4}, 3: {5}, 4: set(), 5: {6}, 6: {23, 7}, 7: {8}, 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: {12}, 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: set(), 30: {23}, 31: {28}, 32: {25}, 33: {26}, 34: {27}, 35: {24}, 36: {29}, 37: {30}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
NO MATCH 4
EXACT 5 store store
MORE 6 POT: 2
EXACT 7 load load
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
EXACT 18 add add
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
NO MATCH 29
EXACT 30 tail tail
EXACT 31 br br
EXACT 32 store store
EXACT 33 store store
EXACT 34 store store
EXACT 35 br br
EXACT 36 phi phi
EXACT 37 ret ret
================ Starting round 3
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %EAX = bitcast %union.anon* %var_2_4 to i32*
- 3 %var_2_28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 4 %var_2_34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 5 %var_2_40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 6 store i8 0, i8* %var_2_40, align 1
- 7 %var_2_106 = tail call fastcc %struct.Memory* @ext_674150_abs(%struct.State* nonnull %0, %struct.Memory* %2)
- 8 %var_2_107 = load i64, i64* %PC, align 8
- 9 %var_2_1082 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 56) to double*), align 8
- 10 %var_2_112 = load i32, i32* %EAX, align 4
- 11 %var_2_113 = sitofp i32 %var_2_112 to double
- 12 %var_2_115 = add i64 %var_2_107, 16
- 13 %var_2_117 = fcmp uno double %var_2_1082, %var_2_113
- 14 \<badref\> = br i1 %var_2_117, label %var_2_118, label %var_2_138
- 15 %var_2_119 = fadd double %var_2_1082, %var_2_113
- 16 %var_2_120 = bitcast double %var_2_119 to i64
- 17 %var_2_121 = and i64 %var_2_120, 9221120237041090560
- 18 %var_2_122 = icmp eq i64 %var_2_121, 9218868437227405312
- 19 %var_2_123 = and i64 %var_2_120, 2251799813685247
- 20 %var_2_124 = icmp ne i64 %var_2_123, 0
- 21 %var_2_125 = and i1 %var_2_122, %var_2_124
- 22 \<badref\> = br i1 %var_2_125, label %var_2_126, label %var_2_138
- 23 %var_2_127 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_115, %struct.Memory* %var_2_106) #13
- 24 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 25 store i8 0, i8* %var_2_40, align 1
- 26 store i8 0, i8* %var_2_34, align 1
- 27 store i8 0, i8* %var_2_28, align 1
- 28 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 29 %var_2_140 = phi %struct.Memory* [ %var_2_127, %var_2_126 ], [ %var_2_106, %var_2_138 ]
- 30 \<badref\> = ret %struct.Memory* %var_2_140
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f304869c950>, {0: {0}, 1: {4}, 2: {19, 23, 15}, 3: {1}, 4: {2}, 5: {3}, 6: {32, 33, 34, 5, 10, 14}, 7: {6, 30}, 8: {16, 12, 7}, 9: {16, 12, 7}, 10: {16, 12, 7}, 11: {17}, 12: {18}, 13: {20}, 14: {29, 21}, 15: {22}, 16: {19, 23, 15}, 17: {24}, 18: {25}, 19: {26}, 20: {27}, 21: {28}, 22: {29, 21}, 23: {6, 30}, 24: {35, 31}, 25: {32, 33, 34, 5, 10, 14}, 26: {32, 33, 34, 5, 10, 14}, 27: {32, 33, 34, 5, 10, 14}, 28: {35, 31}, 29: {36}, 30: {37}})
Equivalent! frozenset({32, 5}) {25, 6}
Equivalent! frozenset({35, 31}) {24, 28}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f304869c950>, {0: {0}, 1: set(), 2: set(), 3: {1}, 4: {2}, 5: {3}, 6: {5}, 7: {6, 30}, 8: {7}, 9: set(), 10: set(), 11: set(), 12: {18}, 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: {30}, 24: {35}, 25: {32}, 26: {33}, 27: {34}, 28: {31}, 29: {36}, 30: {37}})
EXACT 0 getelementptr getelementptr
NO MATCH 1
NO MATCH 2
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 store store
MORE 7 POT: 2
EXACT 8 load load
NO MATCH 9
NO MATCH 10
NO MATCH 11
EXACT 12 add add
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
EXACT 23 tail tail
EXACT 24 br br
EXACT 25 store store
EXACT 26 store store
EXACT 27 store store
EXACT 28 br br
EXACT 29 phi phi
EXACT 30 ret ret
FP: 63 2.0 False
TO REMOVE: dict_keys(['store i8 0, i8* %var_2_38, align 1', '%var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 0, i8* %var_2_26, align 1', '%var_2_32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 0, i8* %var_2_32, align 1', '%var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13'])Writing '/tmp/tmpgwkrnjua.dot'...
Writing '/tmp/tmpgwkrnjua.dot':Done

Reading LLVM: /tmp/tmpmma3h3j2-query.ll
Extracting function [_Z15tolerance_equalItEbRT_S1_] from /tmp/tmpmma3h3j2-query.ll
Dot file generated!
Writing '/tmp/tmpes608jgh.dot'...
Writing '/tmp/tmpes608jgh.dot':Done

Reading LLVM: /tmp/tmpx6yryxhl-target.ll
Extracting function [_Z15tolerance_equalItEbRT_S1_] from /tmp/tmpx6yryxhl-target.ll
Dot file generated!

Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %var_2_32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Keep: %var_2_55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! store i8 0, i8* %var_2_38, align 1
Keep: %var_2_106 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
Keep: %var_2_107 = load i64, i64* %var_2_3, align 8
Keep: %var_2_108 = add i64 %var_2_107, ptrtoint (%G_0x4b40__rip__type* @G_0x4b40__rip_ to i64)
Keep: %var_2_109 = add i64 %var_2_107, 8
Keep: store i64 %var_2_109, i64* %var_2_3, align 8
Keep: %var_2_110 = inttoptr i64 %var_2_108 to i64*
Keep: %var_2_111 = load i64, i64* %var_2_110, align 8
Keep: %var_2_112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_111, i64* %var_2_112, align 1
Keep: %EAX.i = bitcast %union.anon* %var_2_55 to i32*
Keep: %var_2_116 = load i32, i32* %EAX.i, align 4
Keep: %var_2_117 = sitofp i32 %var_2_116 to double
Keep: %var_2_119 = add i64 %var_2_107, 16
Keep: %var_2_120 = bitcast i64 %var_2_111 to double
Keep: %var_2_121 = fcmp uno double %var_2_120, %var_2_117
Keep: br i1 %var_2_121, label %var_2_122, label %var_2_142
Keep: 
Keep: var_2_122:                                        ; preds = %entry
Keep: %var_2_123 = fadd double %var_2_120, %var_2_117
Keep: %var_2_124 = bitcast double %var_2_123 to i64
Keep: %var_2_125 = and i64 %var_2_124, 9221120237041090560
Keep: %var_2_126 = icmp eq i64 %var_2_125, 9218868437227405312
Keep: %var_2_127 = and i64 %var_2_124, 2251799813685247
Keep: %var_2_128 = icmp ne i64 %var_2_127, 0
Keep: %var_2_129 = and i1 %var_2_126, %var_2_128
Keep: br i1 %var_2_129, label %var_2_130, label %var_2_142
Keep: 
Keep: var_2_130:                                        ; preds = %var_2_122
Keep: %var_2_131 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_119, %struct.Memory* %var_2_106)
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: var_2_142:                                        ; preds = %entry, %var_2_122
Found line to remove! store i8 0, i8* %var_2_38, align 1
Found line to remove! store i8 0, i8* %var_2_32, align 1
Found line to remove! store i8 0, i8* %var_2_26, align 1
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: routine_ucomisd__xmm1___xmm0.exit:                ; preds = %var_2_142, %var_2_130
Keep: %var_2_144 = phi %struct.Memory* [ %var_2_131, %var_2_130 ], [ %var_2_106, %var_2_142 ]
Keep: ret %struct.Memory* %var_2_144
Missed: dict_keys(['store i8 0, i8* %var_2_38, align 1', '%var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 0, i8* %var_2_26, align 1', '%var_2_32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 0, i8* %var_2_32, align 1', '%var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13'])
TO REMOVE: dict_keys(['%var_2_28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 0, i8* %var_2_40, align 1', 'store i8 0, i8* %var_2_34, align 1', 'store i8 0, i8* %var_2_28, align 1'])
Keep: block_413ee0:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %var_2_4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %EAX = bitcast %union.anon* %var_2_4 to i32*
Found line to remove! %var_2_28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %var_2_34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %var_2_40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 0, i8* %var_2_40, align 1
Keep: %var_2_106 = tail call fastcc %struct.Memory* @ext_674150_abs(%struct.State* nonnull %0, %struct.Memory* %2)
Keep: %var_2_107 = load i64, i64* %PC, align 8
Keep: %var_2_1082 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 56) to double*), align 8
Keep: %var_2_112 = load i32, i32* %EAX, align 4
Keep: %var_2_113 = sitofp i32 %var_2_112 to double
Keep: %var_2_115 = add i64 %var_2_107, 16
Keep: %var_2_117 = fcmp uno double %var_2_1082, %var_2_113
Keep: br i1 %var_2_117, label %var_2_118, label %var_2_138
Keep: 
Keep: var_2_118:                                        ; preds = %block_413ee0
Keep: %var_2_119 = fadd double %var_2_1082, %var_2_113
Keep: %var_2_120 = bitcast double %var_2_119 to i64
Keep: %var_2_121 = and i64 %var_2_120, 9221120237041090560
Keep: %var_2_122 = icmp eq i64 %var_2_121, 9218868437227405312
Keep: %var_2_123 = and i64 %var_2_120, 2251799813685247
Keep: %var_2_124 = icmp ne i64 %var_2_123, 0
Keep: %var_2_125 = and i1 %var_2_122, %var_2_124
Keep: br i1 %var_2_125, label %var_2_126, label %var_2_138
Keep: 
Keep: var_2_126:                                        ; preds = %var_2_118
Keep: %var_2_127 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_115, %struct.Memory* %var_2_106) #13
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: var_2_138:                                        ; preds = %block_413ee0, %var_2_118
Found line to remove! store i8 0, i8* %var_2_40, align 1
Found line to remove! store i8 0, i8* %var_2_34, align 1
Found line to remove! store i8 0, i8* %var_2_28, align 1
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: _ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %var_2_138, %var_2_126
Keep: %var_2_140 = phi %struct.Memory* [ %var_2_127, %var_2_126 ], [ %var_2_106, %var_2_138 ]
Keep: ret %struct.Memory* %var_2_140
Missed: dict_keys(['%var_2_28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 0, i8* %var_2_40, align 1', 'store i8 0, i8* %var_2_34, align 1', 'store i8 0, i8* %var_2_28, align 1'])
================ Starting round 4
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %var_2_106 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
- 3 %var_2_107 = load i64, i64* %var_2_3, align 8
- 4 %var_2_108 = add i64 %var_2_107, ptrtoint (%G_0x4b40__rip__type* @G_0x4b40__rip_ to i64)
- 5 %var_2_109 = add i64 %var_2_107, 8
- 6 store i64 %var_2_109, i64* %var_2_3, align 8
- 7 %var_2_110 = inttoptr i64 %var_2_108 to i64*
- 8 %var_2_111 = load i64, i64* %var_2_110, align 8
- 9 %var_2_112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 10 store i64 %var_2_111, i64* %var_2_112, align 1
- 11 %EAX.i = bitcast %union.anon* %var_2_55 to i32*
- 12 %var_2_116 = load i32, i32* %EAX.i, align 4
- 13 %var_2_117 = sitofp i32 %var_2_116 to double
- 14 %var_2_119 = add i64 %var_2_107, 16
- 15 %var_2_120 = bitcast i64 %var_2_111 to double
- 16 %var_2_121 = fcmp uno double %var_2_120, %var_2_117
- 17 \<badref\> = br i1 %var_2_121, label %var_2_122, label %routine_ucomisd__xmm1___xmm0.exit
- 18 %var_2_123 = fadd double %var_2_120, %var_2_117
- 19 %var_2_124 = bitcast double %var_2_123 to i64
- 20 %var_2_125 = and i64 %var_2_124, 9221120237041090560
- 21 %var_2_126 = icmp eq i64 %var_2_125, 9218868437227405312
- 22 %var_2_127 = and i64 %var_2_124, 2251799813685247
- 23 %var_2_128 = icmp ne i64 %var_2_127, 0
- 24 %var_2_129 = and i1 %var_2_126, %var_2_128
- 25 \<badref\> = br i1 %var_2_129, label %var_2_130, label %routine_ucomisd__xmm1___xmm0.exit
- 26 %var_2_131 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_119, %struct.Memory* %var_2_106)
- 27 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 28 %var_2_144 = phi %struct.Memory* [ %var_2_131, %var_2_130 ], [ %var_2_106, %var_2_122 ], [ %var_2_106, %entry ]
- 29 \<badref\> = ret %struct.Memory* %var_2_144
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3049325a60>, {0: {0}, 1: {1}, 2: {19, 3}, 3: {4, 5, 6}, 4: set(), 5: set(), 6: set(), 7: set(), 8: {4, 5, 6}, 9: set(), 10: set(), 11: {2, 12}, 12: {4, 5, 6}, 13: {7}, 14: {8}, 15: {2, 12}, 16: {9}, 17: {10, 18}, 18: {11}, 19: {2, 12}, 20: {13}, 21: {14}, 22: {15}, 23: {16}, 24: {17}, 25: {10, 18}, 26: {19, 3}, 27: {20}, 28: {21}, 29: {22}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3049325a60>, {0: {0}, 1: set(), 2: {19, 3}, 3: {4}, 4: set(), 5: set(), 6: set(), 7: set(), 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: {8}, 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: {19}, 27: {20}, 28: {21}, 29: {22}})
EXACT 0 getelementptr getelementptr
NO MATCH 1
MORE 2 POT: 2
EXACT 3 load load
NO MATCH 4
NO MATCH 5
NO MATCH 6
NO MATCH 7
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
EXACT 14 add add
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
EXACT 26 tail tail
EXACT 27 br br
EXACT 28 phi phi
EXACT 29 ret ret
================ Starting round 5
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %EAX = bitcast %union.anon* %var_2_4 to i32*
- 3 %var_2_106 = tail call fastcc %struct.Memory* @ext_674150_abs(%struct.State* nonnull %0, %struct.Memory* %2)
- 4 %var_2_107 = load i64, i64* %PC, align 8
- 5 %var_2_1082 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 56) to double*), align 8
- 6 %var_2_112 = load i32, i32* %EAX, align 4
- 7 %var_2_113 = sitofp i32 %var_2_112 to double
- 8 %var_2_115 = add i64 %var_2_107, 16
- 9 %var_2_117 = fcmp uno double %var_2_1082, %var_2_113
- 10 \<badref\> = br i1 %var_2_117, label %var_2_118, label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 11 %var_2_119 = fadd double %var_2_1082, %var_2_113
- 12 %var_2_120 = bitcast double %var_2_119 to i64
- 13 %var_2_121 = and i64 %var_2_120, 9221120237041090560
- 14 %var_2_122 = icmp eq i64 %var_2_121, 9218868437227405312
- 15 %var_2_123 = and i64 %var_2_120, 2251799813685247
- 16 %var_2_124 = icmp ne i64 %var_2_123, 0
- 17 %var_2_125 = and i1 %var_2_122, %var_2_124
- 18 \<badref\> = br i1 %var_2_125, label %var_2_126, label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 19 %var_2_127 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_115, %struct.Memory* %var_2_106) #13
- 20 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 21 %var_2_140 = phi %struct.Memory* [ %var_2_127, %var_2_126 ], [ %var_2_106, %var_2_118 ], [ %var_2_106, %block_413ee0 ]
- 22 \<badref\> = ret %struct.Memory* %var_2_140
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f304869c8c8>, {0: {0}, 1: {1}, 2: {19, 11, 15}, 3: {2, 26}, 4: {8, 3, 12}, 5: {8, 3, 12}, 6: {8, 3, 12}, 7: {13}, 8: {14}, 9: {16}, 10: {17, 25}, 11: {18}, 12: {19, 11, 15}, 13: {20}, 14: {21}, 15: {22}, 16: {23}, 17: {24}, 18: {17, 25}, 19: {2, 26}, 20: {27}, 21: {28}, 22: {29}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f304869c8c8>, {0: {0}, 1: set(), 2: set(), 3: {2, 26}, 4: {3}, 5: set(), 6: set(), 7: set(), 8: {14}, 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: {26}, 20: {27}, 21: {28}, 22: {29}})
EXACT 0 getelementptr getelementptr
NO MATCH 1
NO MATCH 2
MORE 3 POT: 2
EXACT 4 load load
NO MATCH 5
NO MATCH 6
NO MATCH 7
EXACT 8 add add
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
EXACT 19 tail tail
EXACT 20 br br
EXACT 21 phi phi
EXACT 22 ret ret
FP: 63 3.0 False
TO REMOVE: dict_keys([])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %var_2_55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %var_2_106 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
Keep: %var_2_107 = load i64, i64* %var_2_3, align 8
Keep: %var_2_108 = add i64 %var_2_107, ptrtoint (%G_0x4b40__rip__type* @G_0x4b40__rip_ to i64)
Keep: %var_2_109 = add i64 %var_2_107, 8
Keep: store i64 %var_2_109, i64* %var_2_3, align 8
Keep: %var_2_110 = inttoptr i64 %var_2_108 to i64*
Keep: %var_2_111 = load i64, i64* %var_2_110, align 8
Keep: %var_2_112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_111, i64* %var_2_112, align 1
Keep: %EAX.i = bitcast %union.anon* %var_2_55 to i32*
Keep: %var_2_116 = load i32, i32* %EAX.i, align 4
Keep: %var_2_117 = sitofp i32 %var_2_116 to double
Keep: %var_2_119 = add i64 %var_2_107, 16
Keep: %var_2_120 = bitcast i64 %var_2_111 to double
Keep: %var_2_121 = fcmp uno double %var_2_120, %var_2_117
Keep: br i1 %var_2_121, label %var_2_122, label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: var_2_122:                                        ; preds = %entry
Keep: %var_2_123 = fadd double %var_2_120, %var_2_117
Keep: %var_2_124 = bitcast double %var_2_123 to i64
Keep: %var_2_125 = and i64 %var_2_124, 9221120237041090560
Keep: %var_2_126 = icmp eq i64 %var_2_125, 9218868437227405312
Keep: %var_2_127 = and i64 %var_2_124, 2251799813685247
Keep: %var_2_128 = icmp ne i64 %var_2_127, 0
Keep: %var_2_129 = and i1 %var_2_126, %var_2_128
Keep: br i1 %var_2_129, label %var_2_130, label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: var_2_130:                                        ; preds = %var_2_122
Keep: %var_2_131 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_119, %struct.Memory* %var_2_106)
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: routine_ucomisd__xmm1___xmm0.exit:                ; preds = %entry, %var_2_122, %var_2_130
Keep: %var_2_144 = phi %struct.Memory* [ %var_2_131, %var_2_130 ], [ %var_2_106, %var_2_122 ], [ %var_2_106, %entry ]
Keep: ret %struct.Memory* %var_2_144
Missed: dict_keys([])
TO REMOVE: dict_keys([])
Keep: block_413ee0:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %var_2_4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %EAX = bitcast %union.anon* %var_2_4 to i32*
Keep: %var_2_106 = tail call fastcc %struct.Memory* @ext_674150_abs(%struct.State* nonnull %0, %struct.Memory* %2)
Keep: %var_2_107 = load i64, i64* %PC, align 8
Keep: %var_2_1082 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 56) to double*), align 8
Keep: %var_2_112 = load i32, i32* %EAX, align 4
Keep: %var_2_113 = sitofp i32 %var_2_112 to double
Keep: %var_2_115 = add i64 %var_2_107, 16
Keep: %var_2_117 = fcmp uno double %var_2_1082, %var_2_113
Keep: br i1 %var_2_117, label %var_2_118, label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: var_2_118:                                        ; preds = %block_413ee0
Keep: %var_2_119 = fadd double %var_2_1082, %var_2_113
Keep: %var_2_120 = bitcast double %var_2_119 to i64
Keep: %var_2_121 = and i64 %var_2_120, 9221120237041090560
Keep: %var_2_122 = icmp eq i64 %var_2_121, 9218868437227405312
Keep: %var_2_123 = and i64 %var_2_120, 2251799813685247
Keep: %var_2_124 = icmp ne i64 %var_2_123, 0
Keep: %var_2_125 = and i1 %var_2_122, %var_2_124
Keep: br i1 %var_2_125, label %var_2_126, label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: var_2_126:                                        ; preds = %var_2_118
Keep: %var_2_127 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_115, %struct.Memory* %var_2_106) #13
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: _ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %block_413ee0, %var_2_118, %var_2_126
Keep: %var_2_140 = phi %struct.Memory* [ %var_2_127, %var_2_126 ], [ %var_2_106, %var_2_118 ], [ %var_2_106, %block_413ee0 ]
Keep: ret %struct.Memory* %var_2_140
Missed: dict_keys([])
[x] Exhausted iterations without definitive match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_constant_folding/_Z15tolerance_equalItEbRT_S1_/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_constant_folding/binary/test.mcsema.calls_renamed.ll _Z15tolerance_equalItEbRT_S1_
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_constant_folding/_Z15tolerance_equalItEbRT_S1_/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_constant_folding/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
