Writing '/tmp/tmpxrnrm4s5.dot'...
Writing '/tmp/tmpxrnrm4s5.dot':Done

Reading LLVM: /tmp/tmp2_qs1zco-query.ll
Extracting function [_Z15tolerance_equalIsEbRT_S1_] from /tmp/tmp2_qs1zco-query.ll
Dot file generated!
Writing '/tmp/tmpinht9z4_.dot'...
Writing '/tmp/tmpinht9z4_.dot':Done

Reading LLVM: /tmp/tmpdlisz8b7-target.ll
Extracting function [_Z15tolerance_equalIsEbRT_S1_] from /tmp/tmpdlisz8b7-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 48 %39 = add i64 %7, -16
- 49 %40 = load i64, i64* %RDI.i41, align 8
- 50 %41 = add i64 %10, 11
- 51 store i64 %41, i64* %3, align 8
- 52 %42 = inttoptr i64 %39 to i64*
- 53 store i64 %40, i64* %42, align 8
- 54 %RSI.i38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 55 %43 = load i64, i64* %RBP.i, align 8
- 56 %44 = add i64 %43, -16
- 57 %45 = load i64, i64* %RSI.i38, align 8
- 58 %46 = load i64, i64* %3, align 8
- 59 %47 = add i64 %46, 4
- 60 store i64 %47, i64* %3, align 8
- 61 %48 = inttoptr i64 %44 to i64*
- 62 store i64 %45, i64* %48, align 8
- 63 %49 = load i64, i64* %RBP.i, align 8
- 64 %50 = add i64 %49, -8
- 65 %51 = load i64, i64* %3, align 8
- 66 %52 = add i64 %51, 4
- 67 store i64 %52, i64* %3, align 8
- 68 %53 = inttoptr i64 %50 to i64*
- 69 %54 = load i64, i64* %53, align 8
- 70 store i64 %54, i64* %RSI.i38, align 8
- 71 %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 72 %RAX.i32 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0
- 73 %56 = add i64 %51, 7
- 74 store i64 %56, i64* %3, align 8
- 75 %57 = inttoptr i64 %54 to i16*
- 76 %58 = load i16, i16* %57, align 2
- 77 %59 = sext i16 %58 to i64
- 78 %60 = and i64 %59, 4294967295
- 79 store i64 %60, i64* %RAX.i32, align 8
- 80 %61 = add i64 %49, -16
- 81 %62 = add i64 %51, 11
- 82 store i64 %62, i64* %3, align 8
- 83 %63 = inttoptr i64 %61 to i64*
- 84 %64 = load i64, i64* %63, align 8
- 85 store i64 %64, i64* %RSI.i38, align 8
- 86 %RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 87 %65 = add i64 %51, 14
- 88 store i64 %65, i64* %3, align 8
- 89 %66 = inttoptr i64 %64 to i16*
- 90 %67 = load i16, i16* %66, align 2
- 91 %68 = sext i16 %67 to i64
- 92 %69 = and i64 %68, 4294967295
- 93 store i64 %69, i64* %RCX.i, align 8
- 94 %70 = sext i16 %67 to i32
- 95 %71 = zext i32 %70 to i64
- 96 %72 = sext i16 %58 to i32
- 97 %73 = sub nsw i32 %72, %70
- 98 %74 = zext i32 %73 to i64
- 99 store i64 %74, i64* %RAX.i32, align 8
- 100 %75 = icmp ult i16 %58, %67
- 101 %76 = zext i1 %75 to i8
- 102 store i8 %76, i8* %14, align 1
- 103 %77 = and i32 %73, 255
- 104 %78 = tail call i32 @llvm.ctpop.i32(i32 %77)
- 105 %79 = trunc i32 %78 to i8
- 106 %80 = and i8 %79, 1
- 107 %81 = xor i8 %80, 1
- 108 store i8 %81, i8* %21, align 1
- 109 %82 = xor i64 %71, %59
- 110 %83 = trunc i64 %82 to i32
- 111 %84 = xor i32 %83, %73
- 112 %85 = lshr i32 %84, 4
- 113 %86 = trunc i32 %85 to i8
- 114 %87 = and i8 %86, 1
- 115 store i8 %87, i8* %26, align 1
- 116 %88 = icmp eq i32 %73, 0
- 117 %89 = zext i1 %88 to i8
- 118 store i8 %89, i8* %29, align 1
- 119 %90 = lshr i32 %73, 31
- 120 %91 = trunc i32 %90 to i8
- 121 store i8 %91, i8* %32, align 1
- 122 %92 = lshr i32 %72, 31
- 123 %93 = lshr i32 %70, 31
- 124 %94 = xor i32 %93, %92
- 125 %95 = xor i32 %90, %92
- 126 %96 = add nuw nsw i32 %95, %94
- 127 %97 = icmp eq i32 %96, 2
- 128 %98 = zext i1 %97 to i8
- 129 store i8 %98, i8* %38, align 1
- 130 %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
- 131 %DX.i24 = bitcast %union.anon* %99 to i16*
- 132 %100 = trunc i32 %73 to i16
- 133 store i16 %100, i16* %DX.i24, align 2
- 134 %101 = add i64 %49, -18
- 135 %102 = add i64 %51, 23
- 136 store i64 %102, i64* %3, align 8
- 137 %103 = inttoptr i64 %101 to i16*
- 138 store i16 %100, i16* %103, align 2
- 139 %104 = load i64, i64* %RBP.i, align 8
- 140 %105 = add i64 %104, -18
- 141 %106 = load i64, i64* %3, align 8
- 142 %107 = add i64 %106, 4
- 143 store i64 %107, i64* %3, align 8
- 144 %108 = inttoptr i64 %105 to i16*
- 145 %109 = load i16, i16* %108, align 2
- 146 %110 = sext i16 %109 to i64
- 147 %111 = and i64 %110, 4294967295
- 148 store i64 %111, i64* %RDI.i41, align 8
- 149 %112 = add i64 %106, -84839
- 150 %113 = add i64 %106, 9
- 151 %114 = load i64, i64* %6, align 8
- 152 %115 = add i64 %114, -8
- 153 %116 = inttoptr i64 %115 to i64*
- 154 store i64 %113, i64* %116, align 8
- 155 store i64 %115, i64* %6, align 8
- 156 store i64 %112, i64* %3, align 8
- 157 %117 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
- 158 %118 = load i64, i64* %3, align 8
- 159 %119 = add i64 %118, ptrtoint (%G_0x3860__rip__type* @G_0x3860__rip_ to i64)
- 160 %120 = add i64 %118, 8
- 161 store i64 %120, i64* %3, align 8
- 162 %121 = inttoptr i64 %119 to i64*
- 163 %122 = load i64, i64* %121, align 8
- 164 %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 165 store i64 %122, i64* %123, align 1
- 166 %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 167 %125 = bitcast i64* %124 to double*
- 168 store double 0.000000e+00, double* %125, align 1
- 169 %EAX.i = bitcast %union.anon* %55 to i32*
- 170 %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 171 %127 = load i32, i32* %EAX.i, align 4
- 172 %128 = sitofp i32 %127 to double
- 173 %129 = bitcast %union.VectorReg* %126 to double*
- 174 store double %128, double* %129, align 1
- 175 %130 = add i64 %118, 16
- 176 store i64 %130, i64* %3, align 8
- 177 %131 = bitcast i64 %122 to double
- 178 %132 = fcmp uno double %131, %128
- 179 \<badref\> = br i1 %132, label %133, label %143
- 180 %134 = fadd double %128, %131
- 181 %135 = bitcast double %134 to i64
- 182 %136 = and i64 %135, 9221120237041090560
- 183 %137 = icmp eq i64 %136, 9218868437227405312
- 184 %138 = and i64 %135, 2251799813685247
- 185 %139 = icmp ne i64 %138, 0
- 186 %140 = and i1 %137, %139
- 187 \<badref\> = br i1 %140, label %141, label %149
- 188 %142 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %130, %struct.Memory* %117)
- 189 %.pre = load i64, i64* %3, align 8
- 190 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 191 %144 = fcmp ogt double %131, %128
- 192 \<badref\> = br i1 %144, label %149, label %145
- 193 %146 = fcmp olt double %131, %128
- 194 \<badref\> = br i1 %146, label %149, label %147
- 195 %148 = fcmp oeq double %131, %128
- 196 \<badref\> = br i1 %148, label %149, label %153
- 197 %150 = phi i8 [ 0, %143 ], [ 0, %145 ], [ 1, %147 ], [ 1, %133 ]
- 198 %151 = phi i8 [ 0, %143 ], [ 0, %145 ], [ 0, %147 ], [ 1, %133 ]
- 199 %152 = phi i8 [ 0, %143 ], [ 1, %145 ], [ 0, %147 ], [ 1, %133 ]
- 200 store i8 %150, i8* %29, align 1
- 201 store i8 %151, i8* %21, align 1
- 202 store i8 %152, i8* %14, align 1
- 203 \<badref\> = br label %153
- 204 store i8 0, i8* %38, align 1
- 205 store i8 0, i8* %32, align 1
- 206 store i8 0, i8* %26, align 1
- 207 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 208 %154 = phi i64 [ %.pre, %141 ], [ %130, %153 ]
- 209 %155 = phi %struct.Memory* [ %142, %141 ], [ %117, %153 ]
- 210 %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
- 211 %R8B.i9 = bitcast %union.anon* %156 to i8*
- 212 %157 = load i8, i8* %14, align 1
- 213 %158 = load i8, i8* %29, align 1
- 214 %159 = or i8 %158, %157
- 215 %160 = icmp eq i8 %159, 0
- 216 %161 = zext i1 %160 to i8
- 217 store i8 %161, i8* %R8B.i9, align 1
- 218 %162 = zext i1 %160 to i64
- 219 store i64 %162, i64* %RAX.i32, align 8
- 220 %163 = load i64, i64* %6, align 8
- 221 %164 = add i64 %163, 32
- 222 store i64 %164, i64* %6, align 8
- 223 %165 = icmp ugt i64 %163, -33
- 224 %166 = zext i1 %165 to i8
- 225 store i8 %166, i8* %14, align 1
- 226 %167 = trunc i64 %164 to i32
- 227 %168 = and i32 %167, 255
- 228 %169 = tail call i32 @llvm.ctpop.i32(i32 %168)
- 229 %170 = trunc i32 %169 to i8
- 230 %171 = and i8 %170, 1
- 231 %172 = xor i8 %171, 1
- 232 store i8 %172, i8* %21, align 1
- 233 %173 = xor i64 %164, %163
- 234 %174 = lshr i64 %173, 4
- 235 %175 = trunc i64 %174 to i8
- 236 %176 = and i8 %175, 1
- 237 store i8 %176, i8* %26, align 1
- 238 %177 = icmp eq i64 %164, 0
- 239 %178 = zext i1 %177 to i8
- 240 store i8 %178, i8* %29, align 1
- 241 %179 = lshr i64 %164, 63
- 242 %180 = trunc i64 %179 to i8
- 243 store i8 %180, i8* %32, align 1
- 244 %181 = lshr i64 %163, 63
- 245 %182 = xor i64 %179, %181
- 246 %183 = add nuw nsw i64 %182, %179
- 247 %184 = icmp eq i64 %183, 2
- 248 %185 = zext i1 %184 to i8
- 249 store i8 %185, i8* %38, align 1
- 250 %186 = add i64 %154, 17
- 251 store i64 %186, i64* %3, align 8
- 252 %187 = add i64 %163, 40
- 253 %188 = inttoptr i64 %164 to i64*
- 254 %189 = load i64, i64* %188, align 8
- 255 store i64 %189, i64* %RBP.i, align 8
- 256 store i64 %187, i64* %6, align 8
- 257 %190 = add i64 %154, 18
- 258 store i64 %190, i64* %3, align 8
- 259 %191 = inttoptr i64 %187 to i64*
- 260 %192 = load i64, i64* %191, align 8
- 261 store i64 %192, i64* %3, align 8
- 262 %193 = add i64 %163, 48
- 263 store i64 %193, i64* %6, align 8
- 264 \<badref\> = ret %struct.Memory* %155
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd98e074488>, {0: {0}, 1: {12}, 2: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 3: {15}, 4: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 5: {11}, 6: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 7: {73, 18, 156}, 8: {255, 70, 77, 141, 82, 19, 148, 249, 90, 157, 62, 95}, 9: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 10: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 11: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 12: {23}, 13: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 14: {25}, 15: {101, 134, 104, 107, 44, 235, 212, 244, 214, 55, 26, 123, 220}, 16: {27}, 17: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 18: {32, 225, 39, 136, 231, 238, 111, 48, 222, 116, 119, 29, 126}, 19: {109, 30, 223}, 20: {224, 161, 110, 186, 31}, 21: {32, 225, 39, 136, 231, 238, 111, 48, 222, 116, 119, 29, 126}, 22: {33, 226, 40, 232, 112, 120}, 23: {113, 34, 227}, 24: {35}, 25: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 26: {130, 131, 37, 229, 241, 115, 52, 117}, 27: {118, 38, 230}, 28: {32, 225, 39, 136, 231, 238, 111, 48, 222, 116, 119, 29, 126}, 29: {33, 226, 40, 232, 112, 120}, 30: {41}, 31: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 32: {106, 43, 234, 211, 183, 122}, 33: {101, 134, 104, 107, 44, 235, 212, 244, 214, 55, 26, 123, 220}, 34: {45}, 35: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 36: {240, 51, 237, 47}, 37: {32, 225, 39, 136, 231, 238, 111, 48, 222, 116, 119, 29, 126}, 38: {49}, 39: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 40: {240, 51, 237, 47}, 41: {130, 131, 37, 229, 241, 115, 52, 117}, 42: {242, 132, 53}, 43: {243, 133, 54}, 44: {101, 134, 104, 107, 44, 235, 212, 244, 214, 55, 26, 123, 220}, 45: {56}, 46: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 47: {10}, 48: {65, 58, 87}, 49: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 50: {88, 60}, 51: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 52: {255, 70, 77, 141, 82, 19, 148, 249, 90, 157, 62, 95}, 53: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 54: {9}, 55: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 56: {65, 58, 87}, 57: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 58: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 59: {146, 75, 68}, 60: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 61: {255, 70, 77, 141, 82, 19, 148, 249, 90, 157, 62, 95}, 62: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 63: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 64: {73, 18, 156}, 65: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 66: {146, 75, 68}, 67: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 68: {255, 70, 77, 141, 82, 19, 148, 249, 90, 157, 62, 95}, 69: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 70: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 71: {3}, 72: {7}, 73: {80}, 74: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 75: {255, 70, 77, 141, 82, 19, 148, 249, 90, 157, 62, 95}, 76: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 77: {97, 100, 102, 84, 150}, 78: {98, 85, 151}, 79: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 80: {65, 58, 87}, 81: {88, 60}, 82: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 83: {255, 70, 77, 141, 82, 19, 148, 249, 90, 157, 62, 95}, 84: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 85: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 86: {8}, 87: {93}, 88: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 89: {255, 70, 77, 141, 82, 19, 148, 249, 90, 157, 62, 95}, 90: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 91: {97, 100, 102, 84, 150}, 92: {98, 85, 151}, 93: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 94: {97, 100, 102, 84, 150}, 95: {101, 134, 104, 107, 44, 235, 212, 244, 214, 55, 26, 123, 220}, 96: {97, 100, 102, 84, 150}, 97: {103}, 98: {101, 134, 104, 107, 44, 235, 212, 244, 214, 55, 26, 123, 220}, 99: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 100: {106, 43, 234, 211, 183, 122}, 101: {101, 134, 104, 107, 44, 235, 212, 244, 214, 55, 26, 123, 220}, 102: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 103: {109, 30, 223}, 104: {224, 161, 110, 186, 31}, 105: {32, 225, 39, 136, 231, 238, 111, 48, 222, 116, 119, 29, 126}, 106: {33, 226, 40, 232, 112, 120}, 107: {113, 34, 227}, 108: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 109: {130, 131, 37, 229, 241, 115, 52, 117}, 110: {32, 225, 39, 136, 231, 238, 111, 48, 222, 116, 119, 29, 126}, 111: {130, 131, 37, 229, 241, 115, 52, 117}, 112: {118, 38, 230}, 113: {32, 225, 39, 136, 231, 238, 111, 48, 222, 116, 119, 29, 126}, 114: {33, 226, 40, 232, 112, 120}, 115: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 116: {106, 43, 234, 211, 183, 122}, 117: {101, 134, 104, 107, 44, 235, 212, 244, 214, 55, 26, 123, 220}, 118: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 119: {128, 129, 125}, 120: {32, 225, 39, 136, 231, 238, 111, 48, 222, 116, 119, 29, 126}, 121: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 122: {128, 129, 125}, 123: {128, 129, 125}, 124: {130, 131, 37, 229, 241, 115, 52, 117}, 125: {130, 131, 37, 229, 241, 115, 52, 117}, 126: {242, 132, 53}, 127: {243, 133, 54}, 128: {101, 134, 104, 107, 44, 235, 212, 244, 214, 55, 26, 123, 220}, 129: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 130: {4}, 131: {2, 5, 6, 167, 171, 175, 179}, 132: {32, 225, 39, 136, 231, 238, 111, 48, 222, 116, 119, 29, 126}, 133: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 134: {144, 138}, 135: {139}, 136: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 137: {255, 70, 77, 141, 82, 19, 148, 249, 90, 157, 62, 95}, 138: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 139: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 140: {144, 138}, 141: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 142: {146, 75, 68}, 143: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 144: {255, 70, 77, 141, 82, 19, 148, 249, 90, 157, 62, 95}, 145: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 146: {97, 100, 102, 84, 150}, 147: {98, 85, 151}, 148: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 149: {153}, 150: {154}, 151: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 152: {73, 18, 156}, 153: {255, 70, 77, 141, 82, 19, 148, 249, 90, 157, 62, 95}, 154: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 155: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 156: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 157: {224, 161, 110, 186, 31}, 158: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 159: {242, 132, 53}, 160: set(), 161: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 162: {255, 70, 77, 141, 82, 19, 148, 249, 90, 157, 62, 95}, 163: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 164: {164}, 165: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 166: {166}, 167: {2, 5, 6, 167, 171, 175, 179}, 168: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 169: {2, 5, 6, 167, 171, 175, 179}, 170: {13}, 171: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 172: {170}, 173: {2, 5, 6, 167, 171, 175, 179}, 174: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 175: {173}, 176: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 177: {2, 5, 6, 167, 171, 175, 179}, 178: {176, 193, 189, 191}, 179: {192, 194, 177, 185, 190}, 180: {178}, 181: {2, 5, 6, 167, 171, 175, 179}, 182: {180}, 183: {181}, 184: {182}, 185: {106, 43, 234, 211, 183, 122}, 186: {184}, 187: {192, 194, 177, 185, 190}, 188: {224, 161, 110, 186, 31}, 189: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 190: {201, 188, 205}, 191: {176, 193, 189, 191}, 192: {192, 194, 177, 185, 190}, 193: {176, 193, 189, 191}, 194: {192, 194, 177, 185, 190}, 195: {176, 193, 189, 191}, 196: {192, 194, 177, 185, 190}, 197: {195}, 198: {196}, 199: {197}, 200: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 201: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 202: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 203: {201, 188, 205}, 204: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 205: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 206: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 207: {201, 188, 205}, 208: {206, 207}, 209: {206, 207}, 210: {1}, 211: {2, 5, 6, 167, 171, 175, 179}, 212: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 213: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 214: {210}, 215: {106, 43, 234, 211, 183, 122}, 216: {101, 134, 104, 107, 44, 235, 212, 244, 214, 55, 26, 123, 220}, 217: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 218: {101, 134, 104, 107, 44, 235, 212, 244, 214, 55, 26, 123, 220}, 219: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 220: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 221: {217}, 222: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 223: {219}, 224: {101, 134, 104, 107, 44, 235, 212, 244, 214, 55, 26, 123, 220}, 225: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 226: {32, 225, 39, 136, 231, 238, 111, 48, 222, 116, 119, 29, 126}, 227: {109, 30, 223}, 228: {224, 161, 110, 186, 31}, 229: {32, 225, 39, 136, 231, 238, 111, 48, 222, 116, 119, 29, 126}, 230: {33, 226, 40, 232, 112, 120}, 231: {113, 34, 227}, 232: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 233: {130, 131, 37, 229, 241, 115, 52, 117}, 234: {118, 38, 230}, 235: {32, 225, 39, 136, 231, 238, 111, 48, 222, 116, 119, 29, 126}, 236: {33, 226, 40, 232, 112, 120}, 237: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 238: {106, 43, 234, 211, 183, 122}, 239: {101, 134, 104, 107, 44, 235, 212, 244, 214, 55, 26, 123, 220}, 240: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 241: {240, 51, 237, 47}, 242: {32, 225, 39, 136, 231, 238, 111, 48, 222, 116, 119, 29, 126}, 243: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 244: {240, 51, 237, 47}, 245: {130, 131, 37, 229, 241, 115, 52, 117}, 246: {242, 132, 53}, 247: {243, 133, 54}, 248: {101, 134, 104, 107, 44, 235, 212, 244, 214, 55, 26, 123, 220}, 249: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 250: {246}, 251: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 252: {248}, 253: {255, 70, 77, 141, 82, 19, 148, 249, 90, 157, 62, 95}, 254: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 255: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 256: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 257: {253}, 258: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 259: {255, 70, 77, 141, 82, 19, 148, 249, 90, 157, 62, 95}, 260: {256, 14, 143, 17, 145, 21, 149, 155, 162, 163, 169, 187, 59, 64, 66, 67, 72, 74, 78, 208, 209, 83, 216, 91, 96, 250}, 261: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 262: {258}, 263: {257, 259, 135, 137, 140, 142, 16, 147, 20, 22, 24, 152, 28, 158, 159, 160, 36, 165, 168, 42, 172, 46, 174, 50, 57, 61, 63, 69, 198, 71, 199, 200, 202, 203, 76, 204, 79, 81, 213, 86, 215, 89, 218, 92, 221, 94, 99, 228, 105, 233, 108, 236, 239, 114, 252, 245, 247, 121, 251, 124, 254, 127}, 264: {260}})
Equivalent! frozenset({88, 60}) {81, 50}
Equivalent! frozenset({89, 61}) {82, 51}
Equivalent! frozenset({146, 75, 68}) {66, 59, 142}
Equivalent! frozenset({147, 76, 69}) {67, 60, 143}
Equivalent! frozenset({201, 188, 205}) {203, 190, 207}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd98e074488>, {0: {0}, 1: {12}, 2: {14}, 3: {15}, 4: {16}, 5: {11}, 6: {17}, 7: {18}, 8: {19}, 9: {20}, 10: {74, 21}, 11: {22}, 12: {23}, 13: {24}, 14: {25}, 15: {26}, 16: {27}, 17: {28}, 18: {29}, 19: {30}, 20: {31}, 21: {32}, 22: {33}, 23: {34}, 24: {35}, 25: {36}, 26: {37}, 27: {38}, 28: {39}, 29: {40}, 30: {41}, 31: {42}, 32: {43}, 33: {44}, 34: {45}, 35: {46}, 36: {47}, 37: {48}, 38: {49}, 39: {50}, 40: {51}, 41: {52}, 42: {53}, 43: {54}, 44: {55}, 45: {56}, 46: {57}, 47: {10}, 48: {58}, 49: {59}, 50: {60}, 51: {61}, 52: {62}, 53: {63}, 54: {9}, 55: {64}, 56: {65}, 57: {66}, 58: {145, 74, 67}, 59: {75}, 60: {76}, 61: {70}, 62: {71}, 63: {72}, 64: {73}, 65: {145, 74, 67, 21}, 66: {146}, 67: {147}, 68: {77}, 69: {78}, 70: {79}, 71: {3}, 72: {7}, 73: {80}, 74: {81}, 75: {82}, 76: {83}, 77: {84}, 78: {85}, 79: {86}, 80: {87}, 81: {88}, 82: {89}, 83: {90}, 84: {91}, 85: {92}, 86: {8}, 87: {93}, 88: {94}, 89: {95}, 90: {96}, 91: {97}, 92: {98}, 93: {99}, 94: {100}, 95: {101}, 96: {102}, 97: {103}, 98: {104}, 99: {105}, 100: {106}, 101: {107}, 102: {108}, 103: {109}, 104: {110}, 105: {111}, 106: {112}, 107: {113}, 108: {114}, 109: {115}, 110: {116}, 111: {117}, 112: {118}, 113: {119}, 114: {120}, 115: {121}, 116: {122}, 117: {123}, 118: {124}, 119: {125}, 120: {126}, 121: {127}, 122: {128}, 123: {129}, 124: {130}, 125: {131}, 126: {132}, 127: {133}, 128: {134}, 129: {135}, 130: {4}, 131: {5}, 132: {136}, 133: {137}, 134: {138}, 135: {139}, 136: {140}, 137: {141}, 138: {142}, 139: {143}, 140: {144}, 141: {145, 74, 67}, 142: {68}, 143: {69}, 144: {148}, 145: {149}, 146: {150}, 147: {151}, 148: {152}, 149: {153}, 150: {154}, 151: {155}, 152: {156}, 153: {157}, 154: {158}, 155: {159}, 156: {160}, 157: {161, 186}, 158: {162}, 159: set(), 160: set(), 161: set(), 162: set(), 163: set(), 164: set(), 165: set(), 166: {166}, 167: {167}, 168: {168}, 169: {6}, 170: {13}, 171: {169}, 172: {170}, 173: {171}, 174: {172}, 175: {173}, 176: {174}, 177: set(), 178: set(), 179: set(), 180: set(), 181: set(), 182: set(), 183: set(), 184: set(), 185: set(), 186: set(), 187: set(), 188: {186}, 189: {187}, 190: {188}, 191: set(), 192: set(), 193: set(), 194: set(), 195: set(), 196: set(), 197: {195}, 198: {196}, 199: {197}, 200: {198}, 201: {199}, 202: {200}, 203: {201}, 204: {57, 202, 245, 135}, 205: {50, 203, 127, 239}, 206: {233, 42, 204, 121}, 207: {205}, 208: {206}, 209: {207}, 210: {1}, 211: {2}, 212: {208}, 213: {209}, 214: {210}, 215: {211}, 216: {212}, 217: {213}, 218: {214}, 219: {215}, 220: {216}, 221: {217}, 222: {218}, 223: {219}, 224: {220}, 225: {221}, 226: {222}, 227: {223}, 228: {224}, 229: {225}, 230: {226}, 231: {227}, 232: {228}, 233: {229}, 234: {230}, 235: {231}, 236: {232}, 237: {233}, 238: {234}, 239: {235}, 240: {236}, 241: {237}, 242: {238}, 243: {239}, 244: {240}, 245: {241}, 246: {242}, 247: {243}, 248: {244}, 249: {245}, 250: {246}, 251: {247}, 252: {248}, 253: {249}, 254: {250}, 255: {251}, 256: {252}, 257: {253}, 258: {254}, 259: {255}, 260: {256}, 261: {257}, 262: {258}, 263: {259}, 264: {260}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
MORE 10 POT: 2
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 getelementptr getelementptr
EXACT 48 add add
EXACT 49 load load
EXACT 50 add add
EXACT 51 store store
EXACT 52 inttoptr inttoptr
EXACT 53 store store
EXACT 54 getelementptr getelementptr
EXACT 55 load load
EXACT 56 add add
EXACT 57 load load
MORE 58 POT: 3
EXACT 59 add add
EXACT 60 store store
EXACT 61 inttoptr inttoptr
EXACT 62 store store
EXACT 63 load load
EXACT 64 add add
MORE 65 POT: 4
EXACT 66 add add
EXACT 67 store store
EXACT 68 inttoptr inttoptr
EXACT 69 load load
EXACT 70 store store
EXACT 71 getelementptr getelementptr
EXACT 72 getelementptr getelementptr
EXACT 73 add add
EXACT 74 store store
EXACT 75 inttoptr inttoptr
EXACT 76 load load
EXACT 77 sext sext
EXACT 78 and and
EXACT 79 store store
EXACT 80 add add
EXACT 81 add add
EXACT 82 store store
EXACT 83 inttoptr inttoptr
EXACT 84 load load
EXACT 85 store store
EXACT 86 getelementptr getelementptr
EXACT 87 add add
EXACT 88 store store
EXACT 89 inttoptr inttoptr
EXACT 90 load load
EXACT 91 sext sext
EXACT 92 and and
EXACT 93 store store
EXACT 94 sext sext
EXACT 95 zext zext
EXACT 96 sext sext
EXACT 97 sub sub
EXACT 98 zext zext
EXACT 99 store store
EXACT 100 icmp icmp
EXACT 101 zext zext
EXACT 102 store store
EXACT 103 and and
EXACT 104 tail tail
EXACT 105 trunc trunc
EXACT 106 and and
EXACT 107 xor xor
EXACT 108 store store
EXACT 109 xor xor
EXACT 110 trunc trunc
EXACT 111 xor xor
EXACT 112 lshr lshr
EXACT 113 trunc trunc
EXACT 114 and and
EXACT 115 store store
EXACT 116 icmp icmp
EXACT 117 zext zext
EXACT 118 store store
EXACT 119 lshr lshr
EXACT 120 trunc trunc
EXACT 121 store store
EXACT 122 lshr lshr
EXACT 123 lshr lshr
EXACT 124 xor xor
EXACT 125 xor xor
EXACT 126 add add
EXACT 127 icmp icmp
EXACT 128 zext zext
EXACT 129 store store
EXACT 130 getelementptr getelementptr
EXACT 131 bitcast bitcast
EXACT 132 trunc trunc
EXACT 133 store store
EXACT 134 add add
EXACT 135 add add
EXACT 136 store store
EXACT 137 inttoptr inttoptr
EXACT 138 store store
EXACT 139 load load
EXACT 140 add add
MORE 141 POT: 3
EXACT 142 add add
EXACT 143 store store
EXACT 144 inttoptr inttoptr
EXACT 145 load load
EXACT 146 sext sext
EXACT 147 and and
EXACT 148 store store
EXACT 149 add add
EXACT 150 add add
EXACT 151 load load
EXACT 152 add add
EXACT 153 inttoptr inttoptr
EXACT 154 store store
EXACT 155 store store
EXACT 156 store store
MORE 157 POT: 2
EXACT 158 load load
NO MATCH 159
NO MATCH 160
NO MATCH 161
NO MATCH 162
NO MATCH 163
NO MATCH 164
NO MATCH 165
EXACT 166 getelementptr getelementptr
EXACT 167 bitcast bitcast
EXACT 168 store store
EXACT 169 bitcast bitcast
EXACT 170 getelementptr getelementptr
EXACT 171 load load
EXACT 172 sitofp sitofp
EXACT 173 bitcast bitcast
EXACT 174 store store
EXACT 175 add add
EXACT 176 store store
NO MATCH 177
NO MATCH 178
NO MATCH 179
NO MATCH 180
NO MATCH 181
NO MATCH 182
NO MATCH 183
NO MATCH 184
NO MATCH 185
NO MATCH 186
NO MATCH 187
EXACT 188 tail tail
EXACT 189 load load
EXACT 190 br br
NO MATCH 191
NO MATCH 192
NO MATCH 193
NO MATCH 194
NO MATCH 195
NO MATCH 196
EXACT 197 phi phi
EXACT 198 phi phi
EXACT 199 phi phi
EXACT 200 store store
EXACT 201 store store
EXACT 202 store store
EXACT 203 br br
MORE 204 POT: 4
MORE 205 POT: 4
MORE 206 POT: 4
EXACT 207 br br
EXACT 208 phi phi
EXACT 209 phi phi
EXACT 210 getelementptr getelementptr
EXACT 211 bitcast bitcast
EXACT 212 load load
EXACT 213 load load
EXACT 214 or or
EXACT 215 icmp icmp
EXACT 216 zext zext
EXACT 217 store store
EXACT 218 zext zext
EXACT 219 store store
EXACT 220 load load
EXACT 221 add add
EXACT 222 store store
EXACT 223 icmp icmp
EXACT 224 zext zext
EXACT 225 store store
EXACT 226 trunc trunc
EXACT 227 and and
EXACT 228 tail tail
EXACT 229 trunc trunc
EXACT 230 and and
EXACT 231 xor xor
EXACT 232 store store
EXACT 233 xor xor
EXACT 234 lshr lshr
EXACT 235 trunc trunc
EXACT 236 and and
EXACT 237 store store
EXACT 238 icmp icmp
EXACT 239 zext zext
EXACT 240 store store
EXACT 241 lshr lshr
EXACT 242 trunc trunc
EXACT 243 store store
EXACT 244 lshr lshr
EXACT 245 xor xor
EXACT 246 add add
EXACT 247 icmp icmp
EXACT 248 zext zext
EXACT 249 store store
EXACT 250 add add
EXACT 251 store store
EXACT 252 add add
EXACT 253 inttoptr inttoptr
EXACT 254 load load
EXACT 255 store store
EXACT 256 store store
EXACT 257 add add
EXACT 258 store store
EXACT 259 inttoptr inttoptr
EXACT 260 load load
EXACT 261 store store
EXACT 262 add add
EXACT 263 store store
EXACT 264 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
- 2 %R8B = bitcast %union.anon* %3 to i8*
- 3 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 4 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
- 5 %DX = bitcast %union.anon* %5 to i16*
- 6 %EAX = bitcast %union.anon* %4 to i32*
- 7 %RAX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 8 %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 9 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 10 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 11 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 12 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 13 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 14 %7 = load i64, i64* %RBP, align 8
- 15 %8 = add i64 %1, 1
- 16 store i64 %8, i64* %PC, align 8
- 17 %9 = load i64, i64* %RSP, align 8
- 18 %10 = add i64 %9, -8
- 19 %11 = inttoptr i64 %10 to i64*
- 20 store i64 %7, i64* %11, align 8
- 21 %12 = load i64, i64* %PC, align 8
- 22 store i64 %10, i64* %RBP, align 8
- 23 %13 = add i64 %9, -40
- 24 store i64 %13, i64* %RSP, align 8
- 25 %14 = icmp ult i64 %10, 32
- 26 %15 = zext i1 %14 to i8
- 27 %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 28 store i8 %15, i8* %16, align 1
- 29 %17 = trunc i64 %13 to i32
- 30 %18 = and i32 %17, 255
- 31 %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #12
- 32 %20 = trunc i32 %19 to i8
- 33 %21 = and i8 %20, 1
- 34 %22 = xor i8 %21, 1
- 35 %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 36 store i8 %22, i8* %23, align 1
- 37 %24 = xor i64 %10, %13
- 38 %25 = lshr i64 %24, 4
- 39 %26 = trunc i64 %25 to i8
- 40 %27 = and i8 %26, 1
- 41 %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 42 store i8 %27, i8* %28, align 1
- 43 %29 = icmp eq i64 %13, 0
- 44 %30 = zext i1 %29 to i8
- 45 %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 46 store i8 %30, i8* %31, align 1
- 47 %32 = lshr i64 %13, 63
- 48 %33 = trunc i64 %32 to i8
- 49 %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 50 store i8 %33, i8* %34, align 1
- 51 %35 = lshr i64 %10, 63
- 52 %36 = xor i64 %32, %35
- 53 %37 = add nuw nsw i64 %36, %35
- 54 %38 = icmp eq i64 %37, 2
- 55 %39 = zext i1 %38 to i8
- 56 %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 57 store i8 %39, i8* %40, align 1
- 58 %41 = add i64 %9, -16
- 59 %42 = load i64, i64* %RDI, align 8
- 60 %43 = add i64 %12, 11
- 61 store i64 %43, i64* %PC, align 8
- 62 %44 = inttoptr i64 %41 to i64*
- 63 store i64 %42, i64* %44, align 8
- 64 %45 = load i64, i64* %RBP, align 8
- 65 %46 = add i64 %45, -16
- 66 %47 = load i64, i64* %RSI, align 8
- 67 %48 = load i64, i64* %PC, align 8
- 68 %49 = add i64 %48, 4
- 69 store i64 %49, i64* %PC, align 8
- 70 %50 = inttoptr i64 %46 to i64*
- 71 store i64 %47, i64* %50, align 8
- 72 %51 = load i64, i64* %RBP, align 8
- 73 %52 = add i64 %51, -8
- 74 %53 = load i64, i64* %PC, align 8
- 75 %54 = add i64 %53, 4
- 76 store i64 %54, i64* %PC, align 8
- 77 %55 = inttoptr i64 %52 to i64*
- 78 %56 = load i64, i64* %55, align 8
- 79 store i64 %56, i64* %RSI, align 8
- 80 %57 = add i64 %53, 7
- 81 store i64 %57, i64* %PC, align 8
- 82 %58 = inttoptr i64 %56 to i16*
- 83 %59 = load i16, i16* %58, align 2
- 84 %60 = sext i16 %59 to i64
- 85 %61 = and i64 %60, 4294967295
- 86 store i64 %61, i64* %RAX, align 8
- 87 %62 = add i64 %51, -16
- 88 %63 = add i64 %53, 11
- 89 store i64 %63, i64* %PC, align 8
- 90 %64 = inttoptr i64 %62 to i64*
- 91 %65 = load i64, i64* %64, align 8
- 92 store i64 %65, i64* %RSI, align 8
- 93 %66 = add i64 %53, 14
- 94 store i64 %66, i64* %PC, align 8
- 95 %67 = inttoptr i64 %65 to i16*
- 96 %68 = load i16, i16* %67, align 2
- 97 %69 = sext i16 %68 to i64
- 98 %70 = and i64 %69, 4294967295
- 99 store i64 %70, i64* %RCX, align 8
- 100 %71 = sext i16 %68 to i32
- 101 %72 = zext i32 %71 to i64
- 102 %73 = sext i16 %59 to i32
- 103 %74 = sub nsw i32 %73, %71
- 104 %75 = zext i32 %74 to i64
- 105 store i64 %75, i64* %RAX, align 8
- 106 %76 = icmp ult i16 %59, %68
- 107 %77 = zext i1 %76 to i8
- 108 store i8 %77, i8* %16, align 1
- 109 %78 = and i32 %74, 255
- 110 %79 = tail call i32 @llvm.ctpop.i32(i32 %78) #12
- 111 %80 = trunc i32 %79 to i8
- 112 %81 = and i8 %80, 1
- 113 %82 = xor i8 %81, 1
- 114 store i8 %82, i8* %23, align 1
- 115 %83 = xor i64 %72, %60
- 116 %84 = trunc i64 %83 to i32
- 117 %85 = xor i32 %84, %74
- 118 %86 = lshr i32 %85, 4
- 119 %87 = trunc i32 %86 to i8
- 120 %88 = and i8 %87, 1
- 121 store i8 %88, i8* %28, align 1
- 122 %89 = icmp eq i32 %74, 0
- 123 %90 = zext i1 %89 to i8
- 124 store i8 %90, i8* %31, align 1
- 125 %91 = lshr i32 %74, 31
- 126 %92 = trunc i32 %91 to i8
- 127 store i8 %92, i8* %34, align 1
- 128 %93 = lshr i32 %73, 31
- 129 %94 = lshr i32 %71, 31
- 130 %95 = xor i32 %94, %93
- 131 %96 = xor i32 %91, %93
- 132 %97 = add nuw nsw i32 %96, %95
- 133 %98 = icmp eq i32 %97, 2
- 134 %99 = zext i1 %98 to i8
- 135 store i8 %99, i8* %40, align 1
- 136 %100 = trunc i32 %74 to i16
- 137 store i16 %100, i16* %DX, align 2
- 138 %101 = add i64 %51, -18
- 139 %102 = add i64 %53, 23
- 140 store i64 %102, i64* %PC, align 8
- 141 %103 = inttoptr i64 %101 to i16*
- 142 store i16 %100, i16* %103, align 2
- 143 %104 = load i64, i64* %RBP, align 8
- 144 %105 = add i64 %104, -18
- 145 %106 = load i64, i64* %PC, align 8
- 146 %107 = add i64 %106, 4
- 147 store i64 %107, i64* %PC, align 8
- 148 %108 = inttoptr i64 %105 to i16*
- 149 %109 = load i16, i16* %108, align 2
- 150 %110 = sext i16 %109 to i64
- 151 %111 = and i64 %110, 4294967295
- 152 store i64 %111, i64* %RDI, align 8
- 153 %112 = add i64 %106, -84839
- 154 %113 = add i64 %106, 9
- 155 %114 = load i64, i64* %RSP, align 8
- 156 %115 = add i64 %114, -8
- 157 %116 = inttoptr i64 %115 to i64*
- 158 store i64 %113, i64* %116, align 8
- 159 store i64 %115, i64* %RSP, align 8
- 160 store i64 %112, i64* %PC, align 8
- 161 %117 = tail call fastcc %struct.Memory* @ext_674150_abs(%struct.State* nonnull %0, %struct.Memory* %2)
- 162 %118 = load i64, i64* %PC, align 8
- 163 %119 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 56) to i64*), align 8
- 164 %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 165 store i64 %119, i64* %120, align 1
- 166 %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 167 %122 = bitcast i64* %121 to double*
- 168 store double 0.000000e+00, double* %122, align 1
- 169 %123 = load i32, i32* %EAX, align 4
- 170 %124 = sitofp i32 %123 to double
- 171 %125 = bitcast %union.VectorReg* %6 to double*
- 172 store double %124, double* %125, align 1
- 173 %126 = add i64 %118, 16
- 174 store i64 %126, i64* %PC, align 8
- 175 %127 = bitcast i64 %119 to double
- 176 %128 = fcmp uno double %127, %124
- 177 \<badref\> = br i1 %128, label %129, label %139
- 178 %130 = fadd double %124, %127
- 179 %131 = bitcast double %130 to i64
- 180 %132 = and i64 %131, 9221120237041090560
- 181 %133 = icmp eq i64 %132, 9218868437227405312
- 182 %134 = and i64 %131, 2251799813685247
- 183 %135 = icmp ne i64 %134, 0
- 184 %136 = and i1 %133, %135
- 185 \<badref\> = br i1 %136, label %137, label %145
- 186 %138 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %126, %struct.Memory* %117) #13
- 187 %.pre = load i64, i64* %PC, align 8
- 188 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 189 %140 = fcmp ogt double %127, %124
- 190 \<badref\> = br i1 %140, label %145, label %141
- 191 %142 = fcmp olt double %127, %124
- 192 \<badref\> = br i1 %142, label %145, label %143
- 193 %144 = fcmp oeq double %127, %124
- 194 \<badref\> = br i1 %144, label %145, label %149
- 195 %146 = phi i8 [ 0, %139 ], [ 0, %141 ], [ 1, %143 ], [ 1, %129 ]
- 196 %147 = phi i8 [ 0, %139 ], [ 0, %141 ], [ 0, %143 ], [ 1, %129 ]
- 197 %148 = phi i8 [ 0, %139 ], [ 1, %141 ], [ 0, %143 ], [ 1, %129 ]
- 198 store i8 %146, i8* %31, align 1
- 199 store i8 %147, i8* %23, align 1
- 200 store i8 %148, i8* %16, align 1
- 201 \<badref\> = br label %149
- 202 store i8 0, i8* %40, align 1
- 203 store i8 0, i8* %34, align 1
- 204 store i8 0, i8* %28, align 1
- 205 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 206 %150 = phi i64 [ %.pre, %137 ], [ %126, %149 ]
- 207 %151 = phi %struct.Memory* [ %138, %137 ], [ %117, %149 ]
- 208 %152 = load i8, i8* %16, align 1
- 209 %153 = load i8, i8* %31, align 1
- 210 %154 = or i8 %153, %152
- 211 %155 = icmp eq i8 %154, 0
- 212 %156 = zext i1 %155 to i8
- 213 store i8 %156, i8* %R8B, align 1
- 214 %157 = zext i1 %155 to i64
- 215 store i64 %157, i64* %RAX, align 8
- 216 %158 = load i64, i64* %RSP, align 8
- 217 %159 = add i64 %158, 32
- 218 store i64 %159, i64* %RSP, align 8
- 219 %160 = icmp ugt i64 %158, -33
- 220 %161 = zext i1 %160 to i8
- 221 store i8 %161, i8* %16, align 1
- 222 %162 = trunc i64 %159 to i32
- 223 %163 = and i32 %162, 255
- 224 %164 = tail call i32 @llvm.ctpop.i32(i32 %163) #12
- 225 %165 = trunc i32 %164 to i8
- 226 %166 = and i8 %165, 1
- 227 %167 = xor i8 %166, 1
- 228 store i8 %167, i8* %23, align 1
- 229 %168 = xor i64 %159, %158
- 230 %169 = lshr i64 %168, 4
- 231 %170 = trunc i64 %169 to i8
- 232 %171 = and i8 %170, 1
- 233 store i8 %171, i8* %28, align 1
- 234 %172 = icmp eq i64 %159, 0
- 235 %173 = zext i1 %172 to i8
- 236 store i8 %173, i8* %31, align 1
- 237 %174 = lshr i64 %159, 63
- 238 %175 = trunc i64 %174 to i8
- 239 store i8 %175, i8* %34, align 1
- 240 %176 = lshr i64 %158, 63
- 241 %177 = xor i64 %174, %176
- 242 %178 = add nuw nsw i64 %177, %174
- 243 %179 = icmp eq i64 %178, 2
- 244 %180 = zext i1 %179 to i8
- 245 store i8 %180, i8* %40, align 1
- 246 %181 = add i64 %150, 17
- 247 store i64 %181, i64* %PC, align 8
- 248 %182 = add i64 %158, 40
- 249 %183 = inttoptr i64 %159 to i64*
- 250 %184 = load i64, i64* %183, align 8
- 251 store i64 %184, i64* %RBP, align 8
- 252 store i64 %182, i64* %RSP, align 8
- 253 %185 = add i64 %150, 18
- 254 store i64 %185, i64* %PC, align 8
- 255 %186 = inttoptr i64 %182 to i64*
- 256 %187 = load i64, i64* %186, align 8
- 257 store i64 %187, i64* %PC, align 8
- 258 %188 = add i64 %158, 48
- 259 store i64 %188, i64* %RSP, align 8
- 260 \<badref\> = ret %struct.Memory* %151
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd98e074620>, {0: {0}, 1: {210}, 2: {131, 167, 169, 173, 177, 211, 181}, 3: {71}, 4: {130}, 5: {131, 167, 169, 173, 177, 211, 181}, 6: {131, 167, 169, 173, 177, 211, 181}, 7: {72}, 8: {86}, 9: {54}, 10: {47}, 11: {5}, 12: {1}, 13: {170}, 14: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 15: {3}, 16: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 17: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 18: {64, 152, 7}, 19: {153, 162, 68, 259, 8, 137, 75, 144, 83, 52, 89, 61, 253}, 20: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 21: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 22: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 23: {12}, 24: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 25: {14}, 26: {128, 33, 98, 224, 248, 101, 44, 15, 239, 117, 216, 218, 95}, 27: {16}, 28: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 29: {226, 132, 37, 229, 105, 235, 110, 113, 18, 242, 21, 120, 28}, 30: {19, 227, 103}, 31: {228, 104, 20, 188, 157}, 32: {226, 132, 37, 229, 105, 235, 110, 113, 18, 242, 21, 120, 28}, 33: {230, 106, 236, 114, 22, 29}, 34: {231, 107, 23}, 35: {24}, 36: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 37: {41, 233, 109, 111, 245, 26, 124, 125}, 38: {112, 234, 27}, 39: {226, 132, 37, 229, 105, 235, 110, 113, 18, 242, 21, 120, 28}, 40: {230, 106, 236, 114, 22, 29}, 41: {30}, 42: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 43: {32, 100, 238, 116, 215, 185}, 44: {128, 33, 98, 224, 248, 101, 44, 15, 239, 117, 216, 218, 95}, 45: {34}, 46: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 47: {40, 241, 36, 244}, 48: {226, 132, 37, 229, 105, 235, 110, 113, 18, 242, 21, 120, 28}, 49: {38}, 50: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 51: {40, 241, 36, 244}, 52: {41, 233, 109, 111, 245, 26, 124, 125}, 53: {42, 246, 126, 159}, 54: {247, 43, 127}, 55: {128, 33, 98, 224, 248, 101, 44, 15, 239, 117, 216, 218, 95}, 56: {45}, 57: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 58: {48, 56, 80}, 59: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 60: {81, 50}, 61: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 62: {153, 162, 68, 259, 8, 137, 75, 144, 83, 52, 89, 61, 253}, 63: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 64: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 65: {48, 56, 80}, 66: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 67: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 68: {66, 59, 142}, 69: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 70: {153, 162, 68, 259, 8, 137, 75, 144, 83, 52, 89, 61, 253}, 71: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 72: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 73: {64, 152, 7}, 74: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 75: {66, 59, 142}, 76: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 77: {153, 162, 68, 259, 8, 137, 75, 144, 83, 52, 89, 61, 253}, 78: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 79: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 80: {73}, 81: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 82: {153, 162, 68, 259, 8, 137, 75, 144, 83, 52, 89, 61, 253}, 83: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 84: {96, 77, 146, 91, 94}, 85: {147, 92, 78}, 86: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 87: {48, 56, 80}, 88: {81, 50}, 89: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 90: {153, 162, 68, 259, 8, 137, 75, 144, 83, 52, 89, 61, 253}, 91: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 92: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 93: {87}, 94: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 95: {153, 162, 68, 259, 8, 137, 75, 144, 83, 52, 89, 61, 253}, 96: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 97: {96, 77, 146, 91, 94}, 98: {147, 92, 78}, 99: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 100: {96, 77, 146, 91, 94}, 101: {128, 33, 98, 224, 248, 101, 44, 15, 239, 117, 216, 218, 95}, 102: {96, 77, 146, 91, 94}, 103: {97}, 104: {128, 33, 98, 224, 248, 101, 44, 15, 239, 117, 216, 218, 95}, 105: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 106: {32, 100, 238, 116, 215, 185}, 107: {128, 33, 98, 224, 248, 101, 44, 15, 239, 117, 216, 218, 95}, 108: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 109: {19, 227, 103}, 110: {228, 104, 20, 188, 157}, 111: {226, 132, 37, 229, 105, 235, 110, 113, 18, 242, 21, 120, 28}, 112: {230, 106, 236, 114, 22, 29}, 113: {231, 107, 23}, 114: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 115: {41, 233, 109, 111, 245, 26, 124, 125}, 116: {226, 132, 37, 229, 105, 235, 110, 113, 18, 242, 21, 120, 28}, 117: {41, 233, 109, 111, 245, 26, 124, 125}, 118: {112, 234, 27}, 119: {226, 132, 37, 229, 105, 235, 110, 113, 18, 242, 21, 120, 28}, 120: {230, 106, 236, 114, 22, 29}, 121: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 122: {32, 100, 238, 116, 215, 185}, 123: {128, 33, 98, 224, 248, 101, 44, 15, 239, 117, 216, 218, 95}, 124: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 125: {122, 123, 119}, 126: {226, 132, 37, 229, 105, 235, 110, 113, 18, 242, 21, 120, 28}, 127: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 128: {122, 123, 119}, 129: {122, 123, 119}, 130: {41, 233, 109, 111, 245, 26, 124, 125}, 131: {41, 233, 109, 111, 245, 26, 124, 125}, 132: {42, 246, 126, 159}, 133: {247, 43, 127}, 134: {128, 33, 98, 224, 248, 101, 44, 15, 239, 117, 216, 218, 95}, 135: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 136: {226, 132, 37, 229, 105, 235, 110, 113, 18, 242, 21, 120, 28}, 137: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 138: {140, 134}, 139: {135}, 140: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 141: {153, 162, 68, 259, 8, 137, 75, 144, 83, 52, 89, 61, 253}, 142: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 143: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 144: {140, 134}, 145: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 146: {66, 59, 142}, 147: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 148: {153, 162, 68, 259, 8, 137, 75, 144, 83, 52, 89, 61, 253}, 149: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 150: {96, 77, 146, 91, 94}, 151: {147, 92, 78}, 152: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 153: {149}, 154: {150}, 155: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 156: {64, 152, 7}, 157: {153, 162, 68, 259, 8, 137, 75, 144, 83, 52, 89, 61, 253}, 158: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 159: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 160: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 161: {228, 104, 20, 188, 157}, 162: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 163: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 164: {164}, 165: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 166: {166}, 167: {131, 167, 169, 173, 177, 211, 181}, 168: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 169: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 170: {172}, 171: {131, 167, 169, 173, 177, 211, 181}, 172: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 173: {175}, 174: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 175: {131, 167, 169, 173, 177, 211, 181}, 176: {193, 178, 195, 191}, 177: {192, 194, 196, 179, 187}, 178: {180}, 179: {131, 167, 169, 173, 177, 211, 181}, 180: {182}, 181: {183}, 182: {184}, 183: {32, 100, 238, 116, 215, 185}, 184: {186}, 185: {192, 194, 196, 179, 187}, 186: {228, 104, 20, 188, 157}, 187: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 188: {203, 190, 207}, 189: {193, 178, 195, 191}, 190: {192, 194, 196, 179, 187}, 191: {193, 178, 195, 191}, 192: {192, 194, 196, 179, 187}, 193: {193, 178, 195, 191}, 194: {192, 194, 196, 179, 187}, 195: {197}, 196: {198}, 197: {199}, 198: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 199: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 200: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 201: {203, 190, 207}, 202: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 203: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 204: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 205: {203, 190, 207}, 206: {208, 209}, 207: {208, 209}, 208: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 209: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 210: {214}, 211: {32, 100, 238, 116, 215, 185}, 212: {128, 33, 98, 224, 248, 101, 44, 15, 239, 117, 216, 218, 95}, 213: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 214: {128, 33, 98, 224, 248, 101, 44, 15, 239, 117, 216, 218, 95}, 215: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 216: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 217: {221}, 218: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 219: {223}, 220: {128, 33, 98, 224, 248, 101, 44, 15, 239, 117, 216, 218, 95}, 221: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 222: {226, 132, 37, 229, 105, 235, 110, 113, 18, 242, 21, 120, 28}, 223: {19, 227, 103}, 224: {228, 104, 20, 188, 157}, 225: {226, 132, 37, 229, 105, 235, 110, 113, 18, 242, 21, 120, 28}, 226: {230, 106, 236, 114, 22, 29}, 227: {231, 107, 23}, 228: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 229: {41, 233, 109, 111, 245, 26, 124, 125}, 230: {112, 234, 27}, 231: {226, 132, 37, 229, 105, 235, 110, 113, 18, 242, 21, 120, 28}, 232: {230, 106, 236, 114, 22, 29}, 233: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 234: {32, 100, 238, 116, 215, 185}, 235: {128, 33, 98, 224, 248, 101, 44, 15, 239, 117, 216, 218, 95}, 236: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 237: {40, 241, 36, 244}, 238: {226, 132, 37, 229, 105, 235, 110, 113, 18, 242, 21, 120, 28}, 239: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 240: {40, 241, 36, 244}, 241: {41, 233, 109, 111, 245, 26, 124, 125}, 242: {42, 246, 126, 159}, 243: {247, 43, 127}, 244: {128, 33, 98, 224, 248, 101, 44, 15, 239, 117, 216, 218, 95}, 245: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 246: {250}, 247: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 248: {252}, 249: {153, 162, 68, 259, 8, 137, 75, 144, 83, 52, 89, 61, 253}, 250: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 251: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 252: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 253: {257}, 254: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 255: {153, 162, 68, 259, 8, 137, 75, 144, 83, 52, 89, 61, 253}, 256: {2, 260, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 84, 212, 213, 90, 220, 254}, 257: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 258: {262}, 259: {256, 129, 258, 4, 133, 261, 263, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 88, 217, 219, 93, 222, 225, 99, 249, 102, 232, 108, 237, 240, 115, 243, 118, 121, 251, 255}, 260: {264}})
Equivalent! frozenset({81, 50}) {88, 60}
Equivalent! frozenset({82, 51}) {89, 61}
Equivalent! frozenset({66, 59, 142}) {146, 75, 68}
Equivalent! frozenset({67, 60, 143}) {147, 76, 69}
Equivalent! frozenset({193, 178, 195, 191}) {176, 193, 189, 191}
Equivalent! frozenset({192, 194, 179, 196}) {192, 177, 194, 190}
Equivalent! frozenset({203, 190, 207}) {201, 188, 205}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd98e074620>, {0: {0}, 1: {210}, 2: {211}, 3: {71}, 4: {130}, 5: {131}, 6: {169}, 7: {72}, 8: {86}, 9: {54}, 10: {47}, 11: {5}, 12: {1}, 13: {170}, 14: {2}, 15: {3}, 16: {4}, 17: {6}, 18: {7}, 19: {8}, 20: {9}, 21: {65, 10}, 22: {11}, 23: {12}, 24: {13}, 25: {14}, 26: {15}, 27: {16}, 28: {17}, 29: {18}, 30: {19}, 31: {20}, 32: {21}, 33: {22}, 34: {23}, 35: {24}, 36: {25}, 37: {26}, 38: {27}, 39: {28}, 40: {29}, 41: {30}, 42: {31}, 43: {32}, 44: {33}, 45: {34}, 46: {35}, 47: {36}, 48: {37}, 49: {38}, 50: {39}, 51: {40}, 52: {41}, 53: {42}, 54: {43}, 55: {44}, 56: {45}, 57: {46}, 58: {48}, 59: {49}, 60: {50}, 61: {51}, 62: {52}, 63: {53}, 64: {55}, 65: {56}, 66: {57}, 67: {65, 58, 141}, 68: {142}, 69: {143}, 70: {61}, 71: {62}, 72: {63}, 73: {64}, 74: {65, 10, 58, 141}, 75: {59}, 76: {60}, 77: {68}, 78: {69}, 79: {70}, 80: {73}, 81: {74}, 82: {75}, 83: {76}, 84: {77}, 85: {78}, 86: {79}, 87: {80}, 88: {81}, 89: {82}, 90: {83}, 91: {84}, 92: {85}, 93: {87}, 94: {88}, 95: {89}, 96: {90}, 97: {91}, 98: {92}, 99: {93}, 100: {94}, 101: {95}, 102: {96}, 103: {97}, 104: {98}, 105: {99}, 106: {100}, 107: {101}, 108: {102}, 109: {103}, 110: {104}, 111: {105}, 112: {106}, 113: {107}, 114: {108}, 115: {109}, 116: {110}, 117: {111}, 118: {112}, 119: {113}, 120: {114}, 121: {115}, 122: {116}, 123: {117}, 124: {118}, 125: {119}, 126: {120}, 127: {121}, 128: {122}, 129: {123}, 130: {124}, 131: {125}, 132: {126}, 133: {127}, 134: {128}, 135: {129}, 136: {132}, 137: {133}, 138: {134}, 139: {135}, 140: {136}, 141: {137}, 142: {138}, 143: {139}, 144: {140}, 145: {65, 58, 141}, 146: {66}, 147: {67}, 148: {144}, 149: {145}, 150: {146}, 151: {147}, 152: {148}, 153: {149}, 154: {150}, 155: {151}, 156: {152}, 157: {153}, 158: {154}, 159: {155}, 160: {156}, 161: {188, 157}, 162: {158}, 163: {163}, 164: {164}, 165: {165}, 166: {166}, 167: {167}, 168: {168}, 169: {171}, 170: {172}, 171: {173}, 172: {174}, 173: {175}, 174: {176}, 175: {177}, 176: {193}, 177: {194}, 178: {180}, 179: {181}, 180: {182}, 181: {183}, 182: {184}, 183: {185}, 184: {186}, 185: {187}, 186: {188}, 187: {189}, 188: {190}, 189: {195}, 190: {196}, 191: {191}, 192: {192}, 193: {178}, 194: {179}, 195: {197}, 196: {198}, 197: {199}, 198: {200}, 199: {201}, 200: {202}, 201: {203}, 202: {249, 129, 204, 46}, 203: {121, 243, 205, 39}, 204: {115, 237, 206, 31}, 205: {207}, 206: {208}, 207: {209}, 208: {212}, 209: {213}, 210: {214}, 211: {215}, 212: {216}, 213: {217}, 214: {218}, 215: {219}, 216: {220}, 217: {221}, 218: {222}, 219: {223}, 220: {224}, 221: {225}, 222: {226}, 223: {227}, 224: {228}, 225: {229}, 226: {230}, 227: {231}, 228: {232}, 229: {233}, 230: {234}, 231: {235}, 232: {236}, 233: {237}, 234: {238}, 235: {239}, 236: {240}, 237: {241}, 238: {242}, 239: {243}, 240: {244}, 241: {245}, 242: {246}, 243: {247}, 244: {248}, 245: {249}, 246: {250}, 247: {251}, 248: {252}, 249: {253}, 250: {254}, 251: {255}, 252: {256}, 253: {257}, 254: {258}, 255: {259}, 256: {260}, 257: {261}, 258: {262}, 259: {263}, 260: {264}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 bitcast bitcast
EXACT 6 bitcast bitcast
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 getelementptr getelementptr
EXACT 12 getelementptr getelementptr
EXACT 13 getelementptr getelementptr
EXACT 14 load load
EXACT 15 add add
EXACT 16 store store
EXACT 17 load load
EXACT 18 add add
EXACT 19 inttoptr inttoptr
EXACT 20 store store
MORE 21 POT: 2
EXACT 22 store store
EXACT 23 add add
EXACT 24 store store
EXACT 25 icmp icmp
EXACT 26 zext zext
EXACT 27 getelementptr getelementptr
EXACT 28 store store
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 tail tail
EXACT 32 trunc trunc
EXACT 33 and and
EXACT 34 xor xor
EXACT 35 getelementptr getelementptr
EXACT 36 store store
EXACT 37 xor xor
EXACT 38 lshr lshr
EXACT 39 trunc trunc
EXACT 40 and and
EXACT 41 getelementptr getelementptr
EXACT 42 store store
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 lshr lshr
EXACT 48 trunc trunc
EXACT 49 getelementptr getelementptr
EXACT 50 store store
EXACT 51 lshr lshr
EXACT 52 xor xor
EXACT 53 add add
EXACT 54 icmp icmp
EXACT 55 zext zext
EXACT 56 getelementptr getelementptr
EXACT 57 store store
EXACT 58 add add
EXACT 59 load load
EXACT 60 add add
EXACT 61 store store
EXACT 62 inttoptr inttoptr
EXACT 63 store store
EXACT 64 load load
EXACT 65 add add
EXACT 66 load load
MORE 67 POT: 3
EXACT 68 add add
EXACT 69 store store
EXACT 70 inttoptr inttoptr
EXACT 71 store store
EXACT 72 load load
EXACT 73 add add
MORE 74 POT: 4
EXACT 75 add add
EXACT 76 store store
EXACT 77 inttoptr inttoptr
EXACT 78 load load
EXACT 79 store store
EXACT 80 add add
EXACT 81 store store
EXACT 82 inttoptr inttoptr
EXACT 83 load load
EXACT 84 sext sext
EXACT 85 and and
EXACT 86 store store
EXACT 87 add add
EXACT 88 add add
EXACT 89 store store
EXACT 90 inttoptr inttoptr
EXACT 91 load load
EXACT 92 store store
EXACT 93 add add
EXACT 94 store store
EXACT 95 inttoptr inttoptr
EXACT 96 load load
EXACT 97 sext sext
EXACT 98 and and
EXACT 99 store store
EXACT 100 sext sext
EXACT 101 zext zext
EXACT 102 sext sext
EXACT 103 sub sub
EXACT 104 zext zext
EXACT 105 store store
EXACT 106 icmp icmp
EXACT 107 zext zext
EXACT 108 store store
EXACT 109 and and
EXACT 110 tail tail
EXACT 111 trunc trunc
EXACT 112 and and
EXACT 113 xor xor
EXACT 114 store store
EXACT 115 xor xor
EXACT 116 trunc trunc
EXACT 117 xor xor
EXACT 118 lshr lshr
EXACT 119 trunc trunc
EXACT 120 and and
EXACT 121 store store
EXACT 122 icmp icmp
EXACT 123 zext zext
EXACT 124 store store
EXACT 125 lshr lshr
EXACT 126 trunc trunc
EXACT 127 store store
EXACT 128 lshr lshr
EXACT 129 lshr lshr
EXACT 130 xor xor
EXACT 131 xor xor
EXACT 132 add add
EXACT 133 icmp icmp
EXACT 134 zext zext
EXACT 135 store store
EXACT 136 trunc trunc
EXACT 137 store store
EXACT 138 add add
EXACT 139 add add
EXACT 140 store store
EXACT 141 inttoptr inttoptr
EXACT 142 store store
EXACT 143 load load
EXACT 144 add add
MORE 145 POT: 3
EXACT 146 add add
EXACT 147 store store
EXACT 148 inttoptr inttoptr
EXACT 149 load load
EXACT 150 sext sext
EXACT 151 and and
EXACT 152 store store
EXACT 153 add add
EXACT 154 add add
EXACT 155 load load
EXACT 156 add add
EXACT 157 inttoptr inttoptr
EXACT 158 store store
EXACT 159 store store
EXACT 160 store store
MORE 161 POT: 2
EXACT 162 load load
EXACT 163 load load
EXACT 164 getelementptr getelementptr
EXACT 165 store store
EXACT 166 getelementptr getelementptr
EXACT 167 bitcast bitcast
EXACT 168 store store
EXACT 169 load load
EXACT 170 sitofp sitofp
EXACT 171 bitcast bitcast
EXACT 172 store store
EXACT 173 add add
EXACT 174 store store
EXACT 175 bitcast bitcast
EXACT 176 fcmp fcmp
EXACT 177 br br
EXACT 178 fadd fadd
EXACT 179 bitcast bitcast
EXACT 180 and and
EXACT 181 icmp icmp
EXACT 182 and and
EXACT 183 icmp icmp
EXACT 184 and and
EXACT 185 br br
EXACT 186 tail tail
EXACT 187 load load
EXACT 188 br br
EXACT 189 fcmp fcmp
EXACT 190 br br
EXACT 191 fcmp fcmp
EXACT 192 br br
EXACT 193 fcmp fcmp
EXACT 194 br br
EXACT 195 phi phi
EXACT 196 phi phi
EXACT 197 phi phi
EXACT 198 store store
EXACT 199 store store
EXACT 200 store store
EXACT 201 br br
MORE 202 POT: 4
MORE 203 POT: 4
MORE 204 POT: 4
EXACT 205 br br
EXACT 206 phi phi
EXACT 207 phi phi
EXACT 208 load load
EXACT 209 load load
EXACT 210 or or
EXACT 211 icmp icmp
EXACT 212 zext zext
EXACT 213 store store
EXACT 214 zext zext
EXACT 215 store store
EXACT 216 load load
EXACT 217 add add
EXACT 218 store store
EXACT 219 icmp icmp
EXACT 220 zext zext
EXACT 221 store store
EXACT 222 trunc trunc
EXACT 223 and and
EXACT 224 tail tail
EXACT 225 trunc trunc
EXACT 226 and and
EXACT 227 xor xor
EXACT 228 store store
EXACT 229 xor xor
EXACT 230 lshr lshr
EXACT 231 trunc trunc
EXACT 232 and and
EXACT 233 store store
EXACT 234 icmp icmp
EXACT 235 zext zext
EXACT 236 store store
EXACT 237 lshr lshr
EXACT 238 trunc trunc
EXACT 239 store store
EXACT 240 lshr lshr
EXACT 241 xor xor
EXACT 242 add add
EXACT 243 icmp icmp
EXACT 244 zext zext
EXACT 245 store store
EXACT 246 add add
EXACT 247 store store
EXACT 248 add add
EXACT 249 inttoptr inttoptr
EXACT 250 load load
EXACT 251 store store
EXACT 252 store store
EXACT 253 add add
EXACT 254 store store
EXACT 255 inttoptr inttoptr
EXACT 256 load load
EXACT 257 store store
EXACT 258 add add
EXACT 259 store store
EXACT 260 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', 'store i8 %37, i8* %38, align 1', '%RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%39 = add i64 %7, -16', '%40 = load i64, i64* %RDI.i41, align 8', '%41 = add i64 %10, 11', 'store i64 %41, i64* %3, align 8', '%42 = inttoptr i64 %39 to i64*', 'store i64 %40, i64* %42, align 8', '%RSI.i38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%43 = load i64, i64* %RBP.i, align 8', '%44 = add i64 %43, -16', '%45 = load i64, i64* %RSI.i38, align 8', '%47 = add i64 %46, 4', 'store i64 %47, i64* %3, align 8', '%48 = inttoptr i64 %44 to i64*', 'store i64 %45, i64* %48, align 8', '%49 = load i64, i64* %RBP.i, align 8', '%50 = add i64 %49, -8', '%52 = add i64 %51, 4', 'store i64 %52, i64* %3, align 8', '%53 = inttoptr i64 %50 to i64*', '%54 = load i64, i64* %53, align 8', 'store i64 %54, i64* %RSI.i38, align 8', '%RAX.i32 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0', '%56 = add i64 %51, 7', 'store i64 %56, i64* %3, align 8', '%57 = inttoptr i64 %54 to i16*', '%58 = load i16, i16* %57, align 2', '%59 = sext i16 %58 to i64', '%60 = and i64 %59, 4294967295', 'store i64 %60, i64* %RAX.i32, align 8', '%61 = add i64 %49, -16', '%62 = add i64 %51, 11', 'store i64 %62, i64* %3, align 8', '%63 = inttoptr i64 %61 to i64*', '%64 = load i64, i64* %63, align 8', 'store i64 %64, i64* %RSI.i38, align 8', '%RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%65 = add i64 %51, 14', 'store i64 %65, i64* %3, align 8', '%66 = inttoptr i64 %64 to i16*', '%67 = load i16, i16* %66, align 2', '%68 = sext i16 %67 to i64', '%69 = and i64 %68, 4294967295', 'store i64 %69, i64* %RCX.i, align 8', '%70 = sext i16 %67 to i32', '%71 = zext i32 %70 to i64', '%72 = sext i16 %58 to i32', '%73 = sub nsw i32 %72, %70', '%74 = zext i32 %73 to i64', 'store i64 %74, i64* %RAX.i32, align 8', '%75 = icmp ult i16 %58, %67', '%76 = zext i1 %75 to i8', 'store i8 %76, i8* %14, align 1', '%77 = and i32 %73, 255', '%78 = tail call i32 @llvm.ctpop.i32(i32 %77)', '%79 = trunc i32 %78 to i8', '%80 = and i8 %79, 1', '%81 = xor i8 %80, 1', 'store i8 %81, i8* %21, align 1', '%82 = xor i64 %71, %59', '%83 = trunc i64 %82 to i32', '%84 = xor i32 %83, %73', '%85 = lshr i32 %84, 4', '%86 = trunc i32 %85 to i8', '%87 = and i8 %86, 1', 'store i8 %87, i8* %26, align 1', '%88 = icmp eq i32 %73, 0', '%89 = zext i1 %88 to i8', 'store i8 %89, i8* %29, align 1', '%90 = lshr i32 %73, 31', '%91 = trunc i32 %90 to i8', 'store i8 %91, i8* %32, align 1', '%92 = lshr i32 %72, 31', '%93 = lshr i32 %70, 31', '%94 = xor i32 %93, %92', '%95 = xor i32 %90, %92', '%96 = add nuw nsw i32 %95, %94', '%97 = icmp eq i32 %96, 2', '%98 = zext i1 %97 to i8', 'store i8 %98, i8* %38, align 1', '%99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0', '%DX.i24 = bitcast %union.anon* %99 to i16*', '%100 = trunc i32 %73 to i16', 'store i16 %100, i16* %DX.i24, align 2', '%101 = add i64 %49, -18', '%102 = add i64 %51, 23', 'store i64 %102, i64* %3, align 8', '%103 = inttoptr i64 %101 to i16*', 'store i16 %100, i16* %103, align 2', '%104 = load i64, i64* %RBP.i, align 8', '%105 = add i64 %104, -18', '%107 = add i64 %106, 4', 'store i64 %107, i64* %3, align 8', '%108 = inttoptr i64 %105 to i16*', '%109 = load i16, i16* %108, align 2', '%110 = sext i16 %109 to i64', '%111 = and i64 %110, 4294967295', 'store i64 %111, i64* %RDI.i41, align 8', '%112 = add i64 %106, -84839', '%113 = add i64 %106, 9', '%114 = load i64, i64* %6, align 8', '%115 = add i64 %114, -8', '%116 = inttoptr i64 %115 to i64*', 'store i64 %113, i64* %116, align 8', 'store i64 %115, i64* %6, align 8', 'store i64 %112, i64* %3, align 8', '%124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%125 = bitcast i64* %124 to double*', 'store double 0.000000e+00, double* %125, align 1', '%126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%129 = bitcast %union.VectorReg* %126 to double*', 'store double %128, double* %129, align 1', 'store i64 %130, i64* %3, align 8', '%.pre = load i64, i64* %3, align 8', '%150 = phi i8 [ 0, %143 ], [ 0, %145 ], [ 1, %147 ], [ 1, %133 ]', '%151 = phi i8 [ 0, %143 ], [ 0, %145 ], [ 0, %147 ], [ 1, %133 ]', '%152 = phi i8 [ 0, %143 ], [ 1, %145 ], [ 0, %147 ], [ 1, %133 ]', 'store i8 %150, i8* %29, align 1', 'store i8 %151, i8* %21, align 1', 'store i8 %152, i8* %14, align 1', '%154 = phi i64 [ %.pre, %141 ], [ %130, %153 ]', '%156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0', '%R8B.i9 = bitcast %union.anon* %156 to i8*', '%157 = load i8, i8* %14, align 1', '%158 = load i8, i8* %29, align 1', '%159 = or i8 %158, %157', '%160 = icmp eq i8 %159, 0', '%161 = zext i1 %160 to i8', 'store i8 %161, i8* %R8B.i9, align 1', '%162 = zext i1 %160 to i64', 'store i64 %162, i64* %RAX.i32, align 8', '%163 = load i64, i64* %6, align 8', '%164 = add i64 %163, 32', 'store i64 %164, i64* %6, align 8', '%165 = icmp ugt i64 %163, -33', '%166 = zext i1 %165 to i8', 'store i8 %166, i8* %14, align 1', '%167 = trunc i64 %164 to i32', '%168 = and i32 %167, 255', '%169 = tail call i32 @llvm.ctpop.i32(i32 %168)', '%170 = trunc i32 %169 to i8', '%171 = and i8 %170, 1', '%172 = xor i8 %171, 1', 'store i8 %172, i8* %21, align 1', '%173 = xor i64 %164, %163', '%174 = lshr i64 %173, 4', '%175 = trunc i64 %174 to i8', '%176 = and i8 %175, 1', 'store i8 %176, i8* %26, align 1', '%177 = icmp eq i64 %164, 0', '%178 = zext i1 %177 to i8', 'store i8 %178, i8* %29, align 1', '%179 = lshr i64 %164, 63', '%180 = trunc i64 %179 to i8', 'store i8 %180, i8* %32, align 1', '%181 = lshr i64 %163, 63', '%182 = xor i64 %179, %181', '%183 = add nuw nsw i64 %182, %179', '%184 = icmp eq i64 %183, 2', '%185 = zext i1 %184 to i8', 'store i8 %185, i8* %38, align 1', '%186 = add i64 %154, 17', 'store i64 %186, i64* %3, align 8', '%187 = add i64 %163, 40', '%188 = inttoptr i64 %164 to i64*', '%189 = load i64, i64* %188, align 8', 'store i64 %189, i64* %RBP.i, align 8', 'store i64 %187, i64* %6, align 8', '%190 = add i64 %154, 18', 'store i64 %190, i64* %3, align 8', '%191 = inttoptr i64 %187 to i64*', '%192 = load i64, i64* %191, align 8', 'store i64 %192, i64* %3, align 8', '%193 = add i64 %163, 48', 'store i64 %193, i64* %6, align 8'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Keep: %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Keep: %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Keep: %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Keep: %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %39 = add i64 %7, -16
Found line to remove! %40 = load i64, i64* %RDI.i41, align 8
Found line to remove! %41 = add i64 %10, 11
Found line to remove! store i64 %41, i64* %3, align 8
Found line to remove! %42 = inttoptr i64 %39 to i64*
Found line to remove! store i64 %40, i64* %42, align 8
Found line to remove! %RSI.i38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %43 = load i64, i64* %RBP.i, align 8
Found line to remove! %44 = add i64 %43, -16
Found line to remove! %45 = load i64, i64* %RSI.i38, align 8
Keep: %46 = load i64, i64* %3, align 8
Found line to remove! %47 = add i64 %46, 4
Found line to remove! store i64 %47, i64* %3, align 8
Found line to remove! %48 = inttoptr i64 %44 to i64*
Found line to remove! store i64 %45, i64* %48, align 8
Found line to remove! %49 = load i64, i64* %RBP.i, align 8
Found line to remove! %50 = add i64 %49, -8
Keep: %51 = load i64, i64* %3, align 8
Found line to remove! %52 = add i64 %51, 4
Found line to remove! store i64 %52, i64* %3, align 8
Found line to remove! %53 = inttoptr i64 %50 to i64*
Found line to remove! %54 = load i64, i64* %53, align 8
Found line to remove! store i64 %54, i64* %RSI.i38, align 8
Keep: %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %RAX.i32 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0
Found line to remove! %56 = add i64 %51, 7
Found line to remove! store i64 %56, i64* %3, align 8
Found line to remove! %57 = inttoptr i64 %54 to i16*
Found line to remove! %58 = load i16, i16* %57, align 2
Found line to remove! %59 = sext i16 %58 to i64
Found line to remove! %60 = and i64 %59, 4294967295
Found line to remove! store i64 %60, i64* %RAX.i32, align 8
Found line to remove! %61 = add i64 %49, -16
Found line to remove! %62 = add i64 %51, 11
Found line to remove! store i64 %62, i64* %3, align 8
Found line to remove! %63 = inttoptr i64 %61 to i64*
Found line to remove! %64 = load i64, i64* %63, align 8
Found line to remove! store i64 %64, i64* %RSI.i38, align 8
Found line to remove! %RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %65 = add i64 %51, 14
Found line to remove! store i64 %65, i64* %3, align 8
Found line to remove! %66 = inttoptr i64 %64 to i16*
Found line to remove! %67 = load i16, i16* %66, align 2
Found line to remove! %68 = sext i16 %67 to i64
Found line to remove! %69 = and i64 %68, 4294967295
Found line to remove! store i64 %69, i64* %RCX.i, align 8
Found line to remove! %70 = sext i16 %67 to i32
Found line to remove! %71 = zext i32 %70 to i64
Found line to remove! %72 = sext i16 %58 to i32
Found line to remove! %73 = sub nsw i32 %72, %70
Found line to remove! %74 = zext i32 %73 to i64
Found line to remove! store i64 %74, i64* %RAX.i32, align 8
Found line to remove! %75 = icmp ult i16 %58, %67
Found line to remove! %76 = zext i1 %75 to i8
Found line to remove! store i8 %76, i8* %14, align 1
Found line to remove! %77 = and i32 %73, 255
Found line to remove! %78 = tail call i32 @llvm.ctpop.i32(i32 %77)
Found line to remove! %79 = trunc i32 %78 to i8
Found line to remove! %80 = and i8 %79, 1
Found line to remove! %81 = xor i8 %80, 1
Found line to remove! store i8 %81, i8* %21, align 1
Found line to remove! %82 = xor i64 %71, %59
Found line to remove! %83 = trunc i64 %82 to i32
Found line to remove! %84 = xor i32 %83, %73
Found line to remove! %85 = lshr i32 %84, 4
Found line to remove! %86 = trunc i32 %85 to i8
Found line to remove! %87 = and i8 %86, 1
Found line to remove! store i8 %87, i8* %26, align 1
Found line to remove! %88 = icmp eq i32 %73, 0
Found line to remove! %89 = zext i1 %88 to i8
Found line to remove! store i8 %89, i8* %29, align 1
Found line to remove! %90 = lshr i32 %73, 31
Found line to remove! %91 = trunc i32 %90 to i8
Found line to remove! store i8 %91, i8* %32, align 1
Found line to remove! %92 = lshr i32 %72, 31
Found line to remove! %93 = lshr i32 %70, 31
Found line to remove! %94 = xor i32 %93, %92
Found line to remove! %95 = xor i32 %90, %92
Found line to remove! %96 = add nuw nsw i32 %95, %94
Found line to remove! %97 = icmp eq i32 %96, 2
Found line to remove! %98 = zext i1 %97 to i8
Found line to remove! store i8 %98, i8* %38, align 1
Found line to remove! %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
Found line to remove! %DX.i24 = bitcast %union.anon* %99 to i16*
Found line to remove! %100 = trunc i32 %73 to i16
Found line to remove! store i16 %100, i16* %DX.i24, align 2
Found line to remove! %101 = add i64 %49, -18
Found line to remove! %102 = add i64 %51, 23
Found line to remove! store i64 %102, i64* %3, align 8
Found line to remove! %103 = inttoptr i64 %101 to i16*
Found line to remove! store i16 %100, i16* %103, align 2
Found line to remove! %104 = load i64, i64* %RBP.i, align 8
Found line to remove! %105 = add i64 %104, -18
Keep: %106 = load i64, i64* %3, align 8
Found line to remove! %107 = add i64 %106, 4
Found line to remove! store i64 %107, i64* %3, align 8
Found line to remove! %108 = inttoptr i64 %105 to i16*
Found line to remove! %109 = load i16, i16* %108, align 2
Found line to remove! %110 = sext i16 %109 to i64
Found line to remove! %111 = and i64 %110, 4294967295
Found line to remove! store i64 %111, i64* %RDI.i41, align 8
Found line to remove! %112 = add i64 %106, -84839
Found line to remove! %113 = add i64 %106, 9
Found line to remove! %114 = load i64, i64* %6, align 8
Found line to remove! %115 = add i64 %114, -8
Found line to remove! %116 = inttoptr i64 %115 to i64*
Found line to remove! store i64 %113, i64* %116, align 8
Found line to remove! store i64 %115, i64* %6, align 8
Found line to remove! store i64 %112, i64* %3, align 8
Keep: %117 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
Keep: %118 = load i64, i64* %3, align 8
Keep: %119 = add i64 %118, ptrtoint (%G_0x3860__rip__type* @G_0x3860__rip_ to i64)
Keep: %120 = add i64 %118, 8
Keep: store i64 %120, i64* %3, align 8
Keep: %121 = inttoptr i64 %119 to i64*
Keep: %122 = load i64, i64* %121, align 8
Keep: %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %122, i64* %123, align 1
Found line to remove! %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %125 = bitcast i64* %124 to double*
Found line to remove! store double 0.000000e+00, double* %125, align 1
Keep: %EAX.i = bitcast %union.anon* %55 to i32*
Found line to remove! %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Keep: %127 = load i32, i32* %EAX.i, align 4
Keep: %128 = sitofp i32 %127 to double
Found line to remove! %129 = bitcast %union.VectorReg* %126 to double*
Found line to remove! store double %128, double* %129, align 1
Keep: %130 = add i64 %118, 16
Found line to remove! store i64 %130, i64* %3, align 8
Keep: %131 = bitcast i64 %122 to double
Keep: %132 = fcmp uno double %131, %128
Keep: br i1 %132, label %133, label %143
Keep: 
Keep: ; <label>:133:                                    ; preds = %entry
Keep: %134 = fadd double %128, %131
Keep: %135 = bitcast double %134 to i64
Keep: %136 = and i64 %135, 9221120237041090560
Keep: %137 = icmp eq i64 %136, 9218868437227405312
Keep: %138 = and i64 %135, 2251799813685247
Keep: %139 = icmp ne i64 %138, 0
Keep: %140 = and i1 %137, %139
Keep: br i1 %140, label %141, label %149
Keep: 
Keep: ; <label>:141:                                    ; preds = %133
Keep: %142 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %130, %struct.Memory* %117)
Found line to remove! %.pre = load i64, i64* %3, align 8
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: ; <label>:143:                                    ; preds = %entry
Keep: %144 = fcmp ogt double %131, %128
Keep: br i1 %144, label %149, label %145
Keep: 
Keep: ; <label>:145:                                    ; preds = %143
Keep: %146 = fcmp olt double %131, %128
Keep: br i1 %146, label %149, label %147
Keep: 
Keep: ; <label>:147:                                    ; preds = %145
Keep: %148 = fcmp oeq double %131, %128
Keep: br i1 %148, label %149, label %153
Keep: 
Keep: ; <label>:149:                                    ; preds = %147, %145, %143, %133
Found line to remove! %150 = phi i8 [ 0, %143 ], [ 0, %145 ], [ 1, %147 ], [ 1, %133 ]
Found line to remove! %151 = phi i8 [ 0, %143 ], [ 0, %145 ], [ 0, %147 ], [ 1, %133 ]
Found line to remove! %152 = phi i8 [ 0, %143 ], [ 1, %145 ], [ 0, %147 ], [ 1, %133 ]
Found line to remove! store i8 %150, i8* %29, align 1
Found line to remove! store i8 %151, i8* %21, align 1
Found line to remove! store i8 %152, i8* %14, align 1
Keep: br label %153
Keep: 
Keep: ; <label>:153:                                    ; preds = %149, %147
Keep: store i8 0, i8* %38, align 1
Keep: store i8 0, i8* %32, align 1
Keep: store i8 0, i8* %26, align 1
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: routine_ucomisd__xmm1___xmm0.exit:                ; preds = %153, %141
Found line to remove! %154 = phi i64 [ %.pre, %141 ], [ %130, %153 ]
Keep: %155 = phi %struct.Memory* [ %142, %141 ], [ %117, %153 ]
Found line to remove! %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
Found line to remove! %R8B.i9 = bitcast %union.anon* %156 to i8*
Found line to remove! %157 = load i8, i8* %14, align 1
Found line to remove! %158 = load i8, i8* %29, align 1
Found line to remove! %159 = or i8 %158, %157
Found line to remove! %160 = icmp eq i8 %159, 0
Found line to remove! %161 = zext i1 %160 to i8
Found line to remove! store i8 %161, i8* %R8B.i9, align 1
Found line to remove! %162 = zext i1 %160 to i64
Found line to remove! store i64 %162, i64* %RAX.i32, align 8
Found line to remove! %163 = load i64, i64* %6, align 8
Found line to remove! %164 = add i64 %163, 32
Found line to remove! store i64 %164, i64* %6, align 8
Found line to remove! %165 = icmp ugt i64 %163, -33
Found line to remove! %166 = zext i1 %165 to i8
Found line to remove! store i8 %166, i8* %14, align 1
Found line to remove! %167 = trunc i64 %164 to i32
Found line to remove! %168 = and i32 %167, 255
Found line to remove! %169 = tail call i32 @llvm.ctpop.i32(i32 %168)
Found line to remove! %170 = trunc i32 %169 to i8
Found line to remove! %171 = and i8 %170, 1
Found line to remove! %172 = xor i8 %171, 1
Found line to remove! store i8 %172, i8* %21, align 1
Found line to remove! %173 = xor i64 %164, %163
Found line to remove! %174 = lshr i64 %173, 4
Found line to remove! %175 = trunc i64 %174 to i8
Found line to remove! %176 = and i8 %175, 1
Found line to remove! store i8 %176, i8* %26, align 1
Found line to remove! %177 = icmp eq i64 %164, 0
Found line to remove! %178 = zext i1 %177 to i8
Found line to remove! store i8 %178, i8* %29, align 1
Found line to remove! %179 = lshr i64 %164, 63
Found line to remove! %180 = trunc i64 %179 to i8
Found line to remove! store i8 %180, i8* %32, align 1
Found line to remove! %181 = lshr i64 %163, 63
Found line to remove! %182 = xor i64 %179, %181
Found line to remove! %183 = add nuw nsw i64 %182, %179
Found line to remove! %184 = icmp eq i64 %183, 2
Found line to remove! %185 = zext i1 %184 to i8
Found line to remove! store i8 %185, i8* %38, align 1
Found line to remove! %186 = add i64 %154, 17
Found line to remove! store i64 %186, i64* %3, align 8
Found line to remove! %187 = add i64 %163, 40
Found line to remove! %188 = inttoptr i64 %164 to i64*
Found line to remove! %189 = load i64, i64* %188, align 8
Found line to remove! store i64 %189, i64* %RBP.i, align 8
Found line to remove! store i64 %187, i64* %6, align 8
Found line to remove! %190 = add i64 %154, 18
Found line to remove! store i64 %190, i64* %3, align 8
Found line to remove! %191 = inttoptr i64 %187 to i64*
Found line to remove! %192 = load i64, i64* %191, align 8
Found line to remove! store i64 %192, i64* %3, align 8
Found line to remove! %193 = add i64 %163, 48
Found line to remove! store i64 %193, i64* %6, align 8
Keep: ret %struct.Memory* %155
Missed: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', 'store i8 %37, i8* %38, align 1', '%RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%39 = add i64 %7, -16', '%40 = load i64, i64* %RDI.i41, align 8', '%41 = add i64 %10, 11', 'store i64 %41, i64* %3, align 8', '%42 = inttoptr i64 %39 to i64*', 'store i64 %40, i64* %42, align 8', '%RSI.i38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%43 = load i64, i64* %RBP.i, align 8', '%44 = add i64 %43, -16', '%45 = load i64, i64* %RSI.i38, align 8', '%47 = add i64 %46, 4', 'store i64 %47, i64* %3, align 8', '%48 = inttoptr i64 %44 to i64*', 'store i64 %45, i64* %48, align 8', '%49 = load i64, i64* %RBP.i, align 8', '%50 = add i64 %49, -8', '%52 = add i64 %51, 4', 'store i64 %52, i64* %3, align 8', '%53 = inttoptr i64 %50 to i64*', '%54 = load i64, i64* %53, align 8', 'store i64 %54, i64* %RSI.i38, align 8', '%RAX.i32 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0', '%56 = add i64 %51, 7', 'store i64 %56, i64* %3, align 8', '%57 = inttoptr i64 %54 to i16*', '%58 = load i16, i16* %57, align 2', '%59 = sext i16 %58 to i64', '%60 = and i64 %59, 4294967295', 'store i64 %60, i64* %RAX.i32, align 8', '%61 = add i64 %49, -16', '%62 = add i64 %51, 11', 'store i64 %62, i64* %3, align 8', '%63 = inttoptr i64 %61 to i64*', '%64 = load i64, i64* %63, align 8', 'store i64 %64, i64* %RSI.i38, align 8', '%RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%65 = add i64 %51, 14', 'store i64 %65, i64* %3, align 8', '%66 = inttoptr i64 %64 to i16*', '%67 = load i16, i16* %66, align 2', '%68 = sext i16 %67 to i64', '%69 = and i64 %68, 4294967295', 'store i64 %69, i64* %RCX.i, align 8', '%70 = sext i16 %67 to i32', '%71 = zext i32 %70 to i64', '%72 = sext i16 %58 to i32', '%73 = sub nsw i32 %72, %70', '%74 = zext i32 %73 to i64', 'store i64 %74, i64* %RAX.i32, align 8', '%75 = icmp ult i16 %58, %67', '%76 = zext i1 %75 to i8', 'store i8 %76, i8* %14, align 1', '%77 = and i32 %73, 255', '%78 = tail call i32 @llvm.ctpop.i32(i32 %77)', '%79 = trunc i32 %78 to i8', '%80 = and i8 %79, 1', '%81 = xor i8 %80, 1', 'store i8 %81, i8* %21, align 1', '%82 = xor i64 %71, %59', '%83 = trunc i64 %82 to i32', '%84 = xor i32 %83, %73', '%85 = lshr i32 %84, 4', '%86 = trunc i32 %85 to i8', '%87 = and i8 %86, 1', 'store i8 %87, i8* %26, align 1', '%88 = icmp eq i32 %73, 0', '%89 = zext i1 %88 to i8', 'store i8 %89, i8* %29, align 1', '%90 = lshr i32 %73, 31', '%91 = trunc i32 %90 to i8', 'store i8 %91, i8* %32, align 1', '%92 = lshr i32 %72, 31', '%93 = lshr i32 %70, 31', '%94 = xor i32 %93, %92', '%95 = xor i32 %90, %92', '%96 = add nuw nsw i32 %95, %94', '%97 = icmp eq i32 %96, 2', '%98 = zext i1 %97 to i8', 'store i8 %98, i8* %38, align 1', '%99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0', '%DX.i24 = bitcast %union.anon* %99 to i16*', '%100 = trunc i32 %73 to i16', 'store i16 %100, i16* %DX.i24, align 2', '%101 = add i64 %49, -18', '%102 = add i64 %51, 23', 'store i64 %102, i64* %3, align 8', '%103 = inttoptr i64 %101 to i16*', 'store i16 %100, i16* %103, align 2', '%104 = load i64, i64* %RBP.i, align 8', '%105 = add i64 %104, -18', '%107 = add i64 %106, 4', 'store i64 %107, i64* %3, align 8', '%108 = inttoptr i64 %105 to i16*', '%109 = load i16, i16* %108, align 2', '%110 = sext i16 %109 to i64', '%111 = and i64 %110, 4294967295', 'store i64 %111, i64* %RDI.i41, align 8', '%112 = add i64 %106, -84839', '%113 = add i64 %106, 9', '%114 = load i64, i64* %6, align 8', '%115 = add i64 %114, -8', '%116 = inttoptr i64 %115 to i64*', 'store i64 %113, i64* %116, align 8', 'store i64 %115, i64* %6, align 8', 'store i64 %112, i64* %3, align 8', '%124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%125 = bitcast i64* %124 to double*', 'store double 0.000000e+00, double* %125, align 1', '%126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%129 = bitcast %union.VectorReg* %126 to double*', 'store double %128, double* %129, align 1', 'store i64 %130, i64* %3, align 8', '%.pre = load i64, i64* %3, align 8', '%150 = phi i8 [ 0, %143 ], [ 0, %145 ], [ 1, %147 ], [ 1, %133 ]', '%151 = phi i8 [ 0, %143 ], [ 0, %145 ], [ 0, %147 ], [ 1, %133 ]', '%152 = phi i8 [ 0, %143 ], [ 1, %145 ], [ 0, %147 ], [ 1, %133 ]', 'store i8 %150, i8* %29, align 1', 'store i8 %151, i8* %21, align 1', 'store i8 %152, i8* %14, align 1', '%154 = phi i64 [ %.pre, %141 ], [ %130, %153 ]', '%156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0', '%R8B.i9 = bitcast %union.anon* %156 to i8*', '%157 = load i8, i8* %14, align 1', '%158 = load i8, i8* %29, align 1', '%159 = or i8 %158, %157', '%160 = icmp eq i8 %159, 0', '%161 = zext i1 %160 to i8', 'store i8 %161, i8* %R8B.i9, align 1', '%162 = zext i1 %160 to i64', 'store i64 %162, i64* %RAX.i32, align 8', '%163 = load i64, i64* %6, align 8', '%164 = add i64 %163, 32', 'store i64 %164, i64* %6, align 8', '%165 = icmp ugt i64 %163, -33', '%166 = zext i1 %165 to i8', 'store i8 %166, i8* %14, align 1', '%167 = trunc i64 %164 to i32', '%168 = and i32 %167, 255', '%169 = tail call i32 @llvm.ctpop.i32(i32 %168)', '%170 = trunc i32 %169 to i8', '%171 = and i8 %170, 1', '%172 = xor i8 %171, 1', 'store i8 %172, i8* %21, align 1', '%173 = xor i64 %164, %163', '%174 = lshr i64 %173, 4', '%175 = trunc i64 %174 to i8', '%176 = and i8 %175, 1', 'store i8 %176, i8* %26, align 1', '%177 = icmp eq i64 %164, 0', '%178 = zext i1 %177 to i8', 'store i8 %178, i8* %29, align 1', '%179 = lshr i64 %164, 63', '%180 = trunc i64 %179 to i8', 'store i8 %180, i8* %32, align 1', '%181 = lshr i64 %163, 63', '%182 = xor i64 %179, %181', '%183 = add nuw nsw i64 %182, %179', '%184 = icmp eq i64 %183, 2', '%185 = zext i1 %184 to i8', 'store i8 %185, i8* %38, align 1', '%186 = add i64 %154, 17', 'store i64 %186, i64* %3, align 8', '%187 = add i64 %163, 40', '%188 = inttoptr i64 %164 to i64*', '%189 = load i64, i64* %188, align 8', 'store i64 %189, i64* %RBP.i, align 8', 'store i64 %187, i64* %6, align 8', '%190 = add i64 %154, 18', 'store i64 %190, i64* %3, align 8', '%191 = inttoptr i64 %187 to i64*', '%192 = load i64, i64* %191, align 8', 'store i64 %192, i64* %3, align 8', '%193 = add i64 %163, 48', 'store i64 %193, i64* %6, align 8'])
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0', '%R8B = bitcast %union.anon* %3 to i8*', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0', '%DX = bitcast %union.anon* %5 to i16*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%7 = load i64, i64* %RBP, align 8', '%8 = add i64 %1, 1', 'store i64 %8, i64* %PC, align 8', '%9 = load i64, i64* %RSP, align 8', '%10 = add i64 %9, -8', '%11 = inttoptr i64 %10 to i64*', 'store i64 %7, i64* %11, align 8', 'store i64 %10, i64* %RBP, align 8', '%13 = add i64 %9, -40', 'store i64 %13, i64* %RSP, align 8', '%14 = icmp ult i64 %10, 32', '%15 = zext i1 %14 to i8', '%16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %15, i8* %16, align 1', '%17 = trunc i64 %13 to i32', '%18 = and i32 %17, 255', '%19 = tail call i32 @llvm.ctpop.i32(i32 %18) #12', '%20 = trunc i32 %19 to i8', '%21 = and i8 %20, 1', '%22 = xor i8 %21, 1', '%23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %22, i8* %23, align 1', '%24 = xor i64 %10, %13', '%25 = lshr i64 %24, 4', '%26 = trunc i64 %25 to i8', '%27 = and i8 %26, 1', 'store i8 %27, i8* %28, align 1', '%29 = icmp eq i64 %13, 0', '%30 = zext i1 %29 to i8', '%31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %30, i8* %31, align 1', '%32 = lshr i64 %13, 63', '%33 = trunc i64 %32 to i8', 'store i8 %33, i8* %34, align 1', '%35 = lshr i64 %10, 63', '%36 = xor i64 %32, %35', '%37 = add nuw nsw i64 %36, %35', '%38 = icmp eq i64 %37, 2', '%39 = zext i1 %38 to i8', 'store i8 %39, i8* %40, align 1', '%41 = add i64 %9, -16', '%42 = load i64, i64* %RDI, align 8', '%43 = add i64 %12, 11', 'store i64 %43, i64* %PC, align 8', '%44 = inttoptr i64 %41 to i64*', 'store i64 %42, i64* %44, align 8', '%45 = load i64, i64* %RBP, align 8', '%46 = add i64 %45, -16', '%47 = load i64, i64* %RSI, align 8', '%49 = add i64 %48, 4', 'store i64 %49, i64* %PC, align 8', '%50 = inttoptr i64 %46 to i64*', 'store i64 %47, i64* %50, align 8', '%51 = load i64, i64* %RBP, align 8', '%52 = add i64 %51, -8', '%54 = add i64 %53, 4', 'store i64 %54, i64* %PC, align 8', '%55 = inttoptr i64 %52 to i64*', '%56 = load i64, i64* %55, align 8', 'store i64 %56, i64* %RSI, align 8', '%57 = add i64 %53, 7', 'store i64 %57, i64* %PC, align 8', '%58 = inttoptr i64 %56 to i16*', '%59 = load i16, i16* %58, align 2', '%60 = sext i16 %59 to i64', '%61 = and i64 %60, 4294967295', 'store i64 %61, i64* %RAX, align 8', '%62 = add i64 %51, -16', '%63 = add i64 %53, 11', 'store i64 %63, i64* %PC, align 8', '%64 = inttoptr i64 %62 to i64*', '%65 = load i64, i64* %64, align 8', 'store i64 %65, i64* %RSI, align 8', '%66 = add i64 %53, 14', 'store i64 %66, i64* %PC, align 8', '%67 = inttoptr i64 %65 to i16*', '%68 = load i16, i16* %67, align 2', '%69 = sext i16 %68 to i64', '%70 = and i64 %69, 4294967295', 'store i64 %70, i64* %RCX, align 8', '%71 = sext i16 %68 to i32', '%72 = zext i32 %71 to i64', '%73 = sext i16 %59 to i32', '%74 = sub nsw i32 %73, %71', '%75 = zext i32 %74 to i64', 'store i64 %75, i64* %RAX, align 8', '%76 = icmp ult i16 %59, %68', '%77 = zext i1 %76 to i8', 'store i8 %77, i8* %16, align 1', '%78 = and i32 %74, 255', '%79 = tail call i32 @llvm.ctpop.i32(i32 %78) #12', '%80 = trunc i32 %79 to i8', '%81 = and i8 %80, 1', '%82 = xor i8 %81, 1', 'store i8 %82, i8* %23, align 1', '%83 = xor i64 %72, %60', '%84 = trunc i64 %83 to i32', '%85 = xor i32 %84, %74', '%86 = lshr i32 %85, 4', '%87 = trunc i32 %86 to i8', '%88 = and i8 %87, 1', 'store i8 %88, i8* %28, align 1', '%89 = icmp eq i32 %74, 0', '%90 = zext i1 %89 to i8', 'store i8 %90, i8* %31, align 1', '%91 = lshr i32 %74, 31', '%92 = trunc i32 %91 to i8', 'store i8 %92, i8* %34, align 1', '%93 = lshr i32 %73, 31', '%94 = lshr i32 %71, 31', '%95 = xor i32 %94, %93', '%96 = xor i32 %91, %93', '%97 = add nuw nsw i32 %96, %95', '%98 = icmp eq i32 %97, 2', '%99 = zext i1 %98 to i8', 'store i8 %99, i8* %40, align 1', '%100 = trunc i32 %74 to i16', 'store i16 %100, i16* %DX, align 2', '%101 = add i64 %51, -18', '%102 = add i64 %53, 23', 'store i64 %102, i64* %PC, align 8', '%103 = inttoptr i64 %101 to i16*', 'store i16 %100, i16* %103, align 2', '%104 = load i64, i64* %RBP, align 8', '%105 = add i64 %104, -18', '%107 = add i64 %106, 4', 'store i64 %107, i64* %PC, align 8', '%108 = inttoptr i64 %105 to i16*', '%109 = load i16, i16* %108, align 2', '%110 = sext i16 %109 to i64', '%111 = and i64 %110, 4294967295', 'store i64 %111, i64* %RDI, align 8', '%112 = add i64 %106, -84839', '%113 = add i64 %106, 9', '%114 = load i64, i64* %RSP, align 8', '%115 = add i64 %114, -8', '%116 = inttoptr i64 %115 to i64*', 'store i64 %113, i64* %116, align 8', 'store i64 %115, i64* %RSP, align 8', 'store i64 %112, i64* %PC, align 8', '%120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %119, i64* %120, align 1', '%121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%122 = bitcast i64* %121 to double*', 'store double 0.000000e+00, double* %122, align 1', '%125 = bitcast %union.VectorReg* %6 to double*', 'store double %124, double* %125, align 1', 'store i64 %126, i64* %PC, align 8', '%.pre = load i64, i64* %PC, align 8', '%146 = phi i8 [ 0, %139 ], [ 0, %141 ], [ 1, %143 ], [ 1, %129 ]', '%147 = phi i8 [ 0, %139 ], [ 0, %141 ], [ 0, %143 ], [ 1, %129 ]', '%148 = phi i8 [ 0, %139 ], [ 1, %141 ], [ 0, %143 ], [ 1, %129 ]', 'store i8 %146, i8* %31, align 1', 'store i8 %147, i8* %23, align 1', 'store i8 %148, i8* %16, align 1', '%150 = phi i64 [ %.pre, %137 ], [ %126, %149 ]', '%152 = load i8, i8* %16, align 1', '%153 = load i8, i8* %31, align 1', '%154 = or i8 %153, %152', '%155 = icmp eq i8 %154, 0', '%156 = zext i1 %155 to i8', 'store i8 %156, i8* %R8B, align 1', '%157 = zext i1 %155 to i64', 'store i64 %157, i64* %RAX, align 8', '%158 = load i64, i64* %RSP, align 8', '%159 = add i64 %158, 32', 'store i64 %159, i64* %RSP, align 8', '%160 = icmp ugt i64 %158, -33', '%161 = zext i1 %160 to i8', 'store i8 %161, i8* %16, align 1', '%162 = trunc i64 %159 to i32', '%163 = and i32 %162, 255', '%164 = tail call i32 @llvm.ctpop.i32(i32 %163) #12', '%165 = trunc i32 %164 to i8', '%166 = and i8 %165, 1', '%167 = xor i8 %166, 1', 'store i8 %167, i8* %23, align 1', '%168 = xor i64 %159, %158', '%169 = lshr i64 %168, 4', '%170 = trunc i64 %169 to i8', '%171 = and i8 %170, 1', 'store i8 %171, i8* %28, align 1', '%172 = icmp eq i64 %159, 0', '%173 = zext i1 %172 to i8', 'store i8 %173, i8* %31, align 1', '%174 = lshr i64 %159, 63', '%175 = trunc i64 %174 to i8', 'store i8 %175, i8* %34, align 1', '%176 = lshr i64 %158, 63', '%177 = xor i64 %174, %176', '%178 = add nuw nsw i64 %177, %174', '%179 = icmp eq i64 %178, 2', '%180 = zext i1 %179 to i8', 'store i8 %180, i8* %40, align 1', '%181 = add i64 %150, 17', 'store i64 %181, i64* %PC, align 8', '%182 = add i64 %158, 40', '%183 = inttoptr i64 %159 to i64*', '%184 = load i64, i64* %183, align 8', 'store i64 %184, i64* %RBP, align 8', 'store i64 %182, i64* %RSP, align 8', '%185 = add i64 %150, 18', 'store i64 %185, i64* %PC, align 8', '%186 = inttoptr i64 %182 to i64*', '%187 = load i64, i64* %186, align 8', 'store i64 %187, i64* %PC, align 8', '%188 = add i64 %158, 48', 'store i64 %188, i64* %RSP, align 8'])
Keep: block_4151c0:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
Found line to remove! %R8B = bitcast %union.anon* %3 to i8*
Keep: %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
Found line to remove! %DX = bitcast %union.anon* %5 to i16*
Keep: %EAX = bitcast %union.anon* %4 to i32*
Found line to remove! %RAX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Found line to remove! %7 = load i64, i64* %RBP, align 8
Found line to remove! %8 = add i64 %1, 1
Found line to remove! store i64 %8, i64* %PC, align 8
Found line to remove! %9 = load i64, i64* %RSP, align 8
Found line to remove! %10 = add i64 %9, -8
Found line to remove! %11 = inttoptr i64 %10 to i64*
Found line to remove! store i64 %7, i64* %11, align 8
Keep: %12 = load i64, i64* %PC, align 8
Found line to remove! store i64 %10, i64* %RBP, align 8
Found line to remove! %13 = add i64 %9, -40
Found line to remove! store i64 %13, i64* %RSP, align 8
Found line to remove! %14 = icmp ult i64 %10, 32
Found line to remove! %15 = zext i1 %14 to i8
Found line to remove! %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %15, i8* %16, align 1
Found line to remove! %17 = trunc i64 %13 to i32
Found line to remove! %18 = and i32 %17, 255
Found line to remove! %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #12
Found line to remove! %20 = trunc i32 %19 to i8
Found line to remove! %21 = and i8 %20, 1
Found line to remove! %22 = xor i8 %21, 1
Found line to remove! %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %22, i8* %23, align 1
Found line to remove! %24 = xor i64 %10, %13
Found line to remove! %25 = lshr i64 %24, 4
Found line to remove! %26 = trunc i64 %25 to i8
Found line to remove! %27 = and i8 %26, 1
Keep: %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %27, i8* %28, align 1
Found line to remove! %29 = icmp eq i64 %13, 0
Found line to remove! %30 = zext i1 %29 to i8
Found line to remove! %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %30, i8* %31, align 1
Found line to remove! %32 = lshr i64 %13, 63
Found line to remove! %33 = trunc i64 %32 to i8
Keep: %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %33, i8* %34, align 1
Found line to remove! %35 = lshr i64 %10, 63
Found line to remove! %36 = xor i64 %32, %35
Found line to remove! %37 = add nuw nsw i64 %36, %35
Found line to remove! %38 = icmp eq i64 %37, 2
Found line to remove! %39 = zext i1 %38 to i8
Keep: %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %39, i8* %40, align 1
Found line to remove! %41 = add i64 %9, -16
Found line to remove! %42 = load i64, i64* %RDI, align 8
Found line to remove! %43 = add i64 %12, 11
Found line to remove! store i64 %43, i64* %PC, align 8
Found line to remove! %44 = inttoptr i64 %41 to i64*
Found line to remove! store i64 %42, i64* %44, align 8
Found line to remove! %45 = load i64, i64* %RBP, align 8
Found line to remove! %46 = add i64 %45, -16
Found line to remove! %47 = load i64, i64* %RSI, align 8
Keep: %48 = load i64, i64* %PC, align 8
Found line to remove! %49 = add i64 %48, 4
Found line to remove! store i64 %49, i64* %PC, align 8
Found line to remove! %50 = inttoptr i64 %46 to i64*
Found line to remove! store i64 %47, i64* %50, align 8
Found line to remove! %51 = load i64, i64* %RBP, align 8
Found line to remove! %52 = add i64 %51, -8
Keep: %53 = load i64, i64* %PC, align 8
Found line to remove! %54 = add i64 %53, 4
Found line to remove! store i64 %54, i64* %PC, align 8
Found line to remove! %55 = inttoptr i64 %52 to i64*
Found line to remove! %56 = load i64, i64* %55, align 8
Found line to remove! store i64 %56, i64* %RSI, align 8
Found line to remove! %57 = add i64 %53, 7
Found line to remove! store i64 %57, i64* %PC, align 8
Found line to remove! %58 = inttoptr i64 %56 to i16*
Found line to remove! %59 = load i16, i16* %58, align 2
Found line to remove! %60 = sext i16 %59 to i64
Found line to remove! %61 = and i64 %60, 4294967295
Found line to remove! store i64 %61, i64* %RAX, align 8
Found line to remove! %62 = add i64 %51, -16
Found line to remove! %63 = add i64 %53, 11
Found line to remove! store i64 %63, i64* %PC, align 8
Found line to remove! %64 = inttoptr i64 %62 to i64*
Found line to remove! %65 = load i64, i64* %64, align 8
Found line to remove! store i64 %65, i64* %RSI, align 8
Found line to remove! %66 = add i64 %53, 14
Found line to remove! store i64 %66, i64* %PC, align 8
Found line to remove! %67 = inttoptr i64 %65 to i16*
Found line to remove! %68 = load i16, i16* %67, align 2
Found line to remove! %69 = sext i16 %68 to i64
Found line to remove! %70 = and i64 %69, 4294967295
Found line to remove! store i64 %70, i64* %RCX, align 8
Found line to remove! %71 = sext i16 %68 to i32
Found line to remove! %72 = zext i32 %71 to i64
Found line to remove! %73 = sext i16 %59 to i32
Found line to remove! %74 = sub nsw i32 %73, %71
Found line to remove! %75 = zext i32 %74 to i64
Found line to remove! store i64 %75, i64* %RAX, align 8
Found line to remove! %76 = icmp ult i16 %59, %68
Found line to remove! %77 = zext i1 %76 to i8
Found line to remove! store i8 %77, i8* %16, align 1
Found line to remove! %78 = and i32 %74, 255
Found line to remove! %79 = tail call i32 @llvm.ctpop.i32(i32 %78) #12
Found line to remove! %80 = trunc i32 %79 to i8
Found line to remove! %81 = and i8 %80, 1
Found line to remove! %82 = xor i8 %81, 1
Found line to remove! store i8 %82, i8* %23, align 1
Found line to remove! %83 = xor i64 %72, %60
Found line to remove! %84 = trunc i64 %83 to i32
Found line to remove! %85 = xor i32 %84, %74
Found line to remove! %86 = lshr i32 %85, 4
Found line to remove! %87 = trunc i32 %86 to i8
Found line to remove! %88 = and i8 %87, 1
Found line to remove! store i8 %88, i8* %28, align 1
Found line to remove! %89 = icmp eq i32 %74, 0
Found line to remove! %90 = zext i1 %89 to i8
Found line to remove! store i8 %90, i8* %31, align 1
Found line to remove! %91 = lshr i32 %74, 31
Found line to remove! %92 = trunc i32 %91 to i8
Found line to remove! store i8 %92, i8* %34, align 1
Found line to remove! %93 = lshr i32 %73, 31
Found line to remove! %94 = lshr i32 %71, 31
Found line to remove! %95 = xor i32 %94, %93
Found line to remove! %96 = xor i32 %91, %93
Found line to remove! %97 = add nuw nsw i32 %96, %95
Found line to remove! %98 = icmp eq i32 %97, 2
Found line to remove! %99 = zext i1 %98 to i8
Found line to remove! store i8 %99, i8* %40, align 1
Found line to remove! %100 = trunc i32 %74 to i16
Found line to remove! store i16 %100, i16* %DX, align 2
Found line to remove! %101 = add i64 %51, -18
Found line to remove! %102 = add i64 %53, 23
Found line to remove! store i64 %102, i64* %PC, align 8
Found line to remove! %103 = inttoptr i64 %101 to i16*
Found line to remove! store i16 %100, i16* %103, align 2
Found line to remove! %104 = load i64, i64* %RBP, align 8
Found line to remove! %105 = add i64 %104, -18
Keep: %106 = load i64, i64* %PC, align 8
Found line to remove! %107 = add i64 %106, 4
Found line to remove! store i64 %107, i64* %PC, align 8
Found line to remove! %108 = inttoptr i64 %105 to i16*
Found line to remove! %109 = load i16, i16* %108, align 2
Found line to remove! %110 = sext i16 %109 to i64
Found line to remove! %111 = and i64 %110, 4294967295
Found line to remove! store i64 %111, i64* %RDI, align 8
Found line to remove! %112 = add i64 %106, -84839
Found line to remove! %113 = add i64 %106, 9
Found line to remove! %114 = load i64, i64* %RSP, align 8
Found line to remove! %115 = add i64 %114, -8
Found line to remove! %116 = inttoptr i64 %115 to i64*
Found line to remove! store i64 %113, i64* %116, align 8
Found line to remove! store i64 %115, i64* %RSP, align 8
Found line to remove! store i64 %112, i64* %PC, align 8
Keep: %117 = tail call fastcc %struct.Memory* @ext_674150_abs(%struct.State* nonnull %0, %struct.Memory* %2)
Keep: %118 = load i64, i64* %PC, align 8
Keep: %119 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 56) to i64*), align 8
Found line to remove! %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! store i64 %119, i64* %120, align 1
Found line to remove! %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %122 = bitcast i64* %121 to double*
Found line to remove! store double 0.000000e+00, double* %122, align 1
Keep: %123 = load i32, i32* %EAX, align 4
Keep: %124 = sitofp i32 %123 to double
Found line to remove! %125 = bitcast %union.VectorReg* %6 to double*
Found line to remove! store double %124, double* %125, align 1
Keep: %126 = add i64 %118, 16
Found line to remove! store i64 %126, i64* %PC, align 8
Keep: %127 = bitcast i64 %119 to double
Keep: %128 = fcmp uno double %127, %124
Keep: br i1 %128, label %129, label %139
Keep: 
Keep: ; <label>:129:                                    ; preds = %block_4151c0
Keep: %130 = fadd double %124, %127
Keep: %131 = bitcast double %130 to i64
Keep: %132 = and i64 %131, 9221120237041090560
Keep: %133 = icmp eq i64 %132, 9218868437227405312
Keep: %134 = and i64 %131, 2251799813685247
Keep: %135 = icmp ne i64 %134, 0
Keep: %136 = and i1 %133, %135
Keep: br i1 %136, label %137, label %145
Keep: 
Keep: ; <label>:137:                                    ; preds = %129
Keep: %138 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %126, %struct.Memory* %117) #13
Found line to remove! %.pre = load i64, i64* %PC, align 8
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: ; <label>:139:                                    ; preds = %block_4151c0
Keep: %140 = fcmp ogt double %127, %124
Keep: br i1 %140, label %145, label %141
Keep: 
Keep: ; <label>:141:                                    ; preds = %139
Keep: %142 = fcmp olt double %127, %124
Keep: br i1 %142, label %145, label %143
Keep: 
Keep: ; <label>:143:                                    ; preds = %141
Keep: %144 = fcmp oeq double %127, %124
Keep: br i1 %144, label %145, label %149
Keep: 
Keep: ; <label>:145:                                    ; preds = %143, %141, %139, %129
Found line to remove! %146 = phi i8 [ 0, %139 ], [ 0, %141 ], [ 1, %143 ], [ 1, %129 ]
Found line to remove! %147 = phi i8 [ 0, %139 ], [ 0, %141 ], [ 0, %143 ], [ 1, %129 ]
Found line to remove! %148 = phi i8 [ 0, %139 ], [ 1, %141 ], [ 0, %143 ], [ 1, %129 ]
Found line to remove! store i8 %146, i8* %31, align 1
Found line to remove! store i8 %147, i8* %23, align 1
Found line to remove! store i8 %148, i8* %16, align 1
Keep: br label %149
Keep: 
Keep: ; <label>:149:                                    ; preds = %145, %143
Keep: store i8 0, i8* %40, align 1
Keep: store i8 0, i8* %34, align 1
Keep: store i8 0, i8* %28, align 1
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: _ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %149, %137
Found line to remove! %150 = phi i64 [ %.pre, %137 ], [ %126, %149 ]
Keep: %151 = phi %struct.Memory* [ %138, %137 ], [ %117, %149 ]
Found line to remove! %152 = load i8, i8* %16, align 1
Found line to remove! %153 = load i8, i8* %31, align 1
Found line to remove! %154 = or i8 %153, %152
Found line to remove! %155 = icmp eq i8 %154, 0
Found line to remove! %156 = zext i1 %155 to i8
Found line to remove! store i8 %156, i8* %R8B, align 1
Found line to remove! %157 = zext i1 %155 to i64
Found line to remove! store i64 %157, i64* %RAX, align 8
Found line to remove! %158 = load i64, i64* %RSP, align 8
Found line to remove! %159 = add i64 %158, 32
Found line to remove! store i64 %159, i64* %RSP, align 8
Found line to remove! %160 = icmp ugt i64 %158, -33
Found line to remove! %161 = zext i1 %160 to i8
Found line to remove! store i8 %161, i8* %16, align 1
Found line to remove! %162 = trunc i64 %159 to i32
Found line to remove! %163 = and i32 %162, 255
Found line to remove! %164 = tail call i32 @llvm.ctpop.i32(i32 %163) #12
Found line to remove! %165 = trunc i32 %164 to i8
Found line to remove! %166 = and i8 %165, 1
Found line to remove! %167 = xor i8 %166, 1
Found line to remove! store i8 %167, i8* %23, align 1
Found line to remove! %168 = xor i64 %159, %158
Found line to remove! %169 = lshr i64 %168, 4
Found line to remove! %170 = trunc i64 %169 to i8
Found line to remove! %171 = and i8 %170, 1
Found line to remove! store i8 %171, i8* %28, align 1
Found line to remove! %172 = icmp eq i64 %159, 0
Found line to remove! %173 = zext i1 %172 to i8
Found line to remove! store i8 %173, i8* %31, align 1
Found line to remove! %174 = lshr i64 %159, 63
Found line to remove! %175 = trunc i64 %174 to i8
Found line to remove! store i8 %175, i8* %34, align 1
Found line to remove! %176 = lshr i64 %158, 63
Found line to remove! %177 = xor i64 %174, %176
Found line to remove! %178 = add nuw nsw i64 %177, %174
Found line to remove! %179 = icmp eq i64 %178, 2
Found line to remove! %180 = zext i1 %179 to i8
Found line to remove! store i8 %180, i8* %40, align 1
Found line to remove! %181 = add i64 %150, 17
Found line to remove! store i64 %181, i64* %PC, align 8
Found line to remove! %182 = add i64 %158, 40
Found line to remove! %183 = inttoptr i64 %159 to i64*
Found line to remove! %184 = load i64, i64* %183, align 8
Found line to remove! store i64 %184, i64* %RBP, align 8
Found line to remove! store i64 %182, i64* %RSP, align 8
Found line to remove! %185 = add i64 %150, 18
Found line to remove! store i64 %185, i64* %PC, align 8
Found line to remove! %186 = inttoptr i64 %182 to i64*
Found line to remove! %187 = load i64, i64* %186, align 8
Found line to remove! store i64 %187, i64* %PC, align 8
Found line to remove! %188 = add i64 %158, 48
Found line to remove! store i64 %188, i64* %RSP, align 8
Keep: ret %struct.Memory* %151
Missed: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0', '%R8B = bitcast %union.anon* %3 to i8*', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0', '%DX = bitcast %union.anon* %5 to i16*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%7 = load i64, i64* %RBP, align 8', '%8 = add i64 %1, 1', 'store i64 %8, i64* %PC, align 8', '%9 = load i64, i64* %RSP, align 8', '%10 = add i64 %9, -8', '%11 = inttoptr i64 %10 to i64*', 'store i64 %7, i64* %11, align 8', 'store i64 %10, i64* %RBP, align 8', '%13 = add i64 %9, -40', 'store i64 %13, i64* %RSP, align 8', '%14 = icmp ult i64 %10, 32', '%15 = zext i1 %14 to i8', '%16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %15, i8* %16, align 1', '%17 = trunc i64 %13 to i32', '%18 = and i32 %17, 255', '%19 = tail call i32 @llvm.ctpop.i32(i32 %18) #12', '%20 = trunc i32 %19 to i8', '%21 = and i8 %20, 1', '%22 = xor i8 %21, 1', '%23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %22, i8* %23, align 1', '%24 = xor i64 %10, %13', '%25 = lshr i64 %24, 4', '%26 = trunc i64 %25 to i8', '%27 = and i8 %26, 1', 'store i8 %27, i8* %28, align 1', '%29 = icmp eq i64 %13, 0', '%30 = zext i1 %29 to i8', '%31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %30, i8* %31, align 1', '%32 = lshr i64 %13, 63', '%33 = trunc i64 %32 to i8', 'store i8 %33, i8* %34, align 1', '%35 = lshr i64 %10, 63', '%36 = xor i64 %32, %35', '%37 = add nuw nsw i64 %36, %35', '%38 = icmp eq i64 %37, 2', '%39 = zext i1 %38 to i8', 'store i8 %39, i8* %40, align 1', '%41 = add i64 %9, -16', '%42 = load i64, i64* %RDI, align 8', '%43 = add i64 %12, 11', 'store i64 %43, i64* %PC, align 8', '%44 = inttoptr i64 %41 to i64*', 'store i64 %42, i64* %44, align 8', '%45 = load i64, i64* %RBP, align 8', '%46 = add i64 %45, -16', '%47 = load i64, i64* %RSI, align 8', '%49 = add i64 %48, 4', 'store i64 %49, i64* %PC, align 8', '%50 = inttoptr i64 %46 to i64*', 'store i64 %47, i64* %50, align 8', '%51 = load i64, i64* %RBP, align 8', '%52 = add i64 %51, -8', '%54 = add i64 %53, 4', 'store i64 %54, i64* %PC, align 8', '%55 = inttoptr i64 %52 to i64*', '%56 = load i64, i64* %55, align 8', 'store i64 %56, i64* %RSI, align 8', '%57 = add i64 %53, 7', 'store i64 %57, i64* %PC, align 8', '%58 = inttoptr i64 %56 to i16*', '%59 = load i16, i16* %58, align 2', '%60 = sext i16 %59 to i64', '%61 = and i64 %60, 4294967295', 'store i64 %61, i64* %RAX, align 8', '%62 = add i64 %51, -16', '%63 = add i64 %53, 11', 'store i64 %63, i64* %PC, align 8', '%64 = inttoptr i64 %62 to i64*', '%65 = load i64, i64* %64, align 8', 'store i64 %65, i64* %RSI, align 8', '%66 = add i64 %53, 14', 'store i64 %66, i64* %PC, align 8', '%67 = inttoptr i64 %65 to i16*', '%68 = load i16, i16* %67, align 2', '%69 = sext i16 %68 to i64', '%70 = and i64 %69, 4294967295', 'store i64 %70, i64* %RCX, align 8', '%71 = sext i16 %68 to i32', '%72 = zext i32 %71 to i64', '%73 = sext i16 %59 to i32', '%74 = sub nsw i32 %73, %71', '%75 = zext i32 %74 to i64', 'store i64 %75, i64* %RAX, align 8', '%76 = icmp ult i16 %59, %68', '%77 = zext i1 %76 to i8', 'store i8 %77, i8* %16, align 1', '%78 = and i32 %74, 255', '%79 = tail call i32 @llvm.ctpop.i32(i32 %78) #12', '%80 = trunc i32 %79 to i8', '%81 = and i8 %80, 1', '%82 = xor i8 %81, 1', 'store i8 %82, i8* %23, align 1', '%83 = xor i64 %72, %60', '%84 = trunc i64 %83 to i32', '%85 = xor i32 %84, %74', '%86 = lshr i32 %85, 4', '%87 = trunc i32 %86 to i8', '%88 = and i8 %87, 1', 'store i8 %88, i8* %28, align 1', '%89 = icmp eq i32 %74, 0', '%90 = zext i1 %89 to i8', 'store i8 %90, i8* %31, align 1', '%91 = lshr i32 %74, 31', '%92 = trunc i32 %91 to i8', 'store i8 %92, i8* %34, align 1', '%93 = lshr i32 %73, 31', '%94 = lshr i32 %71, 31', '%95 = xor i32 %94, %93', '%96 = xor i32 %91, %93', '%97 = add nuw nsw i32 %96, %95', '%98 = icmp eq i32 %97, 2', '%99 = zext i1 %98 to i8', 'store i8 %99, i8* %40, align 1', '%100 = trunc i32 %74 to i16', 'store i16 %100, i16* %DX, align 2', '%101 = add i64 %51, -18', '%102 = add i64 %53, 23', 'store i64 %102, i64* %PC, align 8', '%103 = inttoptr i64 %101 to i16*', 'store i16 %100, i16* %103, align 2', '%104 = load i64, i64* %RBP, align 8', '%105 = add i64 %104, -18', '%107 = add i64 %106, 4', 'store i64 %107, i64* %PC, align 8', '%108 = inttoptr i64 %105 to i16*', '%109 = load i16, i16* %108, align 2', '%110 = sext i16 %109 to i64', '%111 = and i64 %110, 4294967295', 'store i64 %111, i64* %RDI, align 8', '%112 = add i64 %106, -84839', '%113 = add i64 %106, 9', '%114 = load i64, i64* %RSP, align 8', '%115 = add i64 %114, -8', '%116 = inttoptr i64 %115 to i64*', 'store i64 %113, i64* %116, align 8', 'store i64 %115, i64* %RSP, align 8', 'store i64 %112, i64* %PC, align 8', '%120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %119, i64* %120, align 1', '%121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%122 = bitcast i64* %121 to double*', 'store double 0.000000e+00, double* %122, align 1', '%125 = bitcast %union.VectorReg* %6 to double*', 'store double %124, double* %125, align 1', 'store i64 %126, i64* %PC, align 8', '%.pre = load i64, i64* %PC, align 8', '%146 = phi i8 [ 0, %139 ], [ 0, %141 ], [ 1, %143 ], [ 1, %129 ]', '%147 = phi i8 [ 0, %139 ], [ 0, %141 ], [ 0, %143 ], [ 1, %129 ]', '%148 = phi i8 [ 0, %139 ], [ 1, %141 ], [ 0, %143 ], [ 1, %129 ]', 'store i8 %146, i8* %31, align 1', 'store i8 %147, i8* %23, align 1', 'store i8 %148, i8* %16, align 1', '%150 = phi i64 [ %.pre, %137 ], [ %126, %149 ]', '%152 = load i8, i8* %16, align 1', '%153 = load i8, i8* %31, align 1', '%154 = or i8 %153, %152', '%155 = icmp eq i8 %154, 0', '%156 = zext i1 %155 to i8', 'store i8 %156, i8* %R8B, align 1', '%157 = zext i1 %155 to i64', 'store i64 %157, i64* %RAX, align 8', '%158 = load i64, i64* %RSP, align 8', '%159 = add i64 %158, 32', 'store i64 %159, i64* %RSP, align 8', '%160 = icmp ugt i64 %158, -33', '%161 = zext i1 %160 to i8', 'store i8 %161, i8* %16, align 1', '%162 = trunc i64 %159 to i32', '%163 = and i32 %162, 255', '%164 = tail call i32 @llvm.ctpop.i32(i32 %163) #12', '%165 = trunc i32 %164 to i8', '%166 = and i8 %165, 1', '%167 = xor i8 %166, 1', 'store i8 %167, i8* %23, align 1', '%168 = xor i64 %159, %158', '%169 = lshr i64 %168, 4', '%170 = trunc i64 %169 to i8', '%171 = and i8 %170, 1', 'store i8 %171, i8* %28, align 1', '%172 = icmp eq i64 %159, 0', '%173 = zext i1 %172 to i8', 'store i8 %173, i8* %31, align 1', '%174 = lshr i64 %159, 63', '%175 = trunc i64 %174 to i8', 'store i8 %175, i8* %34, align 1', '%176 = lshr i64 %158, 63', '%177 = xor i64 %174, %176', '%178 = add nuw nsw i64 %177, %174', '%179 = icmp eq i64 %178, 2', '%180 = zext i1 %179 to i8', 'store i8 %180, i8* %40, align 1', '%181 = add i64 %150, 17', 'store i64 %181, i64* %PC, align 8', '%182 = add i64 %158, 40', '%183 = inttoptr i64 %159 to i64*', '%184 = load i64, i64* %183, align 8', 'store i64 %184, i64* %RBP, align 8', 'store i64 %182, i64* %RSP, align 8', '%185 = add i64 %150, 18', 'store i64 %185, i64* %PC, align 8', '%186 = inttoptr i64 %182 to i64*', '%187 = load i64, i64* %186, align 8', 'store i64 %187, i64* %PC, align 8', '%188 = add i64 %158, 48', 'store i64 %188, i64* %RSP, align 8'])Writing '/tmp/tmp_9wa0_8p.dot'...
Writing '/tmp/tmp_9wa0_8p.dot':Done

Reading LLVM: /tmp/tmp2_qs1zco-query.ll
Extracting function [_Z15tolerance_equalIsEbRT_S1_] from /tmp/tmp2_qs1zco-query.ll
Dot file generated!
Writing '/tmp/tmpc5rvmx2d.dot'...
Writing '/tmp/tmpc5rvmx2d.dot':Done

Reading LLVM: /tmp/tmpdlisz8b7-target.ll
Extracting function [_Z15tolerance_equalIsEbRT_S1_] from /tmp/tmpdlisz8b7-target.ll
Dot file generated!

================ Starting round 2
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 2 %var_2_32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 3 %var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 4 %var_2_55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 5 %var_2_117 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
- 6 %var_2_118 = load i64, i64* %var_2_3, align 8
- 7 %var_2_119 = add i64 %var_2_118, ptrtoint (%G_0x3860__rip__type* @G_0x3860__rip_ to i64)
- 8 %var_2_120 = add i64 %var_2_118, 8
- 9 store i64 %var_2_120, i64* %var_2_3, align 8
- 10 %var_2_121 = inttoptr i64 %var_2_119 to i64*
- 11 %var_2_122 = load i64, i64* %var_2_121, align 8
- 12 %var_2_123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 13 store i64 %var_2_122, i64* %var_2_123, align 1
- 14 %EAX.i = bitcast %union.anon* %var_2_55 to i32*
- 15 %var_2_127 = load i32, i32* %EAX.i, align 4
- 16 %var_2_128 = sitofp i32 %var_2_127 to double
- 17 %var_2_130 = add i64 %var_2_118, 16
- 18 %var_2_131 = bitcast i64 %var_2_122 to double
- 19 %var_2_132 = fcmp uno double %var_2_131, %var_2_128
- 20 \<badref\> = br i1 %var_2_132, label %var_2_133, label %var_2_153
- 21 %var_2_134 = fadd double %var_2_131, %var_2_128
- 22 %var_2_135 = bitcast double %var_2_134 to i64
- 23 %var_2_136 = and i64 %var_2_135, 9221120237041090560
- 24 %var_2_137 = icmp eq i64 %var_2_136, 9218868437227405312
- 25 %var_2_138 = and i64 %var_2_135, 2251799813685247
- 26 %var_2_139 = icmp ne i64 %var_2_138, 0
- 27 %var_2_140 = and i1 %var_2_137, %var_2_139
- 28 \<badref\> = br i1 %var_2_140, label %var_2_141, label %var_2_153
- 29 %var_2_142 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_130, %struct.Memory* %var_2_117)
- 30 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 31 store i8 0, i8* %var_2_38, align 1
- 32 store i8 0, i8* %var_2_32, align 1
- 33 store i8 0, i8* %var_2_26, align 1
- 34 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 35 %var_2_155 = phi %struct.Memory* [ %var_2_142, %var_2_141 ], [ %var_2_117, %var_2_153 ]
- 36 \<badref\> = ret %struct.Memory* %var_2_155
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd98e5d3048>, {0: {0}, 1: {3}, 2: {4}, 3: {5}, 4: {1}, 5: {6, 22}, 6: {8, 9, 7}, 7: set(), 8: set(), 9: {24, 25, 26}, 10: set(), 11: {8, 9, 7}, 12: set(), 13: {24, 25, 26}, 14: {2, 15}, 15: {8, 9, 7}, 16: {10}, 17: {11}, 18: {2, 15}, 19: {12}, 20: {21, 13}, 21: {14}, 22: {2, 15}, 23: {16}, 24: {17}, 25: {18}, 26: {19}, 27: {20}, 28: {21, 13}, 29: {6, 22}, 30: {27, 23}, 31: {24, 25, 26}, 32: {24, 25, 26}, 33: {24, 25, 26}, 34: {27, 23}, 35: {28}, 36: {29}})
Equivalent! frozenset({27, 23}) {34, 30}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd98e5d3048>, {0: {0}, 1: {3}, 2: {4}, 3: {5}, 4: set(), 5: {6, 22}, 6: {7}, 7: set(), 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: {11}, 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: {22}, 30: {23}, 31: {24}, 32: {25}, 33: {26}, 34: {27}, 35: {28}, 36: {29}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
NO MATCH 4
MORE 5 POT: 2
EXACT 6 load load
NO MATCH 7
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
EXACT 17 add add
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
EXACT 29 tail tail
EXACT 30 br br
EXACT 31 store store
EXACT 32 store store
EXACT 33 store store
EXACT 34 br br
EXACT 35 phi phi
EXACT 36 ret ret
================ Starting round 3
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %EAX = bitcast %union.anon* %var_2_4 to i32*
- 3 %var_2_28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 4 %var_2_34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 5 %var_2_40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 6 %var_2_117 = tail call fastcc %struct.Memory* @ext_674150_abs(%struct.State* nonnull %0, %struct.Memory* %2)
- 7 %var_2_118 = load i64, i64* %PC, align 8
- 8 %var_2_1192 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 56) to double*), align 8
- 9 %var_2_123 = load i32, i32* %EAX, align 4
- 10 %var_2_124 = sitofp i32 %var_2_123 to double
- 11 %var_2_126 = add i64 %var_2_118, 16
- 12 %var_2_128 = fcmp uno double %var_2_1192, %var_2_124
- 13 \<badref\> = br i1 %var_2_128, label %var_2_129, label %var_2_149
- 14 %var_2_130 = fadd double %var_2_1192, %var_2_124
- 15 %var_2_131 = bitcast double %var_2_130 to i64
- 16 %var_2_132 = and i64 %var_2_131, 9221120237041090560
- 17 %var_2_133 = icmp eq i64 %var_2_132, 9218868437227405312
- 18 %var_2_134 = and i64 %var_2_131, 2251799813685247
- 19 %var_2_135 = icmp ne i64 %var_2_134, 0
- 20 %var_2_136 = and i1 %var_2_133, %var_2_135
- 21 \<badref\> = br i1 %var_2_136, label %var_2_137, label %var_2_149
- 22 %var_2_138 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_126, %struct.Memory* %var_2_117) #13
- 23 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 24 store i8 0, i8* %var_2_40, align 1
- 25 store i8 0, i8* %var_2_34, align 1
- 26 store i8 0, i8* %var_2_28, align 1
- 27 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 28 %var_2_151 = phi %struct.Memory* [ %var_2_138, %var_2_137 ], [ %var_2_117, %var_2_149 ]
- 29 \<badref\> = ret %struct.Memory* %var_2_151
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd98e4507b8>, {0: {0}, 1: {4}, 2: {18, 14, 22}, 3: {1}, 4: {2}, 5: {3}, 6: {29, 5}, 7: {11, 6, 15}, 8: {11, 6, 15}, 9: {11, 6, 15}, 10: {16}, 11: {17}, 12: {19}, 13: {20, 28}, 14: {21}, 15: {18, 14, 22}, 16: {23}, 17: {24}, 18: {25}, 19: {26}, 20: {27}, 21: {20, 28}, 22: {29, 5}, 23: {34, 30}, 24: {32, 33, 9, 13, 31}, 25: {32, 33, 9, 13, 31}, 26: {32, 33, 9, 13, 31}, 27: {34, 30}, 28: {35}, 29: {36}})
Equivalent! frozenset({34, 30}) {27, 23}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd98e4507b8>, {0: {0}, 1: set(), 2: set(), 3: {1}, 4: {2}, 5: {3}, 6: {29, 5}, 7: {6}, 8: set(), 9: set(), 10: set(), 11: {17}, 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: {29}, 23: {30}, 24: {31}, 25: {32}, 26: {33}, 27: {34}, 28: {35}, 29: {36}})
EXACT 0 getelementptr getelementptr
NO MATCH 1
NO MATCH 2
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
MORE 6 POT: 2
EXACT 7 load load
NO MATCH 8
NO MATCH 9
NO MATCH 10
EXACT 11 add add
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
EXACT 22 tail tail
EXACT 23 br br
EXACT 24 store store
EXACT 25 store store
EXACT 26 store store
EXACT 27 br br
EXACT 28 phi phi
EXACT 29 ret ret
FP: 63 2.0 False
TO REMOVE: dict_keys(['store i8 0, i8* %var_2_32, align 1', 'store i8 0, i8* %var_2_26, align 1', '%var_2_32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 0, i8* %var_2_38, align 1'])Writing '/tmp/tmp8ke5d950.dot'...
Writing '/tmp/tmp8ke5d950.dot':Done

Reading LLVM: /tmp/tmp2_qs1zco-query.ll
Extracting function [_Z15tolerance_equalIsEbRT_S1_] from /tmp/tmp2_qs1zco-query.ll
Dot file generated!
Writing '/tmp/tmpy7ev0zci.dot'...
Writing '/tmp/tmpy7ev0zci.dot':Done

Reading LLVM: /tmp/tmpdlisz8b7-target.ll
Extracting function [_Z15tolerance_equalIsEbRT_S1_] from /tmp/tmpdlisz8b7-target.ll
Dot file generated!

Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %var_2_32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Keep: %var_2_55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %var_2_117 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
Keep: %var_2_118 = load i64, i64* %var_2_3, align 8
Keep: %var_2_119 = add i64 %var_2_118, ptrtoint (%G_0x3860__rip__type* @G_0x3860__rip_ to i64)
Keep: %var_2_120 = add i64 %var_2_118, 8
Keep: store i64 %var_2_120, i64* %var_2_3, align 8
Keep: %var_2_121 = inttoptr i64 %var_2_119 to i64*
Keep: %var_2_122 = load i64, i64* %var_2_121, align 8
Keep: %var_2_123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_122, i64* %var_2_123, align 1
Keep: %EAX.i = bitcast %union.anon* %var_2_55 to i32*
Keep: %var_2_127 = load i32, i32* %EAX.i, align 4
Keep: %var_2_128 = sitofp i32 %var_2_127 to double
Keep: %var_2_130 = add i64 %var_2_118, 16
Keep: %var_2_131 = bitcast i64 %var_2_122 to double
Keep: %var_2_132 = fcmp uno double %var_2_131, %var_2_128
Keep: br i1 %var_2_132, label %var_2_133, label %var_2_153
Keep: 
Keep: var_2_133:                                        ; preds = %entry
Keep: %var_2_134 = fadd double %var_2_131, %var_2_128
Keep: %var_2_135 = bitcast double %var_2_134 to i64
Keep: %var_2_136 = and i64 %var_2_135, 9221120237041090560
Keep: %var_2_137 = icmp eq i64 %var_2_136, 9218868437227405312
Keep: %var_2_138 = and i64 %var_2_135, 2251799813685247
Keep: %var_2_139 = icmp ne i64 %var_2_138, 0
Keep: %var_2_140 = and i1 %var_2_137, %var_2_139
Keep: br i1 %var_2_140, label %var_2_141, label %var_2_153
Keep: 
Keep: var_2_141:                                        ; preds = %var_2_133
Keep: %var_2_142 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_130, %struct.Memory* %var_2_117)
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: var_2_153:                                        ; preds = %entry, %var_2_133
Found line to remove! store i8 0, i8* %var_2_38, align 1
Found line to remove! store i8 0, i8* %var_2_32, align 1
Found line to remove! store i8 0, i8* %var_2_26, align 1
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: routine_ucomisd__xmm1___xmm0.exit:                ; preds = %var_2_153, %var_2_141
Keep: %var_2_155 = phi %struct.Memory* [ %var_2_142, %var_2_141 ], [ %var_2_117, %var_2_153 ]
Keep: ret %struct.Memory* %var_2_155
Missed: dict_keys(['store i8 0, i8* %var_2_32, align 1', 'store i8 0, i8* %var_2_26, align 1', '%var_2_32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 0, i8* %var_2_38, align 1'])
TO REMOVE: dict_keys(['%var_2_28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 0, i8* %var_2_40, align 1', 'store i8 0, i8* %var_2_34, align 1', 'store i8 0, i8* %var_2_28, align 1'])
Keep: block_4151c0:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %var_2_4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %EAX = bitcast %union.anon* %var_2_4 to i32*
Found line to remove! %var_2_28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %var_2_34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %var_2_40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Keep: %var_2_117 = tail call fastcc %struct.Memory* @ext_674150_abs(%struct.State* nonnull %0, %struct.Memory* %2)
Keep: %var_2_118 = load i64, i64* %PC, align 8
Keep: %var_2_1192 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 56) to double*), align 8
Keep: %var_2_123 = load i32, i32* %EAX, align 4
Keep: %var_2_124 = sitofp i32 %var_2_123 to double
Keep: %var_2_126 = add i64 %var_2_118, 16
Keep: %var_2_128 = fcmp uno double %var_2_1192, %var_2_124
Keep: br i1 %var_2_128, label %var_2_129, label %var_2_149
Keep: 
Keep: var_2_129:                                        ; preds = %block_4151c0
Keep: %var_2_130 = fadd double %var_2_1192, %var_2_124
Keep: %var_2_131 = bitcast double %var_2_130 to i64
Keep: %var_2_132 = and i64 %var_2_131, 9221120237041090560
Keep: %var_2_133 = icmp eq i64 %var_2_132, 9218868437227405312
Keep: %var_2_134 = and i64 %var_2_131, 2251799813685247
Keep: %var_2_135 = icmp ne i64 %var_2_134, 0
Keep: %var_2_136 = and i1 %var_2_133, %var_2_135
Keep: br i1 %var_2_136, label %var_2_137, label %var_2_149
Keep: 
Keep: var_2_137:                                        ; preds = %var_2_129
Keep: %var_2_138 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_126, %struct.Memory* %var_2_117) #13
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: var_2_149:                                        ; preds = %block_4151c0, %var_2_129
Found line to remove! store i8 0, i8* %var_2_40, align 1
Found line to remove! store i8 0, i8* %var_2_34, align 1
Found line to remove! store i8 0, i8* %var_2_28, align 1
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: _ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %var_2_149, %var_2_137
Keep: %var_2_151 = phi %struct.Memory* [ %var_2_138, %var_2_137 ], [ %var_2_117, %var_2_149 ]
Keep: ret %struct.Memory* %var_2_151
Missed: dict_keys(['%var_2_28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 0, i8* %var_2_40, align 1', 'store i8 0, i8* %var_2_34, align 1', 'store i8 0, i8* %var_2_28, align 1'])
================ Starting round 4
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %var_2_117 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
- 3 %var_2_118 = load i64, i64* %var_2_3, align 8
- 4 %var_2_119 = add i64 %var_2_118, ptrtoint (%G_0x3860__rip__type* @G_0x3860__rip_ to i64)
- 5 %var_2_120 = add i64 %var_2_118, 8
- 6 store i64 %var_2_120, i64* %var_2_3, align 8
- 7 %var_2_121 = inttoptr i64 %var_2_119 to i64*
- 8 %var_2_122 = load i64, i64* %var_2_121, align 8
- 9 %var_2_123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 10 store i64 %var_2_122, i64* %var_2_123, align 1
- 11 %EAX.i = bitcast %union.anon* %var_2_55 to i32*
- 12 %var_2_127 = load i32, i32* %EAX.i, align 4
- 13 %var_2_128 = sitofp i32 %var_2_127 to double
- 14 %var_2_130 = add i64 %var_2_118, 16
- 15 %var_2_131 = bitcast i64 %var_2_122 to double
- 16 %var_2_132 = fcmp uno double %var_2_131, %var_2_128
- 17 \<badref\> = br i1 %var_2_132, label %var_2_133, label %routine_ucomisd__xmm1___xmm0.exit
- 18 %var_2_134 = fadd double %var_2_131, %var_2_128
- 19 %var_2_135 = bitcast double %var_2_134 to i64
- 20 %var_2_136 = and i64 %var_2_135, 9221120237041090560
- 21 %var_2_137 = icmp eq i64 %var_2_136, 9218868437227405312
- 22 %var_2_138 = and i64 %var_2_135, 2251799813685247
- 23 %var_2_139 = icmp ne i64 %var_2_138, 0
- 24 %var_2_140 = and i1 %var_2_137, %var_2_139
- 25 \<badref\> = br i1 %var_2_140, label %var_2_141, label %routine_ucomisd__xmm1___xmm0.exit
- 26 %var_2_142 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_130, %struct.Memory* %var_2_117)
- 27 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 28 %var_2_155 = phi %struct.Memory* [ %var_2_142, %var_2_141 ], [ %var_2_117, %var_2_133 ], [ %var_2_117, %entry ]
- 29 \<badref\> = ret %struct.Memory* %var_2_155
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd98ed62d08>, {0: {0}, 1: {1}, 2: {19, 3}, 3: {4, 5, 6}, 4: set(), 5: set(), 6: set(), 7: set(), 8: {4, 5, 6}, 9: set(), 10: set(), 11: {2, 12}, 12: {4, 5, 6}, 13: {7}, 14: {8}, 15: {2, 12}, 16: {9}, 17: {10, 18}, 18: {11}, 19: {2, 12}, 20: {13}, 21: {14}, 22: {15}, 23: {16}, 24: {17}, 25: {10, 18}, 26: {19, 3}, 27: {20}, 28: {21}, 29: {22}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd98ed62d08>, {0: {0}, 1: set(), 2: {19, 3}, 3: {4}, 4: set(), 5: set(), 6: set(), 7: set(), 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: {8}, 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: {19}, 27: {20}, 28: {21}, 29: {22}})
EXACT 0 getelementptr getelementptr
NO MATCH 1
MORE 2 POT: 2
EXACT 3 load load
NO MATCH 4
NO MATCH 5
NO MATCH 6
NO MATCH 7
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
EXACT 14 add add
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
EXACT 26 tail tail
EXACT 27 br br
EXACT 28 phi phi
EXACT 29 ret ret
================ Starting round 5
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %EAX = bitcast %union.anon* %var_2_4 to i32*
- 3 %var_2_117 = tail call fastcc %struct.Memory* @ext_674150_abs(%struct.State* nonnull %0, %struct.Memory* %2)
- 4 %var_2_118 = load i64, i64* %PC, align 8
- 5 %var_2_1192 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 56) to double*), align 8
- 6 %var_2_123 = load i32, i32* %EAX, align 4
- 7 %var_2_124 = sitofp i32 %var_2_123 to double
- 8 %var_2_126 = add i64 %var_2_118, 16
- 9 %var_2_128 = fcmp uno double %var_2_1192, %var_2_124
- 10 \<badref\> = br i1 %var_2_128, label %var_2_129, label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 11 %var_2_130 = fadd double %var_2_1192, %var_2_124
- 12 %var_2_131 = bitcast double %var_2_130 to i64
- 13 %var_2_132 = and i64 %var_2_131, 9221120237041090560
- 14 %var_2_133 = icmp eq i64 %var_2_132, 9218868437227405312
- 15 %var_2_134 = and i64 %var_2_131, 2251799813685247
- 16 %var_2_135 = icmp ne i64 %var_2_134, 0
- 17 %var_2_136 = and i1 %var_2_133, %var_2_135
- 18 \<badref\> = br i1 %var_2_136, label %var_2_137, label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 19 %var_2_138 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_126, %struct.Memory* %var_2_117) #13
- 20 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 21 %var_2_151 = phi %struct.Memory* [ %var_2_138, %var_2_137 ], [ %var_2_117, %var_2_129 ], [ %var_2_117, %block_4151c0 ]
- 22 \<badref\> = ret %struct.Memory* %var_2_151
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd98e4506a8>, {0: {0}, 1: {1}, 2: {19, 11, 15}, 3: {2, 26}, 4: {8, 3, 12}, 5: {8, 3, 12}, 6: {8, 3, 12}, 7: {13}, 8: {14}, 9: {16}, 10: {17, 25}, 11: {18}, 12: {19, 11, 15}, 13: {20}, 14: {21}, 15: {22}, 16: {23}, 17: {24}, 18: {17, 25}, 19: {2, 26}, 20: {27}, 21: {28}, 22: {29}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd98e4506a8>, {0: {0}, 1: set(), 2: set(), 3: {2, 26}, 4: {3}, 5: set(), 6: set(), 7: set(), 8: {14}, 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: {26}, 20: {27}, 21: {28}, 22: {29}})
EXACT 0 getelementptr getelementptr
NO MATCH 1
NO MATCH 2
MORE 3 POT: 2
EXACT 4 load load
NO MATCH 5
NO MATCH 6
NO MATCH 7
EXACT 8 add add
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
EXACT 19 tail tail
EXACT 20 br br
EXACT 21 phi phi
EXACT 22 ret ret
FP: 63 3.0 False
TO REMOVE: dict_keys([])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %var_2_55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %var_2_117 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
Keep: %var_2_118 = load i64, i64* %var_2_3, align 8
Keep: %var_2_119 = add i64 %var_2_118, ptrtoint (%G_0x3860__rip__type* @G_0x3860__rip_ to i64)
Keep: %var_2_120 = add i64 %var_2_118, 8
Keep: store i64 %var_2_120, i64* %var_2_3, align 8
Keep: %var_2_121 = inttoptr i64 %var_2_119 to i64*
Keep: %var_2_122 = load i64, i64* %var_2_121, align 8
Keep: %var_2_123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_122, i64* %var_2_123, align 1
Keep: %EAX.i = bitcast %union.anon* %var_2_55 to i32*
Keep: %var_2_127 = load i32, i32* %EAX.i, align 4
Keep: %var_2_128 = sitofp i32 %var_2_127 to double
Keep: %var_2_130 = add i64 %var_2_118, 16
Keep: %var_2_131 = bitcast i64 %var_2_122 to double
Keep: %var_2_132 = fcmp uno double %var_2_131, %var_2_128
Keep: br i1 %var_2_132, label %var_2_133, label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: var_2_133:                                        ; preds = %entry
Keep: %var_2_134 = fadd double %var_2_131, %var_2_128
Keep: %var_2_135 = bitcast double %var_2_134 to i64
Keep: %var_2_136 = and i64 %var_2_135, 9221120237041090560
Keep: %var_2_137 = icmp eq i64 %var_2_136, 9218868437227405312
Keep: %var_2_138 = and i64 %var_2_135, 2251799813685247
Keep: %var_2_139 = icmp ne i64 %var_2_138, 0
Keep: %var_2_140 = and i1 %var_2_137, %var_2_139
Keep: br i1 %var_2_140, label %var_2_141, label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: var_2_141:                                        ; preds = %var_2_133
Keep: %var_2_142 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_130, %struct.Memory* %var_2_117)
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: routine_ucomisd__xmm1___xmm0.exit:                ; preds = %entry, %var_2_133, %var_2_141
Keep: %var_2_155 = phi %struct.Memory* [ %var_2_142, %var_2_141 ], [ %var_2_117, %var_2_133 ], [ %var_2_117, %entry ]
Keep: ret %struct.Memory* %var_2_155
Missed: dict_keys([])
TO REMOVE: dict_keys([])
Keep: block_4151c0:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %var_2_4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %EAX = bitcast %union.anon* %var_2_4 to i32*
Keep: %var_2_117 = tail call fastcc %struct.Memory* @ext_674150_abs(%struct.State* nonnull %0, %struct.Memory* %2)
Keep: %var_2_118 = load i64, i64* %PC, align 8
Keep: %var_2_1192 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 56) to double*), align 8
Keep: %var_2_123 = load i32, i32* %EAX, align 4
Keep: %var_2_124 = sitofp i32 %var_2_123 to double
Keep: %var_2_126 = add i64 %var_2_118, 16
Keep: %var_2_128 = fcmp uno double %var_2_1192, %var_2_124
Keep: br i1 %var_2_128, label %var_2_129, label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: var_2_129:                                        ; preds = %block_4151c0
Keep: %var_2_130 = fadd double %var_2_1192, %var_2_124
Keep: %var_2_131 = bitcast double %var_2_130 to i64
Keep: %var_2_132 = and i64 %var_2_131, 9221120237041090560
Keep: %var_2_133 = icmp eq i64 %var_2_132, 9218868437227405312
Keep: %var_2_134 = and i64 %var_2_131, 2251799813685247
Keep: %var_2_135 = icmp ne i64 %var_2_134, 0
Keep: %var_2_136 = and i1 %var_2_133, %var_2_135
Keep: br i1 %var_2_136, label %var_2_137, label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: var_2_137:                                        ; preds = %var_2_129
Keep: %var_2_138 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_126, %struct.Memory* %var_2_117) #13
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: _ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %block_4151c0, %var_2_129, %var_2_137
Keep: %var_2_151 = phi %struct.Memory* [ %var_2_138, %var_2_137 ], [ %var_2_117, %var_2_129 ], [ %var_2_117, %block_4151c0 ]
Keep: ret %struct.Memory* %var_2_151
Missed: dict_keys([])
[x] Exhausted iterations without definitive match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_constant_folding/_Z15tolerance_equalIsEbRT_S1_/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_constant_folding/binary/test.mcsema.calls_renamed.ll _Z15tolerance_equalIsEbRT_S1_
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_constant_folding/_Z15tolerance_equalIsEbRT_S1_/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_constant_folding/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
