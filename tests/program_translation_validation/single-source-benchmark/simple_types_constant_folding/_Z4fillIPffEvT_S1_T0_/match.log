Writing '/tmp/tmpkolhhc43.dot'...
Writing '/tmp/tmpkolhhc43.dot':Done

Reading LLVM: /tmp/tmpmg7dcs50-query.ll
Extracting function [_Z4fillIPffEvT_S1_T0_] from /tmp/tmpmg7dcs50-query.ll
Dot file generated!
Writing '/tmp/tmpc655b2wb.dot'...
Writing '/tmp/tmpc655b2wb.dot':Done

Reading LLVM: /tmp/tmpbkpa8_ou-target.ll
Extracting function [_Z4fillIPffEvT_S1_T0_] from /tmp/tmpbkpa8_ou-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 store i64 %8, i64* %6, align 8
- 11 %10 = load i64, i64* %3, align 8
- 12 store i64 %8, i64* %RBP.i, align 8
- 13 %RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 14 %11 = add i64 %7, -16
- 15 %12 = load i64, i64* %RDI.i, align 8
- 16 %13 = add i64 %10, 7
- 17 store i64 %13, i64* %3, align 8
- 18 %14 = inttoptr i64 %11 to i64*
- 19 store i64 %12, i64* %14, align 8
- 20 %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 21 %15 = load i64, i64* %RBP.i, align 8
- 22 %16 = add i64 %15, -16
- 23 %17 = load i64, i64* %RSI.i, align 8
- 24 %18 = load i64, i64* %3, align 8
- 25 %19 = add i64 %18, 4
- 26 store i64 %19, i64* %3, align 8
- 27 %20 = inttoptr i64 %16 to i64*
- 28 store i64 %17, i64* %20, align 8
- 29 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
- 30 %22 = load i64, i64* %RBP.i, align 8
- 31 %23 = add i64 %22, -20
- 32 %24 = load i64, i64* %3, align 8
- 33 %25 = add i64 %24, 5
- 34 store i64 %25, i64* %3, align 8
- 35 %26 = bitcast %union.VectorReg* %21 to \<2 x float\>*
- 36 %27 = load \<2 x float\>, \<2 x float\>* %26, align 1
- 37 %28 = extractelement \<2 x float\> %27, i32 0
- 38 %29 = inttoptr i64 %23 to float*
- 39 store float %28, float* %29, align 4
- 40 %RAX.i23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 41 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 42 %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 43 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 44 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 45 %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 46 %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 47 %36 = bitcast %union.VectorReg* %21 to i8*
- 48 %37 = bitcast %union.VectorReg* %21 to i32*
- 49 %38 = getelementptr inbounds i8, i8* %36, i64 4
- 50 %39 = bitcast i8* %38 to float*
- 51 %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 52 %41 = bitcast i64* %40 to float*
- 53 %42 = getelementptr inbounds i8, i8* %36, i64 12
- 54 %43 = bitcast i8* %42 to float*
- 55 %RCX.i12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 56 %44 = bitcast i64* %RAX.i23 to float**
- 57 %.pre = load i64, i64* %3, align 8
- 58 \<badref\> = br label %block_.L_40d181
- 59 %45 = phi i64 [ %116, %block_40d18f ], [ %.pre, %entry ]
- 60 %46 = load i64, i64* %RBP.i, align 8
- 61 %47 = add i64 %46, -8
- 62 %48 = add i64 %45, 4
- 63 store i64 %48, i64* %3, align 8
- 64 %49 = inttoptr i64 %47 to i64*
- 65 %50 = load i64, i64* %49, align 8
- 66 store i64 %50, i64* %RAX.i23, align 8
- 67 %51 = add i64 %46, -16
- 68 %52 = add i64 %45, 8
- 69 store i64 %52, i64* %3, align 8
- 70 %53 = inttoptr i64 %51 to i64*
- 71 %54 = load i64, i64* %53, align 8
- 72 %55 = sub i64 %50, %54
- 73 %56 = icmp ult i64 %50, %54
- 74 %57 = zext i1 %56 to i8
- 75 store i8 %57, i8* %30, align 1
- 76 %58 = trunc i64 %55 to i32
- 77 %59 = and i32 %58, 255
- 78 %60 = tail call i32 @llvm.ctpop.i32(i32 %59)
- 79 %61 = trunc i32 %60 to i8
- 80 %62 = and i8 %61, 1
- 81 %63 = xor i8 %62, 1
- 82 store i8 %63, i8* %31, align 1
- 83 %64 = xor i64 %54, %50
- 84 %65 = xor i64 %64, %55
- 85 %66 = lshr i64 %65, 4
- 86 %67 = trunc i64 %66 to i8
- 87 %68 = and i8 %67, 1
- 88 store i8 %68, i8* %32, align 1
- 89 %69 = icmp eq i64 %55, 0
- 90 %70 = zext i1 %69 to i8
- 91 store i8 %70, i8* %33, align 1
- 92 %71 = lshr i64 %55, 63
- 93 %72 = trunc i64 %71 to i8
- 94 store i8 %72, i8* %34, align 1
- 95 %73 = lshr i64 %50, 63
- 96 %74 = lshr i64 %54, 63
- 97 %75 = xor i64 %74, %73
- 98 %76 = xor i64 %71, %73
- 99 %77 = add nuw nsw i64 %76, %75
- 100 %78 = icmp eq i64 %77, 2
- 101 %79 = zext i1 %78 to i8
- 102 store i8 %79, i8* %35, align 1
- 103 %.v = select i1 %69, i64 43, i64 14
- 104 %80 = add i64 %45, %.v
- 105 store i64 %80, i64* %3, align 8
- 106 \<badref\> = br i1 %69, label %block_.L_40d1ac, label %block_40d18f
- 107 %81 = add i64 %46, -20
- 108 %82 = add i64 %80, 5
- 109 store i64 %82, i64* %3, align 8
- 110 %83 = inttoptr i64 %81 to i32*
- 111 %84 = load i32, i32* %83, align 4
- 112 store i32 %84, i32* %37, align 1
- 113 store float 0.000000e+00, float* %39, align 1
- 114 store float 0.000000e+00, float* %41, align 1
- 115 store float 0.000000e+00, float* %43, align 1
- 116 %85 = add i64 %80, 9
- 117 store i64 %85, i64* %3, align 8
- 118 %86 = load i64, i64* %49, align 8
- 119 store i64 %86, i64* %RAX.i23, align 8
- 120 %87 = add i64 %86, 4
- 121 store i64 %87, i64* %RCX.i12, align 8
- 122 %88 = icmp ugt i64 %86, -5
- 123 %89 = zext i1 %88 to i8
- 124 store i8 %89, i8* %30, align 1
- 125 %90 = trunc i64 %87 to i32
- 126 %91 = and i32 %90, 255
- 127 %92 = tail call i32 @llvm.ctpop.i32(i32 %91)
- 128 %93 = trunc i32 %92 to i8
- 129 %94 = and i8 %93, 1
- 130 %95 = xor i8 %94, 1
- 131 store i8 %95, i8* %31, align 1
- 132 %96 = xor i64 %87, %86
- 133 %97 = lshr i64 %96, 4
- 134 %98 = trunc i64 %97 to i8
- 135 %99 = and i8 %98, 1
- 136 store i8 %99, i8* %32, align 1
- 137 %100 = icmp eq i64 %87, 0
- 138 %101 = zext i1 %100 to i8
- 139 store i8 %101, i8* %33, align 1
- 140 %102 = lshr i64 %87, 63
- 141 %103 = trunc i64 %102 to i8
- 142 store i8 %103, i8* %34, align 1
- 143 %104 = lshr i64 %86, 63
- 144 %105 = xor i64 %102, %104
- 145 %106 = add nuw nsw i64 %105, %102
- 146 %107 = icmp eq i64 %106, 2
- 147 %108 = zext i1 %107 to i8
- 148 store i8 %108, i8* %35, align 1
- 149 %109 = add i64 %80, 20
- 150 store i64 %109, i64* %3, align 8
- 151 store i64 %87, i64* %49, align 8
- 152 %110 = load float*, float** %44, align 8
- 153 %111 = load i64, i64* %3, align 8
- 154 %112 = add i64 %111, 4
- 155 store i64 %112, i64* %3, align 8
- 156 %113 = load \<2 x float\>, \<2 x float\>* %26, align 1
- 157 %114 = extractelement \<2 x float\> %113, i32 0
- 158 store float %114, float* %110, align 4
- 159 %115 = load i64, i64* %3, align 8
- 160 %116 = add i64 %115, -38
- 161 store i64 %116, i64* %3, align 8
- 162 \<badref\> = br label %block_.L_40d181
- 163 %117 = add i64 %80, 1
- 164 store i64 %117, i64* %3, align 8
- 165 %118 = load i64, i64* %6, align 8
- 166 %119 = add i64 %118, 8
- 167 %120 = inttoptr i64 %118 to i64*
- 168 %121 = load i64, i64* %120, align 8
- 169 store i64 %121, i64* %RBP.i, align 8
- 170 store i64 %119, i64* %6, align 8
- 171 %122 = add i64 %80, 2
- 172 store i64 %122, i64* %3, align 8
- 173 %123 = inttoptr i64 %119 to i64*
- 174 %124 = load i64, i64* %123, align 8
- 175 store i64 %124, i64* %3, align 8
- 176 %125 = add i64 %118, 16
- 177 store i64 %125, i64* %6, align 8
- 178 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f364548d598>, {0: {0}, 1: {5}, 2: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 3: {8, 163}, 4: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 5: {10}, 6: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 7: {12, 117}, 8: {167, 40, 13, 173, 22, 30, 120, 126, 62}, 9: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 10: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 11: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 12: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 13: {4}, 14: {25, 18, 123}, 15: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 16: {20}, 17: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 18: {167, 40, 13, 173, 22, 30, 120, 126, 62}, 19: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 20: {3}, 21: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 22: {25, 18, 123}, 23: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 24: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 25: {72, 106, 28, 118}, 26: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 27: {167, 40, 13, 173, 22, 30, 120, 126, 62}, 28: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 29: {6}, 30: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 31: {33, 59}, 32: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 33: {35, 60}, 34: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 35: {37, 48, 49, 51, 53, 55, 56}, 36: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 37: {109, 39}, 38: {167, 40, 13, 173, 22, 30, 120, 126, 62}, 39: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 40: {1}, 41: {42}, 42: {43}, 43: {44}, 44: {45}, 45: {46}, 46: {47}, 47: {37, 48, 49, 51, 53, 55, 56}, 48: {37, 48, 49, 51, 53, 55, 56}, 49: {50}, 50: {37, 48, 49, 51, 53, 55, 56}, 51: {52}, 52: {37, 48, 49, 51, 53, 55, 56}, 53: {54}, 54: {37, 48, 49, 51, 53, 55, 56}, 55: {2}, 56: {37, 48, 49, 51, 53, 55, 56}, 57: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 58: {58, 114}, 59: {115}, 60: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 61: {12, 117}, 62: {72, 106, 28, 118}, 63: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 64: {167, 40, 13, 173, 22, 30, 120, 126, 62}, 65: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 66: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 67: {25, 18, 123}, 68: {124, 166}, 69: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 70: {167, 40, 13, 173, 22, 30, 120, 126, 62}, 71: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 72: {128}, 73: {89, 129, 145}, 74: {130, 99, 75, 146, 90, 157}, 75: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 76: {132, 135, 77, 142, 80, 149, 86, 93}, 77: {133, 78}, 78: {134, 79}, 79: {132, 135, 77, 142, 80, 149, 86, 93}, 80: {136, 81, 143, 87}, 81: {137, 82}, 82: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 83: {96, 139, 140, 84, 153, 154}, 84: {96, 139, 140, 84, 153, 154}, 85: {85, 141}, 86: {132, 135, 77, 142, 80, 149, 86, 93}, 87: {136, 81, 143, 87}, 88: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 89: {89, 129, 145}, 90: {130, 99, 75, 146, 90, 157}, 91: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 92: {148, 151, 152, 92, 95}, 93: {132, 135, 77, 142, 80, 149, 86, 93}, 94: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 95: {148, 151, 152, 92, 95}, 96: {148, 151, 152, 92, 95}, 97: {96, 139, 140, 84, 153, 154}, 98: {96, 139, 140, 84, 153, 154}, 99: {160, 97, 155}, 100: {98, 156}, 101: {130, 99, 75, 146, 90, 157}, 102: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 103: {159}, 104: {160, 97, 155}, 105: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 106: {162}, 107: {33, 59}, 108: {35, 60}, 109: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 110: {167, 40, 13, 173, 22, 30, 120, 126, 62}, 111: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 112: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 113: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 114: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 115: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 116: {68}, 117: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 118: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 119: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 120: {72, 106, 28, 118}, 121: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 122: {74}, 123: {130, 99, 75, 146, 90, 157}, 124: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 125: {132, 135, 77, 142, 80, 149, 86, 93}, 126: {133, 78}, 127: {134, 79}, 128: {132, 135, 77, 142, 80, 149, 86, 93}, 129: {136, 81, 143, 87}, 130: {137, 82}, 131: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 132: {96, 139, 140, 84, 153, 154}, 133: {85, 141}, 134: {132, 135, 77, 142, 80, 149, 86, 93}, 135: {136, 81, 143, 87}, 136: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 137: {89, 129, 145}, 138: {130, 99, 75, 146, 90, 157}, 139: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 140: {148, 151, 152, 92, 95}, 141: {132, 135, 77, 142, 80, 149, 86, 93}, 142: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 143: {148, 151, 152, 92, 95}, 144: {96, 139, 140, 84, 153, 154}, 145: {160, 97, 155}, 146: {98, 156}, 147: {130, 99, 75, 146, 90, 157}, 148: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 149: {101}, 150: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 151: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 152: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 153: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 154: {72, 106, 28, 118}, 155: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 156: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 157: {109, 39}, 158: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 159: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 160: {112}, 161: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 162: {58, 114}, 163: {8, 163}, 164: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 165: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 166: {124, 166}, 167: {167, 40, 13, 173, 22, 30, 120, 126, 62}, 168: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 169: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 170: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 171: {171}, 172: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 173: {167, 40, 13, 173, 22, 30, 120, 126, 62}, 174: {7, 11, 16, 19, 24, 26, 27, 32, 34, 165, 38, 168, 174, 57, 63, 70, 104, 105, 108, 111, 116, 121, 127}, 175: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 176: {176}, 177: {131, 9, 138, 14, 15, 144, 17, 147, 21, 150, 23, 29, 158, 31, 161, 36, 164, 41, 169, 170, 172, 175, 177, 61, 64, 65, 66, 67, 69, 71, 73, 76, 83, 88, 91, 94, 100, 102, 103, 107, 110, 113, 119, 122, 125}, 178: {178}})
Equivalent! frozenset({105, 27}) {24, 153}
Equivalent! frozenset({106, 28}) {25, 154}
Equivalent! frozenset({107, 29}) {26, 155}
Equivalent! frozenset({58, 114}) {162, 58}
Equivalent! frozenset({121, 70}) {65, 118}
Equivalent! frozenset({122, 71}) {66, 119}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f364548d598>, {0: {0}, 1: {5}, 2: {7}, 3: {8, 163}, 4: {9, 164}, 5: {10}, 6: {11}, 7: {12}, 8: {13}, 9: {14}, 10: {15}, 11: {16}, 12: {17}, 13: {4}, 14: {18}, 15: {19}, 16: {20}, 17: {21}, 18: {22}, 19: {23}, 20: {3}, 21: {24}, 22: {25}, 23: {26}, 24: {105}, 25: {106}, 26: {107}, 27: {30}, 28: {31}, 29: {6}, 30: {32}, 31: {33}, 32: {34}, 33: {35}, 34: {36}, 35: {37}, 36: {38}, 37: {39}, 38: {40}, 39: {41}, 40: {1}, 41: {42}, 42: {43}, 43: {44}, 44: {45}, 45: {46}, 46: {47}, 47: {48}, 48: {49}, 49: {50}, 50: {51}, 51: {52}, 52: {53}, 53: {54}, 54: {55}, 55: {2}, 56: {56}, 57: {57}, 58: {114}, 59: {115}, 60: {116}, 61: {117}, 62: {118}, 63: {119}, 64: {120}, 65: {121}, 66: {122}, 67: {123}, 68: {124}, 69: {125}, 70: {126}, 71: {127}, 72: {128}, 73: {129}, 74: {130}, 75: {131}, 76: {132}, 77: {133}, 78: {134}, 79: {135}, 80: {136}, 81: {137}, 82: {138}, 83: {139}, 84: {140}, 85: {141}, 86: {142}, 87: {143}, 88: {144}, 89: {145}, 90: {146}, 91: {147}, 92: {148}, 93: {149}, 94: {150}, 95: {151}, 96: {152}, 97: {153}, 98: {154}, 99: {155}, 100: {156}, 101: {157}, 102: {158}, 103: {159}, 104: {160}, 105: {161}, 106: {162}, 107: {59}, 108: {60}, 109: {61}, 110: {62}, 111: {63}, 112: {64}, 113: {65}, 114: {66}, 115: {67}, 116: {68}, 117: {69}, 118: {70}, 119: {71}, 120: {72}, 121: {73}, 122: {74}, 123: {75}, 124: {76}, 125: {77}, 126: {78}, 127: {79}, 128: {80}, 129: {81}, 130: {82}, 131: {83}, 132: {84}, 133: {85}, 134: {86}, 135: {87}, 136: {88}, 137: {89}, 138: {90}, 139: {91}, 140: {92}, 141: {93}, 142: {94}, 143: {95}, 144: {96}, 145: {97}, 146: {98}, 147: {99}, 148: {100}, 149: {101}, 150: {102}, 151: {103}, 152: {104}, 153: {27}, 154: {28}, 155: {29}, 156: {108}, 157: {109}, 158: {110}, 159: {111}, 160: {112}, 161: {113}, 162: {58}, 163: {163}, 164: {164}, 165: {165}, 166: {166}, 167: {167}, 168: {168}, 169: {169}, 170: {170}, 171: {171}, 172: {172}, 173: {173}, 174: {174}, 175: {175}, 176: {176}, 177: {177}, 178: {178}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
MORE 3 POT: 2
MORE 4 POT: 2
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 store store
EXACT 11 load load
EXACT 12 store store
EXACT 13 getelementptr getelementptr
EXACT 14 add add
EXACT 15 load load
EXACT 16 add add
EXACT 17 store store
EXACT 18 inttoptr inttoptr
EXACT 19 store store
EXACT 20 getelementptr getelementptr
EXACT 21 load load
EXACT 22 add add
EXACT 23 load load
EXACT 24 load load
EXACT 25 add add
EXACT 26 store store
EXACT 27 inttoptr inttoptr
EXACT 28 store store
EXACT 29 getelementptr getelementptr
EXACT 30 load load
EXACT 31 add add
EXACT 32 load load
EXACT 33 add add
EXACT 34 store store
EXACT 35 bitcast bitcast
EXACT 36 load load
EXACT 37 extractelement extractelement
EXACT 38 inttoptr inttoptr
EXACT 39 store store
EXACT 40 getelementptr getelementptr
EXACT 41 getelementptr getelementptr
EXACT 42 getelementptr getelementptr
EXACT 43 getelementptr getelementptr
EXACT 44 getelementptr getelementptr
EXACT 45 getelementptr getelementptr
EXACT 46 getelementptr getelementptr
EXACT 47 bitcast bitcast
EXACT 48 bitcast bitcast
EXACT 49 getelementptr getelementptr
EXACT 50 bitcast bitcast
EXACT 51 getelementptr getelementptr
EXACT 52 bitcast bitcast
EXACT 53 getelementptr getelementptr
EXACT 54 bitcast bitcast
EXACT 55 getelementptr getelementptr
EXACT 56 bitcast bitcast
EXACT 57 load load
EXACT 58 br br
EXACT 59 phi phi
EXACT 60 load load
EXACT 61 add add
EXACT 62 add add
EXACT 63 store store
EXACT 64 inttoptr inttoptr
EXACT 65 load load
EXACT 66 store store
EXACT 67 add add
EXACT 68 add add
EXACT 69 store store
EXACT 70 inttoptr inttoptr
EXACT 71 load load
EXACT 72 sub sub
EXACT 73 icmp icmp
EXACT 74 zext zext
EXACT 75 store store
EXACT 76 trunc trunc
EXACT 77 and and
EXACT 78 tail tail
EXACT 79 trunc trunc
EXACT 80 and and
EXACT 81 xor xor
EXACT 82 store store
EXACT 83 xor xor
EXACT 84 xor xor
EXACT 85 lshr lshr
EXACT 86 trunc trunc
EXACT 87 and and
EXACT 88 store store
EXACT 89 icmp icmp
EXACT 90 zext zext
EXACT 91 store store
EXACT 92 lshr lshr
EXACT 93 trunc trunc
EXACT 94 store store
EXACT 95 lshr lshr
EXACT 96 lshr lshr
EXACT 97 xor xor
EXACT 98 xor xor
EXACT 99 add add
EXACT 100 icmp icmp
EXACT 101 zext zext
EXACT 102 store store
EXACT 103 select select
EXACT 104 add add
EXACT 105 store store
EXACT 106 br br
EXACT 107 add add
EXACT 108 add add
EXACT 109 store store
EXACT 110 inttoptr inttoptr
EXACT 111 load load
EXACT 112 store store
EXACT 113 store store
EXACT 114 store store
EXACT 115 store store
EXACT 116 add add
EXACT 117 store store
EXACT 118 load load
EXACT 119 store store
EXACT 120 add add
EXACT 121 store store
EXACT 122 icmp icmp
EXACT 123 zext zext
EXACT 124 store store
EXACT 125 trunc trunc
EXACT 126 and and
EXACT 127 tail tail
EXACT 128 trunc trunc
EXACT 129 and and
EXACT 130 xor xor
EXACT 131 store store
EXACT 132 xor xor
EXACT 133 lshr lshr
EXACT 134 trunc trunc
EXACT 135 and and
EXACT 136 store store
EXACT 137 icmp icmp
EXACT 138 zext zext
EXACT 139 store store
EXACT 140 lshr lshr
EXACT 141 trunc trunc
EXACT 142 store store
EXACT 143 lshr lshr
EXACT 144 xor xor
EXACT 145 add add
EXACT 146 icmp icmp
EXACT 147 zext zext
EXACT 148 store store
EXACT 149 add add
EXACT 150 store store
EXACT 151 store store
EXACT 152 load load
EXACT 153 load load
EXACT 154 add add
EXACT 155 store store
EXACT 156 load load
EXACT 157 extractelement extractelement
EXACT 158 store store
EXACT 159 load load
EXACT 160 add add
EXACT 161 store store
EXACT 162 br br
EXACT 163 add add
EXACT 164 store store
EXACT 165 load load
EXACT 166 add add
EXACT 167 inttoptr inttoptr
EXACT 168 load load
EXACT 169 store store
EXACT 170 store store
EXACT 171 add add
EXACT 172 store store
EXACT 173 inttoptr inttoptr
EXACT 174 load load
EXACT 175 store store
EXACT 176 add add
EXACT 177 store store
EXACT 178 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 2 %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 3 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 4 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 5 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 6 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
- 7 %4 = load i64, i64* %RBP, align 8
- 8 %5 = add i64 %1, 1
- 9 store i64 %5, i64* %PC, align 8
- 10 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 11 %7 = load i64, i64* %6, align 8
- 12 %8 = add i64 %7, -8
- 13 %9 = inttoptr i64 %8 to i64*
- 14 store i64 %4, i64* %9, align 8
- 15 store i64 %8, i64* %6, align 8
- 16 %10 = load i64, i64* %PC, align 8
- 17 store i64 %8, i64* %RBP, align 8
- 18 %11 = add i64 %7, -16
- 19 %12 = load i64, i64* %RDI, align 8
- 20 %13 = add i64 %10, 7
- 21 store i64 %13, i64* %PC, align 8
- 22 %14 = inttoptr i64 %11 to i64*
- 23 store i64 %12, i64* %14, align 8
- 24 %15 = load i64, i64* %RBP, align 8
- 25 %16 = add i64 %15, -16
- 26 %17 = load i64, i64* %RSI, align 8
- 27 %18 = load i64, i64* %PC, align 8
- 28 %19 = add i64 %18, 4
- 29 store i64 %19, i64* %PC, align 8
- 30 %20 = inttoptr i64 %16 to i64*
- 31 store i64 %17, i64* %20, align 8
- 32 %21 = load i64, i64* %RBP, align 8
- 33 %22 = add i64 %21, -20
- 34 %23 = load i64, i64* %PC, align 8
- 35 %24 = add i64 %23, 5
- 36 store i64 %24, i64* %PC, align 8
- 37 %25 = bitcast %union.VectorReg* %3 to \<2 x float\>*
- 38 %26 = load \<2 x float\>, \<2 x float\>* %25, align 1
- 39 %27 = extractelement \<2 x float\> %26, i32 0
- 40 %28 = inttoptr i64 %22 to float*
- 41 store float %27, float* %28, align 4
- 42 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 43 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 44 %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 45 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 46 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 47 %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 48 %35 = bitcast %union.VectorReg* %3 to i8*
- 49 %36 = bitcast %union.VectorReg* %3 to i32*
- 50 %37 = getelementptr inbounds i8, i8* %35, i64 4
- 51 %38 = bitcast i8* %37 to float*
- 52 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 53 %40 = bitcast i64* %39 to float*
- 54 %41 = getelementptr inbounds i8, i8* %35, i64 12
- 55 %42 = bitcast i8* %41 to float*
- 56 %43 = bitcast i64* %RAX to float**
- 57 %.pre = load i64, i64* %PC, align 8
- 58 \<badref\> = br label %block_40d181
- 59 %44 = add i64 %81, -20
- 60 %45 = add i64 %115, 5
- 61 store i64 %45, i64* %PC, align 8
- 62 %46 = inttoptr i64 %44 to i32*
- 63 %47 = load i32, i32* %46, align 4
- 64 store i32 %47, i32* %36, align 1
- 65 store float 0.000000e+00, float* %38, align 1
- 66 store float 0.000000e+00, float* %40, align 1
- 67 store float 0.000000e+00, float* %42, align 1
- 68 %48 = add i64 %115, 9
- 69 store i64 %48, i64* %PC, align 8
- 70 %49 = load i64, i64* %84, align 8
- 71 store i64 %49, i64* %RAX, align 8
- 72 %50 = add i64 %49, 4
- 73 store i64 %50, i64* %RCX, align 8
- 74 %51 = icmp ugt i64 %49, -5
- 75 %52 = zext i1 %51 to i8
- 76 store i8 %52, i8* %29, align 1
- 77 %53 = trunc i64 %50 to i32
- 78 %54 = and i32 %53, 255
- 79 %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #12
- 80 %56 = trunc i32 %55 to i8
- 81 %57 = and i8 %56, 1
- 82 %58 = xor i8 %57, 1
- 83 store i8 %58, i8* %30, align 1
- 84 %59 = xor i64 %50, %49
- 85 %60 = lshr i64 %59, 4
- 86 %61 = trunc i64 %60 to i8
- 87 %62 = and i8 %61, 1
- 88 store i8 %62, i8* %31, align 1
- 89 %63 = icmp eq i64 %50, 0
- 90 %64 = zext i1 %63 to i8
- 91 store i8 %64, i8* %32, align 1
- 92 %65 = lshr i64 %50, 63
- 93 %66 = trunc i64 %65 to i8
- 94 store i8 %66, i8* %33, align 1
- 95 %67 = lshr i64 %49, 63
- 96 %68 = xor i64 %65, %67
- 97 %69 = add nuw nsw i64 %68, %65
- 98 %70 = icmp eq i64 %69, 2
- 99 %71 = zext i1 %70 to i8
- 100 store i8 %71, i8* %34, align 1
- 101 %72 = add i64 %115, 20
- 102 store i64 %72, i64* %PC, align 8
- 103 store i64 %50, i64* %84, align 8
- 104 %73 = load float*, float** %43, align 8
- 105 %74 = load i64, i64* %PC, align 8
- 106 %75 = add i64 %74, 4
- 107 store i64 %75, i64* %PC, align 8
- 108 %76 = load \<2 x float\>, \<2 x float\>* %25, align 1
- 109 %77 = extractelement \<2 x float\> %76, i32 0
- 110 store float %77, float* %73, align 4
- 111 %78 = load i64, i64* %PC, align 8
- 112 %79 = add i64 %78, -38
- 113 store i64 %79, i64* %PC, align 8
- 114 \<badref\> = br label %block_40d181
- 115 %80 = phi i64 [ %79, %block_40d18f ], [ %.pre, %block_40d170 ]
- 116 %81 = load i64, i64* %RBP, align 8
- 117 %82 = add i64 %81, -8
- 118 %83 = add i64 %80, 4
- 119 store i64 %83, i64* %PC, align 8
- 120 %84 = inttoptr i64 %82 to i64*
- 121 %85 = load i64, i64* %84, align 8
- 122 store i64 %85, i64* %RAX, align 8
- 123 %86 = add i64 %81, -16
- 124 %87 = add i64 %80, 8
- 125 store i64 %87, i64* %PC, align 8
- 126 %88 = inttoptr i64 %86 to i64*
- 127 %89 = load i64, i64* %88, align 8
- 128 %90 = sub i64 %85, %89
- 129 %91 = icmp ult i64 %85, %89
- 130 %92 = zext i1 %91 to i8
- 131 store i8 %92, i8* %29, align 1
- 132 %93 = trunc i64 %90 to i32
- 133 %94 = and i32 %93, 255
- 134 %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #12
- 135 %96 = trunc i32 %95 to i8
- 136 %97 = and i8 %96, 1
- 137 %98 = xor i8 %97, 1
- 138 store i8 %98, i8* %30, align 1
- 139 %99 = xor i64 %89, %85
- 140 %100 = xor i64 %99, %90
- 141 %101 = lshr i64 %100, 4
- 142 %102 = trunc i64 %101 to i8
- 143 %103 = and i8 %102, 1
- 144 store i8 %103, i8* %31, align 1
- 145 %104 = icmp eq i64 %90, 0
- 146 %105 = zext i1 %104 to i8
- 147 store i8 %105, i8* %32, align 1
- 148 %106 = lshr i64 %90, 63
- 149 %107 = trunc i64 %106 to i8
- 150 store i8 %107, i8* %33, align 1
- 151 %108 = lshr i64 %85, 63
- 152 %109 = lshr i64 %89, 63
- 153 %110 = xor i64 %109, %108
- 154 %111 = xor i64 %106, %108
- 155 %112 = add nuw nsw i64 %111, %110
- 156 %113 = icmp eq i64 %112, 2
- 157 %114 = zext i1 %113 to i8
- 158 store i8 %114, i8* %34, align 1
- 159 %.v = select i1 %104, i64 43, i64 14
- 160 %115 = add i64 %80, %.v
- 161 store i64 %115, i64* %PC, align 8
- 162 \<badref\> = br i1 %104, label %block_40d1ac, label %block_40d18f
- 163 %116 = add i64 %115, 1
- 164 store i64 %116, i64* %PC, align 8
- 165 %117 = load i64, i64* %6, align 8
- 166 %118 = add i64 %117, 8
- 167 %119 = inttoptr i64 %117 to i64*
- 168 %120 = load i64, i64* %119, align 8
- 169 store i64 %120, i64* %RBP, align 8
- 170 store i64 %118, i64* %6, align 8
- 171 %121 = add i64 %115, 2
- 172 store i64 %121, i64* %PC, align 8
- 173 %122 = inttoptr i64 %118 to i64*
- 174 %123 = load i64, i64* %122, align 8
- 175 store i64 %123, i64* %PC, align 8
- 176 %124 = add i64 %117, 16
- 177 store i64 %124, i64* %6, align 8
- 178 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f364548d400>, {0: {0}, 1: {40}, 2: {55}, 3: {20}, 4: {13}, 5: {1}, 6: {29}, 7: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 8: {3, 163}, 9: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 10: {5}, 11: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 12: {61, 7}, 13: {64, 38, 70, 8, 167, 173, 110, 18, 27}, 14: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 15: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 16: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 17: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 18: {67, 14, 22}, 19: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 20: {16}, 21: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 22: {64, 38, 70, 8, 167, 173, 110, 18, 27}, 23: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 24: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 25: {67, 14, 22}, 26: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 27: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 28: {120, 25, 154, 62}, 29: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 30: {64, 38, 70, 8, 167, 173, 110, 18, 27}, 31: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 32: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 33: {107, 31}, 34: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 35: {33, 108}, 36: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 37: {35, 47, 48, 50, 52, 54, 56}, 38: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 39: {37, 157}, 40: {64, 38, 70, 8, 167, 173, 110, 18, 27}, 41: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 42: {41}, 43: {42}, 44: {43}, 45: {44}, 46: {45}, 47: {46}, 48: {35, 47, 48, 50, 52, 54, 56}, 49: {35, 47, 48, 50, 52, 54, 56}, 50: {49}, 51: {35, 47, 48, 50, 52, 54, 56}, 52: {51}, 53: {35, 47, 48, 50, 52, 54, 56}, 54: {53}, 55: {35, 47, 48, 50, 52, 54, 56}, 56: {35, 47, 48, 50, 52, 54, 56}, 57: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 58: {162, 58}, 59: {107, 31}, 60: {33, 108}, 61: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 62: {64, 38, 70, 8, 167, 173, 110, 18, 27}, 63: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 64: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 65: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 66: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 67: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 68: {116}, 69: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 70: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 71: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 72: {120, 25, 154, 62}, 73: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 74: {122}, 75: {101, 74, 138, 147, 90, 123}, 76: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 77: {128, 134, 76, 141, 79, 93, 86, 125}, 78: {77, 126}, 79: {78, 127}, 80: {128, 134, 76, 141, 79, 93, 86, 125}, 81: {80, 129, 135, 87}, 82: {81, 130}, 83: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 84: {97, 98, 132, 144, 83, 84}, 85: {85, 133}, 86: {128, 134, 76, 141, 79, 93, 86, 125}, 87: {80, 129, 135, 87}, 88: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 89: {89, 73, 137}, 90: {101, 74, 138, 147, 90, 123}, 91: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 92: {96, 140, 143, 92, 95}, 93: {128, 134, 76, 141, 79, 93, 86, 125}, 94: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 95: {96, 140, 143, 92, 95}, 96: {97, 98, 132, 144, 83, 84}, 97: {104, 145, 99}, 98: {146, 100}, 99: {101, 74, 138, 147, 90, 123}, 100: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 101: {149}, 102: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 103: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 104: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 105: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 106: {120, 25, 154, 62}, 107: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 108: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 109: {37, 157}, 110: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 111: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 112: {160}, 113: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 114: {162, 58}, 115: {59}, 116: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 117: {61, 7}, 118: {120, 25, 154, 62}, 119: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 120: {64, 38, 70, 8, 167, 173, 110, 18, 27}, 121: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 122: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 123: {67, 14, 22}, 124: {68, 166}, 125: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 126: {64, 38, 70, 8, 167, 173, 110, 18, 27}, 127: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 128: {72}, 129: {89, 73, 137}, 130: {101, 74, 138, 147, 90, 123}, 131: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 132: {128, 134, 76, 141, 79, 93, 86, 125}, 133: {77, 126}, 134: {78, 127}, 135: {128, 134, 76, 141, 79, 93, 86, 125}, 136: {80, 129, 135, 87}, 137: {81, 130}, 138: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 139: {97, 98, 132, 144, 83, 84}, 140: {97, 98, 132, 144, 83, 84}, 141: {85, 133}, 142: {128, 134, 76, 141, 79, 93, 86, 125}, 143: {80, 129, 135, 87}, 144: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 145: {89, 73, 137}, 146: {101, 74, 138, 147, 90, 123}, 147: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 148: {96, 140, 143, 92, 95}, 149: {128, 134, 76, 141, 79, 93, 86, 125}, 150: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 151: {96, 140, 143, 92, 95}, 152: {96, 140, 143, 92, 95}, 153: {97, 98, 132, 144, 83, 84}, 154: {97, 98, 132, 144, 83, 84}, 155: {104, 145, 99}, 156: {146, 100}, 157: {101, 74, 138, 147, 90, 123}, 158: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 159: {103}, 160: {104, 145, 99}, 161: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 162: {106}, 163: {3, 163}, 164: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 165: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 166: {68, 166}, 167: {64, 38, 70, 8, 167, 173, 110, 18, 27}, 168: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 169: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 170: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 171: {171}, 172: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 173: {64, 38, 70, 8, 167, 173, 110, 18, 27}, 174: {2, 6, 11, 15, 21, 23, 24, 153, 152, 156, 30, 159, 32, 36, 165, 168, 174, 57, 60, 65, 71, 111, 118}, 175: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 176: {176}, 177: {131, 4, 136, 9, 10, 139, 12, 142, 17, 19, 148, 150, 151, 26, 155, 28, 158, 161, 34, 164, 39, 169, 170, 172, 175, 177, 63, 66, 69, 75, 82, 88, 91, 94, 102, 105, 109, 112, 113, 114, 115, 117, 119, 121, 124}, 178: {178}})
Equivalent! frozenset({24, 153}) {105, 27}
Equivalent! frozenset({25, 154}) {106, 28}
Equivalent! frozenset({26, 155}) {107, 29}
Equivalent! frozenset({162, 58}) {58, 114}
Equivalent! frozenset({65, 118}) {121, 70}
Equivalent! frozenset({66, 119}) {122, 71}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f364548d400>, {0: {0}, 1: {40}, 2: {55}, 3: {20}, 4: {13}, 5: {1}, 6: {29}, 7: {2}, 8: {3, 163}, 9: {164, 4}, 10: {5}, 11: {6}, 12: {7}, 13: {8}, 14: {9}, 15: {10}, 16: {11}, 17: {12}, 18: {14}, 19: {15}, 20: {16}, 21: {17}, 22: {18}, 23: {19}, 24: {21}, 25: {22}, 26: {23}, 27: {153}, 28: {154}, 29: {155}, 30: {27}, 31: {28}, 32: {30}, 33: {31}, 34: {32}, 35: {33}, 36: {34}, 37: {35}, 38: {36}, 39: {37}, 40: {38}, 41: {39}, 42: {41}, 43: {42}, 44: {43}, 45: {44}, 46: {45}, 47: {46}, 48: {47}, 49: {48}, 50: {49}, 51: {50}, 52: {51}, 53: {52}, 54: {53}, 55: {54}, 56: {56}, 57: {57}, 58: {162}, 59: {107}, 60: {108}, 61: {109}, 62: {110}, 63: {111}, 64: {112}, 65: {113}, 66: {114}, 67: {115}, 68: {116}, 69: {117}, 70: {118}, 71: {119}, 72: {120}, 73: {121}, 74: {122}, 75: {123}, 76: {124}, 77: {125}, 78: {126}, 79: {127}, 80: {128}, 81: {129}, 82: {130}, 83: {131}, 84: {132}, 85: {133}, 86: {134}, 87: {135}, 88: {136}, 89: {137}, 90: {138}, 91: {139}, 92: {140}, 93: {141}, 94: {142}, 95: {143}, 96: {144}, 97: {145}, 98: {146}, 99: {147}, 100: {148}, 101: {149}, 102: {150}, 103: {151}, 104: {152}, 105: {24}, 106: {25}, 107: {26}, 108: {156}, 109: {157}, 110: {158}, 111: {159}, 112: {160}, 113: {161}, 114: {58}, 115: {59}, 116: {60}, 117: {61}, 118: {62}, 119: {63}, 120: {64}, 121: {65}, 122: {66}, 123: {67}, 124: {68}, 125: {69}, 126: {70}, 127: {71}, 128: {72}, 129: {73}, 130: {74}, 131: {75}, 132: {76}, 133: {77}, 134: {78}, 135: {79}, 136: {80}, 137: {81}, 138: {82}, 139: {83}, 140: {84}, 141: {85}, 142: {86}, 143: {87}, 144: {88}, 145: {89}, 146: {90}, 147: {91}, 148: {92}, 149: {93}, 150: {94}, 151: {95}, 152: {96}, 153: {97}, 154: {98}, 155: {99}, 156: {100}, 157: {101}, 158: {102}, 159: {103}, 160: {104}, 161: {105}, 162: {106}, 163: {163}, 164: {164}, 165: {165}, 166: {166}, 167: {167}, 168: {168}, 169: {169}, 170: {170}, 171: {171}, 172: {172}, 173: {173}, 174: {174}, 175: {175}, 176: {176}, 177: {177}, 178: {178}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 getelementptr getelementptr
EXACT 7 load load
MORE 8 POT: 2
MORE 9 POT: 2
EXACT 10 getelementptr getelementptr
EXACT 11 load load
EXACT 12 add add
EXACT 13 inttoptr inttoptr
EXACT 14 store store
EXACT 15 store store
EXACT 16 load load
EXACT 17 store store
EXACT 18 add add
EXACT 19 load load
EXACT 20 add add
EXACT 21 store store
EXACT 22 inttoptr inttoptr
EXACT 23 store store
EXACT 24 load load
EXACT 25 add add
EXACT 26 load load
EXACT 27 load load
EXACT 28 add add
EXACT 29 store store
EXACT 30 inttoptr inttoptr
EXACT 31 store store
EXACT 32 load load
EXACT 33 add add
EXACT 34 load load
EXACT 35 add add
EXACT 36 store store
EXACT 37 bitcast bitcast
EXACT 38 load load
EXACT 39 extractelement extractelement
EXACT 40 inttoptr inttoptr
EXACT 41 store store
EXACT 42 getelementptr getelementptr
EXACT 43 getelementptr getelementptr
EXACT 44 getelementptr getelementptr
EXACT 45 getelementptr getelementptr
EXACT 46 getelementptr getelementptr
EXACT 47 getelementptr getelementptr
EXACT 48 bitcast bitcast
EXACT 49 bitcast bitcast
EXACT 50 getelementptr getelementptr
EXACT 51 bitcast bitcast
EXACT 52 getelementptr getelementptr
EXACT 53 bitcast bitcast
EXACT 54 getelementptr getelementptr
EXACT 55 bitcast bitcast
EXACT 56 bitcast bitcast
EXACT 57 load load
EXACT 58 br br
EXACT 59 add add
EXACT 60 add add
EXACT 61 store store
EXACT 62 inttoptr inttoptr
EXACT 63 load load
EXACT 64 store store
EXACT 65 store store
EXACT 66 store store
EXACT 67 store store
EXACT 68 add add
EXACT 69 store store
EXACT 70 load load
EXACT 71 store store
EXACT 72 add add
EXACT 73 store store
EXACT 74 icmp icmp
EXACT 75 zext zext
EXACT 76 store store
EXACT 77 trunc trunc
EXACT 78 and and
EXACT 79 tail tail
EXACT 80 trunc trunc
EXACT 81 and and
EXACT 82 xor xor
EXACT 83 store store
EXACT 84 xor xor
EXACT 85 lshr lshr
EXACT 86 trunc trunc
EXACT 87 and and
EXACT 88 store store
EXACT 89 icmp icmp
EXACT 90 zext zext
EXACT 91 store store
EXACT 92 lshr lshr
EXACT 93 trunc trunc
EXACT 94 store store
EXACT 95 lshr lshr
EXACT 96 xor xor
EXACT 97 add add
EXACT 98 icmp icmp
EXACT 99 zext zext
EXACT 100 store store
EXACT 101 add add
EXACT 102 store store
EXACT 103 store store
EXACT 104 load load
EXACT 105 load load
EXACT 106 add add
EXACT 107 store store
EXACT 108 load load
EXACT 109 extractelement extractelement
EXACT 110 store store
EXACT 111 load load
EXACT 112 add add
EXACT 113 store store
EXACT 114 br br
EXACT 115 phi phi
EXACT 116 load load
EXACT 117 add add
EXACT 118 add add
EXACT 119 store store
EXACT 120 inttoptr inttoptr
EXACT 121 load load
EXACT 122 store store
EXACT 123 add add
EXACT 124 add add
EXACT 125 store store
EXACT 126 inttoptr inttoptr
EXACT 127 load load
EXACT 128 sub sub
EXACT 129 icmp icmp
EXACT 130 zext zext
EXACT 131 store store
EXACT 132 trunc trunc
EXACT 133 and and
EXACT 134 tail tail
EXACT 135 trunc trunc
EXACT 136 and and
EXACT 137 xor xor
EXACT 138 store store
EXACT 139 xor xor
EXACT 140 xor xor
EXACT 141 lshr lshr
EXACT 142 trunc trunc
EXACT 143 and and
EXACT 144 store store
EXACT 145 icmp icmp
EXACT 146 zext zext
EXACT 147 store store
EXACT 148 lshr lshr
EXACT 149 trunc trunc
EXACT 150 store store
EXACT 151 lshr lshr
EXACT 152 lshr lshr
EXACT 153 xor xor
EXACT 154 xor xor
EXACT 155 add add
EXACT 156 icmp icmp
EXACT 157 zext zext
EXACT 158 store store
EXACT 159 select select
EXACT 160 add add
EXACT 161 store store
EXACT 162 br br
EXACT 163 add add
EXACT 164 store store
EXACT 165 load load
EXACT 166 add add
EXACT 167 inttoptr inttoptr
EXACT 168 load load
EXACT 169 store store
EXACT 170 store store
EXACT 171 add add
EXACT 172 store store
EXACT 173 inttoptr inttoptr
EXACT 174 load load
EXACT 175 store store
EXACT 176 add add
EXACT 177 store store
EXACT 178 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%11 = add i64 %7, -16', '%12 = load i64, i64* %RDI.i, align 8', '%13 = add i64 %10, 7', 'store i64 %13, i64* %3, align 8', '%14 = inttoptr i64 %11 to i64*', 'store i64 %12, i64* %14, align 8', '%RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%15 = load i64, i64* %RBP.i, align 8', '%16 = add i64 %15, -16', '%17 = load i64, i64* %RSI.i, align 8', '%18 = load i64, i64* %3, align 8', '%19 = add i64 %18, 4', 'store i64 %19, i64* %3, align 8', '%20 = inttoptr i64 %16 to i64*', 'store i64 %17, i64* %20, align 8', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0', '%22 = load i64, i64* %RBP.i, align 8', '%23 = add i64 %22, -20', '%24 = load i64, i64* %3, align 8', '%25 = add i64 %24, 5', 'store i64 %25, i64* %3, align 8', '%26 = bitcast %union.VectorReg* %21 to \\<2 x float\\>*', '%27 = load \\<2 x float\\>, \\<2 x float\\>* %26, align 1', '%28 = extractelement \\<2 x float\\> %27, i32 0', '%29 = inttoptr i64 %23 to float*', 'store float %28, float* %29, align 4', '%RAX.i23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', '%36 = bitcast %union.VectorReg* %21 to i8*', '%37 = bitcast %union.VectorReg* %21 to i32*', '%38 = getelementptr inbounds i8, i8* %36, i64 4', '%39 = bitcast i8* %38 to float*', '%40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%41 = bitcast i64* %40 to float*', '%42 = getelementptr inbounds i8, i8* %36, i64 12', '%43 = bitcast i8* %42 to float*', '%RCX.i12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%44 = bitcast i64* %RAX.i23 to float**', '%.pre = load i64, i64* %3, align 8', '%45 = phi i64 [ %116, %block_40d18f ], [ %.pre, %entry ]', '%48 = add i64 %45, 4', 'store i64 %48, i64* %3, align 8', 'store i64 %50, i64* %RAX.i23, align 8', '%52 = add i64 %45, 8', 'store i64 %52, i64* %3, align 8', '%56 = icmp ult i64 %50, %54', '%57 = zext i1 %56 to i8', 'store i8 %57, i8* %30, align 1', '%58 = trunc i64 %55 to i32', '%59 = and i32 %58, 255', '%60 = tail call i32 @llvm.ctpop.i32(i32 %59)', '%61 = trunc i32 %60 to i8', '%62 = and i8 %61, 1', '%63 = xor i8 %62, 1', 'store i8 %63, i8* %31, align 1', '%64 = xor i64 %54, %50', '%65 = xor i64 %64, %55', '%66 = lshr i64 %65, 4', '%67 = trunc i64 %66 to i8', '%68 = and i8 %67, 1', 'store i8 %68, i8* %32, align 1', '%70 = zext i1 %69 to i8', 'store i8 %70, i8* %33, align 1', '%71 = lshr i64 %55, 63', '%72 = trunc i64 %71 to i8', 'store i8 %72, i8* %34, align 1', '%73 = lshr i64 %50, 63', '%74 = lshr i64 %54, 63', '%75 = xor i64 %74, %73', '%76 = xor i64 %71, %73', '%77 = add nuw nsw i64 %76, %75', '%78 = icmp eq i64 %77, 2', '%79 = zext i1 %78 to i8', 'store i8 %79, i8* %35, align 1', '%.v = select i1 %69, i64 43, i64 14', '%80 = add i64 %45, %.v', 'store i64 %80, i64* %3, align 8', '%81 = add i64 %46, -20', '%82 = add i64 %80, 5', 'store i64 %82, i64* %3, align 8', '%83 = inttoptr i64 %81 to i32*', '%84 = load i32, i32* %83, align 4', 'store i32 %84, i32* %37, align 1', 'store float 0.000000e+00, float* %39, align 1', 'store float 0.000000e+00, float* %41, align 1', 'store float 0.000000e+00, float* %43, align 1', '%85 = add i64 %80, 9', 'store i64 %85, i64* %3, align 8', '%86 = load i64, i64* %49, align 8', 'store i64 %86, i64* %RAX.i23, align 8', '%87 = add i64 %86, 4', 'store i64 %87, i64* %RCX.i12, align 8', '%88 = icmp ugt i64 %86, -5', '%89 = zext i1 %88 to i8', 'store i8 %89, i8* %30, align 1', '%90 = trunc i64 %87 to i32', '%91 = and i32 %90, 255', '%92 = tail call i32 @llvm.ctpop.i32(i32 %91)', '%93 = trunc i32 %92 to i8', '%94 = and i8 %93, 1', '%95 = xor i8 %94, 1', 'store i8 %95, i8* %31, align 1', '%96 = xor i64 %87, %86', '%97 = lshr i64 %96, 4', '%98 = trunc i64 %97 to i8', '%99 = and i8 %98, 1', 'store i8 %99, i8* %32, align 1', '%100 = icmp eq i64 %87, 0', '%101 = zext i1 %100 to i8', 'store i8 %101, i8* %33, align 1', '%102 = lshr i64 %87, 63', '%103 = trunc i64 %102 to i8', 'store i8 %103, i8* %34, align 1', '%104 = lshr i64 %86, 63', '%105 = xor i64 %102, %104', '%106 = add nuw nsw i64 %105, %102', '%107 = icmp eq i64 %106, 2', '%108 = zext i1 %107 to i8', 'store i8 %108, i8* %35, align 1', '%109 = add i64 %80, 20', 'store i64 %109, i64* %3, align 8', 'store i64 %87, i64* %49, align 8', '%110 = load float*, float** %44, align 8', '%111 = load i64, i64* %3, align 8', '%112 = add i64 %111, 4', 'store i64 %112, i64* %3, align 8', '%113 = load \\<2 x float\\>, \\<2 x float\\>* %26, align 1', '%114 = extractelement \\<2 x float\\> %113, i32 0', 'store float %114, float* %110, align 4', '%115 = load i64, i64* %3, align 8', '%116 = add i64 %115, -38', 'store i64 %116, i64* %3, align 8', '%117 = add i64 %80, 1', 'store i64 %117, i64* %3, align 8', '%118 = load i64, i64* %6, align 8', '%119 = add i64 %118, 8', '%120 = inttoptr i64 %118 to i64*', '%121 = load i64, i64* %120, align 8', 'store i64 %121, i64* %RBP.i, align 8', 'store i64 %119, i64* %6, align 8', '%122 = add i64 %80, 2', 'store i64 %122, i64* %3, align 8', '%123 = inttoptr i64 %119 to i64*', '%124 = load i64, i64* %123, align 8', 'store i64 %124, i64* %3, align 8', '%125 = add i64 %118, 16', 'store i64 %125, i64* %6, align 8'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Keep: %5 = add i64 %1, 1
Keep: store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %11 = add i64 %7, -16
Found line to remove! %12 = load i64, i64* %RDI.i, align 8
Found line to remove! %13 = add i64 %10, 7
Found line to remove! store i64 %13, i64* %3, align 8
Found line to remove! %14 = inttoptr i64 %11 to i64*
Found line to remove! store i64 %12, i64* %14, align 8
Found line to remove! %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %15 = load i64, i64* %RBP.i, align 8
Found line to remove! %16 = add i64 %15, -16
Found line to remove! %17 = load i64, i64* %RSI.i, align 8
Found line to remove! %18 = load i64, i64* %3, align 8
Found line to remove! %19 = add i64 %18, 4
Found line to remove! store i64 %19, i64* %3, align 8
Found line to remove! %20 = inttoptr i64 %16 to i64*
Found line to remove! store i64 %17, i64* %20, align 8
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
Found line to remove! %22 = load i64, i64* %RBP.i, align 8
Found line to remove! %23 = add i64 %22, -20
Found line to remove! %24 = load i64, i64* %3, align 8
Found line to remove! %25 = add i64 %24, 5
Found line to remove! store i64 %25, i64* %3, align 8
Keep: %26 = bitcast %union.VectorReg* %21 to <2 x float>*
Keep: %27 = load <2 x float>, <2 x float>* %26, align 1
Keep: %28 = extractelement <2 x float> %27, i32 0
Found line to remove! %29 = inttoptr i64 %23 to float*
Found line to remove! store float %28, float* %29, align 4
Found line to remove! %RAX.i23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! %36 = bitcast %union.VectorReg* %21 to i8*
Found line to remove! %37 = bitcast %union.VectorReg* %21 to i32*
Found line to remove! %38 = getelementptr inbounds i8, i8* %36, i64 4
Found line to remove! %39 = bitcast i8* %38 to float*
Found line to remove! %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %41 = bitcast i64* %40 to float*
Found line to remove! %42 = getelementptr inbounds i8, i8* %36, i64 12
Found line to remove! %43 = bitcast i8* %42 to float*
Found line to remove! %RCX.i12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %44 = bitcast i64* %RAX.i23 to float**
Found line to remove! %.pre = load i64, i64* %3, align 8
Keep: br label %block_.L_40d181
Keep: 
Keep: block_.L_40d181:                                  ; preds = %block_40d18f, %entry
Found line to remove! %45 = phi i64 [ %116, %block_40d18f ], [ %.pre, %entry ]
Keep: %46 = load i64, i64* %RBP.i, align 8
Keep: %47 = add i64 %46, -8
Found line to remove! %48 = add i64 %45, 4
Found line to remove! store i64 %48, i64* %3, align 8
Keep: %49 = inttoptr i64 %47 to i64*
Keep: %50 = load i64, i64* %49, align 8
Found line to remove! store i64 %50, i64* %RAX.i23, align 8
Keep: %51 = add i64 %46, -16
Found line to remove! %52 = add i64 %45, 8
Found line to remove! store i64 %52, i64* %3, align 8
Keep: %53 = inttoptr i64 %51 to i64*
Keep: %54 = load i64, i64* %53, align 8
Keep: %55 = sub i64 %50, %54
Found line to remove! %56 = icmp ult i64 %50, %54
Found line to remove! %57 = zext i1 %56 to i8
Found line to remove! store i8 %57, i8* %30, align 1
Found line to remove! %58 = trunc i64 %55 to i32
Found line to remove! %59 = and i32 %58, 255
Found line to remove! %60 = tail call i32 @llvm.ctpop.i32(i32 %59)
Found line to remove! %61 = trunc i32 %60 to i8
Found line to remove! %62 = and i8 %61, 1
Found line to remove! %63 = xor i8 %62, 1
Found line to remove! store i8 %63, i8* %31, align 1
Found line to remove! %64 = xor i64 %54, %50
Found line to remove! %65 = xor i64 %64, %55
Found line to remove! %66 = lshr i64 %65, 4
Found line to remove! %67 = trunc i64 %66 to i8
Found line to remove! %68 = and i8 %67, 1
Found line to remove! store i8 %68, i8* %32, align 1
Keep: %69 = icmp eq i64 %55, 0
Found line to remove! %70 = zext i1 %69 to i8
Found line to remove! store i8 %70, i8* %33, align 1
Found line to remove! %71 = lshr i64 %55, 63
Found line to remove! %72 = trunc i64 %71 to i8
Found line to remove! store i8 %72, i8* %34, align 1
Found line to remove! %73 = lshr i64 %50, 63
Found line to remove! %74 = lshr i64 %54, 63
Found line to remove! %75 = xor i64 %74, %73
Found line to remove! %76 = xor i64 %71, %73
Found line to remove! %77 = add nuw nsw i64 %76, %75
Found line to remove! %78 = icmp eq i64 %77, 2
Found line to remove! %79 = zext i1 %78 to i8
Found line to remove! store i8 %79, i8* %35, align 1
Found line to remove! %.v = select i1 %69, i64 43, i64 14
Found line to remove! %80 = add i64 %45, %.v
Found line to remove! store i64 %80, i64* %3, align 8
Keep: br i1 %69, label %block_.L_40d1ac, label %block_40d18f
Keep: 
Keep: block_40d18f:                                     ; preds = %block_.L_40d181
Found line to remove! %81 = add i64 %46, -20
Found line to remove! %82 = add i64 %80, 5
Found line to remove! store i64 %82, i64* %3, align 8
Found line to remove! %83 = inttoptr i64 %81 to i32*
Found line to remove! %84 = load i32, i32* %83, align 4
Found line to remove! store i32 %84, i32* %37, align 1
Found line to remove! store float 0.000000e+00, float* %39, align 1
Found line to remove! store float 0.000000e+00, float* %41, align 1
Found line to remove! store float 0.000000e+00, float* %43, align 1
Found line to remove! %85 = add i64 %80, 9
Found line to remove! store i64 %85, i64* %3, align 8
Found line to remove! %86 = load i64, i64* %49, align 8
Found line to remove! store i64 %86, i64* %RAX.i23, align 8
Found line to remove! %87 = add i64 %86, 4
Found line to remove! store i64 %87, i64* %RCX.i12, align 8
Found line to remove! %88 = icmp ugt i64 %86, -5
Found line to remove! %89 = zext i1 %88 to i8
Found line to remove! store i8 %89, i8* %30, align 1
Found line to remove! %90 = trunc i64 %87 to i32
Found line to remove! %91 = and i32 %90, 255
Found line to remove! %92 = tail call i32 @llvm.ctpop.i32(i32 %91)
Found line to remove! %93 = trunc i32 %92 to i8
Found line to remove! %94 = and i8 %93, 1
Found line to remove! %95 = xor i8 %94, 1
Found line to remove! store i8 %95, i8* %31, align 1
Found line to remove! %96 = xor i64 %87, %86
Found line to remove! %97 = lshr i64 %96, 4
Found line to remove! %98 = trunc i64 %97 to i8
Found line to remove! %99 = and i8 %98, 1
Found line to remove! store i8 %99, i8* %32, align 1
Found line to remove! %100 = icmp eq i64 %87, 0
Found line to remove! %101 = zext i1 %100 to i8
Found line to remove! store i8 %101, i8* %33, align 1
Found line to remove! %102 = lshr i64 %87, 63
Found line to remove! %103 = trunc i64 %102 to i8
Found line to remove! store i8 %103, i8* %34, align 1
Found line to remove! %104 = lshr i64 %86, 63
Found line to remove! %105 = xor i64 %102, %104
Found line to remove! %106 = add nuw nsw i64 %105, %102
Found line to remove! %107 = icmp eq i64 %106, 2
Found line to remove! %108 = zext i1 %107 to i8
Found line to remove! store i8 %108, i8* %35, align 1
Found line to remove! %109 = add i64 %80, 20
Found line to remove! store i64 %109, i64* %3, align 8
Found line to remove! store i64 %87, i64* %49, align 8
Found line to remove! %110 = load float*, float** %44, align 8
Found line to remove! %111 = load i64, i64* %3, align 8
Found line to remove! %112 = add i64 %111, 4
Found line to remove! store i64 %112, i64* %3, align 8
Keep: %113 = load <2 x float>, <2 x float>* %26, align 1
Keep: %114 = extractelement <2 x float> %113, i32 0
Found line to remove! store float %114, float* %110, align 4
Found line to remove! %115 = load i64, i64* %3, align 8
Found line to remove! %116 = add i64 %115, -38
Found line to remove! store i64 %116, i64* %3, align 8
Keep: br label %block_.L_40d181
Keep: 
Keep: block_.L_40d1ac:                                  ; preds = %block_.L_40d181
Found line to remove! %117 = add i64 %80, 1
Found line to remove! store i64 %117, i64* %3, align 8
Found line to remove! %118 = load i64, i64* %6, align 8
Found line to remove! %119 = add i64 %118, 8
Found line to remove! %120 = inttoptr i64 %118 to i64*
Found line to remove! %121 = load i64, i64* %120, align 8
Found line to remove! store i64 %121, i64* %RBP.i, align 8
Found line to remove! store i64 %119, i64* %6, align 8
Found line to remove! %122 = add i64 %80, 2
Found line to remove! store i64 %122, i64* %3, align 8
Found line to remove! %123 = inttoptr i64 %119 to i64*
Found line to remove! %124 = load i64, i64* %123, align 8
Found line to remove! store i64 %124, i64* %3, align 8
Found line to remove! %125 = add i64 %118, 16
Found line to remove! store i64 %125, i64* %6, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%11 = add i64 %7, -16', '%12 = load i64, i64* %RDI.i, align 8', '%13 = add i64 %10, 7', 'store i64 %13, i64* %3, align 8', '%14 = inttoptr i64 %11 to i64*', 'store i64 %12, i64* %14, align 8', '%RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%15 = load i64, i64* %RBP.i, align 8', '%16 = add i64 %15, -16', '%17 = load i64, i64* %RSI.i, align 8', '%18 = load i64, i64* %3, align 8', '%19 = add i64 %18, 4', 'store i64 %19, i64* %3, align 8', '%20 = inttoptr i64 %16 to i64*', 'store i64 %17, i64* %20, align 8', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0', '%22 = load i64, i64* %RBP.i, align 8', '%23 = add i64 %22, -20', '%24 = load i64, i64* %3, align 8', '%25 = add i64 %24, 5', 'store i64 %25, i64* %3, align 8', '%26 = bitcast %union.VectorReg* %21 to \\<2 x float\\>*', '%27 = load \\<2 x float\\>, \\<2 x float\\>* %26, align 1', '%28 = extractelement \\<2 x float\\> %27, i32 0', '%29 = inttoptr i64 %23 to float*', 'store float %28, float* %29, align 4', '%RAX.i23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', '%36 = bitcast %union.VectorReg* %21 to i8*', '%37 = bitcast %union.VectorReg* %21 to i32*', '%38 = getelementptr inbounds i8, i8* %36, i64 4', '%39 = bitcast i8* %38 to float*', '%40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%41 = bitcast i64* %40 to float*', '%42 = getelementptr inbounds i8, i8* %36, i64 12', '%43 = bitcast i8* %42 to float*', '%RCX.i12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%44 = bitcast i64* %RAX.i23 to float**', '%.pre = load i64, i64* %3, align 8', '%45 = phi i64 [ %116, %block_40d18f ], [ %.pre, %entry ]', '%48 = add i64 %45, 4', 'store i64 %48, i64* %3, align 8', 'store i64 %50, i64* %RAX.i23, align 8', '%52 = add i64 %45, 8', 'store i64 %52, i64* %3, align 8', '%56 = icmp ult i64 %50, %54', '%57 = zext i1 %56 to i8', 'store i8 %57, i8* %30, align 1', '%58 = trunc i64 %55 to i32', '%59 = and i32 %58, 255', '%60 = tail call i32 @llvm.ctpop.i32(i32 %59)', '%61 = trunc i32 %60 to i8', '%62 = and i8 %61, 1', '%63 = xor i8 %62, 1', 'store i8 %63, i8* %31, align 1', '%64 = xor i64 %54, %50', '%65 = xor i64 %64, %55', '%66 = lshr i64 %65, 4', '%67 = trunc i64 %66 to i8', '%68 = and i8 %67, 1', 'store i8 %68, i8* %32, align 1', '%70 = zext i1 %69 to i8', 'store i8 %70, i8* %33, align 1', '%71 = lshr i64 %55, 63', '%72 = trunc i64 %71 to i8', 'store i8 %72, i8* %34, align 1', '%73 = lshr i64 %50, 63', '%74 = lshr i64 %54, 63', '%75 = xor i64 %74, %73', '%76 = xor i64 %71, %73', '%77 = add nuw nsw i64 %76, %75', '%78 = icmp eq i64 %77, 2', '%79 = zext i1 %78 to i8', 'store i8 %79, i8* %35, align 1', '%.v = select i1 %69, i64 43, i64 14', '%80 = add i64 %45, %.v', 'store i64 %80, i64* %3, align 8', '%81 = add i64 %46, -20', '%82 = add i64 %80, 5', 'store i64 %82, i64* %3, align 8', '%83 = inttoptr i64 %81 to i32*', '%84 = load i32, i32* %83, align 4', 'store i32 %84, i32* %37, align 1', 'store float 0.000000e+00, float* %39, align 1', 'store float 0.000000e+00, float* %41, align 1', 'store float 0.000000e+00, float* %43, align 1', '%85 = add i64 %80, 9', 'store i64 %85, i64* %3, align 8', '%86 = load i64, i64* %49, align 8', 'store i64 %86, i64* %RAX.i23, align 8', '%87 = add i64 %86, 4', 'store i64 %87, i64* %RCX.i12, align 8', '%88 = icmp ugt i64 %86, -5', '%89 = zext i1 %88 to i8', 'store i8 %89, i8* %30, align 1', '%90 = trunc i64 %87 to i32', '%91 = and i32 %90, 255', '%92 = tail call i32 @llvm.ctpop.i32(i32 %91)', '%93 = trunc i32 %92 to i8', '%94 = and i8 %93, 1', '%95 = xor i8 %94, 1', 'store i8 %95, i8* %31, align 1', '%96 = xor i64 %87, %86', '%97 = lshr i64 %96, 4', '%98 = trunc i64 %97 to i8', '%99 = and i8 %98, 1', 'store i8 %99, i8* %32, align 1', '%100 = icmp eq i64 %87, 0', '%101 = zext i1 %100 to i8', 'store i8 %101, i8* %33, align 1', '%102 = lshr i64 %87, 63', '%103 = trunc i64 %102 to i8', 'store i8 %103, i8* %34, align 1', '%104 = lshr i64 %86, 63', '%105 = xor i64 %102, %104', '%106 = add nuw nsw i64 %105, %102', '%107 = icmp eq i64 %106, 2', '%108 = zext i1 %107 to i8', 'store i8 %108, i8* %35, align 1', '%109 = add i64 %80, 20', 'store i64 %109, i64* %3, align 8', 'store i64 %87, i64* %49, align 8', '%110 = load float*, float** %44, align 8', '%111 = load i64, i64* %3, align 8', '%112 = add i64 %111, 4', 'store i64 %112, i64* %3, align 8', '%113 = load \\<2 x float\\>, \\<2 x float\\>* %26, align 1', '%114 = extractelement \\<2 x float\\> %113, i32 0', 'store float %114, float* %110, align 4', '%115 = load i64, i64* %3, align 8', '%116 = add i64 %115, -38', 'store i64 %116, i64* %3, align 8', '%117 = add i64 %80, 1', 'store i64 %117, i64* %3, align 8', '%118 = load i64, i64* %6, align 8', '%119 = add i64 %118, 8', '%120 = inttoptr i64 %118 to i64*', '%121 = load i64, i64* %120, align 8', 'store i64 %121, i64* %RBP.i, align 8', 'store i64 %119, i64* %6, align 8', '%122 = add i64 %80, 2', 'store i64 %122, i64* %3, align 8', '%123 = inttoptr i64 %119 to i64*', '%124 = load i64, i64* %123, align 8', 'store i64 %124, i64* %3, align 8', '%125 = add i64 %118, 16', 'store i64 %125, i64* %6, align 8'])
TO REMOVE: dict_keys(['%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0', '%4 = load i64, i64* %RBP, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -16', '%12 = load i64, i64* %RDI, align 8', '%13 = add i64 %10, 7', 'store i64 %13, i64* %PC, align 8', '%14 = inttoptr i64 %11 to i64*', 'store i64 %12, i64* %14, align 8', '%15 = load i64, i64* %RBP, align 8', '%16 = add i64 %15, -16', '%17 = load i64, i64* %RSI, align 8', '%18 = load i64, i64* %PC, align 8', '%19 = add i64 %18, 4', 'store i64 %19, i64* %PC, align 8', '%20 = inttoptr i64 %16 to i64*', 'store i64 %17, i64* %20, align 8', '%21 = load i64, i64* %RBP, align 8', '%22 = add i64 %21, -20', '%23 = load i64, i64* %PC, align 8', '%24 = add i64 %23, 5', 'store i64 %24, i64* %PC, align 8', '%25 = bitcast %union.VectorReg* %3 to \\<2 x float\\>*', '%26 = load \\<2 x float\\>, \\<2 x float\\>* %25, align 1', '%27 = extractelement \\<2 x float\\> %26, i32 0', '%28 = inttoptr i64 %22 to float*', 'store float %27, float* %28, align 4', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', '%35 = bitcast %union.VectorReg* %3 to i8*', '%36 = bitcast %union.VectorReg* %3 to i32*', '%37 = getelementptr inbounds i8, i8* %35, i64 4', '%38 = bitcast i8* %37 to float*', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%40 = bitcast i64* %39 to float*', '%41 = getelementptr inbounds i8, i8* %35, i64 12', '%42 = bitcast i8* %41 to float*', '%43 = bitcast i64* %RAX to float**', '%.pre = load i64, i64* %PC, align 8', '%44 = add i64 %81, -20', '%45 = add i64 %115, 5', 'store i64 %45, i64* %PC, align 8', '%46 = inttoptr i64 %44 to i32*', '%47 = load i32, i32* %46, align 4', 'store i32 %47, i32* %36, align 1', 'store float 0.000000e+00, float* %38, align 1', 'store float 0.000000e+00, float* %40, align 1', 'store float 0.000000e+00, float* %42, align 1', '%48 = add i64 %115, 9', 'store i64 %48, i64* %PC, align 8', '%49 = load i64, i64* %84, align 8', 'store i64 %49, i64* %RAX, align 8', '%50 = add i64 %49, 4', 'store i64 %50, i64* %RCX, align 8', '%51 = icmp ugt i64 %49, -5', '%52 = zext i1 %51 to i8', 'store i8 %52, i8* %29, align 1', '%53 = trunc i64 %50 to i32', '%54 = and i32 %53, 255', '%55 = tail call i32 @llvm.ctpop.i32(i32 %54) #12', '%56 = trunc i32 %55 to i8', '%57 = and i8 %56, 1', '%58 = xor i8 %57, 1', 'store i8 %58, i8* %30, align 1', '%59 = xor i64 %50, %49', '%60 = lshr i64 %59, 4', '%61 = trunc i64 %60 to i8', '%62 = and i8 %61, 1', 'store i8 %62, i8* %31, align 1', '%63 = icmp eq i64 %50, 0', '%64 = zext i1 %63 to i8', 'store i8 %64, i8* %32, align 1', '%65 = lshr i64 %50, 63', '%66 = trunc i64 %65 to i8', 'store i8 %66, i8* %33, align 1', '%67 = lshr i64 %49, 63', '%68 = xor i64 %65, %67', '%69 = add nuw nsw i64 %68, %65', '%70 = icmp eq i64 %69, 2', '%71 = zext i1 %70 to i8', 'store i8 %71, i8* %34, align 1', '%72 = add i64 %115, 20', 'store i64 %72, i64* %PC, align 8', 'store i64 %50, i64* %84, align 8', '%73 = load float*, float** %43, align 8', '%74 = load i64, i64* %PC, align 8', '%75 = add i64 %74, 4', 'store i64 %75, i64* %PC, align 8', '%76 = load \\<2 x float\\>, \\<2 x float\\>* %25, align 1', '%77 = extractelement \\<2 x float\\> %76, i32 0', 'store float %77, float* %73, align 4', '%78 = load i64, i64* %PC, align 8', '%79 = add i64 %78, -38', 'store i64 %79, i64* %PC, align 8', '%80 = phi i64 [ %79, %block_40d18f ], [ %.pre, %block_40d170 ]', '%83 = add i64 %80, 4', 'store i64 %83, i64* %PC, align 8', 'store i64 %85, i64* %RAX, align 8', '%87 = add i64 %80, 8', 'store i64 %87, i64* %PC, align 8', '%91 = icmp ult i64 %85, %89', '%92 = zext i1 %91 to i8', 'store i8 %92, i8* %29, align 1', '%93 = trunc i64 %90 to i32', '%94 = and i32 %93, 255', '%95 = tail call i32 @llvm.ctpop.i32(i32 %94) #12', '%96 = trunc i32 %95 to i8', '%97 = and i8 %96, 1', '%98 = xor i8 %97, 1', 'store i8 %98, i8* %30, align 1', '%99 = xor i64 %89, %85', '%100 = xor i64 %99, %90', '%101 = lshr i64 %100, 4', '%102 = trunc i64 %101 to i8', '%103 = and i8 %102, 1', 'store i8 %103, i8* %31, align 1', '%105 = zext i1 %104 to i8', 'store i8 %105, i8* %32, align 1', '%106 = lshr i64 %90, 63', '%107 = trunc i64 %106 to i8', 'store i8 %107, i8* %33, align 1', '%108 = lshr i64 %85, 63', '%109 = lshr i64 %89, 63', '%110 = xor i64 %109, %108', '%111 = xor i64 %106, %108', '%112 = add nuw nsw i64 %111, %110', '%113 = icmp eq i64 %112, 2', '%114 = zext i1 %113 to i8', 'store i8 %114, i8* %34, align 1', '%.v = select i1 %104, i64 43, i64 14', '%115 = add i64 %80, %.v', 'store i64 %115, i64* %PC, align 8', '%116 = add i64 %115, 1', 'store i64 %116, i64* %PC, align 8', '%117 = load i64, i64* %6, align 8', '%118 = add i64 %117, 8', '%119 = inttoptr i64 %117 to i64*', '%120 = load i64, i64* %119, align 8', 'store i64 %120, i64* %RBP, align 8', 'store i64 %118, i64* %6, align 8', '%121 = add i64 %115, 2', 'store i64 %121, i64* %PC, align 8', '%122 = inttoptr i64 %118 to i64*', '%123 = load i64, i64* %122, align 8', 'store i64 %123, i64* %PC, align 8', '%124 = add i64 %117, 16', 'store i64 %124, i64* %6, align 8'])
Keep: block_40d170:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
Found line to remove! %4 = load i64, i64* %RBP, align 8
Keep: %5 = add i64 %1, 1
Keep: store i64 %5, i64* %PC, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Found line to remove! %10 = load i64, i64* %PC, align 8
Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -16
Found line to remove! %12 = load i64, i64* %RDI, align 8
Found line to remove! %13 = add i64 %10, 7
Found line to remove! store i64 %13, i64* %PC, align 8
Found line to remove! %14 = inttoptr i64 %11 to i64*
Found line to remove! store i64 %12, i64* %14, align 8
Found line to remove! %15 = load i64, i64* %RBP, align 8
Found line to remove! %16 = add i64 %15, -16
Found line to remove! %17 = load i64, i64* %RSI, align 8
Found line to remove! %18 = load i64, i64* %PC, align 8
Found line to remove! %19 = add i64 %18, 4
Found line to remove! store i64 %19, i64* %PC, align 8
Found line to remove! %20 = inttoptr i64 %16 to i64*
Found line to remove! store i64 %17, i64* %20, align 8
Found line to remove! %21 = load i64, i64* %RBP, align 8
Found line to remove! %22 = add i64 %21, -20
Found line to remove! %23 = load i64, i64* %PC, align 8
Found line to remove! %24 = add i64 %23, 5
Found line to remove! store i64 %24, i64* %PC, align 8
Keep: %25 = bitcast %union.VectorReg* %3 to <2 x float>*
Keep: %26 = load <2 x float>, <2 x float>* %25, align 1
Keep: %27 = extractelement <2 x float> %26, i32 0
Found line to remove! %28 = inttoptr i64 %22 to float*
Found line to remove! store float %27, float* %28, align 4
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! %35 = bitcast %union.VectorReg* %3 to i8*
Found line to remove! %36 = bitcast %union.VectorReg* %3 to i32*
Found line to remove! %37 = getelementptr inbounds i8, i8* %35, i64 4
Found line to remove! %38 = bitcast i8* %37 to float*
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %40 = bitcast i64* %39 to float*
Found line to remove! %41 = getelementptr inbounds i8, i8* %35, i64 12
Found line to remove! %42 = bitcast i8* %41 to float*
Found line to remove! %43 = bitcast i64* %RAX to float**
Found line to remove! %.pre = load i64, i64* %PC, align 8
Keep: br label %block_40d181
Keep: 
Keep: block_40d18f:                                     ; preds = %block_40d181
Found line to remove! %44 = add i64 %81, -20
Found line to remove! %45 = add i64 %115, 5
Found line to remove! store i64 %45, i64* %PC, align 8
Found line to remove! %46 = inttoptr i64 %44 to i32*
Found line to remove! %47 = load i32, i32* %46, align 4
Found line to remove! store i32 %47, i32* %36, align 1
Found line to remove! store float 0.000000e+00, float* %38, align 1
Found line to remove! store float 0.000000e+00, float* %40, align 1
Found line to remove! store float 0.000000e+00, float* %42, align 1
Found line to remove! %48 = add i64 %115, 9
Found line to remove! store i64 %48, i64* %PC, align 8
Found line to remove! %49 = load i64, i64* %84, align 8
Found line to remove! store i64 %49, i64* %RAX, align 8
Found line to remove! %50 = add i64 %49, 4
Found line to remove! store i64 %50, i64* %RCX, align 8
Found line to remove! %51 = icmp ugt i64 %49, -5
Found line to remove! %52 = zext i1 %51 to i8
Found line to remove! store i8 %52, i8* %29, align 1
Found line to remove! %53 = trunc i64 %50 to i32
Found line to remove! %54 = and i32 %53, 255
Found line to remove! %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #12
Found line to remove! %56 = trunc i32 %55 to i8
Found line to remove! %57 = and i8 %56, 1
Found line to remove! %58 = xor i8 %57, 1
Found line to remove! store i8 %58, i8* %30, align 1
Found line to remove! %59 = xor i64 %50, %49
Found line to remove! %60 = lshr i64 %59, 4
Found line to remove! %61 = trunc i64 %60 to i8
Found line to remove! %62 = and i8 %61, 1
Found line to remove! store i8 %62, i8* %31, align 1
Found line to remove! %63 = icmp eq i64 %50, 0
Found line to remove! %64 = zext i1 %63 to i8
Found line to remove! store i8 %64, i8* %32, align 1
Found line to remove! %65 = lshr i64 %50, 63
Found line to remove! %66 = trunc i64 %65 to i8
Found line to remove! store i8 %66, i8* %33, align 1
Found line to remove! %67 = lshr i64 %49, 63
Found line to remove! %68 = xor i64 %65, %67
Found line to remove! %69 = add nuw nsw i64 %68, %65
Found line to remove! %70 = icmp eq i64 %69, 2
Found line to remove! %71 = zext i1 %70 to i8
Found line to remove! store i8 %71, i8* %34, align 1
Found line to remove! %72 = add i64 %115, 20
Found line to remove! store i64 %72, i64* %PC, align 8
Found line to remove! store i64 %50, i64* %84, align 8
Found line to remove! %73 = load float*, float** %43, align 8
Found line to remove! %74 = load i64, i64* %PC, align 8
Found line to remove! %75 = add i64 %74, 4
Found line to remove! store i64 %75, i64* %PC, align 8
Keep: %76 = load <2 x float>, <2 x float>* %25, align 1
Keep: %77 = extractelement <2 x float> %76, i32 0
Found line to remove! store float %77, float* %73, align 4
Found line to remove! %78 = load i64, i64* %PC, align 8
Found line to remove! %79 = add i64 %78, -38
Found line to remove! store i64 %79, i64* %PC, align 8
Keep: br label %block_40d181
Keep: 
Keep: block_40d181:                                     ; preds = %block_40d18f, %block_40d170
Found line to remove! %80 = phi i64 [ %79, %block_40d18f ], [ %.pre, %block_40d170 ]
Keep: %81 = load i64, i64* %RBP, align 8
Keep: %82 = add i64 %81, -8
Found line to remove! %83 = add i64 %80, 4
Found line to remove! store i64 %83, i64* %PC, align 8
Keep: %84 = inttoptr i64 %82 to i64*
Keep: %85 = load i64, i64* %84, align 8
Found line to remove! store i64 %85, i64* %RAX, align 8
Keep: %86 = add i64 %81, -16
Found line to remove! %87 = add i64 %80, 8
Found line to remove! store i64 %87, i64* %PC, align 8
Keep: %88 = inttoptr i64 %86 to i64*
Keep: %89 = load i64, i64* %88, align 8
Keep: %90 = sub i64 %85, %89
Found line to remove! %91 = icmp ult i64 %85, %89
Found line to remove! %92 = zext i1 %91 to i8
Found line to remove! store i8 %92, i8* %29, align 1
Found line to remove! %93 = trunc i64 %90 to i32
Found line to remove! %94 = and i32 %93, 255
Found line to remove! %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #12
Found line to remove! %96 = trunc i32 %95 to i8
Found line to remove! %97 = and i8 %96, 1
Found line to remove! %98 = xor i8 %97, 1
Found line to remove! store i8 %98, i8* %30, align 1
Found line to remove! %99 = xor i64 %89, %85
Found line to remove! %100 = xor i64 %99, %90
Found line to remove! %101 = lshr i64 %100, 4
Found line to remove! %102 = trunc i64 %101 to i8
Found line to remove! %103 = and i8 %102, 1
Found line to remove! store i8 %103, i8* %31, align 1
Keep: %104 = icmp eq i64 %90, 0
Found line to remove! %105 = zext i1 %104 to i8
Found line to remove! store i8 %105, i8* %32, align 1
Found line to remove! %106 = lshr i64 %90, 63
Found line to remove! %107 = trunc i64 %106 to i8
Found line to remove! store i8 %107, i8* %33, align 1
Found line to remove! %108 = lshr i64 %85, 63
Found line to remove! %109 = lshr i64 %89, 63
Found line to remove! %110 = xor i64 %109, %108
Found line to remove! %111 = xor i64 %106, %108
Found line to remove! %112 = add nuw nsw i64 %111, %110
Found line to remove! %113 = icmp eq i64 %112, 2
Found line to remove! %114 = zext i1 %113 to i8
Found line to remove! store i8 %114, i8* %34, align 1
Found line to remove! %.v = select i1 %104, i64 43, i64 14
Found line to remove! %115 = add i64 %80, %.v
Found line to remove! store i64 %115, i64* %PC, align 8
Keep: br i1 %104, label %block_40d1ac, label %block_40d18f
Keep: 
Keep: block_40d1ac:                                     ; preds = %block_40d181
Found line to remove! %116 = add i64 %115, 1
Found line to remove! store i64 %116, i64* %PC, align 8
Found line to remove! %117 = load i64, i64* %6, align 8
Found line to remove! %118 = add i64 %117, 8
Found line to remove! %119 = inttoptr i64 %117 to i64*
Found line to remove! %120 = load i64, i64* %119, align 8
Found line to remove! store i64 %120, i64* %RBP, align 8
Found line to remove! store i64 %118, i64* %6, align 8
Found line to remove! %121 = add i64 %115, 2
Found line to remove! store i64 %121, i64* %PC, align 8
Found line to remove! %122 = inttoptr i64 %118 to i64*
Found line to remove! %123 = load i64, i64* %122, align 8
Found line to remove!/home/ubuntu/Install/llvm/llvm.4.0.0.install/bin/opt: /tmp/tmpmg7dcs50-query.ll:114:39: error: use of undefined value '%var_2_21'
%var_2_26 = bitcast %union.VectorReg* %var_2_21 to <2 x float>*
                                      ^
 store i64 %123, i64* %PC, align 8
Found line to remove! %124 = add i64 %117, 16
Found line to remove! store i64 %124, i64* %6, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0', '%4 = load i64, i64* %RBP, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -16', '%12 = load i64, i64* %RDI, align 8', '%13 = add i64 %10, 7', 'store i64 %13, i64* %PC, align 8', '%14 = inttoptr i64 %11 to i64*', 'store i64 %12, i64* %14, align 8', '%15 = load i64, i64* %RBP, align 8', '%16 = add i64 %15, -16', '%17 = load i64, i64* %RSI, align 8', '%18 = load i64, i64* %PC, align 8', '%19 = add i64 %18, 4', 'store i64 %19, i64* %PC, align 8', '%20 = inttoptr i64 %16 to i64*', 'store i64 %17, i64* %20, align 8', '%21 = load i64, i64* %RBP, align 8', '%22 = add i64 %21, -20', '%23 = load i64, i64* %PC, align 8', '%24 = add i64 %23, 5', 'store i64 %24, i64* %PC, align 8', '%25 = bitcast %union.VectorReg* %3 to \\<2 x float\\>*', '%26 = load \\<2 x float\\>, \\<2 x float\\>* %25, align 1', '%27 = extractelement \\<2 x float\\> %26, i32 0', '%28 = inttoptr i64 %22 to float*', 'store float %27, float* %28, align 4', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', '%35 = bitcast %union.VectorReg* %3 to i8*', '%36 = bitcast %union.VectorReg* %3 to i32*', '%37 = getelementptr inbounds i8, i8* %35, i64 4', '%38 = bitcast i8* %37 to float*', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%40 = bitcast i64* %39 to float*', '%41 = getelementptr inbounds i8, i8* %35, i64 12', '%42 = bitcast i8* %41 to float*', '%43 = bitcast i64* %RAX to float**', '%.pre = load i64, i64* %PC, align 8', '%44 = add i64 %81, -20', '%45 = add i64 %115, 5', 'store i64 %45, i64* %PC, align 8', '%46 = inttoptr i64 %44 to i32*', '%47 = load i32, i32* %46, align 4', 'store i32 %47, i32* %36, align 1', 'store float 0.000000e+00, float* %38, align 1', 'store float 0.000000e+00, float* %40, align 1', 'store float 0.000000e+00, float* %42, align 1', '%48 = add i64 %115, 9', 'store i64 %48, i64* %PC, align 8', '%49 = load i64, i64* %84, align 8', 'store i64 %49, i64* %RAX, align 8', '%50 = add i64 %49, 4', 'store i64 %50, i64* %RCX, align 8', '%51 = icmp ugt i64 %49, -5', '%52 = zext i1 %51 to i8', 'store i8 %52, i8* %29, align 1', '%53 = trunc i64 %50 to i32', '%54 = and i32 %53, 255', '%55 = tail call i32 @llvm.ctpop.i32(i32 %54) #12', '%56 = trunc i32 %55 to i8', '%57 = and i8 %56, 1', '%58 = xor i8 %57, 1', 'store i8 %58, i8* %30, align 1', '%59 = xor i64 %50, %49', '%60 = lshr i64 %59, 4', '%61 = trunc i64 %60 to i8', '%62 = and i8 %61, 1', 'store i8 %62, i8* %31, align 1', '%63 = icmp eq i64 %50, 0', '%64 = zext i1 %63 to i8', 'store i8 %64, i8* %32, align 1', '%65 = lshr i64 %50, 63', '%66 = trunc i64 %65 to i8', 'store i8 %66, i8* %33, align 1', '%67 = lshr i64 %49, 63', '%68 = xor i64 %65, %67', '%69 = add nuw nsw i64 %68, %65', '%70 = icmp eq i64 %69, 2', '%71 = zext i1 %70 to i8', 'store i8 %71, i8* %34, align 1', '%72 = add i64 %115, 20', 'store i64 %72, i64* %PC, align 8', 'store i64 %50, i64* %84, align 8', '%73 = load float*, float** %43, align 8', '%74 = load i64, i64* %PC, align 8', '%75 = add i64 %74, 4', 'store i64 %75, i64* %PC, align 8', '%76 = load \\<2 x float\\>, \\<2 x float\\>* %25, align 1', '%77 = extractelement \\<2 x float\\> %76, i32 0', 'store float %77, float* %73, align 4', '%78 = load i64, i64* %PC, align 8', '%79 = add i64 %78, -38', 'store i64 %79, i64* %PC, align 8', '%80 = phi i64 [ %79, %block_40d18f ], [ %.pre, %block_40d170 ]', '%83 = add i64 %80, 4', 'store i64 %83, i64* %PC, align 8', 'store i64 %85, i64* %RAX, align 8', '%87 = add i64 %80, 8', 'store i64 %87, i64* %PC, align 8', '%91 = icmp ult i64 %85, %89', '%92 = zext i1 %91 to i8', 'store i8 %92, i8* %29, align 1', '%93 = trunc i64 %90 to i32', '%94 = and i32 %93, 255', '%95 = tail call i32 @llvm.ctpop.i32(i32 %94) #12', '%96 = trunc i32 %95 to i8', '%97 = and i8 %96, 1', '%98 = xor i8 %97, 1', 'store i8 %98, i8* %30, align 1', '%99 = xor i64 %89, %85', '%100 = xor i64 %99, %90', '%101 = lshr i64 %100, 4', '%102 = trunc i64 %101 to i8', '%103 = and i8 %102, 1', 'store i8 %103, i8* %31, align 1', '%105 = zext i1 %104 to i8', 'store i8 %105, i8* %32, align 1', '%106 = lshr i64 %90, 63', '%107 = trunc i64 %106 to i8', 'store i8 %107, i8* %33, align 1', '%108 = lshr i64 %85, 63', '%109 = lshr i64 %89, 63', '%110 = xor i64 %109, %108', '%111 = xor i64 %106, %108', '%112 = add nuw nsw i64 %111, %110', '%113 = icmp eq i64 %112, 2', '%114 = zext i1 %113 to i8', 'store i8 %114, i8* %34, align 1', '%.v = select i1 %104, i64 43, i64 14', '%115 = add i64 %80, %.v', 'store i64 %115, i64* %PC, align 8', '%116 = add i64 %115, 1', 'store i64 %116, i64* %PC, align 8', '%117 = load i64, i64* %6, align 8', '%118 = add i64 %117, 8', '%119 = inttoptr i64 %117 to i64*', '%120 = load i64, i64* %119, align 8', 'store i64 %120, i64* %RBP, align 8', 'store i64 %118, i64* %6, align 8', '%121 = add i64 %115, 2', 'store i64 %121, i64* %PC, align 8', '%122 = inttoptr i64 %118 to i64*', '%123 = load i64, i64* %122, align 8', 'store i64 %123, i64* %PC, align 8', '%124 = add i64 %117, 16', 'store i64 %124, i64* %6, align 8'])
[x] Failed to do opt
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_constant_folding/_Z4fillIPffEvT_S1_T0_/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_constant_folding/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
Traceback (most recent call last):
  File "/usr/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/usr/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/ubuntu/Github/llir-matcher/matcher/match.py", line 728, in <module>
    matcher.do_match()
  File "/home/ubuntu/Github/llir-matcher/matcher/match.py", line 101, in do_match
    self.do_opt()
  File "/home/ubuntu/Github/llir-matcher/matcher/match.py", line 582, in do_opt
    env=MYENV)
  File "/usr/lib/python3.6/subprocess.py", line 311, in check_call
    raise CalledProcessError(retcode, cmd)
subprocess.CalledProcessError: Command '/home/ubuntu/Install/llvm/llvm.4.0.0.install/bin/opt -S -inline /tmp/tmpmg7dcs50-query.ll -o /tmp/tmpmg7dcs50-query.ll' returned non-zero exit status 1.
