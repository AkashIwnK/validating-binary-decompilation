Writing '/tmp/tmp6kzrdyyj.dot'...
Writing '/tmp/tmp6kzrdyyj.dot':Done

Reading LLVM: /tmp/tmps39oardm-query.ll
Extracting function [_ZN28custom_multiple_constant_addIdE8do_shiftEd] from /tmp/tmps39oardm-query.ll
Dot file generated!
Writing '/tmp/tmpr7f92s_w.dot'...
Writing '/tmp/tmpr7f92s_w.dot':Done

Reading LLVM: /tmp/tmpj2kq68_n-target.ll
Extracting function [_ZN28custom_multiple_constant_addIdE8do_shiftEd] from /tmp/tmpj2kq68_n-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 store i64 %8, i64* %6, align 8
- 11 %10 = load i64, i64* %3, align 8
- 12 store i64 %8, i64* %RBP.i, align 8
- 13 %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 14 %12 = add i64 %10, add (i64 ptrtoint (%G_0x9e5c__rip__type* @G_0x9e5c__rip_ to i64), i64 3)
- 15 %13 = add i64 %10, 11
- 16 store i64 %13, i64* %3, align 8
- 17 %14 = inttoptr i64 %12 to i64*
- 18 %15 = load i64, i64* %14, align 8
- 19 %16 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %11, i64 0, i32 0, i32 0, i32 0, i64 0
- 20 store i64 %15, i64* %16, align 1
- 21 %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
- 22 %18 = bitcast i64* %17 to double*
- 23 store double 0.000000e+00, double* %18, align 1
- 24 %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
- 25 %20 = add i64 %10, add (i64 ptrtoint (%G_0x9e5c__rip__type* @G_0x9e5c__rip_ to i64), i64 11)
- 26 %21 = add i64 %10, 19
- 27 store i64 %21, i64* %3, align 8
- 28 %22 = inttoptr i64 %20 to i64*
- 29 %23 = load i64, i64* %22, align 8
- 30 %24 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %19, i64 0, i32 0, i32 0, i32 0, i64 0
- 31 store i64 %23, i64* %24, align 1
- 32 %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
- 33 %26 = bitcast i64* %25 to double*
- 34 store double 0.000000e+00, double* %26, align 1
- 35 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
- 36 %28 = add i64 %10, add (i64 ptrtoint (%G_0x9e24__rip__type* @G_0x9e24__rip_ to i64), i64 19)
- 37 %29 = add i64 %10, 27
- 38 store i64 %29, i64* %3, align 8
- 39 %30 = inttoptr i64 %28 to i64*
- 40 %31 = load i64, i64* %30, align 8
- 41 %32 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %27, i64 0, i32 0, i32 0, i32 0, i64 0
- 42 store i64 %31, i64* %32, align 1
- 43 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
- 44 %34 = bitcast i64* %33 to double*
- 45 store double 0.000000e+00, double* %34, align 1
- 46 %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
- 47 %36 = add i64 %10, add (i64 ptrtoint (%G_0x9e5c__rip__type* @G_0x9e5c__rip_ to i64), i64 27)
- 48 %37 = add i64 %10, 35
- 49 store i64 %37, i64* %3, align 8
- 50 %38 = inttoptr i64 %36 to i64*
- 51 %39 = load i64, i64* %38, align 8
- 52 %40 = bitcast %union.VectorReg* %35 to double*
- 53 %41 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %35, i64 0, i32 0, i32 0, i32 0, i64 0
- 54 store i64 %39, i64* %41, align 1
- 55 %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
- 56 %43 = bitcast i64* %42 to double*
- 57 store double 0.000000e+00, double* %43, align 1
- 58 %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
- 59 %45 = add i64 %7, -16
- 60 %46 = add i64 %10, 40
- 61 store i64 %46, i64* %3, align 8
- 62 %47 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %44, i64 0, i32 0, i32 0, i32 0, i64 0
- 63 %48 = load i64, i64* %47, align 1
- 64 %49 = inttoptr i64 %45 to i64*
- 65 store i64 %48, i64* %49, align 8
- 66 %50 = load i64, i64* %RBP.i, align 8
- 67 %51 = add i64 %50, -8
- 68 %52 = load i64, i64* %3, align 8
- 69 %53 = add i64 %52, 5
- 70 store i64 %53, i64* %3, align 8
- 71 %54 = load double, double* %40, align 1
- 72 %55 = bitcast i64* %42 to \<2 x i32\>*
- 73 %56 = load \<2 x i32\>, \<2 x i32\>* %55, align 1
- 74 %57 = inttoptr i64 %51 to double*
- 75 %58 = load double, double* %57, align 8
- 76 %59 = fadd double %54, %58
- 77 %60 = bitcast %union.VectorReg* %27 to double*
- 78 %61 = load double, double* %60, align 1
- 79 %62 = fadd double %59, %61
- 80 %63 = bitcast %union.VectorReg* %19 to double*
- 81 %64 = load double, double* %63, align 1
- 82 %65 = fadd double %62, %64
- 83 %66 = bitcast %union.VectorReg* %11 to double*
- 84 %67 = load double, double* %66, align 1
- 85 %68 = fadd double %65, %67
- 86 store double %68, double* %40, align 1
- 87 %69 = bitcast %union.VectorReg* %44 to i8*
- 88 %70 = bitcast double %68 to \<2 x i32\>
- 89 %71 = extractelement \<2 x i32\> %70, i32 0
- 90 %72 = bitcast %union.VectorReg* %44 to i32*
- 91 store i32 %71, i32* %72, align 1
- 92 %73 = extractelement \<2 x i32\> %70, i32 1
- 93 %74 = getelementptr inbounds i8, i8* %69, i64 4
- 94 %75 = bitcast i8* %74 to i32*
- 95 store i32 %73, i32* %75, align 1
- 96 %76 = extractelement \<2 x i32\> %56, i32 0
- 97 %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 98 %78 = bitcast i64* %77 to i32*
- 99 store i32 %76, i32* %78, align 1
- 100 %79 = extractelement \<2 x i32\> %56, i32 1
- 101 %80 = getelementptr inbounds i8, i8* %69, i64 12
- 102 %81 = bitcast i8* %80 to i32*
- 103 store i32 %79, i32* %81, align 1
- 104 %82 = add i64 %52, 21
- 105 store i64 %82, i64* %3, align 8
- 106 %83 = load i64, i64* %6, align 8
- 107 %84 = add i64 %83, 8
- 108 %85 = inttoptr i64 %83 to i64*
- 109 %86 = load i64, i64* %85, align 8
- 110 store i64 %86, i64* %RBP.i, align 8
- 111 store i64 %84, i64* %6, align 8
- 112 %87 = add i64 %52, 22
- 113 store i64 %87, i64* %3, align 8
- 114 %88 = inttoptr i64 %84 to i64*
- 115 %89 = load i64, i64* %88, align 8
- 116 store i64 %89, i64* %3, align 8
- 117 %90 = add i64 %83, 16
- 118 store i64 %90, i64* %6, align 8
- 119 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f71b3488ae8>, {0: {0}, 1: {1}, 2: {65, 99, 36, 68, 7, 11, 47, 16, 18, 50, 52, 62, 55, 24, 57, 90, 59, 93, 30}, 3: {8}, 4: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 5: {10}, 6: {65, 99, 36, 68, 7, 11, 47, 16, 18, 50, 52, 62, 55, 24, 57, 90, 59, 93, 30}, 7: {51, 12}, 8: {98, 13, 48, 58, 92}, 9: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 10: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 11: {65, 99, 36, 68, 7, 11, 47, 16, 18, 50, 52, 62, 55, 24, 57, 90, 59, 93, 30}, 12: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 13: {3}, 14: set(), 15: set(), 16: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 17: {98, 13, 48, 58, 92}, 18: {65, 99, 36, 68, 7, 11, 47, 16, 18, 50, 52, 62, 55, 24, 57, 90, 59, 93, 30}, 19: {25, 19, 38, 31}, 20: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 21: {21}, 22: {64, 34, 67, 37, 71, 72, 41, 74, 78, 82, 22, 86, 56, 28, 61}, 23: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 24: {4}, 25: set(), 26: set(), 27: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 28: {98, 13, 48, 58, 92}, 29: {65, 99, 36, 68, 7, 11, 47, 16, 18, 50, 52, 62, 55, 24, 57, 90, 59, 93, 30}, 30: {25, 19, 38, 31}, 31: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 32: {27}, 33: {64, 34, 67, 37, 71, 72, 41, 74, 78, 82, 22, 86, 56, 28, 61}, 34: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 35: {5}, 36: set(), 37: set(), 38: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 39: {98, 13, 48, 58, 92}, 40: {65, 99, 36, 68, 7, 11, 47, 16, 18, 50, 52, 62, 55, 24, 57, 90, 59, 93, 30}, 41: {25, 19, 38, 31}, 42: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 43: {33}, 44: {64, 34, 67, 37, 71, 72, 41, 74, 78, 82, 22, 86, 56, 28, 61}, 45: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 46: {6}, 47: set(), 48: set(), 49: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 50: {98, 13, 48, 58, 92}, 51: {65, 99, 36, 68, 7, 11, 47, 16, 18, 50, 52, 62, 55, 24, 57, 90, 59, 93, 30}, 52: {64, 34, 67, 37, 71, 72, 41, 74, 78, 82, 22, 86, 56, 28, 61}, 53: {25, 19, 38, 31}, 54: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 55: {40}, 56: {64, 34, 67, 37, 71, 72, 41, 74, 78, 82, 22, 86, 56, 28, 61}, 57: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 58: set(), 59: {43}, 60: {44}, 61: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 62: {25, 19, 38, 31}, 63: {65, 99, 36, 68, 7, 11, 47, 16, 18, 50, 52, 62, 55, 24, 57, 90, 59, 93, 30}, 64: {98, 13, 48, 58, 92}, 65: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 66: {65, 99, 36, 68, 7, 11, 47, 16, 18, 50, 52, 62, 55, 24, 57, 90, 59, 93, 30}, 67: {51, 12}, 68: {65, 99, 36, 68, 7, 11, 47, 16, 18, 50, 52, 62, 55, 24, 57, 90, 59, 93, 30}, 69: {53}, 70: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 71: {65, 99, 36, 68, 7, 11, 47, 16, 18, 50, 52, 62, 55, 24, 57, 90, 59, 93, 30}, 72: {64, 34, 67, 37, 71, 72, 41, 74, 78, 82, 22, 86, 56, 28, 61}, 73: {65, 99, 36, 68, 7, 11, 47, 16, 18, 50, 52, 62, 55, 24, 57, 90, 59, 93, 30}, 74: {98, 13, 48, 58, 92}, 75: {65, 99, 36, 68, 7, 11, 47, 16, 18, 50, 52, 62, 55, 24, 57, 90, 59, 93, 30}, 76: {66, 60, 69, 63}, 77: {64, 34, 67, 37, 71, 72, 41, 74, 78, 82, 22, 86, 56, 28, 61}, 78: {65, 99, 36, 68, 7, 11, 47, 16, 18, 50, 52, 62, 55, 24, 57, 90, 59, 93, 30}, 79: {66, 60, 69, 63}, 80: {64, 34, 67, 37, 71, 72, 41, 74, 78, 82, 22, 86, 56, 28, 61}, 81: {65, 99, 36, 68, 7, 11, 47, 16, 18, 50, 52, 62, 55, 24, 57, 90, 59, 93, 30}, 82: {66, 60, 69, 63}, 83: {64, 34, 67, 37, 71, 72, 41, 74, 78, 82, 22, 86, 56, 28, 61}, 84: {65, 99, 36, 68, 7, 11, 47, 16, 18, 50, 52, 62, 55, 24, 57, 90, 59, 93, 30}, 85: {66, 60, 69, 63}, 86: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 87: {64, 34, 67, 37, 71, 72, 41, 74, 78, 82, 22, 86, 56, 28, 61}, 88: {64, 34, 67, 37, 71, 72, 41, 74, 78, 82, 22, 86, 56, 28, 61}, 89: {80, 73}, 90: {64, 34, 67, 37, 71, 72, 41, 74, 78, 82, 22, 86, 56, 28, 61}, 91: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 92: {76, 84}, 93: {77}, 94: {64, 34, 67, 37, 71, 72, 41, 74, 78, 82, 22, 86, 56, 28, 61}, 95: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 96: {80, 73}, 97: {81}, 98: {64, 34, 67, 37, 71, 72, 41, 74, 78, 82, 22, 86, 56, 28, 61}, 99: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 100: {76, 84}, 101: {85}, 102: {64, 34, 67, 37, 71, 72, 41, 74, 78, 82, 22, 86, 56, 28, 61}, 103: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 104: {88}, 105: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 106: {65, 99, 36, 68, 7, 11, 47, 16, 18, 50, 52, 62, 55, 24, 57, 90, 59, 93, 30}, 107: {91}, 108: {98, 13, 48, 58, 92}, 109: {65, 99, 36, 68, 7, 11, 47, 16, 18, 50, 52, 62, 55, 24, 57, 90, 59, 93, 30}, 110: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 111: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 112: {96}, 113: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 114: {98, 13, 48, 58, 92}, 115: {65, 99, 36, 68, 7, 11, 47, 16, 18, 50, 52, 62, 55, 24, 57, 90, 59, 93, 30}, 116: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 117: {101}, 118: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 39, 42, 45, 49, 54, 70, 75, 79, 83, 87, 89, 94, 95, 97, 100, 102}, 119: {103}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f71b3488ae8>, {0: {0}, 1: {1}, 2: {7}, 3: {8}, 4: {9}, 5: {10}, 6: {11}, 7: {12}, 8: {13}, 9: {14}, 10: {15}, 11: {16}, 12: {17}, 13: {3}, 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: {21}, 22: {22}, 23: {23}, 24: {4}, 25: set(), 26: set(), 27: set(), 28: set(), 29: set(), 30: set(), 31: set(), 32: {27}, 33: {28}, 34: {29}, 35: {5}, 36: set(), 37: set(), 38: set(), 39: set(), 40: set(), 41: set(), 42: set(), 43: {33}, 44: {34}, 45: {35}, 46: {6}, 47: set(), 48: set(), 49: set(), 50: set(), 51: set(), 52: {37}, 53: set(), 54: set(), 55: {40}, 56: {41}, 57: {42}, 58: set(), 59: set(), 60: {44}, 61: {45}, 62: set(), 63: set(), 64: set(), 65: set(), 66: {50}, 67: {51}, 68: {52}, 69: {53}, 70: {54}, 71: {55}, 72: {56}, 73: {57}, 74: {58}, 75: {59}, 76: {60}, 77: {61}, 78: {62}, 79: {63}, 80: {64}, 81: {65}, 82: {66}, 83: {67}, 84: {68}, 85: {69}, 86: {70}, 87: set(), 88: set(), 89: set(), 90: set(), 91: set(), 92: set(), 93: set(), 94: set(), 95: set(), 96: {80}, 97: {81}, 98: {82}, 99: {83}, 100: set(), 101: set(), 102: set(), 103: set(), 104: {88}, 105: {89}, 106: {90}, 107: {91}, 108: {92}, 109: {93}, 110: {94}, 111: {95}, 112: {96}, 113: {97}, 114: {98}, 115: {99}, 116: {100}, 117: {101}, 118: {102}, 119: {103}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 store store
EXACT 11 load load
EXACT 12 store store
EXACT 13 getelementptr getelementptr
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
EXACT 21 getelementptr getelementptr
EXACT 22 bitcast bitcast
EXACT 23 store store
EXACT 24 getelementptr getelementptr
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
NO MATCH 29
NO MATCH 30
NO MATCH 31
EXACT 32 getelementptr getelementptr
EXACT 33 bitcast bitcast
EXACT 34 store store
EXACT 35 getelementptr getelementptr
NO MATCH 36
NO MATCH 37
NO MATCH 38
NO MATCH 39
NO MATCH 40
NO MATCH 41
NO MATCH 42
EXACT 43 getelementptr getelementptr
EXACT 44 bitcast bitcast
EXACT 45 store store
EXACT 46 getelementptr getelementptr
NO MATCH 47
NO MATCH 48
NO MATCH 49
NO MATCH 50
NO MATCH 51
EXACT 52 bitcast bitcast
NO MATCH 53
NO MATCH 54
EXACT 55 getelementptr getelementptr
EXACT 56 bitcast bitcast
EXACT 57 store store
NO MATCH 58
NO MATCH 59
EXACT 60 add add
EXACT 61 store store
NO MATCH 62
NO MATCH 63
NO MATCH 64
NO MATCH 65
EXACT 66 load load
EXACT 67 add add
EXACT 68 load load
EXACT 69 add add
EXACT 70 store store
EXACT 71 load load
EXACT 72 bitcast bitcast
EXACT 73 load load
EXACT 74 inttoptr inttoptr
EXACT 75 load load
EXACT 76 fadd fadd
EXACT 77 bitcast bitcast
EXACT 78 load load
EXACT 79 fadd fadd
EXACT 80 bitcast bitcast
EXACT 81 load load
EXACT 82 fadd fadd
EXACT 83 bitcast bitcast
EXACT 84 load load
EXACT 85 fadd fadd
EXACT 86 store store
NO MATCH 87
NO MATCH 88
NO MATCH 89
NO MATCH 90
NO MATCH 91
NO MATCH 92
NO MATCH 93
NO MATCH 94
NO MATCH 95
EXACT 96 extractelement extractelement
EXACT 97 getelementptr getelementptr
EXACT 98 bitcast bitcast
EXACT 99 store store
NO MATCH 100
NO MATCH 101
NO MATCH 102
NO MATCH 103
EXACT 104 add add
EXACT 105 store store
EXACT 106 load load
EXACT 107 add add
EXACT 108 inttoptr inttoptr
EXACT 109 load load
EXACT 110 store store
EXACT 111 store store
EXACT 112 add add
EXACT 113 store store
EXACT 114 inttoptr inttoptr
EXACT 115 load load
EXACT 116 store store
EXACT 117 add add
EXACT 118 store store
EXACT 119 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
- 3 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 4 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
- 6 %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
- 7 %8 = load i64, i64* %RBP, align 8
- 8 %9 = add i64 %1, 1
- 9 store i64 %9, i64* %PC, align 8
- 10 %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 11 %11 = load i64, i64* %10, align 8
- 12 %12 = add i64 %11, -8
- 13 %13 = inttoptr i64 %12 to i64*
- 14 store i64 %8, i64* %13, align 8
- 15 store i64 %12, i64* %10, align 8
- 16 %14 = load i64, i64* %PC, align 8
- 17 store i64 %12, i64* %RBP, align 8
- 18 %15 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 72) to i64*), align 8
- 19 %16 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
- 20 store i64 %15, i64* %16, align 1
- 21 %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
- 22 %18 = bitcast i64* %17 to double*
- 23 store double 0.000000e+00, double* %18, align 1
- 24 %19 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 80) to i64*), align 16
- 25 %20 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %5, i64 0, i32 0, i32 0, i32 0, i64 0
- 26 store i64 %19, i64* %20, align 1
- 27 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
- 28 %22 = bitcast i64* %21 to double*
- 29 store double 0.000000e+00, double* %22, align 1
- 30 %23 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 32) to i64*), align 16
- 31 %24 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
- 32 store i64 %23, i64* %24, align 1
- 33 %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
- 34 %26 = bitcast i64* %25 to double*
- 35 store double 0.000000e+00, double* %26, align 1
- 36 %27 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 96) to i64*), align 16
- 37 %28 = bitcast %union.VectorReg* %7 to double*
- 38 %29 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
- 39 store i64 %27, i64* %29, align 1
- 40 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
- 41 %31 = bitcast i64* %30 to double*
- 42 store double 0.000000e+00, double* %31, align 1
- 43 %32 = add i64 %11, -16
- 44 %33 = add i64 %14, 40
- 45 store i64 %33, i64* %PC, align 8
- 46 %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
- 47 %35 = load i64, i64* %34, align 1
- 48 %36 = inttoptr i64 %32 to i64*
- 49 store i64 %35, i64* %36, align 8
- 50 %37 = load i64, i64* %RBP, align 8
- 51 %38 = add i64 %37, -8
- 52 %39 = load i64, i64* %PC, align 8
- 53 %40 = add i64 %39, 5
- 54 store i64 %40, i64* %PC, align 8
- 55 %41 = load double, double* %28, align 1
- 56 %42 = bitcast i64* %30 to \<2 x i32\>*
- 57 %43 = load \<2 x i32\>, \<2 x i32\>* %42, align 1
- 58 %44 = inttoptr i64 %38 to double*
- 59 %45 = load double, double* %44, align 8
- 60 %46 = fadd double %41, %45
- 61 %47 = bitcast %union.VectorReg* %6 to double*
- 62 %48 = load double, double* %47, align 1
- 63 %49 = fadd double %46, %48
- 64 %50 = bitcast %union.VectorReg* %5 to double*
- 65 %51 = load double, double* %50, align 1
- 66 %52 = fadd double %49, %51
- 67 %53 = bitcast %union.VectorReg* %4 to double*
- 68 %54 = load double, double* %53, align 1
- 69 %55 = fadd double %52, %54
- 70 store double %55, double* %28, align 1
- 71 %56 = bitcast [32 x %union.VectorReg]* %3 to i8*
- 72 %57 = bitcast double %55 to \<2 x i32\>
- 73 %58 = extractelement \<2 x i32\> %57, i32 0
- 74 %59 = bitcast [32 x %union.VectorReg]* %3 to i32*
- 75 store i32 %58, i32* %59, align 1
- 76 %60 = extractelement \<2 x i32\> %57, i32 1
- 77 %61 = getelementptr inbounds i8, i8* %56, i64 4
- 78 %62 = bitcast i8* %61 to i32*
- 79 store i32 %60, i32* %62, align 1
- 80 %63 = extractelement \<2 x i32\> %43, i32 0
- 81 %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 82 %65 = bitcast i64* %64 to i32*
- 83 store i32 %63, i32* %65, align 1
- 84 %66 = extractelement \<2 x i32\> %43, i32 1
- 85 %67 = getelementptr inbounds i8, i8* %56, i64 12
- 86 %68 = bitcast i8* %67 to i32*
- 87 store i32 %66, i32* %68, align 1
- 88 %69 = add i64 %39, 21
- 89 store i64 %69, i64* %PC, align 8
- 90 %70 = load i64, i64* %10, align 8
- 91 %71 = add i64 %70, 8
- 92 %72 = inttoptr i64 %70 to i64*
- 93 %73 = load i64, i64* %72, align 8
- 94 store i64 %73, i64* %RBP, align 8
- 95 store i64 %71, i64* %10, align 8
- 96 %74 = add i64 %39, 22
- 97 store i64 %74, i64* %PC, align 8
- 98 %75 = inttoptr i64 %71 to i64*
- 99 %76 = load i64, i64* %75, align 8
- 100 store i64 %76, i64* %PC, align 8
- 101 %77 = add i64 %70, 16
- 102 store i64 %77, i64* %10, align 8
- 103 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f71b3488950>, {0: {0}, 1: {1}, 2: set(), 3: {13}, 4: {24}, 5: {35}, 6: {46}, 7: {2, 66, 68, 6, 71, 40, 73, 106, 11, 75, 109, 78, 81, 18, 51, 84, 115, 29, 63}, 8: {3}, 9: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 10: {5}, 11: {2, 66, 68, 6, 71, 40, 73, 106, 11, 75, 109, 78, 81, 18, 51, 84, 115, 29, 63}, 12: {67, 7}, 13: {64, 39, 8, 74, 108, 17, 50, 114, 28}, 14: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 15: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 16: {2, 66, 68, 6, 71, 40, 73, 106, 11, 75, 109, 78, 81, 18, 51, 84, 115, 29, 63}, 17: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 18: {2, 66, 68, 6, 71, 40, 73, 106, 11, 75, 109, 78, 81, 18, 51, 84, 115, 29, 63}, 19: {41, 19, 53, 30, 62}, 20: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 21: {21}, 22: {33, 98, 102, 72, 44, 77, 80, 83, 52, 22, 87, 56, 90, 88, 94}, 23: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 24: {2, 66, 68, 6, 71, 40, 73, 106, 11, 75, 109, 78, 81, 18, 51, 84, 115, 29, 63}, 25: {41, 19, 53, 30, 62}, 26: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 27: {32}, 28: {33, 98, 102, 72, 44, 77, 80, 83, 52, 22, 87, 56, 90, 88, 94}, 29: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 30: {2, 66, 68, 6, 71, 40, 73, 106, 11, 75, 109, 78, 81, 18, 51, 84, 115, 29, 63}, 31: {41, 19, 53, 30, 62}, 32: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 33: {43}, 34: {33, 98, 102, 72, 44, 77, 80, 83, 52, 22, 87, 56, 90, 88, 94}, 35: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 36: {2, 66, 68, 6, 71, 40, 73, 106, 11, 75, 109, 78, 81, 18, 51, 84, 115, 29, 63}, 37: {33, 98, 102, 72, 44, 77, 80, 83, 52, 22, 87, 56, 90, 88, 94}, 38: {41, 19, 53, 30, 62}, 39: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 40: {55}, 41: {33, 98, 102, 72, 44, 77, 80, 83, 52, 22, 87, 56, 90, 88, 94}, 42: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 43: {59}, 44: {60}, 45: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 46: set(), 47: {2, 66, 68, 6, 71, 40, 73, 106, 11, 75, 109, 78, 81, 18, 51, 84, 115, 29, 63}, 48: {64, 39, 8, 74, 108, 17, 50, 114, 28}, 49: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 50: {2, 66, 68, 6, 71, 40, 73, 106, 11, 75, 109, 78, 81, 18, 51, 84, 115, 29, 63}, 51: {67, 7}, 52: {2, 66, 68, 6, 71, 40, 73, 106, 11, 75, 109, 78, 81, 18, 51, 84, 115, 29, 63}, 53: {69}, 54: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 55: {2, 66, 68, 6, 71, 40, 73, 106, 11, 75, 109, 78, 81, 18, 51, 84, 115, 29, 63}, 56: {33, 98, 102, 72, 44, 77, 80, 83, 52, 22, 87, 56, 90, 88, 94}, 57: {2, 66, 68, 6, 71, 40, 73, 106, 11, 75, 109, 78, 81, 18, 51, 84, 115, 29, 63}, 58: {64, 39, 8, 74, 108, 17, 50, 114, 28}, 59: {2, 66, 68, 6, 71, 40, 73, 106, 11, 75, 109, 78, 81, 18, 51, 84, 115, 29, 63}, 60: {82, 76, 85, 79}, 61: {33, 98, 102, 72, 44, 77, 80, 83, 52, 22, 87, 56, 90, 88, 94}, 62: {2, 66, 68, 6, 71, 40, 73, 106, 11, 75, 109, 78, 81, 18, 51, 84, 115, 29, 63}, 63: {82, 76, 85, 79}, 64: {33, 98, 102, 72, 44, 77, 80, 83, 52, 22, 87, 56, 90, 88, 94}, 65: {2, 66, 68, 6, 71, 40, 73, 106, 11, 75, 109, 78, 81, 18, 51, 84, 115, 29, 63}, 66: {82, 76, 85, 79}, 67: {33, 98, 102, 72, 44, 77, 80, 83, 52, 22, 87, 56, 90, 88, 94}, 68: {2, 66, 68, 6, 71, 40, 73, 106, 11, 75, 109, 78, 81, 18, 51, 84, 115, 29, 63}, 69: {82, 76, 85, 79}, 70: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 71: {33, 98, 102, 72, 44, 77, 80, 83, 52, 22, 87, 56, 90, 88, 94}, 72: {33, 98, 102, 72, 44, 77, 80, 83, 52, 22, 87, 56, 90, 88, 94}, 73: {96, 89}, 74: {33, 98, 102, 72, 44, 77, 80, 83, 52, 22, 87, 56, 90, 88, 94}, 75: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 76: {100, 92}, 77: {93}, 78: {33, 98, 102, 72, 44, 77, 80, 83, 52, 22, 87, 56, 90, 88, 94}, 79: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 80: {96, 89}, 81: {97}, 82: {33, 98, 102, 72, 44, 77, 80, 83, 52, 22, 87, 56, 90, 88, 94}, 83: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 84: {100, 92}, 85: {101}, 86: {33, 98, 102, 72, 44, 77, 80, 83, 52, 22, 87, 56, 90, 88, 94}, 87: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 88: {104}, 89: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 90: {2, 66, 68, 6, 71, 40, 73, 106, 11, 75, 109, 78, 81, 18, 51, 84, 115, 29, 63}, 91: {107}, 92: {64, 39, 8, 74, 108, 17, 50, 114, 28}, 93: {2, 66, 68, 6, 71, 40, 73, 106, 11, 75, 109, 78, 81, 18, 51, 84, 115, 29, 63}, 94: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 95: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 96: {112}, 97: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 98: {64, 39, 8, 74, 108, 17, 50, 114, 28}, 99: {2, 66, 68, 6, 71, 40, 73, 106, 11, 75, 109, 78, 81, 18, 51, 84, 115, 29, 63}, 100: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 101: {117}, 102: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 54, 57, 61, 65, 70, 86, 91, 95, 99, 103, 105, 110, 111, 113, 116, 118}, 103: {119}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f71b3488950>, {0: {0}, 1: {1}, 2: set(), 3: {13}, 4: {24}, 5: {35}, 6: {46}, 7: {2}, 8: {3}, 9: {4}, 10: {5}, 11: {6}, 12: {7}, 13: {8}, 14: {9}, 15: {10}, 16: {11}, 17: {12}, 18: {18}, 19: {19}, 20: {20}, 21: {21}, 22: {22}, 23: {23}, 24: {29}, 25: {30}, 26: {31}, 27: {32}, 28: {33}, 29: {34}, 30: {40}, 31: {41}, 32: {42}, 33: {43}, 34: {44}, 35: {45}, 36: {51}, 37: {52}, 38: {53}, 39: {54}, 40: {55}, 41: {56}, 42: {57}, 43: set(), 44: {60}, 45: {61}, 46: set(), 47: set(), 48: set(), 49: set(), 50: {66}, 51: {67}, 52: {68}, 53: {69}, 54: {70}, 55: {71}, 56: {72}, 57: {73}, 58: {74}, 59: {75}, 60: {76}, 61: {77}, 62: {78}, 63: {79}, 64: {80}, 65: {81}, 66: {82}, 67: {83}, 68: {84}, 69: {85}, 70: {86}, 71: set(), 72: set(), 73: set(), 74: set(), 75: set(), 76: set(), 77: set(), 78: set(), 79: set(), 80: {96}, 81: {97}, 82: {98}, 83: {99}, 84: set(), 85: set(), 86: set(), 87: set(), 88: {104}, 89: {105}, 90: {106}, 91: {107}, 92: {108}, 93: {109}, 94: {110}, 95: {111}, 96: {112}, 97: {113}, 98: {114}, 99: {115}, 100: {116}, 101: {117}, 102: {118}, 103: {119}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
NO MATCH 2
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 getelementptr getelementptr
EXACT 7 load load
EXACT 8 add add
EXACT 9 store store
EXACT 10 getelementptr getelementptr
EXACT 11 load load
EXACT 12 add add
EXACT 13 inttoptr inttoptr
EXACT 14 store store
EXACT 15 store store
EXACT 16 load load
EXACT 17 store store
EXACT 18 load load
EXACT 19 getelementptr getelementptr
EXACT 20 store store
EXACT 21 getelementptr getelementptr
EXACT 22 bitcast bitcast
EXACT 23 store store
EXACT 24 load load
EXACT 25 getelementptr getelementptr
EXACT 26 store store
EXACT 27 getelementptr getelementptr
EXACT 28 bitcast bitcast
EXACT 29 store store
EXACT 30 load load
EXACT 31 getelementptr getelementptr
EXACT 32 store store
EXACT 33 getelementptr getelementptr
EXACT 34 bitcast bitcast
EXACT 35 store store
EXACT 36 load load
EXACT 37 bitcast bitcast
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 getelementptr getelementptr
EXACT 41 bitcast bitcast
EXACT 42 store store
NO MATCH 43
EXACT 44 add add
EXACT 45 store store
NO MATCH 46
NO MATCH 47
NO MATCH 48
NO MATCH 49
EXACT 50 load load
EXACT 51 add add
EXACT 52 load load
EXACT 53 add add
EXACT 54 store store
EXACT 55 load load
EXACT 56 bitcast bitcast
EXACT 57 load load
EXACT 58 inttoptr inttoptr
EXACT 59 load load
EXACT 60 fadd fadd
EXACT 61 bitcast bitcast
EXACT 62 load load
EXACT 63 fadd fadd
EXACT 64 bitcast bitcast
EXACT 65 load load
EXACT 66 fadd fadd
EXACT 67 bitcast bitcast
EXACT 68 load load
EXACT 69 fadd fadd
EXACT 70 store store
NO MATCH 71
NO MATCH 72
NO MATCH 73
NO MATCH 74
NO MATCH 75
NO MATCH 76
NO MATCH 77
NO MATCH 78
NO MATCH 79
EXACT 80 extractelement extractelement
EXACT 81 getelementptr getelementptr
EXACT 82 bitcast bitcast
EXACT 83 store store
NO MATCH 84
NO MATCH 85
NO MATCH 86
NO MATCH 87
EXACT 88 add add
EXACT 89 store store
EXACT 90 load load
EXACT 91 add add
EXACT 92 inttoptr inttoptr
EXACT 93 load load
EXACT 94 store store
EXACT 95 store store
EXACT 96 add add
EXACT 97 store store
EXACT 98 inttoptr inttoptr
EXACT 99 load load
EXACT 100 store store
EXACT 101 add add
EXACT 102 store store
EXACT 103 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%18 = bitcast i64* %17 to double*', 'store double 0.000000e+00, double* %18, align 1', '%25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1', '%26 = bitcast i64* %25 to double*', 'store double 0.000000e+00, double* %26, align 1', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1', '%34 = bitcast i64* %33 to double*', 'store double 0.000000e+00, double* %34, align 1', '%43 = bitcast i64* %42 to double*', 'store double 0.000000e+00, double* %43, align 1', '%46 = add i64 %10, 40', 'store i64 %46, i64* %3, align 8', '%52 = load i64, i64* %3, align 8', '%53 = add i64 %52, 5', 'store i64 %53, i64* %3, align 8', 'store double %68, double* %40, align 1', '%76 = extractelement \\<2 x i32\\> %56, i32 0', '%77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%78 = bitcast i64* %77 to i32*', 'store i32 %76, i32* %78, align 1', '%82 = add i64 %52, 21', 'store i64 %82, i64* %3, align 8', '%83 = load i64, i64* %6, align 8', '%84 = add i64 %83, 8', '%85 = inttoptr i64 %83 to i64*', '%86 = load i64, i64* %85, align 8', 'store i64 %86, i64* %RBP.i, align 8', 'store i64 %84, i64* %6, align 8', '%87 = add i64 %52, 22', 'store i64 %87, i64* %3, align 8', '%88 = inttoptr i64 %84 to i64*', '%89 = load i64, i64* %88, align 8', 'store i64 %89, i64* %3, align 8', '%90 = add i64 %83, 16', 'store i64 %90, i64* %6, align 8', 'ret %struct.Memory* %2'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Keep: %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Keep: %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Keep: %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Keep: %12 = add i64 %10, add (i64 ptrtoint (%G_0x9e5c__rip__type* @G_0x9e5c__rip_ to i64), i64 3)
Keep: %13 = add i64 %10, 11
Keep: store i64 %13, i64* %3, align 8
Keep: %14 = inttoptr i64 %12 to i64*
Keep: %15 = load i64, i64* %14, align 8
Keep: %16 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %11, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %15, i64* %16, align 1
Found line to remove! %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
Found line to remove! %18 = bitcast i64* %17 to double*
Found line to remove! store double 0.000000e+00, double* %18, align 1
Keep: %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
Keep: %20 = add i64 %10, add (i64 ptrtoint (%G_0x9e5c__rip__type* @G_0x9e5c__rip_ to i64), i64 11)
Keep: %21 = add i64 %10, 19
Keep: store i64 %21, i64* %3, align 8
Keep: %22 = inttoptr i64 %20 to i64*
Keep: %23 = load i64, i64* %22, align 8
Keep: %24 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %19, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %23, i64* %24, align 1
Found line to remove! %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
Found line to remove! %26 = bitcast i64* %25 to double*
Found line to remove! store double 0.000000e+00, double* %26, align 1
Keep: %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
Keep: %28 = add i64 %10, add (i64 ptrtoint (%G_0x9e24__rip__type* @G_0x9e24__rip_ to i64), i64 19)
Keep: %29 = add i64 %10, 27
Keep: store i64 %29, i64* %3, align 8
Keep: %30 = inttoptr i64 %28 to i64*
Keep: %31 = load i64, i64* %30, align 8
Keep: %32 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %27, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %31, i64* %32, align 1
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
Found line to remove! %34 = bitcast i64* %33 to double*
Found line to remove! store double 0.000000e+00, double* %34, align 1
Keep: %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
Keep: %36 = add i64 %10, add (i64 ptrtoint (%G_0x9e5c__rip__type* @G_0x9e5c__rip_ to i64), i64 27)
Keep: %37 = add i64 %10, 35
Keep: store i64 %37, i64* %3, align 8
Keep: %38 = inttoptr i64 %36 to i64*
Keep: %39 = load i64, i64* %38, align 8
Keep: %40 = bitcast %union.VectorReg* %35 to double*
Keep: %41 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %35, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %39, i64* %41, align 1
Keep: %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
Found line to remove! %43 = bitcast i64* %42 to double*
Found line to remove! store double 0.000000e+00, double* %43, align 1
Keep: %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
Keep: %45 = add i64 %7, -16
Found line to remove! %46 = add i64 %10, 40
Found line to remove! store i64 %46, i64* %3, align 8
Keep: %47 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %44, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: %48 = load i64, i64* %47, align 1
Keep: %49 = inttoptr i64 %45 to i64*
Keep: store i64 %48, i64* %49, align 8
Keep: %50 = load i64, i64* %RBP.i, align 8
Keep: %51 = add i64 %50, -8
Found line to remove! %52 = load i64, i64* %3, align 8
Found line to remove! %53 = add i64 %52, 5
Found line to remove! store i64 %53, i64* %3, align 8
Keep: %54 = load double, double* %40, align 1
Keep: %55 = bitcast i64* %42 to <2 x i32>*
Keep: %56 = load <2 x i32>, <2 x i32>* %55, align 1
Keep: %57 = inttoptr i64 %51 to double*
Keep: %58 = load double, double* %57, align 8
Keep: %59 = fadd double %54, %58
Keep: %60 = bitcast %union.VectorReg* %27 to double*
Keep: %61 = load double, double* %60, align 1
Keep: %62 = fadd double %59, %61
Keep: %63 = bitcast %union.VectorReg* %19 to double*
Keep: %64 = load double, double* %63, align 1
Keep: %65 = fadd double %62, %64
Keep: %66 = bitcast %union.VectorReg* %11 to double*
Keep: %67 = load double, double* %66, align 1
Keep: %68 = fadd double %65, %67
Found line to remove! store double %68, double* %40, align 1
Keep: %69 = bitcast %union.VectorReg* %44 to i8*
Keep: %70 = bitcast double %68 to <2 x i32>
Keep: %71 = extractelement <2 x i32> %70, i32 0
Keep: %72 = bitcast %union.VectorReg* %44 to i32*
Keep: store i32 %71, i32* %72, align 1
Keep: %73 = extractelement <2 x i32> %70, i32 1
Keep: %74 = getelementptr inbounds i8, i8* %69, i64 4
Keep: %75 = bitcast i8* %74 to i32*
Keep: store i32 %73, i32* %75, align 1
Keep: %76 = extractelement <2 x i32> %56, i32 0
Found line to remove! %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %78 = bitcast i64* %77 to i32*
Found line to remove! store i32 %76, i32* %78, align 1
Keep: %79 = extractelement <2 x i32> %56, i32 1
Keep: %80 = getelementptr inbounds i8, i8* %69, i64 12
Keep: %81 = bitcast i8* %80 to i32*
Keep: store i32 %79, i32* %81, align 1
Found line to remove! %82 = add i64 %52, 21
Found line to remove! store i64 %82, i64* %3, align 8
Found line to remove! %83 = load i64, i64* %6, align 8
Found line to remove! %84 = add i64 %83, 8
Found line to remove! %85 = inttoptr i64 %83 to i64*
Found line to remove! %86 = load i64, i64* %85, align 8
Found line to remove! store i64 %86, i64* %RBP.i, align 8
Found line to remove! store i64 %84, i64* %6, align 8
Found line to remove! %87 = add i64 %52, 22
Found line to remove! store i64 %87, i64* %3, align 8
Found line to remove! %88 = inttoptr i64 %84 to i64*
Found line to remove! %89 = load i64, i64* %88, align 8
Found line to remove! store i64 %89, i64* %3, align 8
Found line to remove! %90 = add i64 %83, 16
Found line to remove! store i64 %90, i64* %6, align 8
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%8 = load i64, i64* %RBP, align 8', '%9 = add i64 %1, 1', 'store i64 %9, i64* %PC, align 8', '%12 = add i64 %11, -8', '%13 = inttoptr i64 %12 to i64*', 'store i64 %8, i64* %13, align 8', 'store i64 %12, i64* %10, align 8', '%14 = load i64, i64* %PC, align 8', 'store i64 %12, i64* %RBP, align 8', '%15 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 72) to i64*), align 8', '%16 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %15, i64* %16, align 1', '%17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%18 = bitcast i64* %17 to double*', 'store double 0.000000e+00, double* %18, align 1', '%19 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 80) to i64*), align 16', '%20 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %5, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %19, i64* %20, align 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1', '%22 = bitcast i64* %21 to double*', 'store double 0.000000e+00, double* %22, align 1', '%23 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 32) to i64*), align 16', '%24 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %23, i64* %24, align 1', '%25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1', '%26 = bitcast i64* %25 to double*', 'store double 0.000000e+00, double* %26, align 1', '%27 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 96) to i64*), align 16', '%29 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %27, i64* %29, align 1', '%31 = bitcast i64* %30 to double*', 'store double 0.000000e+00, double* %31, align 1', '%33 = add i64 %14, 40', 'store i64 %33, i64* %PC, align 8', '%39 = load i64, i64* %PC, align 8', '%40 = add i64 %39, 5', 'store i64 %40, i64* %PC, align 8', 'store double %55, double* %28, align 1', '%63 = extractelement \\<2 x i32\\> %43, i32 0', '%64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%65 = bitcast i64* %64 to i32*', 'store i32 %63, i32* %65, align 1', '%69 = add i64 %39, 21', 'store i64 %69, i64* %PC, align 8', '%70 = load i64, i64* %10, align 8', '%71 = add i64 %70, 8', '%72 = inttoptr i64 %70 to i64*', '%73 = load i64, i64* %72, align 8', 'store i64 %73, i64* %RBP, align 8', 'store i64 %71, i64* %10, align 8', '%74 = add i64 %39, 22', 'store i64 %74, i64* %PC, align 8', '%75 = inttoptr i64 %71 to i64*', '%76 = load i64, i64* %75, align 8', 'store i64 %76, i64* %PC, align 8', '%77 = add i64 %70, 16', 'store i64 %77, i64* %10, align 8', 'ret %struct.Memory* %2'])
Keep: block_40ec00:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
Keep: %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Keep: %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
Keep: %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
Keep: %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
Found line to remove! %8 = load i64, i64* %RBP, align 8
Found line to remove! %9 = add i64 %1, 1
Found line to remove! store i64 %9, i64* %PC, align 8
Keep: %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %11 = load i64, i64* %10, align 8
Found line to remove! %12 = add i64 %11, -8
Found line to remove! %13 = inttoptr i64 %12 to i64*
Found line to remove! store i64 %8, i64* %13, align 8
Found line to remove! store i64 %12, i64* %10, align 8
Found line to remove! %14 = load i64, i64* %PC, align 8
Found line to remove! store i64 %12, i64* %RBP, align 8
Found line to remove! %15 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 72) to i64*), align 8
Found line to remove! %16 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! store i64 %15, i64* %16, align 1
Found line to remove! %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
Found line to remove! %18 = bitcast i64* %17 to double*
Found line to remove! store double 0.000000e+00, double* %18, align 1
Found line to remove! %19 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 80) to i64*), align 16
Found line to remove! %20 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %5, i64 0, i32 0, i32 0, i32 0, i64 0Writing '/tmp/tmpou_vgcvm.dot'...
Writing '/tmp/tmpou_vgcvm.dot':Done

Reading LLVM: /tmp/tmps39oardm-query.ll
Extracting function [_ZN28custom_multiple_constant_addIdE8do_shiftEd] from /tmp/tmps39oardm-query.ll
Dot file generated!
Writing '/tmp/tmppo2gfywg.dot'...
Writing '/tmp/tmppo2gfywg.dot':Done

Reading LLVM: /tmp/tmpj2kq68_n-target.ll
Extracting function [_ZN28custom_multiple_constant_addIdE8do_shiftEd] from /tmp/tmpj2kq68_n-target.ll
Dot file generated!

Found line to remove! store i64 %19, i64* %20, align 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
Found line to remove! %22 = bitcast i64* %21 to double*
Found line to remove! store double 0.000000e+00, double* %22, align 1
Found line to remove! %23 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 32) to i64*), align 16
Found line to remove! %24 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! store i64 %23, i64* %24, align 1
Found line to remove! %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
Found line to remove! %26 = bitcast i64* %25 to double*
Found line to remove! store double 0.000000e+00, double* %26, align 1
Found line to remove! %27 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 96) to i64*), align 16
Keep: %28 = bitcast %union.VectorReg* %7 to double*
Found line to remove! %29 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! store i64 %27, i64* %29, align 1
Keep: %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
Found line to remove! %31 = bitcast i64* %30 to double*
Found line to remove! store double 0.000000e+00, double* %31, align 1
Keep: %32 = add i64 %11, -16
Found line to remove! %33 = add i64 %14, 40
Found line to remove! store i64 %33, i64* %PC, align 8
Keep: %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: %35 = load i64, i64* %34, align 1
Keep: %36 = inttoptr i64 %32 to i64*
Keep: store i64 %35, i64* %36, align 8
Keep: %37 = load i64, i64* %RBP, align 8
Keep: %38 = add i64 %37, -8
Found line to remove! %39 = load i64, i64* %PC, align 8
Found line to remove! %40 = add i64 %39, 5
Found line to remove! store i64 %40, i64* %PC, align 8
Keep: %41 = load double, double* %28, align 1
Keep: %42 = bitcast i64* %30 to <2 x i32>*
Keep: %43 = load <2 x i32>, <2 x i32>* %42, align 1
Keep: %44 = inttoptr i64 %38 to double*
Keep: %45 = load double, double* %44, align 8
Keep: %46 = fadd double %41, %45
Keep: %47 = bitcast %union.VectorReg* %6 to double*
Keep: %48 = load double, double* %47, align 1
Keep: %49 = fadd double %46, %48
Keep: %50 = bitcast %union.VectorReg* %5 to double*
Keep: %51 = load double, double* %50, align 1
Keep: %52 = fadd double %49, %51
Keep: %53 = bitcast %union.VectorReg* %4 to double*
Keep: %54 = load double, double* %53, align 1
Keep: %55 = fadd double %52, %54
Found line to remove! store double %55, double* %28, align 1
Keep: %56 = bitcast [32 x %union.VectorReg]* %3 to i8*
Keep: %57 = bitcast double %55 to <2 x i32>
Keep: %58 = extractelement <2 x i32> %57, i32 0
Keep: %59 = bitcast [32 x %union.VectorReg]* %3 to i32*
Keep: store i32 %58, i32* %59, align 1
Keep: %60 = extractelement <2 x i32> %57, i32 1
Keep: %61 = getelementptr inbounds i8, i8* %56, i64 4
Keep: %62 = bitcast i8* %61 to i32*
Keep: store i32 %60, i32* %62, align 1
Keep: %63 = extractelement <2 x i32> %43, i32 0
Found line to remove! %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %65 = bitcast i64* %64 to i32*
Found line to remove! store i32 %63, i32* %65, align 1
Keep: %66 = extractelement <2 x i32> %43, i32 1
Keep: %67 = getelementptr inbounds i8, i8* %56, i64 12
Keep: %68 = bitcast i8* %67 to i32*
Keep: store i32 %66, i32* %68, align 1
Found line to remove! %69 = add i64 %39, 21
Found line to remove! store i64 %69, i64* %PC, align 8
Found line to remove! %70 = load i64, i64* %10, align 8
Found line to remove! %71 = add i64 %70, 8
Found line to remove! %72 = inttoptr i64 %70 to i64*
Found line to remove! %73 = load i64, i64* %72, align 8
Found line to remove! store i64 %73, i64* %RBP, align 8
Found line to remove! store i64 %71, i64* %10, align 8
Found line to remove! %74 = add i64 %39, 22
Found line to remove! store i64 %74, i64* %PC, align 8
Found line to remove! %75 = inttoptr i64 %71 to i64*
Found line to remove! %76 = load i64, i64* %75, align 8
Found line to remove! store i64 %76, i64* %PC, align 8
Found line to remove! %77 = add i64 %70, 16
Found line to remove! store i64 %77, i64* %10, align 8
Found line to remove! ret %struct.Memory* %2
================ Starting round 2
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %var_2_6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 3 %var_2_7 = load i64, i64* %var_2_6, align 8
- 4 %var_2_10 = load i64, i64* %var_2_3, align 8
- 5 %var_2_11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 6 %var_2_12 = add i64 %var_2_10, add (i64 ptrtoint (%G_0x9e5c__rip__type* @G_0x9e5c__rip_ to i64), i64 3)
- 7 %var_2_13 = add i64 %var_2_10, 11
- 8 store i64 %var_2_13, i64* %var_2_3, align 8
- 9 %var_2_14 = inttoptr i64 %var_2_12 to i64*
- 10 %var_2_15 = load i64, i64* %var_2_14, align 8
- 11 %var_2_16 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_11, i64 0, i32 0, i32 0, i32 0, i64 0
- 12 store i64 %var_2_15, i64* %var_2_16, align 1
- 13 %var_2_19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
- 14 %var_2_20 = add i64 %var_2_10, add (i64 ptrtoint (%G_0x9e5c__rip__type* @G_0x9e5c__rip_ to i64), i64 11)
- 15 %var_2_21 = add i64 %var_2_10, 19
- 16 store i64 %var_2_21, i64* %var_2_3, align 8
- 17 %var_2_22 = inttoptr i64 %var_2_20 to i64*
- 18 %var_2_23 = load i64, i64* %var_2_22, align 8
- 19 %var_2_24 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_19, i64 0, i32 0, i32 0, i32 0, i64 0
- 20 store i64 %var_2_23, i64* %var_2_24, align 1
- 21 %var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
- 22 %var_2_28 = add i64 %var_2_10, add (i64 ptrtoint (%G_0x9e24__rip__type* @G_0x9e24__rip_ to i64), i64 19)
- 23 %var_2_29 = add i64 %var_2_10, 27
- 24 store i64 %var_2_29, i64* %var_2_3, align 8
- 25 %var_2_30 = inttoptr i64 %var_2_28 to i64*
- 26 %var_2_31 = load i64, i64* %var_2_30, align 8
- 27 %var_2_32 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_27, i64 0, i32 0, i32 0, i32 0, i64 0
- 28 store i64 %var_2_31, i64* %var_2_32, align 1
- 29 %var_2_35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
- 30 %var_2_36 = add i64 %var_2_10, add (i64 ptrtoint (%G_0x9e5c__rip__type* @G_0x9e5c__rip_ to i64), i64 27)
- 31 %var_2_37 = add i64 %var_2_10, 35
- 32 store i64 %var_2_37, i64* %var_2_3, align 8
- 33 %var_2_38 = inttoptr i64 %var_2_36 to i64*
- 34 %var_2_39 = load i64, i64* %var_2_38, align 8
- 35 %var_2_40 = bitcast %union.VectorReg* %var_2_35 to double*
- 36 %var_2_41 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_35, i64 0, i32 0, i32 0, i32 0, i64 0
- 37 store i64 %var_2_39, i64* %var_2_41, align 1
- 38 %var_2_42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
- 39 %var_2_44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
- 40 %var_2_45 = add i64 %var_2_7, -16
- 41 %var_2_47 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_44, i64 0, i32 0, i32 0, i32 0, i64 0
- 42 %var_2_48 = load i64, i64* %var_2_47, align 1
- 43 %var_2_49 = inttoptr i64 %var_2_45 to i64*
- 44 store i64 %var_2_48, i64* %var_2_49, align 8
- 45 %var_2_50 = load i64, i64* %RBP.i, align 8
- 46 %var_2_51 = add i64 %var_2_50, -8
- 47 %var_2_54 = load double, double* %var_2_40, align 1
- 48 %var_2_55 = bitcast i64* %var_2_42 to \<2 x i32\>*
- 49 %var_2_56 = load \<2 x i32\>, \<2 x i32\>* %var_2_55, align 1
- 50 %var_2_57 = inttoptr i64 %var_2_51 to double*
- 51 %var_2_58 = load double, double* %var_2_57, align 8
- 52 %var_2_59 = fadd double %var_2_54, %var_2_58
- 53 %var_2_60 = bitcast %union.VectorReg* %var_2_27 to double*
- 54 %var_2_61 = load double, double* %var_2_60, align 1
- 55 %var_2_62 = fadd double %var_2_59, %var_2_61
- 56 %var_2_63 = bitcast %union.VectorReg* %var_2_19 to double*
- 57 %var_2_64 = load double, double* %var_2_63, align 1
- 58 %var_2_65 = fadd double %var_2_62, %var_2_64
- 59 %var_2_66 = bitcast %union.VectorReg* %var_2_11 to double*
- 60 %var_2_67 = load double, double* %var_2_66, align 1
- 61 %var_2_68 = fadd double %var_2_65, %var_2_67
- 62 %var_2_69 = bitcast %union.VectorReg* %var_2_44 to i8*
- 63 %var_2_70 = bitcast double %var_2_68 to \<2 x i32\>
- 64 %var_2_71 = extractelement \<2 x i32\> %var_2_70, i32 0
- 65 %var_2_72 = bitcast %union.VectorReg* %var_2_44 to i32*
- 66 store i32 %var_2_71, i32* %var_2_72, align 1
- 67 %var_2_73 = extractelement \<2 x i32\> %var_2_70, i32 1
- 68 %var_2_74 = getelementptr inbounds i8, i8* %var_2_69, i64 4
- 69 %var_2_75 = bitcast i8* %var_2_74 to i32*
- 70 store i32 %var_2_73, i32* %var_2_75, align 1
- 71 %var_2_79 = extractelement \<2 x i32\> %var_2_56, i32 1
- 72 %var_2_80 = getelementptr inbounds i8, i8* %var_2_69, i64 12
- 73 %var_2_81 = bitcast i8* %var_2_80 to i32*
- 74 store i32 %var_2_79, i32* %var_2_81, align 1
- 75 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f71b39562f0>, {0: set(), 1: {0}, 2: {6}, 3: {7, 12, 15, 17, 19, 21, 24, 27, 30}, 4: {7, 12, 15, 17, 19, 21, 24, 27, 30}, 5: {2}, 6: set(), 7: set(), 8: {40, 36, 14, 44}, 9: {20, 13}, 10: {7, 12, 15, 17, 19, 21, 24, 27, 30}, 11: set(), 12: {40, 36, 14, 44}, 13: {3}, 14: set(), 15: set(), 16: {40, 36, 14, 44}, 17: {20, 13}, 18: {7, 12, 15, 17, 19, 21, 24, 27, 30}, 19: set(), 20: {40, 36, 14, 44}, 21: {4}, 22: set(), 23: set(), 24: {40, 36, 14, 44}, 25: {20, 13}, 26: {7, 12, 15, 17, 19, 21, 24, 27, 30}, 27: set(), 28: {40, 36, 14, 44}, 29: {5}, 30: set(), 31: set(), 32: {40, 36, 14, 44}, 33: {20, 13}, 34: {7, 12, 15, 17, 19, 21, 24, 27, 30}, 35: {32, 33, 35, 39, 8, 43, 18, 23, 26, 29}, 36: set(), 37: {40, 36, 14, 44}, 38: {9}, 39: set(), 40: {10}, 41: set(), 42: {7, 12, 15, 17, 19, 21, 24, 27, 30}, 43: {20, 13}, 44: {40, 36, 14, 44}, 45: {7, 12, 15, 17, 19, 21, 24, 27, 30}, 46: {16}, 47: {7, 12, 15, 17, 19, 21, 24, 27, 30}, 48: {32, 33, 35, 39, 8, 43, 18, 23, 26, 29}, 49: {7, 12, 15, 17, 19, 21, 24, 27, 30}, 50: {20, 13}, 51: {7, 12, 15, 17, 19, 21, 24, 27, 30}, 52: {25, 28, 22, 31}, 53: {32, 33, 35, 39, 8, 43, 18, 23, 26, 29}, 54: {7, 12, 15, 17, 19, 21, 24, 27, 30}, 55: {25, 28, 22, 31}, 56: {32, 33, 35, 39, 8, 43, 18, 23, 26, 29}, 57: {7, 12, 15, 17, 19, 21, 24, 27, 30}, 58: {25, 28, 22, 31}, 59: {32, 33, 35, 39, 8, 43, 18, 23, 26, 29}, 60: {7, 12, 15, 17, 19, 21, 24, 27, 30}, 61: {25, 28, 22, 31}, 62: {32, 33, 35, 39, 8, 43, 18, 23, 26, 29}, 63: {32, 33, 35, 39, 8, 43, 18, 23, 26, 29}, 64: {34}, 65: {32, 33, 35, 39, 8, 43, 18, 23, 26, 29}, 66: {40, 36, 14, 44}, 67: {41, 37}, 68: {38}, 69: {32, 33, 35, 39, 8, 43, 18, 23, 26, 29}, 70: {40, 36, 14, 44}, 71: {41, 37}, 72: {42}, 73: {32, 33, 35, 39, 8, 43, 18, 23, 26, 29}, 74: {40, 36, 14, 44}, 75: {45}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f71b39562f0>, {0: set(), 1: set(), 2: set(), 3: set(), 4: set(), 5: set(), 6: set(), 7: set(), 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: set(), 30: set(), 31: set(), 32: set(), 33: set(), 34: set(), 35: set(), 36: set(), 37: set(), 38: set(), 39: set(), 40: set(), 41: set(), 42: set(), 43: set(), 44: set(), 45: set(), 46: set(), 47: set(), 48: set(), 49: set(), 50: set(), 51: set(), 52: set(), 53: set(), 54: set(), 55: set(), 56: set(), 57: set(), 58: set(), 59: set(), 60: set(), 61: set(), 62: set(), 63: set(), 64: set(), 65: set(), 66: set(), 67: set(), 68: set(), 69: set(), 70: set(), 71: set(), 72: set(), 73: set(), 74: set(), 75: {45}})
NO MATCH 0
NO MATCH 1
NO MATCH 2
NO MATCH 3
NO MATCH 4
NO MATCH 5
NO MATCH 6
NO MATCH 7
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
NO MATCH 29
NO MATCH 30
NO MATCH 31
NO MATCH 32
NO MATCH 33
NO MATCH 34
NO MATCH 35
NO MATCH 36
NO MATCH 37
NO MATCH 38
NO MATCH 39
NO MATCH 40
NO MATCH 41
NO MATCH 42
NO MATCH 43
NO MATCH 44
NO MATCH 45
NO MATCH 46
NO MATCH 47
NO MATCH 48
NO MATCH 49
NO MATCH 50
NO MATCH 51
NO MATCH 52
NO MATCH 53
NO MATCH 54
NO MATCH 55
NO MATCH 56
NO MATCH 57
NO MATCH 58
NO MATCH 59
NO MATCH 60
NO MATCH 61
NO MATCH 62
NO MATCH 63
NO MATCH 64
NO MATCH 65
NO MATCH 66
NO MATCH 67
NO MATCH 68
NO MATCH 69
NO MATCH 70
NO MATCH 71
NO MATCH 72
NO MATCH 73
NO MATCH 74
EXACT 75 ret ret
================ Starting round 3
MAPPING:
- 0 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
- 2 %var_2_4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 3 %var_2_5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
- 4 %var_2_6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
- 5 %var_2_7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
- 6 %var_2_10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 7 %var_2_11 = load i64, i64* %var_2_10, align 8
- 8 %var_2_28 = bitcast %union.VectorReg* %var_2_7 to double*
- 9 %var_2_30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
- 10 %var_2_32 = add i64 %var_2_11, -16
- 11 %var_2_34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %var_2_3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
- 12 %var_2_35 = load i64, i64* %var_2_34, align 1
- 13 %var_2_36 = inttoptr i64 %var_2_32 to i64*
- 14 store i64 %var_2_35, i64* %var_2_36, align 8
- 15 %var_2_37 = load i64, i64* %RBP, align 8
- 16 %var_2_38 = add i64 %var_2_37, -8
- 17 %var_2_41 = load double, double* %var_2_28, align 1
- 18 %var_2_42 = bitcast i64* %var_2_30 to \<2 x i32\>*
- 19 %var_2_43 = load \<2 x i32\>, \<2 x i32\>* %var_2_42, align 1
- 20 %var_2_44 = inttoptr i64 %var_2_38 to double*
- 21 %var_2_45 = load double, double* %var_2_44, align 8
- 22 %var_2_46 = fadd double %var_2_41, %var_2_45
- 23 %var_2_47 = bitcast %union.VectorReg* %var_2_6 to double*
- 24 %var_2_48 = load double, double* %var_2_47, align 1
- 25 %var_2_49 = fadd double %var_2_46, %var_2_48
- 26 %var_2_50 = bitcast %union.VectorReg* %var_2_5 to double*
- 27 %var_2_51 = load double, double* %var_2_50, align 1
- 28 %var_2_52 = fadd double %var_2_49, %var_2_51
- 29 %var_2_53 = bitcast %union.VectorReg* %var_2_4 to double*
- 30 %var_2_54 = load double, double* %var_2_53, align 1
- 31 %var_2_55 = fadd double %var_2_52, %var_2_54
- 32 %var_2_56 = bitcast [32 x %union.VectorReg]* %var_2_3 to i8*
- 33 %var_2_57 = bitcast double %var_2_55 to \<2 x i32\>
- 34 %var_2_58 = extractelement \<2 x i32\> %var_2_57, i32 0
- 35 %var_2_59 = bitcast [32 x %union.VectorReg]* %var_2_3 to i32*
- 36 store i32 %var_2_58, i32* %var_2_59, align 1
- 37 %var_2_60 = extractelement \<2 x i32\> %var_2_57, i32 1
- 38 %var_2_61 = getelementptr inbounds i8, i8* %var_2_56, i64 4
- 39 %var_2_62 = bitcast i8* %var_2_61 to i32*
- 40 store i32 %var_2_60, i32* %var_2_62, align 1
- 41 %var_2_66 = extractelement \<2 x i32\> %var_2_43, i32 1
- 42 %var_2_67 = getelementptr inbounds i8, i8* %var_2_56, i64 12
- 43 %var_2_68 = bitcast i8* %var_2_67 to i32*
- 44 store i32 %var_2_66, i32* %var_2_68, align 1
- 45 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f71b3840e18>, {0: {1}, 1: set(), 2: {5}, 3: {13}, 4: {21}, 5: {29}, 6: {2}, 7: {34, 3, 4, 10, 42, 45, 47, 49, 18, 51, 54, 57, 26, 60}, 8: {65, 35, 69, 73, 48, 53, 56, 59, 62, 63}, 9: {38}, 10: {40}, 11: set(), 12: {34, 3, 4, 10, 42, 45, 47, 49, 18, 51, 54, 57, 26, 60}, 13: {33, 9, 43, 17, 50, 25}, 14: {32, 66, 37, 70, 8, 74, 12, 44, 16, 20, 24, 28}, 15: {34, 3, 4, 10, 42, 45, 47, 49, 18, 51, 54, 57, 26, 60}, 16: {46}, 17: {34, 3, 4, 10, 42, 45, 47, 49, 18, 51, 54, 57, 26, 60}, 18: {65, 35, 69, 73, 48, 53, 56, 59, 62, 63}, 19: {34, 3, 4, 10, 42, 45, 47, 49, 18, 51, 54, 57, 26, 60}, 20: {33, 9, 43, 17, 50, 25}, 21: {34, 3, 4, 10, 42, 45, 47, 49, 18, 51, 54, 57, 26, 60}, 22: {58, 52, 61, 55}, 23: {65, 35, 69, 73, 48, 53, 56, 59, 62, 63}, 24: {34, 3, 4, 10, 42, 45, 47, 49, 18, 51, 54, 57, 26, 60}, 25: {58, 52, 61, 55}, 26: {65, 35, 69, 73, 48, 53, 56, 59, 62, 63}, 27: {34, 3, 4, 10, 42, 45, 47, 49, 18, 51, 54, 57, 26, 60}, 28: {58, 52, 61, 55}, 29: {65, 35, 69, 73, 48, 53, 56, 59, 62, 63}, 30: {34, 3, 4, 10, 42, 45, 47, 49, 18, 51, 54, 57, 26, 60}, 31: {58, 52, 61, 55}, 32: {65, 35, 69, 73, 48, 53, 56, 59, 62, 63}, 33: {65, 35, 69, 73, 48, 53, 56, 59, 62, 63}, 34: {64}, 35: {65, 35, 69, 73, 48, 53, 56, 59, 62, 63}, 36: {32, 66, 37, 70, 8, 74, 12, 44, 16, 20, 24, 28}, 37: {67, 71}, 38: {68}, 39: {65, 35, 69, 73, 48, 53, 56, 59, 62, 63}, 40: {32, 66, 37, 70, 8, 74, 12, 44, 16, 20, 24, 28}, 41: {67, 71}, 42: {72}, 43: {65, 35, 69, 73, 48, 53, 56, 59, 62, 63}, 44: {32, 66, 37, 70, 8, 74, 12, 44, 16, 20, 24, 28}, 45: {75}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f71b3840e18>, {0: set(), 1: set(), 2: set(), 3: set(), 4: set(), 5: set(), 6: set(), 7: set(), 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: set(), 30: set(), 31: set(), 32: set(), 33: set(), 34: set(), 35: set(), 36: set(), 37: set(), 38: set(), 39: set(), 40: set(), 41: set(), 42: set(), 43: set(), 44: set(), 45: {75}})
NO MATCH 0
NO MATCH 1
NO MATCH 2
NO MATCH 3
NO MATCH 4
NO MATCH 5
NO MATCH 6
NO MATCH 7
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
NO MATCH 29
NO MATCH 30
NO MATCH 31
NO MATCH 32
NO MATCH 33
NO MATCH 34
NO MATCH 35
NO MATCH 36
NO MATCH 37
NO MATCH 38
NO MATCH 39
NO MATCH 40
NO MATCH 41
NO MATCH 42
NO MATCH 43
NO MATCH 44
EXACT 45 ret ret
FP: 63 2.0 False
TO REMOVE: dict_keys(['ret %struct.Memory* %2'])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %var_2_7 = load i64, i64* %var_2_6, align 8
Keep: %var_2_10 = load i64, i64* %var_2_3, align 8
Keep: %var_2_11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Keep: %var_2_12 = add i64 %var_2_10, add (i64 ptrtoint (%G_0x9e5c__rip__type* @G_0x9e5c__rip_ to i64), i64 3)
Keep: %var_2_13 = add i64 %var_2_10, 11
Keep: store i64 %var_2_13, i64* %var_2_3, align 8
Keep: %var_2_14 = inttoptr i64 %var_2_12 to i64*
Keep: %var_2_15 = load i64, i64* %var_2_14, align 8
Keep: %var_2_16 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_11, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_15, i64* %var_2_16, align 1
Keep: %var_2_19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
Keep: %var_2_20 = add i64 %var_2_10, add (i64 ptrtoint (%G_0x9e5c__rip__type* @G_0x9e5c__rip_ to i64), i64 11)
Keep: %var_2_21 = add i64 %var_2_10, 19
Keep: store i64 %var_2_21, i64* %var_2_3, align 8
Keep: %var_2_22 = inttoptr i64 %var_2_20 to i64*
Keep: %var_2_23 = load i64, i64* %var_2_22, align 8
Keep: %var_2_24 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_19, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_23, i64* %var_2_24, align 1
Keep: %var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
Keep: %var_2_28 = add i64 %var_2_10, add (i64 ptrtoint (%G_0x9e24__rip__type* @G_0x9e24__rip_ to i64), i64 19)
Keep: %var_2_29 = add i64 %var_2_10, 27
Keep: store i64 %var_2_29, i64* %var_2_3, align 8
Keep: %var_2_30 = inttoptr i64 %var_2_28 to i64*
Keep: %var_2_31 = load i64, i64* %var_2_30, align 8
Keep: %var_2_32 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_27, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_31, i64* %var_2_32, align 1
Keep: %var_2_35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
Keep: %var_2_36 = add i64 %var_2_10, add (i64 ptrtoint (%G_0x9e5c__rip__type* @G_0x9e5c__rip_ to i64), i64 27)
Keep: %var_2_37 = add i64 %var_2_10, 35
Keep: store i64 %var_2_37, i64* %var_2_3, align 8
Keep: %var_2_38 = inttoptr i64 %var_2_36 to i64*
Keep: %var_2_39 = load i64, i64* %var_2_38, align 8
Keep: %var_2_40 = bitcast %union.VectorReg* %var_2_35 to double*
Keep: %var_2_41 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_35, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_39, i64* %var_2_41, align 1
Keep: %var_2_42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
Keep: %var_2_44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
Keep: %var_2_45 = add i64 %var_2_7, -16
Keep: %var_2_47 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_44, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: %var_2_48 = load i64, i64* %var_2_47, align 1
Keep: %var_2_49 = inttoptr i64 %var_2_45 to i64*
Keep: store i64 %var_2_48, i64* %var_2_49, align 8
Keep: %var_2_50 = load i64, i64* %RBP.i, align 8
Keep: %var_2_51 = add i64 %var_2_50, -8
Keep: %var_2_54 = load double, double* %var_2_40, align 1
Keep: %var_2_55 = bitcast i64* %var_2_42 to <2 x i32>*
Keep: %var_2_56 = load <2 x i32>, <2 x i32>* %var_2_55, align 1
Keep: %var_2_57 = inttoptr i64 %var_2_51 to double*
Keep: %var_2_58 = load double, double* %var_2_57, align 8
Keep: %var_2_59 = fadd double %var_2_54, %var_2_58
Keep: %var_2_60 = bitcast %union.VectorReg* %var_2_27 to double*
Keep: %var_2_61 = load double, double* %var_2_60, align 1
Keep: %var_2_62 = fadd double %var_2_59, %var_2_61
Keep: %var_2_63 = bitcast %union.VectorReg* %var_2_19 to double*
Keep: %var_2_64 = load double, double* %var_2_63, align 1
Keep: %var_2_65 = fadd double %var_2_62, %var_2_64
Keep: %var_2_66 = bitcast %union.VectorReg* %var_2_11 to double*
Keep: %var_2_67 = load double, double* %var_2_66, align 1
Keep: %var_2_68 = fadd double %var_2_65, %var_2_67
Keep: %var_2_69 = bitcast %union.VectorReg* %var_2_44 to i8*
Keep: %var_2_70 = bitcast double %var_2_68 to <2 x i32>
Keep: %var_2_71 = extractelement <2 x i32> %var_2_70, i32 0
Keep: %var_2_72 = bitcast %union.VectorReg* %var_2_44 to i32*
Keep: store i32 %var_2_71, i32* %var_2_72, align 1
Keep: %var_2_73 = extractelement <2 x i32> %var_2_70, i32 1
Keep: %var_2_74 = getelementptr inbounds i8, i8* %var_2_69, i64 4
Keep: %var_2_75 = bitcast i8* %var_2_74 to i32*
Keep: store i32 %var_2_73, i32* %var_2_75, align 1
Keep: %var_2_79 = extractelement <2 x i32> %var_2_56, i32 1
Keep: %var_2_80 = getelementptr inbounds i8, i8* %var_2_69, i64 12
Keep: %var_2_81 = bitcast i8* %var_2_80 to i32*
Keep: store i32 %var_2_79, i32* %var_2_81, align 1
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['ret %struct.Memory* %2'])
Keep: block_40ec00:
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
Keep: %var_2_4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Keep: %var_2_5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
Keep: %var_2_6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
Keep: %var_2_7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
Keep: %var_2_10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %var_2_11 = load i64, i64* %var_2_10, align 8
Keep: %var_2_28 = bitcast %union.VectorReg* %var_2_7 to double*
Keep: %var_2_30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
Keep: %var_2_32 = add i64 %var_2_11, -16
Keep: %var_2_34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %var_2_3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: %var_2_35 = load i64, i64* %var_2_34, align 1
Keep: %var_2_36 = inttoptr i64 %var_2_32 to i64*
Keep: store i64 %var_2_35, i64* %var_2_36, align 8
Keep: %var_2_37 = load i64, i64* %RBP, align 8
Keep: %var_2_38 = add i64 %var_2_37, -8
Keep: %var_2_41 = load double, double* %var_2_28, align 1
Keep: %var_2_42 = bitcast i64* %var_2_30 to <2 x i32>*
Keep: %var_2_43 = load <2 x i32>, <2 x i32>* %var_2_42, align 1
Keep: %var_2_44 = inttoptr i64 %var_2_38 to double*
Keep: %var_2_45 = load double, double* %var_2_44, align 8
Keep: %var_2_46 = fadd double %var_2_41, %var_2_45
Keep: %var_2_47 = bitcast %union.VectorReg* %var_2_6 to double*
Keep: %var_2_48 = load double, double* %var_2_47, align 1
Keep: %var_2_49 = fadd double %var_2_46, %var_2_48
Keep: %var_2_50 = bitcast %union.VectorReg* %var_2_5 to double*
Keep: %var_2_51 = load double, double* %var_2_50, align 1
Keep: %var_2_52 = fadd double %var_2_49, %var_2_51
Keep: %var_2_53 = bitcast %union.VectorReg* %var_2_4 to double*
Keep: %var_2_54 = load double, double* %var_2_53, align 1
Keep: %var_2_55 = fadd double %var_2_52, %var_2_54
Keep: %var_2_56 = bitcast [32 x %union.VectorReg]* %var_2_3 to i8*
Keep: %var_2_57 = bitcast double %var_2_55 to <2 x i32>
Keep: %var_2_58 = extractelement <2 x i32> %var_2_57, i32 0
Keep: %var_2_59 = bitcast [32 x %union.VectorReg]* %var_2_3 to i32*
Keep: store i32 %var_2_58, i32* %var_2_59, align 1
Keep: %var_2_60 = extractelement <2 x i32> %var_2_57, i32 1
Keep: %var_2_61 = getelementptr inbounds i8, i8* %var_2_56, i64 4
Keep: %var_2_62 = bitcast i8* %var_2_61 to i32*
Keep: store i32 %var_2_60, i32* %var_2_62, align 1
Keep: %var_2_66 = extractelement <2 x i32> %var_2_43, i32 1
Keep: %var_2_67 = getelementptr inbounds i8, i8* %var_2_56, i64 12
Keep: %var_2_68 = bitcast i8* %var_2_67 to i32*
Keep: store i32 %var_2_66, i32* %var_2_68, align 1
Found line to remove! ret %struct.Memory* %2
[x] Exhausted iterations without definitive match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_constant_folding/_ZN28custom_multiple_constant_addIdE8do_shiftEd/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_constant_folding/binary/test.mcsema.calls_renamed.ll _ZN28custom_multiple_constant_addIdE8do_shiftEd
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_constant_folding/_ZN28custom_multiple_constant_addIdE8do_shiftEd/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_constant_folding/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:718: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
