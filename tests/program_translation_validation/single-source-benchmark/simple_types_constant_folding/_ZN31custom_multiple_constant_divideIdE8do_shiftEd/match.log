Writing '/tmp/tmpxng_1152.dot'...
Writing '/tmp/tmpxng_1152.dot':Done

Reading LLVM: /tmp/tmpdvgpxzbl-query.ll
Extracting function [_ZN31custom_multiple_constant_divideIdE8do_shiftEd] from /tmp/tmpdvgpxzbl-query.ll
Dot file generated!
Writing '/tmp/tmp5e5mkg7l.dot'...
Writing '/tmp/tmp5e5mkg7l.dot':Done

Reading LLVM: /tmp/tmpwlq72cnr-target.ll
Extracting function [_ZN31custom_multiple_constant_divideIdE8do_shiftEd] from /tmp/tmpwlq72cnr-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 store i64 %8, i64* %6, align 8
- 11 %10 = load i64, i64* %3, align 8
- 12 store i64 %8, i64* %RBP.i, align 8
- 13 %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 14 %12 = add i64 %10, add (i64 ptrtoint (%G_0xa2a4__rip__type* @G_0xa2a4__rip_ to i64), i64 3)
- 15 %13 = add i64 %10, 11
- 16 store i64 %13, i64* %3, align 8
- 17 %14 = inttoptr i64 %12 to i64*
- 18 %15 = load i64, i64* %14, align 8
- 19 %16 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %11, i64 0, i32 0, i32 0, i32 0, i64 0
- 20 store i64 %15, i64* %16, align 1
- 21 %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
- 22 %18 = bitcast i64* %17 to double*
- 23 store double 0.000000e+00, double* %18, align 1
- 24 %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
- 25 %20 = add i64 %10, add (i64 ptrtoint (%G_0xa2a4__rip__type* @G_0xa2a4__rip_ to i64), i64 11)
- 26 %21 = add i64 %10, 19
- 27 store i64 %21, i64* %3, align 8
- 28 %22 = inttoptr i64 %20 to i64*
- 29 %23 = load i64, i64* %22, align 8
- 30 %24 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %19, i64 0, i32 0, i32 0, i32 0, i64 0
- 31 store i64 %23, i64* %24, align 1
- 32 %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
- 33 %26 = bitcast i64* %25 to double*
- 34 store double 0.000000e+00, double* %26, align 1
- 35 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
- 36 %28 = add i64 %10, add (i64 ptrtoint (%G_0xa2a4__rip__type* @G_0xa2a4__rip_ to i64), i64 19)
- 37 %29 = add i64 %10, 27
- 38 store i64 %29, i64* %3, align 8
- 39 %30 = inttoptr i64 %28 to i64*
- 40 %31 = load i64, i64* %30, align 8
- 41 %32 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %27, i64 0, i32 0, i32 0, i32 0, i64 0
- 42 store i64 %31, i64* %32, align 1
- 43 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
- 44 %34 = bitcast i64* %33 to double*
- 45 store double 0.000000e+00, double* %34, align 1
- 46 %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
- 47 %36 = add i64 %10, add (i64 ptrtoint (%G_0xa26c__rip__type* @G_0xa26c__rip_ to i64), i64 27)
- 48 %37 = add i64 %10, 35
- 49 store i64 %37, i64* %3, align 8
- 50 %38 = inttoptr i64 %36 to i64*
- 51 %39 = load i64, i64* %38, align 8
- 52 %40 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %35, i64 0, i32 0, i32 0, i32 0, i64 0
- 53 store i64 %39, i64* %40, align 1
- 54 %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
- 55 %42 = bitcast i64* %41 to double*
- 56 store double 0.000000e+00, double* %42, align 1
- 57 %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
- 58 %44 = add i64 %7, -16
- 59 %45 = add i64 %10, 40
- 60 store i64 %45, i64* %3, align 8
- 61 %46 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %43, i64 0, i32 0, i32 0, i32 0, i64 0
- 62 %47 = load i64, i64* %46, align 1
- 63 %48 = inttoptr i64 %44 to i64*
- 64 store i64 %47, i64* %48, align 8
- 65 %49 = load i64, i64* %RBP.i, align 8
- 66 %50 = add i64 %49, -8
- 67 %51 = load i64, i64* %3, align 8
- 68 %52 = add i64 %51, 5
- 69 store i64 %52, i64* %3, align 8
- 70 %53 = inttoptr i64 %50 to double*
- 71 %54 = load double, double* %53, align 8
- 72 %55 = bitcast %union.VectorReg* %43 to double*
- 73 %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 74 %57 = bitcast %union.VectorReg* %35 to double*
- 75 %58 = load double, double* %57, align 1
- 76 %59 = fdiv double %54, %58
- 77 %60 = bitcast %union.VectorReg* %27 to double*
- 78 %61 = load double, double* %60, align 1
- 79 %62 = fdiv double %59, %61
- 80 %63 = bitcast %union.VectorReg* %19 to double*
- 81 %64 = load double, double* %63, align 1
- 82 %65 = fdiv double %62, %64
- 83 %66 = bitcast %union.VectorReg* %11 to double*
- 84 %67 = load double, double* %66, align 1
- 85 %68 = fdiv double %65, %67
- 86 store double %68, double* %55, align 1
- 87 store i64 0, i64* %56, align 1
- 88 %69 = add i64 %51, 22
- 89 store i64 %69, i64* %3, align 8
- 90 %70 = load i64, i64* %6, align 8
- 91 %71 = add i64 %70, 8
- 92 %72 = inttoptr i64 %70 to i64*
- 93 %73 = load i64, i64* %72, align 8
- 94 store i64 %73, i64* %RBP.i, align 8
- 95 store i64 %71, i64* %6, align 8
- 96 %74 = add i64 %51, 23
- 97 store i64 %74, i64* %3, align 8
- 98 %75 = inttoptr i64 %71 to i64*
- 99 %76 = load i64, i64* %75, align 8
- 100 store i64 %76, i64* %3, align 8
- 101 %77 = add i64 %70, 16
- 102 store i64 %77, i64* %6, align 8
- 103 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f58ba74e7b8>, {0: {0}, 1: {1}, 2: {65, 36, 68, 7, 74, 11, 77, 46, 16, 49, 18, 51, 83, 55, 24, 62, 59, 30}, 3: {8}, 4: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 5: {10}, 6: {65, 36, 68, 7, 74, 11, 77, 46, 16, 49, 18, 51, 83, 55, 24, 62, 59, 30}, 7: {50, 12}, 8: {76, 13, 47, 82, 54}, 9: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 10: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 11: {65, 36, 68, 7, 74, 11, 77, 46, 16, 49, 18, 51, 83, 55, 24, 62, 59, 30}, 12: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 13: {3}, 14: set(), 15: set(), 16: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 17: {76, 13, 47, 82, 54}, 18: {65, 36, 68, 7, 74, 11, 77, 46, 16, 49, 18, 51, 83, 55, 24, 62, 59, 30}, 19: {25, 19, 37, 31}, 20: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 21: {21}, 22: {64, 34, 67, 40, 22, 56, 58, 28, 61}, 23: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 24: {4}, 25: set(), 26: set(), 27: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 28: {76, 13, 47, 82, 54}, 29: {65, 36, 68, 7, 74, 11, 77, 46, 16, 49, 18, 51, 83, 55, 24, 62, 59, 30}, 30: {25, 19, 37, 31}, 31: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 32: {27}, 33: {64, 34, 67, 40, 22, 56, 58, 28, 61}, 34: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 35: {5}, 36: set(), 37: set(), 38: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 39: {76, 13, 47, 82, 54}, 40: {65, 36, 68, 7, 74, 11, 77, 46, 16, 49, 18, 51, 83, 55, 24, 62, 59, 30}, 41: {25, 19, 37, 31}, 42: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 43: {33}, 44: {64, 34, 67, 40, 22, 56, 58, 28, 61}, 45: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 46: {6}, 47: set(), 48: set(), 49: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 50: {76, 13, 47, 82, 54}, 51: {65, 36, 68, 7, 74, 11, 77, 46, 16, 49, 18, 51, 83, 55, 24, 62, 59, 30}, 52: {25, 19, 37, 31}, 53: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 54: {39}, 55: {64, 34, 67, 40, 22, 56, 58, 28, 61}, 56: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 57: set(), 58: {42}, 59: {43}, 60: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 61: {25, 19, 37, 31}, 62: {65, 36, 68, 7, 74, 11, 77, 46, 16, 49, 18, 51, 83, 55, 24, 62, 59, 30}, 63: {76, 13, 47, 82, 54}, 64: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 65: {65, 36, 68, 7, 74, 11, 77, 46, 16, 49, 18, 51, 83, 55, 24, 62, 59, 30}, 66: {50, 12}, 67: {65, 36, 68, 7, 74, 11, 77, 46, 16, 49, 18, 51, 83, 55, 24, 62, 59, 30}, 68: {52}, 69: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 70: {76, 13, 47, 82, 54}, 71: {65, 36, 68, 7, 74, 11, 77, 46, 16, 49, 18, 51, 83, 55, 24, 62, 59, 30}, 72: {64, 34, 67, 40, 22, 56, 58, 28, 61}, 73: {57}, 74: {64, 34, 67, 40, 22, 56, 58, 28, 61}, 75: {65, 36, 68, 7, 74, 11, 77, 46, 16, 49, 18, 51, 83, 55, 24, 62, 59, 30}, 76: {66, 60, 69, 63}, 77: {64, 34, 67, 40, 22, 56, 58, 28, 61}, 78: {65, 36, 68, 7, 74, 11, 77, 46, 16, 49, 18, 51, 83, 55, 24, 62, 59, 30}, 79: {66, 60, 69, 63}, 80: {64, 34, 67, 40, 22, 56, 58, 28, 61}, 81: {65, 36, 68, 7, 74, 11, 77, 46, 16, 49, 18, 51, 83, 55, 24, 62, 59, 30}, 82: {66, 60, 69, 63}, 83: {64, 34, 67, 40, 22, 56, 58, 28, 61}, 84: {65, 36, 68, 7, 74, 11, 77, 46, 16, 49, 18, 51, 83, 55, 24, 62, 59, 30}, 85: {66, 60, 69, 63}, 86: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 87: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 88: {72}, 89: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 90: {65, 36, 68, 7, 74, 11, 77, 46, 16, 49, 18, 51, 83, 55, 24, 62, 59, 30}, 91: {75}, 92: {76, 13, 47, 82, 54}, 93: {65, 36, 68, 7, 74, 11, 77, 46, 16, 49, 18, 51, 83, 55, 24, 62, 59, 30}, 94: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 95: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 96: {80}, 97: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 98: {76, 13, 47, 82, 54}, 99: {65, 36, 68, 7, 74, 11, 77, 46, 16, 49, 18, 51, 83, 55, 24, 62, 59, 30}, 100: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 101: {85}, 102: {9, 14, 15, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 48, 53, 70, 71, 73, 78, 79, 81, 84, 86}, 103: {87}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f58ba74e7b8>, {0: {0}, 1: {1}, 2: {7}, 3: {8}, 4: {9}, 5: {10}, 6: {11}, 7: {12}, 8: {13}, 9: {14}, 10: {15}, 11: {16}, 12: {17}, 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: {21}, 22: {22}, 23: {23}, 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: set(), 30: set(), 31: set(), 32: {27}, 33: {28}, 34: {29}, 35: set(), 36: set(), 37: set(), 38: set(), 39: set(), 40: set(), 41: set(), 42: set(), 43: {33}, 44: {34}, 45: {35}, 46: set(), 47: set(), 48: set(), 49: set(), 50: set(), 51: set(), 52: set(), 53: set(), 54: {39}, 55: {40}, 56: {41}, 57: set(), 58: set(), 59: {43}, 60: {44}, 61: set(), 62: set(), 63: set(), 64: set(), 65: set(), 66: set(), 67: {51}, 68: {52}, 69: {53}, 70: set(), 71: set(), 72: set(), 73: {57}, 74: set(), 75: set(), 76: set(), 77: set(), 78: set(), 79: set(), 80: set(), 81: set(), 82: set(), 83: set(), 84: set(), 85: set(), 86: set(), 87: {71}, 88: {72}, 89: {73}, 90: {74}, 91: {75}, 92: {76}, 93: {77}, 94: {78}, 95: {79}, 96: {80}, 97: {81}, 98: {82}, 99: {83}, 100: {84}, 101: {85}, 102: {86}, 103: {87}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 store store
EXACT 11 load load
EXACT 12 store store
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
EXACT 21 getelementptr getelementptr
EXACT 22 bitcast bitcast
EXACT 23 store store
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
NO MATCH 29
NO MATCH 30
NO MATCH 31
EXACT 32 getelementptr getelementptr
EXACT 33 bitcast bitcast
EXACT 34 store store
NO MATCH 35
NO MATCH 36
NO MATCH 37
NO MATCH 38
NO MATCH 39
NO MATCH 40
NO MATCH 41
NO MATCH 42
EXACT 43 getelementptr getelementptr
EXACT 44 bitcast bitcast
EXACT 45 store store
NO MATCH 46
NO MATCH 47
NO MATCH 48
NO MATCH 49
NO MATCH 50
NO MATCH 51
NO MATCH 52
NO MATCH 53
EXACT 54 getelementptr getelementptr
EXACT 55 bitcast bitcast
EXACT 56 store store
NO MATCH 57
NO MATCH 58
EXACT 59 add add
EXACT 60 store store
NO MATCH 61
NO MATCH 62
NO MATCH 63
NO MATCH 64
NO MATCH 65
NO MATCH 66
EXACT 67 load load
EXACT 68 add add
EXACT 69 store store
NO MATCH 70
NO MATCH 71
NO MATCH 72
EXACT 73 getelementptr getelementptr
NO MATCH 74
NO MATCH 75
NO MATCH 76
NO MATCH 77
NO MATCH 78
NO MATCH 79
NO MATCH 80
NO MATCH 81
NO MATCH 82
NO MATCH 83
NO MATCH 84
NO MATCH 85
NO MATCH 86
EXACT 87 store store
EXACT 88 add add
EXACT 89 store store
EXACT 90 load load
EXACT 91 add add
EXACT 92 inttoptr inttoptr
EXACT 93 load load
EXACT 94 store store
EXACT 95 store store
EXACT 96 add add
EXACT 97 store store
EXACT 98 inttoptr inttoptr
EXACT 99 load load
EXACT 100 store store
EXACT 101 add add
EXACT 102 store store
EXACT 103 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
- 3 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 4 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
- 6 %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
- 7 %8 = load i64, i64* %RBP, align 8
- 8 %9 = add i64 %1, 1
- 9 store i64 %9, i64* %PC, align 8
- 10 %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 11 %11 = load i64, i64* %10, align 8
- 12 %12 = add i64 %11, -8
- 13 %13 = inttoptr i64 %12 to i64*
- 14 store i64 %8, i64* %13, align 8
- 15 store i64 %12, i64* %10, align 8
- 16 %14 = load i64, i64* %PC, align 8
- 17 store i64 %12, i64* %RBP, align 8
- 18 %15 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 64) to i64*), align 16
- 19 %16 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
- 20 store i64 %15, i64* %16, align 1
- 21 %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
- 22 %18 = bitcast i64* %17 to double*
- 23 store double 0.000000e+00, double* %18, align 1
- 24 %19 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 72) to i64*), align 8
- 25 %20 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %5, i64 0, i32 0, i32 0, i32 0, i64 0
- 26 store i64 %19, i64* %20, align 1
- 27 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
- 28 %22 = bitcast i64* %21 to double*
- 29 store double 0.000000e+00, double* %22, align 1
- 30 %23 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 80) to i64*), align 16
- 31 %24 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
- 32 store i64 %23, i64* %24, align 1
- 33 %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
- 34 %26 = bitcast i64* %25 to double*
- 35 store double 0.000000e+00, double* %26, align 1
- 36 %27 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 32) to i64*), align 16
- 37 %28 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
- 38 store i64 %27, i64* %28, align 1
- 39 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
- 40 %30 = bitcast i64* %29 to double*
- 41 store double 0.000000e+00, double* %30, align 1
- 42 %31 = add i64 %11, -16
- 43 %32 = add i64 %14, 40
- 44 store i64 %32, i64* %PC, align 8
- 45 %33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
- 46 %34 = load i64, i64* %33, align 1
- 47 %35 = inttoptr i64 %31 to i64*
- 48 store i64 %34, i64* %35, align 8
- 49 %36 = load i64, i64* %RBP, align 8
- 50 %37 = add i64 %36, -8
- 51 %38 = load i64, i64* %PC, align 8
- 52 %39 = add i64 %38, 5
- 53 store i64 %39, i64* %PC, align 8
- 54 %40 = inttoptr i64 %37 to double*
- 55 %41 = load double, double* %40, align 8
- 56 %42 = bitcast [32 x %union.VectorReg]* %3 to double*
- 57 %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 58 %44 = bitcast %union.VectorReg* %7 to double*
- 59 %45 = load double, double* %44, align 1
- 60 %46 = fdiv double %41, %45
- 61 %47 = bitcast %union.VectorReg* %6 to double*
- 62 %48 = load double, double* %47, align 1
- 63 %49 = fdiv double %46, %48
- 64 %50 = bitcast %union.VectorReg* %5 to double*
- 65 %51 = load double, double* %50, align 1
- 66 %52 = fdiv double %49, %51
- 67 %53 = bitcast %union.VectorReg* %4 to double*
- 68 %54 = load double, double* %53, align 1
- 69 %55 = fdiv double %52, %54
- 70 store double %55, double* %42, align 1
- 71 store i64 0, i64* %43, align 1
- 72 %56 = add i64 %38, 22
- 73 store i64 %56, i64* %PC, align 8
- 74 %57 = load i64, i64* %10, align 8
- 75 %58 = add i64 %57, 8
- 76 %59 = inttoptr i64 %57 to i64*
- 77 %60 = load i64, i64* %59, align 8
- 78 store i64 %60, i64* %RBP, align 8
- 79 store i64 %58, i64* %10, align 8
- 80 %61 = add i64 %38, 23
- 81 store i64 %61, i64* %PC, align 8
- 82 %62 = inttoptr i64 %58 to i64*
- 83 %63 = load i64, i64* %62, align 8
- 84 store i64 %63, i64* %PC, align 8
- 85 %64 = add i64 %57, 16
- 86 store i64 %64, i64* %10, align 8
- 87 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f58ba74e950>, {0: {0}, 1: {1}, 2: set(), 3: {13}, 4: {24}, 5: {35}, 6: {46}, 7: {65, 2, 67, 99, 6, 71, 40, 11, 75, 78, 81, 18, 51, 84, 93, 90, 29, 62}, 8: {3}, 9: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 10: {5}, 11: {65, 2, 67, 99, 6, 71, 40, 11, 75, 78, 81, 18, 51, 84, 93, 90, 29, 62}, 12: {66, 7}, 13: {98, 70, 39, 8, 92, 17, 50, 28, 63}, 14: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 15: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 16: {65, 2, 67, 99, 6, 71, 40, 11, 75, 78, 81, 18, 51, 84, 93, 90, 29, 62}, 17: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 18: {65, 2, 67, 99, 6, 71, 40, 11, 75, 78, 81, 18, 51, 84, 93, 90, 29, 62}, 19: {41, 19, 52, 61, 30}, 20: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 21: {21}, 22: {33, 72, 74, 44, 77, 80, 83, 22, 55}, 23: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 24: {65, 2, 67, 99, 6, 71, 40, 11, 75, 78, 81, 18, 51, 84, 93, 90, 29, 62}, 25: {41, 19, 52, 61, 30}, 26: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 27: {32}, 28: {33, 72, 74, 44, 77, 80, 83, 22, 55}, 29: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 30: {65, 2, 67, 99, 6, 71, 40, 11, 75, 78, 81, 18, 51, 84, 93, 90, 29, 62}, 31: {41, 19, 52, 61, 30}, 32: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 33: {43}, 34: {33, 72, 74, 44, 77, 80, 83, 22, 55}, 35: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 36: {65, 2, 67, 99, 6, 71, 40, 11, 75, 78, 81, 18, 51, 84, 93, 90, 29, 62}, 37: {41, 19, 52, 61, 30}, 38: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 39: {54}, 40: {33, 72, 74, 44, 77, 80, 83, 22, 55}, 41: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 42: {58}, 43: {59}, 44: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 45: set(), 46: {65, 2, 67, 99, 6, 71, 40, 11, 75, 78, 81, 18, 51, 84, 93, 90, 29, 62}, 47: {98, 70, 39, 8, 92, 17, 50, 28, 63}, 48: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 49: {65, 2, 67, 99, 6, 71, 40, 11, 75, 78, 81, 18, 51, 84, 93, 90, 29, 62}, 50: {66, 7}, 51: {65, 2, 67, 99, 6, 71, 40, 11, 75, 78, 81, 18, 51, 84, 93, 90, 29, 62}, 52: {68}, 53: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 54: {98, 70, 39, 8, 92, 17, 50, 28, 63}, 55: {65, 2, 67, 99, 6, 71, 40, 11, 75, 78, 81, 18, 51, 84, 93, 90, 29, 62}, 56: {33, 72, 74, 44, 77, 80, 83, 22, 55}, 57: {73}, 58: {33, 72, 74, 44, 77, 80, 83, 22, 55}, 59: {65, 2, 67, 99, 6, 71, 40, 11, 75, 78, 81, 18, 51, 84, 93, 90, 29, 62}, 60: {82, 76, 85, 79}, 61: {33, 72, 74, 44, 77, 80, 83, 22, 55}, 62: {65, 2, 67, 99, 6, 71, 40, 11, 75, 78, 81, 18, 51, 84, 93, 90, 29, 62}, 63: {82, 76, 85, 79}, 64: {33, 72, 74, 44, 77, 80, 83, 22, 55}, 65: {65, 2, 67, 99, 6, 71, 40, 11, 75, 78, 81, 18, 51, 84, 93, 90, 29, 62}, 66: {82, 76, 85, 79}, 67: {33, 72, 74, 44, 77, 80, 83, 22, 55}, 68: {65, 2, 67, 99, 6, 71, 40, 11, 75, 78, 81, 18, 51, 84, 93, 90, 29, 62}, 69: {82, 76, 85, 79}, 70: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 71: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 72: {88}, 73: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 74: {65, 2, 67, 99, 6, 71, 40, 11, 75, 78, 81, 18, 51, 84, 93, 90, 29, 62}, 75: {91}, 76: {98, 70, 39, 8, 92, 17, 50, 28, 63}, 77: {65, 2, 67, 99, 6, 71, 40, 11, 75, 78, 81, 18, 51, 84, 93, 90, 29, 62}, 78: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 79: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 80: {96}, 81: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 82: {98, 70, 39, 8, 92, 17, 50, 28, 63}, 83: {65, 2, 67, 99, 6, 71, 40, 11, 75, 78, 81, 18, 51, 84, 93, 90, 29, 62}, 84: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 85: {101}, 86: {4, 9, 10, 12, 16, 20, 23, 27, 31, 34, 38, 42, 45, 49, 53, 56, 60, 64, 69, 86, 87, 89, 94, 95, 97, 100, 102}, 87: {103}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f58ba74e950>, {0: {0}, 1: {1}, 2: set(), 3: {13}, 4: {24}, 5: {35}, 6: {46}, 7: {2}, 8: {3}, 9: {4}, 10: {5}, 11: {6}, 12: {7}, 13: {8}, 14: {9}, 15: {10}, 16: {11}, 17: {12}, 18: {18}, 19: {19}, 20: {20}, 21: {21}, 22: {22}, 23: {23}, 24: {29}, 25: {30}, 26: {31}, 27: {32}, 28: {33}, 29: {34}, 30: {40}, 31: {41}, 32: {42}, 33: {43}, 34: {44}, 35: {45}, 36: {51}, 37: {52}, 38: {53}, 39: {54}, 40: {55}, 41: {56}, 42: set(), 43: {59}, 44: {60}, 45: set(), 46: set(), 47: set(), 48: set(), 49: set(), 50: set(), 51: {67}, 52: {68}, 53: {69}, 54: set(), 55: set(), 56: set(), 57: {73}, 58: set(), 59: set(), 60: set(), 61: set(), 62: set(), 63: set(), 64: set(), 65: set(), 66: set(), 67: set(), 68: set(), 69: set(), 70: set(), 71: {87}, 72: {88}, 73: {89}, 74: {90}, 75: {91}, 76: {92}, 77: {93}, 78: {94}, 79: {95}, 80: {96}, 81: {97}, 82: {98}, 83: {99}, 84: {100}, 85: {101}, 86: {102}, 87: {103}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
NO MATCH 2
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 getelementptr getelementptr
EXACT 7 load load
EXACT 8 add add
EXACT 9 store store
EXACT 10 getelementptr getelementptr
EXACT 11 load load
EXACT 12 add add
EXACT 13 inttoptr inttoptr
EXACT 14 store store
EXACT 15 store store
EXACT 16 load load
EXACT 17 store store
EXACT 18 load load
EXACT 19 getelementptr getelementptr
EXACT 20 store store
EXACT 21 getelementptr getelementptr
EXACT 22 bitcast bitcast
EXACT 23 store store
EXACT 24 load load
EXACT 25 getelementptr getelementptr
EXACT 26 store store
EXACT 27 getelementptr getelementptr
EXACT 28 bitcast bitcast
EXACT 29 store store
EXACT 30 load load
EXACT 31 getelementptr getelementptr
EXACT 32 store store
EXACT 33 getelementptr getelementptr
EXACT 34 bitcast bitcast
EXACT 35 store store
EXACT 36 load load
EXACT 37 getelementptr getelementptr
EXACT 38 store store
EXACT 39 getelementptr getelementptr
EXACT 40 bitcast bitcast
EXACT 41 store store
NO MATCH 42
EXACT 43 add add
EXACT 44 store store
NO MATCH 45
NO MATCH 46
NO MATCH 47
NO MATCH 48
NO MATCH 49
NO MATCH 50
EXACT 51 load load
EXACT 52 add add
EXACT 53 store store
NO MATCH 54
NO MATCH 55
NO MATCH 56
EXACT 57 getelementptr getelementptr
NO MATCH 58
NO MATCH 59
NO MATCH 60
NO MATCH 61
NO MATCH 62
NO MATCH 63
NO MATCH 64
NO MATCH 65
NO MATCH 66
NO MATCH 67
NO MATCH 68
NO MATCH 69
NO MATCH 70
EXACT 71 store store
EXACT 72 add add
EXACT 73 store store
EXACT 74 load load
EXACT 75 add add
EXACT 76 inttoptr inttoptr
EXACT 77 load load
EXACT 78 store store
EXACT 79 store store
EXACT 80 add add
EXACT 81 store store
EXACT 82 inttoptr inttoptr
EXACT 83 load load
EXACT 84 store store
EXACT 85 add add
EXACT 86 store store
EXACT 87 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%18 = bitcast i64* %17 to double*', 'store double 0.000000e+00, double* %18, align 1', '%25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1', '%26 = bitcast i64* %25 to double*', 'store double 0.000000e+00, double* %26, align 1', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1', '%34 = bitcast i64* %33 to double*', 'store double 0.000000e+00, double* %34, align 1', '%41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1', '%42 = bitcast i64* %41 to double*', 'store double 0.000000e+00, double* %42, align 1', '%45 = add i64 %10, 40', 'store i64 %45, i64* %3, align 8', '%51 = load i64, i64* %3, align 8', '%52 = add i64 %51, 5', 'store i64 %52, i64* %3, align 8', '%56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', 'store i64 0, i64* %56, align 1', '%69 = add i64 %51, 22', 'store i64 %69, i64* %3, align 8', '%70 = load i64, i64* %6, align 8', '%71 = add i64 %70, 8', '%72 = inttoptr i64 %70 to i64*', '%73 = load i64, i64* %72, align 8', 'store i64 %73, i64* %RBP.i, align 8', 'store i64 %71, i64* %6, align 8', '%74 = add i64 %51, 23', 'store i64 %74, i64* %3, align 8', '%75 = inttoptr i64 %71 to i64*', '%76 = load i64, i64* %75, align 8', 'store i64 %76, i64* %3, align 8', '%77 = add i64 %70, 16', 'store i64 %77, i64* %6, align 8'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Keep: %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Keep: %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Keep: %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Keep: %12 = add i64 %10, add (i64 ptrtoint (%G_0xa2a4__rip__type* @G_0xa2a4__rip_ to i64), i64 3)
Keep: %13 = add i64 %10, 11
Keep: store i64 %13, i64* %3, align 8
Keep: %14 = inttoptr i64 %12 to i64*
Keep: %15 = load i64, i64* %14, align 8
Keep: %16 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %11, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %15, i64* %16, align 1
Found line to remove! %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
Found line to remove! %18 = bitcast i64* %17 to double*
Found line to remove! store double 0.000000e+00, double* %18, align 1
Keep: %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
Keep: %20 = add i64 %10, add (i64 ptrtoint (%G_0xa2a4__rip__type* @G_0xa2a4__rip_ to i64), i64 11)
Keep: %21 = add i64 %10, 19
Keep: store i64 %21, i64* %3, align 8
Keep: %22 = inttoptr i64 %20 to i64*
Keep: %23 = load i64, i64* %22, align 8
Keep: %24 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %19, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %23, i64* %24, align 1
Found line to remove! %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
Found line to remove! %26 = bitcast i64* %25 to double*
Found line to remove! store double 0.000000e+00, double* %26, align 1
Keep: %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
Keep: %28 = add i64 %10, add (i64 ptrtoint (%G_0xa2a4__rip__type* @G_0xa2a4__rip_ to i64), i64 19)
Keep: %29 = add i64 %10, 27
Keep: store i64 %29, i64* %3, align 8
Keep: %30 = inttoptr i64 %28 to i64*
Keep: %31 = load i64, i64* %30, align 8
Keep: %32 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %27, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %31, i64* %32, align 1
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
Found line to remove! %34 = bitcast i64* %33 to double*
Found line to remove! store double 0.000000e+00, double* %34, align 1
Keep: %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
Keep: %36 = add i64 %10, add (i64 ptrtoint (%G_0xa26c__rip__type* @G_0xa26c__rip_ to i64), i64 27)
Keep: %37 = add i64 %10, 35
Keep: store i64 %37, i64* %3, align 8
Keep: %38 = inttoptr i64 %36 to i64*
Keep: %39 = load i64, i64* %38, align 8
Keep: %40 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %35, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %39, i64* %40, align 1
Found line to remove! %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
Found line to remove! %42 = bitcast i64* %41 to double*
Found line to remove! store double 0.000000e+00, double* %42, align 1
Keep: %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
Keep: %44 = add i64 %7, -16
Found line to remove! %45 = add i64 %10, 40
Found line to remove! store i64 %45, i64* %3, align 8
Keep: %46 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %43, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: %47 = load i64, i64* %46, align 1
Keep: %48 = inttoptr i64 %44 to i64*
Keep: store i64 %47, i64* %48, align 8
Keep: %49 = load i64, i64* %RBP.i, align 8
Keep: %50 = add i64 %49, -8
Found line to remove! %51 = load i64, i64* %3, align 8
Found line to remove! %52 = add i64 %51, 5
Found line to remove! store i64 %52, i64* %3, align 8
Keep: %53 = inttoptr i64 %50 to double*
Keep: %54 = load double, double* %53, align 8
Keep: %55 = bitcast %union.VectorReg* %43 to double*
Found line to remove! %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Keep: %57 = bitcast %union.VectorReg* %35 to double*
Keep: %58 = load double, double* %57, align 1
Keep: %59 = fdiv double %54, %58
Keep: %60 = bitcast %union.VectorReg* %27 to double*
Keep: %61 = load double, double* %60, align 1
Keep: %62 = fdiv double %59, %61
Keep: %63 = bitcast %union.VectorReg* %19 to double*
Keep: %64 = load double, double* %63, align 1
Keep: %65 = fdiv double %62, %64
Keep: %66 = bitcast %union.VectorReg* %11 to double*
Keep: %67 = load double, double* %66, align 1
Keep: %68 = fdiv double %65, %67
Keep: store double %68, double* %55, align 1
Found line to remove! store i64 0, i64* %56, align 1
Found line to remove! %69 = add i64 %51, 22
Found line to remove! store i64 %69, i64* %3, align 8
Found line to remove! %70 = load i64, i64* %6, align 8
Found line to remove! %71 = add i64 %70, 8
Found line to remove! %72 = inttoptr i64 %70 to i64*
Found line to remove! %73 = load i64, i64* %72, align 8
Found line to remove! store i64 %73, i64* %RBP.i, align 8
Found line to remove! store i64 %71, i64* %6, align 8
Found line to remove! %74 = add i64 %51, 23
Found line to remove! store i64 %74, i64* %3, align 8
Found line to remove! %75 = inttoptr i64 %71 to i64*
Found line to remove! %76 = load i64, i64* %75, align 8
Found line to remove! store i64 %76, i64* %3, align 8
Found line to remove! %77 = add i64 %70, 16
Found line to remove! store i64 %77, i64* %6, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%18 = bitcast i64* %17 to double*', 'store double 0.000000e+00, double* %18, align 1', '%25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1', '%26 = bitcast i64* %25 to double*', 'store double 0.000000e+00, double* %26, align 1', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1', '%34 = bitcast i64* %33 to double*', 'store double 0.000000e+00, double* %34, align 1', '%41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1', '%42 = bitcast i64* %41 to double*', 'store double 0.000000e+00, double* %42, align 1', '%45 = add i64 %10, 40', 'store i64 %45, i64* %3, align 8', '%51 = load i64, i64* %3, align 8', '%52 = add i64 %51, 5', 'store i64 %52, i64* %3, align 8', '%56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', 'store i64 0, i64* %56, align 1', '%69 = add i64 %51, 22', 'store i64 %69, i64* %3, align 8', '%70 = load i64, i64* %6, align 8', '%71 = add i64 %70, 8', '%72 = inttoptr i64 %70 to i64*', '%73 = load i64, i64* %72, align 8', 'store i64 %73, i64* %RBP.i, align 8', 'store i64 %71, i64* %6, align 8', '%74 = add i64 %51, 23', 'store i64 %74, i64* %3, align 8', '%75 = inttoptr i64 %71 to i64*', '%76 = load i64, i64* %75, align 8', 'store i64 %76, i64* %3, align 8', '%77 = add i64 %70, 16', 'store i64 %77, i64* %6, align 8'])
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%8 = load i64, i64* %RBP, align 8', '%9 = add i64 %1, 1', 'store i64 %9, i64* %PC, align 8', '%12 = add i64 %11, -8', '%13 = inttoptr i64 %12 to i64*', 'store i64 %8, i64* %13, align 8', 'store i64 %12, i64* %10, align 8', '%14 = load i64, i64* %PC, align 8', 'store i64 %12, i64* %RBP, align 8', '%15 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 64) to i64*), align 16', '%16 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %15, i64* %16, align 1', '%17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%18 = bitcast i64* %17 to double*', 'store double 0.000000e+00, double* %18, align 1', '%19 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 72) to i64*), align 8', '%20 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %5, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %19, i64* %20, align 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1', '%22 = bitcast i64* %21 to double*', 'store double 0.000000e+00, double* %22, align 1', '%23 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 80) to i64*), align 16', '%24 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %23, i64* %24, align 1', '%25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1', '%26 = bitcast i64* %25 to double*', 'store double 0.000000e+00, double* %26, align 1', '%27 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 32) to i64*), align 16', '%28 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %27, i64* %28, align 1', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1', '%30 = bitcast i64* %29 to double*', 'store double 0.000000e+00, double* %30, align 1', '%32 = add i64 %14, 40', 'store i64 %32, i64* %PC, align 8', '%38 = load i64, i64* %PC, align 8', '%39 = add i64 %38, 5', 'store i64 %39, i64* %PC, align 8', '%43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', 'store i64 0, i64* %43, align 1', '%56 = add i64 %38, 22', 'store i64 %56, i64* %PC, align 8', '%57 = load i64, i64* %10, align 8', '%58 = add i64 %57, 8', '%59 = inttoptr i64 %57 to i64*', '%60 = load i64, i64* %59, align 8', 'store i64 %60, i64* %RBP, align 8', 'store i64 %58, i64* %10, align 8', '%61 = add i64 %38, 23', 'store i64 %61, i64* %PC, align 8', '%62 = inttoptr i64 %58 to i64*', '%63 = load i64, i64* %62, align 8', 'store i64 %63, i64* %PC, align 8', '%64 = add i64 %57, 16', 'store i64 %64, i64* %10, align 8'])
Keep: block_40e7b0:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
Keep: %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Keep: %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
Keep: %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
Keep: %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
Found line to remove! %8 = load i64, i64* %RBP, align 8
Found line to remove! %9 = add i64 %1, 1
Found line to remove! store i64 %9, i64* %PC, align 8
Keep: %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %11 = load i64, i64* %10, align 8
Found line to remove! %12 = add i64 %11, -8
Found line to remove! %13 = inttoptr i64 %12 to i64*
Found line to remove! store i64 %8, i64* %13, align 8
Found line to remove! store i64 %12, i64* %10, align 8
Found line to remove! %14 = load i64, i64* %PC, align 8
Found line to remove! store i64 %12, i64* %RBP, align 8
Found line to remove! %15 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 64) to i64*), align 16
Found line to remove! %16 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! store i64 %15, i64* %16, align 1
Found line to remove! %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
Found line to remove! %18 = bitcast i64* %17 to double*
Found line to remove! store double 0.000000e+00, double* %18, align 1
Found line to remove! %19 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 72) to i64*), align 8
Found line to remove! %20 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %5, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! store i64 %19, i64* %20, align 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
Found line to remove! %22 = bitcast i64* %21 to double*
Found line to remove! store double 0.000000e+00, double* %22, align 1
Found line to remove! %23 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 80) to i64*), align 16
Found line to remove! %24 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! store i64 %23, i64* %24, align 1
Found line to remove! %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
Found line to remove! %26 = bitcast i64* %25 to double*
Found line to remove! store double 0.000000e+00, double* %26, align 1
Found line to remove! %27 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 32) to i64*), align 16
Found line to remove! %28 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! store i64 %27, i64* %28, align 1
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
Found line to remove! %30 = bitcast i64* %29 to double*
Found line to remove! store double 0.000000e+00, double* %30, align 1
Keep: %31 = add i64 %11, -16
Found line to remove! %32 = add i64 %14, 40
Found line to remove! store i64 %32, i64* %PC, align 8
Keep: %33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: %34 = load i64, i64* %33, align 1
Keep: %35 = inttoptr i64 %31 to i64*
Keep: store i64 %34, i64* %35, align 8
Keep: %36 = load i64, i64* %RBP, align 8
Keep: %37 = add i64 %36, -8
Found line to remove! %38 = load i64, i64* %PC, align 8
Found line to remove! %39 = add i64 %38, 5
Found line to remove! store i64 %39, i64* %PC, align 8
Keep: %40 = inttoptr i64 %37 to double*
Keep: %41 = load double, double* %40, align 8
Keep: %42 = bitcast [32 x %union.VectorReg]* %3 to double*
Found line to remove! %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Keep: %44 = bitcast %union.VectorReg* %7 to double*
Keep: %45 = load double, double* %44, align 1
Keep: %46 = fdiv double %41, %45
Keep: %47 = bitcast %union.VectorReg* %6 to double*
Keep: %48 = load double, double* %47, align 1
Keep: %49 = fdiv double %46, %48
Keep: %50 = bitcast %union.VectorReg* %5 to double*
Keep: %51 = load double, double* %50, align 1
Keep: %52 = fdiv double %49, %51
Keep: %53 = bitcast %union.VectorReg* %4 to double*
Keep: %54 = load double, double* %53, align 1
Keep: %55 = fdiv double %52, %54
Keep: store double %55, double* %42, align 1
Found line to remove! store i64 0, i64* %43, align 1
Found line to remove! %56 = add i64 %38, 22
Found line to remove! store i64 %56, i64* %PC, align 8
Found line to remove! %57 = load i64, i64* %10, align 8
Found line to remove! %58 = add i64 %57, 8
Found line to remove! %59 = inttoptr i64 %57 to i64*
Found line to remove! %60 = load i64, i64* %59, align 8
Found line to remove! store i64 %60, i64* %RBP, align 8
Found line to remove! store i64 %58, i64* %10, align 8
Found line to remove! %61 = add i64 %38, 23
Found line to remove! store i64 %61, i64* %PC, align 8
Found line to remove! %62 = inttoptr i64 %58 to i64*
Found line to remove! %63 = load i64, i64* %62, align 8
Found line to remove! store i64 %63, i64* %PC, align 8
Found line to remove! %64 = add i64 %57, 16
Found line to remove! store i64 %64, i64* %10, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%8 = load i64, i64* %RBP, align 8', '%9 = add i64 %1, 1', 'store i64 %9, i64* %PC, align 8', '%12 = add i64 %11, -8', '%13 = inttoptr i64 %12 to i64*', 'store i64 %8, i64* %13, align 8', 'store i64 %12, i64* %10, align 8', '%14 = load i64, i64* %PC, align 8', 'store i64 %12, i64* %RBP, align 8', '%15 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 64) to i64*), align 16', '%16 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %15, i64* %16, align 1', '%17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%18 = bitcast i64* %17 to double*', 'store double 0.000000e+00, double* %18, align 1', '%19 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 72) to i64*), align 8', '%20 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %5, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %19, i64* %20, align 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1', '%22 = bitcast i64* %21 to double*', 'store double 0.000000e+00, double* %22, align 1', '%23 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 80) to i64*), align 16', '%24 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %23, i64* %24, align 1', '%25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1', '%26 = bitcast i64* %25 to double*', 'store double 0.000000e+00, double* %26, align 1', '%27 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_418a20__rodata_type* @seg_418a20__rodata to i64), i64 32) to i64*), align 16', '%28 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %27, i64* %28, align 1', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1', '%30 = bitcast i64* %29 to double*', 'store double 0.000000e+00, double* %30, align 1', '%32 = add i64 %14, 40', 'store i64 %32, i64* %PC, align 8', '%38 = load i64, i64* %PC, align 8', '%39 = add i64 %38, 5', 'store i64 %39, i64* %PC, align 8', '%43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', 'store i64 0, i64* %43, align 1', '%56 = add i64 %38, 22', 'store i64 %56, i64* %PC, align 8', '%57 = load i64, i64* %10, align 8', '%58 = add i64 %57, 8', '%59 = inttoptr i64 %57 to i64*', '%60 = load i64, i64* %59, align 8', 'store i64 %60, i64* %RBP, align 8', 'store i64 %58, i64* %10, align 8', '%61 = add i64 %38, 23', 'store i64 %61, i64* %PC, align 8', '%62 = inttoptr i64 %58 to i64*', '%63 = load i64, i64* %62, align 8', 'store i64 %63, i64* %PC, align 8', '%64 = add i64 %57, 16', 'store i64 %64, i64* %10, align 8'])Writing '/tmp/tmpsdixy4v6.dot'...
Writing '/tmp/tmpsdixy4v6.dot':Done

Reading LLVM: /tmp/tmpdvgpxzbl-query.ll
Extracting function [_ZN31custom_multiple_constant_divideIdE8do_shiftEd] from /tmp/tmpdvgpxzbl-query.ll
Dot file generated!
Writing '/tmp/tmpalluql0l.dot'...
Writing '/tmp/tmpalluql0l.dot':Done

Reading LLVM: /tmp/tmpwlq72cnr-target.ll
Extracting function [_ZN31custom_multiple_constant_divideIdE8do_shiftEd] from /tmp/tmpwlq72cnr-target.ll
Dot file generated!

================ Starting round 2
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %var_2_6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 3 %var_2_7 = load i64, i64* %var_2_6, align 8
- 4 %var_2_10 = load i64, i64* %var_2_3, align 8
- 5 %var_2_11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 6 %var_2_12 = add i64 %var_2_10, add (i64 ptrtoint (%G_0xa2a4__rip__type* @G_0xa2a4__rip_ to i64), i64 3)
- 7 %var_2_13 = add i64 %var_2_10, 11
- 8 store i64 %var_2_13, i64* %var_2_3, align 8
- 9 %var_2_14 = inttoptr i64 %var_2_12 to i64*
- 10 %var_2_15 = load i64, i64* %var_2_14, align 8
- 11 %var_2_16 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_11, i64 0, i32 0, i32 0, i32 0, i64 0
- 12 store i64 %var_2_15, i64* %var_2_16, align 1
- 13 %var_2_19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
- 14 %var_2_20 = add i64 %var_2_10, add (i64 ptrtoint (%G_0xa2a4__rip__type* @G_0xa2a4__rip_ to i64), i64 11)
- 15 %var_2_21 = add i64 %var_2_10, 19
- 16 store i64 %var_2_21, i64* %var_2_3, align 8
- 17 %var_2_22 = inttoptr i64 %var_2_20 to i64*
- 18 %var_2_23 = load i64, i64* %var_2_22, align 8
- 19 %var_2_24 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_19, i64 0, i32 0, i32 0, i32 0, i64 0
- 20 store i64 %var_2_23, i64* %var_2_24, align 1
- 21 %var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
- 22 %var_2_28 = add i64 %var_2_10, add (i64 ptrtoint (%G_0xa2a4__rip__type* @G_0xa2a4__rip_ to i64), i64 19)
- 23 %var_2_29 = add i64 %var_2_10, 27
- 24 store i64 %var_2_29, i64* %var_2_3, align 8
- 25 %var_2_30 = inttoptr i64 %var_2_28 to i64*
- 26 %var_2_31 = load i64, i64* %var_2_30, align 8
- 27 %var_2_32 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_27, i64 0, i32 0, i32 0, i32 0, i64 0
- 28 store i64 %var_2_31, i64* %var_2_32, align 1
- 29 %var_2_35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
- 30 %var_2_36 = add i64 %var_2_10, add (i64 ptrtoint (%G_0xa26c__rip__type* @G_0xa26c__rip_ to i64), i64 27)
- 31 %var_2_37 = add i64 %var_2_10, 35
- 32 store i64 %var_2_37, i64* %var_2_3, align 8
- 33 %var_2_38 = inttoptr i64 %var_2_36 to i64*
- 34 %var_2_39 = load i64, i64* %var_2_38, align 8
- 35 %var_2_40 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_35, i64 0, i32 0, i32 0, i32 0, i64 0
- 36 store i64 %var_2_39, i64* %var_2_40, align 1
- 37 %var_2_43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
- 38 %var_2_44 = add i64 %var_2_7, -16
- 39 %var_2_46 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_43, i64 0, i32 0, i32 0, i32 0, i64 0
- 40 %var_2_47 = load i64, i64* %var_2_46, align 1
- 41 %var_2_48 = inttoptr i64 %var_2_44 to i64*
- 42 store i64 %var_2_47, i64* %var_2_48, align 8
- 43 %var_2_49 = load i64, i64* %RBP.i, align 8
- 44 %var_2_50 = add i64 %var_2_49, -8
- 45 %var_2_53 = inttoptr i64 %var_2_50 to double*
- 46 %var_2_54 = load double, double* %var_2_53, align 8
- 47 %var_2_55 = bitcast %union.VectorReg* %var_2_43 to double*
- 48 %var_2_57 = bitcast %union.VectorReg* %var_2_35 to double*
- 49 %var_2_58 = load double, double* %var_2_57, align 1
- 50 %var_2_59 = fdiv double %var_2_54, %var_2_58
- 51 %var_2_60 = bitcast %union.VectorReg* %var_2_27 to double*
- 52 %var_2_61 = load double, double* %var_2_60, align 1
- 53 %var_2_62 = fdiv double %var_2_59, %var_2_61
- 54 %var_2_63 = bitcast %union.VectorReg* %var_2_19 to double*
- 55 %var_2_64 = load double, double* %var_2_63, align 1
- 56 %var_2_65 = fdiv double %var_2_62, %var_2_64
- 57 %var_2_66 = bitcast %union.VectorReg* %var_2_11 to double*
- 58 %var_2_67 = load double, double* %var_2_66, align 1
- 59 %var_2_68 = fdiv double %var_2_65, %var_2_67
- 60 store double %var_2_68, double* %var_2_55, align 1
- 61 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f58ba877a60>, {0: set(), 1: {0}, 2: {6}, 3: {7, 10, 13, 16, 19, 22, 25, 28}, 4: {7, 10, 13, 16, 19, 22, 25, 28}, 5: {2}, 6: set(), 7: set(), 8: {12, 30}, 9: {11, 15}, 10: {7, 10, 13, 16, 19, 22, 25, 28}, 11: set(), 12: {12, 30}, 13: {3}, 14: set(), 15: set(), 16: {12, 30}, 17: {11, 15}, 18: {7, 10, 13, 16, 19, 22, 25, 28}, 19: set(), 20: {12, 30}, 21: {4}, 22: set(), 23: set(), 24: {12, 30}, 25: {11, 15}, 26: {7, 10, 13, 16, 19, 22, 25, 28}, 27: set(), 28: {12, 30}, 29: {5}, 30: set(), 31: set(), 32: {12, 30}, 33: {11, 15}, 34: {7, 10, 13, 16, 19, 22, 25, 28}, 35: set(), 36: {12, 30}, 37: set(), 38: {8}, 39: set(), 40: {7, 10, 13, 16, 19, 22, 25, 28}, 41: {11, 15}, 42: {12, 30}, 43: {7, 10, 13, 16, 19, 22, 25, 28}, 44: {14}, 45: {11, 15}, 46: {7, 10, 13, 16, 19, 22, 25, 28}, 47: {17, 18, 21, 24, 27}, 48: {17, 18, 21, 24, 27}, 49: {7, 10, 13, 16, 19, 22, 25, 28}, 50: {26, 20, 29, 23}, 51: {17, 18, 21, 24, 27}, 52: {7, 10, 13, 16, 19, 22, 25, 28}, 53: {26, 20, 29, 23}, 54: {17, 18, 21, 24, 27}, 55: {7, 10, 13, 16, 19, 22, 25, 28}, 56: {26, 20, 29, 23}, 57: {17, 18, 21, 24, 27}, 58: {7, 10, 13, 16, 19, 22, 25, 28}, 59: {26, 20, 29, 23}, 60: {12, 30}, 61: {31}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f58ba877a60>, {0: set(), 1: set(), 2: set(), 3: set(), 4: set(), 5: set(), 6: set(), 7: set(), 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: set(), 30: set(), 31: set(), 32: set(), 33: set(), 34: set(), 35: set(), 36: set(), 37: set(), 38: set(), 39: set(), 40: set(), 41: set(), 42: set(), 43: set(), 44: set(), 45: set(), 46: set(), 47: set(), 48: set(), 49: set(), 50: set(), 51: set(), 52: set(), 53: set(), 54: set(), 55: set(), 56: set(), 57: set(), 58: set(), 59: set(), 60: set(), 61: {31}})
NO MATCH 0
NO MATCH 1
NO MATCH 2
NO MATCH 3
NO MATCH 4
NO MATCH 5
NO MATCH 6
NO MATCH 7
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
NO MATCH 29
NO MATCH 30
NO MATCH 31
NO MATCH 32
NO MATCH 33
NO MATCH 34
NO MATCH 35
NO MATCH 36
NO MATCH 37
NO MATCH 38
NO MATCH 39
NO MATCH 40
NO MATCH 41
NO MATCH 42
NO MATCH 43
NO MATCH 44
NO MATCH 45
NO MATCH 46
NO MATCH 47
NO MATCH 48
NO MATCH 49
NO MATCH 50
NO MATCH 51
NO MATCH 52
NO MATCH 53
NO MATCH 54
NO MATCH 55
NO MATCH 56
NO MATCH 57
NO MATCH 58
NO MATCH 59
NO MATCH 60
EXACT 61 ret ret
================ Starting round 3
MAPPING:
- 0 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
- 2 %var_2_4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 3 %var_2_5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
- 4 %var_2_6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
- 5 %var_2_7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
- 6 %var_2_10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 7 %var_2_11 = load i64, i64* %var_2_10, align 8
- 8 %var_2_31 = add i64 %var_2_11, -16
- 9 %var_2_33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %var_2_3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
- 10 %var_2_34 = load i64, i64* %var_2_33, align 1
- 11 %var_2_35 = inttoptr i64 %var_2_31 to i64*
- 12 store i64 %var_2_34, i64* %var_2_35, align 8
- 13 %var_2_36 = load i64, i64* %RBP, align 8
- 14 %var_2_37 = add i64 %var_2_36, -8
- 15 %var_2_40 = inttoptr i64 %var_2_37 to double*
- 16 %var_2_41 = load double, double* %var_2_40, align 8
- 17 %var_2_42 = bitcast [32 x %union.VectorReg]* %var_2_3 to double*
- 18 %var_2_44 = bitcast %union.VectorReg* %var_2_7 to double*
- 19 %var_2_45 = load double, double* %var_2_44, align 1
- 20 %var_2_46 = fdiv double %var_2_41, %var_2_45
- 21 %var_2_47 = bitcast %union.VectorReg* %var_2_6 to double*
- 22 %var_2_48 = load double, double* %var_2_47, align 1
- 23 %var_2_49 = fdiv double %var_2_46, %var_2_48
- 24 %var_2_50 = bitcast %union.VectorReg* %var_2_5 to double*
- 25 %var_2_51 = load double, double* %var_2_50, align 1
- 26 %var_2_52 = fdiv double %var_2_49, %var_2_51
- 27 %var_2_53 = bitcast %union.VectorReg* %var_2_4 to double*
- 28 %var_2_54 = load double, double* %var_2_53, align 1
- 29 %var_2_55 = fdiv double %var_2_52, %var_2_54
- 30 store double %var_2_55, double* %var_2_42, align 1
- 31 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f58ba74e510>, {0: {1}, 1: set(), 2: {5}, 3: {13}, 4: {21}, 5: {29}, 6: {2}, 7: {34, 3, 4, 58, 40, 10, 43, 46, 49, 18, 52, 55, 26}, 8: {38}, 9: set(), 10: {34, 3, 4, 58, 40, 10, 43, 46, 49, 18, 52, 55, 26}, 11: {33, 9, 41, 45, 17, 25}, 12: {32, 36, 8, 42, 12, 60, 16, 20, 24, 28}, 13: {34, 3, 4, 58, 40, 10, 43, 46, 49, 18, 52, 55, 26}, 14: {44}, 15: {33, 9, 41, 45, 17, 25}, 16: {34, 3, 4, 58, 40, 10, 43, 46, 49, 18, 52, 55, 26}, 17: {47, 48, 51, 54, 57}, 18: {47, 48, 51, 54, 57}, 19: {34, 3, 4, 58, 40, 10, 43, 46, 49, 18, 52, 55, 26}, 20: {56, 50, 59, 53}, 21: {47, 48, 51, 54, 57}, 22: {34, 3, 4, 58, 40, 10, 43, 46, 49, 18, 52, 55, 26}, 23: {56, 50, 59, 53}, 24: {47, 48, 51, 54, 57}, 25: {34, 3, 4, 58, 40, 10, 43, 46, 49, 18, 52, 55, 26}, 26: {56, 50, 59, 53}, 27: {47, 48, 51, 54, 57}, 28: {34, 3, 4, 58, 40, 10, 43, 46, 49, 18, 52, 55, 26}, 29: {56, 50, 59, 53}, 30: {32, 36, 8, 42, 12, 60, 16, 20, 24, 28}, 31: {61}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f58ba74e510>, {0: set(), 1: set(), 2: set(), 3: set(), 4: set(), 5: set(), 6: set(), 7: set(), 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: set(), 30: set(), 31: {61}})
NO MATCH 0
NO MATCH 1
NO MATCH 2
NO MATCH 3
NO MATCH 4
NO MATCH 5
NO MATCH 6
NO MATCH 7
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
NO MATCH 29
NO MATCH 30
EXACT 31 ret ret
FP: 63 2.0 False
TO REMOVE: dict_keys([])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %var_2_7 = load i64, i64* %var_2_6, align 8
Keep: %var_2_10 = load i64, i64* %var_2_3, align 8
Keep: %var_2_11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Keep: %var_2_12 = add i64 %var_2_10, add (i64 ptrtoint (%G_0xa2a4__rip__type* @G_0xa2a4__rip_ to i64), i64 3)
Keep: %var_2_13 = add i64 %var_2_10, 11
Keep: store i64 %var_2_13, i64* %var_2_3, align 8
Keep: %var_2_14 = inttoptr i64 %var_2_12 to i64*
Keep: %var_2_15 = load i64, i64* %var_2_14, align 8
Keep: %var_2_16 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_11, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_15, i64* %var_2_16, align 1
Keep: %var_2_19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
Keep: %var_2_20 = add i64 %var_2_10, add (i64 ptrtoint (%G_0xa2a4__rip__type* @G_0xa2a4__rip_ to i64), i64 11)
Keep: %var_2_21 = add i64 %var_2_10, 19
Keep: store i64 %var_2_21, i64* %var_2_3, align 8
Keep: %var_2_22 = inttoptr i64 %var_2_20 to i64*
Keep: %var_2_23 = load i64, i64* %var_2_22, align 8
Keep: %var_2_24 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_19, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_23, i64* %var_2_24, align 1
Keep: %var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
Keep: %var_2_28 = add i64 %var_2_10, add (i64 ptrtoint (%G_0xa2a4__rip__type* @G_0xa2a4__rip_ to i64), i64 19)
Keep: %var_2_29 = add i64 %var_2_10, 27
Keep: store i64 %var_2_29, i64* %var_2_3, align 8
Keep: %var_2_30 = inttoptr i64 %var_2_28 to i64*
Keep: %var_2_31 = load i64, i64* %var_2_30, align 8
Keep: %var_2_32 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_27, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_31, i64* %var_2_32, align 1
Keep: %var_2_35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
Keep: %var_2_36 = add i64 %var_2_10, add (i64 ptrtoint (%G_0xa26c__rip__type* @G_0xa26c__rip_ to i64), i64 27)
Keep: %var_2_37 = add i64 %var_2_10, 35
Keep: store i64 %var_2_37, i64* %var_2_3, align 8
Keep: %var_2_38 = inttoptr i64 %var_2_36 to i64*
Keep: %var_2_39 = load i64, i64* %var_2_38, align 8
Keep: %var_2_40 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_35, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_39, i64* %var_2_40, align 1
Keep: %var_2_43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
Keep: %var_2_44 = add i64 %var_2_7, -16
Keep: %var_2_46 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %var_2_43, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: %var_2_47 = load i64, i64* %var_2_46, align 1
Keep: %var_2_48 = inttoptr i64 %var_2_44 to i64*
Keep: store i64 %var_2_47, i64* %var_2_48, align 8
Keep: %var_2_49 = load i64, i64* %RBP.i, align 8
Keep: %var_2_50 = add i64 %var_2_49, -8
Keep: %var_2_53 = inttoptr i64 %var_2_50 to double*
Keep: %var_2_54 = load double, double* %var_2_53, align 8
Keep: %var_2_55 = bitcast %union.VectorReg* %var_2_43 to double*
Keep: %var_2_57 = bitcast %union.VectorReg* %var_2_35 to double*
Keep: %var_2_58 = load double, double* %var_2_57, align 1
Keep: %var_2_59 = fdiv double %var_2_54, %var_2_58
Keep: %var_2_60 = bitcast %union.VectorReg* %var_2_27 to double*
Keep: %var_2_61 = load double, double* %var_2_60, align 1
Keep: %var_2_62 = fdiv double %var_2_59, %var_2_61
Keep: %var_2_63 = bitcast %union.VectorReg* %var_2_19 to double*
Keep: %var_2_64 = load double, double* %var_2_63, align 1
Keep: %var_2_65 = fdiv double %var_2_62, %var_2_64
Keep: %var_2_66 = bitcast %union.VectorReg* %var_2_11 to double*
Keep: %var_2_67 = load double, double* %var_2_66, align 1
Keep: %var_2_68 = fdiv double %var_2_65, %var_2_67
Keep: store double %var_2_68, double* %var_2_55, align 1
Keep: ret %struct.Memory* %2
Missed: dict_keys([])
TO REMOVE: dict_keys([])
Keep: block_40e7b0:
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
Keep: %var_2_4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Keep: %var_2_5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
Keep: %var_2_6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
Keep: %var_2_7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
Keep: %var_2_10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %var_2_11 = load i64, i64* %var_2_10, align 8
Keep: %var_2_31 = add i64 %var_2_11, -16
Keep: %var_2_33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %var_2_3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: %var_2_34 = load i64, i64* %var_2_33, align 1
Keep: %var_2_35 = inttoptr i64 %var_2_31 to i64*
Keep: store i64 %var_2_34, i64* %var_2_35, align 8
Keep: %var_2_36 = load i64, i64* %RBP, align 8
Keep: %var_2_37 = add i64 %var_2_36, -8
Keep: %var_2_40 = inttoptr i64 %var_2_37 to double*
Keep: %var_2_41 = load double, double* %var_2_40, align 8
Keep: %var_2_42 = bitcast [32 x %union.VectorReg]* %var_2_3 to double*
Keep: %var_2_44 = bitcast %union.VectorReg* %var_2_7 to double*
Keep: %var_2_45 = load double, double* %var_2_44, align 1
Keep: %var_2_46 = fdiv double %var_2_41, %var_2_45
Keep: %var_2_47 = bitcast %union.VectorReg* %var_2_6 to double*
Keep: %var_2_48 = load double, double* %var_2_47, align 1
Keep: %var_2_49 = fdiv double %var_2_46, %var_2_48
Keep: %var_2_50 = bitcast %union.VectorReg* %var_2_5 to double*
Keep: %var_2_51 = load double, double* %var_2_50, align 1
Keep: %var_2_52 = fdiv double %var_2_49, %var_2_51
Keep: %var_2_53 = bitcast %union.VectorReg* %var_2_4 to double*
Keep: %var_2_54 = load double, double* %var_2_53, align 1
Keep: %var_2_55 = fdiv double %var_2_52, %var_2_54
Keep: store double %var_2_55, double* %var_2_42, align 1
Keep: ret %struct.Memory* %2
Missed: dict_keys([])
[x] Exhausted iterations without definitive match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_constant_folding/_ZN31custom_multiple_constant_divideIdE8do_shiftEd/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_constant_folding/binary/test.mcsema.calls_renamed.ll _ZN31custom_multiple_constant_divideIdE8do_shiftEd
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_constant_folding/_ZN31custom_multiple_constant_divideIdE8do_shiftEd/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_constant_folding/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
