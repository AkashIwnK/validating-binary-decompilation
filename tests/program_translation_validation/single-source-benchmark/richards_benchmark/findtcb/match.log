Writing '/tmp/tmpa56f03im.dot'...
Writing '/tmp/tmpa56f03im.dot':Done

Reading LLVM: /tmp/tmp3impy4t0-query.ll
Extracting function [findtcb] from /tmp/tmp3impy4t0-query.ll
Dot file generated!
Writing '/tmp/tmp1yzgvw9p.dot'...
Writing '/tmp/tmp1yzgvw9p.dot':Done

Reading LLVM: /tmp/tmp2ioredj6-target.ll
Extracting function [findtcb] from /tmp/tmp2ioredj6-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 48 %RAX.i43 = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0
- 49 store i64 1, i64* %RAX.i43, align 8
- 50 %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 51 %EDI.i = bitcast %union.anon* %40 to i32*
- 52 %41 = add i64 %7, -12
- 53 %42 = load i32, i32* %EDI.i, align 4
- 54 %43 = add i64 %10, 15
- 55 store i64 %43, i64* %3, align 8
- 56 %44 = inttoptr i64 %41 to i32*
- 57 store i32 %42, i32* %44, align 4
- 58 %45 = load i64, i64* %RBP.i, align 8
- 59 %46 = add i64 %45, -16
- 60 %47 = load i64, i64* %3, align 8
- 61 %48 = add i64 %47, 8
- 62 store i64 %48, i64* %3, align 8
- 63 %49 = inttoptr i64 %46 to i64*
- 64 store i64 0, i64* %49, align 8
- 65 %EAX.i36 = bitcast %union.anon* %39 to i32*
- 66 %50 = load i32, i32* %EAX.i36, align 4
- 67 %51 = load i64, i64* %RBP.i, align 8
- 68 %52 = add i64 %51, -4
- 69 %53 = load i64, i64* %3, align 8
- 70 %54 = add i64 %53, 3
- 71 store i64 %54, i64* %3, align 8
- 72 %55 = inttoptr i64 %52 to i32*
- 73 %56 = load i32, i32* %55, align 4
- 74 %57 = sub i32 %50, %56
- 75 %58 = icmp ult i32 %50, %56
- 76 %59 = zext i1 %58 to i8
- 77 store i8 %59, i8* %14, align 1
- 78 %60 = and i32 %57, 255
- 79 %61 = tail call i32 @llvm.ctpop.i32(i32 %60)
- 80 %62 = trunc i32 %61 to i8
- 81 %63 = and i8 %62, 1
- 82 %64 = xor i8 %63, 1
- 83 store i8 %64, i8* %21, align 1
- 84 %65 = xor i32 %56, %50
- 85 %66 = xor i32 %65, %57
- 86 %67 = lshr i32 %66, 4
- 87 %68 = trunc i32 %67 to i8
- 88 %69 = and i8 %68, 1
- 89 store i8 %69, i8* %26, align 1
- 90 %70 = icmp eq i32 %57, 0
- 91 %71 = zext i1 %70 to i8
- 92 store i8 %71, i8* %29, align 1
- 93 %72 = lshr i32 %57, 31
- 94 %73 = trunc i32 %72 to i8
- 95 store i8 %73, i8* %32, align 1
- 96 %74 = lshr i32 %50, 31
- 97 %75 = lshr i32 %56, 31
- 98 %76 = xor i32 %75, %74
- 99 %77 = xor i32 %72, %74
- 100 %78 = add nuw nsw i32 %77, %76
- 101 %79 = icmp eq i32 %78, 2
- 102 %80 = zext i1 %79 to i8
- 103 store i8 %80, i8* %38, align 1
- 104 %81 = icmp ne i8 %73, 0
- 105 %82 = xor i1 %81, %79
- 106 %.demorgan = or i1 %70, %82
- 107 %.v = select i1 %.demorgan, i64 9, i64 39
- 108 %83 = add i64 %53, %.v
- 109 store i64 %83, i64* %3, align 8
- 110 \<badref\> = br i1 %.demorgan, label %block_400941, label %block_.L_40095f
- 111 %84 = add i64 %83, 4
- 112 store i64 %84, i64* %3, align 8
- 113 %85 = load i32, i32* %55, align 4
- 114 %86 = sext i32 %85 to i64
- 115 store i64 %86, i64* %RAX.i43, align 8
- 116 %87 = add nsw i64 %86, -10
- 117 %88 = icmp ult i32 %85, 10
- 118 %89 = zext i1 %88 to i8
- 119 store i8 %89, i8* %14, align 1
- 120 %90 = trunc i64 %87 to i32
- 121 %91 = and i32 %90, 255
- 122 %92 = tail call i32 @llvm.ctpop.i32(i32 %91)
- 123 %93 = trunc i32 %92 to i8
- 124 %94 = and i8 %93, 1
- 125 %95 = xor i8 %94, 1
- 126 store i8 %95, i8* %21, align 1
- 127 %96 = xor i64 %87, %86
- 128 %97 = lshr i64 %96, 4
- 129 %98 = trunc i64 %97 to i8
- 130 %99 = and i8 %98, 1
- 131 store i8 %99, i8* %26, align 1
- 132 %100 = icmp eq i64 %87, 0
- 133 %101 = zext i1 %100 to i8
- 134 store i8 %101, i8* %29, align 1
- 135 %102 = lshr i64 %87, 63
- 136 %103 = trunc i64 %102 to i8
- 137 store i8 %103, i8* %32, align 1
- 138 %104 = lshr i64 %86, 63
- 139 %105 = xor i64 %102, %104
- 140 %106 = add nuw nsw i64 %105, %104
- 141 %107 = icmp eq i64 %106, 2
- 142 %108 = zext i1 %107 to i8
- 143 store i8 %108, i8* %38, align 1
- 144 %109 = icmp ne i8 %103, 0
- 145 %110 = xor i1 %109, %107
- 146 %.demorgan6 = or i1 %100, %110
- 147 %.v8 = select i1 %.demorgan6, i64 14, i64 30
- 148 %111 = add i64 %83, %.v8
- 149 store i64 %111, i64* %3, align 8
- 150 \<badref\> = br i1 %.demorgan6, label %block_40094f, label %block_.L_40095f
- 151 %112 = add i64 %111, 4
- 152 store i64 %112, i64* %3, align 8
- 153 %113 = load i32, i32* %55, align 4
- 154 %114 = sext i32 %113 to i64
- 155 store i64 %114, i64* %RAX.i43, align 8
- 156 %115 = shl nsw i64 %114, 3
- 157 %116 = add i64 %115, ptrtoint (%G_0x602070___rax_8__type* @G_0x602070___rax_8_ to i64)
- 158 %117 = add i64 %111, 12
- 159 store i64 %117, i64* %3, align 8
- 160 %118 = inttoptr i64 %116 to i64*
- 161 %119 = load i64, i64* %118, align 8
- 162 store i64 %119, i64* %RAX.i43, align 8
- 163 %120 = add i64 %51, -16
- 164 %121 = add i64 %111, 16
- 165 store i64 %121, i64* %3, align 8
- 166 %122 = inttoptr i64 %120 to i64*
- 167 store i64 %119, i64* %122, align 8
- 168 %.pre = load i64, i64* %RBP.i, align 8
- 169 %.pre3 = load i64, i64* %3, align 8
- 170 \<badref\> = br label %block_.L_40095f
- 171 %123 = phi i64 [ %.pre3, %block_40094f ], [ %111, %block_400941 ], [ %83, %entry ]
- 172 %124 = phi i64 [ %.pre, %block_40094f ], [ %51, %block_400941 ], [ %51, %entry ]
- 173 %125 = add i64 %124, -16
- 174 %126 = add i64 %123, 5
- 175 store i64 %126, i64* %3, align 8
- 176 %127 = inttoptr i64 %125 to i64*
- 177 %128 = load i64, i64* %127, align 8
- 178 store i8 0, i8* %14, align 1
- 179 %129 = trunc i64 %128 to i32
- 180 %130 = and i32 %129, 255
- 181 %131 = tail call i32 @llvm.ctpop.i32(i32 %130)
- 182 %132 = trunc i32 %131 to i8
- 183 %133 = and i8 %132, 1
- 184 %134 = xor i8 %133, 1
- 185 store i8 %134, i8* %21, align 1
- 186 store i8 0, i8* %26, align 1
- 187 %135 = icmp eq i64 %128, 0
- 188 %136 = zext i1 %135 to i8
- 189 store i8 %136, i8* %29, align 1
- 190 %137 = lshr i64 %128, 63
- 191 %138 = trunc i64 %137 to i8
- 192 store i8 %138, i8* %32, align 1
- 193 store i8 0, i8* %38, align 1
- 194 %.v7 = select i1 %135, i64 11, i64 34
- 195 %139 = add i64 %123, %.v7
- 196 store i64 %139, i64* %3, align 8
- 197 \<badref\> = br i1 %135, label %block_40096a, label %block_.L_400981
- 198 %RDI.i = getelementptr inbounds %union.anon, %union.anon* %40, i64 0, i32 0
- 199 store i64 ptrtoint (%G__0x401257_type* @G__0x401257 to i64), i64* %RDI.i, align 8
- 200 %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 201 %140 = add i64 %124, -4
- 202 %141 = add i64 %139, 13
- 203 store i64 %141, i64* %3, align 8
- 204 %142 = inttoptr i64 %140 to i32*
- 205 %143 = load i32, i32* %142, align 4
- 206 %144 = zext i32 %143 to i64
- 207 store i64 %144, i64* %RSI.i, align 8
- 208 %AL.i = bitcast %union.anon* %39 to i8*
- 209 store i8 0, i8* %AL.i, align 1
- 210 %145 = add i64 %139, -1306
- 211 %146 = add i64 %139, 20
- 212 %147 = load i64, i64* %6, align 8
- 213 %148 = add i64 %147, -8
- 214 %149 = inttoptr i64 %148 to i64*
- 215 store i64 %146, i64* %149, align 8
- 216 store i64 %148, i64* %6, align 8
- 217 store i64 %145, i64* %3, align 8
- 218 %150 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
- 219 %151 = load i64, i64* %RBP.i, align 8
- 220 %152 = add i64 %151, -20
- 221 %153 = load i32, i32* %EAX.i36, align 4
- 222 %154 = load i64, i64* %3, align 8
- 223 %155 = add i64 %154, 3
- 224 store i64 %155, i64* %3, align 8
- 225 %156 = inttoptr i64 %152 to i32*
- 226 store i32 %153, i32* %156, align 4
- 227 %.pre4 = load i64, i64* %RBP.i, align 8
- 228 %.pre5 = load i64, i64* %3, align 8
- 229 \<badref\> = br label %block_.L_400981
- 230 %157 = phi i64 [ %139, %block_.L_40095f ], [ %.pre5, %block_40096a ]
- 231 %158 = phi i64 [ %124, %block_.L_40095f ], [ %.pre4, %block_40096a ]
- 232 %MEMORY.1 = phi %struct.Memory* [ %2, %block_.L_40095f ], [ %150, %block_40096a ]
- 233 %159 = add i64 %158, -16
- 234 %160 = add i64 %157, 4
- 235 store i64 %160, i64* %3, align 8
- 236 %161 = inttoptr i64 %159 to i64*
- 237 %162 = load i64, i64* %161, align 8
- 238 store i64 %162, i64* %RAX.i43, align 8
- 239 %163 = load i64, i64* %6, align 8
- 240 %164 = add i64 %163, 32
- 241 store i64 %164, i64* %6, align 8
- 242 %165 = icmp ugt i64 %163, -33
- 243 %166 = zext i1 %165 to i8
- 244 store i8 %166, i8* %14, align 1
- 245 %167 = trunc i64 %164 to i32
- 246 %168 = and i32 %167, 255
- 247 %169 = tail call i32 @llvm.ctpop.i32(i32 %168)
- 248 %170 = trunc i32 %169 to i8
- 249 %171 = and i8 %170, 1
- 250 %172 = xor i8 %171, 1
- 251 store i8 %172, i8* %21, align 1
- 252 %173 = xor i64 %164, %163
- 253 %174 = lshr i64 %173, 4
- 254 %175 = trunc i64 %174 to i8
- 255 %176 = and i8 %175, 1
- 256 store i8 %176, i8* %26, align 1
- 257 %177 = icmp eq i64 %164, 0
- 258 %178 = zext i1 %177 to i8
- 259 store i8 %178, i8* %29, align 1
- 260 %179 = lshr i64 %164, 63
- 261 %180 = trunc i64 %179 to i8
- 262 store i8 %180, i8* %32, align 1
- 263 %181 = lshr i64 %163, 63
- 264 %182 = xor i64 %179, %181
- 265 %183 = add nuw nsw i64 %182, %179
- 266 %184 = icmp eq i64 %183, 2
- 267 %185 = zext i1 %184 to i8
- 268 store i8 %185, i8* %38, align 1
- 269 %186 = add i64 %157, 9
- 270 store i64 %186, i64* %3, align 8
- 271 %187 = add i64 %163, 40
- 272 %188 = inttoptr i64 %164 to i64*
- 273 %189 = load i64, i64* %188, align 8
- 274 store i64 %189, i64* %RBP.i, align 8
- 275 store i64 %187, i64* %6, align 8
- 276 %190 = add i64 %157, 10
- 277 store i64 %190, i64* %3, align 8
- 278 %191 = inttoptr i64 %187 to i64*
- 279 %192 = load i64, i64* %191, align 8
- 280 store i64 %192, i64* %3, align 8
- 281 %193 = add i64 %163, 48
- 282 store i64 %193, i64* %6, align 8
- 283 ret %struct.Memory* %MEMORY.1
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fa08ca3b1e0>, {0: {0}, 1: {10}, 2: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 3: {12}, 4: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 5: {9}, 6: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 7: {126, 15}, 8: {191, 67, 262, 138, 75, 206, 16, 212, 149, 118, 185, 60, 127}, 9: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 10: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 11: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 12: {20}, 13: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 14: {22}, 15: {224, 248, 41, 105, 171, 79, 239, 274, 52, 180, 23, 120, 156, 94}, 16: {24}, 17: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 18: {97, 161, 226, 36, 90, 229, 167, 265, 235, 268, 45, 174, 242, 83, 277, 26, 29, 158}, 19: {227, 266, 81, 27, 159}, 20: {160, 131, 228, 267, 82, 28}, 21: {97, 161, 226, 36, 90, 229, 167, 265, 235, 268, 45, 174, 242, 83, 277, 26, 29, 158}, 22: {162, 37, 230, 168, 236, 269, 84, 91, 30}, 23: {163, 231, 270, 85, 31}, 24: {32}, 25: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 26: {34, 101, 102, 165, 233, 108, 49, 177, 245, 87, 88, 251}, 27: {89, 234, 35, 166}, 28: {97, 161, 226, 36, 90, 229, 167, 265, 235, 268, 45, 174, 242, 83, 277, 26, 29, 158}, 29: {162, 37, 230, 168, 236, 269, 84, 91, 30}, 30: {38}, 31: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 32: {40, 170, 107, 78, 238, 273, 250, 93}, 33: {224, 248, 41, 105, 171, 79, 239, 274, 52, 180, 23, 120, 156, 94}, 34: {42}, 35: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 36: {44, 173, 48, 241, 176, 244, 276}, 37: {97, 161, 226, 36, 90, 229, 167, 265, 235, 268, 45, 174, 242, 83, 277, 26, 29, 158}, 38: {46}, 39: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 40: {44, 173, 48, 241, 176, 244, 276}, 41: {34, 101, 102, 165, 233, 108, 49, 177, 245, 87, 88, 251}, 42: {103, 203, 111, 178, 50, 246, 281, 254}, 43: {104, 51, 179, 247}, 44: {224, 248, 41, 105, 171, 79, 239, 274, 52, 180, 23, 120, 156, 94}, 45: {53}, 46: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 47: {1}, 48: {8, 6}, 49: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 50: {4}, 51: {2, 3, 5}, 52: {56}, 53: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 54: {58}, 55: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 56: {191, 67, 262, 138, 75, 206, 16, 212, 149, 118, 185, 60, 127}, 57: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 58: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 59: {209, 146, 259, 63}, 60: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 61: {65}, 62: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 63: {191, 67, 262, 138, 75, 206, 16, 212, 149, 118, 185, 60, 127}, 64: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 65: {2, 3, 5}, 66: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 67: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 68: {115, 71}, 69: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 70: {136, 73}, 71: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 72: {191, 67, 262, 138, 75, 206, 16, 212, 149, 118, 185, 60, 127}, 73: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 74: {77}, 75: {40, 170, 107, 78, 238, 273, 250, 93}, 76: {224, 248, 41, 105, 171, 79, 239, 274, 52, 180, 23, 120, 156, 94}, 77: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 78: {227, 266, 81, 27, 159}, 79: {160, 131, 228, 267, 82, 28}, 80: {97, 161, 226, 36, 90, 229, 167, 265, 235, 268, 45, 174, 242, 83, 277, 26, 29, 158}, 81: {162, 37, 230, 168, 236, 269, 84, 91, 30}, 82: {163, 231, 270, 85, 31}, 83: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 84: {34, 101, 102, 165, 233, 108, 49, 177, 245, 87, 88, 251}, 85: {34, 101, 102, 165, 233, 108, 49, 177, 245, 87, 88, 251}, 86: {89, 234, 35, 166}, 87: {97, 161, 226, 36, 90, 229, 167, 265, 235, 268, 45, 174, 242, 83, 277, 26, 29, 158}, 88: {162, 37, 230, 168, 236, 269, 84, 91, 30}, 89: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 90: {40, 170, 107, 78, 238, 273, 250, 93}, 91: {224, 248, 41, 105, 171, 79, 239, 274, 52, 180, 23, 120, 156, 94}, 92: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 93: {96, 99, 100}, 94: {97, 161, 226, 36, 90, 229, 167, 265, 235, 268, 45, 174, 242, 83, 277, 26, 29, 158}, 95: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 96: {96, 99, 100}, 97: {96, 99, 100}, 98: {34, 101, 102, 165, 233, 108, 49, 177, 245, 87, 88, 251}, 99: {34, 101, 102, 165, 233, 108, 49, 177, 245, 87, 88, 251}, 100: {103, 203, 111, 178, 50, 246, 281, 254}, 101: {104, 51, 179, 247}, 102: {224, 248, 41, 105, 171, 79, 239, 274, 52, 180, 23, 120, 156, 94}, 103: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 104: {40, 170, 107, 78, 238, 273, 250, 93}, 105: {34, 101, 102, 165, 233, 108, 49, 177, 245, 87, 88, 251}, 106: {252, 109}, 107: {110}, 108: {103, 203, 111, 178, 50, 246, 281, 254}, 109: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 110: {256, 113, 283}, 111: {217, 147, 197}, 112: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 113: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 114: {200, 220}, 115: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 116: {222}, 117: {223}, 118: {224, 248, 41, 105, 171, 79, 239, 274, 52, 180, 23, 120, 156, 94}, 119: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 120: {97, 161, 226, 36, 90, 229, 167, 265, 235, 268, 45, 174, 242, 83, 277, 26, 29, 158}, 121: {227, 266, 81, 27, 159}, 122: {160, 131, 228, 267, 82, 28}, 123: {97, 161, 226, 36, 90, 229, 167, 265, 235, 268, 45, 174, 242, 83, 277, 26, 29, 158}, 124: {162, 37, 230, 168, 236, 269, 84, 91, 30}, 125: {163, 231, 270, 85, 31}, 126: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 127: {34, 101, 102, 165, 233, 108, 49, 177, 245, 87, 88, 251}, 128: {89, 234, 35, 166}, 129: {97, 161, 226, 36, 90, 229, 167, 265, 235, 268, 45, 174, 242, 83, 277, 26, 29, 158}, 130: {162, 37, 230, 168, 236, 269, 84, 91, 30}, 131: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 132: {40, 170, 107, 78, 238, 273, 250, 93}, 133: {224, 248, 41, 105, 171, 79, 239, 274, 52, 180, 23, 120, 156, 94}, 134: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 135: {44, 173, 48, 241, 176, 244, 276}, 136: {97, 161, 226, 36, 90, 229, 167, 265, 235, 268, 45, 174, 242, 83, 277, 26, 29, 158}, 137: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 138: {44, 173, 48, 241, 176, 244, 276}, 139: {34, 101, 102, 165, 233, 108, 49, 177, 245, 87, 88, 251}, 140: {103, 203, 111, 178, 50, 246, 281, 254}, 141: {104, 51, 179, 247}, 142: {224, 248, 41, 105, 171, 79, 239, 274, 52, 180, 23, 120, 156, 94}, 143: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 144: {40, 170, 107, 78, 238, 273, 250, 93}, 145: {34, 101, 102, 165, 233, 108, 49, 177, 245, 87, 88, 251}, 146: {252, 109}, 147: {253}, 148: {103, 203, 111, 178, 50, 246, 281, 254}, 149: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 150: {256, 113, 283}, 151: {217, 147, 197}, 152: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 153: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 154: {200, 220}, 155: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 156: {202}, 157: {103, 203, 111, 178, 50, 246, 281, 254}, 158: {204}, 159: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 160: {191, 67, 262, 138, 75, 206, 16, 212, 149, 118, 185, 60, 127}, 161: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 162: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 163: {209, 146, 259, 63}, 164: {210}, 165: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 166: {191, 67, 262, 138, 75, 206, 16, 212, 149, 118, 185, 60, 127}, 167: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 168: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 169: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 170: {216, 142}, 171: {257, 258}, 172: {257, 258}, 173: {209, 146, 259, 63}, 174: {260}, 175: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 176: {191, 67, 262, 138, 75, 206, 16, 212, 149, 118, 185, 60, 127}, 177: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 178: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 179: {97, 161, 226, 36, 90, 229, 167, 265, 235, 268, 45, 174, 242, 83, 277, 26, 29, 158}, 180: {227, 266, 81, 27, 159}, 181: {160, 131, 228, 267, 82, 28}, 182: {97, 161, 226, 36, 90, 229, 167, 265, 235, 268, 45, 174, 242, 83, 277, 26, 29, 158}, 183: {162, 37, 230, 168, 236, 269, 84, 91, 30}, 184: {163, 231, 270, 85, 31}, 185: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 186: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 187: {40, 170, 107, 78, 238, 273, 250, 93}, 188: {224, 248, 41, 105, 171, 79, 239, 274, 52, 180, 23, 120, 156, 94}, 189: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 190: {44, 173, 48, 241, 176, 244, 276}, 191: {97, 161, 226, 36, 90, 229, 167, 265, 235, 268, 45, 174, 242, 83, 277, 26, 29, 158}, 192: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 193: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 194: {280}, 195: {103, 203, 111, 178, 50, 246, 281, 254}, 196: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 197: {256, 113, 283}, 198: {8, 6}, 199: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 200: {7}, 201: {115, 71}, 202: {116}, 203: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 204: {191, 67, 262, 138, 75, 206, 16, 212, 149, 118, 185, 60, 127}, 205: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 206: {224, 248, 41, 105, 171, 79, 239, 274, 52, 180, 23, 120, 156, 94}, 207: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 208: {2, 3, 5}, 209: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 210: {123}, 211: {124}, 212: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 213: {126, 15}, 214: {191, 67, 262, 138, 75, 206, 16, 212, 149, 118, 185, 60, 127}, 215: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 216: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 217: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 218: {160, 131, 228, 267, 82, 28}, 219: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 220: {133}, 221: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 222: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 223: {136, 73}, 224: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 225: {191, 67, 262, 138, 75, 206, 16, 212, 149, 118, 185, 60, 127}, 226: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 227: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 228: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 229: {216, 142}, 230: {144, 145, 143}, 231: {144, 145, 143}, 232: {144, 145, 143}, 233: {209, 146, 259, 63}, 234: {217, 147, 197}, 235: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 236: {191, 67, 262, 138, 75, 206, 16, 212, 149, 118, 185, 60, 127}, 237: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 238: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 239: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 240: {153}, 241: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 242: {155}, 243: {224, 248, 41, 105, 171, 79, 239, 274, 52, 180, 23, 120, 156, 94}, 244: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 245: {97, 161, 226, 36, 90, 229, 167, 265, 235, 268, 45, 174, 242, 83, 277, 26, 29, 158}, 246: {227, 266, 81, 27, 159}, 247: {160, 131, 228, 267, 82, 28}, 248: {97, 161, 226, 36, 90, 229, 167, 265, 235, 268, 45, 174, 242, 83, 277, 26, 29, 158}, 249: {162, 37, 230, 168, 236, 269, 84, 91, 30}, 250: {163, 231, 270, 85, 31}, 251: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 252: {34, 101, 102, 165, 233, 108, 49, 177, 245, 87, 88, 251}, 253: {89, 234, 35, 166}, 254: {97, 161, 226, 36, 90, 229, 167, 265, 235, 268, 45, 174, 242, 83, 277, 26, 29, 158}, 255: {162, 37, 230, 168, 236, 269, 84, 91, 30}, 256: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 257: {40, 170, 107, 78, 238, 273, 250, 93}, 258: {224, 248, 41, 105, 171, 79, 239, 274, 52, 180, 23, 120, 156, 94}, 259: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 260: {44, 173, 48, 241, 176, 244, 276}, 261: {97, 161, 226, 36, 90, 229, 167, 265, 235, 268, 45, 174, 242, 83, 277, 26, 29, 158}, 262: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 263: {44, 173, 48, 241, 176, 244, 276}, 264: {34, 101, 102, 165, 233, 108, 49, 177, 245, 87, 88, 251}, 265: {103, 203, 111, 178, 50, 246, 281, 254}, 266: {104, 51, 179, 247}, 267: {224, 248, 41, 105, 171, 79, 239, 274, 52, 180, 23, 120, 156, 94}, 268: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 269: {182}, 270: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 271: {184}, 272: {191, 67, 262, 138, 75, 206, 16, 212, 149, 118, 185, 60, 127}, 273: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 274: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 275: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 276: {189}, 277: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 278: {191, 67, 262, 138, 75, 206, 16, 212, 149, 118, 185, 60, 127}, 279: {132, 134, 135, 263, 11, 140, 141, 14, 18, 150, 152, 57, 186, 62, 64, 192, 69, 70, 199, 72, 76, 207, 214, 215, 219, 119, 125}, 280: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 281: {194}, 282: {128, 129, 130, 261, 264, 137, 139, 13, 271, 272, 17, 19, 148, 21, 275, 151, 278, 25, 154, 279, 282, 157, 33, 164, 39, 169, 43, 172, 47, 175, 181, 54, 55, 183, 59, 187, 61, 188, 190, 193, 66, 195, 68, 198, 201, 74, 205, 80, 208, 211, 213, 86, 218, 92, 221, 95, 225, 98, 249, 232, 106, 237, 112, 240, 114, 243, 117, 121, 122, 255}, 283: {196}})
Equivalent! frozenset({72, 135}) {69, 222}
Equivalent! frozenset({136, 73}) {70, 223}
Equivalent! frozenset({137, 74}) {224, 71}
Equivalent! frozenset({219, 199}) {113, 153}
Equivalent! frozenset({200, 220}) {114, 154}
Equivalent! frozenset({201, 221}) {115, 155}
Equivalent! frozenset({216, 142}) {170, 229}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fa08ca3b1e0>, {0: {0}, 1: {10}, 2: {11}, 3: {12}, 4: {13}, 5: {9}, 6: {14}, 7: {15}, 8: {16}, 9: {17}, 10: {18}, 11: {19}, 12: {20}, 13: {21}, 14: {22}, 15: {23}, 16: {24}, 17: {25}, 18: {26}, 19: {27}, 20: {28}, 21: {29}, 22: {30}, 23: {31}, 24: {32}, 25: {33}, 26: {34}, 27: {35}, 28: {36}, 29: {37}, 30: {38}, 31: {39}, 32: {40}, 33: {41}, 34: {42}, 35: {43}, 36: {44}, 37: {45}, 38: {46}, 39: {47}, 40: {48}, 41: {49}, 42: {50}, 43: {51}, 44: {52}, 45: {53}, 46: {54}, 47: {1}, 48: {6}, 49: {201, 208, 55, 151, 221}, 50: {4}, 51: {5}, 52: {56}, 53: {57}, 54: {58}, 55: {59}, 56: {60}, 57: {61}, 58: {70, 62}, 59: {209, 63}, 60: {64}, 61: {65}, 62: {66}, 63: {67, 212}, 64: {68, 213}, 65: {3}, 66: {69}, 67: {70, 214}, 68: {71}, 69: {72}, 70: {136}, 71: {74}, 72: {75}, 73: {76}, 74: {77}, 75: {78}, 76: {79}, 77: {80}, 78: {81}, 79: {82}, 80: {83}, 81: {84}, 82: {85}, 83: {86}, 84: {87}, 85: {88}, 86: {89}, 87: {90}, 88: {91}, 89: {92}, 90: {93}, 91: {94}, 92: {95}, 93: {96}, 94: {97}, 95: {98}, 96: {99}, 97: {100}, 98: {101}, 99: {102}, 100: {103}, 101: {104}, 102: {105}, 103: {106}, 104: {107}, 105: {108}, 106: {109}, 107: {110}, 108: {111}, 109: {112}, 110: {113}, 111: {217}, 112: {218}, 113: {219}, 114: {200}, 115: {201}, 116: {222}, 117: {223}, 118: {224}, 119: {225}, 120: {226}, 121: {227}, 122: {228}, 123: {229}, 124: {230}, 125: {231}, 126: {232}, 127: {233}, 128: {234}, 129: {235}, 130: {236}, 131: {237}, 132: {238}, 133: {239}, 134: {240}, 135: {241}, 136: {242}, 137: {243}, 138: {244}, 139: {245}, 140: {246}, 141: {247}, 142: {248}, 143: {249}, 144: {250}, 145: {251}, 146: {252}, 147: {253}, 148: {254}, 149: {255}, 150: {256}, 151: {197}, 152: {198}, 153: {199}, 154: {220}, 155: {221}, 156: {202}, 157: {203}, 158: {204}, 159: {205}, 160: {206}, 161: {207}, 162: {208}, 163: {209}, 164: {210}, 165: {211}, 166: {212}, 167: {213}, 168: {70, 214}, 169: {215}, 170: {216}, 171: {257}, 172: {258}, 173: {259}, 174: {260}, 175: {261}, 176: {262}, 177: {263}, 178: {225, 264, 80, 25, 157}, 179: {265}, 180: {266}, 181: {267}, 182: {268}, 183: {269}, 184: {270}, 185: {271}, 186: {39, 169, 237, 272, 92}, 187: {273}, 188: {274}, 189: {275}, 190: {276}, 191: {277}, 192: {278}, 193: {106, 181, 54, 279, 249}, 194: {280}, 195: {281}, 196: {282}, 197: {283}, 198: {8}, 199: {114}, 200: {7}, 201: {115}, 202: {116}, 203: {117}, 204: {118}, 205: {119}, 206: {120}, 207: {121}, 208: {2}, 209: {122}, 210: {123}, 211: {124}, 212: {125}, 213: {126}, 214: {127}, 215: {128}, 216: {129}, 217: {130}, 218: {131}, 219: {132}, 220: {133}, 221: {134}, 222: {135}, 223: {73}, 224: {137}, 225: {138}, 226: {139}, 227: {140}, 228: {141}, 229: {142}, 230: {143}, 231: {144}, 232: {145}, 233: {146}, 234: {147}, 235: {148}, 236: {149}, 237: {150}, 238: {151}, 239: {152}, 240: {153}, 241: {154}, 242: {155}, 243: {156}, 244: {157}, 245: {158}, 246: {159}, 247: {160}, 248: {161}, 249: {162}, 250: {163}, 251: {164}, 252: {165}, 253: {166}, 254: {167}, 255: {168}, 256: {169}, 257: {170}, 258: {171}, 259: {172}, 260: {173}, 261: {174}, 262: {175}, 263: {176}, 264: {177}, 265: {178}, 266: {179}, 267: {180}, 268: {181}, 269: {182}, 270: {183}, 271: {184}, 272: {185}, 273: {186}, 274: {187}, 275: {188}, 276: {189}, 277: {190}, 278: {191}, 279: {192}, 280: {193}, 281: {194}, 282: {195}, 283: {196}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 getelementptr getelementptr
EXACT 48 getelementptr getelementptr
MORE 49 POT: 5
EXACT 50 getelementptr getelementptr
EXACT 51 bitcast bitcast
EXACT 52 add add
EXACT 53 load load
EXACT 54 add add
EXACT 55 store store
EXACT 56 inttoptr inttoptr
EXACT 57 store store
MORE 58 POT: 2
MORE 59 POT: 2
EXACT 60 load load
EXACT 61 add add
EXACT 62 store store
MORE 63 POT: 2
MORE 64 POT: 2
EXACT 65 bitcast bitcast
EXACT 66 load load
MORE 67 POT: 2
EXACT 68 add add
EXACT 69 load load
EXACT 70 add add
EXACT 71 store store
EXACT 72 inttoptr inttoptr
EXACT 73 load load
EXACT 74 sub sub
EXACT 75 icmp icmp
EXACT 76 zext zext
EXACT 77 store store
EXACT 78 and and
EXACT 79 tail tail
EXACT 80 trunc trunc
EXACT 81 and and
EXACT 82 xor xor
EXACT 83 store store
EXACT 84 xor xor
EXACT 85 xor xor
EXACT 86 lshr lshr
EXACT 87 trunc trunc
EXACT 88 and and
EXACT 89 store store
EXACT 90 icmp icmp
EXACT 91 zext zext
EXACT 92 store store
EXACT 93 lshr lshr
EXACT 94 trunc trunc
EXACT 95 store store
EXACT 96 lshr lshr
EXACT 97 lshr lshr
EXACT 98 xor xor
EXACT 99 xor xor
EXACT 100 add add
EXACT 101 icmp icmp
EXACT 102 zext zext
EXACT 103 store store
EXACT 104 icmp icmp
EXACT 105 xor xor
EXACT 106 or or
EXACT 107 select select
EXACT 108 add add
EXACT 109 store store
EXACT 110 br br
EXACT 111 add add
EXACT 112 store store
EXACT 113 load load
EXACT 114 sext sext
EXACT 115 store store
EXACT 116 add add
EXACT 117 icmp icmp
EXACT 118 zext zext
EXACT 119 store store
EXACT 120 trunc trunc
EXACT 121 and and
EXACT 122 tail tail
EXACT 123 trunc trunc
EXACT 124 and and
EXACT 125 xor xor
EXACT 126 store store
EXACT 127 xor xor
EXACT 128 lshr lshr
EXACT 129 trunc trunc
EXACT 130 and and
EXACT 131 store store
EXACT 132 icmp icmp
EXACT 133 zext zext
EXACT 134 store store
EXACT 135 lshr lshr
EXACT 136 trunc trunc
EXACT 137 store store
EXACT 138 lshr lshr
EXACT 139 xor xor
EXACT 140 add add
EXACT 141 icmp icmp
EXACT 142 zext zext
EXACT 143 store store
EXACT 144 icmp icmp
EXACT 145 xor xor
EXACT 146 or or
EXACT 147 select select
EXACT 148 add add
EXACT 149 store store
EXACT 150 br br
EXACT 151 add add
EXACT 152 store store
EXACT 153 load load
EXACT 154 sext sext
EXACT 155 store store
EXACT 156 shl shl
EXACT 157 add add
EXACT 158 add add
EXACT 159 store store
EXACT 160 inttoptr inttoptr
EXACT 161 load load
EXACT 162 store store
EXACT 163 add add
EXACT 164 add add
EXACT 165 store store
EXACT 166 inttoptr inttoptr
EXACT 167 store store
MORE 168 POT: 2
EXACT 169 load load
EXACT 170 br br
EXACT 171 phi phi
EXACT 172 phi phi
EXACT 173 add add
EXACT 174 add add
EXACT 175 store store
EXACT 176 inttoptr inttoptr
EXACT 177 load load
MORE 178 POT: 5
EXACT 179 trunc trunc
EXACT 180 and and
EXACT 181 tail tail
EXACT 182 trunc trunc
EXACT 183 and and
EXACT 184 xor xor
EXACT 185 store store
MORE 186 POT: 5
EXACT 187 icmp icmp
EXACT 188 zext zext
EXACT 189 store store
EXACT 190 lshr lshr
EXACT 191 trunc trunc
EXACT 192 store store
MORE 193 POT: 5
EXACT 194 select select
EXACT 195 add add
EXACT 196 store store
EXACT 197 br br
EXACT 198 getelementptr getelementptr
EXACT 199 store store
EXACT 200 getelementptr getelementptr
EXACT 201 add add
EXACT 202 add add
EXACT 203 store store
EXACT 204 inttoptr inttoptr
EXACT 205 load load
EXACT 206 zext zext
EXACT 207 store store
EXACT 208 bitcast bitcast
EXACT 209 store store
EXACT 210 add add
EXACT 211 add add
EXACT 212 load load
EXACT 213 add add
EXACT 214 inttoptr inttoptr
EXACT 215 store store
EXACT 216 store store
EXACT 217 store store
EXACT 218 tail tail
EXACT 219 load load
EXACT 220 add add
EXACT 221 load load
EXACT 222 load load
EXACT 223 add add
EXACT 224 store store
EXACT 225 inttoptr inttoptr
EXACT 226 store store
EXACT 227 load load
EXACT 228 load load
EXACT 229 br br
EXACT 230 phi phi
EXACT 231 phi phi
EXACT 232 phi phi
EXACT 233 add add
EXACT 234 add add
EXACT 235 store store
EXACT 236 inttoptr inttoptr
EXACT 237 load load
EXACT 238 store store
EXACT 239 load load
EXACT 240 add add
EXACT 241 store store
EXACT 242 icmp icmp
EXACT 243 zext zext
EXACT 244 store store
EXACT 245 trunc trunc
EXACT 246 and and
EXACT 247 tail tail
EXACT 248 trunc trunc
EXACT 249 and and
EXACT 250 xor xor
EXACT 251 store store
EXACT 252 xor xor
EXACT 253 lshr lshr
EXACT 254 trunc trunc
EXACT 255 and and
EXACT 256 store store
EXACT 257 icmp icmp
EXACT 258 zext zext
EXACT 259 store store
EXACT 260 lshr lshr
EXACT 261 trunc trunc
EXACT 262 store store
EXACT 263 lshr lshr
EXACT 264 xor xor
EXACT 265 add add
EXACT 266 icmp icmp
EXACT 267 zext zext
EXACT 268 store store
EXACT 269 add add
EXACT 270 store store
EXACT 271 add add
EXACT 272 inttoptr inttoptr
EXACT 273 load load
EXACT 274 store store
EXACT 275 store store
EXACT 276 add add
EXACT 277 store store
EXACT 278 inttoptr inttoptr
EXACT 279 load load
EXACT 280 store store
EXACT 281 add add
EXACT 282 store store
EXACT 283 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %EAX = bitcast %union.anon* %3 to i32*
- 4 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 5 %EDI = bitcast %union.anon* %4 to i32*
- 6 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 7 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 8 %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 9 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 10 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 11 %5 = load i64, i64* %RBP, align 8
- 12 %6 = add i64 %1, 1
- 13 store i64 %6, i64* %PC, align 8
- 14 %7 = load i64, i64* %RSP, align 8
- 15 %8 = add i64 %7, -8
- 16 %9 = inttoptr i64 %8 to i64*
- 17 store i64 %5, i64* %9, align 8
- 18 %10 = load i64, i64* %PC, align 8
- 19 store i64 %8, i64* %RBP, align 8
- 20 %11 = add i64 %7, -40
- 21 store i64 %11, i64* %RSP, align 8
- 22 %12 = icmp ult i64 %8, 32
- 23 %13 = zext i1 %12 to i8
- 24 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 25 store i8 %13, i8* %14, align 1
- 26 %15 = trunc i64 %11 to i32
- 27 %16 = and i32 %15, 255
- 28 %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
- 29 %18 = trunc i32 %17 to i8
- 30 %19 = and i8 %18, 1
- 31 %20 = xor i8 %19, 1
- 32 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 33 store i8 %20, i8* %21, align 1
- 34 %22 = xor i64 %8, %11
- 35 %23 = lshr i64 %22, 4
- 36 %24 = trunc i64 %23 to i8
- 37 %25 = and i8 %24, 1
- 38 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 39 store i8 %25, i8* %26, align 1
- 40 %27 = icmp eq i64 %11, 0
- 41 %28 = zext i1 %27 to i8
- 42 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 43 store i8 %28, i8* %29, align 1
- 44 %30 = lshr i64 %11, 63
- 45 %31 = trunc i64 %30 to i8
- 46 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 47 store i8 %31, i8* %32, align 1
- 48 %33 = lshr i64 %8, 63
- 49 %34 = xor i64 %30, %33
- 50 %35 = add nuw nsw i64 %34, %33
- 51 %36 = icmp eq i64 %35, 2
- 52 %37 = zext i1 %36 to i8
- 53 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 54 store i8 %37, i8* %38, align 1
- 55 store i64 1, i64* %RAX, align 8
- 56 %39 = add i64 %7, -12
- 57 %40 = load i32, i32* %EDI, align 4
- 58 %41 = add i64 %10, 15
- 59 store i64 %41, i64* %PC, align 8
- 60 %42 = inttoptr i64 %39 to i32*
- 61 store i32 %40, i32* %42, align 4
- 62 %43 = load i64, i64* %RBP, align 8
- 63 %44 = add i64 %43, -16
- 64 %45 = load i64, i64* %PC, align 8
- 65 %46 = add i64 %45, 8
- 66 store i64 %46, i64* %PC, align 8
- 67 %47 = inttoptr i64 %44 to i64*
- 68 store i64 0, i64* %47, align 8
- 69 %48 = load i32, i32* %EAX, align 4
- 70 %49 = load i64, i64* %RBP, align 8
- 71 %50 = add i64 %49, -4
- 72 %51 = load i64, i64* %PC, align 8
- 73 %52 = add i64 %51, 3
- 74 store i64 %52, i64* %PC, align 8
- 75 %53 = inttoptr i64 %50 to i32*
- 76 %54 = load i32, i32* %53, align 4
- 77 %55 = sub i32 %48, %54
- 78 %56 = icmp ult i32 %48, %54
- 79 %57 = zext i1 %56 to i8
- 80 store i8 %57, i8* %14, align 1
- 81 %58 = and i32 %55, 255
- 82 %59 = tail call i32 @llvm.ctpop.i32(i32 %58) #12
- 83 %60 = trunc i32 %59 to i8
- 84 %61 = and i8 %60, 1
- 85 %62 = xor i8 %61, 1
- 86 store i8 %62, i8* %21, align 1
- 87 %63 = xor i32 %54, %48
- 88 %64 = xor i32 %63, %55
- 89 %65 = lshr i32 %64, 4
- 90 %66 = trunc i32 %65 to i8
- 91 %67 = and i8 %66, 1
- 92 store i8 %67, i8* %26, align 1
- 93 %68 = icmp eq i32 %55, 0
- 94 %69 = zext i1 %68 to i8
- 95 store i8 %69, i8* %29, align 1
- 96 %70 = lshr i32 %55, 31
- 97 %71 = trunc i32 %70 to i8
- 98 store i8 %71, i8* %32, align 1
- 99 %72 = lshr i32 %48, 31
- 100 %73 = lshr i32 %54, 31
- 101 %74 = xor i32 %73, %72
- 102 %75 = xor i32 %70, %72
- 103 %76 = add nuw nsw i32 %75, %74
- 104 %77 = icmp eq i32 %76, 2
- 105 %78 = zext i1 %77 to i8
- 106 store i8 %78, i8* %38, align 1
- 107 %79 = icmp ne i8 %71, 0
- 108 %80 = xor i1 %79, %77
- 109 %.demorgan = or i1 %68, %80
- 110 %.v = select i1 %.demorgan, i64 9, i64 39
- 111 %81 = add i64 %51, %.v
- 112 store i64 %81, i64* %PC, align 8
- 113 \<badref\> = br i1 %.demorgan, label %block_400941, label %block_40095f
- 114 store i64 add (i64 ptrtoint (%seg_401250__rodata_type* @seg_401250__rodata to i64), i64 7), i64* %RDI, align 8
- 115 %82 = add i64 %176, -4
- 116 %83 = add i64 %191, 13
- 117 store i64 %83, i64* %PC, align 8
- 118 %84 = inttoptr i64 %82 to i32*
- 119 %85 = load i32, i32* %84, align 4
- 120 %86 = zext i32 %85 to i64
- 121 store i64 %86, i64* %RSI, align 8
- 122 store i8 0, i8* %AL, align 1
- 123 %87 = add i64 %191, -1306
- 124 %88 = add i64 %191, 20
- 125 %89 = load i64, i64* %RSP, align 8
- 126 %90 = add i64 %89, -8
- 127 %91 = inttoptr i64 %90 to i64*
- 128 store i64 %88, i64* %91, align 8
- 129 store i64 %90, i64* %RSP, align 8
- 130 store i64 %87, i64* %PC, align 8
- 131 %92 = tail call fastcc %struct.Memory* @ext_602118_printf(%struct.State* nonnull %0, %struct.Memory* %2)
- 132 %93 = load i64, i64* %RBP, align 8
- 133 %94 = add i64 %93, -20
- 134 %95 = load i32, i32* %EAX, align 4
- 135 %96 = load i64, i64* %PC, align 8
- 136 %97 = add i64 %96, 3
- 137 store i64 %97, i64* %PC, align 8
- 138 %98 = inttoptr i64 %94 to i32*
- 139 store i32 %95, i32* %98, align 4
- 140 %.pre4 = load i64, i64* %RBP, align 8
- 141 %.pre5 = load i64, i64* %PC, align 8
- 142 \<badref\> = br label %block_400981
- 143 %99 = phi i64 [ %191, %block_40095f ], [ %.pre5, %block_40096a ]
- 144 %100 = phi i64 [ %176, %block_40095f ], [ %.pre4, %block_40096a ]
- 145 %MEMORY.0 = phi %struct.Memory* [ %2, %block_40095f ], [ %92, %block_40096a ]
- 146 %101 = add i64 %100, -16
- 147 %102 = add i64 %99, 4
- 148 store i64 %102, i64* %PC, align 8
- 149 %103 = inttoptr i64 %101 to i64*
- 150 %104 = load i64, i64* %103, align 8
- 151 store i64 %104, i64* %RAX, align 8
- 152 %105 = load i64, i64* %RSP, align 8
- 153 %106 = add i64 %105, 32
- 154 store i64 %106, i64* %RSP, align 8
- 155 %107 = icmp ugt i64 %105, -33
- 156 %108 = zext i1 %107 to i8
- 157 store i8 %108, i8* %14, align 1
- 158 %109 = trunc i64 %106 to i32
- 159 %110 = and i32 %109, 255
- 160 %111 = tail call i32 @llvm.ctpop.i32(i32 %110) #12
- 161 %112 = trunc i32 %111 to i8
- 162 %113 = and i8 %112, 1
- 163 %114 = xor i8 %113, 1
- 164 store i8 %114, i8* %21, align 1
- 165 %115 = xor i64 %106, %105
- 166 %116 = lshr i64 %115, 4
- 167 %117 = trunc i64 %116 to i8
- 168 %118 = and i8 %117, 1
- 169 store i8 %118, i8* %26, align 1
- 170 %119 = icmp eq i64 %106, 0
- 171 %120 = zext i1 %119 to i8
- 172 store i8 %120, i8* %29, align 1
- 173 %121 = lshr i64 %106, 63
- 174 %122 = trunc i64 %121 to i8
- 175 store i8 %122, i8* %32, align 1
- 176 %123 = lshr i64 %105, 63
- 177 %124 = xor i64 %121, %123
- 178 %125 = add nuw nsw i64 %124, %121
- 179 %126 = icmp eq i64 %125, 2
- 180 %127 = zext i1 %126 to i8
- 181 store i8 %127, i8* %38, align 1
- 182 %128 = add i64 %99, 9
- 183 store i64 %128, i64* %PC, align 8
- 184 %129 = add i64 %105, 40
- 185 %130 = inttoptr i64 %106 to i64*
- 186 %131 = load i64, i64* %130, align 8
- 187 store i64 %131, i64* %RBP, align 8
- 188 store i64 %129, i64* %RSP, align 8
- 189 %132 = add i64 %99, 10
- 190 store i64 %132, i64* %PC, align 8
- 191 %133 = inttoptr i64 %129 to i64*
- 192 %134 = load i64, i64* %133, align 8
- 193 store i64 %134, i64* %PC, align 8
- 194 %135 = add i64 %105, 48
- 195 store i64 %135, i64* %RSP, align 8
- 196 ret %struct.Memory* %MEMORY.0
- 197 %136 = add i64 %174, 4
- 198 store i64 %136, i64* %PC, align 8
- 199 %137 = load i32, i32* %53, align 4
- 200 %138 = sext i32 %137 to i64
- 201 store i64 %138, i64* %RAX, align 8
- 202 %139 = shl nsw i64 %138, 3
- 203 %140 = add i64 %139, ptrtoint (%tasktab_type* @tasktab to i64)
- 204 %141 = add i64 %174, 12
- 205 store i64 %141, i64* %PC, align 8
- 206 %142 = inttoptr i64 %140 to i64*
- 207 %143 = load i64, i64* %142, align 8
- 208 store i64 %143, i64* %RAX, align 8
- 209 %144 = add i64 %49, -16
- 210 %145 = add i64 %174, 16
- 211 store i64 %145, i64* %PC, align 8
- 212 %146 = inttoptr i64 %144 to i64*
- 213 store i64 %143, i64* %146, align 8
- 214 %.pre = load i64, i64* %RBP, align 8
- 215 %.pre3 = load i64, i64* %PC, align 8
- 216 \<badref\> = br label %block_40095f
- 217 %147 = add i64 %81, 4
- 218 store i64 %147, i64* %PC, align 8
- 219 %148 = load i32, i32* %53, align 4
- 220 %149 = sext i32 %148 to i64
- 221 store i64 %149, i64* %RAX, align 8
- 222 %150 = add nsw i64 %149, -10
- 223 %151 = icmp ult i32 %148, 10
- 224 %152 = zext i1 %151 to i8
- 225 store i8 %152, i8* %14, align 1
- 226 %153 = trunc i64 %150 to i32
- 227 %154 = and i32 %153, 255
- 228 %155 = tail call i32 @llvm.ctpop.i32(i32 %154) #12
- 229 %156 = trunc i32 %155 to i8
- 230 %157 = and i8 %156, 1
- 231 %158 = xor i8 %157, 1
- 232 store i8 %158, i8* %21, align 1
- 233 %159 = xor i64 %150, %149
- 234 %160 = lshr i64 %159, 4
- 235 %161 = trunc i64 %160 to i8
- 236 %162 = and i8 %161, 1
- 237 store i8 %162, i8* %26, align 1
- 238 %163 = icmp eq i64 %150, 0
- 239 %164 = zext i1 %163 to i8
- 240 store i8 %164, i8* %29, align 1
- 241 %165 = lshr i64 %150, 63
- 242 %166 = trunc i64 %165 to i8
- 243 store i8 %166, i8* %32, align 1
- 244 %167 = lshr i64 %149, 63
- 245 %168 = xor i64 %165, %167
- 246 %169 = add nuw nsw i64 %168, %167
- 247 %170 = icmp eq i64 %169, 2
- 248 %171 = zext i1 %170 to i8
- 249 store i8 %171, i8* %38, align 1
- 250 %172 = icmp ne i8 %166, 0
- 251 %173 = xor i1 %172, %170
- 252 %.demorgan6 = or i1 %163, %173
- 253 %.v8 = select i1 %.demorgan6, i64 14, i64 30
- 254 %174 = add i64 %81, %.v8
- 255 store i64 %174, i64* %PC, align 8
- 256 \<badref\> = br i1 %.demorgan6, label %block_40094f, label %block_40095f
- 257 %175 = phi i64 [ %174, %block_400941 ], [ %.pre3, %block_40094f ], [ %81, %block_400920 ]
- 258 %176 = phi i64 [ %49, %block_400941 ], [ %.pre, %block_40094f ], [ %49, %block_400920 ]
- 259 %177 = add i64 %176, -16
- 260 %178 = add i64 %175, 5
- 261 store i64 %178, i64* %PC, align 8
- 262 %179 = inttoptr i64 %177 to i64*
- 263 %180 = load i64, i64* %179, align 8
- 264 store i8 0, i8* %14, align 1
- 265 %181 = trunc i64 %180 to i32
- 266 %182 = and i32 %181, 255
- 267 %183 = tail call i32 @llvm.ctpop.i32(i32 %182) #12
- 268 %184 = trunc i32 %183 to i8
- 269 %185 = and i8 %184, 1
- 270 %186 = xor i8 %185, 1
- 271 store i8 %186, i8* %21, align 1
- 272 store i8 0, i8* %26, align 1
- 273 %187 = icmp eq i64 %180, 0
- 274 %188 = zext i1 %187 to i8
- 275 store i8 %188, i8* %29, align 1
- 276 %189 = lshr i64 %180, 63
- 277 %190 = trunc i64 %189 to i8
- 278 store i8 %190, i8* %32, align 1
- 279 store i8 0, i8* %38, align 1
- 280 %.v7 = select i1 %187, i64 11, i64 34
- 281 %191 = add i64 %175, %.v7
- 282 store i64 %191, i64* %PC, align 8
- 283 \<badref\> = br i1 %187, label %block_40096a, label %block_400981
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fa08ca3b400>, {0: {0}, 1: {47}, 2: {208, 65, 51}, 3: {208, 65, 51}, 4: {50}, 5: {208, 65, 51}, 6: {48, 198}, 7: {200}, 8: {48, 198}, 9: {5}, 10: {1}, 11: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 12: {3}, 13: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 14: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 15: {213, 7}, 16: {160, 225, 166, 8, 72, 204, 236, 176, 272, 214, 278, 56, 63}, 17: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 18: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 19: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 20: {12}, 21: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 22: {14}, 23: {33, 258, 133, 102, 267, 44, 76, 142, 15, 206, 243, 118, 91, 188}, 24: {16}, 25: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 26: {248, 129, 37, 261, 136, 80, 18, 179, 254, 21, 182, 87, 120, 245, 123, 28, 94, 191}, 27: {78, 19, 180, 246, 121}, 28: {122, 79, 20, 181, 247, 218}, 29: {248, 129, 37, 261, 136, 80, 18, 179, 254, 21, 182, 87, 120, 245, 123, 28, 94, 191}, 30: {130, 81, 22, 183, 88, 249, 124, 29, 255}, 31: {82, 23, 184, 250, 125}, 32: {24}, 33: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 34: {98, 99, 264, 41, 105, 139, 145, 84, 85, 26, 252, 127}, 35: {128, 27, 253, 86}, 36: {248, 129, 37, 261, 136, 80, 18, 179, 254, 21, 182, 87, 120, 245, 123, 28, 94, 191}, 37: {130, 81, 22, 183, 88, 249, 124, 29, 255}, 38: {30}, 39: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 40: {32, 257, 132, 104, 75, 144, 90, 187}, 41: {33, 258, 133, 102, 267, 44, 76, 142, 15, 206, 243, 118, 91, 188}, 42: {34}, 43: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 44: {36, 260, 135, 40, 263, 138, 190}, 45: {248, 129, 37, 261, 136, 80, 18, 179, 254, 21, 182, 87, 120, 245, 123, 28, 94, 191}, 46: {38}, 47: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 48: {36, 260, 135, 40, 263, 138, 190}, 49: {98, 99, 264, 41, 105, 139, 145, 84, 85, 26, 252, 127}, 50: {195, 100, 265, 42, 108, 140, 148, 157}, 51: {266, 43, 101, 141}, 52: {33, 258, 133, 102, 267, 44, 76, 142, 15, 206, 243, 118, 91, 188}, 53: {45}, 54: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 55: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 56: {52}, 57: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 58: {54}, 59: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 60: {160, 225, 166, 8, 72, 204, 236, 176, 272, 214, 278, 56, 63}, 61: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 62: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 63: {233, 59, 163, 173}, 64: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 65: {61}, 66: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 67: {160, 225, 166, 8, 72, 204, 236, 176, 272, 214, 278, 56, 63}, 68: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 69: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 70: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 71: {201, 68}, 72: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 73: {70, 223}, 74: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 75: {160, 225, 166, 8, 72, 204, 236, 176, 272, 214, 278, 56, 63}, 76: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 77: {74}, 78: {32, 257, 132, 104, 75, 144, 90, 187}, 79: {33, 258, 133, 102, 267, 44, 76, 142, 15, 206, 243, 118, 91, 188}, 80: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 81: {78, 19, 180, 246, 121}, 82: {122, 79, 20, 181, 247, 218}, 83: {248, 129, 37, 261, 136, 80, 18, 179, 254, 21, 182, 87, 120, 245, 123, 28, 94, 191}, 84: {130, 81, 22, 183, 88, 249, 124, 29, 255}, 85: {82, 23, 184, 250, 125}, 86: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 87: {98, 99, 264, 41, 105, 139, 145, 84, 85, 26, 252, 127}, 88: {98, 99, 264, 41, 105, 139, 145, 84, 85, 26, 252, 127}, 89: {128, 27, 253, 86}, 90: {248, 129, 37, 261, 136, 80, 18, 179, 254, 21, 182, 87, 120, 245, 123, 28, 94, 191}, 91: {130, 81, 22, 183, 88, 249, 124, 29, 255}, 92: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 93: {32, 257, 132, 104, 75, 144, 90, 187}, 94: {33, 258, 133, 102, 267, 44, 76, 142, 15, 206, 243, 118, 91, 188}, 95: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 96: {96, 97, 93}, 97: {248, 129, 37, 261, 136, 80, 18, 179, 254, 21, 182, 87, 120, 245, 123, 28, 94, 191}, 98: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 99: {96, 97, 93}, 100: {96, 97, 93}, 101: {98, 99, 264, 41, 105, 139, 145, 84, 85, 26, 252, 127}, 102: {98, 99, 264, 41, 105, 139, 145, 84, 85, 26, 252, 127}, 103: {195, 100, 265, 42, 108, 140, 148, 157}, 104: {266, 43, 101, 141}, 105: {33, 258, 133, 102, 267, 44, 76, 142, 15, 206, 243, 118, 91, 188}, 106: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 107: {32, 257, 132, 104, 75, 144, 90, 187}, 108: {98, 99, 264, 41, 105, 139, 145, 84, 85, 26, 252, 127}, 109: {106, 146}, 110: {107}, 111: {195, 100, 265, 42, 108, 140, 148, 157}, 112: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 113: {150, 197, 110}, 114: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 115: {201, 68}, 116: {202}, 117: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 118: {160, 225, 166, 8, 72, 204, 236, 176, 272, 214, 278, 56, 63}, 119: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 120: {33, 258, 133, 102, 267, 44, 76, 142, 15, 206, 243, 118, 91, 188}, 121: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 122: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 123: {210}, 124: {211}, 125: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 126: {213, 7}, 127: {160, 225, 166, 8, 72, 204, 236, 176, 272, 214, 278, 56, 63}, 128: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 129: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 130: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 131: {122, 79, 20, 181, 247, 218}, 132: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 133: {220}, 134: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 135: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 136: {70, 223}, 137: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 138: {160, 225, 166, 8, 72, 204, 236, 176, 272, 214, 278, 56, 63}, 139: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 140: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 141: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 142: {170, 229}, 143: {232, 230, 231}, 144: {232, 230, 231}, 145: {232, 230, 231}, 146: {233, 59, 163, 173}, 147: {151, 234, 111}, 148: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 149: {160, 225, 166, 8, 72, 204, 236, 176, 272, 214, 278, 56, 63}, 150: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 151: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 152: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 153: {240}, 154: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 155: {242}, 156: {33, 258, 133, 102, 267, 44, 76, 142, 15, 206, 243, 118, 91, 188}, 157: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 158: {248, 129, 37, 261, 136, 80, 18, 179, 254, 21, 182, 87, 120, 245, 123, 28, 94, 191}, 159: {78, 19, 180, 246, 121}, 160: {122, 79, 20, 181, 247, 218}, 161: {248, 129, 37, 261, 136, 80, 18, 179, 254, 21, 182, 87, 120, 245, 123, 28, 94, 191}, 162: {130, 81, 22, 183, 88, 249, 124, 29, 255}, 163: {82, 23, 184, 250, 125}, 164: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 165: {98, 99, 264, 41, 105, 139, 145, 84, 85, 26, 252, 127}, 166: {128, 27, 253, 86}, 167: {248, 129, 37, 261, 136, 80, 18, 179, 254, 21, 182, 87, 120, 245, 123, 28, 94, 191}, 168: {130, 81, 22, 183, 88, 249, 124, 29, 255}, 169: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 170: {32, 257, 132, 104, 75, 144, 90, 187}, 171: {33, 258, 133, 102, 267, 44, 76, 142, 15, 206, 243, 118, 91, 188}, 172: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 173: {36, 260, 135, 40, 263, 138, 190}, 174: {248, 129, 37, 261, 136, 80, 18, 179, 254, 21, 182, 87, 120, 245, 123, 28, 94, 191}, 175: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 176: {36, 260, 135, 40, 263, 138, 190}, 177: {98, 99, 264, 41, 105, 139, 145, 84, 85, 26, 252, 127}, 178: {195, 100, 265, 42, 108, 140, 148, 157}, 179: {266, 43, 101, 141}, 180: {33, 258, 133, 102, 267, 44, 76, 142, 15, 206, 243, 118, 91, 188}, 181: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 182: {269}, 183: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 184: {271}, 185: {160, 225, 166, 8, 72, 204, 236, 176, 272, 214, 278, 56, 63}, 186: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 187: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 188: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 189: {276}, 190: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 191: {160, 225, 166, 8, 72, 204, 236, 176, 272, 214, 278, 56, 63}, 192: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 193: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 194: {281}, 195: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 196: {283}, 197: {151, 234, 111}, 198: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 199: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 200: {114, 154}, 201: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 202: {156}, 203: {195, 100, 265, 42, 108, 140, 148, 157}, 204: {158}, 205: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 206: {160, 225, 166, 8, 72, 204, 236, 176, 272, 214, 278, 56, 63}, 207: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 208: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 209: {233, 59, 163, 173}, 210: {164}, 211: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 212: {160, 225, 166, 8, 72, 204, 236, 176, 272, 214, 278, 56, 63}, 213: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 214: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 215: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 216: {170, 229}, 217: {151, 234, 111}, 218: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 219: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 220: {114, 154}, 221: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 222: {116}, 223: {117}, 224: {33, 258, 133, 102, 267, 44, 76, 142, 15, 206, 243, 118, 91, 188}, 225: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 226: {248, 129, 37, 261, 136, 80, 18, 179, 254, 21, 182, 87, 120, 245, 123, 28, 94, 191}, 227: {78, 19, 180, 246, 121}, 228: {122, 79, 20, 181, 247, 218}, 229: {248, 129, 37, 261, 136, 80, 18, 179, 254, 21, 182, 87, 120, 245, 123, 28, 94, 191}, 230: {130, 81, 22, 183, 88, 249, 124, 29, 255}, 231: {82, 23, 184, 250, 125}, 232: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 233: {98, 99, 264, 41, 105, 139, 145, 84, 85, 26, 252, 127}, 234: {128, 27, 253, 86}, 235: {248, 129, 37, 261, 136, 80, 18, 179, 254, 21, 182, 87, 120, 245, 123, 28, 94, 191}, 236: {130, 81, 22, 183, 88, 249, 124, 29, 255}, 237: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 238: {32, 257, 132, 104, 75, 144, 90, 187}, 239: {33, 258, 133, 102, 267, 44, 76, 142, 15, 206, 243, 118, 91, 188}, 240: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 241: {36, 260, 135, 40, 263, 138, 190}, 242: {248, 129, 37, 261, 136, 80, 18, 179, 254, 21, 182, 87, 120, 245, 123, 28, 94, 191}, 243: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 244: {36, 260, 135, 40, 263, 138, 190}, 245: {98, 99, 264, 41, 105, 139, 145, 84, 85, 26, 252, 127}, 246: {195, 100, 265, 42, 108, 140, 148, 157}, 247: {266, 43, 101, 141}, 248: {33, 258, 133, 102, 267, 44, 76, 142, 15, 206, 243, 118, 91, 188}, 249: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 250: {32, 257, 132, 104, 75, 144, 90, 187}, 251: {98, 99, 264, 41, 105, 139, 145, 84, 85, 26, 252, 127}, 252: {106, 146}, 253: {147}, 254: {195, 100, 265, 42, 108, 140, 148, 157}, 255: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 256: {150, 197, 110}, 257: {171, 172}, 258: {171, 172}, 259: {233, 59, 163, 173}, 260: {174}, 261: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 262: {160, 225, 166, 8, 72, 204, 236, 176, 272, 214, 278, 56, 63}, 263: {2, 6, 10, 273, 279, 153, 161, 168, 169, 177, 53, 58, 60, 66, 67, 69, 73, 205, 212, 219, 221, 222, 227, 228, 237, 239, 113}, 264: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 265: {248, 129, 37, 261, 136, 80, 18, 179, 254, 21, 182, 87, 120, 245, 123, 28, 94, 191}, 266: {78, 19, 180, 246, 121}, 267: {122, 79, 20, 181, 247, 218}, 268: {248, 129, 37, 261, 136, 80, 18, 179, 254, 21, 182, 87, 120, 245, 123, 28, 94, 191}, 269: {130, 81, 22, 183, 88, 249, 124, 29, 255}, 270: {82, 23, 184, 250, 125}, 271: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 272: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 273: {32, 257, 132, 104, 75, 144, 90, 187}, 274: {33, 258, 133, 102, 267, 44, 76, 142, 15, 206, 243, 118, 91, 188}, 275: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 276: {36, 260, 135, 40, 263, 138, 190}, 277: {248, 129, 37, 261, 136, 80, 18, 179, 254, 21, 182, 87, 120, 245, 123, 28, 94, 191}, 278: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 279: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 280: {194}, 281: {195, 100, 265, 42, 108, 140, 148, 157}, 282: {256, 131, 4, 259, 134, 262, 9, 137, 11, 268, 13, 270, 143, 17, 274, 275, 149, 277, 152, 25, 280, 155, 282, 31, 159, 162, 35, 165, 39, 167, 46, 175, 49, 178, 55, 57, 185, 186, 189, 62, 64, 192, 193, 196, 71, 199, 203, 77, 207, 209, 83, 215, 216, 89, 217, 92, 95, 224, 226, 103, 235, 109, 238, 112, 241, 115, 244, 119, 251, 126}, 283: {150, 197, 110}})
Equivalent! frozenset({69, 222}) {72, 135}
Equivalent! frozenset({70, 223}) {136, 73}
Equivalent! frozenset({224, 71}) {137, 74}
Equivalent! frozenset({170, 229}) {216, 142}
Equivalent! frozenset({153, 113}) {219, 199}
Equivalent! frozenset({154, 114}) {200, 220}
Equivalent! frozenset({115, 155}) {201, 221}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fa08ca3b400>, {0: {0}, 1: {47}, 2: {208}, 3: {65}, 4: {50}, 5: {51}, 6: {48}, 7: {200}, 8: {198}, 9: {5}, 10: {1}, 11: {2}, 12: {3}, 13: {4}, 14: {6}, 15: {7}, 16: {8}, 17: {9}, 18: {10}, 19: {11}, 20: {12}, 21: {13}, 22: {14}, 23: {15}, 24: {16}, 25: {17}, 26: {18}, 27: {19}, 28: {20}, 29: {21}, 30: {22}, 31: {23}, 32: {24}, 33: {25}, 34: {26}, 35: {27}, 36: {28}, 37: {29}, 38: {30}, 39: {31}, 40: {32}, 41: {33}, 42: {34}, 43: {35}, 44: {36}, 45: {37}, 46: {38}, 47: {39}, 48: {40}, 49: {41}, 50: {42}, 51: {43}, 52: {44}, 53: {45}, 54: {46}, 55: {162, 238, 49, 115, 155}, 56: {52}, 57: {53}, 58: {54}, 59: {55}, 60: {56}, 61: {57}, 62: {58, 67}, 63: {59, 163}, 64: {60}, 65: {61}, 66: {62}, 67: {166, 63}, 68: {64, 167}, 69: {66}, 70: {168, 67}, 71: {68}, 72: {69}, 73: {223}, 74: {71}, 75: {72}, 76: {73}, 77: {74}, 78: {75}, 79: {76}, 80: {77}, 81: {78}, 82: {79}, 83: {80}, 84: {81}, 85: {82}, 86: {83}, 87: {84}, 88: {85}, 89: {86}, 90: {87}, 91: {88}, 92: {89}, 93: {90}, 94: {91}, 95: {92}, 96: {93}, 97: {94}, 98: {95}, 99: {96}, 100: {97}, 101: {98}, 102: {99}, 103: {100}, 104: {101}, 105: {102}, 106: {103}, 107: {104}, 108: {105}, 109: {106}, 110: {107}, 111: {108}, 112: {109}, 113: {110}, 114: {199}, 115: {201}, 116: {202}, 117: {203}, 118: {204}, 119: {205}, 120: {206}, 121: {207}, 122: {209}, 123: {210}, 124: {211}, 125: {212}, 126: {213}, 127: {214}, 128: {215}, 129: {216}, 130: {217}, 131: {218}, 132: {219}, 133: {220}, 134: {221}, 135: {222}, 136: {70}, 137: {224}, 138: {225}, 139: {226}, 140: {227}, 141: {228}, 142: {229}, 143: {230}, 144: {231}, 145: {232}, 146: {233}, 147: {234}, 148: {235}, 149: {236}, 150: {237}, 151: {238}, 152: {239}, 153: {240}, 154: {241}, 155: {242}, 156: {243}, 157: {244}, 158: {245}, 159: {246}, 160: {247}, 161: {248}, 162: {249}, 163: {250}, 164: {251}, 165: {252}, 166: {253}, 167: {254}, 168: {255}, 169: {256}, 170: {257}, 171: {258}, 172: {259}, 173: {260}, 174: {261}, 175: {262}, 176: {263}, 177: {264}, 178: {265}, 179: {266}, 180: {267}, 181: {268}, 182: {269}, 183: {270}, 184: {271}, 185: {272}, 186: {273}, 187: {274}, 188: {275}, 189: {276}, 190: {277}, 191: {278}, 192: {279}, 193: {280}, 194: {281}, 195: {282}, 196: {283}, 197: {151}, 198: {152}, 199: {113}, 200: {154}, 201: {115}, 202: {156}, 203: {157}, 204: {158}, 205: {159}, 206: {160}, 207: {161}, 208: {162}, 209: {163}, 210: {164}, 211: {165}, 212: {166}, 213: {167}, 214: {168, 67}, 215: {169}, 216: {170}, 217: {111}, 218: {112}, 219: {153}, 220: {114}, 221: {155}, 222: {116}, 223: {117}, 224: {118}, 225: {119}, 226: {120}, 227: {121}, 228: {122}, 229: {123}, 230: {124}, 231: {125}, 232: {126}, 233: {127}, 234: {128}, 235: {129}, 236: {130}, 237: {131}, 238: {132}, 239: {133}, 240: {134}, 241: {135}, 242: {136}, 243: {137}, 244: {138}, 245: {139}, 246: {140}, 247: {141}, 248: {142}, 249: {143}, 250: {144}, 251: {145}, 252: {146}, 253: {147}, 254: {148}, 255: {149}, 256: {150}, 257: {171}, 258: {172}, 259: {173}, 260: {174}, 261: {175}, 262: {176}, 263: {177}, 264: {77, 17, 178, 244, 119}, 265: {179}, 266: {180}, 267: {181}, 268: {182}, 269: {183}, 270: {184}, 271: {185}, 272: {256, 131, 89, 186, 31}, 273: {187}, 274: {188}, 275: {189}, 276: {190}, 277: {191}, 278: {192}, 279: {193, 103, 268, 46, 143}, 280: {194}, 281: {195}, 282: {196}, 283: {197}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 bitcast bitcast
EXACT 4 getelementptr getelementptr
EXACT 5 bitcast bitcast
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 load load
EXACT 12 add add
EXACT 13 store store
EXACT 14 load load
EXACT 15 add add
EXACT 16 inttoptr inttoptr
EXACT 17 store store
EXACT 18 load load
EXACT 19 store store
EXACT 20 add add
EXACT 21 store store
EXACT 22 icmp icmp
EXACT 23 zext zext
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 trunc trunc
EXACT 27 and and
EXACT 28 tail tail
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 xor xor
EXACT 32 getelementptr getelementptr
EXACT 33 store store
EXACT 34 xor xor
EXACT 35 lshr lshr
EXACT 36 trunc trunc
EXACT 37 and and
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 icmp icmp
EXACT 41 zext zext
EXACT 42 getelementptr getelementptr
EXACT 43 store store
EXACT 44 lshr lshr
EXACT 45 trunc trunc
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 lshr lshr
EXACT 49 xor xor
EXACT 50 add add
EXACT 51 icmp icmp
EXACT 52 zext zext
EXACT 53 getelementptr getelementptr
EXACT 54 store store
MORE 55 POT: 5
EXACT 56 add add
EXACT 57 load load
EXACT 58 add add
EXACT 59 store store
EXACT 60 inttoptr inttoptr
EXACT 61 store store
MORE 62 POT: 2
MORE 63 POT: 2
EXACT 64 load load
EXACT 65 add add
EXACT 66 store store
MORE 67 POT: 2
MORE 68 POT: 2
EXACT 69 load load
MORE 70 POT: 2
EXACT 71 add add
EXACT 72 load load
EXACT 73 add add
EXACT 74 store store
EXACT 75 inttoptr inttoptr
EXACT 76 load load
EXACT 77 sub sub
EXACT 78 icmp icmp
EXACT 79 zext zext
EXACT 80 store store
EXACT 81 and and
EXACT 82 tail tail
EXACT 83 trunc trunc
EXACT 84 and and
EXACT 85 xor xor
EXACT 86 store store
EXACT 87 xor xor
EXACT 88 xor xor
EXACT 89 lshr lshr
EXACT 90 trunc trunc
EXACT 91 and and
EXACT 92 store store
EXACT 93 icmp icmp
EXACT 94 zext zext
EXACT 95 store store
EXACT 96 lshr lshr
EXACT 97 trunc trunc
EXACT 98 store store
EXACT 99 lshr lshr
EXACT 100 lshr lshr
EXACT 101 xor xor
EXACT 102 xor xor
EXACT 103 add add
EXACT 104 icmp icmp
EXACT 105 zext zext
EXACT 106 store store
EXACT 107 icmp icmp
EXACT 108 xor xor
EXACT 109 or or
EXACT 110 select select
EXACT 111 add add
EXACT 112 store store
EXACT 113 br br
EXACT 114 store store
EXACT 115 add add
EXACT 116 add add
EXACT 117 store store
EXACT 118 inttoptr inttoptr
EXACT 119 load load
EXACT 120 zext zext
EXACT 121 store store
EXACT 122 store store
EXACT 123 add add
EXACT 124 add add
EXACT 125 load load
EXACT 126 add add
EXACT 127 inttoptr inttoptr
EXACT 128 store store
EXACT 129 store store
EXACT 130 store store
EXACT 131 tail tail
EXACT 132 load load
EXACT 133 add add
EXACT 134 load load
EXACT 135 load load
EXACT 136 add add
EXACT 137 store store
EXACT 138 inttoptr inttoptr
EXACT 139 store store
EXACT 140 load load
EXACT 141 load load
EXACT 142 br br
EXACT 143 phi phi
EXACT 144 phi phi
EXACT 145 phi phi
EXACT 146 add add
EXACT 147 add add
EXACT 148 store store
EXACT 149 inttoptr inttoptr
EXACT 150 load load
EXACT 151 store store
EXACT 152 load load
EXACT 153 add add
EXACT 154 store store
EXACT 155 icmp icmp
EXACT 156 zext zext
EXACT 157 store store
EXACT 158 trunc trunc
EXACT 159 and and
EXACT 160 tail tail
EXACT 161 trunc trunc
EXACT 162 and and
EXACT 163 xor xor
EXACT 164 store store
EXACT 165 xor xor
EXACT 166 lshr lshr
EXACT 167 trunc trunc
EXACT 168 and and
EXACT 169 store store
EXACT 170 icmp icmp
EXACT 171 zext zext
EXACT 172 store store
EXACT 173 lshr lshr
EXACT 174 trunc trunc
EXACT 175 store store
EXACT 176 lshr lshr
EXACT 177 xor xor
EXACT 178 add add
EXACT 179 icmp icmp
EXACT 180 zext zext
EXACT 181 store store
EXACT 182 add add
EXACT 183 store store
EXACT 184 add add
EXACT 185 inttoptr inttoptr
EXACT 186 load load
EXACT 187 store store
EXACT 188 store store
EXACT 189 add add
EXACT 190 store store
EXACT 191 inttoptr inttoptr
EXACT 192 load load
EXACT 193 store store
EXACT 194 add add
EXACT 195 store store
EXACT 196 ret ret
EXACT 197 add add
EXACT 198 store store
EXACT 199 load load
EXACT 200 sext sext
EXACT 201 store store
EXACT 202 shl shl
EXACT 203 add add
EXACT 204 add add
EXACT 205 store store
EXACT 206 inttoptr inttoptr
EXACT 207 load load
EXACT 208 store store
EXACT 209 add add
EXACT 210 add add
EXACT 211 store store
EXACT 212 inttoptr inttoptr
EXACT 213 store store
MORE 214 POT: 2
EXACT 215 load load
EXACT 216 br br
EXACT 217 add add
EXACT 218 store store
EXACT 219 load load
EXACT 220 sext sext
EXACT 221 store store
EXACT 222 add add
EXACT 223 icmp icmp
EXACT 224 zext zext
EXACT 225 store store
EXACT 226 trunc trunc
EXACT 227 and and
EXACT 228 tail tail
EXACT 229 trunc trunc
EXACT 230 and and
EXACT 231 xor xor
EXACT 232 store store
EXACT 233 xor xor
EXACT 234 lshr lshr
EXACT 235 trunc trunc
EXACT 236 and and
EXACT 237 store store
EXACT 238 icmp icmp
EXACT 239 zext zext
EXACT 240 store store
EXACT 241 lshr lshr
EXACT 242 trunc trunc
EXACT 243 store store
EXACT 244 lshr lshr
EXACT 245 xor xor
EXACT 246 add add
EXACT 247 icmp icmp
EXACT 248 zext zext
EXACT 249 store store
EXACT 250 icmp icmp
EXACT 251 xor xor
EXACT 252 or or
EXACT 253 select select
EXACT 254 add add
EXACT 255 store store
EXACT 256 br br
EXACT 257 phi phi
EXACT 258 phi phi
EXACT 259 add add
EXACT 260 add add
EXACT 261 store store
EXACT 262 inttoptr inttoptr
EXACT 263 load load
MORE 264 POT: 5
EXACT 265 trunc trunc
EXACT 266 and and
EXACT 267 tail tail
EXACT 268 trunc trunc
EXACT 269 and and
EXACT 270 xor xor
EXACT 271 store store
MORE 272 POT: 5
EXACT 273 icmp icmp
EXACT 274 zext zext
EXACT 275 store store
EXACT 276 lshr lshr
EXACT 277 trunc trunc
EXACT 278 store store
MORE 279 POT: 5
EXACT 280 select select
EXACT 281 add add
EXACT 282 store store
EXACT 283 br br
FP: 63 1.0 False
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', 'store i8 %37, i8* %38, align 1', '%40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i = bitcast %union.anon* %40 to i32*', '%41 = add i64 %7, -12', '%42 = load i32, i32* %EDI.i, align 4', '%43 = add i64 %10, 15', 'store i64 %43, i64* %3, align 8', '%44 = inttoptr i64 %41 to i32*', 'store i32 %42, i32* %44, align 4', '%47 = load i64, i64* %3, align 8', '%48 = add i64 %47, 8', 'store i64 %48, i64* %3, align 8', '%53 = load i64, i64* %3, align 8', '%54 = add i64 %53, 3', 'store i64 %54, i64* %3, align 8', '%58 = icmp ult i32 %50, %56', '%59 = zext i1 %58 to i8', 'store i8 %59, i8* %14, align 1', '%60 = and i32 %57, 255', '%61 = tail call i32 @llvm.ctpop.i32(i32 %60)', '%62 = trunc i32 %61 to i8', '%63 = and i8 %62, 1', '%64 = xor i8 %63, 1', 'store i8 %64, i8* %21, align 1', '%65 = xor i32 %56, %50', '%66 = xor i32 %65, %57', '%67 = lshr i32 %66, 4', '%68 = trunc i32 %67 to i8', '%69 = and i8 %68, 1', 'store i8 %69, i8* %26, align 1', '%71 = zext i1 %70 to i8', 'store i8 %71, i8* %29, align 1', 'store i8 %73, i8* %32, align 1', '%80 = zext i1 %79 to i8', 'store i8 %80, i8* %38, align 1', '%.v = select i1 %.demorgan, i64 9, i64 39', '%83 = add i64 %53, %.v', 'store i64 %83, i64* %3, align 8', '%84 = add i64 %83, 4', 'store i64 %84, i64* %3, align 8', 'store i64 %86, i64* %RAX.i43, align 8', '%88 = icmp ult i32 %85, 10', '%89 = zext i1 %88 to i8', 'store i8 %89, i8* %14, align 1', '%90 = trunc i64 %87 to i32', '%91 = and i32 %90, 255', '%92 = tail call i32 @llvm.ctpop.i32(i32 %91)', '%93 = trunc i32 %92 to i8', '%94 = and i8 %93, 1', '%95 = xor i8 %94, 1', 'store i8 %95, i8* %21, align 1', '%96 = xor i64 %87, %86', '%97 = lshr i64 %96, 4', '%98 = trunc i64 %97 to i8', '%99 = and i8 %98, 1', 'store i8 %99, i8* %26, align 1', '%101 = zext i1 %100 to i8', 'store i8 %101, i8* %29, align 1', 'store i8 %103, i8* %32, align 1', '%108 = zext i1 %107 to i8', 'store i8 %108, i8* %38, align 1', '%.v8 = select i1 %.demorgan6, i64 14, i64 30', '%111 = add i64 %83, %.v8', 'store i64 %111, i64* %3, align 8', '%112 = add i64 %111, 4', 'store i64 %112, i64* %3, align 8', '%113 = load i32, i32* %55, align 4', '%114 = sext i32 %113 to i64', 'store i64 %114, i64* %RAX.i43, align 8', '%115 = shl nsw i64 %114, 3', '%116 = add i64 %115, ptrtoint (%G_0x602070___rax_8__type* @G_0x602070___rax_8_ to i64)', '%117 = add i64 %111, 12', 'store i64 %117, i64* %3, align 8', '%118 = inttoptr i64 %116 to i64*', '%119 = load i64, i64* %118, align 8', 'store i64 %119, i64* %RAX.i43, align 8', '%120 = add i64 %51, -16', '%121 = add i64 %111, 16', 'store i64 %121, i64* %3, align 8', '%122 = inttoptr i64 %120 to i64*', 'store i64 %119, i64* %122, align 8', '%.pre3 = load i64, i64* %3, align 8', '%123 = phi i64 [ %.pre3, %block_40094f ], [ %111, %block_400941 ], [ %83, %entry ]', '%126 = add i64 %123, 5', 'store i64 %126, i64* %3, align 8', '%129 = trunc i64 %128 to i32', '%130 = and i32 %129, 255', '%131 = tail call i32 @llvm.ctpop.i32(i32 %130)', '%132 = trunc i32 %131 to i8', '%133 = and i8 %132, 1', '%134 = xor i8 %133, 1', 'store i8 %134, i8* %21, align 1', '%136 = zext i1 %135 to i8', 'store i8 %136, i8* %29, align 1', '%137 = lshr i64 %128, 63', '%138 = trunc i64 %137 to i8', 'store i8 %138, i8* %32, align 1', '%.v7 = select i1 %135, i64 11, i64 34', '%139 = add i64 %123, %.v7', 'store i64 %139, i64* %3, align 8', '%RDI.i = getelementptr inbounds %union.anon, %union.anon* %40, i64 0, i32 0', 'store i64 ptrtoint (%G__0x401257_type* @G__0x401257 to i64), i64* %RDI.i, align 8', '%RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%140 = add i64 %124, -4', '%141 = add i64 %139, 13', 'store i64 %141, i64* %3, align 8', '%142 = inttoptr i64 %140 to i32*', '%143 = load i32, i32* %142, align 4', '%144 = zext i32 %143 to i64', 'store i64 %144, i64* %RSI.i, align 8', '%AL.i = bitcast %union.anon* %39 to i8*', 'store i8 0, i8* %AL.i, align 1', '%145 = add i64 %139, -1306', '%146 = add i64 %139, 20', '%147 = load i64, i64* %6, align 8', '%148 = add i64 %147, -8', '%149 = inttoptr i64 %148 to i64*', 'store i64 %146, i64* %149, align 8', 'store i64 %148, i64* %6, align 8', 'store i64 %145, i64* %3, align 8', '%150 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)', '%151 = load i64, i64* %RBP.i, align 8', '%152 = add i64 %151, -20', '%153 = load i32, i32* %EAX.i36, align 4', '%154 = load i64, i64* %3, align 8', '%155 = add i64 %154, 3', 'store i64 %155, i64* %3, align 8', '%156 = inttoptr i64 %152 to i32*', 'store i32 %153, i32* %156, align 4', '%.pre4 = load i64, i64* %RBP.i, align 8', '%.pre5 = load i64, i64* %3, align 8', '%157 = phi i64 [ %139, %block_.L_40095f ], [ %.pre5, %block_40096a ]', '%158 = phi i64 [ %124, %block_.L_40095f ], [ %.pre4, %block_40096a ]', '%MEMORY.1 = phi %struct.Memory* [ %2, %block_.L_40095f ], [ %150, %block_40096a ]', '%159 = add i64 %158, -16', '%160 = add i64 %157, 4', 'store i64 %160, i64* %3, align 8', '%161 = inttoptr i64 %159 to i64*', '%162 = load i64, i64* %161, align 8', 'store i64 %162, i64* %RAX.i43, align 8', '%163 = load i64, i64* %6, align 8', '%164 = add i64 %163, 32', 'store i64 %164, i64* %6, align 8', '%165 = icmp ugt i64 %163, -33', '%166 = zext i1 %165 to i8', 'store i8 %166, i8* %14, align 1', '%167 = trunc i64 %164 to i32', '%168 = and i32 %167, 255', '%169 = tail call i32 @llvm.ctpop.i32(i32 %168)', '%170 = trunc i32 %169 to i8', '%171 = and i8 %170, 1', '%172 = xor i8 %171, 1', 'store i8 %172, i8* %21, align 1', '%173 = xor i64 %164, %163', '%174 = lshr i64 %173, 4', '%175 = trunc i64 %174 to i8', '%176 = and i8 %175, 1', 'store i8 %176, i8* %26, align 1', '%177 = icmp eq i64 %164, 0', '%178 = zext i1 %177 to i8', 'store i8 %178, i8* %29, align 1', '%179 = lshr i64 %164, 63', '%180 = trunc i64 %179 to i8', 'store i8 %180, i8* %32, align 1', '%181 = lshr i64 %163, 63', '%182 = xor i64 %179, %181', '%183 = add nuw nsw i64 %182, %179', '%184 = icmp eq i64 %183, 2', '%185 = zext i1 %184 to i8', 'store i8 %185, i8* %38, align 1', '%186 = add i64 %157, 9', 'store i64 %186, i64* %3, align 8', '%187 = add i64 %163, 40', '%188 = inttoptr i64 %164 to i64*', '%189 = load i64, i64* %188, align 8', 'store i64 %189, i64* %RBP.i, align 8', 'store i64 %187, i64* %6, align 8', '%190 = add i64 %157, 10', 'store i64 %190, i64* %3, align 8', '%191 = inttoptr i64 %187 to i64*', '%192 = load i64, i64* %191, align 8', 'store i64 %192, i64* %3, align 8', '%193 = add i64 %163, 48', 'store i64 %193, i64* %6, align 8', 'ret %struct.Memory* %MEMORY.1'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Keep: %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Keep: %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Keep: %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Keep: %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %RAX.i43 = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0
Keep: store i64 1, i64* %RAX.i43, align 8
Found line to remove! %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i = bitcast %union.anon* %40 to i32*
Found line to remove! %41 = add i64 %7, -12
Found line to remove! %42 = load i32, i32* %EDI.i, align 4
Found line to remove! %43 = add i64 %10, 15
Found line to remove! store i64 %43, i64* %3, align 8
Found line to remove! %44 = inttoptr i64 %41 to i32*
Found line to remove! store i32 %42, i32* %44, align 4
Keep: %45 = load i64, i64* %RBP.i, align 8
Keep: %46 = add i64 %45, -16
Found line to remove! %47 = load i64, i64* %3, align 8
Found line to remove! %48 = add i64 %47, 8
Found line to remove! store i64 %48, i64* %3, align 8
Keep: %49 = inttoptr i64 %46 to i64*
Keep: store i64 0, i64* %49, align 8
Keep: %EAX.i36 = bitcast %union.anon* %39 to i32*
Keep: %50 = load i32, i32* %EAX.i36, align 4
Keep: %51 = load i64, i64* %RBP.i, align 8
Keep: %52 = add i64 %51, -4
Found line to remove! %53 = load i64, i64* %3, align 8
Found line to remove! %54 = add i64 %53, 3
Found line to remove! store i64 %54, i64* %3, align 8
Keep: %55 = inttoptr i64 %52 to i32*
Keep: %56 = load i32, i32* %55, align 4
Keep: %57 = sub i32 %50, %56
Found line to remove! %58 = icmp ult i32 %50, %56
Found line to remove! %59 = zext i1 %58 to i8
Found line to remove! store i8 %59, i8* %14, align 1
Found line to remove! %60 = and i32 %57, 255
Found line to remove! %61 = tail call i32 @llvm.ctpop.i32(i32 %60)
Found line to remove! %62 = trunc i32 %61 to i8
Found line to remove! %63 = and i8 %62, 1
Found line to remove! %64 = xor i8 %63, 1
Found line to remove! store i8 %64, i8* %21, align 1
Found line to remove! %65 = xor i32 %56, %50
Found line to remove! %66 = xor i32 %65, %57
Found line to remove! %67 = lshr i32 %66, 4
Found line to remove! %68 = trunc i32 %67 to i8
Found line to remove! %69 = and i8 %68, 1
Found line to remove! store i8 %69, i8* %26, align 1
Keep: %70 = icmp eq i32 %57, 0
Found line to remove! %71 = zext i1 %70 to i8
Found line to remove! store i8 %71, i8* %29, align 1
Keep: %72 = lshr i32 %57, 31
Keep: %73 = trunc i32 %72 to i8
Found line to remove! store i8 %73, i8* %32, align 1
Keep: %74 = lshr i32 %50, 31
Keep: %75 = lshr i32 %56, 31
Keep: %76 = xor i32 %75, %74
Keep: %77 = xor i32 %72, %74
Keep: %78 = add nuw nsw i32 %77, %76
Keep: %79 = icmp eq i32 %78, 2
Found line to remove! %80 = zext i1 %79 to i8
Found line to remove! store i8 %80, i8* %38, align 1
Keep: %81 = icmp ne i8 %73, 0
Keep: %82 = xor i1 %81, %79
Keep: %.demorgan = or i1 %70, %82
Found line to remove! %.v = select i1 %.demorgan, i64 9, i64 39
Found line to remove! %83 = add i64 %53, %.v
Found line to remove! store i64 %83, i64* %3, align 8
Keep: br i1 %.demorgan, label %block_400941, label %block_.L_40095f
Keep: 
Keep: block_400941:                                     ; preds = %entry
Found line to remove! %84 = add i64 %83, 4
Found line to remove! store i64 %84, i64* %3, align 8
Keep: %85 = load i32, i32* %55, align 4
Keep: %86 = sext i32 %85 to i64
Found line to remove! store i64 %86, i64* %RAX.i43, align 8
Keep: %87 = add nsw i64 %86, -10
Found line to remove! %88 = icmp ult i32 %85, 10
Found line to remove! %89 = zext i1 %88 to i8
Found line to remove! store i8 %89, i8* %14, align 1
Found line to remove! %90 = trunc i64 %87 to i32
Found line to remove! %91 = and i32 %90, 255
Found line to remove! %92 = tail call i32 @llvm.ctpop.i32(i32 %91)
Found line to remove! %93 = trunc i32 %92 to i8
Found line to remove! %94 = and i8 %93, 1
Found line to remove! %95 = xor i8 %94, 1
Found line to remove! store i8 %95, i8* %21, align 1
Found line to remove! %96 = xor i64 %87, %86
Found line to remove! %97 = lshr i64 %96, 4
Found line to remove! %98 = trunc i64 %97 to i8
Found line to remove! %99 = and i8 %98, 1
Found line to remove! store i8 %99, i8* %26, align 1
Keep: %100 = icmp eq i64 %87, 0
Found line to remove! %101 = zext i1 %100 to i8
Found line to remove! store i8 %101, i8* %29, align 1
Keep: %102 = lshr i64 %87, 63
Keep: %103 = trunc i64 %102 to i8
Found line to remove! store i8 %103, i8* %32, align 1
Keep: %104 = lshr i64 %86, 63
Keep: %105 = xor i64 %102, %104
Keep: %106 = add nuw nsw i64 %105, %104
Keep: %107 = icmp eq i64 %106, 2
Found line to remove! %108 = zext i1 %107 to i8
Found line to remove! store i8 %108, i8* %38, align 1
Keep: %109 = icmp ne i8 %103, 0
Keep: %110 = xor i1 %109, %107
Keep: %.demorgan6 = or i1 %100, %110
Found line to remove! %.v8 = select i1 %.demorgan6, i64 14, i64 30
Found line to remove! %111 = add i64 %83, %.v8
Found line to remove! store i64 %111, i64* %3, align 8
Keep: br i1 %.demorgan6, label %block_40094f, label %block_.L_40095f
Keep: 
Keep: block_40094f:                                     ; preds = %block_400941
Found line to remove! %112 = add i64 %111, 4
Found line to remove! store i64 %112, i64* %3, align 8
Found line to remove! %113 = load i32, i32* %55, align 4
Found line to remove! %114 = sext i32 %113 to i64
Found line to remove! store i64 %114, i64* %RAX.i43, align 8
Found line to remove! %115 = shl nsw i64 %114, 3
Found line to remove! %116 = add i64 %115, ptrtoint (%G_0x602070___rax_8__type* @G_0x602070___rax_8_ to i64)
Found line to remove! %117 = add i64 %111, 12
Found line to remove! store i64 %117, i64* %3, align 8
Found line to remove! %118 = inttoptr i64 %116 to i64*
Found line to remove! %119 = load i64, i64* %118, align 8
Found line to remove! store i64 %119, i64* %RAX.i43, align 8
Found line to remove! %120 = add i64 %51, -16
Found line to remove! %121 = add i64 %111, 16
Found line to remove! store i64 %121, i64* %3, align 8
Found line to remove! %122 = inttoptr i64 %120 to i64*
Found line to remove! store i64 %119, i64* %122, align 8
Keep: %.pre = load i64, i64* %RBP.i, align 8
Found line to remove! %.pre3 = load i64, i64* %3, align 8
Keep: br label %block_.L_40095f
Keep: 
Keep: block_.L_40095f:                                  ; preds = %block_400941, %entry, %block_40094f
Found line to remove! %123 = phi i64 [ %.pre3, %block_40094f ], [ %111, %block_400941 ], [ %83, %entry ]
Keep: %124 = phi i64 [ %.pre, %block_40094f ], [ %51, %block_400941 ], [ %51, %entry ]
Keep: %125 = add i64 %124, -16
Found line to remove! %126 = add i64 %123, 5
Found line to remove! store i64 %126, i64* %3, align 8
Keep: %127 = inttoptr i64 %125 to i64*
Keep: %128 = load i64, i64* %127, align 8
Keep: store i8 0, i8* %14, align 1
Found line to remove! %129 = trunc i64 %128 to i32
Found line to remove! %130 = and i32 %129, 255
Found line to remove! %131 = tail call i32 @llvm.ctpop.i32(i32 %130)
Found line to remove! %132 = trunc i32 %131 to i8
Found line to remove! %133 = and i8 %132, 1
Found line to remove! %134 = xor i8 %133, 1
Found line to remove! store i8 %134, i8* %21, align 1
Keep: store i8 0, i8* %26, align 1
Keep: %135 = icmp eq i64 %128, 0
Found line to remove! %136 = zext i1 %135 to i8
Found line to remove! store i8 %136, i8* %29, align 1
Found line to remove! %137 = lshr i64 %128, 63
Found line to remove! %138 = trunc i64 %137 to i8
Found line to remove! store i8 %138, i8* %32, align 1
Keep: store i8 0, i8* %38, align 1
Found line to remove! %.v7 = select i1 %135, i64 11, i64 34
Found line to remove! %139 = add i64 %123, %.v7
Found line to remove! store i64 %139, i64* %3, align 8
Keep: br i1 %135, label %block_40096a, label %block_.L_400981
Keep: 
Keep: block_40096a:                                     ; preds = %block_.L_40095f
Found line to remove! %RDI.i = getelementptr inbounds %union.anon, %union.anon* %40, i64 0, i32 0
Found line to remove! store i64 ptrtoint (%G__0x401257_type* @G__0x401257 to i64), i64* %RDI.i, align 8
Found line to remove! %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %140 = add i64 %124, -4
Found line to remove! %141 = add i64 %139, 13
Found line to remove! store i64 %141, i64* %3, align 8
Found line to remove! %142 = inttoptr i64 %140 to i32*
Found line to remove! %143 = load i32, i32* %142, align 4
Found line to remove! %144 = zext i32 %143 to i64
Found line to remove! store i64 %144, i64* %RSI.i, align 8
Found line to remove! %AL.i = bitcast %union.anon* %39 to i8*
Found line to remove! store i8 0, i8* %AL.i, align 1
Found line to remove! %145 = add i64 %139, -1306
Found line to remove! %146 = add i64 %139, 20
Found line to remove! %147 = load i64, i64* %6, align 8
Found line to remove! %148 = add i64 %147, -8
Found line to remove! %149 = inttoptr i64 %148 to i64*
Found line to remove! store i64 %146, i64* %149, align 8
Found line to remove! store i64 %148, i64* %6, align 8
Found line to remove! store i64 %145, i64* %3, align 8
Found line to remove! %150 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
Found line to remove! %151 = load i64, i64* %RBP.i, align 8
Found line to remove! %152 = add i64 %151, -20
Found line to remove! %153 = load i32, i32* %EAX.i36, align 4
Found line to remove! %154 = load i64, i64* %3, align 8
Found line to remove! %155 = add i64 %154, 3
Found line to remove! store i64 %155, i64* %3, align 8
Found line to remove! %156 = inttoptr i64 %152 to i32*
Found line to remove! store i32 %153, i32* %156, align 4
Found line to remove! %.pre4 = load i64, i64* %RBP.i, align 8
Found line to remove! %.pre5 = load i64, i64* %3, align 8
Keep: br label %block_.L_400981
Keep: 
Keep: block_.L_400981:                                  ; preds = %block_.L_40095f, %block_40096a
Found line to remove! %157 = phi i64 [ %139, %block_.L_40095f ], [ %.pre5, %block_40096a ]
Found line to remove! %158 = phi i64 [ %124, %block_.L_40095f ], [ %.pre4, %block_40096a ]
Found line to remove! %MEMORY.1 = phi %struct.Memory* [ %2, %block_.L_40095f ], [ %150, %block_40096a ]
Found line to remove! %159 = add i64 %158, -16
Found line to remove! %160 = add i64 %157, 4
Found line to remove! store i64 %160, i64* %3, align 8
Found line to remove! %161 = inttoptr i64 %159 to i64*
Found line to remove! %162 = load i64, i64* %161, align 8
Found line to remove! store i64 %162, i64* %RAX.i43, align 8
Found line to remove! %163 = load i64, i64* %6, align 8
Found line to remove! %164 = add i64 %163, 32
Found line to remove! store i64 %164, i64* %6, align 8
Found line to remove! %165 = icmp ugt i64 %163, -33
Found line to remove! %166 = zext i1 %165 to i8
Found line to remove! store i8 %166, i8* %14, align 1
Found line to remove! %167 = trunc i64 %164 to i32
Found line to remove! %168 = and i32 %167, 255
Found line to remove! %169 = tail call i32 @llvm.ctpop.i32(i32 %168)
Found line to remove! %170 = trunc i32 %169 to i8
Found line to remove! %171 = and i8 %170, 1
Found line to remove! %172 = xor i8 %171, 1
Found line to remove! store i8 %172, i8* %21, align 1
Found line to remove! %173 = xor i64 %164, %163
Found line to remove! %174 = lshr i64 %173, 4
Found line to remove! %175 = trunc i64 %174 to i8
Found line to remove! %176 = and i8 %175, 1
Found line to remove! store i8 %176, i8* %26, align 1
Found line to remove! %177 = icmp eq i64 %164, 0
Found line to remove! %178 = zext i1 %177 to i8
Found line to remove! store i8 %178, i8* %29, align 1
Found line to remove! %179 = lshr i64 %164, 63
Found line to remove! %180 = trunc i64 %179 to i8
Found line to remove! store i8 %180, i8* %32, align 1
Found line to remove! %181 = lshr i64 %163, 63
Found line to remove! %182 = xor i64 %179, %181
Found line to remove! %183 = add nuw nsw i64 %182, %179
Found line to remove! %184 = icmp eq i64 %183, 2
Found line to remove! %185 = zext i1 %184 to i8
Found line to remove! store i8 %185, i8* %38, align 1
Found line to remove! %186 = add i64 %157, 9
Found line to remove! store i64 %186, i64* %3, align 8
Found line to remove! %187 = add i64 %163, 40
Found line to remove! %188 = inttoptr i64 %164 to i64*
Found line to remove! %189 = load i64, i64* %188, align 8
Found line to remove! store i64 %189, i64* %RBP.i, align 8
Found line to remove! store i64 %187, i64* %6, align 8
Found line to remove! %190 = add i64 %157, 10
Found line to remove! store i64 %190, i64* %3, align 8
Found line to remove! %191 = inttoptr i64 %187 to i64*
Found line to remove! %192 = load i64, i64* %191, align 8
Found line to remove! store i64 %192, i64* %3, align 8
Found line to remove! %193 = add i64 %163, 48
Found line to remove! store i64 %193, i64* %6, align 8
Found line to remove! ret %struct.Memory* %MEMORY.1
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %4 to i32*', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = load i64, i64* %RSP, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %5, i64* %9, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %RSP, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', 'store i8 %37, i8* %38, align 1', '%39 = add i64 %7, -12', '%40 = load i32, i32* %EDI, align 4', '%41 = add i64 %10, 15', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %39 to i32*', 'store i32 %40, i32* %42, align 4', '%45 = load i64, i64* %PC, align 8', '%46 = add i64 %45, 8', 'store i64 %46, i64* %PC, align 8', '%51 = load i64, i64* %PC, align 8', '%52 = add i64 %51, 3', 'store i64 %52, i64* %PC, align 8', '%56 = icmp ult i32 %48, %54', '%57 = zext i1 %56 to i8', 'store i8 %57, i8* %14, align 1', '%58 = and i32 %55, 255', '%59 = tail call i32 @llvm.ctpop.i32(i32 %58) #12', '%60 = trunc i32 %59 to i8', '%61 = and i8 %60, 1', '%62 = xor i8 %61, 1', 'store i8 %62, i8* %21, align 1', '%63 = xor i32 %54, %48', '%64 = xor i32 %63, %55', '%65 = lshr i32 %64, 4', '%66 = trunc i32 %65 to i8', '%67 = and i8 %66, 1', 'store i8 %67, i8* %26, align 1', '%69 = zext i1 %68 to i8', 'store i8 %69, i8* %29, align 1', 'store i8 %71, i8* %32, align 1', '%78 = zext i1 %77 to i8', 'store i8 %78, i8* %38, align 1', '%.v = select i1 %.demorgan, i64 9, i64 39', '%81 = add i64 %51, %.v', 'store i64 %81, i64* %PC, align 8', 'store i64 add (i64 ptrtoint (%seg_401250__rodata_type* @seg_401250__rodata to i64), i64 7), i64* %RDI, align 8', '%82 = add i64 %176, -4', '%83 = add i64 %191, 13', 'store i64 %83, i64* %PC, align 8', '%84 = inttoptr i64 %82 to i32*', '%85 = load i32, i32* %84, align 4', '%86 = zext i32 %85 to i64', 'store i64 %86, i64* %RSI, align 8', 'store i8 0, i8* %AL, align 1', '%87 = add i64 %191, -1306', '%88 = add i64 %191, 20', '%89 = load i64, i64* %RSP, align 8', '%90 = add i64 %89, -8', '%91 = inttoptr i64 %90 to i64*', 'store i64 %88, i64* %91, align 8', 'store i64 %90, i64* %RSP, align 8', 'store i64 %87, i64* %PC, align 8', '%92 = tail call fastcc %struct.Memory* @ext_602118_printf(%struct.State* nonnull %0, %struct.Memory* %2)', '%93 = load i64, i64* %RBP, align 8', '%94 = add i64 %93, -20', '%95 = load i32, i32* %EAX, align 4', '%96 = load i64, i64* %PC, align 8', '%97 = add i64 %96, 3', 'store i64 %97, i64* %PC, align 8', '%98 = inttoptr i64 %94 to i32*', 'store i32 %95, i32* %98, align 4', '%.pre4 = load i64, i64* %RBP, align 8', '%.pre5 = load i64, i64* %PC, align 8', '%99 = phi i64 [ %191, %block_40095f ], [ %.pre5, %block_40096a ]', '%100 = phi i64 [ %176, %block_40095f ], [ %.pre4, %block_40096a ]', '%MEMORY.0 = phi %struct.Memory* [ %2, %block_40095f ], [ %92, %block_40096a ]', '%101 = add i64 %100, -16', '%102 = add i64 %99, 4', 'store i64 %102, i64* %PC, align 8', '%103 = inttoptr i64 %101 to i64*', '%104 = load i64, i64* %103, align 8', 'store i64 %104, i64* %RAX, align 8', '%105 = load i64, i64* %RSP, align 8', '%106 = add i64 %105, 32', 'store i64 %106, i64* %RSP, align 8', '%107 = icmp ugt i64 %105, -33', '%108 = zext i1 %107 to i8', 'store i8 %108, i8* %14, align 1', '%109 = trunc i64 %106 to i32', '%110 = and i32 %109, 255', '%111 = tail call i32 @llvm.ctpop.i32(i32 %110) #12', '%112 = trunc i32 %111 to i8', '%113 = and i8 %112, 1', '%114 = xor i8 %113, 1', 'store i8 %114, i8* %21, align 1', '%115 = xor i64 %106, %105', '%116 = lshr i64 %115, 4', '%117 = trunc i64 %116 to i8', '%118 = and i8 %117, 1', 'store i8 %118, i8* %26, align 1', '%119 = icmp eq i64 %106, 0', '%120 = zext i1 %119 to i8', 'store i8 %120, i8* %29, align 1', '%121 = lshr i64 %106, 63', '%122 = trunc i64 %121 to i8', 'store i8 %122, i8* %32, align 1', '%123 = lshr i64 %105, 63', '%124 = xor i64 %121, %123', '%125 = add nuw nsw i64 %124, %121', '%126 = icmp eq i64 %125, 2', '%127 = zext i1 %126 to i8', 'store i8 %127, i8* %38, align 1', '%128 = add i64 %99, 9', 'store i64 %128, i64* %PC, align 8', '%129 = add i64 %105, 40', '%130 = inttoptr i64 %106 to i64*', '%131 = load i64, i64* %130, align 8', 'store i64 %131, i64* %RBP, align 8', 'store i64 %129, i64* %RSP, align 8', '%132 = add i64 %99, 10', 'store i64 %132, i64* %PC, align 8', '%133 = inttoptr i64 %129 to i64*', '%134 = load i64, i64* %133, align 8', 'store i64 %134, i64* %PC, align 8', '%135 = add i64 %105, 48', 'store i64 %135, i64* %RSP, align 8', 'ret %struct.Memory* %MEMORY.0', '%136 = add i64 %174, 4', 'store i64 %136, i64* %PC, align 8', '%137 = load i32, i32* %53, align 4', '%138 = sext i32 %137 to i64', 'store i64 %138, i64* %RAX, align 8', '%139 = shl nsw i64 %138, 3', '%140 = add i64 %139, ptrtoint (%tasktab_type* @tasktab to i64)', '%141 = add i64 %174, 12', 'store i64 %141, i64* %PC, align 8', '%142 = inttoptr i64 %140 to i64*', '%143 = load i64, i64* %142, align 8', 'store i64 %143, i64* %RAX, align 8', '%144 = add i64 %49, -16', '%145 = add i64 %174, 16', 'store i64 %145, i64* %PC, align 8', '%146 = inttoptr i64 %144 to i64*', 'store i64 %143, i64* %146, align 8', '%.pre3 = load i64, i64* %PC, align 8', '%147 = add i64 %81, 4', 'store i64 %147, i64* %PC, align 8', 'store i64 %149, i64* %RAX, align 8', '%151 = icmp ult i32 %148, 10', '%152 = zext i1 %151 to i8', 'store i8 %152, i8* %14, align 1', '%153 = trunc i64 %150 to i32', '%154 = and i32 %153, 255', '%155 = tail call i32 @llvm.ctpop.i32(i32 %154) #12', '%156 = trunc i32 %155 to i8', '%157 = and i8 %156, 1', '%158 = xor i8 %157, 1', 'store i8 %158, i8* %21, align 1', '%159 = xor i64 %150, %149', '%160 = lshr i64 %159, 4', '%161 = trunc i64 %160 to i8', '%162 = and i8 %161, 1', 'store i8 %162, i8* %26, align 1', '%164 = zext i1 %163 to i8', 'store i8 %164, i8* %29, align 1', 'store i8 %166, i8* %32, align 1', '%171 = zext i1 %170 to i8', 'store i8 %171, i8* %38, align 1', '%.v8 = select i1 %.demorgan6, i64 14, i64 30', '%174 = add i64 %81, %.v8', 'store i64 %174, i64* %PC, align 8', '%175 = phi i64 [ %174, %block_400941 ], [ %.pre3, %block_40094f ], [ %81, %block_400920 ]', '%178 = add i64 %175, 5', 'store i64 %178, i64* %PC, align 8', '%181 = trunc i64 %180 to i32', '%182 = and i32 %181, 255', '%183 = tail call i32 @llvm.ctpop.i32(i32 %182) #12', '%184 = trunc i32 %183 to i8', '%185 = and i8 %184, 1', '%186 = xor i8 %185, 1', 'store i8 %186, i8* %21, align 1', '%188 = zext i1 %187 to i8', 'store i8 %188, i8* %29, align 1', '%189 = lshr i64 %180, 63', '%190 = trunc i64 %189 to i8', 'store i8 %190, i8* %32, align 1', '%.v7 = select i1 %187, i64 11, i64 34', '%191 = add i64 %175, %.v7', 'store i64 %191, i64* %PC, align 8'])
Keep: block_400920:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Keep: %EAX = bitcast %union.anon* %3 to i32*
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %4 to i32*
Keep: %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %5 = load i64, i64* %RBP, align 8
Found line to remove! %6 = add i64 %1, 1
Found line to remove! store i64 %6, i64* %PC, align 8
Found line to remove! %7 = load i64, i64* %RSP, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %5, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %PC, align 8
Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %RSP, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Keep: %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Keep: %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Keep: %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Keep: store i64 1, i64* %RAX, align 8
Found line to remove! %39 = add i64 %7, -12
Found line to remove! %40 = load i32, i32* %EDI, align 4
Found line to remove! %41 = add i64 %10, 15
Found line to remove! store i64 %41, i64* %PC, align 8
Found line to remove! %42 = inttoptr i64 %39 to i32*
Found line to remove! store i32 %40, i32* %42, align 4
Keep: %43 = load i64, i64* %RBP, align 8
Keep: %44 = add i64 %43, -16
Found line to remove! %45 = load i64, i64* %PC, align 8
Found line to remove! %46 = add i64 %45, 8
Found line to remove! store i64 %46, i64* %PC, align 8
Keep: %47 = inttoptr i64 %44 to i64*
Keep: store i64 0, i64* %47, align 8
Keep: %48 = load i32, i32* %EAX, align 4
Keep: %49 = load i64, i64* %RBP, align 8
Keep: %50 = add i64 %49, -4
Found line to remove! %51 = load i64, i64* %PC, align 8
Found line to remove! %52 = add i64 %51, 3
Found line to remove! store i64 %52, i64* %PC, align 8
Keep: %53 = inttoptr i64 %50 to i32*
Keep: %54 = load i32, i32* %53, align 4
Keep: %55 = sub i32 %48, %54
Found line to remove! %56 = icmp ult i32 %48, %54
Found line to remove! %57 = zext i1 %56 to i8
Found line to remove! store i8 %57, i8* %14, align 1
Found line to remove! %58 = and i32 %55, 255
Found line to remove! %59 = tail call i32 @llvm.ctpop.i32(i32 %58) #12
Found line to remove! %60 = trunc i32 %59 to i8
Found line to remove! %61 = and i8 %60, 1
Found line to remove! %62 = xor i8 %61, 1
Found line to remove! store i8 %62, i8* %21, align 1
Found line to remove! %63 = xor i32 %54, %48
Found line to remove! %64 = xor i32 %63, %55
Found line to remove! %65 = lshr i32 %64, 4
Found line to remove! %66 = trunc i32 %65 to i8
Found line to remove! %67 = and i8 %66, 1
Found line to remove! store i8 %67, i8* %26, align 1
Keep: %68 = icmp eq i32 %55, 0
Found line to remove! %69 = zext i1 %68 to i8
Found line to remove! store i8 %69, i8* %29, align 1
Keep: %70 = lshr i32 %55, 31
Keep: %71 = trunc i32 %70 to i8
Found line to remove! store i8 %71, i8* %32, align 1
Keep: %72 = lshr i32 %48, 31
Keep: %73 = lshr i32 %54, 31
Keep: %74 = xor i32 %73, %72
Keep: %75 = xor i32 %70, %72
Keep: %76 = add nuw nsw i32 %75, %74
Keep: %77 = icmp eq i32 %76, 2
Found line to remove! %78 = zext i1 %77 to i8
Found line to remove! store i8 %78, i8* %38, align 1
Keep: %79 = icmp ne i8 %71, 0
Keep: %80 = xor i1 %79, %77
Keep: %.demorgan = or i1 %68, %80
Found line to remove! %.v = select i1 %.demorgan, i64 9, i64 39
Found line to remove! %81 = add i64 %51, %.v
Found line to remove! store i64 %81, i64* %PC, align 8
Keep: br i1 %.demorgan, label %block_400941, label %block_40095f
Keep: 
Keep: block_40096a:                                     ; preds = %block_40095f
Found line to remove! store i64 add (i64 ptrtoint (%seg_401250__rodata_type* @seg_401250__rodata to i64), i64 7), i64* %RDI, align 8
Found line to remove! %82 = add i64 %176, -4
Found line to remove! %83 = add i64 %191, 13
Found line to remove! store i64 %83, i64* %PC, align 8
Found line to remove! %84 = inttoptr i64 %82 to i32*
Found line to remove! %85 = load i32, i32* %84, align 4
Found line to remove! %86 = zext i32 %85 to i64
Found line to remove! store i64 %86, i64* %RSI, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %87 = add i64 %191, -1306
Found line to remove! %88 = add i64 %191, 20
Found line to remove! %89 = load i64, i64* %RSP, align 8
Found line to remove! %90 = add i64 %89, -8
Found line to remove! %91 = inttoptr i64 %90 to i64*
Found line to remove! store i64 %88, i64* %91, align 8
Found line to remove! store i64 %90, i64* %RSP, align 8
Found line to remove! store i64 %87, i64* %PC, align 8
Found line to remove! %92 = tail call fastcc %struct.Memory* @ext_602118_printf(%struct.State* nonnull %0, %struct.Memory* %2)
Found line to remove! %93 = load i64, i64* %RBP, align 8
Found line to remove! %94 = add i64 %93, -20
Found line to remove! %95 = load i32, i32* %EAX, align 4
Found line to remove! %96 = load i64, i64* %PC, align 8
Found line to remove! %97 = add i64 %96, 3
Found line to remove! store i64 %97, i64* %PC, align 8
Found line to remove! %98 = inttoptr i64 %94 to i32*
Found line to remove! store i32 %95, i32* %98, align 4
Found line to remove! %.pre4 = load i64, i64* %RBP, align 8
Found line to remove! %.pre5 = load i64, i64* %PC, align 8
Keep: br label %block_400981
Keep: 
Keep: block_400981:                                     ; preds = %block_40095f, %block_40096a
Found line to remove! %99 = phi i64 [ %191, %block_40095f ], [ %.pre5, %block_40096a ]
Found line to remove! %100 = phi i64 [ %176, %block_40095f ], [ %.pre4, %block_40096a ]
Found line to remove! %MEMORY.0 = phi %struct.Memory* [ %2, %block_40095f ], [ %92, %block_40096a ]
Found line to remove!Writing '/tmp/tmpa97jdsdb.dot'...
Writing '/tmp/tmpa97jdsdb.dot':Done

Reading LLVM: /tmp/tmp3impy4t0-query.ll
Extracting function [findtcb] from /tmp/tmp3impy4t0-query.ll
Dot file generated!
Writing '/tmp/tmpz3hotgw5.dot'...
Writing '/tmp/tmpz3hotgw5.dot':Done

Reading LLVM: /tmp/tmp2ioredj6-target.ll
Extracting function [findtcb] from /tmp/tmp2ioredj6-target.ll
Dot file generated!
 %101 = add i64 %100, -16
Found line to remove! %102 = add i64 %99, 4
Found line to remove! store i64 %102, i64* %PC, align 8
Found line to remove! %103 = inttoptr i64 %101 to i64*
Found line to remove! %104 = load i64, i64* %103, align 8
Found line to remove! store i64 %104, i64* %RAX, align 8
Found line to remove! %105 = load i64, i64* %RSP, align 8
Found line to remove! %106 = add i64 %105, 32
Found line to remove! store i64 %106, i64* %RSP, align 8
Found line to remove! %107 = icmp ugt i64 %105, -33
Found line to remove! %108 = zext i1 %107 to i8
Found line to remove! store i8 %108, i8* %14, align 1
Found line to remove! %109 = trunc i64 %106 to i32
Found line to remove! %110 = and i32 %109, 255
Found line to remove! %111 = tail call i32 @llvm.ctpop.i32(i32 %110) #12
Found line to remove! %112 = trunc i32 %111 to i8
Found line to remove! %113 = and i8 %112, 1
Found line to remove! %114 = xor i8 %113, 1
Found line to remove! store i8 %114, i8* %21, align 1
Found line to remove! %115 = xor i64 %106, %105
Found line to remove! %116 = lshr i64 %115, 4
Found line to remove! %117 = trunc i64 %116 to i8
Found line to remove! %118 = and i8 %117, 1
Found line to remove! store i8 %118, i8* %26, align 1
Found line to remove! %119 = icmp eq i64 %106, 0
Found line to remove! %120 = zext i1 %119 to i8
Found line to remove! store i8 %120, i8* %29, align 1
Found line to remove! %121 = lshr i64 %106, 63
Found line to remove! %122 = trunc i64 %121 to i8
Found line to remove! store i8 %122, i8* %32, align 1
Found line to remove! %123 = lshr i64 %105, 63
Found line to remove! %124 = xor i64 %121, %123
Found line to remove! %125 = add nuw nsw i64 %124, %121
Found line to remove! %126 = icmp eq i64 %125, 2
Found line to remove! %127 = zext i1 %126 to i8
Found line to remove! store i8 %127, i8* %38, align 1
Found line to remove! %128 = add i64 %99, 9
Found line to remove! store i64 %128, i64* %PC, align 8
Found line to remove! %129 = add i64 %105, 40
Found line to remove! %130 = inttoptr i64 %106 to i64*
Found line to remove! %131 = load i64, i64* %130, align 8
Found line to remove! store i64 %131, i64* %RBP, align 8
Found line to remove! store i64 %129, i64* %RSP, align 8
Found line to remove! %132 = add i64 %99, 10
Found line to remove! store i64 %132, i64* %PC, align 8
Found line to remove! %133 = inttoptr i64 %129 to i64*
Found line to remove! %134 = load i64, i64* %133, align 8
Found line to remove! store i64 %134, i64* %PC, align 8
Found line to remove! %135 = add i64 %105, 48
Found line to remove! store i64 %135, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %MEMORY.0
Keep: 
Keep: block_40094f:                                     ; preds = %block_400941
Found line to remove! %136 = add i64 %174, 4
Found line to remove! store i64 %136, i64* %PC, align 8
Found line to remove! %137 = load i32, i32* %53, align 4
Found line to remove! %138 = sext i32 %137 to i64
Found line to remove! store i64 %138, i64* %RAX, align 8
Found line to remove! %139 = shl nsw i64 %138, 3
Found line to remove! %140 = add i64 %139, ptrtoint (%tasktab_type* @tasktab to i64)
Found line to remove! %141 = add i64 %174, 12
Found line to remove! store i64 %141, i64* %PC, align 8
Found line to remove! %142 = inttoptr i64 %140 to i64*
Found line to remove! %143 = load i64, i64* %142, align 8
Found line to remove! store i64 %143, i64* %RAX, align 8
Found line to remove! %144 = add i64 %49, -16
Found line to remove! %145 = add i64 %174, 16
Found line to remove! store i64 %145, i64* %PC, align 8
Found line to remove! %146 = inttoptr i64 %144 to i64*
Found line to remove! store i64 %143, i64* %146, align 8
Keep: %.pre = load i64, i64* %RBP, align 8
Found line to remove! %.pre3 = load i64, i64* %PC, align 8
Keep: br label %block_40095f
Keep: 
Keep: block_400941:                                     ; preds = %block_400920
Found line to remove! %147 = add i64 %81, 4
Found line to remove! store i64 %147, i64* %PC, align 8
Keep: %148 = load i32, i32* %53, align 4
Keep: %149 = sext i32 %148 to i64
Found line to remove! store i64 %149, i64* %RAX, align 8
Keep: %150 = add nsw i64 %149, -10
Found line to remove! %151 = icmp ult i32 %148, 10
Found line to remove! %152 = zext i1 %151 to i8
Found line to remove! store i8 %152, i8* %14, align 1
Found line to remove! %153 = trunc i64 %150 to i32
Found line to remove! %154 = and i32 %153, 255
Found line to remove! %155 = tail call i32 @llvm.ctpop.i32(i32 %154) #12
Found line to remove! %156 = trunc i32 %155 to i8
Found line to remove! %157 = and i8 %156, 1
Found line to remove! %158 = xor i8 %157, 1
Found line to remove! store i8 %158, i8* %21, align 1
Found line to remove! %159 = xor i64 %150, %149
Found line to remove! %160 = lshr i64 %159, 4
Found line to remove! %161 = trunc i64 %160 to i8
Found line to remove! %162 = and i8 %161, 1
Found line to remove! store i8 %162, i8* %26, align 1
Keep: %163 = icmp eq i64 %150, 0
Found line to remove! %164 = zext i1 %163 to i8
Found line to remove! store i8 %164, i8* %29, align 1
Keep: %165 = lshr i64 %150, 63
Keep: %166 = trunc i64 %165 to i8
Found line to remove! store i8 %166, i8* %32, align 1
Keep: %167 = lshr i64 %149, 63
Keep: %168 = xor i64 %165, %167
Keep: %169 = add nuw nsw i64 %168, %167
Keep: %170 = icmp eq i64 %169, 2
Found line to remove! %171 = zext i1 %170 to i8
Found line to remove! store i8 %171, i8* %38, align 1
Keep: %172 = icmp ne i8 %166, 0
Keep: %173 = xor i1 %172, %170
Keep: %.demorgan6 = or i1 %163, %173
Found line to remove! %.v8 = select i1 %.demorgan6, i64 14, i64 30
Found line to remove! %174 = add i64 %81, %.v8
Found line to remove! store i64 %174, i64* %PC, align 8
Keep: br i1 %.demorgan6, label %block_40094f, label %block_40095f
Keep: 
Keep: block_40095f:                                     ; preds = %block_400941, %block_400920, %block_40094f
Found line to remove! %175 = phi i64 [ %174, %block_400941 ], [ %.pre3, %block_40094f ], [ %81, %block_400920 ]
Keep: %176 = phi i64 [ %49, %block_400941 ], [ %.pre, %block_40094f ], [ %49, %block_400920 ]
Keep: %177 = add i64 %176, -16
Found line to remove! %178 = add i64 %175, 5
Found line to remove! store i64 %178, i64* %PC, align 8
Keep: %179 = inttoptr i64 %177 to i64*
Keep: %180 = load i64, i64* %179, align 8
Keep: store i8 0, i8* %14, align 1
Found line to remove! %181 = trunc i64 %180 to i32
Found line to remove! %182 = and i32 %181, 255
Found line to remove! %183 = tail call i32 @llvm.ctpop.i32(i32 %182) #12
Found line to remove! %184 = trunc i32 %183 to i8
Found line to remove! %185 = and i8 %184, 1
Found line to remove! %186 = xor i8 %185, 1
Found line to remove! store i8 %186, i8* %21, align 1
Keep: store i8 0, i8* %26, align 1
Keep: %187 = icmp eq i64 %180, 0
Found line to remove! %188 = zext i1 %187 to i8
Found line to remove! store i8 %188, i8* %29, align 1
Found line to remove! %189 = lshr i64 %180, 63
Found line to remove! %190 = trunc i64 %189 to i8
Found line to remove! store i8 %190, i8* %32, align 1
Keep: store i8 0, i8* %38, align 1
Found line to remove! %.v7 = select i1 %187, i64 11, i64 34
Found line to remove! %191 = add i64 %175, %.v7
Found line to remove! store i64 %191, i64* %PC, align 8
Keep: br i1 %187, label %block_40096a, label %block_400981
================ Starting round 2
MAPPING:
- 0 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 2 %var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 3 %var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 4 %RAX.i43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 5 store i64 1, i64* %RAX.i43, align 8
- 6 %var_2_45 = load i64, i64* %RBP.i, align 8
- 7 %var_2_46 = add i64 %var_2_45, -16
- 8 %var_2_49 = inttoptr i64 %var_2_46 to i64*
- 9 store i64 0, i64* %var_2_49, align 8
- 10 store i8 0, i8* %var_2_14, align 1
- 11 store i8 0, i8* %var_2_26, align 1
- 12 store i8 0, i8* %var_2_38, align 1
- 13 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fa08cca1400>, {0: {1}, 1: {2}, 2: {3}, 3: {4}, 4: {0}, 5: {5, 9, 10, 11, 12}, 6: {6}, 7: {7}, 8: {8}, 9: {5, 9, 10, 11, 12}, 10: {5, 9, 10, 11, 12}, 11: {5, 9, 10, 11, 12}, 12: {5, 9, 10, 11, 12}, 13: {13}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fa08cca1400>, {0: {1}, 1: {2}, 2: {3}, 3: {4}, 4: {0}, 5: {5}, 6: {6}, 7: {7}, 8: {8}, 9: {9}, 10: {10}, 11: {11}, 12: {12}, 13: {13}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 store store
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 store store
EXACT 11 store store
EXACT 12 store store
EXACT 13 ret ret
================ Starting round 3
MAPPING:
- 0 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 1 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 3 %var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 4 %var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 5 store i64 1, i64* %RAX, align 8
- 6 %var_2_43 = load i64, i64* %RBP, align 8
- 7 %var_2_44 = add i64 %var_2_43, -16
- 8 %var_2_47 = inttoptr i64 %var_2_44 to i64*
- 9 store i64 0, i64* %var_2_47, align 8
- 10 store i8 0, i8* %var_2_14, align 1
- 11 store i8 0, i8* %var_2_26, align 1
- 12 store i8 0, i8* %var_2_38, align 1
- 13 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fa08c5a4d08>, {0: {4}, 1: {0}, 2: {1}, 3: {2}, 4: {3}, 5: {5, 9, 10, 11, 12}, 6: {6}, 7: {7}, 8: {8}, 9: {5, 9, 10, 11, 12}, 10: {5, 9, 10, 11, 12}, 11: {5, 9, 10, 11, 12}, 12: {5, 9, 10, 11, 12}, 13: {13}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fa08c5a4d08>, {0: {4}, 1: {0}, 2: {1}, 3: {2}, 4: {3}, 5: {5}, 6: {6}, 7: {7}, 8: {8}, 9: {9}, 10: {10}, 11: {11}, 12: {12}, 13: {13}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 store store
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 store store
EXACT 11 store store
EXACT 12 store store
EXACT 13 ret ret
FP: 63 2.0 True
TO REMOVE: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', '%RAX.i43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', 'store i64 1, i64* %RAX.i43, align 8', '%var_2_45 = load i64, i64* %RBP.i, align 8', '%var_2_46 = add i64 %var_2_45, -16', '%var_2_49 = inttoptr i64 %var_2_46 to i64*', 'store i64 0, i64* %var_2_49, align 8', 'store i8 0, i8* %var_2_14, align 1', 'store i8 0, i8* %var_2_26, align 1', 'store i8 0, i8* %var_2_38, align 1', 'ret %struct.Memory* %2'])
Keep: entry:
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! %RAX.i43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! store i64 1, i64* %RAX.i43, align 8
Found line to remove! %var_2_45 = load i64, i64* %RBP.i, align 8
Found line to remove! %var_2_46 = add i64 %var_2_45, -16
Found line to remove! %var_2_49 = inttoptr i64 %var_2_46 to i64*
Found line to remove! store i64 0, i64* %var_2_49, align 8
Found line to remove! store i8 0, i8* %var_2_14, align 1
Found line to remove! store i8 0, i8* %var_2_26, align 1
Found line to remove! store i8 0, i8* %var_2_38, align 1
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i64 1, i64* %RAX, align 8', '%var_2_43 = load i64, i64* %RBP, align 8', '%var_2_44 = add i64 %var_2_43, -16', '%var_2_47 = inttoptr i64 %var_2_44 to i64*', 'store i64 0, i64* %var_2_47, align 8', 'store i8 0, i8* %var_2_14, align 1', 'store i8 0, i8* %var_2_26, align 1', 'store i8 0, i8* %var_2_38, align 1', 'ret %struct.Memory* %2'])
Keep: block_400920:
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i64 1, i64* %RAX, align 8
Found line to remove! %var_2_43 = load i64, i64* %RBP, align 8
Found line to remove! %var_2_44 = add i64 %var_2_43, -16
Found line to remove! %var_2_47 = inttoptr i64 %var_2_44 to i64*
Found line to remove! store i64 0, i64* %var_2_47, align 8
Found line to remove! store i8 0, i8* %var_2_14, align 1
Found line to remove! store i8 0, i8* %var_2_26, align 1
Found line to remove! store i8 0, i8* %var_2_38, align 1
Found line to remove! ret %struct.Memory* %2
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/richards_benchmark/findtcb/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/richards_benchmark/binary/test.mcsema.calls_renamed.ll findtcb
/home/ubuntu/Github/llir-matcher/matcher/match.py:718: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
