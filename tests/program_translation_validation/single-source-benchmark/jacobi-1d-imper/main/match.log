[Info]: Check for multiple matches
Multiple matches exist for [0x563d69b48a98]:   %305 = tail call fastcc %struct.Memory* @ext_602108_free(%struct.State* nonnull %0, %struct.Memory* %293)
[0x563d69c7f3b0]:   %call2_4009d6 = tail call %struct.Memory.31* @sub_400ae0.kernel_jacobi_1d_imper(%struct.State.0* %0, i64 %146, %struct.Memory.31* %call2_4009c3)
[0x563d69c85420]:   %271 = tail call %struct.Memory.31* @__remill_function_call(%struct.State.0* nonnull %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory.31* %259)
[0x563d69c85680]:   %259 = tail call %struct.Memory.31* @__remill_function_call(%struct.State.0* nonnull %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory.31* %call2_400a2a)
[0x563d69c857b0]:   %call2_400a2a = tail call %struct.Memory.31* @sub_400cc0.print_array(%struct.State.0* nonnull %0, i64 %243, %struct.Memory.31* %call2_400a09)
[0x563d69c85a10]:   %call2_400a09 = tail call %struct.Memory.31* @sub_400bd0.check_FP(%struct.State.0* %0, i64 %211, %struct.Memory.31* %call2_4009f9)
[0x563d69c85c70]:   %call2_4009f9 = tail call %struct.Memory.31* @sub_400ae0.kernel_jacobi_1d_imper(%struct.State.0* %0, i64 %191, %struct.Memory.31* %call2_4009e6)
[0x563d69c85ed0]:   %call2_4009e6 = tail call %struct.Memory.31* @sub_400a60.init_array(%struct.State.0* %0, i64 %166, %struct.Memory.31* %call2_4009d6)
[0x563d69c98b60]:   %call2_4009c3 = tail call %struct.Memory.31* @sub_400a60.init_array(%struct.State.0* %0, i64 %121, %struct.Memory.31* %call2_4009af)
[0x563d69c9bd60]:   %call2_4009af = tail call %struct.Memory.31* @sub_400890.polybench_alloc_data(%struct.State.0* %0, i64 %95, %struct.Memory.31* %call2_40099a)
[0x563d69c9d230]:   %call2_40099a = tail call %struct.Memory.31* @sub_400890.polybench_alloc_data(%struct.State.0* %0, i64 %83, %struct.Memory.31* %call2_400985)
[0x563d69c9d4a0]:   %call2_400985 = tail call %struct.Memory.31* @sub_400890.polybench_alloc_data(%struct.State.0* %0, i64 %71, %struct.Memory.31* %2)
Multiple matches exist for [0x563d69b49388]:   %317 = tail call fastcc %struct.Memory* @ext_602108_free(%struct.State* nonnull %0, %struct.Memory* %305)
[0x563d69c7f3b0]:   %call2_4009d6 = tail call %struct.Memory.31* @sub_400ae0.kernel_jacobi_1d_imper(%struct.State.0* %0, i64 %146, %struct.Memory.31* %call2_4009c3)
[0x563d69c85420]:   %271 = tail call %struct.Memory.31* @__remill_function_call(%struct.State.0* nonnull %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory.31* %259)
[0x563d69c85680]:   %259 = tail call %struct.Memory.31* @__remill_function_call(%struct.State.0* nonnull %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory.31* %call2_400a2a)
[0x563d69c857b0]:   %call2_400a2a = tail call %struct.Memory.31* @sub_400cc0.print_array(%struct.State.0* nonnull %0, i64 %243, %struct.Memory.31* %call2_400a09)
[0x563d69c85a10]:   %call2_400a09 = tail call %struct.Memory.31* @sub_400bd0.check_FP(%struct.State.0* %0, i64 %211, %struct.Memory.31* %call2_4009f9)
[0x563d69c85c70]:   %call2_4009f9 = tail call %struct.Memory.31* @sub_400ae0.kernel_jacobi_1d_imper(%struct.State.0* %0, i64 %191, %struct.Memory.31* %call2_4009e6)
[0x563d69c85ed0]:   %call2_4009e6 = tail call %struct.Memory.31* @sub_400a60.init_array(%struct.State.0* %0, i64 %166, %struct.Memory.31* %call2_4009d6)
[0x563d69c98b60]:   %call2_4009c3 = tail call %struct.Memory.31* @sub_400a60.init_array(%struct.State.0* %0, i64 %121, %struct.Memory.31* %call2_4009af)
[0x563d69c9bd60]:   %call2_4009af = tail call %struct.Memory.31* @sub_400890.polybench_alloc_data(%struct.State.0* %0, i64 %95, %struct.Memory.31* %call2_40099a)
[0x563d69c9d230]:   %call2_40099a = tail call %struct.Memory.31* @sub_400890.polybench_alloc_data(%struct.State.0* %0, i64 %83, %struct.Memory.31* %call2_400985)
[0x563d69c9d4a0]:   %call2_400985 = tail call %struct.Memory.31* @sub_400890.polybench_alloc_data(%struct.State.0* %0, i64 %71, %struct.Memory.31* %2)
Iso Match NOT Found
Writing 'sub_400950_main-mcsema-diff.dot'...
Writing 'sub_400950_main-mcsema-diff.dot':Done

Writing 'main-proposed-diff.dot'...
Writing 'main-proposed-diff.dot':Done

Reading LLVM: ../binary/test.mcsema.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [main] from ../binary/test.mcsema.opt.ll
Extracting function [main] from mcsema/test.proposed.opt.ll
Matcher Done...
12.14user 18.78system 0:31.21elapsed 99%CPU (0avgtext+0avgdata 14248maxresident)k
0inputs+4208outputs (0major+2304minor)pagefaults 0swaps
