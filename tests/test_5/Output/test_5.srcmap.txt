========================================================
Source line mapping for function: sub_c0
========================================================

1 :   %R15_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
2 :   %STACK_LIMIT_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
3 :   %STACK_BASE_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
4 :   %XMM15_val = alloca i128, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
5 :   %XMM14_val = alloca i128, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
6 :   %XMM13_val = alloca i128, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
7 :   %XMM12_val = alloca i128, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
8 :   %XMM11_val = alloca i128, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
9 :   %XMM10_val = alloca i128, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
10 :   %XMM9_val = alloca i128, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
11 :   %XMM8_val = alloca i128, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
12 :   %XMM7_val = alloca i128, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
13 :   %XMM6_val = alloca i128, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
14 :   %XMM5_val = alloca i128, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
15 :   %XMM4_val = alloca i128, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
16 :   %XMM3_val = alloca i128, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
17 :   %XMM2_val = alloca i128, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
18 :   %XMM1_val = alloca i128, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
19 :   %XMM0_val = alloca i128, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
20 :   %FPU_LASTDATA_OFF_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
21 :   %FPU_LASTDATA_SEG_val = alloca i16, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
22 :   %FPU_LASTIP_OFF_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
23 :   %FPU_LASTIP_SEG_val = alloca i16, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
24 :   %FPU_TAG_val = alloca [8 x i2], !mcsema_real_eip !2 :          <c0>	pushq	%rbp
25 :   %FPU_IM_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
26 :   %FPU_DM_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
27 :   %FPU_ZM_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
28 :   %FPU_OM_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
29 :   %FPU_UM_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
30 :   %FPU_PM_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
31 :   %FPU_PC_val = alloca i2, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
32 :   %FPU_RC_val = alloca i2, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
33 :   %FPU_X_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
34 :   %FPU_IE_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
35 :   %FPU_DE_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
36 :   %FPU_ZE_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
37 :   %FPU_OE_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
38 :   %FPU_UE_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
39 :   %FPU_PE_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
40 :   %FPU_SF_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
41 :   %FPU_ES_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
42 :   %FPU_C0_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
43 :   %FPU_C1_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
44 :   %FPU_C2_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
45 :   %FPU_TOP_val = alloca i3, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
46 :   %FPU_C3_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
47 :   %FPU_B_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
48 :   %STi_val = alloca [8 x x86_fp80], !mcsema_real_eip !2 :          <c0>	pushq	%rbp
49 :   %DF_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
50 :   %OF_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
51 :   %SF_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
52 :   %CF_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
53 :   %AF_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
54 :   %PF_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
55 :   %ZF_val = alloca i1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
56 :   %RIP_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
57 :   %R14_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
58 :   %R13_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
59 :   %R12_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
60 :   %R11_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
61 :   %R10_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
62 :   %R9_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
63 :   %R8_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
64 :   %RSP_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
65 :   %RBP_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
66 :   %RDI_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
67 :   %RSI_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
68 :   %RDX_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
69 :   %RCX_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
70 :   %RBX_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
71 :   %RAX_val = alloca i64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
72 :   %RAX = getelementptr inbounds %struct.regs* %0, i64 0, i32 0, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
73 :   %1 = load i64* %RAX, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
74 :   store i64 %1, i64* %RAX_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
75 :   %RBX = getelementptr inbounds %struct.regs* %0, i64 0, i32 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
76 :   %2 = load i64* %RBX, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
77 :   store i64 %2, i64* %RBX_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
78 :   %RCX = getelementptr inbounds %struct.regs* %0, i64 0, i32 2, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
79 :   %3 = load i64* %RCX, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
80 :   store i64 %3, i64* %RCX_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
81 :   %RDX = getelementptr inbounds %struct.regs* %0, i64 0, i32 3, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
82 :   %4 = load i64* %RDX, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
83 :   store i64 %4, i64* %RDX_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
84 :   %RSI = getelementptr inbounds %struct.regs* %0, i64 0, i32 4, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
85 :   %5 = load i64* %RSI, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
86 :   store i64 %5, i64* %RSI_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
87 :   %RDI = getelementptr inbounds %struct.regs* %0, i64 0, i32 5, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
88 :   %6 = load i64* %RDI, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
89 :   store i64 %6, i64* %RDI_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
90 :   %RSP = getelementptr inbounds %struct.regs* %0, i64 0, i32 6, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
91 :   %7 = load i64* %RSP, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
92 :   store i64 %7, i64* %RSP_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
93 :   %RBP = getelementptr inbounds %struct.regs* %0, i64 0, i32 7, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
94 :   %8 = load i64* %RBP, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
95 :   store i64 %8, i64* %RBP_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
96 :   %R8 = getelementptr inbounds %struct.regs* %0, i64 0, i32 8, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
97 :   %9 = load i64* %R8, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
98 :   store i64 %9, i64* %R8_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
99 :   %R9 = getelementptr inbounds %struct.regs* %0, i64 0, i32 9, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
100 :   %10 = load i64* %R9, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
101 :   store i64 %10, i64* %R9_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
102 :   %R10 = getelementptr inbounds %struct.regs* %0, i64 0, i32 10, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
103 :   %11 = load i64* %R10, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
104 :   store i64 %11, i64* %R10_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
105 :   %R11 = getelementptr inbounds %struct.regs* %0, i64 0, i32 11, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
106 :   %12 = load i64* %R11, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
107 :   store i64 %12, i64* %R11_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
108 :   %R12 = getelementptr inbounds %struct.regs* %0, i64 0, i32 12, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
109 :   %13 = load i64* %R12, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
110 :   store i64 %13, i64* %R12_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
111 :   %R13 = getelementptr inbounds %struct.regs* %0, i64 0, i32 13, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
112 :   %14 = load i64* %R13, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
113 :   store i64 %14, i64* %R13_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
114 :   %R14 = getelementptr inbounds %struct.regs* %0, i64 0, i32 14, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
115 :   %15 = load i64* %R14, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
116 :   store i64 %15, i64* %R14_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
117 :   %R15 = getelementptr inbounds %struct.regs* %0, i64 0, i32 15, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
118 :   %16 = load i64* %R15, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
119 :   store i64 %16, i64* %R15_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
120 :   %RIP = getelementptr inbounds %struct.regs* %0, i64 0, i32 16, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
121 :   %17 = load i64* %RIP, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
122 :   store i64 %17, i64* %RIP_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
123 :   %CF = getelementptr inbounds %struct.regs* %0, i64 0, i32 17, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
124 :   %18 = load i1* %CF, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
125 :   store i1 %18, i1* %CF_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
126 :   %PF = getelementptr inbounds %struct.regs* %0, i64 0, i32 18, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
127 :   %19 = load i1* %PF, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
128 :   store i1 %19, i1* %PF_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
129 :   %AF = getelementptr inbounds %struct.regs* %0, i64 0, i32 19, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
130 :   %20 = load i1* %AF, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
131 :   store i1 %20, i1* %AF_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
132 :   %ZF = getelementptr inbounds %struct.regs* %0, i64 0, i32 20, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
133 :   %21 = load i1* %ZF, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
134 :   store i1 %21, i1* %ZF_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
135 :   %SF = getelementptr inbounds %struct.regs* %0, i64 0, i32 21, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
136 :   %22 = load i1* %SF, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
137 :   store i1 %22, i1* %SF_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
138 :   %OF = getelementptr inbounds %struct.regs* %0, i64 0, i32 22, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
139 :   %23 = load i1* %OF, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
140 :   store i1 %23, i1* %OF_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
141 :   %DF = getelementptr inbounds %struct.regs* %0, i64 0, i32 23, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
142 :   %24 = load i1* %DF, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
143 :   store i1 %24, i1* %DF_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
144 :   %25 = getelementptr inbounds %struct.regs* %0, i64 0, i32 24, i64 0, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
145 :   %26 = bitcast x86_fp80* %25 to i8*, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
146 :   %27 = bitcast [8 x x86_fp80]* %STi_val to i8*, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
147 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %27, i8* %26, i32 128, i32 4, i1 false), !mcsema_real_eip !2 :          <c0>	pushq	%rbp
148 :   %FPU_B = getelementptr inbounds %struct.regs* %0, i64 0, i32 25, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
149 :   %28 = load i1* %FPU_B, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
150 :   store i1 %28, i1* %FPU_B_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
151 :   %FPU_C3 = getelementptr inbounds %struct.regs* %0, i64 0, i32 26, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
152 :   %29 = load i1* %FPU_C3, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
153 :   store i1 %29, i1* %FPU_C3_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
154 :   %FPU_TOP = getelementptr inbounds %struct.regs* %0, i64 0, i32 27, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
155 :   %30 = load i3* %FPU_TOP, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
156 :   store i3 %30, i3* %FPU_TOP_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
157 :   %FPU_C2 = getelementptr inbounds %struct.regs* %0, i64 0, i32 28, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
158 :   %31 = load i1* %FPU_C2, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
159 :   store i1 %31, i1* %FPU_C2_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
160 :   %FPU_C1 = getelementptr inbounds %struct.regs* %0, i64 0, i32 29, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
161 :   %32 = load i1* %FPU_C1, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
162 :   store i1 %32, i1* %FPU_C1_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
163 :   %FPU_C0 = getelementptr inbounds %struct.regs* %0, i64 0, i32 30, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
164 :   %33 = load i1* %FPU_C0, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
165 :   store i1 %33, i1* %FPU_C0_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
166 :   %FPU_ES = getelementptr inbounds %struct.regs* %0, i64 0, i32 31, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
167 :   %34 = load i1* %FPU_ES, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
168 :   store i1 %34, i1* %FPU_ES_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
169 :   %FPU_SF = getelementptr inbounds %struct.regs* %0, i64 0, i32 32, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
170 :   %35 = load i1* %FPU_SF, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
171 :   store i1 %35, i1* %FPU_SF_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
172 :   %FPU_PE = getelementptr inbounds %struct.regs* %0, i64 0, i32 33, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
173 :   %36 = load i1* %FPU_PE, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
174 :   store i1 %36, i1* %FPU_PE_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
175 :   %FPU_UE = getelementptr inbounds %struct.regs* %0, i64 0, i32 34, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
176 :   %37 = load i1* %FPU_UE, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
177 :   store i1 %37, i1* %FPU_UE_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
178 :   %FPU_OE = getelementptr inbounds %struct.regs* %0, i64 0, i32 35, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
179 :   %38 = load i1* %FPU_OE, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
180 :   store i1 %38, i1* %FPU_OE_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
181 :   %FPU_ZE = getelementptr inbounds %struct.regs* %0, i64 0, i32 36, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
182 :   %39 = load i1* %FPU_ZE, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
183 :   store i1 %39, i1* %FPU_ZE_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
184 :   %FPU_DE = getelementptr inbounds %struct.regs* %0, i64 0, i32 37, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
185 :   %40 = load i1* %FPU_DE, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
186 :   store i1 %40, i1* %FPU_DE_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
187 :   %FPU_IE = getelementptr inbounds %struct.regs* %0, i64 0, i32 38, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
188 :   %41 = load i1* %FPU_IE, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
189 :   store i1 %41, i1* %FPU_IE_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
190 :   %FPU_X = getelementptr inbounds %struct.regs* %0, i64 0, i32 39, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
191 :   %42 = load i1* %FPU_X, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
192 :   store i1 %42, i1* %FPU_X_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
193 :   %FPU_RC = getelementptr inbounds %struct.regs* %0, i64 0, i32 40, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
194 :   %43 = load i2* %FPU_RC, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
195 :   store i2 %43, i2* %FPU_RC_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
196 :   %FPU_PC = getelementptr inbounds %struct.regs* %0, i64 0, i32 41, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
197 :   %44 = load i2* %FPU_PC, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
198 :   store i2 %44, i2* %FPU_PC_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
199 :   %FPU_PM = getelementptr inbounds %struct.regs* %0, i64 0, i32 42, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
200 :   %45 = load i1* %FPU_PM, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
201 :   store i1 %45, i1* %FPU_PM_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
202 :   %FPU_UM = getelementptr inbounds %struct.regs* %0, i64 0, i32 43, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
203 :   %46 = load i1* %FPU_UM, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
204 :   store i1 %46, i1* %FPU_UM_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
205 :   %FPU_OM = getelementptr inbounds %struct.regs* %0, i64 0, i32 44, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
206 :   %47 = load i1* %FPU_OM, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
207 :   store i1 %47, i1* %FPU_OM_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
208 :   %FPU_ZM = getelementptr inbounds %struct.regs* %0, i64 0, i32 45, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
209 :   %48 = load i1* %FPU_ZM, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
210 :   store i1 %48, i1* %FPU_ZM_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
211 :   %FPU_DM = getelementptr inbounds %struct.regs* %0, i64 0, i32 46, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
212 :   %49 = load i1* %FPU_DM, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
213 :   store i1 %49, i1* %FPU_DM_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
214 :   %FPU_IM = getelementptr inbounds %struct.regs* %0, i64 0, i32 47, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
215 :   %50 = load i1* %FPU_IM, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
216 :   store i1 %50, i1* %FPU_IM_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
217 :   %51 = getelementptr inbounds %struct.regs* %0, i64 0, i32 48, i64 0, !mcsema_real_eip !2 :          <c0>	pushq	%rbp

218 :   %52 = bitcast i8* %51 to i64* : NIL
219 :   %53 = bitcast [8 x i2]* %FPU_TAG_val to i64* : NIL
220 :   %54 = load i64* %52, align 4 : NIL
221 :   store i64 %54, i64* %53, align 4 : NIL

222 :   %FPU_LASTIP_SEG = getelementptr inbounds %struct.regs* %0, i64 0, i32 49, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
223 :   %55 = load i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
224 :   store i16 %55, i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
225 :   %FPU_LASTIP_OFF = getelementptr inbounds %struct.regs* %0, i64 0, i32 50, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
226 :   %56 = load i64* %FPU_LASTIP_OFF, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
227 :   store i64 %56, i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
228 :   %FPU_LASTDATA_SEG = getelementptr inbounds %struct.regs* %0, i64 0, i32 51, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
229 :   %57 = load i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
230 :   store i16 %57, i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
231 :   %FPU_LASTDATA_OFF = getelementptr inbounds %struct.regs* %0, i64 0, i32 52, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
232 :   %58 = load i64* %FPU_LASTDATA_OFF, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
233 :   store i64 %58, i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
234 :   %XMM0 = getelementptr inbounds %struct.regs* %0, i64 0, i32 54, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
235 :   %59 = load i128* %XMM0, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
236 :   store i128 %59, i128* %XMM0_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
237 :   %XMM1 = getelementptr inbounds %struct.regs* %0, i64 0, i32 55, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
238 :   %60 = load i128* %XMM1, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
239 :   store i128 %60, i128* %XMM1_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
240 :   %XMM2 = getelementptr inbounds %struct.regs* %0, i64 0, i32 56, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
241 :   %61 = load i128* %XMM2, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
242 :   store i128 %61, i128* %XMM2_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
243 :   %XMM3 = getelementptr inbounds %struct.regs* %0, i64 0, i32 57, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
244 :   %62 = load i128* %XMM3, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
245 :   store i128 %62, i128* %XMM3_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
246 :   %XMM4 = getelementptr inbounds %struct.regs* %0, i64 0, i32 58, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
247 :   %63 = load i128* %XMM4, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
248 :   store i128 %63, i128* %XMM4_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
249 :   %XMM5 = getelementptr inbounds %struct.regs* %0, i64 0, i32 59, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
250 :   %64 = load i128* %XMM5, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
251 :   store i128 %64, i128* %XMM5_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
252 :   %XMM6 = getelementptr inbounds %struct.regs* %0, i64 0, i32 60, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
253 :   %65 = load i128* %XMM6, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
254 :   store i128 %65, i128* %XMM6_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
255 :   %XMM7 = getelementptr inbounds %struct.regs* %0, i64 0, i32 61, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
256 :   %66 = load i128* %XMM7, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
257 :   store i128 %66, i128* %XMM7_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
258 :   %XMM8 = getelementptr inbounds %struct.regs* %0, i64 0, i32 62, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
259 :   %67 = load i128* %XMM8, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
260 :   store i128 %67, i128* %XMM8_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
261 :   %XMM9 = getelementptr inbounds %struct.regs* %0, i64 0, i32 63, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
262 :   %68 = load i128* %XMM9, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
263 :   store i128 %68, i128* %XMM9_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
264 :   %XMM10 = getelementptr inbounds %struct.regs* %0, i64 0, i32 64, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
265 :   %69 = load i128* %XMM10, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
266 :   store i128 %69, i128* %XMM10_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
267 :   %XMM11 = getelementptr inbounds %struct.regs* %0, i64 0, i32 65, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
268 :   %70 = load i128* %XMM11, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
269 :   store i128 %70, i128* %XMM11_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
270 :   %XMM12 = getelementptr inbounds %struct.regs* %0, i64 0, i32 66, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
271 :   %71 = load i128* %XMM12, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
272 :   store i128 %71, i128* %XMM12_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
273 :   %XMM13 = getelementptr inbounds %struct.regs* %0, i64 0, i32 67, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
274 :   %72 = load i128* %XMM13, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
275 :   store i128 %72, i128* %XMM13_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
276 :   %XMM14 = getelementptr inbounds %struct.regs* %0, i64 0, i32 68, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
277 :   %73 = load i128* %XMM14, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
278 :   store i128 %73, i128* %XMM14_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
279 :   %XMM15 = getelementptr inbounds %struct.regs* %0, i64 0, i32 69, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
280 :   %74 = load i128* %XMM15, align 1, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
281 :   store i128 %74, i128* %XMM15_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
282 :   %STACK_BASE = getelementptr inbounds %struct.regs* %0, i64 0, i32 70, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
283 :   %75 = load i64* %STACK_BASE, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
284 :   store i64 %75, i64* %STACK_BASE_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
285 :   %STACK_LIMIT = getelementptr inbounds %struct.regs* %0, i64 0, i32 71, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
286 :   %76 = load i64* %STACK_LIMIT, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
287 :   store i64 %76, i64* %STACK_LIMIT_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
288 :   %77 = load i64* %RBP_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
289 :   %78 = load i64* %RSP_val, !mcsema_real_eip !2 :          <c0>	pushq	%rbp

290 :   %79 = add i64 %78, -8 : NIL

291 :   %80 = inttoptr i64 %79 to i64*, !mcsema_real_eip !2 :          <c0>	pushq	%rbp
292 :   store i64 %77, i64* %80, !mcsema_real_eip !2 :          <c0>	pushq	%rbp

293 :   store i64 %79, i64* %RBP_val, !mcsema_real_eip !3 :          <c1>	movq	%rsp, %rbp

294 :   %81 = add i64 %78, -136 : NIL

295 :   %82 = xor i64 %81, %79, !mcsema_real_eip !4 :          <c4>	subq	$128, %rsp
296 :   %83 = and i64 %82, 16, !mcsema_real_eip !4 :          <c4>	subq	$128, %rsp
297 :   %84 = icmp ne i64 %83, 0, !mcsema_real_eip !4 :          <c4>	subq	$128, %rsp
298 :   store i1 %84, i1* %AF_val, !mcsema_real_eip !4 :          <c4>	subq	$128, %rsp
299 :   %85 = trunc i64 %81 to i8, !mcsema_real_eip !4 :          <c4>	subq	$128, %rsp
300 :   %86 = tail call i8 @llvm.ctpop.i8(i8 %85), !mcsema_real_eip !4 :          <c4>	subq	$128, %rsp

301 :   %87 = and i8 %86, 1 : NIL
302 :   %88 = icmp eq i8 %87, 0 : NIL

303 :   store i1 %88, i1* %PF_val, !mcsema_real_eip !4 :          <c4>	subq	$128, %rsp
304 :   %89 = icmp eq i64 %81, 0, !mcsema_real_eip !4 :          <c4>	subq	$128, %rsp
305 :   store i1 %89, i1* %ZF_val, !mcsema_real_eip !4 :          <c4>	subq	$128, %rsp

306 :   %90 = icmp slt i64 %81, 0 : NIL

307 :   store i1 %90, i1* %SF_val, !mcsema_real_eip !4 :          <c4>	subq	$128, %rsp
308 :   %91 = icmp ult i64 %79, 128, !mcsema_real_eip !4 :          <c4>	subq	$128, %rsp
309 :   store i1 %91, i1* %CF_val, !mcsema_real_eip !4 :          <c4>	subq	$128, %rsp
310 :   %92 = and i64 %82, %79, !mcsema_real_eip !4 :          <c4>	subq	$128, %rsp

311 :   %93 = icmp slt i64 %92, 0 : NIL

312 :   store i1 %93, i1* %OF_val, !mcsema_real_eip !4 :          <c4>	subq	$128, %rsp
313 :   store i64 %81, i64* %RSP_val, !mcsema_real_eip !4 :          <c4>	subq	$128, %rsp

314 :   store i64 0, i64* %RAX_val, !mcsema_real_eip !5 :          <cb>	movl	$0, %eax

315 :   store i64 28, i64* %RDX_val, !mcsema_real_eip !6 :          <d0>	movabsq	$28, %rdx

316 :   %94 = load i64* %RBP_val, !mcsema_real_eip !7 :          <da>	leaq	-64(%rbp), %rcx
317 :   %95 = add i64 %94, -64, !mcsema_real_eip !7 :          <da>	leaq	-64(%rbp), %rcx
318 :   %96 = inttoptr i64 %95 to i64*, !mcsema_real_eip !7 :          <da>	leaq	-64(%rbp), %rcx
319 :   %97 = ptrtoint i64* %96 to i64, !mcsema_real_eip !7 :          <da>	leaq	-64(%rbp), %rcx
320 :   store i64 %97, i64* %RCX_val, !mcsema_real_eip !7 :          <da>	leaq	-64(%rbp), %rcx

321 :   store i64 ptrtoint (%0* @data_0x3b2 to i64), i64* %R8_val, !mcsema_real_eip !8 :          <de>	movabsq	$0, %r8

322 :   %98 = add i64 %94, -4, !mcsema_real_eip !9 :          <e8>	movl	$0, -4(%rbp)
323 :   %99 = inttoptr i64 %98 to i64*, !mcsema_real_eip !9 :          <e8>	movl	$0, -4(%rbp)

324 :   %100 = bitcast i64* %99 to i32* : NIL

325 :   store i32 0, i32* %100, !mcsema_real_eip !9 :          <e8>	movl	$0, -4(%rbp)

326 :   %101 = load i64* %RBP_val, !mcsema_real_eip !10 :          <ef>	movl	%edi, -8(%rbp)
327 :   %102 = add i64 %101, -8, !mcsema_real_eip !10 :          <ef>	movl	%edi, -8(%rbp)
328 :   %103 = inttoptr i64 %102 to i64*, !mcsema_real_eip !10 :          <ef>	movl	%edi, -8(%rbp)
329 :   %104 = load i64* %RDI_val, !mcsema_real_eip !10 :          <ef>	movl	%edi, -8(%rbp)
330 :   %105 = trunc i64 %104 to i32, !mcsema_real_eip !10 :          <ef>	movl	%edi, -8(%rbp)

331 :   %106 = bitcast i64* %103 to i32* : NIL

332 :   store i32 %105, i32* %106, !mcsema_real_eip !10 :          <ef>	movl	%edi, -8(%rbp)

333 :   %107 = load i64* %RBP_val, !mcsema_real_eip !11 :          <f2>	movq	%rsi, -16(%rbp)
334 :   %108 = add i64 %107, -16, !mcsema_real_eip !11 :          <f2>	movq	%rsi, -16(%rbp)
335 :   %109 = inttoptr i64 %108 to i64*, !mcsema_real_eip !11 :          <f2>	movq	%rsi, -16(%rbp)
336 :   %110 = load i64* %RSI_val, !mcsema_real_eip !11 :          <f2>	movq	%rsi, -16(%rbp)
337 :   store i64 %110, i64* %109, !mcsema_real_eip !11 :          <f2>	movq	%rsi, -16(%rbp)

338 :   %111 = load i64* %RBP_val, !mcsema_real_eip !12 :          <f6>	movl	$0, -36(%rbp)
339 :   %112 = add i64 %111, -36, !mcsema_real_eip !12 :          <f6>	movl	$0, -36(%rbp)
340 :   %113 = inttoptr i64 %112 to i64*, !mcsema_real_eip !12 :          <f6>	movl	$0, -36(%rbp)

341 :   %114 = bitcast i64* %113 to i32* : NIL

342 :   store i32 0, i32* %114, !mcsema_real_eip !12 :          <f6>	movl	$0, -36(%rbp)

343 :   %115 = load i64* %RBP_val, !mcsema_real_eip !13 :          <fd>	movl	$1, -20(%rbp)
344 :   %116 = add i64 %115, -20, !mcsema_real_eip !13 :          <fd>	movl	$1, -20(%rbp)
345 :   %117 = inttoptr i64 %116 to i64*, !mcsema_real_eip !13 :          <fd>	movl	$1, -20(%rbp)

346 :   %118 = bitcast i64* %117 to i32* : NIL

347 :   store i32 1, i32* %118, !mcsema_real_eip !13 :          <fd>	movl	$1, -20(%rbp)

348 :   %119 = load i64* %RBP_val, !mcsema_real_eip !14 :          <104>	movl	$1, -24(%rbp)
349 :   %120 = add i64 %119, -24, !mcsema_real_eip !14 :          <104>	movl	$1, -24(%rbp)
350 :   %121 = inttoptr i64 %120 to i64*, !mcsema_real_eip !14 :          <104>	movl	$1, -24(%rbp)

351 :   %122 = bitcast i64* %121 to i32* : NIL

352 :   store i32 1, i32* %122, !mcsema_real_eip !14 :          <104>	movl	$1, -24(%rbp)

353 :   %123 = load i64* %RBP_val, !mcsema_real_eip !15 :          <10b>	movslq	-20(%rbp), %rsi
354 :   %124 = add i64 %123, -20, !mcsema_real_eip !15 :          <10b>	movslq	-20(%rbp), %rsi
355 :   %125 = inttoptr i64 %124 to i64*, !mcsema_real_eip !15 :          <10b>	movslq	-20(%rbp), %rsi

356 :   %126 = bitcast i64* %125 to i32* : NIL

357 :   %127 = load i32* %126, !mcsema_real_eip !15 :          <10b>	movslq	-20(%rbp), %rsi
358 :   %128 = sext i32 %127 to i64, !mcsema_real_eip !15 :          <10b>	movslq	-20(%rbp), %rsi
359 :   store i64 %128, i64* %RSI_val, !mcsema_real_eip !15 :          <10b>	movslq	-20(%rbp), %rsi

360 :   %129 = load i64* %RBP_val, !mcsema_real_eip !16 :          <10f>	movslq	-24(%rbp), %r9
361 :   %130 = add i64 %129, -24, !mcsema_real_eip !16 :          <10f>	movslq	-24(%rbp), %r9
362 :   %131 = inttoptr i64 %130 to i64*, !mcsema_real_eip !16 :          <10f>	movslq	-24(%rbp), %r9

363 :   %132 = bitcast i64* %131 to i32* : NIL

364 :   %133 = load i32* %132, !mcsema_real_eip !16 :          <10f>	movslq	-24(%rbp), %r9
365 :   %134 = sext i32 %133 to i64, !mcsema_real_eip !16 :          <10f>	movslq	-24(%rbp), %r9

366 :   %135 = mul i64 %134, 11, !mcsema_real_eip !17 :          <113>	imulq	 $11, %r9
367 :   store i64 %135, i64* %R9_val, !mcsema_real_eip !17 :          <113>	imulq	 $11, %r9

368 :   %136 = load i64* %R8_val, !mcsema_real_eip !18 :          <11a>	addq	%r9, %r8

369 :   %uadd = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %135, i64 %136) : NIL
370 :   %137 = extractvalue { i64, i1 } %uadd, 0 : NIL

371 :   %138 = xor i64 %137, %136, !mcsema_real_eip !18 :          <11a>	addq	%r9, %r8
372 :   %139 = xor i64 %138, %135, !mcsema_real_eip !18 :          <11a>	addq	%r9, %r8
373 :   %140 = and i64 %139, 16, !mcsema_real_eip !18 :          <11a>	addq	%r9, %r8
374 :   %141 = icmp ne i64 %140, 0, !mcsema_real_eip !18 :          <11a>	addq	%r9, %r8
375 :   store i1 %141, i1* %AF_val, !mcsema_real_eip !18 :          <11a>	addq	%r9, %r8

376 :   %142 = icmp slt i64 %137, 0 : NIL

377 :   store i1 %142, i1* %SF_val, !mcsema_real_eip !18 :          <11a>	addq	%r9, %r8
378 :   %143 = icmp eq i64 %137, 0, !mcsema_real_eip !18 :          <11a>	addq	%r9, %r8
379 :   store i1 %143, i1* %ZF_val, !mcsema_real_eip !18 :          <11a>	addq	%r9, %r8
380 :   %144 = xor i64 %136, -9223372036854775808, !mcsema_real_eip !18 :          <11a>	addq	%r9, %r8
381 :   %145 = xor i64 %144, %135, !mcsema_real_eip !18 :          <11a>	addq	%r9, %r8
382 :   %146 = and i64 %138, %145, !mcsema_real_eip !18 :          <11a>	addq	%r9, %r8

383 :   %147 = icmp slt i64 %146, 0 : NIL

384 :   store i1 %147, i1* %OF_val, !mcsema_real_eip !18 :          <11a>	addq	%r9, %r8
385 :   %148 = trunc i64 %137 to i8, !mcsema_real_eip !18 :          <11a>	addq	%r9, %r8
386 :   %149 = tail call i8 @llvm.ctpop.i8(i8 %148), !mcsema_real_eip !18 :          <11a>	addq	%r9, %r8

387 :   %150 = and i8 %149, 1 : NIL
388 :   %151 = icmp eq i8 %150, 0 : NIL

389 :   store i1 %151, i1* %PF_val, !mcsema_real_eip !18 :          <11a>	addq	%r9, %r8

390 :   %152 = extractvalue { i64, i1 } %uadd, 1 : NIL

391 :   store i1 %152, i1* %CF_val, !mcsema_real_eip !18 :          <11a>	addq	%r9, %r8
392 :   store i64 %137, i64* %R8_val, !mcsema_real_eip !18 :          <11a>	addq	%r9, %r8

393 :   %153 = load i64* %RSI_val, !mcsema_real_eip !19 :          <11d>	movb	$88, (%r8,%rsi)
394 :   %154 = add i64 %153, %137, !mcsema_real_eip !19 :          <11d>	movb	$88, (%r8,%rsi)
395 :   %155 = inttoptr i64 %154 to i64*, !mcsema_real_eip !19 :          <11d>	movb	$88, (%r8,%rsi)

396 :   %156 = bitcast i64* %155 to i8* : NIL

397 :   store i8 88, i8* %156, !mcsema_real_eip !19 :          <11d>	movb	$88, (%r8,%rsi)

398 :   %157 = load i64* %RAX_val, !mcsema_real_eip !20 :          <122>	movl	%eax, %edi

399 :   %158 = and i64 %157, 4294967295 : NIL

400 :   store i64 %158, i64* %RDI_val, !mcsema_real_eip !20 :          <122>	movl	%eax, %edi

401 :   %159 = load i64* %RCX_val, !mcsema_real_eip !21 :          <124>	movq	%rcx, %rsi
402 :   store i64 %159, i64* %RSI_val, !mcsema_real_eip !21 :          <124>	movq	%rcx, %rsi

403 :   %160 = load i64* %RDX_val, !mcsema_real_eip !22 :          <127>	callq	0
404 :   %161 = tail call x86_64_sysvcc i64 @read(i64 %158, i64 %159, i64 %160), !mcsema_real_eip !22 :          <127>	callq	0
405 :   store i64 %161, i64* %RAX_val, !mcsema_real_eip !22 :          <127>	callq	0

406 :   %162 = load i64* %RBP_val, !mcsema_real_eip !23 :          <12c>	movq	%rax, -72(%rbp)
407 :   %163 = add i64 %162, -72, !mcsema_real_eip !23 :          <12c>	movq	%rax, -72(%rbp)
408 :   %164 = inttoptr i64 %163 to i64*, !mcsema_real_eip !23 :          <12c>	movq	%rax, -72(%rbp)
409 :   store i64 %161, i64* %164, !mcsema_real_eip !23 :          <12c>	movq	%rax, -72(%rbp)

410 :   %165 = load i64* %RBP_val, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)
411 :   %166 = add i64 %165, -36, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)
412 :   %167 = inttoptr i64 %166 to i64*, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)

413 :   %168 = bitcast i64* %167 to i32* : NIL

414 :   %169 = load i32* %168, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)

415 :   %170 = add i32 %169, -28 : NIL

416 :   %171 = xor i32 %170, %169, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)

417 :   %172 = and i32 %171, 16 : NIL
418 :   %173 = icmp eq i32 %172, 0 : NIL

419 :   store i1 %173, i1* %AF_val, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)
420 :   %174 = trunc i32 %170 to i8, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)
421 :   %175 = tail call i8 @llvm.ctpop.i8(i8 %174), !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)

422 :   %176 = and i8 %175, 1 : NIL
423 :   %177 = icmp eq i8 %176, 0 : NIL

424 :   store i1 %177, i1* %PF_val, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)
425 :   %178 = icmp eq i32 %170, 0, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)
426 :   store i1 %178, i1* %ZF_val, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)

427 :   %179 = icmp slt i32 %170, 0 : NIL

428 :   store i1 %179, i1* %SF_val, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)
429 :   %180 = icmp ult i32 %169, 28, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)
430 :   store i1 %180, i1* %CF_val, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)
431 :   %181 = and i32 %171, %169, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)

432 :   %182 = icmp slt i32 %181, 0 : NIL

433 :   store i1 %182, i1* %OF_val, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)

434 :   %tmp = xor i1 %179, %182 : NIL

435 :   br i1 %tmp, label %block_0x13d.preheader, label %block_0x390, !mcsema_real_eip !25 :          <137>	jge	595

436 :   br label %block_0x13d : NIL
437 :   br label %block_0x390 : NIL

438 :   store i64 add (i64 ptrtoint (%1* @data_0x3ff to i64), i64 85), i64* %RDI_val, !mcsema_real_eip !26 :          <390>	movabsq	$0, %rdi

439 :   %183 = tail call x86_64_sysvcc i64 @printf(i64 add (i64 ptrtoint (%1* @data_0x3ff to i64), i64 85)), !mcsema_real_eip !27 :          <39c>	callq	0
440 :   store i64 %183, i64* %RAX_val, !mcsema_real_eip !27 :          <39c>	callq	0

441 :   %184 = load i64* %RBP_val, !mcsema_real_eip !28 :          <3a1>	movl	-4(%rbp), %ecx
442 :   %185 = add i64 %184, -4, !mcsema_real_eip !28 :          <3a1>	movl	-4(%rbp), %ecx
443 :   %186 = inttoptr i64 %185 to i64*, !mcsema_real_eip !28 :          <3a1>	movl	-4(%rbp), %ecx

444 :   %187 = bitcast i64* %186 to i32* : NIL

445 :   %188 = load i32* %187, !mcsema_real_eip !28 :          <3a1>	movl	-4(%rbp), %ecx
446 :   %189 = zext i32 %188 to i64, !mcsema_real_eip !28 :          <3a1>	movl	-4(%rbp), %ecx
447 :   store i64 %189, i64* %RCX_val, !mcsema_real_eip !28 :          <3a1>	movl	-4(%rbp), %ecx

448 :   %190 = load i64* %RBP_val, !mcsema_real_eip !29 :          <3a4>	movl	%eax, -124(%rbp)
449 :   %191 = add i64 %190, -124, !mcsema_real_eip !29 :          <3a4>	movl	%eax, -124(%rbp)
450 :   %192 = inttoptr i64 %191 to i64*, !mcsema_real_eip !29 :          <3a4>	movl	%eax, -124(%rbp)
451 :   %193 = load i64* %RAX_val, !mcsema_real_eip !29 :          <3a4>	movl	%eax, -124(%rbp)
452 :   %194 = trunc i64 %193 to i32, !mcsema_real_eip !29 :          <3a4>	movl	%eax, -124(%rbp)

453 :   %195 = bitcast i64* %192 to i32* : NIL

454 :   store i32 %194, i32* %195, !mcsema_real_eip !29 :          <3a4>	movl	%eax, -124(%rbp)

455 :   %196 = load i64* %RCX_val, !mcsema_real_eip !30 :          <3a7>	movl	%ecx, %eax

456 :   %197 = and i64 %196, 4294967295 : NIL

457 :   store i64 %197, i64* %RAX_val, !mcsema_real_eip !30 :          <3a7>	movl	%ecx, %eax

458 :   %198 = load i64* %RSP_val, !mcsema_real_eip !31 :          <3a9>	addq	$128, %rsp

459 :   %uadd365 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %198, i64 128) : NIL
460 :   %199 = extractvalue { i64, i1 } %uadd365, 0 : NIL

461 :   %200 = xor i64 %199, %198, !mcsema_real_eip !31 :          <3a9>	addq	$128, %rsp
462 :   %201 = and i64 %200, 16, !mcsema_real_eip !31 :          <3a9>	addq	$128, %rsp
463 :   %202 = icmp ne i64 %201, 0, !mcsema_real_eip !31 :          <3a9>	addq	$128, %rsp
464 :   store i1 %202, i1* %AF_val, !mcsema_real_eip !31 :          <3a9>	addq	$128, %rsp

465 :   %203 = icmp slt i64 %199, 0 : NIL

466 :   store i1 %203, i1* %SF_val, !mcsema_real_eip !31 :          <3a9>	addq	$128, %rsp
467 :   %204 = icmp eq i64 %199, 0, !mcsema_real_eip !31 :          <3a9>	addq	$128, %rsp
468 :   store i1 %204, i1* %ZF_val, !mcsema_real_eip !31 :          <3a9>	addq	$128, %rsp
469 :   %205 = xor i64 %198, -9223372036854775808, !mcsema_real_eip !31 :          <3a9>	addq	$128, %rsp
470 :   %206 = and i64 %200, %205, !mcsema_real_eip !31 :          <3a9>	addq	$128, %rsp

471 :   %207 = icmp slt i64 %206, 0 : NIL

472 :   store i1 %207, i1* %OF_val, !mcsema_real_eip !31 :          <3a9>	addq	$128, %rsp
473 :   %208 = trunc i64 %199 to i8, !mcsema_real_eip !31 :          <3a9>	addq	$128, %rsp
474 :   %209 = tail call i8 @llvm.ctpop.i8(i8 %208), !mcsema_real_eip !31 :          <3a9>	addq	$128, %rsp

475 :   %210 = and i8 %209, 1 : NIL
476 :   %211 = icmp eq i8 %210, 0 : NIL

477 :   store i1 %211, i1* %PF_val, !mcsema_real_eip !31 :          <3a9>	addq	$128, %rsp

478 :   %212 = extractvalue { i64, i1 } %uadd365, 1 : NIL

479 :   store i1 %212, i1* %CF_val, !mcsema_real_eip !31 :          <3a9>	addq	$128, %rsp
480 :   store i64 %199, i64* %RSP_val, !mcsema_real_eip !31 :          <3a9>	addq	$128, %rsp

481 :   %213 = inttoptr i64 %199 to i64*, !mcsema_real_eip !32 :          <3b0>	popq	%rbp
482 :   %214 = load i64* %213, !mcsema_real_eip !32 :          <3b0>	popq	%rbp
483 :   store i64 %214, i64* %RBP_val, !mcsema_real_eip !32 :          <3b0>	popq	%rbp

484 :   %215 = add i64 %199, 16, !mcsema_real_eip !33 :          <3b1>	retq
485 :   store i64 %215, i64* %RSP_val, !mcsema_real_eip !33 :          <3b1>	retq
486 :   %216 = load i64* %RAX_val, !mcsema_real_eip !33 :          <3b1>	retq
487 :   store i64 %216, i64* %RAX, !mcsema_real_eip !33 :          <3b1>	retq
488 :   %217 = load i64* %RBX_val, !mcsema_real_eip !33 :          <3b1>	retq
489 :   store i64 %217, i64* %RBX, !mcsema_real_eip !33 :          <3b1>	retq
490 :   %218 = load i64* %RCX_val, !mcsema_real_eip !33 :          <3b1>	retq
491 :   store i64 %218, i64* %RCX, !mcsema_real_eip !33 :          <3b1>	retq
492 :   %219 = load i64* %RDX_val, !mcsema_real_eip !33 :          <3b1>	retq
493 :   store i64 %219, i64* %RDX, !mcsema_real_eip !33 :          <3b1>	retq
494 :   %220 = load i64* %RSI_val, !mcsema_real_eip !33 :          <3b1>	retq
495 :   store i64 %220, i64* %RSI, !mcsema_real_eip !33 :          <3b1>	retq
496 :   %221 = load i64* %RDI_val, !mcsema_real_eip !33 :          <3b1>	retq
497 :   store i64 %221, i64* %RDI, !mcsema_real_eip !33 :          <3b1>	retq
498 :   %222 = load i64* %RSP_val, !mcsema_real_eip !33 :          <3b1>	retq
499 :   store i64 %222, i64* %RSP, !mcsema_real_eip !33 :          <3b1>	retq
500 :   %223 = load i64* %RBP_val, !mcsema_real_eip !33 :          <3b1>	retq
501 :   store i64 %223, i64* %RBP, !mcsema_real_eip !33 :          <3b1>	retq
502 :   %224 = load i64* %R8_val, !mcsema_real_eip !33 :          <3b1>	retq
503 :   store i64 %224, i64* %R8, !mcsema_real_eip !33 :          <3b1>	retq
504 :   %225 = load i64* %R9_val, !mcsema_real_eip !33 :          <3b1>	retq
505 :   store i64 %225, i64* %R9, !mcsema_real_eip !33 :          <3b1>	retq
506 :   %226 = load i64* %R10_val, !mcsema_real_eip !33 :          <3b1>	retq
507 :   store i64 %226, i64* %R10, !mcsema_real_eip !33 :          <3b1>	retq
508 :   %227 = load i64* %R11_val, !mcsema_real_eip !33 :          <3b1>	retq
509 :   store i64 %227, i64* %R11, !mcsema_real_eip !33 :          <3b1>	retq
510 :   %228 = load i64* %R12_val, !mcsema_real_eip !33 :          <3b1>	retq
511 :   store i64 %228, i64* %R12, !mcsema_real_eip !33 :          <3b1>	retq
512 :   %229 = load i64* %R13_val, !mcsema_real_eip !33 :          <3b1>	retq
513 :   store i64 %229, i64* %R13, !mcsema_real_eip !33 :          <3b1>	retq
514 :   %230 = load i64* %R14_val, !mcsema_real_eip !33 :          <3b1>	retq
515 :   store i64 %230, i64* %R14, !mcsema_real_eip !33 :          <3b1>	retq
516 :   %231 = load i64* %R15_val, !mcsema_real_eip !33 :          <3b1>	retq
517 :   store i64 %231, i64* %R15, !mcsema_real_eip !33 :          <3b1>	retq
518 :   %232 = load i64* %RIP_val, !mcsema_real_eip !33 :          <3b1>	retq
519 :   store i64 %232, i64* %RIP, !mcsema_real_eip !33 :          <3b1>	retq
520 :   %233 = load i1* %CF_val, !mcsema_real_eip !33 :          <3b1>	retq
521 :   store i1 %233, i1* %CF, align 1, !mcsema_real_eip !33 :          <3b1>	retq
522 :   %234 = load i1* %PF_val, !mcsema_real_eip !33 :          <3b1>	retq
523 :   store i1 %234, i1* %PF, align 1, !mcsema_real_eip !33 :          <3b1>	retq
524 :   %235 = load i1* %AF_val, !mcsema_real_eip !33 :          <3b1>	retq
525 :   store i1 %235, i1* %AF, align 1, !mcsema_real_eip !33 :          <3b1>	retq
526 :   %236 = load i1* %ZF_val, !mcsema_real_eip !33 :          <3b1>	retq
527 :   store i1 %236, i1* %ZF, align 1, !mcsema_real_eip !33 :          <3b1>	retq
528 :   %237 = load i1* %SF_val, !mcsema_real_eip !33 :          <3b1>	retq
529 :   store i1 %237, i1* %SF, align 1, !mcsema_real_eip !33 :          <3b1>	retq
530 :   %238 = load i1* %OF_val, !mcsema_real_eip !33 :          <3b1>	retq
531 :   store i1 %238, i1* %OF, align 1, !mcsema_real_eip !33 :          <3b1>	retq
532 :   %239 = load i1* %DF_val, !mcsema_real_eip !33 :          <3b1>	retq
533 :   store i1 %239, i1* %DF, align 1, !mcsema_real_eip !33 :          <3b1>	retq
534 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %26, i8* %27, i32 128, i32 8, i1 false), !mcsema_real_eip !33 :          <3b1>	retq
535 :   %240 = load i1* %FPU_B_val, !mcsema_real_eip !33 :          <3b1>	retq
536 :   store i1 %240, i1* %FPU_B, align 1, !mcsema_real_eip !33 :          <3b1>	retq
537 :   %241 = load i1* %FPU_C3_val, !mcsema_real_eip !33 :          <3b1>	retq
538 :   store i1 %241, i1* %FPU_C3, align 1, !mcsema_real_eip !33 :          <3b1>	retq
539 :   %242 = load i3* %FPU_TOP_val, !mcsema_real_eip !33 :          <3b1>	retq
540 :   store i3 %242, i3* %FPU_TOP, align 1, !mcsema_real_eip !33 :          <3b1>	retq
541 :   %243 = load i1* %FPU_C2_val, !mcsema_real_eip !33 :          <3b1>	retq
542 :   store i1 %243, i1* %FPU_C2, align 1, !mcsema_real_eip !33 :          <3b1>	retq
543 :   %244 = load i1* %FPU_C1_val, !mcsema_real_eip !33 :          <3b1>	retq
544 :   store i1 %244, i1* %FPU_C1, align 1, !mcsema_real_eip !33 :          <3b1>	retq
545 :   %245 = load i1* %FPU_C0_val, !mcsema_real_eip !33 :          <3b1>	retq
546 :   store i1 %245, i1* %FPU_C0, align 1, !mcsema_real_eip !33 :          <3b1>	retq
547 :   %246 = load i1* %FPU_ES_val, !mcsema_real_eip !33 :          <3b1>	retq
548 :   store i1 %246, i1* %FPU_ES, align 1, !mcsema_real_eip !33 :          <3b1>	retq
549 :   %247 = load i1* %FPU_SF_val, !mcsema_real_eip !33 :          <3b1>	retq
550 :   store i1 %247, i1* %FPU_SF, align 1, !mcsema_real_eip !33 :          <3b1>	retq
551 :   %248 = load i1* %FPU_PE_val, !mcsema_real_eip !33 :          <3b1>	retq
552 :   store i1 %248, i1* %FPU_PE, align 1, !mcsema_real_eip !33 :          <3b1>	retq
553 :   %249 = load i1* %FPU_UE_val, !mcsema_real_eip !33 :          <3b1>	retq
554 :   store i1 %249, i1* %FPU_UE, align 1, !mcsema_real_eip !33 :          <3b1>	retq
555 :   %250 = load i1* %FPU_OE_val, !mcsema_real_eip !33 :          <3b1>	retq
556 :   store i1 %250, i1* %FPU_OE, align 1, !mcsema_real_eip !33 :          <3b1>	retq
557 :   %251 = load i1* %FPU_ZE_val, !mcsema_real_eip !33 :          <3b1>	retq
558 :   store i1 %251, i1* %FPU_ZE, align 1, !mcsema_real_eip !33 :          <3b1>	retq
559 :   %252 = load i1* %FPU_DE_val, !mcsema_real_eip !33 :          <3b1>	retq
560 :   store i1 %252, i1* %FPU_DE, align 1, !mcsema_real_eip !33 :          <3b1>	retq
561 :   %253 = load i1* %FPU_IE_val, !mcsema_real_eip !33 :          <3b1>	retq
562 :   store i1 %253, i1* %FPU_IE, align 1, !mcsema_real_eip !33 :          <3b1>	retq
563 :   %254 = load i1* %FPU_X_val, !mcsema_real_eip !33 :          <3b1>	retq
564 :   store i1 %254, i1* %FPU_X, align 1, !mcsema_real_eip !33 :          <3b1>	retq
565 :   %255 = load i2* %FPU_RC_val, !mcsema_real_eip !33 :          <3b1>	retq
566 :   store i2 %255, i2* %FPU_RC, align 1, !mcsema_real_eip !33 :          <3b1>	retq
567 :   %256 = load i2* %FPU_PC_val, !mcsema_real_eip !33 :          <3b1>	retq
568 :   store i2 %256, i2* %FPU_PC, align 1, !mcsema_real_eip !33 :          <3b1>	retq
569 :   %257 = load i1* %FPU_PM_val, !mcsema_real_eip !33 :          <3b1>	retq
570 :   store i1 %257, i1* %FPU_PM, align 1, !mcsema_real_eip !33 :          <3b1>	retq
571 :   %258 = load i1* %FPU_UM_val, !mcsema_real_eip !33 :          <3b1>	retq
572 :   store i1 %258, i1* %FPU_UM, align 1, !mcsema_real_eip !33 :          <3b1>	retq
573 :   %259 = load i1* %FPU_OM_val, !mcsema_real_eip !33 :          <3b1>	retq
574 :   store i1 %259, i1* %FPU_OM, align 1, !mcsema_real_eip !33 :          <3b1>	retq
575 :   %260 = load i1* %FPU_ZM_val, !mcsema_real_eip !33 :          <3b1>	retq
576 :   store i1 %260, i1* %FPU_ZM, align 1, !mcsema_real_eip !33 :          <3b1>	retq
577 :   %261 = load i1* %FPU_DM_val, !mcsema_real_eip !33 :          <3b1>	retq
578 :   store i1 %261, i1* %FPU_DM, align 1, !mcsema_real_eip !33 :          <3b1>	retq
579 :   %262 = load i1* %FPU_IM_val, !mcsema_real_eip !33 :          <3b1>	retq
580 :   store i1 %262, i1* %FPU_IM, align 1, !mcsema_real_eip !33 :          <3b1>	retq

581 :   %263 = load i64* %53, align 4 : NIL
582 :   store i64 %263, i64* %52, align 4 : NIL

583 :   %264 = load i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !33 :          <3b1>	retq
584 :   store i16 %264, i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !33 :          <3b1>	retq
585 :   %265 = load i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !33 :          <3b1>	retq
586 :   store i64 %265, i64* %FPU_LASTIP_OFF, align 1, !mcsema_real_eip !33 :          <3b1>	retq
587 :   %266 = load i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !33 :          <3b1>	retq
588 :   store i16 %266, i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !33 :          <3b1>	retq
589 :   %267 = load i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !33 :          <3b1>	retq
590 :   store i64 %267, i64* %FPU_LASTDATA_OFF, align 1, !mcsema_real_eip !33 :          <3b1>	retq
591 :   %268 = load i128* %XMM0_val, !mcsema_real_eip !33 :          <3b1>	retq
592 :   store i128 %268, i128* %XMM0, align 1, !mcsema_real_eip !33 :          <3b1>	retq
593 :   %269 = load i128* %XMM1_val, !mcsema_real_eip !33 :          <3b1>	retq
594 :   store i128 %269, i128* %XMM1, align 1, !mcsema_real_eip !33 :          <3b1>	retq
595 :   %270 = load i128* %XMM2_val, !mcsema_real_eip !33 :          <3b1>	retq
596 :   store i128 %270, i128* %XMM2, align 1, !mcsema_real_eip !33 :          <3b1>	retq
597 :   %271 = load i128* %XMM3_val, !mcsema_real_eip !33 :          <3b1>	retq
598 :   store i128 %271, i128* %XMM3, align 1, !mcsema_real_eip !33 :          <3b1>	retq
599 :   %272 = load i128* %XMM4_val, !mcsema_real_eip !33 :          <3b1>	retq
600 :   store i128 %272, i128* %XMM4, align 1, !mcsema_real_eip !33 :          <3b1>	retq
601 :   %273 = load i128* %XMM5_val, !mcsema_real_eip !33 :          <3b1>	retq
602 :   store i128 %273, i128* %XMM5, align 1, !mcsema_real_eip !33 :          <3b1>	retq
603 :   %274 = load i128* %XMM6_val, !mcsema_real_eip !33 :          <3b1>	retq
604 :   store i128 %274, i128* %XMM6, align 1, !mcsema_real_eip !33 :          <3b1>	retq
605 :   %275 = load i128* %XMM7_val, !mcsema_real_eip !33 :          <3b1>	retq
606 :   store i128 %275, i128* %XMM7, align 1, !mcsema_real_eip !33 :          <3b1>	retq
607 :   %276 = load i128* %XMM8_val, !mcsema_real_eip !33 :          <3b1>	retq
608 :   store i128 %276, i128* %XMM8, align 1, !mcsema_real_eip !33 :          <3b1>	retq
609 :   %277 = load i128* %XMM9_val, !mcsema_real_eip !33 :          <3b1>	retq
610 :   store i128 %277, i128* %XMM9, align 1, !mcsema_real_eip !33 :          <3b1>	retq
611 :   %278 = load i128* %XMM10_val, !mcsema_real_eip !33 :          <3b1>	retq
612 :   store i128 %278, i128* %XMM10, align 1, !mcsema_real_eip !33 :          <3b1>	retq
613 :   %279 = load i128* %XMM11_val, !mcsema_real_eip !33 :          <3b1>	retq
614 :   store i128 %279, i128* %XMM11, align 1, !mcsema_real_eip !33 :          <3b1>	retq
615 :   %280 = load i128* %XMM12_val, !mcsema_real_eip !33 :          <3b1>	retq
616 :   store i128 %280, i128* %XMM12, align 1, !mcsema_real_eip !33 :          <3b1>	retq
617 :   %281 = load i128* %XMM13_val, !mcsema_real_eip !33 :          <3b1>	retq
618 :   store i128 %281, i128* %XMM13, align 1, !mcsema_real_eip !33 :          <3b1>	retq
619 :   %282 = load i128* %XMM14_val, !mcsema_real_eip !33 :          <3b1>	retq
620 :   store i128 %282, i128* %XMM14, align 1, !mcsema_real_eip !33 :          <3b1>	retq
621 :   %283 = load i128* %XMM15_val, !mcsema_real_eip !33 :          <3b1>	retq
622 :   store i128 %283, i128* %XMM15, align 1, !mcsema_real_eip !33 :          <3b1>	retq
623 :   %284 = load i64* %STACK_BASE_val, !mcsema_real_eip !33 :          <3b1>	retq
624 :   store i64 %284, i64* %STACK_BASE, align 1, !mcsema_real_eip !33 :          <3b1>	retq
625 :   %285 = load i64* %STACK_LIMIT_val, !mcsema_real_eip !33 :          <3b1>	retq
626 :   store i64 %285, i64* %STACK_LIMIT, align 1, !mcsema_real_eip !33 :          <3b1>	retq
627 :   ret void, !mcsema_real_eip !33 :          <3b1>	retq

628 :   %286 = load i64* %RBP_val, !mcsema_real_eip !34 :          <13d>	movl	-20(%rbp), %eax
629 :   %287 = add i64 %286, -20, !mcsema_real_eip !34 :          <13d>	movl	-20(%rbp), %eax
630 :   %288 = inttoptr i64 %287 to i64*, !mcsema_real_eip !34 :          <13d>	movl	-20(%rbp), %eax

631 :   %289 = bitcast i64* %288 to i32* : NIL

632 :   %290 = load i32* %289, !mcsema_real_eip !34 :          <13d>	movl	-20(%rbp), %eax
633 :   %291 = zext i32 %290 to i64, !mcsema_real_eip !34 :          <13d>	movl	-20(%rbp), %eax
634 :   store i64 %291, i64* %RAX_val, !mcsema_real_eip !34 :          <13d>	movl	-20(%rbp), %eax

635 :   %292 = load i64* %RBP_val, !mcsema_real_eip !35 :          <140>	movl	%eax, -28(%rbp)
636 :   %293 = add i64 %292, -28, !mcsema_real_eip !35 :          <140>	movl	%eax, -28(%rbp)
637 :   %294 = inttoptr i64 %293 to i64*, !mcsema_real_eip !35 :          <140>	movl	%eax, -28(%rbp)

638 :   %295 = bitcast i64* %294 to i32* : NIL

639 :   store i32 %290, i32* %295, !mcsema_real_eip !35 :          <140>	movl	%eax, -28(%rbp)

640 :   %296 = load i64* %RBP_val, !mcsema_real_eip !36 :          <143>	movl	-24(%rbp), %eax
641 :   %297 = add i64 %296, -24, !mcsema_real_eip !36 :          <143>	movl	-24(%rbp), %eax
642 :   %298 = inttoptr i64 %297 to i64*, !mcsema_real_eip !36 :          <143>	movl	-24(%rbp), %eax

643 :   %299 = bitcast i64* %298 to i32* : NIL

644 :   %300 = load i32* %299, !mcsema_real_eip !36 :          <143>	movl	-24(%rbp), %eax
645 :   %301 = zext i32 %300 to i64, !mcsema_real_eip !36 :          <143>	movl	-24(%rbp), %eax
646 :   store i64 %301, i64* %RAX_val, !mcsema_real_eip !36 :          <143>	movl	-24(%rbp), %eax

647 :   %302 = load i64* %RBP_val, !mcsema_real_eip !37 :          <146>	movl	%eax, -32(%rbp)
648 :   %303 = add i64 %302, -32, !mcsema_real_eip !37 :          <146>	movl	%eax, -32(%rbp)
649 :   %304 = inttoptr i64 %303 to i64*, !mcsema_real_eip !37 :          <146>	movl	%eax, -32(%rbp)

650 :   %305 = bitcast i64* %304 to i32* : NIL

651 :   store i32 %300, i32* %305, !mcsema_real_eip !37 :          <146>	movl	%eax, -32(%rbp)

652 :   %306 = load i64* %RBP_val, !mcsema_real_eip !38 :          <149>	movslq	-36(%rbp), %rcx
653 :   %307 = add i64 %306, -36, !mcsema_real_eip !38 :          <149>	movslq	-36(%rbp), %rcx
654 :   %308 = inttoptr i64 %307 to i64*, !mcsema_real_eip !38 :          <149>	movslq	-36(%rbp), %rcx

655 :   %309 = bitcast i64* %308 to i32* : NIL

656 :   %310 = load i32* %309, !mcsema_real_eip !38 :          <149>	movslq	-36(%rbp), %rcx
657 :   %311 = sext i32 %310 to i64, !mcsema_real_eip !38 :          <149>	movslq	-36(%rbp), %rcx
658 :   store i64 %311, i64* %RCX_val, !mcsema_real_eip !38 :          <149>	movslq	-36(%rbp), %rcx

659 :   %312 = load i64* %RBP_val, !mcsema_real_eip !39 :          <14d>	movsbl	-64(%rbp,%rcx), %eax
660 :   %313 = add i64 %312, -64, !mcsema_real_eip !39 :          <14d>	movsbl	-64(%rbp,%rcx), %eax
661 :   %314 = add i64 %313, %311, !mcsema_real_eip !39 :          <14d>	movsbl	-64(%rbp,%rcx), %eax
662 :   %315 = inttoptr i64 %314 to i64*, !mcsema_real_eip !39 :          <14d>	movsbl	-64(%rbp,%rcx), %eax

663 :   %316 = bitcast i64* %315 to i8* : NIL

664 :   %317 = load i8* %316, !mcsema_real_eip !39 :          <14d>	movsbl	-64(%rbp,%rcx), %eax
665 :   %318 = sext i8 %317 to i32, !mcsema_real_eip !39 :          <14d>	movsbl	-64(%rbp,%rcx), %eax
666 :   %319 = zext i32 %318 to i64, !mcsema_real_eip !39 :          <14d>	movsbl	-64(%rbp,%rcx), %eax
667 :   store i64 %319, i64* %RAX_val, !mcsema_real_eip !39 :          <14d>	movsbl	-64(%rbp,%rcx), %eax

668 :   %320 = add nsw i32 %318, -114 : NIL

669 :   %321 = xor i32 %320, %318, !mcsema_real_eip !40 :          <154>	subl	$114, %edx

670 :   %322 = and i32 %321, 16 : NIL
671 :   %323 = icmp eq i32 %322, 0 : NIL

672 :   store i1 %323, i1* %AF_val, !mcsema_real_eip !40 :          <154>	subl	$114, %edx
673 :   %324 = trunc i32 %320 to i8, !mcsema_real_eip !40 :          <154>	subl	$114, %edx
674 :   %325 = tail call i8 @llvm.ctpop.i8(i8 %324), !mcsema_real_eip !40 :          <154>	subl	$114, %edx

675 :   %326 = and i8 %325, 1 : NIL
676 :   %327 = icmp eq i8 %326, 0 : NIL

677 :   store i1 %327, i1* %PF_val, !mcsema_real_eip !40 :          <154>	subl	$114, %edx
678 :   %328 = icmp eq i32 %320, 0, !mcsema_real_eip !40 :          <154>	subl	$114, %edx
679 :   store i1 %328, i1* %ZF_val, !mcsema_real_eip !40 :          <154>	subl	$114, %edx

680 :   %329 = icmp slt i32 %320, 0 : NIL

681 :   store i1 %329, i1* %SF_val, !mcsema_real_eip !40 :          <154>	subl	$114, %edx

682 :   %330 = icmp ult i8 %317, 114 : NIL

683 :   store i1 %330, i1* %CF_val, !mcsema_real_eip !40 :          <154>	subl	$114, %edx
684 :   %331 = and i32 %321, %318, !mcsema_real_eip !40 :          <154>	subl	$114, %edx

685 :   %332 = icmp slt i32 %331, 0 : NIL

686 :   store i1 %332, i1* %OF_val, !mcsema_real_eip !40 :          <154>	subl	$114, %edx
687 :   %333 = zext i32 %320 to i64, !mcsema_real_eip !40 :          <154>	subl	$114, %edx
688 :   store i64 %333, i64* %RDX_val, !mcsema_real_eip !40 :          <154>	subl	$114, %edx

689 :   %334 = load i64* %RBP_val, !mcsema_real_eip !41 :          <157>	movl	%eax, -76(%rbp)
690 :   %335 = add i64 %334, -76, !mcsema_real_eip !41 :          <157>	movl	%eax, -76(%rbp)
691 :   %336 = inttoptr i64 %335 to i64*, !mcsema_real_eip !41 :          <157>	movl	%eax, -76(%rbp)
692 :   %337 = load i64* %RAX_val, !mcsema_real_eip !41 :          <157>	movl	%eax, -76(%rbp)
693 :   %338 = trunc i64 %337 to i32, !mcsema_real_eip !41 :          <157>	movl	%eax, -76(%rbp)

694 :   %339 = bitcast i64* %336 to i32* : NIL

695 :   store i32 %338, i32* %339, !mcsema_real_eip !41 :          <157>	movl	%eax, -76(%rbp)

696 :   %340 = load i64* %RBP_val, !mcsema_real_eip !42 :          <15a>	movl	%edx, -80(%rbp)
697 :   %341 = add i64 %340, -80, !mcsema_real_eip !42 :          <15a>	movl	%edx, -80(%rbp)
698 :   %342 = inttoptr i64 %341 to i64*, !mcsema_real_eip !42 :          <15a>	movl	%edx, -80(%rbp)
699 :   %343 = load i64* %RDX_val, !mcsema_real_eip !42 :          <15a>	movl	%edx, -80(%rbp)
700 :   %344 = trunc i64 %343 to i32, !mcsema_real_eip !42 :          <15a>	movl	%edx, -80(%rbp)

701 :   %345 = bitcast i64* %342 to i32* : NIL

702 :   store i32 %344, i32* %345, !mcsema_real_eip !42 :          <15a>	movl	%edx, -80(%rbp)

703 :   %346 = load i1* %OF_val, !mcsema_real_eip !43 :          <15d>	jg	45
704 :   %347 = load i1* %SF_val, !mcsema_real_eip !43 :          <15d>	jg	45

705 :   %tmp348 = xor i1 %347, %346 : NIL

706 :   %348 = load i1* %ZF_val, !mcsema_real_eip !43 :          <15d>	jg	45

707 :   %.demorgan = or i1 %348, %tmp348 : NIL

708 :   %349 = load i64* %RBP_val, !mcsema_real_eip !44 :          <190>	movl	-76(%rbp), %eax
709 :   %350 = add i64 %349, -76, !mcsema_real_eip !44 :          <190>	movl	-76(%rbp), %eax
710 :   %351 = inttoptr i64 %350 to i64*, !mcsema_real_eip !44 :          <190>	movl	-76(%rbp), %eax

711 :   %352 = bitcast i64* %351 to i32* : NIL

712 :   %353 = load i32* %352, !mcsema_real_eip !44 :          <190>	movl	-76(%rbp), %eax
713 :   %354 = zext i32 %353 to i64, !mcsema_real_eip !44 :          <190>	movl	-76(%rbp), %eax
714 :   store i64 %354, i64* %RAX_val, !mcsema_real_eip !44 :          <190>	movl	-76(%rbp), %eax

715 :   br i1 %.demorgan, label %block_0x168, label %block_0x190, !mcsema_real_eip !43 :          <15d>	jg	45

716 :   %355 = add i32 %353, -115 : NIL

717 :   %356 = xor i32 %355, %353, !mcsema_real_eip !45 :          <193>	subl	$115, %eax

718 :   %357 = and i32 %356, 16 : NIL
719 :   %358 = icmp eq i32 %357, 0 : NIL

720 :   store i1 %358, i1* %AF_val, !mcsema_real_eip !45 :          <193>	subl	$115, %eax
721 :   %359 = trunc i32 %355 to i8, !mcsema_real_eip !45 :          <193>	subl	$115, %eax
722 :   %360 = tail call i8 @llvm.ctpop.i8(i8 %359), !mcsema_real_eip !45 :          <193>	subl	$115, %eax

723 :   %361 = and i8 %360, 1 : NIL
724 :   %362 = icmp eq i8 %361, 0 : NIL

725 :   store i1 %362, i1* %PF_val, !mcsema_real_eip !45 :          <193>	subl	$115, %eax
726 :   %363 = icmp eq i32 %355, 0, !mcsema_real_eip !45 :          <193>	subl	$115, %eax
727 :   store i1 %363, i1* %ZF_val, !mcsema_real_eip !45 :          <193>	subl	$115, %eax

728 :   %364 = icmp slt i32 %355, 0 : NIL

729 :   store i1 %364, i1* %SF_val, !mcsema_real_eip !45 :          <193>	subl	$115, %eax
730 :   %365 = icmp ult i32 %353, 115, !mcsema_real_eip !45 :          <193>	subl	$115, %eax
731 :   store i1 %365, i1* %CF_val, !mcsema_real_eip !45 :          <193>	subl	$115, %eax
732 :   %366 = and i32 %356, %353, !mcsema_real_eip !45 :          <193>	subl	$115, %eax

733 :   %367 = icmp slt i32 %366, 0 : NIL

734 :   store i1 %367, i1* %OF_val, !mcsema_real_eip !45 :          <193>	subl	$115, %eax
735 :   %368 = zext i32 %355 to i64, !mcsema_real_eip !45 :          <193>	subl	$115, %eax
736 :   store i64 %368, i64* %RAX_val, !mcsema_real_eip !45 :          <193>	subl	$115, %eax

737 :   %369 = load i64* %RBP_val, !mcsema_real_eip !46 :          <196>	movl	%eax, -92(%rbp)
738 :   %370 = add i64 %369, -92, !mcsema_real_eip !46 :          <196>	movl	%eax, -92(%rbp)
739 :   %371 = inttoptr i64 %370 to i64*, !mcsema_real_eip !46 :          <196>	movl	%eax, -92(%rbp)

740 :   %372 = bitcast i64* %371 to i32* : NIL

741 :   store i32 %355, i32* %372, !mcsema_real_eip !46 :          <196>	movl	%eax, -92(%rbp)

742 :   %373 = load i1* %ZF_val, !mcsema_real_eip !47 :          <199>	je	41

743 :   %374 = load i64* %RBP_val, !mcsema_real_eip !48 :          <1c8>	movl	-24(%rbp), %eax

744 :   br i1 %373, label %block_0x1c8, label %block_0x1a4, !mcsema_real_eip !47 :          <199>	je	41

745 :   %375 = add i32 %353, -97 : NIL

746 :   %376 = xor i32 %375, %353, !mcsema_real_eip !49 :          <16b>	subl	$97, %eax
747 :   %377 = and i32 %376, 16, !mcsema_real_eip !49 :          <16b>	subl	$97, %eax
748 :   %378 = icmp ne i32 %377, 0, !mcsema_real_eip !49 :          <16b>	subl	$97, %eax
749 :   store i1 %378, i1* %AF_val, !mcsema_real_eip !49 :          <16b>	subl	$97, %eax
750 :   %379 = trunc i32 %375 to i8, !mcsema_real_eip !49 :          <16b>	subl	$97, %eax
751 :   %380 = tail call i8 @llvm.ctpop.i8(i8 %379), !mcsema_real_eip !49 :          <16b>	subl	$97, %eax

752 :   %381 = and i8 %380, 1 : NIL
753 :   %382 = icmp eq i8 %381, 0 : NIL

754 :   store i1 %382, i1* %PF_val, !mcsema_real_eip !49 :          <16b>	subl	$97, %eax
755 :   %383 = icmp eq i32 %375, 0, !mcsema_real_eip !49 :          <16b>	subl	$97, %eax
756 :   store i1 %383, i1* %ZF_val, !mcsema_real_eip !49 :          <16b>	subl	$97, %eax

757 :   %384 = icmp slt i32 %375, 0 : NIL

758 :   store i1 %384, i1* %SF_val, !mcsema_real_eip !49 :          <16b>	subl	$97, %eax
759 :   %385 = icmp ult i32 %353, 97, !mcsema_real_eip !49 :          <16b>	subl	$97, %eax
760 :   store i1 %385, i1* %CF_val, !mcsema_real_eip !49 :          <16b>	subl	$97, %eax
761 :   %386 = and i32 %376, %353, !mcsema_real_eip !49 :          <16b>	subl	$97, %eax

762 :   %387 = icmp slt i32 %386, 0 : NIL

763 :   store i1 %387, i1* %OF_val, !mcsema_real_eip !49 :          <16b>	subl	$97, %eax
764 :   %388 = zext i32 %375 to i64, !mcsema_real_eip !49 :          <16b>	subl	$97, %eax
765 :   store i64 %388, i64* %RAX_val, !mcsema_real_eip !49 :          <16b>	subl	$97, %eax

766 :   %389 = load i64* %RBP_val, !mcsema_real_eip !50 :          <16e>	movl	%eax, -84(%rbp)
767 :   %390 = add i64 %389, -84, !mcsema_real_eip !50 :          <16e>	movl	%eax, -84(%rbp)
768 :   %391 = inttoptr i64 %390 to i64*, !mcsema_real_eip !50 :          <16e>	movl	%eax, -84(%rbp)

769 :   %392 = bitcast i64* %391 to i32* : NIL

770 :   store i32 %375, i32* %392, !mcsema_real_eip !50 :          <16e>	movl	%eax, -84(%rbp)

771 :   %393 = load i1* %ZF_val, !mcsema_real_eip !51 :          <171>	je	97

772 :   %394 = load i64* %RBP_val, !mcsema_real_eip !52 :          <1d8>	movl	-20(%rbp), %eax

773 :   br i1 %393, label %block_0x1d8, label %block_0x17c, !mcsema_real_eip !51 :          <171>	je	97

774 :   %395 = add i64 %374, -24, !mcsema_real_eip !48 :          <1c8>	movl	-24(%rbp), %eax
775 :   %396 = inttoptr i64 %395 to i64*, !mcsema_real_eip !48 :          <1c8>	movl	-24(%rbp), %eax

776 :   %397 = bitcast i64* %396 to i32* : NIL

777 :   %398 = load i32* %397, !mcsema_real_eip !48 :          <1c8>	movl	-24(%rbp), %eax

778 :   %uadd376 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %398, i32 1) : NIL
779 :   %399 = extractvalue { i32, i1 } %uadd376, 0 : NIL

780 :   %400 = xor i32 %399, %398, !mcsema_real_eip !53 :          <1cb>	addl	$1, %eax
781 :   %401 = and i32 %400, 16, !mcsema_real_eip !53 :          <1cb>	addl	$1, %eax
782 :   %402 = icmp ne i32 %401, 0, !mcsema_real_eip !53 :          <1cb>	addl	$1, %eax
783 :   store i1 %402, i1* %AF_val, !mcsema_real_eip !53 :          <1cb>	addl	$1, %eax

784 :   %403 = icmp slt i32 %399, 0 : NIL

785 :   store i1 %403, i1* %SF_val, !mcsema_real_eip !53 :          <1cb>	addl	$1, %eax
786 :   %404 = icmp eq i32 %399, 0, !mcsema_real_eip !53 :          <1cb>	addl	$1, %eax
787 :   store i1 %404, i1* %ZF_val, !mcsema_real_eip !53 :          <1cb>	addl	$1, %eax
788 :   %405 = xor i32 %398, -2147483648, !mcsema_real_eip !53 :          <1cb>	addl	$1, %eax
789 :   %406 = and i32 %400, %405, !mcsema_real_eip !53 :          <1cb>	addl	$1, %eax

790 :   %407 = icmp slt i32 %406, 0 : NIL

791 :   store i1 %407, i1* %OF_val, !mcsema_real_eip !53 :          <1cb>	addl	$1, %eax
792 :   %408 = trunc i32 %399 to i8, !mcsema_real_eip !53 :          <1cb>	addl	$1, %eax
793 :   %409 = tail call i8 @llvm.ctpop.i8(i8 %408), !mcsema_real_eip !53 :          <1cb>	addl	$1, %eax

794 :   %410 = and i8 %409, 1 : NIL
795 :   %411 = icmp eq i8 %410, 0 : NIL

796 :   store i1 %411, i1* %PF_val, !mcsema_real_eip !53 :          <1cb>	addl	$1, %eax

797 :   %412 = extractvalue { i32, i1 } %uadd376, 1 : NIL

798 :   store i1 %412, i1* %CF_val, !mcsema_real_eip !53 :          <1cb>	addl	$1, %eax
799 :   %413 = zext i32 %399 to i64, !mcsema_real_eip !53 :          <1cb>	addl	$1, %eax
800 :   store i64 %413, i64* %RAX_val, !mcsema_real_eip !53 :          <1cb>	addl	$1, %eax

801 :   %414 = load i64* %RBP_val, !mcsema_real_eip !54 :          <1d0>	movl	%eax, -24(%rbp)
802 :   %415 = add i64 %414, -24, !mcsema_real_eip !54 :          <1d0>	movl	%eax, -24(%rbp)
803 :   %416 = inttoptr i64 %415 to i64*, !mcsema_real_eip !54 :          <1d0>	movl	%eax, -24(%rbp)

804 :   %417 = bitcast i64* %416 to i32* : NIL

805 :   store i32 %399, i32* %417, !mcsema_real_eip !54 :          <1d0>	movl	%eax, -24(%rbp)

806 :   br label %block_0x22a, !mcsema_real_eip !55 :          <1d3>	jmp	82

807 :   %418 = add i64 %394, -20, !mcsema_real_eip !52 :          <1d8>	movl	-20(%rbp), %eax
808 :   %419 = inttoptr i64 %418 to i64*, !mcsema_real_eip !52 :          <1d8>	movl	-20(%rbp), %eax

809 :   %420 = bitcast i64* %419 to i32* : NIL

810 :   %421 = load i32* %420, !mcsema_real_eip !52 :          <1d8>	movl	-20(%rbp), %eax

811 :   %uadd373 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %421, i32 -1) : NIL
812 :   %422 = extractvalue { i32, i1 } %uadd373, 0 : NIL

813 :   %423 = xor i32 %422, %421, !mcsema_real_eip !56 :          <1db>	addl	$4294967295, %eax

814 :   %424 = and i32 %423, 16 : NIL
815 :   %425 = icmp eq i32 %424, 0 : NIL

816 :   store i1 %425, i1* %AF_val, !mcsema_real_eip !56 :          <1db>	addl	$4294967295, %eax

817 :   %426 = icmp slt i32 %422, 0 : NIL

818 :   store i1 %426, i1* %SF_val, !mcsema_real_eip !56 :          <1db>	addl	$4294967295, %eax
819 :   %427 = icmp eq i32 %422, 0, !mcsema_real_eip !56 :          <1db>	addl	$4294967295, %eax
820 :   store i1 %427, i1* %ZF_val, !mcsema_real_eip !56 :          <1db>	addl	$4294967295, %eax
821 :   %428 = and i32 %423, %421, !mcsema_real_eip !56 :          <1db>	addl	$4294967295, %eax

822 :   %429 = icmp slt i32 %428, 0 : NIL

823 :   store i1 %429, i1* %OF_val, !mcsema_real_eip !56 :          <1db>	addl	$4294967295, %eax
824 :   %430 = trunc i32 %422 to i8, !mcsema_real_eip !56 :          <1db>	addl	$4294967295, %eax
825 :   %431 = tail call i8 @llvm.ctpop.i8(i8 %430), !mcsema_real_eip !56 :          <1db>	addl	$4294967295, %eax

826 :   %432 = and i8 %431, 1 : NIL
827 :   %433 = icmp eq i8 %432, 0 : NIL

828 :   store i1 %433, i1* %PF_val, !mcsema_real_eip !56 :          <1db>	addl	$4294967295, %eax

829 :   %434 = extractvalue { i32, i1 } %uadd373, 1 : NIL

830 :   store i1 %434, i1* %CF_val, !mcsema_real_eip !56 :          <1db>	addl	$4294967295, %eax
831 :   %435 = zext i32 %422 to i64, !mcsema_real_eip !56 :          <1db>	addl	$4294967295, %eax
832 :   store i64 %435, i64* %RAX_val, !mcsema_real_eip !56 :          <1db>	addl	$4294967295, %eax

833 :   %436 = load i64* %RBP_val, !mcsema_real_eip !57 :          <1e0>	movl	%eax, -20(%rbp)
834 :   %437 = add i64 %436, -20, !mcsema_real_eip !57 :          <1e0>	movl	%eax, -20(%rbp)
835 :   %438 = inttoptr i64 %437 to i64*, !mcsema_real_eip !57 :          <1e0>	movl	%eax, -20(%rbp)

836 :   %439 = bitcast i64* %438 to i32* : NIL

837 :   store i32 %422, i32* %439, !mcsema_real_eip !57 :          <1e0>	movl	%eax, -20(%rbp)

838 :   br label %block_0x22a, !mcsema_real_eip !58 :          <1e3>	jmp	66

839 :   %440 = add i64 %374, -76, !mcsema_real_eip !59 :          <1a4>	movl	-76(%rbp), %eax
840 :   %441 = inttoptr i64 %440 to i64*, !mcsema_real_eip !59 :          <1a4>	movl	-76(%rbp), %eax

841 :   %442 = bitcast i64* %441 to i32* : NIL

842 :   %443 = load i32* %442, !mcsema_real_eip !59 :          <1a4>	movl	-76(%rbp), %eax

843 :   %444 = add i32 %443, -119 : NIL

844 :   %445 = xor i32 %444, %443, !mcsema_real_eip !60 :          <1a7>	subl	$119, %eax

845 :   %446 = and i32 %445, 16 : NIL
846 :   %447 = icmp eq i32 %446, 0 : NIL

847 :   store i1 %447, i1* %AF_val, !mcsema_real_eip !60 :          <1a7>	subl	$119, %eax
848 :   %448 = trunc i32 %444 to i8, !mcsema_real_eip !60 :          <1a7>	subl	$119, %eax
849 :   %449 = tail call i8 @llvm.ctpop.i8(i8 %448), !mcsema_real_eip !60 :          <1a7>	subl	$119, %eax

850 :   %450 = and i8 %449, 1 : NIL
851 :   %451 = icmp eq i8 %450, 0 : NIL

852 :   store i1 %451, i1* %PF_val, !mcsema_real_eip !60 :          <1a7>	subl	$119, %eax
853 :   %452 = icmp eq i32 %444, 0, !mcsema_real_eip !60 :          <1a7>	subl	$119, %eax
854 :   store i1 %452, i1* %ZF_val, !mcsema_real_eip !60 :          <1a7>	subl	$119, %eax

855 :   %453 = icmp slt i32 %444, 0 : NIL

856 :   store i1 %453, i1* %SF_val, !mcsema_real_eip !60 :          <1a7>	subl	$119, %eax
857 :   %454 = icmp ult i32 %443, 119, !mcsema_real_eip !60 :          <1a7>	subl	$119, %eax
858 :   store i1 %454, i1* %CF_val, !mcsema_real_eip !60 :          <1a7>	subl	$119, %eax
859 :   %455 = and i32 %445, %443, !mcsema_real_eip !60 :          <1a7>	subl	$119, %eax

860 :   %456 = icmp slt i32 %455, 0 : NIL

861 :   store i1 %456, i1* %OF_val, !mcsema_real_eip !60 :          <1a7>	subl	$119, %eax
862 :   %457 = zext i32 %444 to i64, !mcsema_real_eip !60 :          <1a7>	subl	$119, %eax
863 :   store i64 %457, i64* %RAX_val, !mcsema_real_eip !60 :          <1a7>	subl	$119, %eax

864 :   %458 = load i64* %RBP_val, !mcsema_real_eip !61 :          <1aa>	movl	%eax, -96(%rbp)
865 :   %459 = add i64 %458, -96, !mcsema_real_eip !61 :          <1aa>	movl	%eax, -96(%rbp)
866 :   %460 = inttoptr i64 %459 to i64*, !mcsema_real_eip !61 :          <1aa>	movl	%eax, -96(%rbp)

867 :   %461 = bitcast i64* %460 to i32* : NIL

868 :   store i32 %444, i32* %461, !mcsema_real_eip !61 :          <1aa>	movl	%eax, -96(%rbp)

869 :   %462 = load i1* %ZF_val, !mcsema_real_eip !62 :          <1ad>	jne	69
870 :   br i1 %462, label %block_0x1b8, label %block_0x1f8, !mcsema_real_eip !62 :          <1ad>	jne	69

871 :   store i64 ptrtoint (%0* @data_0x3b2 to i64), i64* %RAX_val, !mcsema_real_eip !63 :          <22a>	movabsq	$0, %rax

872 :   %463 = load i64* %RBP_val, !mcsema_real_eip !64 :          <234>	movslq	-20(%rbp), %rcx
873 :   %464 = add i64 %463, -20, !mcsema_real_eip !64 :          <234>	movslq	-20(%rbp), %rcx
874 :   %465 = inttoptr i64 %464 to i64*, !mcsema_real_eip !64 :          <234>	movslq	-20(%rbp), %rcx

875 :   %466 = bitcast i64* %465 to i32* : NIL

876 :   %467 = load i32* %466, !mcsema_real_eip !64 :          <234>	movslq	-20(%rbp), %rcx
877 :   %468 = sext i32 %467 to i64, !mcsema_real_eip !64 :          <234>	movslq	-20(%rbp), %rcx
878 :   store i64 %468, i64* %RCX_val, !mcsema_real_eip !64 :          <234>	movslq	-20(%rbp), %rcx

879 :   %469 = load i64* %RBP_val, !mcsema_real_eip !65 :          <238>	movslq	-24(%rbp), %rdx
880 :   %470 = add i64 %469, -24, !mcsema_real_eip !65 :          <238>	movslq	-24(%rbp), %rdx
881 :   %471 = inttoptr i64 %470 to i64*, !mcsema_real_eip !65 :          <238>	movslq	-24(%rbp), %rdx

882 :   %472 = bitcast i64* %471 to i32* : NIL

883 :   %473 = load i32* %472, !mcsema_real_eip !65 :          <238>	movslq	-24(%rbp), %rdx
884 :   %474 = sext i32 %473 to i64, !mcsema_real_eip !65 :          <238>	movslq	-24(%rbp), %rdx

885 :   %475 = mul i64 %474, 11, !mcsema_real_eip !66 :          <23c>	imulq	 $11, %rdx
886 :   store i64 %475, i64* %RDX_val, !mcsema_real_eip !66 :          <23c>	imulq	 $11, %rdx

887 :   %476 = load i64* %RAX_val, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax

888 :   %uadd371 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %475, i64 %476) : NIL
889 :   %477 = extractvalue { i64, i1 } %uadd371, 0 : NIL

890 :   %478 = xor i64 %477, %476, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
891 :   %479 = xor i64 %478, %475, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
892 :   %480 = and i64 %479, 16, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
893 :   %481 = icmp ne i64 %480, 0, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
894 :   store i1 %481, i1* %AF_val, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax

895 :   %482 = icmp slt i64 %477, 0 : NIL

896 :   store i1 %482, i1* %SF_val, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
897 :   %483 = icmp eq i64 %477, 0, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
898 :   store i1 %483, i1* %ZF_val, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
899 :   %484 = xor i64 %476, -9223372036854775808, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
900 :   %485 = xor i64 %484, %475, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
901 :   %486 = and i64 %478, %485, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax

902 :   %487 = icmp slt i64 %486, 0 : NIL

903 :   store i1 %487, i1* %OF_val, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
904 :   %488 = trunc i64 %477 to i8, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
905 :   %489 = tail call i8 @llvm.ctpop.i8(i8 %488), !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax

906 :   %490 = and i8 %489, 1 : NIL
907 :   %491 = icmp eq i8 %490, 0 : NIL

908 :   store i1 %491, i1* %PF_val, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax

909 :   %492 = extractvalue { i64, i1 } %uadd371, 1 : NIL

910 :   store i1 %492, i1* %CF_val, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
911 :   store i64 %477, i64* %RAX_val, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax

912 :   %493 = load i64* %RCX_val, !mcsema_real_eip !68 :          <246>	movsbl	(%rax,%rcx), %esi
913 :   %494 = add i64 %493, %477, !mcsema_real_eip !68 :          <246>	movsbl	(%rax,%rcx), %esi
914 :   %495 = inttoptr i64 %494 to i64*, !mcsema_real_eip !68 :          <246>	movsbl	(%rax,%rcx), %esi

915 :   %496 = bitcast i64* %495 to i8* : NIL

916 :   %497 = load i8* %496, !mcsema_real_eip !68 :          <246>	movsbl	(%rax,%rcx), %esi
917 :   %498 = sext i8 %497 to i32, !mcsema_real_eip !68 :          <246>	movsbl	(%rax,%rcx), %esi
918 :   %499 = zext i32 %498 to i64, !mcsema_real_eip !68 :          <246>	movsbl	(%rax,%rcx), %esi
919 :   store i64 %499, i64* %RSI_val, !mcsema_real_eip !68 :          <246>	movsbl	(%rax,%rcx), %esi

920 :   %500 = add nsw i32 %498, -35 : NIL

921 :   %501 = xor i32 %500, %498, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi
922 :   %502 = and i32 %501, 16, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi
923 :   %503 = icmp ne i32 %502, 0, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi
924 :   store i1 %503, i1* %AF_val, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi
925 :   %504 = trunc i32 %500 to i8, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi
926 :   %505 = tail call i8 @llvm.ctpop.i8(i8 %504), !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi

927 :   %506 = and i8 %505, 1 : NIL
928 :   %507 = icmp eq i8 %506, 0 : NIL

929 :   store i1 %507, i1* %PF_val, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi
930 :   %508 = icmp eq i32 %500, 0, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi
931 :   store i1 %508, i1* %ZF_val, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi

932 :   %509 = icmp slt i32 %500, 0 : NIL

933 :   store i1 %509, i1* %SF_val, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi

934 :   %510 = icmp ult i8 %497, 35 : NIL

935 :   store i1 %510, i1* %CF_val, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi
936 :   %511 = and i32 %501, %498, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi

937 :   %512 = icmp slt i32 %511, 0 : NIL

938 :   store i1 %512, i1* %OF_val, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi

939 :   %513 = load i1* %ZF_val, !mcsema_real_eip !70 :          <250>	jne	54
940 :   br i1 %513, label %block_0x256, label %block_0x28c, !mcsema_real_eip !70 :          <250>	jne	54

941 :   %514 = add i64 %394, -76, !mcsema_real_eip !71 :          <17c>	movl	-76(%rbp), %eax
942 :   %515 = inttoptr i64 %514 to i64*, !mcsema_real_eip !71 :          <17c>	movl	-76(%rbp), %eax

943 :   %516 = bitcast i64* %515 to i32* : NIL

944 :   %517 = load i32* %516, !mcsema_real_eip !71 :          <17c>	movl	-76(%rbp), %eax

945 :   %518 = add i32 %517, -100 : NIL

946 :   %519 = xor i32 %518, %517, !mcsema_real_eip !72 :          <17f>	subl	$100, %eax
947 :   %520 = and i32 %519, 16, !mcsema_real_eip !72 :          <17f>	subl	$100, %eax
948 :   %521 = icmp ne i32 %520, 0, !mcsema_real_eip !72 :          <17f>	subl	$100, %eax
949 :   store i1 %521, i1* %AF_val, !mcsema_real_eip !72 :          <17f>	subl	$100, %eax
950 :   %522 = trunc i32 %518 to i8, !mcsema_real_eip !72 :          <17f>	subl	$100, %eax
951 :   %523 = tail call i8 @llvm.ctpop.i8(i8 %522), !mcsema_real_eip !72 :          <17f>	subl	$100, %eax

952 :   %524 = and i8 %523, 1 : NIL
953 :   %525 = icmp eq i8 %524, 0 : NIL

954 :   store i1 %525, i1* %PF_val, !mcsema_real_eip !72 :          <17f>	subl	$100, %eax
955 :   %526 = icmp eq i32 %518, 0, !mcsema_real_eip !72 :          <17f>	subl	$100, %eax
956 :   store i1 %526, i1* %ZF_val, !mcsema_real_eip !72 :          <17f>	subl	$100, %eax

957 :   %527 = icmp slt i32 %518, 0 : NIL

958 :   store i1 %527, i1* %SF_val, !mcsema_real_eip !72 :          <17f>	subl	$100, %eax
959 :   %528 = icmp ult i32 %517, 100, !mcsema_real_eip !72 :          <17f>	subl	$100, %eax
960 :   store i1 %528, i1* %CF_val, !mcsema_real_eip !72 :          <17f>	subl	$100, %eax
961 :   %529 = and i32 %519, %517, !mcsema_real_eip !72 :          <17f>	subl	$100, %eax

962 :   %530 = icmp slt i32 %529, 0 : NIL

963 :   store i1 %530, i1* %OF_val, !mcsema_real_eip !72 :          <17f>	subl	$100, %eax
964 :   %531 = zext i32 %518 to i64, !mcsema_real_eip !72 :          <17f>	subl	$100, %eax
965 :   store i64 %531, i64* %RAX_val, !mcsema_real_eip !72 :          <17f>	subl	$100, %eax

966 :   %532 = load i64* %RBP_val, !mcsema_real_eip !73 :          <182>	movl	%eax, -88(%rbp)
967 :   %533 = add i64 %532, -88, !mcsema_real_eip !73 :          <182>	movl	%eax, -88(%rbp)
968 :   %534 = inttoptr i64 %533 to i64*, !mcsema_real_eip !73 :          <182>	movl	%eax, -88(%rbp)

969 :   %535 = bitcast i64* %534 to i32* : NIL

970 :   store i32 %518, i32* %535, !mcsema_real_eip !73 :          <182>	movl	%eax, -88(%rbp)

971 :   %536 = load i1* %ZF_val, !mcsema_real_eip !74 :          <185>	je	93
972 :   br i1 %536, label %block_0x1e8, label %block_0x1f8, !mcsema_real_eip !74 :          <185>	je	93

973 :   %537 = tail call x86_64_sysvcc i64 @printf(i64 add (i64 ptrtoint (%1* @data_0x3ff to i64), i64 5)), !mcsema_real_eip !75 :          <204>	callq	0

974 :   store i64 add (i64 ptrtoint (%1* @data_0x3ff to i64), i64 45), i64* %RDI_val, !mcsema_real_eip !76 :          <209>	movabsq	$0, %rdi

975 :   %538 = load i64* %RBP_val, !mcsema_real_eip !77 :          <213>	movl	%eax, -100(%rbp)
976 :   %539 = add i64 %538, -100, !mcsema_real_eip !77 :          <213>	movl	%eax, -100(%rbp)
977 :   %540 = inttoptr i64 %539 to i64*, !mcsema_real_eip !77 :          <213>	movl	%eax, -100(%rbp)
978 :   %541 = trunc i64 %537 to i32, !mcsema_real_eip !77 :          <213>	movl	%eax, -100(%rbp)

979 :   %542 = bitcast i64* %540 to i32* : NIL

980 :   store i32 %541, i32* %542, !mcsema_real_eip !77 :          <213>	movl	%eax, -100(%rbp)

981 :   %543 = load i64* %RDI_val, !mcsema_real_eip !78 :          <218>	callq	0
982 :   %544 = tail call x86_64_sysvcc i64 @printf(i64 %543), !mcsema_real_eip !78 :          <218>	callq	0

983 :   store i64 4294967295, i64* %RDI_val, !mcsema_real_eip !79 :          <21d>	movl	$4294967295, %edi

984 :   %545 = load i64* %RBP_val, !mcsema_real_eip !80 :          <222>	movl	%eax, -104(%rbp)
985 :   %546 = add i64 %545, -104, !mcsema_real_eip !80 :          <222>	movl	%eax, -104(%rbp)
986 :   %547 = inttoptr i64 %546 to i64*, !mcsema_real_eip !80 :          <222>	movl	%eax, -104(%rbp)
987 :   %548 = trunc i64 %544 to i32, !mcsema_real_eip !80 :          <222>	movl	%eax, -104(%rbp)

988 :   %549 = bitcast i64* %547 to i32* : NIL

989 :   store i32 %548, i32* %549, !mcsema_real_eip !80 :          <222>	movl	%eax, -104(%rbp)

990 :   %550 = load i64* %RDI_val, !mcsema_real_eip !81 :          <225>	callq	0
991 :   %551 = tail call x86_64_sysvcc i64 @exit(i64 %550), !mcsema_real_eip !81 :          <225>	callq	0

992 :   store i64 ptrtoint (%0* @data_0x3b2 to i64), i64* %RAX_val, !mcsema_real_eip !63 :          <22a>	movabsq	$0, %rax

993 :   %552 = load i64* %RBP_val, !mcsema_real_eip !64 :          <234>	movslq	-20(%rbp), %rcx
994 :   %553 = add i64 %552, -20, !mcsema_real_eip !64 :          <234>	movslq	-20(%rbp), %rcx
995 :   %554 = inttoptr i64 %553 to i64*, !mcsema_real_eip !64 :          <234>	movslq	-20(%rbp), %rcx

996 :   %555 = bitcast i64* %554 to i32* : NIL

997 :   %556 = load i32* %555, !mcsema_real_eip !64 :          <234>	movslq	-20(%rbp), %rcx
998 :   %557 = sext i32 %556 to i64, !mcsema_real_eip !64 :          <234>	movslq	-20(%rbp), %rcx
999 :   store i64 %557, i64* %RCX_val, !mcsema_real_eip !64 :          <234>	movslq	-20(%rbp), %rcx

1000 :   %558 = load i64* %RBP_val, !mcsema_real_eip !65 :          <238>	movslq	-24(%rbp), %rdx
1001 :   %559 = add i64 %558, -24, !mcsema_real_eip !65 :          <238>	movslq	-24(%rbp), %rdx
1002 :   %560 = inttoptr i64 %559 to i64*, !mcsema_real_eip !65 :          <238>	movslq	-24(%rbp), %rdx

1003 :   %561 = bitcast i64* %560 to i32* : NIL

1004 :   %562 = load i32* %561, !mcsema_real_eip !65 :          <238>	movslq	-24(%rbp), %rdx
1005 :   %563 = sext i32 %562 to i64, !mcsema_real_eip !65 :          <238>	movslq	-24(%rbp), %rdx

1006 :   %564 = mul i64 %563, 11, !mcsema_real_eip !66 :          <23c>	imulq	 $11, %rdx
1007 :   store i64 %564, i64* %RDX_val, !mcsema_real_eip !66 :          <23c>	imulq	 $11, %rdx

1008 :   %565 = load i64* %RAX_val, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax

1009 :   %uadd350 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %564, i64 %565) : NIL
1010 :   %566 = extractvalue { i64, i1 } %uadd350, 0 : NIL

1011 :   %567 = xor i64 %566, %565, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
1012 :   %568 = xor i64 %567, %564, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
1013 :   %569 = and i64 %568, 16, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
1014 :   %570 = icmp ne i64 %569, 0, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
1015 :   store i1 %570, i1* %AF_val, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax

1016 :   %571 = icmp slt i64 %566, 0 : NIL

1017 :   store i1 %571, i1* %SF_val, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
1018 :   %572 = icmp eq i64 %566, 0, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
1019 :   store i1 %572, i1* %ZF_val, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
1020 :   %573 = xor i64 %565, -9223372036854775808, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
1021 :   %574 = xor i64 %573, %564, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
1022 :   %575 = and i64 %567, %574, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax

1023 :   %576 = icmp slt i64 %575, 0 : NIL

1024 :   store i1 %576, i1* %OF_val, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
1025 :   %577 = trunc i64 %566 to i8, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
1026 :   %578 = tail call i8 @llvm.ctpop.i8(i8 %577), !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax

1027 :   %579 = and i8 %578, 1 : NIL
1028 :   %580 = icmp eq i8 %579, 0 : NIL

1029 :   store i1 %580, i1* %PF_val, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax

1030 :   %581 = extractvalue { i64, i1 } %uadd350, 1 : NIL

1031 :   store i1 %581, i1* %CF_val, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax
1032 :   store i64 %566, i64* %RAX_val, !mcsema_real_eip !67 :          <243>	addq	%rdx, %rax

1033 :   %582 = load i64* %RCX_val, !mcsema_real_eip !68 :          <246>	movsbl	(%rax,%rcx), %esi
1034 :   %583 = add i64 %582, %566, !mcsema_real_eip !68 :          <246>	movsbl	(%rax,%rcx), %esi
1035 :   %584 = inttoptr i64 %583 to i64*, !mcsema_real_eip !68 :          <246>	movsbl	(%rax,%rcx), %esi

1036 :   %585 = bitcast i64* %584 to i8* : NIL

1037 :   %586 = load i8* %585, !mcsema_real_eip !68 :          <246>	movsbl	(%rax,%rcx), %esi
1038 :   %587 = sext i8 %586 to i32, !mcsema_real_eip !68 :          <246>	movsbl	(%rax,%rcx), %esi
1039 :   %588 = zext i32 %587 to i64, !mcsema_real_eip !68 :          <246>	movsbl	(%rax,%rcx), %esi
1040 :   store i64 %588, i64* %RSI_val, !mcsema_real_eip !68 :          <246>	movsbl	(%rax,%rcx), %esi

1041 :   %589 = add nsw i32 %587, -35 : NIL

1042 :   %590 = xor i32 %589, %587, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi
1043 :   %591 = and i32 %590, 16, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi
1044 :   %592 = icmp ne i32 %591, 0, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi
1045 :   store i1 %592, i1* %AF_val, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi
1046 :   %593 = trunc i32 %589 to i8, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi
1047 :   %594 = tail call i8 @llvm.ctpop.i8(i8 %593), !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi

1048 :   %595 = and i8 %594, 1 : NIL
1049 :   %596 = icmp eq i8 %595, 0 : NIL

1050 :   store i1 %596, i1* %PF_val, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi
1051 :   %597 = icmp eq i32 %589, 0, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi
1052 :   store i1 %597, i1* %ZF_val, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi

1053 :   %598 = icmp slt i32 %589, 0 : NIL

1054 :   store i1 %598, i1* %SF_val, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi

1055 :   %599 = icmp ult i8 %586, 35 : NIL

1056 :   store i1 %599, i1* %CF_val, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi
1057 :   %600 = and i32 %590, %587, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi

1058 :   %601 = icmp slt i32 %600, 0 : NIL

1059 :   store i1 %601, i1* %OF_val, !mcsema_real_eip !69 :          <24a>	cmpl	$35, %esi

1060 :   %602 = load i1* %ZF_val, !mcsema_real_eip !70 :          <250>	jne	54
1061 :   br i1 %602, label %block_0x256, label %block_0x28c, !mcsema_real_eip !70 :          <250>	jne	54

1062 :   store i64 ptrtoint (%0* @data_0x3b2 to i64), i64* %RAX_val, !mcsema_real_eip !82 :          <28c>	movabsq	$0, %rax

1063 :   %603 = load i64* %RBP_val, !mcsema_real_eip !83 :          <296>	movslq	-20(%rbp), %rcx
1064 :   %604 = add i64 %603, -20, !mcsema_real_eip !83 :          <296>	movslq	-20(%rbp), %rcx
1065 :   %605 = inttoptr i64 %604 to i64*, !mcsema_real_eip !83 :          <296>	movslq	-20(%rbp), %rcx

1066 :   %606 = bitcast i64* %605 to i32* : NIL

1067 :   %607 = load i32* %606, !mcsema_real_eip !83 :          <296>	movslq	-20(%rbp), %rcx
1068 :   %608 = sext i32 %607 to i64, !mcsema_real_eip !83 :          <296>	movslq	-20(%rbp), %rcx
1069 :   store i64 %608, i64* %RCX_val, !mcsema_real_eip !83 :          <296>	movslq	-20(%rbp), %rcx

1070 :   %609 = load i64* %RBP_val, !mcsema_real_eip !84 :          <29a>	movslq	-24(%rbp), %rdx
1071 :   %610 = add i64 %609, -24, !mcsema_real_eip !84 :          <29a>	movslq	-24(%rbp), %rdx
1072 :   %611 = inttoptr i64 %610 to i64*, !mcsema_real_eip !84 :          <29a>	movslq	-24(%rbp), %rdx

1073 :   %612 = bitcast i64* %611 to i32* : NIL

1074 :   %613 = load i32* %612, !mcsema_real_eip !84 :          <29a>	movslq	-24(%rbp), %rdx
1075 :   %614 = sext i32 %613 to i64, !mcsema_real_eip !84 :          <29a>	movslq	-24(%rbp), %rdx

1076 :   %615 = mul i64 %614, 11, !mcsema_real_eip !85 :          <29e>	imulq	 $11, %rdx
1077 :   store i64 %615, i64* %RDX_val, !mcsema_real_eip !85 :          <29e>	imulq	 $11, %rdx

1078 :   %616 = load i64* %RAX_val, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax

1079 :   %uadd369 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %615, i64 %616) : NIL
1080 :   %617 = extractvalue { i64, i1 } %uadd369, 0 : NIL

1081 :   %618 = xor i64 %617, %616, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1082 :   %619 = xor i64 %618, %615, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1083 :   %620 = and i64 %619, 16, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1084 :   %621 = icmp ne i64 %620, 0, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1085 :   store i1 %621, i1* %AF_val, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax

1086 :   %622 = icmp slt i64 %617, 0 : NIL

1087 :   store i1 %622, i1* %SF_val, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1088 :   %623 = icmp eq i64 %617, 0, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1089 :   store i1 %623, i1* %ZF_val, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1090 :   %624 = xor i64 %616, -9223372036854775808, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1091 :   %625 = xor i64 %624, %615, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1092 :   %626 = and i64 %618, %625, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax

1093 :   %627 = icmp slt i64 %626, 0 : NIL

1094 :   store i1 %627, i1* %OF_val, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1095 :   %628 = trunc i64 %617 to i8, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1096 :   %629 = tail call i8 @llvm.ctpop.i8(i8 %628), !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax

1097 :   %630 = and i8 %629, 1 : NIL
1098 :   %631 = icmp eq i8 %630, 0 : NIL

1099 :   store i1 %631, i1* %PF_val, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax

1100 :   %632 = extractvalue { i64, i1 } %uadd369, 1 : NIL

1101 :   store i1 %632, i1* %CF_val, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1102 :   store i64 %617, i64* %RAX_val, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax

1103 :   %633 = load i64* %RCX_val, !mcsema_real_eip !87 :          <2a8>	movsbl	(%rax,%rcx), %esi
1104 :   %634 = add i64 %633, %617, !mcsema_real_eip !87 :          <2a8>	movsbl	(%rax,%rcx), %esi
1105 :   %635 = inttoptr i64 %634 to i64*, !mcsema_real_eip !87 :          <2a8>	movsbl	(%rax,%rcx), %esi

1106 :   %636 = bitcast i64* %635 to i8* : NIL

1107 :   %637 = load i8* %636, !mcsema_real_eip !87 :          <2a8>	movsbl	(%rax,%rcx), %esi
1108 :   %638 = sext i8 %637 to i32, !mcsema_real_eip !87 :          <2a8>	movsbl	(%rax,%rcx), %esi
1109 :   %639 = zext i32 %638 to i64, !mcsema_real_eip !87 :          <2a8>	movsbl	(%rax,%rcx), %esi
1110 :   store i64 %639, i64* %RSI_val, !mcsema_real_eip !87 :          <2a8>	movsbl	(%rax,%rcx), %esi

1111 :   %640 = add nsw i32 %638, -32 : NIL

1112 :   %641 = xor i32 %640, %638, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi
1113 :   %642 = and i32 %641, 16, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi
1114 :   %643 = icmp ne i32 %642, 0, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi
1115 :   store i1 %643, i1* %AF_val, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi
1116 :   %644 = trunc i32 %640 to i8, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi
1117 :   %645 = tail call i8 @llvm.ctpop.i8(i8 %644), !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi

1118 :   %646 = and i8 %645, 1 : NIL
1119 :   %647 = icmp eq i8 %646, 0 : NIL

1120 :   store i1 %647, i1* %PF_val, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi
1121 :   %648 = icmp eq i32 %640, 0, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi
1122 :   store i1 %648, i1* %ZF_val, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi

1123 :   %649 = icmp slt i32 %640, 0 : NIL

1124 :   store i1 %649, i1* %SF_val, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi

1125 :   %650 = icmp ult i8 %637, 32 : NIL

1126 :   store i1 %650, i1* %CF_val, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi
1127 :   %651 = and i32 %641, %638, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi

1128 :   %652 = icmp slt i32 %651, 0 : NIL

1129 :   store i1 %652, i1* %OF_val, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi

1130 :   %653 = load i1* %ZF_val, !mcsema_real_eip !89 :          <2b2>	je	95
1131 :   br i1 %653, label %block_0x317, label %block_0x2b8, !mcsema_real_eip !89 :          <2b2>	je	95

1132 :   %654 = tail call x86_64_sysvcc i64 @printf(i64 add (i64 ptrtoint (%1* @data_0x3ff to i64), i64 56)), !mcsema_real_eip !90 :          <262>	callq	0
1133 :   store i64 %654, i64* %RAX_val, !mcsema_real_eip !90 :          <262>	callq	0

1134 :   store i64 add (i64 ptrtoint (%1* @data_0x3ff to i64), i64 66), i64* %RDI_val, !mcsema_real_eip !91 :          <267>	movabsq	$0, %rdi

1135 :   %655 = load i64* %RBP_val, !mcsema_real_eip !92 :          <271>	leaq	-64(%rbp), %rsi
1136 :   %656 = add i64 %655, -64, !mcsema_real_eip !92 :          <271>	leaq	-64(%rbp), %rsi
1137 :   %657 = inttoptr i64 %656 to i64*, !mcsema_real_eip !92 :          <271>	leaq	-64(%rbp), %rsi
1138 :   %658 = ptrtoint i64* %657 to i64, !mcsema_real_eip !92 :          <271>	leaq	-64(%rbp), %rsi
1139 :   store i64 %658, i64* %RSI_val, !mcsema_real_eip !92 :          <271>	leaq	-64(%rbp), %rsi

1140 :   %659 = add i64 %655, -108, !mcsema_real_eip !93 :          <275>	movl	%eax, -108(%rbp)
1141 :   %660 = inttoptr i64 %659 to i64*, !mcsema_real_eip !93 :          <275>	movl	%eax, -108(%rbp)
1142 :   %661 = load i64* %RAX_val, !mcsema_real_eip !93 :          <275>	movl	%eax, -108(%rbp)
1143 :   %662 = trunc i64 %661 to i32, !mcsema_real_eip !93 :          <275>	movl	%eax, -108(%rbp)

1144 :   %663 = bitcast i64* %660 to i32* : NIL

1145 :   store i32 %662, i32* %663, !mcsema_real_eip !93 :          <275>	movl	%eax, -108(%rbp)

1146 :   %664 = load i64* %RDI_val, !mcsema_real_eip !94 :          <27a>	callq	0
1147 :   %665 = tail call x86_64_sysvcc i64 @printf(i64 %664), !mcsema_real_eip !94 :          <27a>	callq	0

1148 :   store i64 0, i64* %RDI_val, !mcsema_real_eip !95 :          <27f>	movl	$0, %edi

1149 :   %666 = load i64* %RBP_val, !mcsema_real_eip !96 :          <284>	movl	%eax, -112(%rbp)
1150 :   %667 = add i64 %666, -112, !mcsema_real_eip !96 :          <284>	movl	%eax, -112(%rbp)
1151 :   %668 = inttoptr i64 %667 to i64*, !mcsema_real_eip !96 :          <284>	movl	%eax, -112(%rbp)
1152 :   %669 = trunc i64 %665 to i32, !mcsema_real_eip !96 :          <284>	movl	%eax, -112(%rbp)

1153 :   %670 = bitcast i64* %668 to i32* : NIL

1154 :   store i32 %669, i32* %670, !mcsema_real_eip !96 :          <284>	movl	%eax, -112(%rbp)

1155 :   %671 = load i64* %RDI_val, !mcsema_real_eip !97 :          <287>	callq	0
1156 :   %672 = tail call x86_64_sysvcc i64 @exit(i64 %671), !mcsema_real_eip !97 :          <287>	callq	0

1157 :   store i64 ptrtoint (%0* @data_0x3b2 to i64), i64* %RAX_val, !mcsema_real_eip !82 :          <28c>	movabsq	$0, %rax

1158 :   %673 = load i64* %RBP_val, !mcsema_real_eip !83 :          <296>	movslq	-20(%rbp), %rcx
1159 :   %674 = add i64 %673, -20, !mcsema_real_eip !83 :          <296>	movslq	-20(%rbp), %rcx
1160 :   %675 = inttoptr i64 %674 to i64*, !mcsema_real_eip !83 :          <296>	movslq	-20(%rbp), %rcx

1161 :   %676 = bitcast i64* %675 to i32* : NIL

1162 :   %677 = load i32* %676, !mcsema_real_eip !83 :          <296>	movslq	-20(%rbp), %rcx
1163 :   %678 = sext i32 %677 to i64, !mcsema_real_eip !83 :          <296>	movslq	-20(%rbp), %rcx
1164 :   store i64 %678, i64* %RCX_val, !mcsema_real_eip !83 :          <296>	movslq	-20(%rbp), %rcx

1165 :   %679 = load i64* %RBP_val, !mcsema_real_eip !84 :          <29a>	movslq	-24(%rbp), %rdx
1166 :   %680 = add i64 %679, -24, !mcsema_real_eip !84 :          <29a>	movslq	-24(%rbp), %rdx
1167 :   %681 = inttoptr i64 %680 to i64*, !mcsema_real_eip !84 :          <29a>	movslq	-24(%rbp), %rdx

1168 :   %682 = bitcast i64* %681 to i32* : NIL

1169 :   %683 = load i32* %682, !mcsema_real_eip !84 :          <29a>	movslq	-24(%rbp), %rdx
1170 :   %684 = sext i32 %683 to i64, !mcsema_real_eip !84 :          <29a>	movslq	-24(%rbp), %rdx

1171 :   %685 = mul i64 %684, 11, !mcsema_real_eip !85 :          <29e>	imulq	 $11, %rdx
1172 :   store i64 %685, i64* %RDX_val, !mcsema_real_eip !85 :          <29e>	imulq	 $11, %rdx

1173 :   %686 = load i64* %RAX_val, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax

1174 :   %uadd352 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %685, i64 %686) : NIL
1175 :   %687 = extractvalue { i64, i1 } %uadd352, 0 : NIL

1176 :   %688 = xor i64 %687, %686, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1177 :   %689 = xor i64 %688, %685, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1178 :   %690 = and i64 %689, 16, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1179 :   %691 = icmp ne i64 %690, 0, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1180 :   store i1 %691, i1* %AF_val, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax

1181 :   %692 = icmp slt i64 %687, 0 : NIL

1182 :   store i1 %692, i1* %SF_val, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1183 :   %693 = icmp eq i64 %687, 0, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1184 :   store i1 %693, i1* %ZF_val, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1185 :   %694 = xor i64 %686, -9223372036854775808, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1186 :   %695 = xor i64 %694, %685, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1187 :   %696 = and i64 %688, %695, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax

1188 :   %697 = icmp slt i64 %696, 0 : NIL

1189 :   store i1 %697, i1* %OF_val, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1190 :   %698 = trunc i64 %687 to i8, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1191 :   %699 = tail call i8 @llvm.ctpop.i8(i8 %698), !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax

1192 :   %700 = and i8 %699, 1 : NIL
1193 :   %701 = icmp eq i8 %700, 0 : NIL

1194 :   store i1 %701, i1* %PF_val, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax

1195 :   %702 = extractvalue { i64, i1 } %uadd352, 1 : NIL

1196 :   store i1 %702, i1* %CF_val, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax
1197 :   store i64 %687, i64* %RAX_val, !mcsema_real_eip !86 :          <2a5>	addq	%rdx, %rax

1198 :   %703 = load i64* %RCX_val, !mcsema_real_eip !87 :          <2a8>	movsbl	(%rax,%rcx), %esi
1199 :   %704 = add i64 %703, %687, !mcsema_real_eip !87 :          <2a8>	movsbl	(%rax,%rcx), %esi
1200 :   %705 = inttoptr i64 %704 to i64*, !mcsema_real_eip !87 :          <2a8>	movsbl	(%rax,%rcx), %esi

1201 :   %706 = bitcast i64* %705 to i8* : NIL

1202 :   %707 = load i8* %706, !mcsema_real_eip !87 :          <2a8>	movsbl	(%rax,%rcx), %esi
1203 :   %708 = sext i8 %707 to i32, !mcsema_real_eip !87 :          <2a8>	movsbl	(%rax,%rcx), %esi
1204 :   %709 = zext i32 %708 to i64, !mcsema_real_eip !87 :          <2a8>	movsbl	(%rax,%rcx), %esi
1205 :   store i64 %709, i64* %RSI_val, !mcsema_real_eip !87 :          <2a8>	movsbl	(%rax,%rcx), %esi

1206 :   %710 = add nsw i32 %708, -32 : NIL

1207 :   %711 = xor i32 %710, %708, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi
1208 :   %712 = and i32 %711, 16, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi
1209 :   %713 = icmp ne i32 %712, 0, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi
1210 :   store i1 %713, i1* %AF_val, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi
1211 :   %714 = trunc i32 %710 to i8, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi
1212 :   %715 = tail call i8 @llvm.ctpop.i8(i8 %714), !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi

1213 :   %716 = and i8 %715, 1 : NIL
1214 :   %717 = icmp eq i8 %716, 0 : NIL

1215 :   store i1 %717, i1* %PF_val, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi
1216 :   %718 = icmp eq i32 %710, 0, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi
1217 :   store i1 %718, i1* %ZF_val, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi

1218 :   %719 = icmp slt i32 %710, 0 : NIL

1219 :   store i1 %719, i1* %SF_val, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi

1220 :   %720 = icmp ult i8 %707, 32 : NIL

1221 :   store i1 %720, i1* %CF_val, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi
1222 :   %721 = and i32 %711, %708, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi

1223 :   %722 = icmp slt i32 %721, 0 : NIL

1224 :   store i1 %722, i1* %OF_val, !mcsema_real_eip !88 :          <2ac>	cmpl	$32, %esi

1225 :   %723 = load i1* %ZF_val, !mcsema_real_eip !89 :          <2b2>	je	95
1226 :   br i1 %723, label %block_0x317, label %block_0x2b8, !mcsema_real_eip !89 :          <2b2>	je	95

1227 :   %724 = load i64* %RBP_val, !mcsema_real_eip !98 :          <1e8>	movl	-20(%rbp), %eax
1228 :   %725 = add i64 %724, -20, !mcsema_real_eip !98 :          <1e8>	movl	-20(%rbp), %eax
1229 :   %726 = inttoptr i64 %725 to i64*, !mcsema_real_eip !98 :          <1e8>	movl	-20(%rbp), %eax

1230 :   %727 = bitcast i64* %726 to i32* : NIL

1231 :   %728 = load i32* %727, !mcsema_real_eip !98 :          <1e8>	movl	-20(%rbp), %eax

1232 :   %uadd370 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %728, i32 1) : NIL
1233 :   %729 = extractvalue { i32, i1 } %uadd370, 0 : NIL

1234 :   %730 = xor i32 %729, %728, !mcsema_real_eip !99 :          <1eb>	addl	$1, %eax
1235 :   %731 = and i32 %730, 16, !mcsema_real_eip !99 :          <1eb>	addl	$1, %eax
1236 :   %732 = icmp ne i32 %731, 0, !mcsema_real_eip !99 :          <1eb>	addl	$1, %eax
1237 :   store i1 %732, i1* %AF_val, !mcsema_real_eip !99 :          <1eb>	addl	$1, %eax

1238 :   %733 = icmp slt i32 %729, 0 : NIL

1239 :   store i1 %733, i1* %SF_val, !mcsema_real_eip !99 :          <1eb>	addl	$1, %eax
1240 :   %734 = icmp eq i32 %729, 0, !mcsema_real_eip !99 :          <1eb>	addl	$1, %eax
1241 :   store i1 %734, i1* %ZF_val, !mcsema_real_eip !99 :          <1eb>	addl	$1, %eax
1242 :   %735 = xor i32 %728, -2147483648, !mcsema_real_eip !99 :          <1eb>	addl	$1, %eax
1243 :   %736 = and i32 %730, %735, !mcsema_real_eip !99 :          <1eb>	addl	$1, %eax

1244 :   %737 = icmp slt i32 %736, 0 : NIL

1245 :   store i1 %737, i1* %OF_val, !mcsema_real_eip !99 :          <1eb>	addl	$1, %eax
1246 :   %738 = trunc i32 %729 to i8, !mcsema_real_eip !99 :          <1eb>	addl	$1, %eax
1247 :   %739 = tail call i8 @llvm.ctpop.i8(i8 %738), !mcsema_real_eip !99 :          <1eb>	addl	$1, %eax

1248 :   %740 = and i8 %739, 1 : NIL
1249 :   %741 = icmp eq i8 %740, 0 : NIL

1250 :   store i1 %741, i1* %PF_val, !mcsema_real_eip !99 :          <1eb>	addl	$1, %eax

1251 :   %742 = extractvalue { i32, i1 } %uadd370, 1 : NIL

1252 :   store i1 %742, i1* %CF_val, !mcsema_real_eip !99 :          <1eb>	addl	$1, %eax
1253 :   %743 = zext i32 %729 to i64, !mcsema_real_eip !99 :          <1eb>	addl	$1, %eax
1254 :   store i64 %743, i64* %RAX_val, !mcsema_real_eip !99 :          <1eb>	addl	$1, %eax

1255 :   %744 = load i64* %RBP_val, !mcsema_real_eip !100 :          <1f0>	movl	%eax, -20(%rbp)
1256 :   %745 = add i64 %744, -20, !mcsema_real_eip !100 :          <1f0>	movl	%eax, -20(%rbp)
1257 :   %746 = inttoptr i64 %745 to i64*, !mcsema_real_eip !100 :          <1f0>	movl	%eax, -20(%rbp)

1258 :   %747 = bitcast i64* %746 to i32* : NIL

1259 :   store i32 %729, i32* %747, !mcsema_real_eip !100 :          <1f0>	movl	%eax, -20(%rbp)

1260 :   br label %block_0x22a, !mcsema_real_eip !101 :          <1f3>	jmp	50

1261 :   %748 = load i64* %RBP_val, !mcsema_real_eip !102 :          <1b8>	movl	-24(%rbp), %eax
1262 :   %749 = add i64 %748, -24, !mcsema_real_eip !102 :          <1b8>	movl	-24(%rbp), %eax
1263 :   %750 = inttoptr i64 %749 to i64*, !mcsema_real_eip !102 :          <1b8>	movl	-24(%rbp), %eax

1264 :   %751 = bitcast i64* %750 to i32* : NIL

1265 :   %752 = load i32* %751, !mcsema_real_eip !102 :          <1b8>	movl	-24(%rbp), %eax

1266 :   %uadd375 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %752, i32 -1) : NIL
1267 :   %753 = extractvalue { i32, i1 } %uadd375, 0 : NIL

1268 :   %754 = xor i32 %753, %752, !mcsema_real_eip !103 :          <1bb>	addl	$4294967295, %eax

1269 :   %755 = and i32 %754, 16 : NIL
1270 :   %756 = icmp eq i32 %755, 0 : NIL

1271 :   store i1 %756, i1* %AF_val, !mcsema_real_eip !103 :          <1bb>	addl	$4294967295, %eax

1272 :   %757 = icmp slt i32 %753, 0 : NIL

1273 :   store i1 %757, i1* %SF_val, !mcsema_real_eip !103 :          <1bb>	addl	$4294967295, %eax
1274 :   %758 = icmp eq i32 %753, 0, !mcsema_real_eip !103 :          <1bb>	addl	$4294967295, %eax
1275 :   store i1 %758, i1* %ZF_val, !mcsema_real_eip !103 :          <1bb>	addl	$4294967295, %eax
1276 :   %759 = and i32 %754, %752, !mcsema_real_eip !103 :          <1bb>	addl	$4294967295, %eax

1277 :   %760 = icmp slt i32 %759, 0 : NIL

1278 :   store i1 %760, i1* %OF_val, !mcsema_real_eip !103 :          <1bb>	addl	$4294967295, %eax
1279 :   %761 = trunc i32 %753 to i8, !mcsema_real_eip !103 :          <1bb>	addl	$4294967295, %eax
1280 :   %762 = tail call i8 @llvm.ctpop.i8(i8 %761), !mcsema_real_eip !103 :          <1bb>	addl	$4294967295, %eax

1281 :   %763 = and i8 %762, 1 : NIL
1282 :   %764 = icmp eq i8 %763, 0 : NIL

1283 :   store i1 %764, i1* %PF_val, !mcsema_real_eip !103 :          <1bb>	addl	$4294967295, %eax

1284 :   %765 = extractvalue { i32, i1 } %uadd375, 1 : NIL

1285 :   store i1 %765, i1* %CF_val, !mcsema_real_eip !103 :          <1bb>	addl	$4294967295, %eax
1286 :   %766 = zext i32 %753 to i64, !mcsema_real_eip !103 :          <1bb>	addl	$4294967295, %eax
1287 :   store i64 %766, i64* %RAX_val, !mcsema_real_eip !103 :          <1bb>	addl	$4294967295, %eax

1288 :   %767 = load i64* %RBP_val, !mcsema_real_eip !104 :          <1c0>	movl	%eax, -24(%rbp)
1289 :   %768 = add i64 %767, -24, !mcsema_real_eip !104 :          <1c0>	movl	%eax, -24(%rbp)
1290 :   %769 = inttoptr i64 %768 to i64*, !mcsema_real_eip !104 :          <1c0>	movl	%eax, -24(%rbp)

1291 :   %770 = bitcast i64* %769 to i32* : NIL

1292 :   store i32 %753, i32* %770, !mcsema_real_eip !104 :          <1c0>	movl	%eax, -24(%rbp)

1293 :   br label %block_0x22a, !mcsema_real_eip !105 :          <1c3>	jmp	98

1294 :   %771 = load i64* %RBP_val, !mcsema_real_eip !106 :          <317>	movl	-28(%rbp), %eax
1295 :   %772 = add i64 %771, -28, !mcsema_real_eip !106 :          <317>	movl	-28(%rbp), %eax
1296 :   %773 = inttoptr i64 %772 to i64*, !mcsema_real_eip !106 :          <317>	movl	-28(%rbp), %eax

1297 :   %774 = bitcast i64* %773 to i32* : NIL

1298 :   %775 = load i32* %774, !mcsema_real_eip !106 :          <317>	movl	-28(%rbp), %eax
1299 :   %776 = zext i32 %775 to i64, !mcsema_real_eip !106 :          <317>	movl	-28(%rbp), %eax
1300 :   store i64 %776, i64* %RAX_val, !mcsema_real_eip !106 :          <317>	movl	-28(%rbp), %eax

1301 :   %777 = load i64* %RBP_val, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1302 :   %778 = add i64 %777, -20, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1303 :   %779 = inttoptr i64 %778 to i64*, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax

1304 :   %780 = bitcast i64* %779 to i32* : NIL

1305 :   %781 = load i32* %780, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1306 :   %782 = sub i32 %775, %781, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1307 :   %783 = xor i32 %782, %775, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1308 :   %784 = xor i32 %783, %781, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1309 :   %785 = and i32 %784, 16, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1310 :   %786 = icmp ne i32 %785, 0, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1311 :   store i1 %786, i1* %AF_val, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1312 :   %787 = trunc i32 %782 to i8, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1313 :   %788 = tail call i8 @llvm.ctpop.i8(i8 %787), !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax

1314 :   %789 = and i8 %788, 1 : NIL
1315 :   %790 = icmp eq i8 %789, 0 : NIL

1316 :   store i1 %790, i1* %PF_val, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax

1317 :   %791 = icmp eq i32 %775, %781 : NIL

1318 :   store i1 %791, i1* %ZF_val, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax

1319 :   %792 = icmp slt i32 %782, 0 : NIL

1320 :   store i1 %792, i1* %SF_val, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1321 :   %793 = icmp ult i32 %775, %781, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1322 :   store i1 %793, i1* %CF_val, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1323 :   %794 = xor i32 %781, %775, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1324 :   %795 = and i32 %783, %794, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax

1325 :   %796 = icmp slt i32 %795, 0 : NIL

1326 :   store i1 %796, i1* %OF_val, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax

1327 :   %797 = load i1* %ZF_val, !mcsema_real_eip !108 :          <31d>	jne	42
1328 :   br i1 %797, label %block_0x323, label %block_0x34d, !mcsema_real_eip !108 :          <31d>	jne	42

1329 :   %798 = load i64* %RBP_val, !mcsema_real_eip !109 :          <2b8>	cmpl	$2, -24(%rbp)
1330 :   %799 = add i64 %798, -24, !mcsema_real_eip !109 :          <2b8>	cmpl	$2, -24(%rbp)
1331 :   %800 = inttoptr i64 %799 to i64*, !mcsema_real_eip !109 :          <2b8>	cmpl	$2, -24(%rbp)

1332 :   %801 = bitcast i64* %800 to i32* : NIL

1333 :   %802 = load i32* %801, !mcsema_real_eip !109 :          <2b8>	cmpl	$2, -24(%rbp)

1334 :   %803 = add i32 %802, -2 : NIL

1335 :   %804 = xor i32 %803, %802, !mcsema_real_eip !109 :          <2b8>	cmpl	$2, -24(%rbp)
1336 :   %805 = and i32 %804, 16, !mcsema_real_eip !109 :          <2b8>	cmpl	$2, -24(%rbp)
1337 :   %806 = icmp ne i32 %805, 0, !mcsema_real_eip !109 :          <2b8>	cmpl	$2, -24(%rbp)
1338 :   store i1 %806, i1* %AF_val, !mcsema_real_eip !109 :          <2b8>	cmpl	$2, -24(%rbp)
1339 :   %807 = trunc i32 %803 to i8, !mcsema_real_eip !109 :          <2b8>	cmpl	$2, -24(%rbp)
1340 :   %808 = tail call i8 @llvm.ctpop.i8(i8 %807), !mcsema_real_eip !109 :          <2b8>	cmpl	$2, -24(%rbp)

1341 :   %809 = and i8 %808, 1 : NIL
1342 :   %810 = icmp eq i8 %809, 0 : NIL

1343 :   store i1 %810, i1* %PF_val, !mcsema_real_eip !109 :          <2b8>	cmpl	$2, -24(%rbp)
1344 :   %811 = icmp eq i32 %803, 0, !mcsema_real_eip !109 :          <2b8>	cmpl	$2, -24(%rbp)
1345 :   store i1 %811, i1* %ZF_val, !mcsema_real_eip !109 :          <2b8>	cmpl	$2, -24(%rbp)

1346 :   %812 = icmp slt i32 %803, 0 : NIL

1347 :   store i1 %812, i1* %SF_val, !mcsema_real_eip !109 :          <2b8>	cmpl	$2, -24(%rbp)
1348 :   %813 = icmp ult i32 %802, 2, !mcsema_real_eip !109 :          <2b8>	cmpl	$2, -24(%rbp)
1349 :   store i1 %813, i1* %CF_val, !mcsema_real_eip !109 :          <2b8>	cmpl	$2, -24(%rbp)
1350 :   %814 = and i32 %804, %802, !mcsema_real_eip !109 :          <2b8>	cmpl	$2, -24(%rbp)

1351 :   %815 = icmp slt i32 %814, 0 : NIL

1352 :   store i1 %815, i1* %OF_val, !mcsema_real_eip !109 :          <2b8>	cmpl	$2, -24(%rbp)

1353 :   %816 = load i1* %ZF_val, !mcsema_real_eip !110 :          <2bf>	jne	70
1354 :   br i1 %816, label %block_0x2c5, label %block_0x30b, !mcsema_real_eip !110 :          <2bf>	jne	70

1355 :   %817 = load i64* %RBP_val, !mcsema_real_eip !111 :          <30b>	movl	-28(%rbp), %eax
1356 :   %818 = add i64 %817, -28, !mcsema_real_eip !111 :          <30b>	movl	-28(%rbp), %eax
1357 :   %819 = inttoptr i64 %818 to i64*, !mcsema_real_eip !111 :          <30b>	movl	-28(%rbp), %eax

1358 :   %820 = bitcast i64* %819 to i32* : NIL

1359 :   %821 = load i32* %820, !mcsema_real_eip !111 :          <30b>	movl	-28(%rbp), %eax
1360 :   %822 = zext i32 %821 to i64, !mcsema_real_eip !111 :          <30b>	movl	-28(%rbp), %eax
1361 :   store i64 %822, i64* %RAX_val, !mcsema_real_eip !111 :          <30b>	movl	-28(%rbp), %eax

1362 :   %823 = load i64* %RBP_val, !mcsema_real_eip !112 :          <30e>	movl	%eax, -20(%rbp)
1363 :   %824 = add i64 %823, -20, !mcsema_real_eip !112 :          <30e>	movl	%eax, -20(%rbp)
1364 :   %825 = inttoptr i64 %824 to i64*, !mcsema_real_eip !112 :          <30e>	movl	%eax, -20(%rbp)

1365 :   %826 = bitcast i64* %825 to i32* : NIL

1366 :   store i32 %821, i32* %826, !mcsema_real_eip !112 :          <30e>	movl	%eax, -20(%rbp)

1367 :   %827 = load i64* %RBP_val, !mcsema_real_eip !113 :          <311>	movl	-32(%rbp), %eax
1368 :   %828 = add i64 %827, -32, !mcsema_real_eip !113 :          <311>	movl	-32(%rbp), %eax
1369 :   %829 = inttoptr i64 %828 to i64*, !mcsema_real_eip !113 :          <311>	movl	-32(%rbp), %eax

1370 :   %830 = bitcast i64* %829 to i32* : NIL

1371 :   %831 = load i32* %830, !mcsema_real_eip !113 :          <311>	movl	-32(%rbp), %eax
1372 :   %832 = zext i32 %831 to i64, !mcsema_real_eip !113 :          <311>	movl	-32(%rbp), %eax
1373 :   store i64 %832, i64* %RAX_val, !mcsema_real_eip !113 :          <311>	movl	-32(%rbp), %eax

1374 :   %833 = load i64* %RBP_val, !mcsema_real_eip !114 :          <314>	movl	%eax, -24(%rbp)
1375 :   %834 = add i64 %833, -24, !mcsema_real_eip !114 :          <314>	movl	%eax, -24(%rbp)
1376 :   %835 = inttoptr i64 %834 to i64*, !mcsema_real_eip !114 :          <314>	movl	%eax, -24(%rbp)

1377 :   %836 = bitcast i64* %835 to i32* : NIL

1378 :   store i32 %831, i32* %836, !mcsema_real_eip !114 :          <314>	movl	%eax, -24(%rbp)

1379 :   %837 = load i64* %RBP_val, !mcsema_real_eip !106 :          <317>	movl	-28(%rbp), %eax
1380 :   %838 = add i64 %837, -28, !mcsema_real_eip !106 :          <317>	movl	-28(%rbp), %eax
1381 :   %839 = inttoptr i64 %838 to i64*, !mcsema_real_eip !106 :          <317>	movl	-28(%rbp), %eax

1382 :   %840 = bitcast i64* %839 to i32* : NIL

1383 :   %841 = load i32* %840, !mcsema_real_eip !106 :          <317>	movl	-28(%rbp), %eax
1384 :   %842 = zext i32 %841 to i64, !mcsema_real_eip !106 :          <317>	movl	-28(%rbp), %eax
1385 :   store i64 %842, i64* %RAX_val, !mcsema_real_eip !106 :          <317>	movl	-28(%rbp), %eax

1386 :   %843 = load i64* %RBP_val, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1387 :   %844 = add i64 %843, -20, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1388 :   %845 = inttoptr i64 %844 to i64*, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax

1389 :   %846 = bitcast i64* %845 to i32* : NIL

1390 :   %847 = load i32* %846, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1391 :   %848 = sub i32 %841, %847, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1392 :   %849 = xor i32 %848, %841, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1393 :   %850 = xor i32 %849, %847, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1394 :   %851 = and i32 %850, 16, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1395 :   %852 = icmp ne i32 %851, 0, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1396 :   store i1 %852, i1* %AF_val, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1397 :   %853 = trunc i32 %848 to i8, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1398 :   %854 = tail call i8 @llvm.ctpop.i8(i8 %853), !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax

1399 :   %855 = and i8 %854, 1 : NIL
1400 :   %856 = icmp eq i8 %855, 0 : NIL

1401 :   store i1 %856, i1* %PF_val, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax

1402 :   %857 = icmp eq i32 %841, %847 : NIL

1403 :   store i1 %857, i1* %ZF_val, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax

1404 :   %858 = icmp slt i32 %848, 0 : NIL

1405 :   store i1 %858, i1* %SF_val, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1406 :   %859 = icmp ult i32 %841, %847, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1407 :   store i1 %859, i1* %CF_val, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1408 :   %860 = xor i32 %847, %841, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax
1409 :   %861 = and i32 %849, %860, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax

1410 :   %862 = icmp slt i32 %861, 0 : NIL

1411 :   store i1 %862, i1* %OF_val, !mcsema_real_eip !107 :          <31a>	cmpl	-20(%rbp), %eax

1412 :   %863 = load i1* %ZF_val, !mcsema_real_eip !108 :          <31d>	jne	42
1413 :   br i1 %863, label %block_0x323, label %block_0x34d, !mcsema_real_eip !108 :          <31d>	jne	42

1414 :   store i64 ptrtoint (%0* @data_0x3b2 to i64), i64* %RAX_val, !mcsema_real_eip !115 :          <2c5>	movabsq	$0, %rax

1415 :   %864 = load i64* %RBP_val, !mcsema_real_eip !116 :          <2cf>	movslq	-20(%rbp), %rcx
1416 :   %865 = add i64 %864, -20, !mcsema_real_eip !116 :          <2cf>	movslq	-20(%rbp), %rcx
1417 :   %866 = inttoptr i64 %865 to i64*, !mcsema_real_eip !116 :          <2cf>	movslq	-20(%rbp), %rcx

1418 :   %867 = bitcast i64* %866 to i32* : NIL

1419 :   %868 = load i32* %867, !mcsema_real_eip !116 :          <2cf>	movslq	-20(%rbp), %rcx
1420 :   %869 = sext i32 %868 to i64, !mcsema_real_eip !116 :          <2cf>	movslq	-20(%rbp), %rcx
1421 :   store i64 %869, i64* %RCX_val, !mcsema_real_eip !116 :          <2cf>	movslq	-20(%rbp), %rcx

1422 :   %870 = load i64* %RBP_val, !mcsema_real_eip !117 :          <2d3>	movslq	-24(%rbp), %rdx
1423 :   %871 = add i64 %870, -24, !mcsema_real_eip !117 :          <2d3>	movslq	-24(%rbp), %rdx
1424 :   %872 = inttoptr i64 %871 to i64*, !mcsema_real_eip !117 :          <2d3>	movslq	-24(%rbp), %rdx

1425 :   %873 = bitcast i64* %872 to i32* : NIL

1426 :   %874 = load i32* %873, !mcsema_real_eip !117 :          <2d3>	movslq	-24(%rbp), %rdx
1427 :   %875 = sext i32 %874 to i64, !mcsema_real_eip !117 :          <2d3>	movslq	-24(%rbp), %rdx

1428 :   %876 = mul i64 %875, 11, !mcsema_real_eip !118 :          <2d7>	imulq	 $11, %rdx
1429 :   store i64 %876, i64* %RDX_val, !mcsema_real_eip !118 :          <2d7>	imulq	 $11, %rdx

1430 :   %877 = load i64* %RAX_val, !mcsema_real_eip !119 :          <2de>	addq	%rdx, %rax

1431 :   %uadd354 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %876, i64 %877) : NIL
1432 :   %878 = extractvalue { i64, i1 } %uadd354, 0 : NIL

1433 :   %879 = xor i64 %878, %877, !mcsema_real_eip !119 :          <2de>	addq	%rdx, %rax
1434 :   %880 = xor i64 %879, %876, !mcsema_real_eip !119 :          <2de>	addq	%rdx, %rax
1435 :   %881 = and i64 %880, 16, !mcsema_real_eip !119 :          <2de>	addq	%rdx, %rax
1436 :   %882 = icmp ne i64 %881, 0, !mcsema_real_eip !119 :          <2de>	addq	%rdx, %rax
1437 :   store i1 %882, i1* %AF_val, !mcsema_real_eip !119 :          <2de>	addq	%rdx, %rax

1438 :   %883 = icmp slt i64 %878, 0 : NIL

1439 :   store i1 %883, i1* %SF_val, !mcsema_real_eip !119 :          <2de>	addq	%rdx, %rax
1440 :   %884 = icmp eq i64 %878, 0, !mcsema_real_eip !119 :          <2de>	addq	%rdx, %rax
1441 :   store i1 %884, i1* %ZF_val, !mcsema_real_eip !119 :          <2de>	addq	%rdx, %rax
1442 :   %885 = xor i64 %877, -9223372036854775808, !mcsema_real_eip !119 :          <2de>	addq	%rdx, %rax
1443 :   %886 = xor i64 %885, %876, !mcsema_real_eip !119 :          <2de>	addq	%rdx, %rax
1444 :   %887 = and i64 %879, %886, !mcsema_real_eip !119 :          <2de>	addq	%rdx, %rax

1445 :   %888 = icmp slt i64 %887, 0 : NIL

1446 :   store i1 %888, i1* %OF_val, !mcsema_real_eip !119 :          <2de>	addq	%rdx, %rax
1447 :   %889 = trunc i64 %878 to i8, !mcsema_real_eip !119 :          <2de>	addq	%rdx, %rax
1448 :   %890 = tail call i8 @llvm.ctpop.i8(i8 %889), !mcsema_real_eip !119 :          <2de>	addq	%rdx, %rax

1449 :   %891 = and i8 %890, 1 : NIL
1450 :   %892 = icmp eq i8 %891, 0 : NIL

1451 :   store i1 %892, i1* %PF_val, !mcsema_real_eip !119 :          <2de>	addq	%rdx, %rax

1452 :   %893 = extractvalue { i64, i1 } %uadd354, 1 : NIL

1453 :   store i1 %893, i1* %CF_val, !mcsema_real_eip !119 :          <2de>	addq	%rdx, %rax
1454 :   store i64 %878, i64* %RAX_val, !mcsema_real_eip !119 :          <2de>	addq	%rdx, %rax

1455 :   %894 = load i64* %RCX_val, !mcsema_real_eip !120 :          <2e1>	movsbl	(%rax,%rcx), %esi
1456 :   %895 = add i64 %894, %878, !mcsema_real_eip !120 :          <2e1>	movsbl	(%rax,%rcx), %esi
1457 :   %896 = inttoptr i64 %895 to i64*, !mcsema_real_eip !120 :          <2e1>	movsbl	(%rax,%rcx), %esi

1458 :   %897 = bitcast i64* %896 to i8* : NIL

1459 :   %898 = load i8* %897, !mcsema_real_eip !120 :          <2e1>	movsbl	(%rax,%rcx), %esi
1460 :   %899 = sext i8 %898 to i32, !mcsema_real_eip !120 :          <2e1>	movsbl	(%rax,%rcx), %esi
1461 :   %900 = zext i32 %899 to i64, !mcsema_real_eip !120 :          <2e1>	movsbl	(%rax,%rcx), %esi
1462 :   store i64 %900, i64* %RSI_val, !mcsema_real_eip !120 :          <2e1>	movsbl	(%rax,%rcx), %esi

1463 :   %901 = add nsw i32 %899, -124 : NIL

1464 :   %902 = xor i32 %901, %899, !mcsema_real_eip !121 :          <2e5>	cmpl	$124, %esi

1465 :   %903 = and i32 %902, 16 : NIL
1466 :   %904 = icmp eq i32 %903, 0 : NIL

1467 :   store i1 %904, i1* %AF_val, !mcsema_real_eip !121 :          <2e5>	cmpl	$124, %esi
1468 :   %905 = trunc i32 %901 to i8, !mcsema_real_eip !121 :          <2e5>	cmpl	$124, %esi
1469 :   %906 = tail call i8 @llvm.ctpop.i8(i8 %905), !mcsema_real_eip !121 :          <2e5>	cmpl	$124, %esi

1470 :   %907 = and i8 %906, 1 : NIL
1471 :   %908 = icmp eq i8 %907, 0 : NIL

1472 :   store i1 %908, i1* %PF_val, !mcsema_real_eip !121 :          <2e5>	cmpl	$124, %esi
1473 :   %909 = icmp eq i32 %901, 0, !mcsema_real_eip !121 :          <2e5>	cmpl	$124, %esi
1474 :   store i1 %909, i1* %ZF_val, !mcsema_real_eip !121 :          <2e5>	cmpl	$124, %esi

1475 :   %910 = icmp slt i32 %901, 0 : NIL

1476 :   store i1 %910, i1* %SF_val, !mcsema_real_eip !121 :          <2e5>	cmpl	$124, %esi

1477 :   %911 = icmp ult i8 %898, 124 : NIL

1478 :   store i1 %911, i1* %CF_val, !mcsema_real_eip !121 :          <2e5>	cmpl	$124, %esi
1479 :   %912 = and i32 %902, %899, !mcsema_real_eip !121 :          <2e5>	cmpl	$124, %esi

1480 :   %913 = icmp slt i32 %912, 0 : NIL

1481 :   store i1 %913, i1* %OF_val, !mcsema_real_eip !121 :          <2e5>	cmpl	$124, %esi

1482 :   %914 = load i1* %ZF_val, !mcsema_real_eip !122 :          <2eb>	jne	26
1483 :   br i1 %914, label %block_0x2f1, label %block_0x30b, !mcsema_real_eip !122 :          <2eb>	jne	26

1484 :   store i64 ptrtoint (%0* @data_0x3b2 to i64), i64* %RAX_val, !mcsema_real_eip !123 :          <34d>	movabsq	$0, %rax

1485 :   %915 = load i64* %RBP_val, !mcsema_real_eip !124 :          <357>	movslq	-20(%rbp), %rcx
1486 :   %916 = add i64 %915, -20, !mcsema_real_eip !124 :          <357>	movslq	-20(%rbp), %rcx
1487 :   %917 = inttoptr i64 %916 to i64*, !mcsema_real_eip !124 :          <357>	movslq	-20(%rbp), %rcx

1488 :   %918 = bitcast i64* %917 to i32* : NIL

1489 :   %919 = load i32* %918, !mcsema_real_eip !124 :          <357>	movslq	-20(%rbp), %rcx
1490 :   %920 = sext i32 %919 to i64, !mcsema_real_eip !124 :          <357>	movslq	-20(%rbp), %rcx
1491 :   store i64 %920, i64* %RCX_val, !mcsema_real_eip !124 :          <357>	movslq	-20(%rbp), %rcx

1492 :   %921 = load i64* %RBP_val, !mcsema_real_eip !125 :          <35b>	movslq	-24(%rbp), %rdx
1493 :   %922 = add i64 %921, -24, !mcsema_real_eip !125 :          <35b>	movslq	-24(%rbp), %rdx
1494 :   %923 = inttoptr i64 %922 to i64*, !mcsema_real_eip !125 :          <35b>	movslq	-24(%rbp), %rdx

1495 :   %924 = bitcast i64* %923 to i32* : NIL

1496 :   %925 = load i32* %924, !mcsema_real_eip !125 :          <35b>	movslq	-24(%rbp), %rdx
1497 :   %926 = sext i32 %925 to i64, !mcsema_real_eip !125 :          <35b>	movslq	-24(%rbp), %rdx

1498 :   %927 = mul i64 %926, 11, !mcsema_real_eip !126 :          <35f>	imulq	 $11, %rdx
1499 :   store i64 %927, i64* %RDX_val, !mcsema_real_eip !126 :          <35f>	imulq	 $11, %rdx

1500 :   %928 = load i64* %RAX_val, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax

1501 :   %uadd366 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %927, i64 %928) : NIL
1502 :   %929 = extractvalue { i64, i1 } %uadd366, 0 : NIL

1503 :   %930 = xor i64 %929, %928, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1504 :   %931 = xor i64 %930, %927, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1505 :   %932 = and i64 %931, 16, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1506 :   %933 = icmp ne i64 %932, 0, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1507 :   store i1 %933, i1* %AF_val, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax

1508 :   %934 = icmp slt i64 %929, 0 : NIL

1509 :   store i1 %934, i1* %SF_val, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1510 :   %935 = icmp eq i64 %929, 0, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1511 :   store i1 %935, i1* %ZF_val, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1512 :   %936 = xor i64 %928, -9223372036854775808, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1513 :   %937 = xor i64 %936, %927, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1514 :   %938 = and i64 %930, %937, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax

1515 :   %939 = icmp slt i64 %938, 0 : NIL

1516 :   store i1 %939, i1* %OF_val, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1517 :   %940 = trunc i64 %929 to i8, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1518 :   %941 = tail call i8 @llvm.ctpop.i8(i8 %940), !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax

1519 :   %942 = and i8 %941, 1 : NIL
1520 :   %943 = icmp eq i8 %942, 0 : NIL

1521 :   store i1 %943, i1* %PF_val, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax

1522 :   %944 = extractvalue { i64, i1 } %uadd366, 1 : NIL

1523 :   store i1 %944, i1* %CF_val, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1524 :   store i64 %929, i64* %RAX_val, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax

1525 :   %945 = load i64* %RCX_val, !mcsema_real_eip !128 :          <369>	movb	$88, (%rax,%rcx)
1526 :   %946 = add i64 %945, %929, !mcsema_real_eip !128 :          <369>	movb	$88, (%rax,%rcx)
1527 :   %947 = inttoptr i64 %946 to i64*, !mcsema_real_eip !128 :          <369>	movb	$88, (%rax,%rcx)

1528 :   %948 = bitcast i64* %947 to i8* : NIL

1529 :   store i8 88, i8* %948, !mcsema_real_eip !128 :          <369>	movb	$88, (%rax,%rcx)

1530 :   %949 = load i64* %RSP_val, !mcsema_real_eip !129 :          <36d>	callq	-882

1531 :   %950 = add i64 %949, -8 : NIL

1532 :   %951 = inttoptr i64 %950 to i64*, !mcsema_real_eip !129 :          <36d>	callq	-882
1533 :   store i64 -4981261766360305936, i64* %951, !mcsema_real_eip !129 :          <36d>	callq	-882
1534 :   store i64 %950, i64* %RSP_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1535 :   %952 = load i64* %RAX_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1536 :   store i64 %952, i64* %RAX, !mcsema_real_eip !129 :          <36d>	callq	-882
1537 :   %953 = load i64* %RBX_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1538 :   store i64 %953, i64* %RBX, !mcsema_real_eip !129 :          <36d>	callq	-882
1539 :   %954 = load i64* %RCX_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1540 :   store i64 %954, i64* %RCX, !mcsema_real_eip !129 :          <36d>	callq	-882
1541 :   %955 = load i64* %RDX_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1542 :   store i64 %955, i64* %RDX, !mcsema_real_eip !129 :          <36d>	callq	-882
1543 :   %956 = load i64* %RSI_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1544 :   store i64 %956, i64* %RSI, !mcsema_real_eip !129 :          <36d>	callq	-882
1545 :   %957 = load i64* %RDI_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1546 :   store i64 %957, i64* %RDI, !mcsema_real_eip !129 :          <36d>	callq	-882
1547 :   %958 = load i64* %RSP_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1548 :   store i64 %958, i64* %RSP, !mcsema_real_eip !129 :          <36d>	callq	-882
1549 :   %959 = load i64* %RBP_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1550 :   store i64 %959, i64* %RBP, !mcsema_real_eip !129 :          <36d>	callq	-882
1551 :   %960 = load i64* %R8_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1552 :   store i64 %960, i64* %R8, !mcsema_real_eip !129 :          <36d>	callq	-882
1553 :   %961 = load i64* %R9_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1554 :   store i64 %961, i64* %R9, !mcsema_real_eip !129 :          <36d>	callq	-882
1555 :   %962 = load i64* %R10_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1556 :   store i64 %962, i64* %R10, !mcsema_real_eip !129 :          <36d>	callq	-882
1557 :   %963 = load i64* %R11_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1558 :   store i64 %963, i64* %R11, !mcsema_real_eip !129 :          <36d>	callq	-882
1559 :   %964 = load i64* %R12_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1560 :   store i64 %964, i64* %R12, !mcsema_real_eip !129 :          <36d>	callq	-882
1561 :   %965 = load i64* %R13_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1562 :   store i64 %965, i64* %R13, !mcsema_real_eip !129 :          <36d>	callq	-882
1563 :   %966 = load i64* %R14_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1564 :   store i64 %966, i64* %R14, !mcsema_real_eip !129 :          <36d>	callq	-882
1565 :   %967 = load i64* %R15_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1566 :   store i64 %967, i64* %R15, !mcsema_real_eip !129 :          <36d>	callq	-882
1567 :   %968 = load i64* %RIP_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1568 :   store i64 %968, i64* %RIP, !mcsema_real_eip !129 :          <36d>	callq	-882
1569 :   %969 = load i1* %CF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1570 :   store i1 %969, i1* %CF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1571 :   %970 = load i1* %PF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1572 :   store i1 %970, i1* %PF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1573 :   %971 = load i1* %AF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1574 :   store i1 %971, i1* %AF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1575 :   %972 = load i1* %ZF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1576 :   store i1 %972, i1* %ZF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1577 :   %973 = load i1* %SF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1578 :   store i1 %973, i1* %SF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1579 :   %974 = load i1* %OF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1580 :   store i1 %974, i1* %OF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1581 :   %975 = load i1* %DF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1582 :   store i1 %975, i1* %DF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1583 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %26, i8* %27, i32 128, i32 8, i1 false), !mcsema_real_eip !129 :          <36d>	callq	-882
1584 :   %976 = load i1* %FPU_B_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1585 :   store i1 %976, i1* %FPU_B, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1586 :   %977 = load i1* %FPU_C3_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1587 :   store i1 %977, i1* %FPU_C3, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1588 :   %978 = load i3* %FPU_TOP_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1589 :   store i3 %978, i3* %FPU_TOP, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1590 :   %979 = load i1* %FPU_C2_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1591 :   store i1 %979, i1* %FPU_C2, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1592 :   %980 = load i1* %FPU_C1_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1593 :   store i1 %980, i1* %FPU_C1, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1594 :   %981 = load i1* %FPU_C0_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1595 :   store i1 %981, i1* %FPU_C0, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1596 :   %982 = load i1* %FPU_ES_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1597 :   store i1 %982, i1* %FPU_ES, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1598 :   %983 = load i1* %FPU_SF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1599 :   store i1 %983, i1* %FPU_SF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1600 :   %984 = load i1* %FPU_PE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1601 :   store i1 %984, i1* %FPU_PE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1602 :   %985 = load i1* %FPU_UE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1603 :   store i1 %985, i1* %FPU_UE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1604 :   %986 = load i1* %FPU_OE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1605 :   store i1 %986, i1* %FPU_OE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1606 :   %987 = load i1* %FPU_ZE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1607 :   store i1 %987, i1* %FPU_ZE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1608 :   %988 = load i1* %FPU_DE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1609 :   store i1 %988, i1* %FPU_DE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1610 :   %989 = load i1* %FPU_IE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1611 :   store i1 %989, i1* %FPU_IE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1612 :   %990 = load i1* %FPU_X_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1613 :   store i1 %990, i1* %FPU_X, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1614 :   %991 = load i2* %FPU_RC_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1615 :   store i2 %991, i2* %FPU_RC, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1616 :   %992 = load i2* %FPU_PC_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1617 :   store i2 %992, i2* %FPU_PC, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1618 :   %993 = load i1* %FPU_PM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1619 :   store i1 %993, i1* %FPU_PM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1620 :   %994 = load i1* %FPU_UM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1621 :   store i1 %994, i1* %FPU_UM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1622 :   %995 = load i1* %FPU_OM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1623 :   store i1 %995, i1* %FPU_OM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1624 :   %996 = load i1* %FPU_ZM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1625 :   store i1 %996, i1* %FPU_ZM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1626 :   %997 = load i1* %FPU_DM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1627 :   store i1 %997, i1* %FPU_DM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1628 :   %998 = load i1* %FPU_IM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1629 :   store i1 %998, i1* %FPU_IM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882

1630 :   %999 = load i64* %53, align 4 : NIL
1631 :   store i64 %999, i64* %52, align 4 : NIL

1632 :   %1000 = load i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1633 :   store i16 %1000, i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1634 :   %1001 = load i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1635 :   store i64 %1001, i64* %FPU_LASTIP_OFF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1636 :   %1002 = load i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1637 :   store i16 %1002, i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1638 :   %1003 = load i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1639 :   store i64 %1003, i64* %FPU_LASTDATA_OFF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1640 :   %1004 = load i128* %XMM0_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1641 :   store i128 %1004, i128* %XMM0, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1642 :   %1005 = load i128* %XMM1_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1643 :   store i128 %1005, i128* %XMM1, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1644 :   %1006 = load i128* %XMM2_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1645 :   store i128 %1006, i128* %XMM2, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1646 :   %1007 = load i128* %XMM3_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1647 :   store i128 %1007, i128* %XMM3, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1648 :   %1008 = load i128* %XMM4_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1649 :   store i128 %1008, i128* %XMM4, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1650 :   %1009 = load i128* %XMM5_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1651 :   store i128 %1009, i128* %XMM5, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1652 :   %1010 = load i128* %XMM6_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1653 :   store i128 %1010, i128* %XMM6, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1654 :   %1011 = load i128* %XMM7_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1655 :   store i128 %1011, i128* %XMM7, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1656 :   %1012 = load i128* %XMM8_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1657 :   store i128 %1012, i128* %XMM8, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1658 :   %1013 = load i128* %XMM9_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1659 :   store i128 %1013, i128* %XMM9, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1660 :   %1014 = load i128* %XMM10_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1661 :   store i128 %1014, i128* %XMM10, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1662 :   %1015 = load i128* %XMM11_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1663 :   store i128 %1015, i128* %XMM11, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1664 :   %1016 = load i128* %XMM12_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1665 :   store i128 %1016, i128* %XMM12, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1666 :   %1017 = load i128* %XMM13_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1667 :   store i128 %1017, i128* %XMM13, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1668 :   %1018 = load i128* %XMM14_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1669 :   store i128 %1018, i128* %XMM14, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1670 :   %1019 = load i128* %XMM15_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1671 :   store i128 %1019, i128* %XMM15, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1672 :   %1020 = load i64* %STACK_BASE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1673 :   store i64 %1020, i64* %STACK_BASE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1674 :   %1021 = load i64* %STACK_LIMIT_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1675 :   store i64 %1021, i64* %STACK_LIMIT, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1676 :   tail call x86_64_sysvcc void @sub_0(%struct.regs* %0), !mcsema_real_eip !129 :          <36d>	callq	-882
1677 :   %1022 = load i64* %RAX, !mcsema_real_eip !129 :          <36d>	callq	-882
1678 :   store i64 %1022, i64* %RAX_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1679 :   %1023 = load i64* %RBX, !mcsema_real_eip !129 :          <36d>	callq	-882
1680 :   store i64 %1023, i64* %RBX_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1681 :   %1024 = load i64* %RCX, !mcsema_real_eip !129 :          <36d>	callq	-882
1682 :   store i64 %1024, i64* %RCX_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1683 :   %1025 = load i64* %RDX, !mcsema_real_eip !129 :          <36d>	callq	-882
1684 :   store i64 %1025, i64* %RDX_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1685 :   %1026 = load i64* %RSI, !mcsema_real_eip !129 :          <36d>	callq	-882
1686 :   store i64 %1026, i64* %RSI_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1687 :   %1027 = load i64* %RDI, !mcsema_real_eip !129 :          <36d>	callq	-882
1688 :   store i64 %1027, i64* %RDI_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1689 :   %1028 = load i64* %RSP, !mcsema_real_eip !129 :          <36d>	callq	-882
1690 :   store i64 %1028, i64* %RSP_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1691 :   %1029 = load i64* %RBP, !mcsema_real_eip !129 :          <36d>	callq	-882
1692 :   store i64 %1029, i64* %RBP_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1693 :   %1030 = load i64* %R8, !mcsema_real_eip !129 :          <36d>	callq	-882
1694 :   store i64 %1030, i64* %R8_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1695 :   %1031 = load i64* %R9, !mcsema_real_eip !129 :          <36d>	callq	-882
1696 :   store i64 %1031, i64* %R9_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1697 :   %1032 = load i64* %R10, !mcsema_real_eip !129 :          <36d>	callq	-882
1698 :   store i64 %1032, i64* %R10_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1699 :   %1033 = load i64* %R11, !mcsema_real_eip !129 :          <36d>	callq	-882
1700 :   store i64 %1033, i64* %R11_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1701 :   %1034 = load i64* %R12, !mcsema_real_eip !129 :          <36d>	callq	-882
1702 :   store i64 %1034, i64* %R12_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1703 :   %1035 = load i64* %R13, !mcsema_real_eip !129 :          <36d>	callq	-882
1704 :   store i64 %1035, i64* %R13_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1705 :   %1036 = load i64* %R14, !mcsema_real_eip !129 :          <36d>	callq	-882
1706 :   store i64 %1036, i64* %R14_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1707 :   %1037 = load i64* %R15, !mcsema_real_eip !129 :          <36d>	callq	-882
1708 :   store i64 %1037, i64* %R15_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1709 :   %1038 = load i64* %RIP, !mcsema_real_eip !129 :          <36d>	callq	-882
1710 :   store i64 %1038, i64* %RIP_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1711 :   %1039 = load i1* %CF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1712 :   store i1 %1039, i1* %CF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1713 :   %1040 = load i1* %PF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1714 :   store i1 %1040, i1* %PF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1715 :   %1041 = load i1* %AF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1716 :   store i1 %1041, i1* %AF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1717 :   %1042 = load i1* %ZF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1718 :   store i1 %1042, i1* %ZF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1719 :   %1043 = load i1* %SF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1720 :   store i1 %1043, i1* %SF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1721 :   %1044 = load i1* %OF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1722 :   store i1 %1044, i1* %OF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1723 :   %1045 = load i1* %DF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1724 :   store i1 %1045, i1* %DF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1725 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %27, i8* %26, i32 128, i32 4, i1 false), !mcsema_real_eip !129 :          <36d>	callq	-882
1726 :   %1046 = load i1* %FPU_B, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1727 :   store i1 %1046, i1* %FPU_B_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1728 :   %1047 = load i1* %FPU_C3, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1729 :   store i1 %1047, i1* %FPU_C3_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1730 :   %1048 = load i3* %FPU_TOP, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1731 :   store i3 %1048, i3* %FPU_TOP_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1732 :   %1049 = load i1* %FPU_C2, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1733 :   store i1 %1049, i1* %FPU_C2_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1734 :   %1050 = load i1* %FPU_C1, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1735 :   store i1 %1050, i1* %FPU_C1_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1736 :   %1051 = load i1* %FPU_C0, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1737 :   store i1 %1051, i1* %FPU_C0_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1738 :   %1052 = load i1* %FPU_ES, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1739 :   store i1 %1052, i1* %FPU_ES_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1740 :   %1053 = load i1* %FPU_SF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1741 :   store i1 %1053, i1* %FPU_SF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1742 :   %1054 = load i1* %FPU_PE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1743 :   store i1 %1054, i1* %FPU_PE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1744 :   %1055 = load i1* %FPU_UE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1745 :   store i1 %1055, i1* %FPU_UE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1746 :   %1056 = load i1* %FPU_OE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1747 :   store i1 %1056, i1* %FPU_OE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1748 :   %1057 = load i1* %FPU_ZE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1749 :   store i1 %1057, i1* %FPU_ZE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1750 :   %1058 = load i1* %FPU_DE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1751 :   store i1 %1058, i1* %FPU_DE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1752 :   %1059 = load i1* %FPU_IE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1753 :   store i1 %1059, i1* %FPU_IE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1754 :   %1060 = load i1* %FPU_X, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1755 :   store i1 %1060, i1* %FPU_X_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1756 :   %1061 = load i2* %FPU_RC, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1757 :   store i2 %1061, i2* %FPU_RC_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1758 :   %1062 = load i2* %FPU_PC, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1759 :   store i2 %1062, i2* %FPU_PC_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1760 :   %1063 = load i1* %FPU_PM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1761 :   store i1 %1063, i1* %FPU_PM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1762 :   %1064 = load i1* %FPU_UM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1763 :   store i1 %1064, i1* %FPU_UM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1764 :   %1065 = load i1* %FPU_OM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1765 :   store i1 %1065, i1* %FPU_OM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1766 :   %1066 = load i1* %FPU_ZM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1767 :   store i1 %1066, i1* %FPU_ZM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1768 :   %1067 = load i1* %FPU_DM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1769 :   store i1 %1067, i1* %FPU_DM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1770 :   %1068 = load i1* %FPU_IM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1771 :   store i1 %1068, i1* %FPU_IM_val, !mcsema_real_eip !129 :          <36d>	callq	-882

1772 :   %1069 = load i64* %52, align 4 : NIL
1773 :   store i64 %1069, i64* %53, align 4 : NIL

1774 :   %1070 = load i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1775 :   store i16 %1070, i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1776 :   %1071 = load i64* %FPU_LASTIP_OFF, !mcsema_real_eip !129 :          <36d>	callq	-882
1777 :   store i64 %1071, i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1778 :   %1072 = load i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1779 :   store i16 %1072, i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1780 :   %1073 = load i64* %FPU_LASTDATA_OFF, !mcsema_real_eip !129 :          <36d>	callq	-882
1781 :   store i64 %1073, i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1782 :   %1074 = load i128* %XMM0, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1783 :   store i128 %1074, i128* %XMM0_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1784 :   %1075 = load i128* %XMM1, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1785 :   store i128 %1075, i128* %XMM1_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1786 :   %1076 = load i128* %XMM2, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1787 :   store i128 %1076, i128* %XMM2_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1788 :   %1077 = load i128* %XMM3, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1789 :   store i128 %1077, i128* %XMM3_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1790 :   %1078 = load i128* %XMM4, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1791 :   store i128 %1078, i128* %XMM4_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1792 :   %1079 = load i128* %XMM5, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1793 :   store i128 %1079, i128* %XMM5_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1794 :   %1080 = load i128* %XMM6, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1795 :   store i128 %1080, i128* %XMM6_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1796 :   %1081 = load i128* %XMM7, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1797 :   store i128 %1081, i128* %XMM7_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1798 :   %1082 = load i128* %XMM8, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1799 :   store i128 %1082, i128* %XMM8_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1800 :   %1083 = load i128* %XMM9, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1801 :   store i128 %1083, i128* %XMM9_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1802 :   %1084 = load i128* %XMM10, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1803 :   store i128 %1084, i128* %XMM10_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1804 :   %1085 = load i128* %XMM11, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1805 :   store i128 %1085, i128* %XMM11_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1806 :   %1086 = load i128* %XMM12, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1807 :   store i128 %1086, i128* %XMM12_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1808 :   %1087 = load i128* %XMM13, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1809 :   store i128 %1087, i128* %XMM13_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1810 :   %1088 = load i128* %XMM14, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1811 :   store i128 %1088, i128* %XMM14_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1812 :   %1089 = load i128* %XMM15, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
1813 :   store i128 %1089, i128* %XMM15_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1814 :   %1090 = load i64* %STACK_BASE, !mcsema_real_eip !129 :          <36d>	callq	-882
1815 :   store i64 %1090, i64* %STACK_BASE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1816 :   %1091 = load i64* %STACK_LIMIT, !mcsema_real_eip !129 :          <36d>	callq	-882
1817 :   store i64 %1091, i64* %STACK_LIMIT_val, !mcsema_real_eip !129 :          <36d>	callq	-882

1818 :   store i64 1, i64* %RDI_val, !mcsema_real_eip !130 :          <372>	movl	$1, %edi

1819 :   %1092 = load i64* %RBP_val, !mcsema_real_eip !131 :          <377>	movl	-36(%rbp), %esi
1820 :   %1093 = add i64 %1092, -36, !mcsema_real_eip !131 :          <377>	movl	-36(%rbp), %esi
1821 :   %1094 = inttoptr i64 %1093 to i64*, !mcsema_real_eip !131 :          <377>	movl	-36(%rbp), %esi

1822 :   %1095 = bitcast i64* %1094 to i32* : NIL

1823 :   %1096 = load i32* %1095, !mcsema_real_eip !131 :          <377>	movl	-36(%rbp), %esi

1824 :   %uadd367 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %1096, i32 1) : NIL
1825 :   %1097 = extractvalue { i32, i1 } %uadd367, 0 : NIL

1826 :   %1098 = xor i32 %1097, %1096, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
1827 :   %1099 = and i32 %1098, 16, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
1828 :   %1100 = icmp ne i32 %1099, 0, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
1829 :   store i1 %1100, i1* %AF_val, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi

1830 :   %1101 = icmp slt i32 %1097, 0 : NIL

1831 :   store i1 %1101, i1* %SF_val, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
1832 :   %1102 = icmp eq i32 %1097, 0, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
1833 :   store i1 %1102, i1* %ZF_val, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
1834 :   %1103 = xor i32 %1096, -2147483648, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
1835 :   %1104 = and i32 %1098, %1103, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi

1836 :   %1105 = icmp slt i32 %1104, 0 : NIL

1837 :   store i1 %1105, i1* %OF_val, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
1838 :   %1106 = trunc i32 %1097 to i8, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
1839 :   %1107 = tail call i8 @llvm.ctpop.i8(i8 %1106), !mcsema_real_eip !132 :          <37a>	addl	$1, %esi

1840 :   %1108 = and i8 %1107, 1 : NIL
1841 :   %1109 = icmp eq i8 %1108, 0 : NIL

1842 :   store i1 %1109, i1* %PF_val, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi

1843 :   %1110 = extractvalue { i32, i1 } %uadd367, 1 : NIL

1844 :   store i1 %1110, i1* %CF_val, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
1845 :   %1111 = zext i32 %1097 to i64, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
1846 :   store i64 %1111, i64* %RSI_val, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi

1847 :   %1112 = load i64* %RBP_val, !mcsema_real_eip !133 :          <380>	movl	%esi, -36(%rbp)
1848 :   %1113 = add i64 %1112, -36, !mcsema_real_eip !133 :          <380>	movl	%esi, -36(%rbp)
1849 :   %1114 = inttoptr i64 %1113 to i64*, !mcsema_real_eip !133 :          <380>	movl	%esi, -36(%rbp)

1850 :   %1115 = bitcast i64* %1114 to i32* : NIL

1851 :   store i32 %1097, i32* %1115, !mcsema_real_eip !133 :          <380>	movl	%esi, -36(%rbp)

1852 :   %1116 = load i64* %RDI_val, !mcsema_real_eip !134 :          <383>	callq	0
1853 :   %1117 = tail call x86_64_sysvcc i64 @sleep(i64 %1116), !mcsema_real_eip !134 :          <383>	callq	0
1854 :   store i64 %1117, i64* %RAX_val, !mcsema_real_eip !134 :          <383>	callq	0

1855 :   %1118 = load i64* %RBP_val, !mcsema_real_eip !135 :          <388>	movl	%eax, -120(%rbp)
1856 :   %1119 = add i64 %1118, -120, !mcsema_real_eip !135 :          <388>	movl	%eax, -120(%rbp)
1857 :   %1120 = inttoptr i64 %1119 to i64*, !mcsema_real_eip !135 :          <388>	movl	%eax, -120(%rbp)
1858 :   %1121 = trunc i64 %1117 to i32, !mcsema_real_eip !135 :          <388>	movl	%eax, -120(%rbp)

1859 :   %1122 = bitcast i64* %1120 to i32* : NIL

1860 :   store i32 %1121, i32* %1122, !mcsema_real_eip !135 :          <388>	movl	%eax, -120(%rbp)

1861 :   br label %block_0x130, !mcsema_real_eip !136 :          <38b>	jmp	-608

1862 :   %1123 = load i64* %RBP_val, !mcsema_real_eip !137 :          <323>	movl	-32(%rbp), %eax
1863 :   %1124 = add i64 %1123, -32, !mcsema_real_eip !137 :          <323>	movl	-32(%rbp), %eax
1864 :   %1125 = inttoptr i64 %1124 to i64*, !mcsema_real_eip !137 :          <323>	movl	-32(%rbp), %eax

1865 :   %1126 = bitcast i64* %1125 to i32* : NIL

1866 :   %1127 = load i32* %1126, !mcsema_real_eip !137 :          <323>	movl	-32(%rbp), %eax
1867 :   %1128 = zext i32 %1127 to i64, !mcsema_real_eip !137 :          <323>	movl	-32(%rbp), %eax
1868 :   store i64 %1128, i64* %RAX_val, !mcsema_real_eip !137 :          <323>	movl	-32(%rbp), %eax

1869 :   %1129 = load i64* %RBP_val, !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax
1870 :   %1130 = add i64 %1129, -24, !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax
1871 :   %1131 = inttoptr i64 %1130 to i64*, !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax

1872 :   %1132 = bitcast i64* %1131 to i32* : NIL

1873 :   %1133 = load i32* %1132, !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax
1874 :   %1134 = sub i32 %1127, %1133, !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax
1875 :   %1135 = xor i32 %1134, %1127, !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax
1876 :   %1136 = xor i32 %1135, %1133, !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax
1877 :   %1137 = and i32 %1136, 16, !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax
1878 :   %1138 = icmp ne i32 %1137, 0, !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax
1879 :   store i1 %1138, i1* %AF_val, !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax
1880 :   %1139 = trunc i32 %1134 to i8, !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax
1881 :   %1140 = tail call i8 @llvm.ctpop.i8(i8 %1139), !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax

1882 :   %1141 = and i8 %1140, 1 : NIL
1883 :   %1142 = icmp eq i8 %1141, 0 : NIL

1884 :   store i1 %1142, i1* %PF_val, !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax

1885 :   %1143 = icmp eq i32 %1127, %1133 : NIL

1886 :   store i1 %1143, i1* %ZF_val, !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax

1887 :   %1144 = icmp slt i32 %1134, 0 : NIL

1888 :   store i1 %1144, i1* %SF_val, !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax
1889 :   %1145 = icmp ult i32 %1127, %1133, !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax
1890 :   store i1 %1145, i1* %CF_val, !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax
1891 :   %1146 = xor i32 %1133, %1127, !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax
1892 :   %1147 = and i32 %1135, %1146, !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax

1893 :   %1148 = icmp slt i32 %1147, 0 : NIL

1894 :   store i1 %1148, i1* %OF_val, !mcsema_real_eip !138 :          <326>	cmpl	-24(%rbp), %eax

1895 :   %1149 = load i1* %ZF_val, !mcsema_real_eip !139 :          <329>	jne	30
1896 :   br i1 %1149, label %block_0x32f, label %block_0x34d, !mcsema_real_eip !139 :          <329>	jne	30

1897 :   %1150 = load i64* %RBP_val, !mcsema_real_eip !140 :          <2f1>	cmpl	$0, -20(%rbp)
1898 :   %1151 = add i64 %1150, -20, !mcsema_real_eip !140 :          <2f1>	cmpl	$0, -20(%rbp)
1899 :   %1152 = inttoptr i64 %1151 to i64*, !mcsema_real_eip !140 :          <2f1>	cmpl	$0, -20(%rbp)

1900 :   %1153 = bitcast i64* %1152 to i32* : NIL

1901 :   %1154 = load i32* %1153, !mcsema_real_eip !140 :          <2f1>	cmpl	$0, -20(%rbp)
1902 :   store i1 false, i1* %AF_val, !mcsema_real_eip !140 :          <2f1>	cmpl	$0, -20(%rbp)
1903 :   %1155 = trunc i32 %1154 to i8, !mcsema_real_eip !140 :          <2f1>	cmpl	$0, -20(%rbp)
1904 :   %1156 = tail call i8 @llvm.ctpop.i8(i8 %1155), !mcsema_real_eip !140 :          <2f1>	cmpl	$0, -20(%rbp)

1905 :   %1157 = and i8 %1156, 1 : NIL
1906 :   %1158 = icmp eq i8 %1157, 0 : NIL

1907 :   store i1 %1158, i1* %PF_val, !mcsema_real_eip !140 :          <2f1>	cmpl	$0, -20(%rbp)
1908 :   %1159 = icmp eq i32 %1154, 0, !mcsema_real_eip !140 :          <2f1>	cmpl	$0, -20(%rbp)
1909 :   store i1 %1159, i1* %ZF_val, !mcsema_real_eip !140 :          <2f1>	cmpl	$0, -20(%rbp)

1910 :   %1160 = icmp slt i32 %1154, 0 : NIL

1911 :   store i1 %1160, i1* %SF_val, !mcsema_real_eip !140 :          <2f1>	cmpl	$0, -20(%rbp)
1912 :   store i1 false, i1* %CF_val, !mcsema_real_eip !140 :          <2f1>	cmpl	$0, -20(%rbp)
1913 :   store i1 false, i1* %OF_val, !mcsema_real_eip !140 :          <2f1>	cmpl	$0, -20(%rbp)

1914 :   %1161 = icmp slt i32 %1154, 1 : NIL

1915 :   br i1 %1161, label %block_0x30b, label %block_0x2fe, !mcsema_real_eip !141 :          <2f8>	jle	13

1916 :   %1162 = tail call x86_64_sysvcc i64 @printf(i64 add (i64 ptrtoint (%1* @data_0x3ff to i64), i64 85)), !mcsema_real_eip !142 :          <33b>	callq	0

1917 :   store i64 4294967294, i64* %RDI_val, !mcsema_real_eip !143 :          <340>	movl	$4294967294, %edi

1918 :   %1163 = load i64* %RBP_val, !mcsema_real_eip !144 :          <345>	movl	%eax, -116(%rbp)
1919 :   %1164 = add i64 %1163, -116, !mcsema_real_eip !144 :          <345>	movl	%eax, -116(%rbp)
1920 :   %1165 = inttoptr i64 %1164 to i64*, !mcsema_real_eip !144 :          <345>	movl	%eax, -116(%rbp)
1921 :   %1166 = trunc i64 %1162 to i32, !mcsema_real_eip !144 :          <345>	movl	%eax, -116(%rbp)

1922 :   %1167 = bitcast i64* %1165 to i32* : NIL

1923 :   store i32 %1166, i32* %1167, !mcsema_real_eip !144 :          <345>	movl	%eax, -116(%rbp)

1924 :   %1168 = load i64* %RDI_val, !mcsema_real_eip !145 :          <348>	callq	0
1925 :   %1169 = tail call x86_64_sysvcc i64 @exit(i64 %1168), !mcsema_real_eip !145 :          <348>	callq	0

1926 :   store i64 ptrtoint (%0* @data_0x3b2 to i64), i64* %RAX_val, !mcsema_real_eip !123 :          <34d>	movabsq	$0, %rax

1927 :   %1170 = load i64* %RBP_val, !mcsema_real_eip !124 :          <357>	movslq	-20(%rbp), %rcx
1928 :   %1171 = add i64 %1170, -20, !mcsema_real_eip !124 :          <357>	movslq	-20(%rbp), %rcx
1929 :   %1172 = inttoptr i64 %1171 to i64*, !mcsema_real_eip !124 :          <357>	movslq	-20(%rbp), %rcx

1930 :   %1173 = bitcast i64* %1172 to i32* : NIL

1931 :   %1174 = load i32* %1173, !mcsema_real_eip !124 :          <357>	movslq	-20(%rbp), %rcx
1932 :   %1175 = sext i32 %1174 to i64, !mcsema_real_eip !124 :          <357>	movslq	-20(%rbp), %rcx
1933 :   store i64 %1175, i64* %RCX_val, !mcsema_real_eip !124 :          <357>	movslq	-20(%rbp), %rcx

1934 :   %1176 = load i64* %RBP_val, !mcsema_real_eip !125 :          <35b>	movslq	-24(%rbp), %rdx
1935 :   %1177 = add i64 %1176, -24, !mcsema_real_eip !125 :          <35b>	movslq	-24(%rbp), %rdx
1936 :   %1178 = inttoptr i64 %1177 to i64*, !mcsema_real_eip !125 :          <35b>	movslq	-24(%rbp), %rdx

1937 :   %1179 = bitcast i64* %1178 to i32* : NIL

1938 :   %1180 = load i32* %1179, !mcsema_real_eip !125 :          <35b>	movslq	-24(%rbp), %rdx
1939 :   %1181 = sext i32 %1180 to i64, !mcsema_real_eip !125 :          <35b>	movslq	-24(%rbp), %rdx

1940 :   %1182 = mul i64 %1181, 11, !mcsema_real_eip !126 :          <35f>	imulq	 $11, %rdx
1941 :   store i64 %1182, i64* %RDX_val, !mcsema_real_eip !126 :          <35f>	imulq	 $11, %rdx

1942 :   %1183 = load i64* %RAX_val, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax

1943 :   %uadd362 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %1182, i64 %1183) : NIL
1944 :   %1184 = extractvalue { i64, i1 } %uadd362, 0 : NIL

1945 :   %1185 = xor i64 %1184, %1183, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1946 :   %1186 = xor i64 %1185, %1182, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1947 :   %1187 = and i64 %1186, 16, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1948 :   %1188 = icmp ne i64 %1187, 0, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1949 :   store i1 %1188, i1* %AF_val, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax

1950 :   %1189 = icmp slt i64 %1184, 0 : NIL

1951 :   store i1 %1189, i1* %SF_val, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1952 :   %1190 = icmp eq i64 %1184, 0, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1953 :   store i1 %1190, i1* %ZF_val, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1954 :   %1191 = xor i64 %1183, -9223372036854775808, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1955 :   %1192 = xor i64 %1191, %1182, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1956 :   %1193 = and i64 %1185, %1192, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax

1957 :   %1194 = icmp slt i64 %1193, 0 : NIL

1958 :   store i1 %1194, i1* %OF_val, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1959 :   %1195 = trunc i64 %1184 to i8, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1960 :   %1196 = tail call i8 @llvm.ctpop.i8(i8 %1195), !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax

1961 :   %1197 = and i8 %1196, 1 : NIL
1962 :   %1198 = icmp eq i8 %1197, 0 : NIL

1963 :   store i1 %1198, i1* %PF_val, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax

1964 :   %1199 = extractvalue { i64, i1 } %uadd362, 1 : NIL

1965 :   store i1 %1199, i1* %CF_val, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax
1966 :   store i64 %1184, i64* %RAX_val, !mcsema_real_eip !127 :          <366>	addq	%rdx, %rax

1967 :   %1200 = load i64* %RCX_val, !mcsema_real_eip !128 :          <369>	movb	$88, (%rax,%rcx)
1968 :   %1201 = add i64 %1200, %1184, !mcsema_real_eip !128 :          <369>	movb	$88, (%rax,%rcx)
1969 :   %1202 = inttoptr i64 %1201 to i64*, !mcsema_real_eip !128 :          <369>	movb	$88, (%rax,%rcx)

1970 :   %1203 = bitcast i64* %1202 to i8* : NIL

1971 :   store i8 88, i8* %1203, !mcsema_real_eip !128 :          <369>	movb	$88, (%rax,%rcx)

1972 :   %1204 = load i64* %RSP_val, !mcsema_real_eip !129 :          <36d>	callq	-882

1973 :   %1205 = add i64 %1204, -8 : NIL

1974 :   %1206 = inttoptr i64 %1205 to i64*, !mcsema_real_eip !129 :          <36d>	callq	-882
1975 :   store i64 -4981261766360305936, i64* %1206, !mcsema_real_eip !129 :          <36d>	callq	-882
1976 :   store i64 %1205, i64* %RSP_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1977 :   %1207 = load i64* %RAX_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1978 :   store i64 %1207, i64* %RAX, !mcsema_real_eip !129 :          <36d>	callq	-882
1979 :   %1208 = load i64* %RBX_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1980 :   store i64 %1208, i64* %RBX, !mcsema_real_eip !129 :          <36d>	callq	-882
1981 :   %1209 = load i64* %RCX_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1982 :   store i64 %1209, i64* %RCX, !mcsema_real_eip !129 :          <36d>	callq	-882
1983 :   %1210 = load i64* %RDX_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1984 :   store i64 %1210, i64* %RDX, !mcsema_real_eip !129 :          <36d>	callq	-882
1985 :   %1211 = load i64* %RSI_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1986 :   store i64 %1211, i64* %RSI, !mcsema_real_eip !129 :          <36d>	callq	-882
1987 :   %1212 = load i64* %RDI_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1988 :   store i64 %1212, i64* %RDI, !mcsema_real_eip !129 :          <36d>	callq	-882
1989 :   %1213 = load i64* %RSP_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1990 :   store i64 %1213, i64* %RSP, !mcsema_real_eip !129 :          <36d>	callq	-882
1991 :   %1214 = load i64* %RBP_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1992 :   store i64 %1214, i64* %RBP, !mcsema_real_eip !129 :          <36d>	callq	-882
1993 :   %1215 = load i64* %R8_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1994 :   store i64 %1215, i64* %R8, !mcsema_real_eip !129 :          <36d>	callq	-882
1995 :   %1216 = load i64* %R9_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1996 :   store i64 %1216, i64* %R9, !mcsema_real_eip !129 :          <36d>	callq	-882
1997 :   %1217 = load i64* %R10_val, !mcsema_real_eip !129 :          <36d>	callq	-882
1998 :   store i64 %1217, i64* %R10, !mcsema_real_eip !129 :          <36d>	callq	-882
1999 :   %1218 = load i64* %R11_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2000 :   store i64 %1218, i64* %R11, !mcsema_real_eip !129 :          <36d>	callq	-882
2001 :   %1219 = load i64* %R12_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2002 :   store i64 %1219, i64* %R12, !mcsema_real_eip !129 :          <36d>	callq	-882
2003 :   %1220 = load i64* %R13_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2004 :   store i64 %1220, i64* %R13, !mcsema_real_eip !129 :          <36d>	callq	-882
2005 :   %1221 = load i64* %R14_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2006 :   store i64 %1221, i64* %R14, !mcsema_real_eip !129 :          <36d>	callq	-882
2007 :   %1222 = load i64* %R15_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2008 :   store i64 %1222, i64* %R15, !mcsema_real_eip !129 :          <36d>	callq	-882
2009 :   %1223 = load i64* %RIP_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2010 :   store i64 %1223, i64* %RIP, !mcsema_real_eip !129 :          <36d>	callq	-882
2011 :   %1224 = load i1* %CF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2012 :   store i1 %1224, i1* %CF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2013 :   %1225 = load i1* %PF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2014 :   store i1 %1225, i1* %PF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2015 :   %1226 = load i1* %AF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2016 :   store i1 %1226, i1* %AF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2017 :   %1227 = load i1* %ZF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2018 :   store i1 %1227, i1* %ZF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2019 :   %1228 = load i1* %SF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2020 :   store i1 %1228, i1* %SF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2021 :   %1229 = load i1* %OF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2022 :   store i1 %1229, i1* %OF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2023 :   %1230 = load i1* %DF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2024 :   store i1 %1230, i1* %DF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2025 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %26, i8* %27, i32 128, i32 8, i1 false), !mcsema_real_eip !129 :          <36d>	callq	-882
2026 :   %1231 = load i1* %FPU_B_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2027 :   store i1 %1231, i1* %FPU_B, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2028 :   %1232 = load i1* %FPU_C3_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2029 :   store i1 %1232, i1* %FPU_C3, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2030 :   %1233 = load i3* %FPU_TOP_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2031 :   store i3 %1233, i3* %FPU_TOP, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2032 :   %1234 = load i1* %FPU_C2_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2033 :   store i1 %1234, i1* %FPU_C2, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2034 :   %1235 = load i1* %FPU_C1_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2035 :   store i1 %1235, i1* %FPU_C1, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2036 :   %1236 = load i1* %FPU_C0_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2037 :   store i1 %1236, i1* %FPU_C0, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2038 :   %1237 = load i1* %FPU_ES_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2039 :   store i1 %1237, i1* %FPU_ES, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2040 :   %1238 = load i1* %FPU_SF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2041 :   store i1 %1238, i1* %FPU_SF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2042 :   %1239 = load i1* %FPU_PE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2043 :   store i1 %1239, i1* %FPU_PE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2044 :   %1240 = load i1* %FPU_UE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2045 :   store i1 %1240, i1* %FPU_UE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2046 :   %1241 = load i1* %FPU_OE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2047 :   store i1 %1241, i1* %FPU_OE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2048 :   %1242 = load i1* %FPU_ZE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2049 :   store i1 %1242, i1* %FPU_ZE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2050 :   %1243 = load i1* %FPU_DE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2051 :   store i1 %1243, i1* %FPU_DE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2052 :   %1244 = load i1* %FPU_IE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2053 :   store i1 %1244, i1* %FPU_IE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2054 :   %1245 = load i1* %FPU_X_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2055 :   store i1 %1245, i1* %FPU_X, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2056 :   %1246 = load i2* %FPU_RC_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2057 :   store i2 %1246, i2* %FPU_RC, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2058 :   %1247 = load i2* %FPU_PC_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2059 :   store i2 %1247, i2* %FPU_PC, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2060 :   %1248 = load i1* %FPU_PM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2061 :   store i1 %1248, i1* %FPU_PM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2062 :   %1249 = load i1* %FPU_UM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2063 :   store i1 %1249, i1* %FPU_UM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2064 :   %1250 = load i1* %FPU_OM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2065 :   store i1 %1250, i1* %FPU_OM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2066 :   %1251 = load i1* %FPU_ZM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2067 :   store i1 %1251, i1* %FPU_ZM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2068 :   %1252 = load i1* %FPU_DM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2069 :   store i1 %1252, i1* %FPU_DM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2070 :   %1253 = load i1* %FPU_IM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2071 :   store i1 %1253, i1* %FPU_IM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882

2072 :   %1254 = load i64* %53, align 4 : NIL
2073 :   store i64 %1254, i64* %52, align 4 : NIL

2074 :   %1255 = load i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2075 :   store i16 %1255, i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2076 :   %1256 = load i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2077 :   store i64 %1256, i64* %FPU_LASTIP_OFF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2078 :   %1257 = load i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2079 :   store i16 %1257, i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2080 :   %1258 = load i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2081 :   store i64 %1258, i64* %FPU_LASTDATA_OFF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2082 :   %1259 = load i128* %XMM0_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2083 :   store i128 %1259, i128* %XMM0, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2084 :   %1260 = load i128* %XMM1_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2085 :   store i128 %1260, i128* %XMM1, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2086 :   %1261 = load i128* %XMM2_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2087 :   store i128 %1261, i128* %XMM2, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2088 :   %1262 = load i128* %XMM3_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2089 :   store i128 %1262, i128* %XMM3, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2090 :   %1263 = load i128* %XMM4_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2091 :   store i128 %1263, i128* %XMM4, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2092 :   %1264 = load i128* %XMM5_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2093 :   store i128 %1264, i128* %XMM5, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2094 :   %1265 = load i128* %XMM6_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2095 :   store i128 %1265, i128* %XMM6, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2096 :   %1266 = load i128* %XMM7_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2097 :   store i128 %1266, i128* %XMM7, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2098 :   %1267 = load i128* %XMM8_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2099 :   store i128 %1267, i128* %XMM8, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2100 :   %1268 = load i128* %XMM9_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2101 :   store i128 %1268, i128* %XMM9, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2102 :   %1269 = load i128* %XMM10_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2103 :   store i128 %1269, i128* %XMM10, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2104 :   %1270 = load i128* %XMM11_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2105 :   store i128 %1270, i128* %XMM11, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2106 :   %1271 = load i128* %XMM12_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2107 :   store i128 %1271, i128* %XMM12, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2108 :   %1272 = load i128* %XMM13_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2109 :   store i128 %1272, i128* %XMM13, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2110 :   %1273 = load i128* %XMM14_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2111 :   store i128 %1273, i128* %XMM14, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2112 :   %1274 = load i128* %XMM15_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2113 :   store i128 %1274, i128* %XMM15, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2114 :   %1275 = load i64* %STACK_BASE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2115 :   store i64 %1275, i64* %STACK_BASE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2116 :   %1276 = load i64* %STACK_LIMIT_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2117 :   store i64 %1276, i64* %STACK_LIMIT, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2118 :   tail call x86_64_sysvcc void @sub_0(%struct.regs* %0), !mcsema_real_eip !129 :          <36d>	callq	-882
2119 :   %1277 = load i64* %RAX, !mcsema_real_eip !129 :          <36d>	callq	-882
2120 :   store i64 %1277, i64* %RAX_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2121 :   %1278 = load i64* %RBX, !mcsema_real_eip !129 :          <36d>	callq	-882
2122 :   store i64 %1278, i64* %RBX_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2123 :   %1279 = load i64* %RCX, !mcsema_real_eip !129 :          <36d>	callq	-882
2124 :   store i64 %1279, i64* %RCX_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2125 :   %1280 = load i64* %RDX, !mcsema_real_eip !129 :          <36d>	callq	-882
2126 :   store i64 %1280, i64* %RDX_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2127 :   %1281 = load i64* %RSI, !mcsema_real_eip !129 :          <36d>	callq	-882
2128 :   store i64 %1281, i64* %RSI_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2129 :   %1282 = load i64* %RDI, !mcsema_real_eip !129 :          <36d>	callq	-882
2130 :   store i64 %1282, i64* %RDI_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2131 :   %1283 = load i64* %RSP, !mcsema_real_eip !129 :          <36d>	callq	-882
2132 :   store i64 %1283, i64* %RSP_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2133 :   %1284 = load i64* %RBP, !mcsema_real_eip !129 :          <36d>	callq	-882
2134 :   store i64 %1284, i64* %RBP_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2135 :   %1285 = load i64* %R8, !mcsema_real_eip !129 :          <36d>	callq	-882
2136 :   store i64 %1285, i64* %R8_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2137 :   %1286 = load i64* %R9, !mcsema_real_eip !129 :          <36d>	callq	-882
2138 :   store i64 %1286, i64* %R9_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2139 :   %1287 = load i64* %R10, !mcsema_real_eip !129 :          <36d>	callq	-882
2140 :   store i64 %1287, i64* %R10_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2141 :   %1288 = load i64* %R11, !mcsema_real_eip !129 :          <36d>	callq	-882
2142 :   store i64 %1288, i64* %R11_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2143 :   %1289 = load i64* %R12, !mcsema_real_eip !129 :          <36d>	callq	-882
2144 :   store i64 %1289, i64* %R12_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2145 :   %1290 = load i64* %R13, !mcsema_real_eip !129 :          <36d>	callq	-882
2146 :   store i64 %1290, i64* %R13_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2147 :   %1291 = load i64* %R14, !mcsema_real_eip !129 :          <36d>	callq	-882
2148 :   store i64 %1291, i64* %R14_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2149 :   %1292 = load i64* %R15, !mcsema_real_eip !129 :          <36d>	callq	-882
2150 :   store i64 %1292, i64* %R15_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2151 :   %1293 = load i64* %RIP, !mcsema_real_eip !129 :          <36d>	callq	-882
2152 :   store i64 %1293, i64* %RIP_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2153 :   %1294 = load i1* %CF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2154 :   store i1 %1294, i1* %CF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2155 :   %1295 = load i1* %PF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2156 :   store i1 %1295, i1* %PF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2157 :   %1296 = load i1* %AF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2158 :   store i1 %1296, i1* %AF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2159 :   %1297 = load i1* %ZF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2160 :   store i1 %1297, i1* %ZF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2161 :   %1298 = load i1* %SF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2162 :   store i1 %1298, i1* %SF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2163 :   %1299 = load i1* %OF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2164 :   store i1 %1299, i1* %OF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2165 :   %1300 = load i1* %DF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2166 :   store i1 %1300, i1* %DF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2167 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %27, i8* %26, i32 128, i32 4, i1 false), !mcsema_real_eip !129 :          <36d>	callq	-882
2168 :   %1301 = load i1* %FPU_B, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2169 :   store i1 %1301, i1* %FPU_B_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2170 :   %1302 = load i1* %FPU_C3, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2171 :   store i1 %1302, i1* %FPU_C3_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2172 :   %1303 = load i3* %FPU_TOP, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2173 :   store i3 %1303, i3* %FPU_TOP_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2174 :   %1304 = load i1* %FPU_C2, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2175 :   store i1 %1304, i1* %FPU_C2_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2176 :   %1305 = load i1* %FPU_C1, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2177 :   store i1 %1305, i1* %FPU_C1_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2178 :   %1306 = load i1* %FPU_C0, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2179 :   store i1 %1306, i1* %FPU_C0_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2180 :   %1307 = load i1* %FPU_ES, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2181 :   store i1 %1307, i1* %FPU_ES_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2182 :   %1308 = load i1* %FPU_SF, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2183 :   store i1 %1308, i1* %FPU_SF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2184 :   %1309 = load i1* %FPU_PE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2185 :   store i1 %1309, i1* %FPU_PE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2186 :   %1310 = load i1* %FPU_UE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2187 :   store i1 %1310, i1* %FPU_UE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2188 :   %1311 = load i1* %FPU_OE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2189 :   store i1 %1311, i1* %FPU_OE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2190 :   %1312 = load i1* %FPU_ZE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2191 :   store i1 %1312, i1* %FPU_ZE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2192 :   %1313 = load i1* %FPU_DE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2193 :   store i1 %1313, i1* %FPU_DE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2194 :   %1314 = load i1* %FPU_IE, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2195 :   store i1 %1314, i1* %FPU_IE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2196 :   %1315 = load i1* %FPU_X, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2197 :   store i1 %1315, i1* %FPU_X_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2198 :   %1316 = load i2* %FPU_RC, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2199 :   store i2 %1316, i2* %FPU_RC_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2200 :   %1317 = load i2* %FPU_PC, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2201 :   store i2 %1317, i2* %FPU_PC_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2202 :   %1318 = load i1* %FPU_PM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2203 :   store i1 %1318, i1* %FPU_PM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2204 :   %1319 = load i1* %FPU_UM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2205 :   store i1 %1319, i1* %FPU_UM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2206 :   %1320 = load i1* %FPU_OM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2207 :   store i1 %1320, i1* %FPU_OM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2208 :   %1321 = load i1* %FPU_ZM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2209 :   store i1 %1321, i1* %FPU_ZM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2210 :   %1322 = load i1* %FPU_DM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2211 :   store i1 %1322, i1* %FPU_DM_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2212 :   %1323 = load i1* %FPU_IM, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2213 :   store i1 %1323, i1* %FPU_IM_val, !mcsema_real_eip !129 :          <36d>	callq	-882

2214 :   %1324 = load i64* %52, align 4 : NIL
2215 :   store i64 %1324, i64* %53, align 4 : NIL

2216 :   %1325 = load i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2217 :   store i16 %1325, i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2218 :   %1326 = load i64* %FPU_LASTIP_OFF, !mcsema_real_eip !129 :          <36d>	callq	-882
2219 :   store i64 %1326, i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2220 :   %1327 = load i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2221 :   store i16 %1327, i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2222 :   %1328 = load i64* %FPU_LASTDATA_OFF, !mcsema_real_eip !129 :          <36d>	callq	-882
2223 :   store i64 %1328, i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2224 :   %1329 = load i128* %XMM0, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2225 :   store i128 %1329, i128* %XMM0_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2226 :   %1330 = load i128* %XMM1, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2227 :   store i128 %1330, i128* %XMM1_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2228 :   %1331 = load i128* %XMM2, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2229 :   store i128 %1331, i128* %XMM2_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2230 :   %1332 = load i128* %XMM3, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2231 :   store i128 %1332, i128* %XMM3_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2232 :   %1333 = load i128* %XMM4, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2233 :   store i128 %1333, i128* %XMM4_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2234 :   %1334 = load i128* %XMM5, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2235 :   store i128 %1334, i128* %XMM5_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2236 :   %1335 = load i128* %XMM6, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2237 :   store i128 %1335, i128* %XMM6_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2238 :   %1336 = load i128* %XMM7, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2239 :   store i128 %1336, i128* %XMM7_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2240 :   %1337 = load i128* %XMM8, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2241 :   store i128 %1337, i128* %XMM8_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2242 :   %1338 = load i128* %XMM9, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2243 :   store i128 %1338, i128* %XMM9_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2244 :   %1339 = load i128* %XMM10, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2245 :   store i128 %1339, i128* %XMM10_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2246 :   %1340 = load i128* %XMM11, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2247 :   store i128 %1340, i128* %XMM11_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2248 :   %1341 = load i128* %XMM12, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2249 :   store i128 %1341, i128* %XMM12_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2250 :   %1342 = load i128* %XMM13, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2251 :   store i128 %1342, i128* %XMM13_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2252 :   %1343 = load i128* %XMM14, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2253 :   store i128 %1343, i128* %XMM14_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2254 :   %1344 = load i128* %XMM15, align 1, !mcsema_real_eip !129 :          <36d>	callq	-882
2255 :   store i128 %1344, i128* %XMM15_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2256 :   %1345 = load i64* %STACK_BASE, !mcsema_real_eip !129 :          <36d>	callq	-882
2257 :   store i64 %1345, i64* %STACK_BASE_val, !mcsema_real_eip !129 :          <36d>	callq	-882
2258 :   %1346 = load i64* %STACK_LIMIT, !mcsema_real_eip !129 :          <36d>	callq	-882
2259 :   store i64 %1346, i64* %STACK_LIMIT_val, !mcsema_real_eip !129 :          <36d>	callq	-882

2260 :   store i64 1, i64* %RDI_val, !mcsema_real_eip !130 :          <372>	movl	$1, %edi

2261 :   %1347 = load i64* %RBP_val, !mcsema_real_eip !131 :          <377>	movl	-36(%rbp), %esi
2262 :   %1348 = add i64 %1347, -36, !mcsema_real_eip !131 :          <377>	movl	-36(%rbp), %esi
2263 :   %1349 = inttoptr i64 %1348 to i64*, !mcsema_real_eip !131 :          <377>	movl	-36(%rbp), %esi

2264 :   %1350 = bitcast i64* %1349 to i32* : NIL

2265 :   %1351 = load i32* %1350, !mcsema_real_eip !131 :          <377>	movl	-36(%rbp), %esi

2266 :   %uadd363 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %1351, i32 1) : NIL
2267 :   %1352 = extractvalue { i32, i1 } %uadd363, 0 : NIL

2268 :   %1353 = xor i32 %1352, %1351, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
2269 :   %1354 = and i32 %1353, 16, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
2270 :   %1355 = icmp ne i32 %1354, 0, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
2271 :   store i1 %1355, i1* %AF_val, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi

2272 :   %1356 = icmp slt i32 %1352, 0 : NIL

2273 :   store i1 %1356, i1* %SF_val, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
2274 :   %1357 = icmp eq i32 %1352, 0, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
2275 :   store i1 %1357, i1* %ZF_val, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
2276 :   %1358 = xor i32 %1351, -2147483648, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
2277 :   %1359 = and i32 %1353, %1358, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi

2278 :   %1360 = icmp slt i32 %1359, 0 : NIL

2279 :   store i1 %1360, i1* %OF_val, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
2280 :   %1361 = trunc i32 %1352 to i8, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
2281 :   %1362 = tail call i8 @llvm.ctpop.i8(i8 %1361), !mcsema_real_eip !132 :          <37a>	addl	$1, %esi

2282 :   %1363 = and i8 %1362, 1 : NIL
2283 :   %1364 = icmp eq i8 %1363, 0 : NIL

2284 :   store i1 %1364, i1* %PF_val, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi

2285 :   %1365 = extractvalue { i32, i1 } %uadd363, 1 : NIL

2286 :   store i1 %1365, i1* %CF_val, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
2287 :   %1366 = zext i32 %1352 to i64, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi
2288 :   store i64 %1366, i64* %RSI_val, !mcsema_real_eip !132 :          <37a>	addl	$1, %esi

2289 :   %1367 = load i64* %RBP_val, !mcsema_real_eip !133 :          <380>	movl	%esi, -36(%rbp)
2290 :   %1368 = add i64 %1367, -36, !mcsema_real_eip !133 :          <380>	movl	%esi, -36(%rbp)
2291 :   %1369 = inttoptr i64 %1368 to i64*, !mcsema_real_eip !133 :          <380>	movl	%esi, -36(%rbp)

2292 :   %1370 = bitcast i64* %1369 to i32* : NIL

2293 :   store i32 %1352, i32* %1370, !mcsema_real_eip !133 :          <380>	movl	%esi, -36(%rbp)

2294 :   %1371 = load i64* %RDI_val, !mcsema_real_eip !134 :          <383>	callq	0
2295 :   %1372 = tail call x86_64_sysvcc i64 @sleep(i64 %1371), !mcsema_real_eip !134 :          <383>	callq	0
2296 :   store i64 %1372, i64* %RAX_val, !mcsema_real_eip !134 :          <383>	callq	0

2297 :   %1373 = load i64* %RBP_val, !mcsema_real_eip !135 :          <388>	movl	%eax, -120(%rbp)
2298 :   %1374 = add i64 %1373, -120, !mcsema_real_eip !135 :          <388>	movl	%eax, -120(%rbp)
2299 :   %1375 = inttoptr i64 %1374 to i64*, !mcsema_real_eip !135 :          <388>	movl	%eax, -120(%rbp)
2300 :   %1376 = trunc i64 %1372 to i32, !mcsema_real_eip !135 :          <388>	movl	%eax, -120(%rbp)

2301 :   %1377 = bitcast i64* %1375 to i32* : NIL

2302 :   store i32 %1376, i32* %1377, !mcsema_real_eip !135 :          <388>	movl	%eax, -120(%rbp)

2303 :   br label %block_0x130, !mcsema_real_eip !136 :          <38b>	jmp	-608

2304 :   %1378 = load i64* %RBP_val, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)
2305 :   %1379 = add i64 %1378, -36, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)
2306 :   %1380 = inttoptr i64 %1379 to i64*, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)

2307 :   %1381 = bitcast i64* %1380 to i32* : NIL

2308 :   %1382 = load i32* %1381, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)

2309 :   %1383 = add i32 %1382, -28 : NIL

2310 :   %1384 = xor i32 %1383, %1382, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)

2311 :   %1385 = and i32 %1384, 16 : NIL
2312 :   %1386 = icmp eq i32 %1385, 0 : NIL

2313 :   store i1 %1386, i1* %AF_val, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)
2314 :   %1387 = trunc i32 %1383 to i8, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)
2315 :   %1388 = tail call i8 @llvm.ctpop.i8(i8 %1387), !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)

2316 :   %1389 = and i8 %1388, 1 : NIL
2317 :   %1390 = icmp eq i8 %1389, 0 : NIL

2318 :   store i1 %1390, i1* %PF_val, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)
2319 :   %1391 = icmp eq i32 %1383, 0, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)
2320 :   store i1 %1391, i1* %ZF_val, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)

2321 :   %1392 = icmp slt i32 %1383, 0 : NIL

2322 :   store i1 %1392, i1* %SF_val, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)
2323 :   %1393 = icmp ult i32 %1382, 28, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)
2324 :   store i1 %1393, i1* %CF_val, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)
2325 :   %1394 = and i32 %1384, %1382, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)

2326 :   %1395 = icmp slt i32 %1394, 0 : NIL

2327 :   store i1 %1395, i1* %OF_val, !mcsema_real_eip !24 :          <130>	cmpl	$28, -36(%rbp)

2328 :   %tmp364 = xor i1 %1392, %1395 : NIL

2329 :   br i1 %tmp364, label %block_0x13d, label %block_0x390.loopexit, !mcsema_real_eip !25 :          <137>	jge	595

2330 :   %1396 = load i64* %RBP_val, !mcsema_real_eip !146 :          <2fe>	cmpl	$11, -20(%rbp)
2331 :   %1397 = add i64 %1396, -20, !mcsema_real_eip !146 :          <2fe>	cmpl	$11, -20(%rbp)
2332 :   %1398 = inttoptr i64 %1397 to i64*, !mcsema_real_eip !146 :          <2fe>	cmpl	$11, -20(%rbp)

2333 :   %1399 = bitcast i64* %1398 to i32* : NIL

2334 :   %1400 = load i32* %1399, !mcsema_real_eip !146 :          <2fe>	cmpl	$11, -20(%rbp)

2335 :   %1401 = add i32 %1400, -11 : NIL

2336 :   %1402 = xor i32 %1401, %1400, !mcsema_real_eip !146 :          <2fe>	cmpl	$11, -20(%rbp)
2337 :   %1403 = and i32 %1402, 16, !mcsema_real_eip !146 :          <2fe>	cmpl	$11, -20(%rbp)
2338 :   %1404 = icmp ne i32 %1403, 0, !mcsema_real_eip !146 :          <2fe>	cmpl	$11, -20(%rbp)
2339 :   store i1 %1404, i1* %AF_val, !mcsema_real_eip !146 :          <2fe>	cmpl	$11, -20(%rbp)
2340 :   %1405 = trunc i32 %1401 to i8, !mcsema_real_eip !146 :          <2fe>	cmpl	$11, -20(%rbp)
2341 :   %1406 = tail call i8 @llvm.ctpop.i8(i8 %1405), !mcsema_real_eip !146 :          <2fe>	cmpl	$11, -20(%rbp)

2342 :   %1407 = and i8 %1406, 1 : NIL
2343 :   %1408 = icmp eq i8 %1407, 0 : NIL

2344 :   store i1 %1408, i1* %PF_val, !mcsema_real_eip !146 :          <2fe>	cmpl	$11, -20(%rbp)
2345 :   %1409 = icmp eq i32 %1401, 0, !mcsema_real_eip !146 :          <2fe>	cmpl	$11, -20(%rbp)
2346 :   store i1 %1409, i1* %ZF_val, !mcsema_real_eip !146 :          <2fe>	cmpl	$11, -20(%rbp)

2347 :   %1410 = icmp slt i32 %1401, 0 : NIL

2348 :   store i1 %1410, i1* %SF_val, !mcsema_real_eip !146 :          <2fe>	cmpl	$11, -20(%rbp)
2349 :   %1411 = icmp ult i32 %1400, 11, !mcsema_real_eip !146 :          <2fe>	cmpl	$11, -20(%rbp)
2350 :   store i1 %1411, i1* %CF_val, !mcsema_real_eip !146 :          <2fe>	cmpl	$11, -20(%rbp)
2351 :   %1412 = and i32 %1402, %1400, !mcsema_real_eip !146 :          <2fe>	cmpl	$11, -20(%rbp)

2352 :   %1413 = icmp slt i32 %1412, 0 : NIL

2353 :   store i1 %1413, i1* %OF_val, !mcsema_real_eip !146 :          <2fe>	cmpl	$11, -20(%rbp)

2354 :   %1414 = xor i1 %1410, %1413 : NIL

2355 :   br i1 %1414, label %block_0x317, label %block_0x30b, !mcsema_real_eip !147 :          <305>	jl	12
========================================================
Source line mapping for function: sub_0
========================================================

1 :   %R15_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
2 :   %STACK_LIMIT_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
3 :   %STACK_BASE_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
4 :   %XMM15_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
5 :   %XMM14_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
6 :   %XMM13_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
7 :   %XMM12_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
8 :   %XMM11_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
9 :   %XMM10_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
10 :   %XMM9_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
11 :   %XMM8_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
12 :   %XMM7_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
13 :   %XMM6_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
14 :   %XMM5_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
15 :   %XMM4_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
16 :   %XMM3_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
17 :   %XMM2_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
18 :   %XMM1_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
19 :   %XMM0_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
20 :   %FPU_LASTDATA_OFF_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
21 :   %FPU_LASTDATA_SEG_val = alloca i16, !mcsema_real_eip !2 :          <0>	pushq	%rbp
22 :   %FPU_LASTIP_OFF_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
23 :   %FPU_LASTIP_SEG_val = alloca i16, !mcsema_real_eip !2 :          <0>	pushq	%rbp
24 :   %FPU_TAG_val = alloca [8 x i2], !mcsema_real_eip !2 :          <0>	pushq	%rbp
25 :   %FPU_IM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
26 :   %FPU_DM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
27 :   %FPU_ZM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
28 :   %FPU_OM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
29 :   %FPU_UM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
30 :   %FPU_PM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
31 :   %FPU_PC_val = alloca i2, !mcsema_real_eip !2 :          <0>	pushq	%rbp
32 :   %FPU_RC_val = alloca i2, !mcsema_real_eip !2 :          <0>	pushq	%rbp
33 :   %FPU_X_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
34 :   %FPU_IE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
35 :   %FPU_DE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
36 :   %FPU_ZE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
37 :   %FPU_OE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
38 :   %FPU_UE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
39 :   %FPU_PE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
40 :   %FPU_SF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
41 :   %FPU_ES_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
42 :   %FPU_C0_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
43 :   %FPU_C1_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
44 :   %FPU_C2_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
45 :   %FPU_TOP_val = alloca i3, !mcsema_real_eip !2 :          <0>	pushq	%rbp
46 :   %FPU_C3_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
47 :   %FPU_B_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
48 :   %STi_val = alloca [8 x x86_fp80], !mcsema_real_eip !2 :          <0>	pushq	%rbp
49 :   %DF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
50 :   %OF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
51 :   %SF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
52 :   %CF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
53 :   %AF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
54 :   %PF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
55 :   %ZF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
56 :   %RIP_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
57 :   %R14_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
58 :   %R13_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
59 :   %R12_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
60 :   %R11_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
61 :   %R10_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
62 :   %R9_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
63 :   %R8_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
64 :   %RSP_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
65 :   %RBP_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
66 :   %RDI_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
67 :   %RSI_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
68 :   %RDX_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
69 :   %RCX_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
70 :   %RBX_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
71 :   %RAX_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
72 :   %RAX = getelementptr inbounds %struct.regs* %0, i64 0, i32 0, !mcsema_real_eip !2 :          <0>	pushq	%rbp
73 :   %1 = load i64* %RAX, !mcsema_real_eip !2 :          <0>	pushq	%rbp
74 :   store i64 %1, i64* %RAX_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
75 :   %RBX = getelementptr inbounds %struct.regs* %0, i64 0, i32 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
76 :   %2 = load i64* %RBX, !mcsema_real_eip !2 :          <0>	pushq	%rbp
77 :   store i64 %2, i64* %RBX_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
78 :   %RCX = getelementptr inbounds %struct.regs* %0, i64 0, i32 2, !mcsema_real_eip !2 :          <0>	pushq	%rbp
79 :   %3 = load i64* %RCX, !mcsema_real_eip !2 :          <0>	pushq	%rbp
80 :   store i64 %3, i64* %RCX_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
81 :   %RDX = getelementptr inbounds %struct.regs* %0, i64 0, i32 3, !mcsema_real_eip !2 :          <0>	pushq	%rbp
82 :   %4 = load i64* %RDX, !mcsema_real_eip !2 :          <0>	pushq	%rbp
83 :   store i64 %4, i64* %RDX_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
84 :   %RSI = getelementptr inbounds %struct.regs* %0, i64 0, i32 4, !mcsema_real_eip !2 :          <0>	pushq	%rbp
85 :   %5 = load i64* %RSI, !mcsema_real_eip !2 :          <0>	pushq	%rbp
86 :   store i64 %5, i64* %RSI_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
87 :   %RDI = getelementptr inbounds %struct.regs* %0, i64 0, i32 5, !mcsema_real_eip !2 :          <0>	pushq	%rbp
88 :   %6 = load i64* %RDI, !mcsema_real_eip !2 :          <0>	pushq	%rbp
89 :   store i64 %6, i64* %RDI_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
90 :   %RSP = getelementptr inbounds %struct.regs* %0, i64 0, i32 6, !mcsema_real_eip !2 :          <0>	pushq	%rbp
91 :   %7 = load i64* %RSP, !mcsema_real_eip !2 :          <0>	pushq	%rbp
92 :   store i64 %7, i64* %RSP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
93 :   %RBP = getelementptr inbounds %struct.regs* %0, i64 0, i32 7, !mcsema_real_eip !2 :          <0>	pushq	%rbp
94 :   %8 = load i64* %RBP, !mcsema_real_eip !2 :          <0>	pushq	%rbp
95 :   store i64 %8, i64* %RBP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
96 :   %R8 = getelementptr inbounds %struct.regs* %0, i64 0, i32 8, !mcsema_real_eip !2 :          <0>	pushq	%rbp
97 :   %9 = load i64* %R8, !mcsema_real_eip !2 :          <0>	pushq	%rbp
98 :   store i64 %9, i64* %R8_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
99 :   %R9 = getelementptr inbounds %struct.regs* %0, i64 0, i32 9, !mcsema_real_eip !2 :          <0>	pushq	%rbp
100 :   %10 = load i64* %R9, !mcsema_real_eip !2 :          <0>	pushq	%rbp
101 :   store i64 %10, i64* %R9_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
102 :   %R10 = getelementptr inbounds %struct.regs* %0, i64 0, i32 10, !mcsema_real_eip !2 :          <0>	pushq	%rbp
103 :   %11 = load i64* %R10, !mcsema_real_eip !2 :          <0>	pushq	%rbp
104 :   store i64 %11, i64* %R10_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
105 :   %R11 = getelementptr inbounds %struct.regs* %0, i64 0, i32 11, !mcsema_real_eip !2 :          <0>	pushq	%rbp
106 :   %12 = load i64* %R11, !mcsema_real_eip !2 :          <0>	pushq	%rbp
107 :   store i64 %12, i64* %R11_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
108 :   %R12 = getelementptr inbounds %struct.regs* %0, i64 0, i32 12, !mcsema_real_eip !2 :          <0>	pushq	%rbp
109 :   %13 = load i64* %R12, !mcsema_real_eip !2 :          <0>	pushq	%rbp
110 :   store i64 %13, i64* %R12_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
111 :   %R13 = getelementptr inbounds %struct.regs* %0, i64 0, i32 13, !mcsema_real_eip !2 :          <0>	pushq	%rbp
112 :   %14 = load i64* %R13, !mcsema_real_eip !2 :          <0>	pushq	%rbp
113 :   store i64 %14, i64* %R13_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
114 :   %R14 = getelementptr inbounds %struct.regs* %0, i64 0, i32 14, !mcsema_real_eip !2 :          <0>	pushq	%rbp
115 :   %15 = load i64* %R14, !mcsema_real_eip !2 :          <0>	pushq	%rbp
116 :   store i64 %15, i64* %R14_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
117 :   %R15 = getelementptr inbounds %struct.regs* %0, i64 0, i32 15, !mcsema_real_eip !2 :          <0>	pushq	%rbp
118 :   %16 = load i64* %R15, !mcsema_real_eip !2 :          <0>	pushq	%rbp
119 :   store i64 %16, i64* %R15_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
120 :   %RIP = getelementptr inbounds %struct.regs* %0, i64 0, i32 16, !mcsema_real_eip !2 :          <0>	pushq	%rbp
121 :   %17 = load i64* %RIP, !mcsema_real_eip !2 :          <0>	pushq	%rbp
122 :   store i64 %17, i64* %RIP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
123 :   %CF = getelementptr inbounds %struct.regs* %0, i64 0, i32 17, !mcsema_real_eip !2 :          <0>	pushq	%rbp
124 :   %18 = load i1* %CF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
125 :   store i1 %18, i1* %CF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
126 :   %PF = getelementptr inbounds %struct.regs* %0, i64 0, i32 18, !mcsema_real_eip !2 :          <0>	pushq	%rbp
127 :   %19 = load i1* %PF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
128 :   store i1 %19, i1* %PF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
129 :   %AF = getelementptr inbounds %struct.regs* %0, i64 0, i32 19, !mcsema_real_eip !2 :          <0>	pushq	%rbp
130 :   %20 = load i1* %AF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
131 :   store i1 %20, i1* %AF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
132 :   %ZF = getelementptr inbounds %struct.regs* %0, i64 0, i32 20, !mcsema_real_eip !2 :          <0>	pushq	%rbp
133 :   %21 = load i1* %ZF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
134 :   store i1 %21, i1* %ZF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
135 :   %SF = getelementptr inbounds %struct.regs* %0, i64 0, i32 21, !mcsema_real_eip !2 :          <0>	pushq	%rbp
136 :   %22 = load i1* %SF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
137 :   store i1 %22, i1* %SF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
138 :   %OF = getelementptr inbounds %struct.regs* %0, i64 0, i32 22, !mcsema_real_eip !2 :          <0>	pushq	%rbp
139 :   %23 = load i1* %OF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
140 :   store i1 %23, i1* %OF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
141 :   %DF = getelementptr inbounds %struct.regs* %0, i64 0, i32 23, !mcsema_real_eip !2 :          <0>	pushq	%rbp
142 :   %24 = load i1* %DF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
143 :   store i1 %24, i1* %DF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
144 :   %25 = getelementptr inbounds %struct.regs* %0, i64 0, i32 24, i64 0, !mcsema_real_eip !2 :          <0>	pushq	%rbp
145 :   %26 = bitcast x86_fp80* %25 to i8*, !mcsema_real_eip !2 :          <0>	pushq	%rbp
146 :   %27 = bitcast [8 x x86_fp80]* %STi_val to i8*, !mcsema_real_eip !2 :          <0>	pushq	%rbp
147 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %27, i8* %26, i32 128, i32 4, i1 false), !mcsema_real_eip !2 :          <0>	pushq	%rbp
148 :   %FPU_B = getelementptr inbounds %struct.regs* %0, i64 0, i32 25, !mcsema_real_eip !2 :          <0>	pushq	%rbp
149 :   %28 = load i1* %FPU_B, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
150 :   store i1 %28, i1* %FPU_B_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
151 :   %FPU_C3 = getelementptr inbounds %struct.regs* %0, i64 0, i32 26, !mcsema_real_eip !2 :          <0>	pushq	%rbp
152 :   %29 = load i1* %FPU_C3, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
153 :   store i1 %29, i1* %FPU_C3_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
154 :   %FPU_TOP = getelementptr inbounds %struct.regs* %0, i64 0, i32 27, !mcsema_real_eip !2 :          <0>	pushq	%rbp
155 :   %30 = load i3* %FPU_TOP, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
156 :   store i3 %30, i3* %FPU_TOP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
157 :   %FPU_C2 = getelementptr inbounds %struct.regs* %0, i64 0, i32 28, !mcsema_real_eip !2 :          <0>	pushq	%rbp
158 :   %31 = load i1* %FPU_C2, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
159 :   store i1 %31, i1* %FPU_C2_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
160 :   %FPU_C1 = getelementptr inbounds %struct.regs* %0, i64 0, i32 29, !mcsema_real_eip !2 :          <0>	pushq	%rbp
161 :   %32 = load i1* %FPU_C1, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
162 :   store i1 %32, i1* %FPU_C1_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
163 :   %FPU_C0 = getelementptr inbounds %struct.regs* %0, i64 0, i32 30, !mcsema_real_eip !2 :          <0>	pushq	%rbp
164 :   %33 = load i1* %FPU_C0, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
165 :   store i1 %33, i1* %FPU_C0_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
166 :   %FPU_ES = getelementptr inbounds %struct.regs* %0, i64 0, i32 31, !mcsema_real_eip !2 :          <0>	pushq	%rbp
167 :   %34 = load i1* %FPU_ES, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
168 :   store i1 %34, i1* %FPU_ES_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
169 :   %FPU_SF = getelementptr inbounds %struct.regs* %0, i64 0, i32 32, !mcsema_real_eip !2 :          <0>	pushq	%rbp
170 :   %35 = load i1* %FPU_SF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
171 :   store i1 %35, i1* %FPU_SF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
172 :   %FPU_PE = getelementptr inbounds %struct.regs* %0, i64 0, i32 33, !mcsema_real_eip !2 :          <0>	pushq	%rbp
173 :   %36 = load i1* %FPU_PE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
174 :   store i1 %36, i1* %FPU_PE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
175 :   %FPU_UE = getelementptr inbounds %struct.regs* %0, i64 0, i32 34, !mcsema_real_eip !2 :          <0>	pushq	%rbp
176 :   %37 = load i1* %FPU_UE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
177 :   store i1 %37, i1* %FPU_UE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
178 :   %FPU_OE = getelementptr inbounds %struct.regs* %0, i64 0, i32 35, !mcsema_real_eip !2 :          <0>	pushq	%rbp
179 :   %38 = load i1* %FPU_OE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
180 :   store i1 %38, i1* %FPU_OE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
181 :   %FPU_ZE = getelementptr inbounds %struct.regs* %0, i64 0, i32 36, !mcsema_real_eip !2 :          <0>	pushq	%rbp
182 :   %39 = load i1* %FPU_ZE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
183 :   store i1 %39, i1* %FPU_ZE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
184 :   %FPU_DE = getelementptr inbounds %struct.regs* %0, i64 0, i32 37, !mcsema_real_eip !2 :          <0>	pushq	%rbp
185 :   %40 = load i1* %FPU_DE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
186 :   store i1 %40, i1* %FPU_DE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
187 :   %FPU_IE = getelementptr inbounds %struct.regs* %0, i64 0, i32 38, !mcsema_real_eip !2 :          <0>	pushq	%rbp
188 :   %41 = load i1* %FPU_IE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
189 :   store i1 %41, i1* %FPU_IE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
190 :   %FPU_X = getelementptr inbounds %struct.regs* %0, i64 0, i32 39, !mcsema_real_eip !2 :          <0>	pushq	%rbp
191 :   %42 = load i1* %FPU_X, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
192 :   store i1 %42, i1* %FPU_X_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
193 :   %FPU_RC = getelementptr inbounds %struct.regs* %0, i64 0, i32 40, !mcsema_real_eip !2 :          <0>	pushq	%rbp
194 :   %43 = load i2* %FPU_RC, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
195 :   store i2 %43, i2* %FPU_RC_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
196 :   %FPU_PC = getelementptr inbounds %struct.regs* %0, i64 0, i32 41, !mcsema_real_eip !2 :          <0>	pushq	%rbp
197 :   %44 = load i2* %FPU_PC, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
198 :   store i2 %44, i2* %FPU_PC_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
199 :   %FPU_PM = getelementptr inbounds %struct.regs* %0, i64 0, i32 42, !mcsema_real_eip !2 :          <0>	pushq	%rbp
200 :   %45 = load i1* %FPU_PM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
201 :   store i1 %45, i1* %FPU_PM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
202 :   %FPU_UM = getelementptr inbounds %struct.regs* %0, i64 0, i32 43, !mcsema_real_eip !2 :          <0>	pushq	%rbp
203 :   %46 = load i1* %FPU_UM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
204 :   store i1 %46, i1* %FPU_UM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
205 :   %FPU_OM = getelementptr inbounds %struct.regs* %0, i64 0, i32 44, !mcsema_real_eip !2 :          <0>	pushq	%rbp
206 :   %47 = load i1* %FPU_OM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
207 :   store i1 %47, i1* %FPU_OM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
208 :   %FPU_ZM = getelementptr inbounds %struct.regs* %0, i64 0, i32 45, !mcsema_real_eip !2 :          <0>	pushq	%rbp
209 :   %48 = load i1* %FPU_ZM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
210 :   store i1 %48, i1* %FPU_ZM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
211 :   %FPU_DM = getelementptr inbounds %struct.regs* %0, i64 0, i32 46, !mcsema_real_eip !2 :          <0>	pushq	%rbp
212 :   %49 = load i1* %FPU_DM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
213 :   store i1 %49, i1* %FPU_DM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
214 :   %FPU_IM = getelementptr inbounds %struct.regs* %0, i64 0, i32 47, !mcsema_real_eip !2 :          <0>	pushq	%rbp
215 :   %50 = load i1* %FPU_IM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
216 :   store i1 %50, i1* %FPU_IM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
217 :   %51 = getelementptr inbounds %struct.regs* %0, i64 0, i32 48, i64 0, !mcsema_real_eip !2 :          <0>	pushq	%rbp

218 :   %52 = bitcast i8* %51 to i64* : NIL
219 :   %53 = bitcast [8 x i2]* %FPU_TAG_val to i64* : NIL
220 :   %54 = load i64* %52, align 4 : NIL
221 :   store i64 %54, i64* %53, align 4 : NIL

222 :   %FPU_LASTIP_SEG = getelementptr inbounds %struct.regs* %0, i64 0, i32 49, !mcsema_real_eip !2 :          <0>	pushq	%rbp
223 :   %55 = load i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
224 :   store i16 %55, i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
225 :   %FPU_LASTIP_OFF = getelementptr inbounds %struct.regs* %0, i64 0, i32 50, !mcsema_real_eip !2 :          <0>	pushq	%rbp
226 :   %56 = load i64* %FPU_LASTIP_OFF, !mcsema_real_eip !2 :          <0>	pushq	%rbp
227 :   store i64 %56, i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
228 :   %FPU_LASTDATA_SEG = getelementptr inbounds %struct.regs* %0, i64 0, i32 51, !mcsema_real_eip !2 :          <0>	pushq	%rbp
229 :   %57 = load i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
230 :   store i16 %57, i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
231 :   %FPU_LASTDATA_OFF = getelementptr inbounds %struct.regs* %0, i64 0, i32 52, !mcsema_real_eip !2 :          <0>	pushq	%rbp
232 :   %58 = load i64* %FPU_LASTDATA_OFF, !mcsema_real_eip !2 :          <0>	pushq	%rbp
233 :   store i64 %58, i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
234 :   %XMM0 = getelementptr inbounds %struct.regs* %0, i64 0, i32 54, !mcsema_real_eip !2 :          <0>	pushq	%rbp
235 :   %59 = load i128* %XMM0, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
236 :   store i128 %59, i128* %XMM0_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
237 :   %XMM1 = getelementptr inbounds %struct.regs* %0, i64 0, i32 55, !mcsema_real_eip !2 :          <0>	pushq	%rbp
238 :   %60 = load i128* %XMM1, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
239 :   store i128 %60, i128* %XMM1_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
240 :   %XMM2 = getelementptr inbounds %struct.regs* %0, i64 0, i32 56, !mcsema_real_eip !2 :          <0>	pushq	%rbp
241 :   %61 = load i128* %XMM2, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
242 :   store i128 %61, i128* %XMM2_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
243 :   %XMM3 = getelementptr inbounds %struct.regs* %0, i64 0, i32 57, !mcsema_real_eip !2 :          <0>	pushq	%rbp
244 :   %62 = load i128* %XMM3, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
245 :   store i128 %62, i128* %XMM3_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
246 :   %XMM4 = getelementptr inbounds %struct.regs* %0, i64 0, i32 58, !mcsema_real_eip !2 :          <0>	pushq	%rbp
247 :   %63 = load i128* %XMM4, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
248 :   store i128 %63, i128* %XMM4_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
249 :   %XMM5 = getelementptr inbounds %struct.regs* %0, i64 0, i32 59, !mcsema_real_eip !2 :          <0>	pushq	%rbp
250 :   %64 = load i128* %XMM5, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
251 :   store i128 %64, i128* %XMM5_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
252 :   %XMM6 = getelementptr inbounds %struct.regs* %0, i64 0, i32 60, !mcsema_real_eip !2 :          <0>	pushq	%rbp
253 :   %65 = load i128* %XMM6, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
254 :   store i128 %65, i128* %XMM6_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
255 :   %XMM7 = getelementptr inbounds %struct.regs* %0, i64 0, i32 61, !mcsema_real_eip !2 :          <0>	pushq	%rbp
256 :   %66 = load i128* %XMM7, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
257 :   store i128 %66, i128* %XMM7_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
258 :   %XMM8 = getelementptr inbounds %struct.regs* %0, i64 0, i32 62, !mcsema_real_eip !2 :          <0>	pushq	%rbp
259 :   %67 = load i128* %XMM8, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
260 :   store i128 %67, i128* %XMM8_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
261 :   %XMM9 = getelementptr inbounds %struct.regs* %0, i64 0, i32 63, !mcsema_real_eip !2 :          <0>	pushq	%rbp
262 :   %68 = load i128* %XMM9, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
263 :   store i128 %68, i128* %XMM9_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
264 :   %XMM10 = getelementptr inbounds %struct.regs* %0, i64 0, i32 64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
265 :   %69 = load i128* %XMM10, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
266 :   store i128 %69, i128* %XMM10_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
267 :   %XMM11 = getelementptr inbounds %struct.regs* %0, i64 0, i32 65, !mcsema_real_eip !2 :          <0>	pushq	%rbp
268 :   %70 = load i128* %XMM11, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
269 :   store i128 %70, i128* %XMM11_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
270 :   %XMM12 = getelementptr inbounds %struct.regs* %0, i64 0, i32 66, !mcsema_real_eip !2 :          <0>	pushq	%rbp
271 :   %71 = load i128* %XMM12, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
272 :   store i128 %71, i128* %XMM12_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
273 :   %XMM13 = getelementptr inbounds %struct.regs* %0, i64 0, i32 67, !mcsema_real_eip !2 :          <0>	pushq	%rbp
274 :   %72 = load i128* %XMM13, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
275 :   store i128 %72, i128* %XMM13_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
276 :   %XMM14 = getelementptr inbounds %struct.regs* %0, i64 0, i32 68, !mcsema_real_eip !2 :          <0>	pushq	%rbp
277 :   %73 = load i128* %XMM14, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
278 :   store i128 %73, i128* %XMM14_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
279 :   %XMM15 = getelementptr inbounds %struct.regs* %0, i64 0, i32 69, !mcsema_real_eip !2 :          <0>	pushq	%rbp
280 :   %74 = load i128* %XMM15, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
281 :   store i128 %74, i128* %XMM15_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
282 :   %STACK_BASE = getelementptr inbounds %struct.regs* %0, i64 0, i32 70, !mcsema_real_eip !2 :          <0>	pushq	%rbp
283 :   %75 = load i64* %STACK_BASE, !mcsema_real_eip !2 :          <0>	pushq	%rbp
284 :   store i64 %75, i64* %STACK_BASE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
285 :   %STACK_LIMIT = getelementptr inbounds %struct.regs* %0, i64 0, i32 71, !mcsema_real_eip !2 :          <0>	pushq	%rbp
286 :   %76 = load i64* %STACK_LIMIT, !mcsema_real_eip !2 :          <0>	pushq	%rbp
287 :   store i64 %76, i64* %STACK_LIMIT_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
288 :   %77 = load i64* %RBP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
289 :   %78 = load i64* %RSP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp

290 :   %79 = add i64 %78, -8 : NIL

291 :   %80 = inttoptr i64 %79 to i64*, !mcsema_real_eip !2 :          <0>	pushq	%rbp
292 :   store i64 %77, i64* %80, !mcsema_real_eip !2 :          <0>	pushq	%rbp

293 :   store i64 %79, i64* %RBP_val, !mcsema_real_eip !3 :          <1>	movq	%rsp, %rbp

294 :   %81 = add i64 %78, -40 : NIL

295 :   %82 = xor i64 %81, %79, !mcsema_real_eip !4 :          <4>	subq	$32, %rsp
296 :   %83 = and i64 %82, 16, !mcsema_real_eip !4 :          <4>	subq	$32, %rsp
297 :   %84 = icmp ne i64 %83, 0, !mcsema_real_eip !4 :          <4>	subq	$32, %rsp
298 :   store i1 %84, i1* %AF_val, !mcsema_real_eip !4 :          <4>	subq	$32, %rsp
299 :   %85 = trunc i64 %81 to i8, !mcsema_real_eip !4 :          <4>	subq	$32, %rsp
300 :   %86 = tail call i8 @llvm.ctpop.i8(i8 %85), !mcsema_real_eip !4 :          <4>	subq	$32, %rsp

301 :   %87 = and i8 %86, 1 : NIL
302 :   %88 = icmp eq i8 %87, 0 : NIL

303 :   store i1 %88, i1* %PF_val, !mcsema_real_eip !4 :          <4>	subq	$32, %rsp
304 :   %89 = icmp eq i64 %81, 0, !mcsema_real_eip !4 :          <4>	subq	$32, %rsp
305 :   store i1 %89, i1* %ZF_val, !mcsema_real_eip !4 :          <4>	subq	$32, %rsp

306 :   %90 = icmp slt i64 %81, 0 : NIL

307 :   store i1 %90, i1* %SF_val, !mcsema_real_eip !4 :          <4>	subq	$32, %rsp
308 :   %91 = icmp ult i64 %79, 32, !mcsema_real_eip !4 :          <4>	subq	$32, %rsp
309 :   store i1 %91, i1* %CF_val, !mcsema_real_eip !4 :          <4>	subq	$32, %rsp
310 :   %92 = and i64 %82, %79, !mcsema_real_eip !4 :          <4>	subq	$32, %rsp

311 :   %93 = icmp slt i64 %92, 0 : NIL

312 :   store i1 %93, i1* %OF_val, !mcsema_real_eip !4 :          <4>	subq	$32, %rsp
313 :   store i64 %81, i64* %RSP_val, !mcsema_real_eip !4 :          <4>	subq	$32, %rsp

314 :   %94 = load i64* %RBP_val, !mcsema_real_eip !5 :          <8>	movl	$0, -4(%rbp)
315 :   %95 = add i64 %94, -4, !mcsema_real_eip !5 :          <8>	movl	$0, -4(%rbp)
316 :   %96 = inttoptr i64 %95 to i64*, !mcsema_real_eip !5 :          <8>	movl	$0, -4(%rbp)

317 :   %97 = bitcast i64* %96 to i32* : NIL

318 :   store i32 0, i32* %97, !mcsema_real_eip !5 :          <8>	movl	$0, -4(%rbp)

319 :   %98 = load i64* %RBP_val, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
320 :   %99 = add i64 %98, -4, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
321 :   %100 = inttoptr i64 %99 to i64*, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)

322 :   %101 = bitcast i64* %100 to i32* : NIL

323 :   %102 = load i32* %101, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)

324 :   %103 = add i32 %102, -7 : NIL

325 :   %104 = xor i32 %103, %102, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
326 :   %105 = and i32 %104, 16, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
327 :   %106 = icmp ne i32 %105, 0, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
328 :   store i1 %106, i1* %AF_val, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
329 :   %107 = trunc i32 %103 to i8, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
330 :   %108 = tail call i8 @llvm.ctpop.i8(i8 %107), !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)

331 :   %109 = and i8 %108, 1 : NIL
332 :   %110 = icmp eq i8 %109, 0 : NIL

333 :   store i1 %110, i1* %PF_val, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
334 :   %111 = icmp eq i32 %103, 0, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
335 :   store i1 %111, i1* %ZF_val, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)

336 :   %112 = icmp slt i32 %103, 0 : NIL

337 :   store i1 %112, i1* %SF_val, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
338 :   %113 = icmp ult i32 %102, 7, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
339 :   store i1 %113, i1* %CF_val, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
340 :   %114 = and i32 %104, %102, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)

341 :   %115 = icmp slt i32 %114, 0 : NIL

342 :   store i1 %115, i1* %OF_val, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)

343 :   %tmp = xor i1 %112, %115 : NIL

344 :   br i1 %tmp, label %block_0x1c.preheader, label %block_0x98, !mcsema_real_eip !7 :          <16>	jge	124

345 :   br label %block_0x1c : NIL
346 :   br label %block_0x98 : NIL

347 :   store i64 add (i64 ptrtoint (%1* @data_0x3ff to i64), i64 3), i64* %RDI_val, !mcsema_real_eip !8 :          <98>	movabsq	$0, %rdi

348 :   %116 = tail call x86_64_sysvcc i64 @printf(i64 add (i64 ptrtoint (%1* @data_0x3ff to i64), i64 3)), !mcsema_real_eip !9 :          <a4>	callq	0
349 :   store i64 %116, i64* %RAX_val, !mcsema_real_eip !9 :          <a4>	callq	0

350 :   %117 = load i64* %RBP_val, !mcsema_real_eip !10 :          <a9>	movl	%eax, -20(%rbp)
351 :   %118 = add i64 %117, -20, !mcsema_real_eip !10 :          <a9>	movl	%eax, -20(%rbp)
352 :   %119 = inttoptr i64 %118 to i64*, !mcsema_real_eip !10 :          <a9>	movl	%eax, -20(%rbp)
353 :   %120 = trunc i64 %116 to i32, !mcsema_real_eip !10 :          <a9>	movl	%eax, -20(%rbp)

354 :   %121 = bitcast i64* %119 to i32* : NIL

355 :   store i32 %120, i32* %121, !mcsema_real_eip !10 :          <a9>	movl	%eax, -20(%rbp)

356 :   %122 = load i64* %RSP_val, !mcsema_real_eip !11 :          <ac>	addq	$32, %rsp

357 :   %uadd75 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %122, i64 32) : NIL
358 :   %123 = extractvalue { i64, i1 } %uadd75, 0 : NIL

359 :   %124 = xor i64 %123, %122, !mcsema_real_eip !11 :          <ac>	addq	$32, %rsp
360 :   %125 = and i64 %124, 16, !mcsema_real_eip !11 :          <ac>	addq	$32, %rsp
361 :   %126 = icmp ne i64 %125, 0, !mcsema_real_eip !11 :          <ac>	addq	$32, %rsp
362 :   store i1 %126, i1* %AF_val, !mcsema_real_eip !11 :          <ac>	addq	$32, %rsp

363 :   %127 = icmp slt i64 %123, 0 : NIL

364 :   store i1 %127, i1* %SF_val, !mcsema_real_eip !11 :          <ac>	addq	$32, %rsp
365 :   %128 = icmp eq i64 %123, 0, !mcsema_real_eip !11 :          <ac>	addq	$32, %rsp
366 :   store i1 %128, i1* %ZF_val, !mcsema_real_eip !11 :          <ac>	addq	$32, %rsp
367 :   %129 = xor i64 %122, -9223372036854775808, !mcsema_real_eip !11 :          <ac>	addq	$32, %rsp
368 :   %130 = and i64 %124, %129, !mcsema_real_eip !11 :          <ac>	addq	$32, %rsp

369 :   %131 = icmp slt i64 %130, 0 : NIL

370 :   store i1 %131, i1* %OF_val, !mcsema_real_eip !11 :          <ac>	addq	$32, %rsp
371 :   %132 = trunc i64 %123 to i8, !mcsema_real_eip !11 :          <ac>	addq	$32, %rsp
372 :   %133 = tail call i8 @llvm.ctpop.i8(i8 %132), !mcsema_real_eip !11 :          <ac>	addq	$32, %rsp

373 :   %134 = and i8 %133, 1 : NIL
374 :   %135 = icmp eq i8 %134, 0 : NIL

375 :   store i1 %135, i1* %PF_val, !mcsema_real_eip !11 :          <ac>	addq	$32, %rsp

376 :   %136 = extractvalue { i64, i1 } %uadd75, 1 : NIL

377 :   store i1 %136, i1* %CF_val, !mcsema_real_eip !11 :          <ac>	addq	$32, %rsp
378 :   store i64 %123, i64* %RSP_val, !mcsema_real_eip !11 :          <ac>	addq	$32, %rsp

379 :   %137 = inttoptr i64 %123 to i64*, !mcsema_real_eip !12 :          <b0>	popq	%rbp
380 :   %138 = load i64* %137, !mcsema_real_eip !12 :          <b0>	popq	%rbp
381 :   store i64 %138, i64* %RBP_val, !mcsema_real_eip !12 :          <b0>	popq	%rbp

382 :   %139 = add i64 %123, 16, !mcsema_real_eip !13 :          <b1>	retq
383 :   store i64 %139, i64* %RSP_val, !mcsema_real_eip !13 :          <b1>	retq
384 :   %140 = load i64* %RAX_val, !mcsema_real_eip !13 :          <b1>	retq
385 :   store i64 %140, i64* %RAX, !mcsema_real_eip !13 :          <b1>	retq
386 :   %141 = load i64* %RBX_val, !mcsema_real_eip !13 :          <b1>	retq
387 :   store i64 %141, i64* %RBX, !mcsema_real_eip !13 :          <b1>	retq
388 :   %142 = load i64* %RCX_val, !mcsema_real_eip !13 :          <b1>	retq
389 :   store i64 %142, i64* %RCX, !mcsema_real_eip !13 :          <b1>	retq
390 :   %143 = load i64* %RDX_val, !mcsema_real_eip !13 :          <b1>	retq
391 :   store i64 %143, i64* %RDX, !mcsema_real_eip !13 :          <b1>	retq
392 :   %144 = load i64* %RSI_val, !mcsema_real_eip !13 :          <b1>	retq
393 :   store i64 %144, i64* %RSI, !mcsema_real_eip !13 :          <b1>	retq
394 :   %145 = load i64* %RDI_val, !mcsema_real_eip !13 :          <b1>	retq
395 :   store i64 %145, i64* %RDI, !mcsema_real_eip !13 :          <b1>	retq
396 :   %146 = load i64* %RSP_val, !mcsema_real_eip !13 :          <b1>	retq
397 :   store i64 %146, i64* %RSP, !mcsema_real_eip !13 :          <b1>	retq
398 :   %147 = load i64* %RBP_val, !mcsema_real_eip !13 :          <b1>	retq
399 :   store i64 %147, i64* %RBP, !mcsema_real_eip !13 :          <b1>	retq
400 :   %148 = load i64* %R8_val, !mcsema_real_eip !13 :          <b1>	retq
401 :   store i64 %148, i64* %R8, !mcsema_real_eip !13 :          <b1>	retq
402 :   %149 = load i64* %R9_val, !mcsema_real_eip !13 :          <b1>	retq
403 :   store i64 %149, i64* %R9, !mcsema_real_eip !13 :          <b1>	retq
404 :   %150 = load i64* %R10_val, !mcsema_real_eip !13 :          <b1>	retq
405 :   store i64 %150, i64* %R10, !mcsema_real_eip !13 :          <b1>	retq
406 :   %151 = load i64* %R11_val, !mcsema_real_eip !13 :          <b1>	retq
407 :   store i64 %151, i64* %R11, !mcsema_real_eip !13 :          <b1>	retq
408 :   %152 = load i64* %R12_val, !mcsema_real_eip !13 :          <b1>	retq
409 :   store i64 %152, i64* %R12, !mcsema_real_eip !13 :          <b1>	retq
410 :   %153 = load i64* %R13_val, !mcsema_real_eip !13 :          <b1>	retq
411 :   store i64 %153, i64* %R13, !mcsema_real_eip !13 :          <b1>	retq
412 :   %154 = load i64* %R14_val, !mcsema_real_eip !13 :          <b1>	retq
413 :   store i64 %154, i64* %R14, !mcsema_real_eip !13 :          <b1>	retq
414 :   %155 = load i64* %R15_val, !mcsema_real_eip !13 :          <b1>	retq
415 :   store i64 %155, i64* %R15, !mcsema_real_eip !13 :          <b1>	retq
416 :   %156 = load i64* %RIP_val, !mcsema_real_eip !13 :          <b1>	retq
417 :   store i64 %156, i64* %RIP, !mcsema_real_eip !13 :          <b1>	retq
418 :   %157 = load i1* %CF_val, !mcsema_real_eip !13 :          <b1>	retq
419 :   store i1 %157, i1* %CF, align 1, !mcsema_real_eip !13 :          <b1>	retq
420 :   %158 = load i1* %PF_val, !mcsema_real_eip !13 :          <b1>	retq
421 :   store i1 %158, i1* %PF, align 1, !mcsema_real_eip !13 :          <b1>	retq
422 :   %159 = load i1* %AF_val, !mcsema_real_eip !13 :          <b1>	retq
423 :   store i1 %159, i1* %AF, align 1, !mcsema_real_eip !13 :          <b1>	retq
424 :   %160 = load i1* %ZF_val, !mcsema_real_eip !13 :          <b1>	retq
425 :   store i1 %160, i1* %ZF, align 1, !mcsema_real_eip !13 :          <b1>	retq
426 :   %161 = load i1* %SF_val, !mcsema_real_eip !13 :          <b1>	retq
427 :   store i1 %161, i1* %SF, align 1, !mcsema_real_eip !13 :          <b1>	retq
428 :   %162 = load i1* %OF_val, !mcsema_real_eip !13 :          <b1>	retq
429 :   store i1 %162, i1* %OF, align 1, !mcsema_real_eip !13 :          <b1>	retq
430 :   %163 = load i1* %DF_val, !mcsema_real_eip !13 :          <b1>	retq
431 :   store i1 %163, i1* %DF, align 1, !mcsema_real_eip !13 :          <b1>	retq
432 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %26, i8* %27, i32 128, i32 8, i1 false), !mcsema_real_eip !13 :          <b1>	retq
433 :   %164 = load i1* %FPU_B_val, !mcsema_real_eip !13 :          <b1>	retq
434 :   store i1 %164, i1* %FPU_B, align 1, !mcsema_real_eip !13 :          <b1>	retq
435 :   %165 = load i1* %FPU_C3_val, !mcsema_real_eip !13 :          <b1>	retq
436 :   store i1 %165, i1* %FPU_C3, align 1, !mcsema_real_eip !13 :          <b1>	retq
437 :   %166 = load i3* %FPU_TOP_val, !mcsema_real_eip !13 :          <b1>	retq
438 :   store i3 %166, i3* %FPU_TOP, align 1, !mcsema_real_eip !13 :          <b1>	retq
439 :   %167 = load i1* %FPU_C2_val, !mcsema_real_eip !13 :          <b1>	retq
440 :   store i1 %167, i1* %FPU_C2, align 1, !mcsema_real_eip !13 :          <b1>	retq
441 :   %168 = load i1* %FPU_C1_val, !mcsema_real_eip !13 :          <b1>	retq
442 :   store i1 %168, i1* %FPU_C1, align 1, !mcsema_real_eip !13 :          <b1>	retq
443 :   %169 = load i1* %FPU_C0_val, !mcsema_real_eip !13 :          <b1>	retq
444 :   store i1 %169, i1* %FPU_C0, align 1, !mcsema_real_eip !13 :          <b1>	retq
445 :   %170 = load i1* %FPU_ES_val, !mcsema_real_eip !13 :          <b1>	retq
446 :   store i1 %170, i1* %FPU_ES, align 1, !mcsema_real_eip !13 :          <b1>	retq
447 :   %171 = load i1* %FPU_SF_val, !mcsema_real_eip !13 :          <b1>	retq
448 :   store i1 %171, i1* %FPU_SF, align 1, !mcsema_real_eip !13 :          <b1>	retq
449 :   %172 = load i1* %FPU_PE_val, !mcsema_real_eip !13 :          <b1>	retq
450 :   store i1 %172, i1* %FPU_PE, align 1, !mcsema_real_eip !13 :          <b1>	retq
451 :   %173 = load i1* %FPU_UE_val, !mcsema_real_eip !13 :          <b1>	retq
452 :   store i1 %173, i1* %FPU_UE, align 1, !mcsema_real_eip !13 :          <b1>	retq
453 :   %174 = load i1* %FPU_OE_val, !mcsema_real_eip !13 :          <b1>	retq
454 :   store i1 %174, i1* %FPU_OE, align 1, !mcsema_real_eip !13 :          <b1>	retq
455 :   %175 = load i1* %FPU_ZE_val, !mcsema_real_eip !13 :          <b1>	retq
456 :   store i1 %175, i1* %FPU_ZE, align 1, !mcsema_real_eip !13 :          <b1>	retq
457 :   %176 = load i1* %FPU_DE_val, !mcsema_real_eip !13 :          <b1>	retq
458 :   store i1 %176, i1* %FPU_DE, align 1, !mcsema_real_eip !13 :          <b1>	retq
459 :   %177 = load i1* %FPU_IE_val, !mcsema_real_eip !13 :          <b1>	retq
460 :   store i1 %177, i1* %FPU_IE, align 1, !mcsema_real_eip !13 :          <b1>	retq
461 :   %178 = load i1* %FPU_X_val, !mcsema_real_eip !13 :          <b1>	retq
462 :   store i1 %178, i1* %FPU_X, align 1, !mcsema_real_eip !13 :          <b1>	retq
463 :   %179 = load i2* %FPU_RC_val, !mcsema_real_eip !13 :          <b1>	retq
464 :   store i2 %179, i2* %FPU_RC, align 1, !mcsema_real_eip !13 :          <b1>	retq
465 :   %180 = load i2* %FPU_PC_val, !mcsema_real_eip !13 :          <b1>	retq
466 :   store i2 %180, i2* %FPU_PC, align 1, !mcsema_real_eip !13 :          <b1>	retq
467 :   %181 = load i1* %FPU_PM_val, !mcsema_real_eip !13 :          <b1>	retq
468 :   store i1 %181, i1* %FPU_PM, align 1, !mcsema_real_eip !13 :          <b1>	retq
469 :   %182 = load i1* %FPU_UM_val, !mcsema_real_eip !13 :          <b1>	retq
470 :   store i1 %182, i1* %FPU_UM, align 1, !mcsema_real_eip !13 :          <b1>	retq
471 :   %183 = load i1* %FPU_OM_val, !mcsema_real_eip !13 :          <b1>	retq
472 :   store i1 %183, i1* %FPU_OM, align 1, !mcsema_real_eip !13 :          <b1>	retq
473 :   %184 = load i1* %FPU_ZM_val, !mcsema_real_eip !13 :          <b1>	retq
474 :   store i1 %184, i1* %FPU_ZM, align 1, !mcsema_real_eip !13 :          <b1>	retq
475 :   %185 = load i1* %FPU_DM_val, !mcsema_real_eip !13 :          <b1>	retq
476 :   store i1 %185, i1* %FPU_DM, align 1, !mcsema_real_eip !13 :          <b1>	retq
477 :   %186 = load i1* %FPU_IM_val, !mcsema_real_eip !13 :          <b1>	retq
478 :   store i1 %186, i1* %FPU_IM, align 1, !mcsema_real_eip !13 :          <b1>	retq

479 :   %187 = load i64* %53, align 4 : NIL
480 :   store i64 %187, i64* %52, align 4 : NIL

481 :   %188 = load i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !13 :          <b1>	retq
482 :   store i16 %188, i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !13 :          <b1>	retq
483 :   %189 = load i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !13 :          <b1>	retq
484 :   store i64 %189, i64* %FPU_LASTIP_OFF, align 1, !mcsema_real_eip !13 :          <b1>	retq
485 :   %190 = load i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !13 :          <b1>	retq
486 :   store i16 %190, i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !13 :          <b1>	retq
487 :   %191 = load i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !13 :          <b1>	retq
488 :   store i64 %191, i64* %FPU_LASTDATA_OFF, align 1, !mcsema_real_eip !13 :          <b1>	retq
489 :   %192 = load i128* %XMM0_val, !mcsema_real_eip !13 :          <b1>	retq
490 :   store i128 %192, i128* %XMM0, align 1, !mcsema_real_eip !13 :          <b1>	retq
491 :   %193 = load i128* %XMM1_val, !mcsema_real_eip !13 :          <b1>	retq
492 :   store i128 %193, i128* %XMM1, align 1, !mcsema_real_eip !13 :          <b1>	retq
493 :   %194 = load i128* %XMM2_val, !mcsema_real_eip !13 :          <b1>	retq
494 :   store i128 %194, i128* %XMM2, align 1, !mcsema_real_eip !13 :          <b1>	retq
495 :   %195 = load i128* %XMM3_val, !mcsema_real_eip !13 :          <b1>	retq
496 :   store i128 %195, i128* %XMM3, align 1, !mcsema_real_eip !13 :          <b1>	retq
497 :   %196 = load i128* %XMM4_val, !mcsema_real_eip !13 :          <b1>	retq
498 :   store i128 %196, i128* %XMM4, align 1, !mcsema_real_eip !13 :          <b1>	retq
499 :   %197 = load i128* %XMM5_val, !mcsema_real_eip !13 :          <b1>	retq
500 :   store i128 %197, i128* %XMM5, align 1, !mcsema_real_eip !13 :          <b1>	retq
501 :   %198 = load i128* %XMM6_val, !mcsema_real_eip !13 :          <b1>	retq
502 :   store i128 %198, i128* %XMM6, align 1, !mcsema_real_eip !13 :          <b1>	retq
503 :   %199 = load i128* %XMM7_val, !mcsema_real_eip !13 :          <b1>	retq
504 :   store i128 %199, i128* %XMM7, align 1, !mcsema_real_eip !13 :          <b1>	retq
505 :   %200 = load i128* %XMM8_val, !mcsema_real_eip !13 :          <b1>	retq
506 :   store i128 %200, i128* %XMM8, align 1, !mcsema_real_eip !13 :          <b1>	retq
507 :   %201 = load i128* %XMM9_val, !mcsema_real_eip !13 :          <b1>	retq
508 :   store i128 %201, i128* %XMM9, align 1, !mcsema_real_eip !13 :          <b1>	retq
509 :   %202 = load i128* %XMM10_val, !mcsema_real_eip !13 :          <b1>	retq
510 :   store i128 %202, i128* %XMM10, align 1, !mcsema_real_eip !13 :          <b1>	retq
511 :   %203 = load i128* %XMM11_val, !mcsema_real_eip !13 :          <b1>	retq
512 :   store i128 %203, i128* %XMM11, align 1, !mcsema_real_eip !13 :          <b1>	retq
513 :   %204 = load i128* %XMM12_val, !mcsema_real_eip !13 :          <b1>	retq
514 :   store i128 %204, i128* %XMM12, align 1, !mcsema_real_eip !13 :          <b1>	retq
515 :   %205 = load i128* %XMM13_val, !mcsema_real_eip !13 :          <b1>	retq
516 :   store i128 %205, i128* %XMM13, align 1, !mcsema_real_eip !13 :          <b1>	retq
517 :   %206 = load i128* %XMM14_val, !mcsema_real_eip !13 :          <b1>	retq
518 :   store i128 %206, i128* %XMM14, align 1, !mcsema_real_eip !13 :          <b1>	retq
519 :   %207 = load i128* %XMM15_val, !mcsema_real_eip !13 :          <b1>	retq
520 :   store i128 %207, i128* %XMM15, align 1, !mcsema_real_eip !13 :          <b1>	retq
521 :   %208 = load i64* %STACK_BASE_val, !mcsema_real_eip !13 :          <b1>	retq
522 :   store i64 %208, i64* %STACK_BASE, align 1, !mcsema_real_eip !13 :          <b1>	retq
523 :   %209 = load i64* %STACK_LIMIT_val, !mcsema_real_eip !13 :          <b1>	retq
524 :   store i64 %209, i64* %STACK_LIMIT, align 1, !mcsema_real_eip !13 :          <b1>	retq
525 :   ret void, !mcsema_real_eip !13 :          <b1>	retq

526 :   %210 = load i64* %RBP_val, !mcsema_real_eip !14 :          <1c>	movl	$0, -8(%rbp)
527 :   %211 = add i64 %210, -8, !mcsema_real_eip !14 :          <1c>	movl	$0, -8(%rbp)
528 :   %212 = inttoptr i64 %211 to i64*, !mcsema_real_eip !14 :          <1c>	movl	$0, -8(%rbp)

529 :   %213 = bitcast i64* %212 to i32* : NIL

530 :   store i32 0, i32* %213, !mcsema_real_eip !14 :          <1c>	movl	$0, -8(%rbp)

531 :   %214 = load i64* %RBP_val, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
532 :   %215 = add i64 %214, -8, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
533 :   %216 = inttoptr i64 %215 to i64*, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)

534 :   %217 = bitcast i64* %216 to i32* : NIL

535 :   %218 = load i32* %217, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)

536 :   %219 = add i32 %218, -11 : NIL

537 :   %220 = xor i32 %219, %218, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
538 :   %221 = and i32 %220, 16, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
539 :   %222 = icmp ne i32 %221, 0, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
540 :   store i1 %222, i1* %AF_val, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
541 :   %223 = trunc i32 %219 to i8, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
542 :   %224 = tail call i8 @llvm.ctpop.i8(i8 %223), !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)

543 :   %225 = and i8 %224, 1 : NIL
544 :   %226 = icmp eq i8 %225, 0 : NIL

545 :   store i1 %226, i1* %PF_val, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
546 :   %227 = icmp eq i32 %219, 0, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
547 :   store i1 %227, i1* %ZF_val, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)

548 :   %228 = icmp slt i32 %219, 0 : NIL

549 :   store i1 %228, i1* %SF_val, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
550 :   %229 = icmp ult i32 %218, 11, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
551 :   store i1 %229, i1* %CF_val, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
552 :   %230 = and i32 %220, %218, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)

553 :   %231 = icmp slt i32 %230, 0 : NIL

554 :   store i1 %231, i1* %OF_val, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)

555 :   %tmp70 = xor i1 %228, %231 : NIL

556 :   br i1 %tmp70, label %block_0x30.preheader, label %block_0x74, !mcsema_real_eip !16 :          <2a>	jge	68

557 :   br label %block_0x30 : NIL
558 :   br label %block_0x74 : NIL

559 :   store i64 add (i64 ptrtoint (%1* @data_0x3ff to i64), i64 3), i64* %RDI_val, !mcsema_real_eip !17 :          <74>	movabsq	$0, %rdi

560 :   %232 = tail call x86_64_sysvcc i64 @printf(i64 add (i64 ptrtoint (%1* @data_0x3ff to i64), i64 3)), !mcsema_real_eip !18 :          <80>	callq	0
561 :   store i64 %232, i64* %RAX_val, !mcsema_real_eip !18 :          <80>	callq	0

562 :   %233 = load i64* %RBP_val, !mcsema_real_eip !19 :          <85>	movl	%eax, -16(%rbp)
563 :   %234 = add i64 %233, -16, !mcsema_real_eip !19 :          <85>	movl	%eax, -16(%rbp)
564 :   %235 = inttoptr i64 %234 to i64*, !mcsema_real_eip !19 :          <85>	movl	%eax, -16(%rbp)
565 :   %236 = trunc i64 %232 to i32, !mcsema_real_eip !19 :          <85>	movl	%eax, -16(%rbp)

566 :   %237 = bitcast i64* %235 to i32* : NIL

567 :   store i32 %236, i32* %237, !mcsema_real_eip !19 :          <85>	movl	%eax, -16(%rbp)

568 :   %238 = load i64* %RBP_val, !mcsema_real_eip !20 :          <88>	movl	-4(%rbp), %eax
569 :   %239 = add i64 %238, -4, !mcsema_real_eip !20 :          <88>	movl	-4(%rbp), %eax
570 :   %240 = inttoptr i64 %239 to i64*, !mcsema_real_eip !20 :          <88>	movl	-4(%rbp), %eax

571 :   %241 = bitcast i64* %240 to i32* : NIL

572 :   %242 = load i32* %241, !mcsema_real_eip !20 :          <88>	movl	-4(%rbp), %eax

573 :   %uadd73 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %242, i32 1) : NIL
574 :   %243 = extractvalue { i32, i1 } %uadd73, 0 : NIL

575 :   %244 = xor i32 %243, %242, !mcsema_real_eip !21 :          <8b>	addl	$1, %eax
576 :   %245 = and i32 %244, 16, !mcsema_real_eip !21 :          <8b>	addl	$1, %eax
577 :   %246 = icmp ne i32 %245, 0, !mcsema_real_eip !21 :          <8b>	addl	$1, %eax
578 :   store i1 %246, i1* %AF_val, !mcsema_real_eip !21 :          <8b>	addl	$1, %eax

579 :   %247 = icmp slt i32 %243, 0 : NIL

580 :   store i1 %247, i1* %SF_val, !mcsema_real_eip !21 :          <8b>	addl	$1, %eax
581 :   %248 = icmp eq i32 %243, 0, !mcsema_real_eip !21 :          <8b>	addl	$1, %eax
582 :   store i1 %248, i1* %ZF_val, !mcsema_real_eip !21 :          <8b>	addl	$1, %eax
583 :   %249 = xor i32 %242, -2147483648, !mcsema_real_eip !21 :          <8b>	addl	$1, %eax
584 :   %250 = and i32 %244, %249, !mcsema_real_eip !21 :          <8b>	addl	$1, %eax

585 :   %251 = icmp slt i32 %250, 0 : NIL

586 :   store i1 %251, i1* %OF_val, !mcsema_real_eip !21 :          <8b>	addl	$1, %eax
587 :   %252 = trunc i32 %243 to i8, !mcsema_real_eip !21 :          <8b>	addl	$1, %eax
588 :   %253 = tail call i8 @llvm.ctpop.i8(i8 %252), !mcsema_real_eip !21 :          <8b>	addl	$1, %eax

589 :   %254 = and i8 %253, 1 : NIL
590 :   %255 = icmp eq i8 %254, 0 : NIL

591 :   store i1 %255, i1* %PF_val, !mcsema_real_eip !21 :          <8b>	addl	$1, %eax

592 :   %256 = extractvalue { i32, i1 } %uadd73, 1 : NIL

593 :   store i1 %256, i1* %CF_val, !mcsema_real_eip !21 :          <8b>	addl	$1, %eax
594 :   %257 = zext i32 %243 to i64, !mcsema_real_eip !21 :          <8b>	addl	$1, %eax
595 :   store i64 %257, i64* %RAX_val, !mcsema_real_eip !21 :          <8b>	addl	$1, %eax

596 :   %258 = load i64* %RBP_val, !mcsema_real_eip !22 :          <90>	movl	%eax, -4(%rbp)
597 :   %259 = add i64 %258, -4, !mcsema_real_eip !22 :          <90>	movl	%eax, -4(%rbp)
598 :   %260 = inttoptr i64 %259 to i64*, !mcsema_real_eip !22 :          <90>	movl	%eax, -4(%rbp)

599 :   %261 = bitcast i64* %260 to i32* : NIL

600 :   store i32 %243, i32* %261, !mcsema_real_eip !22 :          <90>	movl	%eax, -4(%rbp)

601 :   %262 = load i64* %RBP_val, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
602 :   %263 = add i64 %262, -4, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
603 :   %264 = inttoptr i64 %263 to i64*, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)

604 :   %265 = bitcast i64* %264 to i32* : NIL

605 :   %266 = load i32* %265, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)

606 :   %267 = add i32 %266, -7 : NIL

607 :   %268 = xor i32 %267, %266, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
608 :   %269 = and i32 %268, 16, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
609 :   %270 = icmp ne i32 %269, 0, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
610 :   store i1 %270, i1* %AF_val, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
611 :   %271 = trunc i32 %267 to i8, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
612 :   %272 = tail call i8 @llvm.ctpop.i8(i8 %271), !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)

613 :   %273 = and i8 %272, 1 : NIL
614 :   %274 = icmp eq i8 %273, 0 : NIL

615 :   store i1 %274, i1* %PF_val, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
616 :   %275 = icmp eq i32 %267, 0, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
617 :   store i1 %275, i1* %ZF_val, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)

618 :   %276 = icmp slt i32 %267, 0 : NIL

619 :   store i1 %276, i1* %SF_val, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
620 :   %277 = icmp ult i32 %266, 7, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
621 :   store i1 %277, i1* %CF_val, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)
622 :   %278 = and i32 %268, %266, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)

623 :   %279 = icmp slt i32 %278, 0 : NIL

624 :   store i1 %279, i1* %OF_val, !mcsema_real_eip !6 :          <f>	cmpl	$7, -4(%rbp)

625 :   %tmp74 = xor i1 %276, %279 : NIL

626 :   br i1 %tmp74, label %block_0x1c, label %block_0x98.loopexit, !mcsema_real_eip !7 :          <16>	jge	124

627 :   store i64 ptrtoint (%1* @data_0x3ff to i64), i64* %RDI_val, !mcsema_real_eip !23 :          <30>	movabsq	$0, %rdi

628 :   store i64 ptrtoint (%0* @data_0x3b2 to i64), i64* %RAX_val, !mcsema_real_eip !24 :          <3a>	movabsq	$0, %rax

629 :   %280 = load i64* %RBP_val, !mcsema_real_eip !25 :          <44>	movslq	-8(%rbp), %rcx
630 :   %281 = add i64 %280, -8, !mcsema_real_eip !25 :          <44>	movslq	-8(%rbp), %rcx
631 :   %282 = inttoptr i64 %281 to i64*, !mcsema_real_eip !25 :          <44>	movslq	-8(%rbp), %rcx

632 :   %283 = bitcast i64* %282 to i32* : NIL

633 :   %284 = load i32* %283, !mcsema_real_eip !25 :          <44>	movslq	-8(%rbp), %rcx
634 :   %285 = sext i32 %284 to i64, !mcsema_real_eip !25 :          <44>	movslq	-8(%rbp), %rcx
635 :   store i64 %285, i64* %RCX_val, !mcsema_real_eip !25 :          <44>	movslq	-8(%rbp), %rcx

636 :   %286 = load i64* %RBP_val, !mcsema_real_eip !26 :          <48>	movslq	-4(%rbp), %rdx
637 :   %287 = add i64 %286, -4, !mcsema_real_eip !26 :          <48>	movslq	-4(%rbp), %rdx
638 :   %288 = inttoptr i64 %287 to i64*, !mcsema_real_eip !26 :          <48>	movslq	-4(%rbp), %rdx

639 :   %289 = bitcast i64* %288 to i32* : NIL

640 :   %290 = load i32* %289, !mcsema_real_eip !26 :          <48>	movslq	-4(%rbp), %rdx
641 :   %291 = sext i32 %290 to i64, !mcsema_real_eip !26 :          <48>	movslq	-4(%rbp), %rdx

642 :   %292 = mul i64 %291, 11, !mcsema_real_eip !27 :          <4c>	imulq	 $11, %rdx
643 :   store i64 %292, i64* %RDX_val, !mcsema_real_eip !27 :          <4c>	imulq	 $11, %rdx

644 :   %293 = load i64* %RAX_val, !mcsema_real_eip !28 :          <53>	addq	%rdx, %rax

645 :   %uadd = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %292, i64 %293) : NIL
646 :   %294 = extractvalue { i64, i1 } %uadd, 0 : NIL

647 :   %295 = xor i64 %294, %293, !mcsema_real_eip !28 :          <53>	addq	%rdx, %rax
648 :   %296 = xor i64 %295, %292, !mcsema_real_eip !28 :          <53>	addq	%rdx, %rax
649 :   %297 = and i64 %296, 16, !mcsema_real_eip !28 :          <53>	addq	%rdx, %rax
650 :   %298 = icmp ne i64 %297, 0, !mcsema_real_eip !28 :          <53>	addq	%rdx, %rax
651 :   store i1 %298, i1* %AF_val, !mcsema_real_eip !28 :          <53>	addq	%rdx, %rax

652 :   %299 = icmp slt i64 %294, 0 : NIL

653 :   store i1 %299, i1* %SF_val, !mcsema_real_eip !28 :          <53>	addq	%rdx, %rax
654 :   %300 = icmp eq i64 %294, 0, !mcsema_real_eip !28 :          <53>	addq	%rdx, %rax
655 :   store i1 %300, i1* %ZF_val, !mcsema_real_eip !28 :          <53>	addq	%rdx, %rax
656 :   %301 = xor i64 %293, -9223372036854775808, !mcsema_real_eip !28 :          <53>	addq	%rdx, %rax
657 :   %302 = xor i64 %301, %292, !mcsema_real_eip !28 :          <53>	addq	%rdx, %rax
658 :   %303 = and i64 %295, %302, !mcsema_real_eip !28 :          <53>	addq	%rdx, %rax

659 :   %304 = icmp slt i64 %303, 0 : NIL

660 :   store i1 %304, i1* %OF_val, !mcsema_real_eip !28 :          <53>	addq	%rdx, %rax
661 :   %305 = trunc i64 %294 to i8, !mcsema_real_eip !28 :          <53>	addq	%rdx, %rax
662 :   %306 = tail call i8 @llvm.ctpop.i8(i8 %305), !mcsema_real_eip !28 :          <53>	addq	%rdx, %rax

663 :   %307 = and i8 %306, 1 : NIL
664 :   %308 = icmp eq i8 %307, 0 : NIL

665 :   store i1 %308, i1* %PF_val, !mcsema_real_eip !28 :          <53>	addq	%rdx, %rax

666 :   %309 = extractvalue { i64, i1 } %uadd, 1 : NIL

667 :   store i1 %309, i1* %CF_val, !mcsema_real_eip !28 :          <53>	addq	%rdx, %rax
668 :   store i64 %294, i64* %RAX_val, !mcsema_real_eip !28 :          <53>	addq	%rdx, %rax

669 :   %310 = load i64* %RCX_val, !mcsema_real_eip !29 :          <56>	movsbl	(%rax,%rcx), %esi
670 :   %311 = add i64 %310, %294, !mcsema_real_eip !29 :          <56>	movsbl	(%rax,%rcx), %esi
671 :   %312 = inttoptr i64 %311 to i64*, !mcsema_real_eip !29 :          <56>	movsbl	(%rax,%rcx), %esi

672 :   %313 = bitcast i64* %312 to i8* : NIL

673 :   %314 = load i8* %313, !mcsema_real_eip !29 :          <56>	movsbl	(%rax,%rcx), %esi
674 :   %315 = sext i8 %314 to i32, !mcsema_real_eip !29 :          <56>	movsbl	(%rax,%rcx), %esi
675 :   %316 = zext i32 %315 to i64, !mcsema_real_eip !29 :          <56>	movsbl	(%rax,%rcx), %esi
676 :   store i64 %316, i64* %RSI_val, !mcsema_real_eip !29 :          <56>	movsbl	(%rax,%rcx), %esi

677 :   %317 = load i64* %RDI_val, !mcsema_real_eip !30 :          <5c>	callq	0
678 :   %318 = tail call x86_64_sysvcc i64 @printf(i64 %317), !mcsema_real_eip !30 :          <5c>	callq	0
679 :   store i64 %318, i64* %RAX_val, !mcsema_real_eip !30 :          <5c>	callq	0

680 :   %319 = load i64* %RBP_val, !mcsema_real_eip !31 :          <61>	movl	%eax, -12(%rbp)
681 :   %320 = add i64 %319, -12, !mcsema_real_eip !31 :          <61>	movl	%eax, -12(%rbp)
682 :   %321 = inttoptr i64 %320 to i64*, !mcsema_real_eip !31 :          <61>	movl	%eax, -12(%rbp)
683 :   %322 = trunc i64 %318 to i32, !mcsema_real_eip !31 :          <61>	movl	%eax, -12(%rbp)

684 :   %323 = bitcast i64* %321 to i32* : NIL

685 :   store i32 %322, i32* %323, !mcsema_real_eip !31 :          <61>	movl	%eax, -12(%rbp)

686 :   %324 = load i64* %RBP_val, !mcsema_real_eip !32 :          <64>	movl	-8(%rbp), %eax
687 :   %325 = add i64 %324, -8, !mcsema_real_eip !32 :          <64>	movl	-8(%rbp), %eax
688 :   %326 = inttoptr i64 %325 to i64*, !mcsema_real_eip !32 :          <64>	movl	-8(%rbp), %eax

689 :   %327 = bitcast i64* %326 to i32* : NIL

690 :   %328 = load i32* %327, !mcsema_real_eip !32 :          <64>	movl	-8(%rbp), %eax

691 :   %uadd71 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %328, i32 1) : NIL
692 :   %329 = extractvalue { i32, i1 } %uadd71, 0 : NIL

693 :   %330 = xor i32 %329, %328, !mcsema_real_eip !33 :          <67>	addl	$1, %eax
694 :   %331 = and i32 %330, 16, !mcsema_real_eip !33 :          <67>	addl	$1, %eax
695 :   %332 = icmp ne i32 %331, 0, !mcsema_real_eip !33 :          <67>	addl	$1, %eax
696 :   store i1 %332, i1* %AF_val, !mcsema_real_eip !33 :          <67>	addl	$1, %eax

697 :   %333 = icmp slt i32 %329, 0 : NIL

698 :   store i1 %333, i1* %SF_val, !mcsema_real_eip !33 :          <67>	addl	$1, %eax
699 :   %334 = icmp eq i32 %329, 0, !mcsema_real_eip !33 :          <67>	addl	$1, %eax
700 :   store i1 %334, i1* %ZF_val, !mcsema_real_eip !33 :          <67>	addl	$1, %eax
701 :   %335 = xor i32 %328, -2147483648, !mcsema_real_eip !33 :          <67>	addl	$1, %eax
702 :   %336 = and i32 %330, %335, !mcsema_real_eip !33 :          <67>	addl	$1, %eax

703 :   %337 = icmp slt i32 %336, 0 : NIL

704 :   store i1 %337, i1* %OF_val, !mcsema_real_eip !33 :          <67>	addl	$1, %eax
705 :   %338 = trunc i32 %329 to i8, !mcsema_real_eip !33 :          <67>	addl	$1, %eax
706 :   %339 = tail call i8 @llvm.ctpop.i8(i8 %338), !mcsema_real_eip !33 :          <67>	addl	$1, %eax

707 :   %340 = and i8 %339, 1 : NIL
708 :   %341 = icmp eq i8 %340, 0 : NIL

709 :   store i1 %341, i1* %PF_val, !mcsema_real_eip !33 :          <67>	addl	$1, %eax

710 :   %342 = extractvalue { i32, i1 } %uadd71, 1 : NIL

711 :   store i1 %342, i1* %CF_val, !mcsema_real_eip !33 :          <67>	addl	$1, %eax
712 :   %343 = zext i32 %329 to i64, !mcsema_real_eip !33 :          <67>	addl	$1, %eax
713 :   store i64 %343, i64* %RAX_val, !mcsema_real_eip !33 :          <67>	addl	$1, %eax

714 :   %344 = load i64* %RBP_val, !mcsema_real_eip !34 :          <6c>	movl	%eax, -8(%rbp)
715 :   %345 = add i64 %344, -8, !mcsema_real_eip !34 :          <6c>	movl	%eax, -8(%rbp)
716 :   %346 = inttoptr i64 %345 to i64*, !mcsema_real_eip !34 :          <6c>	movl	%eax, -8(%rbp)

717 :   %347 = bitcast i64* %346 to i32* : NIL

718 :   store i32 %329, i32* %347, !mcsema_real_eip !34 :          <6c>	movl	%eax, -8(%rbp)

719 :   %348 = load i64* %RBP_val, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
720 :   %349 = add i64 %348, -8, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
721 :   %350 = inttoptr i64 %349 to i64*, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)

722 :   %351 = bitcast i64* %350 to i32* : NIL

723 :   %352 = load i32* %351, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)

724 :   %353 = add i32 %352, -11 : NIL

725 :   %354 = xor i32 %353, %352, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
726 :   %355 = and i32 %354, 16, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
727 :   %356 = icmp ne i32 %355, 0, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
728 :   store i1 %356, i1* %AF_val, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
729 :   %357 = trunc i32 %353 to i8, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
730 :   %358 = tail call i8 @llvm.ctpop.i8(i8 %357), !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)

731 :   %359 = and i8 %358, 1 : NIL
732 :   %360 = icmp eq i8 %359, 0 : NIL

733 :   store i1 %360, i1* %PF_val, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
734 :   %361 = icmp eq i32 %353, 0, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
735 :   store i1 %361, i1* %ZF_val, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)

736 :   %362 = icmp slt i32 %353, 0 : NIL

737 :   store i1 %362, i1* %SF_val, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
738 :   %363 = icmp ult i32 %352, 11, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
739 :   store i1 %363, i1* %CF_val, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)
740 :   %364 = and i32 %354, %352, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)

741 :   %365 = icmp slt i32 %364, 0 : NIL

742 :   store i1 %365, i1* %OF_val, !mcsema_real_eip !15 :          <23>	cmpl	$11, -8(%rbp)

743 :   %tmp72 = xor i1 %362, %365 : NIL

744 :   br i1 %tmp72, label %block_0x30, label %block_0x74.loopexit, !mcsema_real_eip !16 :          <2a>	jge	68
========================================================
Source line mapping for function: mcsema_main
========================================================

1 :   tail call x86_64_sysvcc void @sub_c0(%struct.regs* %0) : NIL
2 :   ret void : NIL
