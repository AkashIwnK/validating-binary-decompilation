Importing: Source(/home/sdasgup3/Github/validating-binary-decompilation/single_instruction_translation_validation/tests/addq_r64_r64/././test-xspec.k)
Importing: Source(/home/sdasgup3/Github/validating-binary-decompilation/single_instruction_translation_validation/tests/addq_r64_r64/test-xspec.k)
Parse spec modules [1/9 rules]                               =  0.010s
StateLog: /home/sdasgup3/Github/X86-64-semantics/semantics/x86-semantics-kompiled/stateLog/prove-2044796696.log

Parsing finished:   67.633 s
Pre-processing rule:
rule too long...
	Source: /home/sdasgup3/Github/validating-binary-decompilation/single_instruction_translation_validation/tests/addq_r64_r64/test-xspec.k Location(6,5,93,61)
==================================

Initialization finished
==================================
Stats for each phase, time, used memory, implicit main GC time percentage:
Total                 :   67.860 s,	  860 MB, gc:  2.349 %
  Parsing             :   67.633 s,	  734 MB, gc:  2.357 %
  Init                :    0.227 s,	  860 MB, gc:  0.000 %

Init+Execution time:       0.227 s

  Time and top-level event counts:
  resolveFunctionAndAnywhere time  :    0.028 s,      #        403
    evaluateFunction time            :    0.019 s,      #        152
      builtin evaluation               :           ,      #        140
      no function rules                :           ,      #         12
    applyAnywhereRules time          :    0.000 s,      #         91
      no anywhere rules                :           ,      #         91
    remaining time & # cached        :    0.010 s,      #        160

  Recursive event counts:
  resolveFunctionAndAnywhere time  :           ,      #         34
    evaluateFunction time            :           ,      #          0
      builtin evaluation               :           ,      #          0
      no function rules                :           ,      #          0
    applyAnywhereRules time          :           ,      #          0
      no anywhere rules                :           ,      #          0
    # cached                         :           ,      #         34
==================================


Initial term
=====================

<generatedTop>
  <k>
    fetchNoDBG
  </k>
  <functargets>
    _start |-> ptr ( symloc ( -1 , 0 , 0 , 0 , 0 ) , 64'0 )
  </functargets>
  <rotargets>
    .Map
  </rotargets>
  <datatargets>
    .Map
  </datatargets>
  <bsstargets>
    .Map
  </bsstargets>
  <entrypoint>
    .
  </entrypoint>
  <nextLocPc>
    V0
  </nextLocPc>
  <lastseenlabel>
    .
  </lastseenlabel>
  <currentsection>
    "text"
  </currentsection>
  <memstate>
    <text>
      code ( ptr ( symloc ( -1 , 0 , 0 , 0 , 0 ) , 64'0 ) |-> storedInstr ( addq %rbx , %rax , .Operands )
      ptr ( symloc ( -1 , 0 , 0 , 0 , 0 ) , 64'1 ) |-> storedInstr ( ret .Operands ) )
    </text>
    <stack>
      <memory>
        <nextLoc>
          1
        </nextLoc>
        <objects>
          mem ( symloc ( 1 , 128 , 1024 , 8 , 1000 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1001 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1002 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1003 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1004 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1005 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1006 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1007 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1008 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1009 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1010 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1011 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1012 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1013 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1014 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1015 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1016 ) |-> byte ( 0 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1017 ) |-> byte ( 1 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1018 ) |-> byte ( 2 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1019 ) |-> byte ( 3 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1020 ) |-> byte ( 4 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1021 ) |-> byte ( 5 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1022 ) |-> byte ( 6 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1023 ) |-> byte ( 7 , 64'-1 ) )
        </objects>
        <freed>
          .Set
        </freed>
      </memory>
      <stackbase>
        stackBaseInfo ( symloc ( 1 , 128 , 1024 , 8 , 0 ) , 64'1016 )
      </stackbase>
      <robase>
        roBaseInfo ( . , . , . )
      </robase>
      <database>
        dataBaseInfo ( . , . , . )
      </database>
      <bssbase>
        bssBaseInfo ( . , . , . )
      </bssbase>
    </stack>
  </memstate>
  <environment>
    <argc>
      .
    </argc>
    <argv>
      .
    </argv>
  </environment>
  <regstate>
    "AF" |-> V1
    "CF" |-> V2
    "OF" |-> V3
    "PF" |-> V4
    "RAX" |-> mi ( 64 , V5 )
    "RBP" |-> ptr ( symloc ( 1 , 128 , 1024 , 8 , 0 ) , 64'1016 )
    "RBX" |-> mi ( 64 , V6 )
    "RIP" |-> ptr ( symloc ( -1 , 0 , 0 , 0 , 0 ) , 64'0 )
    "RSP" |-> ptr ( symloc ( 1 , 128 , 1024 , 8 , 0 ) , 64'1016 )
    "SF" |-> V7
    "ZF" |-> V8
  </regstate>
  V9
  V10
  V11
  V12
  V13
</generatedTop>
/\
  V0 <Int 18446744073709551616 ==K true
#And
  V0 >=Int 0 ==K true
#And
  V1 <Int 18446744073709551616 ==K true
#And
  V1 >=Int 0 ==K true


Target term
=====================

<generatedTop>
  <k>
    exit_0
  </k>
  <functargets>
    _start |-> ptr ( symloc ( -1 , 0 , 0 , 0 , 0 ) , 64'0 )
  </functargets>
  <rotargets>
    .Map
  </rotargets>
  <datatargets>
    .Map
  </datatargets>
  <bsstargets>
    .Map
  </bsstargets>
  <entrypoint>
    .
  </entrypoint>
  <nextLocPc>
    V0
  </nextLocPc>
  <lastseenlabel>
    .
  </lastseenlabel>
  <currentsection>
    "text"
  </currentsection>
  <memstate>
    <text>
      code ( ptr ( symloc ( -1 , 0 , 0 , 0 , 0 ) , 64'0 ) |-> storedInstr ( addq %rbx , %rax , .Operands )
      ptr ( symloc ( -1 , 0 , 0 , 0 , 0 ) , 64'1 ) |-> storedInstr ( ret .Operands ) )
    </text>
    <stack>
      <memory>
        <nextLoc>
          1
        </nextLoc>
        <objects>
          mem ( symloc ( 1 , 128 , 1024 , 8 , 1000 ) |-> V1
          symloc ( 1 , 128 , 1024 , 8 , 1001 ) |-> V2
          symloc ( 1 , 128 , 1024 , 8 , 1002 ) |-> V3
          symloc ( 1 , 128 , 1024 , 8 , 1003 ) |-> V4
          symloc ( 1 , 128 , 1024 , 8 , 1004 ) |-> V5
          symloc ( 1 , 128 , 1024 , 8 , 1005 ) |-> V6
          symloc ( 1 , 128 , 1024 , 8 , 1006 ) |-> V7
          symloc ( 1 , 128 , 1024 , 8 , 1007 ) |-> V8
          symloc ( 1 , 128 , 1024 , 8 , 1008 ) |-> V9
          symloc ( 1 , 128 , 1024 , 8 , 1009 ) |-> V10
          symloc ( 1 , 128 , 1024 , 8 , 1010 ) |-> V11
          symloc ( 1 , 128 , 1024 , 8 , 1011 ) |-> V12
          symloc ( 1 , 128 , 1024 , 8 , 1012 ) |-> V13
          symloc ( 1 , 128 , 1024 , 8 , 1013 ) |-> V14
          symloc ( 1 , 128 , 1024 , 8 , 1014 ) |-> V15
          symloc ( 1 , 128 , 1024 , 8 , 1015 ) |-> V16
          symloc ( 1 , 128 , 1024 , 8 , 1016 ) |-> byte ( 0 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1017 ) |-> byte ( 1 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1018 ) |-> byte ( 2 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1019 ) |-> byte ( 3 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1020 ) |-> byte ( 4 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1021 ) |-> byte ( 5 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1022 ) |-> byte ( 6 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1023 ) |-> byte ( 7 , 64'-1 ) )
        </objects>
        <freed>
          .Set
        </freed>
      </memory>
      <stackbase>
        stackBaseInfo ( symloc ( 1 , 128 , 1024 , 8 , 0 ) , 64'1016 )
      </stackbase>
      <robase>
        roBaseInfo ( . , . , . )
      </robase>
      <database>
        dataBaseInfo ( . , . , . )
      </database>
      <bssbase>
        bssBaseInfo ( . , . , . )
      </bssbase>
    </stack>
  </memstate>
  <environment>
    <argc>
      .
    </argc>
    <argv>
      .
    </argv>
  </environment>
  <regstate>
    "AF" |-> V17
    "CF" |-> V18
    "OF" |-> V19
    "PF" |-> V20
    "RAX" |-> mi ( 64 , V21 )
    "RBP" |-> ptr ( symloc ( 1 , 128 , 1024 , 8 , 0 ) , 64'1016 )
    "RBX" |-> mi ( 64 , V22 )
    "RIP" |-> 64'18446744073709551615
    "RSP" |-> ptr ( symloc ( 1 , 128 , 1024 , 8 , 0 ) , 64'1024 )
    "SF" |-> V23
    "ZF" |-> V24
  </regstate>
  V25
  V26
  V27
  V28
  V29
</generatedTop>
/\
#True


STEP 1 v1 :    2.019 s, 		 1007 MB, gc:  0.000 %
===================
<memory>
  <nextLoc>
    1
  </nextLoc>
  <objects>
    mem ( symloc ( 1 , 128 , 1024 , 8 , 1000 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1001 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1002 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1003 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1004 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1005 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1006 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1007 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1008 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1009 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1010 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1011 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1012 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1013 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1014 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1015 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1016 ) |-> byte ( 0 , 64'-1 )
    symloc ( 1 , 128 , 1024 , 8 , 1017 ) |-> byte ( 1 , 64'-1 )
    symloc ( 1 , 128 , 1024 , 8 , 1018 ) |-> byte ( 2 , 64'-1 )
    symloc ( 1 , 128 , 1024 , 8 , 1019 ) |-> byte ( 3 , 64'-1 )
    symloc ( 1 , 128 , 1024 , 8 , 1020 ) |-> byte ( 4 , 64'-1 )
    symloc ( 1 , 128 , 1024 , 8 , 1021 ) |-> byte ( 5 , 64'-1 )
    symloc ( 1 , 128 , 1024 , 8 , 1022 ) |-> byte ( 6 , 64'-1 )
    symloc ( 1 , 128 , 1024 , 8 , 1023 ) |-> byte ( 7 , 64'-1 ) )
  </objects>
  <freed>
    .Set
  </freed>
</memory>

STEP 14 v1 :    2.586 s, 		  706 MB, gc:  0.000 %
===================
<memory>
  <nextLoc>
    1
  </nextLoc>
  <objects>
    mem ( symloc ( 1 , 128 , 1024 , 8 , 1000 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1001 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1002 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1003 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1004 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1005 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1006 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1007 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1008 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1009 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1010 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1011 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1012 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1013 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1014 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1015 ) |-> byte ( 0 , undefMInt )
    symloc ( 1 , 128 , 1024 , 8 , 1016 ) |-> byte ( 0 , 64'-1 )
    symloc ( 1 , 128 , 1024 , 8 , 1017 ) |-> byte ( 1 , 64'-1 )
    symloc ( 1 , 128 , 1024 , 8 , 1018 ) |-> byte ( 2 , 64'-1 )
    symloc ( 1 , 128 , 1024 , 8 , 1019 ) |-> byte ( 3 , 64'-1 )
    symloc ( 1 , 128 , 1024 , 8 , 1020 ) |-> byte ( 4 , 64'-1 )
    symloc ( 1 , 128 , 1024 , 8 , 1021 ) |-> byte ( 5 , 64'-1 )
    symloc ( 1 , 128 , 1024 , 8 , 1022 ) |-> byte ( 6 , 64'-1 )
    symloc ( 1 , 128 , 1024 , 8 , 1023 ) |-> byte ( 7 , 64'-1 ) )
  </objects>
  <freed>
    .Set
  </freed>
</memory>

Step above: 14, evaluation ended with no successors.

SPEC FAILED: /home/sdasgup3/Github/validating-binary-decompilation/single_instruction_translation_validation/tests/addq_r64_r64/test-xspec.k Location(6,5,93,61)
==================================
Success execution paths: 0
Failed execution paths: 1
Longest path: 14 steps
Stats for each phase, time, used memory, implicit main GC time percentage:
Total                 :   70.866 s,	 1118 MB, gc:  2.249 %
  Parsing             :   67.633 s,	  734 MB, gc:  2.357 %
  Init                :    0.227 s,	  860 MB, gc:  0.000 %
  Execution           :    3.006 s,	 1118 MB, gc:  0.000 %

Init+Execution time:       3.233 s
  query build time                 :    0.003 s,      #          7

  Time and top-level event counts:
  resolveFunctionAndAnywhere time  :    0.074 s,      #        935
    evaluateFunction time            :    0.061 s,      #        340
      builtin evaluation               :           ,      #        188
      function rule                    :           ,      #         25
      sort predicate                   :           ,      #          2
      no rule applicable               :           ,      #         84
      no function rules                :           ,      #         41
    applyAnywhereRules time          :    0.000 s,      #        144
      no anywhere rules                :           ,      #        144
    remaining time & # cached        :    0.013 s,      #        451
  log time                         :    0.888 s,      #         15
  impliesSMT time                  :    0.003 s,      #          7

  Recursive event counts:
  resolveFunctionAndAnywhere time  :           ,      #       1987
    evaluateFunction time            :           ,      #        247
      builtin evaluation               :           ,      #        138
      function rule                    :           ,      #         86
      sort predicate                   :           ,      #          0
      no rule applicable               :           ,      #         13
      no function rules                :           ,      #          9
    applyAnywhereRules time          :           ,      #         19
      no anywhere rules                :           ,      #         19
    # cached                         :           ,      #       1721

Max memory : 7282 MB
==================================

<generatedTop>
  <k>
    exit_0
  </k>
  <functargets>
    _start |-> ptr ( symloc ( -1 , 0 , 0 , 0 , 0 ) , 64'0 )
  </functargets>
  <rotargets>
    .Map
  </rotargets>
  <datatargets>
    .Map
  </datatargets>
  <bsstargets>
    .Map
  </bsstargets>
  <entrypoint>
    .
  </entrypoint>
  <nextLocPc>
    V0
  </nextLocPc>
  <lastseenlabel>
    .
  </lastseenlabel>
  <currentsection>
    "text"
  </currentsection>
  <memstate>
    <text>
      code ( ptr ( symloc ( -1 , 0 , 0 , 0 , 0 ) , 64'0 ) |-> storedInstr ( addq %rbx , %rax , .Operands )
      ptr ( symloc ( -1 , 0 , 0 , 0 , 0 ) , 64'1 ) |-> storedInstr ( ret .Operands ) )
    </text>
    <stack>
      <memory>
        <nextLoc>
          1
        </nextLoc>
        <objects>
          mem ( symloc ( 1 , 128 , 1024 , 8 , 1000 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1001 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1002 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1003 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1004 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1005 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1006 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1007 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1008 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1009 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1010 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1011 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1012 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1013 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1014 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1015 ) |-> byte ( 0 , undefMInt )
          symloc ( 1 , 128 , 1024 , 8 , 1016 ) |-> byte ( 0 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1017 ) |-> byte ( 1 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1018 ) |-> byte ( 2 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1019 ) |-> byte ( 3 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1020 ) |-> byte ( 4 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1021 ) |-> byte ( 5 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1022 ) |-> byte ( 6 , 64'-1 )
          symloc ( 1 , 128 , 1024 , 8 , 1023 ) |-> byte ( 7 , 64'-1 ) )
        </objects>
        <freed>
          .Set
        </freed>
      </memory>
      <stackbase>
        stackBaseInfo ( symloc ( 1 , 128 , 1024 , 8 , 0 ) , 64'1016 )
      </stackbase>
      <robase>
        roBaseInfo ( . , . , . )
      </robase>
      <database>
        dataBaseInfo ( . , . , . )
      </database>
      <bssbase>
        bssBaseInfo ( . , . , . )
      </bssbase>
    </stack>
  </memstate>
  <environment>
    <argc>
      .
    </argc>
    <argv>
      .
    </argv>
  </environment>
  <regstate>
    "AF" |-> xorMInt ( xorMInt ( extractMInt ( mi ( 64 , V1 ) , 59 , 60 ) , extractMInt ( mi ( 64 , V2 ) , 59 , 60 ) ) , extractMInt ( addMInt ( concatenateMInt ( 1'0 , mi ( 64 , V1 ) ) , concatenateMInt ( 1'0 , mi ( 64 , V2 ) ) ) , 60 , 61 ) )
    "CF" |-> extractMInt ( addMInt ( concatenateMInt ( 1'0 , mi ( 64 , V1 ) ) , concatenateMInt ( 1'0 , mi ( 64 , V2 ) ) ) , 0 , 1 )
    "OF" |-> #ifMInt eqMInt ( extractMInt ( mi ( 64 , V1 ) , 0 , 1 ) , 1'1 ) ==K eqMInt ( extractMInt ( mi ( 64 , V2 ) , 0 , 1 ) , 1'1 ) andBool notBool eqMInt ( extractMInt ( mi ( 64 , V1 ) , 0 , 1 ) , 1'1 ) ==K eqMInt ( extractMInt ( addMInt ( concatenateMInt ( 1'0 , mi ( 64 , V1 ) ) , concatenateMInt ( 1'0 , mi ( 64 , V2 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi
    "PF" |-> #ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( extractMInt ( addMInt ( concatenateMInt ( 1'0 , mi ( 64 , V1 ) ) , concatenateMInt ( 1'0 , mi ( 64 , V2 ) ) ) , 64 , 65 ) , 1'1 ) ==K eqMInt ( extractMInt ( addMInt ( concatenateMInt ( 1'0 , mi ( 64 , V1 ) ) , concatenateMInt ( 1'0 , mi ( 64 , V2 ) ) ) , 63 , 64 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( concatenateMInt ( 1'0 , mi ( 64 , V1 ) ) , concatenateMInt ( 1'0 , mi ( 64 , V2 ) ) ) , 62 , 63 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( concatenateMInt ( 1'0 , mi ( 64 , V1 ) ) , concatenateMInt ( 1'0 , mi ( 64 , V2 ) ) ) , 61 , 62 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( concatenateMInt ( 1'0 , mi ( 64 , V1 ) ) , concatenateMInt ( 1'0 , mi ( 64 , V2 ) ) ) , 60 , 61 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( concatenateMInt ( 1'0 , mi ( 64 , V1 ) ) , concatenateMInt ( 1'0 , mi ( 64 , V2 ) ) ) , 59 , 60 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( concatenateMInt ( 1'0 , mi ( 64 , V1 ) ) , concatenateMInt ( 1'0 , mi ( 64 , V2 ) ) ) , 58 , 59 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( concatenateMInt ( 1'0 , mi ( 64 , V1 ) ) , concatenateMInt ( 1'0 , mi ( 64 , V2 ) ) ) , 57 , 58 ) , 1'1 ) #then 1'1 #else 1'0 #fi
    "RAX" |-> extractMInt ( addMInt ( concatenateMInt ( 1'0 , mi ( 64 , V1 ) ) , concatenateMInt ( 1'0 , mi ( 64 , V2 ) ) ) , 1 , 65 )
    "RBP" |-> ptr ( symloc ( 1 , 128 , 1024 , 8 , 0 ) , 64'1016 )
    "RBX" |-> mi ( 64 , V1 )
    "RIP" |-> 64'18446744073709551615
    "RSP" |-> ptr ( symloc ( 1 , 128 , 1024 , 8 , 0 ) , 64'1024 )
    "SF" |-> extractMInt ( addMInt ( concatenateMInt ( 1'0 , mi ( 64 , V1 ) ) , concatenateMInt ( 1'0 , mi ( 64 , V2 ) ) ) , 1 , 2 )
    "ZF" |-> #ifMInt eqMInt ( extractMInt ( addMInt ( concatenateMInt ( 1'0 , mi ( 64 , V1 ) ) , concatenateMInt ( 1'0 , mi ( 64 , V2 ) ) ) , 1 , 65 ) , 64'0 ) #then 1'1 #else 1'0 #fi
  </regstate>
  V3
  V4
  V5
  V6
  V7
</generatedTop>
[Warning] Internal: execution phase: missing SMTLib translation for mi . Please
re-run with the --debug-z3 flag. Search the logs starting with 'Z3 warning' to
see the Z3 implication that generated the warning. (missing SMTLib translation
for mi)
