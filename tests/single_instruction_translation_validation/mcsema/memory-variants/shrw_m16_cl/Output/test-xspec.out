Importing: Source(/home/ubuntu/Github/validating-binary-decompilation/tests/single_instruction_translation_validation/mcsema/memory-variants/shrw_m16_cl/././test-xspec.k)
Importing: Source(/home/ubuntu/Github/validating-binary-decompilation/tests/single_instruction_translation_validation/mcsema/memory-variants/shrw_m16_cl/test-xspec.k)
Parse spec modules [1/9 rules]                               =  0.021s
StateLog: /home/ubuntu/Github/X86-64-semantics/semantics/x86-semantics-kompiled/stateLog/prove-2044796696.log

Parsing finished:  632.478 s
Pre-processing rule:
rule too long...
	Source: /home/ubuntu/Github/validating-binary-decompilation/tests/single_instruction_translation_validation/mcsema/memory-variants/shrw_m16_cl/test-xspec.k Location(6,5,100,69)
==================================

Initialization finished
==================================
Stats for each phase, time, used memory, implicit main GC time percentage:
Total                 :  633.114 s,	 8929 MB, gc:  1.861 %
  Parsing             :  632.478 s,	 8769 MB, gc:  1.863 %
  Init                :    0.636 s,	 8929 MB, gc:  0.000 %

Init+Execution time:       0.636 s

  Time and top-level event counts:
  resolveFunctionAndAnywhere time  :    0.102 s,      #        402
    evaluateFunction time            :    0.080 s,      #        202
      builtin evaluation               :           ,      #        109
      function rule                    :           ,      #         12
      no rule applicable               :           ,      #         41
      no function rules                :           ,      #         40
    applyAnywhereRules time          :    0.001 s,      #         78
      no anywhere rules                :           ,      #         78
    remaining time & # cached        :    0.021 s,      #        122

  Recursive event counts:
  resolveFunctionAndAnywhere time  :           ,      #        290
    evaluateFunction time            :           ,      #         12
      builtin evaluation               :           ,      #          0
      function rule                    :           ,      #          0
      no rule applicable               :           ,      #          0
      no function rules                :           ,      #         12
    applyAnywhereRules time          :           ,      #          0
      no anywhere rules                :           ,      #          0
    # cached                         :           ,      #        278
==================================


Initial term
=====================

`<generatedTop>`(`<k>`(#token("fetchNoDBG","KItem")),`<functargets>`(`_|->_`(#token("_start","X86Id"),ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'0","MInt")))),`<rotargets>`(`.Map`(.KList)),`<datatargets>`(`.Map`(.KList)),`<bsstargets>`(`.Map`(.KList)),`<entrypoint>`(#EmptyK(.KList)),`<nextLocPc>`(_0),`<lastseenlabel>`(#EmptyK(.KList)),`<currentsection>`(#token("\"text\"","String")),`<memstate>`(`<text>`(code(`_Map_`(`_|->_`(ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'0","MInt")),storedInstr(`___X86-SYNTAX`(`shrw_X86-SYNTAX`(.KList),operandlist(`%cl_X86-SYNTAX`(.KList),operandlist(`_(_)_X86-SYNTAX`(#token("-32","Int"),`%rbp_X86-SYNTAX`(.KList)),`.List{"operandlist"}`(.KList)))))),`_|->_`(ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'1","MInt")),storedInstr(`___X86-SYNTAX`(`ret_X86-SYNTAX`(.KList),`.List{"operandlist"}`(.KList))))))),`<stack>`(`<memory>`(`<nextLoc>`(#token("1","Int")),`<objects>`(mem(`_Map_`(`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1000","Int")),byte(#token("0","Int"),mi(#token("16","Int"),VX_MEM_16))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1001","Int")),byte(#token("1","Int"),mi(#token("16","Int"),VX_MEM_16))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1032","Int")),byte(#token("0","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1033","Int")),byte(#token("1","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1034","Int")),byte(#token("2","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1035","Int")),byte(#token("3","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1036","Int")),byte(#token("4","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1037","Int")),byte(#token("5","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1038","Int")),byte(#token("6","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1039","Int")),byte(#token("7","Int"),#token("64'-1","MInt")))))),`<freed>`(`.Set`(.KList))),`<stackbase>`(stackBaseInfo(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("0","Int")),#token("64'1032","MInt"))),`<robase>`(roBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))),`<database>`(dataBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))),`<bssbase>`(bssBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))))),`<environment>`(`<argc>`(#EmptyK(.KList)),`<argv>`(#EmptyK(.KList))),`<regstate>`(`_Map_`(`_|->_`(#token("\"AF\"","String"),mi(#token("1","Int"),VX_AF)),`_|->_`(#token("\"CF\"","String"),mi(#token("1","Int"),VX_CF)),`_|->_`(#token("\"OF\"","String"),mi(#token("1","Int"),VX_OF)),`_|->_`(#token("\"PF\"","String"),mi(#token("1","Int"),VX_PF)),`_|->_`(#token("\"RAX\"","String"),mi(#token("64","Int"),VX_RAX)),`_|->_`(#token("\"RBP\"","String"),ptr(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("0","Int")),#token("64'1032","MInt"))),`_|->_`(#token("\"RBX\"","String"),mi(#token("64","Int"),VX_RBX)),`_|->_`(#token("\"RCX\"","String"),mi(#token("64","Int"),VX_RCX)),`_|->_`(#token("\"RDI\"","String"),mi(#token("64","Int"),VX_RDI)),`_|->_`(#token("\"RDX\"","String"),mi(#token("64","Int"),VX_RDX)),`_|->_`(#token("\"RIP\"","String"),ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'0","MInt"))),`_|->_`(#token("\"RSI\"","String"),mi(#token("64","Int"),VX_RSI)),`_|->_`(#token("\"RSP\"","String"),ptr(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("0","Int")),#token("64'1032","MInt"))),`_|->_`(#token("\"SF\"","String"),mi(#token("1","Int"),VX_SF)),`_|->_`(#token("\"YMM1\"","String"),mi(#token("256","Int"),VX_YMM1)),`_|->_`(#token("\"YMM2\"","String"),mi(#token("256","Int"),VX_YMM2)),`_|->_`(#token("\"ZF\"","String"),mi(#token("1","Int"),VX_ZF)))),_17,_18,_19,_20,_21)
/\
#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(`_==K_`(`_orBool_`(`_==K_`(VX_AF,#token("0","Int")),`_==K_`(VX_AF,#token("1","Int"))),#token("true","Bool")),`_==K_`(`_orBool_`(`_==K_`(VX_CF,#token("0","Int")),`_==K_`(VX_CF,#token("1","Int"))),#token("true","Bool"))),`_==K_`(`_orBool_`(`_==K_`(VX_OF,#token("0","Int")),`_==K_`(VX_OF,#token("1","Int"))),#token("true","Bool"))),`_==K_`(`_orBool_`(`_==K_`(VX_PF,#token("0","Int")),`_==K_`(VX_PF,#token("1","Int"))),#token("true","Bool"))),`_==K_`(`_orBool_`(`_==K_`(VX_SF,#token("0","Int")),`_==K_`(VX_SF,#token("1","Int"))),#token("true","Bool"))),`_==K_`(`_orBool_`(`_==K_`(VX_ZF,#token("0","Int")),`_==K_`(VX_ZF,#token("1","Int"))),#token("true","Bool"))),`_==K_`(`_<Int_`(VX_MEM_16,#token("65536","Int")),#token("true","Bool"))),`_==K_`(`_>=Int_`(VX_MEM_16,#token("0","Int")),#token("true","Bool"))),`_==K_`(`_<Int_`(VX_RAX,#token("18446744073709551616","Int")),#token("true","Bool"))),`_==K_`(`_>=Int_`(VX_RAX,#token("0","Int")),#token("true","Bool"))),`_==K_`(`_<Int_`(VX_RBX,#token("18446744073709551616","Int")),#token("true","Bool"))),`_==K_`(`_>=Int_`(VX_RBX,#token("0","Int")),#token("true","Bool"))),`_==K_`(`_<Int_`(VX_RCX,#token("18446744073709551616","Int")),#token("true","Bool"))),`_==K_`(`_>=Int_`(VX_RCX,#token("0","Int")),#token("true","Bool"))),`_==K_`(`_<Int_`(VX_RDI,#token("18446744073709551616","Int")),#token("true","Bool"))),`_==K_`(`_>=Int_`(VX_RDI,#token("0","Int")),#token("true","Bool"))),`_==K_`(`_<Int_`(VX_RDX,#token("18446744073709551616","Int")),#token("true","Bool"))),`_==K_`(`_>=Int_`(VX_RDX,#token("0","Int")),#token("true","Bool"))),`_==K_`(`_<Int_`(VX_RSI,#token("18446744073709551616","Int")),#token("true","Bool"))),`_==K_`(`_>=Int_`(VX_RSI,#token("0","Int")),#token("true","Bool")))


Target term
=====================

`<generatedTop>`(`<k>`(`exit_0_X86-FETCH-EXECUTE`(.KList)),`<functargets>`(`_|->_`(#token("_start","X86Id"),ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'0","MInt")))),`<rotargets>`(`.Map`(.KList)),`<datatargets>`(`.Map`(.KList)),`<bsstargets>`(`.Map`(.KList)),`<entrypoint>`(#EmptyK(.KList)),`<nextLocPc>`(_0),`<lastseenlabel>`(#EmptyK(.KList)),`<currentsection>`(#token("\"text\"","String")),`<memstate>`(`<text>`(code(`_Map_`(`_|->_`(ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'0","MInt")),storedInstr(`___X86-SYNTAX`(`shrw_X86-SYNTAX`(.KList),operandlist(`%cl_X86-SYNTAX`(.KList),operandlist(`_(_)_X86-SYNTAX`(#token("-32","Int"),`%rbp_X86-SYNTAX`(.KList)),`.List{"operandlist"}`(.KList)))))),`_|->_`(ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'1","MInt")),storedInstr(`___X86-SYNTAX`(`ret_X86-SYNTAX`(.KList),`.List{"operandlist"}`(.KList))))))),`<stack>`(`<memory>`(`<nextLoc>`(#token("1","Int")),`<objects>`(mem(`_Map_`(`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1000","Int")),_15),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1001","Int")),_16),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1032","Int")),byte(#token("0","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1033","Int")),byte(#token("1","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1034","Int")),byte(#token("2","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1035","Int")),byte(#token("3","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1036","Int")),byte(#token("4","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1037","Int")),byte(#token("5","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1038","Int")),byte(#token("6","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1039","Int")),byte(#token("7","Int"),#token("64'-1","MInt")))))),`<freed>`(`.Set`(.KList))),`<stackbase>`(stackBaseInfo(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("0","Int")),#token("64'1032","MInt"))),`<robase>`(roBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))),`<database>`(dataBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))),`<bssbase>`(bssBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))))),`<environment>`(`<argc>`(#EmptyK(.KList)),`<argv>`(#EmptyK(.KList))),`<regstate>`(`_Map_`(`_|->_`(#token("\"AF\"","String"),mi(#token("1","Int"),_7)),`_|->_`(#token("\"CF\"","String"),mi(#token("1","Int"),_8)),`_|->_`(#token("\"OF\"","String"),mi(#token("1","Int"),_9)),`_|->_`(#token("\"PF\"","String"),mi(#token("1","Int"),_10)),`_|->_`(#token("\"RAX\"","String"),mi(#token("64","Int"),_1)),`_|->_`(#token("\"RBP\"","String"),ptr(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("0","Int")),#token("64'1032","MInt"))),`_|->_`(#token("\"RBX\"","String"),mi(#token("64","Int"),_2)),`_|->_`(#token("\"RCX\"","String"),mi(#token("64","Int"),_3)),`_|->_`(#token("\"RDI\"","String"),mi(#token("64","Int"),_6)),`_|->_`(#token("\"RDX\"","String"),mi(#token("64","Int"),_4)),`_|->_`(#token("\"RIP\"","String"),#token("64'18446744073709551615","MInt")),`_|->_`(#token("\"RSI\"","String"),mi(#token("64","Int"),_5)),`_|->_`(#token("\"RSP\"","String"),ptr(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("0","Int")),#token("64'1040","MInt"))),`_|->_`(#token("\"SF\"","String"),mi(#token("1","Int"),_11)),`_|->_`(#token("\"YMM1\"","String"),mi(#token("256","Int"),_13)),`_|->_`(#token("\"YMM2\"","String"),mi(#token("256","Int"),_14)),`_|->_`(#token("\"ZF\"","String"),mi(#token("1","Int"),_12)))),_17,_18,_19,_20,_21)
/\
#True(.KList)


STEP 1 v1 :    6.137 s, 		10193 MB, gc:  0.000 %
===================
`<memory>`(`<nextLoc>`(#token("1","Int")),`<objects>`(mem(`_Map_`(`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1000","Int")),byte(#token("0","Int"),mi(#token("16","Int"),VX_MEM_16))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1001","Int")),byte(#token("1","Int"),mi(#token("16","Int"),VX_MEM_16))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1032","Int")),byte(#token("0","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1033","Int")),byte(#token("1","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1034","Int")),byte(#token("2","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1035","Int")),byte(#token("3","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1036","Int")),byte(#token("4","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1037","Int")),byte(#token("5","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1038","Int")),byte(#token("6","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1039","Int")),byte(#token("7","Int"),#token("64'-1","MInt")))))),`<freed>`(`.Set`(.KList)))

STEP 25 v1 :    7.175 s, 		10849 MB, gc:  0.000 %
===================
`<memory>`(`<nextLoc>`(#token("1","Int")),`<objects>`(mem(`_Map_`(`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1000","Int")),byte(#token("0","Int"),extractMInt(lshrMInt(concatenateMInt(mi(#token("16","Int"),VX_MEM_16),#token("1'0","MInt")),uvalueMInt(concatenateMInt(#token("9'0","MInt"),andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt"))))),#token("0","Int"),#token("16","Int")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1001","Int")),byte(#token("1","Int"),extractMInt(lshrMInt(concatenateMInt(mi(#token("16","Int"),VX_MEM_16),#token("1'0","MInt")),uvalueMInt(concatenateMInt(#token("9'0","MInt"),andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt"))))),#token("0","Int"),#token("16","Int")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1032","Int")),byte(#token("0","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1033","Int")),byte(#token("1","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1034","Int")),byte(#token("2","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1035","Int")),byte(#token("3","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1036","Int")),byte(#token("4","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1037","Int")),byte(#token("5","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1038","Int")),byte(#token("6","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1039","Int")),byte(#token("7","Int"),#token("64'-1","MInt")))))),`<freed>`(`.Set`(.KList)))

Step above: 25, evaluation ended with no successors.

SPEC FAILED: /home/ubuntu/Github/validating-binary-decompilation/tests/single_instruction_translation_validation/mcsema/memory-variants/shrw_m16_cl/test-xspec.k Location(6,5,100,69)
==================================
Success execution paths: 0
Failed execution paths: 1
Longest path: 25 steps
Stats for each phase, time, used memory, implicit main GC time percentage:
Total                 :  640.887 s,	11217 MB, gc:  1.839 %
  Parsing             :  632.478 s,	 8769 MB, gc:  1.863 %
  Init                :    0.636 s,	 8929 MB, gc:  0.000 %
  Execution           :    7.773 s,	11217 MB, gc:  0.000 %

Init+Execution time:       8.409 s
  query build time                 :    0.011 s,      #         20

  Time and top-level event counts:
  resolveFunctionAndAnywhere time  :    0.265 s,      #       1815
    evaluateFunction time            :    0.232 s,      #        606
      builtin evaluation               :           ,      #        167
      function rule                    :           ,      #         54
      sort predicate                   :           ,      #          6
      no rule applicable               :           ,      #        281
      no function rules                :           ,      #         98
    applyAnywhereRules time          :    0.001 s,      #        201
      no anywhere rules                :           ,      #        201
    remaining time & # cached        :    0.032 s,      #       1008
  log time                         :    1.229 s,      #         26
  impliesSMT time                  :    0.013 s,      #         34

  Recursive event counts:
  resolveFunctionAndAnywhere time  :           ,      #       4052
    evaluateFunction time            :           ,      #        407
      builtin evaluation               :           ,      #        195
      function rule                    :           ,      #        156
      sort predicate                   :           ,      #          0
      no rule applicable               :           ,      #         25
      no function rules                :           ,      #         28
    applyAnywhereRules time          :           ,      #         30
      no anywhere rules                :           ,      #         30
    # cached                         :           ,      #       3615

Max memory : 262144 MB
==================================

`<generatedTop>`(`<k>`(`exit_0_X86-FETCH-EXECUTE`(.KList)),`<functargets>`(`_|->_`(#token("_start","X86Id"),ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'0","MInt")))),`<rotargets>`(`.Map`(.KList)),`<datatargets>`(`.Map`(.KList)),`<bsstargets>`(`.Map`(.KList)),`<entrypoint>`(#EmptyK(.KList)),`<nextLocPc>`(_0),`<lastseenlabel>`(#EmptyK(.KList)),`<currentsection>`(#token("\"text\"","String")),`<memstate>`(`<text>`(code(`_Map_`(`_|->_`(ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'0","MInt")),storedInstr(`___X86-SYNTAX`(`shrw_X86-SYNTAX`(.KList),operandlist(`%cl_X86-SYNTAX`(.KList),operandlist(`_(_)_X86-SYNTAX`(#token("-32","Int"),`%rbp_X86-SYNTAX`(.KList)),`.List{"operandlist"}`(.KList)))))),`_|->_`(ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'1","MInt")),storedInstr(`___X86-SYNTAX`(`ret_X86-SYNTAX`(.KList),`.List{"operandlist"}`(.KList))))))),`<stack>`(`<memory>`(`<nextLoc>`(#token("1","Int")),`<objects>`(mem(`_Map_`(`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1000","Int")),byte(#token("0","Int"),extractMInt(lshrMInt(concatenateMInt(mi(#token("16","Int"),VX_MEM_16),#token("1'0","MInt")),uvalueMInt(concatenateMInt(#token("9'0","MInt"),andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt"))))),#token("0","Int"),#token("16","Int")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1001","Int")),byte(#token("1","Int"),extractMInt(lshrMInt(concatenateMInt(mi(#token("16","Int"),VX_MEM_16),#token("1'0","MInt")),uvalueMInt(concatenateMInt(#token("9'0","MInt"),andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt"))))),#token("0","Int"),#token("16","Int")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1032","Int")),byte(#token("0","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1033","Int")),byte(#token("1","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1034","Int")),byte(#token("2","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1035","Int")),byte(#token("3","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1036","Int")),byte(#token("4","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1037","Int")),byte(#token("5","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1038","Int")),byte(#token("6","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("1039","Int")),byte(#token("7","Int"),#token("64'-1","MInt")))))),`<freed>`(`.Set`(.KList))),`<stackbase>`(stackBaseInfo(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("0","Int")),#token("64'1032","MInt"))),`<robase>`(roBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))),`<database>`(dataBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))),`<bssbase>`(bssBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))))),`<environment>`(`<argc>`(#EmptyK(.KList)),`<argv>`(#EmptyK(.KList))),`<regstate>`(`_Map_`(`_|->_`(#token("\"AF\"","String"),`#ifMInt_#then_#else_#fi_MINT-WRAPPER-SYNTAX`(`_orBool_`(`_andBool_`(`notBool_`(eqMInt(andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt")),#token("8'0","MInt"))),`undefBool_MINT-WRAPPER-SYNTAX`(.KList)),`_andBool_`(`notBool_`(`notBool_`(eqMInt(andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt")),#token("8'0","MInt")))),eqMInt(mi(#token("1","Int"),VX_AF),#token("1'1","MInt")))),#token("1'1","MInt"),#token("1'0","MInt"))),`_|->_`(#token("\"CF\"","String"),`#ifMInt_#then_#else_#fi_MINT-WRAPPER-SYNTAX`(`_orBool_`(`_andBool_`(ugeMInt(andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt")),#token("8'16","MInt")),`undefBool_MINT-WRAPPER-SYNTAX`(.KList)),`_andBool_`(`notBool_`(ugeMInt(andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt")),#token("8'16","MInt"))),`_orBool_`(`_andBool_`(`notBool_`(eqMInt(andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt")),#token("8'0","MInt"))),eqMInt(extractMInt(lshrMInt(concatenateMInt(mi(#token("16","Int"),VX_MEM_16),#token("1'0","MInt")),uvalueMInt(concatenateMInt(#token("9'0","MInt"),andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt"))))),#token("16","Int"),#token("17","Int")),#token("1'1","MInt"))),`_andBool_`(`notBool_`(`notBool_`(eqMInt(andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt")),#token("8'0","MInt")))),eqMInt(mi(#token("1","Int"),VX_CF),#token("1'1","MInt")))))),#token("1'1","MInt"),#token("1'0","MInt"))),`_|->_`(#token("\"OF\"","String"),`#ifMInt_#then_#else_#fi_MINT-WRAPPER-SYNTAX`(`_orBool_`(`_andBool_`(eqMInt(andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt")),#token("8'1","MInt")),eqMInt(extractMInt(mi(#token("16","Int"),VX_MEM_16),#token("0","Int"),#token("1","Int")),#token("1'1","MInt"))),`_andBool_`(`notBool_`(eqMInt(andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt")),#token("8'1","MInt"))),`_orBool_`(`_andBool_`(`notBool_`(eqMInt(andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt")),#token("8'0","MInt"))),`undefBool_MINT-WRAPPER-SYNTAX`(.KList)),`_andBool_`(`notBool_`(`notBool_`(eqMInt(andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt")),#token("8'0","MInt")))),eqMInt(mi(#token("1","Int"),VX_OF),#token("1'1","MInt")))))),#token("1'1","MInt"),#token("1'0","MInt"))),`_|->_`(#token("\"PF\"","String"),`#ifMInt_#then_#else_#fi_MINT-WRAPPER-SYNTAX`(`_orBool_`(`_andBool_`(`notBool_`(eqMInt(andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt")),#token("8'0","MInt"))),`notBool_`(`_xorBool_`(`_xorBool_`(`_xorBool_`(`_xorBool_`(`_xorBool_`(`_xorBool_`(`_xorBool_`(eqMInt(extractMInt(lshrMInt(concatenateMInt(mi(#token("16","Int"),VX_MEM_16),#token("1'0","MInt")),uvalueMInt(concatenateMInt(#token("9'0","MInt"),andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt"))))),#token("15","Int"),#token("16","Int")),#token("1'1","MInt")),eqMInt(extractMInt(lshrMInt(concatenateMInt(mi(#token("16","Int"),VX_MEM_16),#token("1'0","MInt")),uvalueMInt(concatenateMInt(#token("9'0","MInt"),andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt"))))),#token("14","Int"),#token("15","Int")),#token("1'1","MInt"))),eqMInt(extractMInt(lshrMInt(concatenateMInt(mi(#token("16","Int"),VX_MEM_16),#token("1'0","MInt")),uvalueMInt(concatenateMInt(#token("9'0","MInt"),andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt"))))),#token("13","Int"),#token("14","Int")),#token("1'1","MInt"))),eqMInt(extractMInt(lshrMInt(concatenateMInt(mi(#token("16","Int"),VX_MEM_16),#token("1'0","MInt")),uvalueMInt(concatenateMInt(#token("9'0","MInt"),andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt"))))),#token("12","Int"),#token("13","Int")),#token("1'1","MInt"))),eqMInt(extractMInt(lshrMInt(concatenateMInt(mi(#token("16","Int"),VX_MEM_16),#token("1'0","MInt")),uvalueMInt(concatenateMInt(#token("9'0","MInt"),andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt"))))),#token("11","Int"),#token("12","Int")),#token("1'1","MInt"))),eqMInt(extractMInt(lshrMInt(concatenateMInt(mi(#token("16","Int"),VX_MEM_16),#token("1'0","MInt")),uvalueMInt(concatenateMInt(#token("9'0","MInt"),andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt"))))),#token("10","Int"),#token("11","Int")),#token("1'1","MInt"))),eqMInt(extractMInt(lshrMInt(concatenateMInt(mi(#token("16","Int"),VX_MEM_16),#token("1'0","MInt")),uvalueMInt(concatenateMInt(#token("9'0","MInt"),andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt"))))),#token("9","Int"),#token("10","Int")),#token("1'1","MInt"))),eqMInt(extractMInt(lshrMInt(concatenateMInt(mi(#token("16","Int"),VX_MEM_16),#token("1'0","MInt")),uvalueMInt(concatenateMInt(#token("9'0","MInt"),andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt"))))),#token("8","Int"),#token("9","Int")),#token("1'1","MInt"))))),`_andBool_`(`notBool_`(`notBool_`(eqMInt(andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt")),#token("8'0","MInt")))),eqMInt(mi(#token("1","Int"),VX_PF),#token("1'1","MInt")))),#token("1'1","MInt"),#token("1'0","MInt"))),`_|->_`(#token("\"RAX\"","String"),mi(#token("64","Int"),VX_RAX)),`_|->_`(#token("\"RBP\"","String"),ptr(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("0","Int")),#token("64'1032","MInt"))),`_|->_`(#token("\"RBX\"","String"),mi(#token("64","Int"),VX_RBX)),`_|->_`(#token("\"RCX\"","String"),mi(#token("64","Int"),VX_RCX)),`_|->_`(#token("\"RDI\"","String"),mi(#token("64","Int"),VX_RDI)),`_|->_`(#token("\"RDX\"","String"),mi(#token("64","Int"),VX_RDX)),`_|->_`(#token("\"RIP\"","String"),#token("64'18446744073709551615","MInt")),`_|->_`(#token("\"RSI\"","String"),mi(#token("64","Int"),VX_RSI)),`_|->_`(#token("\"RSP\"","String"),ptr(symloc(#token("1","Int"),#token("128","Int"),#token("1040","Int"),#token("8","Int"),#token("0","Int")),#token("64'1040","MInt"))),`_|->_`(#token("\"SF\"","String"),`#ifMInt_#then_#else_#fi_MINT-WRAPPER-SYNTAX`(`_orBool_`(`_andBool_`(`notBool_`(eqMInt(andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt")),#token("8'0","MInt"))),eqMInt(extractMInt(lshrMInt(concatenateMInt(mi(#token("16","Int"),VX_MEM_16),#token("1'0","MInt")),uvalueMInt(concatenateMInt(#token("9'0","MInt"),andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt"))))),#token("0","Int"),#token("1","Int")),#token("1'1","MInt"))),`_andBool_`(`notBool_`(`notBool_`(eqMInt(andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt")),#token("8'0","MInt")))),eqMInt(mi(#token("1","Int"),VX_SF),#token("1'1","MInt")))),#token("1'1","MInt"),#token("1'0","MInt"))),`_|->_`(#token("\"YMM1\"","String"),mi(#token("256","Int"),VX_YMM1)),`_|->_`(#token("\"YMM2\"","String"),mi(#token("256","Int"),VX_YMM2)),`_|->_`(#token("\"ZF\"","String"),`#ifMInt_#then_#else_#fi_MINT-WRAPPER-SYNTAX`(`_orBool_`(`_andBool_`(`notBool_`(eqMInt(andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt")),#token("8'0","MInt"))),eqMInt(extractMInt(lshrMInt(concatenateMInt(mi(#token("16","Int"),VX_MEM_16),#token("1'0","MInt")),uvalueMInt(concatenateMInt(#token("9'0","MInt"),andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt"))))),#token("0","Int"),#token("16","Int")),#token("16'0","MInt"))),`_andBool_`(`notBool_`(`notBool_`(eqMInt(andMInt(extractMInt(mi(#token("64","Int"),VX_RCX),#token("56","Int"),#token("64","Int")),#token("8'31","MInt")),#token("8'0","MInt")))),eqMInt(mi(#token("1","Int"),VX_ZF),#token("1'1","MInt")))),#token("1'1","MInt"),#token("1'0","MInt"))))),_17,_18,_19,_20,_21)
[Warning] Internal: execution phase: missing SMTLib translation for mi . Please
re-run with the --debug-z3 flag. Search the logs starting with 'Z3 warning' to
see the Z3 implication that generated the warning. (missing SMTLib translation
for mi)
[Warning] Internal: execution phase: missing SMTLib translation for svalueMInt
. Please re-run with the --debug-z3 flag. Search the logs starting with 'Z3
warning' to see the Z3 implication that generated the warning. (missing SMTLib
translation for svalueMInt)
Command exited with non-zero status 1
809.37user 429.75system 10:43.33elapsed 192%CPU (0avgtext+0avgdata 30439112maxresident)k
0inputs+251080outputs (0major+26783025minor)pagefaults 0swaps
