Importing: Source(/home/ubuntu/Github/validating-binary-decompilation/tests/single_instruction_translation_validation/mcsema/register-variants/vzeroupper/././test-xspec.k)
Importing: Source(/home/ubuntu/Github/validating-binary-decompilation/tests/single_instruction_translation_validation/mcsema/register-variants/vzeroupper/test-xspec.k)
Parse spec modules [1/9 rules]                               =  0.021s
StateLog: /home/ubuntu/Github/X86-64-semantics/semantics/x86-semantics-kompiled/stateLog/prove-2044796696.log

Parsing finished:  292.375 s
Pre-processing rule:
rule too long...
	Source: /home/ubuntu/Github/validating-binary-decompilation/tests/single_instruction_translation_validation/mcsema/register-variants/vzeroupper/test-xspec.k Location(6,5,111,55)
==================================

Initialization finished
==================================
Stats for each phase, time, used memory, implicit main GC time percentage:
Total                 :  292.849 s,	 4404 MB, gc:  2.819 %
  Parsing             :  292.375 s,	 4228 MB, gc:  2.824 %
  Init                :    0.473 s,	 4404 MB, gc:  0.000 %

Init+Execution time:       0.473 s

  Time and top-level event counts:
  resolveFunctionAndAnywhere time  :    0.081 s,      #        499
    evaluateFunction time            :    0.060 s,      #        252
      builtin evaluation               :           ,      #        164
      function rule                    :           ,      #         12
      no rule applicable               :           ,      #         12
      no function rules                :           ,      #         64
    applyAnywhereRules time          :    0.000 s,      #         87
      no anywhere rules                :           ,      #         87
    remaining time & # cached        :    0.021 s,      #        160

  Recursive event counts:
  resolveFunctionAndAnywhere time  :           ,      #        250
    evaluateFunction time            :           ,      #         12
      builtin evaluation               :           ,      #          0
      function rule                    :           ,      #          0
      no rule applicable               :           ,      #          0
      no function rules                :           ,      #         12
    applyAnywhereRules time          :           ,      #          0
      no anywhere rules                :           ,      #          0
    # cached                         :           ,      #        238
==================================


Initial term
=====================

`<generatedTop>`(`<k>`(#token("fetchNoDBG","KItem")),`<functargets>`(`_|->_`(#token("_start","X86Id"),ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'0","MInt")))),`<rotargets>`(`.Map`(.KList)),`<datatargets>`(`.Map`(.KList)),`<bsstargets>`(`.Map`(.KList)),`<entrypoint>`(#EmptyK(.KList)),`<nextLocPc>`(_0),`<lastseenlabel>`(#EmptyK(.KList)),`<currentsection>`(#token("\"text\"","String")),`<memstate>`(`<text>`(code(`_Map_`(`_|->_`(ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'0","MInt")),storedInstr(`___X86-SYNTAX`(`vzeroupper_X86-SYNTAX`(.KList),`.List{"operandlist"}`(.KList)))),`_|->_`(ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'1","MInt")),storedInstr(`___X86-SYNTAX`(`ret_X86-SYNTAX`(.KList),`.List{"operandlist"}`(.KList))))))),`<stack>`(`<memory>`(`<nextLoc>`(#token("1","Int")),`<objects>`(mem(`_Map_`(`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1000","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1001","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1002","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1003","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1004","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1005","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1006","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1007","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1008","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1009","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1010","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1011","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1012","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1013","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1014","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1015","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1016","Int")),byte(#token("0","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1017","Int")),byte(#token("1","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1018","Int")),byte(#token("2","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1019","Int")),byte(#token("3","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1020","Int")),byte(#token("4","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1021","Int")),byte(#token("5","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1022","Int")),byte(#token("6","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1023","Int")),byte(#token("7","Int"),#token("64'-1","MInt")))))),`<freed>`(`.Set`(.KList))),`<stackbase>`(stackBaseInfo(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("0","Int")),#token("64'1016","MInt"))),`<robase>`(roBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))),`<database>`(dataBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))),`<bssbase>`(bssBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))))),`<environment>`(`<argc>`(#EmptyK(.KList)),`<argv>`(#EmptyK(.KList))),`<regstate>`(`_Map_`(`_|->_`(#token("\"AF\"","String"),mi(#token("1","Int"),VX_AF)),`_|->_`(#token("\"CF\"","String"),mi(#token("1","Int"),VX_CF)),`_|->_`(#token("\"OF\"","String"),mi(#token("1","Int"),VX_OF)),`_|->_`(#token("\"PF\"","String"),mi(#token("1","Int"),VX_PF)),`_|->_`(#token("\"RAX\"","String"),mi(#token("64","Int"),VX_RAX)),`_|->_`(#token("\"RBP\"","String"),ptr(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("0","Int")),#token("64'1016","MInt"))),`_|->_`(#token("\"RBX\"","String"),mi(#token("64","Int"),VX_RBX)),`_|->_`(#token("\"RCX\"","String"),mi(#token("64","Int"),VX_RCX)),`_|->_`(#token("\"RDI\"","String"),mi(#token("64","Int"),VX_RDI)),`_|->_`(#token("\"RDX\"","String"),mi(#token("64","Int"),VX_RDX)),`_|->_`(#token("\"RIP\"","String"),ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'0","MInt"))),`_|->_`(#token("\"RSI\"","String"),mi(#token("64","Int"),VX_RSI)),`_|->_`(#token("\"RSP\"","String"),ptr(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("0","Int")),#token("64'1016","MInt"))),`_|->_`(#token("\"SF\"","String"),mi(#token("1","Int"),VX_SF)),`_|->_`(#token("\"YMM1\"","String"),mi(#token("256","Int"),VX_YMM1)),`_|->_`(#token("\"YMM2\"","String"),mi(#token("256","Int"),VX_YMM2)),`_|->_`(#token("\"ZF\"","String"),mi(#token("1","Int"),VX_ZF)))),_31,_32,_33,_34,_35)
/\
#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(`_==K_`(`_orBool_`(`_==K_`(VX_AF,#token("0","Int")),`_==K_`(VX_AF,#token("1","Int"))),#token("true","Bool")),`_==K_`(`_orBool_`(`_==K_`(VX_CF,#token("0","Int")),`_==K_`(VX_CF,#token("1","Int"))),#token("true","Bool"))),`_==K_`(`_orBool_`(`_==K_`(VX_OF,#token("0","Int")),`_==K_`(VX_OF,#token("1","Int"))),#token("true","Bool"))),`_==K_`(`_orBool_`(`_==K_`(VX_PF,#token("0","Int")),`_==K_`(VX_PF,#token("1","Int"))),#token("true","Bool"))),`_==K_`(`_orBool_`(`_==K_`(VX_SF,#token("0","Int")),`_==K_`(VX_SF,#token("1","Int"))),#token("true","Bool"))),`_==K_`(`_orBool_`(`_==K_`(VX_ZF,#token("0","Int")),`_==K_`(VX_ZF,#token("1","Int"))),#token("true","Bool"))),`_==K_`(`_<Int_`(VX_RAX,#token("18446744073709551616","Int")),#token("true","Bool"))),`_==K_`(`_>=Int_`(VX_RAX,#token("0","Int")),#token("true","Bool"))),`_==K_`(`_<Int_`(VX_RBX,#token("18446744073709551616","Int")),#token("true","Bool"))),`_==K_`(`_>=Int_`(VX_RBX,#token("0","Int")),#token("true","Bool"))),`_==K_`(`_<Int_`(VX_RCX,#token("18446744073709551616","Int")),#token("true","Bool"))),`_==K_`(`_>=Int_`(VX_RCX,#token("0","Int")),#token("true","Bool"))),`_==K_`(`_<Int_`(VX_RDI,#token("18446744073709551616","Int")),#token("true","Bool"))),`_==K_`(`_>=Int_`(VX_RDI,#token("0","Int")),#token("true","Bool"))),`_==K_`(`_<Int_`(VX_RDX,#token("18446744073709551616","Int")),#token("true","Bool"))),`_==K_`(`_>=Int_`(VX_RDX,#token("0","Int")),#token("true","Bool"))),`_==K_`(`_<Int_`(VX_RSI,#token("18446744073709551616","Int")),#token("true","Bool"))),`_==K_`(`_>=Int_`(VX_RSI,#token("0","Int")),#token("true","Bool")))


Target term
=====================

`<generatedTop>`(`<k>`(`exit_0_X86-FETCH-EXECUTE`(.KList)),`<functargets>`(`_|->_`(#token("_start","X86Id"),ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'0","MInt")))),`<rotargets>`(`.Map`(.KList)),`<datatargets>`(`.Map`(.KList)),`<bsstargets>`(`.Map`(.KList)),`<entrypoint>`(#EmptyK(.KList)),`<nextLocPc>`(_0),`<lastseenlabel>`(#EmptyK(.KList)),`<currentsection>`(#token("\"text\"","String")),`<memstate>`(`<text>`(code(`_Map_`(`_|->_`(ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'0","MInt")),storedInstr(`___X86-SYNTAX`(`vzeroupper_X86-SYNTAX`(.KList),`.List{"operandlist"}`(.KList)))),`_|->_`(ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'1","MInt")),storedInstr(`___X86-SYNTAX`(`ret_X86-SYNTAX`(.KList),`.List{"operandlist"}`(.KList))))))),`<stack>`(`<memory>`(`<nextLoc>`(#token("1","Int")),`<objects>`(mem(`_Map_`(`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1000","Int")),_15),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1001","Int")),_16),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1002","Int")),_17),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1003","Int")),_18),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1004","Int")),_19),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1005","Int")),_20),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1006","Int")),_21),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1007","Int")),_22),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1008","Int")),_23),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1009","Int")),_24),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1010","Int")),_25),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1011","Int")),_26),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1012","Int")),_27),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1013","Int")),_28),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1014","Int")),_29),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1015","Int")),_30),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1016","Int")),byte(#token("0","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1017","Int")),byte(#token("1","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1018","Int")),byte(#token("2","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1019","Int")),byte(#token("3","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1020","Int")),byte(#token("4","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1021","Int")),byte(#token("5","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1022","Int")),byte(#token("6","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1023","Int")),byte(#token("7","Int"),#token("64'-1","MInt")))))),`<freed>`(`.Set`(.KList))),`<stackbase>`(stackBaseInfo(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("0","Int")),#token("64'1016","MInt"))),`<robase>`(roBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))),`<database>`(dataBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))),`<bssbase>`(bssBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))))),`<environment>`(`<argc>`(#EmptyK(.KList)),`<argv>`(#EmptyK(.KList))),`<regstate>`(`_Map_`(`_|->_`(#token("\"AF\"","String"),mi(#token("1","Int"),_7)),`_|->_`(#token("\"CF\"","String"),mi(#token("1","Int"),_8)),`_|->_`(#token("\"OF\"","String"),mi(#token("1","Int"),_9)),`_|->_`(#token("\"PF\"","String"),mi(#token("1","Int"),_10)),`_|->_`(#token("\"RAX\"","String"),mi(#token("64","Int"),_1)),`_|->_`(#token("\"RBP\"","String"),ptr(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("0","Int")),#token("64'1016","MInt"))),`_|->_`(#token("\"RBX\"","String"),mi(#token("64","Int"),_2)),`_|->_`(#token("\"RCX\"","String"),mi(#token("64","Int"),_3)),`_|->_`(#token("\"RDI\"","String"),mi(#token("64","Int"),_6)),`_|->_`(#token("\"RDX\"","String"),mi(#token("64","Int"),_4)),`_|->_`(#token("\"RIP\"","String"),#token("64'18446744073709551615","MInt")),`_|->_`(#token("\"RSI\"","String"),mi(#token("64","Int"),_5)),`_|->_`(#token("\"RSP\"","String"),ptr(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("0","Int")),#token("64'1024","MInt"))),`_|->_`(#token("\"SF\"","String"),mi(#token("1","Int"),_11)),`_|->_`(#token("\"YMM1\"","String"),mi(#token("256","Int"),_13)),`_|->_`(#token("\"YMM2\"","String"),mi(#token("256","Int"),_14)),`_|->_`(#token("\"ZF\"","String"),mi(#token("1","Int"),_12)))),_31,_32,_33,_34,_35)
/\
#True(.KList)


STEP 1 v1 :    2.065 s, 		 2584 MB, gc:  0.000 %
===================
`<memory>`(`<nextLoc>`(#token("1","Int")),`<objects>`(mem(`_Map_`(`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1000","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1001","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1002","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1003","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1004","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1005","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1006","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1007","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1008","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1009","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1010","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1011","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1012","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1013","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1014","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1015","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1016","Int")),byte(#token("0","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1017","Int")),byte(#token("1","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1018","Int")),byte(#token("2","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1019","Int")),byte(#token("3","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1020","Int")),byte(#token("4","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1021","Int")),byte(#token("5","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1022","Int")),byte(#token("6","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1023","Int")),byte(#token("7","Int"),#token("64'-1","MInt")))))),`<freed>`(`.Set`(.KList)))

STEP 2 v1 :    2.677 s, 		 2968 MB, gc:  0.000 %
===================
`<memory>`(`<nextLoc>`(#token("1","Int")),`<objects>`(mem(`_Map_`(`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1000","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1001","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1002","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1003","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1004","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1005","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1006","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1007","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1008","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1009","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1010","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1011","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1012","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1013","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1014","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1015","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1016","Int")),byte(#token("0","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1017","Int")),byte(#token("1","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1018","Int")),byte(#token("2","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1019","Int")),byte(#token("3","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1020","Int")),byte(#token("4","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1021","Int")),byte(#token("5","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1022","Int")),byte(#token("6","Int"),#token("64'-1","MInt"))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1023","Int")),byte(#token("7","Int"),#token("64'-1","MInt")))))),`<freed>`(`.Set`(.KList)))

==========================================
Top term when exception was thrown:
==========================================

<generatedTop>(<k>(#KSequence(execinstr(___X86-SYNTAX(vzeroupper_X86-SYNTAX(.KList),, .List{"operandlist"}(.KList))), KItem(#"fetchNoDBG"))),, <functargets>(X86Id(#"_start") |-> ptr(symloc(Int(#"-1"),, Int(#"0"),, Int(#"0"),, Int(#"0"),, Int(#"0")),, MInt(#"64'0"))   ),, <rotargets>(.Map),, <datatargets>(.Map),, <bsstargets>(.Map),, <entrypoint>(#EmptyK()),, <nextLocPc>(_0_2149:MInt),, <lastseenlabel>(#EmptyK()),, <currentsection>(String(#""text"")),, <memstate>(<text>(code(ptr(symloc(Int(#"-1"),, Int(#"0"),, Int(#"0"),, Int(#"0"),, Int(#"0")),, MInt(#"64'0")) |-> storedInstr(___X86-SYNTAX(vzeroupper_X86-SYNTAX(.KList),, .List{"operandlist"}(.KList))) ptr(symloc(Int(#"-1"),, Int(#"0"),, Int(#"0"),, Int(#"0"),, Int(#"0")),, MInt(#"64'1")) |-> storedInstr(___X86-SYNTAX(ret_X86-SYNTAX(.KList),, .List{"operandlist"}(.KList)))   )),, <stack>(<memory>(<nextLoc>(Int(#"1")),, <objects>(mem(symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1006")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1005")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1004")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1003")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1002")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1001")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1000")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1023")) |-> byte(Int(#"7"),, MInt(#"64'-1")) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1022")) |-> byte(Int(#"6"),, MInt(#"64'-1")) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1021")) |-> byte(Int(#"5"),, MInt(#"64'-1")) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1020")) |-> byte(Int(#"4"),, MInt(#"64'-1")) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1019")) |-> byte(Int(#"3"),, MInt(#"64'-1")) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1018")) |-> byte(Int(#"2"),, MInt(#"64'-1")) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1017")) |-> byte(Int(#"1"),, MInt(#"64'-1")) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1016")) |-> byte(Int(#"0"),, MInt(#"64'-1")) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1015")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1014")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1013")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1012")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1011")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1010")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1009")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1008")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1007")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList))   )),, <freed>(.Set)),, <stackbase>(stackBaseInfo(symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"0")),, MInt(#"64'1016"))),, <robase>(roBaseInfo(#EmptyK(),, #EmptyK(),, #EmptyK())),, <database>(dataBaseInfo(#EmptyK(),, #EmptyK(),, #EmptyK())),, <bssbase>(bssBaseInfo(#EmptyK(),, #EmptyK(),, #EmptyK())))),, <environment>(<argc>(#EmptyK()),, <argv>(#EmptyK())),, <regstate>(String(#""RBP"") |-> ptr(symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"0")),, MInt(#"64'1016")) String(#""CF"") |-> mi(Int(#"1"),, VX_CF_2144:Int) String(#""AF"") |-> mi(Int(#"1"),, VX_AF_2143:Int) String(#""RCX"") |-> mi(Int(#"64"),, VX_RCX_2139:Int) String(#""RDX"") |-> mi(Int(#"64"),, VX_RDX_2141:Int) String(#""RAX"") |-> mi(Int(#"64"),, VX_RAX_2137:Int) String(#""RBX"") |-> mi(Int(#"64"),, VX_RBX_2138:Int) String(#""RSI"") |-> mi(Int(#"64"),, VX_RSI_2142:Int) String(#""ZF"") |-> mi(Int(#"1"),, VX_ZF_2148:Int) String(#""RSP"") |-> ptr(symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"0")),, MInt(#"64'1016")) String(#""YMM2"") |-> mi(Int(#"256"),, VX_YMM2_2120:Int) String(#""YMM1"") |-> mi(Int(#"256"),, VX_YMM1_2119:Int) String(#""SF"") |-> mi(Int(#"1"),, VX_SF_2147:Int) String(#""RDI"") |-> mi(Int(#"64"),, VX_RDI_2140:Int) String(#""PF"") |-> mi(Int(#"1"),, VX_PF_2146:Int) String(#""OF"") |-> mi(Int(#"1"),, VX_OF_2145:Int) String(#""RIP"") |-> ptr(symloc(Int(#"-1"),, Int(#"0"),, Int(#"0"),, Int(#"0"),, Int(#"0")),, MInt(#"64'1"))   ),, _31_2114:K,, _32_2115:K,, _33_2116:K,, _34_2117:K,, _35_2118:K)
/\
ConjunctiveFormula(
  init equalities:
    _==K_(_<Int_(VX_RAX_2137:Int,, Int(#"18446744073709551616")),, Bool(#"true"))
    _==K_(_<Int_(VX_RBX_2138:Int,, Int(#"18446744073709551616")),, Bool(#"true"))
    _==K_(_<Int_(VX_RCX_2139:Int,, Int(#"18446744073709551616")),, Bool(#"true"))
    _==K_(_<Int_(VX_RDI_2140:Int,, Int(#"18446744073709551616")),, Bool(#"true"))
    _==K_(_<Int_(VX_RDX_2141:Int,, Int(#"18446744073709551616")),, Bool(#"true"))
    _==K_(_<Int_(VX_RSI_2142:Int,, Int(#"18446744073709551616")),, Bool(#"true"))
    _==K_(_>=Int_(VX_RAX_2137:Int,, Int(#"0")),, Bool(#"true"))
    _==K_(_>=Int_(VX_RBX_2138:Int,, Int(#"0")),, Bool(#"true"))
    _==K_(_>=Int_(VX_RCX_2139:Int,, Int(#"0")),, Bool(#"true"))
    _==K_(_>=Int_(VX_RDI_2140:Int,, Int(#"0")),, Bool(#"true"))
    _==K_(_>=Int_(VX_RDX_2141:Int,, Int(#"0")),, Bool(#"true"))
    _==K_(_>=Int_(VX_RSI_2142:Int,, Int(#"0")),, Bool(#"true"))
    _==K_(_orBool_(_==K_(VX_AF_2143:Int,, Int(#"0")),, _==K_(VX_AF_2143:Int,, Int(#"1"))),, Bool(#"true"))
    _==K_(_orBool_(_==K_(VX_CF_2144:Int,, Int(#"0")),, _==K_(VX_CF_2144:Int,, Int(#"1"))),, Bool(#"true"))
    _==K_(_orBool_(_==K_(VX_OF_2145:Int,, Int(#"0")),, _==K_(VX_OF_2145:Int,, Int(#"1"))),, Bool(#"true"))
    _==K_(_orBool_(_==K_(VX_PF_2146:Int,, Int(#"0")),, _==K_(VX_PF_2146:Int,, Int(#"1"))),, Bool(#"true"))
    _==K_(_orBool_(_==K_(VX_SF_2147:Int,, Int(#"0")),, _==K_(VX_SF_2147:Int,, Int(#"1"))),, Bool(#"true"))
    _==K_(_orBool_(_==K_(VX_ZF_2148:Int,, Int(#"0")),, _==K_(VX_ZF_2148:Int,, Int(#"1"))),, Bool(#"true"))
)


SPEC ERROR: /home/ubuntu/Github/validating-binary-decompilation/tests/single_instruction_translation_validation/mcsema/register-variants/vzeroupper/test-xspec.k Location(6,5,111,55)
==================================
Success execution paths: 0
Failed execution paths: 0
Paths in progress: 1
Longest path: 2 steps
Stats for each phase, time, used memory, implicit main GC time percentage:
Total                 :  296.148 s,	 3320 MB, gc:  2.803 %
  Parsing             :  292.375 s,	 4228 MB, gc:  2.824 %
  Init                :    0.473 s,	 4404 MB, gc:  0.000 %
  Execution           :    3.299 s,	 3320 MB, gc:  1.334 %

Init+Execution time:       3.773 s

  Time and top-level event counts:
  resolveFunctionAndAnywhere time  :    0.120 s,      #        658
    evaluateFunction time            :    0.093 s,      #        380
      builtin evaluation               :           ,      #        172
      function rule                    :           ,      #         27
      no rule applicable               :           ,      #         24
      no function rules                :           ,      #        156
      other                            :           ,      #          1
    applyAnywhereRules time          :    0.001 s,      #        107
      no anywhere rules                :           ,      #        107
    remaining time & # cached        :    0.027 s,      #        171
  log time                         :    1.137 s,      #          3

  Recursive event counts:
  resolveFunctionAndAnywhere time  :           ,      #        303
    evaluateFunction time            :           ,      #         34
      builtin evaluation               :           ,      #          2
      function rule                    :           ,      #          7
      no rule applicable               :           ,      #          0
      no function rules                :           ,      #         24
      other                            :           ,      #          1
    applyAnywhereRules time          :           ,      #          0
      no anywhere rules                :           ,      #          0
    # cached                         :           ,      #        269

Max memory : 262144 MB
==================================

[Error] Critical:  (Bad term not a k:
org.kframework.backend.java.kil.Bottom@1cc8b237)
  while evaluating functional term:
	getRegisterValue(%ymm0_X86-SYNTAX(.KList),, String(#""RBP"") |->
ptr(symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"0")),,
MInt(#"64'1016")) String(#""CF"") |-> mi(Int(#"1"),, VX_CF_2144:Int)
String(#""AF"") |-> mi(Int(#"1"),, VX_AF_2143:Int) String(#""RCX"") |->
mi(Int(#"64"),, VX_RCX_2139:Int) String(#""RDX"") |-> mi(Int(#"64"),,
VX_RDX_2141:Int) String(#""RAX"") |-> mi(Int(#"64"),, VX_RAX_2137:Int)
String(#""RBX"") |-> mi(Int(#"64"),, VX_RBX_2138:Int) String(#""RSI"") |->
mi(Int(#"64"),, VX_RSI_2142:Int) String(#""ZF"") |-> mi(Int(#"1"),,
VX_ZF_2148:Int) String(#""RSP"") |-> ptr(symloc(Int(#"1"),, Int(#"128"),,
Int(#"1024"),, Int(#"8"),, Int(#"0")),, MInt(#"64'1016")) String(#""YMM2"") |->
mi(Int(#"256"),, VX_YMM2_2120:Int) String(#""YMM1"") |-> mi(Int(#"256"),,
VX_YMM1_2119:Int) String(#""SF"") |-> mi(Int(#"1"),, VX_SF_2147:Int)
String(#""RDI"") |-> mi(Int(#"64"),, VX_RDI_2140:Int) String(#""PF"") |->
mi(Int(#"1"),, VX_PF_2146:Int) String(#""OF"") |-> mi(Int(#"1"...
  and applying the rule
  rule getRegisterValue(Y:Ymm, RSMap)  =>  {RSMap[convToRegKeys(Y)]}:>MInt
	Source:
/home/ubuntu/Github/X86-64-semantics/semantics/x86-abstract-semantics.k
Location(423,8,423,75)

  while evaluating function getRegisterValue
  while evaluating functional term:
	getParentValue(%ymm0_X86-SYNTAX(.KList),, String(#""RBP"") |->
ptr(symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"0")),,
MInt(#"64'1016")) String(#""CF"") |-> mi(Int(#"1"),, VX_CF_2144:Int)
String(#""AF"") |-> mi(Int(#"1"),, VX_AF_2143:Int) String(#""RCX"") |->
mi(Int(#"64"),, VX_RCX_2139:Int) String(#""RDX"") |-> mi(Int(#"64"),,
VX_RDX_2141:Int) String(#""RAX"") |-> mi(Int(#"64"),, VX_RAX_2137:Int)
String(#""RBX"") |-> mi(Int(#"64"),, VX_RBX_2138:Int) String(#""RSI"") |->
mi(Int(#"64"),, VX_RSI_2142:Int) String(#""ZF"") |-> mi(Int(#"1"),,
VX_ZF_2148:Int) String(#""RSP"") |-> ptr(symloc(Int(#"1"),, Int(#"128"),,
Int(#"1024"),, Int(#"8"),, Int(#"0")),, MInt(#"64'1016")) String(#""YMM2"") |->
mi(Int(#"256"),, VX_YMM2_2120:Int) String(#""YMM1"") |-> mi(Int(#"256"),,
VX_YMM1_2119:Int) String(#""SF"") |-> mi(Int(#"1"),, VX_SF_2147:Int)
String(#""RDI"") |-> mi(Int(#"64"),, VX_RDI_2140:Int) String(#""PF"") |->
mi(Int(#"1"),, VX_PF_2146:Int) String(#""OF"") |-> mi(Int(#"1"),...
  and applying the rule
  rule getParentValue(R:Register, RSMap) =>
getRegisterValue(convSubRegsToRegs(R), RSMap)
	Source:
/home/ubuntu/Github/X86-64-semantics/semantics/x86-abstract-semantics.k
Location(427,8,427,90)

  while evaluating function getParentValue
Command exited with non-zero status 113
392.46user 304.86system 4:57.87elapsed 234%CPU (0avgtext+0avgdata 22931840maxresident)k
0inputs+204832outputs (0major+15304348minor)pagefaults 0swaps
