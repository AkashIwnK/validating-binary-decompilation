Importing: Source(/home/ubuntu/Github/validating-binary-decompilation/tests/single_instruction_translation_validation/mcsema/register-variants/movq_r64_xmm/././test-xspec.k)
Importing: Source(/home/ubuntu/Github/validating-binary-decompilation/tests/single_instruction_translation_validation/mcsema/register-variants/movq_r64_xmm/test-xspec.k)
Parse spec modules [1/9 rules]                               =  0.021s
StateLog: /home/ubuntu/Github/X86-64-semantics/semantics/x86-semantics-kompiled/stateLog/prove-2044796696.log

Parsing finished:  194.868 s
Pre-processing rule:
rule too long...
	Source: /home/ubuntu/Github/validating-binary-decompilation/tests/single_instruction_translation_validation/mcsema/register-variants/movq_r64_xmm/test-xspec.k Location(6,5,101,61)
==================================

Initialization finished
==================================
Stats for each phase, time, used memory, implicit main GC time percentage:
Total                 :  195.475 s,	 1836 MB, gc:  4.325 %
  Parsing             :  194.868 s,	 1692 MB, gc:  4.338 %
  Init                :    0.607 s,	 1836 MB, gc:  0.000 %

Init+Execution time:       0.607 s

  Time and top-level event counts:
  resolveFunctionAndAnywhere time  :    0.062 s,      #        447
    evaluateFunction time            :    0.042 s,      #        192
      builtin evaluation               :           ,      #        156
      no function rules                :           ,      #         36
    applyAnywhereRules time          :    0.001 s,      #         91
      no anywhere rules                :           ,      #         91
    remaining time & # cached        :    0.019 s,      #        164

  Recursive event counts:
  resolveFunctionAndAnywhere time  :           ,      #        126
    evaluateFunction time            :           ,      #          0
      builtin evaluation               :           ,      #          0
      no function rules                :           ,      #          0
    applyAnywhereRules time          :           ,      #          0
      no anywhere rules                :           ,      #          0
    # cached                         :           ,      #        126
==================================


Initial term
=====================

`<generatedTop>`(`<k>`(#token("fetchNoDBG","KItem")),`<functargets>`(`_|->_`(#token("_start","X86Id"),ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'0","MInt")))),`<rotargets>`(`.Map`(.KList)),`<datatargets>`(`.Map`(.KList)),`<bsstargets>`(`.Map`(.KList)),`<entrypoint>`(#EmptyK(.KList)),`<nextLocPc>`(_0),`<lastseenlabel>`(#EmptyK(.KList)),`<currentsection>`(#token("\"text\"","String")),`<memstate>`(`<text>`(code(`_Map_`(`_|->_`(ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'0","MInt")),storedInstr(`___X86-SYNTAX`(`movq_X86-SYNTAX`(.KList),operandlist(`%xmm1_X86-SYNTAX`(.KList),operandlist(`%rbx_X86-SYNTAX`(.KList),`.List{"operandlist"}`(.KList)))))),`_|->_`(ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'1","MInt")),storedInstr(`___X86-SYNTAX`(`ret_X86-SYNTAX`(.KList),`.List{"operandlist"}`(.KList))))))),`<stack>`(`<memory>`(`<nextLoc>`(#token("1","Int")),`<objects>`(mem(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1000","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1001","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1002","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1003","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1004","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1005","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1006","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1007","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1008","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1009","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1010","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1011","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1012","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1013","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1014","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1015","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1016","Int")),byte(#token("0","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1017","Int")),byte(#token("1","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1018","Int")),byte(#token("2","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1019","Int")),byte(#token("3","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1020","Int")),byte(#token("4","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1021","Int")),byte(#token("5","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1022","Int")),byte(#token("6","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1023","Int")),byte(#token("7","Int"),#token("64'-1","MInt")))))),`<freed>`(`.Set`(.KList))),`<stackbase>`(stackBaseInfo(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("0","Int")),#token("64'1016","MInt"))),`<robase>`(roBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))),`<database>`(dataBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))),`<bssbase>`(bssBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))))),`<environment>`(`<argc>`(#EmptyK(.KList)),`<argv>`(#EmptyK(.KList))),`<regstate>`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"AF\"","String"),_7),`_|->_`(#token("\"CF\"","String"),_9)),`_|->_`(#token("\"OF\"","String"),_11)),`_|->_`(#token("\"PF\"","String"),_13)),`_|->_`(#token("\"RAX\"","String"),mi(#token("64","Int"),V_RAX))),`_|->_`(#token("\"RBP\"","String"),ptr(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("0","Int")),#token("64'1016","MInt")))),`_|->_`(#token("\"RBX\"","String"),mi(#token("64","Int"),V_RBX))),`_|->_`(#token("\"RCX\"","String"),mi(#token("64","Int"),V_RCX))),`_|->_`(#token("\"RDI\"","String"),mi(#token("64","Int"),V_RDI))),`_|->_`(#token("\"RDX\"","String"),mi(#token("64","Int"),V_RDX))),`_|->_`(#token("\"RIP\"","String"),ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'0","MInt")))),`_|->_`(#token("\"RSI\"","String"),mi(#token("64","Int"),V_RSI))),`_|->_`(#token("\"RSP\"","String"),ptr(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("0","Int")),#token("64'1016","MInt")))),`_|->_`(#token("\"SF\"","String"),_15)),`_|->_`(#token("\"ZF\"","String"),_17))),_35,_36,_37,_38,_39)
/\
#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(#And(`_==K_`(`_<Int_`(V_RAX,#token("18446744073709551616","Int")),#token("true","Bool")),`_==K_`(`_>=Int_`(V_RAX,#token("0","Int")),#token("true","Bool"))),`_==K_`(`_<Int_`(V_RBX,#token("18446744073709551616","Int")),#token("true","Bool"))),`_==K_`(`_>=Int_`(V_RBX,#token("0","Int")),#token("true","Bool"))),`_==K_`(`_<Int_`(V_RCX,#token("18446744073709551616","Int")),#token("true","Bool"))),`_==K_`(`_>=Int_`(V_RCX,#token("0","Int")),#token("true","Bool"))),`_==K_`(`_<Int_`(V_RDI,#token("18446744073709551616","Int")),#token("true","Bool"))),`_==K_`(`_>=Int_`(V_RDI,#token("0","Int")),#token("true","Bool"))),`_==K_`(`_<Int_`(V_RDX,#token("18446744073709551616","Int")),#token("true","Bool"))),`_==K_`(`_>=Int_`(V_RDX,#token("0","Int")),#token("true","Bool"))),`_==K_`(`_<Int_`(V_RSI,#token("18446744073709551616","Int")),#token("true","Bool"))),`_==K_`(`_>=Int_`(V_RSI,#token("0","Int")),#token("true","Bool")))


Target term
=====================

`<generatedTop>`(`<k>`(`exit_0_X86-FETCH-EXECUTE`(.KList)),`<functargets>`(`_|->_`(#token("_start","X86Id"),ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'0","MInt")))),`<rotargets>`(`.Map`(.KList)),`<datatargets>`(`.Map`(.KList)),`<bsstargets>`(`.Map`(.KList)),`<entrypoint>`(#EmptyK(.KList)),`<nextLocPc>`(_0),`<lastseenlabel>`(#EmptyK(.KList)),`<currentsection>`(#token("\"text\"","String")),`<memstate>`(`<text>`(code(`_Map_`(`_|->_`(ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'0","MInt")),storedInstr(`___X86-SYNTAX`(`movq_X86-SYNTAX`(.KList),operandlist(`%xmm1_X86-SYNTAX`(.KList),operandlist(`%rbx_X86-SYNTAX`(.KList),`.List{"operandlist"}`(.KList)))))),`_|->_`(ptr(symloc(#token("-1","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int"),#token("0","Int")),#token("64'1","MInt")),storedInstr(`___X86-SYNTAX`(`ret_X86-SYNTAX`(.KList),`.List{"operandlist"}`(.KList))))))),`<stack>`(`<memory>`(`<nextLoc>`(#token("1","Int")),`<objects>`(mem(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1000","Int")),_19),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1001","Int")),_20)),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1002","Int")),_21)),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1003","Int")),_22)),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1004","Int")),_23)),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1005","Int")),_24)),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1006","Int")),_25)),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1007","Int")),_26)),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1008","Int")),_27)),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1009","Int")),_28)),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1010","Int")),_29)),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1011","Int")),_30)),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1012","Int")),_31)),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1013","Int")),_32)),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1014","Int")),_33)),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1015","Int")),_34)),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1016","Int")),byte(#token("0","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1017","Int")),byte(#token("1","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1018","Int")),byte(#token("2","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1019","Int")),byte(#token("3","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1020","Int")),byte(#token("4","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1021","Int")),byte(#token("5","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1022","Int")),byte(#token("6","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1023","Int")),byte(#token("7","Int"),#token("64'-1","MInt")))))),`<freed>`(`.Set`(.KList))),`<stackbase>`(stackBaseInfo(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("0","Int")),#token("64'1016","MInt"))),`<robase>`(roBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))),`<database>`(dataBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))),`<bssbase>`(bssBaseInfo(#EmptyK(.KList),#EmptyK(.KList),#EmptyK(.KList))))),`<environment>`(`<argc>`(#EmptyK(.KList)),`<argv>`(#EmptyK(.KList))),`<regstate>`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"AF\"","String"),_8),`_|->_`(#token("\"CF\"","String"),_10)),`_|->_`(#token("\"OF\"","String"),_12)),`_|->_`(#token("\"PF\"","String"),_14)),`_|->_`(#token("\"RAX\"","String"),mi(#token("64","Int"),_1))),`_|->_`(#token("\"RBP\"","String"),ptr(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("0","Int")),#token("64'1016","MInt")))),`_|->_`(#token("\"RBX\"","String"),mi(#token("64","Int"),_2))),`_|->_`(#token("\"RCX\"","String"),mi(#token("64","Int"),_3))),`_|->_`(#token("\"RDI\"","String"),mi(#token("64","Int"),_6))),`_|->_`(#token("\"RDX\"","String"),mi(#token("64","Int"),_4))),`_|->_`(#token("\"RIP\"","String"),#token("64'18446744073709551615","MInt"))),`_|->_`(#token("\"RSI\"","String"),mi(#token("64","Int"),_5))),`_|->_`(#token("\"RSP\"","String"),ptr(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("0","Int")),#token("64'1024","MInt")))),`_|->_`(#token("\"SF\"","String"),_16)),`_|->_`(#token("\"ZF\"","String"),_18))),_35,_36,_37,_38,_39)
/\
#True(.KList)


STEP 1 v1 :    2.597 s, 		 3116 MB, gc:  0.000 %
===================
`<memory>`(`<nextLoc>`(#token("1","Int")),`<objects>`(mem(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1000","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1001","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1002","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1003","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1004","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1005","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1006","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1007","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1008","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1009","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1010","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1011","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1012","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1013","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1014","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1015","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1016","Int")),byte(#token("0","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1017","Int")),byte(#token("1","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1018","Int")),byte(#token("2","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1019","Int")),byte(#token("3","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1020","Int")),byte(#token("4","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1021","Int")),byte(#token("5","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1022","Int")),byte(#token("6","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1023","Int")),byte(#token("7","Int"),#token("64'-1","MInt")))))),`<freed>`(`.Set`(.KList)))

STEP 2 v1 :    3.277 s, 		 3468 MB, gc:  0.000 %
===================
`<memory>`(`<nextLoc>`(#token("1","Int")),`<objects>`(mem(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1000","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1001","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1002","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1003","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1004","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1005","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1006","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1007","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1008","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1009","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1010","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1011","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1012","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1013","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1014","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1015","Int")),byte(#token("0","Int"),`undefMInt_MINT-WRAPPER-SYNTAX`(.KList)))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1016","Int")),byte(#token("0","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1017","Int")),byte(#token("1","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1018","Int")),byte(#token("2","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1019","Int")),byte(#token("3","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1020","Int")),byte(#token("4","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1021","Int")),byte(#token("5","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1022","Int")),byte(#token("6","Int"),#token("64'-1","MInt")))),`_|->_`(symloc(#token("1","Int"),#token("128","Int"),#token("1024","Int"),#token("8","Int"),#token("1023","Int")),byte(#token("7","Int"),#token("64'-1","MInt")))))),`<freed>`(`.Set`(.KList)))

==========================================
Top term when exception was thrown:
==========================================

<generatedTop>(<k>(#KSequence(execinstr(___X86-SYNTAX(movq_X86-SYNTAX(.KList),, operandlist(%xmm1_X86-SYNTAX(.KList),, operandlist(%rbx_X86-SYNTAX(.KList),, .List{"operandlist"}(.KList))))), KItem(#"fetchNoDBG"))),, <functargets>(X86Id(#"_start") |-> ptr(symloc(Int(#"-1"),, Int(#"0"),, Int(#"0"),, Int(#"0"),, Int(#"0")),, MInt(#"64'0"))   ),, <rotargets>(.Map),, <datatargets>(.Map),, <bsstargets>(.Map),, <entrypoint>(#EmptyK()),, <nextLocPc>(_0_2128:MInt),, <lastseenlabel>(#EmptyK()),, <currentsection>(String(#""text"")),, <memstate>(<text>(code(ptr(symloc(Int(#"-1"),, Int(#"0"),, Int(#"0"),, Int(#"0"),, Int(#"0")),, MInt(#"64'0")) |-> storedInstr(___X86-SYNTAX(movq_X86-SYNTAX(.KList),, operandlist(%xmm1_X86-SYNTAX(.KList),, operandlist(%rbx_X86-SYNTAX(.KList),, .List{"operandlist"}(.KList))))) ptr(symloc(Int(#"-1"),, Int(#"0"),, Int(#"0"),, Int(#"0"),, Int(#"0")),, MInt(#"64'1")) |-> storedInstr(___X86-SYNTAX(ret_X86-SYNTAX(.KList),, .List{"operandlist"}(.KList)))   )),, <stack>(<memory>(<nextLoc>(Int(#"1")),, <objects>(mem(symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1006")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1005")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1004")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1003")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1002")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1001")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1000")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1023")) |-> byte(Int(#"7"),, MInt(#"64'-1")) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1022")) |-> byte(Int(#"6"),, MInt(#"64'-1")) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1021")) |-> byte(Int(#"5"),, MInt(#"64'-1")) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1020")) |-> byte(Int(#"4"),, MInt(#"64'-1")) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1019")) |-> byte(Int(#"3"),, MInt(#"64'-1")) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1018")) |-> byte(Int(#"2"),, MInt(#"64'-1")) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1017")) |-> byte(Int(#"1"),, MInt(#"64'-1")) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1016")) |-> byte(Int(#"0"),, MInt(#"64'-1")) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1015")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1014")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1013")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1012")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1011")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1010")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1009")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1008")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList)) symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"1007")) |-> byte(Int(#"0"),, undefMInt_MINT-WRAPPER-SYNTAX(.KList))   )),, <freed>(.Set)),, <stackbase>(stackBaseInfo(symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"0")),, MInt(#"64'1016"))),, <robase>(roBaseInfo(#EmptyK(),, #EmptyK(),, #EmptyK())),, <database>(dataBaseInfo(#EmptyK(),, #EmptyK(),, #EmptyK())),, <bssbase>(bssBaseInfo(#EmptyK(),, #EmptyK(),, #EmptyK())))),, <environment>(<argc>(#EmptyK()),, <argv>(#EmptyK())),, <regstate>(String(#""RBP"") |-> ptr(symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"0")),, MInt(#"64'1016")) String(#""CF"") |-> _9_2131:MInt String(#""AF"") |-> _7_2129:MInt String(#""RCX"") |-> mi(Int(#"64"),, V_RCX_2113:Int) String(#""RDX"") |-> mi(Int(#"64"),, V_RDX_2115:Int) String(#""RAX"") |-> mi(Int(#"64"),, V_RAX_2111:Int) String(#""RBX"") |-> mi(Int(#"64"),, V_RBX_2112:Int) String(#""RSI"") |-> mi(Int(#"64"),, V_RSI_2116:Int) String(#""ZF"") |-> _17_2139:MInt String(#""RSP"") |-> ptr(symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"0")),, MInt(#"64'1016")) String(#""SF"") |-> _15_2137:MInt String(#""RDI"") |-> mi(Int(#"64"),, V_RDI_2114:Int) String(#""PF"") |-> _13_2135:MInt String(#""OF"") |-> _11_2133:MInt String(#""RIP"") |-> ptr(symloc(Int(#"-1"),, Int(#"0"),, Int(#"0"),, Int(#"0"),, Int(#"0")),, MInt(#"64'1"))   ),, _35_2117:K,, _36_2118:K,, _37_2119:K,, _38_2120:K,, _39_2121:K)
/\
ConjunctiveFormula(
  init equalities:
    _==K_(_<Int_(V_RAX_2111:Int,, Int(#"18446744073709551616")),, Bool(#"true"))
    _==K_(_<Int_(V_RBX_2112:Int,, Int(#"18446744073709551616")),, Bool(#"true"))
    _==K_(_<Int_(V_RCX_2113:Int,, Int(#"18446744073709551616")),, Bool(#"true"))
    _==K_(_<Int_(V_RDI_2114:Int,, Int(#"18446744073709551616")),, Bool(#"true"))
    _==K_(_<Int_(V_RDX_2115:Int,, Int(#"18446744073709551616")),, Bool(#"true"))
    _==K_(_<Int_(V_RSI_2116:Int,, Int(#"18446744073709551616")),, Bool(#"true"))
    _==K_(_>=Int_(V_RAX_2111:Int,, Int(#"0")),, Bool(#"true"))
    _==K_(_>=Int_(V_RBX_2112:Int,, Int(#"0")),, Bool(#"true"))
    _==K_(_>=Int_(V_RCX_2113:Int,, Int(#"0")),, Bool(#"true"))
    _==K_(_>=Int_(V_RDI_2114:Int,, Int(#"0")),, Bool(#"true"))
    _==K_(_>=Int_(V_RDX_2115:Int,, Int(#"0")),, Bool(#"true"))
    _==K_(_>=Int_(V_RSI_2116:Int,, Int(#"0")),, Bool(#"true"))
)


SPEC ERROR: /home/ubuntu/Github/validating-binary-decompilation/tests/single_instruction_translation_validation/mcsema/register-variants/movq_r64_xmm/test-xspec.k Location(6,5,101,61)
==================================
Success execution paths: 0
Failed execution paths: 0
Paths in progress: 1
Longest path: 2 steps
Stats for each phase, time, used memory, implicit main GC time percentage:
Total                 :  199.345 s,	 3820 MB, gc:  4.241 %
  Parsing             :  194.868 s,	 1692 MB, gc:  4.338 %
  Init                :    0.607 s,	 1836 MB, gc:  0.000 %
  Execution           :    3.870 s,	 3820 MB, gc:  0.000 %

Init+Execution time:       4.477 s

  Time and top-level event counts:
  resolveFunctionAndAnywhere time  :    0.115 s,      #        537
    evaluateFunction time            :    0.083 s,      #        252
      builtin evaluation               :           ,      #        163
      function rule                    :           ,      #          4
      no function rules                :           ,      #         84
      other                            :           ,      #          1
    applyAnywhereRules time          :    0.001 s,      #        110
      no anywhere rules                :           ,      #        110
    remaining time & # cached        :    0.031 s,      #        175
  log time                         :    1.144 s,      #          3

  Recursive event counts:
  resolveFunctionAndAnywhere time  :           ,      #        153
    evaluateFunction time            :           ,      #         13
      builtin evaluation               :           ,      #          2
      function rule                    :           ,      #         10
      no function rules                :           ,      #          0
      other                            :           ,      #          1
    applyAnywhereRules time          :           ,      #          0
      no anywhere rules                :           ,      #          0
    # cached                         :           ,      #        140

Max memory : 262144 MB
==================================

[Error] Critical:  (Bad term not a k:
org.kframework.backend.java.kil.Bottom@2e756f52)
  while evaluating functional term:
	getRegisterValue(%ymm1_X86-SYNTAX(.KList),, String(#""RBP"") |->
ptr(symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"0")),,
MInt(#"64'1016")) String(#""CF"") |-> _9_2131:MInt String(#""AF"") |->
_7_2129:MInt String(#""RCX"") |-> mi(Int(#"64"),, V_RCX_2113:Int)
String(#""RDX"") |-> mi(Int(#"64"),, V_RDX_2115:Int) String(#""RAX"") |->
mi(Int(#"64"),, V_RAX_2111:Int) String(#""RBX"") |-> mi(Int(#"64"),,
V_RBX_2112:Int) String(#""RSI"") |-> mi(Int(#"64"),, V_RSI_2116:Int)
String(#""ZF"") |-> _17_2139:MInt String(#""RSP"") |-> ptr(symloc(Int(#"1"),,
Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"0")),, MInt(#"64'1016"))
String(#""SF"") |-> _15_2137:MInt String(#""RDI"") |-> mi(Int(#"64"),,
V_RDI_2114:Int) String(#""PF"") |-> _13_2135:MInt String(#""OF"") |->
_11_2133:MInt String(#""RIP"") |-> ptr(symloc(Int(#"-1"),, Int(#"0"),,
Int(#"0"),, Int(#"0"),, Int(#"0")),, MInt(#"64'1"))   )
  and applying the rule
  rule getRegisterValue(Y:Ymm, RSMap)  =>  {RSMap[convToRegKeys(Y)]}:>MInt
	Source:
/home/ubuntu/Github/X86-64-semantics/semantics/x86-abstract-semantics.k
Location(423,8,423,75)

  while evaluating function getRegisterValue
  while evaluating functional term:
	getParentValue(%xmm1_X86-SYNTAX(.KList),, String(#""RBP"") |->
ptr(symloc(Int(#"1"),, Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"0")),,
MInt(#"64'1016")) String(#""CF"") |-> _9_2131:MInt String(#""AF"") |->
_7_2129:MInt String(#""RCX"") |-> mi(Int(#"64"),, V_RCX_2113:Int)
String(#""RDX"") |-> mi(Int(#"64"),, V_RDX_2115:Int) String(#""RAX"") |->
mi(Int(#"64"),, V_RAX_2111:Int) String(#""RBX"") |-> mi(Int(#"64"),,
V_RBX_2112:Int) String(#""RSI"") |-> mi(Int(#"64"),, V_RSI_2116:Int)
String(#""ZF"") |-> _17_2139:MInt String(#""RSP"") |-> ptr(symloc(Int(#"1"),,
Int(#"128"),, Int(#"1024"),, Int(#"8"),, Int(#"0")),, MInt(#"64'1016"))
String(#""SF"") |-> _15_2137:MInt String(#""RDI"") |-> mi(Int(#"64"),,
V_RDI_2114:Int) String(#""PF"") |-> _13_2135:MInt String(#""OF"") |->
_11_2133:MInt String(#""RIP"") |-> ptr(symloc(Int(#"-1"),, Int(#"0"),,
Int(#"0"),, Int(#"0"),, Int(#"0")),, MInt(#"64'1"))   )
  and applying the rule
  rule getParentValue(R:Register, RSMap) =>
getRegisterValue(convSubRegsToRegs(R), RSMap)
	Source:
/home/ubuntu/Github/X86-64-semantics/semantics/x86-abstract-semantics.k
Location(427,8,427,90)

  while evaluating function getParentValue
Command exited with non-zero status 113
313.14user 251.35system 3:20.75elapsed 281%CPU (0avgtext+0avgdata 10607124maxresident)k
16inputs+178832outputs (0major+6941718minor)pagefaults 0swaps
