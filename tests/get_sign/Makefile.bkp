BINDIR=binary
PROG=get_sign
TOOLDIR=${HOME}/Github/validating-binary-decompilation/source/build/bin/
ARTIFACTDIR=${HOME}/Github/validating-binary-decompilation/single_instruction_translation_validation/tests/mcsema/compositional_artifacts/

C=${PROG}.c
BIN=${PROG}.bin
ASM=${PROG}.asm

$(info $$C is [${C}])
$(info $$BIN is [${BIN}])
$(info $$LABEL is [${LABEL}])
$(info  ) 

all: binary mcsema ldfg xdfg
.PHONY: clean binary mcsema

objdump: binary/${BIN}
	objdump -d $< > binary/${PROG}.objdump

mcsema:
	mkdir -p mcsema; \
	cd mcsema; \
	../../../scripts/mcsema_out.sh ../binary/${BIN} main ; \
        cd ..

ldfg:
	cd mcsema; \
        for llfile in `ls *.ll`; \
		do \
                ${TOOL} --decompiled-output $${llfile} --target-function _${PROG} --init-state-function _init_var_correspondence --llvm-dfg-dot-out $${llfile}.dot ; \
                dot -Tpdf $${llfile}.dot -o $${llfile}.pdf; \
                rm -rf $${llfile}.dot; \
        done; \
        cd ..

xdfg:
	${TOOL} --target binary/${ASM} --no-fresh-mem --x86-dfg-pdf-out mcsema/${PROG}.pdf

binary:
	gcc -O0 binary/${C} -o binary/${BIN}

opt:
	cd mcsema; \
	opt -S  -inline   test.proposed.ll -o test.proposed.inline.ll ; opt -S  -O3    test.proposed.inline.ll -o test.proposed.opt.ll; \
	opt -S  -inline   ${PROG}.bin.unoptimized.ll -o ${PROG}.bin.unoptimized.inline.ll ; opt -S  -O3    ${PROG}.bin.unoptimized.inline.ll -o ${PROG}.bin.unoptimized.opt.ll; \
        cd ..

match:
	cd mcsema; \
	~/Github/validating-binary-decompilation/source/build/bin/matcher --file1 get_sign.bin.unoptimized.opt.ll:sub_660_get_sign --file2 test.proposed.opt.ll:get_sign ; \
        cd ..

compd:
	cd mcsema; \
	~/Github/validating-binary-decompilation/source/build/bin/decompiler  --output test.proposed.ll --path ~/Github/validating-binary-decompilation/single_instruction_translation_validation/tests/mcsema/compositional_artifacts/ --function ${PROG} --input ../binary/${BIN}; \
        cd ..

clean:
	rm mcsema/*.bc mcsema/*.ll mcsema/*.dfg
